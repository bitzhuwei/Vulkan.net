<root>
<div class="sect1">
<h2 id="structs">Structures</h2>
<div class="sectionbody">
<div class="sect2">
<h3 id="_vkaccelerationstructurecreateinfonv3">VkAccelerationStructureCreateInfoNV(3)</h3>
<div class="sect3">
<h4 id="_name_364">Name</h4>
<div class="paragraph">
<p>VkAccelerationStructureCreateInfoNV - Structure specifying the parameters of a newly created acceleration structure object</p>
</div>
</div>
<div class="sect3">
<h4 id="_c_specification_364">C Specification</h4>
<div class="paragraph">
<p>The <code>VkAccelerationStructureCreateInfoNV</code> structure is defined as:</p>
</div>
<div id="VkAccelerationStructureCreateInfoNV" class="listingblock">
<div class="content">
<pre class="highlight"><code class="language-c++" data-lang="c++">typedef struct VkAccelerationStructureCreateInfoNV {
    VkStructureType                  sType;
    const void*                      pNext;
    VkDeviceSize                     compactedSize;
    VkAccelerationStructureInfoNV    info;
} VkAccelerationStructureCreateInfoNV;</code></pre>
</div>
</div>
</div>
<div class="sect3">
<h4 id="_members">Members</h4>
<div class="ulist">
<ul>
<li>
<p><code>sType</code> is the type of this structure.</p>
</li>
<li>
<p><code>pNext</code> is <code>NULL</code> or a pointer to an extension-specific structure.</p>
</li>
<li>
<p><code>compactedSize</code> is the size from the result of
<a href="#vkCmdWriteAccelerationStructuresPropertiesNV">vkCmdWriteAccelerationStructuresPropertiesNV</a> if this acceleration
structure is going to be the target of a compacting copy.</p>
</li>
<li>
<p><code>info</code> is the <a href="#VkAccelerationStructureInfoNV">VkAccelerationStructureInfoNV</a> structure that
specifies further parameters of the created acceleration structure.</p>
</li>
</ul>
</div>
</div>
<div class="sect3">
<h4 id="_description_364">Description</h4>
<div class="sidebarblock">
<div class="content">
<div class="title">Valid Usage</div>
<div class="ulist">
<ul>
<li>
<p><a id="VUID-VkAccelerationStructureCreateInfoNV-compactedSize-02421"></a>
If <code>compactedSize</code> is not <code>0</code> then both <code>info.geometryCount</code> and
<code>info.instanceCount</code> <strong class="purple">must</strong> be <code>0</code></p>
</li>
</ul>
</div>
</div>
</div>
<div class="sidebarblock">
<div class="content">
<div class="title">Valid Usage (Implicit)</div>
<div class="ulist">
<ul>
<li>
<p><a id="VUID-VkAccelerationStructureCreateInfoNV-sType-sType"></a> <code>sType</code> <strong class="purple">must</strong> be <code>VK_STRUCTURE_TYPE_ACCELERATION_STRUCTURE_CREATE_INFO_NV</code></p>
</li>
<li>
<p><a id="VUID-VkAccelerationStructureCreateInfoNV-pNext-pNext"></a> <code>pNext</code> <strong class="purple">must</strong> be <code>NULL</code></p>
</li>
<li>
<p><a id="VUID-VkAccelerationStructureCreateInfoNV-info-parameter"></a> <code>info</code> <strong class="purple">must</strong> be a valid <code>VkAccelerationStructureInfoNV</code> structure</p>
</li>
</ul>
</div>
</div>
</div>
</div>
<div class="sect3">
<h4 id="_see_also_364">See Also</h4>
<div class="paragraph">
<p><a href="#VkAccelerationStructureInfoNV">VkAccelerationStructureInfoNV</a>, <code>VkDeviceSize</code>, <a href="#VkStructureType">VkStructureType</a>, <a href="#vkCreateAccelerationStructureNV">vkCreateAccelerationStructureNV</a></p>
</div>
</div>
<div class="sect3">
<h4 id="_document_notes_364">Document Notes</h4>
<div class="paragraph">
<p>For more information, see the Vulkan Specification at URL</p>
</div>
<div class="paragraph">
<p><a href="https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VkAccelerationStructureCreateInfoNV" class="bare">https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VkAccelerationStructureCreateInfoNV</a></p>
</div>
<div class="paragraph">
<p>This page is extracted from the Vulkan Specification.
Fixes and changes should be made to the Specification, not directly.</p>
</div>
<div style="page-break-after: always;"></div>
</div>
</div>
<div class="sect2">
<h3 id="_vkaccelerationstructureinfonv3">VkAccelerationStructureInfoNV(3)</h3>
<div class="sect3">
<h4 id="_name_365">Name</h4>
<div class="paragraph">
<p>VkAccelerationStructureInfoNV - Structure specifying the parameters of acceleration structure object</p>
</div>
</div>
<div class="sect3">
<h4 id="_c_specification_365">C Specification</h4>
<div class="paragraph">
<p>The <code>VkAccelerationStructureInfoNV</code> structure is defined as:</p>
</div>
<div id="VkAccelerationStructureInfoNV" class="listingblock">
<div class="content">
<pre class="highlight"><code class="language-c++" data-lang="c++">typedef struct VkAccelerationStructureInfoNV {
    VkStructureType                        sType;
    const void*                            pNext;
    VkAccelerationStructureTypeNV          type;
    VkBuildAccelerationStructureFlagsNV    flags;
    uint32_t                               instanceCount;
    uint32_t                               geometryCount;
    const VkGeometryNV*                    pGeometries;
} VkAccelerationStructureInfoNV;</code></pre>
</div>
</div>
</div>
<div class="sect3">
<h4 id="_members_2">Members</h4>
<div class="ulist">
<ul>
<li>
<p><code>sType</code> is the type of this structure.</p>
</li>
<li>
<p><code>pNext</code> is <code>NULL</code> or a pointer to an extension-specific structure.</p>
</li>
<li>
<p><code>type</code> is a <a href="#VkAccelerationStructureTypeNV">VkAccelerationStructureTypeNV</a> value specifying the
type of acceleration structure that will be created.</p>
</li>
<li>
<p><code>flags</code> is a bitmask of <a href="#VkBuildAccelerationStructureFlagBitsNV">VkBuildAccelerationStructureFlagBitsNV</a>
specifying additional parameters of the acceleration structure.</p>
</li>
<li>
<p><code>instanceCount</code> specifies the number of instances that will be in
the new acceleration structure.</p>
</li>
<li>
<p><code>geometryCount</code> specifies the number of geometries that will be in
the new acceleration structure.</p>
</li>
<li>
<p><code>pGeometries</code> is an array of <a href="#VkGeometryNV">VkGeometryNV</a> structures, which
contain the scene data being passed into the acceleration structure.</p>
</li>
</ul>
</div>
</div>
<div class="sect3">
<h4 id="_description_365">Description</h4>
<div class="paragraph">
<p><code>VkAccelerationStructureInfoNV</code> contains information that is used both
for acceleration structure creation with
<code>vkCreateAccelerationStructureNV</code> and in combination with the actual
geometric data to build the acceleration structure with
<a href="#vkCmdBuildAccelerationStructureNV">vkCmdBuildAccelerationStructureNV</a>.</p>
</div>
<div class="sidebarblock">
<div class="content">
<div class="title">Valid Usage</div>
<div class="ulist">
<ul>
<li>
<p><a id="VUID-VkAccelerationStructureInfoNV-geometryCount-02422"></a>
<code>geometryCount</code> <strong class="purple">must</strong> be less than or equal to
<a href="#VkPhysicalDeviceRayTracingPropertiesNV">VkPhysicalDeviceRayTracingPropertiesNV</a>::<code>maxGeometryCount</code></p>
</li>
<li>
<p><a id="VUID-VkAccelerationStructureInfoNV-instanceCount-02423"></a>
<code>instanceCount</code> <strong class="purple">must</strong> be less than or equal to
<a href="#VkPhysicalDeviceRayTracingPropertiesNV">VkPhysicalDeviceRayTracingPropertiesNV</a>::<code>maxInstanceCount</code></p>
</li>
<li>
<p><a id="VUID-VkAccelerationStructureInfoNV-maxTriangleCount-02424"></a>
The total number of triangles in all geometries <strong class="purple">must</strong> be less than or
equal to
<a href="#VkPhysicalDeviceRayTracingPropertiesNV">VkPhysicalDeviceRayTracingPropertiesNV</a>::<code>maxTriangleCount</code></p>
</li>
<li>
<p><a id="VUID-VkAccelerationStructureInfoNV-type-02425"></a>
If <code>type</code> is <code>VK_ACCELERATION_STRUCTURE_TYPE_TOP_LEVEL_NV</code> then
<code>geometryCount</code> <strong class="purple">must</strong> be <code>0</code></p>
</li>
<li>
<p><a id="VUID-VkAccelerationStructureInfoNV-type-02426"></a>
If <code>type</code> is <code>VK_ACCELERATION_STRUCTURE_TYPE_BOTTOM_LEVEL_NV</code>
then <code>instanceCount</code> <strong class="purple">must</strong> be <code>0</code></p>
</li>
<li>
<p><a id="VUID-VkAccelerationStructureInfoNV-flags-02592"></a>
If <code>flags</code> has the
<code>VK_BUILD_ACCELERATION_STRUCTURE_PREFER_FAST_TRACE_BIT_NV</code> bit set,
then it <strong class="purple">must</strong> not have the
<code>VK_BUILD_ACCELERATION_STRUCTURE_PREFER_FAST_BUILD_BIT_NV</code> bit set</p>
</li>
</ul>
</div>
</div>
</div>
<div class="sidebarblock">
<div class="content">
<div class="title">Valid Usage (Implicit)</div>
<div class="ulist">
<ul>
<li>
<p><a id="VUID-VkAccelerationStructureInfoNV-sType-sType"></a> <code>sType</code> <strong class="purple">must</strong> be <code>VK_STRUCTURE_TYPE_ACCELERATION_STRUCTURE_INFO_NV</code></p>
</li>
<li>
<p><a id="VUID-VkAccelerationStructureInfoNV-pNext-pNext"></a> <code>pNext</code> <strong class="purple">must</strong> be <code>NULL</code></p>
</li>
<li>
<p><a id="VUID-VkAccelerationStructureInfoNV-type-parameter"></a> <code>type</code> <strong class="purple">must</strong> be a valid <a href="#VkAccelerationStructureTypeNV">VkAccelerationStructureTypeNV</a> value</p>
</li>
<li>
<p><a id="VUID-VkAccelerationStructureInfoNV-flags-parameter"></a> <code>flags</code> <strong class="purple">must</strong> be a valid combination of <a href="#VkBuildAccelerationStructureFlagBitsNV">VkBuildAccelerationStructureFlagBitsNV</a> values</p>
</li>
<li>
<p><a id="VUID-VkAccelerationStructureInfoNV-pGeometries-parameter"></a> If <code>geometryCount</code> is not <code>0</code>, <code>pGeometries</code> <strong class="purple">must</strong> be a valid pointer to an array of <code>geometryCount</code> valid <code>VkGeometryNV</code> structures</p>
</li>
</ul>
</div>
</div>
</div>
</div>
<div class="sect3">
<h4 id="_see_also_365">See Also</h4>
<div class="paragraph">
<p><a href="#VkAccelerationStructureCreateInfoNV">VkAccelerationStructureCreateInfoNV</a>, <a href="#VkAccelerationStructureTypeNV">VkAccelerationStructureTypeNV</a>, <a href="#VkBuildAccelerationStructureFlagsNV">VkBuildAccelerationStructureFlagsNV</a>, <a href="#VkGeometryNV">VkGeometryNV</a>, <a href="#VkStructureType">VkStructureType</a>, <a href="#vkCmdBuildAccelerationStructureNV">vkCmdBuildAccelerationStructureNV</a></p>
</div>
</div>
<div class="sect3">
<h4 id="_document_notes_365">Document Notes</h4>
<div class="paragraph">
<p>For more information, see the Vulkan Specification at URL</p>
</div>
<div class="paragraph">
<p><a href="https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VkAccelerationStructureInfoNV" class="bare">https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VkAccelerationStructureInfoNV</a></p>
</div>
<div class="paragraph">
<p>This page is extracted from the Vulkan Specification.
Fixes and changes should be made to the Specification, not directly.</p>
</div>
<div style="page-break-after: always;"></div>
</div>
</div>
<div class="sect2">
<h3 id="_vkaccelerationstructurememoryrequirementsinfonv3">VkAccelerationStructureMemoryRequirementsInfoNV(3)</h3>
<div class="sect3">
<h4 id="_name_366">Name</h4>
<div class="paragraph">
<p>VkAccelerationStructureMemoryRequirementsInfoNV - Structure specifying acceleration to query for memory requirements</p>
</div>
</div>
<div class="sect3">
<h4 id="_c_specification_366">C Specification</h4>
<div class="paragraph">
<p>The <code>VkAccelerationStructureMemoryRequirementsInfoNV</code> structure is
defined as:</p>
</div>
<div id="VkAccelerationStructureMemoryRequirementsInfoNV" class="listingblock">
<div class="content">
<pre class="highlight"><code class="language-c++" data-lang="c++">typedef struct VkAccelerationStructureMemoryRequirementsInfoNV {
    VkStructureType                                    sType;
    const void*                                        pNext;
    VkAccelerationStructureMemoryRequirementsTypeNV    type;
    VkAccelerationStructureNV                          accelerationStructure;
} VkAccelerationStructureMemoryRequirementsInfoNV;</code></pre>
</div>
</div>
</div>
<div class="sect3">
<h4 id="_members_3">Members</h4>
<div class="ulist">
<ul>
<li>
<p><code>sType</code> is the type of this structure.</p>
</li>
<li>
<p><code>pNext</code> is <code>NULL</code> or a pointer to an extension-specific structure.</p>
</li>
<li>
<p><code>type</code> selects the type of memory requirement being queried.
<code>VK_ACCELERATION_STRUCTURE_MEMORY_REQUIREMENTS_TYPE_OBJECT_NV</code>
returns the memory requirements for the object itself.
<code>VK_ACCELERATION_STRUCTURE_MEMORY_REQUIREMENTS_TYPE_BUILD_SCRATCH_NV</code>
returns the memory requirements for the scratch memory when doing a
build.
<code>VK_ACCELERATION_STRUCTURE_MEMORY_REQUIREMENTS_TYPE_UPDATE_SCRATCH_NV</code>
returns the memory requirements for the scratch memory when doing an
update.</p>
</li>
<li>
<p><code>accelerationStructure</code> is the acceleration structure to be queried
for memory requirements.</p>
</li>
</ul>
</div>
</div>
<div class="sect3">
<h4 id="_description_366">Description</h4>
<div class="sidebarblock">
<div class="content">
<div class="title">Valid Usage (Implicit)</div>
<div class="ulist">
<ul>
<li>
<p><a id="VUID-VkAccelerationStructureMemoryRequirementsInfoNV-sType-sType"></a> <code>sType</code> <strong class="purple">must</strong> be <code>VK_STRUCTURE_TYPE_ACCELERATION_STRUCTURE_MEMORY_REQUIREMENTS_INFO_NV</code></p>
</li>
<li>
<p><a id="VUID-VkAccelerationStructureMemoryRequirementsInfoNV-pNext-pNext"></a> <code>pNext</code> <strong class="purple">must</strong> be <code>NULL</code></p>
</li>
<li>
<p><a id="VUID-VkAccelerationStructureMemoryRequirementsInfoNV-type-parameter"></a> <code>type</code> <strong class="purple">must</strong> be a valid <a href="#VkAccelerationStructureMemoryRequirementsTypeNV">VkAccelerationStructureMemoryRequirementsTypeNV</a> value</p>
</li>
<li>
<p><a id="VUID-VkAccelerationStructureMemoryRequirementsInfoNV-accelerationStructure-parameter"></a> <code>accelerationStructure</code> <strong class="purple">must</strong> be a valid <code>VkAccelerationStructureNV</code> handle</p>
</li>
</ul>
</div>
</div>
</div>
</div>
<div class="sect3">
<h4 id="_see_also_366">See Also</h4>
<div class="paragraph">
<p><a href="#VkAccelerationStructureMemoryRequirementsTypeNV">VkAccelerationStructureMemoryRequirementsTypeNV</a>, <a href="#VkAccelerationStructureNV">VkAccelerationStructureNV</a>, <a href="#VkStructureType">VkStructureType</a>, <a href="#vkGetAccelerationStructureMemoryRequirementsNV">vkGetAccelerationStructureMemoryRequirementsNV</a></p>
</div>
</div>
<div class="sect3">
<h4 id="_document_notes_366">Document Notes</h4>
<div class="paragraph">
<p>For more information, see the Vulkan Specification at URL</p>
</div>
<div class="paragraph">
<p><a href="https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VkAccelerationStructureMemoryRequirementsInfoNV" class="bare">https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VkAccelerationStructureMemoryRequirementsInfoNV</a></p>
</div>
<div class="paragraph">
<p>This page is extracted from the Vulkan Specification.
Fixes and changes should be made to the Specification, not directly.</p>
</div>
<div style="page-break-after: always;"></div>
</div>
</div>
<div class="sect2">
<h3 id="_vkacquirenextimageinfokhr3">VkAcquireNextImageInfoKHR(3)</h3>
<div class="sect3">
<h4 id="_name_367">Name</h4>
<div class="paragraph">
<p>VkAcquireNextImageInfoKHR - Structure specifying parameters of the acquire</p>
</div>
</div>
<div class="sect3">
<h4 id="_c_specification_367">C Specification</h4>
<div class="paragraph">
<p>The <code>VkAcquireNextImageInfoKHR</code> structure is defined as:</p>
</div>
<div id="VkAcquireNextImageInfoKHR" class="listingblock">
<div class="content">
<pre class="highlight"><code class="language-c++" data-lang="c++">typedef struct VkAcquireNextImageInfoKHR {
    VkStructureType    sType;
    const void*        pNext;
    VkSwapchainKHR     swapchain;
    uint64_t           timeout;
    VkSemaphore        semaphore;
    VkFence            fence;
    uint32_t           deviceMask;
} VkAcquireNextImageInfoKHR;</code></pre>
</div>
</div>
</div>
<div class="sect3">
<h4 id="_members_4">Members</h4>
<div class="ulist">
<ul>
<li>
<p><code>sType</code> is the type of this structure.</p>
</li>
<li>
<p><code>pNext</code> is <code>NULL</code> or a pointer to an extension-specific structure.</p>
</li>
<li>
<p><code>swapchain</code> is a non-retired swapchain from which an image is
acquired.</p>
</li>
<li>
<p><code>timeout</code> specifies how long the function waits, in nanoseconds, if
no image is available.</p>
</li>
<li>
<p><code>semaphore</code> is <a href="#VK_NULL_HANDLE">VK_NULL_HANDLE</a> or a semaphore to signal.</p>
</li>
<li>
<p><code>fence</code> is <a href="#VK_NULL_HANDLE">VK_NULL_HANDLE</a> or a fence to signal.</p>
</li>
<li>
<p><code>deviceMask</code> is a mask of physical devices for which the swapchain
image will be ready to use when the semaphore or fence is signaled.</p>
</li>
</ul>
</div>
</div>
<div class="sect3">
<h4 id="_description_367">Description</h4>
<div class="paragraph">
<p>If <a href="#vkAcquireNextImageKHR">vkAcquireNextImageKHR</a> is used, the device mask is considered to
include all physical devices in the logical device.</p>
</div>
<div class="admonitionblock note">
<table>
<tr>
<td class="icon">
<i class="fa icon-note" title="Note"></i>
</td>
<td class="content">
<div class="title">Note</div>
<div class="paragraph">
<p><a href="#vkAcquireNextImage2KHR">vkAcquireNextImage2KHR</a> signals at most one semaphore, even if the
application requests waiting for multiple physical devices to be ready via
the <code>deviceMask</code>.
However, only a single physical device <strong class="purple">can</strong> wait on that semaphore, since
the semaphore becomes unsignaled when the wait succeeds.
For other physical devices to wait for the image to be ready, it is
necessary for the application to submit semaphore signal operation(s) to
that first physical device to signal additional semaphore(s) after the wait
succeeds, which the other physical device(s) <strong class="purple">can</strong> wait upon.</p>
</div>
</td>
</tr>
</table>
</div>
<div class="sidebarblock">
<div class="content">
<div class="title">Valid Usage</div>
<div class="ulist">
<ul>
<li>
<p><a id="VUID-VkAcquireNextImageInfoKHR-swapchain-01675"></a>
<code>swapchain</code> <strong class="purple">must</strong> not be in the retired state</p>
</li>
<li>
<p><a id="VUID-VkAcquireNextImageInfoKHR-semaphore-01288"></a>
If <code>semaphore</code> is not <a href="#VK_NULL_HANDLE">VK_NULL_HANDLE</a> it <strong class="purple">must</strong> be unsignaled</p>
</li>
<li>
<p><a id="VUID-VkAcquireNextImageInfoKHR-semaphore-01781"></a>
If <code>semaphore</code> is not <a href="#VK_NULL_HANDLE">VK_NULL_HANDLE</a> it <strong class="purple">must</strong> not have any
uncompleted signal or wait operations pending</p>
</li>
<li>
<p><a id="VUID-VkAcquireNextImageInfoKHR-fence-01289"></a>
If <code>fence</code> is not <a href="#VK_NULL_HANDLE">VK_NULL_HANDLE</a> it <strong class="purple">must</strong> be unsignaled and
<strong class="purple">must</strong> not be associated with any other queue command that has not yet
completed execution on that queue</p>
</li>
<li>
<p><a id="VUID-VkAcquireNextImageInfoKHR-semaphore-01782"></a>
<code>semaphore</code> and <code>fence</code> <strong class="purple">must</strong> not both be equal to
<a href="#VK_NULL_HANDLE">VK_NULL_HANDLE</a></p>
</li>
<li>
<p><a id="VUID-VkAcquireNextImageInfoKHR-deviceMask-01290"></a>
<code>deviceMask</code> <strong class="purple">must</strong> be a valid device mask</p>
</li>
<li>
<p><a id="VUID-VkAcquireNextImageInfoKHR-deviceMask-01291"></a>
<code>deviceMask</code> <strong class="purple">must</strong> not be zero</p>
</li>
</ul>
</div>
</div>
</div>
<div class="sidebarblock">
<div class="content">
<div class="title">Valid Usage (Implicit)</div>
<div class="ulist">
<ul>
<li>
<p><a id="VUID-VkAcquireNextImageInfoKHR-sType-sType"></a> <code>sType</code> <strong class="purple">must</strong> be <code>VK_STRUCTURE_TYPE_ACQUIRE_NEXT_IMAGE_INFO_KHR</code></p>
</li>
<li>
<p><a id="VUID-VkAcquireNextImageInfoKHR-pNext-pNext"></a> <code>pNext</code> <strong class="purple">must</strong> be <code>NULL</code></p>
</li>
<li>
<p><a id="VUID-VkAcquireNextImageInfoKHR-swapchain-parameter"></a> <code>swapchain</code> <strong class="purple">must</strong> be a valid <code>VkSwapchainKHR</code> handle</p>
</li>
<li>
<p><a id="VUID-VkAcquireNextImageInfoKHR-semaphore-parameter"></a> If <code>semaphore</code> is not <a href="#VK_NULL_HANDLE">VK_NULL_HANDLE</a>, <code>semaphore</code> <strong class="purple">must</strong> be a valid <code>VkSemaphore</code> handle</p>
</li>
<li>
<p><a id="VUID-VkAcquireNextImageInfoKHR-fence-parameter"></a> If <code>fence</code> is not <a href="#VK_NULL_HANDLE">VK_NULL_HANDLE</a>, <code>fence</code> <strong class="purple">must</strong> be a valid <code>VkFence</code> handle</p>
</li>
<li>
<p><a id="VUID-VkAcquireNextImageInfoKHR-commonparent"></a> Each of <code>fence</code>, <code>semaphore</code>, and <code>swapchain</code> that are valid handles <strong class="purple">must</strong> have been created, allocated, or retrieved from the same <code>VkInstance</code></p>
</li>
</ul>
</div>
</div>
</div>
<div class="sidebarblock">
<div class="content">
<div class="title">Host Synchronization</div>
<div class="ulist">
<ul>
<li>
<p>Host access to <code>swapchain</code> <strong class="purple">must</strong> be externally synchronized</p>
</li>
<li>
<p>Host access to <code>semaphore</code> <strong class="purple">must</strong> be externally synchronized</p>
</li>
<li>
<p>Host access to <code>fence</code> <strong class="purple">must</strong> be externally synchronized</p>
</li>
</ul>
</div>
</div>
</div>
</div>
<div class="sect3">
<h4 id="_see_also_367">See Also</h4>
<div class="paragraph">
<p><a href="#VkFence">VkFence</a>, <a href="#VkSemaphore">VkSemaphore</a>, <a href="#VkStructureType">VkStructureType</a>, <a href="#VkSwapchainKHR">VkSwapchainKHR</a>, <a href="#vkAcquireNextImage2KHR">vkAcquireNextImage2KHR</a></p>
</div>
</div>
<div class="sect3">
<h4 id="_document_notes_367">Document Notes</h4>
<div class="paragraph">
<p>For more information, see the Vulkan Specification at URL</p>
</div>
<div class="paragraph">
<p><a href="https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VkAcquireNextImageInfoKHR" class="bare">https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VkAcquireNextImageInfoKHR</a></p>
</div>
<div class="paragraph">
<p>This page is extracted from the Vulkan Specification.
Fixes and changes should be made to the Specification, not directly.</p>
</div>
<div style="page-break-after: always;"></div>
</div>
</div>
<div class="sect2">
<h3 id="_vkallocationcallbacks3">VkAllocationCallbacks(3)</h3>
<div class="sect3">
<h4 id="_name_368">Name</h4>
<div class="paragraph">
<p>VkAllocationCallbacks - Structure containing callback function pointers for memory allocation</p>
</div>
</div>
<div class="sect3">
<h4 id="_c_specification_368">C Specification</h4>
<div class="paragraph">
<p>Allocators are provided by the application as a pointer to a
<code>VkAllocationCallbacks</code> structure:</p>
</div>
<div id="VkAllocationCallbacks" class="listingblock">
<div class="content">
<pre class="highlight"><code class="language-c++" data-lang="c++">typedef struct VkAllocationCallbacks {
    void*                                   pUserData;
    PFN_vkAllocationFunction                pfnAllocation;
    PFN_vkReallocationFunction              pfnReallocation;
    PFN_vkFreeFunction                      pfnFree;
    PFN_vkInternalAllocationNotification    pfnInternalAllocation;
    PFN_vkInternalFreeNotification          pfnInternalFree;
} VkAllocationCallbacks;</code></pre>
</div>
</div>
</div>
<div class="sect3">
<h4 id="_members_5">Members</h4>
<div class="ulist">
<ul>
<li>
<p><code>pUserData</code> is a value to be interpreted by the implementation of
the callbacks.
When any of the callbacks in <code>VkAllocationCallbacks</code> are called, the
Vulkan implementation will pass this value as the first parameter to the
callback.
This value <strong class="purple">can</strong> vary each time an allocator is passed into a command,
even when the same object takes an allocator in multiple commands.</p>
</li>
<li>
<p><code>pfnAllocation</code> is a pointer to an application-defined memory
allocation function of type <a href="#PFN_vkAllocationFunction">PFN_vkAllocationFunction</a>.</p>
</li>
<li>
<p><code>pfnReallocation</code> is a pointer to an application-defined memory
reallocation function of type <a href="#PFN_vkReallocationFunction">PFN_vkReallocationFunction</a>.</p>
</li>
<li>
<p><code>pfnFree</code> is a pointer to an application-defined memory free
function of type <a href="#PFN_vkFreeFunction">PFN_vkFreeFunction</a>.</p>
</li>
<li>
<p><code>pfnInternalAllocation</code> is a pointer to an application-defined
function that is called by the implementation when the implementation
makes internal allocations, and it is of type
<a href="#PFN_vkInternalAllocationNotification">PFN_vkInternalAllocationNotification</a>.</p>
</li>
<li>
<p><code>pfnInternalFree</code> is a pointer to an application-defined function
that is called by the implementation when the implementation frees
internal allocations, and it is of type
<a href="#PFN_vkInternalFreeNotification">PFN_vkInternalFreeNotification</a>.</p>
</li>
</ul>
</div>
</div>
<div class="sect3">
<h4 id="_description_368">Description</h4>
<div class="sidebarblock">
<div class="content">
<div class="title">Valid Usage</div>
<div class="ulist">
<ul>
<li>
<p><a id="VUID-VkAllocationCallbacks-pfnAllocation-00632"></a>
<code>pfnAllocation</code> <strong class="purple">must</strong> be a valid pointer to a valid user-defined
<a href="#PFN_vkAllocationFunction">PFN_vkAllocationFunction</a></p>
</li>
<li>
<p><a id="VUID-VkAllocationCallbacks-pfnReallocation-00633"></a>
<code>pfnReallocation</code> <strong class="purple">must</strong> be a valid pointer to a valid user-defined
<a href="#PFN_vkReallocationFunction">PFN_vkReallocationFunction</a></p>
</li>
<li>
<p><a id="VUID-VkAllocationCallbacks-pfnFree-00634"></a>
<code>pfnFree</code> <strong class="purple">must</strong> be a valid pointer to a valid user-defined
<a href="#PFN_vkFreeFunction">PFN_vkFreeFunction</a></p>
</li>
<li>
<p><a id="VUID-VkAllocationCallbacks-pfnInternalAllocation-00635"></a>
If either of <code>pfnInternalAllocation</code> or <code>pfnInternalFree</code> is not
<code>NULL</code>, both <strong class="purple">must</strong> be valid callbacks</p>
</li>
</ul>
</div>
</div>
</div>
</div>
<div class="sect3">
<h4 id="_see_also_368">See Also</h4>
<div class="paragraph">
<p><a href="#PFN_vkAllocationFunction">PFN_vkAllocationFunction</a>, <a href="#PFN_vkFreeFunction">PFN_vkFreeFunction</a>, <a href="#PFN_vkInternalAllocationNotification">PFN_vkInternalAllocationNotification</a>, <a href="#PFN_vkInternalFreeNotification">PFN_vkInternalFreeNotification</a>, <a href="#PFN_vkReallocationFunction">PFN_vkReallocationFunction</a>, <a href="#vkAllocateMemory">vkAllocateMemory</a>, <a href="#vkCreateAccelerationStructureNV">vkCreateAccelerationStructureNV</a>, <a href="#vkCreateAndroidSurfaceKHR">vkCreateAndroidSurfaceKHR</a>, <a href="#vkCreateBuffer">vkCreateBuffer</a>, <a href="#vkCreateBufferView">vkCreateBufferView</a>, <a href="#vkCreateCommandPool">vkCreateCommandPool</a>, <a href="#vkCreateComputePipelines">vkCreateComputePipelines</a>, <a href="#vkCreateDebugReportCallbackEXT">vkCreateDebugReportCallbackEXT</a>, <a href="#vkCreateDebugUtilsMessengerEXT">vkCreateDebugUtilsMessengerEXT</a>, <a href="#vkCreateDescriptorPool">vkCreateDescriptorPool</a>, <a href="#vkCreateDescriptorSetLayout">vkCreateDescriptorSetLayout</a>, <a href="#vkCreateDescriptorUpdateTemplate">vkCreateDescriptorUpdateTemplate</a>, <a href="#vkCreateDescriptorUpdateTemplateKHR">vkCreateDescriptorUpdateTemplateKHR</a>, <a href="#vkCreateDevice">vkCreateDevice</a>, <a href="#vkCreateDisplayModeKHR">vkCreateDisplayModeKHR</a>, <a href="#vkCreateDisplayPlaneSurfaceKHR">vkCreateDisplayPlaneSurfaceKHR</a>, <a href="#vkCreateEvent">vkCreateEvent</a>, <a href="#vkCreateFence">vkCreateFence</a>, <a href="#vkCreateFramebuffer">vkCreateFramebuffer</a>, <a href="#vkCreateGraphicsPipelines">vkCreateGraphicsPipelines</a>, <a href="#vkCreateIOSSurfaceMVK">vkCreateIOSSurfaceMVK</a>, <a href="#vkCreateImage">vkCreateImage</a>, <a href="#vkCreateImagePipeSurfaceFUCHSIA">vkCreateImagePipeSurfaceFUCHSIA</a>, <a href="#vkCreateImageView">vkCreateImageView</a>, <a href="#vkCreateIndirectCommandsLayoutNVX">vkCreateIndirectCommandsLayoutNVX</a>, <a href="#vkCreateInstance">vkCreateInstance</a>, <a href="#vkCreateMacOSSurfaceMVK">vkCreateMacOSSurfaceMVK</a>, <a href="#vkCreateMetalSurfaceEXT">vkCreateMetalSurfaceEXT</a>, <a href="#vkCreateObjectTableNVX">vkCreateObjectTableNVX</a>, <a href="#vkCreatePipelineCache">vkCreatePipelineCache</a>, <a href="#vkCreatePipelineLayout">vkCreatePipelineLayout</a>, <a href="#vkCreateQueryPool">vkCreateQueryPool</a>, <a href="#vkCreateRayTracingPipelinesNV">vkCreateRayTracingPipelinesNV</a>, <a href="#vkCreateRenderPass">vkCreateRenderPass</a>, <a href="#vkCreateRenderPass2KHR">vkCreateRenderPass2KHR</a>, <a href="#vkCreateSampler">vkCreateSampler</a>, <a href="#vkCreateSamplerYcbcrConversion">vkCreateSamplerYcbcrConversion</a>, <a href="#vkCreateSamplerYcbcrConversionKHR">vkCreateSamplerYcbcrConversionKHR</a>, <a href="#vkCreateSemaphore">vkCreateSemaphore</a>, <a href="#vkCreateShaderModule">vkCreateShaderModule</a>, <a href="#vkCreateSharedSwapchainsKHR">vkCreateSharedSwapchainsKHR</a>, <a href="#vkCreateStreamDescriptorSurfaceGGP">vkCreateStreamDescriptorSurfaceGGP</a>, <a href="#vkCreateSwapchainKHR">vkCreateSwapchainKHR</a>, <a href="#vkCreateValidationCacheEXT">vkCreateValidationCacheEXT</a>, <a href="#vkCreateViSurfaceNN">vkCreateViSurfaceNN</a>, <a href="#vkCreateWaylandSurfaceKHR">vkCreateWaylandSurfaceKHR</a>, <a href="#vkCreateWin32SurfaceKHR">vkCreateWin32SurfaceKHR</a>, <a href="#vkCreateXcbSurfaceKHR">vkCreateXcbSurfaceKHR</a>, <a href="#vkCreateXlibSurfaceKHR">vkCreateXlibSurfaceKHR</a>, <a href="#vkDestroyAccelerationStructureNV">vkDestroyAccelerationStructureNV</a>, <a href="#vkDestroyBuffer">vkDestroyBuffer</a>, <a href="#vkDestroyBufferView">vkDestroyBufferView</a>, <a href="#vkDestroyCommandPool">vkDestroyCommandPool</a>, <a href="#vkDestroyDebugReportCallbackEXT">vkDestroyDebugReportCallbackEXT</a>, <a href="#vkDestroyDebugUtilsMessengerEXT">vkDestroyDebugUtilsMessengerEXT</a>, <a href="#vkDestroyDescriptorPool">vkDestroyDescriptorPool</a>, <a href="#vkDestroyDescriptorSetLayout">vkDestroyDescriptorSetLayout</a>, <a href="#vkDestroyDescriptorUpdateTemplate">vkDestroyDescriptorUpdateTemplate</a>, <a href="#vkDestroyDescriptorUpdateTemplateKHR">vkDestroyDescriptorUpdateTemplateKHR</a>, <a href="#vkDestroyDevice">vkDestroyDevice</a>, <a href="#vkDestroyEvent">vkDestroyEvent</a>, <a href="#vkDestroyFence">vkDestroyFence</a>, <a href="#vkDestroyFramebuffer">vkDestroyFramebuffer</a>, <a href="#vkDestroyImage">vkDestroyImage</a>, <a href="#vkDestroyImageView">vkDestroyImageView</a>, <a href="#vkDestroyIndirectCommandsLayoutNVX">vkDestroyIndirectCommandsLayoutNVX</a>, <a href="#vkDestroyInstance">vkDestroyInstance</a>, <a href="#vkDestroyObjectTableNVX">vkDestroyObjectTableNVX</a>, <a href="#vkDestroyPipeline">vkDestroyPipeline</a>, <a href="#vkDestroyPipelineCache">vkDestroyPipelineCache</a>, <a href="#vkDestroyPipelineLayout">vkDestroyPipelineLayout</a>, <a href="#vkDestroyQueryPool">vkDestroyQueryPool</a>, <a href="#vkDestroyRenderPass">vkDestroyRenderPass</a>, <a href="#vkDestroySampler">vkDestroySampler</a>, <a href="#vkDestroySamplerYcbcrConversion">vkDestroySamplerYcbcrConversion</a>, <a href="#vkDestroySamplerYcbcrConversionKHR">vkDestroySamplerYcbcrConversionKHR</a>, <a href="#vkDestroySemaphore">vkDestroySemaphore</a>, <a href="#vkDestroyShaderModule">vkDestroyShaderModule</a>, <a href="#vkDestroySurfaceKHR">vkDestroySurfaceKHR</a>, <a href="#vkDestroySwapchainKHR">vkDestroySwapchainKHR</a>, <a href="#vkDestroyValidationCacheEXT">vkDestroyValidationCacheEXT</a>, <a href="#vkFreeMemory">vkFreeMemory</a>, <a href="#vkRegisterDeviceEventEXT">vkRegisterDeviceEventEXT</a>, <a href="#vkRegisterDisplayEventEXT">vkRegisterDisplayEventEXT</a></p>
</div>
</div>
<div class="sect3">
<h4 id="_document_notes_368">Document Notes</h4>
<div class="paragraph">
<p>For more information, see the Vulkan Specification at URL</p>
</div>
<div class="paragraph">
<p><a href="https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VkAllocationCallbacks" class="bare">https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VkAllocationCallbacks</a></p>
</div>
<div class="paragraph">
<p>This page is extracted from the Vulkan Specification.
Fixes and changes should be made to the Specification, not directly.</p>
</div>
<div style="page-break-after: always;"></div>
</div>
</div>
<div class="sect2">
<h3 id="_vkandroidhardwarebufferformatpropertiesandroid3">VkAndroidHardwareBufferFormatPropertiesANDROID(3)</h3>
<div class="sect3">
<h4 id="_name_369">Name</h4>
<div class="paragraph">
<p>VkAndroidHardwareBufferFormatPropertiesANDROID - Structure describing the image format properties of an Android hardware buffer</p>
</div>
</div>
<div class="sect3">
<h4 id="_c_specification_369">C Specification</h4>
<div class="paragraph">
<p>To obtain format properties of an Android hardware buffer, include an
instance of <code>VkAndroidHardwareBufferFormatPropertiesANDROID</code> in the
<code>pNext</code> chain of the <a href="#VkAndroidHardwareBufferPropertiesANDROID">VkAndroidHardwareBufferPropertiesANDROID</a>
instance passed to <a href="#vkGetAndroidHardwareBufferPropertiesANDROID">vkGetAndroidHardwareBufferPropertiesANDROID</a>.
This structure is defined as:</p>
</div>
<div id="VkAndroidHardwareBufferFormatPropertiesANDROID" class="listingblock">
<div class="content">
<pre class="highlight"><code class="language-c++" data-lang="c++">typedef struct VkAndroidHardwareBufferFormatPropertiesANDROID {
    VkStructureType                  sType;
    void*                            pNext;
    VkFormat                         format;
    uint64_t                         externalFormat;
    VkFormatFeatureFlags             formatFeatures;
    VkComponentMapping               samplerYcbcrConversionComponents;
    VkSamplerYcbcrModelConversion    suggestedYcbcrModel;
    VkSamplerYcbcrRange              suggestedYcbcrRange;
    VkChromaLocation                 suggestedXChromaOffset;
    VkChromaLocation                 suggestedYChromaOffset;
} VkAndroidHardwareBufferFormatPropertiesANDROID;</code></pre>
</div>
</div>
</div>
<div class="sect3">
<h4 id="_members_6">Members</h4>
<div class="ulist">
<ul>
<li>
<p><code>sType</code> is the type of this structure.</p>
</li>
<li>
<p><code>pNext</code> is <code>NULL</code> or a pointer to an extension-specific structure.</p>
</li>
<li>
<p><code>format</code> is the Vulkan format corresponding to the Android hardware
buffer&#8217;s format, or <code>VK_FORMAT_UNDEFINED</code> if there is not an
equivalent Vulkan format.</p>
</li>
<li>
<p><code>externalFormat</code> is an implementation-defined external format
identifier for use with <a href="#VkExternalFormatANDROID">VkExternalFormatANDROID</a>.
It <strong class="purple">must</strong> not be zero.</p>
</li>
<li>
<p><code>formatFeatures</code> describes the capabilities of this external format
when used with an image bound to memory imported from <code>buffer</code>.</p>
</li>
<li>
<p><code>samplerYcbcrConversionComponents</code> is the component swizzle that
<strong class="purple">should</strong> be used in <a href="#VkSamplerYcbcrConversionCreateInfo">VkSamplerYcbcrConversionCreateInfo</a>.</p>
</li>
<li>
<p><code>suggestedYcbcrModel</code> is a suggested color model to use in the
<a href="#VkSamplerYcbcrConversionCreateInfo">VkSamplerYcbcrConversionCreateInfo</a>.</p>
</li>
<li>
<p><code>suggestedYcbcrRange</code> is a suggested numerical value range to use in
<a href="#VkSamplerYcbcrConversionCreateInfo">VkSamplerYcbcrConversionCreateInfo</a>.</p>
</li>
<li>
<p><code>suggestedXChromaOffset</code> is a suggested X chroma offset to use in
<a href="#VkSamplerYcbcrConversionCreateInfo">VkSamplerYcbcrConversionCreateInfo</a>.</p>
</li>
<li>
<p><code>suggestedYChromaOffset</code> is a suggested Y chroma offset to use in
<a href="#VkSamplerYcbcrConversionCreateInfo">VkSamplerYcbcrConversionCreateInfo</a>.</p>
</li>
</ul>
</div>
</div>
<div class="sect3">
<h4 id="_description_369">Description</h4>
<div class="paragraph">
<p>If the Android hardware buffer has one of the formats listed in the
<a href="vkspec.html#memory-external-android-hardware-buffer-formats">Format Equivalence
table</a>, then <code>format</code> <strong class="purple">must</strong> have the equivalent Vulkan format listed in
the table.
Otherwise, <code>format</code> <strong class="purple">may</strong> be <code>VK_FORMAT_UNDEFINED</code>, indicating the
Android hardware buffer <strong class="purple">can</strong> only be used with an external format.</p>
</div>
<div class="paragraph">
<p>The <code>formatFeatures</code> member <strong class="purple">must</strong> include
<code>VK_FORMAT_FEATURE_SAMPLED_IMAGE_BIT</code> and at least one of
<code>VK_FORMAT_FEATURE_MIDPOINT_CHROMA_SAMPLES_BIT</code> or
<code>VK_FORMAT_FEATURE_COSITED_CHROMA_SAMPLES_BIT</code>, and <strong class="purple">should</strong> include
<code>VK_FORMAT_FEATURE_SAMPLED_IMAGE_FILTER_LINEAR_BIT</code> and
<code>VK_FORMAT_FEATURE_SAMPLED_IMAGE_YCBCR_CONVERSION_LINEAR_FILTER_BIT</code>.</p>
</div>
<div class="admonitionblock note">
<table>
<tr>
<td class="icon">
<i class="fa icon-note" title="Note"></i>
</td>
<td class="content">
<div class="title">Note</div>
<div class="paragraph">
<p>The <code>formatFeatures</code> member only indicates the features available when
using an
<a href="vkspec.html#memory-external-android-hardware-buffer-external-formats">external-format
image</a> created from the Android hardware buffer.
Images from Android hardware buffers with a format other than
<code>VK_FORMAT_UNDEFINED</code> are subject to the format capabilities obtained
from <a href="#vkGetPhysicalDeviceFormatProperties2">vkGetPhysicalDeviceFormatProperties2</a>, and
<a href="#vkGetPhysicalDeviceImageFormatProperties2">vkGetPhysicalDeviceImageFormatProperties2</a> with appropriate parameters.
These sets of features are independent of each other, e.g. the external
format will support sampler Y&#8217;C<sub>B</sub>C<sub>R</sub> conversion even if the non-external
format does not, and writing to non-external format images is possible but
writing to external format images is not.</p>
</div>
</td>
</tr>
</table>
</div>
<div class="paragraph">
<p>Android hardware buffers with the same external format <strong class="purple">must</strong> have the same
support for <code>VK_FORMAT_FEATURE_SAMPLED_IMAGE_FILTER_LINEAR_BIT</code>,
<code>VK_FORMAT_FEATURE_MIDPOINT_CHROMA_SAMPLES_BIT</code>,
<code>VK_FORMAT_FEATURE_COSITED_CHROMA_SAMPLES_BIT</code>,
<code>VK_FORMAT_FEATURE_SAMPLED_IMAGE_YCBCR_CONVERSION_LINEAR_FILTER_BIT</code>,
<code>VK_FORMAT_FEATURE_SAMPLED_IMAGE_YCBCR_CONVERSION_SEPARATE_RECONSTRUCTION_FILTER_BIT</code>,
and
<code>VK_FORMAT_FEATURE_SAMPLED_IMAGE_YCBCR_CONVERSION_CHROMA_RECONSTRUCTION_EXPLICIT_FORCEABLE_BIT</code>.
in <code>formatFeatures</code>.
Other format features <strong class="purple">may</strong> differ between Android hardware buffers that have
the same external format.
This allows applications to use the same <a href="#VkSamplerYcbcrConversion">VkSamplerYcbcrConversion</a>
object (and samplers and pipelines created from them) for any Android
hardware buffers that have the same external format.</p>
</div>
<div class="paragraph">
<p>If <code>format</code> is not <code>VK_FORMAT_UNDEFINED</code>, then the value of
<code>samplerYcbcrConversionComponents</code> <strong class="purple">must</strong> be valid when used as the
<code>components</code> member of <a href="#VkSamplerYcbcrConversionCreateInfo">VkSamplerYcbcrConversionCreateInfo</a> with
that format.
If <code>format</code> is <code>VK_FORMAT_UNDEFINED</code>, all members of
<code>samplerYcbcrConversionComponents</code> <strong class="purple">must</strong> be
<code>VK_COMPONENT_SWIZZLE_IDENTITY</code>.</p>
</div>
<div class="paragraph">
<p>Implementations <strong class="purple">may</strong> not always be able to determine the color model,
numerical range, or chroma offsets of the image contents, so the values in
<code>VkAndroidHardwareBufferFormatPropertiesANDROID</code> are only suggestions.
Applications <strong class="purple">should</strong> treat these values as sensible defaults to use in the
absence of more reliable information obtained through some other means.
If the underlying physical device is also usable via OpenGL ES with the
<a href="https://www.khronos.org/registry/OpenGL/extensions/OES/OES_EGL_image_external.txt"><code>GL_OES_EGL_image_external</code></a>
extension, the implementation <strong class="purple">should</strong> suggest values that will produce
similar sampled values as would be obtained by sampling the same external
image via <code>samplerExternalOES</code> in OpenGL ES using equivalent sampler
parameters.</p>
</div>
<div class="admonitionblock note">
<table>
<tr>
<td class="icon">
<i class="fa icon-note" title="Note"></i>
</td>
<td class="content">
<div class="title">Note</div>
<div class="paragraph">
<p>Since
<a href="https://www.khronos.org/registry/OpenGL/extensions/OES/OES_EGL_image_external.txt"><code>GL_OES_EGL_image_external</code></a>
does not require the same sampling and conversion calculations as Vulkan
does, achieving identical results between APIs <strong class="purple">may</strong> not be possible on some
implementations.</p>
</div>
</td>
</tr>
</table>
</div>
<div class="sidebarblock">
<div class="content">
<div class="title">Valid Usage (Implicit)</div>
<div class="ulist">
<ul>
<li>
<p><a id="VUID-VkAndroidHardwareBufferFormatPropertiesANDROID-sType-sType"></a> <code>sType</code> <strong class="purple">must</strong> be <code>VK_STRUCTURE_TYPE_ANDROID_HARDWARE_BUFFER_FORMAT_PROPERTIES_ANDROID</code></p>
</li>
</ul>
</div>
</div>
</div>
</div>
<div class="sect3">
<h4 id="_see_also_369">See Also</h4>
<div class="paragraph">
<p><a href="#VkChromaLocation">VkChromaLocation</a>, <a href="#VkComponentMapping">VkComponentMapping</a>, <a href="#VkFormat">VkFormat</a>, <a href="#VkFormatFeatureFlags">VkFormatFeatureFlags</a>, <a href="#VkSamplerYcbcrModelConversion">VkSamplerYcbcrModelConversion</a>, <a href="#VkSamplerYcbcrRange">VkSamplerYcbcrRange</a>, <a href="#VkStructureType">VkStructureType</a></p>
</div>
</div>
<div class="sect3">
<h4 id="_document_notes_369">Document Notes</h4>
<div class="paragraph">
<p>For more information, see the Vulkan Specification at URL</p>
</div>
<div class="paragraph">
<p><a href="https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VkAndroidHardwareBufferFormatPropertiesANDROID" class="bare">https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VkAndroidHardwareBufferFormatPropertiesANDROID</a></p>
</div>
<div class="paragraph">
<p>This page is extracted from the Vulkan Specification.
Fixes and changes should be made to the Specification, not directly.</p>
</div>
<div style="page-break-after: always;"></div>
</div>
</div>
<div class="sect2">
<h3 id="_vkandroidhardwarebufferpropertiesandroid3">VkAndroidHardwareBufferPropertiesANDROID(3)</h3>
<div class="sect3">
<h4 id="_name_370">Name</h4>
<div class="paragraph">
<p>VkAndroidHardwareBufferPropertiesANDROID - Properties of External Memory Android Hardware Buffers</p>
</div>
</div>
<div class="sect3">
<h4 id="_c_specification_370">C Specification</h4>
<div class="paragraph">
<p>The <code>VkAndroidHardwareBufferPropertiesANDROID</code> structure returned is
defined as:</p>
</div>
<div id="VkAndroidHardwareBufferPropertiesANDROID" class="listingblock">
<div class="content">
<pre class="highlight"><code class="language-c++" data-lang="c++">typedef struct VkAndroidHardwareBufferPropertiesANDROID {
    VkStructureType    sType;
    void*              pNext;
    VkDeviceSize       allocationSize;
    uint32_t           memoryTypeBits;
} VkAndroidHardwareBufferPropertiesANDROID;</code></pre>
</div>
</div>
</div>
<div class="sect3">
<h4 id="_members_7">Members</h4>
<div class="ulist">
<ul>
<li>
<p><code>sType</code> is the type of this structure.</p>
</li>
<li>
<p><code>pNext</code> is <code>NULL</code> or a pointer to an extension-specific structure.</p>
</li>
<li>
<p><code>allocationSize</code> is the size of the external memory</p>
</li>
<li>
<p><code>memoryTypeBits</code> is a bitmask containing one bit set for every
memory type which the specified Android hardware buffer <strong class="purple">can</strong> be imported
as.</p>
</li>
</ul>
</div>
</div>
<div class="sect3">
<h4 id="_description_370">Description</h4>
<div class="sidebarblock">
<div class="content">
<div class="title">Valid Usage (Implicit)</div>
<div class="ulist">
<ul>
<li>
<p><a id="VUID-VkAndroidHardwareBufferPropertiesANDROID-sType-sType"></a> <code>sType</code> <strong class="purple">must</strong> be <code>VK_STRUCTURE_TYPE_ANDROID_HARDWARE_BUFFER_PROPERTIES_ANDROID</code></p>
</li>
<li>
<p><a id="VUID-VkAndroidHardwareBufferPropertiesANDROID-pNext-pNext"></a> <code>pNext</code> <strong class="purple">must</strong> be <code>NULL</code> or a pointer to a valid instance of <a href="#VkAndroidHardwareBufferFormatPropertiesANDROID">VkAndroidHardwareBufferFormatPropertiesANDROID</a></p>
</li>
</ul>
</div>
</div>
</div>
</div>
<div class="sect3">
<h4 id="_see_also_370">See Also</h4>
<div class="paragraph">
<p><code>VkDeviceSize</code>, <a href="#VkStructureType">VkStructureType</a>, <a href="#vkGetAndroidHardwareBufferPropertiesANDROID">vkGetAndroidHardwareBufferPropertiesANDROID</a></p>
</div>
</div>
<div class="sect3">
<h4 id="_document_notes_370">Document Notes</h4>
<div class="paragraph">
<p>For more information, see the Vulkan Specification at URL</p>
</div>
<div class="paragraph">
<p><a href="https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VkAndroidHardwareBufferPropertiesANDROID" class="bare">https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VkAndroidHardwareBufferPropertiesANDROID</a></p>
</div>
<div class="paragraph">
<p>This page is extracted from the Vulkan Specification.
Fixes and changes should be made to the Specification, not directly.</p>
</div>
<div style="page-break-after: always;"></div>
</div>
</div>
<div class="sect2">
<h3 id="_vkandroidhardwarebufferusageandroid3">VkAndroidHardwareBufferUsageANDROID(3)</h3>
<div class="sect3">
<h4 id="_name_371">Name</h4>
<div class="paragraph">
<p>VkAndroidHardwareBufferUsageANDROID - Struct containing Android hardware buffer usage flags</p>
</div>
</div>
<div class="sect3">
<h4 id="_c_specification_371">C Specification</h4>
<div class="paragraph">
<p>To obtain optimal Android hardware buffer usage flags for specific image
creation parameters, attach an instance of
<code>VkAndroidHardwareBufferUsageANDROID</code> to the <code>pNext</code> chain of a
<a href="#VkImageFormatProperties2">VkImageFormatProperties2</a> structure passed to
<a href="#vkGetPhysicalDeviceImageFormatProperties2">vkGetPhysicalDeviceImageFormatProperties2</a>.
This structure is defined as:</p>
</div>
<div id="VkAndroidHardwareBufferUsageANDROID" class="listingblock">
<div class="content">
<pre class="highlight"><code class="language-c++" data-lang="c++">typedef struct VkAndroidHardwareBufferUsageANDROID {
    VkStructureType    sType;
    void*              pNext;
    uint64_t           androidHardwareBufferUsage;
} VkAndroidHardwareBufferUsageANDROID;</code></pre>
</div>
</div>
</div>
<div class="sect3">
<h4 id="_members_8">Members</h4>
<div class="ulist">
<ul>
<li>
<p><code>sType</code> is the type of this structure.</p>
</li>
<li>
<p><code>pNext</code> is <code>NULL</code> or a pointer to an extension-specific structure.</p>
</li>
<li>
<p><code>androidHardwareBufferUsage</code> returns the Android hardware buffer
usage flags.</p>
</li>
</ul>
</div>
</div>
<div class="sect3">
<h4 id="_description_371">Description</h4>
<div class="paragraph">
<p>The <code>androidHardwareBufferUsage</code> field <strong class="purple">must</strong> include Android hardware
buffer usage flags listed in the
<a href="vkspec.html#memory-external-android-hardware-buffer-usage">AHardwareBuffer Usage
Equivalence</a> table when the corresponding Vulkan image usage or image
creation flags are included in the <code>usage</code> or <code>flags</code> fields of
<a href="#VkPhysicalDeviceImageFormatInfo2">VkPhysicalDeviceImageFormatInfo2</a>.
It <strong class="purple">must</strong> include at least one GPU usage flag
(<code>AHARDWAREBUFFER_USAGE_GPU_</code>*), even if none of the corresponding Vulkan
usages or flags are requested.</p>
</div>
<div class="admonitionblock note">
<table>
<tr>
<td class="icon">
<i class="fa icon-note" title="Note"></i>
</td>
<td class="content">
<div class="title">Note</div>
<div class="paragraph">
<p>Requiring at least one GPU usage flag ensures that Android hardware buffer
memory will be allocated in a memory pool accessible to the Vulkan
implementation, and that specializing the memory layout based on usage flags
does not prevent it from being compatible with Vulkan.
Implementations <strong class="purple">may</strong> avoid unnecessary restrictions caused by this
requirement by using vendor usage flags to indicate that only the Vulkan
uses indicated in <a href="#VkImageFormatProperties2">VkImageFormatProperties2</a> are required.</p>
</div>
</td>
</tr>
</table>
</div>
<div class="sidebarblock">
<div class="content">
<div class="title">Valid Usage (Implicit)</div>
<div class="ulist">
<ul>
<li>
<p><a id="VUID-VkAndroidHardwareBufferUsageANDROID-sType-sType"></a> <code>sType</code> <strong class="purple">must</strong> be <code>VK_STRUCTURE_TYPE_ANDROID_HARDWARE_BUFFER_USAGE_ANDROID</code></p>
</li>
</ul>
</div>
</div>
</div>
</div>
<div class="sect3">
<h4 id="_see_also_371">See Also</h4>
<div class="paragraph">
<p><a href="#VkStructureType">VkStructureType</a></p>
</div>
</div>
<div class="sect3">
<h4 id="_document_notes_371">Document Notes</h4>
<div class="paragraph">
<p>For more information, see the Vulkan Specification at URL</p>
</div>
<div class="paragraph">
<p><a href="https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VkAndroidHardwareBufferUsageANDROID" class="bare">https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VkAndroidHardwareBufferUsageANDROID</a></p>
</div>
<div class="paragraph">
<p>This page is extracted from the Vulkan Specification.
Fixes and changes should be made to the Specification, not directly.</p>
</div>
<div style="page-break-after: always;"></div>
</div>
</div>
<div class="sect2">
<h3 id="_vkandroidsurfacecreateinfokhr3">VkAndroidSurfaceCreateInfoKHR(3)</h3>
<div class="sect3">
<h4 id="_name_372">Name</h4>
<div class="paragraph">
<p>VkAndroidSurfaceCreateInfoKHR - Structure specifying parameters of a newly created Android surface object</p>
</div>
</div>
<div class="sect3">
<h4 id="_c_specification_372">C Specification</h4>
<div class="paragraph">
<p>The <code>VkAndroidSurfaceCreateInfoKHR</code> structure is defined as:</p>
</div>
<div id="VkAndroidSurfaceCreateInfoKHR" class="listingblock">
<div class="content">
<pre class="highlight"><code class="language-c++" data-lang="c++">typedef struct VkAndroidSurfaceCreateInfoKHR {
    VkStructureType                   sType;
    const void*                       pNext;
    VkAndroidSurfaceCreateFlagsKHR    flags;
    struct ANativeWindow*             window;
} VkAndroidSurfaceCreateInfoKHR;</code></pre>
</div>
</div>
</div>
<div class="sect3">
<h4 id="_members_9">Members</h4>
<div class="ulist">
<ul>
<li>
<p><code>sType</code> is the type of this structure.</p>
</li>
<li>
<p><code>pNext</code> is <code>NULL</code> or a pointer to an extension-specific structure.</p>
</li>
<li>
<p><code>flags</code> is reserved for future use.</p>
</li>
<li>
<p><code>window</code> is a pointer to the <a href="#ANativeWindow">ANativeWindow</a> to associate the
surface with.</p>
</li>
</ul>
</div>
</div>
<div class="sect3">
<h4 id="_description_372">Description</h4>
<div class="sidebarblock">
<div class="content">
<div class="title">Valid Usage</div>
<div class="ulist">
<ul>
<li>
<p><a id="VUID-VkAndroidSurfaceCreateInfoKHR-window-01248"></a>
<code>window</code> <strong class="purple">must</strong> point to a valid Android <a href="#ANativeWindow">ANativeWindow</a>.</p>
</li>
</ul>
</div>
</div>
</div>
<div class="sidebarblock">
<div class="content">
<div class="title">Valid Usage (Implicit)</div>
<div class="ulist">
<ul>
<li>
<p><a id="VUID-VkAndroidSurfaceCreateInfoKHR-sType-sType"></a> <code>sType</code> <strong class="purple">must</strong> be <code>VK_STRUCTURE_TYPE_ANDROID_SURFACE_CREATE_INFO_KHR</code></p>
</li>
<li>
<p><a id="VUID-VkAndroidSurfaceCreateInfoKHR-pNext-pNext"></a> <code>pNext</code> <strong class="purple">must</strong> be <code>NULL</code></p>
</li>
<li>
<p><a id="VUID-VkAndroidSurfaceCreateInfoKHR-flags-zerobitmask"></a> <code>flags</code> <strong class="purple">must</strong> be <code>0</code></p>
</li>
</ul>
</div>
</div>
</div>
</div>
<div class="sect3">
<h4 id="_see_also_372">See Also</h4>
<div class="paragraph">
<p><a href="#VkAndroidSurfaceCreateFlagsKHR">VkAndroidSurfaceCreateFlagsKHR</a>, <a href="#VkStructureType">VkStructureType</a>, <a href="#vkCreateAndroidSurfaceKHR">vkCreateAndroidSurfaceKHR</a></p>
</div>
</div>
<div class="sect3">
<h4 id="_document_notes_372">Document Notes</h4>
<div class="paragraph">
<p>For more information, see the Vulkan Specification at URL</p>
</div>
<div class="paragraph">
<p><a href="https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VkAndroidSurfaceCreateInfoKHR" class="bare">https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VkAndroidSurfaceCreateInfoKHR</a></p>
</div>
<div class="paragraph">
<p>This page is extracted from the Vulkan Specification.
Fixes and changes should be made to the Specification, not directly.</p>
</div>
<div style="page-break-after: always;"></div>
</div>
</div>
<div class="sect2">
<h3 id="_vkapplicationinfo3">VkApplicationInfo(3)</h3>
<div class="sect3">
<h4 id="_name_373">Name</h4>
<div class="paragraph">
<p>VkApplicationInfo - Structure specifying application info</p>
</div>
</div>
<div class="sect3">
<h4 id="_c_specification_373">C Specification</h4>
<div class="paragraph">
<p>The <code>VkApplicationInfo</code> structure is defined as:</p>
</div>
<div id="VkApplicationInfo" class="listingblock">
<div class="content">
<pre class="highlight"><code class="language-c++" data-lang="c++">typedef struct VkApplicationInfo {
    VkStructureType    sType;
    const void*        pNext;
    const char*        pApplicationName;
    uint32_t           applicationVersion;
    const char*        pEngineName;
    uint32_t           engineVersion;
    uint32_t           apiVersion;
} VkApplicationInfo;</code></pre>
</div>
</div>
</div>
<div class="sect3">
<h4 id="_members_10">Members</h4>
<div class="ulist">
<ul>
<li>
<p><code>sType</code> is the type of this structure.</p>
</li>
<li>
<p><code>pNext</code> is <code>NULL</code> or a pointer to an extension-specific structure.</p>
</li>
<li>
<p><code>pApplicationName</code> is <code>NULL</code> or is a pointer to a null-terminated
UTF-8 string containing the name of the application.</p>
</li>
<li>
<p><code>applicationVersion</code> is an unsigned integer variable containing the
developer-supplied version number of the application.</p>
</li>
<li>
<p><code>pEngineName</code> is <code>NULL</code> or is a pointer to a null-terminated UTF-8
string containing the name of the engine (if any) used to create the
application.</p>
</li>
<li>
<p><code>engineVersion</code> is an unsigned integer variable containing the
developer-supplied version number of the engine used to create the
application.</p>
</li>
<li>
<p><code>apiVersion</code> <strong class="purple">must</strong> be the highest version of Vulkan that the
application is designed to use, encoded as described in
<a href="vkspec.html#extendingvulkan-coreversions-versionnumbers" class="bare">html/vkspec.html#extendingvulkan-coreversions-versionnumbers</a>.
The patch version number specified in <code>apiVersion</code> is ignored when
creating an instance object.
Only the major and minor versions of the instance <strong class="purple">must</strong> match those
requested in <code>apiVersion</code>.</p>
</li>
</ul>
</div>
</div>
<div class="sect3">
<h4 id="_description_373">Description</h4>
<div class="paragraph">
<p>Vulkan 1.0 implementations were required to return
<code>VK_ERROR_INCOMPATIBLE_DRIVER</code> if <code>apiVersion</code> was larger than 1.0.
Implementations that support Vulkan 1.1 or later <strong class="purple">must</strong> not return
<code>VK_ERROR_INCOMPATIBLE_DRIVER</code> for any value of <code>apiVersion</code>.</p>
</div>
<div class="admonitionblock note">
<table>
<tr>
<td class="icon">
<i class="fa icon-note" title="Note"></i>
</td>
<td class="content">
<div class="title">Note</div>
<div class="paragraph">
<p>Because Vulkan 1.0 implementations <strong class="purple">may</strong> fail with
<code>VK_ERROR_INCOMPATIBLE_DRIVER</code>, applications <strong class="purple">should</strong> determine the
version of Vulkan available before calling <a href="#vkCreateInstance">vkCreateInstance</a>.
If the <a href="#vkGetInstanceProcAddr">vkGetInstanceProcAddr</a> returns <code>NULL</code> for
<a href="#vkEnumerateInstanceVersion">vkEnumerateInstanceVersion</a>, it is a Vulkan 1.0 implementation.
Otherwise, the application <strong class="purple">can</strong> call <a href="#vkEnumerateInstanceVersion">vkEnumerateInstanceVersion</a> to
determine the version of Vulkan.</p>
</div>
</td>
</tr>
</table>
</div>
<div class="paragraph">
<p>As long as the instance supports at least Vulkan 1.1, an application <strong class="purple">can</strong>
use different versions of Vulkan with an instance than it does with a device
or physical device.</p>
</div>
<div class="admonitionblock note">
<table>
<tr>
<td class="icon">
<i class="fa icon-note" title="Note"></i>
</td>
<td class="content">
<div class="title">Note</div>
<div class="paragraph">
<p>The Khronos validation layers will treat <code>apiVersion</code> as the highest API
version the application targets, and will validate API usage against the
minimum of that version and the implementation version (instance or device,
depending on context).
If an application tries to use functionality from a greater version than
this, a validation error will be triggered.</p>
</div>
<div class="paragraph">
<p>For example, if the instance supports Vulkan 1.1 and three physical devices
support Vulkan 1.0, Vulkan 1.1, and a hypothetical Vulkan 1.2, respectively,
and if the application sets <code>apiVersion</code> to 1.2, the application <strong class="purple">can</strong>
use the following versions of Vulkan:</p>
</div>
<div class="ulist">
<ul>
<li>
<p>Vulkan 1.0 <strong class="purple">can</strong> be used with the instance and with all physical devices.</p>
</li>
<li>
<p>Vulkan 1.1 <strong class="purple">can</strong> be used with the instance and with the physical devices
that support Vulkan 1.1 and Vulkan 1.2.</p>
</li>
<li>
<p>Vulkan 1.2 <strong class="purple">can</strong> be used with the physical device that supports Vulkan
1.2.</p>
</li>
</ul>
</div>
<div class="paragraph">
<p>If we modify the above example so that the application sets <code>apiVersion</code>
to 1.1, then the application <strong class="purple">must</strong> not use Vulkan 1.2 functionality on the
physical device that supports Vulkan 1.2.</p>
</div>
</td>
</tr>
</table>
</div>
<div class="paragraph">
<p>Implicit layers <strong class="purple">must</strong> be disabled if they do not support a version at least
as high as <code>apiVersion</code>.
See the <a href="vkspec.html#LoaderAndLayerInterface">Vulkan Loader Specification and
Architecture Overview</a> document for additional information.</p>
</div>
<div class="admonitionblock note">
<table>
<tr>
<td class="icon">
<i class="fa icon-note" title="Note"></i>
</td>
<td class="content">
<div class="title">Note</div>
<div class="paragraph">
<p>Providing a <code>NULL</code> <code>VkInstanceCreateInfo</code>::<code>pApplicationInfo</code> or
providing an <code>apiVersion</code> of 0 is equivalent to providing an
<code>apiVersion</code> of <code>VK_MAKE_VERSION(1,0,0)</code>.</p>
</div>
</td>
</tr>
</table>
</div>
<div class="sidebarblock">
<div class="content">
<div class="title">Valid Usage (Implicit)</div>
<div class="ulist">
<ul>
<li>
<p><a id="VUID-VkApplicationInfo-sType-sType"></a> <code>sType</code> <strong class="purple">must</strong> be <code>VK_STRUCTURE_TYPE_APPLICATION_INFO</code></p>
</li>
<li>
<p><a id="VUID-VkApplicationInfo-pNext-pNext"></a> <code>pNext</code> <strong class="purple">must</strong> be <code>NULL</code></p>
</li>
<li>
<p><a id="VUID-VkApplicationInfo-pApplicationName-parameter"></a> If <code>pApplicationName</code> is not <code>NULL</code>, <code>pApplicationName</code> <strong class="purple">must</strong> be a null-terminated UTF-8 string</p>
</li>
<li>
<p><a id="VUID-VkApplicationInfo-pEngineName-parameter"></a> If <code>pEngineName</code> is not <code>NULL</code>, <code>pEngineName</code> <strong class="purple">must</strong> be a null-terminated UTF-8 string</p>
</li>
</ul>
</div>
</div>
</div>
</div>
<div class="sect3">
<h4 id="_see_also_373">See Also</h4>
<div class="paragraph">
<p><a href="#VkInstanceCreateInfo">VkInstanceCreateInfo</a>, <a href="#VkStructureType">VkStructureType</a></p>
</div>
</div>
<div class="sect3">
<h4 id="_document_notes_373">Document Notes</h4>
<div class="paragraph">
<p>For more information, see the Vulkan Specification at URL</p>
</div>
<div class="paragraph">
<p><a href="https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VkApplicationInfo" class="bare">https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VkApplicationInfo</a></p>
</div>
<div class="paragraph">
<p>This page is extracted from the Vulkan Specification.
Fixes and changes should be made to the Specification, not directly.</p>
</div>
<div style="page-break-after: always;"></div>
</div>
</div>
<div class="sect2">
<h3 id="_vkattachmentdescription3">VkAttachmentDescription(3)</h3>
<div class="sect3">
<h4 id="_name_374">Name</h4>
<div class="paragraph">
<p>VkAttachmentDescription - Structure specifying an attachment description</p>
</div>
</div>
<div class="sect3">
<h4 id="_c_specification_374">C Specification</h4>
<div class="paragraph">
<p>The <code>VkAttachmentDescription</code> structure is defined as:</p>
</div>
<div id="VkAttachmentDescription" class="listingblock">
<div class="content">
<pre class="highlight"><code class="language-c++" data-lang="c++">typedef struct VkAttachmentDescription {
    VkAttachmentDescriptionFlags    flags;
    VkFormat                        format;
    VkSampleCountFlagBits           samples;
    VkAttachmentLoadOp              loadOp;
    VkAttachmentStoreOp             storeOp;
    VkAttachmentLoadOp              stencilLoadOp;
    VkAttachmentStoreOp             stencilStoreOp;
    VkImageLayout                   initialLayout;
    VkImageLayout                   finalLayout;
} VkAttachmentDescription;</code></pre>
</div>
</div>
</div>
<div class="sect3">
<h4 id="_members_11">Members</h4>
<div class="ulist">
<ul>
<li>
<p><code>flags</code> is a bitmask of <a href="#VkAttachmentDescriptionFlagBits">VkAttachmentDescriptionFlagBits</a>
specifying additional properties of the attachment.</p>
</li>
<li>
<p><code>format</code> is a <a href="#VkFormat">VkFormat</a> value specifying the format of the
image view that will be used for the attachment.</p>
</li>
<li>
<p><code>samples</code> is the number of samples of the image as defined in
<a href="#VkSampleCountFlagBits">VkSampleCountFlagBits</a>.</p>
</li>
<li>
<p><code>loadOp</code> is a <a href="#VkAttachmentLoadOp">VkAttachmentLoadOp</a> value specifying how the
contents of color and depth components of the attachment are treated at
the beginning of the subpass where it is first used.</p>
</li>
<li>
<p><code>storeOp</code> is a <a href="#VkAttachmentStoreOp">VkAttachmentStoreOp</a> value specifying how the
contents of color and depth components of the attachment are treated at
the end of the subpass where it is last used.</p>
</li>
<li>
<p><code>stencilLoadOp</code> is a <a href="#VkAttachmentLoadOp">VkAttachmentLoadOp</a> value specifying how
the contents of stencil components of the attachment are treated at the
beginning of the subpass where it is first used.</p>
</li>
<li>
<p><code>stencilStoreOp</code> is a <a href="#VkAttachmentStoreOp">VkAttachmentStoreOp</a> value specifying how
the contents of stencil components of the attachment are treated at the
end of the last subpass where it is used.</p>
</li>
<li>
<p><code>initialLayout</code> is the layout the attachment image subresource will
be in when a render pass instance begins.</p>
</li>
<li>
<p><code>finalLayout</code> is the layout the attachment image subresource will be
transitioned to when a render pass instance ends.</p>
</li>
</ul>
</div>
</div>
<div class="sect3">
<h4 id="_description_374">Description</h4>
<div id="renderpass-load-store-ops" class="paragraph">
<p>If the attachment uses a color format, then <code>loadOp</code> and <code>storeOp</code>
are used, and <code>stencilLoadOp</code> and <code>stencilStoreOp</code> are ignored.
If the format has depth and/or stencil components, <code>loadOp</code> and
<code>storeOp</code> apply only to the depth data, while <code>stencilLoadOp</code> and
<code>stencilStoreOp</code> define how the stencil data is handled.
<code>loadOp</code> and <code>stencilLoadOp</code> define the <em>load operations</em> that
execute as part of the first subpass that uses the attachment.
<code>storeOp</code> and <code>stencilStoreOp</code> define the <em>store operations</em> that
execute as part of the last subpass that uses the attachment.</p>
</div>
<div class="paragraph">
<p>The load operation for each sample in an attachment happens-before any
recorded command which accesses the sample in the first subpass where the
attachment is used.
Load operations for attachments with a depth/stencil format execute in the
<code>VK_PIPELINE_STAGE_EARLY_FRAGMENT_TESTS_BIT</code> pipeline stage.
Load operations for attachments with a color format execute in the
<code>VK_PIPELINE_STAGE_COLOR_ATTACHMENT_OUTPUT_BIT</code> pipeline stage.</p>
</div>
<div class="paragraph">
<p>The store operation for each sample in an attachment happens-after any
recorded command which accesses the sample in the last subpass where the
attachment is used.
Store operations for attachments with a depth/stencil format execute in the
<code>VK_PIPELINE_STAGE_LATE_FRAGMENT_TESTS_BIT</code> pipeline stage.
Store operations for attachments with a color format execute in the
<code>VK_PIPELINE_STAGE_COLOR_ATTACHMENT_OUTPUT_BIT</code> pipeline stage.</p>
</div>
<div class="paragraph">
<p>If an attachment is not used by any subpass, then <code>loadOp</code>,
<code>storeOp</code>, <code>stencilStoreOp</code>, and <code>stencilLoadOp</code> are ignored,
and the attachment&#8217;s memory contents will not be modified by execution of a
render pass instance.</p>
</div>
<div class="paragraph">
<p>The load and store operations apply on the first and last use of each view
in the render pass, respectively.
If a view index of an attachment is not included in the view mask in any
subpass that uses it, then the load and store operations are ignored, and
the attachment&#8217;s memory contents will not be modified by execution of a
render pass instance.</p>
</div>
<div id="renderpass-precision" class="paragraph">
<p>During a render pass instance, input/color attachments with color formats
that have a component size of 8, 16, or 32 bits <strong class="purple">must</strong> be represented in the
attachment&#8217;s format throughout the instance.
Attachments with other floating- or fixed-point color formats, or with depth
components <strong class="purple">may</strong> be represented in a format with a precision higher than the
attachment format, but <strong class="purple">must</strong> be represented with the same range.
When such a component is loaded via the <code>loadOp</code>, it will be converted
into an implementation-dependent format used by the render pass.
Such components <strong class="purple">must</strong> be converted from the render pass format, to the
format of the attachment, before they are resolved or stored at the end of a
render pass instance via <code>storeOp</code>.
Conversions occur as described in <a href="vkspec.html#fundamentals-numerics">Numeric
Representation and Computation</a> and <a href="vkspec.html#fundamentals-fixedconv">Fixed-Point
Data Conversions</a>.</p>
</div>
<div id="renderpass-aliasing" class="paragraph">
<p>If <code>flags</code> includes <code>VK_ATTACHMENT_DESCRIPTION_MAY_ALIAS_BIT</code>, then
the attachment is treated as if it shares physical memory with another
attachment in the same render pass.
This information limits the ability of the implementation to reorder certain
operations (like layout transitions and the <code>loadOp</code>) such that it is
not improperly reordered against other uses of the same physical memory via
a different attachment.
This is described in more detail below.</p>
</div>
<div class="sidebarblock">
<div class="content">
<div class="title">Valid Usage</div>
<div class="ulist">
<ul>
<li>
<p><a id="VUID-VkAttachmentDescription-finalLayout-00843"></a>
<code>finalLayout</code> <strong class="purple">must</strong> not be <code>VK_IMAGE_LAYOUT_UNDEFINED</code> or
<code>VK_IMAGE_LAYOUT_PREINITIALIZED</code></p>
</li>
</ul>
</div>
</div>
</div>
<div class="sidebarblock">
<div class="content">
<div class="title">Valid Usage (Implicit)</div>
<div class="ulist">
<ul>
<li>
<p><a id="VUID-VkAttachmentDescription-flags-parameter"></a> <code>flags</code> <strong class="purple">must</strong> be a valid combination of <a href="#VkAttachmentDescriptionFlagBits">VkAttachmentDescriptionFlagBits</a> values</p>
</li>
<li>
<p><a id="VUID-VkAttachmentDescription-format-parameter"></a> <code>format</code> <strong class="purple">must</strong> be a valid <a href="#VkFormat">VkFormat</a> value</p>
</li>
<li>
<p><a id="VUID-VkAttachmentDescription-samples-parameter"></a> <code>samples</code> <strong class="purple">must</strong> be a valid <a href="#VkSampleCountFlagBits">VkSampleCountFlagBits</a> value</p>
</li>
<li>
<p><a id="VUID-VkAttachmentDescription-loadOp-parameter"></a> <code>loadOp</code> <strong class="purple">must</strong> be a valid <a href="#VkAttachmentLoadOp">VkAttachmentLoadOp</a> value</p>
</li>
<li>
<p><a id="VUID-VkAttachmentDescription-storeOp-parameter"></a> <code>storeOp</code> <strong class="purple">must</strong> be a valid <a href="#VkAttachmentStoreOp">VkAttachmentStoreOp</a> value</p>
</li>
<li>
<p><a id="VUID-VkAttachmentDescription-stencilLoadOp-parameter"></a> <code>stencilLoadOp</code> <strong class="purple">must</strong> be a valid <a href="#VkAttachmentLoadOp">VkAttachmentLoadOp</a> value</p>
</li>
<li>
<p><a id="VUID-VkAttachmentDescription-stencilStoreOp-parameter"></a> <code>stencilStoreOp</code> <strong class="purple">must</strong> be a valid <a href="#VkAttachmentStoreOp">VkAttachmentStoreOp</a> value</p>
</li>
<li>
<p><a id="VUID-VkAttachmentDescription-initialLayout-parameter"></a> <code>initialLayout</code> <strong class="purple">must</strong> be a valid <a href="#VkImageLayout">VkImageLayout</a> value</p>
</li>
<li>
<p><a id="VUID-VkAttachmentDescription-finalLayout-parameter"></a> <code>finalLayout</code> <strong class="purple">must</strong> be a valid <a href="#VkImageLayout">VkImageLayout</a> value</p>
</li>
</ul>
</div>
</div>
</div>
</div>
<div class="sect3">
<h4 id="_see_also_374">See Also</h4>
<div class="paragraph">
<p><a href="#VkAttachmentDescriptionFlags">VkAttachmentDescriptionFlags</a>, <a href="#VkAttachmentLoadOp">VkAttachmentLoadOp</a>, <a href="#VkAttachmentStoreOp">VkAttachmentStoreOp</a>, <a href="#VkFormat">VkFormat</a>, <a href="#VkImageLayout">VkImageLayout</a>, <a href="#VkRenderPassCreateInfo">VkRenderPassCreateInfo</a>, <a href="#VkSampleCountFlagBits">VkSampleCountFlagBits</a></p>
</div>
</div>
<div class="sect3">
<h4 id="_document_notes_374">Document Notes</h4>
<div class="paragraph">
<p>For more information, see the Vulkan Specification at URL</p>
</div>
<div class="paragraph">
<p><a href="https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VkAttachmentDescription" class="bare">https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VkAttachmentDescription</a></p>
</div>
<div class="paragraph">
<p>This page is extracted from the Vulkan Specification.
Fixes and changes should be made to the Specification, not directly.</p>
</div>
<div style="page-break-after: always;"></div>
</div>
</div>
<div class="sect2">
<h3 id="_vkattachmentdescription2khr3">VkAttachmentDescription2KHR(3)</h3>
<div class="sect3">
<h4 id="_name_375">Name</h4>
<div class="paragraph">
<p>VkAttachmentDescription2KHR - Structure specifying an attachment description</p>
</div>
</div>
<div class="sect3">
<h4 id="_c_specification_375">C Specification</h4>
<div class="paragraph">
<p>The <code>VkAttachmentDescription2KHR</code> structure is defined as:</p>
</div>
<div id="VkAttachmentDescription2KHR" class="listingblock">
<div class="content">
<pre class="highlight"><code class="language-c++" data-lang="c++">typedef struct VkAttachmentDescription2KHR {
    VkStructureType                 sType;
    const void*                     pNext;
    VkAttachmentDescriptionFlags    flags;
    VkFormat                        format;
    VkSampleCountFlagBits           samples;
    VkAttachmentLoadOp              loadOp;
    VkAttachmentStoreOp             storeOp;
    VkAttachmentLoadOp              stencilLoadOp;
    VkAttachmentStoreOp             stencilStoreOp;
    VkImageLayout                   initialLayout;
    VkImageLayout                   finalLayout;
} VkAttachmentDescription2KHR;</code></pre>
</div>
</div>
</div>
<div class="sect3">
<h4 id="_members_12">Members</h4>
<div class="ulist">
<ul>
<li>
<p><code>sType</code> is the type of this structure.</p>
</li>
<li>
<p><code>pNext</code> is <code>NULL</code> or a pointer to an extension-specific structure.</p>
</li>
<li>
<p><code>flags</code> is a bitmask of <a href="#VkAttachmentDescriptionFlagBits">VkAttachmentDescriptionFlagBits</a>
specifying additional properties of the attachment.</p>
</li>
<li>
<p><code>format</code> is a <a href="#VkFormat">VkFormat</a> value specifying the format of the
image that will be used for the attachment.</p>
</li>
<li>
<p><code>samples</code> is the number of samples of the image as defined in
<a href="#VkSampleCountFlagBits">VkSampleCountFlagBits</a>.</p>
</li>
<li>
<p><code>loadOp</code> is a <a href="#VkAttachmentLoadOp">VkAttachmentLoadOp</a> value specifying how the
contents of color and depth components of the attachment are treated at
the beginning of the subpass where it is first used.</p>
</li>
<li>
<p><code>storeOp</code> is a <a href="#VkAttachmentStoreOp">VkAttachmentStoreOp</a> value specifying how the
contents of color and depth components of the attachment are treated at
the end of the subpass where it is last used.</p>
</li>
<li>
<p><code>stencilLoadOp</code> is a <a href="#VkAttachmentLoadOp">VkAttachmentLoadOp</a> value specifying how
the contents of stencil components of the attachment are treated at the
beginning of the subpass where it is first used.</p>
</li>
<li>
<p><code>stencilStoreOp</code> is a <a href="#VkAttachmentStoreOp">VkAttachmentStoreOp</a> value specifying how
the contents of stencil components of the attachment are treated at the
end of the last subpass where it is used.</p>
</li>
<li>
<p><code>initialLayout</code> is the layout the attachment image subresource will
be in when a render pass instance begins.</p>
</li>
<li>
<p><code>finalLayout</code> is the layout the attachment image subresource will be
transitioned to when a render pass instance ends.</p>
</li>
</ul>
</div>
</div>
<div class="sect3">
<h4 id="_description_375">Description</h4>
<div class="paragraph">
<p>Parameters defined by this structure with the same name as those in
<a href="#VkAttachmentDescription">VkAttachmentDescription</a> have the identical effect to those parameters.</p>
</div>
<div class="sidebarblock">
<div class="content">
<div class="title">Valid Usage</div>
<div class="ulist">
<ul>
<li>
<p><a id="VUID-VkAttachmentDescription2KHR-finalLayout-03061"></a>
<code>finalLayout</code> <strong class="purple">must</strong> not be <code>VK_IMAGE_LAYOUT_UNDEFINED</code> or
<code>VK_IMAGE_LAYOUT_PREINITIALIZED</code></p>
</li>
</ul>
</div>
</div>
</div>
<div class="sidebarblock">
<div class="content">
<div class="title">Valid Usage (Implicit)</div>
<div class="ulist">
<ul>
<li>
<p><a id="VUID-VkAttachmentDescription2KHR-sType-sType"></a> <code>sType</code> <strong class="purple">must</strong> be <code>VK_STRUCTURE_TYPE_ATTACHMENT_DESCRIPTION_2_KHR</code></p>
</li>
<li>
<p><a id="VUID-VkAttachmentDescription2KHR-flags-parameter"></a> <code>flags</code> <strong class="purple">must</strong> be a valid combination of <a href="#VkAttachmentDescriptionFlagBits">VkAttachmentDescriptionFlagBits</a> values</p>
</li>
<li>
<p><a id="VUID-VkAttachmentDescription2KHR-format-parameter"></a> <code>format</code> <strong class="purple">must</strong> be a valid <a href="#VkFormat">VkFormat</a> value</p>
</li>
<li>
<p><a id="VUID-VkAttachmentDescription2KHR-samples-parameter"></a> <code>samples</code> <strong class="purple">must</strong> be a valid <a href="#VkSampleCountFlagBits">VkSampleCountFlagBits</a> value</p>
</li>
<li>
<p><a id="VUID-VkAttachmentDescription2KHR-loadOp-parameter"></a> <code>loadOp</code> <strong class="purple">must</strong> be a valid <a href="#VkAttachmentLoadOp">VkAttachmentLoadOp</a> value</p>
</li>
<li>
<p><a id="VUID-VkAttachmentDescription2KHR-storeOp-parameter"></a> <code>storeOp</code> <strong class="purple">must</strong> be a valid <a href="#VkAttachmentStoreOp">VkAttachmentStoreOp</a> value</p>
</li>
<li>
<p><a id="VUID-VkAttachmentDescription2KHR-stencilLoadOp-parameter"></a> <code>stencilLoadOp</code> <strong class="purple">must</strong> be a valid <a href="#VkAttachmentLoadOp">VkAttachmentLoadOp</a> value</p>
</li>
<li>
<p><a id="VUID-VkAttachmentDescription2KHR-stencilStoreOp-parameter"></a> <code>stencilStoreOp</code> <strong class="purple">must</strong> be a valid <a href="#VkAttachmentStoreOp">VkAttachmentStoreOp</a> value</p>
</li>
<li>
<p><a id="VUID-VkAttachmentDescription2KHR-initialLayout-parameter"></a> <code>initialLayout</code> <strong class="purple">must</strong> be a valid <a href="#VkImageLayout">VkImageLayout</a> value</p>
</li>
<li>
<p><a id="VUID-VkAttachmentDescription2KHR-finalLayout-parameter"></a> <code>finalLayout</code> <strong class="purple">must</strong> be a valid <a href="#VkImageLayout">VkImageLayout</a> value</p>
</li>
</ul>
</div>
</div>
</div>
</div>
<div class="sect3">
<h4 id="_see_also_375">See Also</h4>
<div class="paragraph">
<p><a href="#VkAttachmentDescriptionFlags">VkAttachmentDescriptionFlags</a>, <a href="#VkAttachmentLoadOp">VkAttachmentLoadOp</a>, <a href="#VkAttachmentStoreOp">VkAttachmentStoreOp</a>, <a href="#VkFormat">VkFormat</a>, <a href="#VkImageLayout">VkImageLayout</a>, <a href="#VkRenderPassCreateInfo2KHR">VkRenderPassCreateInfo2KHR</a>, <a href="#VkSampleCountFlagBits">VkSampleCountFlagBits</a>, <a href="#VkStructureType">VkStructureType</a></p>
</div>
</div>
<div class="sect3">
<h4 id="_document_notes_375">Document Notes</h4>
<div class="paragraph">
<p>For more information, see the Vulkan Specification at URL</p>
</div>
<div class="paragraph">
<p><a href="https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VkAttachmentDescription2KHR" class="bare">https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VkAttachmentDescription2KHR</a></p>
</div>
<div class="paragraph">
<p>This page is extracted from the Vulkan Specification.
Fixes and changes should be made to the Specification, not directly.</p>
</div>
<div style="page-break-after: always;"></div>
</div>
</div>
<div class="sect2">
<h3 id="_vkattachmentreference3">VkAttachmentReference(3)</h3>
<div class="sect3">
<h4 id="_name_376">Name</h4>
<div class="paragraph">
<p>VkAttachmentReference - Structure specifying an attachment reference</p>
</div>
</div>
<div class="sect3">
<h4 id="_c_specification_376">C Specification</h4>
<div class="paragraph">
<p>The <code>VkAttachmentReference</code> structure is defined as:</p>
</div>
<div id="VkAttachmentReference" class="listingblock">
<div class="content">
<pre class="highlight"><code class="language-c++" data-lang="c++">typedef struct VkAttachmentReference {
    uint32_t         attachment;
    VkImageLayout    layout;
} VkAttachmentReference;</code></pre>
</div>
</div>
</div>
<div class="sect3">
<h4 id="_members_13">Members</h4>
<div class="ulist">
<ul>
<li>
<p><code>attachment</code> is either an integer value identifying an attachment at
the corresponding index in
<a href="#VkRenderPassCreateInfo">VkRenderPassCreateInfo</a>::<code>pAttachments</code>, or
<code>VK_ATTACHMENT_UNUSED</code> to signify that this attachment is not used.</p>
</li>
<li>
<p><code>layout</code> is a <a href="#VkImageLayout">VkImageLayout</a> value specifying the layout the
attachment uses during the subpass.</p>
</li>
</ul>
</div>
</div>
<div class="sect3">
<h4 id="_description_376">Description</h4>
<div class="sidebarblock">
<div class="content">
<div class="title">Valid Usage</div>
<div class="ulist">
<ul>
<li>
<p><a id="VUID-VkAttachmentReference-layout-00857"></a>
If <code>attachment</code> is not <code>VK_ATTACHMENT_UNUSED</code>, <code>layout</code>
<strong class="purple">must</strong> not be <code>VK_IMAGE_LAYOUT_UNDEFINED</code> or
<code>VK_IMAGE_LAYOUT_PREINITIALIZED</code></p>
</li>
</ul>
</div>
</div>
</div>
<div class="sidebarblock">
<div class="content">
<div class="title">Valid Usage (Implicit)</div>
<div class="ulist">
<ul>
<li>
<p><a id="VUID-VkAttachmentReference-layout-parameter"></a> <code>layout</code> <strong class="purple">must</strong> be a valid <a href="#VkImageLayout">VkImageLayout</a> value</p>
</li>
</ul>
</div>
</div>
</div>
</div>
<div class="sect3">
<h4 id="_see_also_376">See Also</h4>
<div class="paragraph">
<p><a href="#VkImageLayout">VkImageLayout</a>, <a href="#VkRenderPassFragmentDensityMapCreateInfoEXT">VkRenderPassFragmentDensityMapCreateInfoEXT</a>, <a href="#VkSubpassDescription">VkSubpassDescription</a></p>
</div>
</div>
<div class="sect3">
<h4 id="_document_notes_376">Document Notes</h4>
<div class="paragraph">
<p>For more information, see the Vulkan Specification at URL</p>
</div>
<div class="paragraph">
<p><a href="https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VkAttachmentReference" class="bare">https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VkAttachmentReference</a></p>
</div>
<div class="paragraph">
<p>This page is extracted from the Vulkan Specification.
Fixes and changes should be made to the Specification, not directly.</p>
</div>
<div style="page-break-after: always;"></div>
</div>
</div>
<div class="sect2">
<h3 id="_vkattachmentreference2khr3">VkAttachmentReference2KHR(3)</h3>
<div class="sect3">
<h4 id="_name_377">Name</h4>
<div class="paragraph">
<p>VkAttachmentReference2KHR - Structure specifying an attachment reference</p>
</div>
</div>
<div class="sect3">
<h4 id="_c_specification_377">C Specification</h4>
<div class="paragraph">
<p>The <code>VkAttachmentReference2KHR</code> structure is defined as:</p>
</div>
<div id="VkAttachmentReference2KHR" class="listingblock">
<div class="content">
<pre class="highlight"><code class="language-c++" data-lang="c++">typedef struct VkAttachmentReference2KHR {
    VkStructureType       sType;
    const void*           pNext;
    uint32_t              attachment;
    VkImageLayout         layout;
    VkImageAspectFlags    aspectMask;
} VkAttachmentReference2KHR;</code></pre>
</div>
</div>
</div>
<div class="sect3">
<h4 id="_members_14">Members</h4>
<div class="ulist">
<ul>
<li>
<p><code>sType</code> is the type of this structure.</p>
</li>
<li>
<p><code>pNext</code> is <code>NULL</code> or a pointer to an extension-specific structure.</p>
</li>
<li>
<p><code>attachment</code> is either an integer value identifying an attachment at
the corresponding index in
<a href="#VkRenderPassCreateInfo">VkRenderPassCreateInfo</a>::<code>pAttachments</code>, or
<code>VK_ATTACHMENT_UNUSED</code> to signify that this attachment is not used.</p>
</li>
<li>
<p><code>layout</code> is a <a href="#VkImageLayout">VkImageLayout</a> value specifying the layout the
attachment uses during the subpass.</p>
</li>
<li>
<p><code>aspectMask</code> is a mask of which aspect(s) <strong class="purple">can</strong> be accessed within
the specified subpass as an input attachment.</p>
</li>
</ul>
</div>
</div>
<div class="sect3">
<h4 id="_description_377">Description</h4>
<div class="paragraph">
<p>Parameters defined by this structure with the same name as those in
<a href="#VkAttachmentReference">VkAttachmentReference</a> have the identical effect to those parameters.</p>
</div>
<div class="paragraph">
<p><code>aspectMask</code> has the same effect for the described attachment as
<a href="#VkInputAttachmentAspectReference">VkInputAttachmentAspectReference</a>::<code>aspectMask</code> has on each
corresponding attachment.
It is ignored when this structure is used to describe anything other than an
input attachment reference.</p>
</div>
<div class="sidebarblock">
<div class="content">
<div class="title">Valid Usage</div>
<div class="ulist">
<ul>
<li>
<p><a id="VUID-VkAttachmentReference2KHR-layout-03077"></a>
If <code>attachment</code> is not <code>VK_ATTACHMENT_UNUSED</code>, <code>layout</code>
<strong class="purple">must</strong> not be <code>VK_IMAGE_LAYOUT_UNDEFINED</code> or
<code>VK_IMAGE_LAYOUT_PREINITIALIZED</code></p>
</li>
</ul>
</div>
</div>
</div>
<div class="sidebarblock">
<div class="content">
<div class="title">Valid Usage (Implicit)</div>
<div class="ulist">
<ul>
<li>
<p><a id="VUID-VkAttachmentReference2KHR-sType-sType"></a> <code>sType</code> <strong class="purple">must</strong> be <code>VK_STRUCTURE_TYPE_ATTACHMENT_REFERENCE_2_KHR</code></p>
</li>
<li>
<p><a id="VUID-VkAttachmentReference2KHR-layout-parameter"></a> <code>layout</code> <strong class="purple">must</strong> be a valid <a href="#VkImageLayout">VkImageLayout</a> value</p>
</li>
</ul>
</div>
</div>
</div>
</div>
<div class="sect3">
<h4 id="_see_also_377">See Also</h4>
<div class="paragraph">
<p><a href="#VkImageAspectFlags">VkImageAspectFlags</a>, <a href="#VkImageLayout">VkImageLayout</a>, <a href="#VkStructureType">VkStructureType</a>, <a href="#VkSubpassDescription2KHR">VkSubpassDescription2KHR</a>, <a href="#VkSubpassDescriptionDepthStencilResolveKHR">VkSubpassDescriptionDepthStencilResolveKHR</a></p>
</div>
</div>
<div class="sect3">
<h4 id="_document_notes_377">Document Notes</h4>
<div class="paragraph">
<p>For more information, see the Vulkan Specification at URL</p>
</div>
<div class="paragraph">
<p><a href="https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VkAttachmentReference2KHR" class="bare">https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VkAttachmentReference2KHR</a></p>
</div>
<div class="paragraph">
<p>This page is extracted from the Vulkan Specification.
Fixes and changes should be made to the Specification, not directly.</p>
</div>
<div style="page-break-after: always;"></div>
</div>
</div>
<div class="sect2">
<h3 id="_vkattachmentsamplelocationsext3">VkAttachmentSampleLocationsEXT(3)</h3>
<div class="sect3">
<h4 id="_name_378">Name</h4>
<div class="paragraph">
<p>VkAttachmentSampleLocationsEXT - Structure specifying the sample locations state to use in the initial layout transition of attachments</p>
</div>
</div>
<div class="sect3">
<h4 id="_c_specification_378">C Specification</h4>
<div class="paragraph">
<p>The <code>VkAttachmentSampleLocationsEXT</code> structure is defined as:</p>
</div>
<div id="VkAttachmentSampleLocationsEXT" class="listingblock">
<div class="content">
<pre class="highlight"><code class="language-c++" data-lang="c++">typedef struct VkAttachmentSampleLocationsEXT {
    uint32_t                    attachmentIndex;
    VkSampleLocationsInfoEXT    sampleLocationsInfo;
} VkAttachmentSampleLocationsEXT;</code></pre>
</div>
</div>
</div>
<div class="sect3">
<h4 id="_members_15">Members</h4>
<div class="ulist">
<ul>
<li>
<p><code>attachmentIndex</code> is the index of the attachment for which the
sample locations state is provided.</p>
</li>
<li>
<p><code>sampleLocationsInfo</code> is the sample locations state to use for the
layout transition of the given attachment from the initial layout of the
attachment to the image layout specified for the attachment in the first
subpass using it.</p>
</li>
</ul>
</div>
</div>
<div class="sect3">
<h4 id="_description_378">Description</h4>
<div class="paragraph">
<p>If the image referenced by the framebuffer attachment at index
<code>attachmentIndex</code> was not created with
<code>VK_IMAGE_CREATE_SAMPLE_LOCATIONS_COMPATIBLE_DEPTH_BIT_EXT</code> then the
values specified in <code>sampleLocationsInfo</code> are ignored.</p>
</div>
<div class="sidebarblock">
<div class="content">
<div class="title">Valid Usage</div>
<div class="ulist">
<ul>
<li>
<p><a id="VUID-VkAttachmentSampleLocationsEXT-attachmentIndex-01531"></a>
<code>attachmentIndex</code> <strong class="purple">must</strong> be less than the <code>attachmentCount</code>
specified in <a href="#VkRenderPassCreateInfo">VkRenderPassCreateInfo</a> the render pass specified by
<a href="#VkRenderPassBeginInfo">VkRenderPassBeginInfo</a>::<code>renderPass</code> was created with</p>
</li>
</ul>
</div>
</div>
</div>
<div class="sidebarblock">
<div class="content">
<div class="title">Valid Usage (Implicit)</div>
<div class="ulist">
<ul>
<li>
<p><a id="VUID-VkAttachmentSampleLocationsEXT-sampleLocationsInfo-parameter"></a> <code>sampleLocationsInfo</code> <strong class="purple">must</strong> be a valid <code>VkSampleLocationsInfoEXT</code> structure</p>
</li>
</ul>
</div>
</div>
</div>
</div>
<div class="sect3">
<h4 id="_see_also_378">See Also</h4>
<div class="paragraph">
<p><a href="#VkRenderPassSampleLocationsBeginInfoEXT">VkRenderPassSampleLocationsBeginInfoEXT</a>, <a href="#VkSampleLocationsInfoEXT">VkSampleLocationsInfoEXT</a></p>
</div>
</div>
<div class="sect3">
<h4 id="_document_notes_378">Document Notes</h4>
<div class="paragraph">
<p>For more information, see the Vulkan Specification at URL</p>
</div>
<div class="paragraph">
<p><a href="https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VkAttachmentSampleLocationsEXT" class="bare">https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VkAttachmentSampleLocationsEXT</a></p>
</div>
<div class="paragraph">
<p>This page is extracted from the Vulkan Specification.
Fixes and changes should be made to the Specification, not directly.</p>
</div>
<div style="page-break-after: always;"></div>
</div>
</div>
<div class="sect2">
<h3 id="_vkbaseinstructure3">VkBaseInStructure(3)</h3>
<div class="sect3">
<h4 id="_name_379">Name</h4>
<div class="paragraph">
<p>VkBaseInStructure - Base structure for a read-only pointer chain</p>
</div>
</div>
<div class="sect3">
<h4 id="_c_specification_379">C Specification</h4>
<div class="paragraph">
<p>The <code>VkBaseInStructure</code> structure is defined as:</p>
</div>
<div id="VkBaseInStructure" class="listingblock">
<div class="content">
<pre class="highlight"><code class="language-c++" data-lang="c++">typedef struct VkBaseInStructure {
    VkStructureType                    sType;
    const struct VkBaseInStructure*    pNext;
} VkBaseInStructure;</code></pre>
</div>
</div>
</div>
<div class="sect3">
<h4 id="_members_16">Members</h4>
<div class="ulist">
<ul>
<li>
<p><code>sType</code> is the structure type of the structure being iterated
through.</p>
</li>
<li>
<p><code>pNext</code> is <code>NULL</code> or a pointer to the next structure in a structure
chain.</p>
</li>
</ul>
</div>
</div>
<div class="sect3">
<h4 id="_description_379">Description</h4>
<div class="paragraph">
<p><code>VkBaseInStructure</code> can be used to facilitate iterating through a
read-only structure pointer chain.</p>
</div>
</div>
<div class="sect3">
<h4 id="_see_also_379">See Also</h4>
<div class="paragraph">
<p><a href="#VkBaseInStructure">VkBaseInStructure</a>, <a href="#VkStructureType">VkStructureType</a></p>
</div>
</div>
<div class="sect3">
<h4 id="_document_notes_379">Document Notes</h4>
<div class="paragraph">
<p>For more information, see the Vulkan Specification at URL</p>
</div>
<div class="paragraph">
<p><a href="https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VkBaseInStructure" class="bare">https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VkBaseInStructure</a></p>
</div>
<div class="paragraph">
<p>This page is extracted from the Vulkan Specification.
Fixes and changes should be made to the Specification, not directly.</p>
</div>
<div style="page-break-after: always;"></div>
</div>
</div>
<div class="sect2">
<h3 id="_vkbaseoutstructure3">VkBaseOutStructure(3)</h3>
<div class="sect3">
<h4 id="_name_380">Name</h4>
<div class="paragraph">
<p>VkBaseOutStructure - Base structure for a read-only pointer chain</p>
</div>
</div>
<div class="sect3">
<h4 id="_c_specification_380">C Specification</h4>
<div class="paragraph">
<p>The <code>VkBaseOutStructure</code> structure is defined as:</p>
</div>
<div id="VkBaseOutStructure" class="listingblock">
<div class="content">
<pre class="highlight"><code class="language-c++" data-lang="c++">typedef struct VkBaseOutStructure {
    VkStructureType               sType;
    struct VkBaseOutStructure*    pNext;
} VkBaseOutStructure;</code></pre>
</div>
</div>
</div>
<div class="sect3">
<h4 id="_members_17">Members</h4>
<div class="ulist">
<ul>
<li>
<p><code>sType</code> is the structure type of the structure being iterated
through.</p>
</li>
<li>
<p><code>pNext</code> is <code>NULL</code> or a pointer to the next structure in a structure
chain.</p>
</li>
</ul>
</div>
</div>
<div class="sect3">
<h4 id="_description_380">Description</h4>
<div class="paragraph">
<p><code>VkBaseOutStructure</code> can be used to facilitate iterating through a
structure pointer chain that returns data back to the application.</p>
</div>
</div>
<div class="sect3">
<h4 id="_see_also_380">See Also</h4>
<div class="paragraph">
<p><a href="#VkBaseOutStructure">VkBaseOutStructure</a>, <a href="#VkStructureType">VkStructureType</a></p>
</div>
</div>
<div class="sect3">
<h4 id="_document_notes_380">Document Notes</h4>
<div class="paragraph">
<p>For more information, see the Vulkan Specification at URL</p>
</div>
<div class="paragraph">
<p><a href="https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VkBaseOutStructure" class="bare">https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VkBaseOutStructure</a></p>
</div>
<div class="paragraph">
<p>This page is extracted from the Vulkan Specification.
Fixes and changes should be made to the Specification, not directly.</p>
</div>
<div style="page-break-after: always;"></div>
</div>
</div>
<div class="sect2">
<h3 id="_vkbindaccelerationstructurememoryinfonv3">VkBindAccelerationStructureMemoryInfoNV(3)</h3>
<div class="sect3">
<h4 id="_name_381">Name</h4>
<div class="paragraph">
<p>VkBindAccelerationStructureMemoryInfoNV - Structure specifying acceleration structure memory binding</p>
</div>
</div>
<div class="sect3">
<h4 id="_c_specification_381">C Specification</h4>
<div class="paragraph">
<p>The <code>VkBindAccelerationStructureMemoryInfoNV</code> structure is defined as:</p>
</div>
<div id="VkBindAccelerationStructureMemoryInfoNV" class="listingblock">
<div class="content">
<pre class="highlight"><code class="language-c++" data-lang="c++">typedef struct VkBindAccelerationStructureMemoryInfoNV {
    VkStructureType              sType;
    const void*                  pNext;
    VkAccelerationStructureNV    accelerationStructure;
    VkDeviceMemory               memory;
    VkDeviceSize                 memoryOffset;
    uint32_t                     deviceIndexCount;
    const uint32_t*              pDeviceIndices;
} VkBindAccelerationStructureMemoryInfoNV;</code></pre>
</div>
</div>
</div>
<div class="sect3">
<h4 id="_members_18">Members</h4>
<div class="ulist">
<ul>
<li>
<p><code>sType</code> is the type of this structure.</p>
</li>
<li>
<p><code>pNext</code> is <code>NULL</code> or a pointer to an extension-specific structure.</p>
</li>
<li>
<p><code>accelerationStructure</code> is the acceleration structure to be attached
to memory.</p>
</li>
<li>
<p><code>memory</code> is a <code>VkDeviceMemory</code> object describing the device
memory to attach.</p>
</li>
<li>
<p><code>memoryOffset</code> is the start offset of the region of memory that is
to be bound to the acceleration structure.
The number of bytes returned in the
<a href="#VkMemoryRequirements">VkMemoryRequirements</a>::<code>size</code> member in <code>memory</code>, starting
from <code>memoryOffset</code> bytes, will be bound to the specified
acceleration structure.</p>
</li>
<li>
<p><code>deviceIndexCount</code> is the number of elements in
<code>pDeviceIndices</code>.</p>
</li>
<li>
<p><code>pDeviceIndices</code> is a pointer to an array of device indices.</p>
</li>
</ul>
</div>
</div>
<div class="sect3">
<h4 id="_description_381">Description</h4>
<div class="sidebarblock">
<div class="content">
<div class="title">Valid Usage</div>
<div class="ulist">
<ul>
<li>
<p><a id="VUID-VkBindAccelerationStructureMemoryInfoNV-accelerationStructure-02450"></a>
<code>accelerationStructure</code> <strong class="purple">must</strong> not already be backed by a memory
object</p>
</li>
<li>
<p><a id="VUID-VkBindAccelerationStructureMemoryInfoNV-memoryOffset-02451"></a>
<code>memoryOffset</code> <strong class="purple">must</strong> be less than the size of <code>memory</code></p>
</li>
<li>
<p><a id="VUID-VkBindAccelerationStructureMemoryInfoNV-memory-02593"></a>
<code>memory</code> <strong class="purple">must</strong> have been allocated using one of the memory types
allowed in the <code>memoryTypeBits</code> member of the
<a href="#VkMemoryRequirements">VkMemoryRequirements</a> structure returned from a call to
<a href="#vkGetAccelerationStructureMemoryRequirementsNV">vkGetAccelerationStructureMemoryRequirementsNV</a> with
<code>accelerationStructure</code> and <code>type</code> of
<code>VK_ACCELERATION_STRUCTURE_MEMORY_REQUIREMENTS_TYPE_OBJECT_NV</code></p>
</li>
<li>
<p><a id="VUID-VkBindAccelerationStructureMemoryInfoNV-memoryOffset-02594"></a>
<code>memoryOffset</code> <strong class="purple">must</strong> be an integer multiple of the <code>alignment</code>
member of the <a href="#VkMemoryRequirements">VkMemoryRequirements</a> structure returned from a call
to <a href="#vkGetAccelerationStructureMemoryRequirementsNV">vkGetAccelerationStructureMemoryRequirementsNV</a> with
<code>accelerationStructure</code> and <code>type</code> of
<code>VK_ACCELERATION_STRUCTURE_MEMORY_REQUIREMENTS_TYPE_OBJECT_NV</code></p>
</li>
<li>
<p><a id="VUID-VkBindAccelerationStructureMemoryInfoNV-size-02595"></a>
The <code>size</code> member of the <code>VkMemoryRequirements</code> structure
returned from a call to
<a href="#vkGetAccelerationStructureMemoryRequirementsNV">vkGetAccelerationStructureMemoryRequirementsNV</a> with
<code>accelerationStructure</code> and <code>type</code> of
<code>VK_ACCELERATION_STRUCTURE_MEMORY_REQUIREMENTS_TYPE_OBJECT_NV</code> <strong class="purple">must</strong>
be less than or equal to the size of <code>memory</code> minus
<code>memoryOffset</code></p>
</li>
</ul>
</div>
</div>
</div>
<div class="sidebarblock">
<div class="content">
<div class="title">Valid Usage (Implicit)</div>
<div class="ulist">
<ul>
<li>
<p><a id="VUID-VkBindAccelerationStructureMemoryInfoNV-sType-sType"></a> <code>sType</code> <strong class="purple">must</strong> be <code>VK_STRUCTURE_TYPE_BIND_ACCELERATION_STRUCTURE_MEMORY_INFO_NV</code></p>
</li>
<li>
<p><a id="VUID-VkBindAccelerationStructureMemoryInfoNV-pNext-pNext"></a> <code>pNext</code> <strong class="purple">must</strong> be <code>NULL</code></p>
</li>
<li>
<p><a id="VUID-VkBindAccelerationStructureMemoryInfoNV-accelerationStructure-parameter"></a> <code>accelerationStructure</code> <strong class="purple">must</strong> be a valid <code>VkAccelerationStructureNV</code> handle</p>
</li>
<li>
<p><a id="VUID-VkBindAccelerationStructureMemoryInfoNV-memory-parameter"></a> <code>memory</code> <strong class="purple">must</strong> be a valid <code>VkDeviceMemory</code> handle</p>
</li>
<li>
<p><a id="VUID-VkBindAccelerationStructureMemoryInfoNV-pDeviceIndices-parameter"></a> If <code>deviceIndexCount</code> is not <code>0</code>, <code>pDeviceIndices</code> <strong class="purple">must</strong> be a valid pointer to an array of <code>deviceIndexCount</code> <code>uint32_t</code> values</p>
</li>
<li>
<p><a id="VUID-VkBindAccelerationStructureMemoryInfoNV-commonparent"></a> Both of <code>accelerationStructure</code>, and <code>memory</code> <strong class="purple">must</strong> have been created, allocated, or retrieved from the same <code>VkDevice</code></p>
</li>
</ul>
</div>
</div>
</div>
</div>
<div class="sect3">
<h4 id="_see_also_381">See Also</h4>
<div class="paragraph">
<p><a href="#VkAccelerationStructureNV">VkAccelerationStructureNV</a>, <a href="#VkDeviceMemory">VkDeviceMemory</a>, <code>VkDeviceSize</code>, <a href="#VkStructureType">VkStructureType</a>, <a href="#vkBindAccelerationStructureMemoryNV">vkBindAccelerationStructureMemoryNV</a></p>
</div>
</div>
<div class="sect3">
<h4 id="_document_notes_381">Document Notes</h4>
<div class="paragraph">
<p>For more information, see the Vulkan Specification at URL</p>
</div>
<div class="paragraph">
<p><a href="https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VkBindAccelerationStructureMemoryInfoNV" class="bare">https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VkBindAccelerationStructureMemoryInfoNV</a></p>
</div>
<div class="paragraph">
<p>This page is extracted from the Vulkan Specification.
Fixes and changes should be made to the Specification, not directly.</p>
</div>
<div style="page-break-after: always;"></div>
</div>
</div>
<div class="sect2">
<h3 id="_vkbindbuffermemorydevicegroupinfo3">VkBindBufferMemoryDeviceGroupInfo(3)</h3>
<div class="sect3">
<h4 id="_name_382">Name</h4>
<div class="paragraph">
<p>VkBindBufferMemoryDeviceGroupInfo - Structure specifying device within a group to bind to</p>
</div>
</div>
<div class="sect3">
<h4 id="_c_specification_382">C Specification</h4>
<div id="VkBindBufferMemoryDeviceGroupInfo" class="listingblock">
<div class="content">
<pre class="highlight"><code class="language-c++" data-lang="c++">typedef struct VkBindBufferMemoryDeviceGroupInfo {
    VkStructureType    sType;
    const void*        pNext;
    uint32_t           deviceIndexCount;
    const uint32_t*    pDeviceIndices;
} VkBindBufferMemoryDeviceGroupInfo;</code></pre>
</div>
</div>
<div class="paragraph">
<p>or the equivalent</p>
</div>
<div id="VkBindBufferMemoryDeviceGroupInfoKHR" class="listingblock">
<div class="content">
<pre class="highlight"><code class="language-c++" data-lang="c++">typedef VkBindBufferMemoryDeviceGroupInfo VkBindBufferMemoryDeviceGroupInfoKHR;</code></pre>
</div>
</div>
</div>
<div class="sect3">
<h4 id="_members_19">Members</h4>
<div class="paragraph">
<p>If the <code>pNext</code> list of <a href="#VkBindBufferMemoryInfo">VkBindBufferMemoryInfo</a> includes a
<code>VkBindBufferMemoryDeviceGroupInfo</code> structure, then that structure
determines how memory is bound to buffers across multiple devices in a
device group.</p>
</div>
</div>
<div class="sect3">
<h4 id="_description_382">Description</h4>
<div class="paragraph">
<p>The <code>VkBindBufferMemoryDeviceGroupInfo</code> structure is defined as:</p>
</div>
<div class="ulist">
<ul>
<li>
<p><code>sType</code> is the type of this structure.</p>
</li>
<li>
<p><code>pNext</code> is <code>NULL</code> or a pointer to an extension-specific structure.</p>
</li>
<li>
<p><code>deviceIndexCount</code> is the number of elements in
<code>pDeviceIndices</code>.</p>
</li>
<li>
<p><code>pDeviceIndices</code> is a pointer to an array of device indices.</p>
</li>
</ul>
</div>
<div class="paragraph">
<p>If <code>deviceIndexCount</code> is greater than zero, then on device index <span class="eq">i</span>
the buffer is attached to the instance of <code>memory</code> on the physical
device with device index <span class="eq">pDeviceIndices[i]</span>.</p>
</div>
<div class="paragraph">
<p>If <code>deviceIndexCount</code> is zero and <code>memory</code> comes from a memory heap
with the <code>VK_MEMORY_HEAP_MULTI_INSTANCE_BIT</code> bit set, then it is as if
<code>pDeviceIndices</code> contains consecutive indices from zero to the number of
physical devices in the logical device, minus one.
In other words, by default each physical device attaches to its own instance
of <code>memory</code>.</p>
</div>
<div class="paragraph">
<p>If <code>deviceIndexCount</code> is zero and <code>memory</code> comes from a memory heap
without the <code>VK_MEMORY_HEAP_MULTI_INSTANCE_BIT</code> bit set, then it is as
if <code>pDeviceIndices</code> contains an array of zeros.
In other words, by default each physical device attaches to instance zero.</p>
</div>
<div class="sidebarblock">
<div class="content">
<div class="title">Valid Usage</div>
<div class="ulist">
<ul>
<li>
<p><a id="VUID-VkBindBufferMemoryDeviceGroupInfo-deviceIndexCount-01606"></a>
<code>deviceIndexCount</code> <strong class="purple">must</strong> either be zero or equal to the number of
physical devices in the logical device</p>
</li>
<li>
<p><a id="VUID-VkBindBufferMemoryDeviceGroupInfo-pDeviceIndices-01607"></a>
All elements of <code>pDeviceIndices</code> <strong class="purple">must</strong> be valid device indices</p>
</li>
</ul>
</div>
</div>
</div>
<div class="sidebarblock">
<div class="content">
<div class="title">Valid Usage (Implicit)</div>
<div class="ulist">
<ul>
<li>
<p><a id="VUID-VkBindBufferMemoryDeviceGroupInfo-sType-sType"></a> <code>sType</code> <strong class="purple">must</strong> be <code>VK_STRUCTURE_TYPE_BIND_BUFFER_MEMORY_DEVICE_GROUP_INFO</code></p>
</li>
<li>
<p><a id="VUID-VkBindBufferMemoryDeviceGroupInfo-pDeviceIndices-parameter"></a> If <code>deviceIndexCount</code> is not <code>0</code>, <code>pDeviceIndices</code> <strong class="purple">must</strong> be a valid pointer to an array of <code>deviceIndexCount</code> <code>uint32_t</code> values</p>
</li>
</ul>
</div>
</div>
</div>
</div>
<div class="sect3">
<h4 id="_see_also_382">See Also</h4>
<div class="paragraph">
<p><a href="#VkStructureType">VkStructureType</a></p>
</div>
</div>
<div class="sect3">
<h4 id="_document_notes_382">Document Notes</h4>
<div class="paragraph">
<p>For more information, see the Vulkan Specification at URL</p>
</div>
<div class="paragraph">
<p><a href="https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VkBindBufferMemoryDeviceGroupInfo" class="bare">https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VkBindBufferMemoryDeviceGroupInfo</a></p>
</div>
<div class="paragraph">
<p>This page is extracted from the Vulkan Specification.
Fixes and changes should be made to the Specification, not directly.</p>
</div>
<div style="page-break-after: always;"></div>
</div>
</div>
<div class="sect2">
<h3 id="_vkbindbuffermemoryinfo3">VkBindBufferMemoryInfo(3)</h3>
<div class="sect3">
<h4 id="_name_383">Name</h4>
<div class="paragraph">
<p>VkBindBufferMemoryInfo - Structure specifying how to bind a buffer to memory</p>
</div>
</div>
<div class="sect3">
<h4 id="_c_specification_383">C Specification</h4>
<div class="paragraph">
<p><code>VkBindBufferMemoryInfo</code> contains members corresponding to the
parameters of <a href="#vkBindBufferMemory">vkBindBufferMemory</a>.</p>
</div>
<div class="paragraph">
<p>The <code>VkBindBufferMemoryInfo</code> structure is defined as:</p>
</div>
<div id="VkBindBufferMemoryInfo" class="listingblock">
<div class="content">
<pre class="highlight"><code class="language-c++" data-lang="c++">typedef struct VkBindBufferMemoryInfo {
    VkStructureType    sType;
    const void*        pNext;
    VkBuffer           buffer;
    VkDeviceMemory     memory;
    VkDeviceSize       memoryOffset;
} VkBindBufferMemoryInfo;</code></pre>
</div>
</div>
<div class="paragraph">
<p>or the equivalent</p>
</div>
<div id="VkBindBufferMemoryInfoKHR" class="listingblock">
<div class="content">
<pre class="highlight"><code class="language-c++" data-lang="c++">typedef VkBindBufferMemoryInfo VkBindBufferMemoryInfoKHR;</code></pre>
</div>
</div>
</div>
<div class="sect3">
<h4 id="_members_20">Members</h4>
<div class="ulist">
<ul>
<li>
<p><code>sType</code> is the type of this structure.</p>
</li>
<li>
<p><code>pNext</code> is <code>NULL</code> or a pointer to an extension-specific structure.</p>
</li>
<li>
<p><code>buffer</code> is the buffer to be attached to memory.</p>
</li>
<li>
<p><code>memory</code> is a <a href="#VkDeviceMemory">VkDeviceMemory</a> object describing the device
memory to attach.</p>
</li>
<li>
<p><code>memoryOffset</code> is the start offset of the region of <code>memory</code>
which is to be bound to the buffer.
The number of bytes returned in the
<code>VkMemoryRequirements</code>::<code>size</code> member in <code>memory</code>, starting
from <code>memoryOffset</code> bytes, will be bound to the specified buffer.</p>
</li>
</ul>
</div>
</div>
<div class="sect3">
<h4 id="_description_383">Description</h4>
<div class="sidebarblock">
<div class="content">
<div class="title">Valid Usage</div>
<div class="ulist">
<ul>
<li>
<p><a id="VUID-VkBindBufferMemoryInfo-buffer-01593"></a>
<code>buffer</code> <strong class="purple">must</strong> not already be backed by a memory object</p>
</li>
<li>
<p><a id="VUID-VkBindBufferMemoryInfo-buffer-01594"></a>
<code>buffer</code> <strong class="purple">must</strong> not have been created with any sparse memory binding
flags</p>
</li>
<li>
<p><a id="VUID-VkBindBufferMemoryInfo-memoryOffset-01595"></a>
<code>memoryOffset</code> <strong class="purple">must</strong> be less than the size of <code>memory</code></p>
</li>
<li>
<p><a id="VUID-VkBindBufferMemoryInfo-memory-01599"></a>
<code>memory</code> <strong class="purple">must</strong> have been allocated using one of the memory types
allowed in the <code>memoryTypeBits</code> member of the
<code>VkMemoryRequirements</code> structure returned from a call to
<code>vkGetBufferMemoryRequirements</code> with <code>buffer</code></p>
</li>
<li>
<p><a id="VUID-VkBindBufferMemoryInfo-memoryOffset-01600"></a>
<code>memoryOffset</code> <strong class="purple">must</strong> be an integer multiple of the <code>alignment</code>
member of the <code>VkMemoryRequirements</code> structure returned from a call
to <code>vkGetBufferMemoryRequirements</code> with <code>buffer</code></p>
</li>
<li>
<p><a id="VUID-VkBindBufferMemoryInfo-size-01601"></a>
The <code>size</code> member of the <code>VkMemoryRequirements</code> structure
returned from a call to <code>vkGetBufferMemoryRequirements</code> with
<code>buffer</code> <strong class="purple">must</strong> be less than or equal to the size of <code>memory</code>
minus <code>memoryOffset</code></p>
</li>
<li>
<p><a id="VUID-VkBindBufferMemoryInfo-buffer-01602"></a>
If <code>buffer</code> requires a dedicated allocation(as reported by
<a href="#vkGetBufferMemoryRequirements2">vkGetBufferMemoryRequirements2</a> in
<a href="#VkMemoryDedicatedRequirements">VkMemoryDedicatedRequirements</a>::requiresDedicatedAllocation for
<code>buffer</code>), <code>memory</code> <strong class="purple">must</strong> have been created with
<a href="#VkMemoryDedicatedAllocateInfo">VkMemoryDedicatedAllocateInfo</a>::<code>buffer</code> equal to <code>buffer</code>
and <code>memoryOffset</code> <strong class="purple">must</strong> be zero</p>
</li>
<li>
<p><a id="VUID-VkBindBufferMemoryInfo-memory-01900"></a>
If the <code>VkMemoryAllocateInfo</code> provided when <code>memory</code> was
allocated included an instance of <a href="#VkMemoryDedicatedAllocateInfo">VkMemoryDedicatedAllocateInfo</a> in
its <code>pNext</code> chain, and
<a href="#VkMemoryDedicatedAllocateInfo">VkMemoryDedicatedAllocateInfo</a>::<code>buffer</code> was not
<a href="#VK_NULL_HANDLE">VK_NULL_HANDLE</a>, then <code>buffer</code> <strong class="purple">must</strong> equal
<a href="#VkMemoryDedicatedAllocateInfo">VkMemoryDedicatedAllocateInfo</a>::<code>buffer</code> and <code>memoryOffset</code>
<strong class="purple">must</strong> be zero.</p>
</li>
<li>
<p><a id="VUID-VkBindBufferMemoryInfo-buffer-01603"></a>
If <code>buffer</code> was created with
<a href="#VkDedicatedAllocationBufferCreateInfoNV">VkDedicatedAllocationBufferCreateInfoNV</a>::<code>dedicatedAllocation</code>
equal to <code>VK_TRUE</code>, <code>memory</code> <strong class="purple">must</strong> have been created with
<a href="#VkDedicatedAllocationMemoryAllocateInfoNV">VkDedicatedAllocationMemoryAllocateInfoNV</a>::<code>buffer</code> equal to
<code>buffer</code> and <code>memoryOffset</code> <strong class="purple">must</strong> be zero</p>
</li>
<li>
<p><a id="VUID-VkBindBufferMemoryInfo-pNext-01605"></a>
If the <code>pNext</code> chain includes
<a href="#VkBindBufferMemoryDeviceGroupInfo">VkBindBufferMemoryDeviceGroupInfo</a>, all instances of <code>memory</code>
specified by
<a href="#VkBindBufferMemoryDeviceGroupInfo">VkBindBufferMemoryDeviceGroupInfo</a>::<code>pDeviceIndices</code> <strong class="purple">must</strong> have
been allocated</p>
</li>
</ul>
</div>
</div>
</div>
<div class="sidebarblock">
<div class="content">
<div class="title">Valid Usage (Implicit)</div>
<div class="ulist">
<ul>
<li>
<p><a id="VUID-VkBindBufferMemoryInfo-sType-sType"></a> <code>sType</code> <strong class="purple">must</strong> be <code>VK_STRUCTURE_TYPE_BIND_BUFFER_MEMORY_INFO</code></p>
</li>
<li>
<p><a id="VUID-VkBindBufferMemoryInfo-pNext-pNext"></a> <code>pNext</code> <strong class="purple">must</strong> be <code>NULL</code> or a pointer to a valid instance of <a href="#VkBindBufferMemoryDeviceGroupInfo">VkBindBufferMemoryDeviceGroupInfo</a></p>
</li>
<li>
<p><a id="VUID-VkBindBufferMemoryInfo-buffer-parameter"></a> <code>buffer</code> <strong class="purple">must</strong> be a valid <code>VkBuffer</code> handle</p>
</li>
<li>
<p><a id="VUID-VkBindBufferMemoryInfo-memory-parameter"></a> <code>memory</code> <strong class="purple">must</strong> be a valid <code>VkDeviceMemory</code> handle</p>
</li>
<li>
<p><a id="VUID-VkBindBufferMemoryInfo-commonparent"></a> Both of <code>buffer</code>, and <code>memory</code> <strong class="purple">must</strong> have been created, allocated, or retrieved from the same <code>VkDevice</code></p>
</li>
</ul>
</div>
</div>
</div>
</div>
<div class="sect3">
<h4 id="_see_also_383">See Also</h4>
<div class="paragraph">
<p><a href="#VkBuffer">VkBuffer</a>, <a href="#VkDeviceMemory">VkDeviceMemory</a>, <code>VkDeviceSize</code>, <a href="#VkStructureType">VkStructureType</a>, <a href="#vkBindBufferMemory2">vkBindBufferMemory2</a>, <a href="#vkBindBufferMemory2KHR">vkBindBufferMemory2KHR</a></p>
</div>
</div>
<div class="sect3">
<h4 id="_document_notes_383">Document Notes</h4>
<div class="paragraph">
<p>For more information, see the Vulkan Specification at URL</p>
</div>
<div class="paragraph">
<p><a href="https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VkBindBufferMemoryInfo" class="bare">https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VkBindBufferMemoryInfo</a></p>
</div>
<div class="paragraph">
<p>This page is extracted from the Vulkan Specification.
Fixes and changes should be made to the Specification, not directly.</p>
</div>
<div style="page-break-after: always;"></div>
</div>
</div>
<div class="sect2">
<h3 id="_vkbindimagememorydevicegroupinfo3">VkBindImageMemoryDeviceGroupInfo(3)</h3>
<div class="sect3">
<h4 id="_name_384">Name</h4>
<div class="paragraph">
<p>VkBindImageMemoryDeviceGroupInfo - Structure specifying device within a group to bind to</p>
</div>
</div>
<div class="sect3">
<h4 id="_c_specification_384">C Specification</h4>
<div id="VkBindImageMemoryDeviceGroupInfo" class="listingblock">
<div class="content">
<pre class="highlight"><code class="language-c++" data-lang="c++">typedef struct VkBindImageMemoryDeviceGroupInfo {
    VkStructureType    sType;
    const void*        pNext;
    uint32_t           deviceIndexCount;
    const uint32_t*    pDeviceIndices;
    uint32_t           splitInstanceBindRegionCount;
    const VkRect2D*    pSplitInstanceBindRegions;
} VkBindImageMemoryDeviceGroupInfo;</code></pre>
</div>
</div>
<div class="paragraph">
<p>or the equivalent</p>
</div>
<div id="VkBindImageMemoryDeviceGroupInfoKHR" class="listingblock">
<div class="content">
<pre class="highlight"><code class="language-c++" data-lang="c++">typedef VkBindImageMemoryDeviceGroupInfo VkBindImageMemoryDeviceGroupInfoKHR;</code></pre>
</div>
</div>
</div>
<div class="sect3">
<h4 id="_members_21">Members</h4>
<div class="paragraph">
<p>If the <code>pNext</code> list of <a href="#VkBindImageMemoryInfo">VkBindImageMemoryInfo</a> includes a
<code>VkBindImageMemoryDeviceGroupInfo</code> structure, then that structure
determines how memory is bound to images across multiple devices in a device
group.</p>
</div>
</div>
<div class="sect3">
<h4 id="_description_384">Description</h4>
<div class="paragraph">
<p>The <code>VkBindImageMemoryDeviceGroupInfo</code> structure is defined as:</p>
</div>
<div class="ulist">
<ul>
<li>
<p><code>sType</code> is the type of this structure.</p>
</li>
<li>
<p><code>pNext</code> is <code>NULL</code> or a pointer to an extension-specific structure.</p>
</li>
<li>
<p><code>deviceIndexCount</code> is the number of elements in
<code>pDeviceIndices</code>.</p>
</li>
<li>
<p><code>pDeviceIndices</code> is a pointer to an array of device indices.</p>
</li>
<li>
<p><code>splitInstanceBindRegionCount</code> is the number of elements in
<code>pSplitInstanceBindRegions</code>.</p>
</li>
<li>
<p><code>pSplitInstanceBindRegions</code> is a pointer to an array of rectangles
describing which regions of the image are attached to each instance of
memory.</p>
</li>
</ul>
</div>
<div class="paragraph">
<p>If <code>deviceIndexCount</code> is greater than zero, then on device index <span class="eq">i</span>
<code>image</code> is attached to the instance of the memory on the physical device
with device index <span class="eq">pDeviceIndices[i]</span>.</p>
</div>
<div class="paragraph">
<p>Let <span class="eq">N</span> be the number of physical devices in the logical device.
If <code>splitInstanceBindRegionCount</code> is greater than zero, then
<code>pSplitInstanceBindRegions</code> is an array of <span class="eq">N<sup>2</sup></span> rectangles, where
the image region specified by the rectangle at element <span class="eq">i*N+j</span> in
resource instance <span class="eq">i</span> is bound to the memory instance <span class="eq">j</span>.
The blocks of the memory that are bound to each sparse image block region
use an offset in memory, relative to <code>memoryOffset</code>, computed as if the
whole image were being bound to a contiguous range of memory.
In other words, horizontally adjacent image blocks use consecutive blocks of
memory, vertically adjacent image blocks are separated by the number of
bytes per block multiplied by the width in blocks of <code>image</code>, and the
block at <span class="eq">(0,0)</span> corresponds to memory starting at <code>memoryOffset</code>.</p>
</div>
<div class="paragraph">
<p>If <code>splitInstanceBindRegionCount</code> and <code>deviceIndexCount</code> are zero
and the memory comes from a memory heap with the
<code>VK_MEMORY_HEAP_MULTI_INSTANCE_BIT</code> bit set, then it is as if
<code>pDeviceIndices</code> contains consecutive indices from zero to the number of
physical devices in the logical device, minus one.
In other words, by default each physical device attaches to its own instance
of the memory.</p>
</div>
<div class="paragraph">
<p>If <code>splitInstanceBindRegionCount</code> and <code>deviceIndexCount</code> are zero
and the memory comes from a memory heap without the
<code>VK_MEMORY_HEAP_MULTI_INSTANCE_BIT</code> bit set, then it is as if
<code>pDeviceIndices</code> contains an array of zeros.
In other words, by default each physical device attaches to instance zero.</p>
</div>
<div class="sidebarblock">
<div class="content">
<div class="title">Valid Usage</div>
<div class="ulist">
<ul>
<li>
<p><a id="VUID-VkBindImageMemoryDeviceGroupInfo-deviceIndexCount-01633"></a>
At least one of <code>deviceIndexCount</code> and
<code>splitInstanceBindRegionCount</code> <strong class="purple">must</strong> be zero.</p>
</li>
<li>
<p><a id="VUID-VkBindImageMemoryDeviceGroupInfo-deviceIndexCount-01634"></a>
<code>deviceIndexCount</code> <strong class="purple">must</strong> either be zero or equal to the number of
physical devices in the logical device</p>
</li>
<li>
<p><a id="VUID-VkBindImageMemoryDeviceGroupInfo-pDeviceIndices-01635"></a>
All elements of <code>pDeviceIndices</code> <strong class="purple">must</strong> be valid device indices.</p>
</li>
<li>
<p><a id="VUID-VkBindImageMemoryDeviceGroupInfo-splitInstanceBindRegionCount-01636"></a>
<code>splitInstanceBindRegionCount</code> <strong class="purple">must</strong> either be zero or equal to the
number of physical devices in the logical device squared</p>
</li>
<li>
<p><a id="VUID-VkBindImageMemoryDeviceGroupInfo-pSplitInstanceBindRegions-01637"></a>
Elements of <code>pSplitInstanceBindRegions</code> that correspond to the same
instance of an image <strong class="purple">must</strong> not overlap.</p>
</li>
<li>
<p><a id="VUID-VkBindImageMemoryDeviceGroupInfo-offset-01638"></a>
The <code>offset.x</code> member of any element of
<code>pSplitInstanceBindRegions</code> <strong class="purple">must</strong> be a multiple of the sparse image
block width
(<code>VkSparseImageFormatProperties</code>::<code>imageGranularity.width</code>) of
all non-metadata aspects of the image</p>
</li>
<li>
<p><a id="VUID-VkBindImageMemoryDeviceGroupInfo-offset-01639"></a>
The <code>offset.y</code> member of any element of
<code>pSplitInstanceBindRegions</code> <strong class="purple">must</strong> be a multiple of the sparse image
block height
(<code>VkSparseImageFormatProperties</code>::<code>imageGranularity.height</code>) of
all non-metadata aspects of the image</p>
</li>
<li>
<p><a id="VUID-VkBindImageMemoryDeviceGroupInfo-extent-01640"></a>
The <code>extent.width</code> member of any element of
<code>pSplitInstanceBindRegions</code> <strong class="purple">must</strong> either be a multiple of the sparse
image block width of all non-metadata aspects of the image, or else
<code>extent.width</code> + <code>offset.x</code> <strong class="purple">must</strong> equal the width of the image
subresource</p>
</li>
<li>
<p><a id="VUID-VkBindImageMemoryDeviceGroupInfo-extent-01641"></a>
The <code>extent.height</code> member of any element of
<code>pSplitInstanceBindRegions</code> <strong class="purple">must</strong> either be a multiple of the sparse
image block height of all non-metadata aspects of the image, or else
<code>extent.height</code><br />
<code>offset.y</code> <strong class="purple">must</strong> equal the width of the image subresource</p>
</li>
</ul>
</div>
</div>
</div>
<div class="sidebarblock">
<div class="content">
<div class="title">Valid Usage (Implicit)</div>
<div class="ulist">
<ul>
<li>
<p><a id="VUID-VkBindImageMemoryDeviceGroupInfo-sType-sType"></a> <code>sType</code> <strong class="purple">must</strong> be <code>VK_STRUCTURE_TYPE_BIND_IMAGE_MEMORY_DEVICE_GROUP_INFO</code></p>
</li>
<li>
<p><a id="VUID-VkBindImageMemoryDeviceGroupInfo-pDeviceIndices-parameter"></a> If <code>deviceIndexCount</code> is not <code>0</code>, <code>pDeviceIndices</code> <strong class="purple">must</strong> be a valid pointer to an array of <code>deviceIndexCount</code> <code>uint32_t</code> values</p>
</li>
<li>
<p><a id="VUID-VkBindImageMemoryDeviceGroupInfo-pSplitInstanceBindRegions-parameter"></a> If <code>splitInstanceBindRegionCount</code> is not <code>0</code>, <code>pSplitInstanceBindRegions</code> <strong class="purple">must</strong> be a valid pointer to an array of <code>splitInstanceBindRegionCount</code> <code>VkRect2D</code> structures</p>
</li>
</ul>
</div>
</div>
</div>
</div>
<div class="sect3">
<h4 id="_see_also_384">See Also</h4>
<div class="paragraph">
<p><a href="#VkRect2D">VkRect2D</a>, <a href="#VkStructureType">VkStructureType</a></p>
</div>
</div>
<div class="sect3">
<h4 id="_document_notes_384">Document Notes</h4>
<div class="paragraph">
<p>For more information, see the Vulkan Specification at URL</p>
</div>
<div class="paragraph">
<p><a href="https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VkBindImageMemoryDeviceGroupInfo" class="bare">https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VkBindImageMemoryDeviceGroupInfo</a></p>
</div>
<div class="paragraph">
<p>This page is extracted from the Vulkan Specification.
Fixes and changes should be made to the Specification, not directly.</p>
</div>
<div style="page-break-after: always;"></div>
</div>
</div>
<div class="sect2">
<h3 id="_vkbindimagememoryinfo3">VkBindImageMemoryInfo(3)</h3>
<div class="sect3">
<h4 id="_name_385">Name</h4>
<div class="paragraph">
<p>VkBindImageMemoryInfo - Structure specifying how to bind an image to memory</p>
</div>
</div>
<div class="sect3">
<h4 id="_c_specification_385">C Specification</h4>
<div class="paragraph">
<p><code>VkBindImageMemoryInfo</code> contains members corresponding to the parameters
of <a href="#vkBindImageMemory">vkBindImageMemory</a>.</p>
</div>
<div class="paragraph">
<p>The <code>VkBindImageMemoryInfo</code> structure is defined as:</p>
</div>
<div id="VkBindImageMemoryInfo" class="listingblock">
<div class="content">
<pre class="highlight"><code class="language-c++" data-lang="c++">typedef struct VkBindImageMemoryInfo {
    VkStructureType    sType;
    const void*        pNext;
    VkImage            image;
    VkDeviceMemory     memory;
    VkDeviceSize       memoryOffset;
} VkBindImageMemoryInfo;</code></pre>
</div>
</div>
<div class="paragraph">
<p>or the equivalent</p>
</div>
<div id="VkBindImageMemoryInfoKHR" class="listingblock">
<div class="content">
<pre class="highlight"><code class="language-c++" data-lang="c++">typedef VkBindImageMemoryInfo VkBindImageMemoryInfoKHR;</code></pre>
</div>
</div>
</div>
<div class="sect3">
<h4 id="_members_22">Members</h4>
<div class="ulist">
<ul>
<li>
<p><code>sType</code> is the type of this structure.</p>
</li>
<li>
<p><code>pNext</code> is <code>NULL</code> or a pointer to an extension-specific structure.</p>
</li>
<li>
<p><code>image</code> is the image to be attached to memory.</p>
</li>
<li>
<p><code>memory</code> is a <a href="#VkDeviceMemory">VkDeviceMemory</a> object describing the device
memory to attach.</p>
</li>
<li>
<p><code>memoryOffset</code> is the start offset of the region of <code>memory</code>
which is to be bound to the image.
The number of bytes returned in the
<code>VkMemoryRequirements</code>::<code>size</code> member in <code>memory</code>, starting
from <code>memoryOffset</code> bytes, will be bound to the specified image.</p>
</li>
</ul>
</div>
</div>
<div class="sect3">
<h4 id="_description_385">Description</h4>
<div class="sidebarblock">
<div class="content">
<div class="title">Valid Usage</div>
<div class="ulist">
<ul>
<li>
<p><a id="VUID-VkBindImageMemoryInfo-image-01609"></a>
<code>image</code> <strong class="purple">must</strong> not already be backed by a memory object</p>
</li>
<li>
<p><a id="VUID-VkBindImageMemoryInfo-image-01610"></a>
<code>image</code> <strong class="purple">must</strong> not have been created with any sparse memory binding
flags</p>
</li>
<li>
<p><a id="VUID-VkBindImageMemoryInfo-memoryOffset-01611"></a>
<code>memoryOffset</code> <strong class="purple">must</strong> be less than the size of <code>memory</code></p>
</li>
<li>
<p><a id="VUID-VkBindImageMemoryInfo-pNext-01615"></a>
If the <code>pNext</code> chain does not include an instance of the
<a href="#VkBindImagePlaneMemoryInfo">VkBindImagePlaneMemoryInfo</a> structure, <code>memory</code> <strong class="purple">must</strong> have been
allocated using one of the memory types allowed in the
<code>memoryTypeBits</code> member of the <a href="#VkMemoryRequirements">VkMemoryRequirements</a> structure
returned from a call to <a href="#vkGetImageMemoryRequirements2">vkGetImageMemoryRequirements2</a> with
<code>image</code></p>
</li>
<li>
<p><a id="VUID-VkBindImageMemoryInfo-pNext-01616"></a>
If the <code>pNext</code> chain does not include an instance of the
<a href="#VkBindImagePlaneMemoryInfo">VkBindImagePlaneMemoryInfo</a> structure, <code>memoryOffset</code> <strong class="purple">must</strong> be
an integer multiple of the <code>alignment</code> member of the
<a href="#VkMemoryRequirements">VkMemoryRequirements</a> structure returned from a call to
<a href="#vkGetImageMemoryRequirements2">vkGetImageMemoryRequirements2</a> with <code>image</code></p>
</li>
<li>
<p><a id="VUID-VkBindImageMemoryInfo-pNext-01617"></a>
If the <code>pNext</code> chain does not include an instance of the
<a href="#VkBindImagePlaneMemoryInfo">VkBindImagePlaneMemoryInfo</a> structure, the difference of the size
of <code>memory</code> and <code>memoryOffset</code> <strong class="purple">must</strong> be greater than or equal to
the <code>size</code> member of the <a href="#VkMemoryRequirements">VkMemoryRequirements</a> structure
returned from a call to <a href="#vkGetImageMemoryRequirements2">vkGetImageMemoryRequirements2</a> with the
same <code>image</code></p>
</li>
<li>
<p><a id="VUID-VkBindImageMemoryInfo-pNext-01618"></a>
If the <code>pNext</code> chain includes an instance of the
<a href="#VkBindImagePlaneMemoryInfo">VkBindImagePlaneMemoryInfo</a> structure, <code>image</code> <strong class="purple">must</strong> have been
created with the <code>VK_IMAGE_CREATE_DISJOINT_BIT</code> bit set.</p>
</li>
<li>
<p><a id="VUID-VkBindImageMemoryInfo-pNext-01619"></a>
If the <code>pNext</code> chain includes an instance of the
<a href="#VkBindImagePlaneMemoryInfo">VkBindImagePlaneMemoryInfo</a> structure, <code>memory</code> <strong class="purple">must</strong> have been
allocated using one of the memory types allowed in the
<code>memoryTypeBits</code> member of the <a href="#VkMemoryRequirements">VkMemoryRequirements</a> structure
returned from a call to <a href="#vkGetImageMemoryRequirements2">vkGetImageMemoryRequirements2</a> with
<code>image</code> and the correct <code>planeAspect</code> for this plane in the
<a href="#VkImagePlaneMemoryRequirementsInfo">VkImagePlaneMemoryRequirementsInfo</a> structure attached to the
<a href="#VkImageMemoryRequirementsInfo2">VkImageMemoryRequirementsInfo2</a>&#8217;s <code>pNext</code> chain</p>
</li>
<li>
<p><a id="VUID-VkBindImageMemoryInfo-pNext-01620"></a>
If the <code>pNext</code> chain includes an instance of the
<a href="#VkBindImagePlaneMemoryInfo">VkBindImagePlaneMemoryInfo</a> structure, <code>memoryOffset</code> <strong class="purple">must</strong> be
an integer multiple of the <code>alignment</code> member of the
<a href="#VkMemoryRequirements">VkMemoryRequirements</a> structure returned from a call to
<a href="#vkGetImageMemoryRequirements2">vkGetImageMemoryRequirements2</a> with <code>image</code> and the correct
<code>planeAspect</code> for this plane in the
<a href="#VkImagePlaneMemoryRequirementsInfo">VkImagePlaneMemoryRequirementsInfo</a> structure attached to the
<a href="#VkImageMemoryRequirementsInfo2">VkImageMemoryRequirementsInfo2</a>&#8217;s <code>pNext</code> chain</p>
</li>
<li>
<p><a id="VUID-VkBindImageMemoryInfo-pNext-01621"></a>
If the <code>pNext</code> chain includes an instance of the
<a href="#VkBindImagePlaneMemoryInfo">VkBindImagePlaneMemoryInfo</a> structure, the difference of the size
of <code>memory</code> and <code>memoryOffset</code> <strong class="purple">must</strong> be greater than or equal to
the <code>size</code> member of the <a href="#VkMemoryRequirements">VkMemoryRequirements</a> structure
returned from a call to <a href="#vkGetImageMemoryRequirements2">vkGetImageMemoryRequirements2</a> with the
same <code>image</code> and the correct <code>planeAspect</code> for this plane in the
<a href="#VkImagePlaneMemoryRequirementsInfo">VkImagePlaneMemoryRequirementsInfo</a> structure attached to the
<a href="#VkImageMemoryRequirementsInfo2">VkImageMemoryRequirementsInfo2</a>&#8217;s <code>pNext</code> chain</p>
</li>
<li>
<p><a id="VUID-VkBindImageMemoryInfo-image-01622"></a>
If <code>image</code> requires a dedicated allocation (as reported by
<a href="#vkGetImageMemoryRequirements2">vkGetImageMemoryRequirements2</a> in
<a href="#VkMemoryDedicatedRequirements">VkMemoryDedicatedRequirements</a>::requiresDedicatedAllocation for
<code>image</code>), <code>memory</code> <strong class="purple">must</strong> have been created with
<a href="#VkMemoryDedicatedAllocateInfo">VkMemoryDedicatedAllocateInfo</a>::<code>image</code> equal to <code>image</code>
and <code>memoryOffset</code> <strong class="purple">must</strong> be zero</p>
</li>
<li>
<p><a id="VUID-VkBindImageMemoryInfo-memory-02630"></a>
If the <a href="vkspec.html#features-dedicatedAllocationImageAliasing">dedicated allocation
image aliasing</a> feature is not enabled, and the
<code>VkMemoryAllocateInfo</code> provided when <code>memory</code> was allocated
included an instance of <a href="#VkMemoryDedicatedAllocateInfo">VkMemoryDedicatedAllocateInfo</a> in its
<code>pNext</code> chain, and <a href="#VkMemoryDedicatedAllocateInfo">VkMemoryDedicatedAllocateInfo</a>::<code>image</code>
was not <a href="#VK_NULL_HANDLE">VK_NULL_HANDLE</a>, then <code>image</code> <strong class="purple">must</strong> equal
<a href="#VkMemoryDedicatedAllocateInfo">VkMemoryDedicatedAllocateInfo</a>::<code>image</code> and <code>memoryOffset</code>
<strong class="purple">must</strong> be zero.</p>
</li>
<li>
<p><a id="VUID-VkBindImageMemoryInfo-memory-02631"></a>
If the <a href="vkspec.html#features-dedicatedAllocationImageAliasing">dedicated allocation
image aliasing</a> feature is enabled, and the <code>VkMemoryAllocateInfo</code>
provided when <code>memory</code> was allocated included an instance of
<a href="#VkMemoryDedicatedAllocateInfo">VkMemoryDedicatedAllocateInfo</a> in its <code>pNext</code> chain, and
<a href="#VkMemoryDedicatedAllocateInfo">VkMemoryDedicatedAllocateInfo</a>::<code>image</code> was not
<a href="#VK_NULL_HANDLE">VK_NULL_HANDLE</a>, then <code>memoryOffset</code> <strong class="purple">must</strong> be zero, and
<code>image</code> <strong class="purple">must</strong> be either equal to
<a href="#VkMemoryDedicatedAllocateInfo">VkMemoryDedicatedAllocateInfo</a>::<code>image</code> or an image that was
created using the same parameters in <code>VkImageCreateInfo</code>, with the
exception that <code>extent</code> and <code>arrayLayers</code> <strong class="purple">may</strong> differ subject to
the following restrictions: every dimension in the <code>extent</code>
parameter of the image being bound <strong class="purple">must</strong> be equal to or smaller than the
original image for which the allocation was created; and the
<code>arrayLayers</code> parameter of the image being bound <strong class="purple">must</strong> be equal to
or smaller than the original image for which the allocation was created.</p>
</li>
<li>
<p><a id="VUID-VkBindImageMemoryInfo-image-01623"></a>
If <code>image</code> was created with
<a href="#VkDedicatedAllocationImageCreateInfoNV">VkDedicatedAllocationImageCreateInfoNV</a>::<code>dedicatedAllocation</code>
equal to <code>VK_TRUE</code>, <code>memory</code> <strong class="purple">must</strong> have been created with
<a href="#VkDedicatedAllocationMemoryAllocateInfoNV">VkDedicatedAllocationMemoryAllocateInfoNV</a>::<code>image</code> equal to
<code>image</code> and <code>memoryOffset</code> <strong class="purple">must</strong> be zero</p>
</li>
<li>
<p><a id="VUID-VkBindImageMemoryInfo-pNext-01626"></a>
If the <code>pNext</code> chain includes
<a href="#VkBindImageMemoryDeviceGroupInfo">VkBindImageMemoryDeviceGroupInfo</a>, all instances of <code>memory</code>
specified by
<a href="#VkBindImageMemoryDeviceGroupInfo">VkBindImageMemoryDeviceGroupInfo</a>::<code>pDeviceIndices</code> <strong class="purple">must</strong> have
been allocated</p>
</li>
<li>
<p><a id="VUID-VkBindImageMemoryInfo-pNext-01627"></a>
If the <code>pNext</code> chain includes
<a href="#VkBindImageMemoryDeviceGroupInfo">VkBindImageMemoryDeviceGroupInfo</a>, and
<a href="#VkBindImageMemoryDeviceGroupInfo">VkBindImageMemoryDeviceGroupInfo</a>::<code>splitInstanceBindRegionCount</code>
is not zero, then <code>image</code> <strong class="purple">must</strong> have been created with the
<code>VK_IMAGE_CREATE_SPLIT_INSTANCE_BIND_REGIONS_BIT</code> bit set</p>
</li>
<li>
<p><a id="VUID-VkBindImageMemoryInfo-pNext-01628"></a>
If the <code>pNext</code> chain includes
<a href="#VkBindImageMemoryDeviceGroupInfo">VkBindImageMemoryDeviceGroupInfo</a>, all elements of
<a href="#VkBindImageMemoryDeviceGroupInfo">VkBindImageMemoryDeviceGroupInfo</a>::<code>pSplitInstanceBindRegions</code>
<strong class="purple">must</strong> be valid rectangles contained within the dimensions of <code>image</code></p>
</li>
<li>
<p><a id="VUID-VkBindImageMemoryInfo-pNext-01629"></a>
If the <code>pNext</code> chain includes
<a href="#VkBindImageMemoryDeviceGroupInfo">VkBindImageMemoryDeviceGroupInfo</a>, the union of the areas of all
elements of
<a href="#VkBindImageMemoryDeviceGroupInfo">VkBindImageMemoryDeviceGroupInfo</a>::<code>pSplitInstanceBindRegions</code>
that correspond to the same instance of <code>image</code> <strong class="purple">must</strong> cover the
entire image.</p>
</li>
<li>
<p><a id="VUID-VkBindImageMemoryInfo-image-01630"></a>
If <code>image</code> was created with a valid swapchain handle in
<a href="#VkImageSwapchainCreateInfoKHR">VkImageSwapchainCreateInfoKHR</a>::<code>swapchain</code>, then the
<code>pNext</code> chain <strong class="purple">must</strong> include a valid instance of
<a href="#VkBindImageMemorySwapchainInfoKHR">VkBindImageMemorySwapchainInfoKHR</a></p>
</li>
<li>
<p><a id="VUID-VkBindImageMemoryInfo-pNext-01631"></a>
If the <code>pNext</code> chain includes an instance of
<a href="#VkBindImageMemorySwapchainInfoKHR">VkBindImageMemorySwapchainInfoKHR</a>, <code>memory</code> <strong class="purple">must</strong> be
<a href="#VK_NULL_HANDLE">VK_NULL_HANDLE</a></p>
</li>
<li>
<p><a id="VUID-VkBindImageMemoryInfo-pNext-01632"></a>
If the <code>pNext</code> chain does not include an instance of
<a href="#VkBindImageMemorySwapchainInfoKHR">VkBindImageMemorySwapchainInfoKHR</a>, <code>memory</code> <strong class="purple">must</strong> be a valid
<a href="#VkDeviceMemory">VkDeviceMemory</a> handle</p>
</li>
</ul>
</div>
</div>
</div>
<div class="sidebarblock">
<div class="content">
<div class="title">Valid Usage (Implicit)</div>
<div class="ulist">
<ul>
<li>
<p><a id="VUID-VkBindImageMemoryInfo-sType-sType"></a> <code>sType</code> <strong class="purple">must</strong> be <code>VK_STRUCTURE_TYPE_BIND_IMAGE_MEMORY_INFO</code></p>
</li>
<li>
<p><a id="VUID-VkBindImageMemoryInfo-pNext-pNext"></a> Each <code>pNext</code> member of any structure (including this one) in the <code>pNext</code> chain <strong class="purple">must</strong> be either <code>NULL</code> or a pointer to a valid instance of <a href="#VkBindImageMemoryDeviceGroupInfo">VkBindImageMemoryDeviceGroupInfo</a>, <a href="#VkBindImageMemorySwapchainInfoKHR">VkBindImageMemorySwapchainInfoKHR</a>, or <a href="#VkBindImagePlaneMemoryInfo">VkBindImagePlaneMemoryInfo</a></p>
</li>
<li>
<p><a id="VUID-VkBindImageMemoryInfo-sType-unique"></a> Each <code>sType</code> member in the <code>pNext</code> chain <strong class="purple">must</strong> be unique</p>
</li>
<li>
<p><a id="VUID-VkBindImageMemoryInfo-image-parameter"></a> <code>image</code> <strong class="purple">must</strong> be a valid <code>VkImage</code> handle</p>
</li>
<li>
<p><a id="VUID-VkBindImageMemoryInfo-commonparent"></a> Both of <code>image</code>, and <code>memory</code> that are valid handles <strong class="purple">must</strong> have been created, allocated, or retrieved from the same <code>VkDevice</code></p>
</li>
</ul>
</div>
</div>
</div>
</div>
<div class="sect3">
<h4 id="_see_also_385">See Also</h4>
<div class="paragraph">
<p><a href="#VkDeviceMemory">VkDeviceMemory</a>, <code>VkDeviceSize</code>, <a href="#VkImage">VkImage</a>, <a href="#VkStructureType">VkStructureType</a>, <a href="#vkBindImageMemory2">vkBindImageMemory2</a>, <a href="#vkBindImageMemory2KHR">vkBindImageMemory2KHR</a></p>
</div>
</div>
<div class="sect3">
<h4 id="_document_notes_385">Document Notes</h4>
<div class="paragraph">
<p>For more information, see the Vulkan Specification at URL</p>
</div>
<div class="paragraph">
<p><a href="https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VkBindImageMemoryInfo" class="bare">https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VkBindImageMemoryInfo</a></p>
</div>
<div class="paragraph">
<p>This page is extracted from the Vulkan Specification.
Fixes and changes should be made to the Specification, not directly.</p>
</div>
<div style="page-break-after: always;"></div>
</div>
</div>
<div class="sect2">
<h3 id="_vkbindimagememoryswapchaininfokhr3">VkBindImageMemorySwapchainInfoKHR(3)</h3>
<div class="sect3">
<h4 id="_name_386">Name</h4>
<div class="paragraph">
<p>VkBindImageMemorySwapchainInfoKHR - Structure specifying swapchain image memory to bind to</p>
</div>
</div>
<div class="sect3">
<h4 id="_c_specification_386">C Specification</h4>
<div class="paragraph">
<p>If the <code>pNext</code> chain of <a href="#VkBindImageMemoryInfo">VkBindImageMemoryInfo</a> includes a
<code>VkBindImageMemorySwapchainInfoKHR</code> structure, then that structure
includes a swapchain handle and image index indicating that the image will
be bound to memory from that swapchain.</p>
</div>
<div class="paragraph">
<p>The <code>VkBindImageMemorySwapchainInfoKHR</code> structure is defined as:</p>
</div>
<div id="VkBindImageMemorySwapchainInfoKHR" class="listingblock">
<div class="content">
<pre class="highlight"><code class="language-c++" data-lang="c++">typedef struct VkBindImageMemorySwapchainInfoKHR {
    VkStructureType    sType;
    const void*        pNext;
    VkSwapchainKHR     swapchain;
    uint32_t           imageIndex;
} VkBindImageMemorySwapchainInfoKHR;</code></pre>
</div>
</div>
</div>
<div class="sect3">
<h4 id="_members_23">Members</h4>
<div class="ulist">
<ul>
<li>
<p><code>sType</code> is the type of this structure.</p>
</li>
<li>
<p><code>pNext</code> is <code>NULL</code> or a pointer to an extension-specific structure.</p>
</li>
<li>
<p><code>swapchain</code> is <a href="#VK_NULL_HANDLE">VK_NULL_HANDLE</a> or a swapchain handle.</p>
</li>
<li>
<p><code>imageIndex</code> is an image index within <code>swapchain</code>.</p>
</li>
</ul>
</div>
</div>
<div class="sect3">
<h4 id="_description_386">Description</h4>
<div class="paragraph">
<p>If <code>swapchain</code> is not <code>NULL</code>, the <code>swapchain</code> and <code>imageIndex</code>
are used to determine the memory that the image is bound to, instead of
<code>memory</code> and <code>memoryOffset</code>.</p>
</div>
<div class="paragraph">
<p>Memory <strong class="purple">can</strong> be bound to a swapchain and use the <code>pDeviceIndices</code> or
<code>pSplitInstanceBindRegions</code> members of
<a href="#VkBindImageMemoryDeviceGroupInfo">VkBindImageMemoryDeviceGroupInfo</a>.</p>
</div>
<div class="sidebarblock">
<div class="content">
<div class="title">Valid Usage</div>
<div class="ulist">
<ul>
<li>
<p><a id="VUID-VkBindImageMemorySwapchainInfoKHR-imageIndex-01644"></a>
<code>imageIndex</code> <strong class="purple">must</strong> be less than the number of images in
<code>swapchain</code></p>
</li>
</ul>
</div>
</div>
</div>
<div class="sidebarblock">
<div class="content">
<div class="title">Valid Usage (Implicit)</div>
<div class="ulist">
<ul>
<li>
<p><a id="VUID-VkBindImageMemorySwapchainInfoKHR-sType-sType"></a> <code>sType</code> <strong class="purple">must</strong> be <code>VK_STRUCTURE_TYPE_BIND_IMAGE_MEMORY_SWAPCHAIN_INFO_KHR</code></p>
</li>
<li>
<p><a id="VUID-VkBindImageMemorySwapchainInfoKHR-swapchain-parameter"></a> <code>swapchain</code> <strong class="purple">must</strong> be a valid <code>VkSwapchainKHR</code> handle</p>
</li>
</ul>
</div>
</div>
</div>
<div class="sidebarblock">
<div class="content">
<div class="title">Host Synchronization</div>
<div class="ulist">
<ul>
<li>
<p>Host access to <code>swapchain</code> <strong class="purple">must</strong> be externally synchronized</p>
</li>
</ul>
</div>
</div>
</div>
</div>
<div class="sect3">
<h4 id="_see_also_386">See Also</h4>
<div class="paragraph">
<p><a href="#VkStructureType">VkStructureType</a>, <a href="#VkSwapchainKHR">VkSwapchainKHR</a></p>
</div>
</div>
<div class="sect3">
<h4 id="_document_notes_386">Document Notes</h4>
<div class="paragraph">
<p>For more information, see the Vulkan Specification at URL</p>
</div>
<div class="paragraph">
<p><a href="https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VkBindImageMemorySwapchainInfoKHR" class="bare">https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VkBindImageMemorySwapchainInfoKHR</a></p>
</div>
<div class="paragraph">
<p>This page is extracted from the Vulkan Specification.
Fixes and changes should be made to the Specification, not directly.</p>
</div>
<div style="page-break-after: always;"></div>
</div>
</div>
<div class="sect2">
<h3 id="_vkbindimageplanememoryinfo3">VkBindImagePlaneMemoryInfo(3)</h3>
<div class="sect3">
<h4 id="_name_387">Name</h4>
<div class="paragraph">
<p>VkBindImagePlaneMemoryInfo - Structure specifying how to bind an image plane to memory</p>
</div>
</div>
<div class="sect3">
<h4 id="_c_specification_387">C Specification</h4>
<div class="paragraph">
<p>In order to bind <em>planes</em> of a <em>disjoint image</em>, include a
<code>VkBindImagePlaneMemoryInfo</code> structure in the <code>pNext</code> chain of
<a href="#VkBindImageMemoryInfo">VkBindImageMemoryInfo</a>.</p>
</div>
<div class="paragraph">
<p>The <code>VkBindImagePlaneMemoryInfo</code> structure is defined as:</p>
</div>
<div id="VkBindImagePlaneMemoryInfo" class="listingblock">
<div class="content">
<pre class="highlight"><code class="language-c++" data-lang="c++">typedef struct VkBindImagePlaneMemoryInfo {
    VkStructureType          sType;
    const void*              pNext;
    VkImageAspectFlagBits    planeAspect;
} VkBindImagePlaneMemoryInfo;</code></pre>
</div>
</div>
<div class="paragraph">
<p>or the equivalent</p>
</div>
<div id="VkBindImagePlaneMemoryInfoKHR" class="listingblock">
<div class="content">
<pre class="highlight"><code class="language-c++" data-lang="c++">typedef VkBindImagePlaneMemoryInfo VkBindImagePlaneMemoryInfoKHR;</code></pre>
</div>
</div>
</div>
<div class="sect3">
<h4 id="_members_24">Members</h4>
<div class="ulist">
<ul>
<li>
<p><code>sType</code> is the type of this structure.</p>
</li>
<li>
<p><code>pNext</code> is <code>NULL</code> or a pointer to an extension-specific structure.</p>
</li>
<li>
<p><code>planeAspect</code> is the aspect of the disjoint image plane to bind.</p>
</li>
</ul>
</div>
</div>
<div class="sect3">
<h4 id="_description_387">Description</h4>
<div class="sidebarblock">
<div class="content">
<div class="title">Valid Usage</div>
<div class="ulist">
<ul>
<li>
<p><a id="VUID-VkBindImagePlaneMemoryInfo-planeAspect-02283"></a>
If the image&#8217;s tiling is <code>VK_IMAGE_TILING_LINEAR</code> or
<code>VK_IMAGE_TILING_OPTIMAL</code>, then <code>planeAspect</code> <strong class="purple">must</strong> be a single
valid <em>format plane</em> for the image.
(That is, <code>planeAspect</code> <strong class="purple">must</strong> be <code>VK_IMAGE_ASPECT_PLANE_0_BIT</code>
or <code>VK_IMAGE_ASPECT_PLANE_1_BIT</code> for &#8220;<code>_2PLANE</code>&#8221; formats and
<code>planeAspect</code> <strong class="purple">must</strong> be <code>VK_IMAGE_ASPECT_PLANE_0_BIT</code>,
<code>VK_IMAGE_ASPECT_PLANE_1_BIT</code>, or <code>VK_IMAGE_ASPECT_PLANE_2_BIT</code>
for &#8220;<code>_3PLANE</code>&#8221; formats.)</p>
</li>
<li>
<p><a id="VUID-VkBindImagePlaneMemoryInfo-planeAspect-02284"></a>
 If the image&#8217;s tiling is <code>VK_IMAGE_TILING_DRM_FORMAT_MODIFIER_EXT</code>,
 then <code>planeAspect</code> <strong class="purple">must</strong> be a single valid <em>memory plane</em> for the
 image.
 (That is, <code>aspectMask</code> <strong class="purple">must</strong> specify a plane index that is less than
 the
 <a href="vkspec.html#VkDrmFormatModifierPropertiesEXT"><code>drmFormatModifierPlaneCount</code></a>
 associated with the image&#8217;s
<a href="vkspec.html#VkImageCreateInfo"><code>format</code></a> and
<a href="vkspec.html#VkImageDrmFormatModifierPropertiesEXT"><code>drmFormatModifier</code></a>.)</p>
</li>
<li>
<p><a id="VUID-VkBindImagePlaneMemoryInfo-None-01643"></a>
A single call to <a href="#vkBindImageMemory2">vkBindImageMemory2</a> <strong class="purple">must</strong> bind all or none of the
planes of an image (i.e. bindings to all planes of an image <strong class="purple">must</strong> be
made in a single <a href="#vkBindImageMemory2">vkBindImageMemory2</a> call), as separate bindings</p>
</li>
</ul>
</div>
</div>
</div>
<div class="sidebarblock">
<div class="content">
<div class="title">Valid Usage (Implicit)</div>
<div class="ulist">
<ul>
<li>
<p><a id="VUID-VkBindImagePlaneMemoryInfo-sType-sType"></a> <code>sType</code> <strong class="purple">must</strong> be <code>VK_STRUCTURE_TYPE_BIND_IMAGE_PLANE_MEMORY_INFO</code></p>
</li>
<li>
<p><a id="VUID-VkBindImagePlaneMemoryInfo-planeAspect-parameter"></a> <code>planeAspect</code> <strong class="purple">must</strong> be a valid <a href="#VkImageAspectFlagBits">VkImageAspectFlagBits</a> value</p>
</li>
</ul>
</div>
</div>
</div>
</div>
<div class="sect3">
<h4 id="_see_also_387">See Also</h4>
<div class="paragraph">
<p><a href="#VkImageAspectFlagBits">VkImageAspectFlagBits</a>, <a href="#VkStructureType">VkStructureType</a></p>
</div>
</div>
<div class="sect3">
<h4 id="_document_notes_387">Document Notes</h4>
<div class="paragraph">
<p>For more information, see the Vulkan Specification at URL</p>
</div>
<div class="paragraph">
<p><a href="https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VkBindImagePlaneMemoryInfo" class="bare">https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VkBindImagePlaneMemoryInfo</a></p>
</div>
<div class="paragraph">
<p>This page is extracted from the Vulkan Specification.
Fixes and changes should be made to the Specification, not directly.</p>
</div>
<div style="page-break-after: always;"></div>
</div>
</div>
<div class="sect2">
<h3 id="_vkbindsparseinfo3">VkBindSparseInfo(3)</h3>
<div class="sect3">
<h4 id="_name_388">Name</h4>
<div class="paragraph">
<p>VkBindSparseInfo - Structure specifying a sparse binding operation</p>
</div>
</div>
<div class="sect3">
<h4 id="_c_specification_388">C Specification</h4>
<div class="paragraph">
<p>The <code>VkBindSparseInfo</code> structure is defined as:</p>
</div>
<div id="VkBindSparseInfo" class="listingblock">
<div class="content">
<pre class="highlight"><code class="language-c++" data-lang="c++">typedef struct VkBindSparseInfo {
    VkStructureType                             sType;
    const void*                                 pNext;
    uint32_t                                    waitSemaphoreCount;
    const VkSemaphore*                          pWaitSemaphores;
    uint32_t                                    bufferBindCount;
    const VkSparseBufferMemoryBindInfo*         pBufferBinds;
    uint32_t                                    imageOpaqueBindCount;
    const VkSparseImageOpaqueMemoryBindInfo*    pImageOpaqueBinds;
    uint32_t                                    imageBindCount;
    const VkSparseImageMemoryBindInfo*          pImageBinds;
    uint32_t                                    signalSemaphoreCount;
    const VkSemaphore*                          pSignalSemaphores;
} VkBindSparseInfo;</code></pre>
</div>
</div>
</div>
<div class="sect3">
<h4 id="_members_25">Members</h4>
<div class="ulist">
<ul>
<li>
<p><code>sType</code> is the type of this structure.</p>
</li>
<li>
<p><code>pNext</code> is <code>NULL</code> or a pointer to an extension-specific structure.</p>
</li>
<li>
<p><code>waitSemaphoreCount</code> is the number of semaphores upon which to wait
before executing the sparse binding operations for the batch.</p>
</li>
<li>
<p><code>pWaitSemaphores</code> is a pointer to an array of semaphores upon which
to wait on before the sparse binding operations for this batch begin
execution.
If semaphores to wait on are provided, they define a
<a href="vkspec.html#synchronization-semaphores-waiting">semaphore wait operation</a>.</p>
</li>
<li>
<p><code>bufferBindCount</code> is the number of sparse buffer bindings to perform
in the batch.</p>
</li>
<li>
<p><code>pBufferBinds</code> is a pointer to an array of
<a href="#VkSparseBufferMemoryBindInfo">VkSparseBufferMemoryBindInfo</a> structures.</p>
</li>
<li>
<p><code>imageOpaqueBindCount</code> is the number of opaque sparse image bindings
to perform.</p>
</li>
<li>
<p><code>pImageOpaqueBinds</code> is a pointer to an array of
<a href="#VkSparseImageOpaqueMemoryBindInfo">VkSparseImageOpaqueMemoryBindInfo</a> structures, indicating opaque
sparse image bindings to perform.</p>
</li>
<li>
<p><code>imageBindCount</code> is the number of sparse image bindings to perform.</p>
</li>
<li>
<p><code>pImageBinds</code> is a pointer to an array of
<a href="#VkSparseImageMemoryBindInfo">VkSparseImageMemoryBindInfo</a> structures, indicating sparse image
bindings to perform.</p>
</li>
<li>
<p><code>signalSemaphoreCount</code> is the number of semaphores to be signaled
once the sparse binding operations specified by the structure have
completed execution.</p>
</li>
<li>
<p><code>pSignalSemaphores</code> is a pointer to an array of semaphores which
will be signaled when the sparse binding operations for this batch have
completed execution.
If semaphores to be signaled are provided, they define a
<a href="vkspec.html#synchronization-semaphores-signaling">semaphore signal operation</a>.</p>
</li>
</ul>
</div>
</div>
<div class="sect3">
<h4 id="_description_388">Description</h4>
<div class="sidebarblock">
<div class="content">
<div class="title">Valid Usage (Implicit)</div>
<div class="ulist">
<ul>
<li>
<p><a id="VUID-VkBindSparseInfo-sType-sType"></a> <code>sType</code> <strong class="purple">must</strong> be <code>VK_STRUCTURE_TYPE_BIND_SPARSE_INFO</code></p>
</li>
<li>
<p><a id="VUID-VkBindSparseInfo-pNext-pNext"></a> <code>pNext</code> <strong class="purple">must</strong> be <code>NULL</code> or a pointer to a valid instance of <a href="#VkDeviceGroupBindSparseInfo">VkDeviceGroupBindSparseInfo</a></p>
</li>
<li>
<p><a id="VUID-VkBindSparseInfo-pWaitSemaphores-parameter"></a> If <code>waitSemaphoreCount</code> is not <code>0</code>, <code>pWaitSemaphores</code> <strong class="purple">must</strong> be a valid pointer to an array of <code>waitSemaphoreCount</code> valid <code>VkSemaphore</code> handles</p>
</li>
<li>
<p><a id="VUID-VkBindSparseInfo-pBufferBinds-parameter"></a> If <code>bufferBindCount</code> is not <code>0</code>, <code>pBufferBinds</code> <strong class="purple">must</strong> be a valid pointer to an array of <code>bufferBindCount</code> valid <code>VkSparseBufferMemoryBindInfo</code> structures</p>
</li>
<li>
<p><a id="VUID-VkBindSparseInfo-pImageOpaqueBinds-parameter"></a> If <code>imageOpaqueBindCount</code> is not <code>0</code>, <code>pImageOpaqueBinds</code> <strong class="purple">must</strong> be a valid pointer to an array of <code>imageOpaqueBindCount</code> valid <code>VkSparseImageOpaqueMemoryBindInfo</code> structures</p>
</li>
<li>
<p><a id="VUID-VkBindSparseInfo-pImageBinds-parameter"></a> If <code>imageBindCount</code> is not <code>0</code>, <code>pImageBinds</code> <strong class="purple">must</strong> be a valid pointer to an array of <code>imageBindCount</code> valid <code>VkSparseImageMemoryBindInfo</code> structures</p>
</li>
<li>
<p><a id="VUID-VkBindSparseInfo-pSignalSemaphores-parameter"></a> If <code>signalSemaphoreCount</code> is not <code>0</code>, <code>pSignalSemaphores</code> <strong class="purple">must</strong> be a valid pointer to an array of <code>signalSemaphoreCount</code> valid <code>VkSemaphore</code> handles</p>
</li>
<li>
<p><a id="VUID-VkBindSparseInfo-commonparent"></a> Both of the elements of <code>pSignalSemaphores</code>, and the elements of <code>pWaitSemaphores</code> that are valid handles <strong class="purple">must</strong> have been created, allocated, or retrieved from the same <code>VkDevice</code></p>
</li>
</ul>
</div>
</div>
</div>
</div>
<div class="sect3">
<h4 id="_see_also_388">See Also</h4>
<div class="paragraph">
<p><a href="#VkSemaphore">VkSemaphore</a>, <a href="#VkSparseBufferMemoryBindInfo">VkSparseBufferMemoryBindInfo</a>, <a href="#VkSparseImageMemoryBindInfo">VkSparseImageMemoryBindInfo</a>, <a href="#VkSparseImageOpaqueMemoryBindInfo">VkSparseImageOpaqueMemoryBindInfo</a>, <a href="#VkStructureType">VkStructureType</a>, <a href="#vkQueueBindSparse">vkQueueBindSparse</a></p>
</div>
</div>
<div class="sect3">
<h4 id="_document_notes_388">Document Notes</h4>
<div class="paragraph">
<p>For more information, see the Vulkan Specification at URL</p>
</div>
<div class="paragraph">
<p><a href="https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VkBindSparseInfo" class="bare">https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VkBindSparseInfo</a></p>
</div>
<div class="paragraph">
<p>This page is extracted from the Vulkan Specification.
Fixes and changes should be made to the Specification, not directly.</p>
</div>
<div style="page-break-after: always;"></div>
</div>
</div>
<div class="sect2">
<h3 id="_vkbuffercopy3">VkBufferCopy(3)</h3>
<div class="sect3">
<h4 id="_name_389">Name</h4>
<div class="paragraph">
<p>VkBufferCopy - Structure specifying a buffer copy operation</p>
</div>
</div>
<div class="sect3">
<h4 id="_c_specification_389">C Specification</h4>
<div class="paragraph">
<p>The <code>VkBufferCopy</code> structure is defined as:</p>
</div>
<div id="VkBufferCopy" class="listingblock">
<div class="content">
<pre class="highlight"><code class="language-c++" data-lang="c++">typedef struct VkBufferCopy {
    VkDeviceSize    srcOffset;
    VkDeviceSize    dstOffset;
    VkDeviceSize    size;
} VkBufferCopy;</code></pre>
</div>
</div>
</div>
<div class="sect3">
<h4 id="_members_26">Members</h4>
<div class="ulist">
<ul>
<li>
<p><code>srcOffset</code> is the starting offset in bytes from the start of
<code>srcBuffer</code>.</p>
</li>
<li>
<p><code>dstOffset</code> is the starting offset in bytes from the start of
<code>dstBuffer</code>.</p>
</li>
<li>
<p><code>size</code> is the number of bytes to copy.</p>
</li>
</ul>
</div>
</div>
<div class="sect3">
<h4 id="_description_389">Description</h4>
<div class="sidebarblock">
<div class="content">
<div class="title">Valid Usage</div>
<div class="ulist">
<ul>
<li>
<p><a id="VUID-VkBufferCopy-size-01988"></a>
The <code>size</code> <strong class="purple">must</strong> be greater than <code>0</code></p>
</li>
</ul>
</div>
</div>
</div>
</div>
<div class="sect3">
<h4 id="_see_also_389">See Also</h4>
<div class="paragraph">
<p><code>VkDeviceSize</code>, <a href="#vkCmdCopyBuffer">vkCmdCopyBuffer</a></p>
</div>
</div>
<div class="sect3">
<h4 id="_document_notes_389">Document Notes</h4>
<div class="paragraph">
<p>For more information, see the Vulkan Specification at URL</p>
</div>
<div class="paragraph">
<p><a href="https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VkBufferCopy" class="bare">https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VkBufferCopy</a></p>
</div>
<div class="paragraph">
<p>This page is extracted from the Vulkan Specification.
Fixes and changes should be made to the Specification, not directly.</p>
</div>
<div style="page-break-after: always;"></div>
</div>
</div>
<div class="sect2">
<h3 id="_vkbuffercreateinfo3">VkBufferCreateInfo(3)</h3>
<div class="sect3">
<h4 id="_name_390">Name</h4>
<div class="paragraph">
<p>VkBufferCreateInfo - Structure specifying the parameters of a newly created buffer object</p>
</div>
</div>
<div class="sect3">
<h4 id="_c_specification_390">C Specification</h4>
<div class="paragraph">
<p>The <code>VkBufferCreateInfo</code> structure is defined as:</p>
</div>
<div id="VkBufferCreateInfo" class="listingblock">
<div class="content">
<pre class="highlight"><code class="language-c++" data-lang="c++">typedef struct VkBufferCreateInfo {
    VkStructureType        sType;
    const void*            pNext;
    VkBufferCreateFlags    flags;
    VkDeviceSize           size;
    VkBufferUsageFlags     usage;
    VkSharingMode          sharingMode;
    uint32_t               queueFamilyIndexCount;
    const uint32_t*        pQueueFamilyIndices;
} VkBufferCreateInfo;</code></pre>
</div>
</div>
</div>
<div class="sect3">
<h4 id="_members_27">Members</h4>
<div class="ulist">
<ul>
<li>
<p><code>sType</code> is the type of this structure.</p>
</li>
<li>
<p><code>pNext</code> is <code>NULL</code> or a pointer to an extension-specific structure.</p>
</li>
<li>
<p><code>flags</code> is a bitmask of <a href="#VkBufferCreateFlagBits">VkBufferCreateFlagBits</a> specifying
additional parameters of the buffer.</p>
</li>
<li>
<p><code>size</code> is the size in bytes of the buffer to be created.</p>
</li>
<li>
<p><code>usage</code> is a bitmask of <a href="#VkBufferUsageFlagBits">VkBufferUsageFlagBits</a> specifying
allowed usages of the buffer.</p>
</li>
<li>
<p><code>sharingMode</code> is a <a href="#VkSharingMode">VkSharingMode</a> value specifying the sharing
mode of the buffer when it will be accessed by multiple queue families.</p>
</li>
<li>
<p><code>queueFamilyIndexCount</code> is the number of entries in the
<code>pQueueFamilyIndices</code> array.</p>
</li>
<li>
<p><code>pQueueFamilyIndices</code> is a list of queue families that will access
this buffer (ignored if <code>sharingMode</code> is not
<code>VK_SHARING_MODE_CONCURRENT</code>).</p>
</li>
</ul>
</div>
</div>
<div class="sect3">
<h4 id="_description_390">Description</h4>
<div class="admonitionblock note">
<table>
<tr>
<td class="icon">
<i class="fa icon-note" title="Note"></i>
</td>
<td class="content">
<div class="title">editing-note</div>
<div class="paragraph">
<p>(Jon) Should the constraint on usage != 0 be converted to a Valid Usage
statement? See gitlab #854.</p>
</div>
</td>
</tr>
</table>
</div>
<div class="sidebarblock">
<div class="content">
<div class="title">Valid Usage</div>
<div class="ulist">
<ul>
<li>
<p><a id="VUID-VkBufferCreateInfo-size-00912"></a>
<code>size</code> <strong class="purple">must</strong> be greater than <code>0</code></p>
</li>
<li>
<p><a id="VUID-VkBufferCreateInfo-sharingMode-00913"></a>
If <code>sharingMode</code> is <code>VK_SHARING_MODE_CONCURRENT</code>,
<code>pQueueFamilyIndices</code> <strong class="purple">must</strong> be a valid pointer to an array of
<code>queueFamilyIndexCount</code> <code>uint32_t</code> values</p>
</li>
<li>
<p><a id="VUID-VkBufferCreateInfo-sharingMode-00914"></a>
If <code>sharingMode</code> is <code>VK_SHARING_MODE_CONCURRENT</code>,
<code>queueFamilyIndexCount</code> <strong class="purple">must</strong> be greater than <code>1</code></p>
</li>
<li>
<p><a id="VUID-VkBufferCreateInfo-sharingMode-01419"></a>
If <code>sharingMode</code> is <code>VK_SHARING_MODE_CONCURRENT</code>, each element
of <code>pQueueFamilyIndices</code> <strong class="purple">must</strong> be unique and <strong class="purple">must</strong> be less than
<code>pQueueFamilyPropertyCount</code> returned by either
<a href="#vkGetPhysicalDeviceQueueFamilyProperties">vkGetPhysicalDeviceQueueFamilyProperties</a> or
<a href="#vkGetPhysicalDeviceQueueFamilyProperties2">vkGetPhysicalDeviceQueueFamilyProperties2</a> for the
<code>physicalDevice</code> that was used to create <code>device</code></p>
</li>
<li>
<p><a id="VUID-VkBufferCreateInfo-flags-00915"></a>
If the <a href="vkspec.html#features-sparseBinding">sparse bindings</a> feature is not
enabled, <code>flags</code> <strong class="purple">must</strong> not contain
<code>VK_BUFFER_CREATE_SPARSE_BINDING_BIT</code></p>
</li>
<li>
<p><a id="VUID-VkBufferCreateInfo-flags-00916"></a>
If the <a href="vkspec.html#features-sparseResidencyBuffer">sparse buffer residency</a>
feature is not enabled, <code>flags</code> <strong class="purple">must</strong> not contain
<code>VK_BUFFER_CREATE_SPARSE_RESIDENCY_BIT</code></p>
</li>
<li>
<p><a id="VUID-VkBufferCreateInfo-flags-00917"></a>
If the <a href="vkspec.html#features-sparseResidencyAliased">sparse aliased residency</a>
feature is not enabled, <code>flags</code> <strong class="purple">must</strong> not contain
<code>VK_BUFFER_CREATE_SPARSE_ALIASED_BIT</code></p>
</li>
<li>
<p><a id="VUID-VkBufferCreateInfo-flags-00918"></a>
If <code>flags</code> contains <code>VK_BUFFER_CREATE_SPARSE_RESIDENCY_BIT</code> or
<code>VK_BUFFER_CREATE_SPARSE_ALIASED_BIT</code>, it <strong class="purple">must</strong> also contain
<code>VK_BUFFER_CREATE_SPARSE_BINDING_BIT</code></p>
</li>
<li>
<p><a id="VUID-VkBufferCreateInfo-pNext-00920"></a>
If the <code>pNext</code> chain contains an instance of
<a href="#VkExternalMemoryBufferCreateInfo">VkExternalMemoryBufferCreateInfo</a>, its <code>handleTypes</code> member
<strong class="purple">must</strong> only contain bits that are also in
<a href="#VkExternalBufferProperties">VkExternalBufferProperties</a>::<code>externalMemoryProperties.compatibleHandleTypes</code>,
as returned by <a href="#vkGetPhysicalDeviceExternalBufferProperties">vkGetPhysicalDeviceExternalBufferProperties</a> with
<code>pExternalBufferInfo</code>-&gt;<code>handleType</code> equal to any one of the
handle types specified in
<a href="#VkExternalMemoryBufferCreateInfo">VkExternalMemoryBufferCreateInfo</a>::<code>handleTypes</code></p>
</li>
<li>
<p><a id="VUID-VkBufferCreateInfo-flags-01887"></a>
If the protected memory feature is not enabled, <code>flags</code> <strong class="purple">must</strong> not
contain <code>VK_BUFFER_CREATE_PROTECTED_BIT</code></p>
</li>
<li>
<p><a id="VUID-VkBufferCreateInfo-None-01888"></a>
If any of the bits <code>VK_BUFFER_CREATE_SPARSE_BINDING_BIT</code>,
<code>VK_BUFFER_CREATE_SPARSE_RESIDENCY_BIT</code>, or
<code>VK_BUFFER_CREATE_SPARSE_ALIASED_BIT</code> are set,
<code>VK_BUFFER_CREATE_PROTECTED_BIT</code> <strong class="purple">must</strong> not also be set</p>
</li>
<li>
<p><a id="VUID-VkBufferCreateInfo-pNext-01571"></a>
If the <code>pNext</code> chain contains an instance of
<a href="#VkDedicatedAllocationBufferCreateInfoNV">VkDedicatedAllocationBufferCreateInfoNV</a>, and the
<code>dedicatedAllocation</code> member of the chained structure is
<code>VK_TRUE</code>, then <code>flags</code> <strong class="purple">must</strong> not include
<code>VK_BUFFER_CREATE_SPARSE_BINDING_BIT</code>,
<code>VK_BUFFER_CREATE_SPARSE_RESIDENCY_BIT</code>, or
<code>VK_BUFFER_CREATE_SPARSE_ALIASED_BIT</code></p>
</li>
<li>
<p><a id="VUID-VkBufferCreateInfo-deviceAddress-02604"></a>
If <a href="#VkBufferDeviceAddressCreateInfoEXT">VkBufferDeviceAddressCreateInfoEXT</a>::<code>deviceAddress</code> is not
zero, <code>flags</code> <strong class="purple">must</strong> include
<code>VK_BUFFER_CREATE_DEVICE_ADDRESS_CAPTURE_REPLAY_BIT_EXT</code></p>
</li>
<li>
<p><a id="VUID-VkBufferCreateInfo-flags-02605"></a>
If <code>flags</code> includes
<code>VK_BUFFER_CREATE_DEVICE_ADDRESS_CAPTURE_REPLAY_BIT_EXT</code>, the
<a href="vkspec.html#features-bufferDeviceAddressCaptureReplay">bufferDeviceAddressCaptureReplay</a>
feature <strong class="purple">must</strong> be enabled</p>
</li>
<li>
<p><a id="VUID-VkBufferCreateInfo-usage-02606"></a>
If <code>usage</code> includes
<code>VK_BUFFER_USAGE_SHADER_DEVICE_ADDRESS_BIT_EXT</code>, the
<a href="vkspec.html#features-bufferDeviceAddress">bufferDeviceAddress</a> feature <strong class="purple">must</strong> be
enabled</p>
</li>
</ul>
</div>
</div>
</div>
<div class="sidebarblock">
<div class="content">
<div class="title">Valid Usage (Implicit)</div>
<div class="ulist">
<ul>
<li>
<p><a id="VUID-VkBufferCreateInfo-sType-sType"></a> <code>sType</code> <strong class="purple">must</strong> be <code>VK_STRUCTURE_TYPE_BUFFER_CREATE_INFO</code></p>
</li>
<li>
<p><a id="VUID-VkBufferCreateInfo-pNext-pNext"></a> Each <code>pNext</code> member of any structure (including this one) in the <code>pNext</code> chain <strong class="purple">must</strong> be either <code>NULL</code> or a pointer to a valid instance of <a href="#VkBufferDeviceAddressCreateInfoEXT">VkBufferDeviceAddressCreateInfoEXT</a>, <a href="#VkDedicatedAllocationBufferCreateInfoNV">VkDedicatedAllocationBufferCreateInfoNV</a>, or <a href="#VkExternalMemoryBufferCreateInfo">VkExternalMemoryBufferCreateInfo</a></p>
</li>
<li>
<p><a id="VUID-VkBufferCreateInfo-sType-unique"></a> Each <code>sType</code> member in the <code>pNext</code> chain <strong class="purple">must</strong> be unique</p>
</li>
<li>
<p><a id="VUID-VkBufferCreateInfo-flags-parameter"></a> <code>flags</code> <strong class="purple">must</strong> be a valid combination of <a href="#VkBufferCreateFlagBits">VkBufferCreateFlagBits</a> values</p>
</li>
<li>
<p><a id="VUID-VkBufferCreateInfo-usage-parameter"></a> <code>usage</code> <strong class="purple">must</strong> be a valid combination of <a href="#VkBufferUsageFlagBits">VkBufferUsageFlagBits</a> values</p>
</li>
<li>
<p><a id="VUID-VkBufferCreateInfo-usage-requiredbitmask"></a> <code>usage</code> <strong class="purple">must</strong> not be <code>0</code></p>
</li>
<li>
<p><a id="VUID-VkBufferCreateInfo-sharingMode-parameter"></a> <code>sharingMode</code> <strong class="purple">must</strong> be a valid <a href="#VkSharingMode">VkSharingMode</a> value</p>
</li>
</ul>
</div>
</div>
</div>
</div>
<div class="sect3">
<h4 id="_see_also_390">See Also</h4>
<div class="paragraph">
<p><a href="#VkBufferCreateFlags">VkBufferCreateFlags</a>, <a href="#VkBufferUsageFlags">VkBufferUsageFlags</a>, <code>VkDeviceSize</code>, <a href="#VkSharingMode">VkSharingMode</a>, <a href="#VkStructureType">VkStructureType</a>, <a href="#vkCreateBuffer">vkCreateBuffer</a></p>
</div>
</div>
<div class="sect3">
<h4 id="_document_notes_390">Document Notes</h4>
<div class="paragraph">
<p>For more information, see the Vulkan Specification at URL</p>
</div>
<div class="paragraph">
<p><a href="https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VkBufferCreateInfo" class="bare">https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VkBufferCreateInfo</a></p>
</div>
<div class="paragraph">
<p>This page is extracted from the Vulkan Specification.
Fixes and changes should be made to the Specification, not directly.</p>
</div>
<div style="page-break-after: always;"></div>
</div>
</div>
<div class="sect2">
<h3 id="_vkbufferdeviceaddresscreateinfoext3">VkBufferDeviceAddressCreateInfoEXT(3)</h3>
<div class="sect3">
<h4 id="_name_391">Name</h4>
<div class="paragraph">
<p>VkBufferDeviceAddressCreateInfoEXT - Request a specific address for a buffer</p>
</div>
</div>
<div class="sect3">
<h4 id="_c_specification_391">C Specification</h4>
<div class="paragraph">
<p>To request a specific device address for a buffer, add a
<a href="#VkBufferDeviceAddressCreateInfoEXT">VkBufferDeviceAddressCreateInfoEXT</a> structure to the <code>pNext</code> chain
of the <a href="#VkBufferCreateInfo">VkBufferCreateInfo</a> structure.
The <code>VkBufferDeviceAddressCreateInfoEXT</code> structure is defined as:</p>
</div>
<div id="VkBufferDeviceAddressCreateInfoEXT" class="listingblock">
<div class="content">
<pre class="highlight"><code class="language-c++" data-lang="c++">typedef struct VkBufferDeviceAddressCreateInfoEXT {
    VkStructureType    sType;
    const void*        pNext;
    VkDeviceAddress    deviceAddress;
} VkBufferDeviceAddressCreateInfoEXT;</code></pre>
</div>
</div>
</div>
<div class="sect3">
<h4 id="_members_28">Members</h4>
<div class="ulist">
<ul>
<li>
<p><code>sType</code> is the type of this structure.</p>
</li>
<li>
<p><code>pNext</code> is <code>NULL</code> or a pointer to an extension-specific structure.</p>
</li>
<li>
<p><code>deviceAddress</code> is the device address requested for the buffer.</p>
</li>
</ul>
</div>
</div>
<div class="sect3">
<h4 id="_description_391">Description</h4>
<div class="paragraph">
<p>If <code>deviceAddress</code> is zero, no specific address is requested.</p>
</div>
<div class="paragraph">
<p>If <code>deviceAddress</code> is not zero, <code>deviceAddress</code> <strong class="purple">must</strong> be an address
retrieved from an identically created buffer on the same implementation.
The buffer <strong class="purple">must</strong> also be bound to an identically created
<code>VkDeviceMemory</code> object.</p>
</div>
<div class="paragraph">
<p>If this structure is not present, it is as if <code>deviceAddress</code> is zero.</p>
</div>
<div class="paragraph">
<p>Apps <strong class="purple">should</strong> avoid creating buffers with app-provided addresses and
implementation-provided addresses in the same process, to reduce the
likelihood of <code>VK_ERROR_INVALID_DEVICE_ADDRESS_EXT</code> errors.</p>
</div>
<div class="admonitionblock note">
<table>
<tr>
<td class="icon">
<i class="fa icon-note" title="Note"></i>
</td>
<td class="content">
<div class="title">Note</div>
<div class="paragraph">
<p>The expected usage for this is that a trace capture/replay tool will add the
<code>VK_BUFFER_CREATE_DEVICE_ADDRESS_CAPTURE_REPLAY_BIT_EXT</code> flag to all
buffers that use <code>VK_BUFFER_USAGE_SHADER_DEVICE_ADDRESS_BIT_EXT</code>, and
during capture will save the queried device addresses in the trace.
During replay, the buffers will be created specifying the original address
so any address values stored in the trace data will remain valid.</p>
</div>
<div class="paragraph">
<p>Implementations are expected to separate such buffers in the GPU address
space so normal allocations will avoid using these addresses.
Apps/tools should avoid mixing app-provided and implementation-provided
addresses for buffers created with
<code>VK_BUFFER_CREATE_DEVICE_ADDRESS_CAPTURE_REPLAY_BIT_EXT</code>, to avoid
address space allocation conflicts.</p>
</div>
</td>
</tr>
</table>
</div>
<div class="sidebarblock">
<div class="content">
<div class="title">Valid Usage (Implicit)</div>
<div class="ulist">
<ul>
<li>
<p><a id="VUID-VkBufferDeviceAddressCreateInfoEXT-sType-sType"></a> <code>sType</code> <strong class="purple">must</strong> be <code>VK_STRUCTURE_TYPE_BUFFER_DEVICE_ADDRESS_CREATE_INFO_EXT</code></p>
</li>
</ul>
</div>
</div>
</div>
</div>
<div class="sect3">
<h4 id="_see_also_391">See Also</h4>
<div class="paragraph">
<p><code>VkDeviceAddress</code>, <a href="#VkStructureType">VkStructureType</a></p>
</div>
</div>
<div class="sect3">
<h4 id="_document_notes_391">Document Notes</h4>
<div class="paragraph">
<p>For more information, see the Vulkan Specification at URL</p>
</div>
<div class="paragraph">
<p><a href="https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VkBufferDeviceAddressCreateInfoEXT" class="bare">https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VkBufferDeviceAddressCreateInfoEXT</a></p>
</div>
<div class="paragraph">
<p>This page is extracted from the Vulkan Specification.
Fixes and changes should be made to the Specification, not directly.</p>
</div>
<div style="page-break-after: always;"></div>
</div>
</div>
<div class="sect2">
<h3 id="_vkbufferdeviceaddressinfoext3">VkBufferDeviceAddressInfoEXT(3)</h3>
<div class="sect3">
<h4 id="_name_392">Name</h4>
<div class="paragraph">
<p>VkBufferDeviceAddressInfoEXT - Structure specifying the buffer to query an address for</p>
</div>
</div>
<div class="sect3">
<h4 id="_c_specification_392">C Specification</h4>
<div class="paragraph">
<p>The <code>VkBufferDeviceAddressInfoEXT</code> structure is defined as:</p>
</div>
<div id="VkBufferDeviceAddressInfoEXT" class="listingblock">
<div class="content">
<pre class="highlight"><code class="language-c++" data-lang="c++">typedef struct VkBufferDeviceAddressInfoEXT {
    VkStructureType    sType;
    const void*        pNext;
    VkBuffer           buffer;
} VkBufferDeviceAddressInfoEXT;</code></pre>
</div>
</div>
</div>
<div class="sect3">
<h4 id="_members_29">Members</h4>
<div class="ulist">
<ul>
<li>
<p><code>sType</code> is the type of this structure.</p>
</li>
<li>
<p><code>pNext</code> is <code>NULL</code> or a pointer to an extension-specific structure.</p>
</li>
<li>
<p><code>buffer</code> specifies the buffer whose address is being queried.</p>
</li>
</ul>
</div>
</div>
<div class="sect3">
<h4 id="_description_392">Description</h4>
<div class="sidebarblock">
<div class="content">
<div class="title">Valid Usage</div>
<div class="ulist">
<ul>
<li>
<p><a id="VUID-VkBufferDeviceAddressInfoEXT-buffer-02600"></a>
If <code>buffer</code> is non-sparse and was not created with the
<code>VK_BUFFER_CREATE_DEVICE_ADDRESS_CAPTURE_REPLAY_BIT_EXT</code> flag, then
it <strong class="purple">must</strong> be bound completely and contiguously to a single
<code>VkDeviceMemory</code> object</p>
</li>
<li>
<p><a id="VUID-VkBufferDeviceAddressInfoEXT-buffer-02601"></a>
<code>buffer</code> <strong class="purple">must</strong> have been created with
<code>VK_BUFFER_USAGE_SHADER_DEVICE_ADDRESS_BIT_EXT</code></p>
</li>
</ul>
</div>
</div>
</div>
<div class="sidebarblock">
<div class="content">
<div class="title">Valid Usage (Implicit)</div>
<div class="ulist">
<ul>
<li>
<p><a id="VUID-VkBufferDeviceAddressInfoEXT-sType-sType"></a> <code>sType</code> <strong class="purple">must</strong> be <code>VK_STRUCTURE_TYPE_BUFFER_DEVICE_ADDRESS_INFO_EXT</code></p>
</li>
<li>
<p><a id="VUID-VkBufferDeviceAddressInfoEXT-pNext-pNext"></a> <code>pNext</code> <strong class="purple">must</strong> be <code>NULL</code></p>
</li>
<li>
<p><a id="VUID-VkBufferDeviceAddressInfoEXT-buffer-parameter"></a> <code>buffer</code> <strong class="purple">must</strong> be a valid <code>VkBuffer</code> handle</p>
</li>
</ul>
</div>
</div>
</div>
</div>
<div class="sect3">
<h4 id="_see_also_392">See Also</h4>
<div class="paragraph">
<p><a href="#VkBuffer">VkBuffer</a>, <a href="#VkStructureType">VkStructureType</a>, <a href="#vkGetBufferDeviceAddressEXT">vkGetBufferDeviceAddressEXT</a></p>
</div>
</div>
<div class="sect3">
<h4 id="_document_notes_392">Document Notes</h4>
<div class="paragraph">
<p>For more information, see the Vulkan Specification at URL</p>
</div>
<div class="paragraph">
<p><a href="https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VkBufferDeviceAddressInfoEXT" class="bare">https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VkBufferDeviceAddressInfoEXT</a></p>
</div>
<div class="paragraph">
<p>This page is extracted from the Vulkan Specification.
Fixes and changes should be made to the Specification, not directly.</p>
</div>
<div style="page-break-after: always;"></div>
</div>
</div>
<div class="sect2">
<h3 id="_vkbufferimagecopy3">VkBufferImageCopy(3)</h3>
<div class="sect3">
<h4 id="_name_393">Name</h4>
<div class="paragraph">
<p>VkBufferImageCopy - Structure specifying a buffer image copy operation</p>
</div>
</div>
<div class="sect3">
<h4 id="_c_specification_393">C Specification</h4>
<div class="paragraph">
<p>For both <a href="#vkCmdCopyBufferToImage">vkCmdCopyBufferToImage</a> and <a href="#vkCmdCopyImageToBuffer">vkCmdCopyImageToBuffer</a>, each
element of <code>pRegions</code> is a structure defined as:</p>
</div>
<div id="VkBufferImageCopy" class="listingblock">
<div class="content">
<pre class="highlight"><code class="language-c++" data-lang="c++">typedef struct VkBufferImageCopy {
    VkDeviceSize                bufferOffset;
    uint32_t                    bufferRowLength;
    uint32_t                    bufferImageHeight;
    VkImageSubresourceLayers    imageSubresource;
    VkOffset3D                  imageOffset;
    VkExtent3D                  imageExtent;
} VkBufferImageCopy;</code></pre>
</div>
</div>
</div>
<div class="sect3">
<h4 id="_members_30">Members</h4>
<div class="ulist">
<ul>
<li>
<p><code>bufferOffset</code> is the offset in bytes from the start of the buffer
object where the image data is copied from or to.</p>
</li>
<li>
<p><code>bufferRowLength</code> and <code>bufferImageHeight</code> specify in texels a
subregion of a larger two- or three-dimensional image in buffer memory,
and control the addressing calculations.
If either of these values is zero, that aspect of the buffer memory is
considered to be tightly packed according to the <code>imageExtent</code>.</p>
</li>
<li>
<p><code>imageSubresource</code> is a <a href="#VkImageSubresourceLayers">VkImageSubresourceLayers</a> used to
specify the specific image subresources of the image used for the source
or destination image data.</p>
</li>
<li>
<p><code>imageOffset</code> selects the initial <code>x</code>, <code>y</code>, <code>z</code> offsets
in texels of the sub-region of the source or destination image data.</p>
</li>
<li>
<p><code>imageExtent</code> is the size in texels of the image to copy in
<code>width</code>, <code>height</code> and <code>depth</code>.</p>
</li>
</ul>
</div>
</div>
<div class="sect3">
<h4 id="_description_393">Description</h4>
<div class="paragraph">
<p>When copying to or from a depth or stencil aspect, the data in buffer memory
uses a layout that is a (mostly) tightly packed representation of the depth
or stencil data.
Specifically:</p>
</div>
<div class="ulist">
<ul>
<li>
<p>data copied to or from the stencil aspect of any depth/stencil format is
tightly packed with one <code>VK_FORMAT_S8_UINT</code> value per texel.</p>
</li>
<li>
<p>data copied to or from the depth aspect of a <code>VK_FORMAT_D16_UNORM</code>
or <code>VK_FORMAT_D16_UNORM_S8_UINT</code> format is tightly packed with one
<code>VK_FORMAT_D16_UNORM</code> value per texel.</p>
</li>
<li>
<p>data copied to or from the depth aspect of a <code>VK_FORMAT_D32_SFLOAT</code>
or <code>VK_FORMAT_D32_SFLOAT_S8_UINT</code> format is tightly packed with one
<code>VK_FORMAT_D32_SFLOAT</code> value per texel.</p>
</li>
<li>
<p>data copied to or from the depth aspect of a
<code>VK_FORMAT_X8_D24_UNORM_PACK32</code> or <code>VK_FORMAT_D24_UNORM_S8_UINT</code>
format is packed with one 32-bit word per texel with the D24 value in
the LSBs of the word, and undefined values in the eight MSBs.</p>
</li>
</ul>
</div>
<div class="admonitionblock note">
<table>
<tr>
<td class="icon">
<i class="fa icon-note" title="Note"></i>
</td>
<td class="content">
<div class="title">Note</div>
<div class="paragraph">
<p>To copy both the depth and stencil aspects of a depth/stencil format, two
entries in <code>pRegions</code> <strong class="purple">can</strong> be used, where one specifies the depth aspect
in <code>imageSubresource</code>, and the other specifies the stencil aspect.</p>
</div>
</td>
</tr>
</table>
</div>
<div class="paragraph">
<p>Because depth or stencil aspect buffer to image copies <strong class="purple">may</strong> require format
conversions on some implementations, they are not supported on queues that
do not support graphics.</p>
</div>
<div class="paragraph">
<p>Copies are done layer by layer starting with image layer
<code>baseArrayLayer</code> member of <code>imageSubresource</code>.
<code>layerCount</code> layers are copied from the source image or to the
destination image.</p>
</div>
<div class="sidebarblock">
<div class="content">
<div class="title">Valid Usage</div>
<div class="ulist">
<ul>
<li>
<p><a id="VUID-VkBufferImageCopy-bufferOffset-01558"></a>
If the calling command&#8217;s <code>VkImage</code> parameter&#8217;s format is not a
depth/stencil format or a
<a href="vkspec.html#formats-requiring-sampler-ycbcr-conversion">multi-planar format</a>, then
<code>bufferOffset</code> <strong class="purple">must</strong> be a multiple of the format&#8217;s texel block size.</p>
</li>
<li>
<p><a id="VUID-VkBufferImageCopy-bufferOffset-01559"></a>
If the calling command&#8217;s <code>VkImage</code> parameter&#8217;s format is a
<a href="vkspec.html#formats-requiring-sampler-ycbcr-conversion">multi-planar format</a>, then
<code>bufferOffset</code> <strong class="purple">must</strong> be a multiple of the element size of the
compatible format for the format and the <code>aspectMask</code> of the
<code>imageSubresource</code> as defined in <a href="vkspec.html#formats-compatible-planes" class="bare">html/vkspec.html#formats-compatible-planes</a></p>
</li>
<li>
<p><a id="VUID-VkBufferImageCopy-bufferOffset-00194"></a>
<code>bufferOffset</code> <strong class="purple">must</strong> be a multiple of <code>4</code></p>
</li>
<li>
<p><a id="VUID-VkBufferImageCopy-bufferRowLength-00195"></a>
<code>bufferRowLength</code> <strong class="purple">must</strong> be <code>0</code>, or greater than or equal to the
<code>width</code> member of <code>imageExtent</code></p>
</li>
<li>
<p><a id="VUID-VkBufferImageCopy-bufferImageHeight-00196"></a>
<code>bufferImageHeight</code> <strong class="purple">must</strong> be <code>0</code>, or greater than or equal to the
<code>height</code> member of <code>imageExtent</code></p>
</li>
<li>
<p><a id="VUID-VkBufferImageCopy-imageOffset-00197"></a>
<code>imageOffset.x</code> and <span class="eq">(<code>imageExtent.width</code> + 
<code>imageOffset.x</code>)</span> <strong class="purple">must</strong> both be greater than or equal to <code>0</code> and
less than or equal to the image subresource width
where this refers to the width of the <em>plane</em> of the image involved in
the copy in the case of a
<a href="vkspec.html#formats-requiring-sampler-ycbcr-conversion">multi-planar format</a></p>
</li>
<li>
<p><a id="VUID-VkBufferImageCopy-imageOffset-00198"></a>
<code>imageOffset.y</code> and <span class="eq">(imageExtent.height + 
<code>imageOffset.y</code>)</span> <strong class="purple">must</strong> both be greater than or equal to <code>0</code> and
less than or equal to the image subresource height
where this refers to the height of the <em>plane</em> of the image involved in
the copy in the case of a
<a href="vkspec.html#formats-requiring-sampler-ycbcr-conversion">multi-planar format</a></p>
</li>
<li>
<p><a id="VUID-VkBufferImageCopy-srcImage-00199"></a>
If the calling command&#8217;s <code>srcImage</code> (<a href="#vkCmdCopyImageToBuffer">vkCmdCopyImageToBuffer</a>)
or <code>dstImage</code> (<a href="#vkCmdCopyBufferToImage">vkCmdCopyBufferToImage</a>) is of type
<code>VK_IMAGE_TYPE_1D</code>, then <code>imageOffset.y</code> <strong class="purple">must</strong> be <code>0</code> and
<code>imageExtent.height</code> <strong class="purple">must</strong> be <code>1</code>.</p>
</li>
<li>
<p><a id="VUID-VkBufferImageCopy-imageOffset-00200"></a>
<code>imageOffset.z</code> and <span class="eq">(imageExtent.depth + 
<code>imageOffset.z</code>)</span> <strong class="purple">must</strong> both be greater than or equal to <code>0</code> and
less than or equal to the image subresource depth</p>
</li>
<li>
<p><a id="VUID-VkBufferImageCopy-srcImage-00201"></a>
If the calling command&#8217;s <code>srcImage</code> (<a href="#vkCmdCopyImageToBuffer">vkCmdCopyImageToBuffer</a>)
or <code>dstImage</code> (<a href="#vkCmdCopyBufferToImage">vkCmdCopyBufferToImage</a>) is of type
<code>VK_IMAGE_TYPE_1D</code> or <code>VK_IMAGE_TYPE_2D</code>, then
<code>imageOffset.z</code> <strong class="purple">must</strong> be <code>0</code> and <code>imageExtent.depth</code> <strong class="purple">must</strong> be
<code>1</code></p>
</li>
<li>
<p><a id="VUID-VkBufferImageCopy-None-01735"></a>
If the calling command&#8217;s <code>VkImage</code> parameter is a compressed image,
or a <em>single-plane</em>, &#8220;<code>_422</code>&#8221; image format,
<code>bufferRowLength</code> <strong class="purple">must</strong> be a multiple of the compressed texel block
width</p>
</li>
<li>
<p><a id="VUID-VkBufferImageCopy-None-01736"></a>
If the calling command&#8217;s <code>VkImage</code> parameter is a compressed image,
or a <em>single-plane</em>, &#8220;<code>_422</code>&#8221; image format,
<code>bufferImageHeight</code> <strong class="purple">must</strong> be a multiple of the compressed texel
block height</p>
</li>
<li>
<p><a id="VUID-VkBufferImageCopy-None-01737"></a>
If the calling command&#8217;s <code>VkImage</code> parameter is a compressed image,
or a <em>single-plane</em>, &#8220;<code>_422</code>&#8221; image format,
all members of <code>imageOffset</code> <strong class="purple">must</strong> be a multiple of the
corresponding dimensions of the compressed texel block</p>
</li>
<li>
<p><a id="VUID-VkBufferImageCopy-None-01738"></a>
If the calling command&#8217;s <code>VkImage</code> parameter is a compressed image,
or a <em>single-plane</em>, &#8220;<code>_422</code>&#8221; image format,
<code>bufferOffset</code> <strong class="purple">must</strong> be a multiple of the compressed texel block
size in bytes</p>
</li>
<li>
<p><a id="VUID-VkBufferImageCopy-None-01739"></a>
If the calling command&#8217;s <code>VkImage</code> parameter is a compressed image,
or a <em>single-plane</em>, &#8220;<code>_422</code>&#8221; image format,
<code>imageExtent.width</code> <strong class="purple">must</strong> be a multiple of the compressed texel
block width or <span class="eq">(<code>imageExtent.width</code> + 
<code>imageOffset.x</code>)</span> <strong class="purple">must</strong> equal the image subresource width</p>
</li>
<li>
<p><a id="VUID-VkBufferImageCopy-None-01740"></a>
If the calling command&#8217;s <code>VkImage</code> parameter is a compressed image,
or a <em>single-plane</em>, &#8220;<code>_422</code>&#8221; image format,
<code>imageExtent.height</code> <strong class="purple">must</strong> be a multiple of the compressed texel
block height or <span class="eq">(<code>imageExtent.height</code> + 
<code>imageOffset.y</code>)</span> <strong class="purple">must</strong> equal the image subresource height</p>
</li>
<li>
<p><a id="VUID-VkBufferImageCopy-None-01741"></a>
If the calling command&#8217;s <code>VkImage</code> parameter is a compressed image,
or a <em>single-plane</em>, &#8220;<code>_422</code>&#8221; image format,
<code>imageExtent.depth</code> <strong class="purple">must</strong> be a multiple of the compressed texel
block depth or <span class="eq">(<code>imageExtent.depth</code> + 
<code>imageOffset.z</code>)</span> <strong class="purple">must</strong> equal the image subresource depth</p>
</li>
<li>
<p><a id="VUID-VkBufferImageCopy-aspectMask-00211"></a>
The <code>aspectMask</code> member of <code>imageSubresource</code> <strong class="purple">must</strong> specify
aspects present in the calling command&#8217;s <code>VkImage</code> parameter</p>
</li>
<li>
<p><a id="VUID-VkBufferImageCopy-aspectMask-01560"></a>
If the calling command&#8217;s <code>VkImage</code> parameter&#8217;s format is a
<a href="vkspec.html#formats-requiring-sampler-ycbcr-conversion">multi-planar format</a>, then
the <code>aspectMask</code> member of <code>imageSubresource</code> <strong class="purple">must</strong> be
<code>VK_IMAGE_ASPECT_PLANE_0_BIT</code>, <code>VK_IMAGE_ASPECT_PLANE_1_BIT</code>, or
<code>VK_IMAGE_ASPECT_PLANE_2_BIT</code> (with
<code>VK_IMAGE_ASPECT_PLANE_2_BIT</code> valid only for image formats with
three planes)</p>
</li>
<li>
<p><a id="VUID-VkBufferImageCopy-aspectMask-00212"></a>
The <code>aspectMask</code> member of <code>imageSubresource</code> <strong class="purple">must</strong> only have a
single bit set</p>
</li>
<li>
<p><a id="VUID-VkBufferImageCopy-baseArrayLayer-00213"></a>
If the calling command&#8217;s <code>VkImage</code> parameter is of <a href="#VkImageType">VkImageType</a>
<code>VK_IMAGE_TYPE_3D</code>, the <code>baseArrayLayer</code> and <code>layerCount</code>
members of <code>imageSubresource</code> <strong class="purple">must</strong> be <code>0</code> and <code>1</code>, respectively</p>
</li>
</ul>
</div>
</div>
</div>
<div class="sidebarblock">
<div class="content">
<div class="title">Valid Usage (Implicit)</div>
<div class="ulist">
<ul>
<li>
<p><a id="VUID-VkBufferImageCopy-imageSubresource-parameter"></a> <code>imageSubresource</code> <strong class="purple">must</strong> be a valid <code>VkImageSubresourceLayers</code> structure</p>
</li>
</ul>
</div>
</div>
</div>
</div>
<div class="sect3">
<h4 id="_see_also_393">See Also</h4>
<div class="paragraph">
<p><code>VkDeviceSize</code>, <a href="#VkExtent3D">VkExtent3D</a>, <a href="#VkImageSubresourceLayers">VkImageSubresourceLayers</a>, <a href="#VkOffset3D">VkOffset3D</a>, <a href="#vkCmdCopyBufferToImage">vkCmdCopyBufferToImage</a>, <a href="#vkCmdCopyImageToBuffer">vkCmdCopyImageToBuffer</a></p>
</div>
</div>
<div class="sect3">
<h4 id="_document_notes_393">Document Notes</h4>
<div class="paragraph">
<p>For more information, see the Vulkan Specification at URL</p>
</div>
<div class="paragraph">
<p><a href="https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VkBufferImageCopy" class="bare">https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VkBufferImageCopy</a></p>
</div>
<div class="paragraph">
<p>This page is extracted from the Vulkan Specification.
Fixes and changes should be made to the Specification, not directly.</p>
</div>
<div style="page-break-after: always;"></div>
</div>
</div>
<div class="sect2">
<h3 id="_vkbuffermemorybarrier3">VkBufferMemoryBarrier(3)</h3>
<div class="sect3">
<h4 id="_name_394">Name</h4>
<div class="paragraph">
<p>VkBufferMemoryBarrier - Structure specifying a buffer memory barrier</p>
</div>
</div>
<div class="sect3">
<h4 id="_c_specification_394">C Specification</h4>
<div class="paragraph">
<p>The <code>VkBufferMemoryBarrier</code> structure is defined as:</p>
</div>
<div id="VkBufferMemoryBarrier" class="listingblock">
<div class="content">
<pre class="highlight"><code class="language-c++" data-lang="c++">typedef struct VkBufferMemoryBarrier {
    VkStructureType    sType;
    const void*        pNext;
    VkAccessFlags      srcAccessMask;
    VkAccessFlags      dstAccessMask;
    uint32_t           srcQueueFamilyIndex;
    uint32_t           dstQueueFamilyIndex;
    VkBuffer           buffer;
    VkDeviceSize       offset;
    VkDeviceSize       size;
} VkBufferMemoryBarrier;</code></pre>
</div>
</div>
</div>
<div class="sect3">
<h4 id="_members_31">Members</h4>
<div class="ulist">
<ul>
<li>
<p><code>sType</code> is the type of this structure.</p>
</li>
<li>
<p><code>pNext</code> is <code>NULL</code> or a pointer to an extension-specific structure.</p>
</li>
<li>
<p><code>srcAccessMask</code> is a bitmask of <a href="#VkAccessFlagBits">VkAccessFlagBits</a> specifying a
<a href="vkspec.html#synchronization-access-masks">source access mask</a>.</p>
</li>
<li>
<p><code>dstAccessMask</code> is a bitmask of <a href="#VkAccessFlagBits">VkAccessFlagBits</a> specifying a
<a href="vkspec.html#synchronization-access-masks">destination access mask</a>.</p>
</li>
<li>
<p><code>srcQueueFamilyIndex</code> is the source queue family for a
<a href="vkspec.html#synchronization-queue-transfers">queue family ownership transfer</a>.</p>
</li>
<li>
<p><code>dstQueueFamilyIndex</code> is the destination queue family for a
<a href="vkspec.html#synchronization-queue-transfers">queue family ownership transfer</a>.</p>
</li>
<li>
<p><code>buffer</code> is a handle to the buffer whose backing memory is affected
by the barrier.</p>
</li>
<li>
<p><code>offset</code> is an offset in bytes into the backing memory for
<code>buffer</code>; this is relative to the base offset as bound to the buffer
(see <a href="#vkBindBufferMemory">vkBindBufferMemory</a>).</p>
</li>
<li>
<p><code>size</code> is a size in bytes of the affected area of backing memory for
<code>buffer</code>, or <code>VK_WHOLE_SIZE</code> to use the range from <code>offset</code>
to the end of the buffer.</p>
</li>
</ul>
</div>
</div>
<div class="sect3">
<h4 id="_description_394">Description</h4>
<div class="paragraph">
<p>The first <a href="vkspec.html#synchronization-dependencies-access-scopes">access scope</a> is
limited to access to memory through the specified buffer range, via access
types in the <a href="vkspec.html#synchronization-access-masks">source access mask</a> specified
by <code>srcAccessMask</code>.
If <code>srcAccessMask</code> includes <code>VK_ACCESS_HOST_WRITE_BIT</code>, memory
writes performed by that access type are also made visible, as that access
type is not performed through a resource.</p>
</div>
<div class="paragraph">
<p>The second <a href="vkspec.html#synchronization-dependencies-access-scopes">access scope</a> is
limited to access to memory through the specified buffer range, via access
types in the <a href="vkspec.html#synchronization-access-masks">destination access mask</a>.
specified by <code>dstAccessMask</code>.
If <code>dstAccessMask</code> includes <code>VK_ACCESS_HOST_WRITE_BIT</code> or
<code>VK_ACCESS_HOST_READ_BIT</code>, available memory writes are also made visible
to accesses of those types, as those access types are not performed through
a resource.</p>
</div>
<div class="paragraph">
<p>If <code>srcQueueFamilyIndex</code> is not equal to <code>dstQueueFamilyIndex</code>, and
<code>srcQueueFamilyIndex</code> is equal to the current queue family, then the
memory barrier defines a <a href="vkspec.html#synchronization-queue-transfers-release">queue
family release operation</a> for the specified buffer range, and the second
access scope includes no access, as if <code>dstAccessMask</code> was <code>0</code>.</p>
</div>
<div class="paragraph">
<p>If <code>dstQueueFamilyIndex</code> is not equal to <code>srcQueueFamilyIndex</code>, and
<code>dstQueueFamilyIndex</code> is equal to the current queue family, then the
memory barrier defines a <a href="vkspec.html#synchronization-queue-transfers-acquire">queue
family acquire operation</a> for the specified buffer range, and the first
access scope includes no access, as if <code>srcAccessMask</code> was <code>0</code>.</p>
</div>
<div class="sidebarblock">
<div class="content">
<div class="title">Valid Usage</div>
<div class="ulist">
<ul>
<li>
<p><a id="VUID-VkBufferMemoryBarrier-offset-01187"></a>
<code>offset</code> <strong class="purple">must</strong> be less than the size of <code>buffer</code></p>
</li>
<li>
<p><a id="VUID-VkBufferMemoryBarrier-size-01188"></a>
If <code>size</code> is not equal to <code>VK_WHOLE_SIZE</code>, <code>size</code> <strong class="purple">must</strong> be
greater than <code>0</code></p>
</li>
<li>
<p><a id="VUID-VkBufferMemoryBarrier-size-01189"></a>
If <code>size</code> is not equal to <code>VK_WHOLE_SIZE</code>, <code>size</code> <strong class="purple">must</strong> be
less than or equal to than the size of <code>buffer</code> minus <code>offset</code></p>
</li>
<li>
<p><a id="VUID-VkBufferMemoryBarrier-buffer-01191"></a>
If <code>buffer</code> was created with a sharing mode of
<code>VK_SHARING_MODE_CONCURRENT</code>, at least one of
<code>srcQueueFamilyIndex</code> and <code>dstQueueFamilyIndex</code> <strong class="purple">must</strong> be
<code>VK_QUEUE_FAMILY_IGNORED</code></p>
</li>
<li>
<p><a id="VUID-VkBufferMemoryBarrier-buffer-01763"></a>
If <code>buffer</code> was created with a sharing mode of
<code>VK_SHARING_MODE_CONCURRENT</code>, and one of <code>srcQueueFamilyIndex</code>
and <code>dstQueueFamilyIndex</code> is <code>VK_QUEUE_FAMILY_IGNORED</code>, the
other <strong class="purple">must</strong> be <code>VK_QUEUE_FAMILY_IGNORED</code> or a special queue family
reserved for external memory ownership transfers, as described in
<a href="vkspec.html#synchronization-queue-transfers" class="bare">html/vkspec.html#synchronization-queue-transfers</a>.</p>
</li>
<li>
<p><a id="VUID-VkBufferMemoryBarrier-buffer-01193"></a>
If <code>buffer</code> was created with a sharing mode of
<code>VK_SHARING_MODE_EXCLUSIVE</code> and <code>srcQueueFamilyIndex</code> is
<code>VK_QUEUE_FAMILY_IGNORED</code>, <code>dstQueueFamilyIndex</code> <strong class="purple">must</strong> also be
<code>VK_QUEUE_FAMILY_IGNORED</code></p>
</li>
<li>
<p><a id="VUID-VkBufferMemoryBarrier-buffer-01764"></a>
If <code>buffer</code> was created with a sharing mode of
<code>VK_SHARING_MODE_EXCLUSIVE</code> and <code>srcQueueFamilyIndex</code> is not
<code>VK_QUEUE_FAMILY_IGNORED</code>, it <strong class="purple">must</strong> be a valid queue family or a
special queue family reserved for external memory transfers, as
described in <a href="vkspec.html#synchronization-queue-transfers" class="bare">html/vkspec.html#synchronization-queue-transfers</a>.</p>
</li>
<li>
<p><a id="VUID-VkBufferMemoryBarrier-buffer-01765"></a>
If <code>buffer</code> was created with a sharing mode of
<code>VK_SHARING_MODE_EXCLUSIVE</code> and <code>dstQueueFamilyIndex</code> is not
<code>VK_QUEUE_FAMILY_IGNORED</code>, it <strong class="purple">must</strong> be a valid queue family or a
special queue family reserved for external memory transfers, as
described in <a href="vkspec.html#synchronization-queue-transfers" class="bare">html/vkspec.html#synchronization-queue-transfers</a>.</p>
</li>
<li>
<p><a id="VUID-VkBufferMemoryBarrier-buffer-01196"></a>
If <code>buffer</code> was created with a sharing mode of
<code>VK_SHARING_MODE_EXCLUSIVE</code>, and <code>srcQueueFamilyIndex</code> and
<code>dstQueueFamilyIndex</code> are not <code>VK_QUEUE_FAMILY_IGNORED</code>, at
least one of them <strong class="purple">must</strong> be the same as the family of the queue that will
execute this barrier</p>
</li>
<li>
<p><a id="VUID-VkBufferMemoryBarrier-buffer-01931"></a>
If <code>buffer</code> is non-sparse then it <strong class="purple">must</strong> be bound completely and
contiguously to a single <code>VkDeviceMemory</code> object</p>
</li>
</ul>
</div>
</div>
</div>
<div class="sidebarblock">
<div class="content">
<div class="title">Valid Usage (Implicit)</div>
<div class="ulist">
<ul>
<li>
<p><a id="VUID-VkBufferMemoryBarrier-sType-sType"></a> <code>sType</code> <strong class="purple">must</strong> be <code>VK_STRUCTURE_TYPE_BUFFER_MEMORY_BARRIER</code></p>
</li>
<li>
<p><a id="VUID-VkBufferMemoryBarrier-pNext-pNext"></a> <code>pNext</code> <strong class="purple">must</strong> be <code>NULL</code></p>
</li>
<li>
<p><a id="VUID-VkBufferMemoryBarrier-srcAccessMask-parameter"></a> <code>srcAccessMask</code> <strong class="purple">must</strong> be a valid combination of <a href="#VkAccessFlagBits">VkAccessFlagBits</a> values</p>
</li>
<li>
<p><a id="VUID-VkBufferMemoryBarrier-dstAccessMask-parameter"></a> <code>dstAccessMask</code> <strong class="purple">must</strong> be a valid combination of <a href="#VkAccessFlagBits">VkAccessFlagBits</a> values</p>
</li>
<li>
<p><a id="VUID-VkBufferMemoryBarrier-buffer-parameter"></a> <code>buffer</code> <strong class="purple">must</strong> be a valid <code>VkBuffer</code> handle</p>
</li>
</ul>
</div>
</div>
</div>
</div>
<div class="sect3">
<h4 id="_see_also_394">See Also</h4>
<div class="paragraph">
<p><a href="#VkAccessFlags">VkAccessFlags</a>, <a href="#VkBuffer">VkBuffer</a>, <code>VkDeviceSize</code>, <a href="#VkStructureType">VkStructureType</a>, <a href="#vkCmdPipelineBarrier">vkCmdPipelineBarrier</a>, <a href="#vkCmdWaitEvents">vkCmdWaitEvents</a></p>
</div>
</div>
<div class="sect3">
<h4 id="_document_notes_394">Document Notes</h4>
<div class="paragraph">
<p>For more information, see the Vulkan Specification at URL</p>
</div>
<div class="paragraph">
<p><a href="https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VkBufferMemoryBarrier" class="bare">https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VkBufferMemoryBarrier</a></p>
</div>
<div class="paragraph">
<p>This page is extracted from the Vulkan Specification.
Fixes and changes should be made to the Specification, not directly.</p>
</div>
<div style="page-break-after: always;"></div>
</div>
</div>
<div class="sect2">
<h3 id="_vkbuffermemoryrequirementsinfo23">VkBufferMemoryRequirementsInfo2(3)</h3>
<div class="sect3">
<h4 id="_name_395">Name</h4>
<div class="paragraph">
<p>VkBufferMemoryRequirementsInfo2 - (None)</p>
</div>
</div>
<div class="sect3">
<h4 id="_c_specification_395">C Specification</h4>
<div class="paragraph">
<p>The <code>VkBufferMemoryRequirementsInfo2</code> structure is defined as:</p>
</div>
<div id="VkBufferMemoryRequirementsInfo2" class="listingblock">
<div class="content">
<pre class="highlight"><code class="language-c++" data-lang="c++">typedef struct VkBufferMemoryRequirementsInfo2 {
    VkStructureType    sType;
    const void*        pNext;
    VkBuffer           buffer;
} VkBufferMemoryRequirementsInfo2;</code></pre>
</div>
</div>
<div class="paragraph">
<p>or the equivalent</p>
</div>
<div id="VkBufferMemoryRequirementsInfo2KHR" class="listingblock">
<div class="content">
<pre class="highlight"><code class="language-c++" data-lang="c++">typedef VkBufferMemoryRequirementsInfo2 VkBufferMemoryRequirementsInfo2KHR;</code></pre>
</div>
</div>
</div>
<div class="sect3">
<h4 id="_members_32">Members</h4>
<div class="ulist">
<ul>
<li>
<p><code>sType</code> is the type of this structure.</p>
</li>
<li>
<p><code>pNext</code> is <code>NULL</code> or a pointer to an extension-specific structure.</p>
</li>
<li>
<p><code>buffer</code> is the buffer to query.</p>
</li>
</ul>
</div>
</div>
<div class="sect3">
<h4 id="_description_395">Description</h4>
<div class="sidebarblock">
<div class="content">
<div class="title">Valid Usage (Implicit)</div>
<div class="ulist">
<ul>
<li>
<p><a id="VUID-VkBufferMemoryRequirementsInfo2-sType-sType"></a> <code>sType</code> <strong class="purple">must</strong> be <code>VK_STRUCTURE_TYPE_BUFFER_MEMORY_REQUIREMENTS_INFO_2</code></p>
</li>
<li>
<p><a id="VUID-VkBufferMemoryRequirementsInfo2-pNext-pNext"></a> <code>pNext</code> <strong class="purple">must</strong> be <code>NULL</code></p>
</li>
<li>
<p><a id="VUID-VkBufferMemoryRequirementsInfo2-buffer-parameter"></a> <code>buffer</code> <strong class="purple">must</strong> be a valid <code>VkBuffer</code> handle</p>
</li>
</ul>
</div>
</div>
</div>
</div>
<div class="sect3">
<h4 id="_see_also_395">See Also</h4>
<div class="paragraph">
<p><a href="#VkBuffer">VkBuffer</a>, <a href="#VkStructureType">VkStructureType</a>, <a href="#vkGetBufferMemoryRequirements2">vkGetBufferMemoryRequirements2</a>, <a href="#vkGetBufferMemoryRequirements2KHR">vkGetBufferMemoryRequirements2KHR</a></p>
</div>
</div>
<div class="sect3">
<h4 id="_document_notes_395">Document Notes</h4>
<div class="paragraph">
<p>For more information, see the Vulkan Specification at URL</p>
</div>
<div class="paragraph">
<p><a href="https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VkBufferMemoryRequirementsInfo2" class="bare">https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VkBufferMemoryRequirementsInfo2</a></p>
</div>
<div class="paragraph">
<p>This page is extracted from the Vulkan Specification.
Fixes and changes should be made to the Specification, not directly.</p>
</div>
<div style="page-break-after: always;"></div>
</div>
</div>
<div class="sect2">
<h3 id="_vkbufferviewcreateinfo3">VkBufferViewCreateInfo(3)</h3>
<div class="sect3">
<h4 id="_name_396">Name</h4>
<div class="paragraph">
<p>VkBufferViewCreateInfo - Structure specifying parameters of a newly created buffer view</p>
</div>
</div>
<div class="sect3">
<h4 id="_c_specification_396">C Specification</h4>
<div class="paragraph">
<p>The <code>VkBufferViewCreateInfo</code> structure is defined as:</p>
</div>
<div id="VkBufferViewCreateInfo" class="listingblock">
<div class="content">
<pre class="highlight"><code class="language-c++" data-lang="c++">typedef struct VkBufferViewCreateInfo {
    VkStructureType            sType;
    const void*                pNext;
    VkBufferViewCreateFlags    flags;
    VkBuffer                   buffer;
    VkFormat                   format;
    VkDeviceSize               offset;
    VkDeviceSize               range;
} VkBufferViewCreateInfo;</code></pre>
</div>
</div>
</div>
<div class="sect3">
<h4 id="_members_33">Members</h4>
<div class="ulist">
<ul>
<li>
<p><code>sType</code> is the type of this structure.</p>
</li>
<li>
<p><code>pNext</code> is <code>NULL</code> or a pointer to an extension-specific structure.</p>
</li>
<li>
<p><code>flags</code> is reserved for future use.</p>
</li>
<li>
<p><code>buffer</code> is a <a href="#VkBuffer">VkBuffer</a> on which the view will be created.</p>
</li>
<li>
<p><code>format</code> is a <a href="#VkFormat">VkFormat</a> describing the format of the data
elements in the buffer.</p>
</li>
<li>
<p><code>offset</code> is an offset in bytes from the base address of the buffer.
Accesses to the buffer view from shaders use addressing that is relative
to this starting offset.</p>
</li>
<li>
<p><code>range</code> is a size in bytes of the buffer view.
If <code>range</code> is equal to <code>VK_WHOLE_SIZE</code>, the range from
<code>offset</code> to the end of the buffer is used.
If <code>VK_WHOLE_SIZE</code> is used and the remaining size of the buffer is
not a multiple of the <a href="vkspec.html#texel-block-size">texel block size</a> of
<code>format</code>, the nearest smaller multiple is used.</p>
</li>
</ul>
</div>
</div>
<div class="sect3">
<h4 id="_description_396">Description</h4>
<div class="sidebarblock">
<div class="content">
<div class="title">Valid Usage</div>
<div class="ulist">
<ul>
<li>
<p><a id="VUID-VkBufferViewCreateInfo-offset-00925"></a>
<code>offset</code> <strong class="purple">must</strong> be less than the size of <code>buffer</code></p>
</li>
<li>
<p><a id="VUID-VkBufferViewCreateInfo-offset-00926"></a>
<code>offset</code> <strong class="purple">must</strong> be a multiple of
<code>VkPhysicalDeviceLimits</code>::<code>minTexelBufferOffsetAlignment</code></p>
</li>
<li>
<p><a id="VUID-VkBufferViewCreateInfo-range-00928"></a>
If <code>range</code> is not equal to <code>VK_WHOLE_SIZE</code>, <code>range</code> <strong class="purple">must</strong> be
greater than <code>0</code></p>
</li>
<li>
<p><a id="VUID-VkBufferViewCreateInfo-range-00929"></a>
If <code>range</code> is not equal to <code>VK_WHOLE_SIZE</code>, <code>range</code> <strong class="purple">must</strong> be
an integer multiple of the texel block size of <code>format</code></p>
</li>
<li>
<p><a id="VUID-VkBufferViewCreateInfo-range-00930"></a>
If <code>range</code> is not equal to <code>VK_WHOLE_SIZE</code>, <code>range</code> divided
by the texel block size of <code>format</code>, multiplied by the number of
texels per texel block for that format (as defined in the
<a href="vkspec.html#formats-compatibility">Compatible Formats</a> table), <strong class="purple">must</strong> be less than
or equal to <code>VkPhysicalDeviceLimits</code>::<code>maxTexelBufferElements</code></p>
</li>
<li>
<p><a id="VUID-VkBufferViewCreateInfo-offset-00931"></a>
If <code>range</code> is not equal to <code>VK_WHOLE_SIZE</code>, the sum of
<code>offset</code> and <code>range</code> <strong class="purple">must</strong> be less than or equal to the size of
<code>buffer</code></p>
</li>
<li>
<p><a id="VUID-VkBufferViewCreateInfo-buffer-00932"></a>
<code>buffer</code> <strong class="purple">must</strong> have been created with a <code>usage</code> value containing
at least one of <code>VK_BUFFER_USAGE_UNIFORM_TEXEL_BUFFER_BIT</code> or
<code>VK_BUFFER_USAGE_STORAGE_TEXEL_BUFFER_BIT</code></p>
</li>
<li>
<p><a id="VUID-VkBufferViewCreateInfo-buffer-00933"></a>
If <code>buffer</code> was created with <code>usage</code> containing
<code>VK_BUFFER_USAGE_UNIFORM_TEXEL_BUFFER_BIT</code>, <code>format</code> <strong class="purple">must</strong> be
supported for uniform texel buffers, as specified by the
<code>VK_FORMAT_FEATURE_UNIFORM_TEXEL_BUFFER_BIT</code> flag in
<code>VkFormatProperties</code>::<code>bufferFeatures</code> returned by
<code>vkGetPhysicalDeviceFormatProperties</code></p>
</li>
<li>
<p><a id="VUID-VkBufferViewCreateInfo-buffer-00934"></a>
If <code>buffer</code> was created with <code>usage</code> containing
<code>VK_BUFFER_USAGE_STORAGE_TEXEL_BUFFER_BIT</code>, <code>format</code> <strong class="purple">must</strong> be
supported for storage texel buffers, as specified by the
<code>VK_FORMAT_FEATURE_STORAGE_TEXEL_BUFFER_BIT</code> flag in
<code>VkFormatProperties</code>::<code>bufferFeatures</code> returned by
<code>vkGetPhysicalDeviceFormatProperties</code></p>
</li>
<li>
<p><a id="VUID-VkBufferViewCreateInfo-buffer-00935"></a>
If <code>buffer</code> is non-sparse then it <strong class="purple">must</strong> be bound completely and
contiguously to a single <code>VkDeviceMemory</code> object</p>
</li>
</ul>
</div>
</div>
</div>
<div class="sidebarblock">
<div class="content">
<div class="title">Valid Usage (Implicit)</div>
<div class="ulist">
<ul>
<li>
<p><a id="VUID-VkBufferViewCreateInfo-sType-sType"></a> <code>sType</code> <strong class="purple">must</strong> be <code>VK_STRUCTURE_TYPE_BUFFER_VIEW_CREATE_INFO</code></p>
</li>
<li>
<p><a id="VUID-VkBufferViewCreateInfo-pNext-pNext"></a> <code>pNext</code> <strong class="purple">must</strong> be <code>NULL</code></p>
</li>
<li>
<p><a id="VUID-VkBufferViewCreateInfo-flags-zerobitmask"></a> <code>flags</code> <strong class="purple">must</strong> be <code>0</code></p>
</li>
<li>
<p><a id="VUID-VkBufferViewCreateInfo-buffer-parameter"></a> <code>buffer</code> <strong class="purple">must</strong> be a valid <code>VkBuffer</code> handle</p>
</li>
<li>
<p><a id="VUID-VkBufferViewCreateInfo-format-parameter"></a> <code>format</code> <strong class="purple">must</strong> be a valid <a href="#VkFormat">VkFormat</a> value</p>
</li>
</ul>
</div>
</div>
</div>
</div>
<div class="sect3">
<h4 id="_see_also_396">See Also</h4>
<div class="paragraph">
<p><a href="#VkBuffer">VkBuffer</a>, <a href="#VkBufferViewCreateFlags">VkBufferViewCreateFlags</a>, <code>VkDeviceSize</code>, <a href="#VkFormat">VkFormat</a>, <a href="#VkStructureType">VkStructureType</a>, <a href="#vkCreateBufferView">vkCreateBufferView</a></p>
</div>
</div>
<div class="sect3">
<h4 id="_document_notes_396">Document Notes</h4>
<div class="paragraph">
<p>For more information, see the Vulkan Specification at URL</p>
</div>
<div class="paragraph">
<p><a href="https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VkBufferViewCreateInfo" class="bare">https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VkBufferViewCreateInfo</a></p>
</div>
<div class="paragraph">
<p>This page is extracted from the Vulkan Specification.
Fixes and changes should be made to the Specification, not directly.</p>
</div>
<div style="page-break-after: always;"></div>
</div>
</div>
<div class="sect2">
<h3 id="_vkcalibratedtimestampinfoext3">VkCalibratedTimestampInfoEXT(3)</h3>
<div class="sect3">
<h4 id="_name_397">Name</h4>
<div class="paragraph">
<p>VkCalibratedTimestampInfoEXT - Structure specifying the input parameters of a calibrated timestamp query</p>
</div>
</div>
<div class="sect3">
<h4 id="_c_specification_397">C Specification</h4>
<div class="paragraph">
<p>The <code>VkCalibratedTimestampInfoEXT</code> structure is defined as:</p>
</div>
<div id="VkCalibratedTimestampInfoEXT" class="listingblock">
<div class="content">
<pre class="highlight"><code class="language-c++" data-lang="c++">typedef struct VkCalibratedTimestampInfoEXT {
    VkStructureType    sType;
    const void*        pNext;
    VkTimeDomainEXT    timeDomain;
} VkCalibratedTimestampInfoEXT;</code></pre>
</div>
</div>
</div>
<div class="sect3">
<h4 id="_members_34">Members</h4>
<div class="ulist">
<ul>
<li>
<p><code>sType</code> is the type of this structure.</p>
</li>
<li>
<p><code>pNext</code> is <code>NULL</code> or a pointer to an extension-specific structure.</p>
</li>
<li>
<p><code>timeDomain</code> is a <a href="#VkTimeDomainEXT">VkTimeDomainEXT</a> value specifying the time
domain from which the calibrated timestamp value should be returned.</p>
</li>
</ul>
</div>
</div>
<div class="sect3">
<h4 id="_description_397">Description</h4>
<div class="sidebarblock">
<div class="content">
<div class="title">Valid Usage</div>
<div class="ulist">
<ul>
<li>
<p><a id="VUID-VkCalibratedTimestampInfoEXT-timeDomain-02354"></a>
<code>timeDomain</code> <strong class="purple">must</strong> be one of the <a href="#VkTimeDomainEXT">VkTimeDomainEXT</a> values
returned by <a href="#vkGetPhysicalDeviceCalibrateableTimeDomainsEXT">vkGetPhysicalDeviceCalibrateableTimeDomainsEXT</a></p>
</li>
</ul>
</div>
</div>
</div>
<div class="sidebarblock">
<div class="content">
<div class="title">Valid Usage (Implicit)</div>
<div class="ulist">
<ul>
<li>
<p><a id="VUID-VkCalibratedTimestampInfoEXT-sType-sType"></a> <code>sType</code> <strong class="purple">must</strong> be <code>VK_STRUCTURE_TYPE_CALIBRATED_TIMESTAMP_INFO_EXT</code></p>
</li>
<li>
<p><a id="VUID-VkCalibratedTimestampInfoEXT-pNext-pNext"></a> <code>pNext</code> <strong class="purple">must</strong> be <code>NULL</code></p>
</li>
<li>
<p><a id="VUID-VkCalibratedTimestampInfoEXT-timeDomain-parameter"></a> <code>timeDomain</code> <strong class="purple">must</strong> be a valid <a href="#VkTimeDomainEXT">VkTimeDomainEXT</a> value</p>
</li>
</ul>
</div>
</div>
</div>
</div>
<div class="sect3">
<h4 id="_see_also_397">See Also</h4>
<div class="paragraph">
<p><a href="#VkStructureType">VkStructureType</a>, <a href="#VkTimeDomainEXT">VkTimeDomainEXT</a>, <a href="#vkGetCalibratedTimestampsEXT">vkGetCalibratedTimestampsEXT</a></p>
</div>
</div>
<div class="sect3">
<h4 id="_document_notes_397">Document Notes</h4>
<div class="paragraph">
<p>For more information, see the Vulkan Specification at URL</p>
</div>
<div class="paragraph">
<p><a href="https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VkCalibratedTimestampInfoEXT" class="bare">https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VkCalibratedTimestampInfoEXT</a></p>
</div>
<div class="paragraph">
<p>This page is extracted from the Vulkan Specification.
Fixes and changes should be made to the Specification, not directly.</p>
</div>
<div style="page-break-after: always;"></div>
</div>
</div>
<div class="sect2">
<h3 id="_vkcheckpointdatanv3">VkCheckpointDataNV(3)</h3>
<div class="sect3">
<h4 id="_name_398">Name</h4>
<div class="paragraph">
<p>VkCheckpointDataNV - return structure for command buffer checkpoint data</p>
</div>
</div>
<div class="sect3">
<h4 id="_c_specification_398">C Specification</h4>
<div class="paragraph">
<p>The <a href="#VkCheckpointDataNV">VkCheckpointDataNV</a> structure is defined as:</p>
</div>
<div id="VkCheckpointDataNV" class="listingblock">
<div class="content">
<pre class="highlight"><code class="language-c++" data-lang="c++">typedef struct VkCheckpointDataNV {
    VkStructureType            sType;
    void*                      pNext;
    VkPipelineStageFlagBits    stage;
    void*                      pCheckpointMarker;
} VkCheckpointDataNV;</code></pre>
</div>
</div>
</div>
<div class="sect3">
<h4 id="_members_35">Members</h4>
<div class="ulist">
<ul>
<li>
<p><code>sType</code> is the type of this structure</p>
</li>
<li>
<p><code>pNext</code> is <code>NULL</code> or a pointer to an extension-specific structure.</p>
</li>
<li>
<p><code>stage</code> indicates which pipeline stage the checkpoint marker data
refers to.</p>
</li>
<li>
<p><code>pCheckpointMarker</code> contains the value of the last checkpoint marker
executed in the stage that <code>stage</code> refers to.</p>
</li>
</ul>
</div>
</div>
<div class="sect3">
<h4 id="_description_398">Description</h4>
<div class="sidebarblock">
<div class="content">
<div class="title">Valid Usage (Implicit)</div>
<div class="ulist">
<ul>
<li>
<p><a id="VUID-VkCheckpointDataNV-sType-sType"></a> <code>sType</code> <strong class="purple">must</strong> be <code>VK_STRUCTURE_TYPE_CHECKPOINT_DATA_NV</code></p>
</li>
<li>
<p><a id="VUID-VkCheckpointDataNV-pNext-pNext"></a> <code>pNext</code> <strong class="purple">must</strong> be <code>NULL</code></p>
</li>
</ul>
</div>
</div>
</div>
<div class="paragraph">
<p>Note that the stages at which a checkpoint marker <strong class="purple">can</strong> be executed are
implementation-defined and <strong class="purple">can</strong> be queried by calling
<a href="#vkGetPhysicalDeviceQueueFamilyProperties2">vkGetPhysicalDeviceQueueFamilyProperties2</a>.</p>
</div>
</div>
<div class="sect3">
<h4 id="_see_also_398">See Also</h4>
<div class="paragraph">
<p><a href="#VkPipelineStageFlagBits">VkPipelineStageFlagBits</a>, <a href="#VkStructureType">VkStructureType</a>, <a href="#vkGetQueueCheckpointDataNV">vkGetQueueCheckpointDataNV</a></p>
</div>
</div>
<div class="sect3">
<h4 id="_document_notes_398">Document Notes</h4>
<div class="paragraph">
<p>For more information, see the Vulkan Specification at URL</p>
</div>
<div class="paragraph">
<p><a href="https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VkCheckpointDataNV" class="bare">https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VkCheckpointDataNV</a></p>
</div>
<div class="paragraph">
<p>This page is extracted from the Vulkan Specification.
Fixes and changes should be made to the Specification, not directly.</p>
</div>
<div style="page-break-after: always;"></div>
</div>
</div>
<div class="sect2">
<h3 id="_vkclearattachment3">VkClearAttachment(3)</h3>
<div class="sect3">
<h4 id="_name_399">Name</h4>
<div class="paragraph">
<p>VkClearAttachment - Structure specifying a clear attachment</p>
</div>
</div>
<div class="sect3">
<h4 id="_c_specification_399">C Specification</h4>
<div class="paragraph">
<p>The <code>VkClearAttachment</code> structure is defined as:</p>
</div>
<div id="VkClearAttachment" class="listingblock">
<div class="content">
<pre class="highlight"><code class="language-c++" data-lang="c++">typedef struct VkClearAttachment {
    VkImageAspectFlags    aspectMask;
    uint32_t              colorAttachment;
    VkClearValue          clearValue;
} VkClearAttachment;</code></pre>
</div>
</div>
</div>
<div class="sect3">
<h4 id="_members_36">Members</h4>
<div class="ulist">
<ul>
<li>
<p><code>aspectMask</code> is a mask selecting the color, depth and/or stencil
aspects of the attachment to be cleared.</p>
</li>
<li>
<p><code>colorAttachment</code> is only meaningful if
<code>VK_IMAGE_ASPECT_COLOR_BIT</code> is set in <code>aspectMask</code>, in which
case it is an index to the <code>pColorAttachments</code> array in the
<a href="#VkSubpassDescription">VkSubpassDescription</a> structure of the current subpass which
selects the color attachment to clear.</p>
</li>
<li>
<p><code>clearValue</code> is the color or depth/stencil value to clear the
attachment to, as described in <a href="vkspec.html#clears-values">Clear Values</a> below.</p>
</li>
</ul>
</div>
</div>
<div class="sect3">
<h4 id="_description_399">Description</h4>
<div class="paragraph">
<p>No memory barriers are needed between <code>vkCmdClearAttachments</code> and
preceding or subsequent draw or attachment clear commands in the same
subpass.</p>
</div>
<div class="paragraph">
<p>The <code>vkCmdClearAttachments</code> command is not affected by the bound
pipeline state.</p>
</div>
<div class="paragraph">
<p>Attachments <strong class="purple">can</strong> also be cleared at the beginning of a render pass instance
by setting <code>loadOp</code> (or <code>stencilLoadOp</code>) of
<a href="#VkAttachmentDescription">VkAttachmentDescription</a> to <code>VK_ATTACHMENT_LOAD_OP_CLEAR</code>, as
described for <a href="#vkCreateRenderPass">vkCreateRenderPass</a>.</p>
</div>
<div class="sidebarblock">
<div class="content">
<div class="title">Valid Usage</div>
<div class="ulist">
<ul>
<li>
<p><a id="VUID-VkClearAttachment-aspectMask-00019"></a>
If <code>aspectMask</code> includes <code>VK_IMAGE_ASPECT_COLOR_BIT</code>, it <strong class="purple">must</strong>
not include <code>VK_IMAGE_ASPECT_DEPTH_BIT</code> or
<code>VK_IMAGE_ASPECT_STENCIL_BIT</code></p>
</li>
<li>
<p><a id="VUID-VkClearAttachment-aspectMask-00020"></a>
<code>aspectMask</code> <strong class="purple">must</strong> not include <code>VK_IMAGE_ASPECT_METADATA_BIT</code></p>
</li>
<li>
<p><a id="VUID-VkClearAttachment-aspectMask-02246"></a>
<code>aspectMask</code> <strong class="purple">must</strong> not include
<code>VK_IMAGE_ASPECT_MEMORY_PLANE_i_BIT_EXT</code> for any index <code>i</code>.</p>
</li>
<li>
<p><a id="VUID-VkClearAttachment-clearValue-00021"></a>
<code>clearValue</code> <strong class="purple">must</strong> be a valid <code>VkClearValue</code> union</p>
</li>
</ul>
</div>
</div>
</div>
<div class="sidebarblock">
<div class="content">
<div class="title">Valid Usage (Implicit)</div>
<div class="ulist">
<ul>
<li>
<p><a id="VUID-VkClearAttachment-aspectMask-parameter"></a> <code>aspectMask</code> <strong class="purple">must</strong> be a valid combination of <a href="#VkImageAspectFlagBits">VkImageAspectFlagBits</a> values</p>
</li>
<li>
<p><a id="VUID-VkClearAttachment-aspectMask-requiredbitmask"></a> <code>aspectMask</code> <strong class="purple">must</strong> not be <code>0</code></p>
</li>
</ul>
</div>
</div>
</div>
</div>
<div class="sect3">
<h4 id="_see_also_399">See Also</h4>
<div class="paragraph">
<p><a href="#VkClearValue">VkClearValue</a>, <a href="#VkImageAspectFlags">VkImageAspectFlags</a>, <a href="#vkCmdClearAttachments">vkCmdClearAttachments</a></p>
</div>
</div>
<div class="sect3">
<h4 id="_document_notes_399">Document Notes</h4>
<div class="paragraph">
<p>For more information, see the Vulkan Specification at URL</p>
</div>
<div class="paragraph">
<p><a href="https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VkClearAttachment" class="bare">https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VkClearAttachment</a></p>
</div>
<div class="paragraph">
<p>This page is extracted from the Vulkan Specification.
Fixes and changes should be made to the Specification, not directly.</p>
</div>
<div style="page-break-after: always;"></div>
</div>
</div>
<div class="sect2">
<h3 id="_vkclearcolorvalue3">VkClearColorValue(3)</h3>
<div class="sect3">
<h4 id="_name_400">Name</h4>
<div class="paragraph">
<p>VkClearColorValue - Structure specifying a clear color value</p>
</div>
</div>
<div class="sect3">
<h4 id="_c_specification_400">C Specification</h4>
<div class="paragraph">
<p>The <code>VkClearColorValue</code> structure is defined as:</p>
</div>
<div id="VkClearColorValue" class="listingblock">
<div class="content">
<pre class="highlight"><code class="language-c++" data-lang="c++">typedef union VkClearColorValue {
    float       float32[4];
    int32_t     int32[4];
    uint32_t    uint32[4];
} VkClearColorValue;</code></pre>
</div>
</div>
</div>
<div class="sect3">
<h4 id="_members_37">Members</h4>
<div class="ulist">
<ul>
<li>
<p><code>float32</code> are the color clear values when the format of the image or
attachment is one of the formats in the <a href="vkspec.html#formats-numericformat">Interpretation of Numeric Format</a> table other than signed integer
(<code>SINT</code>) or unsigned integer (<code>UINT</code>).
Floating point values are automatically converted to the format of the
image, with the clear value being treated as linear if the image is
sRGB.</p>
</li>
<li>
<p><code>int32</code> are the color clear values when the format of the image or
attachment is signed integer (<code>SINT</code>).
Signed integer values are converted to the format of the image by
casting to the smaller type (with negative 32-bit values mapping to
negative values in the smaller type).
If the integer clear value is not representable in the target type (e.g.
would overflow in conversion to that type), the clear value is
undefined.</p>
</li>
<li>
<p><code>uint32</code> are the color clear values when the format of the image or
attachment is unsigned integer (<code>UINT</code>).
Unsigned integer values are converted to the format of the image by
casting to the integer type with fewer bits.</p>
</li>
</ul>
</div>
</div>
<div class="sect3">
<h4 id="_description_400">Description</h4>
<div class="paragraph">
<p>The four array elements of the clear color map to R, G, B, and A components
of image formats, in order.</p>
</div>
<div class="paragraph">
<p>If the image has more than one sample, the same value is written to all
samples for any pixels being cleared.</p>
</div>
</div>
<div class="sect3">
<h4 id="_see_also_400">See Also</h4>
<div class="paragraph">
<p><a href="#VkClearValue">VkClearValue</a>, <a href="#vkCmdClearColorImage">vkCmdClearColorImage</a></p>
</div>
</div>
<div class="sect3">
<h4 id="_document_notes_400">Document Notes</h4>
<div class="paragraph">
<p>For more information, see the Vulkan Specification at URL</p>
</div>
<div class="paragraph">
<p><a href="https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VkClearColorValue" class="bare">https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VkClearColorValue</a></p>
</div>
<div class="paragraph">
<p>This page is extracted from the Vulkan Specification.
Fixes and changes should be made to the Specification, not directly.</p>
</div>
<div style="page-break-after: always;"></div>
</div>
</div>
<div class="sect2">
<h3 id="_vkcleardepthstencilvalue3">VkClearDepthStencilValue(3)</h3>
<div class="sect3">
<h4 id="_name_401">Name</h4>
<div class="paragraph">
<p>VkClearDepthStencilValue - Structure specifying a clear depth stencil value</p>
</div>
</div>
<div class="sect3">
<h4 id="_c_specification_401">C Specification</h4>
<div class="paragraph">
<p>The <code>VkClearDepthStencilValue</code> structure is defined as:</p>
</div>
<div id="VkClearDepthStencilValue" class="listingblock">
<div class="content">
<pre class="highlight"><code class="language-c++" data-lang="c++">typedef struct VkClearDepthStencilValue {
    float       depth;
    uint32_t    stencil;
} VkClearDepthStencilValue;</code></pre>
</div>
</div>
</div>
<div class="sect3">
<h4 id="_members_38">Members</h4>
<div class="ulist">
<ul>
<li>
<p><code>depth</code> is the clear value for the depth aspect of the depth/stencil
attachment.
It is a floating-point value which is automatically converted to the
attachment&#8217;s format.</p>
</li>
<li>
<p><code>stencil</code> is the clear value for the stencil aspect of the
depth/stencil attachment.
It is a 32-bit integer value which is converted to the attachment&#8217;s
format by taking the appropriate number of LSBs.</p>
</li>
</ul>
</div>
</div>
<div class="sect3">
<h4 id="_description_401">Description</h4>
<div class="sidebarblock">
<div class="content">
<div class="title">Valid Usage</div>
<div class="ulist">
<ul>
<li>
<p><a id="VUID-VkClearDepthStencilValue-depth-00022"></a>
Unless the <code><a href="vkspec.html#VK_EXT_depth_range_unrestricted" class="bare">html/vkspec.html#VK_EXT_depth_range_unrestricted</a></code> extension is enabled
<code>depth</code> <strong class="purple">must</strong> be between <code>0.0</code> and <code>1.0</code>, inclusive</p>
</li>
</ul>
</div>
</div>
</div>
</div>
<div class="sect3">
<h4 id="_see_also_401">See Also</h4>
<div class="paragraph">
<p><a href="#VkClearValue">VkClearValue</a>, <a href="#vkCmdClearDepthStencilImage">vkCmdClearDepthStencilImage</a></p>
</div>
</div>
<div class="sect3">
<h4 id="_document_notes_401">Document Notes</h4>
<div class="paragraph">
<p>For more information, see the Vulkan Specification at URL</p>
</div>
<div class="paragraph">
<p><a href="https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VkClearDepthStencilValue" class="bare">https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VkClearDepthStencilValue</a></p>
</div>
<div class="paragraph">
<p>This page is extracted from the Vulkan Specification.
Fixes and changes should be made to the Specification, not directly.</p>
</div>
<div style="page-break-after: always;"></div>
</div>
</div>
<div class="sect2">
<h3 id="_vkclearrect3">VkClearRect(3)</h3>
<div class="sect3">
<h4 id="_name_402">Name</h4>
<div class="paragraph">
<p>VkClearRect - Structure specifying a clear rectangle</p>
</div>
</div>
<div class="sect3">
<h4 id="_c_specification_402">C Specification</h4>
<div class="paragraph">
<p>The <code>VkClearRect</code> structure is defined as:</p>
</div>
<div id="VkClearRect" class="listingblock">
<div class="content">
<pre class="highlight"><code class="language-c++" data-lang="c++">typedef struct VkClearRect {
    VkRect2D    rect;
    uint32_t    baseArrayLayer;
    uint32_t    layerCount;
} VkClearRect;</code></pre>
</div>
</div>
</div>
<div class="sect3">
<h4 id="_members_39">Members</h4>
<div class="ulist">
<ul>
<li>
<p><code>rect</code> is the two-dimensional region to be cleared.</p>
</li>
<li>
<p><code>baseArrayLayer</code> is the first layer to be cleared.</p>
</li>
<li>
<p><code>layerCount</code> is the number of layers to clear.</p>
</li>
</ul>
</div>
</div>
<div class="sect3">
<h4 id="_description_402">Description</h4>
<div class="paragraph">
<p>The layers <span class="eq">[<code>baseArrayLayer</code>, <code>baseArrayLayer</code> + 
<code>layerCount</code>)</span> counting from the base layer of the attachment image view
are cleared.</p>
</div>
</div>
<div class="sect3">
<h4 id="_see_also_402">See Also</h4>
<div class="paragraph">
<p><a href="#VkRect2D">VkRect2D</a>, <a href="#vkCmdClearAttachments">vkCmdClearAttachments</a></p>
</div>
</div>
<div class="sect3">
<h4 id="_document_notes_402">Document Notes</h4>
<div class="paragraph">
<p>For more information, see the Vulkan Specification at URL</p>
</div>
<div class="paragraph">
<p><a href="https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VkClearRect" class="bare">https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VkClearRect</a></p>
</div>
<div class="paragraph">
<p>This page is extracted from the Vulkan Specification.
Fixes and changes should be made to the Specification, not directly.</p>
</div>
<div style="page-break-after: always;"></div>
</div>
</div>
<div class="sect2">
<h3 id="_vkclearvalue3">VkClearValue(3)</h3>
<div class="sect3">
<h4 id="_name_403">Name</h4>
<div class="paragraph">
<p>VkClearValue - Structure specifying a clear value</p>
</div>
</div>
<div class="sect3">
<h4 id="_c_specification_403">C Specification</h4>
<div class="paragraph">
<p>The <code>VkClearValue</code> union is defined as:</p>
</div>
<div id="VkClearValue" class="listingblock">
<div class="content">
<pre class="highlight"><code class="language-c++" data-lang="c++">typedef union VkClearValue {
    VkClearColorValue           color;
    VkClearDepthStencilValue    depthStencil;
} VkClearValue;</code></pre>
</div>
</div>
</div>
<div class="sect3">
<h4 id="_members_40">Members</h4>
<div class="ulist">
<ul>
<li>
<p><code>color</code> specifies the color image clear values to use when clearing
a color image or attachment.</p>
</li>
<li>
<p><code>depthStencil</code> specifies the depth and stencil clear values to use
when clearing a depth/stencil image or attachment.</p>
</li>
</ul>
</div>
</div>
<div class="sect3">
<h4 id="_description_403">Description</h4>
<div class="paragraph">
<p>This union is used where part of the API requires either color or
depth/stencil clear values, depending on the attachment, and defines the
initial clear values in the <a href="#VkRenderPassBeginInfo">VkRenderPassBeginInfo</a> structure.</p>
</div>
</div>
<div class="sect3">
<h4 id="_see_also_403">See Also</h4>
<div class="paragraph">
<p><a href="#VkClearAttachment">VkClearAttachment</a>, <a href="#VkClearColorValue">VkClearColorValue</a>, <a href="#VkClearDepthStencilValue">VkClearDepthStencilValue</a>, <a href="#VkRenderPassBeginInfo">VkRenderPassBeginInfo</a></p>
</div>
</div>
<div class="sect3">
<h4 id="_document_notes_403">Document Notes</h4>
<div class="paragraph">
<p>For more information, see the Vulkan Specification at URL</p>
</div>
<div class="paragraph">
<p><a href="https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VkClearValue" class="bare">https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VkClearValue</a></p>
</div>
<div class="paragraph">
<p>This page is extracted from the Vulkan Specification.
Fixes and changes should be made to the Specification, not directly.</p>
</div>
<div style="page-break-after: always;"></div>
</div>
</div>
<div class="sect2">
<h3 id="_vkcmdprocesscommandsinfonvx3">VkCmdProcessCommandsInfoNVX(3)</h3>
<div class="sect3">
<h4 id="_name_404">Name</h4>
<div class="paragraph">
<p>VkCmdProcessCommandsInfoNVX - Structure specifying parameters for the generation of commands</p>
</div>
</div>
<div class="sect3">
<h4 id="_c_specification_404">C Specification</h4>
<div id="VkCmdProcessCommandsInfoNVX" class="listingblock">
<div class="content">
<pre class="highlight"><code class="language-c++" data-lang="c++">typedef struct VkCmdProcessCommandsInfoNVX {
    VkStructureType                      sType;
    const void*                          pNext;
    VkObjectTableNVX                     objectTable;
    VkIndirectCommandsLayoutNVX          indirectCommandsLayout;
    uint32_t                             indirectCommandsTokenCount;
    const VkIndirectCommandsTokenNVX*    pIndirectCommandsTokens;
    uint32_t                             maxSequencesCount;
    VkCommandBuffer                      targetCommandBuffer;
    VkBuffer                             sequencesCountBuffer;
    VkDeviceSize                         sequencesCountOffset;
    VkBuffer                             sequencesIndexBuffer;
    VkDeviceSize                         sequencesIndexOffset;
} VkCmdProcessCommandsInfoNVX;</code></pre>
</div>
</div>
</div>
<div class="sect3">
<h4 id="_members_41">Members</h4>
<div class="ulist">
<ul>
<li>
<p><code>sType</code> is the type of this structure.</p>
</li>
<li>
<p><code>pNext</code> is <code>NULL</code> or a pointer to an extension-specific structure.</p>
</li>
<li>
<p><code>objectTable</code> is the <a href="#VkObjectTableNVX">VkObjectTableNVX</a> to be used for the
generation process.
Only registered objects at the time
<a href="#vkCmdReserveSpaceForCommandsNVX">vkCmdReserveSpaceForCommandsNVX</a> is called, will be taken into
account for the reservation.</p>
</li>
<li>
<p><code>indirectCommandsLayout</code> is the <a href="#VkIndirectCommandsLayoutNVX">VkIndirectCommandsLayoutNVX</a>
that provides the command sequence to generate.</p>
</li>
<li>
<p><code>indirectCommandsTokenCount</code> defines the number of input tokens
used.</p>
</li>
<li>
<p><code>pIndirectCommandsTokens</code> provides an array of
<a href="#VkIndirectCommandsTokenNVX">VkIndirectCommandsTokenNVX</a> that reference the input data for each
token command.</p>
</li>
<li>
<p><code>maxSequencesCount</code> is the maximum number of sequences for which
command buffer space will be reserved.
If <code>sequencesCountBuffer</code> is <a href="#VK_NULL_HANDLE">VK_NULL_HANDLE</a>, this is also the
actual number of sequences generated.</p>
</li>
<li>
<p><code>targetCommandBuffer</code> <strong class="purple">can</strong> be the secondary <a href="#VkCommandBuffer">VkCommandBuffer</a> in
which the commands should be recorded.
If <code>targetCommandBuffer</code> is <code>NULL</code> an implicit reservation as well
as execution takes place on the processing <code>VkCommandBuffer</code>.</p>
</li>
<li>
<p><code>sequencesCountBuffer</code> <strong class="purple">can</strong> be <a href="#VkBuffer">VkBuffer</a> from which the actual
amount of sequences is sourced from as <code>uint32_t</code> value.</p>
</li>
<li>
<p><code>sequencesCountOffset</code> is the byte offset into
<code>sequencesCountBuffer</code> where the count value is stored.</p>
</li>
<li>
<p><code>sequencesIndexBuffer</code> <strong class="purple">must</strong> be set if
<code>indirectCommandsLayout</code>&#8217;s
<code>VK_INDIRECT_COMMANDS_LAYOUT_USAGE_INDEXED_SEQUENCES_BIT_NVX</code> is set
and provides the used sequence indices as <code>uint32_t</code> array.
Otherwise it <strong class="purple">must</strong> be <a href="#VK_NULL_HANDLE">VK_NULL_HANDLE</a>.</p>
</li>
<li>
<p><code>sequencesIndexOffset</code> is the byte offset into
<code>sequencesIndexBuffer</code> where the index values start.</p>
</li>
</ul>
</div>
</div>
<div class="sect3">
<h4 id="_description_404">Description</h4>
<div class="sidebarblock">
<div class="content">
<div class="title">Valid Usage</div>
<div class="ulist">
<ul>
<li>
<p><a id="VUID-VkCmdProcessCommandsInfoNVX-objectTable-01331"></a>
The provided <code>objectTable</code> <strong class="purple">must</strong> include all objects referenced by
the generation process</p>
</li>
<li>
<p><a id="VUID-VkCmdProcessCommandsInfoNVX-indirectCommandsTokenCount-01332"></a>
<code>indirectCommandsTokenCount</code> <strong class="purple">must</strong> match the
<code>indirectCommandsLayout</code>&#8217;s <code>tokenCount</code></p>
</li>
<li>
<p><a id="VUID-VkCmdProcessCommandsInfoNVX-tokenType-01333"></a>
The <code>tokenType</code> member of each entry in the
<code>pIndirectCommandsTokens</code> array <strong class="purple">must</strong> match the values used at
creation time of <code>indirectCommandsLayout</code></p>
</li>
<li>
<p><a id="VUID-VkCmdProcessCommandsInfoNVX-targetCommandBuffer-01334"></a>
If <code>targetCommandBuffer</code> is provided, it <strong class="purple">must</strong> have reserved command
space</p>
</li>
<li>
<p><a id="VUID-VkCmdProcessCommandsInfoNVX-targetCommandBuffer-01335"></a>
If <code>targetCommandBuffer</code> is provided, the <code>objectTable</code> <strong class="purple">must</strong>
match the reservation&#8217;s <code>objectTable</code> and <strong class="purple">must</strong> have had all
referenced objects registered at reservation time</p>
</li>
<li>
<p><a id="VUID-VkCmdProcessCommandsInfoNVX-targetCommandBuffer-01336"></a>
If <code>targetCommandBuffer</code> is provided, the
<code>indirectCommandsLayout</code> <strong class="purple">must</strong> match the reservation&#8217;s
<code>indirectCommandsLayout</code></p>
</li>
<li>
<p><a id="VUID-VkCmdProcessCommandsInfoNVX-targetCommandBuffer-01337"></a>
If <code>targetCommandBuffer</code> is provided, the <code>maxSequencesCount</code>
<strong class="purple">must</strong> not exceed the reservation&#8217;s <code>maxSequencesCount</code></p>
</li>
<li>
<p><a id="VUID-VkCmdProcessCommandsInfoNVX-sequencesCountBuffer-01338"></a>
If <code>sequencesCountBuffer</code> is used, its usage flag <strong class="purple">must</strong> have the
<code>VK_BUFFER_USAGE_INDIRECT_BUFFER_BIT</code> bit set</p>
</li>
<li>
<p><a id="VUID-VkCmdProcessCommandsInfoNVX-sequencesCountBuffer-01339"></a>
If <code>sequencesCountBuffer</code> is used, <code>sequencesCountOffset</code> <strong class="purple">must</strong>
be aligned to
<code>VkDeviceGeneratedCommandsLimitsNVX</code>::<code>minSequenceCountBufferOffsetAlignment</code></p>
</li>
<li>
<p><a id="VUID-VkCmdProcessCommandsInfoNVX-sequencesIndexBuffer-01340"></a>
If <code>sequencesIndexBuffer</code> is used, its usage flag <strong class="purple">must</strong> have the
<code>VK_BUFFER_USAGE_INDIRECT_BUFFER_BIT</code> bit set</p>
</li>
<li>
<p><a id="VUID-VkCmdProcessCommandsInfoNVX-sequencesIndexBuffer-01341"></a>
If <code>sequencesIndexBuffer</code> is used, <code>sequencesIndexOffset</code> <strong class="purple">must</strong>
be aligned to
<code>VkDeviceGeneratedCommandsLimitsNVX</code>::<code>minSequenceIndexBufferOffsetAlignment</code></p>
</li>
</ul>
</div>
</div>
</div>
<div class="sidebarblock">
<div class="content">
<div class="title">Valid Usage (Implicit)</div>
<div class="ulist">
<ul>
<li>
<p><a id="VUID-VkCmdProcessCommandsInfoNVX-sType-sType"></a> <code>sType</code> <strong class="purple">must</strong> be <code>VK_STRUCTURE_TYPE_CMD_PROCESS_COMMANDS_INFO_NVX</code></p>
</li>
<li>
<p><a id="VUID-VkCmdProcessCommandsInfoNVX-pNext-pNext"></a> <code>pNext</code> <strong class="purple">must</strong> be <code>NULL</code></p>
</li>
<li>
<p><a id="VUID-VkCmdProcessCommandsInfoNVX-objectTable-parameter"></a> <code>objectTable</code> <strong class="purple">must</strong> be a valid <code>VkObjectTableNVX</code> handle</p>
</li>
<li>
<p><a id="VUID-VkCmdProcessCommandsInfoNVX-indirectCommandsLayout-parameter"></a> <code>indirectCommandsLayout</code> <strong class="purple">must</strong> be a valid <code>VkIndirectCommandsLayoutNVX</code> handle</p>
</li>
<li>
<p><a id="VUID-VkCmdProcessCommandsInfoNVX-pIndirectCommandsTokens-parameter"></a> <code>pIndirectCommandsTokens</code> <strong class="purple">must</strong> be a valid pointer to an array of <code>indirectCommandsTokenCount</code> valid <code>VkIndirectCommandsTokenNVX</code> structures</p>
</li>
<li>
<p><a id="VUID-VkCmdProcessCommandsInfoNVX-targetCommandBuffer-parameter"></a> If <code>targetCommandBuffer</code> is not <code>NULL</code>, <code>targetCommandBuffer</code> <strong class="purple">must</strong> be a valid <code>VkCommandBuffer</code> handle</p>
</li>
<li>
<p><a id="VUID-VkCmdProcessCommandsInfoNVX-sequencesCountBuffer-parameter"></a> If <code>sequencesCountBuffer</code> is not <a href="#VK_NULL_HANDLE">VK_NULL_HANDLE</a>, <code>sequencesCountBuffer</code> <strong class="purple">must</strong> be a valid <code>VkBuffer</code> handle</p>
</li>
<li>
<p><a id="VUID-VkCmdProcessCommandsInfoNVX-sequencesIndexBuffer-parameter"></a> If <code>sequencesIndexBuffer</code> is not <a href="#VK_NULL_HANDLE">VK_NULL_HANDLE</a>, <code>sequencesIndexBuffer</code> <strong class="purple">must</strong> be a valid <code>VkBuffer</code> handle</p>
</li>
<li>
<p><a id="VUID-VkCmdProcessCommandsInfoNVX-indirectCommandsTokenCount-arraylength"></a> <code>indirectCommandsTokenCount</code> <strong class="purple">must</strong> be greater than <code>0</code></p>
</li>
<li>
<p><a id="VUID-VkCmdProcessCommandsInfoNVX-commonparent"></a> Each of <code>indirectCommandsLayout</code>, <code>objectTable</code>, <code>sequencesCountBuffer</code>, <code>sequencesIndexBuffer</code>, and <code>targetCommandBuffer</code> that are valid handles <strong class="purple">must</strong> have been created, allocated, or retrieved from the same <code>VkDevice</code></p>
</li>
</ul>
</div>
</div>
</div>
<div class="sidebarblock">
<div class="content">
<div class="title">Host Synchronization</div>
<div class="ulist">
<ul>
<li>
<p>Host access to <code>objectTable</code> <strong class="purple">must</strong> be externally synchronized</p>
</li>
<li>
<p>Host access to <code>targetCommandBuffer</code> <strong class="purple">must</strong> be externally synchronized</p>
</li>
</ul>
</div>
</div>
</div>
</div>
<div class="sect3">
<h4 id="_see_also_404">See Also</h4>
<div class="paragraph">
<p><a href="#VkBuffer">VkBuffer</a>, <a href="#VkCommandBuffer">VkCommandBuffer</a>, <code>VkDeviceSize</code>, <a href="#VkIndirectCommandsLayoutNVX">VkIndirectCommandsLayoutNVX</a>, <a href="#VkIndirectCommandsTokenNVX">VkIndirectCommandsTokenNVX</a>, <a href="#VkObjectTableNVX">VkObjectTableNVX</a>, <a href="#VkStructureType">VkStructureType</a>, <a href="#vkCmdProcessCommandsNVX">vkCmdProcessCommandsNVX</a></p>
</div>
</div>
<div class="sect3">
<h4 id="_document_notes_404">Document Notes</h4>
<div class="paragraph">
<p>For more information, see the Vulkan Specification at URL</p>
</div>
<div class="paragraph">
<p><a href="https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VkCmdProcessCommandsInfoNVX" class="bare">https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VkCmdProcessCommandsInfoNVX</a></p>
</div>
<div class="paragraph">
<p>This page is extracted from the Vulkan Specification.
Fixes and changes should be made to the Specification, not directly.</p>
</div>
<div style="page-break-after: always;"></div>
</div>
</div>
<div class="sect2">
<h3 id="_vkcmdreservespaceforcommandsinfonvx3">VkCmdReserveSpaceForCommandsInfoNVX(3)</h3>
<div class="sect3">
<h4 id="_name_405">Name</h4>
<div class="paragraph">
<p>VkCmdReserveSpaceForCommandsInfoNVX - Structure specifying parameters for the reservation of command buffer space</p>
</div>
</div>
<div class="sect3">
<h4 id="_c_specification_405">C Specification</h4>
<div id="VkCmdReserveSpaceForCommandsInfoNVX" class="listingblock">
<div class="content">
<pre class="highlight"><code class="language-c++" data-lang="c++">typedef struct VkCmdReserveSpaceForCommandsInfoNVX {
    VkStructureType                sType;
    const void*                    pNext;
    VkObjectTableNVX               objectTable;
    VkIndirectCommandsLayoutNVX    indirectCommandsLayout;
    uint32_t                       maxSequencesCount;
} VkCmdReserveSpaceForCommandsInfoNVX;</code></pre>
</div>
</div>
</div>
<div class="sect3">
<h4 id="_members_42">Members</h4>
<div class="ulist">
<ul>
<li>
<p><code>sType</code> is the type of this structure.</p>
</li>
<li>
<p><code>pNext</code> is <code>NULL</code> or a pointer to an extension-specific structure.</p>
</li>
<li>
<p><code>objectTable</code> is the <a href="#VkObjectTableNVX">VkObjectTableNVX</a> to be used for the
generation process.
Only registered objects at the time
<a href="#vkCmdReserveSpaceForCommandsNVX">vkCmdReserveSpaceForCommandsNVX</a> is called, will be taken into
account for the reservation.</p>
</li>
<li>
<p><code>indirectCommandsLayout</code> is the <a href="#VkIndirectCommandsLayoutNVX">VkIndirectCommandsLayoutNVX</a>
that <strong class="purple">must</strong> also be used at generation time.</p>
</li>
<li>
<p><code>maxSequencesCount</code> is the maximum number of sequences for which
command buffer space will be reserved.</p>
</li>
</ul>
</div>
</div>
<div class="sect3">
<h4 id="_description_405">Description</h4>
<div class="sidebarblock">
<div class="content">
<div class="title">Valid Usage (Implicit)</div>
<div class="ulist">
<ul>
<li>
<p><a id="VUID-VkCmdReserveSpaceForCommandsInfoNVX-sType-sType"></a> <code>sType</code> <strong class="purple">must</strong> be <code>VK_STRUCTURE_TYPE_CMD_RESERVE_SPACE_FOR_COMMANDS_INFO_NVX</code></p>
</li>
<li>
<p><a id="VUID-VkCmdReserveSpaceForCommandsInfoNVX-pNext-pNext"></a> <code>pNext</code> <strong class="purple">must</strong> be <code>NULL</code></p>
</li>
<li>
<p><a id="VUID-VkCmdReserveSpaceForCommandsInfoNVX-objectTable-parameter"></a> <code>objectTable</code> <strong class="purple">must</strong> be a valid <code>VkObjectTableNVX</code> handle</p>
</li>
<li>
<p><a id="VUID-VkCmdReserveSpaceForCommandsInfoNVX-indirectCommandsLayout-parameter"></a> <code>indirectCommandsLayout</code> <strong class="purple">must</strong> be a valid <code>VkIndirectCommandsLayoutNVX</code> handle</p>
</li>
<li>
<p><a id="VUID-VkCmdReserveSpaceForCommandsInfoNVX-commonparent"></a> Both of <code>indirectCommandsLayout</code>, and <code>objectTable</code> <strong class="purple">must</strong> have been created, allocated, or retrieved from the same <code>VkDevice</code></p>
</li>
</ul>
</div>
</div>
</div>
<div class="sidebarblock">
<div class="content">
<div class="title">Host Synchronization</div>
<div class="ulist">
<ul>
<li>
<p>Host access to <code>objectTable</code> <strong class="purple">must</strong> be externally synchronized</p>
</li>
</ul>
</div>
</div>
</div>
</div>
<div class="sect3">
<h4 id="_see_also_405">See Also</h4>
<div class="paragraph">
<p><a href="#VkIndirectCommandsLayoutNVX">VkIndirectCommandsLayoutNVX</a>, <a href="#VkObjectTableNVX">VkObjectTableNVX</a>, <a href="#VkStructureType">VkStructureType</a>, <a href="#vkCmdReserveSpaceForCommandsNVX">vkCmdReserveSpaceForCommandsNVX</a></p>
</div>
</div>
<div class="sect3">
<h4 id="_document_notes_405">Document Notes</h4>
<div class="paragraph">
<p>For more information, see the Vulkan Specification at URL</p>
</div>
<div class="paragraph">
<p><a href="https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VkCmdReserveSpaceForCommandsInfoNVX" class="bare">https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VkCmdReserveSpaceForCommandsInfoNVX</a></p>
</div>
<div class="paragraph">
<p>This page is extracted from the Vulkan Specification.
Fixes and changes should be made to the Specification, not directly.</p>
</div>
<div style="page-break-after: always;"></div>
</div>
</div>
<div class="sect2">
<h3 id="_vkcoarsesamplelocationnv3">VkCoarseSampleLocationNV(3)</h3>
<div class="sect3">
<h4 id="_name_406">Name</h4>
<div class="paragraph">
<p>VkCoarseSampleLocationNV - Structure specifying parameters controlling shading rate image usage</p>
</div>
</div>
<div class="sect3">
<h4 id="_c_specification_406">C Specification</h4>
<div class="paragraph">
<p>The <code>VkCoarseSampleLocationNV</code> structure identifies a specific pixel and
sample number for one of the coverage samples in a fragment that is larger
than one pixel.
This structure is defined as:</p>
</div>
<div id="VkCoarseSampleLocationNV" class="listingblock">
<div class="content">
<pre class="highlight"><code class="language-c++" data-lang="c++">typedef struct VkCoarseSampleLocationNV {
    uint32_t    pixelX;
    uint32_t    pixelY;
    uint32_t    sample;
} VkCoarseSampleLocationNV;</code></pre>
</div>
</div>
</div>
<div class="sect3">
<h4 id="_members_43">Members</h4>
<div class="ulist">
<ul>
<li>
<p><code>pixelX</code> is added to the x coordinate of the upper-leftmost pixel of
each fragment to identify the pixel containing the coverage sample.</p>
</li>
<li>
<p><code>pixelY</code> is added to the y coordinate of the upper-leftmost pixel of
each fragment to identify the pixel containing the coverage sample.</p>
</li>
<li>
<p><code>sample</code> is the number of the coverage sample in the pixel
identified by <code>pixelX</code> and <code>pixelY</code>.</p>
</li>
</ul>
</div>
</div>
<div class="sect3">
<h4 id="_description_406">Description</h4>
<div class="sidebarblock">
<div class="content">
<div class="title">Valid Usage</div>
<div class="ulist">
<ul>
<li>
<p><a id="VUID-VkCoarseSampleLocationNV-pixelX-02078"></a>
<code>pixelX</code> <strong class="purple">must</strong> be less than the width (in pixels) of the fragment.</p>
</li>
<li>
<p><a id="VUID-VkCoarseSampleLocationNV-pixelY-02079"></a>
<code>pixelY</code> <strong class="purple">must</strong> be less than the height (in pixels) of the fragment.</p>
</li>
<li>
<p><a id="VUID-VkCoarseSampleLocationNV-sample-02080"></a>
<code>sample</code> <strong class="purple">must</strong> be less than the number of coverage samples in each
pixel belonging to the fragment.</p>
</li>
</ul>
</div>
</div>
</div>
</div>
<div class="sect3">
<h4 id="_see_also_406">See Also</h4>
<div class="paragraph">
<p><a href="#VkCoarseSampleOrderCustomNV">VkCoarseSampleOrderCustomNV</a></p>
</div>
</div>
<div class="sect3">
<h4 id="_document_notes_406">Document Notes</h4>
<div class="paragraph">
<p>For more information, see the Vulkan Specification at URL</p>
</div>
<div class="paragraph">
<p><a href="https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VkCoarseSampleLocationNV" class="bare">https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VkCoarseSampleLocationNV</a></p>
</div>
<div class="paragraph">
<p>This page is extracted from the Vulkan Specification.
Fixes and changes should be made to the Specification, not directly.</p>
</div>
<div style="page-break-after: always;"></div>
</div>
</div>
<div class="sect2">
<h3 id="_vkcoarsesampleordercustomnv3">VkCoarseSampleOrderCustomNV(3)</h3>
<div class="sect3">
<h4 id="_name_407">Name</h4>
<div class="paragraph">
<p>VkCoarseSampleOrderCustomNV - Structure specifying parameters controlling shading rate image usage</p>
</div>
</div>
<div class="sect3">
<h4 id="_c_specification_407">C Specification</h4>
<div class="paragraph">
<p>The <code>VkCoarseSampleOrderCustomNV</code> structure is used with a coverage
sample ordering type of <code>VK_COARSE_SAMPLE_ORDER_TYPE_CUSTOM_NV</code> to
specify the order of coverage samples for one combination of fragment width,
fragment height, and coverage sample count.
The structure is defined as:</p>
</div>
<div id="VkCoarseSampleOrderCustomNV" class="listingblock">
<div class="content">
<pre class="highlight"><code class="language-c++" data-lang="c++">typedef struct VkCoarseSampleOrderCustomNV {
    VkShadingRatePaletteEntryNV        shadingRate;
    uint32_t                           sampleCount;
    uint32_t                           sampleLocationCount;
    const VkCoarseSampleLocationNV*    pSampleLocations;
} VkCoarseSampleOrderCustomNV;</code></pre>
</div>
</div>
</div>
<div class="sect3">
<h4 id="_members_44">Members</h4>
<div class="ulist">
<ul>
<li>
<p><code>shadingRate</code> is a shading rate palette entry that identifies the
fragment width and height for the combination of fragment area and
per-pixel coverage sample count to control.</p>
</li>
<li>
<p><code>sampleCount</code> identifies the per-pixel coverage sample count for the
combination of fragment area and coverage sample count to control.</p>
</li>
<li>
<p><code>sampleLocationCount</code> specifies the number of sample locations in
the custom ordering.</p>
</li>
<li>
<p><code>pSampleLocations</code> is a pointer to an array of
<a href="#VkCoarseSampleOrderCustomNV">VkCoarseSampleOrderCustomNV</a> structures that specifies the location
of each sample in the custom ordering.</p>
</li>
</ul>
</div>
</div>
<div class="sect3">
<h4 id="_description_407">Description</h4>
<div class="paragraph">
<p>When using a custom sample ordering, element <em>i</em> in <code>pSampleLocations</code>
specifies a specific pixel and per-pixel coverage sample number that
corresponds to the coverage sample numbered <em>i</em> in the multi-pixel fragment.</p>
</div>
<div class="sidebarblock">
<div class="content">
<div class="title">Valid Usage</div>
<div class="ulist">
<ul>
<li>
<p><a id="VUID-VkCoarseSampleOrderCustomNV-shadingRate-02073"></a>
<code>shadingRate</code> <strong class="purple">must</strong> be a shading rate that generates fragments with
more than one pixel.</p>
</li>
<li>
<p><a id="VUID-VkCoarseSampleOrderCustomNV-sampleCount-02074"></a>
<code>sampleCount</code> <strong class="purple">must</strong> correspond to a sample count enumerated in
<a href="#VkSampleCountFlags">VkSampleCountFlags</a> whose corresponding bit is set in
<a href="#VkPhysicalDeviceLimits">VkPhysicalDeviceLimits</a>::<code>framebufferNoAttachmentsSampleCounts</code>.</p>
</li>
<li>
<p><a id="VUID-VkCoarseSampleOrderCustomNV-sampleLocationCount-02075"></a>
<code>sampleLocationCount</code> <strong class="purple">must</strong> be equal to the product of
<code>sampleCount</code>, the fragment width for <code>shadingRate</code>, and the
fragment height for <code>shadingRate</code>.</p>
</li>
<li>
<p><a id="VUID-VkCoarseSampleOrderCustomNV-sampleLocationCount-02076"></a>
<code>sampleLocationCount</code> <strong class="purple">must</strong> be less than or equal to the value of
<code>VkPhysicalDeviceShadingRateImagePropertiesNV</code>::<code>shadingRateMaxCoarseSamples</code>.</p>
</li>
<li>
<p><a id="VUID-VkCoarseSampleOrderCustomNV-pSampleLocations-02077"></a>
The array <code>pSampleLocations</code> <strong class="purple">must</strong> contain exactly one entry for
every combination of valid values for <code>pixelX</code>, <code>pixelY</code>, and
<code>sample</code> in the structure <a href="#VkCoarseSampleOrderCustomNV">VkCoarseSampleOrderCustomNV</a>.</p>
</li>
</ul>
</div>
</div>
</div>
<div class="sidebarblock">
<div class="content">
<div class="title">Valid Usage (Implicit)</div>
<div class="ulist">
<ul>
<li>
<p><a id="VUID-VkCoarseSampleOrderCustomNV-shadingRate-parameter"></a> <code>shadingRate</code> <strong class="purple">must</strong> be a valid <a href="#VkShadingRatePaletteEntryNV">VkShadingRatePaletteEntryNV</a> value</p>
</li>
<li>
<p><a id="VUID-VkCoarseSampleOrderCustomNV-pSampleLocations-parameter"></a> <code>pSampleLocations</code> <strong class="purple">must</strong> be a valid pointer to an array of <code>sampleLocationCount</code> <code>VkCoarseSampleLocationNV</code> structures</p>
</li>
<li>
<p><a id="VUID-VkCoarseSampleOrderCustomNV-sampleLocationCount-arraylength"></a> <code>sampleLocationCount</code> <strong class="purple">must</strong> be greater than <code>0</code></p>
</li>
</ul>
</div>
</div>
</div>
</div>
<div class="sect3">
<h4 id="_see_also_407">See Also</h4>
<div class="paragraph">
<p><a href="#VkCoarseSampleLocationNV">VkCoarseSampleLocationNV</a>, <a href="#VkPipelineViewportCoarseSampleOrderStateCreateInfoNV">VkPipelineViewportCoarseSampleOrderStateCreateInfoNV</a>, <a href="#VkShadingRatePaletteEntryNV">VkShadingRatePaletteEntryNV</a>, <a href="#vkCmdSetCoarseSampleOrderNV">vkCmdSetCoarseSampleOrderNV</a></p>
</div>
</div>
<div class="sect3">
<h4 id="_document_notes_407">Document Notes</h4>
<div class="paragraph">
<p>For more information, see the Vulkan Specification at URL</p>
</div>
<div class="paragraph">
<p><a href="https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VkCoarseSampleOrderCustomNV" class="bare">https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VkCoarseSampleOrderCustomNV</a></p>
</div>
<div class="paragraph">
<p>This page is extracted from the Vulkan Specification.
Fixes and changes should be made to the Specification, not directly.</p>
</div>
<div style="page-break-after: always;"></div>
</div>
</div>
<div class="sect2">
<h3 id="_vkcommandbufferallocateinfo3">VkCommandBufferAllocateInfo(3)</h3>
<div class="sect3">
<h4 id="_name_408">Name</h4>
<div class="paragraph">
<p>VkCommandBufferAllocateInfo - Structure specifying the allocation parameters for command buffer object</p>
</div>
</div>
<div class="sect3">
<h4 id="_c_specification_408">C Specification</h4>
<div class="paragraph">
<p>The <code>VkCommandBufferAllocateInfo</code> structure is defined as:</p>
</div>
<div id="VkCommandBufferAllocateInfo" class="listingblock">
<div class="content">
<pre class="highlight"><code class="language-c++" data-lang="c++">typedef struct VkCommandBufferAllocateInfo {
    VkStructureType         sType;
    const void*             pNext;
    VkCommandPool           commandPool;
    VkCommandBufferLevel    level;
    uint32_t                commandBufferCount;
} VkCommandBufferAllocateInfo;</code></pre>
</div>
</div>
</div>
<div class="sect3">
<h4 id="_members_45">Members</h4>
<div class="ulist">
<ul>
<li>
<p><code>sType</code> is the type of this structure.</p>
</li>
<li>
<p><code>pNext</code> is <code>NULL</code> or a pointer to an extension-specific structure.</p>
</li>
<li>
<p><code>commandPool</code> is the command pool from which the command buffers are
allocated.</p>
</li>
<li>
<p><code>level</code> is a <a href="#VkCommandBufferLevel">VkCommandBufferLevel</a> value specifying the command
buffer level.</p>
</li>
<li>
<p><code>commandBufferCount</code> is the number of command buffers to allocate
from the pool.</p>
</li>
</ul>
</div>
</div>
<div class="sect3">
<h4 id="_description_408">Description</h4>
<div class="sidebarblock">
<div class="content">
<div class="title">Valid Usage</div>
<div class="ulist">
<ul>
<li>
<p><a id="VUID-VkCommandBufferAllocateInfo-commandBufferCount-00044"></a>
<code>commandBufferCount</code> <strong class="purple">must</strong> be greater than <code>0</code></p>
</li>
</ul>
</div>
</div>
</div>
<div class="sidebarblock">
<div class="content">
<div class="title">Valid Usage (Implicit)</div>
<div class="ulist">
<ul>
<li>
<p><a id="VUID-VkCommandBufferAllocateInfo-sType-sType"></a> <code>sType</code> <strong class="purple">must</strong> be <code>VK_STRUCTURE_TYPE_COMMAND_BUFFER_ALLOCATE_INFO</code></p>
</li>
<li>
<p><a id="VUID-VkCommandBufferAllocateInfo-pNext-pNext"></a> <code>pNext</code> <strong class="purple">must</strong> be <code>NULL</code></p>
</li>
<li>
<p><a id="VUID-VkCommandBufferAllocateInfo-commandPool-parameter"></a> <code>commandPool</code> <strong class="purple">must</strong> be a valid <code>VkCommandPool</code> handle</p>
</li>
<li>
<p><a id="VUID-VkCommandBufferAllocateInfo-level-parameter"></a> <code>level</code> <strong class="purple">must</strong> be a valid <a href="#VkCommandBufferLevel">VkCommandBufferLevel</a> value</p>
</li>
</ul>
</div>
</div>
</div>
</div>
<div class="sect3">
<h4 id="_see_also_408">See Also</h4>
<div class="paragraph">
<p><a href="#VkCommandBufferLevel">VkCommandBufferLevel</a>, <a href="#VkCommandPool">VkCommandPool</a>, <a href="#VkStructureType">VkStructureType</a>, <a href="#vkAllocateCommandBuffers">vkAllocateCommandBuffers</a></p>
</div>
</div>
<div class="sect3">
<h4 id="_document_notes_408">Document Notes</h4>
<div class="paragraph">
<p>For more information, see the Vulkan Specification at URL</p>
</div>
<div class="paragraph">
<p><a href="https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VkCommandBufferAllocateInfo" class="bare">https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VkCommandBufferAllocateInfo</a></p>
</div>
<div class="paragraph">
<p>This page is extracted from the Vulkan Specification.
Fixes and changes should be made to the Specification, not directly.</p>
</div>
<div style="page-break-after: always;"></div>
</div>
</div>
<div class="sect2">
<h3 id="_vkcommandbufferbegininfo3">VkCommandBufferBeginInfo(3)</h3>
<div class="sect3">
<h4 id="_name_409">Name</h4>
<div class="paragraph">
<p>VkCommandBufferBeginInfo - Structure specifying a command buffer begin operation</p>
</div>
</div>
<div class="sect3">
<h4 id="_c_specification_409">C Specification</h4>
<div class="paragraph">
<p>The <code>VkCommandBufferBeginInfo</code> structure is defined as:</p>
</div>
<div id="VkCommandBufferBeginInfo" class="listingblock">
<div class="content">
<pre class="highlight"><code class="language-c++" data-lang="c++">typedef struct VkCommandBufferBeginInfo {
    VkStructureType                          sType;
    const void*                              pNext;
    VkCommandBufferUsageFlags                flags;
    const VkCommandBufferInheritanceInfo*    pInheritanceInfo;
} VkCommandBufferBeginInfo;</code></pre>
</div>
</div>
</div>
<div class="sect3">
<h4 id="_members_46">Members</h4>
<div class="ulist">
<ul>
<li>
<p><code>sType</code> is the type of this structure.</p>
</li>
<li>
<p><code>pNext</code> is <code>NULL</code> or a pointer to an extension-specific structure.</p>
</li>
<li>
<p><code>flags</code> is a bitmask of <a href="#VkCommandBufferUsageFlagBits">VkCommandBufferUsageFlagBits</a>
specifying usage behavior for the command buffer.</p>
</li>
<li>
<p><code>pInheritanceInfo</code> is a pointer to a
<code>VkCommandBufferInheritanceInfo</code> structure, which is used if
<code>commandBuffer</code> is a secondary command buffer.
If this is a primary command buffer, then this value is ignored.</p>
</li>
</ul>
</div>
</div>
<div class="sect3">
<h4 id="_description_409">Description</h4>
<div class="sidebarblock">
<div class="content">
<div class="title">Valid Usage</div>
<div class="ulist">
<ul>
<li>
<p><a id="VUID-VkCommandBufferBeginInfo-flags-00053"></a>
If <code>flags</code> contains
<code>VK_COMMAND_BUFFER_USAGE_RENDER_PASS_CONTINUE_BIT</code>, the
<code>renderPass</code> member of <code>pInheritanceInfo</code> <strong class="purple">must</strong> be a valid
<code>VkRenderPass</code></p>
</li>
<li>
<p><a id="VUID-VkCommandBufferBeginInfo-flags-00054"></a>
If <code>flags</code> contains
<code>VK_COMMAND_BUFFER_USAGE_RENDER_PASS_CONTINUE_BIT</code>, the
<code>subpass</code> member of <code>pInheritanceInfo</code> <strong class="purple">must</strong> be a valid subpass
index within the <code>renderPass</code> member of <code>pInheritanceInfo</code></p>
</li>
<li>
<p><a id="VUID-VkCommandBufferBeginInfo-flags-00055"></a>
If <code>flags</code> contains
<code>VK_COMMAND_BUFFER_USAGE_RENDER_PASS_CONTINUE_BIT</code>, the
<code>framebuffer</code> member of <code>pInheritanceInfo</code> <strong class="purple">must</strong> be either
<a href="#VK_NULL_HANDLE">VK_NULL_HANDLE</a>, or a valid <code>VkFramebuffer</code> that is compatible
with the <code>renderPass</code> member of <code>pInheritanceInfo</code></p>
</li>
</ul>
</div>
</div>
</div>
<div class="sidebarblock">
<div class="content">
<div class="title">Valid Usage (Implicit)</div>
<div class="ulist">
<ul>
<li>
<p><a id="VUID-VkCommandBufferBeginInfo-sType-sType"></a> <code>sType</code> <strong class="purple">must</strong> be <code>VK_STRUCTURE_TYPE_COMMAND_BUFFER_BEGIN_INFO</code></p>
</li>
<li>
<p><a id="VUID-VkCommandBufferBeginInfo-pNext-pNext"></a> <code>pNext</code> <strong class="purple">must</strong> be <code>NULL</code> or a pointer to a valid instance of <a href="#VkDeviceGroupCommandBufferBeginInfo">VkDeviceGroupCommandBufferBeginInfo</a></p>
</li>
<li>
<p><a id="VUID-VkCommandBufferBeginInfo-flags-parameter"></a> <code>flags</code> <strong class="purple">must</strong> be a valid combination of <a href="#VkCommandBufferUsageFlagBits">VkCommandBufferUsageFlagBits</a> values</p>
</li>
</ul>
</div>
</div>
</div>
</div>
<div class="sect3">
<h4 id="_see_also_409">See Also</h4>
<div class="paragraph">
<p><a href="#VkCommandBufferInheritanceInfo">VkCommandBufferInheritanceInfo</a>, <a href="#VkCommandBufferUsageFlags">VkCommandBufferUsageFlags</a>, <a href="#VkStructureType">VkStructureType</a>, <a href="#vkBeginCommandBuffer">vkBeginCommandBuffer</a></p>
</div>
</div>
<div class="sect3">
<h4 id="_document_notes_409">Document Notes</h4>
<div class="paragraph">
<p>For more information, see the Vulkan Specification at URL</p>
</div>
<div class="paragraph">
<p><a href="https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VkCommandBufferBeginInfo" class="bare">https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VkCommandBufferBeginInfo</a></p>
</div>
<div class="paragraph">
<p>This page is extracted from the Vulkan Specification.
Fixes and changes should be made to the Specification, not directly.</p>
</div>
<div style="page-break-after: always;"></div>
</div>
</div>
<div class="sect2">
<h3 id="_vkcommandbufferinheritanceconditionalrenderinginfoext3">VkCommandBufferInheritanceConditionalRenderingInfoEXT(3)</h3>
<div class="sect3">
<h4 id="_name_410">Name</h4>
<div class="paragraph">
<p>VkCommandBufferInheritanceConditionalRenderingInfoEXT - Structure specifying command buffer inheritance info</p>
</div>
</div>
<div class="sect3">
<h4 id="_c_specification_410">C Specification</h4>
<div class="paragraph">
<p>If the <code>pNext</code> chain of <a href="#VkCommandBufferInheritanceInfo">VkCommandBufferInheritanceInfo</a> includes a
<code>VkCommandBufferInheritanceConditionalRenderingInfoEXT</code> structure, then
that structure controls whether a command buffer <strong class="purple">can</strong> be executed while
conditional rendering is <a href="vkspec.html#active-conditional-rendering">active</a> in the
primary command buffer.</p>
</div>
<div class="paragraph">
<p>The <code>VkCommandBufferInheritanceConditionalRenderingInfoEXT</code> structure is
defined as:</p>
</div>
<div id="VkCommandBufferInheritanceConditionalRenderingInfoEXT" class="listingblock">
<div class="content">
<pre class="highlight"><code class="language-c++" data-lang="c++">typedef struct VkCommandBufferInheritanceConditionalRenderingInfoEXT {
    VkStructureType    sType;
    const void*        pNext;
    VkBool32           conditionalRenderingEnable;
} VkCommandBufferInheritanceConditionalRenderingInfoEXT;</code></pre>
</div>
</div>
</div>
<div class="sect3">
<h4 id="_members_47">Members</h4>
<div class="ulist">
<ul>
<li>
<p><code>sType</code> is the type of this structure</p>
</li>
<li>
<p><code>pNext</code> is <code>NULL</code> or a pointer to an extension-specific structure</p>
</li>
<li>
<p><code>conditionalRenderingEnable</code> specifies whether the command buffer
<strong class="purple">can</strong> be executed while conditional rendering is active in the primary
command buffer.
If this is <code>VK_TRUE</code>, then this command buffer <strong class="purple">can</strong> be executed
whether the primary command buffer has active conditional rendering or
not.
If this is <code>VK_FALSE</code>, then the primary command buffer <strong class="purple">must</strong> not
have conditional rendering active.</p>
</li>
</ul>
</div>
</div>
<div class="sect3">
<h4 id="_description_410">Description</h4>
<div class="paragraph">
<p>If this structure is not present, the behavior is as if
<code>conditionalRenderingEnable</code> is <code>VK_FALSE</code>.</p>
</div>
<div class="sidebarblock">
<div class="content">
<div class="title">Valid Usage</div>
<div class="ulist">
<ul>
<li>
<p><a id="VUID-VkCommandBufferInheritanceConditionalRenderingInfoEXT-conditionalRenderingEnable-01977"></a>
If the <a href="vkspec.html#features-inheritedConditionalRendering">inherited conditional
rendering</a> feature is not enabled, <code>conditionalRenderingEnable</code>
<strong class="purple">must</strong> be <code>VK_FALSE</code></p>
</li>
</ul>
</div>
</div>
</div>
<div class="sidebarblock">
<div class="content">
<div class="title">Valid Usage (Implicit)</div>
<div class="ulist">
<ul>
<li>
<p><a id="VUID-VkCommandBufferInheritanceConditionalRenderingInfoEXT-sType-sType"></a> <code>sType</code> <strong class="purple">must</strong> be <code>VK_STRUCTURE_TYPE_COMMAND_BUFFER_INHERITANCE_CONDITIONAL_RENDERING_INFO_EXT</code></p>
</li>
</ul>
</div>
</div>
</div>
</div>
<div class="sect3">
<h4 id="_see_also_410">See Also</h4>
<div class="paragraph">
<p><code>VkBool32</code>, <a href="#VkStructureType">VkStructureType</a></p>
</div>
</div>
<div class="sect3">
<h4 id="_document_notes_410">Document Notes</h4>
<div class="paragraph">
<p>For more information, see the Vulkan Specification at URL</p>
</div>
<div class="paragraph">
<p><a href="https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VkCommandBufferInheritanceConditionalRenderingInfoEXT" class="bare">https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VkCommandBufferInheritanceConditionalRenderingInfoEXT</a></p>
</div>
<div class="paragraph">
<p>This page is extracted from the Vulkan Specification.
Fixes and changes should be made to the Specification, not directly.</p>
</div>
<div style="page-break-after: always;"></div>
</div>
</div>
<div class="sect2">
<h3 id="_vkcommandbufferinheritanceinfo3">VkCommandBufferInheritanceInfo(3)</h3>
<div class="sect3">
<h4 id="_name_411">Name</h4>
<div class="paragraph">
<p>VkCommandBufferInheritanceInfo - Structure specifying command buffer inheritance info</p>
</div>
</div>
<div class="sect3">
<h4 id="_c_specification_411">C Specification</h4>
<div class="paragraph">
<p>If the command buffer is a secondary command buffer, then the
<code>VkCommandBufferInheritanceInfo</code> structure defines any state that will
be inherited from the primary command buffer:</p>
</div>
<div id="VkCommandBufferInheritanceInfo" class="listingblock">
<div class="content">
<pre class="highlight"><code class="language-c++" data-lang="c++">typedef struct VkCommandBufferInheritanceInfo {
    VkStructureType                  sType;
    const void*                      pNext;
    VkRenderPass                     renderPass;
    uint32_t                         subpass;
    VkFramebuffer                    framebuffer;
    VkBool32                         occlusionQueryEnable;
    VkQueryControlFlags              queryFlags;
    VkQueryPipelineStatisticFlags    pipelineStatistics;
} VkCommandBufferInheritanceInfo;</code></pre>
</div>
</div>
</div>
<div class="sect3">
<h4 id="_members_48">Members</h4>
<div class="ulist">
<ul>
<li>
<p><code>sType</code> is the type of this structure.</p>
</li>
<li>
<p><code>pNext</code> is <code>NULL</code> or a pointer to an extension-specific structure.</p>
</li>
<li>
<p><code>renderPass</code> is a <a href="#VkRenderPass">VkRenderPass</a> object defining which render
passes the <code>VkCommandBuffer</code> will be <a href="vkspec.html#renderpass-compatibility">compatible</a> with and <strong class="purple">can</strong> be executed within.
If the <code>VkCommandBuffer</code> will not be executed within a render pass
instance, <code>renderPass</code> is ignored.</p>
</li>
<li>
<p><code>subpass</code> is the index of the subpass within the render pass
instance that the <code>VkCommandBuffer</code> will be executed within.
If the <code>VkCommandBuffer</code> will not be executed within a render pass
instance, <code>subpass</code> is ignored.</p>
</li>
<li>
<p><code>framebuffer</code> optionally refers to the <a href="#VkFramebuffer">VkFramebuffer</a> object
that the <code>VkCommandBuffer</code> will be rendering to if it is executed
within a render pass instance.
It <strong class="purple">can</strong> be <a href="#VK_NULL_HANDLE">VK_NULL_HANDLE</a> if the framebuffer is not known, or if
the <code>VkCommandBuffer</code> will not be executed within a render pass
instance.</p>
<div class="admonitionblock note">
<table>
<tr>
<td class="icon">
<i class="fa icon-note" title="Note"></i>
</td>
<td class="content">
<div class="title">Note</div>
<div class="paragraph">
<p>Specifying the exact framebuffer that the secondary command buffer will be
executed with <strong class="purple">may</strong> result in better performance at command buffer execution
time.</p>
</div>
</td>
</tr>
</table>
</div>
</li>
<li>
<p><code>occlusionQueryEnable</code> specifies whether the command buffer <strong class="purple">can</strong> be
executed while an occlusion query is active in the primary command
buffer.
If this is <code>VK_TRUE</code>, then this command buffer <strong class="purple">can</strong> be executed
whether the primary command buffer has an occlusion query active or not.
If this is <code>VK_FALSE</code>, then the primary command buffer <strong class="purple">must</strong> not
have an occlusion query active.</p>
</li>
<li>
<p><code>queryFlags</code> specifies the query flags that <strong class="purple">can</strong> be used by an
active occlusion query in the primary command buffer when this secondary
command buffer is executed.
If this value includes the <code>VK_QUERY_CONTROL_PRECISE_BIT</code> bit, then
the active query <strong class="purple">can</strong> return boolean results or actual sample counts.
If this bit is not set, then the active query <strong class="purple">must</strong> not use the
<code>VK_QUERY_CONTROL_PRECISE_BIT</code> bit.</p>
</li>
<li>
<p><code>pipelineStatistics</code> is a bitmask of
<a href="#VkQueryPipelineStatisticFlagBits">VkQueryPipelineStatisticFlagBits</a> specifying the set of pipeline
statistics that <strong class="purple">can</strong> be counted by an active query in the primary
command buffer when this secondary command buffer is executed.
If this value includes a given bit, then this command buffer <strong class="purple">can</strong> be
executed whether the primary command buffer has a pipeline statistics
query active that includes this bit or not.
If this value excludes a given bit, then the active pipeline statistics
query <strong class="purple">must</strong> not be from a query pool that counts that statistic.</p>
</li>
</ul>
</div>
</div>
<div class="sect3">
<h4 id="_description_411">Description</h4>
<div class="sidebarblock">
<div class="content">
<div class="title">Valid Usage</div>
<div class="ulist">
<ul>
<li>
<p><a id="VUID-VkCommandBufferInheritanceInfo-occlusionQueryEnable-00056"></a>
If the <a href="vkspec.html#features-inheritedQueries">inherited queries</a> feature is not
enabled, <code>occlusionQueryEnable</code> <strong class="purple">must</strong> be <code>VK_FALSE</code></p>
</li>
<li>
<p><a id="VUID-VkCommandBufferInheritanceInfo-queryFlags-00057"></a>
If the <a href="vkspec.html#features-inheritedQueries">inherited queries</a> feature is
enabled, <code>queryFlags</code> <strong class="purple">must</strong> be a valid combination of
<a href="#VkQueryControlFlagBits">VkQueryControlFlagBits</a> values</p>
</li>
<li>
<p><a id="VUID-VkCommandBufferInheritanceInfo-pipelineStatistics-00058"></a>
If the <a href="vkspec.html#features-pipelineStatisticsQuery">pipeline statistics queries</a>
feature is not enabled, <code>pipelineStatistics</code> <strong class="purple">must</strong> be <code>0</code></p>
</li>
</ul>
</div>
</div>
</div>
<div class="sidebarblock">
<div class="content">
<div class="title">Valid Usage (Implicit)</div>
<div class="ulist">
<ul>
<li>
<p><a id="VUID-VkCommandBufferInheritanceInfo-sType-sType"></a> <code>sType</code> <strong class="purple">must</strong> be <code>VK_STRUCTURE_TYPE_COMMAND_BUFFER_INHERITANCE_INFO</code></p>
</li>
<li>
<p><a id="VUID-VkCommandBufferInheritanceInfo-pNext-pNext"></a> <code>pNext</code> <strong class="purple">must</strong> be <code>NULL</code> or a pointer to a valid instance of <a href="#VkCommandBufferInheritanceConditionalRenderingInfoEXT">VkCommandBufferInheritanceConditionalRenderingInfoEXT</a></p>
</li>
<li>
<p><a id="VUID-VkCommandBufferInheritanceInfo-commonparent"></a> Both of <code>framebuffer</code>, and <code>renderPass</code> that are valid handles <strong class="purple">must</strong> have been created, allocated, or retrieved from the same <code>VkDevice</code></p>
</li>
</ul>
</div>
</div>
</div>
</div>
<div class="sect3">
<h4 id="_see_also_411">See Also</h4>
<div class="paragraph">
<p><code>VkBool32</code>, <a href="#VkCommandBufferBeginInfo">VkCommandBufferBeginInfo</a>, <a href="#VkFramebuffer">VkFramebuffer</a>, <a href="#VkQueryControlFlags">VkQueryControlFlags</a>, <a href="#VkQueryPipelineStatisticFlags">VkQueryPipelineStatisticFlags</a>, <a href="#VkRenderPass">VkRenderPass</a>, <a href="#VkStructureType">VkStructureType</a></p>
</div>
</div>
<div class="sect3">
<h4 id="_document_notes_411">Document Notes</h4>
<div class="paragraph">
<p>For more information, see the Vulkan Specification at URL</p>
</div>
<div class="paragraph">
<p><a href="https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VkCommandBufferInheritanceInfo" class="bare">https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VkCommandBufferInheritanceInfo</a></p>
</div>
<div class="paragraph">
<p>This page is extracted from the Vulkan Specification.
Fixes and changes should be made to the Specification, not directly.</p>
</div>
<div style="page-break-after: always;"></div>
</div>
</div>
<div class="sect2">
<h3 id="_vkcommandpoolcreateinfo3">VkCommandPoolCreateInfo(3)</h3>
<div class="sect3">
<h4 id="_name_412">Name</h4>
<div class="paragraph">
<p>VkCommandPoolCreateInfo - Structure specifying parameters of a newly created command pool</p>
</div>
</div>
<div class="sect3">
<h4 id="_c_specification_412">C Specification</h4>
<div class="paragraph">
<p>The <code>VkCommandPoolCreateInfo</code> structure is defined as:</p>
</div>
<div id="VkCommandPoolCreateInfo" class="listingblock">
<div class="content">
<pre class="highlight"><code class="language-c++" data-lang="c++">typedef struct VkCommandPoolCreateInfo {
    VkStructureType             sType;
    const void*                 pNext;
    VkCommandPoolCreateFlags    flags;
    uint32_t                    queueFamilyIndex;
} VkCommandPoolCreateInfo;</code></pre>
</div>
</div>
</div>
<div class="sect3">
<h4 id="_members_49">Members</h4>
<div class="ulist">
<ul>
<li>
<p><code>sType</code> is the type of this structure.</p>
</li>
<li>
<p><code>pNext</code> is <code>NULL</code> or a pointer to an extension-specific structure.</p>
</li>
<li>
<p><code>flags</code> is a bitmask of <a href="#VkCommandPoolCreateFlagBits">VkCommandPoolCreateFlagBits</a> indicating
usage behavior for the pool and command buffers allocated from it.</p>
</li>
<li>
<p><code>queueFamilyIndex</code> designates a queue family as described in section
<a href="vkspec.html#devsandqueues-queueprops">Queue Family Properties</a>.
All command buffers allocated from this command pool <strong class="purple">must</strong> be submitted
on queues from the same queue family.</p>
</li>
</ul>
</div>
</div>
<div class="sect3">
<h4 id="_description_412">Description</h4>
<div class="sidebarblock">
<div class="content">
<div class="title">Valid Usage (Implicit)</div>
<div class="ulist">
<ul>
<li>
<p><a id="VUID-VkCommandPoolCreateInfo-sType-sType"></a> <code>sType</code> <strong class="purple">must</strong> be <code>VK_STRUCTURE_TYPE_COMMAND_POOL_CREATE_INFO</code></p>
</li>
<li>
<p><a id="VUID-VkCommandPoolCreateInfo-pNext-pNext"></a> <code>pNext</code> <strong class="purple">must</strong> be <code>NULL</code></p>
</li>
<li>
<p><a id="VUID-VkCommandPoolCreateInfo-flags-parameter"></a> <code>flags</code> <strong class="purple">must</strong> be a valid combination of <a href="#VkCommandPoolCreateFlagBits">VkCommandPoolCreateFlagBits</a> values</p>
</li>
</ul>
</div>
</div>
</div>
</div>
<div class="sect3">
<h4 id="_see_also_412">See Also</h4>
<div class="paragraph">
<p><a href="#VkCommandPoolCreateFlags">VkCommandPoolCreateFlags</a>, <a href="#VkStructureType">VkStructureType</a>, <a href="#vkCreateCommandPool">vkCreateCommandPool</a></p>
</div>
</div>
<div class="sect3">
<h4 id="_document_notes_412">Document Notes</h4>
<div class="paragraph">
<p>For more information, see the Vulkan Specification at URL</p>
</div>
<div class="paragraph">
<p><a href="https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VkCommandPoolCreateInfo" class="bare">https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VkCommandPoolCreateInfo</a></p>
</div>
<div class="paragraph">
<p>This page is extracted from the Vulkan Specification.
Fixes and changes should be made to the Specification, not directly.</p>
</div>
<div style="page-break-after: always;"></div>
</div>
</div>
<div class="sect2">
<h3 id="_vkcomponentmapping3">VkComponentMapping(3)</h3>
<div class="sect3">
<h4 id="_name_413">Name</h4>
<div class="paragraph">
<p>VkComponentMapping - Structure specifying a color component mapping</p>
</div>
</div>
<div class="sect3">
<h4 id="_c_specification_413">C Specification</h4>
<div class="paragraph">
<p>The <code>VkComponentMapping</code> structure is defined as:</p>
</div>
<div id="VkComponentMapping" class="listingblock">
<div class="content">
<pre class="highlight"><code class="language-c++" data-lang="c++">typedef struct VkComponentMapping {
    VkComponentSwizzle    r;
    VkComponentSwizzle    g;
    VkComponentSwizzle    b;
    VkComponentSwizzle    a;
} VkComponentMapping;</code></pre>
</div>
</div>
</div>
<div class="sect3">
<h4 id="_members_50">Members</h4>
<div class="ulist">
<ul>
<li>
<p><code>r</code> is a <a href="#VkComponentSwizzle">VkComponentSwizzle</a> specifying the component value
placed in the R component of the output vector.</p>
</li>
<li>
<p><code>g</code> is a <a href="#VkComponentSwizzle">VkComponentSwizzle</a> specifying the component value
placed in the G component of the output vector.</p>
</li>
<li>
<p><code>b</code> is a <a href="#VkComponentSwizzle">VkComponentSwizzle</a> specifying the component value
placed in the B component of the output vector.</p>
</li>
<li>
<p><code>a</code> is a <a href="#VkComponentSwizzle">VkComponentSwizzle</a> specifying the component value
placed in the A component of the output vector.</p>
</li>
</ul>
</div>
</div>
<div class="sect3">
<h4 id="_description_413">Description</h4>
<div class="sidebarblock">
<div class="content">
<div class="title">Valid Usage (Implicit)</div>
<div class="ulist">
<ul>
<li>
<p><a id="VUID-VkComponentMapping-r-parameter"></a> <code>r</code> <strong class="purple">must</strong> be a valid <a href="#VkComponentSwizzle">VkComponentSwizzle</a> value</p>
</li>
<li>
<p><a id="VUID-VkComponentMapping-g-parameter"></a> <code>g</code> <strong class="purple">must</strong> be a valid <a href="#VkComponentSwizzle">VkComponentSwizzle</a> value</p>
</li>
<li>
<p><a id="VUID-VkComponentMapping-b-parameter"></a> <code>b</code> <strong class="purple">must</strong> be a valid <a href="#VkComponentSwizzle">VkComponentSwizzle</a> value</p>
</li>
<li>
<p><a id="VUID-VkComponentMapping-a-parameter"></a> <code>a</code> <strong class="purple">must</strong> be a valid <a href="#VkComponentSwizzle">VkComponentSwizzle</a> value</p>
</li>
</ul>
</div>
</div>
</div>
</div>
<div class="sect3">
<h4 id="_see_also_413">See Also</h4>
<div class="paragraph">
<p><a href="#VkAndroidHardwareBufferFormatPropertiesANDROID">VkAndroidHardwareBufferFormatPropertiesANDROID</a>, <a href="#VkComponentSwizzle">VkComponentSwizzle</a>, <a href="#VkImageViewCreateInfo">VkImageViewCreateInfo</a>, <a href="#VkSamplerYcbcrConversionCreateInfo">VkSamplerYcbcrConversionCreateInfo</a></p>
</div>
</div>
<div class="sect3">
<h4 id="_document_notes_413">Document Notes</h4>
<div class="paragraph">
<p>For more information, see the Vulkan Specification at URL</p>
</div>
<div class="paragraph">
<p><a href="https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VkComponentMapping" class="bare">https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VkComponentMapping</a></p>
</div>
<div class="paragraph">
<p>This page is extracted from the Vulkan Specification.
Fixes and changes should be made to the Specification, not directly.</p>
</div>
<div style="page-break-after: always;"></div>
</div>
</div>
<div class="sect2">
<h3 id="_vkcomputepipelinecreateinfo3">VkComputePipelineCreateInfo(3)</h3>
<div class="sect3">
<h4 id="_name_414">Name</h4>
<div class="paragraph">
<p>VkComputePipelineCreateInfo - Structure specifying parameters of a newly created compute pipeline</p>
</div>
</div>
<div class="sect3">
<h4 id="_c_specification_414">C Specification</h4>
<div class="paragraph">
<p>The <code>VkComputePipelineCreateInfo</code> structure is defined as:</p>
</div>
<div id="VkComputePipelineCreateInfo" class="listingblock">
<div class="content">
<pre class="highlight"><code class="language-c++" data-lang="c++">typedef struct VkComputePipelineCreateInfo {
    VkStructureType                    sType;
    const void*                        pNext;
    VkPipelineCreateFlags              flags;
    VkPipelineShaderStageCreateInfo    stage;
    VkPipelineLayout                   layout;
    VkPipeline                         basePipelineHandle;
    int32_t                            basePipelineIndex;
} VkComputePipelineCreateInfo;</code></pre>
</div>
</div>
</div>
<div class="sect3">
<h4 id="_members_51">Members</h4>
<div class="ulist">
<ul>
<li>
<p><code>sType</code> is the type of this structure.</p>
</li>
<li>
<p><code>pNext</code> is <code>NULL</code> or a pointer to an extension-specific structure.</p>
</li>
<li>
<p><code>flags</code> is a bitmask of <a href="#VkPipelineCreateFlagBits">VkPipelineCreateFlagBits</a> specifying
how the pipeline will be generated.</p>
</li>
<li>
<p><code>stage</code> is a <a href="#VkPipelineShaderStageCreateInfo">VkPipelineShaderStageCreateInfo</a> describing the
compute shader.</p>
</li>
<li>
<p><code>layout</code> is the description of binding locations used by both the
pipeline and descriptor sets used with the pipeline.</p>
</li>
<li>
<p><code>basePipelineHandle</code> is a pipeline to derive from</p>
</li>
<li>
<p><code>basePipelineIndex</code> is an index into the <code>pCreateInfos</code>
parameter to use as a pipeline to derive from</p>
</li>
</ul>
</div>
</div>
<div class="sect3">
<h4 id="_description_414">Description</h4>
<div class="paragraph">
<p>The parameters <code>basePipelineHandle</code> and <code>basePipelineIndex</code> are
described in more detail in <a href="vkspec.html#pipelines-pipeline-derivatives">Pipeline
Derivatives</a>.</p>
</div>
<div class="paragraph">
<p><code>stage</code> points to a structure of type
<code>VkPipelineShaderStageCreateInfo</code>.</p>
</div>
<div class="sidebarblock">
<div class="content">
<div class="title">Valid Usage</div>
<div class="ulist">
<ul>
<li>
<p><a id="VUID-VkComputePipelineCreateInfo-flags-00697"></a>
If <code>flags</code> contains the <code>VK_PIPELINE_CREATE_DERIVATIVE_BIT</code>
flag, and <code>basePipelineIndex</code> is -1, <code>basePipelineHandle</code> <strong class="purple">must</strong>
be a valid handle to a compute <code>VkPipeline</code></p>
</li>
<li>
<p><a id="VUID-VkComputePipelineCreateInfo-flags-00698"></a>
If <code>flags</code> contains the <code>VK_PIPELINE_CREATE_DERIVATIVE_BIT</code>
flag, and <code>basePipelineHandle</code> is <a href="#VK_NULL_HANDLE">VK_NULL_HANDLE</a>,
<code>basePipelineIndex</code> <strong class="purple">must</strong> be a valid index into the calling
command&#8217;s <code>pCreateInfos</code> parameter</p>
</li>
<li>
<p><a id="VUID-VkComputePipelineCreateInfo-flags-00699"></a>
If <code>flags</code> contains the <code>VK_PIPELINE_CREATE_DERIVATIVE_BIT</code>
flag, and <code>basePipelineIndex</code> is not -1, <code>basePipelineHandle</code>
<strong class="purple">must</strong> be <a href="#VK_NULL_HANDLE">VK_NULL_HANDLE</a></p>
</li>
<li>
<p><a id="VUID-VkComputePipelineCreateInfo-flags-00700"></a>
If <code>flags</code> contains the <code>VK_PIPELINE_CREATE_DERIVATIVE_BIT</code>
flag, and <code>basePipelineHandle</code> is not <a href="#VK_NULL_HANDLE">VK_NULL_HANDLE</a>,
<code>basePipelineIndex</code> <strong class="purple">must</strong> be -1</p>
</li>
<li>
<p><a id="VUID-VkComputePipelineCreateInfo-stage-00701"></a>
The <code>stage</code> member of <code>stage</code> <strong class="purple">must</strong> be
<code>VK_SHADER_STAGE_COMPUTE_BIT</code></p>
</li>
<li>
<p><a id="VUID-VkComputePipelineCreateInfo-stage-00702"></a>
The shader code for the entry point identified by <code>stage</code> and the
rest of the state identified by this structure <strong class="purple">must</strong> adhere to the
pipeline linking rules described in the <a href="vkspec.html#interfaces">Shader Interfaces</a>
chapter</p>
</li>
<li>
<p><a id="VUID-VkComputePipelineCreateInfo-layout-00703"></a>
<code>layout</code> <strong class="purple">must</strong> be
<a href="vkspec.html#descriptorsets-pipelinelayout-consistency">consistent</a> with the layout
of the compute shader specified in <code>stage</code></p>
</li>
<li>
<p><a id="VUID-VkComputePipelineCreateInfo-layout-01687"></a>
The number of resources in <code>layout</code> accessible to the compute shader
stage <strong class="purple">must</strong> be less than or equal to
<code>VkPhysicalDeviceLimits</code>::<code>maxPerStageResources</code></p>
</li>
</ul>
</div>
</div>
</div>
<div class="sidebarblock">
<div class="content">
<div class="title">Valid Usage (Implicit)</div>
<div class="ulist">
<ul>
<li>
<p><a id="VUID-VkComputePipelineCreateInfo-sType-sType"></a> <code>sType</code> <strong class="purple">must</strong> be <code>VK_STRUCTURE_TYPE_COMPUTE_PIPELINE_CREATE_INFO</code></p>
</li>
<li>
<p><a id="VUID-VkComputePipelineCreateInfo-pNext-pNext"></a> <code>pNext</code> <strong class="purple">must</strong> be <code>NULL</code> or a pointer to a valid instance of <a href="#VkPipelineCreationFeedbackCreateInfoEXT">VkPipelineCreationFeedbackCreateInfoEXT</a></p>
</li>
<li>
<p><a id="VUID-VkComputePipelineCreateInfo-flags-parameter"></a> <code>flags</code> <strong class="purple">must</strong> be a valid combination of <a href="#VkPipelineCreateFlagBits">VkPipelineCreateFlagBits</a> values</p>
</li>
<li>
<p><a id="VUID-VkComputePipelineCreateInfo-stage-parameter"></a> <code>stage</code> <strong class="purple">must</strong> be a valid <code>VkPipelineShaderStageCreateInfo</code> structure</p>
</li>
<li>
<p><a id="VUID-VkComputePipelineCreateInfo-layout-parameter"></a> <code>layout</code> <strong class="purple">must</strong> be a valid <code>VkPipelineLayout</code> handle</p>
</li>
<li>
<p><a id="VUID-VkComputePipelineCreateInfo-commonparent"></a> Both of <code>basePipelineHandle</code>, and <code>layout</code> that are valid handles <strong class="purple">must</strong> have been created, allocated, or retrieved from the same <code>VkDevice</code></p>
</li>
</ul>
</div>
</div>
</div>
</div>
<div class="sect3">
<h4 id="_see_also_414">See Also</h4>
<div class="paragraph">
<p><a href="#VkPipeline">VkPipeline</a>, <a href="#VkPipelineCreateFlags">VkPipelineCreateFlags</a>, <a href="#VkPipelineLayout">VkPipelineLayout</a>, <a href="#VkPipelineShaderStageCreateInfo">VkPipelineShaderStageCreateInfo</a>, <a href="#VkStructureType">VkStructureType</a>, <a href="#vkCreateComputePipelines">vkCreateComputePipelines</a></p>
</div>
</div>
<div class="sect3">
<h4 id="_document_notes_414">Document Notes</h4>
<div class="paragraph">
<p>For more information, see the Vulkan Specification at URL</p>
</div>
<div class="paragraph">
<p><a href="https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VkComputePipelineCreateInfo" class="bare">https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VkComputePipelineCreateInfo</a></p>
</div>
<div class="paragraph">
<p>This page is extracted from the Vulkan Specification.
Fixes and changes should be made to the Specification, not directly.</p>
</div>
<div style="page-break-after: always;"></div>
</div>
</div>
<div class="sect2">
<h3 id="_vkconditionalrenderingbegininfoext3">VkConditionalRenderingBeginInfoEXT(3)</h3>
<div class="sect3">
<h4 id="_name_415">Name</h4>
<div class="paragraph">
<p>VkConditionalRenderingBeginInfoEXT - Structure specifying conditional rendering begin info</p>
</div>
</div>
<div class="sect3">
<h4 id="_c_specification_415">C Specification</h4>
<div class="paragraph">
<p>The <code>VkConditionalRenderingBeginInfoEXT</code> structure is defined as:</p>
</div>
<div id="VkConditionalRenderingBeginInfoEXT" class="listingblock">
<div class="content">
<pre class="highlight"><code class="language-c++" data-lang="c++">typedef struct VkConditionalRenderingBeginInfoEXT {
    VkStructureType                   sType;
    const void*                       pNext;
    VkBuffer                          buffer;
    VkDeviceSize                      offset;
    VkConditionalRenderingFlagsEXT    flags;
} VkConditionalRenderingBeginInfoEXT;</code></pre>
</div>
</div>
</div>
<div class="sect3">
<h4 id="_members_52">Members</h4>
<div class="ulist">
<ul>
<li>
<p><code>sType</code> is the type of this structure.</p>
</li>
<li>
<p><code>pNext</code> is <code>NULL</code> or a pointer to an extension-specific structure.</p>
</li>
<li>
<p><code>buffer</code> is a buffer containing the predicate for conditional
rendering.</p>
</li>
<li>
<p><code>offset</code> is the byte offset into <code>buffer</code> where the predicate is
located.</p>
</li>
<li>
<p><code>flags</code> is a bitmask of <a href="#VkConditionalRenderingFlagsEXT">VkConditionalRenderingFlagsEXT</a>
specifying the behavior of conditional rendering.</p>
</li>
</ul>
</div>
</div>
<div class="sect3">
<h4 id="_description_415">Description</h4>
<div class="paragraph">
<p>If the 32-bit value at <code>offset</code> in <code>buffer</code> memory is zero, then the
rendering commands are discarded, otherwise they are executed as normal.
If the value of the predicate in buffer memory changes while conditional
rendering is active, the rendering commands <strong class="purple">may</strong> be discarded in an
implementation-dependent way.
Some implementations may latch the value of the predicate upon beginning
conditional rendering while others may read it before every rendering
command.</p>
</div>
<div class="sidebarblock">
<div class="content">
<div class="title">Valid Usage</div>
<div class="ulist">
<ul>
<li>
<p><a id="VUID-VkConditionalRenderingBeginInfoEXT-buffer-01981"></a>
If <code>buffer</code> is non-sparse then it <strong class="purple">must</strong> be bound completely and
contiguously to a single <code>VkDeviceMemory</code> object</p>
</li>
<li>
<p><a id="VUID-VkConditionalRenderingBeginInfoEXT-buffer-01982"></a>
<code>buffer</code> <strong class="purple">must</strong> have been created with the
<code>VK_BUFFER_USAGE_CONDITIONAL_RENDERING_BIT_EXT</code> bit set</p>
</li>
<li>
<p><a id="VUID-VkConditionalRenderingBeginInfoEXT-offset-01983"></a>
<code>offset</code> <strong class="purple">must</strong> be less than the size of <code>buffer</code> by at least 32
bits.</p>
</li>
<li>
<p><a id="VUID-VkConditionalRenderingBeginInfoEXT-offset-01984"></a>
<code>offset</code> <strong class="purple">must</strong> be a multiple of 4</p>
</li>
</ul>
</div>
</div>
</div>
<div class="sidebarblock">
<div class="content">
<div class="title">Valid Usage (Implicit)</div>
<div class="ulist">
<ul>
<li>
<p><a id="VUID-VkConditionalRenderingBeginInfoEXT-sType-sType"></a> <code>sType</code> <strong class="purple">must</strong> be <code>VK_STRUCTURE_TYPE_CONDITIONAL_RENDERING_BEGIN_INFO_EXT</code></p>
</li>
<li>
<p><a id="VUID-VkConditionalRenderingBeginInfoEXT-pNext-pNext"></a> <code>pNext</code> <strong class="purple">must</strong> be <code>NULL</code></p>
</li>
<li>
<p><a id="VUID-VkConditionalRenderingBeginInfoEXT-buffer-parameter"></a> <code>buffer</code> <strong class="purple">must</strong> be a valid <code>VkBuffer</code> handle</p>
</li>
<li>
<p><a id="VUID-VkConditionalRenderingBeginInfoEXT-flags-parameter"></a> <code>flags</code> <strong class="purple">must</strong> be a valid combination of <a href="#VkConditionalRenderingFlagBitsEXT">VkConditionalRenderingFlagBitsEXT</a> values</p>
</li>
</ul>
</div>
</div>
</div>
</div>
<div class="sect3">
<h4 id="_see_also_415">See Also</h4>
<div class="paragraph">
<p><a href="#VkBuffer">VkBuffer</a>, <a href="#VkConditionalRenderingFlagsEXT">VkConditionalRenderingFlagsEXT</a>, <code>VkDeviceSize</code>, <a href="#VkStructureType">VkStructureType</a>, <a href="#vkCmdBeginConditionalRenderingEXT">vkCmdBeginConditionalRenderingEXT</a></p>
</div>
</div>
<div class="sect3">
<h4 id="_document_notes_415">Document Notes</h4>
<div class="paragraph">
<p>For more information, see the Vulkan Specification at URL</p>
</div>
<div class="paragraph">
<p><a href="https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VkConditionalRenderingBeginInfoEXT" class="bare">https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VkConditionalRenderingBeginInfoEXT</a></p>
</div>
<div class="paragraph">
<p>This page is extracted from the Vulkan Specification.
Fixes and changes should be made to the Specification, not directly.</p>
</div>
<div style="page-break-after: always;"></div>
</div>
</div>
<div class="sect2">
<h3 id="_vkconformanceversionkhr3">VkConformanceVersionKHR(3)</h3>
<div class="sect3">
<h4 id="_name_416">Name</h4>
<div class="paragraph">
<p>VkConformanceVersionKHR - Structure containing the conformance test suite version the implementation is compliant with</p>
</div>
</div>
<div class="sect3">
<h4 id="_c_specification_416">C Specification</h4>
<div class="paragraph">
<p>The conformance test suite version an implementation is compliant with is
described with an instance of the <code>VkConformanceVersionKHR</code> structure.
The <code>VkConformanceVersionKHR</code> structure is defined as:</p>
</div>
<div id="VkConformanceVersionKHR" class="listingblock">
<div class="content">
<pre class="highlight"><code class="language-c++" data-lang="c++">typedef struct VkConformanceVersionKHR {
    uint8_t    major;
    uint8_t    minor;
    uint8_t    subminor;
    uint8_t    patch;
} VkConformanceVersionKHR;</code></pre>
</div>
</div>
</div>
<div class="sect3">
<h4 id="_members_53">Members</h4>
<div class="ulist">
<ul>
<li>
<p><code>major</code> is the major version number of the conformance test suite.</p>
</li>
<li>
<p><code>minor</code> is the minor version number of the conformance test suite.</p>
</li>
<li>
<p><code>subminor</code> is the subminor version number of the conformance test
suite.</p>
</li>
<li>
<p><code>patch</code> is the patch version number of the conformance test suite.</p>
</li>
</ul>
</div>
</div>
<div class="sect3">
<h4 id="_description_416">Description</h4>

</div>
<div class="sect3">
<h4 id="_see_also_416">See Also</h4>
<div class="paragraph">
<p><a href="#VkPhysicalDeviceDriverPropertiesKHR">VkPhysicalDeviceDriverPropertiesKHR</a></p>
</div>
</div>
<div class="sect3">
<h4 id="_document_notes_416">Document Notes</h4>
<div class="paragraph">
<p>For more information, see the Vulkan Specification at URL</p>
</div>
<div class="paragraph">
<p><a href="https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VkConformanceVersionKHR" class="bare">https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VkConformanceVersionKHR</a></p>
</div>
<div class="paragraph">
<p>This page is extracted from the Vulkan Specification.
Fixes and changes should be made to the Specification, not directly.</p>
</div>
<div style="page-break-after: always;"></div>
</div>
</div>
<div class="sect2">
<h3 id="_vkcooperativematrixpropertiesnv3">VkCooperativeMatrixPropertiesNV(3)</h3>
<div class="sect3">
<h4 id="_name_417">Name</h4>
<div class="paragraph">
<p>VkCooperativeMatrixPropertiesNV - Structure specifying cooperative matrix properties</p>
</div>
</div>
<div class="sect3">
<h4 id="_c_specification_417">C Specification</h4>
<div class="paragraph">
<p>Each <code>VkCooperativeMatrixPropertiesNV</code> structure describes a single
supported combination of types for a matrix multiply/add operation
(<code>OpCooperativeMatrixMulAddNV</code>).
The multiply <strong class="purple">can</strong> be described in terms of the following variables and types
(in SPIR-V pseudocode):</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="highlight"><code class="language-c" data-lang="c">    %A is of type OpTypeCooperativeMatrixNV %AType %scope %MSize %KSize
    %B is of type OpTypeCooperativeMatrixNV %BType %scope %KSize %NSize
    %C is of type OpTypeCooperativeMatrixNV %CType %scope %MSize %NSize
    %D is of type OpTypeCooperativeMatrixNV %DType %scope %MSize %NSize

    %D = %A * %B + %C // using OpCooperativeMatrixMulAddNV</code></pre>
</div>
</div>
<div class="paragraph">
<p>A matrix multiply with these dimensions is known as an <em>MxNxK</em> matrix
multiply.</p>
</div>
<div class="paragraph">
<p>The <code>VkCooperativeMatrixPropertiesNV</code> structure is defined as:</p>
</div>
<div id="VkCooperativeMatrixPropertiesNV" class="listingblock">
<div class="content">
<pre class="highlight"><code class="language-c++" data-lang="c++">typedef struct VkCooperativeMatrixPropertiesNV {
    VkStructureType      sType;
    void*                pNext;
    uint32_t             MSize;
    uint32_t             NSize;
    uint32_t             KSize;
    VkComponentTypeNV    AType;
    VkComponentTypeNV    BType;
    VkComponentTypeNV    CType;
    VkComponentTypeNV    DType;
    VkScopeNV            scope;
} VkCooperativeMatrixPropertiesNV;</code></pre>
</div>
</div>
</div>
<div class="sect3">
<h4 id="_members_54">Members</h4>
<div class="ulist">
<ul>
<li>
<p><code>sType</code> is the type of this structure.</p>
</li>
<li>
<p><code>pNext</code> is <code>NULL</code> or a pointer to an extension-specific structure.</p>
</li>
<li>
<p><code>MSize</code> is the number of rows in matrices A, C, and D.</p>
</li>
<li>
<p><code>KSize</code> is the number of columns in matrix A and rows in matrix B.</p>
</li>
<li>
<p><code>NSize</code> is the number of columns in matrices B, C, D.</p>
</li>
<li>
<p><code>AType</code> is the component type of matrix A, of type
<a href="#VkComponentTypeNV">VkComponentTypeNV</a>.</p>
</li>
<li>
<p><code>BType</code> is the component type of matrix B, of type
<a href="#VkComponentTypeNV">VkComponentTypeNV</a>.</p>
</li>
<li>
<p><code>CType</code> is the component type of matrix C, of type
<a href="#VkComponentTypeNV">VkComponentTypeNV</a>.</p>
</li>
<li>
<p><code>DType</code> is the component type of matrix D, of type
<a href="#VkComponentTypeNV">VkComponentTypeNV</a>.</p>
</li>
<li>
<p><code>scope</code> is the scope of all the matrix types, of type
<a href="#VkScopeNV">VkScopeNV</a>.</p>
</li>
</ul>
</div>
</div>
<div class="sect3">
<h4 id="_description_417">Description</h4>
<div class="paragraph">
<p>If some types are preferred over other types (e.g. for performance), they
<strong class="purple">should</strong> appear earlier in the list enumerated by
<a href="#vkGetPhysicalDeviceCooperativeMatrixPropertiesNV">vkGetPhysicalDeviceCooperativeMatrixPropertiesNV</a>.</p>
</div>
<div class="paragraph">
<p>At least one entry in the list <strong class="purple">must</strong> have power of two values for all of
<code>MSize</code>, <code>KSize</code>, and <code>NSize</code>.</p>
</div>
<div class="sidebarblock">
<div class="content">
<div class="title">Valid Usage (Implicit)</div>
<div class="ulist">
<ul>
<li>
<p><a id="VUID-VkCooperativeMatrixPropertiesNV-sType-sType"></a> <code>sType</code> <strong class="purple">must</strong> be <code>VK_STRUCTURE_TYPE_COOPERATIVE_MATRIX_PROPERTIES_NV</code></p>
</li>
<li>
<p><a id="VUID-VkCooperativeMatrixPropertiesNV-pNext-pNext"></a> <code>pNext</code> <strong class="purple">must</strong> be <code>NULL</code></p>
</li>
<li>
<p><a id="VUID-VkCooperativeMatrixPropertiesNV-AType-parameter"></a> <code>AType</code> <strong class="purple">must</strong> be a valid <a href="#VkComponentTypeNV">VkComponentTypeNV</a> value</p>
</li>
<li>
<p><a id="VUID-VkCooperativeMatrixPropertiesNV-BType-parameter"></a> <code>BType</code> <strong class="purple">must</strong> be a valid <a href="#VkComponentTypeNV">VkComponentTypeNV</a> value</p>
</li>
<li>
<p><a id="VUID-VkCooperativeMatrixPropertiesNV-CType-parameter"></a> <code>CType</code> <strong class="purple">must</strong> be a valid <a href="#VkComponentTypeNV">VkComponentTypeNV</a> value</p>
</li>
<li>
<p><a id="VUID-VkCooperativeMatrixPropertiesNV-DType-parameter"></a> <code>DType</code> <strong class="purple">must</strong> be a valid <a href="#VkComponentTypeNV">VkComponentTypeNV</a> value</p>
</li>
<li>
<p><a id="VUID-VkCooperativeMatrixPropertiesNV-scope-parameter"></a> <code>scope</code> <strong class="purple">must</strong> be a valid <a href="#VkScopeNV">VkScopeNV</a> value</p>
</li>
</ul>
</div>
</div>
</div>
</div>
<div class="sect3">
<h4 id="_see_also_417">See Also</h4>
<div class="paragraph">
<p><a href="#VkComponentTypeNV">VkComponentTypeNV</a>, <a href="#VkScopeNV">VkScopeNV</a>, <a href="#VkStructureType">VkStructureType</a>, <a href="#vkGetPhysicalDeviceCooperativeMatrixPropertiesNV">vkGetPhysicalDeviceCooperativeMatrixPropertiesNV</a></p>
</div>
</div>
<div class="sect3">
<h4 id="_document_notes_417">Document Notes</h4>
<div class="paragraph">
<p>For more information, see the Vulkan Specification at URL</p>
</div>
<div class="paragraph">
<p><a href="https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VkCooperativeMatrixPropertiesNV" class="bare">https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VkCooperativeMatrixPropertiesNV</a></p>
</div>
<div class="paragraph">
<p>This page is extracted from the Vulkan Specification.
Fixes and changes should be made to the Specification, not directly.</p>
</div>
<div style="page-break-after: always;"></div>
</div>
</div>
<div class="sect2">
<h3 id="_vkcopydescriptorset3">VkCopyDescriptorSet(3)</h3>
<div class="sect3">
<h4 id="_name_418">Name</h4>
<div class="paragraph">
<p>VkCopyDescriptorSet - Structure specifying a copy descriptor set operation</p>
</div>
</div>
<div class="sect3">
<h4 id="_c_specification_418">C Specification</h4>
<div class="paragraph">
<p>The <code>VkCopyDescriptorSet</code> structure is defined as:</p>
</div>
<div id="VkCopyDescriptorSet" class="listingblock">
<div class="content">
<pre class="highlight"><code class="language-c++" data-lang="c++">typedef struct VkCopyDescriptorSet {
    VkStructureType    sType;
    const void*        pNext;
    VkDescriptorSet    srcSet;
    uint32_t           srcBinding;
    uint32_t           srcArrayElement;
    VkDescriptorSet    dstSet;
    uint32_t           dstBinding;
    uint32_t           dstArrayElement;
    uint32_t           descriptorCount;
} VkCopyDescriptorSet;</code></pre>
</div>
</div>
</div>
<div class="sect3">
<h4 id="_members_55">Members</h4>
<div class="ulist">
<ul>
<li>
<p><code>sType</code> is the type of this structure.</p>
</li>
<li>
<p><code>pNext</code> is <code>NULL</code> or a pointer to an extension-specific structure.</p>
</li>
<li>
<p><code>srcSet</code>, <code>srcBinding</code>, and <code>srcArrayElement</code> are the source
set, binding, and array element, respectively.
If the descriptor binding identified by <code>srcSet</code> and
<code>srcBinding</code> has a descriptor type of
<code>VK_DESCRIPTOR_TYPE_INLINE_UNIFORM_BLOCK_EXT</code> then
<code>srcArrayElement</code> specifies the starting byte offset within the
binding to copy from.</p>
</li>
<li>
<p><code>dstSet</code>, <code>dstBinding</code>, and <code>dstArrayElement</code> are the
destination set, binding, and array element, respectively.
If the descriptor binding identified by <code>dstSet</code> and
<code>dstBinding</code> has a descriptor type of
<code>VK_DESCRIPTOR_TYPE_INLINE_UNIFORM_BLOCK_EXT</code> then
<code>dstArrayElement</code> specifies the starting byte offset within the
binding to copy to.</p>
</li>
<li>
<p><code>descriptorCount</code> is the number of descriptors to copy from the
source to destination.
If <code>descriptorCount</code> is greater than the number of remaining array
elements in the source or destination binding, those affect consecutive
bindings in a manner similar to <a href="#VkWriteDescriptorSet">VkWriteDescriptorSet</a> above.
If the descriptor binding identified by <code>srcSet</code> and
<code>srcBinding</code> has a descriptor type of
<code>VK_DESCRIPTOR_TYPE_INLINE_UNIFORM_BLOCK_EXT</code> then
<code>descriptorCount</code> specifies the number of bytes to copy and the
remaining array elements in the source or destination binding refer to
the remaining number of bytes in those.</p>
</li>
</ul>
</div>
</div>
<div class="sect3">
<h4 id="_description_418">Description</h4>
<div class="sidebarblock">
<div class="content">
<div class="title">Valid Usage</div>
<div class="ulist">
<ul>
<li>
<p><a id="VUID-VkCopyDescriptorSet-srcBinding-00345"></a>
<code>srcBinding</code> <strong class="purple">must</strong> be a valid binding within <code>srcSet</code></p>
</li>
<li>
<p><a id="VUID-VkCopyDescriptorSet-srcArrayElement-00346"></a>
The sum of <code>srcArrayElement</code> and <code>descriptorCount</code> <strong class="purple">must</strong> be less
than or equal to the number of array elements in the descriptor set
binding specified by <code>srcBinding</code>, and all applicable consecutive
bindings, as described by <a href="vkspec.html#descriptorsets-updates-consecutive" class="bare">html/vkspec.html#descriptorsets-updates-consecutive</a></p>
</li>
<li>
<p><a id="VUID-VkCopyDescriptorSet-dstBinding-00347"></a>
<code>dstBinding</code> <strong class="purple">must</strong> be a valid binding within <code>dstSet</code></p>
</li>
<li>
<p><a id="VUID-VkCopyDescriptorSet-dstArrayElement-00348"></a>
The sum of <code>dstArrayElement</code> and <code>descriptorCount</code> <strong class="purple">must</strong> be less
than or equal to the number of array elements in the descriptor set
binding specified by <code>dstBinding</code>, and all applicable consecutive
bindings, as described by <a href="vkspec.html#descriptorsets-updates-consecutive" class="bare">html/vkspec.html#descriptorsets-updates-consecutive</a></p>
</li>
<li>
<p><a id="VUID-VkCopyDescriptorSet-dstBinding-02632"></a>
The type of <code>dstBinding</code> within <code>dstSet</code> <strong class="purple">must</strong> be equal to the
type of <code>srcBinding</code> within <code>srcSet</code></p>
</li>
<li>
<p><a id="VUID-VkCopyDescriptorSet-srcSet-00349"></a>
If <code>srcSet</code> is equal to <code>dstSet</code>, then the source and
destination ranges of descriptors <strong class="purple">must</strong> not overlap, where the ranges
<strong class="purple">may</strong> include array elements from consecutive bindings as described by
<a href="vkspec.html#descriptorsets-updates-consecutive" class="bare">html/vkspec.html#descriptorsets-updates-consecutive</a></p>
</li>
<li>
<p><a id="VUID-VkCopyDescriptorSet-srcBinding-02223"></a>
If the descriptor type of the descriptor set binding specified by
<code>srcBinding</code> is <code>VK_DESCRIPTOR_TYPE_INLINE_UNIFORM_BLOCK_EXT</code>,
<code>srcArrayElement</code> <strong class="purple">must</strong> be an integer multiple of <code>4</code></p>
</li>
<li>
<p><a id="VUID-VkCopyDescriptorSet-dstBinding-02224"></a>
If the descriptor type of the descriptor set binding specified by
<code>dstBinding</code> is <code>VK_DESCRIPTOR_TYPE_INLINE_UNIFORM_BLOCK_EXT</code>,
<code>dstArrayElement</code> <strong class="purple">must</strong> be an integer multiple of <code>4</code></p>
</li>
<li>
<p><a id="VUID-VkCopyDescriptorSet-srcBinding-02225"></a>
If the descriptor type of the descriptor set binding specified by either
<code>srcBinding</code> or <code>dstBinding</code> is
<code>VK_DESCRIPTOR_TYPE_INLINE_UNIFORM_BLOCK_EXT</code>, <code>descriptorCount</code>
<strong class="purple">must</strong> be an integer multiple of <code>4</code></p>
</li>
<li>
<p><a id="VUID-VkCopyDescriptorSet-srcSet-01918"></a>
If <code>srcSet</code>&#8217;s layout was created with the
<code>VK_DESCRIPTOR_SET_LAYOUT_CREATE_UPDATE_AFTER_BIND_POOL_BIT_EXT</code>
flag set, then <code>dstSet</code>&#8217;s layout <strong class="purple">must</strong> also have been created with
the <code>VK_DESCRIPTOR_SET_LAYOUT_CREATE_UPDATE_AFTER_BIND_POOL_BIT_EXT</code>
flag set</p>
</li>
<li>
<p><a id="VUID-VkCopyDescriptorSet-srcSet-01919"></a>
If <code>srcSet</code>&#8217;s layout was created without the
<code>VK_DESCRIPTOR_SET_LAYOUT_CREATE_UPDATE_AFTER_BIND_POOL_BIT_EXT</code>
flag set, then <code>dstSet</code>&#8217;s layout <strong class="purple">must</strong> also have been created
without the
<code>VK_DESCRIPTOR_SET_LAYOUT_CREATE_UPDATE_AFTER_BIND_POOL_BIT_EXT</code>
flag set</p>
</li>
<li>
<p><a id="VUID-VkCopyDescriptorSet-srcSet-01920"></a>
If the descriptor pool from which <code>srcSet</code> was allocated was created
with the <code>VK_DESCRIPTOR_POOL_CREATE_UPDATE_AFTER_BIND_BIT_EXT</code> flag
set, then the descriptor pool from which <code>dstSet</code> was allocated
<strong class="purple">must</strong> also have been created with the
<code>VK_DESCRIPTOR_POOL_CREATE_UPDATE_AFTER_BIND_BIT_EXT</code> flag set</p>
</li>
<li>
<p><a id="VUID-VkCopyDescriptorSet-srcSet-01921"></a>
If the descriptor pool from which <code>srcSet</code> was allocated was created
without the <code>VK_DESCRIPTOR_POOL_CREATE_UPDATE_AFTER_BIND_BIT_EXT</code>
flag set, then the descriptor pool from which <code>dstSet</code> was allocated
<strong class="purple">must</strong> also have been created without the
<code>VK_DESCRIPTOR_POOL_CREATE_UPDATE_AFTER_BIND_BIT_EXT</code> flag set</p>
</li>
</ul>
</div>
</div>
</div>
<div class="sidebarblock">
<div class="content">
<div class="title">Valid Usage (Implicit)</div>
<div class="ulist">
<ul>
<li>
<p><a id="VUID-VkCopyDescriptorSet-sType-sType"></a> <code>sType</code> <strong class="purple">must</strong> be <code>VK_STRUCTURE_TYPE_COPY_DESCRIPTOR_SET</code></p>
</li>
<li>
<p><a id="VUID-VkCopyDescriptorSet-pNext-pNext"></a> <code>pNext</code> <strong class="purple">must</strong> be <code>NULL</code></p>
</li>
<li>
<p><a id="VUID-VkCopyDescriptorSet-srcSet-parameter"></a> <code>srcSet</code> <strong class="purple">must</strong> be a valid <code>VkDescriptorSet</code> handle</p>
</li>
<li>
<p><a id="VUID-VkCopyDescriptorSet-dstSet-parameter"></a> <code>dstSet</code> <strong class="purple">must</strong> be a valid <code>VkDescriptorSet</code> handle</p>
</li>
<li>
<p><a id="VUID-VkCopyDescriptorSet-commonparent"></a> Both of <code>dstSet</code>, and <code>srcSet</code> <strong class="purple">must</strong> have been created, allocated, or retrieved from the same <code>VkDevice</code></p>
</li>
</ul>
</div>
</div>
</div>
</div>
<div class="sect3">
<h4 id="_see_also_418">See Also</h4>
<div class="paragraph">
<p><a href="#VkDescriptorSet">VkDescriptorSet</a>, <a href="#VkStructureType">VkStructureType</a>, <a href="#vkUpdateDescriptorSets">vkUpdateDescriptorSets</a></p>
</div>
</div>
<div class="sect3">
<h4 id="_document_notes_418">Document Notes</h4>
<div class="paragraph">
<p>For more information, see the Vulkan Specification at URL</p>
</div>
<div class="paragraph">
<p><a href="https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VkCopyDescriptorSet" class="bare">https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VkCopyDescriptorSet</a></p>
</div>
<div class="paragraph">
<p>This page is extracted from the Vulkan Specification.
Fixes and changes should be made to the Specification, not directly.</p>
</div>
<div style="page-break-after: always;"></div>
</div>
</div>
<div class="sect2">
<h3 id="_vkd3d12fencesubmitinfokhr3">VkD3D12FenceSubmitInfoKHR(3)</h3>
<div class="sect3">
<h4 id="_name_419">Name</h4>
<div class="paragraph">
<p>VkD3D12FenceSubmitInfoKHR - Structure specifying values for Direct3D 12 fence-backed semaphores</p>
</div>
</div>
<div class="sect3">
<h4 id="_c_specification_419">C Specification</h4>
<div class="paragraph">
<p>To specify the values to use when waiting for and signaling semaphores whose
<a href="vkspec.html#synchronization-semaphores-importing">current payload</a> refers to a
Direct3D 12 fence, add the <a href="#VkD3D12FenceSubmitInfoKHR">VkD3D12FenceSubmitInfoKHR</a> structure to the
<code>pNext</code> chain of the <a href="#VkSubmitInfo">VkSubmitInfo</a> structure.
The <code>VkD3D12FenceSubmitInfoKHR</code> structure is defined as:</p>
</div>
<div id="VkD3D12FenceSubmitInfoKHR" class="listingblock">
<div class="content">
<pre class="highlight"><code class="language-c++" data-lang="c++">typedef struct VkD3D12FenceSubmitInfoKHR {
    VkStructureType    sType;
    const void*        pNext;
    uint32_t           waitSemaphoreValuesCount;
    const uint64_t*    pWaitSemaphoreValues;
    uint32_t           signalSemaphoreValuesCount;
    const uint64_t*    pSignalSemaphoreValues;
} VkD3D12FenceSubmitInfoKHR;</code></pre>
</div>
</div>
</div>
<div class="sect3">
<h4 id="_members_56">Members</h4>
<div class="ulist">
<ul>
<li>
<p><code>sType</code> is the type of this structure.</p>
</li>
<li>
<p><code>pNext</code> is <code>NULL</code> or a pointer to an extension-specific structure.</p>
</li>
<li>
<p><code>waitSemaphoreValuesCount</code> is the number of semaphore wait values
specified in <code>pWaitSemaphoreValues</code>.</p>
</li>
<li>
<p><code>pWaitSemaphoreValues</code> is an array of length
<code>waitSemaphoreValuesCount</code> containing values for the corresponding
semaphores in <a href="#VkSubmitInfo">VkSubmitInfo</a>::<code>pWaitSemaphores</code> to wait for.</p>
</li>
<li>
<p><code>signalSemaphoreValuesCount</code> is the number of semaphore signal
values specified in <code>pSignalSemaphoreValues</code>.</p>
</li>
<li>
<p><code>pSignalSemaphoreValues</code> is an array of length
<code>signalSemaphoreValuesCount</code> containing values for the corresponding
semaphores in <a href="#VkSubmitInfo">VkSubmitInfo</a>::<code>pSignalSemaphores</code> to set when
signaled.</p>
</li>
</ul>
</div>
</div>
<div class="sect3">
<h4 id="_description_419">Description</h4>
<div class="paragraph">
<p>If the semaphore in <a href="#VkSubmitInfo">VkSubmitInfo</a>::<code>pWaitSemaphores</code> or
<a href="#VkSubmitInfo">VkSubmitInfo</a>::<code>pSignalSemaphores</code> corresponding to an entry in
<code>pWaitSemaphoreValues</code> or <code>pSignalSemaphoreValues</code> respectively does
not currently have a <a href="vkspec.html#synchronization-semaphores-payloads">payload</a>
referring to a Direct3D 12 fence, the implementation <strong class="purple">must</strong> ignore the value
in the <code>pWaitSemaphoreValues</code> or <code>pSignalSemaphoreValues</code> entry.</p>
</div>
<div class="sidebarblock">
<div class="content">
<div class="title">Valid Usage</div>
<div class="ulist">
<ul>
<li>
<p><a id="VUID-VkD3D12FenceSubmitInfoKHR-waitSemaphoreValuesCount-00079"></a>
<code>waitSemaphoreValuesCount</code> <strong class="purple">must</strong> be the same value as
<code>VkSubmitInfo</code>::<code>waitSemaphoreCount</code>, where <code>VkSubmitInfo</code>
is in the <code>pNext</code> chain of this <code>VkD3D12FenceSubmitInfoKHR</code>
structure.</p>
</li>
<li>
<p><a id="VUID-VkD3D12FenceSubmitInfoKHR-signalSemaphoreValuesCount-00080"></a>
<code>signalSemaphoreValuesCount</code> <strong class="purple">must</strong> be the same value as
<code>VkSubmitInfo</code>::<code>signalSemaphoreCount</code>, where <code>VkSubmitInfo</code>
is in the <code>pNext</code> chain of this <code>VkD3D12FenceSubmitInfoKHR</code>
structure.</p>
</li>
</ul>
</div>
</div>
</div>
<div class="sidebarblock">
<div class="content">
<div class="title">Valid Usage (Implicit)</div>
<div class="ulist">
<ul>
<li>
<p><a id="VUID-VkD3D12FenceSubmitInfoKHR-sType-sType"></a> <code>sType</code> <strong class="purple">must</strong> be <code>VK_STRUCTURE_TYPE_D3D12_FENCE_SUBMIT_INFO_KHR</code></p>
</li>
<li>
<p><a id="VUID-VkD3D12FenceSubmitInfoKHR-pWaitSemaphoreValues-parameter"></a> If <code>waitSemaphoreValuesCount</code> is not <code>0</code>, and <code>pWaitSemaphoreValues</code> is not <code>NULL</code>, <code>pWaitSemaphoreValues</code> <strong class="purple">must</strong> be a valid pointer to an array of <code>waitSemaphoreValuesCount</code> <code>uint64_t</code> values</p>
</li>
<li>
<p><a id="VUID-VkD3D12FenceSubmitInfoKHR-pSignalSemaphoreValues-parameter"></a> If <code>signalSemaphoreValuesCount</code> is not <code>0</code>, and <code>pSignalSemaphoreValues</code> is not <code>NULL</code>, <code>pSignalSemaphoreValues</code> <strong class="purple">must</strong> be a valid pointer to an array of <code>signalSemaphoreValuesCount</code> <code>uint64_t</code> values</p>
</li>
</ul>
</div>
</div>
</div>
</div>
<div class="sect3">
<h4 id="_see_also_419">See Also</h4>
<div class="paragraph">
<p><a href="#VkStructureType">VkStructureType</a></p>
</div>
</div>
<div class="sect3">
<h4 id="_document_notes_419">Document Notes</h4>
<div class="paragraph">
<p>For more information, see the Vulkan Specification at URL</p>
</div>
<div class="paragraph">
<p><a href="https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VkD3D12FenceSubmitInfoKHR" class="bare">https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VkD3D12FenceSubmitInfoKHR</a></p>
</div>
<div class="paragraph">
<p>This page is extracted from the Vulkan Specification.
Fixes and changes should be made to the Specification, not directly.</p>
</div>
<div style="page-break-after: always;"></div>
</div>
</div>
<div class="sect2">
<h3 id="_vkdebugmarkermarkerinfoext3">VkDebugMarkerMarkerInfoEXT(3)</h3>
<div class="sect3">
<h4 id="_name_420">Name</h4>
<div class="paragraph">
<p>VkDebugMarkerMarkerInfoEXT - Specify parameters of a command buffer marker region</p>
</div>
</div>
<div class="sect3">
<h4 id="_c_specification_420">C Specification</h4>
<div class="paragraph">
<p>The <code>VkDebugMarkerMarkerInfoEXT</code> structure is defined as:</p>
</div>
<div id="VkDebugMarkerMarkerInfoEXT" class="listingblock">
<div class="content">
<pre class="highlight"><code class="language-c++" data-lang="c++">typedef struct VkDebugMarkerMarkerInfoEXT {
    VkStructureType    sType;
    const void*        pNext;
    const char*        pMarkerName;
    float              color[4];
} VkDebugMarkerMarkerInfoEXT;</code></pre>
</div>
</div>
</div>
<div class="sect3">
<h4 id="_members_57">Members</h4>
<div class="ulist">
<ul>
<li>
<p><code>sType</code> is the type of this structure.</p>
</li>
<li>
<p><code>pNext</code> is <code>NULL</code> or a pointer to an extension-specific structure.</p>
</li>
<li>
<p><code>pMarkerName</code> is a pointer to a null-terminated UTF-8 string that
contains the name of the marker.</p>
</li>
<li>
<p><code>color</code> is an <strong class="purple">optional</strong> RGBA color value that can be associated with
the marker.
A particular implementation <strong class="purple">may</strong> choose to ignore this color value.
The values contain RGBA values in order, in the range 0.0 to 1.0.
If all elements in <code>color</code> are set to 0.0 then it is ignored.</p>
</li>
</ul>
</div>
</div>
<div class="sect3">
<h4 id="_description_420">Description</h4>
<div class="sidebarblock">
<div class="content">
<div class="title">Valid Usage (Implicit)</div>
<div class="ulist">
<ul>
<li>
<p><a id="VUID-VkDebugMarkerMarkerInfoEXT-sType-sType"></a> <code>sType</code> <strong class="purple">must</strong> be <code>VK_STRUCTURE_TYPE_DEBUG_MARKER_MARKER_INFO_EXT</code></p>
</li>
<li>
<p><a id="VUID-VkDebugMarkerMarkerInfoEXT-pNext-pNext"></a> <code>pNext</code> <strong class="purple">must</strong> be <code>NULL</code></p>
</li>
<li>
<p><a id="VUID-VkDebugMarkerMarkerInfoEXT-pMarkerName-parameter"></a> <code>pMarkerName</code> <strong class="purple">must</strong> be a null-terminated UTF-8 string</p>
</li>
</ul>
</div>
</div>
</div>
</div>
<div class="sect3">
<h4 id="_see_also_420">See Also</h4>
<div class="paragraph">
<p><a href="#VkStructureType">VkStructureType</a>, <a href="#vkCmdDebugMarkerBeginEXT">vkCmdDebugMarkerBeginEXT</a>, <a href="#vkCmdDebugMarkerInsertEXT">vkCmdDebugMarkerInsertEXT</a></p>
</div>
</div>
<div class="sect3">
<h4 id="_document_notes_420">Document Notes</h4>
<div class="paragraph">
<p>For more information, see the Vulkan Specification at URL</p>
</div>
<div class="paragraph">
<p><a href="https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VkDebugMarkerMarkerInfoEXT" class="bare">https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VkDebugMarkerMarkerInfoEXT</a></p>
</div>
<div class="paragraph">
<p>This page is extracted from the Vulkan Specification.
Fixes and changes should be made to the Specification, not directly.</p>
</div>
<div style="page-break-after: always;"></div>
</div>
</div>
<div class="sect2">
<h3 id="_vkdebugmarkerobjectnameinfoext3">VkDebugMarkerObjectNameInfoEXT(3)</h3>
<div class="sect3">
<h4 id="_name_421">Name</h4>
<div class="paragraph">
<p>VkDebugMarkerObjectNameInfoEXT - Specify parameters of a name to give to an object</p>
</div>
</div>
<div class="sect3">
<h4 id="_c_specification_421">C Specification</h4>
<div class="paragraph">
<p>The <code>VkDebugMarkerObjectNameInfoEXT</code> structure is defined as:</p>
</div>
<div id="VkDebugMarkerObjectNameInfoEXT" class="listingblock">
<div class="content">
<pre class="highlight"><code class="language-c++" data-lang="c++">typedef struct VkDebugMarkerObjectNameInfoEXT {
    VkStructureType               sType;
    const void*                   pNext;
    VkDebugReportObjectTypeEXT    objectType;
    uint64_t                      object;
    const char*                   pObjectName;
} VkDebugMarkerObjectNameInfoEXT;</code></pre>
</div>
</div>
</div>
<div class="sect3">
<h4 id="_members_58">Members</h4>
<div class="ulist">
<ul>
<li>
<p><code>sType</code> is the type of this structure.</p>
</li>
<li>
<p><code>pNext</code> is <code>NULL</code> or a pointer to an extension-specific structure.</p>
</li>
<li>
<p><code>objectType</code> is a <a href="#VkDebugReportObjectTypeEXT">VkDebugReportObjectTypeEXT</a> specifying the
type of the object to be named.</p>
</li>
<li>
<p><code>object</code> is the object to be named.</p>
</li>
<li>
<p><code>pObjectName</code> is a null-terminated UTF-8 string specifying the name
to apply to <code>object</code>.</p>
</li>
</ul>
</div>
</div>
<div class="sect3">
<h4 id="_description_421">Description</h4>
<div class="paragraph">
<p>Applications <strong class="purple">may</strong> change the name associated with an object simply by
calling <code>vkDebugMarkerSetObjectNameEXT</code> again with a new string.
To remove a previously set name, <code>pObjectName</code> <strong class="purple">should</strong> be set to an
empty string.</p>
</div>
<div class="sidebarblock">
<div class="content">
<div class="title">Valid Usage</div>
<div class="ulist">
<ul>
<li>
<p><a id="VUID-VkDebugMarkerObjectNameInfoEXT-objectType-01490"></a>
<code>objectType</code> <strong class="purple">must</strong> not be
<code>VK_DEBUG_REPORT_OBJECT_TYPE_UNKNOWN_EXT</code></p>
</li>
<li>
<p><a id="VUID-VkDebugMarkerObjectNameInfoEXT-object-01491"></a>
<code>object</code> <strong class="purple">must</strong> not be <a href="#VK_NULL_HANDLE">VK_NULL_HANDLE</a></p>
</li>
<li>
<p><a id="VUID-VkDebugMarkerObjectNameInfoEXT-object-01492"></a>
<code>object</code> <strong class="purple">must</strong> be a Vulkan object of the type associated with
<code>objectType</code> as defined in <a href="vkspec.html#debug-report-object-types" class="bare">html/vkspec.html#debug-report-object-types</a>.</p>
</li>
</ul>
</div>
</div>
</div>
<div class="sidebarblock">
<div class="content">
<div class="title">Valid Usage (Implicit)</div>
<div class="ulist">
<ul>
<li>
<p><a id="VUID-VkDebugMarkerObjectNameInfoEXT-sType-sType"></a> <code>sType</code> <strong class="purple">must</strong> be <code>VK_STRUCTURE_TYPE_DEBUG_MARKER_OBJECT_NAME_INFO_EXT</code></p>
</li>
<li>
<p><a id="VUID-VkDebugMarkerObjectNameInfoEXT-pNext-pNext"></a> <code>pNext</code> <strong class="purple">must</strong> be <code>NULL</code></p>
</li>
<li>
<p><a id="VUID-VkDebugMarkerObjectNameInfoEXT-objectType-parameter"></a> <code>objectType</code> <strong class="purple">must</strong> be a valid <a href="#VkDebugReportObjectTypeEXT">VkDebugReportObjectTypeEXT</a> value</p>
</li>
<li>
<p><a id="VUID-VkDebugMarkerObjectNameInfoEXT-pObjectName-parameter"></a> <code>pObjectName</code> <strong class="purple">must</strong> be a null-terminated UTF-8 string</p>
</li>
</ul>
</div>
</div>
</div>
</div>
<div class="sect3">
<h4 id="_see_also_421">See Also</h4>
<div class="paragraph">
<p><a href="#VkDebugReportObjectTypeEXT">VkDebugReportObjectTypeEXT</a>, <a href="#VkStructureType">VkStructureType</a>, <a href="#vkDebugMarkerSetObjectNameEXT">vkDebugMarkerSetObjectNameEXT</a></p>
</div>
</div>
<div class="sect3">
<h4 id="_document_notes_421">Document Notes</h4>
<div class="paragraph">
<p>For more information, see the Vulkan Specification at URL</p>
</div>
<div class="paragraph">
<p><a href="https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VkDebugMarkerObjectNameInfoEXT" class="bare">https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VkDebugMarkerObjectNameInfoEXT</a></p>
</div>
<div class="paragraph">
<p>This page is extracted from the Vulkan Specification.
Fixes and changes should be made to the Specification, not directly.</p>
</div>
<div style="page-break-after: always;"></div>
</div>
</div>
<div class="sect2">
<h3 id="_vkdebugmarkerobjecttaginfoext3">VkDebugMarkerObjectTagInfoEXT(3)</h3>
<div class="sect3">
<h4 id="_name_422">Name</h4>
<div class="paragraph">
<p>VkDebugMarkerObjectTagInfoEXT - Specify parameters of a tag to attach to an object</p>
</div>
</div>
<div class="sect3">
<h4 id="_c_specification_422">C Specification</h4>
<div class="paragraph">
<p>The <code>VkDebugMarkerObjectTagInfoEXT</code> structure is defined as:</p>
</div>
<div id="VkDebugMarkerObjectTagInfoEXT" class="listingblock">
<div class="content">
<pre class="highlight"><code class="language-c++" data-lang="c++">typedef struct VkDebugMarkerObjectTagInfoEXT {
    VkStructureType               sType;
    const void*                   pNext;
    VkDebugReportObjectTypeEXT    objectType;
    uint64_t                      object;
    uint64_t                      tagName;
    size_t                        tagSize;
    const void*                   pTag;
} VkDebugMarkerObjectTagInfoEXT;</code></pre>
</div>
</div>
</div>
<div class="sect3">
<h4 id="_members_59">Members</h4>
<div class="ulist">
<ul>
<li>
<p><code>sType</code> is the type of this structure.</p>
</li>
<li>
<p><code>pNext</code> is <code>NULL</code> or a pointer to an extension-specific structure.</p>
</li>
<li>
<p><code>objectType</code> is a <a href="#VkDebugReportObjectTypeEXT">VkDebugReportObjectTypeEXT</a> specifying the
type of the object to be named.</p>
</li>
<li>
<p><code>object</code> is the object to be tagged.</p>
</li>
<li>
<p><code>tagName</code> is a numerical identifier of the tag.</p>
</li>
<li>
<p><code>tagSize</code> is the number of bytes of data to attach to the object.</p>
</li>
<li>
<p><code>pTag</code> is an array of <code>tagSize</code> bytes containing the data to be
associated with the object.</p>
</li>
</ul>
</div>
</div>
<div class="sect3">
<h4 id="_description_422">Description</h4>
<div class="paragraph">
<p>The <code>tagName</code> parameter gives a name or identifier to the type of data
being tagged.
This can be used by debugging layers to easily filter for only data that can
be used by that implementation.</p>
</div>
<div class="sidebarblock">
<div class="content">
<div class="title">Valid Usage</div>
<div class="ulist">
<ul>
<li>
<p><a id="VUID-VkDebugMarkerObjectTagInfoEXT-objectType-01493"></a>
<code>objectType</code> <strong class="purple">must</strong> not be
<code>VK_DEBUG_REPORT_OBJECT_TYPE_UNKNOWN_EXT</code></p>
</li>
<li>
<p><a id="VUID-VkDebugMarkerObjectTagInfoEXT-object-01494"></a>
<code>object</code> <strong class="purple">must</strong> not be <a href="#VK_NULL_HANDLE">VK_NULL_HANDLE</a></p>
</li>
<li>
<p><a id="VUID-VkDebugMarkerObjectTagInfoEXT-object-01495"></a>
<code>object</code> <strong class="purple">must</strong> be a Vulkan object of the type associated with
<code>objectType</code> as defined in <a href="vkspec.html#debug-report-object-types" class="bare">html/vkspec.html#debug-report-object-types</a>.</p>
</li>
</ul>
</div>
</div>
</div>
<div class="sidebarblock">
<div class="content">
<div class="title">Valid Usage (Implicit)</div>
<div class="ulist">
<ul>
<li>
<p><a id="VUID-VkDebugMarkerObjectTagInfoEXT-sType-sType"></a> <code>sType</code> <strong class="purple">must</strong> be <code>VK_STRUCTURE_TYPE_DEBUG_MARKER_OBJECT_TAG_INFO_EXT</code></p>
</li>
<li>
<p><a id="VUID-VkDebugMarkerObjectTagInfoEXT-pNext-pNext"></a> <code>pNext</code> <strong class="purple">must</strong> be <code>NULL</code></p>
</li>
<li>
<p><a id="VUID-VkDebugMarkerObjectTagInfoEXT-objectType-parameter"></a> <code>objectType</code> <strong class="purple">must</strong> be a valid <a href="#VkDebugReportObjectTypeEXT">VkDebugReportObjectTypeEXT</a> value</p>
</li>
<li>
<p><a id="VUID-VkDebugMarkerObjectTagInfoEXT-pTag-parameter"></a> <code>pTag</code> <strong class="purple">must</strong> be a valid pointer to an array of <code>tagSize</code> bytes</p>
</li>
<li>
<p><a id="VUID-VkDebugMarkerObjectTagInfoEXT-tagSize-arraylength"></a> <code>tagSize</code> <strong class="purple">must</strong> be greater than <code>0</code></p>
</li>
</ul>
</div>
</div>
</div>
</div>
<div class="sect3">
<h4 id="_see_also_422">See Also</h4>
<div class="paragraph">
<p><a href="#VkDebugReportObjectTypeEXT">VkDebugReportObjectTypeEXT</a>, <a href="#VkStructureType">VkStructureType</a>, <a href="#vkDebugMarkerSetObjectTagEXT">vkDebugMarkerSetObjectTagEXT</a></p>
</div>
</div>
<div class="sect3">
<h4 id="_document_notes_422">Document Notes</h4>
<div class="paragraph">
<p>For more information, see the Vulkan Specification at URL</p>
</div>
<div class="paragraph">
<p><a href="https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VkDebugMarkerObjectTagInfoEXT" class="bare">https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VkDebugMarkerObjectTagInfoEXT</a></p>
</div>
<div class="paragraph">
<p>This page is extracted from the Vulkan Specification.
Fixes and changes should be made to the Specification, not directly.</p>
</div>
<div style="page-break-after: always;"></div>
</div>
</div>
<div class="sect2">
<h3 id="_vkdebugreportcallbackcreateinfoext3">VkDebugReportCallbackCreateInfoEXT(3)</h3>
<div class="sect3">
<h4 id="_name_423">Name</h4>
<div class="paragraph">
<p>VkDebugReportCallbackCreateInfoEXT - Structure specifying parameters of a newly created debug report callback</p>
</div>
</div>
<div class="sect3">
<h4 id="_c_specification_423">C Specification</h4>
<div class="paragraph">
<p>The definition of <a href="#VkDebugReportCallbackCreateInfoEXT">VkDebugReportCallbackCreateInfoEXT</a> is:</p>
</div>
<div id="VkDebugReportCallbackCreateInfoEXT" class="listingblock">
<div class="content">
<pre class="highlight"><code class="language-c++" data-lang="c++">typedef struct VkDebugReportCallbackCreateInfoEXT {
    VkStructureType                 sType;
    const void*                     pNext;
    VkDebugReportFlagsEXT           flags;
    PFN_vkDebugReportCallbackEXT    pfnCallback;
    void*                           pUserData;
} VkDebugReportCallbackCreateInfoEXT;</code></pre>
</div>
</div>
</div>
<div class="sect3">
<h4 id="_members_60">Members</h4>
<div class="ulist">
<ul>
<li>
<p><code>sType</code> is the type of this structure.</p>
</li>
<li>
<p><code>pNext</code> is <code>NULL</code> or a pointer to an extension-specific structure.</p>
</li>
<li>
<p><code>flags</code> is a bitmask of <a href="#VkDebugReportFlagBitsEXT">VkDebugReportFlagBitsEXT</a> specifying
which event(s) will cause this callback to be called.</p>
</li>
<li>
<p><code>pfnCallback</code> is the application callback function to call.</p>
</li>
<li>
<p><code>pUserData</code> is user data to be passed to the callback.</p>
</li>
</ul>
</div>
</div>
<div class="sect3">
<h4 id="_description_423">Description</h4>
<div class="paragraph">
<p>For each <code>VkDebugReportCallbackEXT</code> that is created the
<code>VkDebugReportCallbackCreateInfoEXT</code>::<code>flags</code> determine when that
<code>VkDebugReportCallbackCreateInfoEXT</code>::<code>pfnCallback</code> is called.
When an event happens, the implementation will do a bitwise AND of the
event&#8217;s <a href="#VkDebugReportFlagBitsEXT">VkDebugReportFlagBitsEXT</a> flags to each
<code>VkDebugReportCallbackEXT</code> object&#8217;s flags.
For each non-zero result the corresponding callback will be called.
The callback will come directly from the component that detected the event,
unless some other layer intercepts the calls for its own purposes (filter
them in a different way, log to a system error log, etc.).</p>
</div>
<div class="paragraph">
<p>An application <strong class="purple">may</strong> receive multiple callbacks if multiple
<code>VkDebugReportCallbackEXT</code> objects were created.
A callback will always be executed in the same thread as the originating
Vulkan call.</p>
</div>
<div class="paragraph">
<p>A callback may be called from multiple threads simultaneously (if the
application is making Vulkan calls from multiple threads).</p>
</div>
<div class="sidebarblock">
<div class="content">
<div class="title">Valid Usage</div>
<div class="ulist">
<ul>
<li>
<p><a id="VUID-VkDebugReportCallbackCreateInfoEXT-pfnCallback-01385"></a>
<code>pfnCallback</code> <strong class="purple">must</strong> be a valid <a href="#PFN_vkDebugReportCallbackEXT">PFN_vkDebugReportCallbackEXT</a></p>
</li>
</ul>
</div>
</div>
</div>
<div class="sidebarblock">
<div class="content">
<div class="title">Valid Usage (Implicit)</div>
<div class="ulist">
<ul>
<li>
<p><a id="VUID-VkDebugReportCallbackCreateInfoEXT-sType-sType"></a> <code>sType</code> <strong class="purple">must</strong> be <code>VK_STRUCTURE_TYPE_DEBUG_REPORT_CALLBACK_CREATE_INFO_EXT</code></p>
</li>
<li>
<p><a id="VUID-VkDebugReportCallbackCreateInfoEXT-flags-parameter"></a> <code>flags</code> <strong class="purple">must</strong> be a valid combination of <a href="#VkDebugReportFlagBitsEXT">VkDebugReportFlagBitsEXT</a> values</p>
</li>
</ul>
</div>
</div>
</div>
</div>
<div class="sect3">
<h4 id="_see_also_423">See Also</h4>
<div class="paragraph">
<p><a href="#PFN_vkDebugReportCallbackEXT">PFN_vkDebugReportCallbackEXT</a>, <a href="#VkDebugReportFlagsEXT">VkDebugReportFlagsEXT</a>, <a href="#VkStructureType">VkStructureType</a>, <a href="#vkCreateDebugReportCallbackEXT">vkCreateDebugReportCallbackEXT</a></p>
</div>
</div>
<div class="sect3">
<h4 id="_document_notes_423">Document Notes</h4>
<div class="paragraph">
<p>For more information, see the Vulkan Specification at URL</p>
</div>
<div class="paragraph">
<p><a href="https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VkDebugReportCallbackCreateInfoEXT" class="bare">https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VkDebugReportCallbackCreateInfoEXT</a></p>
</div>
<div class="paragraph">
<p>This page is extracted from the Vulkan Specification.
Fixes and changes should be made to the Specification, not directly.</p>
</div>
<div style="page-break-after: always;"></div>
</div>
</div>
<div class="sect2">
<h3 id="_vkdebugutilslabelext3">VkDebugUtilsLabelEXT(3)</h3>
<div class="sect3">
<h4 id="_name_424">Name</h4>
<div class="paragraph">
<p>VkDebugUtilsLabelEXT - Specify parameters of a label region</p>
</div>
</div>
<div class="sect3">
<h4 id="_c_specification_424">C Specification</h4>
<div class="paragraph">
<p>The <code>VkDebugUtilsLabelEXT</code> structure is defined as:</p>
</div>
<div id="VkDebugUtilsLabelEXT" class="listingblock">
<div class="content">
<pre class="highlight"><code class="language-c++" data-lang="c++">typedef struct VkDebugUtilsLabelEXT {
    VkStructureType    sType;
    const void*        pNext;
    const char*        pLabelName;
    float              color[4];
} VkDebugUtilsLabelEXT;</code></pre>
</div>
</div>
</div>
<div class="sect3">
<h4 id="_members_61">Members</h4>
<div class="ulist">
<ul>
<li>
<p><code>sType</code> is the type of this structure.</p>
</li>
<li>
<p><code>pNext</code> is <code>NULL</code> or a pointer to an extension-specific structure.</p>
</li>
<li>
<p><code>pLabelName</code> is a pointer to a null-terminated UTF-8 string that
contains the name of the label.</p>
</li>
<li>
<p><code>color</code> is an optional RGBA color value that can be associated with
the label.
A particular implementation <strong class="purple">may</strong> choose to ignore this color value.
The values contain RGBA values in order, in the range 0.0 to 1.0.
If all elements in <code>color</code> are set to 0.0 then it is ignored.</p>
</li>
</ul>
</div>
</div>
<div class="sect3">
<h4 id="_description_424">Description</h4>
<div class="sidebarblock">
<div class="content">
<div class="title">Valid Usage (Implicit)</div>
<div class="ulist">
<ul>
<li>
<p><a id="VUID-VkDebugUtilsLabelEXT-sType-sType"></a> <code>sType</code> <strong class="purple">must</strong> be <code>VK_STRUCTURE_TYPE_DEBUG_UTILS_LABEL_EXT</code></p>
</li>
<li>
<p><a id="VUID-VkDebugUtilsLabelEXT-pNext-pNext"></a> <code>pNext</code> <strong class="purple">must</strong> be <code>NULL</code></p>
</li>
<li>
<p><a id="VUID-VkDebugUtilsLabelEXT-pLabelName-parameter"></a> <code>pLabelName</code> <strong class="purple">must</strong> be a null-terminated UTF-8 string</p>
</li>
</ul>
</div>
</div>
</div>
</div>
<div class="sect3">
<h4 id="_see_also_424">See Also</h4>
<div class="paragraph">
<p><a href="#VkDebugUtilsMessengerCallbackDataEXT">VkDebugUtilsMessengerCallbackDataEXT</a>, <a href="#VkStructureType">VkStructureType</a>, <a href="#vkCmdBeginDebugUtilsLabelEXT">vkCmdBeginDebugUtilsLabelEXT</a>, <a href="#vkCmdInsertDebugUtilsLabelEXT">vkCmdInsertDebugUtilsLabelEXT</a>, <a href="#vkQueueBeginDebugUtilsLabelEXT">vkQueueBeginDebugUtilsLabelEXT</a>, <a href="#vkQueueInsertDebugUtilsLabelEXT">vkQueueInsertDebugUtilsLabelEXT</a></p>
</div>
</div>
<div class="sect3">
<h4 id="_document_notes_424">Document Notes</h4>
<div class="paragraph">
<p>For more information, see the Vulkan Specification at URL</p>
</div>
<div class="paragraph">
<p><a href="https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VkDebugUtilsLabelEXT" class="bare">https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VkDebugUtilsLabelEXT</a></p>
</div>
<div class="paragraph">
<p>This page is extracted from the Vulkan Specification.
Fixes and changes should be made to the Specification, not directly.</p>
</div>
<div style="page-break-after: always;"></div>
</div>
</div>
<div class="sect2">
<h3 id="_vkdebugutilsmessengercallbackdataext3">VkDebugUtilsMessengerCallbackDataEXT(3)</h3>
<div class="sect3">
<h4 id="_name_425">Name</h4>
<div class="paragraph">
<p>VkDebugUtilsMessengerCallbackDataEXT - Structure specifying parameters returned to the callback</p>
</div>
</div>
<div class="sect3">
<h4 id="_c_specification_425">C Specification</h4>
<div class="paragraph">
<p>The definition of <code>VkDebugUtilsMessengerCallbackDataEXT</code> is:</p>
</div>
<div id="VkDebugUtilsMessengerCallbackDataEXT" class="listingblock">
<div class="content">
<pre class="highlight"><code class="language-c++" data-lang="c++">typedef struct VkDebugUtilsMessengerCallbackDataEXT {
    VkStructureType                              sType;
    const void*                                  pNext;
    VkDebugUtilsMessengerCallbackDataFlagsEXT    flags;
    const char*                                  pMessageIdName;
    int32_t                                      messageIdNumber;
    const char*                                  pMessage;
    uint32_t                                     queueLabelCount;
    const VkDebugUtilsLabelEXT*                  pQueueLabels;
    uint32_t                                     cmdBufLabelCount;
    const VkDebugUtilsLabelEXT*                  pCmdBufLabels;
    uint32_t                                     objectCount;
    const VkDebugUtilsObjectNameInfoEXT*         pObjects;
} VkDebugUtilsMessengerCallbackDataEXT;</code></pre>
</div>
</div>
</div>
<div class="sect3">
<h4 id="_members_62">Members</h4>
<div class="ulist">
<ul>
<li>
<p><code>sType</code> is the type of this structure.</p>
</li>
<li>
<p><code>pNext</code> is <code>NULL</code> or a pointer to an extension-specific structure.</p>
</li>
<li>
<p><code>flags</code> is 0 and reserved for future use.</p>
</li>
<li>
<p><code>pMessageIdName</code> is a null-terminated string that identifies the
particular message ID that is associated with the provided message.
If the message corresponds to a validation layer message, then this
string may contain the portion of the Vulkan specification that is
believed to have been violated.</p>
</li>
<li>
<p><code>messageIdNumber</code> is the ID number of the triggering message.
If the message corresponds to a validation layer message, then this
number is related to the internal number associated with the message
being triggered.</p>
</li>
<li>
<p><code>pMessage</code> is a null-terminated string detailing the trigger
conditions.</p>
</li>
<li>
<p><code>queueLabelCount</code> is a count of items contained in the
<code>pQueueLabels</code> array.</p>
</li>
<li>
<p><code>pQueueLabels</code> is NULL or a pointer to an array of
<a href="#VkDebugUtilsLabelEXT">VkDebugUtilsLabelEXT</a> active in the current <code>VkQueue</code> at the
time the callback was triggered.
Refer to <a href="vkspec.html#debugging-queue-labels">Queue Labels</a> for more information.</p>
</li>
<li>
<p><code>cmdBufLabelCount</code> is a count of items contained in the
<code>pCmdBufLabels</code> array.</p>
</li>
<li>
<p><code>pCmdBufLabels</code> is NULL or a pointer to an array of
<a href="#VkDebugUtilsLabelEXT">VkDebugUtilsLabelEXT</a> active in the current <code>VkCommandBuffer</code>
at the time the callback was triggered.
Refer to <a href="vkspec.html#debugging-command-buffer-labels">Command Buffer Labels</a> for
more information.</p>
</li>
<li>
<p><code>objectCount</code> is a count of items contained in the <code>pObjects</code>
array.</p>
</li>
<li>
<p><code>pObjects</code> is a pointer to an array of
<a href="#VkDebugUtilsObjectNameInfoEXT">VkDebugUtilsObjectNameInfoEXT</a> objects related to the detected
issue.
The array is roughly in order or importance, but the 0th element is
always guaranteed to be the most important object for this message.</p>
</li>
</ul>
</div>
</div>
<div class="sect3">
<h4 id="_description_425">Description</h4>
<div class="admonitionblock note">
<table>
<tr>
<td class="icon">
<i class="fa icon-note" title="Note"></i>
</td>
<td class="content">
<div class="title">Note</div>
<div class="paragraph">
<p>This structure should only be considered valid during the lifetime of the
triggered callback.</p>
</div>
</td>
</tr>
</table>
</div>
<div class="paragraph">
<p>Since adding queue and command buffer labels behaves like pushing and
popping onto a stack, the order of both <code>pQueueLabels</code> and
<code>pCmdBufLabels</code> is based on the order the labels were defined.
The result is that the first label in either <code>pQueueLabels</code> or
<code>pCmdBufLabels</code> will be the first defined (and therefore the oldest)
while the last label in each list will be the most recent.</p>
</div>
<div class="admonitionblock note">
<table>
<tr>
<td class="icon">
<i class="fa icon-note" title="Note"></i>
</td>
<td class="content">
<div class="title">Note</div>
<div class="paragraph">
<p><code>pQueueLabels</code> will only be non-NULL if one of the objects in
<code>pObjects</code> can be related directly to a defined <code>VkQueue</code> which has
had one or more labels associated with it.</p>
</div>
<div class="paragraph">
<p>Likewise, <code>pCmdBufLabels</code> will only be non-NULL if one of the objects in
<code>pObjects</code> can be related directly to a defined <code>VkCommandBuffer</code>
which has had one or more labels associated with it.
Additionally, while command buffer labels allow for beginning and ending
across different command buffers, the debug messaging framework <strong class="purple">cannot</strong>
guarantee that labels in <code>pCmdBufLables</code> will contain those defined
outside of the associated command buffer.
This is partially due to the fact that the association of one command buffer
with another may not have been defined at the time the debug message is
triggered.</p>
</div>
</td>
</tr>
</table>
</div>
<div class="sidebarblock">
<div class="content">
<div class="title">Valid Usage (Implicit)</div>
<div class="ulist">
<ul>
<li>
<p><a id="VUID-VkDebugUtilsMessengerCallbackDataEXT-sType-sType"></a> <code>sType</code> <strong class="purple">must</strong> be <code>VK_STRUCTURE_TYPE_DEBUG_UTILS_MESSENGER_CALLBACK_DATA_EXT</code></p>
</li>
<li>
<p><a id="VUID-VkDebugUtilsMessengerCallbackDataEXT-pNext-pNext"></a> <code>pNext</code> <strong class="purple">must</strong> be <code>NULL</code></p>
</li>
<li>
<p><a id="VUID-VkDebugUtilsMessengerCallbackDataEXT-flags-zerobitmask"></a> <code>flags</code> <strong class="purple">must</strong> be <code>0</code></p>
</li>
<li>
<p><a id="VUID-VkDebugUtilsMessengerCallbackDataEXT-pMessageIdName-parameter"></a> If <code>pMessageIdName</code> is not <code>NULL</code>, <code>pMessageIdName</code> <strong class="purple">must</strong> be a null-terminated UTF-8 string</p>
</li>
<li>
<p><a id="VUID-VkDebugUtilsMessengerCallbackDataEXT-pMessage-parameter"></a> <code>pMessage</code> <strong class="purple">must</strong> be a null-terminated UTF-8 string</p>
</li>
<li>
<p><a id="VUID-VkDebugUtilsMessengerCallbackDataEXT-pQueueLabels-parameter"></a> If <code>queueLabelCount</code> is not <code>0</code>, <code>pQueueLabels</code> <strong class="purple">must</strong> be a valid pointer to an array of <code>queueLabelCount</code> valid <code>VkDebugUtilsLabelEXT</code> structures</p>
</li>
<li>
<p><a id="VUID-VkDebugUtilsMessengerCallbackDataEXT-pCmdBufLabels-parameter"></a> If <code>cmdBufLabelCount</code> is not <code>0</code>, <code>pCmdBufLabels</code> <strong class="purple">must</strong> be a valid pointer to an array of <code>cmdBufLabelCount</code> valid <code>VkDebugUtilsLabelEXT</code> structures</p>
</li>
<li>
<p><a id="VUID-VkDebugUtilsMessengerCallbackDataEXT-pObjects-parameter"></a> If <code>objectCount</code> is not <code>0</code>, <code>pObjects</code> <strong class="purple">must</strong> be a valid pointer to an array of <code>objectCount</code> valid <code>VkDebugUtilsObjectNameInfoEXT</code> structures</p>
</li>
</ul>
</div>
</div>
</div>
</div>
<div class="sect3">
<h4 id="_see_also_425">See Also</h4>
<div class="paragraph">
<p><a href="#VkDebugUtilsLabelEXT">VkDebugUtilsLabelEXT</a>, <a href="#VkDebugUtilsMessengerCallbackDataFlagsEXT">VkDebugUtilsMessengerCallbackDataFlagsEXT</a>, <a href="#VkDebugUtilsObjectNameInfoEXT">VkDebugUtilsObjectNameInfoEXT</a>, <a href="#VkStructureType">VkStructureType</a>, <a href="#vkSubmitDebugUtilsMessageEXT">vkSubmitDebugUtilsMessageEXT</a></p>
</div>
</div>
<div class="sect3">
<h4 id="_document_notes_425">Document Notes</h4>
<div class="paragraph">
<p>For more information, see the Vulkan Specification at URL</p>
</div>
<div class="paragraph">
<p><a href="https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VkDebugUtilsMessengerCallbackDataEXT" class="bare">https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VkDebugUtilsMessengerCallbackDataEXT</a></p>
</div>
<div class="paragraph">
<p>This page is extracted from the Vulkan Specification.
Fixes and changes should be made to the Specification, not directly.</p>
</div>
<div style="page-break-after: always;"></div>
</div>
</div>
<div class="sect2">
<h3 id="_vkdebugutilsmessengercreateinfoext3">VkDebugUtilsMessengerCreateInfoEXT(3)</h3>
<div class="sect3">
<h4 id="_name_426">Name</h4>
<div class="paragraph">
<p>VkDebugUtilsMessengerCreateInfoEXT - Structure specifying parameters of a newly created debug messenger</p>
</div>
</div>
<div class="sect3">
<h4 id="_c_specification_426">C Specification</h4>
<div class="paragraph">
<p>The definition of <code>VkDebugUtilsMessengerCreateInfoEXT</code> is:</p>
</div>
<div id="VkDebugUtilsMessengerCreateInfoEXT" class="listingblock">
<div class="content">
<pre class="highlight"><code class="language-c++" data-lang="c++">typedef struct VkDebugUtilsMessengerCreateInfoEXT {
    VkStructureType                         sType;
    const void*                             pNext;
    VkDebugUtilsMessengerCreateFlagsEXT     flags;
    VkDebugUtilsMessageSeverityFlagsEXT     messageSeverity;
    VkDebugUtilsMessageTypeFlagsEXT         messageType;
    PFN_vkDebugUtilsMessengerCallbackEXT    pfnUserCallback;
    void*                                   pUserData;
} VkDebugUtilsMessengerCreateInfoEXT;</code></pre>
</div>
</div>
</div>
<div class="sect3">
<h4 id="_members_63">Members</h4>
<div class="ulist">
<ul>
<li>
<p><code>sType</code> is the type of this structure.</p>
</li>
<li>
<p><code>pNext</code> is <code>NULL</code> or a pointer to an extension-specific structure.</p>
</li>
<li>
<p><code>flags</code> is 0 and reserved for future use.</p>
</li>
<li>
<p><code>messageSeverity</code> is a bitmask of
<a href="#VkDebugUtilsMessageSeverityFlagBitsEXT">VkDebugUtilsMessageSeverityFlagBitsEXT</a> specifying which severity
of event(s) will cause this callback to be called.</p>
</li>
<li>
<p><code>messageType</code> is a bitmask of
<a href="#VkDebugUtilsMessageTypeFlagBitsEXT">VkDebugUtilsMessageTypeFlagBitsEXT</a> specifying which type of
event(s) will cause this callback to be called.</p>
</li>
<li>
<p><code>pfnUserCallback</code> is the application callback function to call.</p>
</li>
<li>
<p><code>pUserData</code> is user data to be passed to the callback.</p>
</li>
</ul>
</div>
</div>
<div class="sect3">
<h4 id="_description_426">Description</h4>
<div class="paragraph">
<p>For each <code>VkDebugUtilsMessengerEXT</code> that is created the
<code>VkDebugUtilsMessengerCreateInfoEXT</code>::<code>messageSeverity</code> and
<code>VkDebugUtilsMessengerCreateInfoEXT</code>::<code>messageType</code> determine when
that <code>VkDebugUtilsMessengerCreateInfoEXT</code>::<code>pfnUserCallback</code> is
called.
The process to determine if the user&#8217;s <code>pfnUserCallback</code> is triggered
when an event occurs is as follows:</p>
</div>
<div class="olist arabic">
<ol class="arabic">
<li>
<p>The implementation will perform a bitwise AND of the event&#8217;s
<a href="#VkDebugUtilsMessageSeverityFlagBitsEXT">VkDebugUtilsMessageSeverityFlagBitsEXT</a> with the
<code>messageSeverity</code> provided during creation of the
<a href="#VkDebugUtilsMessengerEXT">VkDebugUtilsMessengerEXT</a> object.</p>
<div class="olist loweralpha">
<ol class="loweralpha" type="a">
<li>
<p>If the value is 0, the message is skipped.</p>
</li>
</ol>
</div>
</li>
<li>
<p>The implementation will perform bitwise AND of the event&#8217;s
<a href="#VkDebugUtilsMessageTypeFlagBitsEXT">VkDebugUtilsMessageTypeFlagBitsEXT</a> with the <code>messageType</code>
provided during the creation of the <a href="#VkDebugUtilsMessengerEXT">VkDebugUtilsMessengerEXT</a>
object.</p>
<div class="olist loweralpha">
<ol class="loweralpha" type="a">
<li>
<p>If the value is 0, the message is skipped.</p>
</li>
</ol>
</div>
</li>
<li>
<p>The callback will trigger a debug message for the current event</p>
</li>
</ol>
</div>
<div class="paragraph">
<p>The callback will come directly from the component that detected the event,
unless some other layer intercepts the calls for its own purposes (filter
them in a different way, log to a system error log, etc.).</p>
</div>
<div class="paragraph">
<p>An application <strong class="purple">can</strong> receive multiple callbacks if multiple
<code>VkDebugUtilsMessengerEXT</code> objects are created.
A callback will always be executed in the same thread as the originating
Vulkan call.</p>
</div>
<div class="paragraph">
<p>A callback <strong class="purple">can</strong> be called from multiple threads simultaneously (if the
application is making Vulkan calls from multiple threads).</p>
</div>
<div class="sidebarblock">
<div class="content">
<div class="title">Valid Usage</div>
<div class="ulist">
<ul>
<li>
<p><a id="VUID-VkDebugUtilsMessengerCreateInfoEXT-pfnUserCallback-01914"></a>
<code>pfnUserCallback</code> <strong class="purple">must</strong> be a valid
<a href="#PFN_vkDebugUtilsMessengerCallbackEXT">PFN_vkDebugUtilsMessengerCallbackEXT</a></p>
</li>
</ul>
</div>
</div>
</div>
<div class="sidebarblock">
<div class="content">
<div class="title">Valid Usage (Implicit)</div>
<div class="ulist">
<ul>
<li>
<p><a id="VUID-VkDebugUtilsMessengerCreateInfoEXT-sType-sType"></a> <code>sType</code> <strong class="purple">must</strong> be <code>VK_STRUCTURE_TYPE_DEBUG_UTILS_MESSENGER_CREATE_INFO_EXT</code></p>
</li>
<li>
<p><a id="VUID-VkDebugUtilsMessengerCreateInfoEXT-flags-zerobitmask"></a> <code>flags</code> <strong class="purple">must</strong> be <code>0</code></p>
</li>
<li>
<p><a id="VUID-VkDebugUtilsMessengerCreateInfoEXT-messageSeverity-parameter"></a> <code>messageSeverity</code> <strong class="purple">must</strong> be a valid combination of <a href="#VkDebugUtilsMessageSeverityFlagBitsEXT">VkDebugUtilsMessageSeverityFlagBitsEXT</a> values</p>
</li>
<li>
<p><a id="VUID-VkDebugUtilsMessengerCreateInfoEXT-messageSeverity-requiredbitmask"></a> <code>messageSeverity</code> <strong class="purple">must</strong> not be <code>0</code></p>
</li>
<li>
<p><a id="VUID-VkDebugUtilsMessengerCreateInfoEXT-messageType-parameter"></a> <code>messageType</code> <strong class="purple">must</strong> be a valid combination of <a href="#VkDebugUtilsMessageTypeFlagBitsEXT">VkDebugUtilsMessageTypeFlagBitsEXT</a> values</p>
</li>
<li>
<p><a id="VUID-VkDebugUtilsMessengerCreateInfoEXT-messageType-requiredbitmask"></a> <code>messageType</code> <strong class="purple">must</strong> not be <code>0</code></p>
</li>
</ul>
</div>
</div>
</div>
</div>
<div class="sect3">
<h4 id="_see_also_426">See Also</h4>
<div class="paragraph">
<p><a href="#PFN_vkDebugUtilsMessengerCallbackEXT">PFN_vkDebugUtilsMessengerCallbackEXT</a>, <a href="#VkDebugUtilsMessageSeverityFlagsEXT">VkDebugUtilsMessageSeverityFlagsEXT</a>, <a href="#VkDebugUtilsMessageTypeFlagsEXT">VkDebugUtilsMessageTypeFlagsEXT</a>, <a href="#VkDebugUtilsMessengerCreateFlagsEXT">VkDebugUtilsMessengerCreateFlagsEXT</a>, <a href="#VkStructureType">VkStructureType</a>, <a href="#vkCreateDebugUtilsMessengerEXT">vkCreateDebugUtilsMessengerEXT</a></p>
</div>
</div>
<div class="sect3">
<h4 id="_document_notes_426">Document Notes</h4>
<div class="paragraph">
<p>For more information, see the Vulkan Specification at URL</p>
</div>
<div class="paragraph">
<p><a href="https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VkDebugUtilsMessengerCreateInfoEXT" class="bare">https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VkDebugUtilsMessengerCreateInfoEXT</a></p>
</div>
<div class="paragraph">
<p>This page is extracted from the Vulkan Specification.
Fixes and changes should be made to the Specification, not directly.</p>
</div>
<div style="page-break-after: always;"></div>
</div>
</div>
<div class="sect2">
<h3 id="_vkdebugutilsobjectnameinfoext3">VkDebugUtilsObjectNameInfoEXT(3)</h3>
<div class="sect3">
<h4 id="_name_427">Name</h4>
<div class="paragraph">
<p>VkDebugUtilsObjectNameInfoEXT - Specify parameters of a name to give to an object</p>
</div>
</div>
<div class="sect3">
<h4 id="_c_specification_427">C Specification</h4>
<div class="paragraph">
<p>The <code>VkDebugUtilsObjectNameInfoEXT</code> structure is defined as:</p>
</div>
<div id="VkDebugUtilsObjectNameInfoEXT" class="listingblock">
<div class="content">
<pre class="highlight"><code class="language-c++" data-lang="c++">typedef struct VkDebugUtilsObjectNameInfoEXT {
    VkStructureType    sType;
    const void*        pNext;
    VkObjectType       objectType;
    uint64_t           objectHandle;
    const char*        pObjectName;
} VkDebugUtilsObjectNameInfoEXT;</code></pre>
</div>
</div>
</div>
<div class="sect3">
<h4 id="_members_64">Members</h4>
<div class="ulist">
<ul>
<li>
<p><code>sType</code> is the type of this structure.</p>
</li>
<li>
<p><code>pNext</code> is <code>NULL</code> or a pointer to an extension-specific structure.</p>
</li>
<li>
<p><code>objectType</code> is a <a href="#VkObjectType">VkObjectType</a> specifying the type of the
object to be named.</p>
</li>
<li>
<p><code>objectHandle</code> is the object to be named.</p>
</li>
<li>
<p><code>pObjectName</code> is a null-terminated UTF-8 string specifying the name
to apply to <code>objectHandle</code>.</p>
</li>
</ul>
</div>
</div>
<div class="sect3">
<h4 id="_description_427">Description</h4>
<div class="paragraph">
<p>Applications <strong class="purple">may</strong> change the name associated with an object simply by
calling <code>vkSetDebugUtilsObjectNameEXT</code> again with a new string.
If <code>pObjectName</code> is an empty string, then any previously set name is
removed.</p>
</div>
<div class="sidebarblock">
<div class="content">
<div class="title">Valid Usage</div>
<div class="ulist">
<ul>
<li>
<p><a id="VUID-VkDebugUtilsObjectNameInfoEXT-objectType-02589"></a>
If <code>objectType</code> is <code>VK_OBJECT_TYPE_UNKNOWN</code>, <code>objectHandle</code>
<strong class="purple">must</strong> not be <a href="#VK_NULL_HANDLE">VK_NULL_HANDLE</a></p>
</li>
<li>
<p><a id="VUID-VkDebugUtilsObjectNameInfoEXT-objectType-02590"></a>
If <code>objectType</code> is not <code>VK_OBJECT_TYPE_UNKNOWN</code>,
<code>objectHandle</code> <strong class="purple">must</strong> be <a href="#VK_NULL_HANDLE">VK_NULL_HANDLE</a> or a valid Vulkan
handle of the type associated with <code>objectType</code> as defined in the
<a href="vkspec.html#debugging-object-types">VkObjectType and Vulkan Handle Relationship</a>
table</p>
</li>
</ul>
</div>
</div>
</div>
<div class="sidebarblock">
<div class="content">
<div class="title">Valid Usage (Implicit)</div>
<div class="ulist">
<ul>
<li>
<p><a id="VUID-VkDebugUtilsObjectNameInfoEXT-sType-sType"></a> <code>sType</code> <strong class="purple">must</strong> be <code>VK_STRUCTURE_TYPE_DEBUG_UTILS_OBJECT_NAME_INFO_EXT</code></p>
</li>
<li>
<p><a id="VUID-VkDebugUtilsObjectNameInfoEXT-pNext-pNext"></a> <code>pNext</code> <strong class="purple">must</strong> be <code>NULL</code></p>
</li>
<li>
<p><a id="VUID-VkDebugUtilsObjectNameInfoEXT-objectType-parameter"></a> <code>objectType</code> <strong class="purple">must</strong> be a valid <a href="#VkObjectType">VkObjectType</a> value</p>
</li>
<li>
<p><a id="VUID-VkDebugUtilsObjectNameInfoEXT-pObjectName-parameter"></a> If <code>pObjectName</code> is not <code>NULL</code>, <code>pObjectName</code> <strong class="purple">must</strong> be a null-terminated UTF-8 string</p>
</li>
</ul>
</div>
</div>
</div>
</div>
<div class="sect3">
<h4 id="_see_also_427">See Also</h4>
<div class="paragraph">
<p><a href="#VkDebugUtilsMessengerCallbackDataEXT">VkDebugUtilsMessengerCallbackDataEXT</a>, <a href="#VkObjectType">VkObjectType</a>, <a href="#VkStructureType">VkStructureType</a>, <a href="#vkSetDebugUtilsObjectNameEXT">vkSetDebugUtilsObjectNameEXT</a></p>
</div>
</div>
<div class="sect3">
<h4 id="_document_notes_427">Document Notes</h4>
<div class="paragraph">
<p>For more information, see the Vulkan Specification at URL</p>
</div>
<div class="paragraph">
<p><a href="https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VkDebugUtilsObjectNameInfoEXT" class="bare">https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VkDebugUtilsObjectNameInfoEXT</a></p>
</div>
<div class="paragraph">
<p>This page is extracted from the Vulkan Specification.
Fixes and changes should be made to the Specification, not directly.</p>
</div>
<div style="page-break-after: always;"></div>
</div>
</div>
<div class="sect2">
<h3 id="_vkdebugutilsobjecttaginfoext3">VkDebugUtilsObjectTagInfoEXT(3)</h3>
<div class="sect3">
<h4 id="_name_428">Name</h4>
<div class="paragraph">
<p>VkDebugUtilsObjectTagInfoEXT - Specify parameters of a tag to attach to an object</p>
</div>
</div>
<div class="sect3">
<h4 id="_c_specification_428">C Specification</h4>
<div class="paragraph">
<p>The <code>VkDebugUtilsObjectTagInfoEXT</code> structure is defined as:</p>
</div>
<div id="VkDebugUtilsObjectTagInfoEXT" class="listingblock">
<div class="content">
<pre class="highlight"><code class="language-c++" data-lang="c++">typedef struct VkDebugUtilsObjectTagInfoEXT {
    VkStructureType    sType;
    const void*        pNext;
    VkObjectType       objectType;
    uint64_t           objectHandle;
    uint64_t           tagName;
    size_t             tagSize;
    const void*        pTag;
} VkDebugUtilsObjectTagInfoEXT;</code></pre>
</div>
</div>
</div>
<div class="sect3">
<h4 id="_members_65">Members</h4>
<div class="ulist">
<ul>
<li>
<p><code>sType</code> is the type of this structure.</p>
</li>
<li>
<p><code>pNext</code> is <code>NULL</code> or a pointer to an extension-specific structure.</p>
</li>
<li>
<p><code>objectType</code> is a <a href="#VkObjectType">VkObjectType</a> specifying the type of the
object to be named.</p>
</li>
<li>
<p><code>objectHandle</code> is the object to be tagged.</p>
</li>
<li>
<p><code>tagName</code> is a numerical identifier of the tag.</p>
</li>
<li>
<p><code>tagSize</code> is the number of bytes of data to attach to the object.</p>
</li>
<li>
<p><code>pTag</code> is an array of <code>tagSize</code> bytes containing the data to be
associated with the object.</p>
</li>
</ul>
</div>
</div>
<div class="sect3">
<h4 id="_description_428">Description</h4>
<div class="paragraph">
<p>The <code>tagName</code> parameter gives a name or identifier to the type of data
being tagged.
This can be used by debugging layers to easily filter for only data that can
be used by that implementation.</p>
</div>
<div class="sidebarblock">
<div class="content">
<div class="title">Valid Usage</div>
<div class="ulist">
<ul>
<li>
<p><a id="VUID-VkDebugUtilsObjectTagInfoEXT-objectType-01908"></a>
<code>objectType</code> <strong class="purple">must</strong> not be <code>VK_OBJECT_TYPE_UNKNOWN</code></p>
</li>
<li>
<p><a id="VUID-VkDebugUtilsObjectTagInfoEXT-objectHandle-01910"></a>
<code>objectHandle</code> <strong class="purple">must</strong> be a valid Vulkan handle of the type associated
with <code>objectType</code> as defined in the <a href="vkspec.html#debugging-object-types">VkObjectType and Vulkan Handle Relationship</a> table</p>
</li>
</ul>
</div>
</div>
</div>
<div class="sidebarblock">
<div class="content">
<div class="title">Valid Usage (Implicit)</div>
<div class="ulist">
<ul>
<li>
<p><a id="VUID-VkDebugUtilsObjectTagInfoEXT-sType-sType"></a> <code>sType</code> <strong class="purple">must</strong> be <code>VK_STRUCTURE_TYPE_DEBUG_UTILS_OBJECT_TAG_INFO_EXT</code></p>
</li>
<li>
<p><a id="VUID-VkDebugUtilsObjectTagInfoEXT-pNext-pNext"></a> <code>pNext</code> <strong class="purple">must</strong> be <code>NULL</code></p>
</li>
<li>
<p><a id="VUID-VkDebugUtilsObjectTagInfoEXT-objectType-parameter"></a> <code>objectType</code> <strong class="purple">must</strong> be a valid <a href="#VkObjectType">VkObjectType</a> value</p>
</li>
<li>
<p><a id="VUID-VkDebugUtilsObjectTagInfoEXT-pTag-parameter"></a> <code>pTag</code> <strong class="purple">must</strong> be a valid pointer to an array of <code>tagSize</code> bytes</p>
</li>
<li>
<p><a id="VUID-VkDebugUtilsObjectTagInfoEXT-tagSize-arraylength"></a> <code>tagSize</code> <strong class="purple">must</strong> be greater than <code>0</code></p>
</li>
</ul>
</div>
</div>
</div>
</div>
<div class="sect3">
<h4 id="_see_also_428">See Also</h4>
<div class="paragraph">
<p><a href="#VkObjectType">VkObjectType</a>, <a href="#VkStructureType">VkStructureType</a>, <a href="#vkSetDebugUtilsObjectTagEXT">vkSetDebugUtilsObjectTagEXT</a></p>
</div>
</div>
<div class="sect3">
<h4 id="_document_notes_428">Document Notes</h4>
<div class="paragraph">
<p>For more information, see the Vulkan Specification at URL</p>
</div>
<div class="paragraph">
<p><a href="https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VkDebugUtilsObjectTagInfoEXT" class="bare">https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VkDebugUtilsObjectTagInfoEXT</a></p>
</div>
<div class="paragraph">
<p>This page is extracted from the Vulkan Specification.
Fixes and changes should be made to the Specification, not directly.</p>
</div>
<div style="page-break-after: always;"></div>
</div>
</div>
<div class="sect2">
<h3 id="_vkdedicatedallocationbuffercreateinfonv3">VkDedicatedAllocationBufferCreateInfoNV(3)</h3>
<div class="sect3">
<h4 id="_name_429">Name</h4>
<div class="paragraph">
<p>VkDedicatedAllocationBufferCreateInfoNV - Specify that a buffer is bound to a dedicated memory resource</p>
</div>
</div>
<div class="sect3">
<h4 id="_c_specification_429">C Specification</h4>
<div class="paragraph">
<p>If the <code>pNext</code> chain includes a
<code>VkDedicatedAllocationBufferCreateInfoNV</code> structure, then that structure
includes an enable controlling whether the buffer will have a dedicated
memory allocation bound to it.</p>
</div>
<div class="paragraph">
<p>The <code>VkDedicatedAllocationBufferCreateInfoNV</code> structure is defined as:</p>
</div>
<div id="VkDedicatedAllocationBufferCreateInfoNV" class="listingblock">
<div class="content">
<pre class="highlight"><code class="language-c++" data-lang="c++">typedef struct VkDedicatedAllocationBufferCreateInfoNV {
    VkStructureType    sType;
    const void*        pNext;
    VkBool32           dedicatedAllocation;
} VkDedicatedAllocationBufferCreateInfoNV;</code></pre>
</div>
</div>
</div>
<div class="sect3">
<h4 id="_members_66">Members</h4>
<div class="ulist">
<ul>
<li>
<p><code>sType</code> is the type of this structure.</p>
</li>
<li>
<p><code>pNext</code> is <code>NULL</code> or a pointer to an extension-specific structure.</p>
</li>
<li>
<p><code>dedicatedAllocation</code> specifies whether the buffer will have a
dedicated allocation bound to it.</p>
</li>
</ul>
</div>
</div>
<div class="sect3">
<h4 id="_description_429">Description</h4>
<div class="sidebarblock">
<div class="content">
<div class="title">Valid Usage (Implicit)</div>
<div class="ulist">
<ul>
<li>
<p><a id="VUID-VkDedicatedAllocationBufferCreateInfoNV-sType-sType"></a> <code>sType</code> <strong class="purple">must</strong> be <code>VK_STRUCTURE_TYPE_DEDICATED_ALLOCATION_BUFFER_CREATE_INFO_NV</code></p>
</li>
</ul>
</div>
</div>
</div>
</div>
<div class="sect3">
<h4 id="_see_also_429">See Also</h4>
<div class="paragraph">
<p><code>VkBool32</code>, <a href="#VkStructureType">VkStructureType</a></p>
</div>
</div>
<div class="sect3">
<h4 id="_document_notes_429">Document Notes</h4>
<div class="paragraph">
<p>For more information, see the Vulkan Specification at URL</p>
</div>
<div class="paragraph">
<p><a href="https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VkDedicatedAllocationBufferCreateInfoNV" class="bare">https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VkDedicatedAllocationBufferCreateInfoNV</a></p>
</div>
<div class="paragraph">
<p>This page is extracted from the Vulkan Specification.
Fixes and changes should be made to the Specification, not directly.</p>
</div>
<div style="page-break-after: always;"></div>
</div>
</div>
<div class="sect2">
<h3 id="_vkdedicatedallocationimagecreateinfonv3">VkDedicatedAllocationImageCreateInfoNV(3)</h3>
<div class="sect3">
<h4 id="_name_430">Name</h4>
<div class="paragraph">
<p>VkDedicatedAllocationImageCreateInfoNV - Specify that an image is bound to a dedicated memory resource</p>
</div>
</div>
<div class="sect3">
<h4 id="_c_specification_430">C Specification</h4>
<div class="paragraph">
<p>If the <code>pNext</code> chain includes a
<code>VkDedicatedAllocationImageCreateInfoNV</code> structure, then that structure
includes an enable controlling whether the image will have a dedicated
memory allocation bound to it.</p>
</div>
<div class="paragraph">
<p>The <code>VkDedicatedAllocationImageCreateInfoNV</code> structure is defined as:</p>
</div>
<div id="VkDedicatedAllocationImageCreateInfoNV" class="listingblock">
<div class="content">
<pre class="highlight"><code class="language-c++" data-lang="c++">typedef struct VkDedicatedAllocationImageCreateInfoNV {
    VkStructureType    sType;
    const void*        pNext;
    VkBool32           dedicatedAllocation;
} VkDedicatedAllocationImageCreateInfoNV;</code></pre>
</div>
</div>
</div>
<div class="sect3">
<h4 id="_members_67">Members</h4>
<div class="ulist">
<ul>
<li>
<p><code>sType</code> is the type of this structure.</p>
</li>
<li>
<p><code>pNext</code> is <code>NULL</code> or a pointer to an extension-specific structure.</p>
</li>
<li>
<p><code>dedicatedAllocation</code> specifies whether the image will have a
dedicated allocation bound to it.</p>
</li>
</ul>
</div>
</div>
<div class="sect3">
<h4 id="_description_430">Description</h4>
<div class="admonitionblock note">
<table>
<tr>
<td class="icon">
<i class="fa icon-note" title="Note"></i>
</td>
<td class="content">
<div class="title">Note</div>
<div class="paragraph">
<p>Using a dedicated allocation for color and depth/stencil attachments or
other large images <strong class="purple">may</strong> improve performance on some devices.</p>
</div>
</td>
</tr>
</table>
</div>
<div class="sidebarblock">
<div class="content">
<div class="title">Valid Usage</div>
<div class="ulist">
<ul>
<li>
<p><a id="VUID-VkDedicatedAllocationImageCreateInfoNV-dedicatedAllocation-00994"></a>
If <code>dedicatedAllocation</code> is <code>VK_TRUE</code>,
<code>VkImageCreateInfo</code>::<code>flags</code> <strong class="purple">must</strong> not include
<code>VK_IMAGE_CREATE_SPARSE_BINDING_BIT</code>,
<code>VK_IMAGE_CREATE_SPARSE_RESIDENCY_BIT</code>, or
<code>VK_IMAGE_CREATE_SPARSE_ALIASED_BIT</code></p>
</li>
</ul>
</div>
</div>
</div>
<div class="sidebarblock">
<div class="content">
<div class="title">Valid Usage (Implicit)</div>
<div class="ulist">
<ul>
<li>
<p><a id="VUID-VkDedicatedAllocationImageCreateInfoNV-sType-sType"></a> <code>sType</code> <strong class="purple">must</strong> be <code>VK_STRUCTURE_TYPE_DEDICATED_ALLOCATION_IMAGE_CREATE_INFO_NV</code></p>
</li>
</ul>
</div>
</div>
</div>
</div>
<div class="sect3">
<h4 id="_see_also_430">See Also</h4>
<div class="paragraph">
<p><code>VkBool32</code>, <a href="#VkStructureType">VkStructureType</a></p>
</div>
</div>
<div class="sect3">
<h4 id="_document_notes_430">Document Notes</h4>
<div class="paragraph">
<p>For more information, see the Vulkan Specification at URL</p>
</div>
<div class="paragraph">
<p><a href="https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VkDedicatedAllocationImageCreateInfoNV" class="bare">https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VkDedicatedAllocationImageCreateInfoNV</a></p>
</div>
<div class="paragraph">
<p>This page is extracted from the Vulkan Specification.
Fixes and changes should be made to the Specification, not directly.</p>
</div>
<div style="page-break-after: always;"></div>
</div>
</div>
<div class="sect2">
<h3 id="_vkdedicatedallocationmemoryallocateinfonv3">VkDedicatedAllocationMemoryAllocateInfoNV(3)</h3>
<div class="sect3">
<h4 id="_name_431">Name</h4>
<div class="paragraph">
<p>VkDedicatedAllocationMemoryAllocateInfoNV - Specify a dedicated memory allocation resource</p>
</div>
</div>
<div class="sect3">
<h4 id="_c_specification_431">C Specification</h4>
<div class="paragraph">
<p>If the <code>pNext</code> chain includes a
<code>VkDedicatedAllocationMemoryAllocateInfoNV</code> structure, then that
structure includes a handle of the sole buffer or image resource that the
memory <strong class="purple">can</strong> be bound to.</p>
</div>
<div class="paragraph">
<p>The <code>VkDedicatedAllocationMemoryAllocateInfoNV</code> structure is defined as:</p>
</div>
<div id="VkDedicatedAllocationMemoryAllocateInfoNV" class="listingblock">
<div class="content">
<pre class="highlight"><code class="language-c++" data-lang="c++">typedef struct VkDedicatedAllocationMemoryAllocateInfoNV {
    VkStructureType    sType;
    const void*        pNext;
    VkImage            image;
    VkBuffer           buffer;
} VkDedicatedAllocationMemoryAllocateInfoNV;</code></pre>
</div>
</div>
</div>
<div class="sect3">
<h4 id="_members_68">Members</h4>
<div class="ulist">
<ul>
<li>
<p><code>sType</code> is the type of this structure.</p>
</li>
<li>
<p><code>pNext</code> is <code>NULL</code> or a pointer to an extension-specific structure.</p>
</li>
<li>
<p><code>image</code> is <a href="#VK_NULL_HANDLE">VK_NULL_HANDLE</a> or a handle of an image which this
memory will be bound to.</p>
</li>
<li>
<p><code>buffer</code> is <a href="#VK_NULL_HANDLE">VK_NULL_HANDLE</a> or a handle of a buffer which this
memory will be bound to.</p>
</li>
</ul>
</div>
</div>
<div class="sect3">
<h4 id="_description_431">Description</h4>
<div class="sidebarblock">
<div class="content">
<div class="title">Valid Usage</div>
<div class="ulist">
<ul>
<li>
<p><a id="VUID-VkDedicatedAllocationMemoryAllocateInfoNV-image-00649"></a>
At least one of <code>image</code> and <code>buffer</code> <strong class="purple">must</strong> be
<a href="#VK_NULL_HANDLE">VK_NULL_HANDLE</a></p>
</li>
<li>
<p><a id="VUID-VkDedicatedAllocationMemoryAllocateInfoNV-image-00650"></a>
If <code>image</code> is not <a href="#VK_NULL_HANDLE">VK_NULL_HANDLE</a>, the image <strong class="purple">must</strong> have been
created with
<code>VkDedicatedAllocationImageCreateInfoNV</code>::<code>dedicatedAllocation</code>
equal to <code>VK_TRUE</code></p>
</li>
<li>
<p><a id="VUID-VkDedicatedAllocationMemoryAllocateInfoNV-buffer-00651"></a>
If <code>buffer</code> is not <a href="#VK_NULL_HANDLE">VK_NULL_HANDLE</a>, the buffer <strong class="purple">must</strong> have been
created with
<code>VkDedicatedAllocationBufferCreateInfoNV</code>::<code>dedicatedAllocation</code>
equal to <code>VK_TRUE</code></p>
</li>
<li>
<p><a id="VUID-VkDedicatedAllocationMemoryAllocateInfoNV-image-00652"></a>
If <code>image</code> is not <a href="#VK_NULL_HANDLE">VK_NULL_HANDLE</a>,
<code>VkMemoryAllocateInfo</code>::<code>allocationSize</code> <strong class="purple">must</strong> equal the
<code>VkMemoryRequirements</code>::<code>size</code> of the image</p>
</li>
<li>
<p><a id="VUID-VkDedicatedAllocationMemoryAllocateInfoNV-buffer-00653"></a>
If <code>buffer</code> is not <a href="#VK_NULL_HANDLE">VK_NULL_HANDLE</a>,
<code>VkMemoryAllocateInfo</code>::<code>allocationSize</code> <strong class="purple">must</strong> equal the
<code>VkMemoryRequirements</code>::<code>size</code> of the buffer</p>
</li>
<li>
<p><a id="VUID-VkDedicatedAllocationMemoryAllocateInfoNV-image-00654"></a>
If <code>image</code> is not <a href="#VK_NULL_HANDLE">VK_NULL_HANDLE</a> and
<a href="#VkMemoryAllocateInfo">VkMemoryAllocateInfo</a> defines a memory import operation, the memory
being imported <strong class="purple">must</strong> also be a dedicated image allocation and
<code>image</code> <strong class="purple">must</strong> be identical to the image associated with the imported
memory.</p>
</li>
<li>
<p><a id="VUID-VkDedicatedAllocationMemoryAllocateInfoNV-buffer-00655"></a>
If <code>buffer</code> is not <a href="#VK_NULL_HANDLE">VK_NULL_HANDLE</a> and
<a href="#VkMemoryAllocateInfo">VkMemoryAllocateInfo</a> defines a memory import operation, the memory
being imported <strong class="purple">must</strong> also be a dedicated buffer allocation and
<code>buffer</code> <strong class="purple">must</strong> be identical to the buffer associated with the
imported memory.</p>
</li>
</ul>
</div>
</div>
</div>
<div class="sidebarblock">
<div class="content">
<div class="title">Valid Usage (Implicit)</div>
<div class="ulist">
<ul>
<li>
<p><a id="VUID-VkDedicatedAllocationMemoryAllocateInfoNV-sType-sType"></a> <code>sType</code> <strong class="purple">must</strong> be <code>VK_STRUCTURE_TYPE_DEDICATED_ALLOCATION_MEMORY_ALLOCATE_INFO_NV</code></p>
</li>
<li>
<p><a id="VUID-VkDedicatedAllocationMemoryAllocateInfoNV-image-parameter"></a> If <code>image</code> is not <a href="#VK_NULL_HANDLE">VK_NULL_HANDLE</a>, <code>image</code> <strong class="purple">must</strong> be a valid <code>VkImage</code> handle</p>
</li>
<li>
<p><a id="VUID-VkDedicatedAllocationMemoryAllocateInfoNV-buffer-parameter"></a> If <code>buffer</code> is not <a href="#VK_NULL_HANDLE">VK_NULL_HANDLE</a>, <code>buffer</code> <strong class="purple">must</strong> be a valid <code>VkBuffer</code> handle</p>
</li>
<li>
<p><a id="VUID-VkDedicatedAllocationMemoryAllocateInfoNV-commonparent"></a> Both of <code>buffer</code>, and <code>image</code> that are valid handles <strong class="purple">must</strong> have been created, allocated, or retrieved from the same <code>VkDevice</code></p>
</li>
</ul>
</div>
</div>
</div>
</div>
<div class="sect3">
<h4 id="_see_also_431">See Also</h4>
<div class="paragraph">
<p><a href="#VkBuffer">VkBuffer</a>, <a href="#VkImage">VkImage</a>, <a href="#VkStructureType">VkStructureType</a></p>
</div>
</div>
<div class="sect3">
<h4 id="_document_notes_431">Document Notes</h4>
<div class="paragraph">
<p>For more information, see the Vulkan Specification at URL</p>
</div>
<div class="paragraph">
<p><a href="https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VkDedicatedAllocationMemoryAllocateInfoNV" class="bare">https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VkDedicatedAllocationMemoryAllocateInfoNV</a></p>
</div>
<div class="paragraph">
<p>This page is extracted from the Vulkan Specification.
Fixes and changes should be made to the Specification, not directly.</p>
</div>
<div style="page-break-after: always;"></div>
</div>
</div>
<div class="sect2">
<h3 id="_vkdescriptorbufferinfo3">VkDescriptorBufferInfo(3)</h3>
<div class="sect3">
<h4 id="_name_432">Name</h4>
<div class="paragraph">
<p>VkDescriptorBufferInfo - Structure specifying descriptor buffer info</p>
</div>
</div>
<div class="sect3">
<h4 id="_c_specification_432">C Specification</h4>
<div class="paragraph">
<p>The <code>VkDescriptorBufferInfo</code> structure is defined as:</p>
</div>
<div id="VkDescriptorBufferInfo" class="listingblock">
<div class="content">
<pre class="highlight"><code class="language-c++" data-lang="c++">typedef struct VkDescriptorBufferInfo {
    VkBuffer        buffer;
    VkDeviceSize    offset;
    VkDeviceSize    range;
} VkDescriptorBufferInfo;</code></pre>
</div>
</div>
</div>
<div class="sect3">
<h4 id="_members_69">Members</h4>
<div class="ulist">
<ul>
<li>
<p><code>buffer</code> is the buffer resource.</p>
</li>
<li>
<p><code>offset</code> is the offset in bytes from the start of <code>buffer</code>.
Access to buffer memory via this descriptor uses addressing that is
relative to this starting offset.</p>
</li>
<li>
<p><code>range</code> is the size in bytes that is used for this descriptor
update, or <code>VK_WHOLE_SIZE</code> to use the range from <code>offset</code> to the
end of the buffer.</p>
</li>
</ul>
</div>
</div>
<div class="sect3">
<h4 id="_description_432">Description</h4>
<div class="admonitionblock note">
<table>
<tr>
<td class="icon">
<i class="fa icon-note" title="Note"></i>
</td>
<td class="content">
<div class="title">Note</div>
<div class="paragraph">
<p>When setting <code>range</code> to <code>VK_WHOLE_SIZE</code>, the effective range <strong class="purple">must</strong>
not be larger than the maximum range for the descriptor type
(<a href="vkspec.html#limits-maxUniformBufferRange"><code>maxUniformBufferRange</code></a> or
<a href="vkspec.html#limits-maxStorageBufferRange"><code>maxStorageBufferRange</code></a>).
This means that <code>VK_WHOLE_SIZE</code> is not typically useful in the common
case where uniform buffer descriptors are suballocated from a buffer that is
much larger than <code>maxUniformBufferRange</code>.</p>
</div>
</td>
</tr>
</table>
</div>
<div class="paragraph">
<p>For <code>VK_DESCRIPTOR_TYPE_UNIFORM_BUFFER_DYNAMIC</code> and
<code>VK_DESCRIPTOR_TYPE_STORAGE_BUFFER_DYNAMIC</code> descriptor types,
<code>offset</code> is the base offset from which the dynamic offset is applied and
<code>range</code> is the static size used for all dynamic offsets.</p>
</div>
<div class="sidebarblock">
<div class="content">
<div class="title">Valid Usage</div>
<div class="ulist">
<ul>
<li>
<p><a id="VUID-VkDescriptorBufferInfo-offset-00340"></a>
<code>offset</code> <strong class="purple">must</strong> be less than the size of <code>buffer</code></p>
</li>
<li>
<p><a id="VUID-VkDescriptorBufferInfo-range-00341"></a>
If <code>range</code> is not equal to <code>VK_WHOLE_SIZE</code>, <code>range</code> <strong class="purple">must</strong> be
greater than <code>0</code></p>
</li>
<li>
<p><a id="VUID-VkDescriptorBufferInfo-range-00342"></a>
If <code>range</code> is not equal to <code>VK_WHOLE_SIZE</code>, <code>range</code> <strong class="purple">must</strong> be
less than or equal to the size of <code>buffer</code> minus <code>offset</code></p>
</li>
</ul>
</div>
</div>
</div>
<div class="sidebarblock">
<div class="content">
<div class="title">Valid Usage (Implicit)</div>
<div class="ulist">
<ul>
<li>
<p><a id="VUID-VkDescriptorBufferInfo-buffer-parameter"></a> <code>buffer</code> <strong class="purple">must</strong> be a valid <code>VkBuffer</code> handle</p>
</li>
</ul>
</div>
</div>
</div>
</div>
<div class="sect3">
<h4 id="_see_also_432">See Also</h4>
<div class="paragraph">
<p><a href="#VkBuffer">VkBuffer</a>, <code>VkDeviceSize</code>, <a href="#VkWriteDescriptorSet">VkWriteDescriptorSet</a></p>
</div>
</div>
<div class="sect3">
<h4 id="_document_notes_432">Document Notes</h4>
<div class="paragraph">
<p>For more information, see the Vulkan Specification at URL</p>
</div>
<div class="paragraph">
<p><a href="https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VkDescriptorBufferInfo" class="bare">https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VkDescriptorBufferInfo</a></p>
</div>
<div class="paragraph">
<p>This page is extracted from the Vulkan Specification.
Fixes and changes should be made to the Specification, not directly.</p>
</div>
<div style="page-break-after: always;"></div>
</div>
</div>
<div class="sect2">
<h3 id="_vkdescriptorimageinfo3">VkDescriptorImageInfo(3)</h3>
<div class="sect3">
<h4 id="_name_433">Name</h4>
<div class="paragraph">
<p>VkDescriptorImageInfo - Structure specifying descriptor image info</p>
</div>
</div>
<div class="sect3">
<h4 id="_c_specification_433">C Specification</h4>
<div class="paragraph">
<p>The <code>VkDescriptorImageInfo</code> structure is defined as:</p>
</div>
<div id="VkDescriptorImageInfo" class="listingblock">
<div class="content">
<pre class="highlight"><code class="language-c++" data-lang="c++">typedef struct VkDescriptorImageInfo {
    VkSampler        sampler;
    VkImageView      imageView;
    VkImageLayout    imageLayout;
} VkDescriptorImageInfo;</code></pre>
</div>
</div>
</div>
<div class="sect3">
<h4 id="_members_70">Members</h4>
<div class="ulist">
<ul>
<li>
<p><code>sampler</code> is a sampler handle, and is used in descriptor updates for
types <code>VK_DESCRIPTOR_TYPE_SAMPLER</code> and
<code>VK_DESCRIPTOR_TYPE_COMBINED_IMAGE_SAMPLER</code> if the binding being
updated does not use immutable samplers.</p>
</li>
<li>
<p><code>imageView</code> is an image view handle, and is used in descriptor
updates for types <code>VK_DESCRIPTOR_TYPE_SAMPLED_IMAGE</code>,
<code>VK_DESCRIPTOR_TYPE_STORAGE_IMAGE</code>,
<code>VK_DESCRIPTOR_TYPE_COMBINED_IMAGE_SAMPLER</code>, and
<code>VK_DESCRIPTOR_TYPE_INPUT_ATTACHMENT</code>.</p>
</li>
<li>
<p><code>imageLayout</code> is the layout that the image subresources accessible
from <code>imageView</code> will be in at the time this descriptor is accessed.
<code>imageLayout</code> is used in descriptor updates for types
<code>VK_DESCRIPTOR_TYPE_SAMPLED_IMAGE</code>,
<code>VK_DESCRIPTOR_TYPE_STORAGE_IMAGE</code>,
<code>VK_DESCRIPTOR_TYPE_COMBINED_IMAGE_SAMPLER</code>, and
<code>VK_DESCRIPTOR_TYPE_INPUT_ATTACHMENT</code>.</p>
</li>
</ul>
</div>
</div>
<div class="sect3">
<h4 id="_description_433">Description</h4>
<div class="paragraph">
<p>Members of <code>VkDescriptorImageInfo</code> that are not used in an update (as
described above) are ignored.</p>
</div>
<div class="sidebarblock">
<div class="content">
<div class="title">Valid Usage</div>
<div class="ulist">
<ul>
<li>
<p><a id="VUID-VkDescriptorImageInfo-imageView-00343"></a>
<code>imageView</code> <strong class="purple">must</strong> not be 2D or 2D array image view created from a 3D
image</p>
</li>
<li>
<p><a id="VUID-VkDescriptorImageInfo-imageView-01976"></a>
If <code>imageView</code> is created from a depth/stencil image, the
<code>aspectMask</code> used to create the <code>imageView</code> <strong class="purple">must</strong> include either
<code>VK_IMAGE_ASPECT_DEPTH_BIT</code> or <code>VK_IMAGE_ASPECT_STENCIL_BIT</code> but
not both.</p>
</li>
<li>
<p><a id="VUID-VkDescriptorImageInfo-imageLayout-00344"></a>
<code>imageLayout</code> <strong class="purple">must</strong> match the actual <a href="#VkImageLayout">VkImageLayout</a> of each
subresource accessible from <code>imageView</code> at the time this descriptor
is accessed as defined by the <a href="vkspec.html#resources-image-layouts-matching-rule">image layout matching rules</a></p>
</li>
<li>
<p><a id="VUID-VkDescriptorImageInfo-sampler-01564"></a>
If <code>sampler</code> is used and the <a href="#VkFormat">VkFormat</a> of the image is a
<a href="vkspec.html#formats-requiring-sampler-ycbcr-conversion">multi-planar format</a>, the
image <strong class="purple">must</strong> have been created with
<code>VK_IMAGE_CREATE_MUTABLE_FORMAT_BIT</code>, and the <code>aspectMask</code> of
the <code>imageView</code> <strong class="purple">must</strong> be <code>VK_IMAGE_ASPECT_PLANE_0_BIT</code>,
<code>VK_IMAGE_ASPECT_PLANE_1_BIT</code> or (for three-plane formats only)
<code>VK_IMAGE_ASPECT_PLANE_2_BIT</code></p>
</li>
</ul>
</div>
</div>
</div>
<div class="sidebarblock">
<div class="content">
<div class="title">Valid Usage (Implicit)</div>
<div class="ulist">
<ul>
<li>
<p><a id="VUID-VkDescriptorImageInfo-commonparent"></a> Both of <code>imageView</code>, and <code>sampler</code> that are valid handles <strong class="purple">must</strong> have been created, allocated, or retrieved from the same <code>VkDevice</code></p>
</li>
</ul>
</div>
</div>
</div>
</div>
<div class="sect3">
<h4 id="_see_also_433">See Also</h4>
<div class="paragraph">
<p><a href="#VkImageLayout">VkImageLayout</a>, <a href="#VkImageView">VkImageView</a>, <a href="#VkSampler">VkSampler</a>, <a href="#VkWriteDescriptorSet">VkWriteDescriptorSet</a></p>
</div>
</div>
<div class="sect3">
<h4 id="_document_notes_433">Document Notes</h4>
<div class="paragraph">
<p>For more information, see the Vulkan Specification at URL</p>
</div>
<div class="paragraph">
<p><a href="https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VkDescriptorImageInfo" class="bare">https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VkDescriptorImageInfo</a></p>
</div>
<div class="paragraph">
<p>This page is extracted from the Vulkan Specification.
Fixes and changes should be made to the Specification, not directly.</p>
</div>
<div style="page-break-after: always;"></div>
</div>
</div>
<div class="sect2">
<h3 id="_vkdescriptorpoolcreateinfo3">VkDescriptorPoolCreateInfo(3)</h3>
<div class="sect3">
<h4 id="_name_434">Name</h4>
<div class="paragraph">
<p>VkDescriptorPoolCreateInfo - Structure specifying parameters of a newly created descriptor pool</p>
</div>
</div>
<div class="sect3">
<h4 id="_c_specification_434">C Specification</h4>
<div class="paragraph">
<p>Additional information about the pool is passed in an instance of the
<code>VkDescriptorPoolCreateInfo</code> structure:</p>
</div>
<div id="VkDescriptorPoolCreateInfo" class="listingblock">
<div class="content">
<pre class="highlight"><code class="language-c++" data-lang="c++">typedef struct VkDescriptorPoolCreateInfo {
    VkStructureType                sType;
    const void*                    pNext;
    VkDescriptorPoolCreateFlags    flags;
    uint32_t                       maxSets;
    uint32_t                       poolSizeCount;
    const VkDescriptorPoolSize*    pPoolSizes;
} VkDescriptorPoolCreateInfo;</code></pre>
</div>
</div>
</div>
<div class="sect3">
<h4 id="_members_71">Members</h4>
<div class="ulist">
<ul>
<li>
<p><code>sType</code> is the type of this structure.</p>
</li>
<li>
<p><code>pNext</code> is <code>NULL</code> or a pointer to an extension-specific structure.</p>
</li>
<li>
<p><code>flags</code> is a bitmask of <a href="#VkDescriptorPoolCreateFlagBits">VkDescriptorPoolCreateFlagBits</a>
specifying certain supported operations on the pool.</p>
</li>
<li>
<p><code>maxSets</code> is the maximum number of descriptor sets that <strong class="purple">can</strong> be
allocated from the pool.</p>
</li>
<li>
<p><code>poolSizeCount</code> is the number of elements in <code>pPoolSizes</code>.</p>
</li>
<li>
<p><code>pPoolSizes</code> is a pointer to an array of <a href="#VkDescriptorPoolSize">VkDescriptorPoolSize</a>
structures, each containing a descriptor type and number of descriptors
of that type to be allocated in the pool.</p>
</li>
</ul>
</div>
</div>
<div class="sect3">
<h4 id="_description_434">Description</h4>
<div class="paragraph">
<p>If multiple <code>VkDescriptorPoolSize</code> structures appear in the
<code>pPoolSizes</code> array then the pool will be created with enough storage for
the total number of descriptors of each type.</p>
</div>
<div class="paragraph">
<p>Fragmentation of a descriptor pool is possible and <strong class="purple">may</strong> lead to descriptor
set allocation failures.
A failure due to fragmentation is defined as failing a descriptor set
allocation despite the sum of all outstanding descriptor set allocations
from the pool plus the requested allocation requiring no more than the total
number of descriptors requested at pool creation.
Implementations provide certain guarantees of when fragmentation <strong class="purple">must</strong> not
cause allocation failure, as described below.</p>
</div>
<div class="paragraph">
<p>If a descriptor pool has not had any descriptor sets freed since it was
created or most recently reset then fragmentation <strong class="purple">must</strong> not cause an
allocation failure (note that this is always the case for a pool created
without the <code>VK_DESCRIPTOR_POOL_CREATE_FREE_DESCRIPTOR_SET_BIT</code> bit
set).
Additionally, if all sets allocated from the pool since it was created or
most recently reset use the same number of descriptors (of each type) and
the requested allocation also uses that same number of descriptors (of each
type), then fragmentation <strong class="purple">must</strong> not cause an allocation failure.</p>
</div>
<div class="paragraph">
<p>If an allocation failure occurs due to fragmentation, an application <strong class="purple">can</strong>
create an additional descriptor pool to perform further descriptor set
allocations.</p>
</div>
<div class="paragraph">
<p>If <code>flags</code> has the
<code>VK_DESCRIPTOR_POOL_CREATE_UPDATE_AFTER_BIND_BIT_EXT</code> bit set,
descriptor pool creation <strong class="purple">may</strong> fail with the error
<code>VK_ERROR_FRAGMENTATION_EXT</code> if the total number of descriptors across
all pools (including this one) created with this bit set exceeds
<code>maxUpdateAfterBindDescriptorsInAllPools</code>, or if fragmentation of the
underlying hardware resources occurs.</p>
</div>
<div class="sidebarblock">
<div class="content">
<div class="title">Valid Usage</div>
<div class="ulist">
<ul>
<li>
<p><a id="VUID-VkDescriptorPoolCreateInfo-maxSets-00301"></a>
<code>maxSets</code> <strong class="purple">must</strong> be greater than <code>0</code></p>
</li>
</ul>
</div>
</div>
</div>
<div class="sidebarblock">
<div class="content">
<div class="title">Valid Usage (Implicit)</div>
<div class="ulist">
<ul>
<li>
<p><a id="VUID-VkDescriptorPoolCreateInfo-sType-sType"></a> <code>sType</code> <strong class="purple">must</strong> be <code>VK_STRUCTURE_TYPE_DESCRIPTOR_POOL_CREATE_INFO</code></p>
</li>
<li>
<p><a id="VUID-VkDescriptorPoolCreateInfo-pNext-pNext"></a> <code>pNext</code> <strong class="purple">must</strong> be <code>NULL</code> or a pointer to a valid instance of <a href="#VkDescriptorPoolInlineUniformBlockCreateInfoEXT">VkDescriptorPoolInlineUniformBlockCreateInfoEXT</a></p>
</li>
<li>
<p><a id="VUID-VkDescriptorPoolCreateInfo-flags-parameter"></a> <code>flags</code> <strong class="purple">must</strong> be a valid combination of <a href="#VkDescriptorPoolCreateFlagBits">VkDescriptorPoolCreateFlagBits</a> values</p>
</li>
<li>
<p><a id="VUID-VkDescriptorPoolCreateInfo-pPoolSizes-parameter"></a> <code>pPoolSizes</code> <strong class="purple">must</strong> be a valid pointer to an array of <code>poolSizeCount</code> valid <code>VkDescriptorPoolSize</code> structures</p>
</li>
<li>
<p><a id="VUID-VkDescriptorPoolCreateInfo-poolSizeCount-arraylength"></a> <code>poolSizeCount</code> <strong class="purple">must</strong> be greater than <code>0</code></p>
</li>
</ul>
</div>
</div>
</div>
</div>
<div class="sect3">
<h4 id="_see_also_434">See Also</h4>
<div class="paragraph">
<p><a href="#VkDescriptorPoolCreateFlags">VkDescriptorPoolCreateFlags</a>, <a href="#VkDescriptorPoolSize">VkDescriptorPoolSize</a>, <a href="#VkStructureType">VkStructureType</a>, <a href="#vkCreateDescriptorPool">vkCreateDescriptorPool</a></p>
</div>
</div>
<div class="sect3">
<h4 id="_document_notes_434">Document Notes</h4>
<div class="paragraph">
<p>For more information, see the Vulkan Specification at URL</p>
</div>
<div class="paragraph">
<p><a href="https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VkDescriptorPoolCreateInfo" class="bare">https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VkDescriptorPoolCreateInfo</a></p>
</div>
<div class="paragraph">
<p>This page is extracted from the Vulkan Specification.
Fixes and changes should be made to the Specification, not directly.</p>
</div>
<div style="page-break-after: always;"></div>
</div>
</div>
<div class="sect2">
<h3 id="_vkdescriptorpoolinlineuniformblockcreateinfoext3">VkDescriptorPoolInlineUniformBlockCreateInfoEXT(3)</h3>
<div class="sect3">
<h4 id="_name_435">Name</h4>
<div class="paragraph">
<p>VkDescriptorPoolInlineUniformBlockCreateInfoEXT - Structure specifying the maximum number of inline uniform block bindings of a newly created descriptor pool</p>
</div>
</div>
<div class="sect3">
<h4 id="_c_specification_435">C Specification</h4>
<div class="paragraph">
<p>In order to be able to allocate descriptor sets having
<a href="vkspec.html#descriptorsets-inlineuniformblock">inline uniform block</a> bindings the
descriptor pool <strong class="purple">must</strong> be created with specifying the inline uniform block
binding capacity of the descriptor pool, in addition to the total inline
uniform data capacity in bytes which is specified through an instance of the
<a href="#VkDescriptorPoolSize">VkDescriptorPoolSize</a> structure with a <code>descriptorType</code> value of
<code>VK_DESCRIPTOR_TYPE_INLINE_UNIFORM_BLOCK_EXT</code>.
This <strong class="purple">can</strong> be done by chaining an instance of the
<code>VkDescriptorPoolInlineUniformBlockCreateInfoEXT</code> structure to the
<code>pNext</code> chain of <code>VkDescriptorPoolCreateInfo</code>.</p>
</div>
<div class="paragraph">
<p>The <code>VkDescriptorPoolInlineUniformBlockCreateInfoEXT</code> structure is
defined as:</p>
</div>
<div id="VkDescriptorPoolInlineUniformBlockCreateInfoEXT" class="listingblock">
<div class="content">
<pre class="highlight"><code class="language-c++" data-lang="c++">typedef struct VkDescriptorPoolInlineUniformBlockCreateInfoEXT {
    VkStructureType    sType;
    const void*        pNext;
    uint32_t           maxInlineUniformBlockBindings;
} VkDescriptorPoolInlineUniformBlockCreateInfoEXT;</code></pre>
</div>
</div>
</div>
<div class="sect3">
<h4 id="_members_72">Members</h4>
<div class="ulist">
<ul>
<li>
<p><code>sType</code> is the type of this structure.</p>
</li>
<li>
<p><code>pNext</code> is <code>NULL</code> or a pointer to an extension-specific structure.</p>
</li>
<li>
<p><code>maxInlineUniformBlockBindings</code> is the number of inline uniform
block bindings to allocate.</p>
</li>
</ul>
</div>
</div>
<div class="sect3">
<h4 id="_description_435">Description</h4>
<div class="sidebarblock">
<div class="content">
<div class="title">Valid Usage (Implicit)</div>
<div class="ulist">
<ul>
<li>
<p><a id="VUID-VkDescriptorPoolInlineUniformBlockCreateInfoEXT-sType-sType"></a> <code>sType</code> <strong class="purple">must</strong> be <code>VK_STRUCTURE_TYPE_DESCRIPTOR_POOL_INLINE_UNIFORM_BLOCK_CREATE_INFO_EXT</code></p>
</li>
</ul>
</div>
</div>
</div>
</div>
<div class="sect3">
<h4 id="_see_also_435">See Also</h4>
<div class="paragraph">
<p><a href="#VkStructureType">VkStructureType</a></p>
</div>
</div>
<div class="sect3">
<h4 id="_document_notes_435">Document Notes</h4>
<div class="paragraph">
<p>For more information, see the Vulkan Specification at URL</p>
</div>
<div class="paragraph">
<p><a href="https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VkDescriptorPoolInlineUniformBlockCreateInfoEXT" class="bare">https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VkDescriptorPoolInlineUniformBlockCreateInfoEXT</a></p>
</div>
<div class="paragraph">
<p>This page is extracted from the Vulkan Specification.
Fixes and changes should be made to the Specification, not directly.</p>
</div>
<div style="page-break-after: always;"></div>
</div>
</div>
<div class="sect2">
<h3 id="_vkdescriptorpoolsize3">VkDescriptorPoolSize(3)</h3>
<div class="sect3">
<h4 id="_name_436">Name</h4>
<div class="paragraph">
<p>VkDescriptorPoolSize - Structure specifying descriptor pool size</p>
</div>
</div>
<div class="sect3">
<h4 id="_c_specification_436">C Specification</h4>
<div class="paragraph">
<p>The <code>VkDescriptorPoolSize</code> structure is defined as:</p>
</div>
<div id="VkDescriptorPoolSize" class="listingblock">
<div class="content">
<pre class="highlight"><code class="language-c++" data-lang="c++">typedef struct VkDescriptorPoolSize {
    VkDescriptorType    type;
    uint32_t            descriptorCount;
} VkDescriptorPoolSize;</code></pre>
</div>
</div>
</div>
<div class="sect3">
<h4 id="_members_73">Members</h4>
<div class="ulist">
<ul>
<li>
<p><code>type</code> is the type of descriptor.</p>
</li>
<li>
<p><code>descriptorCount</code> is the number of descriptors of that type to
allocate.
If <code>type</code> is <code>VK_DESCRIPTOR_TYPE_INLINE_UNIFORM_BLOCK_EXT</code> then
<code>descriptorCount</code> is the number of bytes to allocate for descriptors
of this type.</p>
</li>
</ul>
</div>
</div>
<div class="sect3">
<h4 id="_description_436">Description</h4>
<div class="sidebarblock">
<div class="content">
<div class="title">Valid Usage</div>
<div class="ulist">
<ul>
<li>
<p><a id="VUID-VkDescriptorPoolSize-descriptorCount-00302"></a>
<code>descriptorCount</code> <strong class="purple">must</strong> be greater than <code>0</code></p>
</li>
<li>
<p><a id="VUID-VkDescriptorPoolSize-type-02218"></a>
If <code>type</code> is <code>VK_DESCRIPTOR_TYPE_INLINE_UNIFORM_BLOCK_EXT</code> then
<code>descriptorCount</code> <strong class="purple">must</strong> be a multiple of <code>4</code></p>
</li>
</ul>
</div>
</div>
</div>
<div class="sidebarblock">
<div class="content">
<div class="title">Valid Usage (Implicit)</div>
<div class="ulist">
<ul>
<li>
<p><a id="VUID-VkDescriptorPoolSize-type-parameter"></a> <code>type</code> <strong class="purple">must</strong> be a valid <a href="#VkDescriptorType">VkDescriptorType</a> value</p>
</li>
</ul>
</div>
</div>
</div>
</div>
<div class="sect3">
<h4 id="_see_also_436">See Also</h4>
<div class="paragraph">
<p><a href="#VkDescriptorPoolCreateInfo">VkDescriptorPoolCreateInfo</a>, <a href="#VkDescriptorType">VkDescriptorType</a></p>
</div>
</div>
<div class="sect3">
<h4 id="_document_notes_436">Document Notes</h4>
<div class="paragraph">
<p>For more information, see the Vulkan Specification at URL</p>
</div>
<div class="paragraph">
<p><a href="https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VkDescriptorPoolSize" class="bare">https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VkDescriptorPoolSize</a></p>
</div>
<div class="paragraph">
<p>This page is extracted from the Vulkan Specification.
Fixes and changes should be made to the Specification, not directly.</p>
</div>
<div style="page-break-after: always;"></div>
</div>
</div>
<div class="sect2">
<h3 id="_vkdescriptorsetallocateinfo3">VkDescriptorSetAllocateInfo(3)</h3>
<div class="sect3">
<h4 id="_name_437">Name</h4>
<div class="paragraph">
<p>VkDescriptorSetAllocateInfo - Structure specifying the allocation parameters for descriptor sets</p>
</div>
</div>
<div class="sect3">
<h4 id="_c_specification_437">C Specification</h4>
<div class="paragraph">
<p>The <code>VkDescriptorSetAllocateInfo</code> structure is defined as:</p>
</div>
<div id="VkDescriptorSetAllocateInfo" class="listingblock">
<div class="content">
<pre class="highlight"><code class="language-c++" data-lang="c++">typedef struct VkDescriptorSetAllocateInfo {
    VkStructureType                 sType;
    const void*                     pNext;
    VkDescriptorPool                descriptorPool;
    uint32_t                        descriptorSetCount;
    const VkDescriptorSetLayout*    pSetLayouts;
} VkDescriptorSetAllocateInfo;</code></pre>
</div>
</div>
</div>
<div class="sect3">
<h4 id="_members_74">Members</h4>
<div class="ulist">
<ul>
<li>
<p><code>sType</code> is the type of this structure.</p>
</li>
<li>
<p><code>pNext</code> is <code>NULL</code> or a pointer to an extension-specific structure.</p>
</li>
<li>
<p><code>descriptorPool</code> is the pool which the sets will be allocated from.</p>
</li>
<li>
<p><code>descriptorSetCount</code> determines the number of descriptor sets to be
allocated from the pool.</p>
</li>
<li>
<p><code>pSetLayouts</code> is an array of descriptor set layouts, with each
member specifying how the corresponding descriptor set is allocated.</p>
</li>
</ul>
</div>
</div>
<div class="sect3">
<h4 id="_description_437">Description</h4>
<div class="sidebarblock">
<div class="content">
<div class="title">Valid Usage</div>
<div class="ulist">
<ul>
<li>
<p><a id="VUID-VkDescriptorSetAllocateInfo-pSetLayouts-00308"></a>
Each element of <code>pSetLayouts</code> <strong class="purple">must</strong> not have been created with
<code>VK_DESCRIPTOR_SET_LAYOUT_CREATE_PUSH_DESCRIPTOR_BIT_KHR</code> set</p>
</li>
<li>
<p><a id="VUID-VkDescriptorSetAllocateInfo-pSetLayouts-03044"></a>
If any element of <code>pSetLayouts</code> was created with the
<code>VK_DESCRIPTOR_SET_LAYOUT_CREATE_UPDATE_AFTER_BIND_POOL_BIT_EXT</code> bit
set, <code>descriptorPool</code> <strong class="purple">must</strong> have been created with the
<code>VK_DESCRIPTOR_POOL_CREATE_UPDATE_AFTER_BIND_BIT_EXT</code> flag set</p>
</li>
</ul>
</div>
</div>
</div>
<div class="sidebarblock">
<div class="content">
<div class="title">Valid Usage (Implicit)</div>
<div class="ulist">
<ul>
<li>
<p><a id="VUID-VkDescriptorSetAllocateInfo-sType-sType"></a> <code>sType</code> <strong class="purple">must</strong> be <code>VK_STRUCTURE_TYPE_DESCRIPTOR_SET_ALLOCATE_INFO</code></p>
</li>
<li>
<p><a id="VUID-VkDescriptorSetAllocateInfo-pNext-pNext"></a> <code>pNext</code> <strong class="purple">must</strong> be <code>NULL</code> or a pointer to a valid instance of <a href="#VkDescriptorSetVariableDescriptorCountAllocateInfoEXT">VkDescriptorSetVariableDescriptorCountAllocateInfoEXT</a></p>
</li>
<li>
<p><a id="VUID-VkDescriptorSetAllocateInfo-descriptorPool-parameter"></a> <code>descriptorPool</code> <strong class="purple">must</strong> be a valid <code>VkDescriptorPool</code> handle</p>
</li>
<li>
<p><a id="VUID-VkDescriptorSetAllocateInfo-pSetLayouts-parameter"></a> <code>pSetLayouts</code> <strong class="purple">must</strong> be a valid pointer to an array of <code>descriptorSetCount</code> valid <code>VkDescriptorSetLayout</code> handles</p>
</li>
<li>
<p><a id="VUID-VkDescriptorSetAllocateInfo-descriptorSetCount-arraylength"></a> <code>descriptorSetCount</code> <strong class="purple">must</strong> be greater than <code>0</code></p>
</li>
<li>
<p><a id="VUID-VkDescriptorSetAllocateInfo-commonparent"></a> Both of <code>descriptorPool</code>, and the elements of <code>pSetLayouts</code> <strong class="purple">must</strong> have been created, allocated, or retrieved from the same <code>VkDevice</code></p>
</li>
</ul>
</div>
</div>
</div>
</div>
<div class="sect3">
<h4 id="_see_also_437">See Also</h4>
<div class="paragraph">
<p><a href="#VkDescriptorPool">VkDescriptorPool</a>, <a href="#VkDescriptorSetLayout">VkDescriptorSetLayout</a>, <a href="#VkStructureType">VkStructureType</a>, <a href="#vkAllocateDescriptorSets">vkAllocateDescriptorSets</a></p>
</div>
</div>
<div class="sect3">
<h4 id="_document_notes_437">Document Notes</h4>
<div class="paragraph">
<p>For more information, see the Vulkan Specification at URL</p>
</div>
<div class="paragraph">
<p><a href="https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VkDescriptorSetAllocateInfo" class="bare">https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VkDescriptorSetAllocateInfo</a></p>
</div>
<div class="paragraph">
<p>This page is extracted from the Vulkan Specification.
Fixes and changes should be made to the Specification, not directly.</p>
</div>
<div style="page-break-after: always;"></div>
</div>
</div>
<div class="sect2">
<h3 id="_vkdescriptorsetlayoutbinding3">VkDescriptorSetLayoutBinding(3)</h3>
<div class="sect3">
<h4 id="_name_438">Name</h4>
<div class="paragraph">
<p>VkDescriptorSetLayoutBinding - Structure specifying a descriptor set layout binding</p>
</div>
</div>
<div class="sect3">
<h4 id="_c_specification_438">C Specification</h4>
<div class="paragraph">
<p>The <code>VkDescriptorSetLayoutBinding</code> structure is defined as:</p>
</div>
<div id="VkDescriptorSetLayoutBinding" class="listingblock">
<div class="content">
<pre class="highlight"><code class="language-c++" data-lang="c++">typedef struct VkDescriptorSetLayoutBinding {
    uint32_t              binding;
    VkDescriptorType      descriptorType;
    uint32_t              descriptorCount;
    VkShaderStageFlags    stageFlags;
    const VkSampler*      pImmutableSamplers;
} VkDescriptorSetLayoutBinding;</code></pre>
</div>
</div>
</div>
<div class="sect3">
<h4 id="_members_75">Members</h4>
<div class="ulist">
<ul>
<li>
<p><code>binding</code> is the binding number of this entry and corresponds to a
resource of the same binding number in the shader stages.</p>
</li>
<li>
<p><code>descriptorType</code> is a <a href="#VkDescriptorType">VkDescriptorType</a> specifying which type
of resource descriptors are used for this binding.</p>
</li>
<li>
<p><code>descriptorCount</code> is the number of descriptors contained in the
binding, accessed in a shader as an array
, except if <code>descriptorType</code> is
<code>VK_DESCRIPTOR_TYPE_INLINE_UNIFORM_BLOCK_EXT</code> in which case
<code>descriptorCount</code> is the size in bytes of the inline uniform block
.
If <code>descriptorCount</code> is zero this binding entry is reserved and the
resource <strong class="purple">must</strong> not be accessed from any stage via this binding within
any pipeline using the set layout.</p>
</li>
<li>
<p><code>stageFlags</code> member is a bitmask of <a href="#VkShaderStageFlagBits">VkShaderStageFlagBits</a>
specifying which pipeline shader stages <strong class="purple">can</strong> access a resource for this
binding.
<code>VK_SHADER_STAGE_ALL</code> is a shorthand specifying that all defined
shader stages, including any additional stages defined by extensions,
<strong class="purple">can</strong> access the resource.</p>
<div class="paragraph">
<p>If a shader stage is not included in <code>stageFlags</code>, then a resource <strong class="purple">must</strong>
not be accessed from that stage via this binding within any pipeline using
the set layout.
Other than input attachments which are limited to the fragment shader, there
are no limitations on what combinations of stages <strong class="purple">can</strong> use a descriptor
binding, and in particular a binding <strong class="purple">can</strong> be used by both graphics stages
and the compute stage.</p>
</div>
</li>
</ul>
</div>
</div>
<div class="sect3">
<h4 id="_description_438">Description</h4>
<div class="ulist">
<ul>
<li>
<p><code>pImmutableSamplers</code> affects initialization of samplers.
If <code>descriptorType</code> specifies a <code>VK_DESCRIPTOR_TYPE_SAMPLER</code> or
<code>VK_DESCRIPTOR_TYPE_COMBINED_IMAGE_SAMPLER</code> type descriptor, then
<code>pImmutableSamplers</code> <strong class="purple">can</strong> be used to initialize a set of <em>immutable
samplers</em>.
Immutable samplers are permanently bound into the set layout; later
binding a sampler into an immutable sampler slot in a descriptor set is
not allowed.
If <code>pImmutableSamplers</code> is not <code>NULL</code>, then it is considered to be a
pointer to an array of sampler handles that will be consumed by the set
layout and used for the corresponding binding.
If <code>pImmutableSamplers</code> is <code>NULL</code>, then the sampler slots are
dynamic and sampler handles <strong class="purple">must</strong> be bound into descriptor sets using
this layout.
If <code>descriptorType</code> is not one of these descriptor types, then
<code>pImmutableSamplers</code> is ignored.</p>
</li>
</ul>
</div>
<div class="paragraph">
<p>The above layout definition allows the descriptor bindings to be specified
sparsely such that not all binding numbers between 0 and the maximum binding
number need to be specified in the <code>pBindings</code> array.
Bindings that are not specified have a <code>descriptorCount</code> and
<code>stageFlags</code> of zero, and the value of <code>descriptorType</code> is
undefined.
However, all binding numbers between 0 and the maximum binding number in the
<a href="#VkDescriptorSetLayoutCreateInfo">VkDescriptorSetLayoutCreateInfo</a>::<code>pBindings</code> array <strong class="purple">may</strong> consume
memory in the descriptor set layout even if not all descriptor bindings are
used, though it <strong class="purple">should</strong> not consume additional memory from the descriptor
pool.</p>
</div>
<div class="admonitionblock note">
<table>
<tr>
<td class="icon">
<i class="fa icon-note" title="Note"></i>
</td>
<td class="content">
<div class="title">Note</div>
<div class="paragraph">
<p>The maximum binding number specified <strong class="purple">should</strong> be as compact as possible to
avoid wasted memory.</p>
</div>
</td>
</tr>
</table>
</div>
<div class="sidebarblock">
<div class="content">
<div class="title">Valid Usage</div>
<div class="ulist">
<ul>
<li>
<p><a id="VUID-VkDescriptorSetLayoutBinding-descriptorType-00282"></a>
If <code>descriptorType</code> is <code>VK_DESCRIPTOR_TYPE_SAMPLER</code> or
<code>VK_DESCRIPTOR_TYPE_COMBINED_IMAGE_SAMPLER</code>, and
<code>descriptorCount</code> is not <code>0</code> and <code>pImmutableSamplers</code> is not
<code>NULL</code>, <code>pImmutableSamplers</code> <strong class="purple">must</strong> be a valid pointer to an array of
<code>descriptorCount</code> valid <code>VkSampler</code> handles</p>
</li>
<li>
<p><a id="VUID-VkDescriptorSetLayoutBinding-descriptorType-02209"></a>
If <code>descriptorType</code> is
<code>VK_DESCRIPTOR_TYPE_INLINE_UNIFORM_BLOCK_EXT</code> then
<code>descriptorCount</code> <strong class="purple">must</strong> be a multiple of <code>4</code></p>
</li>
<li>
<p><a id="VUID-VkDescriptorSetLayoutBinding-descriptorType-02210"></a>
If <code>descriptorType</code> is
<code>VK_DESCRIPTOR_TYPE_INLINE_UNIFORM_BLOCK_EXT</code> then
<code>descriptorCount</code> <strong class="purple">must</strong> be less than or equal to
<code>VkPhysicalDeviceInlineUniformBlockPropertiesEXT</code>::<code>maxInlineUniformBlockSize</code></p>
</li>
<li>
<p><a id="VUID-VkDescriptorSetLayoutBinding-descriptorCount-00283"></a>
If <code>descriptorCount</code> is not <code>0</code>, <code>stageFlags</code> <strong class="purple">must</strong> be a valid
combination of <a href="#VkShaderStageFlagBits">VkShaderStageFlagBits</a> values</p>
</li>
<li>
<p><a id="VUID-VkDescriptorSetLayoutBinding-descriptorType-01510"></a>
If <code>descriptorType</code> is <code>VK_DESCRIPTOR_TYPE_INPUT_ATTACHMENT</code> and
<code>descriptorCount</code> is not <code>0</code>, then <code>stageFlags</code> <strong class="purple">must</strong> be <code>0</code> or
<code>VK_SHADER_STAGE_FRAGMENT_BIT</code></p>
</li>
</ul>
</div>
</div>
</div>
<div class="sidebarblock">
<div class="content">
<div class="title">Valid Usage (Implicit)</div>
<div class="ulist">
<ul>
<li>
<p><a id="VUID-VkDescriptorSetLayoutBinding-descriptorType-parameter"></a> <code>descriptorType</code> <strong class="purple">must</strong> be a valid <a href="#VkDescriptorType">VkDescriptorType</a> value</p>
</li>
</ul>
</div>
</div>
</div>
</div>
<div class="sect3">
<h4 id="_see_also_438">See Also</h4>
<div class="paragraph">
<p><a href="#VkDescriptorSetLayoutCreateInfo">VkDescriptorSetLayoutCreateInfo</a>, <a href="#VkDescriptorType">VkDescriptorType</a>, <a href="#VkSampler">VkSampler</a>, <a href="#VkShaderStageFlags">VkShaderStageFlags</a></p>
</div>
</div>
<div class="sect3">
<h4 id="_document_notes_438">Document Notes</h4>
<div class="paragraph">
<p>For more information, see the Vulkan Specification at URL</p>
</div>
<div class="paragraph">
<p><a href="https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VkDescriptorSetLayoutBinding" class="bare">https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VkDescriptorSetLayoutBinding</a></p>
</div>
<div class="paragraph">
<p>This page is extracted from the Vulkan Specification.
Fixes and changes should be made to the Specification, not directly.</p>
</div>
<div style="page-break-after: always;"></div>
</div>
</div>
<div class="sect2">
<h3 id="_vkdescriptorsetlayoutbindingflagscreateinfoext3">VkDescriptorSetLayoutBindingFlagsCreateInfoEXT(3)</h3>
<div class="sect3">
<h4 id="_name_439">Name</h4>
<div class="paragraph">
<p>VkDescriptorSetLayoutBindingFlagsCreateInfoEXT - Structure specifying creation flags for descriptor set layout bindings</p>
</div>
</div>
<div class="sect3">
<h4 id="_c_specification_439">C Specification</h4>
<div class="paragraph">
<p>If the <code>pNext</code> chain of a <a href="#VkDescriptorSetLayoutCreateInfo">VkDescriptorSetLayoutCreateInfo</a>
structure includes a <code>VkDescriptorSetLayoutBindingFlagsCreateInfoEXT</code>
structure, then that structure includes an array of flags, one for each
descriptor set layout binding.</p>
</div>
<div class="paragraph">
<p>The <a href="#VkDescriptorSetLayoutBindingFlagsCreateInfoEXT">VkDescriptorSetLayoutBindingFlagsCreateInfoEXT</a> structure is
defined as:</p>
</div>
<div id="VkDescriptorSetLayoutBindingFlagsCreateInfoEXT" class="listingblock">
<div class="content">
<pre class="highlight"><code class="language-c++" data-lang="c++">typedef struct VkDescriptorSetLayoutBindingFlagsCreateInfoEXT {
    VkStructureType                       sType;
    const void*                           pNext;
    uint32_t                              bindingCount;
    const VkDescriptorBindingFlagsEXT*    pBindingFlags;
} VkDescriptorSetLayoutBindingFlagsCreateInfoEXT;</code></pre>
</div>
</div>
</div>
<div class="sect3">
<h4 id="_members_76">Members</h4>
<div class="ulist">
<ul>
<li>
<p><code>sType</code> is the type of this structure.</p>
</li>
<li>
<p><code>pNext</code> is <code>NULL</code> or a pointer to an extension-specific structure.</p>
</li>
<li>
<p><code>bindingCount</code> is zero or the number of elements in
<code>pBindingFlags</code>.</p>
</li>
<li>
<p><code>pBindingFlags</code> is a pointer to an array of
<a href="#VkDescriptorBindingFlagsEXT">VkDescriptorBindingFlagsEXT</a> bitfields, one for each descriptor set
layout binding.</p>
</li>
</ul>
</div>
</div>
<div class="sect3">
<h4 id="_description_439">Description</h4>
<div class="paragraph">
<p>If <code>bindingCount</code> is zero or if this structure is not in the <code>pNext</code>
chain, the <a href="#VkDescriptorBindingFlagsEXT">VkDescriptorBindingFlagsEXT</a> for each descriptor set layout
binding is considered to be zero.
Otherwise, the descriptor set layout binding at
<a href="#VkDescriptorSetLayoutCreateInfo">VkDescriptorSetLayoutCreateInfo</a>::<code>pBindings</code>[i] uses the flags in
<code>pBindingFlags</code>[i].</p>
</div>
<div class="sidebarblock">
<div class="content">
<div class="title">Valid Usage</div>
<div class="ulist">
<ul>
<li>
<p><a id="VUID-VkDescriptorSetLayoutBindingFlagsCreateInfoEXT-bindingCount-03002"></a>
If <code>bindingCount</code> is not zero, <code>bindingCount</code> <strong class="purple">must</strong> equal
<a href="#VkDescriptorSetLayoutCreateInfo">VkDescriptorSetLayoutCreateInfo</a>::<code>bindingCount</code></p>
</li>
<li>
<p><a id="VUID-VkDescriptorSetLayoutBindingFlagsCreateInfoEXT-flags-03003"></a>
If <a href="#VkDescriptorSetLayoutCreateInfo">VkDescriptorSetLayoutCreateInfo</a>::<code>flags</code> includes
<code>VK_DESCRIPTOR_SET_LAYOUT_CREATE_PUSH_DESCRIPTOR_BIT_KHR</code>, then all
elements of <code>pBindingFlags</code> <strong class="purple">must</strong> not include
<code>VK_DESCRIPTOR_BINDING_UPDATE_AFTER_BIND_BIT_EXT</code>,
<code>VK_DESCRIPTOR_BINDING_UPDATE_UNUSED_WHILE_PENDING_BIT_EXT</code>, or
<code>VK_DESCRIPTOR_BINDING_VARIABLE_DESCRIPTOR_COUNT_BIT_EXT</code></p>
</li>
<li>
<p><a id="VUID-VkDescriptorSetLayoutBindingFlagsCreateInfoEXT-pBindingFlags-03004"></a>
If an element of <code>pBindingFlags</code> includes
<code>VK_DESCRIPTOR_BINDING_VARIABLE_DESCRIPTOR_COUNT_BIT_EXT</code>, then all
other elements of <a href="#VkDescriptorSetLayoutCreateInfo">VkDescriptorSetLayoutCreateInfo</a>::<code>pBindings</code>
<strong class="purple">must</strong> have a smaller value of <code>binding</code></p>
</li>
<li>
<p><a id="VUID-VkDescriptorSetLayoutBindingFlagsCreateInfoEXT-descriptorBindingUniformBufferUpdateAfterBind-03005"></a>
If
<a href="#VkPhysicalDeviceDescriptorIndexingFeaturesEXT">VkPhysicalDeviceDescriptorIndexingFeaturesEXT</a>::<code>descriptorBindingUniformBufferUpdateAfterBind</code>
is not enabled, all bindings with descriptor type
<code>VK_DESCRIPTOR_TYPE_UNIFORM_BUFFER</code> <strong class="purple">must</strong> not use
<code>VK_DESCRIPTOR_BINDING_UPDATE_AFTER_BIND_BIT_EXT</code></p>
</li>
<li>
<p><a id="VUID-VkDescriptorSetLayoutBindingFlagsCreateInfoEXT-descriptorBindingSampledImageUpdateAfterBind-03006"></a>
If
<a href="#VkPhysicalDeviceDescriptorIndexingFeaturesEXT">VkPhysicalDeviceDescriptorIndexingFeaturesEXT</a>::<code>descriptorBindingSampledImageUpdateAfterBind</code>
is not enabled, all bindings with descriptor type
<code>VK_DESCRIPTOR_TYPE_SAMPLER</code>,
<code>VK_DESCRIPTOR_TYPE_COMBINED_IMAGE_SAMPLER</code>, or
<code>VK_DESCRIPTOR_TYPE_SAMPLED_IMAGE</code> <strong class="purple">must</strong> not use
<code>VK_DESCRIPTOR_BINDING_UPDATE_AFTER_BIND_BIT_EXT</code></p>
</li>
<li>
<p><a id="VUID-VkDescriptorSetLayoutBindingFlagsCreateInfoEXT-descriptorBindingStorageImageUpdateAfterBind-03007"></a>
If
<a href="#VkPhysicalDeviceDescriptorIndexingFeaturesEXT">VkPhysicalDeviceDescriptorIndexingFeaturesEXT</a>::<code>descriptorBindingStorageImageUpdateAfterBind</code>
is not enabled, all bindings with descriptor type
<code>VK_DESCRIPTOR_TYPE_STORAGE_IMAGE</code> <strong class="purple">must</strong> not use
<code>VK_DESCRIPTOR_BINDING_UPDATE_AFTER_BIND_BIT_EXT</code></p>
</li>
<li>
<p><a id="VUID-VkDescriptorSetLayoutBindingFlagsCreateInfoEXT-descriptorBindingStorageBufferUpdateAfterBind-03008"></a>
If
<a href="#VkPhysicalDeviceDescriptorIndexingFeaturesEXT">VkPhysicalDeviceDescriptorIndexingFeaturesEXT</a>::<code>descriptorBindingStorageBufferUpdateAfterBind</code>
is not enabled, all bindings with descriptor type
<code>VK_DESCRIPTOR_TYPE_STORAGE_BUFFER</code> <strong class="purple">must</strong> not use
<code>VK_DESCRIPTOR_BINDING_UPDATE_AFTER_BIND_BIT_EXT</code></p>
</li>
<li>
<p><a id="VUID-VkDescriptorSetLayoutBindingFlagsCreateInfoEXT-descriptorBindingUniformTexelBufferUpdateAfterBind-03009"></a>
If
<a href="#VkPhysicalDeviceDescriptorIndexingFeaturesEXT">VkPhysicalDeviceDescriptorIndexingFeaturesEXT</a>::<code>descriptorBindingUniformTexelBufferUpdateAfterBind</code>
is not enabled, all bindings with descriptor type
<code>VK_DESCRIPTOR_TYPE_UNIFORM_TEXEL_BUFFER</code> <strong class="purple">must</strong> not use
<code>VK_DESCRIPTOR_BINDING_UPDATE_AFTER_BIND_BIT_EXT</code></p>
</li>
<li>
<p><a id="VUID-VkDescriptorSetLayoutBindingFlagsCreateInfoEXT-descriptorBindingStorageTexelBufferUpdateAfterBind-03010"></a>
If
<a href="#VkPhysicalDeviceDescriptorIndexingFeaturesEXT">VkPhysicalDeviceDescriptorIndexingFeaturesEXT</a>::<code>descriptorBindingStorageTexelBufferUpdateAfterBind</code>
is not enabled, all bindings with descriptor type
<code>VK_DESCRIPTOR_TYPE_STORAGE_TEXEL_BUFFER</code> <strong class="purple">must</strong> not use
<code>VK_DESCRIPTOR_BINDING_UPDATE_AFTER_BIND_BIT_EXT</code></p>
</li>
<li>
<p><a id="VUID-VkDescriptorSetLayoutBindingFlagsCreateInfoEXT-descriptorBindingInlineUniformBlockUpdateAfterBind-02211"></a>
If
<a href="#VkPhysicalDeviceInlineUniformBlockFeaturesEXT">VkPhysicalDeviceInlineUniformBlockFeaturesEXT</a>::<code>descriptorBindingInlineUniformBlockUpdateAfterBind</code>
is not enabled, all bindings with descriptor type
<code>VK_DESCRIPTOR_TYPE_INLINE_UNIFORM_BLOCK_EXT</code> <strong class="purple">must</strong> not use
<code>VK_DESCRIPTOR_BINDING_UPDATE_AFTER_BIND_BIT_EXT</code></p>
</li>
<li>
<p><a id="VUID-VkDescriptorSetLayoutBindingFlagsCreateInfoEXT-None-03011"></a>
All bindings with descriptor type
<code>VK_DESCRIPTOR_TYPE_INPUT_ATTACHMENT</code>,
<code>VK_DESCRIPTOR_TYPE_UNIFORM_BUFFER_DYNAMIC</code>, or
<code>VK_DESCRIPTOR_TYPE_STORAGE_BUFFER_DYNAMIC</code> <strong class="purple">must</strong> not use
<code>VK_DESCRIPTOR_BINDING_UPDATE_AFTER_BIND_BIT_EXT</code></p>
</li>
<li>
<p><a id="VUID-VkDescriptorSetLayoutBindingFlagsCreateInfoEXT-descriptorBindingUpdateUnusedWhilePending-03012"></a>
If
<a href="#VkPhysicalDeviceDescriptorIndexingFeaturesEXT">VkPhysicalDeviceDescriptorIndexingFeaturesEXT</a>::<code>descriptorBindingUpdateUnusedWhilePending</code>
is not enabled, all elements of <code>pBindingFlags</code> <strong class="purple">must</strong> not include
<code>VK_DESCRIPTOR_BINDING_UPDATE_UNUSED_WHILE_PENDING_BIT_EXT</code></p>
</li>
<li>
<p><a id="VUID-VkDescriptorSetLayoutBindingFlagsCreateInfoEXT-descriptorBindingPartiallyBound-03013"></a>
If
<a href="#VkPhysicalDeviceDescriptorIndexingFeaturesEXT">VkPhysicalDeviceDescriptorIndexingFeaturesEXT</a>::<code>descriptorBindingPartiallyBound</code>
is not enabled, all elements of <code>pBindingFlags</code> <strong class="purple">must</strong> not include
<code>VK_DESCRIPTOR_BINDING_PARTIALLY_BOUND_BIT_EXT</code></p>
</li>
<li>
<p><a id="VUID-VkDescriptorSetLayoutBindingFlagsCreateInfoEXT-descriptorBindingVariableDescriptorCount-03014"></a>
If
<a href="#VkPhysicalDeviceDescriptorIndexingFeaturesEXT">VkPhysicalDeviceDescriptorIndexingFeaturesEXT</a>::<code>descriptorBindingVariableDescriptorCount</code>
is not enabled, all elements of <code>pBindingFlags</code> <strong class="purple">must</strong> not include
<code>VK_DESCRIPTOR_BINDING_VARIABLE_DESCRIPTOR_COUNT_BIT_EXT</code></p>
</li>
<li>
<p><a id="VUID-VkDescriptorSetLayoutBindingFlagsCreateInfoEXT-pBindingFlags-03015"></a>
If an element of <code>pBindingFlags</code> includes
<code>VK_DESCRIPTOR_BINDING_VARIABLE_DESCRIPTOR_COUNT_BIT_EXT</code>, that
element&#8217;s <code>descriptorType</code> <strong class="purple">must</strong> not be
<code>VK_DESCRIPTOR_TYPE_UNIFORM_BUFFER_DYNAMIC</code> or
<code>VK_DESCRIPTOR_TYPE_STORAGE_BUFFER_DYNAMIC</code></p>
</li>
</ul>
</div>
</div>
</div>
<div class="sidebarblock">
<div class="content">
<div class="title">Valid Usage (Implicit)</div>
<div class="ulist">
<ul>
<li>
<p><a id="VUID-VkDescriptorSetLayoutBindingFlagsCreateInfoEXT-sType-sType"></a> <code>sType</code> <strong class="purple">must</strong> be <code>VK_STRUCTURE_TYPE_DESCRIPTOR_SET_LAYOUT_BINDING_FLAGS_CREATE_INFO_EXT</code></p>
</li>
<li>
<p><a id="VUID-VkDescriptorSetLayoutBindingFlagsCreateInfoEXT-pBindingFlags-parameter"></a> If <code>bindingCount</code> is not <code>0</code>, and <code>pBindingFlags</code> is not <code>NULL</code>, <code>pBindingFlags</code> <strong class="purple">must</strong> be a valid pointer to an array of <code>bindingCount</code> valid combinations of <a href="#VkDescriptorBindingFlagBitsEXT">VkDescriptorBindingFlagBitsEXT</a> values</p>
</li>
</ul>
</div>
</div>
</div>
</div>
<div class="sect3">
<h4 id="_see_also_439">See Also</h4>
<div class="paragraph">
<p><a href="#VkDescriptorBindingFlagsEXT">VkDescriptorBindingFlagsEXT</a>, <a href="#VkStructureType">VkStructureType</a></p>
</div>
</div>
<div class="sect3">
<h4 id="_document_notes_439">Document Notes</h4>
<div class="paragraph">
<p>For more information, see the Vulkan Specification at URL</p>
</div>
<div class="paragraph">
<p><a href="https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VkDescriptorSetLayoutBindingFlagsCreateInfoEXT" class="bare">https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VkDescriptorSetLayoutBindingFlagsCreateInfoEXT</a></p>
</div>
<div class="paragraph">
<p>This page is extracted from the Vulkan Specification.
Fixes and changes should be made to the Specification, not directly.</p>
</div>
<div style="page-break-after: always;"></div>
</div>
</div>
<div class="sect2">
<h3 id="_vkdescriptorsetlayoutcreateinfo3">VkDescriptorSetLayoutCreateInfo(3)</h3>
<div class="sect3">
<h4 id="_name_440">Name</h4>
<div class="paragraph">
<p>VkDescriptorSetLayoutCreateInfo - Structure specifying parameters of a newly created descriptor set layout</p>
</div>
</div>
<div class="sect3">
<h4 id="_c_specification_440">C Specification</h4>
<div class="paragraph">
<p>Information about the descriptor set layout is passed in an instance of the
<code>VkDescriptorSetLayoutCreateInfo</code> structure:</p>
</div>
<div id="VkDescriptorSetLayoutCreateInfo" class="listingblock">
<div class="content">
<pre class="highlight"><code class="language-c++" data-lang="c++">typedef struct VkDescriptorSetLayoutCreateInfo {
    VkStructureType                        sType;
    const void*                            pNext;
    VkDescriptorSetLayoutCreateFlags       flags;
    uint32_t                               bindingCount;
    const VkDescriptorSetLayoutBinding*    pBindings;
} VkDescriptorSetLayoutCreateInfo;</code></pre>
</div>
</div>
</div>
<div class="sect3">
<h4 id="_members_77">Members</h4>
<div class="ulist">
<ul>
<li>
<p><code>sType</code> is the type of this structure.</p>
</li>
<li>
<p><code>pNext</code> is <code>NULL</code> or a pointer to an extension-specific structure.</p>
</li>
<li>
<p><code>flags</code> is a bitmask
of <a href="#VkDescriptorSetLayoutCreateFlagBits">VkDescriptorSetLayoutCreateFlagBits</a>
specifying options for descriptor set layout creation.</p>
</li>
<li>
<p><code>bindingCount</code> is the number of elements in <code>pBindings</code>.</p>
</li>
<li>
<p><code>pBindings</code> is a pointer to an array of
<a href="#VkDescriptorSetLayoutBinding">VkDescriptorSetLayoutBinding</a> structures.</p>
</li>
</ul>
</div>
</div>
<div class="sect3">
<h4 id="_description_440">Description</h4>
<div class="sidebarblock">
<div class="content">
<div class="title">Valid Usage</div>
<div class="ulist">
<ul>
<li>
<p><a id="VUID-VkDescriptorSetLayoutCreateInfo-binding-00279"></a>
The <a href="#VkDescriptorSetLayoutBinding">VkDescriptorSetLayoutBinding</a>::<code>binding</code> members of the
elements of the <code>pBindings</code> array <strong class="purple">must</strong> each have different values.</p>
</li>
<li>
<p><a id="VUID-VkDescriptorSetLayoutCreateInfo-flags-00280"></a>
If <code>flags</code> contains
<code>VK_DESCRIPTOR_SET_LAYOUT_CREATE_PUSH_DESCRIPTOR_BIT_KHR</code>, then all
elements of <code>pBindings</code> <strong class="purple">must</strong> not have a <code>descriptorType</code> of
<code>VK_DESCRIPTOR_TYPE_UNIFORM_BUFFER_DYNAMIC</code> or
<code>VK_DESCRIPTOR_TYPE_STORAGE_BUFFER_DYNAMIC</code></p>
</li>
<li>
<p><a id="VUID-VkDescriptorSetLayoutCreateInfo-flags-02208"></a>
If <code>flags</code> contains
<code>VK_DESCRIPTOR_SET_LAYOUT_CREATE_PUSH_DESCRIPTOR_BIT_KHR</code>, then all
elements of <code>pBindings</code> <strong class="purple">must</strong> not have a <code>descriptorType</code> of
<code>VK_DESCRIPTOR_TYPE_INLINE_UNIFORM_BLOCK_EXT</code></p>
</li>
<li>
<p><a id="VUID-VkDescriptorSetLayoutCreateInfo-flags-00281"></a>
If <code>flags</code> contains
<code>VK_DESCRIPTOR_SET_LAYOUT_CREATE_PUSH_DESCRIPTOR_BIT_KHR</code>, then the
total number of elements of all bindings <strong class="purple">must</strong> be less than or equal to
<a href="#VkPhysicalDevicePushDescriptorPropertiesKHR">VkPhysicalDevicePushDescriptorPropertiesKHR</a>::<code>maxPushDescriptors</code></p>
</li>
<li>
<p><a id="VUID-VkDescriptorSetLayoutCreateInfo-flags-03000"></a>
If any binding has the
<code>VK_DESCRIPTOR_BINDING_UPDATE_AFTER_BIND_BIT_EXT</code> bit set,
<code>flags</code> <strong class="purple">must</strong> include
<code>VK_DESCRIPTOR_SET_LAYOUT_CREATE_UPDATE_AFTER_BIND_POOL_BIT_EXT</code></p>
</li>
<li>
<p><a id="VUID-VkDescriptorSetLayoutCreateInfo-descriptorType-03001"></a>
If any binding has the
<code>VK_DESCRIPTOR_BINDING_UPDATE_AFTER_BIND_BIT_EXT</code> bit set, then all
bindings <strong class="purple">must</strong> not have <code>descriptorType</code> of
<code>VK_DESCRIPTOR_TYPE_UNIFORM_BUFFER_DYNAMIC</code> or
<code>VK_DESCRIPTOR_TYPE_STORAGE_BUFFER_DYNAMIC</code></p>
</li>
</ul>
</div>
</div>
</div>
<div class="sidebarblock">
<div class="content">
<div class="title">Valid Usage (Implicit)</div>
<div class="ulist">
<ul>
<li>
<p><a id="VUID-VkDescriptorSetLayoutCreateInfo-sType-sType"></a> <code>sType</code> <strong class="purple">must</strong> be <code>VK_STRUCTURE_TYPE_DESCRIPTOR_SET_LAYOUT_CREATE_INFO</code></p>
</li>
<li>
<p><a id="VUID-VkDescriptorSetLayoutCreateInfo-pNext-pNext"></a> <code>pNext</code> <strong class="purple">must</strong> be <code>NULL</code> or a pointer to a valid instance of <a href="#VkDescriptorSetLayoutBindingFlagsCreateInfoEXT">VkDescriptorSetLayoutBindingFlagsCreateInfoEXT</a></p>
</li>
<li>
<p><a id="VUID-VkDescriptorSetLayoutCreateInfo-flags-parameter"></a> <code>flags</code> <strong class="purple">must</strong> be a valid combination of <a href="#VkDescriptorSetLayoutCreateFlagBits">VkDescriptorSetLayoutCreateFlagBits</a> values</p>
</li>
<li>
<p><a id="VUID-VkDescriptorSetLayoutCreateInfo-pBindings-parameter"></a> If <code>bindingCount</code> is not <code>0</code>, <code>pBindings</code> <strong class="purple">must</strong> be a valid pointer to an array of <code>bindingCount</code> valid <code>VkDescriptorSetLayoutBinding</code> structures</p>
</li>
</ul>
</div>
</div>
</div>
</div>
<div class="sect3">
<h4 id="_see_also_440">See Also</h4>
<div class="paragraph">
<p><a href="#VkDescriptorSetLayoutBinding">VkDescriptorSetLayoutBinding</a>, <a href="#VkDescriptorSetLayoutCreateFlags">VkDescriptorSetLayoutCreateFlags</a>, <a href="#VkStructureType">VkStructureType</a>, <a href="#vkCreateDescriptorSetLayout">vkCreateDescriptorSetLayout</a>, <a href="#vkGetDescriptorSetLayoutSupport">vkGetDescriptorSetLayoutSupport</a>, <a href="#vkGetDescriptorSetLayoutSupportKHR">vkGetDescriptorSetLayoutSupportKHR</a></p>
</div>
</div>
<div class="sect3">
<h4 id="_document_notes_440">Document Notes</h4>
<div class="paragraph">
<p>For more information, see the Vulkan Specification at URL</p>
</div>
<div class="paragraph">
<p><a href="https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VkDescriptorSetLayoutCreateInfo" class="bare">https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VkDescriptorSetLayoutCreateInfo</a></p>
</div>
<div class="paragraph">
<p>This page is extracted from the Vulkan Specification.
Fixes and changes should be made to the Specification, not directly.</p>
</div>
<div style="page-break-after: always;"></div>
</div>
</div>
<div class="sect2">
<h3 id="_vkdescriptorsetlayoutsupport3">VkDescriptorSetLayoutSupport(3)</h3>
<div class="sect3">
<h4 id="_name_441">Name</h4>
<div class="paragraph">
<p>VkDescriptorSetLayoutSupport - Structure returning information about whether a descriptor set layout can be supported</p>
</div>
</div>
<div class="sect3">
<h4 id="_c_specification_441">C Specification</h4>
<div class="paragraph">
<p>Information about support for the descriptor set layout is returned in an
instance of the <code>VkDescriptorSetLayoutSupport</code> structure:</p>
</div>
<div id="VkDescriptorSetLayoutSupport" class="listingblock">
<div class="content">
<pre class="highlight"><code class="language-c++" data-lang="c++">typedef struct VkDescriptorSetLayoutSupport {
    VkStructureType    sType;
    void*              pNext;
    VkBool32           supported;
} VkDescriptorSetLayoutSupport;</code></pre>
</div>
</div>
<div class="paragraph">
<p>or the equivalent</p>
</div>
<div id="VkDescriptorSetLayoutSupportKHR" class="listingblock">
<div class="content">
<pre class="highlight"><code class="language-c++" data-lang="c++">typedef VkDescriptorSetLayoutSupport VkDescriptorSetLayoutSupportKHR;</code></pre>
</div>
</div>
</div>
<div class="sect3">
<h4 id="_members_78">Members</h4>
<div class="ulist">
<ul>
<li>
<p><code>sType</code> is the type of this structure.</p>
</li>
<li>
<p><code>pNext</code> is <code>NULL</code> or a pointer to an extension-specific structure.</p>
</li>
<li>
<p><code>supported</code> specifies whether the descriptor set layout <strong class="purple">can</strong> be
created.</p>
</li>
</ul>
</div>
</div>
<div class="sect3">
<h4 id="_description_441">Description</h4>
<div class="paragraph">
<p><code>supported</code> is set to <code>VK_TRUE</code> if the descriptor set <strong class="purple">can</strong> be
created, or else is set to <code>VK_FALSE</code>.</p>
</div>
<div class="sidebarblock">
<div class="content">
<div class="title">Valid Usage (Implicit)</div>
<div class="ulist">
<ul>
<li>
<p><a id="VUID-VkDescriptorSetLayoutSupport-sType-sType"></a> <code>sType</code> <strong class="purple">must</strong> be <code>VK_STRUCTURE_TYPE_DESCRIPTOR_SET_LAYOUT_SUPPORT</code></p>
</li>
<li>
<p><a id="VUID-VkDescriptorSetLayoutSupport-pNext-pNext"></a> <code>pNext</code> <strong class="purple">must</strong> be <code>NULL</code> or a pointer to a valid instance of <a href="#VkDescriptorSetVariableDescriptorCountLayoutSupportEXT">VkDescriptorSetVariableDescriptorCountLayoutSupportEXT</a></p>
</li>
</ul>
</div>
</div>
</div>
</div>
<div class="sect3">
<h4 id="_see_also_441">See Also</h4>
<div class="paragraph">
<p><code>VkBool32</code>, <a href="#VkStructureType">VkStructureType</a>, <a href="#vkGetDescriptorSetLayoutSupport">vkGetDescriptorSetLayoutSupport</a>, <a href="#vkGetDescriptorSetLayoutSupportKHR">vkGetDescriptorSetLayoutSupportKHR</a></p>
</div>
</div>
<div class="sect3">
<h4 id="_document_notes_441">Document Notes</h4>
<div class="paragraph">
<p>For more information, see the Vulkan Specification at URL</p>
</div>
<div class="paragraph">
<p><a href="https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VkDescriptorSetLayoutSupport" class="bare">https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VkDescriptorSetLayoutSupport</a></p>
</div>
<div class="paragraph">
<p>This page is extracted from the Vulkan Specification.
Fixes and changes should be made to the Specification, not directly.</p>
</div>
<div style="page-break-after: always;"></div>
</div>
</div>
<div class="sect2">
<h3 id="_vkdescriptorsetvariabledescriptorcountallocateinfoext3">VkDescriptorSetVariableDescriptorCountAllocateInfoEXT(3)</h3>
<div class="sect3">
<h4 id="_name_442">Name</h4>
<div class="paragraph">
<p>VkDescriptorSetVariableDescriptorCountAllocateInfoEXT - Structure specifying additional allocation parameters for descriptor sets</p>
</div>
</div>
<div class="sect3">
<h4 id="_c_specification_442">C Specification</h4>
<div class="paragraph">
<p>If the <code>pNext</code> chain of a <a href="#VkDescriptorSetAllocateInfo">VkDescriptorSetAllocateInfo</a> structure
includes a <code>VkDescriptorSetVariableDescriptorCountAllocateInfoEXT</code>
structure, then that structure includes an array of descriptor counts for
variable descriptor count bindings, one for each descriptor set being
allocated.</p>
</div>
<div class="paragraph">
<p>The <code>VkDescriptorSetVariableDescriptorCountAllocateInfoEXT</code> structure is
defined as:</p>
</div>
<div id="VkDescriptorSetVariableDescriptorCountAllocateInfoEXT" class="listingblock">
<div class="content">
<pre class="highlight"><code class="language-c++" data-lang="c++">typedef struct VkDescriptorSetVariableDescriptorCountAllocateInfoEXT {
    VkStructureType    sType;
    const void*        pNext;
    uint32_t           descriptorSetCount;
    const uint32_t*    pDescriptorCounts;
} VkDescriptorSetVariableDescriptorCountAllocateInfoEXT;</code></pre>
</div>
</div>
</div>
<div class="sect3">
<h4 id="_members_79">Members</h4>
<div class="ulist">
<ul>
<li>
<p><code>sType</code> is the type of this structure.</p>
</li>
<li>
<p><code>pNext</code> is <code>NULL</code> or a pointer to an extension-specific structure.</p>
</li>
<li>
<p><code>descriptorSetCount</code> is zero or the number of elements in
<code>pDescriptorCounts</code>.</p>
</li>
<li>
<p><code>pDescriptorCounts</code> is an array of descriptor counts, with each
member specifying the number of descriptors in a variable descriptor
count binding in the corresponding descriptor set being allocated.</p>
</li>
</ul>
</div>
</div>
<div class="sect3">
<h4 id="_description_442">Description</h4>
<div class="paragraph">
<p>If <code>descriptorSetCount</code> is zero or this structure is not included in the
<code>pNext</code> chain, then the variable lengths are considered to be zero.
Otherwise, <code>pDescriptorCounts</code>[i] is the number of descriptors in the
variable count descriptor binding in the corresponding descriptor set
layout.
If the variable count descriptor binding in the corresponding descriptor set
layout has a descriptor type of
<code>VK_DESCRIPTOR_TYPE_INLINE_UNIFORM_BLOCK_EXT</code> then
<code>pDescriptorCounts</code>[i] specifies the binding&#8217;s capacity in bytes.
If <a href="#VkDescriptorSetAllocateInfo">VkDescriptorSetAllocateInfo</a>::<code>pSetLayouts</code>[i] does not include
a variable count descriptor binding, then <code>pDescriptorCounts</code>[i] is
ignored.</p>
</div>
<div class="sidebarblock">
<div class="content">
<div class="title">Valid Usage</div>
<div class="ulist">
<ul>
<li>
<p><a id="VUID-VkDescriptorSetVariableDescriptorCountAllocateInfoEXT-descriptorSetCount-03045"></a>
If <code>descriptorSetCount</code> is not zero, <code>descriptorSetCount</code> <strong class="purple">must</strong>
equal <a href="#VkDescriptorSetAllocateInfo">VkDescriptorSetAllocateInfo</a>::<code>descriptorSetCount</code></p>
</li>
<li>
<p><a id="VUID-VkDescriptorSetVariableDescriptorCountAllocateInfoEXT-pSetLayouts-03046"></a>
If <a href="#VkDescriptorSetAllocateInfo">VkDescriptorSetAllocateInfo</a>::<code>pSetLayouts</code>[i] has a
variable descriptor count binding, then <code>pDescriptorCounts</code>[i] <strong class="purple">must</strong>
be less than or equal to the descriptor count specified for that binding
when the descriptor set layout was created.</p>
</li>
</ul>
</div>
</div>
</div>
<div class="sidebarblock">
<div class="content">
<div class="title">Valid Usage (Implicit)</div>
<div class="ulist">
<ul>
<li>
<p><a id="VUID-VkDescriptorSetVariableDescriptorCountAllocateInfoEXT-sType-sType"></a> <code>sType</code> <strong class="purple">must</strong> be <code>VK_STRUCTURE_TYPE_DESCRIPTOR_SET_VARIABLE_DESCRIPTOR_COUNT_ALLOCATE_INFO_EXT</code></p>
</li>
<li>
<p><a id="VUID-VkDescriptorSetVariableDescriptorCountAllocateInfoEXT-pDescriptorCounts-parameter"></a> If <code>descriptorSetCount</code> is not <code>0</code>, <code>pDescriptorCounts</code> <strong class="purple">must</strong> be a valid pointer to an array of <code>descriptorSetCount</code> <code>uint32_t</code> values</p>
</li>
</ul>
</div>
</div>
</div>
</div>
<div class="sect3">
<h4 id="_see_also_442">See Also</h4>
<div class="paragraph">
<p><a href="#VkStructureType">VkStructureType</a></p>
</div>
</div>
<div class="sect3">
<h4 id="_document_notes_442">Document Notes</h4>
<div class="paragraph">
<p>For more information, see the Vulkan Specification at URL</p>
</div>
<div class="paragraph">
<p><a href="https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VkDescriptorSetVariableDescriptorCountAllocateInfoEXT" class="bare">https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VkDescriptorSetVariableDescriptorCountAllocateInfoEXT</a></p>
</div>
<div class="paragraph">
<p>This page is extracted from the Vulkan Specification.
Fixes and changes should be made to the Specification, not directly.</p>
</div>
<div style="page-break-after: always;"></div>
</div>
</div>
<div class="sect2">
<h3 id="_vkdescriptorsetvariabledescriptorcountlayoutsupportext3">VkDescriptorSetVariableDescriptorCountLayoutSupportEXT(3)</h3>
<div class="sect3">
<h4 id="_name_443">Name</h4>
<div class="paragraph">
<p>VkDescriptorSetVariableDescriptorCountLayoutSupportEXT - Structure returning information about whether a descriptor set layout can be supported</p>
</div>
</div>
<div class="sect3">
<h4 id="_c_specification_443">C Specification</h4>
<div class="paragraph">
<p>If the <code>pNext</code> chain of a <a href="#VkDescriptorSetLayoutSupport">VkDescriptorSetLayoutSupport</a> structure
includes a <code>VkDescriptorSetVariableDescriptorCountLayoutSupportEXT</code>
structure, then that structure returns additional information about whether
the descriptor set layout is supported.</p>
</div>
<div id="VkDescriptorSetVariableDescriptorCountLayoutSupportEXT" class="listingblock">
<div class="content">
<pre class="highlight"><code class="language-c++" data-lang="c++">typedef struct VkDescriptorSetVariableDescriptorCountLayoutSupportEXT {
    VkStructureType    sType;
    void*              pNext;
    uint32_t           maxVariableDescriptorCount;
} VkDescriptorSetVariableDescriptorCountLayoutSupportEXT;</code></pre>
</div>
</div>
</div>
<div class="sect3">
<h4 id="_members_80">Members</h4>
<div class="ulist">
<ul>
<li>
<p><code>sType</code> is the type of this structure.</p>
</li>
<li>
<p><code>pNext</code> is <code>NULL</code> or a pointer to an extension-specific structure.</p>
</li>
<li>
<p><code>maxVariableDescriptorCount</code> indicates the maximum number of
descriptors supported in the highest numbered binding of the layout, if
that binding is variable-sized.
If the highest numbered binding of the layout has a descriptor type of
<code>VK_DESCRIPTOR_TYPE_INLINE_UNIFORM_BLOCK_EXT</code> then
<code>maxVariableDescriptorCount</code> indicates the maximum byte size
supported for the binding, if that binding is variable-sized.</p>
</li>
</ul>
</div>
</div>
<div class="sect3">
<h4 id="_description_443">Description</h4>
<div class="paragraph">
<p>If the create info includes a variable-sized descriptor, then
<code>supported</code> is determined assuming the requested size of the
variable-sized descriptor, and <code>maxVariableDescriptorCount</code> is set to
the maximum size of that descriptor that <strong class="purple">can</strong> be successfully created (which
is greater than or equal to the requested size passed in).
If the create info does not include a variable-sized descriptor or if the
<a href="#VkPhysicalDeviceDescriptorIndexingFeaturesEXT">VkPhysicalDeviceDescriptorIndexingFeaturesEXT</a>::<code>descriptorBindingVariableDescriptorCount</code>
feature is not enabled, then <code>maxVariableDescriptorCount</code> is set to
zero.
For the purposes of this command, a variable-sized descriptor binding with a
<code>descriptorCount</code> of zero is treated as if the <code>descriptorCount</code> is
one, and thus the binding is not ignored and the maximum descriptor count
will be returned.
If the layout is not supported, then the value written to
<code>maxVariableDescriptorCount</code> is undefined.</p>
</div>
<div class="sidebarblock">
<div class="content">
<div class="title">Valid Usage (Implicit)</div>
<div class="ulist">
<ul>
<li>
<p><a id="VUID-VkDescriptorSetVariableDescriptorCountLayoutSupportEXT-sType-sType"></a> <code>sType</code> <strong class="purple">must</strong> be <code>VK_STRUCTURE_TYPE_DESCRIPTOR_SET_VARIABLE_DESCRIPTOR_COUNT_LAYOUT_SUPPORT_EXT</code></p>
</li>
</ul>
</div>
</div>
</div>
</div>
<div class="sect3">
<h4 id="_see_also_443">See Also</h4>
<div class="paragraph">
<p><a href="#VkStructureType">VkStructureType</a></p>
</div>
</div>
<div class="sect3">
<h4 id="_document_notes_443">Document Notes</h4>
<div class="paragraph">
<p>For more information, see the Vulkan Specification at URL</p>
</div>
<div class="paragraph">
<p><a href="https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VkDescriptorSetVariableDescriptorCountLayoutSupportEXT" class="bare">https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VkDescriptorSetVariableDescriptorCountLayoutSupportEXT</a></p>
</div>
<div class="paragraph">
<p>This page is extracted from the Vulkan Specification.
Fixes and changes should be made to the Specification, not directly.</p>
</div>
<div style="page-break-after: always;"></div>
</div>
</div>
<div class="sect2">
<h3 id="_vkdescriptorupdatetemplatecreateinfo3">VkDescriptorUpdateTemplateCreateInfo(3)</h3>
<div class="sect3">
<h4 id="_name_444">Name</h4>
<div class="paragraph">
<p>VkDescriptorUpdateTemplateCreateInfo - Structure specifying parameters of a newly created descriptor update template</p>
</div>
</div>
<div class="sect3">
<h4 id="_c_specification_444">C Specification</h4>
<div class="paragraph">
<p>The <a href="#VkDescriptorUpdateTemplateCreateInfo">VkDescriptorUpdateTemplateCreateInfo</a> structure is defined as:</p>
</div>
<div id="VkDescriptorUpdateTemplateCreateInfo" class="listingblock">
<div class="content">
<pre class="highlight"><code class="language-c++" data-lang="c++">typedef struct VkDescriptorUpdateTemplateCreateInfo {
    VkStructureType                           sType;
    const void*                               pNext;
    VkDescriptorUpdateTemplateCreateFlags     flags;
    uint32_t                                  descriptorUpdateEntryCount;
    const VkDescriptorUpdateTemplateEntry*    pDescriptorUpdateEntries;
    VkDescriptorUpdateTemplateType            templateType;
    VkDescriptorSetLayout                     descriptorSetLayout;
    VkPipelineBindPoint                       pipelineBindPoint;
    VkPipelineLayout                          pipelineLayout;
    uint32_t                                  set;
} VkDescriptorUpdateTemplateCreateInfo;</code></pre>
</div>
</div>
<div class="paragraph">
<p>or the equivalent</p>
</div>
<div id="VkDescriptorUpdateTemplateCreateInfoKHR" class="listingblock">
<div class="content">
<pre class="highlight"><code class="language-c++" data-lang="c++">typedef VkDescriptorUpdateTemplateCreateInfo VkDescriptorUpdateTemplateCreateInfoKHR;</code></pre>
</div>
</div>
</div>
<div class="sect3">
<h4 id="_members_81">Members</h4>
<div class="ulist">
<ul>
<li>
<p><code>sType</code> is the type of this structure.</p>
</li>
<li>
<p><code>pNext</code> is <code>NULL</code> or a pointer to an extension-specific structure.</p>
</li>
<li>
<p><code>flags</code> is reserved for future use.</p>
</li>
<li>
<p><code>descriptorUpdateEntryCount</code> is the number of elements in the
<code>pDescriptorUpdateEntries</code> array.</p>
</li>
<li>
<p><code>pDescriptorUpdateEntries</code> is a pointer to an array of
<a href="#VkDescriptorUpdateTemplateEntry">VkDescriptorUpdateTemplateEntry</a> structures describing the
descriptors to be updated by the descriptor update template.</p>
</li>
<li>
<p><code>templateType</code> Specifies the type of the descriptor update template.
If set to <code>VK_DESCRIPTOR_UPDATE_TEMPLATE_TYPE_DESCRIPTOR_SET</code> it
<strong class="purple">can</strong> only be used to update descriptor sets with a fixed
<code>descriptorSetLayout</code>.
If set to <code>VK_DESCRIPTOR_UPDATE_TEMPLATE_TYPE_PUSH_DESCRIPTORS_KHR</code>
it <strong class="purple">can</strong> only be used to push descriptor sets using the provided
<code>pipelineBindPoint</code>, <code>pipelineLayout</code>, and <code>set</code> number.</p>
</li>
<li>
<p><code>descriptorSetLayout</code> is the descriptor set layout the parameter
update template will be used with.
All descriptor sets which are going to be updated through the newly
created descriptor update template <strong class="purple">must</strong> be created with this layout.
<code>descriptorSetLayout</code> is the descriptor set layout used to build the
descriptor update template.
All descriptor sets which are going to be updated through the newly
created descriptor update template <strong class="purple">must</strong> be created with a layout that
matches (is the same as, or defined identically to) this layout.
This parameter is ignored if <code>templateType</code> is not
<code>VK_DESCRIPTOR_UPDATE_TEMPLATE_TYPE_DESCRIPTOR_SET</code>.</p>
</li>
<li>
<p><code>pipelineBindPoint</code> is a <a href="#VkPipelineBindPoint">VkPipelineBindPoint</a> indicating
whether the descriptors will be used by graphics pipelines or compute
pipelines.
This parameter is ignored if <code>templateType</code> is not
<code>VK_DESCRIPTOR_UPDATE_TEMPLATE_TYPE_PUSH_DESCRIPTORS_KHR</code></p>
</li>
<li>
<p><code>pipelineLayout</code> is a <a href="#VkPipelineLayout">VkPipelineLayout</a> object used to program
the bindings.
This parameter is ignored if <code>templateType</code> is not
<code>VK_DESCRIPTOR_UPDATE_TEMPLATE_TYPE_PUSH_DESCRIPTORS_KHR</code></p>
</li>
<li>
<p><code>set</code> is the set number of the descriptor set in the pipeline layout
that will be updated.
This parameter is ignored if <code>templateType</code> is not
<code>VK_DESCRIPTOR_UPDATE_TEMPLATE_TYPE_PUSH_DESCRIPTORS_KHR</code></p>
</li>
</ul>
</div>
</div>
<div class="sect3">
<h4 id="_description_444">Description</h4>
<div class="sidebarblock">
<div class="content">
<div class="title">Valid Usage</div>
<div class="ulist">
<ul>
<li>
<p><a id="VUID-VkDescriptorUpdateTemplateCreateInfo-templateType-00350"></a>
If <code>templateType</code> is
<code>VK_DESCRIPTOR_UPDATE_TEMPLATE_TYPE_DESCRIPTOR_SET</code>,
<code>descriptorSetLayout</code> <strong class="purple">must</strong> be a valid <code>VkDescriptorSetLayout</code>
handle</p>
</li>
<li>
<p><a id="VUID-VkDescriptorUpdateTemplateCreateInfo-templateType-00351"></a>
If <code>templateType</code> is
<code>VK_DESCRIPTOR_UPDATE_TEMPLATE_TYPE_PUSH_DESCRIPTORS_KHR</code>,
<code>pipelineBindPoint</code> <strong class="purple">must</strong> be a valid <a href="#VkPipelineBindPoint">VkPipelineBindPoint</a> value</p>
</li>
<li>
<p><a id="VUID-VkDescriptorUpdateTemplateCreateInfo-templateType-00352"></a>
If <code>templateType</code> is
<code>VK_DESCRIPTOR_UPDATE_TEMPLATE_TYPE_PUSH_DESCRIPTORS_KHR</code>,
<code>pipelineLayout</code> <strong class="purple">must</strong> be a valid <code>VkPipelineLayout</code> handle</p>
</li>
<li>
<p><a id="VUID-VkDescriptorUpdateTemplateCreateInfo-templateType-00353"></a>
If <code>templateType</code> is
<code>VK_DESCRIPTOR_UPDATE_TEMPLATE_TYPE_PUSH_DESCRIPTORS_KHR</code>, <code>set</code>
<strong class="purple">must</strong> be the unique set number in the pipeline layout that uses a
descriptor set layout that was created with
<code>VK_DESCRIPTOR_SET_LAYOUT_CREATE_PUSH_DESCRIPTOR_BIT_KHR</code></p>
</li>
</ul>
</div>
</div>
</div>
<div class="sidebarblock">
<div class="content">
<div class="title">Valid Usage (Implicit)</div>
<div class="ulist">
<ul>
<li>
<p><a id="VUID-VkDescriptorUpdateTemplateCreateInfo-sType-sType"></a> <code>sType</code> <strong class="purple">must</strong> be <code>VK_STRUCTURE_TYPE_DESCRIPTOR_UPDATE_TEMPLATE_CREATE_INFO</code></p>
</li>
<li>
<p><a id="VUID-VkDescriptorUpdateTemplateCreateInfo-pNext-pNext"></a> <code>pNext</code> <strong class="purple">must</strong> be <code>NULL</code></p>
</li>
<li>
<p><a id="VUID-VkDescriptorUpdateTemplateCreateInfo-flags-zerobitmask"></a> <code>flags</code> <strong class="purple">must</strong> be <code>0</code></p>
</li>
<li>
<p><a id="VUID-VkDescriptorUpdateTemplateCreateInfo-pDescriptorUpdateEntries-parameter"></a> <code>pDescriptorUpdateEntries</code> <strong class="purple">must</strong> be a valid pointer to an array of <code>descriptorUpdateEntryCount</code> valid <code>VkDescriptorUpdateTemplateEntry</code> structures</p>
</li>
<li>
<p><a id="VUID-VkDescriptorUpdateTemplateCreateInfo-templateType-parameter"></a> <code>templateType</code> <strong class="purple">must</strong> be a valid <a href="#VkDescriptorUpdateTemplateType">VkDescriptorUpdateTemplateType</a> value</p>
</li>
<li>
<p><a id="VUID-VkDescriptorUpdateTemplateCreateInfo-descriptorSetLayout-parameter"></a> If <code>descriptorSetLayout</code> is not <a href="#VK_NULL_HANDLE">VK_NULL_HANDLE</a>, <code>descriptorSetLayout</code> <strong class="purple">must</strong> be a valid <code>VkDescriptorSetLayout</code> handle</p>
</li>
<li>
<p><a id="VUID-VkDescriptorUpdateTemplateCreateInfo-descriptorUpdateEntryCount-arraylength"></a> <code>descriptorUpdateEntryCount</code> <strong class="purple">must</strong> be greater than <code>0</code></p>
</li>
<li>
<p><a id="VUID-VkDescriptorUpdateTemplateCreateInfo-commonparent"></a> Both of <code>descriptorSetLayout</code>, and <code>pipelineLayout</code> that are valid handles <strong class="purple">must</strong> have been created, allocated, or retrieved from the same <code>VkDevice</code></p>
</li>
</ul>
</div>
</div>
</div>
</div>
<div class="sect3">
<h4 id="_see_also_444">See Also</h4>
<div class="paragraph">
<p><a href="#VkDescriptorSetLayout">VkDescriptorSetLayout</a>, <a href="#VkDescriptorUpdateTemplateCreateFlags">VkDescriptorUpdateTemplateCreateFlags</a>, <a href="#VkDescriptorUpdateTemplateEntry">VkDescriptorUpdateTemplateEntry</a>, <a href="#VkDescriptorUpdateTemplateType">VkDescriptorUpdateTemplateType</a>, <a href="#VkPipelineBindPoint">VkPipelineBindPoint</a>, <a href="#VkPipelineLayout">VkPipelineLayout</a>, <a href="#VkStructureType">VkStructureType</a>, <a href="#vkCreateDescriptorUpdateTemplate">vkCreateDescriptorUpdateTemplate</a>, <a href="#vkCreateDescriptorUpdateTemplateKHR">vkCreateDescriptorUpdateTemplateKHR</a></p>
</div>
</div>
<div class="sect3">
<h4 id="_document_notes_444">Document Notes</h4>
<div class="paragraph">
<p>For more information, see the Vulkan Specification at URL</p>
</div>
<div class="paragraph">
<p><a href="https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VkDescriptorUpdateTemplateCreateInfo" class="bare">https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VkDescriptorUpdateTemplateCreateInfo</a></p>
</div>
<div class="paragraph">
<p>This page is extracted from the Vulkan Specification.
Fixes and changes should be made to the Specification, not directly.</p>
</div>
<div style="page-break-after: always;"></div>
</div>
</div>
<div class="sect2">
<h3 id="_vkdescriptorupdatetemplateentry3">VkDescriptorUpdateTemplateEntry(3)</h3>
<div class="sect3">
<h4 id="_name_445">Name</h4>
<div class="paragraph">
<p>VkDescriptorUpdateTemplateEntry - Describes a single descriptor update of the descriptor update template</p>
</div>
</div>
<div class="sect3">
<h4 id="_c_specification_445">C Specification</h4>
<div class="paragraph">
<p>The <code>VkDescriptorUpdateTemplateEntry</code> structure is defined as:</p>
</div>
<div id="VkDescriptorUpdateTemplateEntry" class="listingblock">
<div class="content">
<pre class="highlight"><code class="language-c++" data-lang="c++">typedef struct VkDescriptorUpdateTemplateEntry {
    uint32_t            dstBinding;
    uint32_t            dstArrayElement;
    uint32_t            descriptorCount;
    VkDescriptorType    descriptorType;
    size_t              offset;
    size_t              stride;
} VkDescriptorUpdateTemplateEntry;</code></pre>
</div>
</div>
<div class="paragraph">
<p>or the equivalent</p>
</div>
<div id="VkDescriptorUpdateTemplateEntryKHR" class="listingblock">
<div class="content">
<pre class="highlight"><code class="language-c++" data-lang="c++">typedef VkDescriptorUpdateTemplateEntry VkDescriptorUpdateTemplateEntryKHR;</code></pre>
</div>
</div>
</div>
<div class="sect3">
<h4 id="_members_82">Members</h4>
<div class="ulist">
<ul>
<li>
<p><code>dstBinding</code> is the descriptor binding to update when using this
descriptor update template.</p>
</li>
<li>
<p><code>dstArrayElement</code> is the starting element in the array belonging to
<code>dstBinding</code>.
If the descriptor binding identified by <code>srcBinding</code> has a
descriptor type of <code>VK_DESCRIPTOR_TYPE_INLINE_UNIFORM_BLOCK_EXT</code>
then <code>dstArrayElement</code> specifies the starting byte offset to update.</p>
</li>
<li>
<p><code>descriptorCount</code> is the number of descriptors to update.
If <code>descriptorCount</code> is greater than the number of remaining array
elements in the destination binding, those affect consecutive bindings
in a manner similar to <a href="#VkWriteDescriptorSet">VkWriteDescriptorSet</a> above.
If the descriptor binding identified by <code>dstBinding</code> has a
descriptor type of <code>VK_DESCRIPTOR_TYPE_INLINE_UNIFORM_BLOCK_EXT</code>
then <code>descriptorCount</code> specifies the number of bytes to update and
the remaining array elements in the destination binding refer to the
remaining number of bytes in it.</p>
</li>
<li>
<p><code>descriptorType</code> is a <a href="#VkDescriptorType">VkDescriptorType</a> specifying the type of
the descriptor.</p>
</li>
<li>
<p><code>offset</code> is the offset in bytes of the first binding in the raw data
structure.</p>
</li>
<li>
<p><code>stride</code> is the stride in bytes between two consecutive array
elements of the descriptor update informations in the raw data
structure.
The actual pointer ptr for each array element j of update entry i is
computed using the following formula:</p>
<div class="listingblock">
<div class="content">
<pre class="highlight"><code class="language-c++" data-lang="c++">    const char *ptr = (const char *)pData + pDescriptorUpdateEntries[i].offset + j * pDescriptorUpdateEntries[i].stride</code></pre>
</div>
</div>
<div class="paragraph">
<p>The stride is useful in case the bindings are stored in structs along with
other data.
If <code>descriptorType</code> is <code>VK_DESCRIPTOR_TYPE_INLINE_UNIFORM_BLOCK_EXT</code>
then the value of <code>stride</code> is ignored and the stride is assumed to be
<code>1</code>, i.e. the descriptor update information for them is always specified as
a contiguous range.</p>
</div>
</li>
</ul>
</div>
</div>
<div class="sect3">
<h4 id="_description_445">Description</h4>
<div class="sidebarblock">
<div class="content">
<div class="title">Valid Usage</div>
<div class="ulist">
<ul>
<li>
<p><a id="VUID-VkDescriptorUpdateTemplateEntry-dstBinding-00354"></a>
<code>dstBinding</code> <strong class="purple">must</strong> be a valid binding in the descriptor set layout
implicitly specified when using a descriptor update template to update
descriptors.</p>
</li>
<li>
<p><a id="VUID-VkDescriptorUpdateTemplateEntry-dstArrayElement-00355"></a>
<code>dstArrayElement</code> and <code>descriptorCount</code> <strong class="purple">must</strong> be less than or
equal to the number of array elements in the descriptor set binding
implicitly specified when using a descriptor update template to update
descriptors, and all applicable consecutive bindings, as described by
<a href="vkspec.html#descriptorsets-updates-consecutive" class="bare">html/vkspec.html#descriptorsets-updates-consecutive</a></p>
</li>
<li>
<p><a id="VUID-VkDescriptorUpdateTemplateEntry-descriptor-02226"></a>
If <code>descriptor</code> type is
<code>VK_DESCRIPTOR_TYPE_INLINE_UNIFORM_BLOCK_EXT</code>, <code>dstArrayElement</code>
<strong class="purple">must</strong> be an integer multiple of <code>4</code></p>
</li>
<li>
<p><a id="VUID-VkDescriptorUpdateTemplateEntry-descriptor-02227"></a>
If <code>descriptor</code> type is
<code>VK_DESCRIPTOR_TYPE_INLINE_UNIFORM_BLOCK_EXT</code>, <code>descriptorCount</code>
<strong class="purple">must</strong> be an integer multiple of <code>4</code></p>
</li>
</ul>
</div>
</div>
</div>
<div class="sidebarblock">
<div class="content">
<div class="title">Valid Usage (Implicit)</div>
<div class="ulist">
<ul>
<li>
<p><a id="VUID-VkDescriptorUpdateTemplateEntry-descriptorType-parameter"></a> <code>descriptorType</code> <strong class="purple">must</strong> be a valid <a href="#VkDescriptorType">VkDescriptorType</a> value</p>
</li>
</ul>
</div>
</div>
</div>
</div>
<div class="sect3">
<h4 id="_see_also_445">See Also</h4>
<div class="paragraph">
<p><a href="#VkDescriptorType">VkDescriptorType</a>, <a href="#VkDescriptorUpdateTemplateCreateInfo">VkDescriptorUpdateTemplateCreateInfo</a></p>
</div>
</div>
<div class="sect3">
<h4 id="_document_notes_445">Document Notes</h4>
<div class="paragraph">
<p>For more information, see the Vulkan Specification at URL</p>
</div>
<div class="paragraph">
<p><a href="https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VkDescriptorUpdateTemplateEntry" class="bare">https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VkDescriptorUpdateTemplateEntry</a></p>
</div>
<div class="paragraph">
<p>This page is extracted from the Vulkan Specification.
Fixes and changes should be made to the Specification, not directly.</p>
</div>
<div style="page-break-after: always;"></div>
</div>
</div>
<div class="sect2">
<h3 id="_vkdevicecreateinfo3">VkDeviceCreateInfo(3)</h3>
<div class="sect3">
<h4 id="_name_446">Name</h4>
<div class="paragraph">
<p>VkDeviceCreateInfo - Structure specifying parameters of a newly created device</p>
</div>
</div>
<div class="sect3">
<h4 id="_c_specification_446">C Specification</h4>
<div class="paragraph">
<p>The <code>VkDeviceCreateInfo</code> structure is defined as:</p>
</div>
<div id="VkDeviceCreateInfo" class="listingblock">
<div class="content">
<pre class="highlight"><code class="language-c++" data-lang="c++">typedef struct VkDeviceCreateInfo {
    VkStructureType                    sType;
    const void*                        pNext;
    VkDeviceCreateFlags                flags;
    uint32_t                           queueCreateInfoCount;
    const VkDeviceQueueCreateInfo*     pQueueCreateInfos;
    uint32_t                           enabledLayerCount;
    const char* const*                 ppEnabledLayerNames;
    uint32_t                           enabledExtensionCount;
    const char* const*                 ppEnabledExtensionNames;
    const VkPhysicalDeviceFeatures*    pEnabledFeatures;
} VkDeviceCreateInfo;</code></pre>
</div>
</div>
</div>
<div class="sect3">
<h4 id="_members_83">Members</h4>
<div class="ulist">
<ul>
<li>
<p><code>sType</code> is the type of this structure.</p>
</li>
<li>
<p><code>pNext</code> is <code>NULL</code> or a pointer to an extension-specific structure.</p>
</li>
<li>
<p><code>flags</code> is reserved for future use.</p>
</li>
<li>
<p><code>queueCreateInfoCount</code> is the unsigned integer size of the
<code>pQueueCreateInfos</code> array.
Refer to the <a href="vkspec.html#devsandqueues-queue-creation">Queue Creation</a> section
below for further details.</p>
</li>
<li>
<p><code>pQueueCreateInfos</code> is a pointer to an array of
<a href="#VkDeviceQueueCreateInfo">VkDeviceQueueCreateInfo</a> structures describing the queues that are
requested to be created along with the logical device.
Refer to the <a href="vkspec.html#devsandqueues-queue-creation">Queue Creation</a> section
below for further details.</p>
</li>
<li>
<p><code>enabledLayerCount</code> is deprecated and ignored.</p>
</li>
<li>
<p><code>ppEnabledLayerNames</code> is deprecated and ignored.
See <a href="vkspec.html#extendingvulkan-layers-devicelayerdeprecation" class="bare">html/vkspec.html#extendingvulkan-layers-devicelayerdeprecation</a>.</p>
</li>
<li>
<p><code>enabledExtensionCount</code> is the number of device extensions to
enable.</p>
</li>
<li>
<p><code>ppEnabledExtensionNames</code> is a pointer to an array of
<code>enabledExtensionCount</code> null-terminated UTF-8 strings containing the
names of extensions to enable for the created device.
See the <a href="vkspec.html#extendingvulkan-extensions" class="bare">html/vkspec.html#extendingvulkan-extensions</a> section for further details.</p>
</li>
<li>
<p><code>pEnabledFeatures</code> is <code>NULL</code> or a pointer to a
<a href="#VkPhysicalDeviceFeatures">VkPhysicalDeviceFeatures</a> structure that contains boolean
indicators of all the features to be enabled.
Refer to the <a href="vkspec.html#features">Features</a> section for further details.</p>
</li>
</ul>
</div>
</div>
<div class="sect3">
<h4 id="_description_446">Description</h4>
<div class="sidebarblock">
<div class="content">
<div class="title">Valid Usage</div>
<div class="ulist">
<ul>
<li>
<p><a id="VUID-VkDeviceCreateInfo-queueFamilyIndex-00372"></a>
The <code>queueFamilyIndex</code> member of each element of
<code>pQueueCreateInfos</code> <strong class="purple">must</strong> be unique within <code>pQueueCreateInfos</code>,
except that two members can share the same <code>queueFamilyIndex</code> if one
is a protected-capable queue and one is not a protected-capable queue.</p>
</li>
<li>
<p><a id="VUID-VkDeviceCreateInfo-pNext-00373"></a>
If the <code>pNext</code> chain includes a <a href="#VkPhysicalDeviceFeatures2">VkPhysicalDeviceFeatures2</a>
structure, then <code>pEnabledFeatures</code> <strong class="purple">must</strong> be <code>NULL</code></p>
</li>
<li>
<p><a id="VUID-VkDeviceCreateInfo-ppEnabledExtensionNames-01840"></a>
<code>ppEnabledExtensionNames</code> <strong class="purple">must</strong> not contain
<code><a href="vkspec.html#VK_AMD_negative_viewport_height" class="bare">html/vkspec.html#VK_AMD_negative_viewport_height</a></code></p>
</li>
</ul>
</div>
</div>
</div>
<div class="sidebarblock">
<div class="content">
<div class="title">Valid Usage (Implicit)</div>
<div class="ulist">
<ul>
<li>
<p><a id="VUID-VkDeviceCreateInfo-sType-sType"></a> <code>sType</code> <strong class="purple">must</strong> be <code>VK_STRUCTURE_TYPE_DEVICE_CREATE_INFO</code></p>
</li>
<li>
<p><a id="VUID-VkDeviceCreateInfo-pNext-pNext"></a> Each <code>pNext</code> member of any structure (including this one) in the <code>pNext</code> chain <strong class="purple">must</strong> be either <code>NULL</code> or a pointer to a valid instance of <a href="#VkDeviceGroupDeviceCreateInfo">VkDeviceGroupDeviceCreateInfo</a>, <a href="#VkDeviceMemoryOverallocationCreateInfoAMD">VkDeviceMemoryOverallocationCreateInfoAMD</a>, <a href="#VkPhysicalDevice16BitStorageFeatures">VkPhysicalDevice16BitStorageFeatures</a>, <a href="#VkPhysicalDevice8BitStorageFeaturesKHR">VkPhysicalDevice8BitStorageFeaturesKHR</a>, <a href="#VkPhysicalDeviceASTCDecodeFeaturesEXT">VkPhysicalDeviceASTCDecodeFeaturesEXT</a>, <a href="#VkPhysicalDeviceBlendOperationAdvancedFeaturesEXT">VkPhysicalDeviceBlendOperationAdvancedFeaturesEXT</a>, <a href="#VkPhysicalDeviceBufferDeviceAddressFeaturesEXT">VkPhysicalDeviceBufferDeviceAddressFeaturesEXT</a>, <a href="#VkPhysicalDeviceComputeShaderDerivativesFeaturesNV">VkPhysicalDeviceComputeShaderDerivativesFeaturesNV</a>, <a href="#VkPhysicalDeviceConditionalRenderingFeaturesEXT">VkPhysicalDeviceConditionalRenderingFeaturesEXT</a>, <a href="#VkPhysicalDeviceCooperativeMatrixFeaturesNV">VkPhysicalDeviceCooperativeMatrixFeaturesNV</a>, <a href="#VkPhysicalDeviceCornerSampledImageFeaturesNV">VkPhysicalDeviceCornerSampledImageFeaturesNV</a>, <a href="#VkPhysicalDeviceDedicatedAllocationImageAliasingFeaturesNV">VkPhysicalDeviceDedicatedAllocationImageAliasingFeaturesNV</a>, <a href="#VkPhysicalDeviceDepthClipEnableFeaturesEXT">VkPhysicalDeviceDepthClipEnableFeaturesEXT</a>, <a href="#VkPhysicalDeviceDescriptorIndexingFeaturesEXT">VkPhysicalDeviceDescriptorIndexingFeaturesEXT</a>, <a href="#VkPhysicalDeviceExclusiveScissorFeaturesNV">VkPhysicalDeviceExclusiveScissorFeaturesNV</a>, <a href="#VkPhysicalDeviceFeatures2">VkPhysicalDeviceFeatures2</a>, <a href="#VkPhysicalDeviceFloat16Int8FeaturesKHR">VkPhysicalDeviceFloat16Int8FeaturesKHR</a>, <a href="#VkPhysicalDeviceFragmentDensityMapFeaturesEXT">VkPhysicalDeviceFragmentDensityMapFeaturesEXT</a>, <a href="#VkPhysicalDeviceFragmentShaderBarycentricFeaturesNV">VkPhysicalDeviceFragmentShaderBarycentricFeaturesNV</a>, <a href="#VkPhysicalDeviceHostQueryResetFeaturesEXT">VkPhysicalDeviceHostQueryResetFeaturesEXT</a>, <a href="#VkPhysicalDeviceInlineUniformBlockFeaturesEXT">VkPhysicalDeviceInlineUniformBlockFeaturesEXT</a>, <a href="#VkPhysicalDeviceMemoryPriorityFeaturesEXT">VkPhysicalDeviceMemoryPriorityFeaturesEXT</a>, <a href="#VkPhysicalDeviceMeshShaderFeaturesNV">VkPhysicalDeviceMeshShaderFeaturesNV</a>, <a href="#VkPhysicalDeviceMultiviewFeatures">VkPhysicalDeviceMultiviewFeatures</a>, <a href="#VkPhysicalDeviceProtectedMemoryFeatures">VkPhysicalDeviceProtectedMemoryFeatures</a>, <a href="#VkPhysicalDeviceRepresentativeFragmentTestFeaturesNV">VkPhysicalDeviceRepresentativeFragmentTestFeaturesNV</a>, <a href="#VkPhysicalDeviceSamplerYcbcrConversionFeatures">VkPhysicalDeviceSamplerYcbcrConversionFeatures</a>, <a href="#VkPhysicalDeviceScalarBlockLayoutFeaturesEXT">VkPhysicalDeviceScalarBlockLayoutFeaturesEXT</a>, <a href="#VkPhysicalDeviceShaderAtomicInt64FeaturesKHR">VkPhysicalDeviceShaderAtomicInt64FeaturesKHR</a>, <a href="#VkPhysicalDeviceShaderDrawParametersFeatures">VkPhysicalDeviceShaderDrawParametersFeatures</a>, <a href="#VkPhysicalDeviceShaderImageFootprintFeaturesNV">VkPhysicalDeviceShaderImageFootprintFeaturesNV</a>, <a href="#VkPhysicalDeviceShadingRateImageFeaturesNV">VkPhysicalDeviceShadingRateImageFeaturesNV</a>, <a href="#VkPhysicalDeviceTransformFeedbackFeaturesEXT">VkPhysicalDeviceTransformFeedbackFeaturesEXT</a>, <a href="#VkPhysicalDeviceVariablePointersFeatures">VkPhysicalDeviceVariablePointersFeatures</a>, <a href="#VkPhysicalDeviceVertexAttributeDivisorFeaturesEXT">VkPhysicalDeviceVertexAttributeDivisorFeaturesEXT</a>, <a href="#VkPhysicalDeviceVulkanMemoryModelFeaturesKHR">VkPhysicalDeviceVulkanMemoryModelFeaturesKHR</a>, or <a href="#VkPhysicalDeviceYcbcrImageArraysFeaturesEXT">VkPhysicalDeviceYcbcrImageArraysFeaturesEXT</a></p>
</li>
<li>
<p><a id="VUID-VkDeviceCreateInfo-sType-unique"></a> Each <code>sType</code> member in the <code>pNext</code> chain <strong class="purple">must</strong> be unique</p>
</li>
<li>
<p><a id="VUID-VkDeviceCreateInfo-flags-zerobitmask"></a> <code>flags</code> <strong class="purple">must</strong> be <code>0</code></p>
</li>
<li>
<p><a id="VUID-VkDeviceCreateInfo-pQueueCreateInfos-parameter"></a> <code>pQueueCreateInfos</code> <strong class="purple">must</strong> be a valid pointer to an array of <code>queueCreateInfoCount</code> valid <code>VkDeviceQueueCreateInfo</code> structures</p>
</li>
<li>
<p><a id="VUID-VkDeviceCreateInfo-ppEnabledLayerNames-parameter"></a> If <code>enabledLayerCount</code> is not <code>0</code>, <code>ppEnabledLayerNames</code> <strong class="purple">must</strong> be a valid pointer to an array of <code>enabledLayerCount</code> null-terminated UTF-8 strings</p>
</li>
<li>
<p><a id="VUID-VkDeviceCreateInfo-ppEnabledExtensionNames-parameter"></a> If <code>enabledExtensionCount</code> is not <code>0</code>, <code>ppEnabledExtensionNames</code> <strong class="purple">must</strong> be a valid pointer to an array of <code>enabledExtensionCount</code> null-terminated UTF-8 strings</p>
</li>
<li>
<p><a id="VUID-VkDeviceCreateInfo-pEnabledFeatures-parameter"></a> If <code>pEnabledFeatures</code> is not <code>NULL</code>, <code>pEnabledFeatures</code> <strong class="purple">must</strong> be a valid pointer to a valid <code>VkPhysicalDeviceFeatures</code> structure</p>
</li>
<li>
<p><a id="VUID-VkDeviceCreateInfo-queueCreateInfoCount-arraylength"></a> <code>queueCreateInfoCount</code> <strong class="purple">must</strong> be greater than <code>0</code></p>
</li>
</ul>
</div>
</div>
</div>
</div>
<div class="sect3">
<h4 id="_see_also_446">See Also</h4>
<div class="paragraph">
<p><a href="#VkDeviceCreateFlags">VkDeviceCreateFlags</a>, <a href="#VkDeviceQueueCreateInfo">VkDeviceQueueCreateInfo</a>, <a href="#VkPhysicalDeviceFeatures">VkPhysicalDeviceFeatures</a>, <a href="#VkStructureType">VkStructureType</a>, <a href="#vkCreateDevice">vkCreateDevice</a></p>
</div>
</div>
<div class="sect3">
<h4 id="_document_notes_446">Document Notes</h4>
<div class="paragraph">
<p>For more information, see the Vulkan Specification at URL</p>
</div>
<div class="paragraph">
<p><a href="https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VkDeviceCreateInfo" class="bare">https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VkDeviceCreateInfo</a></p>
</div>
<div class="paragraph">
<p>This page is extracted from the Vulkan Specification.
Fixes and changes should be made to the Specification, not directly.</p>
</div>
<div style="page-break-after: always;"></div>
</div>
</div>
<div class="sect2">
<h3 id="_vkdeviceeventinfoext3">VkDeviceEventInfoEXT(3)</h3>
<div class="sect3">
<h4 id="_name_447">Name</h4>
<div class="paragraph">
<p>VkDeviceEventInfoEXT - Describe a device event to create</p>
</div>
</div>
<div class="sect3">
<h4 id="_c_specification_447">C Specification</h4>
<div class="paragraph">
<p>The <code>VkDeviceEventInfoEXT</code> structure is defined as:</p>
</div>
<div id="VkDeviceEventInfoEXT" class="listingblock">
<div class="content">
<pre class="highlight"><code class="language-c++" data-lang="c++">typedef struct VkDeviceEventInfoEXT {
    VkStructureType         sType;
    const void*             pNext;
    VkDeviceEventTypeEXT    deviceEvent;
} VkDeviceEventInfoEXT;</code></pre>
</div>
</div>
</div>
<div class="sect3">
<h4 id="_members_84">Members</h4>
<div class="ulist">
<ul>
<li>
<p><code>sType</code> is the type of this structure.</p>
</li>
<li>
<p><code>pNext</code> is <code>NULL</code> or a pointer to an extension-specific structure.</p>
</li>
<li>
<p><code>device</code> is a <a href="#VkDeviceEventTypeEXT">VkDeviceEventTypeEXT</a> value specifying when the
fence will be signaled.</p>
</li>
</ul>
</div>
</div>
<div class="sect3">
<h4 id="_description_447">Description</h4>
<div class="sidebarblock">
<div class="content">
<div class="title">Valid Usage (Implicit)</div>
<div class="ulist">
<ul>
<li>
<p><a id="VUID-VkDeviceEventInfoEXT-sType-sType"></a> <code>sType</code> <strong class="purple">must</strong> be <code>VK_STRUCTURE_TYPE_DEVICE_EVENT_INFO_EXT</code></p>
</li>
<li>
<p><a id="VUID-VkDeviceEventInfoEXT-pNext-pNext"></a> <code>pNext</code> <strong class="purple">must</strong> be <code>NULL</code></p>
</li>
<li>
<p><a id="VUID-VkDeviceEventInfoEXT-deviceEvent-parameter"></a> <code>deviceEvent</code> <strong class="purple">must</strong> be a valid <a href="#VkDeviceEventTypeEXT">VkDeviceEventTypeEXT</a> value</p>
</li>
</ul>
</div>
</div>
</div>
</div>
<div class="sect3">
<h4 id="_see_also_447">See Also</h4>
<div class="paragraph">
<p><a href="#VkDeviceEventTypeEXT">VkDeviceEventTypeEXT</a>, <a href="#VkStructureType">VkStructureType</a>, <a href="#vkRegisterDeviceEventEXT">vkRegisterDeviceEventEXT</a></p>
</div>
</div>
<div class="sect3">
<h4 id="_document_notes_447">Document Notes</h4>
<div class="paragraph">
<p>For more information, see the Vulkan Specification at URL</p>
</div>
<div class="paragraph">
<p><a href="https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VkDeviceEventInfoEXT" class="bare">https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VkDeviceEventInfoEXT</a></p>
</div>
<div class="paragraph">
<p>This page is extracted from the Vulkan Specification.
Fixes and changes should be made to the Specification, not directly.</p>
</div>
<div style="page-break-after: always;"></div>
</div>
</div>
<div class="sect2">
<h3 id="_vkdevicegeneratedcommandsfeaturesnvx3">VkDeviceGeneratedCommandsFeaturesNVX(3)</h3>
<div class="sect3">
<h4 id="_name_448">Name</h4>
<div class="paragraph">
<p>VkDeviceGeneratedCommandsFeaturesNVX - Structure specifying physical device support</p>
</div>
</div>
<div class="sect3">
<h4 id="_c_specification_448">C Specification</h4>
<div class="paragraph">
<p>The <code>VkDeviceGeneratedCommandsFeaturesNVX</code> structure is defined as:</p>
</div>
<div id="VkDeviceGeneratedCommandsFeaturesNVX" class="listingblock">
<div class="content">
<pre class="highlight"><code class="language-c++" data-lang="c++">typedef struct VkDeviceGeneratedCommandsFeaturesNVX {
    VkStructureType    sType;
    const void*        pNext;
    VkBool32           computeBindingPointSupport;
} VkDeviceGeneratedCommandsFeaturesNVX;</code></pre>
</div>
</div>
</div>
<div class="sect3">
<h4 id="_members_85">Members</h4>
<div class="ulist">
<ul>
<li>
<p><code>sType</code> is the type of this structure.</p>
</li>
<li>
<p><code>pNext</code> is <code>NULL</code> or a pointer to an extension-specific structure.</p>
</li>
<li>
<p><code>computeBindingPointSupport</code> specifies whether the
<code>VkObjectTableNVX</code> supports entries with
<code>VK_OBJECT_ENTRY_USAGE_GRAPHICS_BIT_NVX</code> bit set and
<code>VkIndirectCommandsLayoutNVX</code> supports
<code>VK_PIPELINE_BIND_POINT_COMPUTE</code>.</p>
</li>
</ul>
</div>
</div>
<div class="sect3">
<h4 id="_description_448">Description</h4>
<div class="sidebarblock">
<div class="content">
<div class="title">Valid Usage (Implicit)</div>
<div class="ulist">
<ul>
<li>
<p><a id="VUID-VkDeviceGeneratedCommandsFeaturesNVX-sType-sType"></a> <code>sType</code> <strong class="purple">must</strong> be <code>VK_STRUCTURE_TYPE_DEVICE_GENERATED_COMMANDS_FEATURES_NVX</code></p>
</li>
<li>
<p><a id="VUID-VkDeviceGeneratedCommandsFeaturesNVX-pNext-pNext"></a> <code>pNext</code> <strong class="purple">must</strong> be <code>NULL</code></p>
</li>
</ul>
</div>
</div>
</div>
</div>
<div class="sect3">
<h4 id="_see_also_448">See Also</h4>
<div class="paragraph">
<p><code>VkBool32</code>, <a href="#VkStructureType">VkStructureType</a>, <a href="#vkGetPhysicalDeviceGeneratedCommandsPropertiesNVX">vkGetPhysicalDeviceGeneratedCommandsPropertiesNVX</a></p>
</div>
</div>
<div class="sect3">
<h4 id="_document_notes_448">Document Notes</h4>
<div class="paragraph">
<p>For more information, see the Vulkan Specification at URL</p>
</div>
<div class="paragraph">
<p><a href="https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VkDeviceGeneratedCommandsFeaturesNVX" class="bare">https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VkDeviceGeneratedCommandsFeaturesNVX</a></p>
</div>
<div class="paragraph">
<p>This page is extracted from the Vulkan Specification.
Fixes and changes should be made to the Specification, not directly.</p>
</div>
<div style="page-break-after: always;"></div>
</div>
</div>
<div class="sect2">
<h3 id="_vkdevicegeneratedcommandslimitsnvx3">VkDeviceGeneratedCommandsLimitsNVX(3)</h3>
<div class="sect3">
<h4 id="_name_449">Name</h4>
<div class="paragraph">
<p>VkDeviceGeneratedCommandsLimitsNVX - Structure specifying physical device limits</p>
</div>
</div>
<div class="sect3">
<h4 id="_c_specification_449">C Specification</h4>
<div class="paragraph">
<p>The <code>VkDeviceGeneratedCommandsLimitsNVX</code> structure is defined as:</p>
</div>
<div id="VkDeviceGeneratedCommandsLimitsNVX" class="listingblock">
<div class="content">
<pre class="highlight"><code class="language-c++" data-lang="c++">typedef struct VkDeviceGeneratedCommandsLimitsNVX {
    VkStructureType    sType;
    const void*        pNext;
    uint32_t           maxIndirectCommandsLayoutTokenCount;
    uint32_t           maxObjectEntryCounts;
    uint32_t           minSequenceCountBufferOffsetAlignment;
    uint32_t           minSequenceIndexBufferOffsetAlignment;
    uint32_t           minCommandsTokenBufferOffsetAlignment;
} VkDeviceGeneratedCommandsLimitsNVX;</code></pre>
</div>
</div>
</div>
<div class="sect3">
<h4 id="_members_86">Members</h4>
<div class="ulist">
<ul>
<li>
<p><code>sType</code> is the type of this structure.</p>
</li>
<li>
<p><code>pNext</code> is <code>NULL</code> or a pointer to an extension-specific structure.</p>
</li>
<li>
<p><code>maxIndirectCommandsLayoutTokenCount</code> the maximum number of tokens
in <code>VkIndirectCommandsLayoutNVX</code>.</p>
</li>
<li>
<p><code>maxObjectEntryCounts</code> the maximum number of entries per resource
type in <code>VkObjectTableNVX</code>.</p>
</li>
<li>
<p><code>minSequenceCountBufferOffsetAlignment</code> the minimum alignment for
memory addresses optionally used in <code>vkCmdProcessCommandsNVX</code>.</p>
</li>
<li>
<p><code>minSequenceIndexBufferOffsetAlignment</code> the minimum alignment for
memory addresses optionally used in <code>vkCmdProcessCommandsNVX</code>.</p>
</li>
<li>
<p><code>minCommandsTokenBufferOffsetAlignment</code> the minimum alignment for
memory addresses optionally used in <code>vkCmdProcessCommandsNVX</code>.</p>
</li>
</ul>
</div>
</div>
<div class="sect3">
<h4 id="_description_449">Description</h4>
<div class="sidebarblock">
<div class="content">
<div class="title">Valid Usage (Implicit)</div>
<div class="ulist">
<ul>
<li>
<p><a id="VUID-VkDeviceGeneratedCommandsLimitsNVX-sType-sType"></a> <code>sType</code> <strong class="purple">must</strong> be <code>VK_STRUCTURE_TYPE_DEVICE_GENERATED_COMMANDS_LIMITS_NVX</code></p>
</li>
<li>
<p><a id="VUID-VkDeviceGeneratedCommandsLimitsNVX-pNext-pNext"></a> <code>pNext</code> <strong class="purple">must</strong> be <code>NULL</code></p>
</li>
</ul>
</div>
</div>
</div>
</div>
<div class="sect3">
<h4 id="_see_also_449">See Also</h4>
<div class="paragraph">
<p><a href="#VkStructureType">VkStructureType</a>, <a href="#vkGetPhysicalDeviceGeneratedCommandsPropertiesNVX">vkGetPhysicalDeviceGeneratedCommandsPropertiesNVX</a></p>
</div>
</div>
<div class="sect3">
<h4 id="_document_notes_449">Document Notes</h4>
<div class="paragraph">
<p>For more information, see the Vulkan Specification at URL</p>
</div>
<div class="paragraph">
<p><a href="https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VkDeviceGeneratedCommandsLimitsNVX" class="bare">https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VkDeviceGeneratedCommandsLimitsNVX</a></p>
</div>
<div class="paragraph">
<p>This page is extracted from the Vulkan Specification.
Fixes and changes should be made to the Specification, not directly.</p>
</div>
<div style="page-break-after: always;"></div>
</div>
</div>
<div class="sect2">
<h3 id="_vkdevicegroupbindsparseinfo3">VkDeviceGroupBindSparseInfo(3)</h3>
<div class="sect3">
<h4 id="_name_450">Name</h4>
<div class="paragraph">
<p>VkDeviceGroupBindSparseInfo - Structure indicating which instances are bound</p>
</div>
</div>
<div class="sect3">
<h4 id="_c_specification_450">C Specification</h4>
<div class="paragraph">
<p>If the <code>pNext</code> chain of <a href="#VkBindSparseInfo">VkBindSparseInfo</a> includes a
<code>VkDeviceGroupBindSparseInfo</code> structure, then that structure includes
device indices specifying which instance of the resources and memory are
bound.</p>
</div>
<div class="paragraph">
<p>The <code>VkDeviceGroupBindSparseInfo</code> structure is defined as:</p>
</div>
<div id="VkDeviceGroupBindSparseInfo" class="listingblock">
<div class="content">
<pre class="highlight"><code class="language-c++" data-lang="c++">typedef struct VkDeviceGroupBindSparseInfo {
    VkStructureType    sType;
    const void*        pNext;
    uint32_t           resourceDeviceIndex;
    uint32_t           memoryDeviceIndex;
} VkDeviceGroupBindSparseInfo;</code></pre>
</div>
</div>
<div class="paragraph">
<p>or the equivalent</p>
</div>
<div id="VkDeviceGroupBindSparseInfoKHR" class="listingblock">
<div class="content">
<pre class="highlight"><code class="language-c++" data-lang="c++">typedef VkDeviceGroupBindSparseInfo VkDeviceGroupBindSparseInfoKHR;</code></pre>
</div>
</div>
</div>
<div class="sect3">
<h4 id="_members_87">Members</h4>
<div class="ulist">
<ul>
<li>
<p><code>sType</code> is the type of this structure.</p>
</li>
<li>
<p><code>pNext</code> is <code>NULL</code> or a pointer to an extension-specific structure.</p>
</li>
<li>
<p><code>resourceDeviceIndex</code> is a device index indicating which instance of
the resource is bound.</p>
</li>
<li>
<p><code>memoryDeviceIndex</code> is a device index indicating which instance of
the memory the resource instance is bound to.</p>
</li>
</ul>
</div>
</div>
<div class="sect3">
<h4 id="_description_450">Description</h4>
<div class="paragraph">
<p>These device indices apply to all buffer and image memory binds included in
the batch that points to this structure.
The semaphore waits and signals for the batch are executed only by the
physical device specified by the <code>resourceDeviceIndex</code>.</p>
</div>
<div class="paragraph">
<p>If this structure is not present, <code>resourceDeviceIndex</code> and
<code>memoryDeviceIndex</code> are assumed to be zero.</p>
</div>
<div class="sidebarblock">
<div class="content">
<div class="title">Valid Usage</div>
<div class="ulist">
<ul>
<li>
<p><a id="VUID-VkDeviceGroupBindSparseInfo-resourceDeviceIndex-01118"></a>
<code>resourceDeviceIndex</code> and <code>memoryDeviceIndex</code> <strong class="purple">must</strong> both be
valid device indices.</p>
</li>
<li>
<p><a id="VUID-VkDeviceGroupBindSparseInfo-memoryDeviceIndex-01119"></a>
Each memory allocation bound in this batch <strong class="purple">must</strong> have allocated an
instance for <code>memoryDeviceIndex</code>.</p>
</li>
</ul>
</div>
</div>
</div>
<div class="sidebarblock">
<div class="content">
<div class="title">Valid Usage (Implicit)</div>
<div class="ulist">
<ul>
<li>
<p><a id="VUID-VkDeviceGroupBindSparseInfo-sType-sType"></a> <code>sType</code> <strong class="purple">must</strong> be <code>VK_STRUCTURE_TYPE_DEVICE_GROUP_BIND_SPARSE_INFO</code></p>
</li>
</ul>
</div>
</div>
</div>
</div>
<div class="sect3">
<h4 id="_see_also_450">See Also</h4>
<div class="paragraph">
<p><a href="#VkStructureType">VkStructureType</a></p>
</div>
</div>
<div class="sect3">
<h4 id="_document_notes_450">Document Notes</h4>
<div class="paragraph">
<p>For more information, see the Vulkan Specification at URL</p>
</div>
<div class="paragraph">
<p><a href="https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VkDeviceGroupBindSparseInfo" class="bare">https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VkDeviceGroupBindSparseInfo</a></p>
</div>
<div class="paragraph">
<p>This page is extracted from the Vulkan Specification.
Fixes and changes should be made to the Specification, not directly.</p>
</div>
<div style="page-break-after: always;"></div>
</div>
</div>
<div class="sect2">
<h3 id="_vkdevicegroupcommandbufferbegininfo3">VkDeviceGroupCommandBufferBeginInfo(3)</h3>
<div class="sect3">
<h4 id="_name_451">Name</h4>
<div class="paragraph">
<p>VkDeviceGroupCommandBufferBeginInfo - Set the initial device mask for a command buffer</p>
</div>
</div>
<div class="sect3">
<h4 id="_c_specification_451">C Specification</h4>
<div class="paragraph">
<p>If the <code>pNext</code> chain of <a href="#VkCommandBufferBeginInfo">VkCommandBufferBeginInfo</a> includes a
<code>VkDeviceGroupCommandBufferBeginInfo</code> structure, then that structure
includes an initial device mask for the command buffer.</p>
</div>
<div class="paragraph">
<p>The <code>VkDeviceGroupCommandBufferBeginInfo</code> structure is defined as:</p>
</div>
<div id="VkDeviceGroupCommandBufferBeginInfo" class="listingblock">
<div class="content">
<pre class="highlight"><code class="language-c++" data-lang="c++">typedef struct VkDeviceGroupCommandBufferBeginInfo {
    VkStructureType    sType;
    const void*        pNext;
    uint32_t           deviceMask;
} VkDeviceGroupCommandBufferBeginInfo;</code></pre>
</div>
</div>
<div class="paragraph">
<p>or the equivalent</p>
</div>
<div id="VkDeviceGroupCommandBufferBeginInfoKHR" class="listingblock">
<div class="content">
<pre class="highlight"><code class="language-c++" data-lang="c++">typedef VkDeviceGroupCommandBufferBeginInfo VkDeviceGroupCommandBufferBeginInfoKHR;</code></pre>
</div>
</div>
</div>
<div class="sect3">
<h4 id="_members_88">Members</h4>
<div class="ulist">
<ul>
<li>
<p><code>sType</code> is the type of this structure.</p>
</li>
<li>
<p><code>pNext</code> is <code>NULL</code> or a pointer to an extension-specific structure.</p>
</li>
<li>
<p><code>deviceMask</code> is the initial value of the command buffer&#8217;s device
mask.</p>
</li>
</ul>
</div>
</div>
<div class="sect3">
<h4 id="_description_451">Description</h4>
<div class="paragraph">
<p>The initial device mask also acts as an upper bound on the set of devices
that <strong class="purple">can</strong> ever be in the device mask in the command buffer.</p>
</div>
<div class="paragraph">
<p>If this structure is not present, the initial value of a command buffer&#8217;s
device mask is set to include all physical devices in the logical device
when the command buffer begins recording.</p>
</div>
<div class="sidebarblock">
<div class="content">
<div class="title">Valid Usage</div>
<div class="ulist">
<ul>
<li>
<p><a id="VUID-VkDeviceGroupCommandBufferBeginInfo-deviceMask-00106"></a>
<code>deviceMask</code> <strong class="purple">must</strong> be a valid device mask value</p>
</li>
<li>
<p><a id="VUID-VkDeviceGroupCommandBufferBeginInfo-deviceMask-00107"></a>
<code>deviceMask</code> <strong class="purple">must</strong> not be zero</p>
</li>
</ul>
</div>
</div>
</div>
<div class="sidebarblock">
<div class="content">
<div class="title">Valid Usage (Implicit)</div>
<div class="ulist">
<ul>
<li>
<p><a id="VUID-VkDeviceGroupCommandBufferBeginInfo-sType-sType"></a> <code>sType</code> <strong class="purple">must</strong> be <code>VK_STRUCTURE_TYPE_DEVICE_GROUP_COMMAND_BUFFER_BEGIN_INFO</code></p>
</li>
</ul>
</div>
</div>
</div>
</div>
<div class="sect3">
<h4 id="_see_also_451">See Also</h4>
<div class="paragraph">
<p><a href="#VkStructureType">VkStructureType</a></p>
</div>
</div>
<div class="sect3">
<h4 id="_document_notes_451">Document Notes</h4>
<div class="paragraph">
<p>For more information, see the Vulkan Specification at URL</p>
</div>
<div class="paragraph">
<p><a href="https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VkDeviceGroupCommandBufferBeginInfo" class="bare">https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VkDeviceGroupCommandBufferBeginInfo</a></p>
</div>
<div class="paragraph">
<p>This page is extracted from the Vulkan Specification.
Fixes and changes should be made to the Specification, not directly.</p>
</div>
<div style="page-break-after: always;"></div>
</div>
</div>
<div class="sect2">
<h3 id="_vkdevicegroupdevicecreateinfo3">VkDeviceGroupDeviceCreateInfo(3)</h3>
<div class="sect3">
<h4 id="_name_452">Name</h4>
<div class="paragraph">
<p>VkDeviceGroupDeviceCreateInfo - Create a logical device from multiple physical devices</p>
</div>
</div>
<div class="sect3">
<h4 id="_c_specification_452">C Specification</h4>
<div class="paragraph">
<p>A logical device <strong class="purple">can</strong> be created that connects to one or more physical
devices by including a <code>VkDeviceGroupDeviceCreateInfo</code> structure in the
<code>pNext</code> chain of <a href="#VkDeviceCreateInfo">VkDeviceCreateInfo</a>.
The <code>VkDeviceGroupDeviceCreateInfo</code> structure is defined as:</p>
</div>
<div id="VkDeviceGroupDeviceCreateInfo" class="listingblock">
<div class="content">
<pre class="highlight"><code class="language-c++" data-lang="c++">typedef struct VkDeviceGroupDeviceCreateInfo {
    VkStructureType            sType;
    const void*                pNext;
    uint32_t                   physicalDeviceCount;
    const VkPhysicalDevice*    pPhysicalDevices;
} VkDeviceGroupDeviceCreateInfo;</code></pre>
</div>
</div>
<div class="paragraph">
<p>or the equivalent</p>
</div>
<div id="VkDeviceGroupDeviceCreateInfoKHR" class="listingblock">
<div class="content">
<pre class="highlight"><code class="language-c++" data-lang="c++">typedef VkDeviceGroupDeviceCreateInfo VkDeviceGroupDeviceCreateInfoKHR;</code></pre>
</div>
</div>
</div>
<div class="sect3">
<h4 id="_members_89">Members</h4>
<div class="ulist">
<ul>
<li>
<p><code>sType</code> is the type of this structure.</p>
</li>
<li>
<p><code>pNext</code> is <code>NULL</code> or a pointer to an extension-specific structure.</p>
</li>
<li>
<p><code>physicalDeviceCount</code> is the number of elements in the
<code>pPhysicalDevices</code> array.</p>
</li>
<li>
<p><code>pPhysicalDevices</code> is an array of physical device handles belonging
to the same device group.</p>
</li>
</ul>
</div>
</div>
<div class="sect3">
<h4 id="_description_452">Description</h4>
<div class="paragraph">
<p>The elements of the <code>pPhysicalDevices</code> array are an ordered list of the
physical devices that the logical device represents.
These <strong class="purple">must</strong> be a subset of a single device group, and need not be in the
same order as they were enumerated.
The order of the physical devices in the <code>pPhysicalDevices</code> array
determines the <em>device index</em> of each physical device, with element <span class="eq">i</span>
being assigned a device index of <span class="eq">i</span>.
Certain commands and structures refer to one or more physical devices by
using device indices or <em>device masks</em> formed using device indices.</p>
</div>
<div class="paragraph">
<p>A logical device created without using <code>VkDeviceGroupDeviceCreateInfo</code>,
or with <code>physicalDeviceCount</code> equal to zero, is equivalent to a
<code>physicalDeviceCount</code> of one and <code>pPhysicalDevices</code> pointing to the
<code>physicalDevice</code> parameter to <a href="#vkCreateDevice">vkCreateDevice</a>.
In particular, the device index of that physical device is zero.</p>
</div>
<div class="sidebarblock">
<div class="content">
<div class="title">Valid Usage</div>
<div class="ulist">
<ul>
<li>
<p><a id="VUID-VkDeviceGroupDeviceCreateInfo-pPhysicalDevices-00375"></a>
Each element of <code>pPhysicalDevices</code> <strong class="purple">must</strong> be unique</p>
</li>
<li>
<p><a id="VUID-VkDeviceGroupDeviceCreateInfo-pPhysicalDevices-00376"></a>
All elements of <code>pPhysicalDevices</code> <strong class="purple">must</strong> be in the same device group
as enumerated by <a href="#vkEnumeratePhysicalDeviceGroups">vkEnumeratePhysicalDeviceGroups</a></p>
</li>
<li>
<p><a id="VUID-VkDeviceGroupDeviceCreateInfo-physicalDeviceCount-00377"></a>
If <code>physicalDeviceCount</code> is not <code>0</code>, the <code>physicalDevice</code>
parameter of <a href="#vkCreateDevice">vkCreateDevice</a> <strong class="purple">must</strong> be an element of
<code>pPhysicalDevices</code>.</p>
</li>
</ul>
</div>
</div>
</div>
<div class="sidebarblock">
<div class="content">
<div class="title">Valid Usage (Implicit)</div>
<div class="ulist">
<ul>
<li>
<p><a id="VUID-VkDeviceGroupDeviceCreateInfo-sType-sType"></a> <code>sType</code> <strong class="purple">must</strong> be <code>VK_STRUCTURE_TYPE_DEVICE_GROUP_DEVICE_CREATE_INFO</code></p>
</li>
<li>
<p><a id="VUID-VkDeviceGroupDeviceCreateInfo-pPhysicalDevices-parameter"></a> If <code>physicalDeviceCount</code> is not <code>0</code>, <code>pPhysicalDevices</code> <strong class="purple">must</strong> be a valid pointer to an array of <code>physicalDeviceCount</code> valid <code>VkPhysicalDevice</code> handles</p>
</li>
</ul>
</div>
</div>
</div>
</div>
<div class="sect3">
<h4 id="_see_also_452">See Also</h4>
<div class="paragraph">
<p><a href="#VkPhysicalDevice">VkPhysicalDevice</a>, <a href="#VkStructureType">VkStructureType</a></p>
</div>
</div>
<div class="sect3">
<h4 id="_document_notes_452">Document Notes</h4>
<div class="paragraph">
<p>For more information, see the Vulkan Specification at URL</p>
</div>
<div class="paragraph">
<p><a href="https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VkDeviceGroupDeviceCreateInfo" class="bare">https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VkDeviceGroupDeviceCreateInfo</a></p>
</div>
<div class="paragraph">
<p>This page is extracted from the Vulkan Specification.
Fixes and changes should be made to the Specification, not directly.</p>
</div>
<div style="page-break-after: always;"></div>
</div>
</div>
<div class="sect2">
<h3 id="_vkdevicegrouppresentcapabilitieskhr3">VkDeviceGroupPresentCapabilitiesKHR(3)</h3>
<div class="sect3">
<h4 id="_name_453">Name</h4>
<div class="paragraph">
<p>VkDeviceGroupPresentCapabilitiesKHR - Present capabilities from other physical devices</p>
</div>
</div>
<div class="sect3">
<h4 id="_c_specification_453">C Specification</h4>
<div class="paragraph">
<p>The <code>VkDeviceGroupPresentCapabilitiesKHR</code> structure is defined as:</p>
</div>
<div id="VkDeviceGroupPresentCapabilitiesKHR" class="listingblock">
<div class="content">
<pre class="highlight"><code class="language-c++" data-lang="c++">typedef struct VkDeviceGroupPresentCapabilitiesKHR {
    VkStructureType                     sType;
    const void*                         pNext;
    uint32_t                            presentMask[VK_MAX_DEVICE_GROUP_SIZE];
    VkDeviceGroupPresentModeFlagsKHR    modes;
} VkDeviceGroupPresentCapabilitiesKHR;</code></pre>
</div>
</div>
</div>
<div class="sect3">
<h4 id="_members_90">Members</h4>
<div class="ulist">
<ul>
<li>
<p><code>sType</code> is the type of this structure.</p>
</li>
<li>
<p><code>pNext</code> is <code>NULL</code> or a pointer to an extension-specific structure.</p>
</li>
<li>
<p><code>presentMask</code> is an array of masks, where the mask at element
<span class="eq">i</span> is non-zero if physical device <span class="eq">i</span> has a presentation
engine, and where bit <span class="eq">j</span> is set in element <span class="eq">i</span> if physical
device <span class="eq">i</span> <strong class="purple">can</strong> present swapchain images from physical device
<span class="eq">j</span>.
If element <span class="eq">i</span> is non-zero, then bit <span class="eq">i</span> <strong class="purple">must</strong> be set.</p>
</li>
<li>
<p><code>modes</code> is a bitmask of <a href="#VkDeviceGroupPresentModeFlagBitsKHR">VkDeviceGroupPresentModeFlagBitsKHR</a>
indicating which device group presentation modes are supported.</p>
</li>
</ul>
</div>
</div>
<div class="sect3">
<h4 id="_description_453">Description</h4>
<div class="paragraph">
<p><code>modes</code> always has <code>VK_DEVICE_GROUP_PRESENT_MODE_LOCAL_BIT_KHR</code> set.</p>
</div>
<div class="paragraph">
<p>The present mode flags are also used when presenting an image, in
<a href="#VkDeviceGroupPresentInfoKHR">VkDeviceGroupPresentInfoKHR</a>::<code>mode</code>.</p>
</div>
<div class="paragraph">
<p>If a device group only includes a single physical device, then <code>modes</code>
<strong class="purple">must</strong> equal <code>VK_DEVICE_GROUP_PRESENT_MODE_LOCAL_BIT_KHR</code>.</p>
</div>
<div class="sidebarblock">
<div class="content">
<div class="title">Valid Usage (Implicit)</div>
<div class="ulist">
<ul>
<li>
<p><a id="VUID-VkDeviceGroupPresentCapabilitiesKHR-sType-sType"></a> <code>sType</code> <strong class="purple">must</strong> be <code>VK_STRUCTURE_TYPE_DEVICE_GROUP_PRESENT_CAPABILITIES_KHR</code></p>
</li>
<li>
<p><a id="VUID-VkDeviceGroupPresentCapabilitiesKHR-pNext-pNext"></a> <code>pNext</code> <strong class="purple">must</strong> be <code>NULL</code></p>
</li>
</ul>
</div>
</div>
</div>
</div>
<div class="sect3">
<h4 id="_see_also_453">See Also</h4>
<div class="paragraph">
<p><a href="#VkDeviceGroupPresentModeFlagsKHR">VkDeviceGroupPresentModeFlagsKHR</a>, <a href="#VkStructureType">VkStructureType</a>, <a href="#vkGetDeviceGroupPresentCapabilitiesKHR">vkGetDeviceGroupPresentCapabilitiesKHR</a></p>
</div>
</div>
<div class="sect3">
<h4 id="_document_notes_453">Document Notes</h4>
<div class="paragraph">
<p>For more information, see the Vulkan Specification at URL</p>
</div>
<div class="paragraph">
<p><a href="https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VkDeviceGroupPresentCapabilitiesKHR" class="bare">https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VkDeviceGroupPresentCapabilitiesKHR</a></p>
</div>
<div class="paragraph">
<p>This page is extracted from the Vulkan Specification.
Fixes and changes should be made to the Specification, not directly.</p>
</div>
<div style="page-break-after: always;"></div>
</div>
</div>
<div class="sect2">
<h3 id="_vkdevicegrouppresentinfokhr3">VkDeviceGroupPresentInfoKHR(3)</h3>
<div class="sect3">
<h4 id="_name_454">Name</h4>
<div class="paragraph">
<p>VkDeviceGroupPresentInfoKHR - Mode and mask controlling which physical devices' images are presented</p>
</div>
</div>
<div class="sect3">
<h4 id="_c_specification_454">C Specification</h4>
<div class="paragraph">
<p>If the <code>pNext</code> chain of <a href="#VkPresentInfoKHR">VkPresentInfoKHR</a> includes a
<code>VkDeviceGroupPresentInfoKHR</code> structure, then that structure includes an
array of device masks and a device group present mode.</p>
</div>
<div class="paragraph">
<p>The <code>VkDeviceGroupPresentInfoKHR</code> structure is defined as:</p>
</div>
<div id="VkDeviceGroupPresentInfoKHR" class="listingblock">
<div class="content">
<pre class="highlight"><code class="language-c++" data-lang="c++">typedef struct VkDeviceGroupPresentInfoKHR {
    VkStructureType                        sType;
    const void*                            pNext;
    uint32_t                               swapchainCount;
    const uint32_t*                        pDeviceMasks;
    VkDeviceGroupPresentModeFlagBitsKHR    mode;
} VkDeviceGroupPresentInfoKHR;</code></pre>
</div>
</div>
</div>
<div class="sect3">
<h4 id="_members_91">Members</h4>
<div class="ulist">
<ul>
<li>
<p><code>sType</code> is the type of this structure.</p>
</li>
<li>
<p><code>pNext</code> is <code>NULL</code> or a pointer to an extension-specific structure.</p>
</li>
<li>
<p><code>swapchainCount</code> is zero or the number of elements in
<code>pDeviceMasks</code>.</p>
</li>
<li>
<p><code>pDeviceMasks</code> is an array of device masks, one for each element of
<a href="#VkPresentInfoKHR">VkPresentInfoKHR</a>::pSwapchains.</p>
</li>
<li>
<p><code>mode</code> is the device group present mode that will be used for this
present.</p>
</li>
</ul>
</div>
</div>
<div class="sect3">
<h4 id="_description_454">Description</h4>
<div class="paragraph">
<p>If <code>mode</code> is <code>VK_DEVICE_GROUP_PRESENT_MODE_LOCAL_BIT_KHR</code>, then each
element of <code>pDeviceMasks</code> selects which instance of the swapchain image
is presented.
Each element of <code>pDeviceMasks</code> <strong class="purple">must</strong> have exactly one bit set, and the
corresponding physical device <strong class="purple">must</strong> have a presentation engine as reported
by <a href="#VkDeviceGroupPresentCapabilitiesKHR">VkDeviceGroupPresentCapabilitiesKHR</a>.</p>
</div>
<div class="paragraph">
<p>If <code>mode</code> is <code>VK_DEVICE_GROUP_PRESENT_MODE_REMOTE_BIT_KHR</code>, then
each element of <code>pDeviceMasks</code> selects which instance of the swapchain
image is presented.
Each element of <code>pDeviceMasks</code> <strong class="purple">must</strong> have exactly one bit set, and some
physical device in the logical device <strong class="purple">must</strong> include that bit in its
<a href="#VkDeviceGroupPresentCapabilitiesKHR">VkDeviceGroupPresentCapabilitiesKHR</a>::<code>presentMask</code>.</p>
</div>
<div class="paragraph">
<p>If <code>mode</code> is <code>VK_DEVICE_GROUP_PRESENT_MODE_SUM_BIT_KHR</code>, then each
element of <code>pDeviceMasks</code> selects which instances of the swapchain image
are component-wise summed and the sum of those images is presented.
If the sum in any component is outside the representable range, the value of
that component is undefined.
Each element of <code>pDeviceMasks</code> <strong class="purple">must</strong> have a value for which all set bits
are set in one of the elements of
<a href="#VkDeviceGroupPresentCapabilitiesKHR">VkDeviceGroupPresentCapabilitiesKHR</a>::<code>presentMask</code>.</p>
</div>
<div class="paragraph">
<p>If <code>mode</code> is
<code>VK_DEVICE_GROUP_PRESENT_MODE_LOCAL_MULTI_DEVICE_BIT_KHR</code>, then each
element of <code>pDeviceMasks</code> selects which instance(s) of the swapchain
images are presented.
For each bit set in each element of <code>pDeviceMasks</code>, the corresponding
physical device <strong class="purple">must</strong> have a presentation engine as reported by
<a href="#VkDeviceGroupPresentCapabilitiesKHR">VkDeviceGroupPresentCapabilitiesKHR</a>.</p>
</div>
<div class="paragraph">
<p>If <code>VkDeviceGroupPresentInfoKHR</code> is not provided or <code>swapchainCount</code>
is zero then the masks are considered to be <code>1</code>.
If <code>VkDeviceGroupPresentInfoKHR</code> is not provided, <code>mode</code> is
considered to be <code>VK_DEVICE_GROUP_PRESENT_MODE_LOCAL_BIT_KHR</code>.</p>
</div>
<div class="sidebarblock">
<div class="content">
<div class="title">Valid Usage</div>
<div class="ulist">
<ul>
<li>
<p><a id="VUID-VkDeviceGroupPresentInfoKHR-swapchainCount-01297"></a>
<code>swapchainCount</code> <strong class="purple">must</strong> equal <code>0</code> or
<a href="#VkPresentInfoKHR">VkPresentInfoKHR</a>::<code>swapchainCount</code></p>
</li>
<li>
<p><a id="VUID-VkDeviceGroupPresentInfoKHR-mode-01298"></a>
If <code>mode</code> is <code>VK_DEVICE_GROUP_PRESENT_MODE_LOCAL_BIT_KHR</code>, then
each element of <code>pDeviceMasks</code> <strong class="purple">must</strong> have exactly one bit set, and
the corresponding element of
<a href="#VkDeviceGroupPresentCapabilitiesKHR">VkDeviceGroupPresentCapabilitiesKHR</a>::<code>presentMask</code> <strong class="purple">must</strong> be
non-zero</p>
</li>
<li>
<p><a id="VUID-VkDeviceGroupPresentInfoKHR-mode-01299"></a>
If <code>mode</code> is <code>VK_DEVICE_GROUP_PRESENT_MODE_REMOTE_BIT_KHR</code>, then
each element of <code>pDeviceMasks</code> <strong class="purple">must</strong> have exactly one bit set, and
some physical device in the logical device <strong class="purple">must</strong> include that bit in its
<a href="#VkDeviceGroupPresentCapabilitiesKHR">VkDeviceGroupPresentCapabilitiesKHR</a>::<code>presentMask</code>.</p>
</li>
<li>
<p><a id="VUID-VkDeviceGroupPresentInfoKHR-mode-01300"></a>
If <code>mode</code> is <code>VK_DEVICE_GROUP_PRESENT_MODE_SUM_BIT_KHR</code>, then
each element of <code>pDeviceMasks</code> <strong class="purple">must</strong> have a value for which all set
bits are set in one of the elements of
<a href="#VkDeviceGroupPresentCapabilitiesKHR">VkDeviceGroupPresentCapabilitiesKHR</a>::<code>presentMask</code></p>
</li>
<li>
<p><a id="VUID-VkDeviceGroupPresentInfoKHR-mode-01301"></a>
If <code>mode</code> is
<code>VK_DEVICE_GROUP_PRESENT_MODE_LOCAL_MULTI_DEVICE_BIT_KHR</code>, then for
each bit set in each element of <code>pDeviceMasks</code>, the corresponding
element of <a href="#VkDeviceGroupPresentCapabilitiesKHR">VkDeviceGroupPresentCapabilitiesKHR</a>::<code>presentMask</code>
<strong class="purple">must</strong> be non-zero</p>
</li>
<li>
<p><a id="VUID-VkDeviceGroupPresentInfoKHR-pDeviceMasks-01302"></a>
The value of each element of <code>pDeviceMasks</code> <strong class="purple">must</strong> be equal to the
device mask passed in <a href="#VkAcquireNextImageInfoKHR">VkAcquireNextImageInfoKHR</a>::<code>deviceMask</code>
when the image index was last acquired</p>
</li>
<li>
<p><a id="VUID-VkDeviceGroupPresentInfoKHR-mode-01303"></a>
<code>mode</code> <strong class="purple">must</strong> have exactly one bit set, and that bit <strong class="purple">must</strong> have been
included in <a href="#VkDeviceGroupSwapchainCreateInfoKHR">VkDeviceGroupSwapchainCreateInfoKHR</a>::<code>modes</code></p>
</li>
</ul>
</div>
</div>
</div>
<div class="sidebarblock">
<div class="content">
<div class="title">Valid Usage (Implicit)</div>
<div class="ulist">
<ul>
<li>
<p><a id="VUID-VkDeviceGroupPresentInfoKHR-sType-sType"></a> <code>sType</code> <strong class="purple">must</strong> be <code>VK_STRUCTURE_TYPE_DEVICE_GROUP_PRESENT_INFO_KHR</code></p>
</li>
<li>
<p><a id="VUID-VkDeviceGroupPresentInfoKHR-pDeviceMasks-parameter"></a> If <code>swapchainCount</code> is not <code>0</code>, <code>pDeviceMasks</code> <strong class="purple">must</strong> be a valid pointer to an array of <code>swapchainCount</code> <code>uint32_t</code> values</p>
</li>
<li>
<p><a id="VUID-VkDeviceGroupPresentInfoKHR-mode-parameter"></a> <code>mode</code> <strong class="purple">must</strong> be a valid <a href="#VkDeviceGroupPresentModeFlagBitsKHR">VkDeviceGroupPresentModeFlagBitsKHR</a> value</p>
</li>
</ul>
</div>
</div>
</div>
</div>
<div class="sect3">
<h4 id="_see_also_454">See Also</h4>
<div class="paragraph">
<p><a href="#VkDeviceGroupPresentModeFlagBitsKHR">VkDeviceGroupPresentModeFlagBitsKHR</a>, <a href="#VkStructureType">VkStructureType</a></p>
</div>
</div>
<div class="sect3">
<h4 id="_document_notes_454">Document Notes</h4>
<div class="paragraph">
<p>For more information, see the Vulkan Specification at URL</p>
</div>
<div class="paragraph">
<p><a href="https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VkDeviceGroupPresentInfoKHR" class="bare">https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VkDeviceGroupPresentInfoKHR</a></p>
</div>
<div class="paragraph">
<p>This page is extracted from the Vulkan Specification.
Fixes and changes should be made to the Specification, not directly.</p>
</div>
<div style="page-break-after: always;"></div>
</div>
</div>
<div class="sect2">
<h3 id="_vkdevicegrouprenderpassbegininfo3">VkDeviceGroupRenderPassBeginInfo(3)</h3>
<div class="sect3">
<h4 id="_name_455">Name</h4>
<div class="paragraph">
<p>VkDeviceGroupRenderPassBeginInfo - Set the initial device mask and render areas for a render pass instance</p>
</div>
</div>
<div class="sect3">
<h4 id="_c_specification_455">C Specification</h4>
<div class="paragraph">
<p>If the <code>pNext</code> chain of <a href="#VkRenderPassBeginInfo">VkRenderPassBeginInfo</a> includes a
<code>VkDeviceGroupRenderPassBeginInfo</code> structure, then that structure
includes a device mask and set of render areas for the render pass instance.</p>
</div>
<div class="paragraph">
<p>The <code>VkDeviceGroupRenderPassBeginInfo</code> structure is defined as:</p>
</div>
<div id="VkDeviceGroupRenderPassBeginInfo" class="listingblock">
<div class="content">
<pre class="highlight"><code class="language-c++" data-lang="c++">typedef struct VkDeviceGroupRenderPassBeginInfo {
    VkStructureType    sType;
    const void*        pNext;
    uint32_t           deviceMask;
    uint32_t           deviceRenderAreaCount;
    const VkRect2D*    pDeviceRenderAreas;
} VkDeviceGroupRenderPassBeginInfo;</code></pre>
</div>
</div>
<div class="paragraph">
<p>or the equivalent</p>
</div>
<div id="VkDeviceGroupRenderPassBeginInfoKHR" class="listingblock">
<div class="content">
<pre class="highlight"><code class="language-c++" data-lang="c++">typedef VkDeviceGroupRenderPassBeginInfo VkDeviceGroupRenderPassBeginInfoKHR;</code></pre>
</div>
</div>
</div>
<div class="sect3">
<h4 id="_members_92">Members</h4>
<div class="ulist">
<ul>
<li>
<p><code>sType</code> is the type of this structure.</p>
</li>
<li>
<p><code>pNext</code> is <code>NULL</code> or a pointer to an extension-specific structure.</p>
</li>
<li>
<p><code>deviceMask</code> is the device mask for the render pass instance.</p>
</li>
<li>
<p><code>deviceRenderAreaCount</code> is the number of elements in the
<code>pDeviceRenderAreas</code> array.</p>
</li>
<li>
<p><code>pDeviceRenderAreas</code> is an array of structures of type
<a href="#VkRect2D">VkRect2D</a> defining the render area for each physical device.</p>
</li>
</ul>
</div>
</div>
<div class="sect3">
<h4 id="_description_455">Description</h4>
<div class="paragraph">
<p>The <code>deviceMask</code> serves several purposes.
It is an upper bound on the set of physical devices that <strong class="purple">can</strong> be used during
the render pass instance, and the initial device mask when the render pass
instance begins.
In addition, commands transitioning to the next subpass in the render pass
instance and commands ending the render pass instance, and, accordingly
render pass attachment load, store, and resolve operations and subpass
dependencies corresponding to the render pass instance, are executed on the
physical devices included in the device mask provided here.</p>
</div>
<div class="paragraph">
<p>If <code>deviceRenderAreaCount</code> is not zero, then the elements of
<code>pDeviceRenderAreas</code> override the value of
<a href="#VkRenderPassBeginInfo">VkRenderPassBeginInfo</a>::<code>renderArea</code>, and provide a render area
specific to each physical device.
These render areas serve the same purpose as
<a href="#VkRenderPassBeginInfo">VkRenderPassBeginInfo</a>::<code>renderArea</code>, including controlling the
region of attachments that are cleared by <code>VK_ATTACHMENT_LOAD_OP_CLEAR</code>
and that are resolved into resolve attachments.</p>
</div>
<div class="paragraph">
<p>If this structure is not present, the render pass instance&#8217;s device mask is
the value of <a href="#VkDeviceGroupCommandBufferBeginInfo">VkDeviceGroupCommandBufferBeginInfo</a>::<code>deviceMask</code>.
If this structure is not present or if <code>deviceRenderAreaCount</code> is zero,
<a href="#VkRenderPassBeginInfo">VkRenderPassBeginInfo</a>::<code>renderArea</code> is used for all physical
devices.</p>
</div>
<div class="sidebarblock">
<div class="content">
<div class="title">Valid Usage</div>
<div class="ulist">
<ul>
<li>
<p><a id="VUID-VkDeviceGroupRenderPassBeginInfo-deviceMask-00905"></a>
<code>deviceMask</code> <strong class="purple">must</strong> be a valid device mask value</p>
</li>
<li>
<p><a id="VUID-VkDeviceGroupRenderPassBeginInfo-deviceMask-00906"></a>
<code>deviceMask</code> <strong class="purple">must</strong> not be zero</p>
</li>
<li>
<p><a id="VUID-VkDeviceGroupRenderPassBeginInfo-deviceMask-00907"></a>
<code>deviceMask</code> <strong class="purple">must</strong> be a subset of the command buffer&#8217;s initial
device mask</p>
</li>
<li>
<p><a id="VUID-VkDeviceGroupRenderPassBeginInfo-deviceRenderAreaCount-00908"></a>
<code>deviceRenderAreaCount</code> <strong class="purple">must</strong> either be zero or equal to the number
of physical devices in the logical device.</p>
</li>
</ul>
</div>
</div>
</div>
<div class="sidebarblock">
<div class="content">
<div class="title">Valid Usage (Implicit)</div>
<div class="ulist">
<ul>
<li>
<p><a id="VUID-VkDeviceGroupRenderPassBeginInfo-sType-sType"></a> <code>sType</code> <strong class="purple">must</strong> be <code>VK_STRUCTURE_TYPE_DEVICE_GROUP_RENDER_PASS_BEGIN_INFO</code></p>
</li>
<li>
<p><a id="VUID-VkDeviceGroupRenderPassBeginInfo-pDeviceRenderAreas-parameter"></a> If <code>deviceRenderAreaCount</code> is not <code>0</code>, <code>pDeviceRenderAreas</code> <strong class="purple">must</strong> be a valid pointer to an array of <code>deviceRenderAreaCount</code> <code>VkRect2D</code> structures</p>
</li>
</ul>
</div>
</div>
</div>
</div>
<div class="sect3">
<h4 id="_see_also_455">See Also</h4>
<div class="paragraph">
<p><a href="#VkRect2D">VkRect2D</a>, <a href="#VkStructureType">VkStructureType</a></p>
</div>
</div>
<div class="sect3">
<h4 id="_document_notes_455">Document Notes</h4>
<div class="paragraph">
<p>For more information, see the Vulkan Specification at URL</p>
</div>
<div class="paragraph">
<p><a href="https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VkDeviceGroupRenderPassBeginInfo" class="bare">https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VkDeviceGroupRenderPassBeginInfo</a></p>
</div>
<div class="paragraph">
<p>This page is extracted from the Vulkan Specification.
Fixes and changes should be made to the Specification, not directly.</p>
</div>
<div style="page-break-after: always;"></div>
</div>
</div>
<div class="sect2">
<h3 id="_vkdevicegroupsubmitinfo3">VkDeviceGroupSubmitInfo(3)</h3>
<div class="sect3">
<h4 id="_name_456">Name</h4>
<div class="paragraph">
<p>VkDeviceGroupSubmitInfo - Structure indicating which physical devices execute semaphore operations and command buffers</p>
</div>
</div>
<div class="sect3">
<h4 id="_c_specification_456">C Specification</h4>
<div class="paragraph">
<p>If the <code>pNext</code> chain of <a href="#VkSubmitInfo">VkSubmitInfo</a> includes a
<code>VkDeviceGroupSubmitInfo</code> structure, then that structure includes device
indices and masks specifying which physical devices execute semaphore
operations and command buffers.</p>
</div>
<div class="paragraph">
<p>The <code>VkDeviceGroupSubmitInfo</code> structure is defined as:</p>
</div>
<div id="VkDeviceGroupSubmitInfo" class="listingblock">
<div class="content">
<pre class="highlight"><code class="language-c++" data-lang="c++">typedef struct VkDeviceGroupSubmitInfo {
    VkStructureType    sType;
    const void*        pNext;
    uint32_t           waitSemaphoreCount;
    const uint32_t*    pWaitSemaphoreDeviceIndices;
    uint32_t           commandBufferCount;
    const uint32_t*    pCommandBufferDeviceMasks;
    uint32_t           signalSemaphoreCount;
    const uint32_t*    pSignalSemaphoreDeviceIndices;
} VkDeviceGroupSubmitInfo;</code></pre>
</div>
</div>
<div class="paragraph">
<p>or the equivalent</p>
</div>
<div id="VkDeviceGroupSubmitInfoKHR" class="listingblock">
<div class="content">
<pre class="highlight"><code class="language-c++" data-lang="c++">typedef VkDeviceGroupSubmitInfo VkDeviceGroupSubmitInfoKHR;</code></pre>
</div>
</div>
</div>
<div class="sect3">
<h4 id="_members_93">Members</h4>
<div class="ulist">
<ul>
<li>
<p><code>sType</code> is the type of this structure.</p>
</li>
<li>
<p><code>pNext</code> is <code>NULL</code> or a pointer to an extension-specific structure.</p>
</li>
<li>
<p><code>waitSemaphoreCount</code> is the number of elements in the
<code>pWaitSemaphoreDeviceIndices</code> array.</p>
</li>
<li>
<p><code>pWaitSemaphoreDeviceIndices</code> is an array of device indices
indicating which physical device executes the semaphore wait operation
in the corresponding element of
<a href="#VkSubmitInfo">VkSubmitInfo</a>::<code>pWaitSemaphores</code>.</p>
</li>
<li>
<p><code>commandBufferCount</code> is the number of elements in the
<code>pCommandBufferDeviceMasks</code> array.</p>
</li>
<li>
<p><code>pCommandBufferDeviceMasks</code> is an array of device masks indicating
which physical devices execute the command buffer in the corresponding
element of <a href="#VkSubmitInfo">VkSubmitInfo</a>::<code>pCommandBuffers</code>.
A physical device executes the command buffer if the corresponding bit
is set in the mask.</p>
</li>
<li>
<p><code>signalSemaphoreCount</code> is the number of elements in the
<code>pSignalSemaphoreDeviceIndices</code> array.</p>
</li>
<li>
<p><code>pSignalSemaphoreDeviceIndices</code> is an array of device indices
indicating which physical device executes the semaphore signal operation
in the corresponding element of
<a href="#VkSubmitInfo">VkSubmitInfo</a>::<code>pSignalSemaphores</code>.</p>
</li>
</ul>
</div>
</div>
<div class="sect3">
<h4 id="_description_456">Description</h4>
<div class="paragraph">
<p>If this structure is not present, semaphore operations and command buffers
execute on device index zero.</p>
</div>
<div class="sidebarblock">
<div class="content">
<div class="title">Valid Usage</div>
<div class="ulist">
<ul>
<li>
<p><a id="VUID-VkDeviceGroupSubmitInfo-waitSemaphoreCount-00082"></a>
<code>waitSemaphoreCount</code> <strong class="purple">must</strong> equal
<a href="#VkSubmitInfo">VkSubmitInfo</a>::<code>waitSemaphoreCount</code></p>
</li>
<li>
<p><a id="VUID-VkDeviceGroupSubmitInfo-commandBufferCount-00083"></a>
<code>commandBufferCount</code> <strong class="purple">must</strong> equal
<a href="#VkSubmitInfo">VkSubmitInfo</a>::<code>commandBufferCount</code></p>
</li>
<li>
<p><a id="VUID-VkDeviceGroupSubmitInfo-signalSemaphoreCount-00084"></a>
<code>signalSemaphoreCount</code> <strong class="purple">must</strong> equal
<a href="#VkSubmitInfo">VkSubmitInfo</a>::<code>signalSemaphoreCount</code></p>
</li>
<li>
<p><a id="VUID-VkDeviceGroupSubmitInfo-pWaitSemaphoreDeviceIndices-00085"></a>
All elements of <code>pWaitSemaphoreDeviceIndices</code> and
<code>pSignalSemaphoreDeviceIndices</code> <strong class="purple">must</strong> be valid device indices</p>
</li>
<li>
<p><a id="VUID-VkDeviceGroupSubmitInfo-pCommandBufferDeviceMasks-00086"></a>
All elements of <code>pCommandBufferDeviceMasks</code> <strong class="purple">must</strong> be valid device
masks</p>
</li>
</ul>
</div>
</div>
</div>
<div class="sidebarblock">
<div class="content">
<div class="title">Valid Usage (Implicit)</div>
<div class="ulist">
<ul>
<li>
<p><a id="VUID-VkDeviceGroupSubmitInfo-sType-sType"></a> <code>sType</code> <strong class="purple">must</strong> be <code>VK_STRUCTURE_TYPE_DEVICE_GROUP_SUBMIT_INFO</code></p>
</li>
<li>
<p><a id="VUID-VkDeviceGroupSubmitInfo-pWaitSemaphoreDeviceIndices-parameter"></a> If <code>waitSemaphoreCount</code> is not <code>0</code>, <code>pWaitSemaphoreDeviceIndices</code> <strong class="purple">must</strong> be a valid pointer to an array of <code>waitSemaphoreCount</code> <code>uint32_t</code> values</p>
</li>
<li>
<p><a id="VUID-VkDeviceGroupSubmitInfo-pCommandBufferDeviceMasks-parameter"></a> If <code>commandBufferCount</code> is not <code>0</code>, <code>pCommandBufferDeviceMasks</code> <strong class="purple">must</strong> be a valid pointer to an array of <code>commandBufferCount</code> <code>uint32_t</code> values</p>
</li>
<li>
<p><a id="VUID-VkDeviceGroupSubmitInfo-pSignalSemaphoreDeviceIndices-parameter"></a> If <code>signalSemaphoreCount</code> is not <code>0</code>, <code>pSignalSemaphoreDeviceIndices</code> <strong class="purple">must</strong> be a valid pointer to an array of <code>signalSemaphoreCount</code> <code>uint32_t</code> values</p>
</li>
</ul>
</div>
</div>
</div>
</div>
<div class="sect3">
<h4 id="_see_also_456">See Also</h4>
<div class="paragraph">
<p><a href="#VkStructureType">VkStructureType</a></p>
</div>
</div>
<div class="sect3">
<h4 id="_document_notes_456">Document Notes</h4>
<div class="paragraph">
<p>For more information, see the Vulkan Specification at URL</p>
</div>
<div class="paragraph">
<p><a href="https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VkDeviceGroupSubmitInfo" class="bare">https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VkDeviceGroupSubmitInfo</a></p>
</div>
<div class="paragraph">
<p>This page is extracted from the Vulkan Specification.
Fixes and changes should be made to the Specification, not directly.</p>
</div>
<div style="page-break-after: always;"></div>
</div>
</div>
<div class="sect2">
<h3 id="_vkdevicegroupswapchaincreateinfokhr3">VkDeviceGroupSwapchainCreateInfoKHR(3)</h3>
<div class="sect3">
<h4 id="_name_457">Name</h4>
<div class="paragraph">
<p>VkDeviceGroupSwapchainCreateInfoKHR - Structure specifying parameters of a newly created swapchain object</p>
</div>
</div>
<div class="sect3">
<h4 id="_c_specification_457">C Specification</h4>
<div class="paragraph">
<p>If the <code>pNext</code> chain of <a href="#VkSwapchainCreateInfoKHR">VkSwapchainCreateInfoKHR</a> includes a
<code>VkDeviceGroupSwapchainCreateInfoKHR</code> structure, then that structure
includes a set of device group present modes that the swapchain <strong class="purple">can</strong> be used
with.</p>
</div>
<div class="paragraph">
<p>The <code>VkDeviceGroupSwapchainCreateInfoKHR</code> structure is defined as:</p>
</div>
<div id="VkDeviceGroupSwapchainCreateInfoKHR" class="listingblock">
<div class="content">
<pre class="highlight"><code class="language-c++" data-lang="c++">typedef struct VkDeviceGroupSwapchainCreateInfoKHR {
    VkStructureType                     sType;
    const void*                         pNext;
    VkDeviceGroupPresentModeFlagsKHR    modes;
} VkDeviceGroupSwapchainCreateInfoKHR;</code></pre>
</div>
</div>
</div>
<div class="sect3">
<h4 id="_members_94">Members</h4>
<div class="ulist">
<ul>
<li>
<p><code>sType</code> is the type of this structure.</p>
</li>
<li>
<p><code>pNext</code> is <code>NULL</code> or a pointer to an extension-specific structure.</p>
</li>
<li>
<p><code>modes</code> is a bitfield of modes that the swapchain <strong class="purple">can</strong> be used with.</p>
</li>
</ul>
</div>
</div>
<div class="sect3">
<h4 id="_description_457">Description</h4>
<div class="paragraph">
<p>If this structure is not present, <code>modes</code> is considered to be
<code>VK_DEVICE_GROUP_PRESENT_MODE_LOCAL_BIT_KHR</code>.</p>
</div>
<div class="sidebarblock">
<div class="content">
<div class="title">Valid Usage (Implicit)</div>
<div class="ulist">
<ul>
<li>
<p><a id="VUID-VkDeviceGroupSwapchainCreateInfoKHR-sType-sType"></a> <code>sType</code> <strong class="purple">must</strong> be <code>VK_STRUCTURE_TYPE_DEVICE_GROUP_SWAPCHAIN_CREATE_INFO_KHR</code></p>
</li>
<li>
<p><a id="VUID-VkDeviceGroupSwapchainCreateInfoKHR-modes-parameter"></a> <code>modes</code> <strong class="purple">must</strong> be a valid combination of <a href="#VkDeviceGroupPresentModeFlagBitsKHR">VkDeviceGroupPresentModeFlagBitsKHR</a> values</p>
</li>
<li>
<p><a id="VUID-VkDeviceGroupSwapchainCreateInfoKHR-modes-requiredbitmask"></a> <code>modes</code> <strong class="purple">must</strong> not be <code>0</code></p>
</li>
</ul>
</div>
</div>
</div>
</div>
<div class="sect3">
<h4 id="_see_also_457">See Also</h4>
<div class="paragraph">
<p><a href="#VkDeviceGroupPresentModeFlagsKHR">VkDeviceGroupPresentModeFlagsKHR</a>, <a href="#VkStructureType">VkStructureType</a></p>
</div>
</div>
<div class="sect3">
<h4 id="_document_notes_457">Document Notes</h4>
<div class="paragraph">
<p>For more information, see the Vulkan Specification at URL</p>
</div>
<div class="paragraph">
<p><a href="https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VkDeviceGroupSwapchainCreateInfoKHR" class="bare">https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VkDeviceGroupSwapchainCreateInfoKHR</a></p>
</div>
<div class="paragraph">
<p>This page is extracted from the Vulkan Specification.
Fixes and changes should be made to the Specification, not directly.</p>
</div>
<div style="page-break-after: always;"></div>
</div>
</div>
<div class="sect2">
<h3 id="_vkdevicememoryoverallocationcreateinfoamd3">VkDeviceMemoryOverallocationCreateInfoAMD(3)</h3>
<div class="sect3">
<h4 id="_name_458">Name</h4>
<div class="paragraph">
<p>VkDeviceMemoryOverallocationCreateInfoAMD - Specify memory overallocation behavior for a Vulkan device</p>
</div>
</div>
<div class="sect3">
<h4 id="_c_specification_458">C Specification</h4>
<div class="paragraph">
<p>To specify whether device memory allocation is allowed beyond the size
reported by <a href="#VkPhysicalDeviceMemoryProperties">VkPhysicalDeviceMemoryProperties</a>, add a
<a href="#VkDeviceMemoryOverallocationCreateInfoAMD">VkDeviceMemoryOverallocationCreateInfoAMD</a> structure to the <code>pNext</code>
chain of the <a href="#VkDeviceCreateInfo">VkDeviceCreateInfo</a> structure.
If this structure is not specified, it is as if the
<code>VK_MEMORY_OVERALLOCATION_BEHAVIOR_DEFAULT_AMD</code> value is used.</p>
</div>
<div id="VkDeviceMemoryOverallocationCreateInfoAMD" class="listingblock">
<div class="content">
<pre class="highlight"><code class="language-c++" data-lang="c++">typedef struct VkDeviceMemoryOverallocationCreateInfoAMD {
    VkStructureType                      sType;
    const void*                          pNext;
    VkMemoryOverallocationBehaviorAMD    overallocationBehavior;
} VkDeviceMemoryOverallocationCreateInfoAMD;</code></pre>
</div>
</div>
</div>
<div class="sect3">
<h4 id="_members_95">Members</h4>
<div class="ulist">
<ul>
<li>
<p><code>sType</code> is the type of this structure.</p>
</li>
<li>
<p><code>pNext</code> is <code>NULL</code> or a pointer to an extension-specific structure.</p>
</li>
<li>
<p><code>overallocationBehavior</code> is the desired overallocation behavior.</p>
</li>
</ul>
</div>
</div>
<div class="sect3">
<h4 id="_description_458">Description</h4>
<div class="sidebarblock">
<div class="content">
<div class="title">Valid Usage (Implicit)</div>
<div class="ulist">
<ul>
<li>
<p><a id="VUID-VkDeviceMemoryOverallocationCreateInfoAMD-sType-sType"></a> <code>sType</code> <strong class="purple">must</strong> be <code>VK_STRUCTURE_TYPE_DEVICE_MEMORY_OVERALLOCATION_CREATE_INFO_AMD</code></p>
</li>
<li>
<p><a id="VUID-VkDeviceMemoryOverallocationCreateInfoAMD-overallocationBehavior-parameter"></a> <code>overallocationBehavior</code> <strong class="purple">must</strong> be a valid <a href="#VkMemoryOverallocationBehaviorAMD">VkMemoryOverallocationBehaviorAMD</a> value</p>
</li>
</ul>
</div>
</div>
</div>
</div>
<div class="sect3">
<h4 id="_see_also_458">See Also</h4>
<div class="paragraph">
<p><a href="#VkMemoryOverallocationBehaviorAMD">VkMemoryOverallocationBehaviorAMD</a>, <a href="#VkStructureType">VkStructureType</a></p>
</div>
</div>
<div class="sect3">
<h4 id="_document_notes_458">Document Notes</h4>
<div class="paragraph">
<p>For more information, see the Vulkan Specification at URL</p>
</div>
<div class="paragraph">
<p><a href="https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VkDeviceMemoryOverallocationCreateInfoAMD" class="bare">https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VkDeviceMemoryOverallocationCreateInfoAMD</a></p>
</div>
<div class="paragraph">
<p>This page is extracted from the Vulkan Specification.
Fixes and changes should be made to the Specification, not directly.</p>
</div>
<div style="page-break-after: always;"></div>
</div>
</div>
<div class="sect2">
<h3 id="_vkdevicequeuecreateinfo3">VkDeviceQueueCreateInfo(3)</h3>
<div class="sect3">
<h4 id="_name_459">Name</h4>
<div class="paragraph">
<p>VkDeviceQueueCreateInfo - Structure specifying parameters of a newly created device queue</p>
</div>
</div>
<div class="sect3">
<h4 id="_c_specification_459">C Specification</h4>
<div class="paragraph">
<p>The <code>VkDeviceQueueCreateInfo</code> structure is defined as:</p>
</div>
<div id="VkDeviceQueueCreateInfo" class="listingblock">
<div class="content">
<pre class="highlight"><code class="language-c++" data-lang="c++">typedef struct VkDeviceQueueCreateInfo {
    VkStructureType             sType;
    const void*                 pNext;
    VkDeviceQueueCreateFlags    flags;
    uint32_t                    queueFamilyIndex;
    uint32_t                    queueCount;
    const float*                pQueuePriorities;
} VkDeviceQueueCreateInfo;</code></pre>
</div>
</div>
</div>
<div class="sect3">
<h4 id="_members_96">Members</h4>
<div class="ulist">
<ul>
<li>
<p><code>sType</code> is the type of this structure.</p>
</li>
<li>
<p><code>pNext</code> is <code>NULL</code> or a pointer to an extension-specific structure.</p>
</li>
<li>
<p><code>flags</code> is a bitmask indicating behavior of the queue.</p>
</li>
<li>
<p><code>queueFamilyIndex</code> is an unsigned integer indicating the index of
the queue family to create on this device.
This index corresponds to the index of an element of the
<code>pQueueFamilyProperties</code> array that was returned by
<code>vkGetPhysicalDeviceQueueFamilyProperties</code>.</p>
</li>
<li>
<p><code>queueCount</code> is an unsigned integer specifying the number of queues
to create in the queue family indicated by <code>queueFamilyIndex</code>.</p>
</li>
<li>
<p><code>pQueuePriorities</code> is an array of <code>queueCount</code> normalized
floating point values, specifying priorities of work that will be
submitted to each created queue.
See <a href="vkspec.html#devsandqueues-priority">Queue Priority</a> for more information.</p>
</li>
</ul>
</div>
</div>
<div class="sect3">
<h4 id="_description_459">Description</h4>
<div class="sidebarblock">
<div class="content">
<div class="title">Valid Usage</div>
<div class="ulist">
<ul>
<li>
<p><a id="VUID-VkDeviceQueueCreateInfo-queueFamilyIndex-00381"></a>
<code>queueFamilyIndex</code> <strong class="purple">must</strong> be less than
<code>pQueueFamilyPropertyCount</code> returned by
<code>vkGetPhysicalDeviceQueueFamilyProperties</code></p>
</li>
<li>
<p><a id="VUID-VkDeviceQueueCreateInfo-queueCount-00382"></a>
<code>queueCount</code> <strong class="purple">must</strong> be less than or equal to the <code>queueCount</code>
member of the <code>VkQueueFamilyProperties</code> structure, as returned by
<code>vkGetPhysicalDeviceQueueFamilyProperties</code> in the
<code>pQueueFamilyProperties</code>[<code>queueFamilyIndex</code>]</p>
</li>
<li>
<p><a id="VUID-VkDeviceQueueCreateInfo-pQueuePriorities-00383"></a>
Each element of <code>pQueuePriorities</code> <strong class="purple">must</strong> be between <code>0.0</code> and <code>1.0</code>
inclusive</p>
</li>
</ul>
</div>
</div>
</div>
<div class="sidebarblock">
<div class="content">
<div class="title">Valid Usage (Implicit)</div>
<div class="ulist">
<ul>
<li>
<p><a id="VUID-VkDeviceQueueCreateInfo-sType-sType"></a> <code>sType</code> <strong class="purple">must</strong> be <code>VK_STRUCTURE_TYPE_DEVICE_QUEUE_CREATE_INFO</code></p>
</li>
<li>
<p><a id="VUID-VkDeviceQueueCreateInfo-pNext-pNext"></a> <code>pNext</code> <strong class="purple">must</strong> be <code>NULL</code> or a pointer to a valid instance of <a href="#VkDeviceQueueGlobalPriorityCreateInfoEXT">VkDeviceQueueGlobalPriorityCreateInfoEXT</a></p>
</li>
<li>
<p><a id="VUID-VkDeviceQueueCreateInfo-flags-parameter"></a> <code>flags</code> <strong class="purple">must</strong> be a valid combination of <a href="#VkDeviceQueueCreateFlagBits">VkDeviceQueueCreateFlagBits</a> values</p>
</li>
<li>
<p><a id="VUID-VkDeviceQueueCreateInfo-pQueuePriorities-parameter"></a> <code>pQueuePriorities</code> <strong class="purple">must</strong> be a valid pointer to an array of <code>queueCount</code> <code>float</code> values</p>
</li>
<li>
<p><a id="VUID-VkDeviceQueueCreateInfo-queueCount-arraylength"></a> <code>queueCount</code> <strong class="purple">must</strong> be greater than <code>0</code></p>
</li>
</ul>
</div>
</div>
</div>
</div>
<div class="sect3">
<h4 id="_see_also_459">See Also</h4>
<div class="paragraph">
<p><a href="#VkDeviceCreateInfo">VkDeviceCreateInfo</a>, <a href="#VkDeviceQueueCreateFlags">VkDeviceQueueCreateFlags</a>, <a href="#VkStructureType">VkStructureType</a></p>
</div>
</div>
<div class="sect3">
<h4 id="_document_notes_459">Document Notes</h4>
<div class="paragraph">
<p>For more information, see the Vulkan Specification at URL</p>
</div>
<div class="paragraph">
<p><a href="https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VkDeviceQueueCreateInfo" class="bare">https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VkDeviceQueueCreateInfo</a></p>
</div>
<div class="paragraph">
<p>This page is extracted from the Vulkan Specification.
Fixes and changes should be made to the Specification, not directly.</p>
</div>
<div style="page-break-after: always;"></div>
</div>
</div>
<div class="sect2">
<h3 id="_vkdevicequeueglobalprioritycreateinfoext3">VkDeviceQueueGlobalPriorityCreateInfoEXT(3)</h3>
<div class="sect3">
<h4 id="_name_460">Name</h4>
<div class="paragraph">
<p>VkDeviceQueueGlobalPriorityCreateInfoEXT - Specify a system wide priority</p>
</div>
</div>
<div class="sect3">
<h4 id="_c_specification_460">C Specification</h4>
<div class="paragraph">
<p>A queue <strong class="purple">can</strong> be created with a system-wide priority by including a
<code>VkDeviceQueueGlobalPriorityCreateInfoEXT</code> structure in the <code>pNext</code>
chain of <a href="#VkDeviceQueueCreateInfo">VkDeviceQueueCreateInfo</a>.</p>
</div>
<div class="paragraph">
<p>The <code>VkDeviceQueueGlobalPriorityCreateInfoEXT</code> structure is defined as:</p>
</div>
<div id="VkDeviceQueueGlobalPriorityCreateInfoEXT" class="listingblock">
<div class="content">
<pre class="highlight"><code class="language-c++" data-lang="c++">typedef struct VkDeviceQueueGlobalPriorityCreateInfoEXT {
    VkStructureType             sType;
    const void*                 pNext;
    VkQueueGlobalPriorityEXT    globalPriority;
} VkDeviceQueueGlobalPriorityCreateInfoEXT;</code></pre>
</div>
</div>
</div>
<div class="sect3">
<h4 id="_members_97">Members</h4>
<div class="ulist">
<ul>
<li>
<p><code>sType</code> is the type of this structure.</p>
</li>
<li>
<p><code>pNext</code> is <code>NULL</code> or a pointer to an extension-specific structure.</p>
</li>
<li>
<p><code>globalPriority</code> is the system-wide priority associated to this
queue as specified by <a href="#VkQueueGlobalPriorityEXT">VkQueueGlobalPriorityEXT</a></p>
</li>
</ul>
</div>
</div>
<div class="sect3">
<h4 id="_description_460">Description</h4>
<div class="paragraph">
<p>A queue created without specifying
<code>VkDeviceQueueGlobalPriorityCreateInfoEXT</code> will default to
<code>VK_QUEUE_GLOBAL_PRIORITY_MEDIUM_EXT</code>.</p>
</div>
<div class="sidebarblock">
<div class="content">
<div class="title">Valid Usage (Implicit)</div>
<div class="ulist">
<ul>
<li>
<p><a id="VUID-VkDeviceQueueGlobalPriorityCreateInfoEXT-sType-sType"></a> <code>sType</code> <strong class="purple">must</strong> be <code>VK_STRUCTURE_TYPE_DEVICE_QUEUE_GLOBAL_PRIORITY_CREATE_INFO_EXT</code></p>
</li>
<li>
<p><a id="VUID-VkDeviceQueueGlobalPriorityCreateInfoEXT-globalPriority-parameter"></a> <code>globalPriority</code> <strong class="purple">must</strong> be a valid <a href="#VkQueueGlobalPriorityEXT">VkQueueGlobalPriorityEXT</a> value</p>
</li>
</ul>
</div>
</div>
</div>
</div>
<div class="sect3">
<h4 id="_see_also_460">See Also</h4>
<div class="paragraph">
<p><a href="#VkQueueGlobalPriorityEXT">VkQueueGlobalPriorityEXT</a>, <a href="#VkStructureType">VkStructureType</a></p>
</div>
</div>
<div class="sect3">
<h4 id="_document_notes_460">Document Notes</h4>
<div class="paragraph">
<p>For more information, see the Vulkan Specification at URL</p>
</div>
<div class="paragraph">
<p><a href="https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VkDeviceQueueGlobalPriorityCreateInfoEXT" class="bare">https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VkDeviceQueueGlobalPriorityCreateInfoEXT</a></p>
</div>
<div class="paragraph">
<p>This page is extracted from the Vulkan Specification.
Fixes and changes should be made to the Specification, not directly.</p>
</div>
<div style="page-break-after: always;"></div>
</div>
</div>
<div class="sect2">
<h3 id="_vkdevicequeueinfo23">VkDeviceQueueInfo2(3)</h3>
<div class="sect3">
<h4 id="_name_461">Name</h4>
<div class="paragraph">
<p>VkDeviceQueueInfo2 - Structure specifying the parameters used for device queue creation</p>
</div>
</div>
<div class="sect3">
<h4 id="_c_specification_461">C Specification</h4>
<div class="paragraph">
<p>The <code>VkDeviceQueueInfo2</code> structure is defined as:</p>
</div>
<div id="VkDeviceQueueInfo2" class="listingblock">
<div class="content">
<pre class="highlight"><code class="language-c++" data-lang="c++">typedef struct VkDeviceQueueInfo2 {
    VkStructureType             sType;
    const void*                 pNext;
    VkDeviceQueueCreateFlags    flags;
    uint32_t                    queueFamilyIndex;
    uint32_t                    queueIndex;
} VkDeviceQueueInfo2;</code></pre>
</div>
</div>
</div>
<div class="sect3">
<h4 id="_members_98">Members</h4>
<div class="ulist">
<ul>
<li>
<p><code>sType</code> is the type of this structure.</p>
</li>
<li>
<p><code>pNext</code> is <code>NULL</code> or a pointer to an extension-specific structure.
The <code>pNext</code> chain of <code>VkDeviceQueueInfo2</code> is used to provide
additional image parameters to <code>vkGetDeviceQueue2</code>.</p>
</li>
<li>
<p><code>flags</code> is a <a href="#VkDeviceQueueCreateFlags">VkDeviceQueueCreateFlags</a> value indicating the
flags used to create the device queue.</p>
</li>
<li>
<p><code>queueFamilyIndex</code> is the index of the queue family to which the
queue belongs.</p>
</li>
<li>
<p><code>queueIndex</code> is the index within this queue family of the queue to
retrieve.</p>
</li>
</ul>
</div>
</div>
<div class="sect3">
<h4 id="_description_461">Description</h4>
<div class="paragraph">
<p>The queue returned by <code>vkGetDeviceQueue2</code> <strong class="purple">must</strong> have the same
<code>flags</code> value from this structure as that used at device creation time
in a <code>VkDeviceQueueCreateInfo</code> instance.
If no matching <code>flags</code> were specified at device creation time then
<code>pQueue</code> will return <a href="#VK_NULL_HANDLE">VK_NULL_HANDLE</a>.</p>
</div>
<div class="sidebarblock">
<div class="content">
<div class="title">Valid Usage</div>
<div class="ulist">
<ul>
<li>
<p><a id="VUID-VkDeviceQueueInfo2-queueFamilyIndex-01842"></a>
<code>queueFamilyIndex</code> <strong class="purple">must</strong> be one of the queue family indices
specified when <code>device</code> was created, via the
<code>VkDeviceQueueCreateInfo</code> structure</p>
</li>
<li>
<p><a id="VUID-VkDeviceQueueInfo2-queueIndex-01843"></a>
<code>queueIndex</code> <strong class="purple">must</strong> be less than the number of queues created for the
specified queue family index and <a href="#VkDeviceQueueCreateFlags">VkDeviceQueueCreateFlags</a> member
<code>flags</code> equal to this <code>flags</code> value when <code>device</code> was
created, via the <code>queueCount</code> member of the
<code>VkDeviceQueueCreateInfo</code> structure</p>
</li>
</ul>
</div>
</div>
</div>
<div class="sidebarblock">
<div class="content">
<div class="title">Valid Usage (Implicit)</div>
<div class="ulist">
<ul>
<li>
<p><a id="VUID-VkDeviceQueueInfo2-sType-sType"></a> <code>sType</code> <strong class="purple">must</strong> be <code>VK_STRUCTURE_TYPE_DEVICE_QUEUE_INFO_2</code></p>
</li>
<li>
<p><a id="VUID-VkDeviceQueueInfo2-pNext-pNext"></a> <code>pNext</code> <strong class="purple">must</strong> be <code>NULL</code></p>
</li>
<li>
<p><a id="VUID-VkDeviceQueueInfo2-flags-parameter"></a> <code>flags</code> <strong class="purple">must</strong> be a valid combination of <a href="#VkDeviceQueueCreateFlagBits">VkDeviceQueueCreateFlagBits</a> values</p>
</li>
<li>
<p><a id="VUID-VkDeviceQueueInfo2-flags-requiredbitmask"></a> <code>flags</code> <strong class="purple">must</strong> not be <code>0</code></p>
</li>
</ul>
</div>
</div>
</div>
</div>
<div class="sect3">
<h4 id="_see_also_461">See Also</h4>
<div class="paragraph">
<p><a href="#VkDeviceQueueCreateFlags">VkDeviceQueueCreateFlags</a>, <a href="#VkStructureType">VkStructureType</a>, <a href="#vkGetDeviceQueue2">vkGetDeviceQueue2</a></p>
</div>
</div>
<div class="sect3">
<h4 id="_document_notes_461">Document Notes</h4>
<div class="paragraph">
<p>For more information, see the Vulkan Specification at URL</p>
</div>
<div class="paragraph">
<p><a href="https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VkDeviceQueueInfo2" class="bare">https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VkDeviceQueueInfo2</a></p>
</div>
<div class="paragraph">
<p>This page is extracted from the Vulkan Specification.
Fixes and changes should be made to the Specification, not directly.</p>
</div>
<div style="page-break-after: always;"></div>
</div>
</div>
<div class="sect2">
<h3 id="_vkdispatchindirectcommand3">VkDispatchIndirectCommand(3)</h3>
<div class="sect3">
<h4 id="_name_462">Name</h4>
<div class="paragraph">
<p>VkDispatchIndirectCommand - Structure specifying a dispatch indirect command</p>
</div>
</div>
<div class="sect3">
<h4 id="_c_specification_462">C Specification</h4>
<div class="paragraph">
<p>The <code>VkDispatchIndirectCommand</code> structure is defined as:</p>
</div>
<div id="VkDispatchIndirectCommand" class="listingblock">
<div class="content">
<pre class="highlight"><code class="language-c++" data-lang="c++">typedef struct VkDispatchIndirectCommand {
    uint32_t    x;
    uint32_t    y;
    uint32_t    z;
} VkDispatchIndirectCommand;</code></pre>
</div>
</div>
</div>
<div class="sect3">
<h4 id="_members_99">Members</h4>
<div class="ulist">
<ul>
<li>
<p><code>x</code> is the number of local workgroups to dispatch in the X
dimension.</p>
</li>
<li>
<p><code>y</code> is the number of local workgroups to dispatch in the Y
dimension.</p>
</li>
<li>
<p><code>z</code> is the number of local workgroups to dispatch in the Z
dimension.</p>
</li>
</ul>
</div>
</div>
<div class="sect3">
<h4 id="_description_462">Description</h4>
<div class="paragraph">
<p>The members of <code>VkDispatchIndirectCommand</code> have the same meaning as the
corresponding parameters of <a href="#vkCmdDispatch">vkCmdDispatch</a>.</p>
</div>
<div class="sidebarblock">
<div class="content">
<div class="title">Valid Usage</div>
<div class="ulist">
<ul>
<li>
<p><a id="VUID-VkDispatchIndirectCommand-x-00417"></a>
<code>x</code> <strong class="purple">must</strong> be less than or equal to
<code>VkPhysicalDeviceLimits</code>::<code>maxComputeWorkGroupCount</code>[0]</p>
</li>
<li>
<p><a id="VUID-VkDispatchIndirectCommand-y-00418"></a>
<code>y</code> <strong class="purple">must</strong> be less than or equal to
<code>VkPhysicalDeviceLimits</code>::<code>maxComputeWorkGroupCount</code>[1]</p>
</li>
<li>
<p><a id="VUID-VkDispatchIndirectCommand-z-00419"></a>
<code>z</code> <strong class="purple">must</strong> be less than or equal to
<code>VkPhysicalDeviceLimits</code>::<code>maxComputeWorkGroupCount</code>[2]</p>
</li>
</ul>
</div>
</div>
</div>
</div>
<div class="sect3">
<h4 id="_see_also_462">See Also</h4>
<div class="paragraph">
<p><a href="#vkCmdDispatchIndirect">vkCmdDispatchIndirect</a></p>
</div>
</div>
<div class="sect3">
<h4 id="_document_notes_462">Document Notes</h4>
<div class="paragraph">
<p>For more information, see the Vulkan Specification at URL</p>
</div>
<div class="paragraph">
<p><a href="https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VkDispatchIndirectCommand" class="bare">https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VkDispatchIndirectCommand</a></p>
</div>
<div class="paragraph">
<p>This page is extracted from the Vulkan Specification.
Fixes and changes should be made to the Specification, not directly.</p>
</div>
<div style="page-break-after: always;"></div>
</div>
</div>
<div class="sect2">
<h3 id="_vkdisplayeventinfoext3">VkDisplayEventInfoEXT(3)</h3>
<div class="sect3">
<h4 id="_name_463">Name</h4>
<div class="paragraph">
<p>VkDisplayEventInfoEXT - Describe a display event to create</p>
</div>
</div>
<div class="sect3">
<h4 id="_c_specification_463">C Specification</h4>
<div class="paragraph">
<p>The <code>VkDisplayEventInfoEXT</code> structure is defined as:</p>
</div>
<div id="VkDisplayEventInfoEXT" class="listingblock">
<div class="content">
<pre class="highlight"><code class="language-c++" data-lang="c++">typedef struct VkDisplayEventInfoEXT {
    VkStructureType          sType;
    const void*              pNext;
    VkDisplayEventTypeEXT    displayEvent;
} VkDisplayEventInfoEXT;</code></pre>
</div>
</div>
</div>
<div class="sect3">
<h4 id="_members_100">Members</h4>
<div class="ulist">
<ul>
<li>
<p><code>sType</code> is the type of this structure.</p>
</li>
<li>
<p><code>pNext</code> is <code>NULL</code> or a pointer to an extension-specific structure.</p>
</li>
<li>
<p><code>displayEvent</code> is a <a href="#VkDisplayEventTypeEXT">VkDisplayEventTypeEXT</a> specifying when the
fence will be signaled.</p>
</li>
</ul>
</div>
</div>
<div class="sect3">
<h4 id="_description_463">Description</h4>
<div class="sidebarblock">
<div class="content">
<div class="title">Valid Usage (Implicit)</div>
<div class="ulist">
<ul>
<li>
<p><a id="VUID-VkDisplayEventInfoEXT-sType-sType"></a> <code>sType</code> <strong class="purple">must</strong> be <code>VK_STRUCTURE_TYPE_DISPLAY_EVENT_INFO_EXT</code></p>
</li>
<li>
<p><a id="VUID-VkDisplayEventInfoEXT-pNext-pNext"></a> <code>pNext</code> <strong class="purple">must</strong> be <code>NULL</code></p>
</li>
<li>
<p><a id="VUID-VkDisplayEventInfoEXT-displayEvent-parameter"></a> <code>displayEvent</code> <strong class="purple">must</strong> be a valid <a href="#VkDisplayEventTypeEXT">VkDisplayEventTypeEXT</a> value</p>
</li>
</ul>
</div>
</div>
</div>
</div>
<div class="sect3">
<h4 id="_see_also_463">See Also</h4>
<div class="paragraph">
<p><a href="#VkDisplayEventTypeEXT">VkDisplayEventTypeEXT</a>, <a href="#VkStructureType">VkStructureType</a>, <a href="#vkRegisterDisplayEventEXT">vkRegisterDisplayEventEXT</a></p>
</div>
</div>
<div class="sect3">
<h4 id="_document_notes_463">Document Notes</h4>
<div class="paragraph">
<p>For more information, see the Vulkan Specification at URL</p>
</div>
<div class="paragraph">
<p><a href="https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VkDisplayEventInfoEXT" class="bare">https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VkDisplayEventInfoEXT</a></p>
</div>
<div class="paragraph">
<p>This page is extracted from the Vulkan Specification.
Fixes and changes should be made to the Specification, not directly.</p>
</div>
<div style="page-break-after: always;"></div>
</div>
</div>
<div class="sect2">
<h3 id="_vkdisplaymodecreateinfokhr3">VkDisplayModeCreateInfoKHR(3)</h3>
<div class="sect3">
<h4 id="_name_464">Name</h4>
<div class="paragraph">
<p>VkDisplayModeCreateInfoKHR - Structure specifying parameters of a newly created display mode object</p>
</div>
</div>
<div class="sect3">
<h4 id="_c_specification_464">C Specification</h4>
<div class="paragraph">
<p>The <code>VkDisplayModeCreateInfoKHR</code> structure is defined as:</p>
</div>
<div id="VkDisplayModeCreateInfoKHR" class="listingblock">
<div class="content">
<pre class="highlight"><code class="language-c++" data-lang="c++">typedef struct VkDisplayModeCreateInfoKHR {
    VkStructureType                sType;
    const void*                    pNext;
    VkDisplayModeCreateFlagsKHR    flags;
    VkDisplayModeParametersKHR     parameters;
} VkDisplayModeCreateInfoKHR;</code></pre>
</div>
</div>
</div>
<div class="sect3">
<h4 id="_members_101">Members</h4>
<div class="ulist">
<ul>
<li>
<p><code>sType</code> is the type of this structure.</p>
</li>
<li>
<p><code>pNext</code> is <code>NULL</code> or a pointer to an extension-specific structure.</p>
</li>
<li>
<p><code>flags</code> is reserved for future use, and <strong class="purple">must</strong> be zero.</p>
</li>
<li>
<p><code>parameters</code> is a <a href="#VkDisplayModeParametersKHR">VkDisplayModeParametersKHR</a> structure
describing the display parameters to use in creating the new mode.
If the parameters are not compatible with the specified display, the
implementation <strong class="purple">must</strong> return <code>VK_ERROR_INITIALIZATION_FAILED</code>.</p>
</li>
</ul>
</div>
</div>
<div class="sect3">
<h4 id="_description_464">Description</h4>
<div class="sidebarblock">
<div class="content">
<div class="title">Valid Usage (Implicit)</div>
<div class="ulist">
<ul>
<li>
<p><a id="VUID-VkDisplayModeCreateInfoKHR-sType-sType"></a> <code>sType</code> <strong class="purple">must</strong> be <code>VK_STRUCTURE_TYPE_DISPLAY_MODE_CREATE_INFO_KHR</code></p>
</li>
<li>
<p><a id="VUID-VkDisplayModeCreateInfoKHR-pNext-pNext"></a> <code>pNext</code> <strong class="purple">must</strong> be <code>NULL</code></p>
</li>
<li>
<p><a id="VUID-VkDisplayModeCreateInfoKHR-flags-zerobitmask"></a> <code>flags</code> <strong class="purple">must</strong> be <code>0</code></p>
</li>
<li>
<p><a id="VUID-VkDisplayModeCreateInfoKHR-parameters-parameter"></a> <code>parameters</code> <strong class="purple">must</strong> be a valid <code>VkDisplayModeParametersKHR</code> structure</p>
</li>
</ul>
</div>
</div>
</div>
</div>
<div class="sect3">
<h4 id="_see_also_464">See Also</h4>
<div class="paragraph">
<p><a href="#VkDisplayModeCreateFlagsKHR">VkDisplayModeCreateFlagsKHR</a>, <a href="#VkDisplayModeParametersKHR">VkDisplayModeParametersKHR</a>, <a href="#VkStructureType">VkStructureType</a>, <a href="#vkCreateDisplayModeKHR">vkCreateDisplayModeKHR</a></p>
</div>
</div>
<div class="sect3">
<h4 id="_document_notes_464">Document Notes</h4>
<div class="paragraph">
<p>For more information, see the Vulkan Specification at URL</p>
</div>
<div class="paragraph">
<p><a href="https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VkDisplayModeCreateInfoKHR" class="bare">https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VkDisplayModeCreateInfoKHR</a></p>
</div>
<div class="paragraph">
<p>This page is extracted from the Vulkan Specification.
Fixes and changes should be made to the Specification, not directly.</p>
</div>
<div style="page-break-after: always;"></div>
</div>
</div>
<div class="sect2">
<h3 id="_vkdisplaymodeparameterskhr3">VkDisplayModeParametersKHR(3)</h3>
<div class="sect3">
<h4 id="_name_465">Name</h4>
<div class="paragraph">
<p>VkDisplayModeParametersKHR - Structure describing display parameters associated with a display mode</p>
</div>
</div>
<div class="sect3">
<h4 id="_c_specification_465">C Specification</h4>
<div class="paragraph">
<p>The <code>VkDisplayModeParametersKHR</code> structure is defined as:</p>
</div>
<div id="VkDisplayModeParametersKHR" class="listingblock">
<div class="content">
<pre class="highlight"><code class="language-c++" data-lang="c++">typedef struct VkDisplayModeParametersKHR {
    VkExtent2D    visibleRegion;
    uint32_t      refreshRate;
} VkDisplayModeParametersKHR;</code></pre>
</div>
</div>
</div>
<div class="sect3">
<h4 id="_members_102">Members</h4>
<div class="ulist">
<ul>
<li>
<p><code>visibleRegion</code> is the 2D extents of the visible region.</p>
</li>
<li>
<p><code>refreshRate</code> is a <code>uint32_t</code> that is the number of times the
display is refreshed each second multiplied by 1000.</p>
</li>
</ul>
</div>
</div>
<div class="sect3">
<h4 id="_description_465">Description</h4>
<div class="admonitionblock note">
<table>
<tr>
<td class="icon">
<i class="fa icon-note" title="Note"></i>
</td>
<td class="content">
<div class="title">Note</div>
<div class="paragraph">
<p>For example, a 60Hz display mode would report a <code>refreshRate</code> of 60,000.</p>
</div>
</td>
</tr>
</table>
</div>
<div class="sidebarblock">
<div class="content">
<div class="title">Valid Usage</div>
<div class="ulist">
<ul>
<li>
<p><a id="VUID-VkDisplayModeParametersKHR-width-01990"></a>
The <code>width</code> member of <code>visibleRegion</code> <strong class="purple">must</strong> be greater than <code>0</code></p>
</li>
<li>
<p><a id="VUID-VkDisplayModeParametersKHR-height-01991"></a>
The <code>height</code> member of <code>visibleRegion</code> <strong class="purple">must</strong> be greater than <code>0</code></p>
</li>
<li>
<p><a id="VUID-VkDisplayModeParametersKHR-refreshRate-01992"></a>
<code>refreshRate</code> <strong class="purple">must</strong> be greater than <code>0</code></p>
</li>
</ul>
</div>
</div>
</div>
</div>
<div class="sect3">
<h4 id="_see_also_465">See Also</h4>
<div class="paragraph">
<p><a href="#VkDisplayModeCreateInfoKHR">VkDisplayModeCreateInfoKHR</a>, <a href="#VkDisplayModePropertiesKHR">VkDisplayModePropertiesKHR</a>, <a href="#VkExtent2D">VkExtent2D</a></p>
</div>
</div>
<div class="sect3">
<h4 id="_document_notes_465">Document Notes</h4>
<div class="paragraph">
<p>For more information, see the Vulkan Specification at URL</p>
</div>
<div class="paragraph">
<p><a href="https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VkDisplayModeParametersKHR" class="bare">https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VkDisplayModeParametersKHR</a></p>
</div>
<div class="paragraph">
<p>This page is extracted from the Vulkan Specification.
Fixes and changes should be made to the Specification, not directly.</p>
</div>
<div style="page-break-after: always;"></div>
</div>
</div>
<div class="sect2">
<h3 id="_vkdisplaymodeproperties2khr3">VkDisplayModeProperties2KHR(3)</h3>
<div class="sect3">
<h4 id="_name_466">Name</h4>
<div class="paragraph">
<p>VkDisplayModeProperties2KHR - Structure describing an available display mode</p>
</div>
</div>
<div class="sect3">
<h4 id="_c_specification_466">C Specification</h4>
<div class="paragraph">
<p>The <code>VkDisplayModeProperties2KHR</code> structure is defined as:</p>
</div>
<div id="VkDisplayModeProperties2KHR" class="listingblock">
<div class="content">
<pre class="highlight"><code class="language-c++" data-lang="c++">typedef struct VkDisplayModeProperties2KHR {
    VkStructureType               sType;
    void*                         pNext;
    VkDisplayModePropertiesKHR    displayModeProperties;
} VkDisplayModeProperties2KHR;</code></pre>
</div>
</div>
</div>
<div class="sect3">
<h4 id="_members_103">Members</h4>
<div class="ulist">
<ul>
<li>
<p><code>sType</code> is the type of this structure.</p>
</li>
<li>
<p><code>pNext</code> is <code>NULL</code> or a pointer to an extension-specific structure.</p>
</li>
<li>
<p><code>displayModeProperties</code> is an instance of the
<a href="#VkDisplayModePropertiesKHR">VkDisplayModePropertiesKHR</a> structure.</p>
</li>
</ul>
</div>
</div>
<div class="sect3">
<h4 id="_description_466">Description</h4>
<div class="sidebarblock">
<div class="content">
<div class="title">Valid Usage (Implicit)</div>
<div class="ulist">
<ul>
<li>
<p><a id="VUID-VkDisplayModeProperties2KHR-sType-sType"></a> <code>sType</code> <strong class="purple">must</strong> be <code>VK_STRUCTURE_TYPE_DISPLAY_MODE_PROPERTIES_2_KHR</code></p>
</li>
<li>
<p><a id="VUID-VkDisplayModeProperties2KHR-pNext-pNext"></a> <code>pNext</code> <strong class="purple">must</strong> be <code>NULL</code></p>
</li>
</ul>
</div>
</div>
</div>
</div>
<div class="sect3">
<h4 id="_see_also_466">See Also</h4>
<div class="paragraph">
<p><a href="#VkDisplayModePropertiesKHR">VkDisplayModePropertiesKHR</a>, <a href="#VkStructureType">VkStructureType</a>, <a href="#vkGetDisplayModeProperties2KHR">vkGetDisplayModeProperties2KHR</a></p>
</div>
</div>
<div class="sect3">
<h4 id="_document_notes_466">Document Notes</h4>
<div class="paragraph">
<p>For more information, see the Vulkan Specification at URL</p>
</div>
<div class="paragraph">
<p><a href="https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VkDisplayModeProperties2KHR" class="bare">https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VkDisplayModeProperties2KHR</a></p>
</div>
<div class="paragraph">
<p>This page is extracted from the Vulkan Specification.
Fixes and changes should be made to the Specification, not directly.</p>
</div>
<div style="page-break-after: always;"></div>
</div>
</div>
<div class="sect2">
<h3 id="_vkdisplaymodepropertieskhr3">VkDisplayModePropertiesKHR(3)</h3>
<div class="sect3">
<h4 id="_name_467">Name</h4>
<div class="paragraph">
<p>VkDisplayModePropertiesKHR - Structure describing display mode properties</p>
</div>
</div>
<div class="sect3">
<h4 id="_c_specification_467">C Specification</h4>
<div class="paragraph">
<p>The <code>VkDisplayModePropertiesKHR</code> structure is defined as:</p>
</div>
<div id="VkDisplayModePropertiesKHR" class="listingblock">
<div class="content">
<pre class="highlight"><code class="language-c++" data-lang="c++">typedef struct VkDisplayModePropertiesKHR {
    VkDisplayModeKHR              displayMode;
    VkDisplayModeParametersKHR    parameters;
} VkDisplayModePropertiesKHR;</code></pre>
</div>
</div>
</div>
<div class="sect3">
<h4 id="_members_104">Members</h4>
<div class="ulist">
<ul>
<li>
<p><code>displayMode</code> is a handle to the display mode described in this
structure.
This handle will be valid for the lifetime of the Vulkan instance.</p>
</li>
<li>
<p><code>parameters</code> is a <a href="#VkDisplayModeParametersKHR">VkDisplayModeParametersKHR</a> structure
describing the display parameters associated with <code>displayMode</code>.</p>
</li>
</ul>
</div>
</div>
<div class="sect3">
<h4 id="_description_467">Description</h4>

</div>
<div class="sect3">
<h4 id="_see_also_467">See Also</h4>
<div class="paragraph">
<p><a href="#VkDisplayModeKHR">VkDisplayModeKHR</a>, <a href="#VkDisplayModeParametersKHR">VkDisplayModeParametersKHR</a>, <a href="#VkDisplayModeProperties2KHR">VkDisplayModeProperties2KHR</a>, <a href="#vkGetDisplayModePropertiesKHR">vkGetDisplayModePropertiesKHR</a></p>
</div>
</div>
<div class="sect3">
<h4 id="_document_notes_467">Document Notes</h4>
<div class="paragraph">
<p>For more information, see the Vulkan Specification at URL</p>
</div>
<div class="paragraph">
<p><a href="https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VkDisplayModePropertiesKHR" class="bare">https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VkDisplayModePropertiesKHR</a></p>
</div>
<div class="paragraph">
<p>This page is extracted from the Vulkan Specification.
Fixes and changes should be made to the Specification, not directly.</p>
</div>
<div style="page-break-after: always;"></div>
</div>
</div>
<div class="sect2">
<h3 id="_vkdisplaynativehdrsurfacecapabilitiesamd3">VkDisplayNativeHdrSurfaceCapabilitiesAMD(3)</h3>
<div class="sect3">
<h4 id="_name_468">Name</h4>
<div class="paragraph">
<p>VkDisplayNativeHdrSurfaceCapabilitiesAMD - Structure describing display native HDR specific capabilities of a surface</p>
</div>
</div>
<div class="sect3">
<h4 id="_c_specification_468">C Specification</h4>
<div class="paragraph">
<p>The <code>VkDisplayNativeHdrSurfaceCapabilitiesAMD</code> structure is defined as:</p>
</div>
<div id="VkDisplayNativeHdrSurfaceCapabilitiesAMD" class="listingblock">
<div class="content">
<pre class="highlight"><code class="language-c++" data-lang="c++">typedef struct VkDisplayNativeHdrSurfaceCapabilitiesAMD {
    VkStructureType    sType;
    void*              pNext;
    VkBool32           localDimmingSupport;
} VkDisplayNativeHdrSurfaceCapabilitiesAMD;</code></pre>
</div>
</div>
</div>
<div class="sect3">
<h4 id="_members_105">Members</h4>
<div class="ulist">
<ul>
<li>
<p><code>sType</code> is the type of this structure.</p>
</li>
<li>
<p><code>pNext</code> is <code>NULL</code> or a pointer to an extension-specific structure.</p>
</li>
<li>
<p><code>localDimmingSupport</code> specifies whether the surface supports local
dimming.
If this is <code>VK_TRUE</code>, <a href="#VkSwapchainDisplayNativeHdrCreateInfoAMD">VkSwapchainDisplayNativeHdrCreateInfoAMD</a>
<strong class="purple">can</strong> be used to explicitly enable or disable local dimming for the
surface.
Local dimming may also be overriden by <a href="#vkSetLocalDimmingAMD">vkSetLocalDimmingAMD</a> during
the lifetime of the swapchain.</p>
</li>
</ul>
</div>
</div>
<div class="sect3">
<h4 id="_description_468">Description</h4>
<div class="sidebarblock">
<div class="content">
<div class="title">Valid Usage (Implicit)</div>
<div class="ulist">
<ul>
<li>
<p><a id="VUID-VkDisplayNativeHdrSurfaceCapabilitiesAMD-sType-sType"></a> <code>sType</code> <strong class="purple">must</strong> be <code>VK_STRUCTURE_TYPE_DISPLAY_NATIVE_HDR_SURFACE_CAPABILITIES_AMD</code></p>
</li>
</ul>
</div>
</div>
</div>
</div>
<div class="sect3">
<h4 id="_see_also_468">See Also</h4>
<div class="paragraph">
<p><code>VkBool32</code>, <a href="#VkStructureType">VkStructureType</a></p>
</div>
</div>
<div class="sect3">
<h4 id="_document_notes_468">Document Notes</h4>
<div class="paragraph">
<p>For more information, see the Vulkan Specification at URL</p>
</div>
<div class="paragraph">
<p><a href="https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VkDisplayNativeHdrSurfaceCapabilitiesAMD" class="bare">https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VkDisplayNativeHdrSurfaceCapabilitiesAMD</a></p>
</div>
<div class="paragraph">
<p>This page is extracted from the Vulkan Specification.
Fixes and changes should be made to the Specification, not directly.</p>
</div>
<div style="page-break-after: always;"></div>
</div>
</div>
<div class="sect2">
<h3 id="_vkdisplayplanecapabilities2khr3">VkDisplayPlaneCapabilities2KHR(3)</h3>
<div class="sect3">
<h4 id="_name_469">Name</h4>
<div class="paragraph">
<p>VkDisplayPlaneCapabilities2KHR - Structure describing the capabilities of a mode and plane combination</p>
</div>
</div>
<div class="sect3">
<h4 id="_c_specification_469">C Specification</h4>
<div class="paragraph">
<p>The <code>VkDisplayPlaneCapabilities2KHR</code> structure is defined as:</p>
</div>
<div id="VkDisplayPlaneCapabilities2KHR" class="listingblock">
<div class="content">
<pre class="highlight"><code class="language-c++" data-lang="c++">typedef struct VkDisplayPlaneCapabilities2KHR {
    VkStructureType                  sType;
    void*                            pNext;
    VkDisplayPlaneCapabilitiesKHR    capabilities;
} VkDisplayPlaneCapabilities2KHR;</code></pre>
</div>
</div>
</div>
<div class="sect3">
<h4 id="_members_106">Members</h4>
<div class="ulist">
<ul>
<li>
<p><code>sType</code> is the type of this structure.</p>
</li>
<li>
<p><code>pNext</code> is <code>NULL</code> or a pointer to an extension-specific structure.</p>
</li>
<li>
<p><code>capabilities</code> is an instance of the
<a href="#VkDisplayPlaneCapabilitiesKHR">VkDisplayPlaneCapabilitiesKHR</a> structure.</p>
</li>
</ul>
</div>
</div>
<div class="sect3">
<h4 id="_description_469">Description</h4>
<div class="sidebarblock">
<div class="content">
<div class="title">Valid Usage (Implicit)</div>
<div class="ulist">
<ul>
<li>
<p><a id="VUID-VkDisplayPlaneCapabilities2KHR-sType-sType"></a> <code>sType</code> <strong class="purple">must</strong> be <code>VK_STRUCTURE_TYPE_DISPLAY_PLANE_CAPABILITIES_2_KHR</code></p>
</li>
<li>
<p><a id="VUID-VkDisplayPlaneCapabilities2KHR-pNext-pNext"></a> <code>pNext</code> <strong class="purple">must</strong> be <code>NULL</code></p>
</li>
</ul>
</div>
</div>
</div>
</div>
<div class="sect3">
<h4 id="_see_also_469">See Also</h4>
<div class="paragraph">
<p><a href="#VkDisplayPlaneCapabilitiesKHR">VkDisplayPlaneCapabilitiesKHR</a>, <a href="#VkStructureType">VkStructureType</a>, <a href="#vkGetDisplayPlaneCapabilities2KHR">vkGetDisplayPlaneCapabilities2KHR</a></p>
</div>
</div>
<div class="sect3">
<h4 id="_document_notes_469">Document Notes</h4>
<div class="paragraph">
<p>For more information, see the Vulkan Specification at URL</p>
</div>
<div class="paragraph">
<p><a href="https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VkDisplayPlaneCapabilities2KHR" class="bare">https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VkDisplayPlaneCapabilities2KHR</a></p>
</div>
<div class="paragraph">
<p>This page is extracted from the Vulkan Specification.
Fixes and changes should be made to the Specification, not directly.</p>
</div>
<div style="page-break-after: always;"></div>
</div>
</div>
<div class="sect2">
<h3 id="_vkdisplayplanecapabilitieskhr3">VkDisplayPlaneCapabilitiesKHR(3)</h3>
<div class="sect3">
<h4 id="_name_470">Name</h4>
<div class="paragraph">
<p>VkDisplayPlaneCapabilitiesKHR - Structure describing capabilities of a mode and plane combination</p>
</div>
</div>
<div class="sect3">
<h4 id="_c_specification_470">C Specification</h4>
<div class="paragraph">
<p>The <code>VkDisplayPlaneCapabilitiesKHR</code> structure is defined as:</p>
</div>
<div id="VkDisplayPlaneCapabilitiesKHR" class="listingblock">
<div class="content">
<pre class="highlight"><code class="language-c++" data-lang="c++">typedef struct VkDisplayPlaneCapabilitiesKHR {
    VkDisplayPlaneAlphaFlagsKHR    supportedAlpha;
    VkOffset2D                     minSrcPosition;
    VkOffset2D                     maxSrcPosition;
    VkExtent2D                     minSrcExtent;
    VkExtent2D                     maxSrcExtent;
    VkOffset2D                     minDstPosition;
    VkOffset2D                     maxDstPosition;
    VkExtent2D                     minDstExtent;
    VkExtent2D                     maxDstExtent;
} VkDisplayPlaneCapabilitiesKHR;</code></pre>
</div>
</div>
</div>
<div class="sect3">
<h4 id="_members_107">Members</h4>
<div class="ulist">
<ul>
<li>
<p><code>supportedAlpha</code> is a bitmask of
<a href="#VkDisplayPlaneAlphaFlagBitsKHR">VkDisplayPlaneAlphaFlagBitsKHR</a> describing the supported alpha
blending modes.</p>
</li>
<li>
<p><code>minSrcPosition</code> is the minimum source rectangle offset supported by
this plane using the specified mode.</p>
</li>
<li>
<p><code>maxSrcPosition</code> is the maximum source rectangle offset supported by
this plane using the specified mode.
The <code>x</code> and <code>y</code> components of <code>maxSrcPosition</code> <strong class="purple">must</strong> each be
greater than or equal to the <code>x</code> and <code>y</code> components of
<code>minSrcPosition</code>, respectively.</p>
</li>
<li>
<p><code>minSrcExtent</code> is the minimum source rectangle size supported by
this plane using the specified mode.</p>
</li>
<li>
<p><code>maxSrcExtent</code> is the maximum source rectangle size supported by
this plane using the specified mode.</p>
</li>
<li>
<p><code>minDstPosition</code>, <code>maxDstPosition</code>, <code>minDstExtent</code>,
<code>maxDstExtent</code> all have similar semantics to their corresponding
<code>*Src*</code> equivalents, but apply to the output region within the mode
rather than the input region within the source image.
Unlike the <code>*Src*</code> offsets, <code>minDstPosition</code> and
<code>maxDstPosition</code> <strong class="purple">may</strong> contain negative values.</p>
</li>
</ul>
</div>
</div>
<div class="sect3">
<h4 id="_description_470">Description</h4>
<div class="paragraph">
<p>The minimum and maximum position and extent fields describe the
implementation limits, if any, as they apply to the specified display mode
and plane.
Vendors <strong class="purple">may</strong> support displaying a subset of a swapchain&#8217;s presentable images
on the specified display plane.
This is expressed by returning <code>minSrcPosition</code>, <code>maxSrcPosition</code>,
<code>minSrcExtent</code>, and <code>maxSrcExtent</code> values that indicate a range of
possible positions and sizes <strong class="purple">may</strong> be used to specify the region within the
presentable images that source pixels will be read from when creating a
swapchain on the specified display mode and plane.</p>
</div>
<div class="paragraph">
<p>Vendors <strong class="purple">may</strong> also support mapping the presentable images&#8217; content to a
subset or superset of the visible region in the specified display mode.
This is expressed by returning <code>minDstPosition</code>, <code>maxDstPosition</code>,
<code>minDstExtent</code> and <code>maxDstExtent</code> values that indicate a range of
possible positions and sizes <strong class="purple">may</strong> be used to describe the region within the
display mode that the source pixels will be mapped to.</p>
</div>
<div class="paragraph">
<p>Other vendors <strong class="purple">may</strong> support only a 1-1 mapping between pixels in the
presentable images and the display mode.
This <strong class="purple">may</strong> be indicated by returning <span class="eq">(0,0)</span> for <code>minSrcPosition</code>,
<code>maxSrcPosition</code>, <code>minDstPosition</code>, and <code>maxDstPosition</code>, and
(display mode width, display mode height) for <code>minSrcExtent</code>,
<code>maxSrcExtent</code>, <code>minDstExtent</code>, and <code>maxDstExtent</code>.</p>
</div>
<div class="paragraph">
<p>These values indicate the limits of the implementation&#8217;s individual fields.
Not all combinations of values within the offset and extent ranges returned
in <code>VkDisplayPlaneCapabilitiesKHR</code> are guaranteed to be supported.
Vendors <strong class="purple">may</strong> still fail presentation requests that specify unsupported
combinations.</p>
</div>
</div>
<div class="sect3">
<h4 id="_see_also_470">See Also</h4>
<div class="paragraph">
<p><a href="#VkDisplayPlaneAlphaFlagsKHR">VkDisplayPlaneAlphaFlagsKHR</a>, <a href="#VkDisplayPlaneCapabilities2KHR">VkDisplayPlaneCapabilities2KHR</a>, <a href="#VkExtent2D">VkExtent2D</a>, <a href="#VkOffset2D">VkOffset2D</a>, <a href="#vkGetDisplayPlaneCapabilitiesKHR">vkGetDisplayPlaneCapabilitiesKHR</a></p>
</div>
</div>
<div class="sect3">
<h4 id="_document_notes_470">Document Notes</h4>
<div class="paragraph">
<p>For more information, see the Vulkan Specification at URL</p>
</div>
<div class="paragraph">
<p><a href="https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VkDisplayPlaneCapabilitiesKHR" class="bare">https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VkDisplayPlaneCapabilitiesKHR</a></p>
</div>
<div class="paragraph">
<p>This page is extracted from the Vulkan Specification.
Fixes and changes should be made to the Specification, not directly.</p>
</div>
<div style="page-break-after: always;"></div>
</div>
</div>
<div class="sect2">
<h3 id="_vkdisplayplaneinfo2khr3">VkDisplayPlaneInfo2KHR(3)</h3>
<div class="sect3">
<h4 id="_name_471">Name</h4>
<div class="paragraph">
<p>VkDisplayPlaneInfo2KHR - Structure defining the intended configuration of a display plane</p>
</div>
</div>
<div class="sect3">
<h4 id="_c_specification_471">C Specification</h4>
<div class="paragraph">
<p>The <code>VkDisplayPlaneInfo2KHR</code> structure is defined as:</p>
</div>
<div id="VkDisplayPlaneInfo2KHR" class="listingblock">
<div class="content">
<pre class="highlight"><code class="language-c++" data-lang="c++">typedef struct VkDisplayPlaneInfo2KHR {
    VkStructureType     sType;
    const void*         pNext;
    VkDisplayModeKHR    mode;
    uint32_t            planeIndex;
} VkDisplayPlaneInfo2KHR;</code></pre>
</div>
</div>
</div>
<div class="sect3">
<h4 id="_members_108">Members</h4>
<div class="ulist">
<ul>
<li>
<p><code>sType</code> is the type of this structure.</p>
</li>
<li>
<p><code>pNext</code> is <code>NULL</code> or a pointer to an extension-specific structure.</p>
</li>
<li>
<p><code>mode</code> is the display mode the application intends to program when
using the specified plane.</p>
</li>
</ul>
</div>
</div>
<div class="sect3">
<h4 id="_description_471">Description</h4>
<div class="admonitionblock note">
<table>
<tr>
<td class="icon">
<i class="fa icon-note" title="Note"></i>
</td>
<td class="content">
<div class="title">Note</div>
<div class="paragraph">
<p>This parameter also implicitly specifies a display.</p>
</div>
</td>
</tr>
</table>
</div>
<div class="ulist">
<ul>
<li>
<p><code>planeIndex</code> is the plane which the application intends to use with
the display.</p>
</li>
</ul>
</div>
<div class="paragraph">
<p>The members of <code>VkDisplayPlaneInfo2KHR</code> correspond to the arguments to
<a href="#vkGetDisplayPlaneCapabilitiesKHR">vkGetDisplayPlaneCapabilitiesKHR</a>, with <code>sType</code> and <code>pNext</code>
added for extensibility.</p>
</div>
<div class="sidebarblock">
<div class="content">
<div class="title">Valid Usage (Implicit)</div>
<div class="ulist">
<ul>
<li>
<p><a id="VUID-VkDisplayPlaneInfo2KHR-sType-sType"></a> <code>sType</code> <strong class="purple">must</strong> be <code>VK_STRUCTURE_TYPE_DISPLAY_PLANE_INFO_2_KHR</code></p>
</li>
<li>
<p><a id="VUID-VkDisplayPlaneInfo2KHR-pNext-pNext"></a> <code>pNext</code> <strong class="purple">must</strong> be <code>NULL</code></p>
</li>
<li>
<p><a id="VUID-VkDisplayPlaneInfo2KHR-mode-parameter"></a> <code>mode</code> <strong class="purple">must</strong> be a valid <code>VkDisplayModeKHR</code> handle</p>
</li>
</ul>
</div>
</div>
</div>
<div class="sidebarblock">
<div class="content">
<div class="title">Host Synchronization</div>
<div class="ulist">
<ul>
<li>
<p>Host access to <code>mode</code> <strong class="purple">must</strong> be externally synchronized</p>
</li>
</ul>
</div>
</div>
</div>
</div>
<div class="sect3">
<h4 id="_see_also_471">See Also</h4>
<div class="paragraph">
<p><a href="#VkDisplayModeKHR">VkDisplayModeKHR</a>, <a href="#VkStructureType">VkStructureType</a>, <a href="#vkGetDisplayPlaneCapabilities2KHR">vkGetDisplayPlaneCapabilities2KHR</a></p>
</div>
</div>
<div class="sect3">
<h4 id="_document_notes_471">Document Notes</h4>
<div class="paragraph">
<p>For more information, see the Vulkan Specification at URL</p>
</div>
<div class="paragraph">
<p><a href="https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VkDisplayPlaneInfo2KHR" class="bare">https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VkDisplayPlaneInfo2KHR</a></p>
</div>
<div class="paragraph">
<p>This page is extracted from the Vulkan Specification.
Fixes and changes should be made to the Specification, not directly.</p>
</div>
<div style="page-break-after: always;"></div>
</div>
</div>
<div class="sect2">
<h3 id="_vkdisplayplaneproperties2khr3">VkDisplayPlaneProperties2KHR(3)</h3>
<div class="sect3">
<h4 id="_name_472">Name</h4>
<div class="paragraph">
<p>VkDisplayPlaneProperties2KHR - Structure describing an available display plane</p>
</div>
</div>
<div class="sect3">
<h4 id="_c_specification_472">C Specification</h4>
<div class="paragraph">
<p>The <code>VkDisplayPlaneProperties2KHR</code> structure is defined as:</p>
</div>
<div id="VkDisplayPlaneProperties2KHR" class="listingblock">
<div class="content">
<pre class="highlight"><code class="language-c++" data-lang="c++">typedef struct VkDisplayPlaneProperties2KHR {
    VkStructureType                sType;
    void*                          pNext;
    VkDisplayPlanePropertiesKHR    displayPlaneProperties;
} VkDisplayPlaneProperties2KHR;</code></pre>
</div>
</div>
</div>
<div class="sect3">
<h4 id="_members_109">Members</h4>
<div class="ulist">
<ul>
<li>
<p><code>sType</code> is the type of this structure.</p>
</li>
<li>
<p><code>pNext</code> is <code>NULL</code> or a pointer to an extension-specific structure.</p>
</li>
<li>
<p><code>displayPlaneProperties</code> is an instance of the
<a href="#VkDisplayPlanePropertiesKHR">VkDisplayPlanePropertiesKHR</a> structure.</p>
</li>
</ul>
</div>
</div>
<div class="sect3">
<h4 id="_description_472">Description</h4>
<div class="sidebarblock">
<div class="content">
<div class="title">Valid Usage (Implicit)</div>
<div class="ulist">
<ul>
<li>
<p><a id="VUID-VkDisplayPlaneProperties2KHR-sType-sType"></a> <code>sType</code> <strong class="purple">must</strong> be <code>VK_STRUCTURE_TYPE_DISPLAY_PLANE_PROPERTIES_2_KHR</code></p>
</li>
<li>
<p><a id="VUID-VkDisplayPlaneProperties2KHR-pNext-pNext"></a> <code>pNext</code> <strong class="purple">must</strong> be <code>NULL</code></p>
</li>
</ul>
</div>
</div>
</div>
</div>
<div class="sect3">
<h4 id="_see_also_472">See Also</h4>
<div class="paragraph">
<p><a href="#VkDisplayPlanePropertiesKHR">VkDisplayPlanePropertiesKHR</a>, <a href="#VkStructureType">VkStructureType</a>, <a href="#vkGetPhysicalDeviceDisplayPlaneProperties2KHR">vkGetPhysicalDeviceDisplayPlaneProperties2KHR</a></p>
</div>
</div>
<div class="sect3">
<h4 id="_document_notes_472">Document Notes</h4>
<div class="paragraph">
<p>For more information, see the Vulkan Specification at URL</p>
</div>
<div class="paragraph">
<p><a href="https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VkDisplayPlaneProperties2KHR" class="bare">https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VkDisplayPlaneProperties2KHR</a></p>
</div>
<div class="paragraph">
<p>This page is extracted from the Vulkan Specification.
Fixes and changes should be made to the Specification, not directly.</p>
</div>
<div style="page-break-after: always;"></div>
</div>
</div>
<div class="sect2">
<h3 id="_vkdisplayplanepropertieskhr3">VkDisplayPlanePropertiesKHR(3)</h3>
<div class="sect3">
<h4 id="_name_473">Name</h4>
<div class="paragraph">
<p>VkDisplayPlanePropertiesKHR - Structure describing display plane properties</p>
</div>
</div>
<div class="sect3">
<h4 id="_c_specification_473">C Specification</h4>
<div class="paragraph">
<p>The <code>VkDisplayPlanePropertiesKHR</code> structure is defined as:</p>
</div>
<div id="VkDisplayPlanePropertiesKHR" class="listingblock">
<div class="content">
<pre class="highlight"><code class="language-c++" data-lang="c++">typedef struct VkDisplayPlanePropertiesKHR {
    VkDisplayKHR    currentDisplay;
    uint32_t        currentStackIndex;
} VkDisplayPlanePropertiesKHR;</code></pre>
</div>
</div>
</div>
<div class="sect3">
<h4 id="_members_110">Members</h4>
<div class="ulist">
<ul>
<li>
<p><code>currentDisplay</code> is the handle of the display the plane is currently
associated with.
If the plane is not currently attached to any displays, this will be
<a href="#VK_NULL_HANDLE">VK_NULL_HANDLE</a>.</p>
</li>
<li>
<p><code>currentStackIndex</code> is the current z-order of the plane.
This will be between 0 and the value returned by
<code>vkGetPhysicalDeviceDisplayPlanePropertiesKHR</code> in
<code>pPropertyCount</code>.</p>
</li>
</ul>
</div>
</div>
<div class="sect3">
<h4 id="_description_473">Description</h4>

</div>
<div class="sect3">
<h4 id="_see_also_473">See Also</h4>
<div class="paragraph">
<p><a href="#VkDisplayKHR">VkDisplayKHR</a>, <a href="#VkDisplayPlaneProperties2KHR">VkDisplayPlaneProperties2KHR</a>, <a href="#vkGetPhysicalDeviceDisplayPlanePropertiesKHR">vkGetPhysicalDeviceDisplayPlanePropertiesKHR</a></p>
</div>
</div>
<div class="sect3">
<h4 id="_document_notes_473">Document Notes</h4>
<div class="paragraph">
<p>For more information, see the Vulkan Specification at URL</p>
</div>
<div class="paragraph">
<p><a href="https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VkDisplayPlanePropertiesKHR" class="bare">https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VkDisplayPlanePropertiesKHR</a></p>
</div>
<div class="paragraph">
<p>This page is extracted from the Vulkan Specification.
Fixes and changes should be made to the Specification, not directly.</p>
</div>
<div style="page-break-after: always;"></div>
</div>
</div>
<div class="sect2">
<h3 id="_vkdisplaypowerinfoext3">VkDisplayPowerInfoEXT(3)</h3>
<div class="sect3">
<h4 id="_name_474">Name</h4>
<div class="paragraph">
<p>VkDisplayPowerInfoEXT - Describe the power state of a display</p>
</div>
</div>
<div class="sect3">
<h4 id="_c_specification_474">C Specification</h4>
<div class="paragraph">
<p>The <code>VkDisplayPowerInfoEXT</code> structure is defined as:</p>
</div>
<div id="VkDisplayPowerInfoEXT" class="listingblock">
<div class="content">
<pre class="highlight"><code class="language-c++" data-lang="c++">typedef struct VkDisplayPowerInfoEXT {
    VkStructureType           sType;
    const void*               pNext;
    VkDisplayPowerStateEXT    powerState;
} VkDisplayPowerInfoEXT;</code></pre>
</div>
</div>
</div>
<div class="sect3">
<h4 id="_members_111">Members</h4>
<div class="ulist">
<ul>
<li>
<p><code>sType</code> is the type of this structure.</p>
</li>
<li>
<p><code>pNext</code> is <code>NULL</code> or a pointer to an extension-specific structure.</p>
</li>
<li>
<p><code>powerState</code> is a <a href="#VkDisplayPowerStateEXT">VkDisplayPowerStateEXT</a> value specifying the
new power state of the display.</p>
</li>
</ul>
</div>
</div>
<div class="sect3">
<h4 id="_description_474">Description</h4>
<div class="sidebarblock">
<div class="content">
<div class="title">Valid Usage (Implicit)</div>
<div class="ulist">
<ul>
<li>
<p><a id="VUID-VkDisplayPowerInfoEXT-sType-sType"></a> <code>sType</code> <strong class="purple">must</strong> be <code>VK_STRUCTURE_TYPE_DISPLAY_POWER_INFO_EXT</code></p>
</li>
<li>
<p><a id="VUID-VkDisplayPowerInfoEXT-pNext-pNext"></a> <code>pNext</code> <strong class="purple">must</strong> be <code>NULL</code></p>
</li>
<li>
<p><a id="VUID-VkDisplayPowerInfoEXT-powerState-parameter"></a> <code>powerState</code> <strong class="purple">must</strong> be a valid <a href="#VkDisplayPowerStateEXT">VkDisplayPowerStateEXT</a> value</p>
</li>
</ul>
</div>
</div>
</div>
</div>
<div class="sect3">
<h4 id="_see_also_474">See Also</h4>
<div class="paragraph">
<p><a href="#VkDisplayPowerStateEXT">VkDisplayPowerStateEXT</a>, <a href="#VkStructureType">VkStructureType</a>, <a href="#vkDisplayPowerControlEXT">vkDisplayPowerControlEXT</a></p>
</div>
</div>
<div class="sect3">
<h4 id="_document_notes_474">Document Notes</h4>
<div class="paragraph">
<p>For more information, see the Vulkan Specification at URL</p>
</div>
<div class="paragraph">
<p><a href="https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VkDisplayPowerInfoEXT" class="bare">https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VkDisplayPowerInfoEXT</a></p>
</div>
<div class="paragraph">
<p>This page is extracted from the Vulkan Specification.
Fixes and changes should be made to the Specification, not directly.</p>
</div>
<div style="page-break-after: always;"></div>
</div>
</div>
<div class="sect2">
<h3 id="_vkdisplaypresentinfokhr3">VkDisplayPresentInfoKHR(3)</h3>
<div class="sect3">
<h4 id="_name_475">Name</h4>
<div class="paragraph">
<p>VkDisplayPresentInfoKHR - Structure describing parameters of a queue presentation to a swapchain</p>
</div>
</div>
<div class="sect3">
<h4 id="_c_specification_475">C Specification</h4>
<div class="paragraph">
<p>The <code>VkDisplayPresentInfoKHR</code> structure is defined as:</p>
</div>
<div id="VkDisplayPresentInfoKHR" class="listingblock">
<div class="content">
<pre class="highlight"><code class="language-c++" data-lang="c++">typedef struct VkDisplayPresentInfoKHR {
    VkStructureType    sType;
    const void*        pNext;
    VkRect2D           srcRect;
    VkRect2D           dstRect;
    VkBool32           persistent;
} VkDisplayPresentInfoKHR;</code></pre>
</div>
</div>
</div>
<div class="sect3">
<h4 id="_members_112">Members</h4>
<div class="ulist">
<ul>
<li>
<p><code>sType</code> is the type of this structure.</p>
</li>
<li>
<p><code>pNext</code> is <code>NULL</code> or a pointer to an extension-specific structure.</p>
</li>
<li>
<p><code>srcRect</code> is a rectangular region of pixels to present.
It <strong class="purple">must</strong> be a subset of the image being presented.
If <code>VkDisplayPresentInfoKHR</code> is not specified, this region will be
assumed to be the entire presentable image.</p>
</li>
<li>
<p><code>dstRect</code> is a rectangular region within the visible region of the
swapchain&#8217;s display mode.
If <code>VkDisplayPresentInfoKHR</code> is not specified, this region will be
assumed to be the entire visible region of the visible region of the
swapchain&#8217;s mode.
If the specified rectangle is a subset of the display mode&#8217;s visible
region, content from display planes below the swapchain&#8217;s plane will be
visible outside the rectangle.
If there are no planes below the swapchain&#8217;s, the area outside the
specified rectangle will be black.
If portions of the specified rectangle are outside of the display&#8217;s
visible region, pixels mapping only to those portions of the rectangle
will be discarded.</p>
</li>
<li>
<p><code>persistent</code>: If this is <code>VK_TRUE</code>, the display engine will
enable buffered mode on displays that support it.
This allows the display engine to stop sending content to the display
until a new image is presented.
The display will instead maintain a copy of the last presented image.
This allows less power to be used, but <strong class="purple">may</strong> increase presentation
latency.
If <code>VkDisplayPresentInfoKHR</code> is not specified, persistent mode will
not be used.</p>
</li>
</ul>
</div>
</div>
<div class="sect3">
<h4 id="_description_475">Description</h4>
<div class="paragraph">
<p>If the extent of the <code>srcRect</code> and <code>dstRect</code> are not equal, the
presented pixels will be scaled accordingly.</p>
</div>
<div class="sidebarblock">
<div class="content">
<div class="title">Valid Usage</div>
<div class="ulist">
<ul>
<li>
<p><a id="VUID-VkDisplayPresentInfoKHR-srcRect-01257"></a>
<code>srcRect</code> <strong class="purple">must</strong> specify a rectangular region that is a subset of the
image being presented</p>
</li>
<li>
<p><a id="VUID-VkDisplayPresentInfoKHR-dstRect-01258"></a>
<code>dstRect</code> <strong class="purple">must</strong> specify a rectangular region that is a subset of the
<code>visibleRegion</code> parameter of the display mode the swapchain being
presented uses</p>
</li>
<li>
<p><a id="VUID-VkDisplayPresentInfoKHR-persistentContent-01259"></a>
If the <code>persistentContent</code> member of the
<code>VkDisplayPropertiesKHR</code> structure returned by
<code>vkGetPhysicalDeviceDisplayPropertiesKHR</code> for the display the
present operation targets then <code>persistent</code> <strong class="purple">must</strong> be <code>VK_FALSE</code></p>
</li>
</ul>
</div>
</div>
</div>
<div class="sidebarblock">
<div class="content">
<div class="title">Valid Usage (Implicit)</div>
<div class="ulist">
<ul>
<li>
<p><a id="VUID-VkDisplayPresentInfoKHR-sType-sType"></a> <code>sType</code> <strong class="purple">must</strong> be <code>VK_STRUCTURE_TYPE_DISPLAY_PRESENT_INFO_KHR</code></p>
</li>
</ul>
</div>
</div>
</div>
</div>
<div class="sect3">
<h4 id="_see_also_475">See Also</h4>
<div class="paragraph">
<p><code>VkBool32</code>, <a href="#VkRect2D">VkRect2D</a>, <a href="#VkStructureType">VkStructureType</a></p>
</div>
</div>
<div class="sect3">
<h4 id="_document_notes_475">Document Notes</h4>
<div class="paragraph">
<p>For more information, see the Vulkan Specification at URL</p>
</div>
<div class="paragraph">
<p><a href="https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VkDisplayPresentInfoKHR" class="bare">https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VkDisplayPresentInfoKHR</a></p>
</div>
<div class="paragraph">
<p>This page is extracted from the Vulkan Specification.
Fixes and changes should be made to the Specification, not directly.</p>
</div>
<div style="page-break-after: always;"></div>
</div>
</div>
<div class="sect2">
<h3 id="_vkdisplayproperties2khr3">VkDisplayProperties2KHR(3)</h3>
<div class="sect3">
<h4 id="_name_476">Name</h4>
<div class="paragraph">
<p>VkDisplayProperties2KHR - Structure describing an available display device</p>
</div>
</div>
<div class="sect3">
<h4 id="_c_specification_476">C Specification</h4>
<div class="paragraph">
<p>The <code>VkDisplayProperties2KHR</code> structure is defined as:</p>
</div>
<div id="VkDisplayProperties2KHR" class="listingblock">
<div class="content">
<pre class="highlight"><code class="language-c++" data-lang="c++">typedef struct VkDisplayProperties2KHR {
    VkStructureType           sType;
    void*                     pNext;
    VkDisplayPropertiesKHR    displayProperties;
} VkDisplayProperties2KHR;</code></pre>
</div>
</div>
</div>
<div class="sect3">
<h4 id="_members_113">Members</h4>
<div class="ulist">
<ul>
<li>
<p><code>sType</code> is the type of this structure.</p>
</li>
<li>
<p><code>pNext</code> is <code>NULL</code> or a pointer to an extension-specific structure.</p>
</li>
<li>
<p><code>displayProperties</code> is an instance of the
<a href="#VkDisplayPropertiesKHR">VkDisplayPropertiesKHR</a> structure.</p>
</li>
</ul>
</div>
</div>
<div class="sect3">
<h4 id="_description_476">Description</h4>
<div class="sidebarblock">
<div class="content">
<div class="title">Valid Usage (Implicit)</div>
<div class="ulist">
<ul>
<li>
<p><a id="VUID-VkDisplayProperties2KHR-sType-sType"></a> <code>sType</code> <strong class="purple">must</strong> be <code>VK_STRUCTURE_TYPE_DISPLAY_PROPERTIES_2_KHR</code></p>
</li>
<li>
<p><a id="VUID-VkDisplayProperties2KHR-pNext-pNext"></a> <code>pNext</code> <strong class="purple">must</strong> be <code>NULL</code></p>
</li>
</ul>
</div>
</div>
</div>
</div>
<div class="sect3">
<h4 id="_see_also_476">See Also</h4>
<div class="paragraph">
<p><a href="#VkDisplayPropertiesKHR">VkDisplayPropertiesKHR</a>, <a href="#VkStructureType">VkStructureType</a>, <a href="#vkGetPhysicalDeviceDisplayProperties2KHR">vkGetPhysicalDeviceDisplayProperties2KHR</a></p>
</div>
</div>
<div class="sect3">
<h4 id="_document_notes_476">Document Notes</h4>
<div class="paragraph">
<p>For more information, see the Vulkan Specification at URL</p>
</div>
<div class="paragraph">
<p><a href="https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VkDisplayProperties2KHR" class="bare">https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VkDisplayProperties2KHR</a></p>
</div>
<div class="paragraph">
<p>This page is extracted from the Vulkan Specification.
Fixes and changes should be made to the Specification, not directly.</p>
</div>
<div style="page-break-after: always;"></div>
</div>
</div>
<div class="sect2">
<h3 id="_vkdisplaypropertieskhr3">VkDisplayPropertiesKHR(3)</h3>
<div class="sect3">
<h4 id="_name_477">Name</h4>
<div class="paragraph">
<p>VkDisplayPropertiesKHR - Structure describing an available display device</p>
</div>
</div>
<div class="sect3">
<h4 id="_c_specification_477">C Specification</h4>
<div class="paragraph">
<p>The <code>VkDisplayPropertiesKHR</code> structure is defined as:</p>
</div>
<div id="VkDisplayPropertiesKHR" class="listingblock">
<div class="content">
<pre class="highlight"><code class="language-c++" data-lang="c++">typedef struct VkDisplayPropertiesKHR {
    VkDisplayKHR                  display;
    const char*                   displayName;
    VkExtent2D                    physicalDimensions;
    VkExtent2D                    physicalResolution;
    VkSurfaceTransformFlagsKHR    supportedTransforms;
    VkBool32                      planeReorderPossible;
    VkBool32                      persistentContent;
} VkDisplayPropertiesKHR;</code></pre>
</div>
</div>
</div>
<div class="sect3">
<h4 id="_members_114">Members</h4>
<div class="ulist">
<ul>
<li>
<p><code>display</code> is a handle that is used to refer to the display described
here.
This handle will be valid for the lifetime of the Vulkan instance.</p>
</li>
<li>
<p><code>displayName</code> is a pointer to a NULL-terminated string containing
the name of the display.
Generally, this will be the name provided by the display&#8217;s EDID.
It <strong class="purple">can</strong> be <code>NULL</code> if no suitable name is available.
If not <code>NULL</code>, the memory it points to <strong class="purple">must</strong> remain accessible as long
as <code>display</code> is valid.</p>
</li>
<li>
<p><code>physicalDimensions</code> describes the physical width and height of the
visible portion of the display, in millimeters.</p>
</li>
<li>
<p><code>physicalResolution</code> describes the physical, native, or preferred
resolution of the display.</p>
</li>
</ul>
</div>
</div>
<div class="sect3">
<h4 id="_description_477">Description</h4>
<div class="admonitionblock note">
<table>
<tr>
<td class="icon">
<i class="fa icon-note" title="Note"></i>
</td>
<td class="content">
<div class="title">Note</div>
<div class="paragraph">
<p>For devices which have no natural value to return here, implementations
<strong class="purple">should</strong> return the maximum resolution supported.</p>
</div>
</td>
</tr>
</table>
</div>
<div class="ulist">
<ul>
<li>
<p><code>supportedTransforms</code> is a bitmask of
<a href="#VkSurfaceTransformFlagBitsKHR">VkSurfaceTransformFlagBitsKHR</a> describing which transforms are
supported by this display.</p>
</li>
<li>
<p><code>planeReorderPossible</code> tells whether the planes on this display <strong class="purple">can</strong>
have their z order changed.
If this is <code>VK_TRUE</code>, the application <strong class="purple">can</strong> re-arrange the planes on
this display in any order relative to each other.</p>
</li>
<li>
<p><code>persistentContent</code> tells whether the display supports
self-refresh/internal buffering.
If this is true, the application <strong class="purple">can</strong> submit persistent present
operations on swapchains created against this display.</p>
</li>
</ul>
</div>
<div class="admonitionblock note">
<table>
<tr>
<td class="icon">
<i class="fa icon-note" title="Note"></i>
</td>
<td class="content">
<div class="title">Note</div>
<div class="paragraph">
<p>Persistent presents <strong class="purple">may</strong> have higher latency, and <strong class="purple">may</strong> use less power when
the screen content is updated infrequently, or when only a portion of the
screen needs to be updated in most frames.</p>
</div>
</td>
</tr>
</table>
</div>
</div>
<div class="sect3">
<h4 id="_see_also_477">See Also</h4>
<div class="paragraph">
<p><code>VkBool32</code>, <a href="#VkDisplayKHR">VkDisplayKHR</a>, <a href="#VkDisplayProperties2KHR">VkDisplayProperties2KHR</a>, <a href="#VkExtent2D">VkExtent2D</a>, <a href="#VkSurfaceTransformFlagsKHR">VkSurfaceTransformFlagsKHR</a>, <a href="#vkGetPhysicalDeviceDisplayPropertiesKHR">vkGetPhysicalDeviceDisplayPropertiesKHR</a></p>
</div>
</div>
<div class="sect3">
<h4 id="_document_notes_477">Document Notes</h4>
<div class="paragraph">
<p>For more information, see the Vulkan Specification at URL</p>
</div>
<div class="paragraph">
<p><a href="https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VkDisplayPropertiesKHR" class="bare">https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VkDisplayPropertiesKHR</a></p>
</div>
<div class="paragraph">
<p>This page is extracted from the Vulkan Specification.
Fixes and changes should be made to the Specification, not directly.</p>
</div>
<div style="page-break-after: always;"></div>
</div>
</div>
<div class="sect2">
<h3 id="_vkdisplaysurfacecreateinfokhr3">VkDisplaySurfaceCreateInfoKHR(3)</h3>
<div class="sect3">
<h4 id="_name_478">Name</h4>
<div class="paragraph">
<p>VkDisplaySurfaceCreateInfoKHR - Structure specifying parameters of a newly created display plane surface object</p>
</div>
</div>
<div class="sect3">
<h4 id="_c_specification_478">C Specification</h4>
<div class="paragraph">
<p>The <code>VkDisplaySurfaceCreateInfoKHR</code> structure is defined as:</p>
</div>
<div id="VkDisplaySurfaceCreateInfoKHR" class="listingblock">
<div class="content">
<pre class="highlight"><code class="language-c++" data-lang="c++">typedef struct VkDisplaySurfaceCreateInfoKHR {
    VkStructureType                   sType;
    const void*                       pNext;
    VkDisplaySurfaceCreateFlagsKHR    flags;
    VkDisplayModeKHR                  displayMode;
    uint32_t                          planeIndex;
    uint32_t                          planeStackIndex;
    VkSurfaceTransformFlagBitsKHR     transform;
    float                             globalAlpha;
    VkDisplayPlaneAlphaFlagBitsKHR    alphaMode;
    VkExtent2D                        imageExtent;
} VkDisplaySurfaceCreateInfoKHR;</code></pre>
</div>
</div>
</div>
<div class="sect3">
<h4 id="_members_115">Members</h4>
<div class="ulist">
<ul>
<li>
<p><code>sType</code> is the type of this structure.</p>
</li>
<li>
<p><code>pNext</code> is <code>NULL</code> or a pointer to an extension-specific structure.</p>
</li>
<li>
<p><code>flags</code> is reserved for future use, and <strong class="purple">must</strong> be zero.</p>
</li>
<li>
<p><code>displayMode</code> is a <a href="#VkDisplayModeKHR">VkDisplayModeKHR</a> handle specifying the mode
to use when displaying this surface.</p>
</li>
<li>
<p><code>planeIndex</code> is the plane on which this surface appears.</p>
</li>
<li>
<p><code>planeStackIndex</code> is the z-order of the plane.</p>
</li>
<li>
<p><code>transform</code> is a <a href="#VkSurfaceTransformFlagBitsKHR">VkSurfaceTransformFlagBitsKHR</a> value
specifying the transformation to apply to images as part of the scanout
operation.</p>
</li>
<li>
<p><code>globalAlpha</code> is the global alpha value.
This value is ignored if <code>alphaMode</code> is not
<code>VK_DISPLAY_PLANE_ALPHA_GLOBAL_BIT_KHR</code>.</p>
</li>
<li>
<p><code>alphaMode</code> is a <a href="#VkDisplayPlaneAlphaFlagBitsKHR">VkDisplayPlaneAlphaFlagBitsKHR</a> value
specifying the type of alpha blending to use.</p>
</li>
<li>
<p><code>imageExtent</code> The size of the presentable images to use with the
surface.</p>
</li>
</ul>
</div>
</div>
<div class="sect3">
<h4 id="_description_478">Description</h4>
<div class="admonitionblock note">
<table>
<tr>
<td class="icon">
<i class="fa icon-note" title="Note"></i>
</td>
<td class="content">
<div class="title">Note</div>
<div class="paragraph">
<p>Creating a display surface <strong class="purple">must</strong> not modify the state of the displays,
planes, or other resources it names.
For example, it <strong class="purple">must</strong> not apply the specified mode to be set on the
associated display.
Application of display configuration occurs as a side effect of presenting
to a display surface.</p>
</div>
</td>
</tr>
</table>
</div>
<div class="sidebarblock">
<div class="content">
<div class="title">Valid Usage</div>
<div class="ulist">
<ul>
<li>
<p><a id="VUID-VkDisplaySurfaceCreateInfoKHR-planeIndex-01252"></a>
<code>planeIndex</code> <strong class="purple">must</strong> be less than the number of display planes
supported by the device as determined by calling
<code>vkGetPhysicalDeviceDisplayPlanePropertiesKHR</code></p>
</li>
<li>
<p><a id="VUID-VkDisplaySurfaceCreateInfoKHR-planeReorderPossible-01253"></a>
If the <code>planeReorderPossible</code> member of the
<code>VkDisplayPropertiesKHR</code> structure returned by
<code>vkGetPhysicalDeviceDisplayPropertiesKHR</code> for the display
corresponding to <code>displayMode</code> is <code>VK_TRUE</code> then
<code>planeStackIndex</code> <strong class="purple">must</strong> be less than the number of display planes
supported by the device as determined by calling
<code>vkGetPhysicalDeviceDisplayPlanePropertiesKHR</code>; otherwise
<code>planeStackIndex</code> <strong class="purple">must</strong> equal the <code>currentStackIndex</code> member of
<code>VkDisplayPlanePropertiesKHR</code> returned by
<code>vkGetPhysicalDeviceDisplayPlanePropertiesKHR</code> for the display plane
corresponding to <code>displayMode</code></p>
</li>
<li>
<p><a id="VUID-VkDisplaySurfaceCreateInfoKHR-alphaMode-01254"></a>
If <code>alphaMode</code> is <code>VK_DISPLAY_PLANE_ALPHA_GLOBAL_BIT_KHR</code> then
<code>globalAlpha</code> <strong class="purple">must</strong> be between <code>0</code> and <code>1</code>, inclusive</p>
</li>
<li>
<p><a id="VUID-VkDisplaySurfaceCreateInfoKHR-alphaMode-01255"></a>
<code>alphaMode</code> <strong class="purple">must</strong> be <code>0</code> or one of the bits present in the
<code>supportedAlpha</code> member of <code>VkDisplayPlaneCapabilitiesKHR</code>
returned by <code>vkGetDisplayPlaneCapabilitiesKHR</code> for the display plane
corresponding to <code>displayMode</code></p>
</li>
<li>
<p><a id="VUID-VkDisplaySurfaceCreateInfoKHR-width-01256"></a>
The <code>width</code> and <code>height</code> members of <code>imageExtent</code> <strong class="purple">must</strong> be
less than the <code>maxImageDimensions2D</code> member of
<code>VkPhysicalDeviceLimits</code></p>
</li>
</ul>
</div>
</div>
</div>
<div class="sidebarblock">
<div class="content">
<div class="title">Valid Usage (Implicit)</div>
<div class="ulist">
<ul>
<li>
<p><a id="VUID-VkDisplaySurfaceCreateInfoKHR-sType-sType"></a> <code>sType</code> <strong class="purple">must</strong> be <code>VK_STRUCTURE_TYPE_DISPLAY_SURFACE_CREATE_INFO_KHR</code></p>
</li>
<li>
<p><a id="VUID-VkDisplaySurfaceCreateInfoKHR-pNext-pNext"></a> <code>pNext</code> <strong class="purple">must</strong> be <code>NULL</code></p>
</li>
<li>
<p><a id="VUID-VkDisplaySurfaceCreateInfoKHR-flags-zerobitmask"></a> <code>flags</code> <strong class="purple">must</strong> be <code>0</code></p>
</li>
<li>
<p><a id="VUID-VkDisplaySurfaceCreateInfoKHR-displayMode-parameter"></a> <code>displayMode</code> <strong class="purple">must</strong> be a valid <code>VkDisplayModeKHR</code> handle</p>
</li>
<li>
<p><a id="VUID-VkDisplaySurfaceCreateInfoKHR-transform-parameter"></a> <code>transform</code> <strong class="purple">must</strong> be a valid <a href="#VkSurfaceTransformFlagBitsKHR">VkSurfaceTransformFlagBitsKHR</a> value</p>
</li>
<li>
<p><a id="VUID-VkDisplaySurfaceCreateInfoKHR-alphaMode-parameter"></a> <code>alphaMode</code> <strong class="purple">must</strong> be a valid <a href="#VkDisplayPlaneAlphaFlagBitsKHR">VkDisplayPlaneAlphaFlagBitsKHR</a> value</p>
</li>
</ul>
</div>
</div>
</div>
</div>
<div class="sect3">
<h4 id="_see_also_478">See Also</h4>
<div class="paragraph">
<p><a href="#VkDisplayModeKHR">VkDisplayModeKHR</a>, <a href="#VkDisplayPlaneAlphaFlagBitsKHR">VkDisplayPlaneAlphaFlagBitsKHR</a>, <a href="#VkDisplaySurfaceCreateFlagsKHR">VkDisplaySurfaceCreateFlagsKHR</a>, <a href="#VkExtent2D">VkExtent2D</a>, <a href="#VkStructureType">VkStructureType</a>, <a href="#VkSurfaceTransformFlagBitsKHR">VkSurfaceTransformFlagBitsKHR</a>, <a href="#vkCreateDisplayPlaneSurfaceKHR">vkCreateDisplayPlaneSurfaceKHR</a></p>
</div>
</div>
<div class="sect3">
<h4 id="_document_notes_478">Document Notes</h4>
<div class="paragraph">
<p>For more information, see the Vulkan Specification at URL</p>
</div>
<div class="paragraph">
<p><a href="https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VkDisplaySurfaceCreateInfoKHR" class="bare">https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VkDisplaySurfaceCreateInfoKHR</a></p>
</div>
<div class="paragraph">
<p>This page is extracted from the Vulkan Specification.
Fixes and changes should be made to the Specification, not directly.</p>
</div>
<div style="page-break-after: always;"></div>
</div>
</div>
<div class="sect2">
<h3 id="_vkdrawindexedindirectcommand3">VkDrawIndexedIndirectCommand(3)</h3>
<div class="sect3">
<h4 id="_name_479">Name</h4>
<div class="paragraph">
<p>VkDrawIndexedIndirectCommand - Structure specifying a draw indexed indirect command</p>
</div>
</div>
<div class="sect3">
<h4 id="_c_specification_479">C Specification</h4>
<div class="paragraph">
<p>The <code>VkDrawIndexedIndirectCommand</code> structure is defined as:</p>
</div>
<div id="VkDrawIndexedIndirectCommand" class="listingblock">
<div class="content">
<pre class="highlight"><code class="language-c++" data-lang="c++">typedef struct VkDrawIndexedIndirectCommand {
    uint32_t    indexCount;
    uint32_t    instanceCount;
    uint32_t    firstIndex;
    int32_t     vertexOffset;
    uint32_t    firstInstance;
} VkDrawIndexedIndirectCommand;</code></pre>
</div>
</div>
</div>
<div class="sect3">
<h4 id="_members_116">Members</h4>
<div class="ulist">
<ul>
<li>
<p><code>indexCount</code> is the number of vertices to draw.</p>
</li>
<li>
<p><code>instanceCount</code> is the number of instances to draw.</p>
</li>
<li>
<p><code>firstIndex</code> is the base index within the index buffer.</p>
</li>
<li>
<p><code>vertexOffset</code> is the value added to the vertex index before
indexing into the vertex buffer.</p>
</li>
<li>
<p><code>firstInstance</code> is the instance ID of the first instance to draw.</p>
</li>
</ul>
</div>
</div>
<div class="sect3">
<h4 id="_description_479">Description</h4>
<div class="paragraph">
<p>The members of <code>VkDrawIndexedIndirectCommand</code> have the same meaning as
the similarly named parameters of <a href="#vkCmdDrawIndexed">vkCmdDrawIndexed</a>.</p>
</div>
<div class="sidebarblock">
<div class="content">
<div class="title">Valid Usage</div>
<div class="ulist">
<ul>
<li>
<p><a id="VUID-VkDrawIndexedIndirectCommand-None-00552"></a>
For a given vertex buffer binding, any attribute data fetched <strong class="purple">must</strong> be
entirely contained within the corresponding vertex buffer binding, as
described in <a href="vkspec.html#fxvertex-input" class="bare">html/vkspec.html#fxvertex-input</a></p>
</li>
<li>
<p><a id="VUID-VkDrawIndexedIndirectCommand-indexSize-00553"></a>
<span class="eq">(<code>indexSize</code> * (<code>firstIndex</code> +  <code>indexCount</code>) + 
<code>offset</code>)</span> <strong class="purple">must</strong> be less than or equal to the size of the bound
index buffer, with <code>indexSize</code> being based on the type specified by
<code>indexType</code>, where the index buffer, <code>indexType</code>, and
<code>offset</code> are specified via <code>vkCmdBindIndexBuffer</code></p>
</li>
<li>
<p><a id="VUID-VkDrawIndexedIndirectCommand-firstInstance-00554"></a>
If the <a href="vkspec.html#features-drawIndirectFirstInstance">drawIndirectFirstInstance</a>
feature is not enabled, <code>firstInstance</code> <strong class="purple">must</strong> be <code>0</code></p>
</li>
</ul>
</div>
</div>
</div>
</div>
<div class="sect3">
<h4 id="_see_also_479">See Also</h4>
<div class="paragraph">
<p><a href="#vkCmdDrawIndexedIndirect">vkCmdDrawIndexedIndirect</a></p>
</div>
</div>
<div class="sect3">
<h4 id="_document_notes_479">Document Notes</h4>
<div class="paragraph">
<p>For more information, see the Vulkan Specification at URL</p>
</div>
<div class="paragraph">
<p><a href="https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VkDrawIndexedIndirectCommand" class="bare">https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VkDrawIndexedIndirectCommand</a></p>
</div>
<div class="paragraph">
<p>This page is extracted from the Vulkan Specification.
Fixes and changes should be made to the Specification, not directly.</p>
</div>
<div style="page-break-after: always;"></div>
</div>
</div>
<div class="sect2">
<h3 id="_vkdrawindirectcommand3">VkDrawIndirectCommand(3)</h3>
<div class="sect3">
<h4 id="_name_480">Name</h4>
<div class="paragraph">
<p>VkDrawIndirectCommand - Structure specifying a draw indirect command</p>
</div>
</div>
<div class="sect3">
<h4 id="_c_specification_480">C Specification</h4>
<div class="paragraph">
<p>The <code>VkDrawIndirectCommand</code> structure is defined as:</p>
</div>
<div id="VkDrawIndirectCommand" class="listingblock">
<div class="content">
<pre class="highlight"><code class="language-c++" data-lang="c++">typedef struct VkDrawIndirectCommand {
    uint32_t    vertexCount;
    uint32_t    instanceCount;
    uint32_t    firstVertex;
    uint32_t    firstInstance;
} VkDrawIndirectCommand;</code></pre>
</div>
</div>
</div>
<div class="sect3">
<h4 id="_members_117">Members</h4>
<div class="ulist">
<ul>
<li>
<p><code>vertexCount</code> is the number of vertices to draw.</p>
</li>
<li>
<p><code>instanceCount</code> is the number of instances to draw.</p>
</li>
<li>
<p><code>firstVertex</code> is the index of the first vertex to draw.</p>
</li>
<li>
<p><code>firstInstance</code> is the instance ID of the first instance to draw.</p>
</li>
</ul>
</div>
</div>
<div class="sect3">
<h4 id="_description_480">Description</h4>
<div class="paragraph">
<p>The members of <code>VkDrawIndirectCommand</code> have the same meaning as the
similarly named parameters of <a href="#vkCmdDraw">vkCmdDraw</a>.</p>
</div>
<div class="sidebarblock">
<div class="content">
<div class="title">Valid Usage</div>
<div class="ulist">
<ul>
<li>
<p><a id="VUID-VkDrawIndirectCommand-None-00500"></a>
For a given vertex buffer binding, any attribute data fetched <strong class="purple">must</strong> be
entirely contained within the corresponding vertex buffer binding, as
described in <a href="vkspec.html#fxvertex-input" class="bare">html/vkspec.html#fxvertex-input</a></p>
</li>
<li>
<p><a id="VUID-VkDrawIndirectCommand-firstInstance-00501"></a>
If the <a href="vkspec.html#features-drawIndirectFirstInstance">drawIndirectFirstInstance</a>
feature is not enabled, <code>firstInstance</code> <strong class="purple">must</strong> be <code>0</code></p>
</li>
</ul>
</div>
</div>
</div>
</div>
<div class="sect3">
<h4 id="_see_also_480">See Also</h4>
<div class="paragraph">
<p><a href="#vkCmdDrawIndirect">vkCmdDrawIndirect</a></p>
</div>
</div>
<div class="sect3">
<h4 id="_document_notes_480">Document Notes</h4>
<div class="paragraph">
<p>For more information, see the Vulkan Specification at URL</p>
</div>
<div class="paragraph">
<p><a href="https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VkDrawIndirectCommand" class="bare">https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VkDrawIndirectCommand</a></p>
</div>
<div class="paragraph">
<p>This page is extracted from the Vulkan Specification.
Fixes and changes should be made to the Specification, not directly.</p>
</div>
<div style="page-break-after: always;"></div>
</div>
</div>
<div class="sect2">
<h3 id="_vkdrawmeshtasksindirectcommandnv3">VkDrawMeshTasksIndirectCommandNV(3)</h3>
<div class="sect3">
<h4 id="_name_481">Name</h4>
<div class="paragraph">
<p>VkDrawMeshTasksIndirectCommandNV - Structure specifying a mesh tasks draw indirect command</p>
</div>
</div>
<div class="sect3">
<h4 id="_c_specification_481">C Specification</h4>
<div class="paragraph">
<p>The <code>VkDrawMeshTasksIndirectCommandNV</code> structure is defined as:</p>
</div>
<div id="VkDrawMeshTasksIndirectCommandNV" class="listingblock">
<div class="content">
<pre class="highlight"><code class="language-c++" data-lang="c++">typedef struct VkDrawMeshTasksIndirectCommandNV {
    uint32_t    taskCount;
    uint32_t    firstTask;
} VkDrawMeshTasksIndirectCommandNV;</code></pre>
</div>
</div>
</div>
<div class="sect3">
<h4 id="_members_118">Members</h4>
<div class="ulist">
<ul>
<li>
<p><code>taskCount</code> is the number of local workgroups to dispatch in the X
dimension.
Y and Z dimension are implicitly set to one.</p>
</li>
<li>
<p><code>firstTask</code> is the X component of the first workgroup ID.</p>
</li>
</ul>
</div>
</div>
<div class="sect3">
<h4 id="_description_481">Description</h4>
<div class="paragraph">
<p>The members of <code>VkDrawMeshTasksIndirectCommandNV</code> have the same meaning
as the similarly named parameters of <a href="#vkCmdDrawMeshTasksNV">vkCmdDrawMeshTasksNV</a>.</p>
</div>
<div class="sidebarblock">
<div class="content">
<div class="title">Valid Usage</div>
<div class="ulist">
<ul>
<li>
<p><a id="VUID-VkDrawMeshTasksIndirectCommandNV-taskCount-02175"></a>
<code>taskCount</code> <strong class="purple">must</strong> be less than or equal to
<code>VkPhysicalDeviceMeshShaderPropertiesNV</code>::<code>maxDrawMeshTasksCount</code></p>
</li>
</ul>
</div>
</div>
</div>
</div>
<div class="sect3">
<h4 id="_see_also_481">See Also</h4>
<div class="paragraph">
<p><a href="#vkCmdDrawMeshTasksIndirectNV">vkCmdDrawMeshTasksIndirectNV</a></p>
</div>
</div>
<div class="sect3">
<h4 id="_document_notes_481">Document Notes</h4>
<div class="paragraph">
<p>For more information, see the Vulkan Specification at URL</p>
</div>
<div class="paragraph">
<p><a href="https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VkDrawMeshTasksIndirectCommandNV" class="bare">https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VkDrawMeshTasksIndirectCommandNV</a></p>
</div>
<div class="paragraph">
<p>This page is extracted from the Vulkan Specification.
Fixes and changes should be made to the Specification, not directly.</p>
</div>
<div style="page-break-after: always;"></div>
</div>
</div>
<div class="sect2">
<h3 id="_vkdrmformatmodifierpropertiesext3">VkDrmFormatModifierPropertiesEXT(3)</h3>
<div class="sect3">
<h4 id="_name_482">Name</h4>
<div class="paragraph">
<p>VkDrmFormatModifierPropertiesEXT - Structure specifying properties of a format when combined with a DRM format modifier</p>
</div>
</div>
<div class="sect3">
<h4 id="_c_specification_482">C Specification</h4>
<div class="paragraph">
<p>The <a href="#VkDrmFormatModifierPropertiesEXT">VkDrmFormatModifierPropertiesEXT</a> structure describes properties of
a <a href="#VkFormat">VkFormat</a> when that format is combined with a
<a href="vkspec.html#glossary-drm-format-modifier">Linux DRM format modifier</a>.
These properties, like those of <a href="#VkFormatProperties2">VkFormatProperties2</a>, are independent
of any particular image.</p>
</div>
<div class="paragraph">
<p>The <a href="#VkDrmFormatModifierPropertiesEXT">VkDrmFormatModifierPropertiesEXT</a> structure is defined as:</p>
</div>
<div id="VkDrmFormatModifierPropertiesEXT" class="listingblock">
<div class="content">
<pre class="highlight"><code class="language-c++" data-lang="c++">typedef struct VkDrmFormatModifierPropertiesEXT {
    uint64_t                drmFormatModifier;
    uint32_t                drmFormatModifierPlaneCount;
    VkFormatFeatureFlags    drmFormatModifierTilingFeatures;
} VkDrmFormatModifierPropertiesEXT;</code></pre>
</div>
</div>
</div>
<div class="sect3">
<h4 id="_members_119">Members</h4>
<div class="ulist">
<ul>
<li>
<p><code>drmFormatModifier</code> is a <em>Linux DRM format modifier</em>.</p>
</li>
<li>
<p><code>drmFormatModifierPlaneCount</code> is the number of <em>memory planes</em> in
any image created with <code>format</code> and <code>drmFormatModifier</code>.
An image&#8217;s <em>memory planecount</em> is distinct from its <em>format planecount</em>,
as explained below.</p>
</li>
<li>
<p><code>drmFormatModifierTilingFeatures</code> is a bitmask of
<a href="#VkFormatFeatureFlagBits">VkFormatFeatureFlagBits</a> that are supported by any image created
with <code>format</code> and <code>drmFormatModifier</code>.</p>
</li>
</ul>
</div>
</div>
<div class="sect3">
<h4 id="_description_482">Description</h4>
<div class="paragraph">
<p>The returned <code>drmFormatModifierTilingFeatures</code> <strong class="purple">must</strong> contain at least
one bit.</p>
</div>
<div class="paragraph">
<p>The implementation <strong class="purple">must</strong> not return <code>DRM_FORMAT_MOD_INVALID</code> in
<code>drmFormatModifier</code>.</p>
</div>
<div class="paragraph">
<p>An image&#8217;s <em>memory planecount</em> (as returned by
<code>drmFormatModifierPlaneCount</code>) is distinct from its <em>format planecount</em>
(in the sense of <a href="vkspec.html#formats-requiring-sampler-ycbcr-conversion">multi-planar</a>
Y&#8217;C<sub>B</sub>C<sub>R</sub> formats).
In <a href="#VkImageAspectFlags">VkImageAspectFlags</a>, each
<code>VK_IMAGE_ASPECT_MEMORY_PLANE</code><em><em>i</em>_BIT_EXT represents a _memory plane</em>
and each <code>VK_IMAGE_ASPECT_PLANE</code><em><em>i</em>_BIT a _format plane</em>.</p>
</div>
<div class="paragraph">
<p>An image&#8217;s set of <em>format planes</em> is an ordered partition of the image&#8217;s
<strong>content</strong> into separable groups of format channels.
The ordered partition is encoded in the name of each <a href="#VkFormat">VkFormat</a>.
For example, <code>VK_FORMAT_G8_B8R8_2PLANE_420_UNORM</code> contains two <em>format
planes</em>; the first plane contains the green channel and the second plane
contains the blue channel and red channel.
If the format name does not contain <code>PLANE</code>, then the format contains a
single plane; for example, <code>VK_FORMAT_R8G8B8A8_UNORM</code>.
Some commands, such as <a href="#vkCmdCopyBufferToImage">vkCmdCopyBufferToImage</a>, do not operate on all
format channels in the image, but instead operate only on the <em>format
planes</em> explicitly chosen by the application and operate on each <em>format
plane</em> independently.</p>
</div>
<div class="paragraph">
<p>An image&#8217;s set of <em>memory planes</em> is an ordered partition of the image&#8217;s
<strong>memory</strong> rather than the image&#8217;s <strong>content</strong>.
Each <em>memory plane</em> is a contiguous range of memory.
The union of an image&#8217;s <em>memory planes</em> is not necessarily contiguous.</p>
</div>
<div class="paragraph">
<p>If an image is <a href="vkspec.html#glossary-linear-resource">linear</a>, then the partition is
the same for <em>memory planes</em> and for <em>format planes</em>.
Therefore, if the returned <code>drmFormatModifier</code> is
<code>DRM_FORMAT_MOD_LINEAR</code>, then <code>drmFormatModifierPlaneCount</code> <strong class="purple">must</strong>
equal the <em>format planecount</em>, and <code>drmFormatModifierTilingFeatures</code>
<strong class="purple">must</strong> be identical to the
<a href="#VkFormatProperties2">VkFormatProperties2</a>::<code>linearTilingFeatures</code> returned in the same
<code>pNext</code> chain.</p>
</div>
<div class="paragraph">
<p>If an image is <a href="vkspec.html#glossary-linear-resource">non-linear</a>, then the partition
of the image&#8217;s <strong>memory</strong> into <em>memory planes</em> is implementation-specific and
<strong class="purple">may</strong> be unrelated to the partition of the image&#8217;s <strong>content</strong> into <em>format
planes</em>.
For example, consider an image whose <code>format</code> is
<code>VK_FORMAT_G8_B8_R8_3PLANE_420_UNORM</code>, <code>tiling</code> is
<code>VK_IMAGE_TILING_DRM_FORMAT_MODIFIER_EXT</code>, whose <code>drmFormatModifier</code>
is not <code>DRM_FORMAT_MOD_LINEAR</code>, and <code>flags</code> lacks
<code>VK_IMAGE_CREATE_DISJOINT_BIT</code>.
The image has 3 <em>format planes</em>, and commands such
<a href="#vkCmdCopyBufferToImage">vkCmdCopyBufferToImage</a> act on each <em>format plane</em> independently as if
the data of each <em>format plane</em> were separable from the data of the other
planes.
In a straightforward implementation, the implementation <strong class="purple">may</strong> store the
image&#8217;s content in 3 adjacent <em>memory planes</em> where each <em>memory plane</em>
corresponds exactly to a <em>format plane</em>.
However, the implementation <strong class="purple">may</strong> also store the image&#8217;s content in a single
<em>memory plane</em> where all format channels are combined using an
implementation-private block-compressed format; or the implementation <strong class="purple">may</strong>
store the image&#8217;s content in a collection of 7 adjacent <em>memory planes</em>
using an implementation-private sharding technique.
Because the image is non-linear and non-disjoint, the implementation has
much freedom when choosing the image&#8217;s placement in memory.</p>
</div>
<div class="paragraph">
<p>The <em>memory planecount</em> applies to function parameters and structures only
when the API specifies an explicit requirement on
<code>drmFormatModifierPlaneCount</code>.
In all other cases, the <em>memory planecount</em> is ignored.</p>
</div>
</div>
<div class="sect3">
<h4 id="_see_also_482">See Also</h4>
<div class="paragraph">
<p><a href="#VkDrmFormatModifierPropertiesListEXT">VkDrmFormatModifierPropertiesListEXT</a>, <a href="#VkFormatFeatureFlags">VkFormatFeatureFlags</a></p>
</div>
</div>
<div class="sect3">
<h4 id="_document_notes_482">Document Notes</h4>
<div class="paragraph">
<p>For more information, see the Vulkan Specification at URL</p>
</div>
<div class="paragraph">
<p><a href="https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VkDrmFormatModifierPropertiesEXT" class="bare">https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VkDrmFormatModifierPropertiesEXT</a></p>
</div>
<div class="paragraph">
<p>This page is extracted from the Vulkan Specification.
Fixes and changes should be made to the Specification, not directly.</p>
</div>
<div style="page-break-after: always;"></div>
</div>
</div>
<div class="sect2">
<h3 id="_vkdrmformatmodifierpropertieslistext3">VkDrmFormatModifierPropertiesListEXT(3)</h3>
<div class="sect3">
<h4 id="_name_483">Name</h4>
<div class="paragraph">
<p>VkDrmFormatModifierPropertiesListEXT - Structure specifying the list of DRM format modifiers supported for a format</p>
</div>
</div>
<div class="sect3">
<h4 id="_c_specification_483">C Specification</h4>
<div class="paragraph">
<p>To obtain the list of <a href="vkspec.html#glossary-drm-format-modifier">Linux DRM format
modifiers</a> compatible with a <a href="#VkFormat">VkFormat</a>, add
<a href="#VkDrmFormatModifierPropertiesListEXT">VkDrmFormatModifierPropertiesListEXT</a> to the <code>pNext</code> chain of
<a href="#VkFormatProperties2">VkFormatProperties2</a>.</p>
</div>
<div class="paragraph">
<p>The <a href="#VkDrmFormatModifierPropertiesListEXT">VkDrmFormatModifierPropertiesListEXT</a> structure is defined as:</p>
</div>
<div id="VkDrmFormatModifierPropertiesListEXT" class="listingblock">
<div class="content">
<pre class="highlight"><code class="language-c++" data-lang="c++">typedef struct VkDrmFormatModifierPropertiesListEXT {
    VkStructureType                      sType;
    void*                                pNext;
    uint32_t                             drmFormatModifierCount;
    VkDrmFormatModifierPropertiesEXT*    pDrmFormatModifierProperties;
} VkDrmFormatModifierPropertiesListEXT;</code></pre>
</div>
</div>
</div>
<div class="sect3">
<h4 id="_members_120">Members</h4>
<div class="ulist">
<ul>
<li>
<p><code>sType</code> is the type of this structure.</p>
</li>
<li>
<p><code>pNext</code> is <code>NULL</code> or a pointer to an extension-specific structure.</p>
</li>
<li>
<p><code>drmFormatModifierCount</code> is an inout parameter related to the number
of modifiers compatible with the <code>format</code>, as described below.</p>
</li>
<li>
<p><code>pDrmFormatModifierProperties</code> is either <code>NULL</code> or an array of
<a href="#VkDrmFormatModifierPropertiesEXT">VkDrmFormatModifierPropertiesEXT</a> structures.</p>
</li>
</ul>
</div>
</div>
<div class="sect3">
<h4 id="_description_483">Description</h4>
<div class="paragraph">
<p>If <code>pDrmFormatModifierProperties</code> is <code>NULL</code>, then the function returns
in <code>drmFormatModifierCount</code> the number of modifiers compatible with the
queried <code>format</code>.
Otherwise, the application <strong class="purple">must</strong> set <code>drmFormatModifierCount</code> to the
length of the array <code>pDrmFormatModifierProperties</code>; the function will
write at most <code>drmFormatModifierCount</code> elements to the array, and will
return in <code>drmFormatModifierCount</code> the number of elements written.</p>
</div>
<div class="paragraph">
<p>Among the elements in array <code>pDrmFormatModifierProperties</code>, each
returned <code>drmFormatModifier</code> <strong class="purple">must</strong> be unique.</p>
</div>
<div class="sidebarblock">
<div class="content">
<div class="title">Valid Usage (Implicit)</div>
<div class="ulist">
<ul>
<li>
<p><a id="VUID-VkDrmFormatModifierPropertiesListEXT-sType-sType"></a> <code>sType</code> <strong class="purple">must</strong> be <code>VK_STRUCTURE_TYPE_DRM_FORMAT_MODIFIER_PROPERTIES_LIST_EXT</code></p>
</li>
</ul>
</div>
</div>
</div>
</div>
<div class="sect3">
<h4 id="_see_also_483">See Also</h4>
<div class="paragraph">
<p><a href="#VkDrmFormatModifierPropertiesEXT">VkDrmFormatModifierPropertiesEXT</a>, <a href="#VkStructureType">VkStructureType</a></p>
</div>
</div>
<div class="sect3">
<h4 id="_document_notes_483">Document Notes</h4>
<div class="paragraph">
<p>For more information, see the Vulkan Specification at URL</p>
</div>
<div class="paragraph">
<p><a href="https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VkDrmFormatModifierPropertiesListEXT" class="bare">https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VkDrmFormatModifierPropertiesListEXT</a></p>
</div>
<div class="paragraph">
<p>This page is extracted from the Vulkan Specification.
Fixes and changes should be made to the Specification, not directly.</p>
</div>
<div style="page-break-after: always;"></div>
</div>
</div>
<div class="sect2">
<h3 id="_vkeventcreateinfo3">VkEventCreateInfo(3)</h3>
<div class="sect3">
<h4 id="_name_484">Name</h4>
<div class="paragraph">
<p>VkEventCreateInfo - Structure specifying parameters of a newly created event</p>
</div>
</div>
<div class="sect3">
<h4 id="_c_specification_484">C Specification</h4>
<div class="paragraph">
<p>The <code>VkEventCreateInfo</code> structure is defined as:</p>
</div>
<div id="VkEventCreateInfo" class="listingblock">
<div class="content">
<pre class="highlight"><code class="language-c++" data-lang="c++">typedef struct VkEventCreateInfo {
    VkStructureType       sType;
    const void*           pNext;
    VkEventCreateFlags    flags;
} VkEventCreateInfo;</code></pre>
</div>
</div>
</div>
<div class="sect3">
<h4 id="_members_121">Members</h4>
<div class="ulist">
<ul>
<li>
<p><code>sType</code> is the type of this structure.</p>
</li>
<li>
<p><code>pNext</code> is <code>NULL</code> or a pointer to an extension-specific structure.</p>
</li>
<li>
<p><code>flags</code> is reserved for future use.</p>
</li>
</ul>
</div>
</div>
<div class="sect3">
<h4 id="_description_484">Description</h4>
<div class="sidebarblock">
<div class="content">
<div class="title">Valid Usage (Implicit)</div>
<div class="ulist">
<ul>
<li>
<p><a id="VUID-VkEventCreateInfo-sType-sType"></a> <code>sType</code> <strong class="purple">must</strong> be <code>VK_STRUCTURE_TYPE_EVENT_CREATE_INFO</code></p>
</li>
<li>
<p><a id="VUID-VkEventCreateInfo-pNext-pNext"></a> <code>pNext</code> <strong class="purple">must</strong> be <code>NULL</code></p>
</li>
<li>
<p><a id="VUID-VkEventCreateInfo-flags-zerobitmask"></a> <code>flags</code> <strong class="purple">must</strong> be <code>0</code></p>
</li>
</ul>
</div>
</div>
</div>
</div>
<div class="sect3">
<h4 id="_see_also_484">See Also</h4>
<div class="paragraph">
<p><a href="#VkEventCreateFlags">VkEventCreateFlags</a>, <a href="#VkStructureType">VkStructureType</a>, <a href="#vkCreateEvent">vkCreateEvent</a></p>
</div>
</div>
<div class="sect3">
<h4 id="_document_notes_484">Document Notes</h4>
<div class="paragraph">
<p>For more information, see the Vulkan Specification at URL</p>
</div>
<div class="paragraph">
<p><a href="https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VkEventCreateInfo" class="bare">https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VkEventCreateInfo</a></p>
</div>
<div class="paragraph">
<p>This page is extracted from the Vulkan Specification.
Fixes and changes should be made to the Specification, not directly.</p>
</div>
<div style="page-break-after: always;"></div>
</div>
</div>
<div class="sect2">
<h3 id="_vkexportfencecreateinfo3">VkExportFenceCreateInfo(3)</h3>
<div class="sect3">
<h4 id="_name_485">Name</h4>
<div class="paragraph">
<p>VkExportFenceCreateInfo - Structure specifying handle types that can be exported from a fence</p>
</div>
</div>
<div class="sect3">
<h4 id="_c_specification_485">C Specification</h4>
<div class="paragraph">
<p>To create a fence whose payload <strong class="purple">can</strong> be exported to external handles, add
the <a href="#VkExportFenceCreateInfo">VkExportFenceCreateInfo</a> structure to the <code>pNext</code> chain of the
<a href="#VkFenceCreateInfo">VkFenceCreateInfo</a> structure.
The <code>VkExportFenceCreateInfo</code> structure is defined as:</p>
</div>
<div id="VkExportFenceCreateInfo" class="listingblock">
<div class="content">
<pre class="highlight"><code class="language-c++" data-lang="c++">typedef struct VkExportFenceCreateInfo {
    VkStructureType                   sType;
    const void*                       pNext;
    VkExternalFenceHandleTypeFlags    handleTypes;
} VkExportFenceCreateInfo;</code></pre>
</div>
</div>
<div class="paragraph">
<p>or the equivalent</p>
</div>
<div id="VkExportFenceCreateInfoKHR" class="listingblock">
<div class="content">
<pre class="highlight"><code class="language-c++" data-lang="c++">typedef VkExportFenceCreateInfo VkExportFenceCreateInfoKHR;</code></pre>
</div>
</div>
</div>
<div class="sect3">
<h4 id="_members_122">Members</h4>
<div class="ulist">
<ul>
<li>
<p><code>sType</code> is the type of this structure.</p>
</li>
<li>
<p><code>pNext</code> is <code>NULL</code> or a pointer to an extension-specific structure.</p>
</li>
<li>
<p><code>handleTypes</code> is a bitmask of
<a href="#VkExternalFenceHandleTypeFlagBits">VkExternalFenceHandleTypeFlagBits</a> specifying one or more fence
handle types the application <strong class="purple">can</strong> export from the resulting fence.
The application <strong class="purple">can</strong> request multiple handle types for the same fence.</p>
</li>
</ul>
</div>
</div>
<div class="sect3">
<h4 id="_description_485">Description</h4>
<div class="sidebarblock">
<div class="content">
<div class="title">Valid Usage</div>
<div class="ulist">
<ul>
<li>
<p><a id="VUID-VkExportFenceCreateInfo-handleTypes-01446"></a>
The bits in <code>handleTypes</code> must be supported and compatible, as
reported by <a href="#VkExternalFenceProperties">VkExternalFenceProperties</a>.</p>
</li>
</ul>
</div>
</div>
</div>
<div class="sidebarblock">
<div class="content">
<div class="title">Valid Usage (Implicit)</div>
<div class="ulist">
<ul>
<li>
<p><a id="VUID-VkExportFenceCreateInfo-sType-sType"></a> <code>sType</code> <strong class="purple">must</strong> be <code>VK_STRUCTURE_TYPE_EXPORT_FENCE_CREATE_INFO</code></p>
</li>
<li>
<p><a id="VUID-VkExportFenceCreateInfo-handleTypes-parameter"></a> <code>handleTypes</code> <strong class="purple">must</strong> be a valid combination of <a href="#VkExternalFenceHandleTypeFlagBits">VkExternalFenceHandleTypeFlagBits</a> values</p>
</li>
</ul>
</div>
</div>
</div>
</div>
<div class="sect3">
<h4 id="_see_also_485">See Also</h4>
<div class="paragraph">
<p><a href="#VkExternalFenceHandleTypeFlags">VkExternalFenceHandleTypeFlags</a>, <a href="#VkStructureType">VkStructureType</a></p>
</div>
</div>
<div class="sect3">
<h4 id="_document_notes_485">Document Notes</h4>
<div class="paragraph">
<p>For more information, see the Vulkan Specification at URL</p>
</div>
<div class="paragraph">
<p><a href="https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VkExportFenceCreateInfo" class="bare">https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VkExportFenceCreateInfo</a></p>
</div>
<div class="paragraph">
<p>This page is extracted from the Vulkan Specification.
Fixes and changes should be made to the Specification, not directly.</p>
</div>
<div style="page-break-after: always;"></div>
</div>
</div>
<div class="sect2">
<h3 id="_vkexportfencewin32handleinfokhr3">VkExportFenceWin32HandleInfoKHR(3)</h3>
<div class="sect3">
<h4 id="_name_486">Name</h4>
<div class="paragraph">
<p>VkExportFenceWin32HandleInfoKHR - Structure specifying additional attributes of Windows handles exported from a fence</p>
</div>
</div>
<div class="sect3">
<h4 id="_c_specification_486">C Specification</h4>
<div class="paragraph">
<p>To specify additional attributes of NT handles exported from a fence, add
the <a href="#VkExportFenceWin32HandleInfoKHR">VkExportFenceWin32HandleInfoKHR</a> structure to the <code>pNext</code> chain
of the <a href="#VkFenceCreateInfo">VkFenceCreateInfo</a> structure.
The <code>VkExportFenceWin32HandleInfoKHR</code> structure is defined as:</p>
</div>
<div id="VkExportFenceWin32HandleInfoKHR" class="listingblock">
<div class="content">
<pre class="highlight"><code class="language-c++" data-lang="c++">typedef struct VkExportFenceWin32HandleInfoKHR {
    VkStructureType               sType;
    const void*                   pNext;
    const SECURITY_ATTRIBUTES*    pAttributes;
    DWORD                         dwAccess;
    LPCWSTR                       name;
} VkExportFenceWin32HandleInfoKHR;</code></pre>
</div>
</div>
</div>
<div class="sect3">
<h4 id="_members_123">Members</h4>
<div class="ulist">
<ul>
<li>
<p><code>sType</code> is the type of this structure.</p>
</li>
<li>
<p><code>pNext</code> is <code>NULL</code> or a pointer to an extension-specific structure.</p>
</li>
<li>
<p><code>pAttributes</code> is a pointer to a Windows <code>SECURITY_ATTRIBUTES</code>
structure specifying security attributes of the handle.</p>
</li>
<li>
<p><code>dwAccess</code> is a <code>DWORD</code> specifying access rights of the handle.</p>
</li>
<li>
<p><code>name</code> is a NULL-terminated UTF-16 string to associate with the
underlying synchronization primitive referenced by NT handles exported
from the created fence.</p>
</li>
</ul>
</div>
</div>
<div class="sect3">
<h4 id="_description_486">Description</h4>
<div class="paragraph">
<p>If this structure is not present, or if <code>pAttributes</code> is set to <code>NULL</code>,
default security descriptor values will be used, and child processes created
by the application will not inherit the handle, as described in the MSDN
documentation for &#8220;Synchronization Object Security and Access Rights&#8221;<sup>1</sup>.
Further, if the structure is not present, the access rights will be</p>
</div>
<div class="paragraph">
<p><code>DXGI_SHARED_RESOURCE_READ</code> | <code>DXGI_SHARED_RESOURCE_WRITE</code></p>
</div>
<div class="paragraph">
<p>for handles of the following types:</p>
</div>
<div class="paragraph">
<p><code>VK_EXTERNAL_FENCE_HANDLE_TYPE_OPAQUE_WIN32_BIT</code></p>
</div>
<div class="dlist">
<dl>
<dt class="hdlist1">1</dt>
<dd>
<p><a href="https://msdn.microsoft.com/en-us/library/windows/desktop/ms686670.aspx" class="bare">https://msdn.microsoft.com/en-us/library/windows/desktop/ms686670.aspx</a></p>
</dd>
</dl>
</div>
<div class="sidebarblock">
<div class="content">
<div class="title">Valid Usage</div>
<div class="ulist">
<ul>
<li>
<p><a id="VUID-VkExportFenceWin32HandleInfoKHR-handleTypes-01447"></a>
If <a href="#VkExportFenceCreateInfo">VkExportFenceCreateInfo</a>::<code>handleTypes</code> does not include
<code>VK_EXTERNAL_FENCE_HANDLE_TYPE_OPAQUE_WIN32_BIT</code>,
<code>VkExportFenceWin32HandleInfoKHR</code> <strong class="purple">must</strong> not be in the <code>pNext</code>
chain of <a href="#VkFenceCreateInfo">VkFenceCreateInfo</a>.</p>
</li>
</ul>
</div>
</div>
</div>
<div class="sidebarblock">
<div class="content">
<div class="title">Valid Usage (Implicit)</div>
<div class="ulist">
<ul>
<li>
<p><a id="VUID-VkExportFenceWin32HandleInfoKHR-sType-sType"></a> <code>sType</code> <strong class="purple">must</strong> be <code>VK_STRUCTURE_TYPE_EXPORT_FENCE_WIN32_HANDLE_INFO_KHR</code></p>
</li>
<li>
<p><a id="VUID-VkExportFenceWin32HandleInfoKHR-pAttributes-parameter"></a> If <code>pAttributes</code> is not <code>NULL</code>, <code>pAttributes</code> <strong class="purple">must</strong> be a valid pointer to a valid <code>SECURITY_ATTRIBUTES</code> value</p>
</li>
</ul>
</div>
</div>
</div>
</div>
<div class="sect3">
<h4 id="_see_also_486">See Also</h4>
<div class="paragraph">
<p><a href="#VkStructureType">VkStructureType</a></p>
</div>
</div>
<div class="sect3">
<h4 id="_document_notes_486">Document Notes</h4>
<div class="paragraph">
<p>For more information, see the Vulkan Specification at URL</p>
</div>
<div class="paragraph">
<p><a href="https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VkExportFenceWin32HandleInfoKHR" class="bare">https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VkExportFenceWin32HandleInfoKHR</a></p>
</div>
<div class="paragraph">
<p>This page is extracted from the Vulkan Specification.
Fixes and changes should be made to the Specification, not directly.</p>
</div>
<div style="page-break-after: always;"></div>
</div>
</div>
<div class="sect2">
<h3 id="_vkexportmemoryallocateinfo3">VkExportMemoryAllocateInfo(3)</h3>
<div class="sect3">
<h4 id="_name_487">Name</h4>
<div class="paragraph">
<p>VkExportMemoryAllocateInfo - Specify exportable handle types for a device memory object</p>
</div>
</div>
<div class="sect3">
<h4 id="_c_specification_487">C Specification</h4>
<div class="paragraph">
<p>When allocating memory that <strong class="purple">may</strong> be exported to another process or Vulkan
instance, add a <a href="#VkExportMemoryAllocateInfo">VkExportMemoryAllocateInfo</a> structure to the
<code>pNext</code> chain of the <a href="#VkMemoryAllocateInfo">VkMemoryAllocateInfo</a> structure, specifying
the handle types that <strong class="purple">may</strong> be exported.</p>
</div>
<div class="paragraph">
<p>The <a href="#VkExportMemoryAllocateInfo">VkExportMemoryAllocateInfo</a> structure is defined as:</p>
</div>
<div id="VkExportMemoryAllocateInfo" class="listingblock">
<div class="content">
<pre class="highlight"><code class="language-c++" data-lang="c++">typedef struct VkExportMemoryAllocateInfo {
    VkStructureType                    sType;
    const void*                        pNext;
    VkExternalMemoryHandleTypeFlags    handleTypes;
} VkExportMemoryAllocateInfo;</code></pre>
</div>
</div>
<div class="paragraph">
<p>or the equivalent</p>
</div>
<div id="VkExportMemoryAllocateInfoKHR" class="listingblock">
<div class="content">
<pre class="highlight"><code class="language-c++" data-lang="c++">typedef VkExportMemoryAllocateInfo VkExportMemoryAllocateInfoKHR;</code></pre>
</div>
</div>
</div>
<div class="sect3">
<h4 id="_members_124">Members</h4>
<div class="ulist">
<ul>
<li>
<p><code>sType</code> is the type of this structure.</p>
</li>
<li>
<p><code>pNext</code> is <code>NULL</code> or a pointer to an extension-specific structure.</p>
</li>
<li>
<p><code>handleTypes</code> is a bitmask of
<a href="#VkExternalMemoryHandleTypeFlagBits">VkExternalMemoryHandleTypeFlagBits</a> specifying one or more memory
handle types the application <strong class="purple">can</strong> export from the resulting allocation.
The application <strong class="purple">can</strong> request multiple handle types for the same
allocation.</p>
</li>
</ul>
</div>
</div>
<div class="sect3">
<h4 id="_description_487">Description</h4>
<div class="sidebarblock">
<div class="content">
<div class="title">Valid Usage</div>
<div class="ulist">
<ul>
<li>
<p><a id="VUID-VkExportMemoryAllocateInfo-handleTypes-00656"></a>
The bits in <code>handleTypes</code> <strong class="purple">must</strong> be supported and compatible, as
reported by <a href="#VkExternalImageFormatProperties">VkExternalImageFormatProperties</a> or
<a href="#VkExternalBufferProperties">VkExternalBufferProperties</a>.</p>
</li>
</ul>
</div>
</div>
</div>
<div class="sidebarblock">
<div class="content">
<div class="title">Valid Usage (Implicit)</div>
<div class="ulist">
<ul>
<li>
<p><a id="VUID-VkExportMemoryAllocateInfo-sType-sType"></a> <code>sType</code> <strong class="purple">must</strong> be <code>VK_STRUCTURE_TYPE_EXPORT_MEMORY_ALLOCATE_INFO</code></p>
</li>
<li>
<p><a id="VUID-VkExportMemoryAllocateInfo-handleTypes-parameter"></a> <code>handleTypes</code> <strong class="purple">must</strong> be a valid combination of <a href="#VkExternalMemoryHandleTypeFlagBits">VkExternalMemoryHandleTypeFlagBits</a> values</p>
</li>
</ul>
</div>
</div>
</div>
</div>
<div class="sect3">
<h4 id="_see_also_487">See Also</h4>
<div class="paragraph">
<p><a href="#VkExternalMemoryHandleTypeFlags">VkExternalMemoryHandleTypeFlags</a>, <a href="#VkStructureType">VkStructureType</a></p>
</div>
</div>
<div class="sect3">
<h4 id="_document_notes_487">Document Notes</h4>
<div class="paragraph">
<p>For more information, see the Vulkan Specification at URL</p>
</div>
<div class="paragraph">
<p><a href="https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VkExportMemoryAllocateInfo" class="bare">https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VkExportMemoryAllocateInfo</a></p>
</div>
<div class="paragraph">
<p>This page is extracted from the Vulkan Specification.
Fixes and changes should be made to the Specification, not directly.</p>
</div>
<div style="page-break-after: always;"></div>
</div>
</div>
<div class="sect2">
<h3 id="_vkexportmemoryallocateinfonv3">VkExportMemoryAllocateInfoNV(3)</h3>
<div class="sect3">
<h4 id="_name_488">Name</h4>
<div class="paragraph">
<p>VkExportMemoryAllocateInfoNV - Specify memory handle types that may be exported</p>
</div>
</div>
<div class="sect3">
<h4 id="_c_specification_488">C Specification</h4>
<div class="paragraph">
<p>The <a href="#VkExportMemoryAllocateInfoNV">VkExportMemoryAllocateInfoNV</a> structure is defined as:</p>
</div>
<div id="VkExportMemoryAllocateInfoNV" class="listingblock">
<div class="content">
<pre class="highlight"><code class="language-c++" data-lang="c++">typedef struct VkExportMemoryAllocateInfoNV {
    VkStructureType                      sType;
    const void*                          pNext;
    VkExternalMemoryHandleTypeFlagsNV    handleTypes;
} VkExportMemoryAllocateInfoNV;</code></pre>
</div>
</div>
</div>
<div class="sect3">
<h4 id="_members_125">Members</h4>
<div class="ulist">
<ul>
<li>
<p><code>sType</code> is the type of this structure.</p>
</li>
<li>
<p><code>pNext</code> is <code>NULL</code> or a pointer to an extension-specific structure.</p>
</li>
<li>
<p><code>handleTypes</code> is a bitmask of
<a href="#VkExternalMemoryHandleTypeFlagBitsNV">VkExternalMemoryHandleTypeFlagBitsNV</a> specifying one or more memory
handle types that <strong class="purple">may</strong> be exported.
Multiple handle types <strong class="purple">may</strong> be requested for the same allocation as long
as they are compatible, as reported by
<a href="#vkGetPhysicalDeviceExternalImageFormatPropertiesNV">vkGetPhysicalDeviceExternalImageFormatPropertiesNV</a>.</p>
</li>
</ul>
</div>
</div>
<div class="sect3">
<h4 id="_description_488">Description</h4>
<div class="sidebarblock">
<div class="content">
<div class="title">Valid Usage (Implicit)</div>
<div class="ulist">
<ul>
<li>
<p><a id="VUID-VkExportMemoryAllocateInfoNV-sType-sType"></a> <code>sType</code> <strong class="purple">must</strong> be <code>VK_STRUCTURE_TYPE_EXPORT_MEMORY_ALLOCATE_INFO_NV</code></p>
</li>
<li>
<p><a id="VUID-VkExportMemoryAllocateInfoNV-handleTypes-parameter"></a> <code>handleTypes</code> <strong class="purple">must</strong> be a valid combination of <a href="#VkExternalMemoryHandleTypeFlagBitsNV">VkExternalMemoryHandleTypeFlagBitsNV</a> values</p>
</li>
</ul>
</div>
</div>
</div>
</div>
<div class="sect3">
<h4 id="_see_also_488">See Also</h4>
<div class="paragraph">
<p><a href="#VkExternalMemoryHandleTypeFlagsNV">VkExternalMemoryHandleTypeFlagsNV</a>, <a href="#VkStructureType">VkStructureType</a></p>
</div>
</div>
<div class="sect3">
<h4 id="_document_notes_488">Document Notes</h4>
<div class="paragraph">
<p>For more information, see the Vulkan Specification at URL</p>
</div>
<div class="paragraph">
<p><a href="https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VkExportMemoryAllocateInfoNV" class="bare">https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VkExportMemoryAllocateInfoNV</a></p>
</div>
<div class="paragraph">
<p>This page is extracted from the Vulkan Specification.
Fixes and changes should be made to the Specification, not directly.</p>
</div>
<div style="page-break-after: always;"></div>
</div>
</div>
<div class="sect2">
<h3 id="_vkexportmemorywin32handleinfokhr3">VkExportMemoryWin32HandleInfoKHR(3)</h3>
<div class="sect3">
<h4 id="_name_489">Name</h4>
<div class="paragraph">
<p>VkExportMemoryWin32HandleInfoKHR - Structure specifying additional attributes of Windows handles exported from a memory</p>
</div>
</div>
<div class="sect3">
<h4 id="_c_specification_489">C Specification</h4>
<div class="paragraph">
<p>To specify additional attributes of NT handles exported from a memory
object, add the <a href="#VkExportMemoryWin32HandleInfoKHR">VkExportMemoryWin32HandleInfoKHR</a> structure to the
<code>pNext</code> chain of the <a href="#VkMemoryAllocateInfo">VkMemoryAllocateInfo</a> structure.
The <code>VkExportMemoryWin32HandleInfoKHR</code> structure is defined as:</p>
</div>
<div id="VkExportMemoryWin32HandleInfoKHR" class="listingblock">
<div class="content">
<pre class="highlight"><code class="language-c++" data-lang="c++">typedef struct VkExportMemoryWin32HandleInfoKHR {
    VkStructureType               sType;
    const void*                   pNext;
    const SECURITY_ATTRIBUTES*    pAttributes;
    DWORD                         dwAccess;
    LPCWSTR                       name;
} VkExportMemoryWin32HandleInfoKHR;</code></pre>
</div>
</div>
</div>
<div class="sect3">
<h4 id="_members_126">Members</h4>
<div class="ulist">
<ul>
<li>
<p><code>sType</code> is the type of this structure.</p>
</li>
<li>
<p><code>pNext</code> is <code>NULL</code> or a pointer to an extension-specific structure.</p>
</li>
<li>
<p><code>pAttributes</code> is a pointer to a Windows <code>SECURITY_ATTRIBUTES</code>
structure specifying security attributes of the handle.</p>
</li>
<li>
<p><code>dwAccess</code> is a <code>DWORD</code> specifying access rights of the handle.</p>
</li>
<li>
<p><code>name</code> is a NULL-terminated UTF-16 string to associate with the
underlying resource referenced by NT handles exported from the created
memory.</p>
</li>
</ul>
</div>
</div>
<div class="sect3">
<h4 id="_description_489">Description</h4>
<div class="paragraph">
<p>If this structure is not present, or if <code>pAttributes</code> is set to <code>NULL</code>,
default security descriptor values will be used, and child processes created
by the application will not inherit the handle, as described in the MSDN
documentation for &#8220;Synchronization Object Security and Access Rights&#8221;<sup>1</sup>.
Further, if the structure is not present, the access rights will be</p>
</div>
<div class="paragraph">
<p><code>DXGI_SHARED_RESOURCE_READ</code> | <code>DXGI_SHARED_RESOURCE_WRITE</code></p>
</div>
<div class="paragraph">
<p>for handles of the following types:</p>
</div>
<div class="paragraph">
<p><code>VK_EXTERNAL_MEMORY_HANDLE_TYPE_OPAQUE_WIN32_BIT</code>
<code>VK_EXTERNAL_MEMORY_HANDLE_TYPE_D3D11_TEXTURE_BIT</code></p>
</div>
<div class="paragraph">
<p>And</p>
</div>
<div class="paragraph">
<p><code>GENERIC_ALL</code></p>
</div>
<div class="paragraph">
<p>for handles of the following types:</p>
</div>
<div class="paragraph">
<p><code>VK_EXTERNAL_MEMORY_HANDLE_TYPE_D3D12_HEAP_BIT</code>
<code>VK_EXTERNAL_MEMORY_HANDLE_TYPE_D3D12_RESOURCE_BIT</code></p>
</div>
<div class="dlist">
<dl>
<dt class="hdlist1">1</dt>
<dd>
<p><a href="https://msdn.microsoft.com/en-us/library/windows/desktop/ms686670.aspx" class="bare">https://msdn.microsoft.com/en-us/library/windows/desktop/ms686670.aspx</a></p>
</dd>
</dl>
</div>
<div class="sidebarblock">
<div class="content">
<div class="title">Valid Usage</div>
<div class="ulist">
<ul>
<li>
<p><a id="VUID-VkExportMemoryWin32HandleInfoKHR-handleTypes-00657"></a>
If <a href="#VkExportMemoryAllocateInfo">VkExportMemoryAllocateInfo</a>::<code>handleTypes</code> does not include
<code>VK_EXTERNAL_MEMORY_HANDLE_TYPE_OPAQUE_WIN32_BIT</code>,
<code>VK_EXTERNAL_MEMORY_HANDLE_TYPE_D3D11_TEXTURE_BIT</code>,
<code>VK_EXTERNAL_MEMORY_HANDLE_TYPE_D3D12_HEAP_BIT</code>, or
<code>VK_EXTERNAL_MEMORY_HANDLE_TYPE_D3D12_RESOURCE_BIT</code>,
<code>VkExportMemoryWin32HandleInfoKHR</code> <strong class="purple">must</strong> not be in the <code>pNext</code>
chain of <a href="#VkMemoryAllocateInfo">VkMemoryAllocateInfo</a>.</p>
</li>
</ul>
</div>
</div>
</div>
<div class="sidebarblock">
<div class="content">
<div class="title">Valid Usage (Implicit)</div>
<div class="ulist">
<ul>
<li>
<p><a id="VUID-VkExportMemoryWin32HandleInfoKHR-sType-sType"></a> <code>sType</code> <strong class="purple">must</strong> be <code>VK_STRUCTURE_TYPE_EXPORT_MEMORY_WIN32_HANDLE_INFO_KHR</code></p>
</li>
<li>
<p><a id="VUID-VkExportMemoryWin32HandleInfoKHR-pAttributes-parameter"></a> If <code>pAttributes</code> is not <code>NULL</code>, <code>pAttributes</code> <strong class="purple">must</strong> be a valid pointer to a valid <code>SECURITY_ATTRIBUTES</code> value</p>
</li>
</ul>
</div>
</div>
</div>
</div>
<div class="sect3">
<h4 id="_see_also_489">See Also</h4>
<div class="paragraph">
<p><a href="#VkStructureType">VkStructureType</a></p>
</div>
</div>
<div class="sect3">
<h4 id="_document_notes_489">Document Notes</h4>
<div class="paragraph">
<p>For more information, see the Vulkan Specification at URL</p>
</div>
<div class="paragraph">
<p><a href="https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VkExportMemoryWin32HandleInfoKHR" class="bare">https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VkExportMemoryWin32HandleInfoKHR</a></p>
</div>
<div class="paragraph">
<p>This page is extracted from the Vulkan Specification.
Fixes and changes should be made to the Specification, not directly.</p>
</div>
<div style="page-break-after: always;"></div>
</div>
</div>
<div class="sect2">
<h3 id="_vkexportmemorywin32handleinfonv3">VkExportMemoryWin32HandleInfoNV(3)</h3>
<div class="sect3">
<h4 id="_name_490">Name</h4>
<div class="paragraph">
<p>VkExportMemoryWin32HandleInfoNV - specify security attributes and access rights for Win32 memory handles</p>
</div>
</div>
<div class="sect3">
<h4 id="_c_specification_490">C Specification</h4>
<div class="paragraph">
<p>When <a href="#VkExportMemoryAllocateInfoNV">VkExportMemoryAllocateInfoNV</a>::<code>handleTypes</code> includes
<code>VK_EXTERNAL_MEMORY_HANDLE_TYPE_OPAQUE_WIN32_BIT_NV</code>, add a
<code>VkExportMemoryWin32HandleInfoNV</code> to the <code>pNext</code> chain of the
<a href="#VkExportMemoryAllocateInfoNV">VkExportMemoryAllocateInfoNV</a> structure to specify security attributes
and access rights for the memory object&#8217;s external handle.</p>
</div>
<div class="paragraph">
<p>The <code>VkExportMemoryWin32HandleInfoNV</code> structure is defined as:</p>
</div>
<div id="VkExportMemoryWin32HandleInfoNV" class="listingblock">
<div class="content">
<pre class="highlight"><code class="language-c++" data-lang="c++">typedef struct VkExportMemoryWin32HandleInfoNV {
    VkStructureType               sType;
    const void*                   pNext;
    const SECURITY_ATTRIBUTES*    pAttributes;
    DWORD                         dwAccess;
} VkExportMemoryWin32HandleInfoNV;</code></pre>
</div>
</div>
</div>
<div class="sect3">
<h4 id="_members_127">Members</h4>
<div class="ulist">
<ul>
<li>
<p><code>sType</code> is the type of this structure.</p>
</li>
<li>
<p><code>pNext</code> is <code>NULL</code> or a pointer to an extension-specific structure.</p>
</li>
<li>
<p><code>pAttributes</code> is a pointer to a Windows <code>SECURITY_ATTRIBUTES</code>
structure specifying security attributes of the handle.</p>
</li>
<li>
<p><code>dwAccess</code> is a <code>DWORD</code> specifying access rights of the handle.</p>
</li>
</ul>
</div>
</div>
<div class="sect3">
<h4 id="_description_490">Description</h4>
<div class="paragraph">
<p>If this structure is not present, or if <code>pAttributes</code> is set to <code>NULL</code>,
default security descriptor values will be used, and child processes created
by the application will not inherit the handle, as described in the MSDN
documentation for &#8220;Synchronization Object Security and Access Rights&#8221;[1].
Further, if the structure is not present, the access rights will be</p>
</div>
<div class="literalblock">
<div class="content">
<pre>DXGI_SHARED_RESOURCE_READ | DXGI_SHARED_RESOURCE_WRITE</pre>
</div>
</div>
<div class="paragraph">
<p>[1] <a href="https://msdn.microsoft.com/en-us/library/windows/desktop/ms686670.aspx" class="bare">https://msdn.microsoft.com/en-us/library/windows/desktop/ms686670.aspx</a></p>
</div>
<div class="sidebarblock">
<div class="content">
<div class="title">Valid Usage (Implicit)</div>
<div class="ulist">
<ul>
<li>
<p><a id="VUID-VkExportMemoryWin32HandleInfoNV-sType-sType"></a> <code>sType</code> <strong class="purple">must</strong> be <code>VK_STRUCTURE_TYPE_EXPORT_MEMORY_WIN32_HANDLE_INFO_NV</code></p>
</li>
<li>
<p><a id="VUID-VkExportMemoryWin32HandleInfoNV-pAttributes-parameter"></a> If <code>pAttributes</code> is not <code>NULL</code>, <code>pAttributes</code> <strong class="purple">must</strong> be a valid pointer to a valid <code>SECURITY_ATTRIBUTES</code> value</p>
</li>
</ul>
</div>
</div>
</div>
</div>
<div class="sect3">
<h4 id="_see_also_490">See Also</h4>
<div class="paragraph">
<p><a href="#VkStructureType">VkStructureType</a></p>
</div>
</div>
<div class="sect3">
<h4 id="_document_notes_490">Document Notes</h4>
<div class="paragraph">
<p>For more information, see the Vulkan Specification at URL</p>
</div>
<div class="paragraph">
<p><a href="https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VkExportMemoryWin32HandleInfoNV" class="bare">https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VkExportMemoryWin32HandleInfoNV</a></p>
</div>
<div class="paragraph">
<p>This page is extracted from the Vulkan Specification.
Fixes and changes should be made to the Specification, not directly.</p>
</div>
<div style="page-break-after: always;"></div>
</div>
</div>
<div class="sect2">
<h3 id="_vkexportsemaphorecreateinfo3">VkExportSemaphoreCreateInfo(3)</h3>
<div class="sect3">
<h4 id="_name_491">Name</h4>
<div class="paragraph">
<p>VkExportSemaphoreCreateInfo - Structure specifying handle types that can be exported from a semaphore</p>
</div>
</div>
<div class="sect3">
<h4 id="_c_specification_491">C Specification</h4>
<div class="paragraph">
<p>To create a semaphore whose payload <strong class="purple">can</strong> be exported to external handles,
add the <a href="#VkExportSemaphoreCreateInfo">VkExportSemaphoreCreateInfo</a> structure to the <code>pNext</code> chain
of the <a href="#VkSemaphoreCreateInfo">VkSemaphoreCreateInfo</a> structure.
The <code>VkExportSemaphoreCreateInfo</code> structure is defined as:</p>
</div>
<div id="VkExportSemaphoreCreateInfo" class="listingblock">
<div class="content">
<pre class="highlight"><code class="language-c++" data-lang="c++">typedef struct VkExportSemaphoreCreateInfo {
    VkStructureType                       sType;
    const void*                           pNext;
    VkExternalSemaphoreHandleTypeFlags    handleTypes;
} VkExportSemaphoreCreateInfo;</code></pre>
</div>
</div>
<div class="paragraph">
<p>or the equivalent</p>
</div>
<div id="VkExportSemaphoreCreateInfoKHR" class="listingblock">
<div class="content">
<pre class="highlight"><code class="language-c++" data-lang="c++">typedef VkExportSemaphoreCreateInfo VkExportSemaphoreCreateInfoKHR;</code></pre>
</div>
</div>
</div>
<div class="sect3">
<h4 id="_members_128">Members</h4>
<div class="ulist">
<ul>
<li>
<p><code>sType</code> is the type of this structure.</p>
</li>
<li>
<p><code>pNext</code> is <code>NULL</code> or a pointer to an extension-specific structure.</p>
</li>
<li>
<p><code>handleTypes</code> is a bitmask of
<a href="#VkExternalSemaphoreHandleTypeFlagBits">VkExternalSemaphoreHandleTypeFlagBits</a> specifying one or more
semaphore handle types the application <strong class="purple">can</strong> export from the resulting
semaphore.
The application <strong class="purple">can</strong> request multiple handle types for the same
semaphore.</p>
</li>
</ul>
</div>
</div>
<div class="sect3">
<h4 id="_description_491">Description</h4>
<div class="sidebarblock">
<div class="content">
<div class="title">Valid Usage</div>
<div class="ulist">
<ul>
<li>
<p><a id="VUID-VkExportSemaphoreCreateInfo-handleTypes-01124"></a>
The bits in <code>handleTypes</code> <strong class="purple">must</strong> be supported and compatible, as
reported by <a href="#VkExternalSemaphoreProperties">VkExternalSemaphoreProperties</a>.</p>
</li>
</ul>
</div>
</div>
</div>
<div class="sidebarblock">
<div class="content">
<div class="title">Valid Usage (Implicit)</div>
<div class="ulist">
<ul>
<li>
<p><a id="VUID-VkExportSemaphoreCreateInfo-sType-sType"></a> <code>sType</code> <strong class="purple">must</strong> be <code>VK_STRUCTURE_TYPE_EXPORT_SEMAPHORE_CREATE_INFO</code></p>
</li>
<li>
<p><a id="VUID-VkExportSemaphoreCreateInfo-handleTypes-parameter"></a> <code>handleTypes</code> <strong class="purple">must</strong> be a valid combination of <a href="#VkExternalSemaphoreHandleTypeFlagBits">VkExternalSemaphoreHandleTypeFlagBits</a> values</p>
</li>
</ul>
</div>
</div>
</div>
</div>
<div class="sect3">
<h4 id="_see_also_491">See Also</h4>
<div class="paragraph">
<p><a href="#VkExternalSemaphoreHandleTypeFlags">VkExternalSemaphoreHandleTypeFlags</a>, <a href="#VkStructureType">VkStructureType</a></p>
</div>
</div>
<div class="sect3">
<h4 id="_document_notes_491">Document Notes</h4>
<div class="paragraph">
<p>For more information, see the Vulkan Specification at URL</p>
</div>
<div class="paragraph">
<p><a href="https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VkExportSemaphoreCreateInfo" class="bare">https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VkExportSemaphoreCreateInfo</a></p>
</div>
<div class="paragraph">
<p>This page is extracted from the Vulkan Specification.
Fixes and changes should be made to the Specification, not directly.</p>
</div>
<div style="page-break-after: always;"></div>
</div>
</div>
<div class="sect2">
<h3 id="_vkexportsemaphorewin32handleinfokhr3">VkExportSemaphoreWin32HandleInfoKHR(3)</h3>
<div class="sect3">
<h4 id="_name_492">Name</h4>
<div class="paragraph">
<p>VkExportSemaphoreWin32HandleInfoKHR - Structure specifying additional attributes of Windows handles exported from a semaphore</p>
</div>
</div>
<div class="sect3">
<h4 id="_c_specification_492">C Specification</h4>
<div class="paragraph">
<p>To specify additional attributes of NT handles exported from a semaphore,
add the <code>VkExportSemaphoreWin32HandleInfoKHR</code> structure to the
<code>pNext</code> chain of the <a href="#VkSemaphoreCreateInfo">VkSemaphoreCreateInfo</a> structure.
The <code>VkExportSemaphoreWin32HandleInfoKHR</code> structure is defined as:</p>
</div>
<div id="VkExportSemaphoreWin32HandleInfoKHR" class="listingblock">
<div class="content">
<pre class="highlight"><code class="language-c++" data-lang="c++">typedef struct VkExportSemaphoreWin32HandleInfoKHR {
    VkStructureType               sType;
    const void*                   pNext;
    const SECURITY_ATTRIBUTES*    pAttributes;
    DWORD                         dwAccess;
    LPCWSTR                       name;
} VkExportSemaphoreWin32HandleInfoKHR;</code></pre>
</div>
</div>
</div>
<div class="sect3">
<h4 id="_members_129">Members</h4>
<div class="ulist">
<ul>
<li>
<p><code>sType</code> is the type of this structure.</p>
</li>
<li>
<p><code>pNext</code> is <code>NULL</code> or a pointer to an extension-specific structure.</p>
</li>
<li>
<p><code>pAttributes</code> is a pointer to a Windows <code>SECURITY_ATTRIBUTES</code>
structure specifying security attributes of the handle.</p>
</li>
<li>
<p><code>dwAccess</code> is a <code>DWORD</code> specifying access rights of the handle.</p>
</li>
<li>
<p><code>name</code> is a NULL-terminated UTF-16 string to associate with the
underlying synchronization primitive referenced by NT handles exported
from the created semaphore.</p>
</li>
</ul>
</div>
</div>
<div class="sect3">
<h4 id="_description_492">Description</h4>
<div class="paragraph">
<p>If this structure is not present, or if <code>pAttributes</code> is set to <code>NULL</code>,
default security descriptor values will be used, and child processes created
by the application will not inherit the handle, as described in the MSDN
documentation for &#8220;Synchronization Object Security and Access Rights&#8221;<sup>1</sup>.
Further, if the structure is not present, the access rights will be</p>
</div>
<div class="paragraph">
<p><code>DXGI_SHARED_RESOURCE_READ</code> | <code>DXGI_SHARED_RESOURCE_WRITE</code></p>
</div>
<div class="paragraph">
<p>for handles of the following types:</p>
</div>
<div class="paragraph">
<p><code>VK_EXTERNAL_SEMAPHORE_HANDLE_TYPE_OPAQUE_WIN32_BIT</code></p>
</div>
<div class="paragraph">
<p>And</p>
</div>
<div class="paragraph">
<p><code>GENERIC_ALL</code></p>
</div>
<div class="paragraph">
<p>for handles of the following types:</p>
</div>
<div class="paragraph">
<p><code>VK_EXTERNAL_SEMAPHORE_HANDLE_TYPE_D3D12_FENCE_BIT</code></p>
</div>
<div class="dlist">
<dl>
<dt class="hdlist1">1</dt>
<dd>
<p><a href="https://msdn.microsoft.com/en-us/library/windows/desktop/ms686670.aspx" class="bare">https://msdn.microsoft.com/en-us/library/windows/desktop/ms686670.aspx</a></p>
</dd>
</dl>
</div>
<div class="sidebarblock">
<div class="content">
<div class="title">Valid Usage</div>
<div class="ulist">
<ul>
<li>
<p><a id="VUID-VkExportSemaphoreWin32HandleInfoKHR-handleTypes-01125"></a>
If <a href="#VkExportSemaphoreCreateInfo">VkExportSemaphoreCreateInfo</a>::<code>handleTypes</code> does not include
<code>VK_EXTERNAL_SEMAPHORE_HANDLE_TYPE_OPAQUE_WIN32_BIT</code> or
<code>VK_EXTERNAL_SEMAPHORE_HANDLE_TYPE_D3D12_FENCE_BIT</code>,
<code>VkExportSemaphoreWin32HandleInfoKHR</code> <strong class="purple">must</strong> not be in the
<code>pNext</code> chain of <a href="#VkSemaphoreCreateInfo">VkSemaphoreCreateInfo</a>.</p>
</li>
</ul>
</div>
</div>
</div>
<div class="sidebarblock">
<div class="content">
<div class="title">Valid Usage (Implicit)</div>
<div class="ulist">
<ul>
<li>
<p><a id="VUID-VkExportSemaphoreWin32HandleInfoKHR-sType-sType"></a> <code>sType</code> <strong class="purple">must</strong> be <code>VK_STRUCTURE_TYPE_EXPORT_SEMAPHORE_WIN32_HANDLE_INFO_KHR</code></p>
</li>
<li>
<p><a id="VUID-VkExportSemaphoreWin32HandleInfoKHR-pAttributes-parameter"></a> If <code>pAttributes</code> is not <code>NULL</code>, <code>pAttributes</code> <strong class="purple">must</strong> be a valid pointer to a valid <code>SECURITY_ATTRIBUTES</code> value</p>
</li>
</ul>
</div>
</div>
</div>
</div>
<div class="sect3">
<h4 id="_see_also_492">See Also</h4>
<div class="paragraph">
<p><a href="#VkStructureType">VkStructureType</a></p>
</div>
</div>
<div class="sect3">
<h4 id="_document_notes_492">Document Notes</h4>
<div class="paragraph">
<p>For more information, see the Vulkan Specification at URL</p>
</div>
<div class="paragraph">
<p><a href="https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VkExportSemaphoreWin32HandleInfoKHR" class="bare">https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VkExportSemaphoreWin32HandleInfoKHR</a></p>
</div>
<div class="paragraph">
<p>This page is extracted from the Vulkan Specification.
Fixes and changes should be made to the Specification, not directly.</p>
</div>
<div style="page-break-after: always;"></div>
</div>
</div>
<div class="sect2">
<h3 id="_vkextensionproperties3">VkExtensionProperties(3)</h3>
<div class="sect3">
<h4 id="_name_493">Name</h4>
<div class="paragraph">
<p>VkExtensionProperties - Structure specifying an extension properties</p>
</div>
</div>
<div class="sect3">
<h4 id="_c_specification_493">C Specification</h4>
<div class="paragraph">
<p>The <code>VkExtensionProperties</code> structure is defined as:</p>
</div>
<div id="VkExtensionProperties" class="listingblock">
<div class="content">
<pre class="highlight"><code class="language-c++" data-lang="c++">typedef struct VkExtensionProperties {
    char        extensionName[VK_MAX_EXTENSION_NAME_SIZE];
    uint32_t    specVersion;
} VkExtensionProperties;</code></pre>
</div>
</div>
</div>
<div class="sect3">
<h4 id="_members_130">Members</h4>
<div class="ulist">
<ul>
<li>
<p><code>extensionName</code> is a null-terminated string specifying the name of
the extension.</p>
</li>
<li>
<p><code>specVersion</code> is the version of this extension.
It is an integer, incremented with backward compatible changes.</p>
</li>
</ul>
</div>
</div>
<div class="sect3">
<h4 id="_description_493">Description</h4>

</div>
<div class="sect3">
<h4 id="_see_also_493">See Also</h4>
<div class="paragraph">
<p><a href="#vkEnumerateDeviceExtensionProperties">vkEnumerateDeviceExtensionProperties</a>, <a href="#vkEnumerateInstanceExtensionProperties">vkEnumerateInstanceExtensionProperties</a></p>
</div>
</div>
<div class="sect3">
<h4 id="_document_notes_493">Document Notes</h4>
<div class="paragraph">
<p>For more information, see the Vulkan Specification at URL</p>
</div>
<div class="paragraph">
<p><a href="https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VkExtensionProperties" class="bare">https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VkExtensionProperties</a></p>
</div>
<div class="paragraph">
<p>This page is extracted from the Vulkan Specification.
Fixes and changes should be made to the Specification, not directly.</p>
</div>
<div style="page-break-after: always;"></div>
</div>
</div>
<div class="sect2">
<h3 id="_vkextent2d3">VkExtent2D(3)</h3>
<div class="sect3">
<h4 id="_name_494">Name</h4>
<div class="paragraph">
<p>VkExtent2D - Structure specifying a two-dimensional extent</p>
</div>
</div>
<div class="sect3">
<h4 id="_c_specification_494">C Specification</h4>
<div class="paragraph">
<p>A two-dimensional extent is defined by the structure:</p>
</div>
<div id="VkExtent2D" class="listingblock">
<div class="content">
<pre class="highlight"><code class="language-c++" data-lang="c++">typedef struct VkExtent2D {
    uint32_t    width;
    uint32_t    height;
} VkExtent2D;</code></pre>
</div>
</div>
</div>
<div class="sect3">
<h4 id="_members_131">Members</h4>
<div class="ulist">
<ul>
<li>
<p><code>width</code> is the width of the extent.</p>
</li>
<li>
<p><code>height</code> is the height of the extent.</p>
</li>
</ul>
</div>
</div>
<div class="sect3">
<h4 id="_description_494">Description</h4>

</div>
<div class="sect3">
<h4 id="_see_also_494">See Also</h4>
<div class="paragraph">
<p><a href="#VkDisplayModeParametersKHR">VkDisplayModeParametersKHR</a>, <a href="#VkDisplayPlaneCapabilitiesKHR">VkDisplayPlaneCapabilitiesKHR</a>, <a href="#VkDisplayPropertiesKHR">VkDisplayPropertiesKHR</a>, <a href="#VkDisplaySurfaceCreateInfoKHR">VkDisplaySurfaceCreateInfoKHR</a>, <a href="#VkMultisamplePropertiesEXT">VkMultisamplePropertiesEXT</a>, <a href="#VkPhysicalDeviceFragmentDensityMapPropertiesEXT">VkPhysicalDeviceFragmentDensityMapPropertiesEXT</a>, <a href="#VkPhysicalDeviceSampleLocationsPropertiesEXT">VkPhysicalDeviceSampleLocationsPropertiesEXT</a>, <a href="#VkPhysicalDeviceShadingRateImagePropertiesNV">VkPhysicalDeviceShadingRateImagePropertiesNV</a>, <a href="#VkRect2D">VkRect2D</a>, <a href="#VkRectLayerKHR">VkRectLayerKHR</a>, <a href="#VkSampleLocationsInfoEXT">VkSampleLocationsInfoEXT</a>, <a href="#VkSurfaceCapabilities2EXT">VkSurfaceCapabilities2EXT</a>, <a href="#VkSurfaceCapabilitiesKHR">VkSurfaceCapabilitiesKHR</a>, <a href="#VkSwapchainCreateInfoKHR">VkSwapchainCreateInfoKHR</a>, <a href="#vkGetRenderAreaGranularity">vkGetRenderAreaGranularity</a></p>
</div>
</div>
<div class="sect3">
<h4 id="_document_notes_494">Document Notes</h4>
<div class="paragraph">
<p>For more information, see the Vulkan Specification at URL</p>
</div>
<div class="paragraph">
<p><a href="https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VkExtent2D" class="bare">https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VkExtent2D</a></p>
</div>
<div class="paragraph">
<p>This page is extracted from the Vulkan Specification.
Fixes and changes should be made to the Specification, not directly.</p>
</div>
<div style="page-break-after: always;"></div>
</div>
</div>
<div class="sect2">
<h3 id="_vkextent3d3">VkExtent3D(3)</h3>
<div class="sect3">
<h4 id="_name_495">Name</h4>
<div class="paragraph">
<p>VkExtent3D - Structure specifying a three-dimensional extent</p>
</div>
</div>
<div class="sect3">
<h4 id="_c_specification_495">C Specification</h4>
<div class="paragraph">
<p>A three-dimensional extent is defined by the structure:</p>
</div>
<div id="VkExtent3D" class="listingblock">
<div class="content">
<pre class="highlight"><code class="language-c++" data-lang="c++">typedef struct VkExtent3D {
    uint32_t    width;
    uint32_t    height;
    uint32_t    depth;
} VkExtent3D;</code></pre>
</div>
</div>
</div>
<div class="sect3">
<h4 id="_members_132">Members</h4>
<div class="ulist">
<ul>
<li>
<p><code>width</code> is the width of the extent.</p>
</li>
<li>
<p><code>height</code> is the height of the extent.</p>
</li>
<li>
<p><code>depth</code> is the depth of the extent.</p>
</li>
</ul>
</div>
</div>
<div class="sect3">
<h4 id="_description_495">Description</h4>

</div>
<div class="sect3">
<h4 id="_see_also_495">See Also</h4>
<div class="paragraph">
<p><a href="#VkBufferImageCopy">VkBufferImageCopy</a>, <a href="#VkImageCopy">VkImageCopy</a>, <a href="#VkImageCreateInfo">VkImageCreateInfo</a>, <a href="#VkImageFormatProperties">VkImageFormatProperties</a>, <a href="#VkImageResolve">VkImageResolve</a>, <a href="#VkQueueFamilyProperties">VkQueueFamilyProperties</a>, <a href="#VkSparseImageFormatProperties">VkSparseImageFormatProperties</a>, <a href="#VkSparseImageMemoryBind">VkSparseImageMemoryBind</a></p>
</div>
</div>
<div class="sect3">
<h4 id="_document_notes_495">Document Notes</h4>
<div class="paragraph">
<p>For more information, see the Vulkan Specification at URL</p>
</div>
<div class="paragraph">
<p><a href="https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VkExtent3D" class="bare">https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VkExtent3D</a></p>
</div>
<div class="paragraph">
<p>This page is extracted from the Vulkan Specification.
Fixes and changes should be made to the Specification, not directly.</p>
</div>
<div style="page-break-after: always;"></div>
</div>
</div>
<div class="sect2">
<h3 id="_vkexternalbufferproperties3">VkExternalBufferProperties(3)</h3>
<div class="sect3">
<h4 id="_name_496">Name</h4>
<div class="paragraph">
<p>VkExternalBufferProperties - Structure specifying supported external handle capabilities</p>
</div>
</div>
<div class="sect3">
<h4 id="_c_specification_496">C Specification</h4>
<div class="paragraph">
<p>The <code>VkExternalBufferProperties</code> structure is defined as:</p>
</div>
<div id="VkExternalBufferProperties" class="listingblock">
<div class="content">
<pre class="highlight"><code class="language-c++" data-lang="c++">typedef struct VkExternalBufferProperties {
    VkStructureType               sType;
    void*                         pNext;
    VkExternalMemoryProperties    externalMemoryProperties;
} VkExternalBufferProperties;</code></pre>
</div>
</div>
<div class="paragraph">
<p>or the equivalent</p>
</div>
<div id="VkExternalBufferPropertiesKHR" class="listingblock">
<div class="content">
<pre class="highlight"><code class="language-c++" data-lang="c++">typedef VkExternalBufferProperties VkExternalBufferPropertiesKHR;</code></pre>
</div>
</div>
</div>
<div class="sect3">
<h4 id="_members_133">Members</h4>
<div class="ulist">
<ul>
<li>
<p><code>sType</code> is the type of this structure</p>
</li>
<li>
<p><code>pNext</code> is NULL or a pointer to an extension-specific structure.</p>
</li>
<li>
<p><code>externalMemoryProperties</code> is an instance of the
<a href="#VkExternalMemoryProperties">VkExternalMemoryProperties</a> structure specifying various
capabilities of the external handle type when used with the specified
buffer creation parameters.</p>
</li>
</ul>
</div>
</div>
<div class="sect3">
<h4 id="_description_496">Description</h4>
<div class="sidebarblock">
<div class="content">
<div class="title">Valid Usage (Implicit)</div>
<div class="ulist">
<ul>
<li>
<p><a id="VUID-VkExternalBufferProperties-sType-sType"></a> <code>sType</code> <strong class="purple">must</strong> be <code>VK_STRUCTURE_TYPE_EXTERNAL_BUFFER_PROPERTIES</code></p>
</li>
<li>
<p><a id="VUID-VkExternalBufferProperties-pNext-pNext"></a> <code>pNext</code> <strong class="purple">must</strong> be <code>NULL</code></p>
</li>
</ul>
</div>
</div>
</div>
</div>
<div class="sect3">
<h4 id="_see_also_496">See Also</h4>
<div class="paragraph">
<p><a href="#VkExternalMemoryProperties">VkExternalMemoryProperties</a>, <a href="#VkStructureType">VkStructureType</a>, <a href="#vkGetPhysicalDeviceExternalBufferProperties">vkGetPhysicalDeviceExternalBufferProperties</a>, <a href="#vkGetPhysicalDeviceExternalBufferPropertiesKHR">vkGetPhysicalDeviceExternalBufferPropertiesKHR</a></p>
</div>
</div>
<div class="sect3">
<h4 id="_document_notes_496">Document Notes</h4>
<div class="paragraph">
<p>For more information, see the Vulkan Specification at URL</p>
</div>
<div class="paragraph">
<p><a href="https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VkExternalBufferProperties" class="bare">https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VkExternalBufferProperties</a></p>
</div>
<div class="paragraph">
<p>This page is extracted from the Vulkan Specification.
Fixes and changes should be made to the Specification, not directly.</p>
</div>
<div style="page-break-after: always;"></div>
</div>
</div>
<div class="sect2">
<h3 id="_vkexternalfenceproperties3">VkExternalFenceProperties(3)</h3>
<div class="sect3">
<h4 id="_name_497">Name</h4>
<div class="paragraph">
<p>VkExternalFenceProperties - Structure describing supported external fence handle features</p>
</div>
</div>
<div class="sect3">
<h4 id="_c_specification_497">C Specification</h4>
<div class="paragraph">
<p>The <code>VkExternalFenceProperties</code> structure is defined as:</p>
</div>
<div id="VkExternalFenceProperties" class="listingblock">
<div class="content">
<pre class="highlight"><code class="language-c++" data-lang="c++">typedef struct VkExternalFenceProperties {
    VkStructureType                   sType;
    void*                             pNext;
    VkExternalFenceHandleTypeFlags    exportFromImportedHandleTypes;
    VkExternalFenceHandleTypeFlags    compatibleHandleTypes;
    VkExternalFenceFeatureFlags       externalFenceFeatures;
} VkExternalFenceProperties;</code></pre>
</div>
</div>
<div class="paragraph">
<p>or the equivalent</p>
</div>
<div id="VkExternalFencePropertiesKHR" class="listingblock">
<div class="content">
<pre class="highlight"><code class="language-c++" data-lang="c++">typedef VkExternalFenceProperties VkExternalFencePropertiesKHR;</code></pre>
</div>
</div>
</div>
<div class="sect3">
<h4 id="_members_134">Members</h4>
<div class="ulist">
<ul>
<li>
<p><code>exportFromImportedHandleTypes</code> is a bitmask of
<a href="#VkExternalFenceHandleTypeFlagBits">VkExternalFenceHandleTypeFlagBits</a> indicating which types of
imported handle <code>handleType</code> <strong class="purple">can</strong> be exported from.</p>
</li>
<li>
<p><code>compatibleHandleTypes</code> is a bitmask of
<a href="#VkExternalFenceHandleTypeFlagBits">VkExternalFenceHandleTypeFlagBits</a> specifying handle types which
<strong class="purple">can</strong> be specified at the same time as <code>handleType</code> when creating a
fence.</p>
</li>
<li>
<p><code>externalFenceFeatures</code> is a bitmask of
<a href="#VkExternalFenceFeatureFlagBits">VkExternalFenceFeatureFlagBits</a> indicating the features of
<code>handleType</code>.</p>
</li>
</ul>
</div>
</div>
<div class="sect3">
<h4 id="_description_497">Description</h4>
<div class="paragraph">
<p>If <code>handleType</code> is not supported by the implementation, then
<a href="#VkExternalFenceProperties">VkExternalFenceProperties</a>::<code>externalFenceFeatures</code> will be set to
zero.</p>
</div>
<div class="sidebarblock">
<div class="content">
<div class="title">Valid Usage (Implicit)</div>
<div class="ulist">
<ul>
<li>
<p><a id="VUID-VkExternalFenceProperties-sType-sType"></a> <code>sType</code> <strong class="purple">must</strong> be <code>VK_STRUCTURE_TYPE_EXTERNAL_FENCE_PROPERTIES</code></p>
</li>
<li>
<p><a id="VUID-VkExternalFenceProperties-pNext-pNext"></a> <code>pNext</code> <strong class="purple">must</strong> be <code>NULL</code></p>
</li>
</ul>
</div>
</div>
</div>
</div>
<div class="sect3">
<h4 id="_see_also_497">See Also</h4>
<div class="paragraph">
<p><a href="#VkExternalFenceFeatureFlags">VkExternalFenceFeatureFlags</a>, <a href="#VkExternalFenceHandleTypeFlags">VkExternalFenceHandleTypeFlags</a>, <a href="#VkStructureType">VkStructureType</a>, <a href="#vkGetPhysicalDeviceExternalFenceProperties">vkGetPhysicalDeviceExternalFenceProperties</a>, <a href="#vkGetPhysicalDeviceExternalFencePropertiesKHR">vkGetPhysicalDeviceExternalFencePropertiesKHR</a></p>
</div>
</div>
<div class="sect3">
<h4 id="_document_notes_497">Document Notes</h4>
<div class="paragraph">
<p>For more information, see the Vulkan Specification at URL</p>
</div>
<div class="paragraph">
<p><a href="https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VkExternalFenceProperties" class="bare">https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VkExternalFenceProperties</a></p>
</div>
<div class="paragraph">
<p>This page is extracted from the Vulkan Specification.
Fixes and changes should be made to the Specification, not directly.</p>
</div>
<div style="page-break-after: always;"></div>
</div>
</div>
<div class="sect2">
<h3 id="_vkexternalformatandroid3">VkExternalFormatANDROID(3)</h3>
<div class="sect3">
<h4 id="_name_498">Name</h4>
<div class="paragraph">
<p>VkExternalFormatANDROID - Structure containing an Android hardware buffer external format</p>
</div>
</div>
<div class="sect3">
<h4 id="_c_specification_498">C Specification</h4>
<div class="paragraph">
<p>To create an image with an
<a href="vkspec.html#memory-external-android-hardware-buffer-external-formats">external
format</a>, include an instance of <code>VkExternalFormatANDROID</code> in the
<code>pNext</code> chain of <a href="#VkImageCreateInfo">VkImageCreateInfo</a>.
<code>VkExternalFormatANDROID</code> is defined as:</p>
</div>
<div id="VkExternalFormatANDROID" class="listingblock">
<div class="content">
<pre class="highlight"><code class="language-c++" data-lang="c++">typedef struct VkExternalFormatANDROID {
    VkStructureType    sType;
    void*              pNext;
    uint64_t           externalFormat;
} VkExternalFormatANDROID;</code></pre>
</div>
</div>
</div>
<div class="sect3">
<h4 id="_members_135">Members</h4>
<div class="ulist">
<ul>
<li>
<p><code>sType</code> is the type of this structure.</p>
</li>
<li>
<p><code>pNext</code> is <code>NULL</code> or a pointer to an extension-specific structure.</p>
</li>
<li>
<p><code>externalFormat</code> is an implementation-defined identifier for the
external format</p>
</li>
</ul>
</div>
</div>
<div class="sect3">
<h4 id="_description_498">Description</h4>
<div class="paragraph">
<p>If <code>externalFormat</code> is zero, the effect is as if the
<code>VkExternalFormatANDROID</code> structure was not present.
Otherwise, the <code>image</code> will have the specified external format.</p>
</div>
<div class="sidebarblock">
<div class="content">
<div class="title">Valid Usage</div>
<div class="ulist">
<ul>
<li>
<p><a id="VUID-VkExternalFormatANDROID-externalFormat-01894"></a>
<code>externalFormat</code> <strong class="purple">must</strong> be <code>0</code> or a value returned in the
<code>externalFormat</code> member of
<a href="#VkAndroidHardwareBufferFormatPropertiesANDROID">VkAndroidHardwareBufferFormatPropertiesANDROID</a> by an earlier call
to <a href="#vkGetAndroidHardwareBufferPropertiesANDROID">vkGetAndroidHardwareBufferPropertiesANDROID</a></p>
</li>
</ul>
</div>
</div>
</div>
<div class="sidebarblock">
<div class="content">
<div class="title">Valid Usage (Implicit)</div>
<div class="ulist">
<ul>
<li>
<p><a id="VUID-VkExternalFormatANDROID-sType-sType"></a> <code>sType</code> <strong class="purple">must</strong> be <code>VK_STRUCTURE_TYPE_EXTERNAL_FORMAT_ANDROID</code></p>
</li>
</ul>
</div>
</div>
</div>
</div>
<div class="sect3">
<h4 id="_see_also_498">See Also</h4>
<div class="paragraph">
<p><a href="#VkStructureType">VkStructureType</a></p>
</div>
</div>
<div class="sect3">
<h4 id="_document_notes_498">Document Notes</h4>
<div class="paragraph">
<p>For more information, see the Vulkan Specification at URL</p>
</div>
<div class="paragraph">
<p><a href="https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VkExternalFormatANDROID" class="bare">https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VkExternalFormatANDROID</a></p>
</div>
<div class="paragraph">
<p>This page is extracted from the Vulkan Specification.
Fixes and changes should be made to the Specification, not directly.</p>
</div>
<div style="page-break-after: always;"></div>
</div>
</div>
<div class="sect2">
<h3 id="_vkexternalimageformatproperties3">VkExternalImageFormatProperties(3)</h3>
<div class="sect3">
<h4 id="_name_499">Name</h4>
<div class="paragraph">
<p>VkExternalImageFormatProperties - Structure specifying supported external handle properties</p>
</div>
</div>
<div class="sect3">
<h4 id="_c_specification_499">C Specification</h4>
<div class="paragraph">
<p>The <code>VkExternalImageFormatProperties</code> structure is defined as:</p>
</div>
<div id="VkExternalImageFormatProperties" class="listingblock">
<div class="content">
<pre class="highlight"><code class="language-c++" data-lang="c++">typedef struct VkExternalImageFormatProperties {
    VkStructureType               sType;
    void*                         pNext;
    VkExternalMemoryProperties    externalMemoryProperties;
} VkExternalImageFormatProperties;</code></pre>
</div>
</div>
<div class="paragraph">
<p>or the equivalent</p>
</div>
<div id="VkExternalImageFormatPropertiesKHR" class="listingblock">
<div class="content">
<pre class="highlight"><code class="language-c++" data-lang="c++">typedef VkExternalImageFormatProperties VkExternalImageFormatPropertiesKHR;</code></pre>
</div>
</div>
</div>
<div class="sect3">
<h4 id="_members_136">Members</h4>
<div class="ulist">
<ul>
<li>
<p><code>sType</code> is the type of this structure.</p>
</li>
<li>
<p><code>pNext</code> is <code>NULL</code> or a pointer to an extension-specific structure.</p>
</li>
<li>
<p><code>externalMemoryProperties</code> is an instance of the
<a href="#VkExternalMemoryProperties">VkExternalMemoryProperties</a> structure specifying various
capabilities of the external handle type when used with the specified
image creation parameters.</p>
</li>
</ul>
</div>
</div>
<div class="sect3">
<h4 id="_description_499">Description</h4>
<div class="sidebarblock">
<div class="content">
<div class="title">Valid Usage (Implicit)</div>
<div class="ulist">
<ul>
<li>
<p><a id="VUID-VkExternalImageFormatProperties-sType-sType"></a> <code>sType</code> <strong class="purple">must</strong> be <code>VK_STRUCTURE_TYPE_EXTERNAL_IMAGE_FORMAT_PROPERTIES</code></p>
</li>
</ul>
</div>
</div>
</div>
</div>
<div class="sect3">
<h4 id="_see_also_499">See Also</h4>
<div class="paragraph">
<p><a href="#VkExternalMemoryProperties">VkExternalMemoryProperties</a>, <a href="#VkStructureType">VkStructureType</a></p>
</div>
</div>
<div class="sect3">
<h4 id="_document_notes_499">Document Notes</h4>
<div class="paragraph">
<p>For more information, see the Vulkan Specification at URL</p>
</div>
<div class="paragraph">
<p><a href="https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VkExternalImageFormatProperties" class="bare">https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VkExternalImageFormatProperties</a></p>
</div>
<div class="paragraph">
<p>This page is extracted from the Vulkan Specification.
Fixes and changes should be made to the Specification, not directly.</p>
</div>
<div style="page-break-after: always;"></div>
</div>
</div>
<div class="sect2">
<h3 id="_vkexternalimageformatpropertiesnv3">VkExternalImageFormatPropertiesNV(3)</h3>
<div class="sect3">
<h4 id="_name_500">Name</h4>
<div class="paragraph">
<p>VkExternalImageFormatPropertiesNV - Structure specifying external image format properties</p>
</div>
</div>
<div class="sect3">
<h4 id="_c_specification_500">C Specification</h4>
<div class="paragraph">
<p>The <code>VkExternalImageFormatPropertiesNV</code> structure is defined as:</p>
</div>
<div id="VkExternalImageFormatPropertiesNV" class="listingblock">
<div class="content">
<pre class="highlight"><code class="language-c++" data-lang="c++">typedef struct VkExternalImageFormatPropertiesNV {
    VkImageFormatProperties              imageFormatProperties;
    VkExternalMemoryFeatureFlagsNV       externalMemoryFeatures;
    VkExternalMemoryHandleTypeFlagsNV    exportFromImportedHandleTypes;
    VkExternalMemoryHandleTypeFlagsNV    compatibleHandleTypes;
} VkExternalImageFormatPropertiesNV;</code></pre>
</div>
</div>
</div>
<div class="sect3">
<h4 id="_members_137">Members</h4>
<div class="ulist">
<ul>
<li>
<p><code>imageFormatProperties</code> will be filled in as when calling
<a href="#vkGetPhysicalDeviceImageFormatProperties">vkGetPhysicalDeviceImageFormatProperties</a>, but the values returned
<strong class="purple">may</strong> vary depending on the external handle type requested.</p>
</li>
<li>
<p><code>externalMemoryFeatures</code> is a bitmask of
<a href="#VkExternalMemoryFeatureFlagBitsNV">VkExternalMemoryFeatureFlagBitsNV</a>, indicating properties of the
external memory handle type
(<a href="#vkGetPhysicalDeviceExternalImageFormatPropertiesNV">vkGetPhysicalDeviceExternalImageFormatPropertiesNV</a>::<code>externalHandleType</code>)
being queried, or 0 if the external memory handle type is 0.</p>
</li>
<li>
<p><code>exportFromImportedHandleTypes</code> is a bitmask of
<a href="#VkExternalMemoryHandleTypeFlagBitsNV">VkExternalMemoryHandleTypeFlagBitsNV</a> containing a bit set for
every external handle type that <strong class="purple">may</strong> be used to create memory from which
the handles of the type specified in
<a href="#vkGetPhysicalDeviceExternalImageFormatPropertiesNV">vkGetPhysicalDeviceExternalImageFormatPropertiesNV</a>::<code>externalHandleType</code>
<strong class="purple">can</strong> be exported, or 0 if the external memory handle type is 0.</p>
</li>
<li>
<p><code>compatibleHandleTypes</code> is a bitmask of
<a href="#VkExternalMemoryHandleTypeFlagBitsNV">VkExternalMemoryHandleTypeFlagBitsNV</a> containing a bit set for
every external handle type that <strong class="purple">may</strong> be specified simultaneously with
the handle type specified by
<a href="#vkGetPhysicalDeviceExternalImageFormatPropertiesNV">vkGetPhysicalDeviceExternalImageFormatPropertiesNV</a>::<code>externalHandleType</code>
when calling <a href="#vkAllocateMemory">vkAllocateMemory</a>, or 0 if the external memory handle
type is 0.
<code>compatibleHandleTypes</code> will always contain
<a href="#vkGetPhysicalDeviceExternalImageFormatPropertiesNV">vkGetPhysicalDeviceExternalImageFormatPropertiesNV</a>::<code>externalHandleType</code></p>
</li>
</ul>
</div>
</div>
<div class="sect3">
<h4 id="_description_500">Description</h4>

</div>
<div class="sect3">
<h4 id="_see_also_500">See Also</h4>
<div class="paragraph">
<p><a href="#VkExternalMemoryFeatureFlagsNV">VkExternalMemoryFeatureFlagsNV</a>, <a href="#VkExternalMemoryHandleTypeFlagsNV">VkExternalMemoryHandleTypeFlagsNV</a>, <a href="#VkImageFormatProperties">VkImageFormatProperties</a>, <a href="#vkGetPhysicalDeviceExternalImageFormatPropertiesNV">vkGetPhysicalDeviceExternalImageFormatPropertiesNV</a></p>
</div>
</div>
<div class="sect3">
<h4 id="_document_notes_500">Document Notes</h4>
<div class="paragraph">
<p>For more information, see the Vulkan Specification at URL</p>
</div>
<div class="paragraph">
<p><a href="https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VkExternalImageFormatPropertiesNV" class="bare">https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VkExternalImageFormatPropertiesNV</a></p>
</div>
<div class="paragraph">
<p>This page is extracted from the Vulkan Specification.
Fixes and changes should be made to the Specification, not directly.</p>
</div>
<div style="page-break-after: always;"></div>
</div>
</div>
<div class="sect2">
<h3 id="_vkexternalmemorybuffercreateinfo3">VkExternalMemoryBufferCreateInfo(3)</h3>
<div class="sect3">
<h4 id="_name_501">Name</h4>
<div class="paragraph">
<p>VkExternalMemoryBufferCreateInfo - Specify that a buffer may be backed by external memory</p>
</div>
</div>
<div class="sect3">
<h4 id="_c_specification_501">C Specification</h4>
<div class="paragraph">
<p>To define a set of external memory handle types that <strong class="purple">may</strong> be used as backing
store for a buffer, add a <a href="#VkExternalMemoryBufferCreateInfo">VkExternalMemoryBufferCreateInfo</a> structure
to the <code>pNext</code> chain of the <a href="#VkBufferCreateInfo">VkBufferCreateInfo</a> structure.
The <code>VkExternalMemoryBufferCreateInfo</code> structure is defined as:</p>
</div>
<div id="VkExternalMemoryBufferCreateInfo" class="listingblock">
<div class="content">
<pre class="highlight"><code class="language-c++" data-lang="c++">typedef struct VkExternalMemoryBufferCreateInfo {
    VkStructureType                    sType;
    const void*                        pNext;
    VkExternalMemoryHandleTypeFlags    handleTypes;
} VkExternalMemoryBufferCreateInfo;</code></pre>
</div>
</div>
<div class="paragraph">
<p>or the equivalent</p>
</div>
<div id="VkExternalMemoryBufferCreateInfoKHR" class="listingblock">
<div class="content">
<pre class="highlight"><code class="language-c++" data-lang="c++">typedef VkExternalMemoryBufferCreateInfo VkExternalMemoryBufferCreateInfoKHR;</code></pre>
</div>
</div>
</div>
<div class="sect3">
<h4 id="_members_138">Members</h4>
<div class="ulist">
<ul>
<li>
<p><code>sType</code> is the type of this structure.</p>
</li>
<li>
<p><code>pNext</code> is <code>NULL</code> or a pointer to an extension-specific structure.</p>
</li>
<li>
<p><code>handleTypes</code> is a bitmask of
<a href="#VkExternalMemoryHandleTypeFlagBits">VkExternalMemoryHandleTypeFlagBits</a> specifying one or more external
memory handle types.</p>
</li>
</ul>
</div>
</div>
<div class="sect3">
<h4 id="_description_501">Description</h4>
<div class="sidebarblock">
<div class="content">
<div class="title">Valid Usage (Implicit)</div>
<div class="ulist">
<ul>
<li>
<p><a id="VUID-VkExternalMemoryBufferCreateInfo-sType-sType"></a> <code>sType</code> <strong class="purple">must</strong> be <code>VK_STRUCTURE_TYPE_EXTERNAL_MEMORY_BUFFER_CREATE_INFO</code></p>
</li>
<li>
<p><a id="VUID-VkExternalMemoryBufferCreateInfo-handleTypes-parameter"></a> <code>handleTypes</code> <strong class="purple">must</strong> be a valid combination of <a href="#VkExternalMemoryHandleTypeFlagBits">VkExternalMemoryHandleTypeFlagBits</a> values</p>
</li>
</ul>
</div>
</div>
</div>
</div>
<div class="sect3">
<h4 id="_see_also_501">See Also</h4>
<div class="paragraph">
<p><a href="#VkExternalMemoryHandleTypeFlags">VkExternalMemoryHandleTypeFlags</a>, <a href="#VkStructureType">VkStructureType</a></p>
</div>
</div>
<div class="sect3">
<h4 id="_document_notes_501">Document Notes</h4>
<div class="paragraph">
<p>For more information, see the Vulkan Specification at URL</p>
</div>
<div class="paragraph">
<p><a href="https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VkExternalMemoryBufferCreateInfo" class="bare">https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VkExternalMemoryBufferCreateInfo</a></p>
</div>
<div class="paragraph">
<p>This page is extracted from the Vulkan Specification.
Fixes and changes should be made to the Specification, not directly.</p>
</div>
<div style="page-break-after: always;"></div>
</div>
</div>
<div class="sect2">
<h3 id="_vkexternalmemoryimagecreateinfo3">VkExternalMemoryImageCreateInfo(3)</h3>
<div class="sect3">
<h4 id="_name_502">Name</h4>
<div class="paragraph">
<p>VkExternalMemoryImageCreateInfo - Specify that an image may be backed by external memory</p>
</div>
</div>
<div class="sect3">
<h4 id="_c_specification_502">C Specification</h4>
<div class="paragraph">
<p>To define a set of external memory handle types that <strong class="purple">may</strong> be used as backing
store for an image, add a <a href="#VkExternalMemoryImageCreateInfo">VkExternalMemoryImageCreateInfo</a> structure to
the <code>pNext</code> chain of the <a href="#VkImageCreateInfo">VkImageCreateInfo</a> structure.
The <code>VkExternalMemoryImageCreateInfo</code> structure is defined as:</p>
</div>
<div id="VkExternalMemoryImageCreateInfo" class="listingblock">
<div class="content">
<pre class="highlight"><code class="language-c++" data-lang="c++">typedef struct VkExternalMemoryImageCreateInfo {
    VkStructureType                    sType;
    const void*                        pNext;
    VkExternalMemoryHandleTypeFlags    handleTypes;
} VkExternalMemoryImageCreateInfo;</code></pre>
</div>
</div>
<div class="paragraph">
<p>or the equivalent</p>
</div>
<div id="VkExternalMemoryImageCreateInfoKHR" class="listingblock">
<div class="content">
<pre class="highlight"><code class="language-c++" data-lang="c++">typedef VkExternalMemoryImageCreateInfo VkExternalMemoryImageCreateInfoKHR;</code></pre>
</div>
</div>
</div>
<div class="sect3">
<h4 id="_members_139">Members</h4>
<div class="ulist">
<ul>
<li>
<p><code>sType</code> is the type of this structure.</p>
</li>
<li>
<p><code>pNext</code> is <code>NULL</code> or a pointer to an extension-specific structure.</p>
</li>
<li>
<p><code>handleTypes</code> is a bitmask of
<a href="#VkExternalMemoryHandleTypeFlagBits">VkExternalMemoryHandleTypeFlagBits</a> specifying one or more external
memory handle types.</p>
</li>
</ul>
</div>
</div>
<div class="sect3">
<h4 id="_description_502">Description</h4>
<div class="sidebarblock">
<div class="content">
<div class="title">Valid Usage (Implicit)</div>
<div class="ulist">
<ul>
<li>
<p><a id="VUID-VkExternalMemoryImageCreateInfo-sType-sType"></a> <code>sType</code> <strong class="purple">must</strong> be <code>VK_STRUCTURE_TYPE_EXTERNAL_MEMORY_IMAGE_CREATE_INFO</code></p>
</li>
<li>
<p><a id="VUID-VkExternalMemoryImageCreateInfo-handleTypes-parameter"></a> <code>handleTypes</code> <strong class="purple">must</strong> be a valid combination of <a href="#VkExternalMemoryHandleTypeFlagBits">VkExternalMemoryHandleTypeFlagBits</a> values</p>
</li>
<li>
<p><a id="VUID-VkExternalMemoryImageCreateInfo-handleTypes-requiredbitmask"></a> <code>handleTypes</code> <strong class="purple">must</strong> not be <code>0</code></p>
</li>
</ul>
</div>
</div>
</div>
</div>
<div class="sect3">
<h4 id="_see_also_502">See Also</h4>
<div class="paragraph">
<p><a href="#VkExternalMemoryHandleTypeFlags">VkExternalMemoryHandleTypeFlags</a>, <a href="#VkStructureType">VkStructureType</a></p>
</div>
</div>
<div class="sect3">
<h4 id="_document_notes_502">Document Notes</h4>
<div class="paragraph">
<p>For more information, see the Vulkan Specification at URL</p>
</div>
<div class="paragraph">
<p><a href="https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VkExternalMemoryImageCreateInfo" class="bare">https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VkExternalMemoryImageCreateInfo</a></p>
</div>
<div class="paragraph">
<p>This page is extracted from the Vulkan Specification.
Fixes and changes should be made to the Specification, not directly.</p>
</div>
<div style="page-break-after: always;"></div>
</div>
</div>
<div class="sect2">
<h3 id="_vkexternalmemoryimagecreateinfonv3">VkExternalMemoryImageCreateInfoNV(3)</h3>
<div class="sect3">
<h4 id="_name_503">Name</h4>
<div class="paragraph">
<p>VkExternalMemoryImageCreateInfoNV - Specify that an image may be backed by external memory</p>
</div>
</div>
<div class="sect3">
<h4 id="_c_specification_503">C Specification</h4>
<div class="paragraph">
<p>If the <code>pNext</code> chain includes a <code>VkExternalMemoryImageCreateInfoNV</code>
structure, then that structure defines a set of external memory handle types
that <strong class="purple">may</strong> be used as backing store for the image.</p>
</div>
<div class="paragraph">
<p>The <code>VkExternalMemoryImageCreateInfoNV</code> structure is defined as:</p>
</div>
<div id="VkExternalMemoryImageCreateInfoNV" class="listingblock">
<div class="content">
<pre class="highlight"><code class="language-c++" data-lang="c++">typedef struct VkExternalMemoryImageCreateInfoNV {
    VkStructureType                      sType;
    const void*                          pNext;
    VkExternalMemoryHandleTypeFlagsNV    handleTypes;
} VkExternalMemoryImageCreateInfoNV;</code></pre>
</div>
</div>
</div>
<div class="sect3">
<h4 id="_members_140">Members</h4>
<div class="ulist">
<ul>
<li>
<p><code>sType</code> is the type of this structure.</p>
</li>
<li>
<p><code>pNext</code> is <code>NULL</code> or a pointer to an extension-specific structure.</p>
</li>
<li>
<p><code>handleTypes</code> is a bitmask of
<a href="#VkExternalMemoryHandleTypeFlagBitsNV">VkExternalMemoryHandleTypeFlagBitsNV</a> specifying one or more
external memory handle types.</p>
</li>
</ul>
</div>
</div>
<div class="sect3">
<h4 id="_description_503">Description</h4>
<div class="sidebarblock">
<div class="content">
<div class="title">Valid Usage (Implicit)</div>
<div class="ulist">
<ul>
<li>
<p><a id="VUID-VkExternalMemoryImageCreateInfoNV-sType-sType"></a> <code>sType</code> <strong class="purple">must</strong> be <code>VK_STRUCTURE_TYPE_EXTERNAL_MEMORY_IMAGE_CREATE_INFO_NV</code></p>
</li>
<li>
<p><a id="VUID-VkExternalMemoryImageCreateInfoNV-handleTypes-parameter"></a> <code>handleTypes</code> <strong class="purple">must</strong> be a valid combination of <a href="#VkExternalMemoryHandleTypeFlagBitsNV">VkExternalMemoryHandleTypeFlagBitsNV</a> values</p>
</li>
</ul>
</div>
</div>
</div>
</div>
<div class="sect3">
<h4 id="_see_also_503">See Also</h4>
<div class="paragraph">
<p><a href="#VkExternalMemoryHandleTypeFlagsNV">VkExternalMemoryHandleTypeFlagsNV</a>, <a href="#VkStructureType">VkStructureType</a></p>
</div>
</div>
<div class="sect3">
<h4 id="_document_notes_503">Document Notes</h4>
<div class="paragraph">
<p>For more information, see the Vulkan Specification at URL</p>
</div>
<div class="paragraph">
<p><a href="https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VkExternalMemoryImageCreateInfoNV" class="bare">https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VkExternalMemoryImageCreateInfoNV</a></p>
</div>
<div class="paragraph">
<p>This page is extracted from the Vulkan Specification.
Fixes and changes should be made to the Specification, not directly.</p>
</div>
<div style="page-break-after: always;"></div>
</div>
</div>
<div class="sect2">
<h3 id="_vkexternalmemoryproperties3">VkExternalMemoryProperties(3)</h3>
<div class="sect3">
<h4 id="_name_504">Name</h4>
<div class="paragraph">
<p>VkExternalMemoryProperties - Structure specifying external memory handle type capabilities</p>
</div>
</div>
<div class="sect3">
<h4 id="_c_specification_504">C Specification</h4>
<div class="paragraph">
<p>The <code>VkExternalMemoryProperties</code> structure is defined as:</p>
</div>
<div id="VkExternalMemoryProperties" class="listingblock">
<div class="content">
<pre class="highlight"><code class="language-c++" data-lang="c++">typedef struct VkExternalMemoryProperties {
    VkExternalMemoryFeatureFlags       externalMemoryFeatures;
    VkExternalMemoryHandleTypeFlags    exportFromImportedHandleTypes;
    VkExternalMemoryHandleTypeFlags    compatibleHandleTypes;
} VkExternalMemoryProperties;</code></pre>
</div>
</div>
<div class="paragraph">
<p>or the equivalent</p>
</div>
<div id="VkExternalMemoryPropertiesKHR" class="listingblock">
<div class="content">
<pre class="highlight"><code class="language-c++" data-lang="c++">typedef VkExternalMemoryProperties VkExternalMemoryPropertiesKHR;</code></pre>
</div>
</div>
</div>
<div class="sect3">
<h4 id="_members_141">Members</h4>
<div class="ulist">
<ul>
<li>
<p><code>externalMemoryFeatures</code> is a bitmask of
<a href="#VkExternalMemoryFeatureFlagBits">VkExternalMemoryFeatureFlagBits</a> specifying the features of
<code>handleType</code>.</p>
</li>
<li>
<p><code>exportFromImportedHandleTypes</code> is a bitmask of
<a href="#VkExternalMemoryHandleTypeFlagBits">VkExternalMemoryHandleTypeFlagBits</a> specifying which types of
imported handle <code>handleType</code> <strong class="purple">can</strong> be exported from.</p>
</li>
<li>
<p><code>compatibleHandleTypes</code> is a bitmask of
<a href="#VkExternalMemoryHandleTypeFlagBits">VkExternalMemoryHandleTypeFlagBits</a> specifying handle types which
<strong class="purple">can</strong> be specified at the same time as <code>handleType</code> when creating an
image compatible with external memory.</p>
</li>
</ul>
</div>
</div>
<div class="sect3">
<h4 id="_description_504">Description</h4>
<div class="paragraph">
<p><code>compatibleHandleTypes</code> <strong class="purple">must</strong> include at least <code>handleType</code>.
Inclusion of a handle type in <code>compatibleHandleTypes</code> does not imply the
values returned in <a href="#VkImageFormatProperties2">VkImageFormatProperties2</a> will be the same when
<a href="#VkPhysicalDeviceExternalImageFormatInfo">VkPhysicalDeviceExternalImageFormatInfo</a>::<code>handleType</code> is set to
that type.
The application is responsible for querying the capabilities of all handle
types intended for concurrent use in a single image and intersecting them to
obtain the compatible set of capabilities.</p>
</div>
</div>
<div class="sect3">
<h4 id="_see_also_504">See Also</h4>
<div class="paragraph">
<p><a href="#VkExternalBufferProperties">VkExternalBufferProperties</a>, <a href="#VkExternalImageFormatProperties">VkExternalImageFormatProperties</a>, <a href="#VkExternalMemoryFeatureFlags">VkExternalMemoryFeatureFlags</a>, <a href="#VkExternalMemoryHandleTypeFlags">VkExternalMemoryHandleTypeFlags</a></p>
</div>
</div>
<div class="sect3">
<h4 id="_document_notes_504">Document Notes</h4>
<div class="paragraph">
<p>For more information, see the Vulkan Specification at URL</p>
</div>
<div class="paragraph">
<p><a href="https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VkExternalMemoryProperties" class="bare">https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VkExternalMemoryProperties</a></p>
</div>
<div class="paragraph">
<p>This page is extracted from the Vulkan Specification.
Fixes and changes should be made to the Specification, not directly.</p>
</div>
<div style="page-break-after: always;"></div>
</div>
</div>
<div class="sect2">
<h3 id="_vkexternalsemaphoreproperties3">VkExternalSemaphoreProperties(3)</h3>
<div class="sect3">
<h4 id="_name_505">Name</h4>
<div class="paragraph">
<p>VkExternalSemaphoreProperties - Structure describing supported external semaphore handle features</p>
</div>
</div>
<div class="sect3">
<h4 id="_c_specification_505">C Specification</h4>
<div class="paragraph">
<p>The <code>VkExternalSemaphoreProperties</code> structure is defined as:</p>
</div>
<div id="VkExternalSemaphoreProperties" class="listingblock">
<div class="content">
<pre class="highlight"><code class="language-c++" data-lang="c++">typedef struct VkExternalSemaphoreProperties {
    VkStructureType                       sType;
    void*                                 pNext;
    VkExternalSemaphoreHandleTypeFlags    exportFromImportedHandleTypes;
    VkExternalSemaphoreHandleTypeFlags    compatibleHandleTypes;
    VkExternalSemaphoreFeatureFlags       externalSemaphoreFeatures;
} VkExternalSemaphoreProperties;</code></pre>
</div>
</div>
<div class="paragraph">
<p>or the equivalent</p>
</div>
<div id="VkExternalSemaphorePropertiesKHR" class="listingblock">
<div class="content">
<pre class="highlight"><code class="language-c++" data-lang="c++">typedef VkExternalSemaphoreProperties VkExternalSemaphorePropertiesKHR;</code></pre>
</div>
</div>
</div>
<div class="sect3">
<h4 id="_members_142">Members</h4>
<div class="ulist">
<ul>
<li>
<p><code>exportFromImportedHandleTypes</code> is a bitmask of
<a href="#VkExternalSemaphoreHandleTypeFlagBits">VkExternalSemaphoreHandleTypeFlagBits</a> specifying which types of
imported handle <code>handleType</code> <strong class="purple">can</strong> be exported from.</p>
</li>
<li>
<p><code>compatibleHandleTypes</code> is a bitmask of
<a href="#VkExternalSemaphoreHandleTypeFlagBits">VkExternalSemaphoreHandleTypeFlagBits</a> specifying handle types
which <strong class="purple">can</strong> be specified at the same time as <code>handleType</code> when
creating a semaphore.</p>
</li>
<li>
<p><code>externalSemaphoreFeatures</code> is a bitmask of
<a href="#VkExternalSemaphoreFeatureFlagBits">VkExternalSemaphoreFeatureFlagBits</a> describing the features of
<code>handleType</code>.</p>
</li>
</ul>
</div>
</div>
<div class="sect3">
<h4 id="_description_505">Description</h4>
<div class="paragraph">
<p>If <code>handleType</code> is not supported by the implementation, then
<a href="#VkExternalSemaphoreProperties">VkExternalSemaphoreProperties</a>::<code>externalSemaphoreFeatures</code> will be
set to zero.</p>
</div>
<div class="sidebarblock">
<div class="content">
<div class="title">Valid Usage (Implicit)</div>
<div class="ulist">
<ul>
<li>
<p><a id="VUID-VkExternalSemaphoreProperties-sType-sType"></a> <code>sType</code> <strong class="purple">must</strong> be <code>VK_STRUCTURE_TYPE_EXTERNAL_SEMAPHORE_PROPERTIES</code></p>
</li>
<li>
<p><a id="VUID-VkExternalSemaphoreProperties-pNext-pNext"></a> <code>pNext</code> <strong class="purple">must</strong> be <code>NULL</code></p>
</li>
</ul>
</div>
</div>
</div>
</div>
<div class="sect3">
<h4 id="_see_also_505">See Also</h4>
<div class="paragraph">
<p><a href="#VkExternalSemaphoreFeatureFlags">VkExternalSemaphoreFeatureFlags</a>, <a href="#VkExternalSemaphoreHandleTypeFlags">VkExternalSemaphoreHandleTypeFlags</a>, <a href="#VkStructureType">VkStructureType</a>, <a href="#vkGetPhysicalDeviceExternalSemaphoreProperties">vkGetPhysicalDeviceExternalSemaphoreProperties</a>, <a href="#vkGetPhysicalDeviceExternalSemaphorePropertiesKHR">vkGetPhysicalDeviceExternalSemaphorePropertiesKHR</a></p>
</div>
</div>
<div class="sect3">
<h4 id="_document_notes_505">Document Notes</h4>
<div class="paragraph">
<p>For more information, see the Vulkan Specification at URL</p>
</div>
<div class="paragraph">
<p><a href="https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VkExternalSemaphoreProperties" class="bare">https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VkExternalSemaphoreProperties</a></p>
</div>
<div class="paragraph">
<p>This page is extracted from the Vulkan Specification.
Fixes and changes should be made to the Specification, not directly.</p>
</div>
<div style="page-break-after: always;"></div>
</div>
</div>
<div class="sect2">
<h3 id="_vkfencecreateinfo3">VkFenceCreateInfo(3)</h3>
<div class="sect3">
<h4 id="_name_506">Name</h4>
<div class="paragraph">
<p>VkFenceCreateInfo - Structure specifying parameters of a newly created fence</p>
</div>
</div>
<div class="sect3">
<h4 id="_c_specification_506">C Specification</h4>
<div class="paragraph">
<p>The <code>VkFenceCreateInfo</code> structure is defined as:</p>
</div>
<div id="VkFenceCreateInfo" class="listingblock">
<div class="content">
<pre class="highlight"><code class="language-c++" data-lang="c++">typedef struct VkFenceCreateInfo {
    VkStructureType       sType;
    const void*           pNext;
    VkFenceCreateFlags    flags;
} VkFenceCreateInfo;</code></pre>
</div>
</div>
</div>
<div class="sect3">
<h4 id="_members_143">Members</h4>
<div class="ulist">
<ul>
<li>
<p><code>sType</code> is the type of this structure.</p>
</li>
<li>
<p><code>pNext</code> is <code>NULL</code> or a pointer to an extension-specific structure.</p>
</li>
<li>
<p><code>flags</code> is a bitmask of <a href="#VkFenceCreateFlagBits">VkFenceCreateFlagBits</a> specifying the
initial state and behavior of the fence.</p>
</li>
</ul>
</div>
</div>
<div class="sect3">
<h4 id="_description_506">Description</h4>
<div class="sidebarblock">
<div class="content">
<div class="title">Valid Usage (Implicit)</div>
<div class="ulist">
<ul>
<li>
<p><a id="VUID-VkFenceCreateInfo-sType-sType"></a> <code>sType</code> <strong class="purple">must</strong> be <code>VK_STRUCTURE_TYPE_FENCE_CREATE_INFO</code></p>
</li>
<li>
<p><a id="VUID-VkFenceCreateInfo-pNext-pNext"></a> Each <code>pNext</code> member of any structure (including this one) in the <code>pNext</code> chain <strong class="purple">must</strong> be either <code>NULL</code> or a pointer to a valid instance of <a href="#VkExportFenceCreateInfo">VkExportFenceCreateInfo</a> or <a href="#VkExportFenceWin32HandleInfoKHR">VkExportFenceWin32HandleInfoKHR</a></p>
</li>
<li>
<p><a id="VUID-VkFenceCreateInfo-sType-unique"></a> Each <code>sType</code> member in the <code>pNext</code> chain <strong class="purple">must</strong> be unique</p>
</li>
<li>
<p><a id="VUID-VkFenceCreateInfo-flags-parameter"></a> <code>flags</code> <strong class="purple">must</strong> be a valid combination of <a href="#VkFenceCreateFlagBits">VkFenceCreateFlagBits</a> values</p>
</li>
</ul>
</div>
</div>
</div>
</div>
<div class="sect3">
<h4 id="_see_also_506">See Also</h4>
<div class="paragraph">
<p><a href="#VkFenceCreateFlags">VkFenceCreateFlags</a>, <a href="#VkStructureType">VkStructureType</a>, <a href="#vkCreateFence">vkCreateFence</a></p>
</div>
</div>
<div class="sect3">
<h4 id="_document_notes_506">Document Notes</h4>
<div class="paragraph">
<p>For more information, see the Vulkan Specification at URL</p>
</div>
<div class="paragraph">
<p><a href="https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VkFenceCreateInfo" class="bare">https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VkFenceCreateInfo</a></p>
</div>
<div class="paragraph">
<p>This page is extracted from the Vulkan Specification.
Fixes and changes should be made to the Specification, not directly.</p>
</div>
<div style="page-break-after: always;"></div>
</div>
</div>
<div class="sect2">
<h3 id="_vkfencegetfdinfokhr3">VkFenceGetFdInfoKHR(3)</h3>
<div class="sect3">
<h4 id="_name_507">Name</h4>
<div class="paragraph">
<p>VkFenceGetFdInfoKHR - Structure describing a POSIX FD fence export operation</p>
</div>
</div>
<div class="sect3">
<h4 id="_c_specification_507">C Specification</h4>
<div class="paragraph">
<p>The <code>VkFenceGetFdInfoKHR</code> structure is defined as:</p>
</div>
<div id="VkFenceGetFdInfoKHR" class="listingblock">
<div class="content">
<pre class="highlight"><code class="language-c++" data-lang="c++">typedef struct VkFenceGetFdInfoKHR {
    VkStructureType                      sType;
    const void*                          pNext;
    VkFence                              fence;
    VkExternalFenceHandleTypeFlagBits    handleType;
} VkFenceGetFdInfoKHR;</code></pre>
</div>
</div>
</div>
<div class="sect3">
<h4 id="_members_144">Members</h4>
<div class="ulist">
<ul>
<li>
<p><code>sType</code> is the type of this structure.</p>
</li>
<li>
<p><code>pNext</code> is <code>NULL</code> or a pointer to an extension-specific structure.</p>
</li>
<li>
<p><code>fence</code> is the fence from which state will be exported.</p>
</li>
<li>
<p><code>handleType</code> is the type of handle requested.</p>
</li>
</ul>
</div>
</div>
<div class="sect3">
<h4 id="_description_507">Description</h4>
<div class="paragraph">
<p>The properties of the file descriptor returned depend on the value of
<code>handleType</code>.
See <a href="#VkExternalFenceHandleTypeFlagBits">VkExternalFenceHandleTypeFlagBits</a> for a description of the
properties of the defined external fence handle types.</p>
</div>
<div class="sidebarblock">
<div class="content">
<div class="title">Valid Usage</div>
<div class="ulist">
<ul>
<li>
<p><a id="VUID-VkFenceGetFdInfoKHR-handleType-01453"></a>
<code>handleType</code> <strong class="purple">must</strong> have been included in
<a href="#VkExportFenceCreateInfo">VkExportFenceCreateInfo</a>::<code>handleTypes</code> when <code>fence</code>&#8217;s
current payload was created.</p>
</li>
<li>
<p><a id="VUID-VkFenceGetFdInfoKHR-handleType-01454"></a>
If <code>handleType</code> refers to a handle type with copy payload
transference semantics, <code>fence</code> <strong class="purple">must</strong> be signaled, or have an
associated <a href="vkspec.html#synchronization-fences-signaling">fence signal operation</a>
pending execution.</p>
</li>
<li>
<p><a id="VUID-VkFenceGetFdInfoKHR-fence-01455"></a>
<code>fence</code> <strong class="purple">must</strong> not currently have its payload replaced by an imported
payload as described below in
<a href="vkspec.html#synchronization-fences-importing">Importing Fence Payloads</a> unless
that imported payload&#8217;s handle type was included in
<a href="#VkExternalFenceProperties">VkExternalFenceProperties</a>::<code>exportFromImportedHandleTypes</code> for
<code>handleType</code>.</p>
</li>
<li>
<p><a id="VUID-VkFenceGetFdInfoKHR-handleType-01456"></a>
<code>handleType</code> <strong class="purple">must</strong> be defined as a POSIX file descriptor handle.</p>
</li>
</ul>
</div>
</div>
</div>
<div class="sidebarblock">
<div class="content">
<div class="title">Valid Usage (Implicit)</div>
<div class="ulist">
<ul>
<li>
<p><a id="VUID-VkFenceGetFdInfoKHR-sType-sType"></a> <code>sType</code> <strong class="purple">must</strong> be <code>VK_STRUCTURE_TYPE_FENCE_GET_FD_INFO_KHR</code></p>
</li>
<li>
<p><a id="VUID-VkFenceGetFdInfoKHR-pNext-pNext"></a> <code>pNext</code> <strong class="purple">must</strong> be <code>NULL</code></p>
</li>
<li>
<p><a id="VUID-VkFenceGetFdInfoKHR-fence-parameter"></a> <code>fence</code> <strong class="purple">must</strong> be a valid <code>VkFence</code> handle</p>
</li>
<li>
<p><a id="VUID-VkFenceGetFdInfoKHR-handleType-parameter"></a> <code>handleType</code> <strong class="purple">must</strong> be a valid <a href="#VkExternalFenceHandleTypeFlagBits">VkExternalFenceHandleTypeFlagBits</a> value</p>
</li>
</ul>
</div>
</div>
</div>
</div>
<div class="sect3">
<h4 id="_see_also_507">See Also</h4>
<div class="paragraph">
<p><a href="#VkExternalFenceHandleTypeFlagBits">VkExternalFenceHandleTypeFlagBits</a>, <a href="#VkFence">VkFence</a>, <a href="#VkStructureType">VkStructureType</a>, <a href="#vkGetFenceFdKHR">vkGetFenceFdKHR</a></p>
</div>
</div>
<div class="sect3">
<h4 id="_document_notes_507">Document Notes</h4>
<div class="paragraph">
<p>For more information, see the Vulkan Specification at URL</p>
</div>
<div class="paragraph">
<p><a href="https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VkFenceGetFdInfoKHR" class="bare">https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VkFenceGetFdInfoKHR</a></p>
</div>
<div class="paragraph">
<p>This page is extracted from the Vulkan Specification.
Fixes and changes should be made to the Specification, not directly.</p>
</div>
<div style="page-break-after: always;"></div>
</div>
</div>
<div class="sect2">
<h3 id="_vkfencegetwin32handleinfokhr3">VkFenceGetWin32HandleInfoKHR(3)</h3>
<div class="sect3">
<h4 id="_name_508">Name</h4>
<div class="paragraph">
<p>VkFenceGetWin32HandleInfoKHR - Structure describing a Win32 handle fence export operation</p>
</div>
</div>
<div class="sect3">
<h4 id="_c_specification_508">C Specification</h4>
<div class="paragraph">
<p>The <code>VkFenceGetWin32HandleInfoKHR</code> structure is defined as:</p>
</div>
<div id="VkFenceGetWin32HandleInfoKHR" class="listingblock">
<div class="content">
<pre class="highlight"><code class="language-c++" data-lang="c++">typedef struct VkFenceGetWin32HandleInfoKHR {
    VkStructureType                      sType;
    const void*                          pNext;
    VkFence                              fence;
    VkExternalFenceHandleTypeFlagBits    handleType;
} VkFenceGetWin32HandleInfoKHR;</code></pre>
</div>
</div>
</div>
<div class="sect3">
<h4 id="_members_145">Members</h4>
<div class="ulist">
<ul>
<li>
<p><code>sType</code> is the type of this structure.</p>
</li>
<li>
<p><code>pNext</code> is <code>NULL</code> or a pointer to an extension-specific structure.</p>
</li>
<li>
<p><code>fence</code> is the fence from which state will be exported.</p>
</li>
<li>
<p><code>handleType</code> is the type of handle requested.</p>
</li>
</ul>
</div>
</div>
<div class="sect3">
<h4 id="_description_508">Description</h4>
<div class="paragraph">
<p>The properties of the handle returned depend on the value of
<code>handleType</code>.
See <a href="#VkExternalFenceHandleTypeFlagBits">VkExternalFenceHandleTypeFlagBits</a> for a description of the
properties of the defined external fence handle types.</p>
</div>
<div class="sidebarblock">
<div class="content">
<div class="title">Valid Usage</div>
<div class="ulist">
<ul>
<li>
<p><a id="VUID-VkFenceGetWin32HandleInfoKHR-handleType-01448"></a>
<code>handleType</code> <strong class="purple">must</strong> have been included in
<a href="#VkExportFenceCreateInfo">VkExportFenceCreateInfo</a>::<code>handleTypes</code> when the <code>fence</code>&#8217;s
current payload was created.</p>
</li>
<li>
<p><a id="VUID-VkFenceGetWin32HandleInfoKHR-handleType-01449"></a>
If <code>handleType</code> is defined as an NT handle,
<a href="#vkGetFenceWin32HandleKHR">vkGetFenceWin32HandleKHR</a> <strong class="purple">must</strong> be called no more than once for
each valid unique combination of <code>fence</code> and <code>handleType</code>.</p>
</li>
<li>
<p><a id="VUID-VkFenceGetWin32HandleInfoKHR-fence-01450"></a>
<code>fence</code> <strong class="purple">must</strong> not currently have its payload replaced by an imported
payload as described below in
<a href="vkspec.html#synchronization-fences-importing">Importing Fence Payloads</a> unless
that imported payload&#8217;s handle type was included in
<a href="#VkExternalFenceProperties">VkExternalFenceProperties</a>::<code>exportFromImportedHandleTypes</code> for
<code>handleType</code>.</p>
</li>
<li>
<p><a id="VUID-VkFenceGetWin32HandleInfoKHR-handleType-01451"></a>
If <code>handleType</code> refers to a handle type with copy payload
transference semantics, <code>fence</code> <strong class="purple">must</strong> be signaled, or have an
associated <a href="vkspec.html#synchronization-fences-signaling">fence signal operation</a>
pending execution.</p>
</li>
<li>
<p><a id="VUID-VkFenceGetWin32HandleInfoKHR-handleType-01452"></a>
<code>handleType</code> <strong class="purple">must</strong> be defined as an NT handle or a global share
handle.</p>
</li>
</ul>
</div>
</div>
</div>
<div class="sidebarblock">
<div class="content">
<div class="title">Valid Usage (Implicit)</div>
<div class="ulist">
<ul>
<li>
<p><a id="VUID-VkFenceGetWin32HandleInfoKHR-sType-sType"></a> <code>sType</code> <strong class="purple">must</strong> be <code>VK_STRUCTURE_TYPE_FENCE_GET_WIN32_HANDLE_INFO_KHR</code></p>
</li>
<li>
<p><a id="VUID-VkFenceGetWin32HandleInfoKHR-pNext-pNext"></a> <code>pNext</code> <strong class="purple">must</strong> be <code>NULL</code></p>
</li>
<li>
<p><a id="VUID-VkFenceGetWin32HandleInfoKHR-fence-parameter"></a> <code>fence</code> <strong class="purple">must</strong> be a valid <code>VkFence</code> handle</p>
</li>
<li>
<p><a id="VUID-VkFenceGetWin32HandleInfoKHR-handleType-parameter"></a> <code>handleType</code> <strong class="purple">must</strong> be a valid <a href="#VkExternalFenceHandleTypeFlagBits">VkExternalFenceHandleTypeFlagBits</a> value</p>
</li>
</ul>
</div>
</div>
</div>
</div>
<div class="sect3">
<h4 id="_see_also_508">See Also</h4>
<div class="paragraph">
<p><a href="#VkExternalFenceHandleTypeFlagBits">VkExternalFenceHandleTypeFlagBits</a>, <a href="#VkFence">VkFence</a>, <a href="#VkStructureType">VkStructureType</a>, <a href="#vkGetFenceWin32HandleKHR">vkGetFenceWin32HandleKHR</a></p>
</div>
</div>
<div class="sect3">
<h4 id="_document_notes_508">Document Notes</h4>
<div class="paragraph">
<p>For more information, see the Vulkan Specification at URL</p>
</div>
<div class="paragraph">
<p><a href="https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VkFenceGetWin32HandleInfoKHR" class="bare">https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VkFenceGetWin32HandleInfoKHR</a></p>
</div>
<div class="paragraph">
<p>This page is extracted from the Vulkan Specification.
Fixes and changes should be made to the Specification, not directly.</p>
</div>
<div style="page-break-after: always;"></div>
</div>
</div>
<div class="sect2">
<h3 id="_vkfiltercubicimageviewimageformatpropertiesext3">VkFilterCubicImageViewImageFormatPropertiesEXT(3)</h3>
<div class="sect3">
<h4 id="_name_509">Name</h4>
<div class="paragraph">
<p>VkFilterCubicImageViewImageFormatPropertiesEXT - Structure for querying cubic filtering capabilities of an image view type</p>
</div>
</div>
<div class="sect3">
<h4 id="_c_specification_509">C Specification</h4>
<div class="paragraph">
<p>The <code>VkFilterCubicImageViewImageFormatPropertiesEXT</code> structure is
defined as:</p>
</div>
<div id="VkFilterCubicImageViewImageFormatPropertiesEXT" class="listingblock">
<div class="content">
<pre class="highlight"><code class="language-c++" data-lang="c++">typedef struct VkFilterCubicImageViewImageFormatPropertiesEXT {
    VkStructureType    sType;
    void*              pNext;
    VkBool32           filterCubic;
    VkBool32           filterCubicMinmax ;
} VkFilterCubicImageViewImageFormatPropertiesEXT;</code></pre>
</div>
</div>
</div>
<div class="sect3">
<h4 id="_members_146">Members</h4>
<div class="ulist">
<ul>
<li>
<p><code>sType</code> is the type of this structure.</p>
</li>
<li>
<p><code>pNext</code> is <code>NULL</code> or a pointer to an extension-specific structure.</p>
</li>
<li>
<p><code>filterCubic</code> tells if image format, image type and image view type
<strong class="purple">can</strong> be used with cubic filtering.
This field is set by the implementation.
User-specified value is ignored.</p>
</li>
<li>
<p><code>filterCubicMinmax</code> tells if image format, image type and image view
type <strong class="purple">can</strong> be used with cubic filtering and minmax filtering.
This field is set by the implementation.
User-specified value is ignored.</p>
</li>
</ul>
</div>
</div>
<div class="sect3">
<h4 id="_description_509">Description</h4>
<div class="sidebarblock">
<div class="content">
<div class="title">Valid Usage (Implicit)</div>
<div class="ulist">
<ul>
<li>
<p><a id="VUID-VkFilterCubicImageViewImageFormatPropertiesEXT-sType-sType"></a> <code>sType</code> <strong class="purple">must</strong> be <code>VK_STRUCTURE_TYPE_FILTER_CUBIC_IMAGE_VIEW_IMAGE_FORMAT_PROPERTIES_EXT</code></p>
</li>
</ul>
</div>
</div>
</div>
<div class="sidebarblock">
<div class="content">
<div class="title">Valid Usage</div>
<div class="ulist">
<ul>
<li>
<p><a id="VUID-VkFilterCubicImageViewImageFormatPropertiesEXT-pNext-02627"></a>
If the <code>pNext</code> chain of the <a href="#VkImageFormatProperties2">VkImageFormatProperties2</a> structure
contains an instance of
<a href="#VkFilterCubicImageViewImageFormatPropertiesEXT">VkFilterCubicImageViewImageFormatPropertiesEXT</a>, the <code>pNext</code>
chain of the <a href="#VkPhysicalDeviceImageFormatInfo2">VkPhysicalDeviceImageFormatInfo2</a> structure <strong class="purple">must</strong>
contain an instance of <a href="#VkPhysicalDeviceImageViewImageFormatInfoEXT">VkPhysicalDeviceImageViewImageFormatInfoEXT</a>
with an <code>imageViewType</code> that is compatible with <code>imageType</code>.</p>
</li>
</ul>
</div>
</div>
</div>
</div>
<div class="sect3">
<h4 id="_see_also_509">See Also</h4>
<div class="paragraph">
<p><code>VkBool32</code>, <a href="#VkStructureType">VkStructureType</a></p>
</div>
</div>
<div class="sect3">
<h4 id="_document_notes_509">Document Notes</h4>
<div class="paragraph">
<p>For more information, see the Vulkan Specification at URL</p>
</div>
<div class="paragraph">
<p><a href="https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VkFilterCubicImageViewImageFormatPropertiesEXT" class="bare">https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VkFilterCubicImageViewImageFormatPropertiesEXT</a></p>
</div>
<div class="paragraph">
<p>This page is extracted from the Vulkan Specification.
Fixes and changes should be made to the Specification, not directly.</p>
</div>
<div style="page-break-after: always;"></div>
</div>
</div>
<div class="sect2">
<h3 id="_vkformatproperties3">VkFormatProperties(3)</h3>
<div class="sect3">
<h4 id="_name_510">Name</h4>
<div class="paragraph">
<p>VkFormatProperties - Structure specifying image format properties</p>
</div>
</div>
<div class="sect3">
<h4 id="_c_specification_510">C Specification</h4>
<div class="paragraph">
<p>The <code>VkFormatProperties</code> structure is defined as:</p>
</div>
<div id="VkFormatProperties" class="listingblock">
<div class="content">
<pre class="highlight"><code class="language-c++" data-lang="c++">typedef struct VkFormatProperties {
    VkFormatFeatureFlags    linearTilingFeatures;
    VkFormatFeatureFlags    optimalTilingFeatures;
    VkFormatFeatureFlags    bufferFeatures;
} VkFormatProperties;</code></pre>
</div>
</div>
</div>
<div class="sect3">
<h4 id="_members_147">Members</h4>
<div class="ulist">
<ul>
<li>
<p><code>linearTilingFeatures</code> is a bitmask of <a href="#VkFormatFeatureFlagBits">VkFormatFeatureFlagBits</a>
specifying features supported by images created with a <code>tiling</code>
parameter of <code>VK_IMAGE_TILING_LINEAR</code>.</p>
</li>
<li>
<p><code>optimalTilingFeatures</code> is a bitmask of
<a href="#VkFormatFeatureFlagBits">VkFormatFeatureFlagBits</a> specifying features supported by images
created with a <code>tiling</code> parameter of <code>VK_IMAGE_TILING_OPTIMAL</code>.</p>
</li>
<li>
<p><code>bufferFeatures</code> is a bitmask of <a href="#VkFormatFeatureFlagBits">VkFormatFeatureFlagBits</a>
specifying features supported by buffers.</p>
</li>
</ul>
</div>
</div>
<div class="sect3">
<h4 id="_description_510">Description</h4>
<div class="admonitionblock note">
<table>
<tr>
<td class="icon">
<i class="fa icon-note" title="Note"></i>
</td>
<td class="content">
<div class="title">Note</div>
<div class="paragraph">
<p>If no format feature flags are supported, the format itself is not
supported, and images of that format cannot be created.</p>
</div>
</td>
</tr>
</table>
</div>
<div class="paragraph">
<p>If <code>format</code> is a block-compressed format, then <code>bufferFeatures</code>
<strong class="purple">must</strong> not support any features for the format.</p>
</div>
<div class="paragraph">
<p>If <code>format</code> is not a multi-plane format then <code>linearTilingFeatures</code>
and <code>optimalTilingFeatures</code> <strong class="purple">must</strong> not contain
<code>VK_FORMAT_FEATURE_DISJOINT_BIT</code>.</p>
</div>
</div>
<div class="sect3">
<h4 id="_see_also_510">See Also</h4>
<div class="paragraph">
<p><a href="#VkFormatFeatureFlags">VkFormatFeatureFlags</a>, <a href="#VkFormatProperties2">VkFormatProperties2</a>, <a href="#vkGetPhysicalDeviceFormatProperties">vkGetPhysicalDeviceFormatProperties</a></p>
</div>
</div>
<div class="sect3">
<h4 id="_document_notes_510">Document Notes</h4>
<div class="paragraph">
<p>For more information, see the Vulkan Specification at URL</p>
</div>
<div class="paragraph">
<p><a href="https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VkFormatProperties" class="bare">https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VkFormatProperties</a></p>
</div>
<div class="paragraph">
<p>This page is extracted from the Vulkan Specification.
Fixes and changes should be made to the Specification, not directly.</p>
</div>
<div style="page-break-after: always;"></div>
</div>
</div>
<div class="sect2">
<h3 id="_vkformatproperties23">VkFormatProperties2(3)</h3>
<div class="sect3">
<h4 id="_name_511">Name</h4>
<div class="paragraph">
<p>VkFormatProperties2 - Structure specifying image format properties</p>
</div>
</div>
<div class="sect3">
<h4 id="_c_specification_511">C Specification</h4>
<div class="paragraph">
<p>The <code>VkFormatProperties2</code> structure is defined as:</p>
</div>
<div id="VkFormatProperties2" class="listingblock">
<div class="content">
<pre class="highlight"><code class="language-c++" data-lang="c++">typedef struct VkFormatProperties2 {
    VkStructureType       sType;
    void*                 pNext;
    VkFormatProperties    formatProperties;
} VkFormatProperties2;</code></pre>
</div>
</div>
<div class="paragraph">
<p>or the equivalent</p>
</div>
<div id="VkFormatProperties2KHR" class="listingblock">
<div class="content">
<pre class="highlight"><code class="language-c++" data-lang="c++">typedef VkFormatProperties2 VkFormatProperties2KHR;</code></pre>
</div>
</div>
</div>
<div class="sect3">
<h4 id="_members_148">Members</h4>
<div class="ulist">
<ul>
<li>
<p><code>sType</code> is the type of this structure.</p>
</li>
<li>
<p><code>pNext</code> is <code>NULL</code> or a pointer to an extension-specific structure.</p>
</li>
<li>
<p><code>formatProperties</code> is a structure of type <a href="#VkFormatProperties">VkFormatProperties</a>
describing features supported by the requested format.</p>
</li>
</ul>
</div>
</div>
<div class="sect3">
<h4 id="_description_511">Description</h4>
<div class="sidebarblock">
<div class="content">
<div class="title">Valid Usage (Implicit)</div>
<div class="ulist">
<ul>
<li>
<p><a id="VUID-VkFormatProperties2-sType-sType"></a> <code>sType</code> <strong class="purple">must</strong> be <code>VK_STRUCTURE_TYPE_FORMAT_PROPERTIES_2</code></p>
</li>
<li>
<p><a id="VUID-VkFormatProperties2-pNext-pNext"></a> <code>pNext</code> <strong class="purple">must</strong> be <code>NULL</code> or a pointer to a valid instance of <a href="#VkDrmFormatModifierPropertiesListEXT">VkDrmFormatModifierPropertiesListEXT</a></p>
</li>
</ul>
</div>
</div>
</div>
</div>
<div class="sect3">
<h4 id="_see_also_511">See Also</h4>
<div class="paragraph">
<p><a href="#VkFormatProperties">VkFormatProperties</a>, <a href="#VkStructureType">VkStructureType</a>, <a href="#vkGetPhysicalDeviceFormatProperties2">vkGetPhysicalDeviceFormatProperties2</a>, <a href="#vkGetPhysicalDeviceFormatProperties2KHR">vkGetPhysicalDeviceFormatProperties2KHR</a></p>
</div>
</div>
<div class="sect3">
<h4 id="_document_notes_511">Document Notes</h4>
<div class="paragraph">
<p>For more information, see the Vulkan Specification at URL</p>
</div>
<div class="paragraph">
<p><a href="https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VkFormatProperties2" class="bare">https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VkFormatProperties2</a></p>
</div>
<div class="paragraph">
<p>This page is extracted from the Vulkan Specification.
Fixes and changes should be made to the Specification, not directly.</p>
</div>
<div style="page-break-after: always;"></div>
</div>
</div>
<div class="sect2">
<h3 id="_vkframebuffercreateinfo3">VkFramebufferCreateInfo(3)</h3>
<div class="sect3">
<h4 id="_name_512">Name</h4>
<div class="paragraph">
<p>VkFramebufferCreateInfo - Structure specifying parameters of a newly created framebuffer</p>
</div>
</div>
<div class="sect3">
<h4 id="_c_specification_512">C Specification</h4>
<div class="paragraph">
<p>The <code>VkFramebufferCreateInfo</code> structure is defined as:</p>
</div>
<div id="VkFramebufferCreateInfo" class="listingblock">
<div class="content">
<pre class="highlight"><code class="language-c++" data-lang="c++">typedef struct VkFramebufferCreateInfo {
    VkStructureType             sType;
    const void*                 pNext;
    VkFramebufferCreateFlags    flags;
    VkRenderPass                renderPass;
    uint32_t                    attachmentCount;
    const VkImageView*          pAttachments;
    uint32_t                    width;
    uint32_t                    height;
    uint32_t                    layers;
} VkFramebufferCreateInfo;</code></pre>
</div>
</div>
</div>
<div class="sect3">
<h4 id="_members_149">Members</h4>
<div class="ulist">
<ul>
<li>
<p><code>sType</code> is the type of this structure.</p>
</li>
<li>
<p><code>pNext</code> is <code>NULL</code> or a pointer to an extension-specific structure.</p>
</li>
<li>
<p><code>flags</code> is reserved for future use.</p>
</li>
<li>
<p><code>renderPass</code> is a render pass that defines what render passes the
framebuffer will be compatible with.
See <a href="vkspec.html#renderpass-compatibility">Render Pass Compatibility</a> for details.</p>
</li>
<li>
<p><code>attachmentCount</code> is the number of attachments.</p>
</li>
<li>
<p><code>pAttachments</code> is an array of <a href="#VkImageView">VkImageView</a> handles, each of
which will be used as the corresponding attachment in a render pass
instance.</p>
</li>
<li>
<p><code>width</code>, <code>height</code> and <code>layers</code> define the dimensions of the
framebuffer.
If the render pass uses multiview, then <code>layers</code> <strong class="purple">must</strong> be one and
each attachment requires a number of layers that is greater than the
maximum bit index set in the view mask in the subpasses in which it is
used.</p>
</li>
</ul>
</div>
</div>
<div class="sect3">
<h4 id="_description_512">Description</h4>
<div class="paragraph">
<p>Applications <strong class="purple">must</strong> ensure that all accesses to memory that backs image
subresources used as attachments in a given renderpass instance either
happen-before the <a href="vkspec.html#renderpass-load-store-ops">load operations</a> for those
attachments, or happen-after the <a href="vkspec.html#renderpass-load-store-ops">store
operations</a> for those attachments.</p>
</div>
<div class="paragraph">
<p>For depth/stencil attachments, each aspect <strong class="purple">can</strong> be used separately as
attachments and non-attachments as long as the non-attachment accesses are
also via an image subresource in either the
<code>VK_IMAGE_LAYOUT_DEPTH_READ_ONLY_STENCIL_ATTACHMENT_OPTIMAL</code> layout or
the <code>VK_IMAGE_LAYOUT_DEPTH_ATTACHMENT_STENCIL_READ_ONLY_OPTIMAL</code> layout,
and the attachment resource uses whichever of those two layouts the image
accesses do not.
Use of non-attachment aspects in this case is only well defined if the
attachment is used in the subpass where the non-attachment access is being
made, or the layout of the image subresource is constant throughout the
entire render pass instance, including the <code>initialLayout</code> and
<code>finalLayout</code>.</p>
</div>
<div class="admonitionblock note">
<table>
<tr>
<td class="icon">
<i class="fa icon-note" title="Note"></i>
</td>
<td class="content">
<div class="title">Note</div>
<div class="paragraph">
<p>These restrictions mean
that the render pass has full knowledge of all uses of all of the
attachments, so that the implementation is able to make correct decisions
about when and how to perform layout transitions, when to overlap execution
of subpasses, etc.</p>
</div>
</td>
</tr>
</table>
</div>
<div id="renderpass-noattachments" class="paragraph">
<p>It is legal for a subpass to use no color or depth/stencil attachments, and
rather use shader side effects such as image stores and atomics to produce
an output.
In this case, the subpass continues to use the <code>width</code>, <code>height</code>,
and <code>layers</code> of the framebuffer to define the dimensions of the
rendering area, and the <code>rasterizationSamples</code> from each pipeline&#8217;s
<a href="#VkPipelineMultisampleStateCreateInfo">VkPipelineMultisampleStateCreateInfo</a> to define the number of samples
used in rasterization; however, if
<a href="#VkPhysicalDeviceFeatures">VkPhysicalDeviceFeatures</a>::<code>variableMultisampleRate</code> is
<code>VK_FALSE</code>, then all pipelines to be bound with a given zero-attachment
subpass <strong class="purple">must</strong> have the same value for
<a href="#VkPipelineMultisampleStateCreateInfo">VkPipelineMultisampleStateCreateInfo</a>::<code>rasterizationSamples</code>.</p>
</div>
<div class="sidebarblock">
<div class="content">
<div class="title">Valid Usage</div>
<div class="ulist">
<ul>
<li>
<p><a id="VUID-VkFramebufferCreateInfo-attachmentCount-00876"></a>
<code>attachmentCount</code> <strong class="purple">must</strong> be equal to the attachment count specified
in <code>renderPass</code></p>
</li>
<li>
<p><a id="VUID-VkFramebufferCreateInfo-pAttachments-00877"></a>
Each element of <code>pAttachments</code> that is used as a color attachment or
resolve attachment by <code>renderPass</code> <strong class="purple">must</strong> have been created with a
<code>usage</code> value including <code>VK_IMAGE_USAGE_COLOR_ATTACHMENT_BIT</code></p>
</li>
<li>
<p><a id="VUID-VkFramebufferCreateInfo-pAttachments-02633"></a>
Each element of <code>pAttachments</code> that is used as a depth/stencil
attachment by <code>renderPass</code> <strong class="purple">must</strong> have been created with a
<code>usage</code> value including
<code>VK_IMAGE_USAGE_DEPTH_STENCIL_ATTACHMENT_BIT</code></p>
</li>
<li>
<p><a id="VUID-VkFramebufferCreateInfo-pAttachments-02634"></a>
Each element of <code>pAttachments</code> that is used as a depth/stencil
resolve attachment by <code>renderPass</code> <strong class="purple">must</strong> have been created with a
<code>usage</code> value including
<code>VK_IMAGE_USAGE_DEPTH_STENCIL_ATTACHMENT_BIT</code></p>
</li>
<li>
<p><a id="VUID-VkFramebufferCreateInfo-pAttachments-00879"></a>
Each element of <code>pAttachments</code> that is used as an input attachment
by <code>renderPass</code> <strong class="purple">must</strong> have been created with a <code>usage</code> value
including <code>VK_IMAGE_USAGE_INPUT_ATTACHMENT_BIT</code></p>
</li>
<li>
<p><a id="VUID-VkFramebufferCreateInfo-pAttachments-02552"></a>
Each element of <code>pAttachments</code> that is used as a fragment density
map attachment by <code>renderPass</code> <strong class="purple">must</strong> not have been created with a
<code>flags</code> value including <code>VK_IMAGE_CREATE_SUBSAMPLED_BIT_EXT</code>.</p>
</li>
<li>
<p><a id="VUID-VkFramebufferCreateInfo-renderPass-02553"></a>
If <code>renderPass</code> has a fragment density map attachment and
<a href="vkspec.html#features-nonsubsampledimages">non-subsample image feature</a> is not
enabled, each element of <code>pAttachments</code> <strong class="purple">must</strong> have been created with
a <code>flags</code> value including <code>VK_IMAGE_CREATE_SUBSAMPLED_BIT_EXT</code>
unless that element is the fragment density map attachment.</p>
</li>
<li>
<p><a id="VUID-VkFramebufferCreateInfo-pAttachments-00880"></a>
Each element of <code>pAttachments</code> <strong class="purple">must</strong> have been created with an
<a href="#VkFormat">VkFormat</a> value that matches the <a href="#VkFormat">VkFormat</a> specified by the
corresponding <code>VkAttachmentDescription</code> in <code>renderPass</code></p>
</li>
<li>
<p><a id="VUID-VkFramebufferCreateInfo-pAttachments-00881"></a>
Each element of <code>pAttachments</code> <strong class="purple">must</strong> have been created with a
<code>samples</code> value that matches the <code>samples</code> value specified by
the corresponding <code>VkAttachmentDescription</code> in <code>renderPass</code></p>
</li>
<li>
<p><a id="VUID-VkFramebufferCreateInfo-pAttachments-02554"></a>
Each element of <code>pAttachments</code> <strong class="purple">must</strong> have dimensions at least as
large as the corresponding framebuffer dimension except for any element
that is referenced by <code>fragmentDensityMapAttachment</code></p>
</li>
<li>
<p><a id="VUID-VkFramebufferCreateInfo-pAttachments-02555"></a>
An element of <code>pAttachments</code> that is referenced by
<code>fragmentDensityMapAttachment</code> <strong class="purple">must</strong> have a width at least as large
as
\(\lceil{\frac{width}{maxFragmentDensityTexelSize_{width}}}\rceil\)</p>
</li>
<li>
<p><a id="VUID-VkFramebufferCreateInfo-pAttachments-02556"></a>
An element of <code>pAttachments</code> that is referenced by
<code>fragmentDensityMapAttachment</code> <strong class="purple">must</strong> have a height at least as large
as
\(\lceil{\frac{height}{maxFragmentDensityTexelSize_{height}}}\rceil\)</p>
</li>
<li>
<p><a id="VUID-VkFramebufferCreateInfo-pAttachments-00883"></a>
Each element of <code>pAttachments</code> <strong class="purple">must</strong> only specify a single mip level</p>
</li>
<li>
<p><a id="VUID-VkFramebufferCreateInfo-pAttachments-00884"></a>
Each element of <code>pAttachments</code> <strong class="purple">must</strong> have been created with the
identity swizzle</p>
</li>
<li>
<p><a id="VUID-VkFramebufferCreateInfo-width-00885"></a>
<code>width</code> <strong class="purple">must</strong> be greater than <code>0</code>.</p>
</li>
<li>
<p><a id="VUID-VkFramebufferCreateInfo-width-00886"></a>
<code>width</code> <strong class="purple">must</strong> be less than or equal to
<code>VkPhysicalDeviceLimits</code>::<code>maxFramebufferWidth</code></p>
</li>
<li>
<p><a id="VUID-VkFramebufferCreateInfo-height-00887"></a>
<code>height</code> <strong class="purple">must</strong> be greater than <code>0</code>.</p>
</li>
<li>
<p><a id="VUID-VkFramebufferCreateInfo-height-00888"></a>
<code>height</code> <strong class="purple">must</strong> be less than or equal to
<code>VkPhysicalDeviceLimits</code>::<code>maxFramebufferHeight</code></p>
</li>
<li>
<p><a id="VUID-VkFramebufferCreateInfo-layers-00889"></a>
<code>layers</code> <strong class="purple">must</strong> be greater than <code>0</code>.</p>
</li>
<li>
<p><a id="VUID-VkFramebufferCreateInfo-layers-00890"></a>
<code>layers</code> <strong class="purple">must</strong> be less than or equal to
<code>VkPhysicalDeviceLimits</code>::<code>maxFramebufferLayers</code></p>
</li>
<li>
<p><a id="VUID-VkFramebufferCreateInfo-pAttachments-00891"></a>
Each element of <code>pAttachments</code> that is a 2D or 2D array image view
taken from a 3D image <strong class="purple">must</strong> not be a depth/stencil format</p>
</li>
<li>
<p><a id="VUID-VkFramebufferCreateInfo-renderPass-02531"></a>
If <code>renderPass</code> was specified with non-zero view masks, <code>layers</code>
<strong class="purple">must</strong> be greater than or equal to the greatest position of any bit
included in any of those view masks</p>
</li>
</ul>
</div>
</div>
</div>
<div class="sidebarblock">
<div class="content">
<div class="title">Valid Usage (Implicit)</div>
<div class="ulist">
<ul>
<li>
<p><a id="VUID-VkFramebufferCreateInfo-sType-sType"></a> <code>sType</code> <strong class="purple">must</strong> be <code>VK_STRUCTURE_TYPE_FRAMEBUFFER_CREATE_INFO</code></p>
</li>
<li>
<p><a id="VUID-VkFramebufferCreateInfo-pNext-pNext"></a> <code>pNext</code> <strong class="purple">must</strong> be <code>NULL</code></p>
</li>
<li>
<p><a id="VUID-VkFramebufferCreateInfo-flags-zerobitmask"></a> <code>flags</code> <strong class="purple">must</strong> be <code>0</code></p>
</li>
<li>
<p><a id="VUID-VkFramebufferCreateInfo-renderPass-parameter"></a> <code>renderPass</code> <strong class="purple">must</strong> be a valid <code>VkRenderPass</code> handle</p>
</li>
<li>
<p><a id="VUID-VkFramebufferCreateInfo-pAttachments-parameter"></a> If <code>attachmentCount</code> is not <code>0</code>, <code>pAttachments</code> <strong class="purple">must</strong> be a valid pointer to an array of <code>attachmentCount</code> valid <code>VkImageView</code> handles</p>
</li>
<li>
<p><a id="VUID-VkFramebufferCreateInfo-commonparent"></a> Both of <code>renderPass</code>, and the elements of <code>pAttachments</code> that are valid handles <strong class="purple">must</strong> have been created, allocated, or retrieved from the same <code>VkDevice</code></p>
</li>
</ul>
</div>
</div>
</div>
</div>
<div class="sect3">
<h4 id="_see_also_512">See Also</h4>
<div class="paragraph">
<p><a href="#VkFramebufferCreateFlags">VkFramebufferCreateFlags</a>, <a href="#VkImageView">VkImageView</a>, <a href="#VkRenderPass">VkRenderPass</a>, <a href="#VkStructureType">VkStructureType</a>, <a href="#vkCreateFramebuffer">vkCreateFramebuffer</a></p>
</div>
</div>
<div class="sect3">
<h4 id="_document_notes_512">Document Notes</h4>
<div class="paragraph">
<p>For more information, see the Vulkan Specification at URL</p>
</div>
<div class="paragraph">
<p><a href="https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VkFramebufferCreateInfo" class="bare">https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VkFramebufferCreateInfo</a></p>
</div>
<div class="paragraph">
<p>This page is extracted from the Vulkan Specification.
Fixes and changes should be made to the Specification, not directly.</p>
</div>
<div style="page-break-after: always;"></div>
</div>
</div>
<div class="sect2">
<h3 id="_vkgeometryaabbnv3">VkGeometryAABBNV(3)</h3>
<div class="sect3">
<h4 id="_name_513">Name</h4>
<div class="paragraph">
<p>VkGeometryAABBNV - Structure specifying axis-aligned bounding box geometry in a bottom-level acceleration structure</p>
</div>
</div>
<div class="sect3">
<h4 id="_c_specification_513">C Specification</h4>
<div class="paragraph">
<p>The <code>VkGeometryAABBNV</code> structure is defined as:</p>
</div>
<div id="VkGeometryAABBNV" class="listingblock">
<div class="content">
<pre class="highlight"><code class="language-c++" data-lang="c++">typedef struct VkGeometryAABBNV {
    VkStructureType    sType;
    const void*        pNext;
    VkBuffer           aabbData;
    uint32_t           numAABBs;
    uint32_t           stride;
    VkDeviceSize       offset;
} VkGeometryAABBNV;</code></pre>
</div>
</div>
</div>
<div class="sect3">
<h4 id="_members_150">Members</h4>
<div class="ulist">
<ul>
<li>
<p><code>sType</code> is the type of this structure.</p>
</li>
<li>
<p><code>pNext</code> is <code>NULL</code> or a pointer to an extension-specific structure.</p>
</li>
<li>
<p><code>aabbData</code> is the buffer containing axis-aligned bounding box data.</p>
</li>
<li>
<p><code>numAABBs</code> is the number of AABBs in this geometry.</p>
</li>
<li>
<p><code>stride</code> is the stride in bytes between AABBs in <code>aabbData</code>.</p>
</li>
<li>
<p><code>offset</code> is the offset in bytes of the first AABB in <code>aabbData</code>.</p>
</li>
</ul>
</div>
</div>
<div class="sect3">
<h4 id="_description_513">Description</h4>
<div class="paragraph">
<p>The AABB data in memory is six 32-bit floats consisting of the minimum x, y,
and z values followed by the maximum x, y, and z values.</p>
</div>
<div class="sidebarblock">
<div class="content">
<div class="title">Valid Usage</div>
<div class="ulist">
<ul>
<li>
<p><a id="VUID-VkGeometryAABBNV-offset-02439"></a>
<code>offset</code> <strong class="purple">must</strong> be less than the size of <code>aabbData</code></p>
</li>
<li>
<p><a id="VUID-VkGeometryAABBNV-offset-02440"></a>
<code>offset</code> <strong class="purple">must</strong> be a multiple of <code>8</code></p>
</li>
<li>
<p><a id="VUID-VkGeometryAABBNV-stride-02441"></a>
<code>stride</code> <strong class="purple">must</strong> be a multiple of <code>8</code></p>
</li>
</ul>
</div>
</div>
</div>
<div class="sidebarblock">
<div class="content">
<div class="title">Valid Usage (Implicit)</div>
<div class="ulist">
<ul>
<li>
<p><a id="VUID-VkGeometryAABBNV-sType-sType"></a> <code>sType</code> <strong class="purple">must</strong> be <code>VK_STRUCTURE_TYPE_GEOMETRY_AABB_NV</code></p>
</li>
<li>
<p><a id="VUID-VkGeometryAABBNV-pNext-pNext"></a> <code>pNext</code> <strong class="purple">must</strong> be <code>NULL</code></p>
</li>
<li>
<p><a id="VUID-VkGeometryAABBNV-aabbData-parameter"></a> If <code>aabbData</code> is not <a href="#VK_NULL_HANDLE">VK_NULL_HANDLE</a>, <code>aabbData</code> <strong class="purple">must</strong> be a valid <code>VkBuffer</code> handle</p>
</li>
</ul>
</div>
</div>
</div>
</div>
<div class="sect3">
<h4 id="_see_also_513">See Also</h4>
<div class="paragraph">
<p><a href="#VkBuffer">VkBuffer</a>, <code>VkDeviceSize</code>, <a href="#VkGeometryDataNV">VkGeometryDataNV</a>, <a href="#VkStructureType">VkStructureType</a></p>
</div>
</div>
<div class="sect3">
<h4 id="_document_notes_513">Document Notes</h4>
<div class="paragraph">
<p>For more information, see the Vulkan Specification at URL</p>
</div>
<div class="paragraph">
<p><a href="https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VkGeometryAABBNV" class="bare">https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VkGeometryAABBNV</a></p>
</div>
<div class="paragraph">
<p>This page is extracted from the Vulkan Specification.
Fixes and changes should be made to the Specification, not directly.</p>
</div>
<div style="page-break-after: always;"></div>
</div>
</div>
<div class="sect2">
<h3 id="_vkgeometrydatanv3">VkGeometryDataNV(3)</h3>
<div class="sect3">
<h4 id="_name_514">Name</h4>
<div class="paragraph">
<p>VkGeometryDataNV - Structure specifying geometry in a bottom-level acceleration structure</p>
</div>
</div>
<div class="sect3">
<h4 id="_c_specification_514">C Specification</h4>
<div class="paragraph">
<p>The <code>VkGeometryDataNV</code> structure is defined as:</p>
</div>
<div id="VkGeometryDataNV" class="listingblock">
<div class="content">
<pre class="highlight"><code class="language-c++" data-lang="c++">typedef struct VkGeometryDataNV {
    VkGeometryTrianglesNV    triangles;
    VkGeometryAABBNV         aabbs;
} VkGeometryDataNV;</code></pre>
</div>
</div>
</div>
<div class="sect3">
<h4 id="_members_151">Members</h4>
<div class="ulist">
<ul>
<li>
<p><code>triangles</code> contains triangle data if
<code>VkGeometryNV</code>::<code>geometryType</code> is
<code>VK_GEOMETRY_TYPE_TRIANGLES_NV</code>.</p>
</li>
<li>
<p><code>aabbs</code> contains axis-aligned bounding box data if
<code>VkGeometryNV</code>::<code>geometryType</code> is
<code>VK_GEOMETRY_TYPE_AABBS_NV</code>.</p>
</li>
</ul>
</div>
</div>
<div class="sect3">
<h4 id="_description_514">Description</h4>
<div class="sidebarblock">
<div class="content">
<div class="title">Valid Usage (Implicit)</div>
<div class="ulist">
<ul>
<li>
<p><a id="VUID-VkGeometryDataNV-triangles-parameter"></a> <code>triangles</code> <strong class="purple">must</strong> be a valid <code>VkGeometryTrianglesNV</code> structure</p>
</li>
<li>
<p><a id="VUID-VkGeometryDataNV-aabbs-parameter"></a> <code>aabbs</code> <strong class="purple">must</strong> be a valid <code>VkGeometryAABBNV</code> structure</p>
</li>
</ul>
</div>
</div>
</div>
</div>
<div class="sect3">
<h4 id="_see_also_514">See Also</h4>
<div class="paragraph">
<p><a href="#VkGeometryAABBNV">VkGeometryAABBNV</a>, <a href="#VkGeometryNV">VkGeometryNV</a>, <a href="#VkGeometryTrianglesNV">VkGeometryTrianglesNV</a></p>
</div>
</div>
<div class="sect3">
<h4 id="_document_notes_514">Document Notes</h4>
<div class="paragraph">
<p>For more information, see the Vulkan Specification at URL</p>
</div>
<div class="paragraph">
<p><a href="https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VkGeometryDataNV" class="bare">https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VkGeometryDataNV</a></p>
</div>
<div class="paragraph">
<p>This page is extracted from the Vulkan Specification.
Fixes and changes should be made to the Specification, not directly.</p>
</div>
<div style="page-break-after: always;"></div>
</div>
</div>
<div class="sect2">
<h3 id="_vkgeometrynv3">VkGeometryNV(3)</h3>
<div class="sect3">
<h4 id="_name_515">Name</h4>
<div class="paragraph">
<p>VkGeometryNV - Structure specifying a geometry in a bottom-level acceleration structure</p>
</div>
</div>
<div class="sect3">
<h4 id="_c_specification_515">C Specification</h4>
<div class="paragraph">
<p>The <code>VkGeometryNV</code> structure is defined as:</p>
</div>
<div id="VkGeometryNV" class="listingblock">
<div class="content">
<pre class="highlight"><code class="language-c++" data-lang="c++">typedef struct VkGeometryNV {
    VkStructureType      sType;
    const void*          pNext;
    VkGeometryTypeNV     geometryType;
    VkGeometryDataNV     geometry;
    VkGeometryFlagsNV    flags;
} VkGeometryNV;</code></pre>
</div>
</div>
</div>
<div class="sect3">
<h4 id="_members_152">Members</h4>
<div class="ulist">
<ul>
<li>
<p><code>sType</code> is the type of this structure.</p>
</li>
<li>
<p><code>pNext</code> is <code>NULL</code> or a pointer to an extension-specific structure.</p>
</li>
<li>
<p><code>geometryType</code> describes which type of geometry this
<code>VkGeometryNV</code> refers to.</p>
</li>
<li>
<p><code>geometry</code> contains the geometry data as described in
<a href="#VkGeometryDataNV">VkGeometryDataNV</a>.</p>
</li>
<li>
<p><code>flags</code> has flags describing options for this geometry.</p>
</li>
</ul>
</div>
</div>
<div class="sect3">
<h4 id="_description_515">Description</h4>
<div class="sidebarblock">
<div class="content">
<div class="title">Valid Usage (Implicit)</div>
<div class="ulist">
<ul>
<li>
<p><a id="VUID-VkGeometryNV-sType-sType"></a> <code>sType</code> <strong class="purple">must</strong> be <code>VK_STRUCTURE_TYPE_GEOMETRY_NV</code></p>
</li>
<li>
<p><a id="VUID-VkGeometryNV-pNext-pNext"></a> <code>pNext</code> <strong class="purple">must</strong> be <code>NULL</code></p>
</li>
<li>
<p><a id="VUID-VkGeometryNV-geometryType-parameter"></a> <code>geometryType</code> <strong class="purple">must</strong> be a valid <a href="#VkGeometryTypeNV">VkGeometryTypeNV</a> value</p>
</li>
<li>
<p><a id="VUID-VkGeometryNV-geometry-parameter"></a> <code>geometry</code> <strong class="purple">must</strong> be a valid <code>VkGeometryDataNV</code> structure</p>
</li>
<li>
<p><a id="VUID-VkGeometryNV-flags-parameter"></a> <code>flags</code> <strong class="purple">must</strong> be a valid combination of <a href="#VkGeometryFlagBitsNV">VkGeometryFlagBitsNV</a> values</p>
</li>
</ul>
</div>
</div>
</div>
</div>
<div class="sect3">
<h4 id="_see_also_515">See Also</h4>
<div class="paragraph">
<p><a href="#VkAccelerationStructureInfoNV">VkAccelerationStructureInfoNV</a>, <a href="#VkGeometryDataNV">VkGeometryDataNV</a>, <a href="#VkGeometryFlagsNV">VkGeometryFlagsNV</a>, <a href="#VkGeometryTypeNV">VkGeometryTypeNV</a>, <a href="#VkStructureType">VkStructureType</a></p>
</div>
</div>
<div class="sect3">
<h4 id="_document_notes_515">Document Notes</h4>
<div class="paragraph">
<p>For more information, see the Vulkan Specification at URL</p>
</div>
<div class="paragraph">
<p><a href="https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VkGeometryNV" class="bare">https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VkGeometryNV</a></p>
</div>
<div class="paragraph">
<p>This page is extracted from the Vulkan Specification.
Fixes and changes should be made to the Specification, not directly.</p>
</div>
<div style="page-break-after: always;"></div>
</div>
</div>
<div class="sect2">
<h3 id="_vkgeometrytrianglesnv3">VkGeometryTrianglesNV(3)</h3>
<div class="sect3">
<h4 id="_name_516">Name</h4>
<div class="paragraph">
<p>VkGeometryTrianglesNV - Structure specifying a triangle geometry in a bottom-level acceleration structure</p>
</div>
</div>
<div class="sect3">
<h4 id="_c_specification_516">C Specification</h4>
<div class="paragraph">
<p>The <code>VkGeometryTrianglesNV</code> structure is defined as:</p>
</div>
<div id="VkGeometryTrianglesNV" class="listingblock">
<div class="content">
<pre class="highlight"><code class="language-c++" data-lang="c++">typedef struct VkGeometryTrianglesNV {
    VkStructureType    sType;
    const void*        pNext;
    VkBuffer           vertexData;
    VkDeviceSize       vertexOffset;
    uint32_t           vertexCount;
    VkDeviceSize       vertexStride;
    VkFormat           vertexFormat;
    VkBuffer           indexData;
    VkDeviceSize       indexOffset;
    uint32_t           indexCount;
    VkIndexType        indexType;
    VkBuffer           transformData;
    VkDeviceSize       transformOffset;
} VkGeometryTrianglesNV;</code></pre>
</div>
</div>
</div>
<div class="sect3">
<h4 id="_members_153">Members</h4>
<div class="ulist">
<ul>
<li>
<p><code>sType</code> is the type of this structure.</p>
</li>
<li>
<p><code>pNext</code> is <code>NULL</code> or a pointer to an extension-specific structure.</p>
</li>
<li>
<p><code>vertexData</code> is the buffer containing vertex data for this geometry.</p>
</li>
<li>
<p><code>vertexOffset</code> is the offset in bytes within <code>vertexData</code>
containing vertex data for this geometry.</p>
</li>
<li>
<p><code>vertexCount</code> is the number of valid vertices.</p>
</li>
<li>
<p><code>vertexStride</code> is the stride in bytes between each vertex.</p>
</li>
<li>
<p><code>vertexFormat</code> is the format of each vertex element.</p>
</li>
<li>
<p><code>indexData</code> is the buffer containing index data for this geometry.</p>
</li>
<li>
<p><code>indexOffset</code> is the offset in bytes within <code>indexData</code>
containing index data for this geometry.</p>
</li>
<li>
<p><code>indexCount</code> is the number of indices to include in this geometry.</p>
</li>
<li>
<p><code>indexType</code> is the format of each index.</p>
</li>
<li>
<p><code>transformData</code> is a buffer containing optional reference to an
array of 32-bit floats representing a 3x4 row major affine
transformation matrix for this geometry.</p>
</li>
<li>
<p><code>transformOffset</code> is the offset in bytes in <code>transformData</code> of
the transform information described above.</p>
</li>
</ul>
</div>
</div>
<div class="sect3">
<h4 id="_description_516">Description</h4>
<div class="paragraph">
<p>If <code>indexType</code> is <code>VK_INDEX_TYPE_NONE_NV</code>, then this structure
describes a set of triangles determined by <code>vertexCount</code>.
Otherwise, this structure describes a set of indexed triangles determined by
<code>indexCount</code>.</p>
</div>
<div class="sidebarblock">
<div class="content">
<div class="title">Valid Usage</div>
<div class="ulist">
<ul>
<li>
<p><a id="VUID-VkGeometryTrianglesNV-vertexOffset-02428"></a>
<code>vertexOffset</code> <strong class="purple">must</strong> be less than the size of <code>vertexData</code></p>
</li>
<li>
<p><a id="VUID-VkGeometryTrianglesNV-vertexOffset-02429"></a>
<code>vertexOffset</code> <strong class="purple">must</strong> be a multiple of the component size of
<code>vertexFormat</code></p>
</li>
<li>
<p><a id="VUID-VkGeometryTrianglesNV-vertexFormat-02430"></a>
<code>vertexFormat</code> <strong class="purple">must</strong> be one of <code>VK_FORMAT_R32G32B32_SFLOAT</code>,
<code>VK_FORMAT_R32G32_SFLOAT</code>, <code>VK_FORMAT_R16G16B16_SFLOAT</code>,
<code>VK_FORMAT_R16G16_SFLOAT</code>, <code>VK_FORMAT_R16G16_SNORM</code>, or
<code>VK_FORMAT_R16G16B16_SNORM</code></p>
</li>
<li>
<p><a id="VUID-VkGeometryTrianglesNV-indexOffset-02431"></a>
<code>indexOffset</code> <strong class="purple">must</strong> be less than the size of <code>indexData</code></p>
</li>
<li>
<p><a id="VUID-VkGeometryTrianglesNV-indexOffset-02432"></a>
<code>indexOffset</code> <strong class="purple">must</strong> be a multiple of the element size of
<code>indexType</code></p>
</li>
<li>
<p><a id="VUID-VkGeometryTrianglesNV-indexType-02433"></a>
<code>indexType</code> <strong class="purple">must</strong> be <code>VK_INDEX_TYPE_UINT16</code>,
<code>VK_INDEX_TYPE_UINT32</code>, or <code>VK_INDEX_TYPE_NONE_NV</code></p>
</li>
<li>
<p><a id="VUID-VkGeometryTrianglesNV-indexData-02434"></a>
<code>indexData</code> <strong class="purple">must</strong> be <a href="#VK_NULL_HANDLE">VK_NULL_HANDLE</a> if <code>indexType</code> is
<code>VK_INDEX_TYPE_NONE_NV</code></p>
</li>
<li>
<p><a id="VUID-VkGeometryTrianglesNV-indexData-02435"></a>
<code>indexData</code> <strong class="purple">must</strong> be a valid <code>VkBuffer</code> handle if
<code>indexType</code> is not <code>VK_INDEX_TYPE_NONE_NV</code></p>
</li>
<li>
<p><a id="VUID-VkGeometryTrianglesNV-indexCount-02436"></a>
<code>indexCount</code> <strong class="purple">must</strong> be <code>0</code> if <code>indexType</code> is
<code>VK_INDEX_TYPE_NONE_NV</code></p>
</li>
<li>
<p><a id="VUID-VkGeometryTrianglesNV-transformOffset-02437"></a>
<code>transformOffset</code> <strong class="purple">must</strong> be less than the size of <code>transformData</code></p>
</li>
<li>
<p><a id="VUID-VkGeometryTrianglesNV-transformOffset-02438"></a>
<code>transformOffset</code> <strong class="purple">must</strong> be a multiple of <code>16</code></p>
</li>
</ul>
</div>
</div>
</div>
<div class="sidebarblock">
<div class="content">
<div class="title">Valid Usage (Implicit)</div>
<div class="ulist">
<ul>
<li>
<p><a id="VUID-VkGeometryTrianglesNV-sType-sType"></a> <code>sType</code> <strong class="purple">must</strong> be <code>VK_STRUCTURE_TYPE_GEOMETRY_TRIANGLES_NV</code></p>
</li>
<li>
<p><a id="VUID-VkGeometryTrianglesNV-pNext-pNext"></a> <code>pNext</code> <strong class="purple">must</strong> be <code>NULL</code></p>
</li>
<li>
<p><a id="VUID-VkGeometryTrianglesNV-vertexData-parameter"></a> If <code>vertexData</code> is not <a href="#VK_NULL_HANDLE">VK_NULL_HANDLE</a>, <code>vertexData</code> <strong class="purple">must</strong> be a valid <code>VkBuffer</code> handle</p>
</li>
<li>
<p><a id="VUID-VkGeometryTrianglesNV-vertexFormat-parameter"></a> <code>vertexFormat</code> <strong class="purple">must</strong> be a valid <a href="#VkFormat">VkFormat</a> value</p>
</li>
<li>
<p><a id="VUID-VkGeometryTrianglesNV-indexData-parameter"></a> If <code>indexData</code> is not <a href="#VK_NULL_HANDLE">VK_NULL_HANDLE</a>, <code>indexData</code> <strong class="purple">must</strong> be a valid <code>VkBuffer</code> handle</p>
</li>
<li>
<p><a id="VUID-VkGeometryTrianglesNV-indexType-parameter"></a> <code>indexType</code> <strong class="purple">must</strong> be a valid <a href="#VkIndexType">VkIndexType</a> value</p>
</li>
<li>
<p><a id="VUID-VkGeometryTrianglesNV-transformData-parameter"></a> If <code>transformData</code> is not <a href="#VK_NULL_HANDLE">VK_NULL_HANDLE</a>, <code>transformData</code> <strong class="purple">must</strong> be a valid <code>VkBuffer</code> handle</p>
</li>
<li>
<p><a id="VUID-VkGeometryTrianglesNV-commonparent"></a> Each of <code>indexData</code>, <code>transformData</code>, and <code>vertexData</code> that are valid handles <strong class="purple">must</strong> have been created, allocated, or retrieved from the same <code>VkDevice</code></p>
</li>
</ul>
</div>
</div>
</div>
</div>
<div class="sect3">
<h4 id="_see_also_516">See Also</h4>
<div class="paragraph">
<p><a href="#VkBuffer">VkBuffer</a>, <code>VkDeviceSize</code>, <a href="#VkFormat">VkFormat</a>, <a href="#VkGeometryDataNV">VkGeometryDataNV</a>, <a href="#VkIndexType">VkIndexType</a>, <a href="#VkStructureType">VkStructureType</a></p>
</div>
</div>
<div class="sect3">
<h4 id="_document_notes_516">Document Notes</h4>
<div class="paragraph">
<p>For more information, see the Vulkan Specification at URL</p>
</div>
<div class="paragraph">
<p><a href="https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VkGeometryTrianglesNV" class="bare">https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VkGeometryTrianglesNV</a></p>
</div>
<div class="paragraph">
<p>This page is extracted from the Vulkan Specification.
Fixes and changes should be made to the Specification, not directly.</p>
</div>
<div style="page-break-after: always;"></div>
</div>
</div>
<div class="sect2">
<h3 id="_vkgraphicspipelinecreateinfo3">VkGraphicsPipelineCreateInfo(3)</h3>
<div class="sect3">
<h4 id="_name_517">Name</h4>
<div class="paragraph">
<p>VkGraphicsPipelineCreateInfo - Structure specifying parameters of a newly created graphics pipeline</p>
</div>
</div>
<div class="sect3">
<h4 id="_c_specification_517">C Specification</h4>
<div class="paragraph">
<p>The <code>VkGraphicsPipelineCreateInfo</code> structure is defined as:</p>
</div>
<div id="VkGraphicsPipelineCreateInfo" class="listingblock">
<div class="content">
<pre class="highlight"><code class="language-c++" data-lang="c++">typedef struct VkGraphicsPipelineCreateInfo {
    VkStructureType                                  sType;
    const void*                                      pNext;
    VkPipelineCreateFlags                            flags;
    uint32_t                                         stageCount;
    const VkPipelineShaderStageCreateInfo*           pStages;
    const VkPipelineVertexInputStateCreateInfo*      pVertexInputState;
    const VkPipelineInputAssemblyStateCreateInfo*    pInputAssemblyState;
    const VkPipelineTessellationStateCreateInfo*     pTessellationState;
    const VkPipelineViewportStateCreateInfo*         pViewportState;
    const VkPipelineRasterizationStateCreateInfo*    pRasterizationState;
    const VkPipelineMultisampleStateCreateInfo*      pMultisampleState;
    const VkPipelineDepthStencilStateCreateInfo*     pDepthStencilState;
    const VkPipelineColorBlendStateCreateInfo*       pColorBlendState;
    const VkPipelineDynamicStateCreateInfo*          pDynamicState;
    VkPipelineLayout                                 layout;
    VkRenderPass                                     renderPass;
    uint32_t                                         subpass;
    VkPipeline                                       basePipelineHandle;
    int32_t                                          basePipelineIndex;
} VkGraphicsPipelineCreateInfo;</code></pre>
</div>
</div>
</div>
<div class="sect3">
<h4 id="_members_154">Members</h4>
<div class="ulist">
<ul>
<li>
<p><code>sType</code> is the type of this structure.</p>
</li>
<li>
<p><code>pNext</code> is <code>NULL</code> or a pointer to an extension-specific structure.</p>
</li>
<li>
<p><code>flags</code> is a bitmask of <a href="#VkPipelineCreateFlagBits">VkPipelineCreateFlagBits</a> specifying
how the pipeline will be generated.</p>
</li>
<li>
<p><code>stageCount</code> is the number of entries in the <code>pStages</code> array.</p>
</li>
<li>
<p><code>pStages</code> is an array of size <code>stageCount</code> structures of type
<a href="#VkPipelineShaderStageCreateInfo">VkPipelineShaderStageCreateInfo</a> describing the set of the shader
stages to be included in the graphics pipeline.</p>
</li>
<li>
<p><code>pVertexInputState</code> is a pointer to an instance of the
<a href="#VkPipelineVertexInputStateCreateInfo">VkPipelineVertexInputStateCreateInfo</a> structure.
It is ignored if the pipeline includes a mesh shader stage.</p>
</li>
<li>
<p><code>pInputAssemblyState</code> is a pointer to an instance of the
<a href="#VkPipelineInputAssemblyStateCreateInfo">VkPipelineInputAssemblyStateCreateInfo</a> structure which determines
input assembly behavior, as described in <a href="vkspec.html#drawing">Drawing Commands</a>.
It is ignored if the pipeline includes a mesh shader stage.</p>
</li>
<li>
<p><code>pTessellationState</code> is a pointer to an instance of the
<a href="#VkPipelineTessellationStateCreateInfo">VkPipelineTessellationStateCreateInfo</a> structure, and is ignored if
the pipeline does not include a tessellation control shader stage and
tessellation evaluation shader stage.</p>
</li>
<li>
<p><code>pViewportState</code> is a pointer to an instance of the
<a href="#VkPipelineViewportStateCreateInfo">VkPipelineViewportStateCreateInfo</a> structure, and is ignored if the
pipeline has rasterization disabled.</p>
</li>
<li>
<p><code>pRasterizationState</code> is a pointer to an instance of the
<a href="#VkPipelineRasterizationStateCreateInfo">VkPipelineRasterizationStateCreateInfo</a> structure.</p>
</li>
<li>
<p><code>pMultisampleState</code> is a pointer to an instance of the
<a href="#VkPipelineMultisampleStateCreateInfo">VkPipelineMultisampleStateCreateInfo</a>, and is ignored if the
pipeline has rasterization disabled.</p>
</li>
<li>
<p><code>pDepthStencilState</code> is a pointer to an instance of the
<a href="#VkPipelineDepthStencilStateCreateInfo">VkPipelineDepthStencilStateCreateInfo</a> structure, and is ignored if
the pipeline has rasterization disabled or if the subpass of the render
pass the pipeline is created against does not use a depth/stencil
attachment.</p>
</li>
<li>
<p><code>pColorBlendState</code> is a pointer to an instance of the
<a href="#VkPipelineColorBlendStateCreateInfo">VkPipelineColorBlendStateCreateInfo</a> structure, and is ignored if
the pipeline has rasterization disabled or if the subpass of the render
pass the pipeline is created against does not use any color attachments.</p>
</li>
<li>
<p><code>pDynamicState</code> is a pointer to
<a href="#VkPipelineDynamicStateCreateInfo">VkPipelineDynamicStateCreateInfo</a> and is used to indicate which
properties of the pipeline state object are dynamic and <strong class="purple">can</strong> be changed
independently of the pipeline state.
This <strong class="purple">can</strong> be <code>NULL</code>, which means no state in the pipeline is considered
dynamic.</p>
</li>
<li>
<p><code>layout</code> is the description of binding locations used by both the
pipeline and descriptor sets used with the pipeline.</p>
</li>
<li>
<p><code>renderPass</code> is a handle to a render pass object describing the
environment in which the pipeline will be used; the pipeline <strong class="purple">must</strong> only
be used with an instance of any render pass compatible with the one
provided.
See <a href="vkspec.html#renderpass-compatibility">Render Pass Compatibility</a> for more
information.</p>
</li>
<li>
<p><code>subpass</code> is the index of the subpass in the render pass where this
pipeline will be used.</p>
</li>
<li>
<p><code>basePipelineHandle</code> is a pipeline to derive from.</p>
</li>
<li>
<p><code>basePipelineIndex</code> is an index into the <code>pCreateInfos</code>
parameter to use as a pipeline to derive from.</p>
</li>
</ul>
</div>
</div>
<div class="sect3">
<h4 id="_description_517">Description</h4>
<div class="paragraph">
<p>The parameters <code>basePipelineHandle</code> and <code>basePipelineIndex</code> are
described in more detail in <a href="vkspec.html#pipelines-pipeline-derivatives">Pipeline
Derivatives</a>.</p>
</div>
<div class="paragraph">
<p><code>pStages</code> points to an array of <a href="#VkPipelineShaderStageCreateInfo">VkPipelineShaderStageCreateInfo</a>
structures, which were previously described in <a href="vkspec.html#pipelines-compute">Compute
Pipelines</a>.</p>
</div>
<div class="paragraph">
<p><code>pDynamicState</code> points to a structure of type
<a href="#VkPipelineDynamicStateCreateInfo">VkPipelineDynamicStateCreateInfo</a>.</p>
</div>
<div class="paragraph">
<p>If any shader stage fails to compile,
the compile log will be reported back to the application, and
<code>VK_ERROR_INVALID_SHADER_NV</code> will be generated.</p>
</div>
<div class="sidebarblock">
<div class="content">
<div class="title">Valid Usage</div>
<div class="ulist">
<ul>
<li>
<p><a id="VUID-VkGraphicsPipelineCreateInfo-flags-00722"></a>
If <code>flags</code> contains the <code>VK_PIPELINE_CREATE_DERIVATIVE_BIT</code>
flag, and <code>basePipelineIndex</code> is -1, <code>basePipelineHandle</code> <strong class="purple">must</strong>
be a valid handle to a graphics <code>VkPipeline</code></p>
</li>
<li>
<p><a id="VUID-VkGraphicsPipelineCreateInfo-flags-00723"></a>
If <code>flags</code> contains the <code>VK_PIPELINE_CREATE_DERIVATIVE_BIT</code>
flag, and <code>basePipelineHandle</code> is <a href="#VK_NULL_HANDLE">VK_NULL_HANDLE</a>,
<code>basePipelineIndex</code> <strong class="purple">must</strong> be a valid index into the calling
command&#8217;s <code>pCreateInfos</code> parameter</p>
</li>
<li>
<p><a id="VUID-VkGraphicsPipelineCreateInfo-flags-00724"></a>
If <code>flags</code> contains the <code>VK_PIPELINE_CREATE_DERIVATIVE_BIT</code>
flag, and <code>basePipelineIndex</code> is not -1, <code>basePipelineHandle</code>
<strong class="purple">must</strong> be <a href="#VK_NULL_HANDLE">VK_NULL_HANDLE</a></p>
</li>
<li>
<p><a id="VUID-VkGraphicsPipelineCreateInfo-flags-00725"></a>
If <code>flags</code> contains the <code>VK_PIPELINE_CREATE_DERIVATIVE_BIT</code>
flag, and <code>basePipelineHandle</code> is not <a href="#VK_NULL_HANDLE">VK_NULL_HANDLE</a>,
<code>basePipelineIndex</code> <strong class="purple">must</strong> be -1</p>
</li>
<li>
<p><a id="VUID-VkGraphicsPipelineCreateInfo-stage-00726"></a>
The <code>stage</code> member of each element of <code>pStages</code> <strong class="purple">must</strong> be unique</p>
</li>
<li>
<p><a id="VUID-VkGraphicsPipelineCreateInfo-pStages-02095"></a>
The geometric shader stages provided in <code>pStages</code> <strong class="purple">must</strong> be either
from the mesh shading pipeline (<code>stage</code> is
<code>VK_SHADER_STAGE_TASK_BIT_NV</code> or <code>VK_SHADER_STAGE_MESH_BIT_NV</code>)
or from the primitive shading pipeline (<code>stage</code> is
<code>VK_SHADER_STAGE_VERTEX_BIT</code>,
<code>VK_SHADER_STAGE_TESSELLATION_CONTROL_BIT</code>,
<code>VK_SHADER_STAGE_TESSELLATION_EVALUATION_BIT</code>, or
<code>VK_SHADER_STAGE_GEOMETRY_BIT</code>).</p>
</li>
<li>
<p><a id="VUID-VkGraphicsPipelineCreateInfo-stage-02096"></a>
The <code>stage</code> member of one element of <code>pStages</code> <strong class="purple">must</strong> be either
<code>VK_SHADER_STAGE_VERTEX_BIT</code> or <code>VK_SHADER_STAGE_MESH_BIT_NV</code>.</p>
</li>
<li>
<p><a id="VUID-VkGraphicsPipelineCreateInfo-stage-00728"></a>
The <code>stage</code> member of each element of <code>pStages</code> <strong class="purple">must</strong> not be
<code>VK_SHADER_STAGE_COMPUTE_BIT</code></p>
</li>
<li>
<p><a id="VUID-VkGraphicsPipelineCreateInfo-pStages-00729"></a>
If <code>pStages</code> includes a tessellation control shader stage, it <strong class="purple">must</strong>
include a tessellation evaluation shader stage</p>
</li>
<li>
<p><a id="VUID-VkGraphicsPipelineCreateInfo-pStages-00730"></a>
If <code>pStages</code> includes a tessellation evaluation shader stage, it
<strong class="purple">must</strong> include a tessellation control shader stage</p>
</li>
<li>
<p><a id="VUID-VkGraphicsPipelineCreateInfo-pStages-00731"></a>
If <code>pStages</code> includes a tessellation control shader stage and a
tessellation evaluation shader stage, <code>pTessellationState</code> <strong class="purple">must</strong> be
a valid pointer to a valid <code>VkPipelineTessellationStateCreateInfo</code>
structure</p>
</li>
<li>
<p><a id="VUID-VkGraphicsPipelineCreateInfo-pStages-00732"></a>
If <code>pStages</code> includes tessellation shader stages, the shader code of
at least one stage <strong class="purple">must</strong> contain an <code>OpExecutionMode</code> instruction
that specifies the type of subdivision in the pipeline</p>
</li>
<li>
<p><a id="VUID-VkGraphicsPipelineCreateInfo-pStages-00733"></a>
If <code>pStages</code> includes tessellation shader stages, and the shader
code of both stages contain an <code>OpExecutionMode</code> instruction that
specifies the type of subdivision in the pipeline, they <strong class="purple">must</strong> both
specify the same subdivision mode</p>
</li>
<li>
<p><a id="VUID-VkGraphicsPipelineCreateInfo-pStages-00734"></a>
If <code>pStages</code> includes tessellation shader stages, the shader code of
at least one stage <strong class="purple">must</strong> contain an <code>OpExecutionMode</code> instruction
that specifies the output patch size in the pipeline</p>
</li>
<li>
<p><a id="VUID-VkGraphicsPipelineCreateInfo-pStages-00735"></a>
If <code>pStages</code> includes tessellation shader stages, and the shader
code of both contain an <code>OpExecutionMode</code> instruction that specifies
the out patch size in the pipeline, they <strong class="purple">must</strong> both specify the same
patch size</p>
</li>
<li>
<p><a id="VUID-VkGraphicsPipelineCreateInfo-pStages-00736"></a>
If <code>pStages</code> includes tessellation shader stages, the <code>topology</code>
member of <code>pInputAssembly</code> <strong class="purple">must</strong> be
<code>VK_PRIMITIVE_TOPOLOGY_PATCH_LIST</code></p>
</li>
<li>
<p><a id="VUID-VkGraphicsPipelineCreateInfo-topology-00737"></a>
If the <code>topology</code> member of <code>pInputAssembly</code> is
<code>VK_PRIMITIVE_TOPOLOGY_PATCH_LIST</code>, <code>pStages</code> <strong class="purple">must</strong> include
tessellation shader stages</p>
</li>
<li>
<p><a id="VUID-VkGraphicsPipelineCreateInfo-pStages-00738"></a>
If <code>pStages</code> includes a geometry shader stage, and does not include
any tessellation shader stages, its shader code <strong class="purple">must</strong> contain an
<code>OpExecutionMode</code> instruction that specifies an input primitive type
that is <a href="vkspec.html#shaders-geometry-execution">compatible</a> with the primitive
topology specified in <code>pInputAssembly</code></p>
</li>
<li>
<p><a id="VUID-VkGraphicsPipelineCreateInfo-pStages-00739"></a>
If <code>pStages</code> includes a geometry shader stage, and also includes
tessellation shader stages, its shader code <strong class="purple">must</strong> contain an
<code>OpExecutionMode</code> instruction that specifies an input primitive type
that is <a href="vkspec.html#shaders-geometry-execution">compatible</a> with the primitive
topology that is output by the tessellation stages</p>
</li>
<li>
<p><a id="VUID-VkGraphicsPipelineCreateInfo-pStages-00740"></a>
If <code>pStages</code> includes a fragment shader stage and a geometry shader
stage, and the fragment shader code reads from an input variable that is
decorated with <code>PrimitiveID</code>, then the geometry shader code <strong class="purple">must</strong>
write to a matching output variable, decorated with <code>PrimitiveID</code>, in
all execution paths</p>
</li>
<li>
<p><a id="VUID-VkGraphicsPipelineCreateInfo-pStages-00741"></a>
If <code>pStages</code> includes a fragment shader stage, its shader code <strong class="purple">must</strong>
not read from any input attachment that is defined as
<code>VK_ATTACHMENT_UNUSED</code> in <code>subpass</code></p>
</li>
<li>
<p><a id="VUID-VkGraphicsPipelineCreateInfo-pStages-00742"></a>
The shader code for the entry points identified by <code>pStages</code>, and
the rest of the state identified by this structure <strong class="purple">must</strong> adhere to the
pipeline linking rules described in the <a href="vkspec.html#interfaces">Shader Interfaces</a>
chapter</p>
</li>
<li>
<p><a id="VUID-VkGraphicsPipelineCreateInfo-subpass-01756"></a>
If rasterization is not disabled and <code>subpass</code> uses a depth/stencil
attachment in <code>renderPass</code> that has a layout of
<code>VK_IMAGE_LAYOUT_DEPTH_STENCIL_READ_ONLY_OPTIMAL</code>
or <code>VK_IMAGE_LAYOUT_DEPTH_READ_ONLY_STENCIL_ATTACHMENT_OPTIMAL</code>
in the <code>VkAttachmentReference</code> defined by <code>subpass</code>, the
<code>depthWriteEnable</code> member of <code>pDepthStencilState</code> <strong class="purple">must</strong> be
<code>VK_FALSE</code></p>
</li>
<li>
<p><a id="VUID-VkGraphicsPipelineCreateInfo-subpass-01757"></a>
If rasterization is not disabled and <code>subpass</code> uses a depth/stencil
attachment in <code>renderPass</code> that has a layout of
<code>VK_IMAGE_LAYOUT_DEPTH_STENCIL_READ_ONLY_OPTIMAL</code>
or <code>VK_IMAGE_LAYOUT_DEPTH_ATTACHMENT_STENCIL_READ_ONLY_OPTIMAL</code>
in the <code>VkAttachmentReference</code> defined by <code>subpass</code>, the
<code>failOp</code>, <code>passOp</code> and <code>depthFailOp</code> members of each of the
<code>front</code> and <code>back</code> members of <code>pDepthStencilState</code> <strong class="purple">must</strong> be
<code>VK_STENCIL_OP_KEEP</code></p>
</li>
<li>
<p><a id="VUID-VkGraphicsPipelineCreateInfo-blendEnable-02023"></a>
If rasterization is not disabled and the subpass uses color attachments,
then for each color attachment in the subpass the <code>blendEnable</code>
member of the corresponding element of the <code>pAttachment</code> member of
<code>pColorBlendState</code> <strong class="purple">must</strong> be <code>VK_FALSE</code> if the attached image&#8217;s
<a href="vkspec.html#resources-image-format-features">format features</a> does not contain
<code>VK_FORMAT_FEATURE_COLOR_ATTACHMENT_BLEND_BIT</code>.</p>
</li>
<li>
<p><a id="VUID-VkGraphicsPipelineCreateInfo-attachmentCount-00746"></a>
If rasterization is not disabled and the subpass uses color attachments,
the <code>attachmentCount</code> member of <code>pColorBlendState</code> <strong class="purple">must</strong> be
equal to the <code>colorAttachmentCount</code> used to create <code>subpass</code></p>
</li>
<li>
<p><a id="VUID-VkGraphicsPipelineCreateInfo-pDynamicStates-00747"></a>
If no element of the <code>pDynamicStates</code> member of <code>pDynamicState</code>
is <code>VK_DYNAMIC_STATE_VIEWPORT</code>, the <code>pViewports</code> member of
<code>pViewportState</code> <strong class="purple">must</strong> be a valid pointer to an array of
<code>pViewportState</code>::<code>viewportCount</code> valid <code>VkViewport</code>
structures</p>
</li>
<li>
<p><a id="VUID-VkGraphicsPipelineCreateInfo-pDynamicStates-00748"></a>
If no element of the <code>pDynamicStates</code> member of <code>pDynamicState</code>
is <code>VK_DYNAMIC_STATE_SCISSOR</code>, the <code>pScissors</code> member of
<code>pViewportState</code> <strong class="purple">must</strong> be a valid pointer to an array of
<code>pViewportState</code>::<code>scissorCount</code> <code>VkRect2D</code> structures</p>
</li>
<li>
<p><a id="VUID-VkGraphicsPipelineCreateInfo-pDynamicStates-00749"></a>
If the wide lines feature is not enabled, and no element of the
<code>pDynamicStates</code> member of <code>pDynamicState</code> is
<code>VK_DYNAMIC_STATE_LINE_WIDTH</code>, the <code>lineWidth</code> member of
<code>pRasterizationState</code> <strong class="purple">must</strong> be <code>1.0</code></p>
</li>
<li>
<p><a id="VUID-VkGraphicsPipelineCreateInfo-rasterizerDiscardEnable-00750"></a>
If the <code>rasterizerDiscardEnable</code> member of <code>pRasterizationState</code>
is <code>VK_FALSE</code>, <code>pViewportState</code> <strong class="purple">must</strong> be a valid pointer to a
valid <code>VkPipelineViewportStateCreateInfo</code> structure</p>
</li>
<li>
<p><a id="VUID-VkGraphicsPipelineCreateInfo-rasterizerDiscardEnable-00751"></a>
If the <code>rasterizerDiscardEnable</code> member of <code>pRasterizationState</code>
is <code>VK_FALSE</code>, <code>pMultisampleState</code> <strong class="purple">must</strong> be a valid pointer to a
valid <code>VkPipelineMultisampleStateCreateInfo</code> structure</p>
</li>
<li>
<p><a id="VUID-VkGraphicsPipelineCreateInfo-rasterizerDiscardEnable-00752"></a>
If the <code>rasterizerDiscardEnable</code> member of <code>pRasterizationState</code>
is <code>VK_FALSE</code>, and <code>subpass</code> uses a depth/stencil attachment,
<code>pDepthStencilState</code> <strong class="purple">must</strong> be a valid pointer to a valid
<code>VkPipelineDepthStencilStateCreateInfo</code> structure</p>
</li>
<li>
<p><a id="VUID-VkGraphicsPipelineCreateInfo-rasterizerDiscardEnable-00753"></a>
If the <code>rasterizerDiscardEnable</code> member of <code>pRasterizationState</code>
is <code>VK_FALSE</code>, and <code>subpass</code> uses color attachments,
<code>pColorBlendState</code> <strong class="purple">must</strong> be a valid pointer to a valid
<code>VkPipelineColorBlendStateCreateInfo</code> structure</p>
</li>
<li>
<p><a id="VUID-VkGraphicsPipelineCreateInfo-pDynamicStates-00754"></a>
If the depth bias clamping feature is not enabled, no element of the
<code>pDynamicStates</code> member of <code>pDynamicState</code> is
<code>VK_DYNAMIC_STATE_DEPTH_BIAS</code>, and the <code>depthBiasEnable</code> member
of <code>pRasterizationState</code> is <code>VK_TRUE</code>, the <code>depthBiasClamp</code>
member of <code>pRasterizationState</code> <strong class="purple">must</strong> be <code>0.0</code></p>
</li>
<li>
<p><a id="VUID-VkGraphicsPipelineCreateInfo-pDynamicStates-02510"></a>
If the <code><a href="vkspec.html#VK_EXT_depth_range_unrestricted" class="bare">html/vkspec.html#VK_EXT_depth_range_unrestricted</a></code> extension is not enabled
and no element of the <code>pDynamicStates</code> member of <code>pDynamicState</code>
is <code>VK_DYNAMIC_STATE_DEPTH_BOUNDS</code>, and the
<code>depthBoundsTestEnable</code> member of <code>pDepthStencilState</code> is
<code>VK_TRUE</code>, the <code>minDepthBounds</code> and <code>maxDepthBounds</code> members
of <code>pDepthStencilState</code> <strong class="purple">must</strong> be between <code>0.0</code> and <code>1.0</code>, inclusive</p>
</li>
<li>
<p><a id="VUID-VkGraphicsPipelineCreateInfo-pDynamicStates-01521"></a>
If no element of the <code>pDynamicStates</code> member of <code>pDynamicState</code>
is <code>VK_DYNAMIC_STATE_SAMPLE_LOCATIONS_EXT</code>, and the
<code>sampleLocationsEnable</code> member of a
<a href="#VkPipelineSampleLocationsStateCreateInfoEXT">VkPipelineSampleLocationsStateCreateInfoEXT</a> structure chained to
the <code>pNext</code> chain of <code>pMultisampleState</code> is <code>VK_TRUE</code>,
<code>sampleLocationsInfo.sampleLocationGridSize.width</code> <strong class="purple">must</strong> evenly
divide
<a href="#VkMultisamplePropertiesEXT">VkMultisamplePropertiesEXT</a>::<code>sampleLocationGridSize.width</code> as
returned by <a href="#vkGetPhysicalDeviceMultisamplePropertiesEXT">vkGetPhysicalDeviceMultisamplePropertiesEXT</a> with a
<code>samples</code> parameter equaling <code>rasterizationSamples</code></p>
</li>
<li>
<p><a id="VUID-VkGraphicsPipelineCreateInfo-pDynamicStates-01522"></a>
If no element of the <code>pDynamicStates</code> member of <code>pDynamicState</code>
is <code>VK_DYNAMIC_STATE_SAMPLE_LOCATIONS_EXT</code>, and the
<code>sampleLocationsEnable</code> member of a
<a href="#VkPipelineSampleLocationsStateCreateInfoEXT">VkPipelineSampleLocationsStateCreateInfoEXT</a> structure chained to
the <code>pNext</code> chain of <code>pMultisampleState</code> is <code>VK_TRUE</code>,
<code>sampleLocationsInfo.sampleLocationGridSize.height</code> <strong class="purple">must</strong> evenly
divide
<a href="#VkMultisamplePropertiesEXT">VkMultisamplePropertiesEXT</a>::<code>sampleLocationGridSize.height</code> as
returned by <a href="#vkGetPhysicalDeviceMultisamplePropertiesEXT">vkGetPhysicalDeviceMultisamplePropertiesEXT</a> with a
<code>samples</code> parameter equaling <code>rasterizationSamples</code></p>
</li>
<li>
<p><a id="VUID-VkGraphicsPipelineCreateInfo-pDynamicStates-01523"></a>
If no element of the <code>pDynamicStates</code> member of <code>pDynamicState</code>
is <code>VK_DYNAMIC_STATE_SAMPLE_LOCATIONS_EXT</code>, and the
<code>sampleLocationsEnable</code> member of a
<a href="#VkPipelineSampleLocationsStateCreateInfoEXT">VkPipelineSampleLocationsStateCreateInfoEXT</a> structure chained to
the <code>pNext</code> chain of <code>pMultisampleState</code> is <code>VK_TRUE</code>,
<code>sampleLocationsInfo.sampleLocationsPerPixel</code> <strong class="purple">must</strong> equal
<code>rasterizationSamples</code></p>
</li>
<li>
<p><a id="VUID-VkGraphicsPipelineCreateInfo-sampleLocationsEnable-01524"></a>
If the <code>sampleLocationsEnable</code> member of a
<a href="#VkPipelineSampleLocationsStateCreateInfoEXT">VkPipelineSampleLocationsStateCreateInfoEXT</a> structure chained to
the <code>pNext</code> chain of <code>pMultisampleState</code> is <code>VK_TRUE</code>, the
fragment shader code <strong class="purple">must</strong> not statically use the extended instruction
<code>InterpolateAtSample</code></p>
</li>
<li>
<p><a id="VUID-VkGraphicsPipelineCreateInfo-layout-00756"></a>
<code>layout</code> <strong class="purple">must</strong> be
<a href="vkspec.html#descriptorsets-pipelinelayout-consistency">consistent</a> with all
shaders specified in <code>pStages</code></p>
</li>
<li>
<p><a id="VUID-VkGraphicsPipelineCreateInfo-subpass-00757"></a>
If neither the <code>VK_AMD_mixed_attachment_samples</code> nor the
<code>VK_NV_framebuffer_mixed_samples</code> extensions are enabled, and if
<code>subpass</code> uses color and/or depth/stencil attachments, then the
<code>rasterizationSamples</code> member of <code>pMultisampleState</code> <strong class="purple">must</strong> be
the same as the sample count for those subpass attachments</p>
</li>
<li>
<p><a id="VUID-VkGraphicsPipelineCreateInfo-subpass-01505"></a>
If the <code>VK_AMD_mixed_attachment_samples</code> extension is enabled, and if
<code>subpass</code> uses color and/or depth/stencil attachments, then the
<code>rasterizationSamples</code> member of <code>pMultisampleState</code> <strong class="purple">must</strong> equal
the maximum of the sample counts of those subpass attachments</p>
</li>
<li>
<p><a id="VUID-VkGraphicsPipelineCreateInfo-subpass-01411"></a>
If the <code>VK_NV_framebuffer_mixed_samples</code> extension is enabled, and if
<code>subpass</code> has a depth/stencil attachment and depth test, stencil
test, or depth bounds test are enabled, then the
<code>rasterizationSamples</code> member of <code>pMultisampleState</code> <strong class="purple">must</strong> be
the same as the sample count of the depth/stencil attachment</p>
</li>
<li>
<p><a id="VUID-VkGraphicsPipelineCreateInfo-subpass-01412"></a>
If the <code>VK_NV_framebuffer_mixed_samples</code> extension is enabled, and if
<code>subpass</code> has any color attachments, then the
<code>rasterizationSamples</code> member of <code>pMultisampleState</code> <strong class="purple">must</strong> be
greater than or equal to the sample count for those subpass attachments</p>
</li>
<li>
<p><a id="VUID-VkGraphicsPipelineCreateInfo-subpass-00758"></a>
If <code>subpass</code> does not use any color and/or depth/stencil
attachments, then the <code>rasterizationSamples</code> member of
<code>pMultisampleState</code> <strong class="purple">must</strong> follow the rules for a
<a href="vkspec.html#renderpass-noattachments">zero-attachment subpass</a></p>
</li>
<li>
<p><a id="VUID-VkGraphicsPipelineCreateInfo-subpass-00759"></a>
<code>subpass</code> <strong class="purple">must</strong> be a valid subpass within <code>renderPass</code></p>
</li>
<li>
<p><a id="VUID-VkGraphicsPipelineCreateInfo-renderPass-00760"></a>
If the <code>renderPass</code> has multiview enabled and <code>subpass</code> has more
than one bit set in the view mask and <code>multiviewTessellationShader</code>
is not enabled, then <code>pStages</code> <strong class="purple">must</strong> not include tessellation
shaders.</p>
</li>
<li>
<p><a id="VUID-VkGraphicsPipelineCreateInfo-renderPass-00761"></a>
If the <code>renderPass</code> has multiview enabled and <code>subpass</code> has more
than one bit set in the view mask and <code>multiviewGeometryShader</code> is
not enabled, then <code>pStages</code> <strong class="purple">must</strong> not include a geometry shader.</p>
</li>
<li>
<p><a id="VUID-VkGraphicsPipelineCreateInfo-renderPass-00762"></a>
If the <code>renderPass</code> has multiview enabled and <code>subpass</code> has more
than one bit set in the view mask, shaders in the pipeline <strong class="purple">must</strong> not
write to the <code>Layer</code> built-in output</p>
</li>
<li>
<p><a id="VUID-VkGraphicsPipelineCreateInfo-renderPass-00763"></a>
If the <code>renderPass</code> has multiview enabled, then all shaders <strong class="purple">must</strong>
not include variables decorated with the <code>Layer</code> built-in decoration
in their interfaces.</p>
</li>
<li>
<p><a id="VUID-VkGraphicsPipelineCreateInfo-flags-00764"></a>
<code>flags</code> <strong class="purple">must</strong> not contain the <code>VK_PIPELINE_CREATE_DISPATCH_BASE</code>
flag.</p>
</li>
<li>
<p><a id="VUID-VkGraphicsPipelineCreateInfo-pStages-01565"></a>
If <code>pStages</code> includes a fragment shader stage and an input
attachment was referenced by the
<a href="#VkRenderPassInputAttachmentAspectCreateInfo">VkRenderPassInputAttachmentAspectCreateInfo</a> at <code>renderPass</code>
create time, its shader code <strong class="purple">must</strong> not read from any aspect that was not
specified in the <code>aspectMask</code> of the corresponding
<a href="#VkInputAttachmentAspectReference">VkInputAttachmentAspectReference</a> structure.</p>
</li>
<li>
<p><a id="VUID-VkGraphicsPipelineCreateInfo-layout-01688"></a>
The number of resources in <code>layout</code> accessible to each shader stage
that is used by the pipeline <strong class="purple">must</strong> be less than or equal to
<code>VkPhysicalDeviceLimits</code>::<code>maxPerStageResources</code></p>
</li>
<li>
<p><a id="VUID-VkGraphicsPipelineCreateInfo-pDynamicStates-01715"></a>
If no element of the <code>pDynamicStates</code> member of <code>pDynamicState</code>
is <code>VK_DYNAMIC_STATE_VIEWPORT_W_SCALING_NV</code>, and the
<code>viewportWScalingEnable</code> member of a
<a href="#VkPipelineViewportWScalingStateCreateInfoNV">VkPipelineViewportWScalingStateCreateInfoNV</a> structure, chained to
the <code>pNext</code> chain of <code>pViewportState</code>, is <code>VK_TRUE</code>, the
<code>pViewportWScalings</code> member of the
<a href="#VkPipelineViewportWScalingStateCreateInfoNV">VkPipelineViewportWScalingStateCreateInfoNV</a> <strong class="purple">must</strong> be a pointer to
an array of
<a href="#VkPipelineViewportWScalingStateCreateInfoNV">VkPipelineViewportWScalingStateCreateInfoNV</a>::<code>viewportCount</code>
valid <a href="#VkViewportWScalingNV">VkViewportWScalingNV</a> structures</p>
</li>
<li>
<p><a id="VUID-VkGraphicsPipelineCreateInfo-pStages-02097"></a>
If <code>pStages</code> includes a vertex shader stage, <code>pVertexInputState</code>
<strong class="purple">must</strong> be a valid pointer to a valid
<a href="#VkPipelineVertexInputStateCreateInfo">VkPipelineVertexInputStateCreateInfo</a> structure</p>
</li>
<li>
<p><a id="VUID-VkGraphicsPipelineCreateInfo-pStages-02098"></a>
If <code>pStages</code> includes a vertex shader stage,
<code>pInputAssemblyState</code> <strong class="purple">must</strong> be a valid pointer to a valid
<a href="#VkPipelineInputAssemblyStateCreateInfo">VkPipelineInputAssemblyStateCreateInfo</a> structure</p>
</li>
<li>
<p><a id="VUID-VkGraphicsPipelineCreateInfo-pStages-02317"></a>
The <code>Xfb</code> execution mode <strong class="purple">can</strong> be specified by only one shader stage
in <code>pStages</code></p>
</li>
<li>
<p><a id="VUID-VkGraphicsPipelineCreateInfo-pStages-02318"></a>
If any shader stage in <code>pStages</code> specifies <code>Xfb</code> execution mode
it <strong class="purple">must</strong> be the last vertex processing stage</p>
</li>
<li>
<p><a id="VUID-VkGraphicsPipelineCreateInfo-rasterizationStream-02319"></a>
If a
<code>VkPipelineRasterizationStateStreamCreateInfoEXT</code>::<code>rasterizationStream</code>
value other than zero is specified, all variables in the output
interface of the entry point being compiled decorated with
<code>Position</code>, <code>PointSize</code>, <code>ClipDistance</code>, or <code>CullDistance</code>
<strong class="purple">must</strong> all be decorated with identical <code>Stream</code> values that match the
<code>rasterizationStream</code></p>
</li>
<li>
<p><a id="VUID-VkGraphicsPipelineCreateInfo-rasterizationStream-02320"></a>
If
<code>VkPipelineRasterizationStateStreamCreateInfoEXT</code>::<code>rasterizationStream</code>
is zero, or not specified, all variables in the output interface of the
entry point being compiled decorated with <code>Position</code>, <code>PointSize</code>,
<code>ClipDistance</code>, or <code>CullDistance</code> <strong class="purple">must</strong> all be decorated with a
<code>Stream</code> value of zero, or <strong class="purple">must</strong> not specify the <code>Stream</code>
decoration</p>
</li>
<li>
<p><a id="VUID-VkGraphicsPipelineCreateInfo-geometryStreams-02321"></a>
If the last vertex processing stage is a geometry shader, and that
geometry shader uses the <code>GeometryStreams</code> capability, then
<code>VkPhysicalDeviceTransformFeedbackFeaturesEXT</code>::<code>geometryStreams</code>
feature <strong class="purple">must</strong> be enabled</p>
</li>
<li>
<p><a id="VUID-VkGraphicsPipelineCreateInfo-None-02322"></a>
If there are any mesh shader stages in the pipeline there <strong class="purple">must</strong> not be
any shader stage in the pipeline with a <code>Xfb</code> execution mode.</p>
</li>
</ul>
</div>
</div>
</div>
<div class="sidebarblock">
<div class="content">
<div class="title">Valid Usage (Implicit)</div>
<div class="ulist">
<ul>
<li>
<p><a id="VUID-VkGraphicsPipelineCreateInfo-sType-sType"></a> <code>sType</code> <strong class="purple">must</strong> be <code>VK_STRUCTURE_TYPE_GRAPHICS_PIPELINE_CREATE_INFO</code></p>
</li>
<li>
<p><a id="VUID-VkGraphicsPipelineCreateInfo-pNext-pNext"></a> Each <code>pNext</code> member of any structure (including this one) in the <code>pNext</code> chain <strong class="purple">must</strong> be either <code>NULL</code> or a pointer to a valid instance of <a href="#VkPipelineCreationFeedbackCreateInfoEXT">VkPipelineCreationFeedbackCreateInfoEXT</a>, <a href="#VkPipelineDiscardRectangleStateCreateInfoEXT">VkPipelineDiscardRectangleStateCreateInfoEXT</a>, or <a href="#VkPipelineRepresentativeFragmentTestStateCreateInfoNV">VkPipelineRepresentativeFragmentTestStateCreateInfoNV</a></p>
</li>
<li>
<p><a id="VUID-VkGraphicsPipelineCreateInfo-sType-unique"></a> Each <code>sType</code> member in the <code>pNext</code> chain <strong class="purple">must</strong> be unique</p>
</li>
<li>
<p><a id="VUID-VkGraphicsPipelineCreateInfo-flags-parameter"></a> <code>flags</code> <strong class="purple">must</strong> be a valid combination of <a href="#VkPipelineCreateFlagBits">VkPipelineCreateFlagBits</a> values</p>
</li>
<li>
<p><a id="VUID-VkGraphicsPipelineCreateInfo-pStages-parameter"></a> <code>pStages</code> <strong class="purple">must</strong> be a valid pointer to an array of <code>stageCount</code> valid <code>VkPipelineShaderStageCreateInfo</code> structures</p>
</li>
<li>
<p><a id="VUID-VkGraphicsPipelineCreateInfo-pRasterizationState-parameter"></a> <code>pRasterizationState</code> <strong class="purple">must</strong> be a valid pointer to a valid <code>VkPipelineRasterizationStateCreateInfo</code> structure</p>
</li>
<li>
<p><a id="VUID-VkGraphicsPipelineCreateInfo-pDynamicState-parameter"></a> If <code>pDynamicState</code> is not <code>NULL</code>, <code>pDynamicState</code> <strong class="purple">must</strong> be a valid pointer to a valid <code>VkPipelineDynamicStateCreateInfo</code> structure</p>
</li>
<li>
<p><a id="VUID-VkGraphicsPipelineCreateInfo-layout-parameter"></a> <code>layout</code> <strong class="purple">must</strong> be a valid <code>VkPipelineLayout</code> handle</p>
</li>
<li>
<p><a id="VUID-VkGraphicsPipelineCreateInfo-renderPass-parameter"></a> <code>renderPass</code> <strong class="purple">must</strong> be a valid <code>VkRenderPass</code> handle</p>
</li>
<li>
<p><a id="VUID-VkGraphicsPipelineCreateInfo-stageCount-arraylength"></a> <code>stageCount</code> <strong class="purple">must</strong> be greater than <code>0</code></p>
</li>
<li>
<p><a id="VUID-VkGraphicsPipelineCreateInfo-commonparent"></a> Each of <code>basePipelineHandle</code>, <code>layout</code>, and <code>renderPass</code> that are valid handles <strong class="purple">must</strong> have been created, allocated, or retrieved from the same <code>VkDevice</code></p>
</li>
</ul>
</div>
</div>
</div>
</div>
<div class="sect3">
<h4 id="_see_also_517">See Also</h4>
<div class="paragraph">
<p><a href="#VkPipeline">VkPipeline</a>, <a href="#VkPipelineColorBlendStateCreateInfo">VkPipelineColorBlendStateCreateInfo</a>, <a href="#VkPipelineCreateFlags">VkPipelineCreateFlags</a>, <a href="#VkPipelineDepthStencilStateCreateInfo">VkPipelineDepthStencilStateCreateInfo</a>, <a href="#VkPipelineDynamicStateCreateInfo">VkPipelineDynamicStateCreateInfo</a>, <a href="#VkPipelineInputAssemblyStateCreateInfo">VkPipelineInputAssemblyStateCreateInfo</a>, <a href="#VkPipelineLayout">VkPipelineLayout</a>, <a href="#VkPipelineMultisampleStateCreateInfo">VkPipelineMultisampleStateCreateInfo</a>, <a href="#VkPipelineRasterizationStateCreateInfo">VkPipelineRasterizationStateCreateInfo</a>, <a href="#VkPipelineShaderStageCreateInfo">VkPipelineShaderStageCreateInfo</a>, <a href="#VkPipelineTessellationStateCreateInfo">VkPipelineTessellationStateCreateInfo</a>, <a href="#VkPipelineVertexInputStateCreateInfo">VkPipelineVertexInputStateCreateInfo</a>, <a href="#VkPipelineViewportStateCreateInfo">VkPipelineViewportStateCreateInfo</a>, <a href="#VkRenderPass">VkRenderPass</a>, <a href="#VkStructureType">VkStructureType</a>, <a href="#vkCreateGraphicsPipelines">vkCreateGraphicsPipelines</a></p>
</div>
</div>
<div class="sect3">
<h4 id="_document_notes_517">Document Notes</h4>
<div class="paragraph">
<p>For more information, see the Vulkan Specification at URL</p>
</div>
<div class="paragraph">
<p><a href="https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VkGraphicsPipelineCreateInfo" class="bare">https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VkGraphicsPipelineCreateInfo</a></p>
</div>
<div class="paragraph">
<p>This page is extracted from the Vulkan Specification.
Fixes and changes should be made to the Specification, not directly.</p>
</div>
<div style="page-break-after: always;"></div>
</div>
</div>
<div class="sect2">
<h3 id="_vkhdrmetadataext3">VkHdrMetadataEXT(3)</h3>
<div class="sect3">
<h4 id="_name_518">Name</h4>
<div class="paragraph">
<p>VkHdrMetadataEXT - structure to specify Hdr metadata</p>
</div>
</div>
<div class="sect3">
<h4 id="_c_specification_518">C Specification</h4>
<div id="VkHdrMetadataEXT" class="listingblock">
<div class="content">
<pre class="highlight"><code class="language-c++" data-lang="c++">typedef struct VkHdrMetadataEXT {
    VkStructureType    sType;
    const void*        pNext;
    VkXYColorEXT       displayPrimaryRed;
    VkXYColorEXT       displayPrimaryGreen;
    VkXYColorEXT       displayPrimaryBlue;
    VkXYColorEXT       whitePoint;
    float              maxLuminance;
    float              minLuminance;
    float              maxContentLightLevel;
    float              maxFrameAverageLightLevel;
} VkHdrMetadataEXT;</code></pre>
</div>
</div>
</div>
<div class="sect3">
<h4 id="_members_155">Members</h4>
<div class="ulist">
<ul>
<li>
<p><code>sType</code> is the type of this structure.</p>
</li>
<li>
<p><code>pNext</code> is <code>NULL</code> or a pointer to an extension-specific structure.</p>
</li>
<li>
<p><code>displayPrimaryRed</code> is the mastering display&#8217;s red primary in
chromaticity coordinates</p>
</li>
<li>
<p><code>displayPrimaryGreen</code> is the mastering display&#8217;s green primary in
chromaticity coordinates</p>
</li>
<li>
<p><code>displayPrimaryBlue</code> is the mastering display&#8217;s blue primary in
chromaticity coordinates</p>
</li>
<li>
<p><code>whitePoint</code> is the mastering display&#8217;s white-point in chromaticity
coordinates</p>
</li>
<li>
<p><code>maxLuminance</code> is the maximum luminance of the mastering display in
nits</p>
</li>
<li>
<p><code>minLuminance</code> is the minimum luminance of the mastering display in
nits</p>
</li>
<li>
<p><code>maxContentLightLevel</code> is content&#8217;s maximum luminance in nits</p>
</li>
<li>
<p><code>maxFrameAverageLightLevel</code> is the maximum frame average light level
in nits</p>
</li>
</ul>
</div>
</div>
<div class="sect3">
<h4 id="_description_518">Description</h4>
<div class="sidebarblock">
<div class="content">
<div class="title">Valid Usage (Implicit)</div>
<div class="ulist">
<ul>
<li>
<p><a id="VUID-VkHdrMetadataEXT-sType-sType"></a> <code>sType</code> <strong class="purple">must</strong> be <code>VK_STRUCTURE_TYPE_HDR_METADATA_EXT</code></p>
</li>
<li>
<p><a id="VUID-VkHdrMetadataEXT-pNext-pNext"></a> <code>pNext</code> <strong class="purple">must</strong> be <code>NULL</code></p>
</li>
</ul>
</div>
</div>
</div>
<div class="admonitionblock note">
<table>
<tr>
<td class="icon">
<i class="fa icon-note" title="Note"></i>
</td>
<td class="content">
<div class="title">Note</div>
<div class="paragraph">
<p>The validity and use of this data is outside the scope of Vulkan.</p>
</div>
</td>
</tr>
</table>
</div>
</div>
<div class="sect3">
<h4 id="_see_also_518">See Also</h4>
<div class="paragraph">
<p><a href="#VkStructureType">VkStructureType</a>, <a href="#VkXYColorEXT">VkXYColorEXT</a>, <a href="#vkSetHdrMetadataEXT">vkSetHdrMetadataEXT</a></p>
</div>
</div>
<div class="sect3">
<h4 id="_document_notes_518">Document Notes</h4>
<div class="paragraph">
<p>For more information, see the Vulkan Specification at URL</p>
</div>
<div class="paragraph">
<p><a href="https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VkHdrMetadataEXT" class="bare">https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VkHdrMetadataEXT</a></p>
</div>
<div class="paragraph">
<p>This page is extracted from the Vulkan Specification.
Fixes and changes should be made to the Specification, not directly.</p>
</div>
<div style="page-break-after: always;"></div>
</div>
</div>
<div class="sect2">
<h3 id="_vkiossurfacecreateinfomvk3">VkIOSSurfaceCreateInfoMVK(3)</h3>
<div class="sect3">
<h4 id="_name_519">Name</h4>
<div class="paragraph">
<p>VkIOSSurfaceCreateInfoMVK - Structure specifying parameters of a newly created iOS surface object</p>
</div>
</div>
<div class="sect3">
<h4 id="_c_specification_519">C Specification</h4>
<div class="paragraph">
<p>The <a href="#VkIOSSurfaceCreateInfoMVK">VkIOSSurfaceCreateInfoMVK</a> structure is defined as:</p>
</div>
<div id="VkIOSSurfaceCreateInfoMVK" class="listingblock">
<div class="content">
<pre class="highlight"><code class="language-c++" data-lang="c++">typedef struct VkIOSSurfaceCreateInfoMVK {
    VkStructureType               sType;
    const void*                   pNext;
    VkIOSSurfaceCreateFlagsMVK    flags;
    const void*                   pView;
} VkIOSSurfaceCreateInfoMVK;</code></pre>
</div>
</div>
</div>
<div class="sect3">
<h4 id="_members_156">Members</h4>
<div class="ulist">
<ul>
<li>
<p><code>sType</code> is the type of this structure.</p>
</li>
<li>
<p><code>pNext</code> is <code>NULL</code> or a pointer to an extension-specific structure.</p>
</li>
<li>
<p><code>flags</code> is reserved for future use.</p>
</li>
<li>
<p><code>pView</code> is a reference to a <code>UIView</code> object which will display
this surface.
This <code>UIView</code> <strong class="purple">must</strong> be backed by a <code>CALayer</code> instance of type
<a href="#CAMetalLayer">CAMetalLayer</a>.</p>
</li>
</ul>
</div>
</div>
<div class="sect3">
<h4 id="_description_519">Description</h4>
<div class="sidebarblock">
<div class="content">
<div class="title">Valid Usage</div>
<div class="ulist">
<ul>
<li>
<p><a id="VUID-VkIOSSurfaceCreateInfoMVK-pView-01316"></a>
<code>pView</code> <strong class="purple">must</strong> be a valid <code>UIView</code> and <strong class="purple">must</strong> be backed by a
<code>CALayer</code> instance of type <a href="#CAMetalLayer">CAMetalLayer</a>.</p>
</li>
</ul>
</div>
</div>
</div>
<div class="sidebarblock">
<div class="content">
<div class="title">Valid Usage (Implicit)</div>
<div class="ulist">
<ul>
<li>
<p><a id="VUID-VkIOSSurfaceCreateInfoMVK-sType-sType"></a> <code>sType</code> <strong class="purple">must</strong> be <code>VK_STRUCTURE_TYPE_IOS_SURFACE_CREATE_INFO_MVK</code></p>
</li>
<li>
<p><a id="VUID-VkIOSSurfaceCreateInfoMVK-pNext-pNext"></a> <code>pNext</code> <strong class="purple">must</strong> be <code>NULL</code></p>
</li>
<li>
<p><a id="VUID-VkIOSSurfaceCreateInfoMVK-flags-zerobitmask"></a> <code>flags</code> <strong class="purple">must</strong> be <code>0</code></p>
</li>
</ul>
</div>
</div>
</div>
</div>
<div class="sect3">
<h4 id="_see_also_519">See Also</h4>
<div class="paragraph">
<p><a href="#VkIOSSurfaceCreateFlagsMVK">VkIOSSurfaceCreateFlagsMVK</a>, <a href="#VkStructureType">VkStructureType</a>, <a href="#vkCreateIOSSurfaceMVK">vkCreateIOSSurfaceMVK</a></p>
</div>
</div>
<div class="sect3">
<h4 id="_document_notes_519">Document Notes</h4>
<div class="paragraph">
<p>For more information, see the Vulkan Specification at URL</p>
</div>
<div class="paragraph">
<p><a href="https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VkIOSSurfaceCreateInfoMVK" class="bare">https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VkIOSSurfaceCreateInfoMVK</a></p>
</div>
<div class="paragraph">
<p>This page is extracted from the Vulkan Specification.
Fixes and changes should be made to the Specification, not directly.</p>
</div>
<div style="page-break-after: always;"></div>
</div>
</div>
<div class="sect2">
<h3 id="_vkimageblit3">VkImageBlit(3)</h3>
<div class="sect3">
<h4 id="_name_520">Name</h4>
<div class="paragraph">
<p>VkImageBlit - Structure specifying an image blit operation</p>
</div>
</div>
<div class="sect3">
<h4 id="_c_specification_520">C Specification</h4>
<div class="paragraph">
<p>The <code>VkImageBlit</code> structure is defined as:</p>
</div>
<div id="VkImageBlit" class="listingblock">
<div class="content">
<pre class="highlight"><code class="language-c++" data-lang="c++">typedef struct VkImageBlit {
    VkImageSubresourceLayers    srcSubresource;
    VkOffset3D                  srcOffsets[2];
    VkImageSubresourceLayers    dstSubresource;
    VkOffset3D                  dstOffsets[2];
} VkImageBlit;</code></pre>
</div>
</div>
</div>
<div class="sect3">
<h4 id="_members_157">Members</h4>
<div class="ulist">
<ul>
<li>
<p><code>srcSubresource</code> is the subresource to blit from.</p>
</li>
<li>
<p><code>srcOffsets</code> is an array of two <a href="#VkOffset3D">VkOffset3D</a> structures
specifying the bounds of the source region within <code>srcSubresource</code>.</p>
</li>
<li>
<p><code>dstSubresource</code> is the subresource to blit into.</p>
</li>
<li>
<p><code>dstOffsets</code> is an array of two <a href="#VkOffset3D">VkOffset3D</a> structures
specifying the bounds of the destination region within
<code>dstSubresource</code>.</p>
</li>
</ul>
</div>
</div>
<div class="sect3">
<h4 id="_description_520">Description</h4>
<div class="paragraph">
<p>For each element of the <code>pRegions</code> array, a blit operation is performed
the specified source and destination regions.</p>
</div>
<div class="sidebarblock">
<div class="content">
<div class="title">Valid Usage</div>
<div class="ulist">
<ul>
<li>
<p><a id="VUID-VkImageBlit-aspectMask-00238"></a>
The <code>aspectMask</code> member of <code>srcSubresource</code> and
<code>dstSubresource</code> <strong class="purple">must</strong> match</p>
</li>
<li>
<p><a id="VUID-VkImageBlit-layerCount-00239"></a>
The <code>layerCount</code> member of <code>srcSubresource</code> and
<code>dstSubresource</code> <strong class="purple">must</strong> match</p>
</li>
<li>
<p><a id="VUID-VkImageBlit-srcImage-00240"></a>
If either of the calling command&#8217;s <code>srcImage</code> or <code>dstImage</code>
parameters are of <a href="#VkImageType">VkImageType</a> <code>VK_IMAGE_TYPE_3D</code>, the
<code>baseArrayLayer</code> and <code>layerCount</code> members of both
<code>srcSubresource</code> and <code>dstSubresource</code> <strong class="purple">must</strong> be <code>0</code> and <code>1</code>,
respectively</p>
</li>
<li>
<p><a id="VUID-VkImageBlit-aspectMask-00241"></a>
The <code>aspectMask</code> member of <code>srcSubresource</code> <strong class="purple">must</strong> specify
aspects present in the calling command&#8217;s <code>srcImage</code></p>
</li>
<li>
<p><a id="VUID-VkImageBlit-aspectMask-00242"></a>
The <code>aspectMask</code> member of <code>dstSubresource</code> <strong class="purple">must</strong> specify
aspects present in the calling command&#8217;s <code>dstImage</code></p>
</li>
<li>
<p><a id="VUID-VkImageBlit-srcOffset-00243"></a>
<code>srcOffset</code>[0].<code>x</code> and <code>srcOffset</code>[1].<code>x</code> <strong class="purple">must</strong> both be
greater than or equal to <code>0</code> and less than or equal to the source image
subresource width</p>
</li>
<li>
<p><a id="VUID-VkImageBlit-srcOffset-00244"></a>
<code>srcOffset</code>[0].<code>y</code> and <code>srcOffset</code>[1].<code>y</code> <strong class="purple">must</strong> both be
greater than or equal to <code>0</code> and less than or equal to the source image
subresource height</p>
</li>
<li>
<p><a id="VUID-VkImageBlit-srcImage-00245"></a>
If the calling command&#8217;s <code>srcImage</code> is of type
<code>VK_IMAGE_TYPE_1D</code>, then <code>srcOffset</code>[0].y <strong class="purple">must</strong> be <code>0</code> and
<code>srcOffset</code>[1].y <strong class="purple">must</strong> be <code>1</code>.</p>
</li>
<li>
<p><a id="VUID-VkImageBlit-srcOffset-00246"></a>
<code>srcOffset</code>[0].<code>z</code> and <code>srcOffset</code>[1].<code>z</code> <strong class="purple">must</strong> both be
greater than or equal to <code>0</code> and less than or equal to the source image
subresource depth</p>
</li>
<li>
<p><a id="VUID-VkImageBlit-srcImage-00247"></a>
If the calling command&#8217;s <code>srcImage</code> is of type
<code>VK_IMAGE_TYPE_1D</code> or <code>VK_IMAGE_TYPE_2D</code>, then
<code>srcOffset</code>[0].z <strong class="purple">must</strong> be <code>0</code> and <code>srcOffset</code>[1].z <strong class="purple">must</strong> be <code>1</code>.</p>
</li>
<li>
<p><a id="VUID-VkImageBlit-dstOffset-00248"></a>
<code>dstOffset</code>[0].<code>x</code> and <code>dstOffset</code>[1].<code>x</code> <strong class="purple">must</strong> both be
greater than or equal to <code>0</code> and less than or equal to the destination
image subresource width</p>
</li>
<li>
<p><a id="VUID-VkImageBlit-dstOffset-00249"></a>
<code>dstOffset</code>[0].<code>y</code> and <code>dstOffset</code>[1].<code>y</code> <strong class="purple">must</strong> both be
greater than or equal to <code>0</code> and less than or equal to the destination
image subresource height</p>
</li>
<li>
<p><a id="VUID-VkImageBlit-dstImage-00250"></a>
If the calling command&#8217;s <code>dstImage</code> is of type
<code>VK_IMAGE_TYPE_1D</code>, then <code>dstOffset</code>[0].y <strong class="purple">must</strong> be <code>0</code> and
<code>dstOffset</code>[1].y <strong class="purple">must</strong> be <code>1</code>.</p>
</li>
<li>
<p><a id="VUID-VkImageBlit-dstOffset-00251"></a>
<code>dstOffset</code>[0].<code>z</code> and <code>dstOffset</code>[1].<code>z</code> <strong class="purple">must</strong> both be
greater than or equal to <code>0</code> and less than or equal to the destination
image subresource depth</p>
</li>
<li>
<p><a id="VUID-VkImageBlit-dstImage-00252"></a>
If the calling command&#8217;s <code>dstImage</code> is of type
<code>VK_IMAGE_TYPE_1D</code> or <code>VK_IMAGE_TYPE_2D</code>, then
<code>dstOffset</code>[0].z <strong class="purple">must</strong> be <code>0</code> and <code>dstOffset</code>[1].z <strong class="purple">must</strong> be <code>1</code>.</p>
</li>
</ul>
</div>
</div>
</div>
<div class="sidebarblock">
<div class="content">
<div class="title">Valid Usage (Implicit)</div>
<div class="ulist">
<ul>
<li>
<p><a id="VUID-VkImageBlit-srcSubresource-parameter"></a> <code>srcSubresource</code> <strong class="purple">must</strong> be a valid <code>VkImageSubresourceLayers</code> structure</p>
</li>
<li>
<p><a id="VUID-VkImageBlit-dstSubresource-parameter"></a> <code>dstSubresource</code> <strong class="purple">must</strong> be a valid <code>VkImageSubresourceLayers</code> structure</p>
</li>
</ul>
</div>
</div>
</div>
</div>
<div class="sect3">
<h4 id="_see_also_520">See Also</h4>
<div class="paragraph">
<p><a href="#VkImageSubresourceLayers">VkImageSubresourceLayers</a>, <a href="#VkOffset3D">VkOffset3D</a>, <a href="#vkCmdBlitImage">vkCmdBlitImage</a></p>
</div>
</div>
<div class="sect3">
<h4 id="_document_notes_520">Document Notes</h4>
<div class="paragraph">
<p>For more information, see the Vulkan Specification at URL</p>
</div>
<div class="paragraph">
<p><a href="https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VkImageBlit" class="bare">https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VkImageBlit</a></p>
</div>
<div class="paragraph">
<p>This page is extracted from the Vulkan Specification.
Fixes and changes should be made to the Specification, not directly.</p>
</div>
<div style="page-break-after: always;"></div>
</div>
</div>
<div class="sect2">
<h3 id="_vkimagecopy3">VkImageCopy(3)</h3>
<div class="sect3">
<h4 id="_name_521">Name</h4>
<div class="paragraph">
<p>VkImageCopy - Structure specifying an image copy operation</p>
</div>
</div>
<div class="sect3">
<h4 id="_c_specification_521">C Specification</h4>
<div class="paragraph">
<p>The <code>VkImageCopy</code> structure is defined as:</p>
</div>
<div id="VkImageCopy" class="listingblock">
<div class="content">
<pre class="highlight"><code class="language-c++" data-lang="c++">typedef struct VkImageCopy {
    VkImageSubresourceLayers    srcSubresource;
    VkOffset3D                  srcOffset;
    VkImageSubresourceLayers    dstSubresource;
    VkOffset3D                  dstOffset;
    VkExtent3D                  extent;
} VkImageCopy;</code></pre>
</div>
</div>
</div>
<div class="sect3">
<h4 id="_members_158">Members</h4>
<div class="ulist">
<ul>
<li>
<p><code>srcSubresource</code> and <code>dstSubresource</code> are
<a href="#VkImageSubresourceLayers">VkImageSubresourceLayers</a> structures specifying the image
subresources of the images used for the source and destination image
data, respectively.</p>
</li>
<li>
<p><code>srcOffset</code> and <code>dstOffset</code> select the initial <code>x</code>, <code>y</code>,
and <code>z</code> offsets in texels of the sub-regions of the source and
destination image data.</p>
</li>
<li>
<p><code>extent</code> is the size in texels of the image to copy in <code>width</code>,
<code>height</code> and <code>depth</code>.</p>
</li>
</ul>
</div>
</div>
<div class="sect3">
<h4 id="_description_521">Description</h4>
<div class="paragraph">
<p>For <code>VK_IMAGE_TYPE_3D</code> images, copies are performed slice by slice
starting with the <code>z</code> member of the <code>srcOffset</code> or <code>dstOffset</code>,
and copying <code>depth</code> slices.
For images with multiple layers, copies are performed layer by layer
starting with the <code>baseArrayLayer</code> member of the <code>srcSubresource</code> or
<code>dstSubresource</code> and copying <code>layerCount</code> layers.
Image data <strong class="purple">can</strong> be copied between images with different image types.
If one image is <code>VK_IMAGE_TYPE_3D</code> and the other image is
<code>VK_IMAGE_TYPE_2D</code> with multiple layers, then each slice is copied to or
from a different layer.</p>
</div>
<div class="paragraph">
<p>Copies involving a <a href="vkspec.html#formats-requiring-sampler-ycbcr-conversion">multi-planar image format</a> specify the region to be copied in terms of the
<em>plane</em> to be copied, not the coordinates of the multi-planar image.
This means that copies accessing the R/B planes of &#8220;<code>_422</code>&#8221; format
images <strong class="purple">must</strong> fit the copied region within half the <code>width</code> of the parent
image, and that copies accessing the R/B planes of &#8220;<code>_420</code>&#8221; format
images <strong class="purple">must</strong> fit the copied region within half the <code>width</code> and
<code>height</code> of the parent image.</p>
</div>
<div class="sidebarblock">
<div class="content">
<div class="title">Valid Usage</div>
<div class="ulist">
<ul>
<li>
<p><a id="VUID-VkImageCopy-srcImage-01551"></a>
If neither the calling command&#8217;s <code>srcImage</code> nor the calling
command&#8217;s <code>dstImage</code> has a
<a href="vkspec.html#formats-requiring-sampler-ycbcr-conversion">multi-planar image
format</a> then the <code>aspectMask</code> member of <code>srcSubresource</code> and
<code>dstSubresource</code> <strong class="purple">must</strong> match</p>
</li>
<li>
<p><a id="VUID-VkImageCopy-srcImage-01552"></a>
If the calling command&#8217;s <code>srcImage</code> has a <a href="#VkFormat">VkFormat</a> with
<a href="vkspec.html#formats-requiring-sampler-ycbcr-conversion">two planes</a> then the
<code>srcSubresource</code> <code>aspectMask</code> <strong class="purple">must</strong> be
<code>VK_IMAGE_ASPECT_PLANE_0_BIT</code> or <code>VK_IMAGE_ASPECT_PLANE_1_BIT</code></p>
</li>
<li>
<p><a id="VUID-VkImageCopy-srcImage-01553"></a>
If the calling command&#8217;s <code>srcImage</code> has a <a href="#VkFormat">VkFormat</a> with
<a href="vkspec.html#formats-requiring-sampler-ycbcr-conversion">three planes</a> then the
<code>srcSubresource</code> <code>aspectMask</code> <strong class="purple">must</strong> be
<code>VK_IMAGE_ASPECT_PLANE_0_BIT</code>, <code>VK_IMAGE_ASPECT_PLANE_1_BIT</code>, or
<code>VK_IMAGE_ASPECT_PLANE_2_BIT</code></p>
</li>
<li>
<p><a id="VUID-VkImageCopy-dstImage-01554"></a>
If the calling command&#8217;s <code>dstImage</code> has a <a href="#VkFormat">VkFormat</a> with
<a href="vkspec.html#formats-requiring-sampler-ycbcr-conversion">two planes</a> then the
<code>dstSubresource</code> <code>aspectMask</code> <strong class="purple">must</strong> be
<code>VK_IMAGE_ASPECT_PLANE_0_BIT</code> or <code>VK_IMAGE_ASPECT_PLANE_1_BIT</code></p>
</li>
<li>
<p><a id="VUID-VkImageCopy-dstImage-01555"></a>
If the calling command&#8217;s <code>dstImage</code> has a <a href="#VkFormat">VkFormat</a> with
<a href="vkspec.html#formats-requiring-sampler-ycbcr-conversion">three planes</a> then the
<code>dstSubresource</code> <code>aspectMask</code> <strong class="purple">must</strong> be
<code>VK_IMAGE_ASPECT_PLANE_0_BIT</code>, <code>VK_IMAGE_ASPECT_PLANE_1_BIT</code>, or
<code>VK_IMAGE_ASPECT_PLANE_2_BIT</code></p>
</li>
<li>
<p><a id="VUID-VkImageCopy-srcImage-01556"></a>
If the calling command&#8217;s <code>srcImage</code> has a
<a href="vkspec.html#formats-requiring-sampler-ycbcr-conversion">multi-planar image format</a>
and the <code>dstImage</code> does not have a multi-planar image format, the
<code>dstSubresource</code> <code>aspectMask</code> <strong class="purple">must</strong> be
<code>VK_IMAGE_ASPECT_COLOR_BIT</code></p>
</li>
<li>
<p><a id="VUID-VkImageCopy-dstImage-01557"></a>
If the calling command&#8217;s <code>dstImage</code> has a
<a href="vkspec.html#formats-requiring-sampler-ycbcr-conversion">multi-planar image format</a>
and the <code>srcImage</code> does not have a multi-planar image format, the
<code>srcSubresource</code> <code>aspectMask</code> <strong class="purple">must</strong> be
<code>VK_IMAGE_ASPECT_COLOR_BIT</code></p>
</li>
<li>
<p><a id="VUID-VkImageCopy-extent-00140"></a>
The number of slices of the <code>extent</code> (for 3D) or layers of the
<code>srcSubresource</code> (for non-3D) <strong class="purple">must</strong> match the number of slices of
the <code>extent</code> (for 3D) or layers of the <code>dstSubresource</code> (for
non-3D)</p>
</li>
<li>
<p><a id="VUID-VkImageCopy-srcImage-00141"></a>
If either of the calling command&#8217;s <code>srcImage</code> or <code>dstImage</code>
parameters are of <a href="#VkImageType">VkImageType</a> <code>VK_IMAGE_TYPE_3D</code>, the
<code>baseArrayLayer</code> and <code>layerCount</code> members of the corresponding
subresource <strong class="purple">must</strong> be <code>0</code> and <code>1</code>, respectively</p>
</li>
<li>
<p><a id="VUID-VkImageCopy-aspectMask-00142"></a>
The <code>aspectMask</code> member of <code>srcSubresource</code> <strong class="purple">must</strong> specify
aspects present in the calling command&#8217;s <code>srcImage</code></p>
</li>
<li>
<p><a id="VUID-VkImageCopy-aspectMask-00143"></a>
The <code>aspectMask</code> member of <code>dstSubresource</code> <strong class="purple">must</strong> specify
aspects present in the calling command&#8217;s <code>dstImage</code></p>
</li>
<li>
<p><a id="VUID-VkImageCopy-srcOffset-00144"></a>
<code>srcOffset.x</code> and <span class="eq">(<code>extent.width</code> + 
<code>srcOffset.x</code>)</span> <strong class="purple">must</strong> both be greater than or equal to <code>0</code> and less
than or equal to the source image subresource width</p>
</li>
<li>
<p><a id="VUID-VkImageCopy-srcOffset-00145"></a>
<code>srcOffset.y</code> and <span class="eq">(<code>extent.height</code> + 
<code>srcOffset.y</code>)</span> <strong class="purple">must</strong> both be greater than or equal to <code>0</code> and less
than or equal to the source image subresource height</p>
</li>
<li>
<p><a id="VUID-VkImageCopy-srcImage-00146"></a>
If the calling command&#8217;s <code>srcImage</code> is of type
<code>VK_IMAGE_TYPE_1D</code>, then <code>srcOffset.y</code> <strong class="purple">must</strong> be <code>0</code> and
<code>extent.height</code> <strong class="purple">must</strong> be <code>1</code>.</p>
</li>
<li>
<p><a id="VUID-VkImageCopy-srcOffset-00147"></a>
<code>srcOffset.z</code> and <span class="eq">(<code>extent.depth</code> + 
<code>srcOffset.z</code>)</span> <strong class="purple">must</strong> both be greater than or equal to <code>0</code> and less
than or equal to the source image subresource depth</p>
</li>
<li>
<p><a id="VUID-VkImageCopy-srcImage-01785"></a>
If the calling command&#8217;s <code>srcImage</code> is of type
<code>VK_IMAGE_TYPE_1D</code>, then <code>srcOffset.z</code> <strong class="purple">must</strong> be <code>0</code> and
<code>extent.depth</code> <strong class="purple">must</strong> be <code>1</code>.</p>
</li>
<li>
<p><a id="VUID-VkImageCopy-dstImage-01786"></a>
If the calling command&#8217;s <code>dstImage</code> is of type
<code>VK_IMAGE_TYPE_1D</code>, then <code>dstOffset.z</code> <strong class="purple">must</strong> be <code>0</code> and
<code>extent.depth</code> <strong class="purple">must</strong> be <code>1</code>.</p>
</li>
<li>
<p><a id="VUID-VkImageCopy-srcImage-01787"></a>
If the calling command&#8217;s <code>srcImage</code> is of type
<code>VK_IMAGE_TYPE_2D</code>, then <code>srcOffset.z</code> <strong class="purple">must</strong> be <code>0</code>.</p>
</li>
<li>
<p><a id="VUID-VkImageCopy-dstImage-01788"></a>
If the calling command&#8217;s <code>dstImage</code> is of type
<code>VK_IMAGE_TYPE_2D</code>, then <code>dstOffset.z</code> <strong class="purple">must</strong> be <code>0</code>.</p>
</li>
<li>
<p><a id="VUID-VkImageCopy-srcImage-01790"></a>
If both <code>srcImage</code> and <code>dstImage</code> are of type
<code>VK_IMAGE_TYPE_2D</code> then <code>extent.depth</code> <strong class="purple">must</strong> be <code>1</code>.</p>
</li>
<li>
<p><a id="VUID-VkImageCopy-srcImage-01791"></a>
If the calling command&#8217;s <code>srcImage</code> is of type
<code>VK_IMAGE_TYPE_2D</code>, and the <code>dstImage</code> is of type
<code>VK_IMAGE_TYPE_3D</code>, then <code>extent.depth</code> <strong class="purple">must</strong> equal to the
<code>layerCount</code> member of <code>srcSubresource</code>.</p>
</li>
<li>
<p><a id="VUID-VkImageCopy-dstImage-01792"></a>
If the calling command&#8217;s <code>dstImage</code> is of type
<code>VK_IMAGE_TYPE_2D</code>, and the <code>srcImage</code> is of type
<code>VK_IMAGE_TYPE_3D</code>, then <code>extent.depth</code> <strong class="purple">must</strong> equal to the
<code>layerCount</code> member of <code>dstSubresource</code>.</p>
</li>
<li>
<p><a id="VUID-VkImageCopy-dstOffset-00150"></a>
<code>dstOffset.x</code> and <span class="eq">(<code>extent.width</code> + 
<code>dstOffset.x</code>)</span> <strong class="purple">must</strong> both be greater than or equal to <code>0</code> and less
than or equal to the destination image subresource width</p>
</li>
<li>
<p><a id="VUID-VkImageCopy-dstOffset-00151"></a>
<code>dstOffset.y</code> and <span class="eq">(<code>extent.height</code> + 
<code>dstOffset.y</code>)</span> <strong class="purple">must</strong> both be greater than or equal to <code>0</code> and less
than or equal to the destination image subresource height</p>
</li>
<li>
<p><a id="VUID-VkImageCopy-dstImage-00152"></a>
If the calling command&#8217;s <code>dstImage</code> is of type
<code>VK_IMAGE_TYPE_1D</code>, then <code>dstOffset.y</code> <strong class="purple">must</strong> be <code>0</code> and
<code>extent.height</code> <strong class="purple">must</strong> be <code>1</code>.</p>
</li>
<li>
<p><a id="VUID-VkImageCopy-dstOffset-00153"></a>
<code>dstOffset.z</code> and <span class="eq">(<code>extent.depth</code> + 
<code>dstOffset.z</code>)</span> <strong class="purple">must</strong> both be greater than or equal to <code>0</code> and less
than or equal to the destination image subresource depth</p>
</li>
<li>
<p><a id="VUID-VkImageCopy-srcImage-01727"></a>
If the calling command&#8217;s <code>srcImage</code> is a compressed image,
or a <em>single-plane</em>, &#8220;<code>_422</code>&#8221; image format,
all members of <code>srcOffset</code> <strong class="purple">must</strong> be a multiple of the corresponding
dimensions of the compressed texel block</p>
</li>
<li>
<p><a id="VUID-VkImageCopy-srcImage-01728"></a>
If the calling command&#8217;s <code>srcImage</code> is a compressed image,
or a <em>single-plane</em>, &#8220;<code>_422</code>&#8221; image format,
<code>extent.width</code> <strong class="purple">must</strong> be a multiple of the compressed texel block
width or <span class="eq">(<code>extent.width</code> +  <code>srcOffset.x</code>)</span> <strong class="purple">must</strong> equal
the source image subresource width</p>
</li>
<li>
<p><a id="VUID-VkImageCopy-srcImage-01729"></a>
If the calling command&#8217;s <code>srcImage</code> is a compressed image,
or a <em>single-plane</em>, &#8220;<code>_422</code>&#8221; image format,
<code>extent.height</code> <strong class="purple">must</strong> be a multiple of the compressed texel block
height or <span class="eq">(<code>extent.height</code> +  <code>srcOffset.y</code>)</span> <strong class="purple">must</strong>
equal the source image subresource height</p>
</li>
<li>
<p><a id="VUID-VkImageCopy-srcImage-01730"></a>
If the calling command&#8217;s <code>srcImage</code> is a compressed image,
or a <em>single-plane</em>, &#8220;<code>_422</code>&#8221; image format,
<code>extent.depth</code> <strong class="purple">must</strong> be a multiple of the compressed texel block
depth or <span class="eq">(<code>extent.depth</code> +  <code>srcOffset.z</code>)</span> <strong class="purple">must</strong> equal
the source image subresource depth</p>
</li>
<li>
<p><a id="VUID-VkImageCopy-dstImage-01731"></a>
If the calling command&#8217;s <code>dstImage</code> is a compressed format image,
or a <em>single-plane</em>, &#8220;<code>_422</code>&#8221; image format,
all members of <code>dstOffset</code> <strong class="purple">must</strong> be a multiple of the corresponding
dimensions of the compressed texel block</p>
</li>
<li>
<p><a id="VUID-VkImageCopy-dstImage-01732"></a>
If the calling command&#8217;s <code>dstImage</code> is a compressed format image,
or a <em>single-plane</em>, &#8220;<code>_422</code>&#8221; image format,
<code>extent.width</code> <strong class="purple">must</strong> be a multiple of the compressed texel block
width or <span class="eq">(<code>extent.width</code> +  <code>dstOffset.x</code>)</span> <strong class="purple">must</strong> equal
the destination image subresource width</p>
</li>
<li>
<p><a id="VUID-VkImageCopy-dstImage-01733"></a>
If the calling command&#8217;s <code>dstImage</code> is a compressed format image,
or a <em>single-plane</em>, &#8220;<code>_422</code>&#8221; image format,
<code>extent.height</code> <strong class="purple">must</strong> be a multiple of the compressed texel block
height or <span class="eq">(<code>extent.height</code> +  <code>dstOffset.y</code>)</span> <strong class="purple">must</strong>
equal the destination image subresource height</p>
</li>
<li>
<p><a id="VUID-VkImageCopy-dstImage-01734"></a>
If the calling command&#8217;s <code>dstImage</code> is a compressed format image,
or a <em>single-plane</em>, &#8220;<code>_422</code>&#8221; image format,
<code>extent.depth</code> <strong class="purple">must</strong> be a multiple of the compressed texel block
depth or <span class="eq">(<code>extent.depth</code> +  <code>dstOffset.z</code>)</span> <strong class="purple">must</strong> equal
the destination image subresource depth</p>
</li>
</ul>
</div>
</div>
</div>
<div class="sidebarblock">
<div class="content">
<div class="title">Valid Usage (Implicit)</div>
<div class="ulist">
<ul>
<li>
<p><a id="VUID-VkImageCopy-srcSubresource-parameter"></a> <code>srcSubresource</code> <strong class="purple">must</strong> be a valid <code>VkImageSubresourceLayers</code> structure</p>
</li>
<li>
<p><a id="VUID-VkImageCopy-dstSubresource-parameter"></a> <code>dstSubresource</code> <strong class="purple">must</strong> be a valid <code>VkImageSubresourceLayers</code> structure</p>
</li>
</ul>
</div>
</div>
</div>
</div>
<div class="sect3">
<h4 id="_see_also_521">See Also</h4>
<div class="paragraph">
<p><a href="#VkExtent3D">VkExtent3D</a>, <a href="#VkImageSubresourceLayers">VkImageSubresourceLayers</a>, <a href="#VkOffset3D">VkOffset3D</a>, <a href="#vkCmdCopyImage">vkCmdCopyImage</a></p>
</div>
</div>
<div class="sect3">
<h4 id="_document_notes_521">Document Notes</h4>
<div class="paragraph">
<p>For more information, see the Vulkan Specification at URL</p>
</div>
<div class="paragraph">
<p><a href="https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VkImageCopy" class="bare">https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VkImageCopy</a></p>
</div>
<div class="paragraph">
<p>This page is extracted from the Vulkan Specification.
Fixes and changes should be made to the Specification, not directly.</p>
</div>
<div style="page-break-after: always;"></div>
</div>
</div>
<div class="sect2">
<h3 id="_vkimagecreateinfo3">VkImageCreateInfo(3)</h3>
<div class="sect3">
<h4 id="_name_522">Name</h4>
<div class="paragraph">
<p>VkImageCreateInfo - Structure specifying the parameters of a newly created image object</p>
</div>
</div>
<div class="sect3">
<h4 id="_c_specification_522">C Specification</h4>
<div class="paragraph">
<p>The <code>VkImageCreateInfo</code> structure is defined as:</p>
</div>
<div id="VkImageCreateInfo" class="listingblock">
<div class="content">
<pre class="highlight"><code class="language-c++" data-lang="c++">typedef struct VkImageCreateInfo {
    VkStructureType          sType;
    const void*              pNext;
    VkImageCreateFlags       flags;
    VkImageType              imageType;
    VkFormat                 format;
    VkExtent3D               extent;
    uint32_t                 mipLevels;
    uint32_t                 arrayLayers;
    VkSampleCountFlagBits    samples;
    VkImageTiling            tiling;
    VkImageUsageFlags        usage;
    VkSharingMode            sharingMode;
    uint32_t                 queueFamilyIndexCount;
    const uint32_t*          pQueueFamilyIndices;
    VkImageLayout            initialLayout;
} VkImageCreateInfo;</code></pre>
</div>
</div>
</div>
<div class="sect3">
<h4 id="_members_159">Members</h4>
<div class="ulist">
<ul>
<li>
<p><code>sType</code> is the type of this structure.</p>
</li>
<li>
<p><code>pNext</code> is <code>NULL</code> or a pointer to an extension-specific structure.</p>
</li>
<li>
<p><code>flags</code> is a bitmask of <a href="#VkImageCreateFlagBits">VkImageCreateFlagBits</a> describing
additional parameters of the image.</p>
</li>
<li>
<p><code>imageType</code> is a <a href="#VkImageType">VkImageType</a> value specifying the basic
dimensionality of the image.
Layers in array textures do not count as a dimension for the purposes of
the image type.</p>
</li>
<li>
<p><code>format</code> is a <a href="#VkFormat">VkFormat</a> describing the format and type of the
texel blocks that will be contained in the image.</p>
</li>
<li>
<p><code>extent</code> is a <a href="#VkExtent3D">VkExtent3D</a> describing the number of data
elements in each dimension of the base level.</p>
</li>
<li>
<p><code>mipLevels</code> describes the number of levels of detail available for
minified sampling of the image.</p>
</li>
<li>
<p><code>arrayLayers</code> is the number of layers in the image.</p>
</li>
<li>
<p><code>samples</code> is a <a href="#VkSampleCountFlagBits">VkSampleCountFlagBits</a> specifying the number of
<a href="vkspec.html#primsrast-multisampling">samples per texel</a>.</p>
</li>
<li>
<p><code>tiling</code> is a <a href="#VkImageTiling">VkImageTiling</a> value specifying the tiling
arrangement of the texel blocks in memory.</p>
</li>
<li>
<p><code>usage</code> is a bitmask of <a href="#VkImageUsageFlagBits">VkImageUsageFlagBits</a> describing the
intended usage of the image.</p>
</li>
<li>
<p><code>sharingMode</code> is a <a href="#VkSharingMode">VkSharingMode</a> value specifying the sharing
mode of the image when it will be accessed by multiple queue families.</p>
</li>
<li>
<p><code>queueFamilyIndexCount</code> is the number of entries in the
<code>pQueueFamilyIndices</code> array.</p>
</li>
<li>
<p><code>pQueueFamilyIndices</code> is a list of queue families that will access
this image (ignored if <code>sharingMode</code> is not
<code>VK_SHARING_MODE_CONCURRENT</code>).</p>
</li>
<li>
<p><code>initialLayout</code> is a <a href="#VkImageLayout">VkImageLayout</a> value specifying the
initial <a href="#VkImageLayout">VkImageLayout</a> of all image subresources of the image.
See <a href="vkspec.html#resources-image-layouts">Image Layouts</a>.</p>
</li>
</ul>
</div>
</div>
<div class="sect3">
<h4 id="_description_522">Description</h4>
<div class="paragraph">
<p>Images created with <code>tiling</code> equal to <code>VK_IMAGE_TILING_LINEAR</code> have
further restrictions on their limits and capabilities compared to images
created with <code>tiling</code> equal to <code>VK_IMAGE_TILING_OPTIMAL</code>.
Creation of images with tiling <code>VK_IMAGE_TILING_LINEAR</code> <strong class="purple">may</strong> not be
supported unless other parameters meet all of the constraints:</p>
</div>
<div class="ulist">
<ul>
<li>
<p><code>imageType</code> is <code>VK_IMAGE_TYPE_2D</code></p>
</li>
<li>
<p><code>format</code> is not a depth/stencil format</p>
</li>
<li>
<p><code>mipLevels</code> is 1</p>
</li>
<li>
<p><code>arrayLayers</code> is 1</p>
</li>
<li>
<p><code>samples</code> is <code>VK_SAMPLE_COUNT_1_BIT</code></p>
</li>
<li>
<p><code>usage</code> only includes <code>VK_IMAGE_USAGE_TRANSFER_SRC_BIT</code> and/or
<code>VK_IMAGE_USAGE_TRANSFER_DST_BIT</code></p>
</li>
</ul>
</div>
<div class="paragraph">
<p>Images created with a <code>format</code> from one of those listed in
<a href="vkspec.html#formats-requiring-sampler-ycbcr-conversion" class="bare">html/vkspec.html#formats-requiring-sampler-ycbcr-conversion</a> have further restrictions on
their limits and capabilities compared to images created with other formats.
Creation of images with a format requiring
<a href="vkspec.html#formats-requiring-sampler-ycbcr-conversion">Y&#8217;C<sub>B</sub>C<sub>R</sub> conversion</a> <strong class="purple">may</strong>
not be supported unless other parameters meet all of the constraints:</p>
</div>
<div class="ulist">
<ul>
<li>
<p><code>imageType</code> is <code>VK_IMAGE_TYPE_2D</code></p>
</li>
<li>
<p><code>mipLevels</code> is 1</p>
</li>
<li>
<p><code>arrayLayers</code> is 1</p>
</li>
<li>
<p><code>samples</code> is <code>VK_SAMPLE_COUNT_1_BIT</code></p>
</li>
</ul>
</div>
<div class="paragraph">
<p>Implementations <strong class="purple">may</strong> support additional limits and capabilities beyond those
listed above.</p>
</div>
<div class="paragraph">
<p>To determine the set of valid <code>usage</code> bits for a given format, call
<a href="#vkGetPhysicalDeviceFormatProperties">vkGetPhysicalDeviceFormatProperties</a>.</p>
</div>
<div class="paragraph">
<p>If the size of the resultant image would exceed <code>maxResourceSize</code>, then
<code>vkCreateImage</code> <strong class="purple">must</strong> fail and return
<code>VK_ERROR_OUT_OF_DEVICE_MEMORY</code>.
This failure <strong class="purple">may</strong> occur even when all image creation parameters satisfy
their valid usage requirements.</p>
</div>
<div class="admonitionblock note">
<table>
<tr>
<td class="icon">
<i class="fa icon-note" title="Note"></i>
</td>
<td class="content">
<div class="title">Note</div>
<div class="paragraph">
<p>For images created without <code>VK_IMAGE_CREATE_EXTENDED_USAGE_BIT</code> a
<code>usage</code> bit is valid if it is supported for the format the image is
created with.</p>
</div>
<div class="paragraph">
<p>For images created with <code>VK_IMAGE_CREATE_EXTENDED_USAGE_BIT</code> a
<code>usage</code> bit is valid if it is supported for at least one of the formats
a <code>VkImageView</code> created from the image <strong class="purple">can</strong> have (see
<a href="vkspec.html#resources-image-views">Image Views</a> for more detail).</p>
</div>
</td>
</tr>
</table>
</div>
<div id="resources-image-creation-limits" class="sidebarblock">
<div class="content">
<div class="title">Image Creation Limits</div>
<div class="paragraph">
<p>Valid values for some image creation parameters are limited by a numerical
upper bound or by inclusion in a bitset.
For example, <code>VkImageCreateInfo</code>::<code>arrayLayers</code> is limited by
<code>imageCreateMaxArrayLayers</code>, defined below; and
<code>VkImageCreateInfo</code>::<code>samples</code> is limited by
<code>imageCreateSampleCounts</code>, also defined below.</p>
</div>
<div class="paragraph">
<p>Several limiting values are defined below, as well as assisting values from
which the limiting values are derived.
The limiting values are referenced by the relevant valid usage statements of
<code>VkImageCreateInfo</code>.</p>
</div>
<div class="ulist">
<ul>
<li>
<p>Let <code>uint64_t imageCreateDrmFormatModifiers[]</code> be the set of
<a href="vkspec.html#glossary-drm-format-modifier">Linux DRM format modifiers</a> that the
resultant image <strong class="purple">may</strong> have.</p>
<div class="ulist">
<ul>
<li>
<p>If <code>tiling</code> is not <code>VK_IMAGE_TILING_DRM_FORMAT_MODIFIER_EXT</code>,
then <code>imageCreateDrmFormatModifiers</code> is empty.</p>
</li>
<li>
<p>If <code>VkImageCreateInfo</code>::<code>pNext</code> contains
<a href="#VkImageDrmFormatModifierExplicitCreateInfoEXT">VkImageDrmFormatModifierExplicitCreateInfoEXT</a>, then
<code>imageCreateDrmFormatModifiers</code> contains exactly one modifier,
<code>VkImageDrmFormatModifierExplicitCreateInfoEXT</code>::<code>drmFormatModifier</code>.</p>
</li>
<li>
<p>If <code>VkImageCreateInfo</code>::<code>pNext</code> contains
<a href="#VkImageDrmFormatModifierListCreateInfoEXT">VkImageDrmFormatModifierListCreateInfoEXT</a>, then
<code>imageCreateDrmFormatModifiers</code> contains the exactly the modifiers
in
<code>VkImageDrmFormatModifierListCreateInfoEXT</code>::<code>pDrmFormatModifiers</code>.</p>
</li>
</ul>
</div>
</li>
<li>
<p>Let <code>VkBool32 imageCreateMaybeLinear</code> indicate if the resultant image
may be <a href="vkspec.html#glossary-linear-image">linear</a>.</p>
<div class="ulist">
<ul>
<li>
<p>If <code>tiling</code> is <code>VK_IMAGE_TILING_LINEAR</code>, then
<code>imageCreateMaybeLinear</code> is <code>true</code>.</p>
</li>
<li>
<p>If <code>tiling</code> is <code>VK_IMAGE_TILING_OPTIMAL</code>, then
<code>imageCreateMaybeLinear</code> is <code>false</code>.</p>
</li>
<li>
<p>If <code>tiling</code> is <code>VK_IMAGE_TILING_DRM_FORMAT_MODIFIER_EXT</code>, then
<code>imageCreateMaybeLinear_</code> is <code>true</code> if and only if
<code>imageCreateDrmFormatModifiers</code> contains
<code>DRM_FORMAT_MOD_LINEAR</code>.</p>
</li>
</ul>
</div>
</li>
<li>
<p>Let <code>VkFormatFeatureFlags imageCreateFormatFeatures</code> be the set of
format features available during image creation.</p>
<div class="ulist">
<ul>
<li>
<p>If <code>tiling</code> is <code>VK_IMAGE_TILING_LINEAR</code>, then
<code>imageCreateFormatFeatures</code> is the value of
<a href="#VkImageFormatProperties">VkImageFormatProperties</a>::<code>linearTilingFeatures</code> found by
calling <a href="#vkGetPhysicalDeviceFormatProperties">vkGetPhysicalDeviceFormatProperties</a> with parameter
<code>format</code> equal to <code>VkImageCreateInfo</code>::<code>format</code>.</p>
</li>
<li>
<p>If <code>tiling</code> is <code>VK_IMAGE_TILING_OPTIMAL</code>,
and if the <code>pNext</code> chain contains no instance of
<a href="#VkExternalFormatANDROID">VkExternalFormatANDROID</a> with non-zero <code>externalFormat</code>,
then <code>imageCreateFormatFeatures</code> is value of
<a href="#VkImageFormatProperties">VkImageFormatProperties</a>::<code>optimalTilingFeatures</code> found by
calling <a href="#vkGetPhysicalDeviceFormatProperties">vkGetPhysicalDeviceFormatProperties</a> with parameter
<code>format</code> equal to <code>VkImageCreateInfo</code>::<code>format</code>.</p>
</li>
<li>
<p>If <code>tiling</code> is <code>VK_IMAGE_TILING_OPTIMAL</code>, and if the
<code>pNext</code> chain contains an instance of <a href="#VkExternalFormatANDROID">VkExternalFormatANDROID</a>
with non-zero <code>externalFormat</code>, then
<code>imageCreateFormatFeatures</code> is the value of
<a href="#VkAndroidHardwareBufferFormatPropertiesANDROID">VkAndroidHardwareBufferFormatPropertiesANDROID</a>::<code>formatFeatures</code>
obtained by <a href="#vkGetAndroidHardwareBufferPropertiesANDROID">vkGetAndroidHardwareBufferPropertiesANDROID</a> with a
matching <code>externalFormat</code> value.</p>
</li>
<li>
<p>If <code>tiling</code> is <code>VK_IMAGE_TILING_DRM_FORMAT_MODIFIER_EXT</code>, then
the value of <code>imageCreateFormatFeatures</code> is found by calling
<a href="#vkGetPhysicalDeviceFormatProperties2">vkGetPhysicalDeviceFormatProperties2</a> with
<a href="#VkImageFormatProperties">VkImageFormatProperties</a>::<code>format</code> equal to
<code>VkImageCreateInfo</code>::<code>format</code> and with
<a href="#VkDrmFormatModifierPropertiesListEXT">VkDrmFormatModifierPropertiesListEXT</a> chained into
<a href="#VkImageFormatProperties2">VkImageFormatProperties2</a>; by collecting all members of the
returned array
<a href="#VkDrmFormatModifierPropertiesListEXT">VkDrmFormatModifierPropertiesListEXT</a>::pDrmFormatModifierProperties
whose <code>drmFormatModifier</code> belongs to
<code>imageCreateDrmFormatModifiers</code>; and by taking the bitwise
intersection, over the collected array members, of
<code>drmFormatModifierTilingFeatures</code>.
(The resultant <code>imageCreateFormatFeatures</code> <strong class="purple">may</strong> be empty).</p>
</li>
</ul>
</div>
</li>
<li>
<p>Let <code>VkImageFormatProperties2 imageCreateImageFormatPropertiesList[]</code> be
defined as follows.</p>
<div class="ulist">
<ul>
<li>
<p>If <code>VkImageCreateInfo</code>::<code>pNext</code> contains no instance of
<a href="#VkExternalFormatANDROID">VkExternalFormatANDROID</a> with non-zero <code>externalFormat</code>, then
<code>imageCreateImageFormatPropertiesList</code> is
the list of structures obtained by calling
<a href="#vkGetPhysicalDeviceImageFormatProperties2">vkGetPhysicalDeviceImageFormatProperties2</a>, possibly multiple
times, as follows:</p>
<div class="ulist">
<ul>
<li>
<p>The parameters <a href="#VkPhysicalDeviceImageFormatInfo2">VkPhysicalDeviceImageFormatInfo2</a>::<code>format</code>,
<code>imageType</code>, <code>tiling</code>, <code>usage</code>, and <code>flags</code> <strong class="purple">must</strong> be
equal to those in <code>VkImageCreateInfo</code>.</p>
</li>
<li>
<p>If <a href="#VkImageCreateInfo">VkImageCreateInfo</a>::<code>pNext</code> contains an instance of
<a href="#VkExternalMemoryImageCreateInfo">VkExternalMemoryImageCreateInfo</a> where <code>handleTypes</code> is not
<code>0</code>, then <a href="#VkPhysicalDeviceImageFormatInfo2">VkPhysicalDeviceImageFormatInfo2</a>::<code>pNext</code> <strong class="purple">must</strong>
contain an instance of <a href="#VkPhysicalDeviceExternalImageFormatInfo">VkPhysicalDeviceExternalImageFormatInfo</a>
where <code>handleType</code> is not <code>0</code>; and
<a href="#vkGetPhysicalDeviceImageFormatProperties2">vkGetPhysicalDeviceImageFormatProperties2</a> <strong class="purple">must</strong> be called for
each handle type in
<a href="#VkExternalMemoryImageCreateInfo">VkExternalMemoryImageCreateInfo</a>::<code>handleTypes</code>, successively
setting
<a href="#VkPhysicalDeviceExternalImageFormatInfo">VkPhysicalDeviceExternalImageFormatInfo</a>::<code>handleType</code> on
each call.</p>
</li>
<li>
<p>If <a href="#VkImageCreateInfo">VkImageCreateInfo</a>::<code>pNext</code> contains no instance of
<a href="#VkExternalMemoryImageCreateInfo">VkExternalMemoryImageCreateInfo</a> or contains an instance where
<code>handleTypes</code> is <code>0</code>, then
<a href="#VkPhysicalDeviceImageFormatInfo2">VkPhysicalDeviceImageFormatInfo2</a>::<code>pNext</code> <strong class="purple">must</strong> either
contain no instance of <a href="#VkPhysicalDeviceExternalImageFormatInfo">VkPhysicalDeviceExternalImageFormatInfo</a>
or contain an instance where <code>handleType</code> is <code>0</code>.</p>
</li>
<li>
<p>If <code>tiling</code> is <code>VK_IMAGE_TILING_DRM_FORMAT_MODIFIER_EXT</code>, then
<a href="#VkPhysicalDeviceImageFormatInfo2">VkPhysicalDeviceImageFormatInfo2</a>::<code>pNext</code> <strong class="purple">must</strong> contain an
instance of <a href="#VkPhysicalDeviceImageDrmFormatModifierInfoEXT">VkPhysicalDeviceImageDrmFormatModifierInfoEXT</a> where
<code>sharingMode</code> is equal to
<a href="#VkImageCreateInfo">VkImageCreateInfo</a>::<code>sharingMode</code>; and, if <code>sharingMode</code>
is <code>VK_SHARING_MODE_CONCURRENT</code>, then <code>queueFamilyIndexCount</code>
and <code>pQueueFamilyIndices</code> <strong class="purple">must</strong> be equal to those in
<a href="#VkImageCreateInfo">VkImageCreateInfo</a>; and, if <code>flags</code> contains
<code>VK_IMAGE_CREATE_MUTABLE_FORMAT_BIT</code>, then the instance of
<a href="#VkImageFormatListCreateInfoKHR">VkImageFormatListCreateInfoKHR</a> in the <code>pNext</code> chain of
<a href="#VkPhysicalDeviceImageFormatInfo2">VkPhysicalDeviceImageFormatInfo2</a> <strong class="purple">must</strong> be equivalent to the one
in the <code>pNext</code> chain of <a href="#VkImageCreateInfo">VkImageCreateInfo</a>; and
<a href="#vkGetPhysicalDeviceImageFormatProperties2">vkGetPhysicalDeviceImageFormatProperties2</a> <strong class="purple">must</strong> be called for
each modifier in <code>imageCreateDrmFormatModifiers</code>, successively
setting
<a href="#VkPhysicalDeviceImageDrmFormatModifierInfoEXT">VkPhysicalDeviceImageDrmFormatModifierInfoEXT</a>::<code>drmFormatModifier</code>
on each call.</p>
</li>
<li>
<p>If <code>tiling</code> is not <code>VK_IMAGE_TILING_DRM_FORMAT_MODIFIER_EXT</code>,
then <a href="#VkPhysicalDeviceImageFormatInfo2">VkPhysicalDeviceImageFormatInfo2</a>::<code>pNext</code> <strong class="purple">must</strong> contain
no instance of <a href="#VkPhysicalDeviceImageDrmFormatModifierInfoEXT">VkPhysicalDeviceImageDrmFormatModifierInfoEXT</a>.</p>
</li>
<li>
<p>If any call to <a href="#vkGetPhysicalDeviceImageFormatProperties2">vkGetPhysicalDeviceImageFormatProperties2</a> returns
an error, then <code>imageCreateImageFormatPropertiesList</code> is defined
to be the empty list.</p>
</li>
</ul>
</div>
</li>
<li>
<p>If <code>VkImageCreateInfo</code>::<code>pNext</code> contains an instance of
<a href="#VkExternalFormatANDROID">VkExternalFormatANDROID</a> with non-zero <code>externalFormat</code>, then
<code>imageCreateImageFormatPropertiesList</code> contains a single element
where:</p>
<div class="ulist">
<ul>
<li>
<p><code>VkImageFormatProperties</code>::<code>maxMipLevels</code> is
<span class="eq">⌊log<sub>2</sub>(max(<code>extent.width</code>, <code>extent.height</code>,
<code>extent.depth</code>))⌋ +  1</span>.</p>
</li>
<li>
<p><code>VkImageFormatProperties</code>::<code>maxArrayLayers</code> is
<a href="#VkPhysicalDeviceLimits">VkPhysicalDeviceLimits</a>::maxImageArrayLayers.</p>
</li>
<li>
<p>Each component of <code>VkImageFormatProperties</code>::<code>maxExtent</code> is
<a href="#VkPhysicalDeviceLimits">VkPhysicalDeviceLimits</a>::maxImageDimension2D.</p>
</li>
<li>
<p><code>VkImageFormatProperties</code>::<code>sampleCounts</code> contains exactly
<code>VK_SAMPLE_COUNT_1_BIT</code>.</p>
</li>
</ul>
</div>
</li>
</ul>
</div>
</li>
<li>
<p>Let <code>uint32_t imageCreateMaxMipLevels</code> be
the minimum value of <a href="#VkImageFormatProperties">VkImageFormatProperties</a>::<code>maxMipLevels</code>
in <code>imageCreateImageFormatPropertiesList</code>.
The value is undefined if <code>imageCreateImageFormatPropertiesList</code> is
empty.</p>
</li>
<li>
<p>Let <code>uint32_t imageCreateMaxArrayLayers</code> be
the minimum value of <a href="#VkImageFormatProperties">VkImageFormatProperties</a>::<code>maxArrayLayers</code>
in <code>imageCreateImageFormatPropertiesList</code>.
The value is undefined if <code>imageCreateImageFormatPropertiesList</code> is
empty.</p>
</li>
<li>
<p>Let <code>VkExtent3D imageCreateMaxExtent</code> be
the component-wise minimum over all
<a href="#VkImageFormatProperties">VkImageFormatProperties</a>::<code>maxExtent</code> values in
<code>imageCreateImageFormatPropertiesList</code>.
The value is undefined if <code>imageCreateImageFormatPropertiesList</code> is
empty.</p>
</li>
<li>
<p>Let <code>VkSampleCountFlags imageCreateSampleCounts</code> be
the intersection of each
<a href="#VkImageFormatProperties">VkImageFormatProperties</a>::<code>sampleCounts</code> in
<code>imageCreateImageFormatPropertiesList</code>.
The value is undefined if <code>imageCreateImageFormatPropertiesList</code> is
empty.</p>
</li>
</ul>
</div>
</div>
</div>
<div class="sidebarblock">
<div class="content">
<div class="title">Valid Usage</div>
<div class="ulist">
<ul>
<li>
<p><a id="VUID-VkImageCreateInfo-imageCreateMaxMipLevels-02251"></a>
Each of the following values (as described in
<a href="vkspec.html#resources-image-creation-limits">Image Creation Limits</a>) <strong class="purple">must</strong> not be
undefined <code>imageCreateMaxMipLevels</code>,
<code>imageCreateMaxArrayLayers</code>, <code>imageCreateMaxExtent</code>, and
<code>imageCreateSampleCounts</code>.</p>
</li>
<li>
<p><a id="VUID-VkImageCreateInfo-sharingMode-00941"></a>
If <code>sharingMode</code> is <code>VK_SHARING_MODE_CONCURRENT</code>,
<code>pQueueFamilyIndices</code> <strong class="purple">must</strong> be a valid pointer to an array of
<code>queueFamilyIndexCount</code> <code>uint32_t</code> values</p>
</li>
<li>
<p><a id="VUID-VkImageCreateInfo-sharingMode-00942"></a>
If <code>sharingMode</code> is <code>VK_SHARING_MODE_CONCURRENT</code>,
<code>queueFamilyIndexCount</code> <strong class="purple">must</strong> be greater than <code>1</code></p>
</li>
<li>
<p><a id="VUID-VkImageCreateInfo-sharingMode-01420"></a>
If <code>sharingMode</code> is <code>VK_SHARING_MODE_CONCURRENT</code>, each element
of <code>pQueueFamilyIndices</code> <strong class="purple">must</strong> be unique and <strong class="purple">must</strong> be less than
<code>pQueueFamilyPropertyCount</code> returned by either
<a href="#vkGetPhysicalDeviceQueueFamilyProperties">vkGetPhysicalDeviceQueueFamilyProperties</a> or
<a href="#vkGetPhysicalDeviceQueueFamilyProperties2">vkGetPhysicalDeviceQueueFamilyProperties2</a> for the
<code>physicalDevice</code> that was used to create <code>device</code></p>
</li>
<li>
<p><a id="VUID-VkImageCreateInfo-pNext-01974"></a>
If the <code>pNext</code> chain contains an instance of
<a href="#VkExternalFormatANDROID">VkExternalFormatANDROID</a>, and its member <code>externalFormat</code> is
non-zero the <code>format</code> <strong class="purple">must</strong> be <code>VK_FORMAT_UNDEFINED</code>.</p>
</li>
<li>
<p><a id="VUID-VkImageCreateInfo-pNext-01975"></a>
If the <code>pNext</code> chain does not contain an instance of
<a href="#VkExternalFormatANDROID">VkExternalFormatANDROID</a>, or does and its member
<code>externalFormat</code> is <code>0</code> the <code>format</code> <strong class="purple">must</strong> not be
<code>VK_FORMAT_UNDEFINED</code>.</p>
</li>
<li>
<p><a id="VUID-VkImageCreateInfo-extent-00944"></a>
<code>extent</code>::<code>width</code> <strong class="purple">must</strong> be greater than <code>0</code>.</p>
</li>
<li>
<p><a id="VUID-VkImageCreateInfo-extent-00945"></a>
<code>extent</code>::<code>height</code> <strong class="purple">must</strong> be greater than <code>0</code>.</p>
</li>
<li>
<p><a id="VUID-VkImageCreateInfo-extent-00946"></a>
<code>extent</code>::<code>depth</code> <strong class="purple">must</strong> be greater than <code>0</code>.</p>
</li>
<li>
<p><a id="VUID-VkImageCreateInfo-mipLevels-00947"></a>
<code>mipLevels</code> <strong class="purple">must</strong> be greater than <code>0</code></p>
</li>
<li>
<p><a id="VUID-VkImageCreateInfo-arrayLayers-00948"></a>
<code>arrayLayers</code> <strong class="purple">must</strong> be greater than <code>0</code></p>
</li>
<li>
<p><a id="VUID-VkImageCreateInfo-flags-00949"></a>
If <code>flags</code> contains <code>VK_IMAGE_CREATE_CUBE_COMPATIBLE_BIT</code>,
<code>imageType</code> <strong class="purple">must</strong> be <code>VK_IMAGE_TYPE_2D</code></p>
</li>
<li>
<p><a id="VUID-VkImageCreateInfo-flags-02557"></a>
If <code>flags</code> contains
<code>VK_IMAGE_USAGE_FRAGMENT_DENSITY_MAP_BIT_EXT</code>, <code>imageType</code> <strong class="purple">must</strong>
be <code>VK_IMAGE_TYPE_2D</code></p>
</li>
<li>
<p><a id="VUID-VkImageCreateInfo-flags-00950"></a>
If <code>flags</code> contains <code>VK_IMAGE_CREATE_2D_ARRAY_COMPATIBLE_BIT</code>,
<code>imageType</code> <strong class="purple">must</strong> be <code>VK_IMAGE_TYPE_3D</code></p>
</li>
<li>
<p><a id="VUID-VkImageCreateInfo-extent-02252"></a>
<code>extent.width</code> <strong class="purple">must</strong> be less than or equal to
<code>imageCreateMaxExtent.width</code> (as defined in
<a href="vkspec.html#resources-image-creation-limits">Image Creation Limits</a>).</p>
</li>
<li>
<p><a id="VUID-VkImageCreateInfo-extent-02253"></a>
<code>extent.height</code> <strong class="purple">must</strong> be less than or equal to
<code>imageCreateMaxExtent.height</code> (as defined in
<a href="vkspec.html#resources-image-creation-limits">Image Creation Limits</a>).</p>
</li>
<li>
<p><a id="VUID-VkImageCreateInfo-extent-02254"></a>
<code>extent.depth</code> <strong class="purple">must</strong> be less than or equal to
<code>imageCreateMaxExtent.depth</code> (as defined in
<a href="vkspec.html#resources-image-creation-limits">Image Creation Limits</a>).</p>
</li>
<li>
<p><a id="VUID-VkImageCreateInfo-imageType-00954"></a>
If <code>imageType</code> is <code>VK_IMAGE_TYPE_2D</code> and <code>flags</code> contains
<code>VK_IMAGE_CREATE_CUBE_COMPATIBLE_BIT</code>, <code>extent.width</code> and
<code>extent.height</code> <strong class="purple">must</strong> be equal and <code>arrayLayers</code> <strong class="purple">must</strong> be
greater than or equal to 6</p>
</li>
<li>
<p><a id="VUID-VkImageCreateInfo-imageType-00956"></a>
If <code>imageType</code> is <code>VK_IMAGE_TYPE_1D</code>, both <code>extent.height</code>
and <code>extent.depth</code> <strong class="purple">must</strong> be <code>1</code></p>
</li>
<li>
<p><a id="VUID-VkImageCreateInfo-imageType-00957"></a>
If <code>imageType</code> is <code>VK_IMAGE_TYPE_2D</code>, <code>extent.depth</code> <strong class="purple">must</strong>
be <code>1</code></p>
</li>
<li>
<p><a id="VUID-VkImageCreateInfo-mipLevels-00958"></a>
<code>mipLevels</code> <strong class="purple">must</strong> be less than or equal to the number of levels in
the complete mipmap chain based on <span class="eq"><code>extent.width</code></span>,
<span class="eq"><code>extent.height</code></span>, and <span class="eq"><code>extent.depth</code></span>.</p>
</li>
<li>
<p><a id="VUID-VkImageCreateInfo-mipLevels-02255"></a>
<code>mipLevels</code> <strong class="purple">must</strong> be less than or equal to
<code>imageCreateMaxMipLevels</code> (as defined in
<a href="vkspec.html#resources-image-creation-limits">Image Creation Limits</a>).</p>
</li>
<li>
<p><a id="VUID-VkImageCreateInfo-arrayLayers-02256"></a>
<code>arrayLayers</code> <strong class="purple">must</strong> be less than or equal to
<code>imageCreateMaxArrayLayers</code> (as defined in
<a href="vkspec.html#resources-image-creation-limits">Image Creation Limits</a>).</p>
</li>
<li>
<p><a id="VUID-VkImageCreateInfo-imageType-00961"></a>
If <code>imageType</code> is <code>VK_IMAGE_TYPE_3D</code>, <code>arrayLayers</code> <strong class="purple">must</strong> be
<code>1</code>.</p>
</li>
<li>
<p><a id="VUID-VkImageCreateInfo-samples-02257"></a>
If <code>samples</code> is not <code>VK_SAMPLE_COUNT_1_BIT</code>, then
<code>imageType</code> <strong class="purple">must</strong> be <code>VK_IMAGE_TYPE_2D</code>, <code>flags</code> <strong class="purple">must</strong> not
contain <code>VK_IMAGE_CREATE_CUBE_COMPATIBLE_BIT</code>, <code>mipLevels</code> <strong class="purple">must</strong>
be equal to <code>1</code>, and <code>imageCreateMaybeLinear</code> (as defined in
<a href="vkspec.html#resources-image-creation-limits">Image Creation Limits</a>) <strong class="purple">must</strong> be
<code>false</code>,</p>
</li>
<li>
<p><a id="VUID-VkImageCreateInfo-samples-02558"></a>
If <code>samples</code> is not <code>VK_SAMPLE_COUNT_1_BIT</code>, <code>usage</code> <strong class="purple">must</strong>
not contain <code>VK_IMAGE_USAGE_FRAGMENT_DENSITY_MAP_BIT_EXT</code></p>
</li>
<li>
<p><a id="VUID-VkImageCreateInfo-usage-00963"></a>
If <code>usage</code> includes <code>VK_IMAGE_USAGE_TRANSIENT_ATTACHMENT_BIT</code>,
then bits other than <code>VK_IMAGE_USAGE_COLOR_ATTACHMENT_BIT</code>,
<code>VK_IMAGE_USAGE_DEPTH_STENCIL_ATTACHMENT_BIT</code>, and
<code>VK_IMAGE_USAGE_INPUT_ATTACHMENT_BIT</code> <strong class="purple">must</strong> not be set</p>
</li>
<li>
<p><a id="VUID-VkImageCreateInfo-usage-00964"></a>
If <code>usage</code> includes <code>VK_IMAGE_USAGE_COLOR_ATTACHMENT_BIT</code>,
<code>VK_IMAGE_USAGE_DEPTH_STENCIL_ATTACHMENT_BIT</code>,
<code>VK_IMAGE_USAGE_TRANSIENT_ATTACHMENT_BIT</code>, or
<code>VK_IMAGE_USAGE_INPUT_ATTACHMENT_BIT</code>, <code>extent.width</code> <strong class="purple">must</strong> be
less than or equal to
<code>VkPhysicalDeviceLimits</code>::<code>maxFramebufferWidth</code></p>
</li>
<li>
<p><a id="VUID-VkImageCreateInfo-usage-00965"></a>
If <code>usage</code> includes <code>VK_IMAGE_USAGE_COLOR_ATTACHMENT_BIT</code>,
<code>VK_IMAGE_USAGE_DEPTH_STENCIL_ATTACHMENT_BIT</code>,
<code>VK_IMAGE_USAGE_TRANSIENT_ATTACHMENT_BIT</code>, or
<code>VK_IMAGE_USAGE_INPUT_ATTACHMENT_BIT</code>, <code>extent.height</code> <strong class="purple">must</strong> be
less than or equal to
<code>VkPhysicalDeviceLimits</code>::<code>maxFramebufferHeight</code></p>
</li>
<li>
<p><a id="VUID-VkImageCreateInfo-usage-02559"></a>
If <code>usage</code> includes
<code>VK_IMAGE_USAGE_FRAGMENT_DENSITY_MAP_BIT_EXT</code>, <code>extent.width</code>
<strong class="purple">must</strong> be less than or equal to
\(\lceil{\frac{maxFramebufferWidth}{minFragmentDensityTexelSize_{width}}}\rceil\)</p>
</li>
<li>
<p><a id="VUID-VkImageCreateInfo-usage-02560"></a>
If <code>usage</code> includes
<code>VK_IMAGE_USAGE_FRAGMENT_DENSITY_MAP_BIT_EXT</code>, <code>extent.height</code>
<strong class="purple">must</strong> be less than or equal to
\(\lceil{\frac{maxFramebufferHeight}{minFragmentDensityTexelSize_{height}}}\rceil\)</p>
</li>
<li>
<p><a id="VUID-VkImageCreateInfo-usage-00966"></a>
If <code>usage</code> includes <code>VK_IMAGE_USAGE_TRANSIENT_ATTACHMENT_BIT</code>,
<code>usage</code> <strong class="purple">must</strong> also contain at least one of
<code>VK_IMAGE_USAGE_COLOR_ATTACHMENT_BIT</code>,
<code>VK_IMAGE_USAGE_DEPTH_STENCIL_ATTACHMENT_BIT</code>, or
<code>VK_IMAGE_USAGE_INPUT_ATTACHMENT_BIT</code>.</p>
</li>
<li>
<p><a id="VUID-VkImageCreateInfo-samples-02258"></a>
<code>samples</code> <strong class="purple">must</strong> be a bit value that is set in
<code>imageCreateSampleCounts</code> (as defined in
<a href="vkspec.html#resources-image-creation-limits">Image Creation Limits</a>).</p>
</li>
<li>
<p><a id="VUID-VkImageCreateInfo-usage-00968"></a>
If the <a href="vkspec.html#features-shaderStorageImageMultisample">multisampled storage
images</a> feature is not enabled, and <code>usage</code> contains
<code>VK_IMAGE_USAGE_STORAGE_BIT</code>, <code>samples</code> <strong class="purple">must</strong> be
<code>VK_SAMPLE_COUNT_1_BIT</code></p>
</li>
<li>
<p><a id="VUID-VkImageCreateInfo-flags-00969"></a>
If the <a href="vkspec.html#features-sparseBinding">sparse bindings</a> feature is not
enabled, <code>flags</code> <strong class="purple">must</strong> not contain
<code>VK_IMAGE_CREATE_SPARSE_BINDING_BIT</code></p>
</li>
<li>
<p><a id="VUID-VkImageCreateInfo-flags-01924"></a>
If the <a href="vkspec.html#features-sparseResidencyAliased">sparse aliased residency</a>
feature is not enabled, <code>flags</code> <strong class="purple">must</strong> not contain
<code>VK_IMAGE_CREATE_SPARSE_ALIASED_BIT</code></p>
</li>
<li>
<p><a id="VUID-VkImageCreateInfo-imageType-00970"></a>
If <code>imageType</code> is <code>VK_IMAGE_TYPE_1D</code>, <code>flags</code> <strong class="purple">must</strong> not
contain <code>VK_IMAGE_CREATE_SPARSE_RESIDENCY_BIT</code></p>
</li>
<li>
<p><a id="VUID-VkImageCreateInfo-imageType-00971"></a>
If the <a href="vkspec.html#features-sparseResidencyImage2D">sparse residency for 2D
images</a> feature is not enabled, and <code>imageType</code> is
<code>VK_IMAGE_TYPE_2D</code>, <code>flags</code> <strong class="purple">must</strong> not contain
<code>VK_IMAGE_CREATE_SPARSE_RESIDENCY_BIT</code></p>
</li>
<li>
<p><a id="VUID-VkImageCreateInfo-imageType-00972"></a>
If the <a href="vkspec.html#features-sparseResidencyImage3D">sparse residency for 3D
images</a> feature is not enabled, and <code>imageType</code> is
<code>VK_IMAGE_TYPE_3D</code>, <code>flags</code> <strong class="purple">must</strong> not contain
<code>VK_IMAGE_CREATE_SPARSE_RESIDENCY_BIT</code></p>
</li>
<li>
<p><a id="VUID-VkImageCreateInfo-imageType-00973"></a>
If the <a href="vkspec.html#features-sparseResidency2Samples">sparse residency for images
with 2 samples</a> feature is not enabled, <code>imageType</code> is
<code>VK_IMAGE_TYPE_2D</code>, and <code>samples</code> is
<code>VK_SAMPLE_COUNT_2_BIT</code>, <code>flags</code> <strong class="purple">must</strong> not contain
<code>VK_IMAGE_CREATE_SPARSE_RESIDENCY_BIT</code></p>
</li>
<li>
<p><a id="VUID-VkImageCreateInfo-imageType-00974"></a>
If the <a href="vkspec.html#features-sparseResidency4Samples">sparse residency for images
with 4 samples</a> feature is not enabled, <code>imageType</code> is
<code>VK_IMAGE_TYPE_2D</code>, and <code>samples</code> is
<code>VK_SAMPLE_COUNT_4_BIT</code>, <code>flags</code> <strong class="purple">must</strong> not contain
<code>VK_IMAGE_CREATE_SPARSE_RESIDENCY_BIT</code></p>
</li>
<li>
<p><a id="VUID-VkImageCreateInfo-imageType-00975"></a>
If the <a href="vkspec.html#features-sparseResidency8Samples">sparse residency for images
with 8 samples</a> feature is not enabled, <code>imageType</code> is
<code>VK_IMAGE_TYPE_2D</code>, and <code>samples</code> is
<code>VK_SAMPLE_COUNT_8_BIT</code>, <code>flags</code> <strong class="purple">must</strong> not contain
<code>VK_IMAGE_CREATE_SPARSE_RESIDENCY_BIT</code></p>
</li>
<li>
<p><a id="VUID-VkImageCreateInfo-imageType-00976"></a>
If the <a href="vkspec.html#features-sparseResidency16Samples">sparse residency for images
with 16 samples</a> feature is not enabled, <code>imageType</code> is
<code>VK_IMAGE_TYPE_2D</code>, and <code>samples</code> is
<code>VK_SAMPLE_COUNT_16_BIT</code>, <code>flags</code> <strong class="purple">must</strong> not contain
<code>VK_IMAGE_CREATE_SPARSE_RESIDENCY_BIT</code></p>
</li>
<li>
<p><a id="VUID-VkImageCreateInfo-flags-00987"></a>
If <code>flags</code> contains <code>VK_IMAGE_CREATE_SPARSE_RESIDENCY_BIT</code> or
<code>VK_IMAGE_CREATE_SPARSE_ALIASED_BIT</code>, it <strong class="purple">must</strong> also contain
<code>VK_IMAGE_CREATE_SPARSE_BINDING_BIT</code></p>
</li>
<li>
<p><a id="VUID-VkImageCreateInfo-None-01925"></a>
If any of the bits <code>VK_IMAGE_CREATE_SPARSE_BINDING_BIT</code>,
<code>VK_IMAGE_CREATE_SPARSE_RESIDENCY_BIT</code>, or
<code>VK_IMAGE_CREATE_SPARSE_ALIASED_BIT</code> are set,
<code>VK_IMAGE_USAGE_TRANSIENT_ATTACHMENT_BIT</code> <strong class="purple">must</strong> not also be set</p>
</li>
<li>
<p><a id="VUID-VkImageCreateInfo-flags-01890"></a>
If the protected memory feature is not enabled, <code>flags</code> <strong class="purple">must</strong> not
contain <code>VK_IMAGE_CREATE_PROTECTED_BIT</code>.</p>
</li>
<li>
<p><a id="VUID-VkImageCreateInfo-None-01891"></a>
If any of the bits <code>VK_IMAGE_CREATE_SPARSE_BINDING_BIT</code>,
<code>VK_IMAGE_CREATE_SPARSE_RESIDENCY_BIT</code>, or
<code>VK_IMAGE_CREATE_SPARSE_ALIASED_BIT</code> are set,
<code>VK_IMAGE_CREATE_PROTECTED_BIT</code> <strong class="purple">must</strong> not also be set.</p>
</li>
<li>
<p><a id="VUID-VkImageCreateInfo-pNext-00988"></a>
If the <code>pNext</code> chain contains an instance of
<a href="#VkExternalMemoryImageCreateInfoNV">VkExternalMemoryImageCreateInfoNV</a>, it <strong class="purple">must</strong> not contain an
instance of <a href="#VkExternalMemoryImageCreateInfo">VkExternalMemoryImageCreateInfo</a>.</p>
</li>
<li>
<p><a id="VUID-VkImageCreateInfo-pNext-00990"></a>
If the <code>pNext</code> chain contains an instance of
<a href="#VkExternalMemoryImageCreateInfo">VkExternalMemoryImageCreateInfo</a>, its <code>handleTypes</code> member
<strong class="purple">must</strong> only contain bits that are also in
<a href="#VkExternalImageFormatProperties">VkExternalImageFormatProperties</a>::<code>externalMemoryProperties.compatibleHandleTypes</code>,
as returned by <a href="#vkGetPhysicalDeviceImageFormatProperties2">vkGetPhysicalDeviceImageFormatProperties2</a> with
<code>format</code>, <code>imageType</code>, <code>tiling</code>, <code>usage</code>, and
<code>flags</code> equal to those in this structure, and with an instance of
<a href="#VkPhysicalDeviceExternalImageFormatInfo">VkPhysicalDeviceExternalImageFormatInfo</a> in the <code>pNext</code> chain,
with a <code>handleType</code> equal to any one of the handle types specified
in <a href="#VkExternalMemoryImageCreateInfo">VkExternalMemoryImageCreateInfo</a>::<code>handleTypes</code></p>
</li>
<li>
<p><a id="VUID-VkImageCreateInfo-pNext-00991"></a>
If the <code>pNext</code> chain contains an instance of
<a href="#VkExternalMemoryImageCreateInfoNV">VkExternalMemoryImageCreateInfoNV</a>, its <code>handleTypes</code> member
<strong class="purple">must</strong> only contain bits that are also in
<a href="#VkExternalImageFormatPropertiesNV">VkExternalImageFormatPropertiesNV</a>::<code>externalMemoryProperties.compatibleHandleTypes</code>,
as returned by <a href="#vkGetPhysicalDeviceExternalImageFormatPropertiesNV">vkGetPhysicalDeviceExternalImageFormatPropertiesNV</a>
with <code>format</code>, <code>imageType</code>, <code>tiling</code>, <code>usage</code>, and
<code>flags</code> equal to those in this structure, and with
<code>externalHandleType</code> equal to any one of the handle types specified
in <a href="#VkExternalMemoryImageCreateInfoNV">VkExternalMemoryImageCreateInfoNV</a>::<code>handleTypes</code></p>
</li>
<li>
<p><a id="VUID-VkImageCreateInfo-physicalDeviceCount-01421"></a>
If the logical device was created with
<a href="#VkDeviceGroupDeviceCreateInfo">VkDeviceGroupDeviceCreateInfo</a>::<code>physicalDeviceCount</code> equal to
1, <code>flags</code> <strong class="purple">must</strong> not contain
<code>VK_IMAGE_CREATE_SPLIT_INSTANCE_BIND_REGIONS_BIT</code></p>
</li>
<li>
<p><a id="VUID-VkImageCreateInfo-flags-02259"></a>
If <code>flags</code> contains
<code>VK_IMAGE_CREATE_SPLIT_INSTANCE_BIND_REGIONS_BIT</code>, then
<code>mipLevels</code> <strong class="purple">must</strong> be one, <code>arrayLayers</code> <strong class="purple">must</strong> be one,
<code>imageType</code> <strong class="purple">must</strong> be <code>VK_IMAGE_TYPE_2D</code>.
and <code>imageCreateMaybeLinear</code> (as defined in
<a href="vkspec.html#resources-image-creation-limits">Image Creation Limits</a>) <strong class="purple">must</strong> be
<code>false</code>.</p>
</li>
<li>
<p><a id="VUID-VkImageCreateInfo-flags-01572"></a>
If <code>flags</code> contains
<code>VK_IMAGE_CREATE_BLOCK_TEXEL_VIEW_COMPATIBLE_BIT</code>, then <code>format</code>
<strong class="purple">must</strong> be a <a href="vkspec.html#appendix-compressedtex-bc">block-compressed image format</a>,
an <a href="vkspec.html#appendix-compressedtex-etc2">ETC compressed image format</a>, or an
<a href="vkspec.html#appendix-compressedtex-astc">ASTC compressed image format</a>.</p>
</li>
<li>
<p><a id="VUID-VkImageCreateInfo-flags-01573"></a>
If <code>flags</code> contains
<code>VK_IMAGE_CREATE_BLOCK_TEXEL_VIEW_COMPATIBLE_BIT</code>, then <code>flags</code>
<strong class="purple">must</strong> also contain <code>VK_IMAGE_CREATE_MUTABLE_FORMAT_BIT</code>.</p>
</li>
<li>
<p><a id="VUID-VkImageCreateInfo-initialLayout-00993"></a>
<code>initialLayout</code> <strong class="purple">must</strong> be <code>VK_IMAGE_LAYOUT_UNDEFINED</code> or
<code>VK_IMAGE_LAYOUT_PREINITIALIZED</code>.</p>
</li>
<li>
<p><a id="VUID-VkImageCreateInfo-pNext-01443"></a>
    If the <code>pNext</code> chain includes a
<a href="#VkExternalMemoryImageCreateInfo">VkExternalMemoryImageCreateInfo</a>
or
<a href="#VkExternalMemoryImageCreateInfoNV">VkExternalMemoryImageCreateInfoNV</a>
    structure whose <code>handleTypes</code> member is not <code>0</code>, <code>initialLayout</code>
    <strong class="purple">must</strong> be <code>VK_IMAGE_LAYOUT_UNDEFINED</code></p>
</li>
<li>
<p><a id="VUID-VkImageCreateInfo-format-02561"></a>
If the image <code>format</code> is one of those listed in
<a href="vkspec.html#formats-requiring-sampler-ycbcr-conversion" class="bare">html/vkspec.html#formats-requiring-sampler-ycbcr-conversion</a>, then <code>mipLevels</code>
<strong class="purple">must</strong> be 1</p>
</li>
<li>
<p><a id="VUID-VkImageCreateInfo-format-02562"></a>
If the image <code>format</code> is one of those listed in
<a href="vkspec.html#formats-requiring-sampler-ycbcr-conversion" class="bare">html/vkspec.html#formats-requiring-sampler-ycbcr-conversion</a>, <code>samples</code> must be
<code>VK_SAMPLE_COUNT_1_BIT</code></p>
</li>
<li>
<p><a id="VUID-VkImageCreateInfo-format-02563"></a>
If the image <code>format</code> is one of those listed in
<a href="vkspec.html#formats-requiring-sampler-ycbcr-conversion" class="bare">html/vkspec.html#formats-requiring-sampler-ycbcr-conversion</a>, <code>imageType</code> <strong class="purple">must</strong> be
<code>VK_IMAGE_TYPE_2D</code></p>
</li>
<li>
<p><a id="VUID-VkImageCreateInfo-format-02653"></a>
If the image <code>format</code> is one of those listed in
<a href="vkspec.html#formats-requiring-sampler-ycbcr-conversion" class="bare">html/vkspec.html#formats-requiring-sampler-ycbcr-conversion</a>, and the
<code>ycbcrImageArrays</code> feature is not enabled, <code>arrayLayers</code> <strong class="purple">must</strong>
be 1</p>
</li>
<li>
<p><a id="VUID-VkImageCreateInfo-imageCreateFormatFeatures-02260"></a>
If <code>format</code> is a <em>multi-planar</em> format, and if
<code>imageCreateFormatFeatures</code> (as defined in
<a href="vkspec.html#resources-image-creation-limits">Image Creation Limits</a>) does not
contain <code>VK_FORMAT_FEATURE_DISJOINT_BIT</code>, then <code>flags</code> <strong class="purple">must</strong> not
contain <code>VK_IMAGE_CREATE_DISJOINT_BIT</code>.</p>
</li>
<li>
<p><a id="VUID-VkImageCreateInfo-format-01577"></a>
If <code>format</code> is not a <em>multi-planar</em> format, and <code>flags</code> does not
include <code>VK_IMAGE_CREATE_ALIAS_BIT</code>, <code>flags</code> <strong class="purple">must</strong> not contain
<code>VK_IMAGE_CREATE_DISJOINT_BIT</code></p>
</li>
<li>
<p><a id="VUID-VkImageCreateInfo-tiling-02261"></a>
If <code>tiling</code> is <code>VK_IMAGE_TILING_DRM_FORMAT_MODIFIER_EXT</code>, then
the <code>pNext</code> chain <strong class="purple">must</strong> contain exactly one of
<a href="#VkImageDrmFormatModifierListCreateInfoEXT">VkImageDrmFormatModifierListCreateInfoEXT</a> or
<a href="#VkImageDrmFormatModifierExplicitCreateInfoEXT">VkImageDrmFormatModifierExplicitCreateInfoEXT</a>.</p>
</li>
<li>
<p><a id="VUID-VkImageCreateInfo-pNext-02262"></a>
If the <code>pNext</code> chain contains
<a href="#VkImageDrmFormatModifierListCreateInfoEXT">VkImageDrmFormatModifierListCreateInfoEXT</a> or
<a href="#VkImageDrmFormatModifierExplicitCreateInfoEXT">VkImageDrmFormatModifierExplicitCreateInfoEXT</a>, then <code>tiling</code>
<strong class="purple">must</strong> be <code>VK_IMAGE_TILING_DRM_FORMAT_MODIFIER_EXT</code>.</p>
</li>
<li>
<p><a id="VUID-VkImageCreateInfo-tiling-02353"></a>
If <code>tiling</code> is <code>VK_IMAGE_TILING_DRM_FORMAT_MODIFIER_EXT</code> and
<code>flags</code> contains <code>VK_IMAGE_CREATE_MUTABLE_FORMAT_BIT</code>, then the
<code>pNext</code> chain <strong class="purple">must</strong> contain <a href="#VkImageFormatListCreateInfoKHR">VkImageFormatListCreateInfoKHR</a>
with non-zero <code>viewFormatCount</code>.</p>
</li>
<li>
<p><a id="VUID-VkImageCreateInfo-flags-01533"></a>
If <code>flags</code> contains
<code>VK_IMAGE_CREATE_SAMPLE_LOCATIONS_COMPATIBLE_DEPTH_BIT_EXT</code>
<code>format</code> <strong class="purple">must</strong> be a depth or depth/stencil format</p>
</li>
<li>
<p><a id="VUID-VkImageCreateInfo-pNext-02393"></a>
If the <code>pNext</code> chain includes a
<a href="#VkExternalMemoryImageCreateInfo">VkExternalMemoryImageCreateInfo</a> structure whose <code>handleTypes</code>
member includes
<code>VK_EXTERNAL_MEMORY_HANDLE_TYPE_ANDROID_HARDWARE_BUFFER_BIT_ANDROID</code>,
<code>imageType</code> <strong class="purple">must</strong> be <code>VK_IMAGE_TYPE_2D</code>.</p>
</li>
<li>
<p><a id="VUID-VkImageCreateInfo-pNext-02394"></a>
If the <code>pNext</code> chain includes a
<a href="#VkExternalMemoryImageCreateInfo">VkExternalMemoryImageCreateInfo</a> structure whose <code>handleTypes</code>
member includes
<code>VK_EXTERNAL_MEMORY_HANDLE_TYPE_ANDROID_HARDWARE_BUFFER_BIT_ANDROID</code>,
<code>mipLevels</code> <strong class="purple">must</strong> either be <code>1</code> or equal to the number of levels in
the complete mipmap chain based on <span class="eq"><code>extent.width</code></span>,
<span class="eq"><code>extent.height</code></span>, and <span class="eq"><code>extent.depth</code></span>.</p>
</li>
<li>
<p><a id="VUID-VkImageCreateInfo-pNext-02396"></a>
If the <code>pNext</code> chain includes a <a href="#VkExternalFormatANDROID">VkExternalFormatANDROID</a>
structure whose <code>externalFormat</code> member is not <code>0</code>, <code>flags</code>
<strong class="purple">must</strong> not include <code>VK_IMAGE_CREATE_MUTABLE_FORMAT_BIT</code>.</p>
</li>
<li>
<p><a id="VUID-VkImageCreateInfo-pNext-02397"></a>
If the <code>pNext</code> chain includes a <a href="#VkExternalFormatANDROID">VkExternalFormatANDROID</a>
structure whose <code>externalFormat</code> member is not <code>0</code>, <code>usage</code>
<strong class="purple">must</strong> not include any usages except <code>VK_IMAGE_USAGE_SAMPLED_BIT</code>.</p>
</li>
<li>
<p><a id="VUID-VkImageCreateInfo-pNext-02398"></a>
If the <code>pNext</code> chain includes a <a href="#VkExternalFormatANDROID">VkExternalFormatANDROID</a>
structure whose <code>externalFormat</code> member is not <code>0</code>, <code>tiling</code>
<strong class="purple">must</strong> be <code>VK_IMAGE_TILING_OPTIMAL</code>.</p>
</li>
<li>
<p><a id="VUID-VkImageCreateInfo-format-02534"></a>
If <code>format</code> is a depth-stencil format and the <code>pNext</code> chain
contains an instance of <a href="#VkImageStencilUsageCreateInfoEXT">VkImageStencilUsageCreateInfoEXT</a>, then its
<code>stencilUsage</code> member <strong class="purple">must</strong> only include
<code>VK_IMAGE_USAGE_DEPTH_STENCIL_ATTACHMENT_BIT</code> if <code>usage</code> also
includes it</p>
</li>
<li>
<p><a id="VUID-VkImageCreateInfo-format-02535"></a>
If <code>format</code> is a depth-stencil format and the <code>pNext</code> chain
contains an instance of <a href="#VkImageStencilUsageCreateInfoEXT">VkImageStencilUsageCreateInfoEXT</a>, then its
<code>stencilUsage</code> member <strong class="purple">must</strong> only include
<code>VK_IMAGE_USAGE_TRANSIENT_ATTACHMENT_BIT</code> if <code>usage</code> also
includes it</p>
</li>
<li>
<p><a id="VUID-VkImageCreateInfo-Format-02536"></a>
If <code>Format</code> is a depth-stencil format and the <code>pNext</code> chain
contains an instance of <a href="#VkImageStencilUsageCreateInfoEXT">VkImageStencilUsageCreateInfoEXT</a> with its
<code>stencilUsage</code> member including
<code>VK_IMAGE_USAGE_INPUT_ATTACHMENT_BIT</code>, <code>extent.width</code> <strong class="purple">must</strong> be
less than or equal to
<code>VkPhysicalDeviceLimits</code>::<code>maxFramebufferWidth</code></p>
</li>
<li>
<p><a id="VUID-VkImageCreateInfo-format-02537"></a>
If <code>format</code> is a depth-stencil format and the <code>pNext</code> chain
contains an instance of <a href="#VkImageStencilUsageCreateInfoEXT">VkImageStencilUsageCreateInfoEXT</a> with its
<code>stencilUsage</code> member including
<code>VK_IMAGE_USAGE_INPUT_ATTACHMENT_BIT</code>, <code>extent.height</code> <strong class="purple">must</strong> be
less than or equal to
<code>VkPhysicalDeviceLimits</code>::<code>maxFramebufferHeight</code></p>
</li>
<li>
<p><a id="VUID-VkImageCreateInfo-format-02538"></a>
If the <a href="vkspec.html#features-shaderStorageImageMultisample">multisampled storage
images</a> feature is not enabled, <code>format</code> is a depth-stencil format
and the <code>pNext</code> chain contains an instance of
<a href="#VkImageStencilUsageCreateInfoEXT">VkImageStencilUsageCreateInfoEXT</a> with its <code>stencilUsage</code>
including <code>VK_IMAGE_USAGE_STORAGE_BIT</code>, <code>samples</code> <strong class="purple">must</strong> be
<code>VK_SAMPLE_COUNT_1_BIT</code></p>
</li>
<li>
<p><a id="VUID-VkImageCreateInfo-flags-02050"></a>
If <code>flags</code> contains <code>VK_IMAGE_CREATE_CORNER_SAMPLED_BIT_NV</code>,
<code>imageType</code> <strong class="purple">must</strong> be <code>VK_IMAGE_TYPE_2D</code> or
<code>VK_IMAGE_TYPE_3D</code></p>
</li>
<li>
<p><a id="VUID-VkImageCreateInfo-flags-02051"></a>
If <code>flags</code> contains <code>VK_IMAGE_CREATE_CORNER_SAMPLED_BIT_NV</code>, it
<strong class="purple">must</strong> not contain <code>VK_IMAGE_CREATE_CUBE_COMPATIBLE_BIT</code> and the
<code>format</code> <strong class="purple">must</strong> not be a depth/stencil format</p>
</li>
<li>
<p><a id="VUID-VkImageCreateInfo-flags-02052"></a>
If <code>flags</code> contains <code>VK_IMAGE_CREATE_CORNER_SAMPLED_BIT_NV</code> and
<code>imageType</code> is <code>VK_IMAGE_TYPE_2D</code>, <code>extent</code>::<code>width</code> and
<code>extent</code>::<code>height</code> <strong class="purple">must</strong> be greater than <code>1</code></p>
</li>
<li>
<p><a id="VUID-VkImageCreateInfo-flags-02053"></a>
If <code>flags</code> contains <code>VK_IMAGE_CREATE_CORNER_SAMPLED_BIT_NV</code> and
<code>imageType</code> is <code>VK_IMAGE_TYPE_3D</code>, <code>extent</code>::<code>width</code>,
<code>extent</code>::<code>height</code>, and <code>extent</code>::<code>depth</code> <strong class="purple">must</strong> be
greater than <code>1</code></p>
</li>
<li>
<p><a id="VUID-VkImageCreateInfo-imageType-02082"></a>
If <code>usage</code> includes <code>VK_IMAGE_USAGE_SHADING_RATE_IMAGE_BIT_NV</code>,
<code>imageType</code> <strong class="purple">must</strong> be <code>VK_IMAGE_TYPE_2D</code>.</p>
</li>
<li>
<p><a id="VUID-VkImageCreateInfo-samples-02083"></a>
If <code>usage</code> includes <code>VK_IMAGE_USAGE_SHADING_RATE_IMAGE_BIT_NV</code>,
<code>samples</code> <strong class="purple">must</strong> be <code>VK_SAMPLE_COUNT_1_BIT</code>.</p>
</li>
<li>
<p><a id="VUID-VkImageCreateInfo-tiling-02084"></a>
If <code>usage</code> includes <code>VK_IMAGE_USAGE_SHADING_RATE_IMAGE_BIT_NV</code>,
<code>tiling</code> <strong class="purple">must</strong> be <code>VK_IMAGE_TILING_OPTIMAL</code>.</p>
</li>
<li>
<p><a id="VUID-VkImageCreateInfo-flags-02565"></a>
If <code>flags</code> contains <code>VK_IMAGE_CREATE_SUBSAMPLED_BIT_EXT</code>,
<code>tiling</code> <strong class="purple">must</strong> be <code>VK_IMAGE_TILING_OPTIMAL</code></p>
</li>
<li>
<p><a id="VUID-VkImageCreateInfo-flags-02566"></a>
If <code>flags</code> contains <code>VK_IMAGE_CREATE_SUBSAMPLED_BIT_EXT</code>,
<code>imageType</code> <strong class="purple">must</strong> be <code>VK_IMAGE_TYPE_2D</code></p>
</li>
<li>
<p><a id="VUID-VkImageCreateInfo-flags-02567"></a>
If <code>flags</code> contains <code>VK_IMAGE_CREATE_SUBSAMPLED_BIT_EXT</code>,
<code>flags</code> <strong class="purple">must</strong> not contain <code>VK_IMAGE_CREATE_CUBE_COMPATIBLE_BIT</code></p>
</li>
<li>
<p><a id="VUID-VkImageCreateInfo-flags-02568"></a>
If <code>flags</code> contains <code>VK_IMAGE_CREATE_SUBSAMPLED_BIT_EXT</code>,
<code>mipLevels</code> <strong class="purple">must</strong> be <code>1</code></p>
</li>
</ul>
</div>
</div>
</div>
<div class="sidebarblock">
<div class="content">
<div class="title">Valid Usage (Implicit)</div>
<div class="ulist">
<ul>
<li>
<p><a id="VUID-VkImageCreateInfo-sType-sType"></a> <code>sType</code> <strong class="purple">must</strong> be <code>VK_STRUCTURE_TYPE_IMAGE_CREATE_INFO</code></p>
</li>
<li>
<p><a id="VUID-VkImageCreateInfo-pNext-pNext"></a> Each <code>pNext</code> member of any structure (including this one) in the <code>pNext</code> chain <strong class="purple">must</strong> be either <code>NULL</code> or a pointer to a valid instance of <a href="#VkDedicatedAllocationImageCreateInfoNV">VkDedicatedAllocationImageCreateInfoNV</a>, <a href="#VkExternalFormatANDROID">VkExternalFormatANDROID</a>, <a href="#VkExternalMemoryImageCreateInfo">VkExternalMemoryImageCreateInfo</a>, <a href="#VkExternalMemoryImageCreateInfoNV">VkExternalMemoryImageCreateInfoNV</a>, <a href="#VkImageDrmFormatModifierExplicitCreateInfoEXT">VkImageDrmFormatModifierExplicitCreateInfoEXT</a>, <a href="#VkImageDrmFormatModifierListCreateInfoEXT">VkImageDrmFormatModifierListCreateInfoEXT</a>, <a href="#VkImageFormatListCreateInfoKHR">VkImageFormatListCreateInfoKHR</a>, <a href="#VkImageStencilUsageCreateInfoEXT">VkImageStencilUsageCreateInfoEXT</a>, or <a href="#VkImageSwapchainCreateInfoKHR">VkImageSwapchainCreateInfoKHR</a></p>
</li>
<li>
<p><a id="VUID-VkImageCreateInfo-sType-unique"></a> Each <code>sType</code> member in the <code>pNext</code> chain <strong class="purple">must</strong> be unique</p>
</li>
<li>
<p><a id="VUID-VkImageCreateInfo-flags-parameter"></a> <code>flags</code> <strong class="purple">must</strong> be a valid combination of <a href="#VkImageCreateFlagBits">VkImageCreateFlagBits</a> values</p>
</li>
<li>
<p><a id="VUID-VkImageCreateInfo-imageType-parameter"></a> <code>imageType</code> <strong class="purple">must</strong> be a valid <a href="#VkImageType">VkImageType</a> value</p>
</li>
<li>
<p><a id="VUID-VkImageCreateInfo-format-parameter"></a> <code>format</code> <strong class="purple">must</strong> be a valid <a href="#VkFormat">VkFormat</a> value</p>
</li>
<li>
<p><a id="VUID-VkImageCreateInfo-samples-parameter"></a> <code>samples</code> <strong class="purple">must</strong> be a valid <a href="#VkSampleCountFlagBits">VkSampleCountFlagBits</a> value</p>
</li>
<li>
<p><a id="VUID-VkImageCreateInfo-tiling-parameter"></a> <code>tiling</code> <strong class="purple">must</strong> be a valid <a href="#VkImageTiling">VkImageTiling</a> value</p>
</li>
<li>
<p><a id="VUID-VkImageCreateInfo-usage-parameter"></a> <code>usage</code> <strong class="purple">must</strong> be a valid combination of <a href="#VkImageUsageFlagBits">VkImageUsageFlagBits</a> values</p>
</li>
<li>
<p><a id="VUID-VkImageCreateInfo-usage-requiredbitmask"></a> <code>usage</code> <strong class="purple">must</strong> not be <code>0</code></p>
</li>
<li>
<p><a id="VUID-VkImageCreateInfo-sharingMode-parameter"></a> <code>sharingMode</code> <strong class="purple">must</strong> be a valid <a href="#VkSharingMode">VkSharingMode</a> value</p>
</li>
<li>
<p><a id="VUID-VkImageCreateInfo-initialLayout-parameter"></a> <code>initialLayout</code> <strong class="purple">must</strong> be a valid <a href="#VkImageLayout">VkImageLayout</a> value</p>
</li>
</ul>
</div>
</div>
</div>
</div>
<div class="sect3">
<h4 id="_see_also_522">See Also</h4>
<div class="paragraph">
<p><a href="#VkExtent3D">VkExtent3D</a>, <a href="#VkFormat">VkFormat</a>, <a href="#VkImageCreateFlags">VkImageCreateFlags</a>, <a href="#VkImageLayout">VkImageLayout</a>, <a href="#VkImageTiling">VkImageTiling</a>, <a href="#VkImageType">VkImageType</a>, <a href="#VkImageUsageFlags">VkImageUsageFlags</a>, <a href="#VkSampleCountFlagBits">VkSampleCountFlagBits</a>, <a href="#VkSharingMode">VkSharingMode</a>, <a href="#VkStructureType">VkStructureType</a>, <a href="#vkCreateImage">vkCreateImage</a></p>
</div>
</div>
<div class="sect3">
<h4 id="_document_notes_522">Document Notes</h4>
<div class="paragraph">
<p>For more information, see the Vulkan Specification at URL</p>
</div>
<div class="paragraph">
<p><a href="https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VkImageCreateInfo" class="bare">https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VkImageCreateInfo</a></p>
</div>
<div class="paragraph">
<p>This page is extracted from the Vulkan Specification.
Fixes and changes should be made to the Specification, not directly.</p>
</div>
<div style="page-break-after: always;"></div>
</div>
</div>
<div class="sect2">
<h3 id="_vkimagedrmformatmodifierexplicitcreateinfoext3">VkImageDrmFormatModifierExplicitCreateInfoEXT(3)</h3>
<div class="sect3">
<h4 id="_name_523">Name</h4>
<div class="paragraph">
<p>VkImageDrmFormatModifierExplicitCreateInfoEXT - Specify that an image be created with the provided DRM format modifier and explicit memory layout</p>
</div>
</div>
<div class="sect3">
<h4 id="_c_specification_523">C Specification</h4>
<div class="paragraph">
<p>If the <code>pNext</code> chain of <a href="#VkImageCreateInfo">VkImageCreateInfo</a> contains
<a href="#VkImageDrmFormatModifierExplicitCreateInfoEXT">VkImageDrmFormatModifierExplicitCreateInfoEXT</a>, then the image will be
created with the <a href="vkspec.html#glossary-drm-format-modifier">Linux DRM format modifier</a>
and memory layout defined by the structure.</p>
</div>
<div class="paragraph">
<p>The <a href="#VkImageDrmFormatModifierExplicitCreateInfoEXT">VkImageDrmFormatModifierExplicitCreateInfoEXT</a> structure is defined
as:</p>
</div>
<div id="VkImageDrmFormatModifierExplicitCreateInfoEXT" class="listingblock">
<div class="content">
<pre class="highlight"><code class="language-c++" data-lang="c++">typedef struct VkImageDrmFormatModifierExplicitCreateInfoEXT {
    VkStructureType               sType;
    const void*                   pNext;
    uint64_t                      drmFormatModifier;
    uint32_t                      drmFormatModifierPlaneCount;
    const VkSubresourceLayout*    pPlaneLayouts;
} VkImageDrmFormatModifierExplicitCreateInfoEXT;</code></pre>
</div>
</div>
</div>
<div class="sect3">
<h4 id="_members_160">Members</h4>
<div class="ulist">
<ul>
<li>
<p><code>sType</code> is the type of this structure.</p>
</li>
<li>
<p><code>pNext</code> is <code>NULL</code> or a pointer to an extension-specific structure.</p>
</li>
<li>
<p><code>drmFormatModifier</code> is the <em>Linux DRM format modifier</em> with which
the image will be created.</p>
</li>
<li>
<p><code>drmFormatModifierPlaneCount</code> is the number of <em>memory planes</em> in
the image (as reported by <a href="#VkDrmFormatModifierPropertiesEXT">VkDrmFormatModifierPropertiesEXT</a>) as
well as the length of the <code>pPlaneLayouts</code> array.</p>
</li>
<li>
<p><code>pPlaneLayouts</code> is an array of <a href="#VkSubresourceLayout">VkSubresourceLayout</a> structures
that describe the image&#8217;s <em>memory planes</em>.</p>
</li>
</ul>
</div>
</div>
<div class="sect3">
<h4 id="_description_523">Description</h4>
<div class="paragraph">
<p>The <code>i</code><sup>th</sup> member of <code>pPlaneLayouts</code> describes the layout of the
image&#8217;s <code>i</code><sup>th</sup> <em>memory plane</em> (that is,
<code>VK_IMAGE_ASPECT_MEMORY_PLANE_i_BIT_EXT</code>).
In each element of <code>pPlaneLayouts</code>, the implementation <strong class="purple">must</strong> ignore
<code>size</code>.
The implementation calculates the size of each plane, which the application
<strong class="purple">can</strong> query with <a href="#vkGetImageSubresourceLayout">vkGetImageSubresourceLayout</a>.</p>
</div>
<div class="paragraph">
<p>When creating an image with
<a href="#VkImageDrmFormatModifierExplicitCreateInfoEXT">VkImageDrmFormatModifierExplicitCreateInfoEXT</a>, it is the application&#8217;s
responsibility to satisfy all Valid Usage requirements.
However, the implementation <strong class="purple">must</strong> validate that the provided
<code>pPlaneLayouts</code>, when combined with the provided <code>drmFormatModifier</code>
and other creation parameters in <a href="#VkImageCreateInfo">VkImageCreateInfo</a> and its <code>pNext</code>
chain, produce a valid image.
(This validation is necessarily implementation-dependent and outside the
scope of Vulkan, and therefore not described by Valid Usage requirements).
If this validation fails, then <a href="#vkCreateImage">vkCreateImage</a> returns
<code>VK_ERROR_INVALID_DRM_FORMAT_MODIFIER_PLANE_LAYOUT_EXT</code>.</p>
</div>
<div class="sidebarblock">
<div class="content">
<div class="title">Valid Usage</div>
<div class="ulist">
<ul>
<li>
<p><a id="VUID-VkImageDrmFormatModifierExplicitCreateInfoEXT-drmFormatModifier-02264"></a>
<code>drmFormatModifier</code> must be compatible with the parameters in
<a href="#VkImageCreateInfo">VkImageCreateInfo</a> and its <code>pNext</code> chain, as determined by
querying <a href="#VkPhysicalDeviceImageFormatInfo2KHR">VkPhysicalDeviceImageFormatInfo2KHR</a> extended with
<a href="#VkPhysicalDeviceImageDrmFormatModifierInfoEXT">VkPhysicalDeviceImageDrmFormatModifierInfoEXT</a>.</p>
</li>
<li>
<p><a id="VUID-VkImageDrmFormatModifierExplicitCreateInfoEXT-drmFormatModifierPlaneCount-02265"></a>
<code>drmFormatModifierPlaneCount</code> <strong class="purple">must</strong> be equal to the
<a href="#VkDrmFormatModifierPropertiesEXT">VkDrmFormatModifierPropertiesEXT</a>::<code>drmFormatModifierPlaneCount</code>
associated with <a href="#VkImageCreateInfo">VkImageCreateInfo</a>::<code>format</code> and
<code>drmFormatModifier</code>, as found by querying
<a href="#VkDrmFormatModifierPropertiesListEXT">VkDrmFormatModifierPropertiesListEXT</a>.</p>
</li>
<li>
<p><a id="VUID-VkImageDrmFormatModifierExplicitCreateInfoEXT-size-02267"></a>
For each element of <code>pPlaneLayouts</code>, <code>size</code> <strong class="purple">must</strong> be 0</p>
</li>
<li>
<p><a id="VUID-VkImageDrmFormatModifierExplicitCreateInfoEXT-arrayPitch-02268"></a>
For each element of <code>pPlaneLayouts</code>, <code>arrayPitch</code> <strong class="purple">must</strong> be 0 if
<a href="#VkImageCreateInfo">VkImageCreateInfo</a>::<code>arrayLayers</code> is 1.</p>
</li>
<li>
<p><a id="VUID-VkImageDrmFormatModifierExplicitCreateInfoEXT-depthPitch-02269"></a>
For each element of <code>pPlaneLayouts</code>, <code>depthPitch</code> <strong class="purple">must</strong> be 0 if
<a href="#VkImageCreateInfo">VkImageCreateInfo</a>::<code>extent</code>::<code>depth</code> is 1.</p>
</li>
</ul>
</div>
</div>
</div>
<div class="sidebarblock">
<div class="content">
<div class="title">Valid Usage (Implicit)</div>
<div class="ulist">
<ul>
<li>
<p><a id="VUID-VkImageDrmFormatModifierExplicitCreateInfoEXT-sType-sType"></a> <code>sType</code> <strong class="purple">must</strong> be <code>VK_STRUCTURE_TYPE_IMAGE_DRM_FORMAT_MODIFIER_EXPLICIT_CREATE_INFO_EXT</code></p>
</li>
<li>
<p><a id="VUID-VkImageDrmFormatModifierExplicitCreateInfoEXT-pPlaneLayouts-parameter"></a> If <code>drmFormatModifierPlaneCount</code> is not <code>0</code>, <code>pPlaneLayouts</code> <strong class="purple">must</strong> be a valid pointer to an array of <code>drmFormatModifierPlaneCount</code> <code>VkSubresourceLayout</code> structures</p>
</li>
</ul>
</div>
</div>
</div>
</div>
<div class="sect3">
<h4 id="_see_also_523">See Also</h4>
<div class="paragraph">
<p><a href="#VkStructureType">VkStructureType</a>, <a href="#VkSubresourceLayout">VkSubresourceLayout</a></p>
</div>
</div>
<div class="sect3">
<h4 id="_document_notes_523">Document Notes</h4>
<div class="paragraph">
<p>For more information, see the Vulkan Specification at URL</p>
</div>
<div class="paragraph">
<p><a href="https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VkImageDrmFormatModifierExplicitCreateInfoEXT" class="bare">https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VkImageDrmFormatModifierExplicitCreateInfoEXT</a></p>
</div>
<div class="paragraph">
<p>This page is extracted from the Vulkan Specification.
Fixes and changes should be made to the Specification, not directly.</p>
</div>
<div style="page-break-after: always;"></div>
</div>
</div>
<div class="sect2">
<h3 id="_vkimagedrmformatmodifierlistcreateinfoext3">VkImageDrmFormatModifierListCreateInfoEXT(3)</h3>
<div class="sect3">
<h4 id="_name_524">Name</h4>
<div class="paragraph">
<p>VkImageDrmFormatModifierListCreateInfoEXT - Specify that an image must be created with a DRM format modifier from the provided list</p>
</div>
</div>
<div class="sect3">
<h4 id="_c_specification_524">C Specification</h4>
<div class="paragraph">
<p>If the <code>pNext</code> chain of <a href="#VkImageCreateInfo">VkImageCreateInfo</a> contains
<a href="#VkImageDrmFormatModifierListCreateInfoEXT">VkImageDrmFormatModifierListCreateInfoEXT</a>, then the image will be
created with one of the <a href="vkspec.html#glossary-drm-format-modifier">Linux DRM format
modifiers</a> listed in the structure.
The choice of modifier is implementation-dependent.</p>
</div>
<div class="paragraph">
<p>The <a href="#VkImageDrmFormatModifierListCreateInfoEXT">VkImageDrmFormatModifierListCreateInfoEXT</a> structure is defined as:</p>
</div>
<div id="VkImageDrmFormatModifierListCreateInfoEXT" class="listingblock">
<div class="content">
<pre class="highlight"><code class="language-c++" data-lang="c++">typedef struct VkImageDrmFormatModifierListCreateInfoEXT {
    VkStructureType    sType;
    const void*        pNext;
    uint32_t           drmFormatModifierCount;
    const uint64_t*    pDrmFormatModifiers;
} VkImageDrmFormatModifierListCreateInfoEXT;</code></pre>
</div>
</div>
</div>
<div class="sect3">
<h4 id="_members_161">Members</h4>
<div class="ulist">
<ul>
<li>
<p><code>sType</code> is the type of this structure.</p>
</li>
<li>
<p><code>pNext</code> is <code>NULL</code> or a pointer to an extension-specific structure.</p>
</li>
<li>
<p><code>drmFormatModifierCount</code> is the length of the
<code>pDrmFormatModifiers</code> array.</p>
</li>
<li>
<p><code>pDrmFormatModifiers</code> is an array of <em>Linux DRM format modifiers</em>.</p>
</li>
</ul>
</div>
</div>
<div class="sect3">
<h4 id="_description_524">Description</h4>
<div class="sidebarblock">
<div class="content">
<div class="title">Valid Usage</div>
<div class="ulist">
<ul>
<li>
<p><a id="VUID-VkImageDrmFormatModifierListCreateInfoEXT-pDrmFormatModifiers-02263"></a>
Each <em>modifier</em> in <code>pDrmFormatModifiers</code> must be compatible with the
parameters in <a href="#VkImageCreateInfo">VkImageCreateInfo</a> and its <code>pNext</code> chain, as
determined by querying <a href="#VkPhysicalDeviceImageFormatInfo2">VkPhysicalDeviceImageFormatInfo2</a> extended
with <a href="#VkPhysicalDeviceImageDrmFormatModifierInfoEXT">VkPhysicalDeviceImageDrmFormatModifierInfoEXT</a>.</p>
</li>
</ul>
</div>
</div>
</div>
<div class="sidebarblock">
<div class="content">
<div class="title">Valid Usage (Implicit)</div>
<div class="ulist">
<ul>
<li>
<p><a id="VUID-VkImageDrmFormatModifierListCreateInfoEXT-sType-sType"></a> <code>sType</code> <strong class="purple">must</strong> be <code>VK_STRUCTURE_TYPE_IMAGE_DRM_FORMAT_MODIFIER_LIST_CREATE_INFO_EXT</code></p>
</li>
<li>
<p><a id="VUID-VkImageDrmFormatModifierListCreateInfoEXT-pDrmFormatModifiers-parameter"></a> <code>pDrmFormatModifiers</code> <strong class="purple">must</strong> be a valid pointer to an array of <code>drmFormatModifierCount</code> <code>uint64_t</code> values</p>
</li>
<li>
<p><a id="VUID-VkImageDrmFormatModifierListCreateInfoEXT-drmFormatModifierCount-arraylength"></a> <code>drmFormatModifierCount</code> <strong class="purple">must</strong> be greater than <code>0</code></p>
</li>
</ul>
</div>
</div>
</div>
</div>
<div class="sect3">
<h4 id="_see_also_524">See Also</h4>
<div class="paragraph">
<p><a href="#VkStructureType">VkStructureType</a></p>
</div>
</div>
<div class="sect3">
<h4 id="_document_notes_524">Document Notes</h4>
<div class="paragraph">
<p>For more information, see the Vulkan Specification at URL</p>
</div>
<div class="paragraph">
<p><a href="https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VkImageDrmFormatModifierListCreateInfoEXT" class="bare">https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VkImageDrmFormatModifierListCreateInfoEXT</a></p>
</div>
<div class="paragraph">
<p>This page is extracted from the Vulkan Specification.
Fixes and changes should be made to the Specification, not directly.</p>
</div>
<div style="page-break-after: always;"></div>
</div>
</div>
<div class="sect2">
<h3 id="_vkimagedrmformatmodifierpropertiesext3">VkImageDrmFormatModifierPropertiesEXT(3)</h3>
<div class="sect3">
<h4 id="_name_525">Name</h4>
<div class="paragraph">
<p>VkImageDrmFormatModifierPropertiesEXT - Properties of an image&#8217;s Linux DRM format modifier</p>
</div>
</div>
<div class="sect3">
<h4 id="_c_specification_525">C Specification</h4>
<div class="paragraph">
<p>The <a href="#VkImageDrmFormatModifierPropertiesEXT">VkImageDrmFormatModifierPropertiesEXT</a> structure is defined as:</p>
</div>
<div id="VkImageDrmFormatModifierPropertiesEXT" class="listingblock">
<div class="content">
<pre class="highlight"><code class="language-c++" data-lang="c++">typedef struct VkImageDrmFormatModifierPropertiesEXT {
    VkStructureType    sType;
    void*              pNext;
    uint64_t           drmFormatModifier;
} VkImageDrmFormatModifierPropertiesEXT;</code></pre>
</div>
</div>
</div>
<div class="sect3">
<h4 id="_members_162">Members</h4>
<div class="ulist">
<ul>
<li>
<p><code>sType</code> is the type of this structure.</p>
</li>
<li>
<p><code>pNext</code> is <code>NULL</code> or a pointer to an extension-specific structure.</p>
</li>
<li>
<p><code>drmFormatModifier</code> returns the image&#8217;s
<a href="vkspec.html#glossary-drm-format-modifier">Linux DRM format modifier</a>.</p>
</li>
</ul>
</div>
</div>
<div class="sect3">
<h4 id="_description_525">Description</h4>
<div class="paragraph">
<p>If the <code>image</code> was created with
<a href="#VkImageDrmFormatModifierListCreateInfoEXT">VkImageDrmFormatModifierListCreateInfoEXT</a>, then the returned
<code>drmFormatModifier</code> <strong class="purple">must</strong> belong to the list of modifiers provided at
time of image creation in
<a href="#VkImageDrmFormatModifierListCreateInfoEXT">VkImageDrmFormatModifierListCreateInfoEXT</a>::<code>pDrmFormatModifiers</code>.
If the <code>image</code> was created with
<a href="#VkImageDrmFormatModifierExplicitCreateInfoEXT">VkImageDrmFormatModifierExplicitCreateInfoEXT</a>, then the returned
<code>drmFormatModifier</code> <strong class="purple">must</strong> be the modifier provided at time of image
creation in
<a href="#VkImageDrmFormatModifierExplicitCreateInfoEXT">VkImageDrmFormatModifierExplicitCreateInfoEXT</a>::<code>drmFormatModifier</code>.</p>
</div>
<div class="sidebarblock">
<div class="content">
<div class="title">Valid Usage (Implicit)</div>
<div class="ulist">
<ul>
<li>
<p><a id="VUID-VkImageDrmFormatModifierPropertiesEXT-sType-sType"></a> <code>sType</code> <strong class="purple">must</strong> be <code>VK_STRUCTURE_TYPE_IMAGE_DRM_FORMAT_MODIFIER_PROPERTIES_EXT</code></p>
</li>
<li>
<p><a id="VUID-VkImageDrmFormatModifierPropertiesEXT-pNext-pNext"></a> <code>pNext</code> <strong class="purple">must</strong> be <code>NULL</code></p>
</li>
</ul>
</div>
</div>
</div>
</div>
<div class="sect3">
<h4 id="_see_also_525">See Also</h4>
<div class="paragraph">
<p><a href="#VkStructureType">VkStructureType</a>, <a href="#vkGetImageDrmFormatModifierPropertiesEXT">vkGetImageDrmFormatModifierPropertiesEXT</a></p>
</div>
</div>
<div class="sect3">
<h4 id="_document_notes_525">Document Notes</h4>
<div class="paragraph">
<p>For more information, see the Vulkan Specification at URL</p>
</div>
<div class="paragraph">
<p><a href="https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VkImageDrmFormatModifierPropertiesEXT" class="bare">https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VkImageDrmFormatModifierPropertiesEXT</a></p>
</div>
<div class="paragraph">
<p>This page is extracted from the Vulkan Specification.
Fixes and changes should be made to the Specification, not directly.</p>
</div>
<div style="page-break-after: always;"></div>
</div>
</div>
<div class="sect2">
<h3 id="_vkimageformatlistcreateinfokhr3">VkImageFormatListCreateInfoKHR(3)</h3>
<div class="sect3">
<h4 id="_name_526">Name</h4>
<div class="paragraph">
<p>VkImageFormatListCreateInfoKHR - Specify that an image <strong class="purple">can</strong> be used with a particular set of formats</p>
</div>
</div>
<div class="sect3">
<h4 id="_c_specification_526">C Specification</h4>
<div class="paragraph">
<p>If the <code>pNext</code> list of <a href="#VkImageCreateInfo">VkImageCreateInfo</a> includes a
<code>VkImageFormatListCreateInfoKHR</code> structure, then that structure contains
a list of all formats that <strong class="purple">can</strong> be used when creating views of this image.</p>
</div>
<div class="paragraph">
<p>The <code>VkImageFormatListCreateInfoKHR</code> structure is defined as:</p>
</div>
<div id="VkImageFormatListCreateInfoKHR" class="listingblock">
<div class="content">
<pre class="highlight"><code class="language-c++" data-lang="c++">typedef struct VkImageFormatListCreateInfoKHR {
    VkStructureType    sType;
    const void*        pNext;
    uint32_t           viewFormatCount;
    const VkFormat*    pViewFormats;
} VkImageFormatListCreateInfoKHR;</code></pre>
</div>
</div>
</div>
<div class="sect3">
<h4 id="_members_163">Members</h4>
<div class="ulist">
<ul>
<li>
<p><code>sType</code> is the type of this structure.</p>
</li>
<li>
<p><code>pNext</code> is <code>NULL</code> or a pointer to an extension-specific structure.</p>
</li>
<li>
<p><code>viewFormatCount</code> is the number of entries in the <code>pViewFormats</code>
array.</p>
</li>
<li>
<p><code>pViewFormats</code> is an array which lists of all formats which <strong class="purple">can</strong> be
used when creating views of this image.</p>
</li>
</ul>
</div>
</div>
<div class="sect3">
<h4 id="_description_526">Description</h4>
<div class="paragraph">
<p>If <code>viewFormatCount</code> is zero, <code>pViewFormats</code> is ignored and the
image is created as if the <code>VkImageFormatListCreateInfoKHR</code> structure
were not included in the <code>pNext</code> list of <a href="#VkImageCreateInfo">VkImageCreateInfo</a>.</p>
</div>
<div class="sidebarblock">
<div class="content">
<div class="title">Valid Usage</div>
<div class="ulist">
<ul>
<li>
<p><a id="VUID-VkImageFormatListCreateInfoKHR-viewFormatCount-01578"></a>
If <code>viewFormatCount</code> is not <code>0</code>, all of the formats in the
<code>pViewFormats</code> array <strong class="purple">must</strong> be compatible with the format specified
in the <code>format</code> field of <code>VkImageCreateInfo</code>, as described in
the <a href="vkspec.html#formats-compatibility">compatibility table</a>.</p>
</li>
<li>
<p><a id="VUID-VkImageFormatListCreateInfoKHR-flags-01579"></a>
If <code>VkImageCreateInfo</code>::<code>flags</code> does not contain
<code>VK_IMAGE_CREATE_MUTABLE_FORMAT_BIT</code>, <code>viewFormatCount</code> <strong class="purple">must</strong> be
<code>0</code> or <code>1</code>.</p>
</li>
<li>
<p><a id="VUID-VkImageFormatListCreateInfoKHR-viewFormatCount-01580"></a>
If <code>viewFormatCount</code> is not <code>0</code>,
<code>VkImageCreateInfo</code>::<code>format</code> <strong class="purple">must</strong> be in <code>pViewFormats</code>.</p>
</li>
</ul>
</div>
</div>
</div>
<div class="sidebarblock">
<div class="content">
<div class="title">Valid Usage (Implicit)</div>
<div class="ulist">
<ul>
<li>
<p><a id="VUID-VkImageFormatListCreateInfoKHR-sType-sType"></a> <code>sType</code> <strong class="purple">must</strong> be <code>VK_STRUCTURE_TYPE_IMAGE_FORMAT_LIST_CREATE_INFO_KHR</code></p>
</li>
<li>
<p><a id="VUID-VkImageFormatListCreateInfoKHR-pViewFormats-parameter"></a> If <code>viewFormatCount</code> is not <code>0</code>, <code>pViewFormats</code> <strong class="purple">must</strong> be a valid pointer to an array of <code>viewFormatCount</code> valid <a href="#VkFormat">VkFormat</a> values</p>
</li>
</ul>
</div>
</div>
</div>
</div>
<div class="sect3">
<h4 id="_see_also_526">See Also</h4>
<div class="paragraph">
<p><a href="#VkFormat">VkFormat</a>, <a href="#VkStructureType">VkStructureType</a></p>
</div>
</div>
<div class="sect3">
<h4 id="_document_notes_526">Document Notes</h4>
<div class="paragraph">
<p>For more information, see the Vulkan Specification at URL</p>
</div>
<div class="paragraph">
<p><a href="https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VkImageFormatListCreateInfoKHR" class="bare">https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VkImageFormatListCreateInfoKHR</a></p>
</div>
<div class="paragraph">
<p>This page is extracted from the Vulkan Specification.
Fixes and changes should be made to the Specification, not directly.</p>
</div>
<div style="page-break-after: always;"></div>
</div>
</div>
<div class="sect2">
<h3 id="_vkimageformatproperties3">VkImageFormatProperties(3)</h3>
<div class="sect3">
<h4 id="_name_527">Name</h4>
<div class="paragraph">
<p>VkImageFormatProperties - Structure specifying an image format properties</p>
</div>
</div>
<div class="sect3">
<h4 id="_c_specification_527">C Specification</h4>
<div class="paragraph">
<p>The <code>VkImageFormatProperties</code> structure is defined as:</p>
</div>
<div id="VkImageFormatProperties" class="listingblock">
<div class="content">
<pre class="highlight"><code class="language-c++" data-lang="c++">typedef struct VkImageFormatProperties {
    VkExtent3D            maxExtent;
    uint32_t              maxMipLevels;
    uint32_t              maxArrayLayers;
    VkSampleCountFlags    sampleCounts;
    VkDeviceSize          maxResourceSize;
} VkImageFormatProperties;</code></pre>
</div>
</div>
</div>
<div class="sect3">
<h4 id="_members_164">Members</h4>
<div class="ulist">
<ul>
<li>
<p><code>maxExtent</code> are the maximum image dimensions.
See the <a href="vkspec.html#features-extentperimagetype">Allowed Extent Values</a> section
below for how these values are constrained by <code>type</code>.</p>
</li>
<li>
<p><code>maxMipLevels</code> is the maximum number of mipmap levels.
<code>maxMipLevels</code> <strong class="purple">must</strong> be equal to the number of levels in the
complete mipmap chain based on the <span class="eq"><code>maxExtent.width</code></span>,
<span class="eq"><code>maxExtent.height</code></span>, and <span class="eq"><code>maxExtent.depth</code></span>, except
when one of the following conditions is true, in which case it <strong class="purple">may</strong>
instead be <code>1</code>:</p>
<div class="ulist">
<ul>
<li>
<p><code>vkGetPhysicalDeviceImageFormatProperties</code>::<code>tiling</code> was
<code>VK_IMAGE_TILING_LINEAR</code></p>
</li>
<li>
<p><a href="#VkPhysicalDeviceImageFormatInfo2">VkPhysicalDeviceImageFormatInfo2</a>::<code>tiling</code> was
<code>VK_IMAGE_TILING_DRM_FORMAT_MODIFIER_EXT</code></p>
</li>
<li>
<p>the <a href="#VkPhysicalDeviceImageFormatInfo2">VkPhysicalDeviceImageFormatInfo2</a>::<code>pNext</code> chain included
an instance of <a href="#VkPhysicalDeviceExternalImageFormatInfo">VkPhysicalDeviceExternalImageFormatInfo</a> with a
handle type included in the <code>handleTypes</code> member for which mipmap
image support is not required</p>
</li>
<li>
<p>image <code>format</code> is one of those listed in
<a href="vkspec.html#formats-requiring-sampler-ycbcr-conversion" class="bare">html/vkspec.html#formats-requiring-sampler-ycbcr-conversion</a></p>
</li>
<li>
<p><code>flags</code> contains <code>VK_IMAGE_CREATE_SUBSAMPLED_BIT_EXT</code></p>
</li>
</ul>
</div>
</li>
<li>
<p><code>maxArrayLayers</code> is the maximum number of array layers.
<code>maxArrayLayers</code> <strong class="purple">must</strong> be no less than
<a href="#VkPhysicalDeviceLimits">VkPhysicalDeviceLimits</a>::<code>maxImageArrayLayers</code>, except when one
of the following conditions is true, in which case it <strong class="purple">may</strong> instead be
<code>1</code>:</p>
<div class="ulist">
<ul>
<li>
<p><code>tiling</code> is <code>VK_IMAGE_TILING_LINEAR</code></p>
</li>
<li>
<p><code>tiling</code> is <code>VK_IMAGE_TILING_OPTIMAL</code> and <code>type</code> is
<code>VK_IMAGE_TYPE_3D</code></p>
</li>
<li>
<p><code>format</code> is one of those listed in
<a href="vkspec.html#formats-requiring-sampler-ycbcr-conversion" class="bare">html/vkspec.html#formats-requiring-sampler-ycbcr-conversion</a></p>
</li>
</ul>
</div>
</li>
<li>
<p>If <code>tiling</code> is <code>VK_IMAGE_TILING_DRM_FORMAT_MODIFIER_EXT</code>, then
<code>maxArrayLayers</code> <strong class="purple">must</strong> not be 0.</p>
</li>
<li>
<p><code>sampleCounts</code> is a bitmask of <a href="#VkSampleCountFlagBits">VkSampleCountFlagBits</a>
specifying all the supported sample counts for this image as described
<a href="vkspec.html#features-supported-sample-counts">below</a>.</p>
</li>
<li>
<p><code>maxResourceSize</code> is an upper bound on the total image size in
bytes, inclusive of all image subresources.
Implementations <strong class="purple">may</strong> have an address space limit on total size of a
resource, which is advertised by this property.
<code>maxResourceSize</code> <strong class="purple">must</strong> be at least 2<sup>31</sup>.</p>
</li>
</ul>
</div>
</div>
<div class="sect3">
<h4 id="_description_527">Description</h4>
<div class="admonitionblock note">
<table>
<tr>
<td class="icon">
<i class="fa icon-note" title="Note"></i>
</td>
<td class="content">
<div class="title">Note</div>
<div class="paragraph">
<p>There is no mechanism to query the size of an image before creating it, to
compare that size against <code>maxResourceSize</code>.
If an application attempts to create an image that exceeds this limit, the
creation will fail and <a href="#vkCreateImage">vkCreateImage</a> will return
<code>VK_ERROR_OUT_OF_DEVICE_MEMORY</code>.
While the advertised limit <strong class="purple">must</strong> be at least 2<sup>31</sup>, it <strong class="purple">may</strong> not be possible
to create an image that approaches that size, particularly for
<code>VK_IMAGE_TYPE_1D</code>.</p>
</div>
</td>
</tr>
</table>
</div>
<div class="paragraph">
<p>If the combination of parameters to
<code>vkGetPhysicalDeviceImageFormatProperties</code> is not supported by the
implementation for use in <a href="#vkCreateImage">vkCreateImage</a>, then all members of
<code>VkImageFormatProperties</code> will be filled with zero.</p>
</div>
<div class="admonitionblock note">
<table>
<tr>
<td class="icon">
<i class="fa icon-note" title="Note"></i>
</td>
<td class="content">
<div class="title">Note</div>
<div class="paragraph">
<p>Filling <code>VkImageFormatProperties</code> with zero for unsupported formats is
an exception to the usual rule that output structures have undefined
contents on error.
This exception was unintentional, but is preserved for backwards
compatibility.</p>
</div>
</td>
</tr>
</table>
</div>
</div>
<div class="sect3">
<h4 id="_see_also_527">See Also</h4>
<div class="paragraph">
<p><code>VkDeviceSize</code>, <a href="#VkExtent3D">VkExtent3D</a>, <a href="#VkExternalImageFormatPropertiesNV">VkExternalImageFormatPropertiesNV</a>, <a href="#VkImageFormatProperties2">VkImageFormatProperties2</a>, <a href="#VkSampleCountFlags">VkSampleCountFlags</a>, <a href="#vkGetPhysicalDeviceImageFormatProperties">vkGetPhysicalDeviceImageFormatProperties</a></p>
</div>
</div>
<div class="sect3">
<h4 id="_document_notes_527">Document Notes</h4>
<div class="paragraph">
<p>For more information, see the Vulkan Specification at URL</p>
</div>
<div class="paragraph">
<p><a href="https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VkImageFormatProperties" class="bare">https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VkImageFormatProperties</a></p>
</div>
<div class="paragraph">
<p>This page is extracted from the Vulkan Specification.
Fixes and changes should be made to the Specification, not directly.</p>
</div>
<div style="page-break-after: always;"></div>
</div>
</div>
<div class="sect2">
<h3 id="_vkimageformatproperties23">VkImageFormatProperties2(3)</h3>
<div class="sect3">
<h4 id="_name_528">Name</h4>
<div class="paragraph">
<p>VkImageFormatProperties2 - Structure specifying an image format properties</p>
</div>
</div>
<div class="sect3">
<h4 id="_c_specification_528">C Specification</h4>
<div class="paragraph">
<p>The <code>VkImageFormatProperties2</code> structure is defined as:</p>
</div>
<div id="VkImageFormatProperties2" class="listingblock">
<div class="content">
<pre class="highlight"><code class="language-c++" data-lang="c++">typedef struct VkImageFormatProperties2 {
    VkStructureType            sType;
    void*                      pNext;
    VkImageFormatProperties    imageFormatProperties;
} VkImageFormatProperties2;</code></pre>
</div>
</div>
<div class="paragraph">
<p>or the equivalent</p>
</div>
<div id="VkImageFormatProperties2KHR" class="listingblock">
<div class="content">
<pre class="highlight"><code class="language-c++" data-lang="c++">typedef VkImageFormatProperties2 VkImageFormatProperties2KHR;</code></pre>
</div>
</div>
</div>
<div class="sect3">
<h4 id="_members_165">Members</h4>
<div class="ulist">
<ul>
<li>
<p><code>sType</code> is the type of this structure.</p>
</li>
<li>
<p><code>pNext</code> is <code>NULL</code> or a pointer to an extension-specific structure.
The <code>pNext</code> chain of <code>VkImageFormatProperties2</code> is used to allow
the specification of additional capabilities to be returned from
<code>vkGetPhysicalDeviceImageFormatProperties2</code>.</p>
</li>
<li>
<p><code>imageFormatProperties</code> is an instance of a
<a href="#VkImageFormatProperties">VkImageFormatProperties</a> structure in which capabilities are
returned.</p>
</li>
</ul>
</div>
</div>
<div class="sect3">
<h4 id="_description_528">Description</h4>
<div class="paragraph">
<p>If the combination of parameters to
<code>vkGetPhysicalDeviceImageFormatProperties2</code> is not supported by the
implementation for use in <a href="#vkCreateImage">vkCreateImage</a>, then all members of
<code>imageFormatProperties</code> will be filled with zero.</p>
</div>
<div class="admonitionblock note">
<table>
<tr>
<td class="icon">
<i class="fa icon-note" title="Note"></i>
</td>
<td class="content">
<div class="title">Note</div>
<div class="paragraph">
<p>Filling <code>imageFormatProperties</code> with zero for unsupported formats is an
exception to the usual rule that output structures have undefined contents
on error.
This exception was unintentional, but is preserved for backwards
compatibility.
This exeption only applies to <code>imageFormatProperties</code>, not <code>sType</code>,
<code>pNext</code>, or any structures chained from <code>pNext</code>.</p>
</div>
</td>
</tr>
</table>
</div>
<div class="sidebarblock">
<div class="content">
<div class="title">Valid Usage (Implicit)</div>
<div class="ulist">
<ul>
<li>
<p><a id="VUID-VkImageFormatProperties2-sType-sType"></a> <code>sType</code> <strong class="purple">must</strong> be <code>VK_STRUCTURE_TYPE_IMAGE_FORMAT_PROPERTIES_2</code></p>
</li>
<li>
<p><a id="VUID-VkImageFormatProperties2-pNext-pNext"></a> Each <code>pNext</code> member of any structure (including this one) in the <code>pNext</code> chain <strong class="purple">must</strong> be either <code>NULL</code> or a pointer to a valid instance of <a href="#VkAndroidHardwareBufferUsageANDROID">VkAndroidHardwareBufferUsageANDROID</a>, <a href="#VkExternalImageFormatProperties">VkExternalImageFormatProperties</a>, <a href="#VkFilterCubicImageViewImageFormatPropertiesEXT">VkFilterCubicImageViewImageFormatPropertiesEXT</a>, <a href="#VkSamplerYcbcrConversionImageFormatProperties">VkSamplerYcbcrConversionImageFormatProperties</a>, or <a href="#VkTextureLODGatherFormatPropertiesAMD">VkTextureLODGatherFormatPropertiesAMD</a></p>
</li>
<li>
<p><a id="VUID-VkImageFormatProperties2-sType-unique"></a> Each <code>sType</code> member in the <code>pNext</code> chain <strong class="purple">must</strong> be unique</p>
</li>
</ul>
</div>
</div>
</div>
</div>
<div class="sect3">
<h4 id="_see_also_528">See Also</h4>
<div class="paragraph">
<p><a href="#VkImageFormatProperties">VkImageFormatProperties</a>, <a href="#VkStructureType">VkStructureType</a>, <a href="#vkGetPhysicalDeviceImageFormatProperties2">vkGetPhysicalDeviceImageFormatProperties2</a>, <a href="#vkGetPhysicalDeviceImageFormatProperties2KHR">vkGetPhysicalDeviceImageFormatProperties2KHR</a></p>
</div>
</div>
<div class="sect3">
<h4 id="_document_notes_528">Document Notes</h4>
<div class="paragraph">
<p>For more information, see the Vulkan Specification at URL</p>
</div>
<div class="paragraph">
<p><a href="https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VkImageFormatProperties2" class="bare">https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VkImageFormatProperties2</a></p>
</div>
<div class="paragraph">
<p>This page is extracted from the Vulkan Specification.
Fixes and changes should be made to the Specification, not directly.</p>
</div>
<div style="page-break-after: always;"></div>
</div>
</div>
<div class="sect2">
<h3 id="_vkimagememorybarrier3">VkImageMemoryBarrier(3)</h3>
<div class="sect3">
<h4 id="_name_529">Name</h4>
<div class="paragraph">
<p>VkImageMemoryBarrier - Structure specifying the parameters of an image memory barrier</p>
</div>
</div>
<div class="sect3">
<h4 id="_c_specification_529">C Specification</h4>
<div class="paragraph">
<p>The <code>VkImageMemoryBarrier</code> structure is defined as:</p>
</div>
<div id="VkImageMemoryBarrier" class="listingblock">
<div class="content">
<pre class="highlight"><code class="language-c++" data-lang="c++">typedef struct VkImageMemoryBarrier {
    VkStructureType            sType;
    const void*                pNext;
    VkAccessFlags              srcAccessMask;
    VkAccessFlags              dstAccessMask;
    VkImageLayout              oldLayout;
    VkImageLayout              newLayout;
    uint32_t                   srcQueueFamilyIndex;
    uint32_t                   dstQueueFamilyIndex;
    VkImage                    image;
    VkImageSubresourceRange    subresourceRange;
} VkImageMemoryBarrier;</code></pre>
</div>
</div>
</div>
<div class="sect3">
<h4 id="_members_166">Members</h4>
<div class="ulist">
<ul>
<li>
<p><code>sType</code> is the type of this structure.</p>
</li>
<li>
<p><code>pNext</code> is <code>NULL</code> or a pointer to an extension-specific structure.</p>
</li>
<li>
<p><code>srcAccessMask</code> is a bitmask of <a href="#VkAccessFlagBits">VkAccessFlagBits</a> specifying a
<a href="vkspec.html#synchronization-access-masks">source access mask</a>.</p>
</li>
<li>
<p><code>dstAccessMask</code> is a bitmask of <a href="#VkAccessFlagBits">VkAccessFlagBits</a> specifying a
<a href="vkspec.html#synchronization-access-masks">destination access mask</a>.</p>
</li>
<li>
<p><code>oldLayout</code> is the old layout in an
<a href="vkspec.html#synchronization-image-layout-transitions">image layout transition</a>.</p>
</li>
<li>
<p><code>newLayout</code> is the new layout in an
<a href="vkspec.html#synchronization-image-layout-transitions">image layout transition</a>.</p>
</li>
<li>
<p><code>srcQueueFamilyIndex</code> is the source queue family for a
<a href="vkspec.html#synchronization-queue-transfers">queue family ownership transfer</a>.</p>
</li>
<li>
<p><code>dstQueueFamilyIndex</code> is the destination queue family for a
<a href="vkspec.html#synchronization-queue-transfers">queue family ownership transfer</a>.</p>
</li>
<li>
<p><code>image</code> is a handle to the image affected by this barrier.</p>
</li>
<li>
<p><code>subresourceRange</code> describes the <a href="vkspec.html#resources-image-views">image
subresource range</a> within <code>image</code> that is affected by this barrier.</p>
</li>
</ul>
</div>
</div>
<div class="sect3">
<h4 id="_description_529">Description</h4>
<div class="paragraph">
<p>The first <a href="vkspec.html#synchronization-dependencies-access-scopes">access scope</a> is
limited to access to memory through the specified image subresource range,
via access types in the <a href="vkspec.html#synchronization-access-masks">source access mask</a>
specified by <code>srcAccessMask</code>.
If <code>srcAccessMask</code> includes <code>VK_ACCESS_HOST_WRITE_BIT</code>, memory
writes performed by that access type are also made visible, as that access
type is not performed through a resource.</p>
</div>
<div class="paragraph">
<p>The second <a href="vkspec.html#synchronization-dependencies-access-scopes">access scope</a> is
limited to access to memory through the specified image subresource range,
via access types in the <a href="vkspec.html#synchronization-access-masks">destination access
mask</a> specified by <code>dstAccessMask</code>.
If <code>dstAccessMask</code> includes <code>VK_ACCESS_HOST_WRITE_BIT</code> or
<code>VK_ACCESS_HOST_READ_BIT</code>, available memory writes are also made visible
to accesses of those types, as those access types are not performed through
a resource.</p>
</div>
<div class="paragraph">
<p>If <code>srcQueueFamilyIndex</code> is not equal to <code>dstQueueFamilyIndex</code>, and
<code>srcQueueFamilyIndex</code> is equal to the current queue family, then the
memory barrier defines a <a href="vkspec.html#synchronization-queue-transfers-release">queue
family release operation</a> for the specified image subresource range, and
the second access scope includes no access, as if <code>dstAccessMask</code> was
<code>0</code>.</p>
</div>
<div class="paragraph">
<p>If <code>dstQueueFamilyIndex</code> is not equal to <code>srcQueueFamilyIndex</code>, and
<code>dstQueueFamilyIndex</code> is equal to the current queue family, then the
memory barrier defines a <a href="vkspec.html#synchronization-queue-transfers-acquire">queue
family acquire operation</a> for the specified image subresource range, and
the first access scope includes no access, as if <code>srcAccessMask</code> was
<code>0</code>.</p>
</div>
<div class="paragraph">
<p>If <code>oldLayout</code> is not equal to <code>newLayout</code>, then the memory barrier
defines an <a href="vkspec.html#synchronization-image-layout-transitions">image layout
transition</a> for the specified image subresource range.</p>
</div>
<div id="synchronization-image-barrier-layout-transition-order" class="paragraph">
<p>Layout transitions that are performed via image memory barriers execute in
their entirety in <a href="vkspec.html#synchronization-submission-order">submission order</a>,
relative to other image layout transitions submitted to the same queue,
including those performed by <a href="vkspec.html#renderpass">render passes</a>.
In effect there is an implicit execution dependency from each such layout
transition to all layout transitions previously submitted to the same queue.</p>
</div>
<div class="paragraph">
<p>The image layout of each image subresource of a depth/stencil image created
with <code>VK_IMAGE_CREATE_SAMPLE_LOCATIONS_COMPATIBLE_DEPTH_BIT_EXT</code> is
dependent on the last sample locations used to render to the image
subresource as a depth/stencil attachment, thus when the <code>image</code> member
of an <code>VkImageMemoryBarrier</code> is an image created with this flag the
application <strong class="purple">can</strong> chain a <a href="#VkSampleLocationsInfoEXT">VkSampleLocationsInfoEXT</a> structure to the
<code>pNext</code> chain of <code>VkImageMemoryBarrier</code> to specify the sample
locations to use during the image layout transition.</p>
</div>
<div class="paragraph">
<p>If the <code>VkSampleLocationsInfoEXT</code> structure in the <code>pNext</code> chain of
<code>VkImageMemoryBarrier</code> does not match the sample location state last
used to render to the image subresource range specified by
<code>subresourceRange</code> or if no <code>VkSampleLocationsInfoEXT</code> structure is
in the <code>pNext</code> chain of <code>VkImageMemoryBarrier</code> then the contents of
the given image subresource range becomes undefined as if <code>oldLayout</code>
would equal <code>VK_IMAGE_LAYOUT_UNDEFINED</code>.</p>
</div>
<div class="paragraph">
<p>If <code>image</code> has a multi-planar format and the image is <em>disjoint</em>, then
including <code>VK_IMAGE_ASPECT_COLOR_BIT</code> in the <code>aspectMask</code> member of
<code>subresourceRange</code> is equivalent to including
<code>VK_IMAGE_ASPECT_PLANE_0_BIT</code>, <code>VK_IMAGE_ASPECT_PLANE_1_BIT</code>, and
(for three-plane formats only) <code>VK_IMAGE_ASPECT_PLANE_2_BIT</code>.</p>
</div>
<div class="sidebarblock">
<div class="content">
<div class="title">Valid Usage</div>
<div class="ulist">
<ul>
<li>
<p><a id="VUID-VkImageMemoryBarrier-oldLayout-01197"></a>
<code>oldLayout</code> <strong class="purple">must</strong> be <code>VK_IMAGE_LAYOUT_UNDEFINED</code> or the current
layout of the image subresources affected by the barrier</p>
</li>
<li>
<p><a id="VUID-VkImageMemoryBarrier-newLayout-01198"></a>
<code>newLayout</code> <strong class="purple">must</strong> not be <code>VK_IMAGE_LAYOUT_UNDEFINED</code> or
<code>VK_IMAGE_LAYOUT_PREINITIALIZED</code></p>
</li>
<li>
<p><a id="VUID-VkImageMemoryBarrier-image-01381"></a>
If <code>image</code> was created with a sharing mode of
<code>VK_SHARING_MODE_CONCURRENT</code>, at least one of
<code>srcQueueFamilyIndex</code> and <code>dstQueueFamilyIndex</code> <strong class="purple">must</strong> be
<code>VK_QUEUE_FAMILY_IGNORED</code></p>
</li>
<li>
<p><a id="VUID-VkImageMemoryBarrier-image-01766"></a>
If <code>image</code> was created with a sharing mode of
<code>VK_SHARING_MODE_CONCURRENT</code>, and one of <code>srcQueueFamilyIndex</code>
and <code>dstQueueFamilyIndex</code> is <code>VK_QUEUE_FAMILY_IGNORED</code>, the
other <strong class="purple">must</strong> be <code>VK_QUEUE_FAMILY_IGNORED</code> or a special queue family
reserved for external memory transfers, as described in
<a href="vkspec.html#synchronization-queue-transfers" class="bare">html/vkspec.html#synchronization-queue-transfers</a>.</p>
</li>
<li>
<p><a id="VUID-VkImageMemoryBarrier-image-01201"></a>
If <code>image</code> was created with a sharing mode of
<code>VK_SHARING_MODE_EXCLUSIVE</code> and <code>srcQueueFamilyIndex</code> is
<code>VK_QUEUE_FAMILY_IGNORED</code>, <code>dstQueueFamilyIndex</code> <strong class="purple">must</strong> also be
<code>VK_QUEUE_FAMILY_IGNORED</code>.</p>
</li>
<li>
<p><a id="VUID-VkImageMemoryBarrier-image-01767"></a>
If <code>image</code> was created with a sharing mode of
<code>VK_SHARING_MODE_EXCLUSIVE</code> and <code>srcQueueFamilyIndex</code> is not
<code>VK_QUEUE_FAMILY_IGNORED</code>, it <strong class="purple">must</strong> be a valid queue family or a
special queue family reserved for external memory transfers, as
described in <a href="vkspec.html#synchronization-queue-transfers" class="bare">html/vkspec.html#synchronization-queue-transfers</a>.</p>
</li>
<li>
<p><a id="VUID-VkImageMemoryBarrier-image-01768"></a>
If <code>image</code> was created with a sharing mode of
<code>VK_SHARING_MODE_EXCLUSIVE</code> and <code>dstQueueFamilyIndex</code> is not
<code>VK_QUEUE_FAMILY_IGNORED</code>, it <strong class="purple">must</strong> be a valid queue family or a
special queue family reserved for external memory transfers, as
described in <a href="vkspec.html#synchronization-queue-transfers" class="bare">html/vkspec.html#synchronization-queue-transfers</a>.</p>
</li>
<li>
<p><a id="VUID-VkImageMemoryBarrier-image-01205"></a>
If <code>image</code> was created with a sharing mode of
<code>VK_SHARING_MODE_EXCLUSIVE</code>, and <code>srcQueueFamilyIndex</code> and
<code>dstQueueFamilyIndex</code> are not <code>VK_QUEUE_FAMILY_IGNORED</code>, at
least one of them <strong class="purple">must</strong> be the same as the family of the queue that will
execute this barrier</p>
</li>
<li>
<p><a id="VUID-VkImageMemoryBarrier-subresourceRange-01486"></a>
<code>subresourceRange.baseMipLevel</code> <strong class="purple">must</strong> be less than the
<code>mipLevels</code> specified in <a href="#VkImageCreateInfo">VkImageCreateInfo</a> when <code>image</code>
was created</p>
</li>
<li>
<p><a id="VUID-VkImageMemoryBarrier-subresourceRange-01724"></a>
If <code>subresourceRange.levelCount</code> is not
<code>VK_REMAINING_MIP_LEVELS</code>, <span class="eq"><code>subresourceRange.baseMipLevel</code>
+  <code>subresourceRange.levelCount</code></span> <strong class="purple">must</strong> be less than or equal to
the <code>mipLevels</code> specified in <a href="#VkImageCreateInfo">VkImageCreateInfo</a> when
<code>image</code> was created</p>
</li>
<li>
<p><a id="VUID-VkImageMemoryBarrier-subresourceRange-01488"></a>
<code>subresourceRange.baseArrayLayer</code> <strong class="purple">must</strong> be less than the
<code>arrayLayers</code> specified in <a href="#VkImageCreateInfo">VkImageCreateInfo</a> when <code>image</code>
was created</p>
</li>
<li>
<p><a id="VUID-VkImageMemoryBarrier-subresourceRange-01725"></a>
If <code>subresourceRange.layerCount</code> is not
<code>VK_REMAINING_ARRAY_LAYERS</code>,
<span class="eq"><code>subresourceRange.baseArrayLayer</code> + 
<code>subresourceRange.layerCount</code></span> <strong class="purple">must</strong> be less than or equal to the
<code>arrayLayers</code> specified in <a href="#VkImageCreateInfo">VkImageCreateInfo</a> when <code>image</code>
was created</p>
</li>
<li>
<p><a id="VUID-VkImageMemoryBarrier-image-01207"></a>
If <code>image</code> has a depth/stencil format with both depth and stencil
components, then the <code>aspectMask</code> member of <code>subresourceRange</code>
<strong class="purple">must</strong> include both <code>VK_IMAGE_ASPECT_DEPTH_BIT</code> and
<code>VK_IMAGE_ASPECT_STENCIL_BIT</code></p>
</li>
<li>
<p><a id="VUID-VkImageMemoryBarrier-image-01671"></a>
If <code>image</code> has a single-plane color format or is not <em>disjoint</em>,
then the <code>aspectMask</code> member of <code>subresourceRange</code> <strong class="purple">must</strong> be
<code>VK_IMAGE_ASPECT_COLOR_BIT</code></p>
</li>
<li>
<p><a id="VUID-VkImageMemoryBarrier-image-01672"></a>
If <code>image</code> has a multi-planar format and the image is <em>disjoint</em>,
then the <code>aspectMask</code> member of <code>subresourceRange</code> <strong class="purple">must</strong> include
either at least one of <code>VK_IMAGE_ASPECT_PLANE_0_BIT</code>,
<code>VK_IMAGE_ASPECT_PLANE_1_BIT</code>, and
<code>VK_IMAGE_ASPECT_PLANE_2_BIT</code>; or <strong class="purple">must</strong> include
<code>VK_IMAGE_ASPECT_COLOR_BIT</code></p>
</li>
<li>
<p><a id="VUID-VkImageMemoryBarrier-image-01673"></a>
If <code>image</code> has a multi-planar format with only two planes, then the
<code>aspectMask</code> member of <code>subresourceRange</code> <strong class="purple">must</strong> not include
<code>VK_IMAGE_ASPECT_PLANE_2_BIT</code></p>
</li>
<li>
<p><a id="VUID-VkImageMemoryBarrier-oldLayout-01208"></a>
If either <code>oldLayout</code> or <code>newLayout</code> is
<code>VK_IMAGE_LAYOUT_COLOR_ATTACHMENT_OPTIMAL</code> then <code>image</code> <strong class="purple">must</strong>
have been created with <code>VK_IMAGE_USAGE_COLOR_ATTACHMENT_BIT</code> set</p>
</li>
<li>
<p><a id="VUID-VkImageMemoryBarrier-oldLayout-01209"></a>
If either <code>oldLayout</code> or <code>newLayout</code> is
<code>VK_IMAGE_LAYOUT_DEPTH_STENCIL_ATTACHMENT_OPTIMAL</code> then <code>image</code>
<strong class="purple">must</strong> have been created with
<code>VK_IMAGE_USAGE_DEPTH_STENCIL_ATTACHMENT_BIT</code> set</p>
</li>
<li>
<p><a id="VUID-VkImageMemoryBarrier-oldLayout-01210"></a>
If either <code>oldLayout</code> or <code>newLayout</code> is
<code>VK_IMAGE_LAYOUT_DEPTH_STENCIL_READ_ONLY_OPTIMAL</code> then <code>image</code>
<strong class="purple">must</strong> have been created with
<code>VK_IMAGE_USAGE_DEPTH_STENCIL_ATTACHMENT_BIT</code> set</p>
</li>
<li>
<p><a id="VUID-VkImageMemoryBarrier-oldLayout-01658"></a>
If either <code>oldLayout</code> or <code>newLayout</code> is
<code>VK_IMAGE_LAYOUT_DEPTH_READ_ONLY_STENCIL_ATTACHMENT_OPTIMAL</code> then
<code>image</code> <strong class="purple">must</strong> have been created with
<code>VK_IMAGE_USAGE_DEPTH_STENCIL_ATTACHMENT_BIT</code> set</p>
</li>
<li>
<p><a id="VUID-VkImageMemoryBarrier-oldLayout-01659"></a>
If either <code>oldLayout</code> or <code>newLayout</code> is
<code>VK_IMAGE_LAYOUT_DEPTH_ATTACHMENT_STENCIL_READ_ONLY_OPTIMAL</code> then
<code>image</code> <strong class="purple">must</strong> have been created with
<code>VK_IMAGE_USAGE_DEPTH_STENCIL_ATTACHMENT_BIT</code> set</p>
</li>
<li>
<p><a id="VUID-VkImageMemoryBarrier-oldLayout-01211"></a>
If either <code>oldLayout</code> or <code>newLayout</code> is
<code>VK_IMAGE_LAYOUT_SHADER_READ_ONLY_OPTIMAL</code> then <code>image</code> <strong class="purple">must</strong>
have been created with <code>VK_IMAGE_USAGE_SAMPLED_BIT</code> or
<code>VK_IMAGE_USAGE_INPUT_ATTACHMENT_BIT</code> set</p>
</li>
<li>
<p><a id="VUID-VkImageMemoryBarrier-oldLayout-01212"></a>
If either <code>oldLayout</code> or <code>newLayout</code> is
<code>VK_IMAGE_LAYOUT_TRANSFER_SRC_OPTIMAL</code> then <code>image</code> <strong class="purple">must</strong> have
been created with <code>VK_IMAGE_USAGE_TRANSFER_SRC_BIT</code> set</p>
</li>
<li>
<p><a id="VUID-VkImageMemoryBarrier-oldLayout-01213"></a>
If either <code>oldLayout</code> or <code>newLayout</code> is
<code>VK_IMAGE_LAYOUT_TRANSFER_DST_OPTIMAL</code> then <code>image</code> <strong class="purple">must</strong> have
been created with <code>VK_IMAGE_USAGE_TRANSFER_DST_BIT</code> set</p>
</li>
<li>
<p><a id="VUID-VkImageMemoryBarrier-image-01932"></a>
If <code>image</code> is non-sparse then it <strong class="purple">must</strong> be bound completely and
contiguously to a single <code>VkDeviceMemory</code> object</p>
</li>
<li>
<p><a id="VUID-VkImageMemoryBarrier-oldLayout-02088"></a>
If either <code>oldLayout</code> or <code>newLayout</code> is
<code>VK_IMAGE_LAYOUT_SHADING_RATE_OPTIMAL_NV</code> then <code>image</code> <strong class="purple">must</strong>
have been created with <code>VK_IMAGE_USAGE_SHADING_RATE_IMAGE_BIT_NV</code>
set</p>
</li>
</ul>
</div>
</div>
</div>
<div class="sidebarblock">
<div class="content">
<div class="title">Valid Usage (Implicit)</div>
<div class="ulist">
<ul>
<li>
<p><a id="VUID-VkImageMemoryBarrier-sType-sType"></a> <code>sType</code> <strong class="purple">must</strong> be <code>VK_STRUCTURE_TYPE_IMAGE_MEMORY_BARRIER</code></p>
</li>
<li>
<p><a id="VUID-VkImageMemoryBarrier-pNext-pNext"></a> <code>pNext</code> <strong class="purple">must</strong> be <code>NULL</code> or a pointer to a valid instance of <a href="#VkSampleLocationsInfoEXT">VkSampleLocationsInfoEXT</a></p>
</li>
<li>
<p><a id="VUID-VkImageMemoryBarrier-srcAccessMask-parameter"></a> <code>srcAccessMask</code> <strong class="purple">must</strong> be a valid combination of <a href="#VkAccessFlagBits">VkAccessFlagBits</a> values</p>
</li>
<li>
<p><a id="VUID-VkImageMemoryBarrier-dstAccessMask-parameter"></a> <code>dstAccessMask</code> <strong class="purple">must</strong> be a valid combination of <a href="#VkAccessFlagBits">VkAccessFlagBits</a> values</p>
</li>
<li>
<p><a id="VUID-VkImageMemoryBarrier-oldLayout-parameter"></a> <code>oldLayout</code> <strong class="purple">must</strong> be a valid <a href="#VkImageLayout">VkImageLayout</a> value</p>
</li>
<li>
<p><a id="VUID-VkImageMemoryBarrier-newLayout-parameter"></a> <code>newLayout</code> <strong class="purple">must</strong> be a valid <a href="#VkImageLayout">VkImageLayout</a> value</p>
</li>
<li>
<p><a id="VUID-VkImageMemoryBarrier-image-parameter"></a> <code>image</code> <strong class="purple">must</strong> be a valid <code>VkImage</code> handle</p>
</li>
<li>
<p><a id="VUID-VkImageMemoryBarrier-subresourceRange-parameter"></a> <code>subresourceRange</code> <strong class="purple">must</strong> be a valid <code>VkImageSubresourceRange</code> structure</p>
</li>
</ul>
</div>
</div>
</div>
</div>
<div class="sect3">
<h4 id="_see_also_529">See Also</h4>
<div class="paragraph">
<p><a href="#VkAccessFlags">VkAccessFlags</a>, <a href="#VkImage">VkImage</a>, <a href="#VkImageLayout">VkImageLayout</a>, <a href="#VkImageSubresourceRange">VkImageSubresourceRange</a>, <a href="#VkStructureType">VkStructureType</a>, <a href="#vkCmdPipelineBarrier">vkCmdPipelineBarrier</a>, <a href="#vkCmdWaitEvents">vkCmdWaitEvents</a></p>
</div>
</div>
<div class="sect3">
<h4 id="_document_notes_529">Document Notes</h4>
<div class="paragraph">
<p>For more information, see the Vulkan Specification at URL</p>
</div>
<div class="paragraph">
<p><a href="https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VkImageMemoryBarrier" class="bare">https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VkImageMemoryBarrier</a></p>
</div>
<div class="paragraph">
<p>This page is extracted from the Vulkan Specification.
Fixes and changes should be made to the Specification, not directly.</p>
</div>
<div style="page-break-after: always;"></div>
</div>
</div>
<div class="sect2">
<h3 id="_vkimagememoryrequirementsinfo23">VkImageMemoryRequirementsInfo2(3)</h3>
<div class="sect3">
<h4 id="_name_530">Name</h4>
<div class="paragraph">
<p>VkImageMemoryRequirementsInfo2 - (None)</p>
</div>
</div>
<div class="sect3">
<h4 id="_c_specification_530">C Specification</h4>
<div class="paragraph">
<p>The <code>VkImageMemoryRequirementsInfo2</code> structure is defined as:</p>
</div>
<div id="VkImageMemoryRequirementsInfo2" class="listingblock">
<div class="content">
<pre class="highlight"><code class="language-c++" data-lang="c++">typedef struct VkImageMemoryRequirementsInfo2 {
    VkStructureType    sType;
    const void*        pNext;
    VkImage            image;
} VkImageMemoryRequirementsInfo2;</code></pre>
</div>
</div>
<div class="paragraph">
<p>or the equivalent</p>
</div>
<div id="VkImageMemoryRequirementsInfo2KHR" class="listingblock">
<div class="content">
<pre class="highlight"><code class="language-c++" data-lang="c++">typedef VkImageMemoryRequirementsInfo2 VkImageMemoryRequirementsInfo2KHR;</code></pre>
</div>
</div>
</div>
<div class="sect3">
<h4 id="_members_167">Members</h4>
<div class="ulist">
<ul>
<li>
<p><code>sType</code> is the type of this structure.</p>
</li>
<li>
<p><code>pNext</code> is <code>NULL</code> or a pointer to an extension-specific structure.</p>
</li>
<li>
<p><code>image</code> is the image to query.</p>
</li>
</ul>
</div>
</div>
<div class="sect3">
<h4 id="_description_530">Description</h4>
<div class="sidebarblock">
<div class="content">
<div class="title">Valid Usage</div>
<div class="ulist">
<ul>
<li>
<p><a id="VUID-VkImageMemoryRequirementsInfo2-image-01589"></a>
If <code>image</code> was created with a <em>multi-planar</em> format and the
<code>VK_IMAGE_CREATE_DISJOINT_BIT</code> flag, there <strong class="purple">must</strong> be a
<a href="#VkImagePlaneMemoryRequirementsInfo">VkImagePlaneMemoryRequirementsInfo</a> in the <code>pNext</code> chain of the
<a href="#VkImageMemoryRequirementsInfo2">VkImageMemoryRequirementsInfo2</a> structure</p>
</li>
<li>
<p><a id="VUID-VkImageMemoryRequirementsInfo2-image-02279"></a>
If <code>image</code> was created with <code>VK_IMAGE_CREATE_DISJOINT_BIT</code> and
with <code>VK_IMAGE_TILING_DRM_FORMAT_MODIFIER_EXT</code>, then there <strong class="purple">must</strong> be
a <a href="#VkImagePlaneMemoryRequirementsInfo">VkImagePlaneMemoryRequirementsInfo</a> in the <code>pNext</code> chain of
the <a href="#VkImageMemoryRequirementsInfo2">VkImageMemoryRequirementsInfo2</a> structure</p>
</li>
<li>
<p><a id="VUID-VkImageMemoryRequirementsInfo2-image-01590"></a>
If <code>image</code> was not created with the
<code>VK_IMAGE_CREATE_DISJOINT_BIT</code> flag, there <strong class="purple">must</strong> not be a
<a href="#VkImagePlaneMemoryRequirementsInfo">VkImagePlaneMemoryRequirementsInfo</a> in the <code>pNext</code> chain of the
<a href="#VkImageMemoryRequirementsInfo2">VkImageMemoryRequirementsInfo2</a> structure</p>
</li>
<li>
<p><a id="VUID-VkImageMemoryRequirementsInfo2-image-02280"></a>
If <code>image</code> was created with a single-plane format and with any
<code>tiling</code> other than <code>VK_IMAGE_TILING_DRM_FORMAT_MODIFIER_EXT</code>,
then there <strong class="purple">must</strong> not be a <a href="#VkImagePlaneMemoryRequirementsInfo">VkImagePlaneMemoryRequirementsInfo</a> in
the <code>pNext</code> chain of the <a href="#VkImageMemoryRequirementsInfo2">VkImageMemoryRequirementsInfo2</a>
structure</p>
</li>
<li>
<p><a id="VUID-VkImageMemoryRequirementsInfo2-image-01897"></a>
If <code>image</code> was created with the
<code>VK_EXTERNAL_MEMORY_HANDLE_TYPE_ANDROID_HARDWARE_BUFFER_BIT_ANDROID</code>
external memory handle type, then <code>image</code> <strong class="purple">must</strong> be bound to memory.</p>
</li>
</ul>
</div>
</div>
</div>
<div class="sidebarblock">
<div class="content">
<div class="title">Valid Usage (Implicit)</div>
<div class="ulist">
<ul>
<li>
<p><a id="VUID-VkImageMemoryRequirementsInfo2-sType-sType"></a> <code>sType</code> <strong class="purple">must</strong> be <code>VK_STRUCTURE_TYPE_IMAGE_MEMORY_REQUIREMENTS_INFO_2</code></p>
</li>
<li>
<p><a id="VUID-VkImageMemoryRequirementsInfo2-pNext-pNext"></a> <code>pNext</code> <strong class="purple">must</strong> be <code>NULL</code> or a pointer to a valid instance of <a href="#VkImagePlaneMemoryRequirementsInfo">VkImagePlaneMemoryRequirementsInfo</a></p>
</li>
<li>
<p><a id="VUID-VkImageMemoryRequirementsInfo2-image-parameter"></a> <code>image</code> <strong class="purple">must</strong> be a valid <code>VkImage</code> handle</p>
</li>
</ul>
</div>
</div>
</div>
</div>
<div class="sect3">
<h4 id="_see_also_530">See Also</h4>
<div class="paragraph">
<p><a href="#VkImage">VkImage</a>, <a href="#VkStructureType">VkStructureType</a>, <a href="#vkGetImageMemoryRequirements2">vkGetImageMemoryRequirements2</a>, <a href="#vkGetImageMemoryRequirements2KHR">vkGetImageMemoryRequirements2KHR</a></p>
</div>
</div>
<div class="sect3">
<h4 id="_document_notes_530">Document Notes</h4>
<div class="paragraph">
<p>For more information, see the Vulkan Specification at URL</p>
</div>
<div class="paragraph">
<p><a href="https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VkImageMemoryRequirementsInfo2" class="bare">https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VkImageMemoryRequirementsInfo2</a></p>
</div>
<div class="paragraph">
<p>This page is extracted from the Vulkan Specification.
Fixes and changes should be made to the Specification, not directly.</p>
</div>
<div style="page-break-after: always;"></div>
</div>
</div>
<div class="sect2">
<h3 id="_vkimagepipesurfacecreateinfofuchsia3">VkImagePipeSurfaceCreateInfoFUCHSIA(3)</h3>
<div class="sect3">
<h4 id="_name_531">Name</h4>
<div class="paragraph">
<p>VkImagePipeSurfaceCreateInfoFUCHSIA - Structure specifying parameters of a newly created ImagePipe surface object</p>
</div>
</div>
<div class="sect3">
<h4 id="_c_specification_531">C Specification</h4>
<div class="paragraph">
<p>The <code>VkImagePipeSurfaceCreateInfoFUCHSIA</code> structure is defined as:</p>
</div>
<div id="VkImagePipeSurfaceCreateInfoFUCHSIA" class="listingblock">
<div class="content">
<pre class="highlight"><code class="language-c++" data-lang="c++">typedef struct VkImagePipeSurfaceCreateInfoFUCHSIA {
    VkStructureType                         sType;
    const void*                             pNext;
    VkImagePipeSurfaceCreateFlagsFUCHSIA    flags;
    zx_handle_t                             imagePipeHandle;
} VkImagePipeSurfaceCreateInfoFUCHSIA;</code></pre>
</div>
</div>
</div>
<div class="sect3">
<h4 id="_members_168">Members</h4>
<div class="ulist">
<ul>
<li>
<p><code>sType</code> is the type of this structure.</p>
</li>
<li>
<p><code>pNext</code> is <code>NULL</code> or a pointer to an extension-specific structure.</p>
</li>
<li>
<p><code>flags</code> is reserved for future use.</p>
</li>
<li>
<p><code>imagePipeHandle</code> is a <code>zx_handle_t</code> referring to the ImagePipe
to associate with the surface.</p>
</li>
</ul>
</div>
</div>
<div class="sect3">
<h4 id="_description_531">Description</h4>
<div class="sidebarblock">
<div class="content">
<div class="title">Valid Usage</div>
<div class="ulist">
<ul>
<li>
<p><a id="VUID-VkImagePipeSurfaceCreateInfoFUCHSIA-imagePipeHandle-00000"></a>
<code>imagePipeHandle</code> <strong class="purple">must</strong> be a valid <code>zx_handle_t</code></p>
</li>
</ul>
</div>
</div>
</div>
<div class="sidebarblock">
<div class="content">
<div class="title">Valid Usage (Implicit)</div>
<div class="ulist">
<ul>
<li>
<p><a id="VUID-VkImagePipeSurfaceCreateInfoFUCHSIA-sType-sType"></a> <code>sType</code> <strong class="purple">must</strong> be <code>VK_STRUCTURE_TYPE_IMAGEPIPE_SURFACE_CREATE_INFO_FUCHSIA</code></p>
</li>
<li>
<p><a id="VUID-VkImagePipeSurfaceCreateInfoFUCHSIA-pNext-pNext"></a> <code>pNext</code> <strong class="purple">must</strong> be <code>NULL</code></p>
</li>
<li>
<p><a id="VUID-VkImagePipeSurfaceCreateInfoFUCHSIA-flags-zerobitmask"></a> <code>flags</code> <strong class="purple">must</strong> be <code>0</code></p>
</li>
</ul>
</div>
</div>
</div>
</div>
<div class="sect3">
<h4 id="_see_also_531">See Also</h4>
<div class="paragraph">
<p><a href="#VkImagePipeSurfaceCreateFlagsFUCHSIA">VkImagePipeSurfaceCreateFlagsFUCHSIA</a>, <a href="#VkStructureType">VkStructureType</a>, <a href="#vkCreateImagePipeSurfaceFUCHSIA">vkCreateImagePipeSurfaceFUCHSIA</a></p>
</div>
</div>
<div class="sect3">
<h4 id="_document_notes_531">Document Notes</h4>
<div class="paragraph">
<p>For more information, see the Vulkan Specification at URL</p>
</div>
<div class="paragraph">
<p><a href="https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VkImagePipeSurfaceCreateInfoFUCHSIA" class="bare">https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VkImagePipeSurfaceCreateInfoFUCHSIA</a></p>
</div>
<div class="paragraph">
<p>This page is extracted from the Vulkan Specification.
Fixes and changes should be made to the Specification, not directly.</p>
</div>
<div style="page-break-after: always;"></div>
</div>
</div>
<div class="sect2">
<h3 id="_vkimageplanememoryrequirementsinfo3">VkImagePlaneMemoryRequirementsInfo(3)</h3>
<div class="sect3">
<h4 id="_name_532">Name</h4>
<div class="paragraph">
<p>VkImagePlaneMemoryRequirementsInfo - Structure specifying image plane for memory requirements</p>
</div>
</div>
<div class="sect3">
<h4 id="_c_specification_532">C Specification</h4>
<div class="paragraph">
<p>To determine the memory requirements for a plane of a disjoint image, add a
<code>VkImagePlaneMemoryRequirementsInfo</code> to the <code>pNext</code> chain of the
<code>VkImageMemoryRequirementsInfo2</code> structure.</p>
</div>
<div class="paragraph">
<p>The <code>VkImagePlaneMemoryRequirementsInfo</code> structure is defined as:</p>
</div>
<div id="VkImagePlaneMemoryRequirementsInfo" class="listingblock">
<div class="content">
<pre class="highlight"><code class="language-c++" data-lang="c++">typedef struct VkImagePlaneMemoryRequirementsInfo {
    VkStructureType          sType;
    const void*              pNext;
    VkImageAspectFlagBits    planeAspect;
} VkImagePlaneMemoryRequirementsInfo;</code></pre>
</div>
</div>
<div class="paragraph">
<p>or the equivalent</p>
</div>
<div id="VkImagePlaneMemoryRequirementsInfoKHR" class="listingblock">
<div class="content">
<pre class="highlight"><code class="language-c++" data-lang="c++">typedef VkImagePlaneMemoryRequirementsInfo VkImagePlaneMemoryRequirementsInfoKHR;</code></pre>
</div>
</div>
</div>
<div class="sect3">
<h4 id="_members_169">Members</h4>
<div class="ulist">
<ul>
<li>
<p><code>sType</code> is the type of this structure.</p>
</li>
<li>
<p><code>pNext</code> is <code>NULL</code> or a pointer to an extension-specific structure.</p>
</li>
<li>
<p><code>planeAspect</code> is the aspect corresponding to the image plane to
query.</p>
</li>
</ul>
</div>
</div>
<div class="sect3">
<h4 id="_description_532">Description</h4>
<div class="sidebarblock">
<div class="content">
<div class="title">Valid Usage</div>
<div class="ulist">
<ul>
<li>
<p><a id="VUID-VkImagePlaneMemoryRequirementsInfo-planeAspect-02281"></a>
If the image&#8217;s tiling is <code>VK_IMAGE_TILING_LINEAR</code> or
<code>VK_IMAGE_TILING_OPTIMAL</code>, then <code>planeAspect</code> <strong class="purple">must</strong> be a single
valid <em>format plane</em> for the image.
(That is, for a two-plane image <code>planeAspect</code> <strong class="purple">must</strong> be
<code>VK_IMAGE_ASPECT_PLANE_0_BIT</code> or <code>VK_IMAGE_ASPECT_PLANE_1_BIT</code>,
and for a three-plane image <code>planeAspect</code> <strong class="purple">must</strong> be
<code>VK_IMAGE_ASPECT_PLANE_0_BIT</code>, <code>VK_IMAGE_ASPECT_PLANE_1_BIT</code> or
<code>VK_IMAGE_ASPECT_PLANE_2_BIT</code>).</p>
</li>
<li>
<p><a id="VUID-VkImagePlaneMemoryRequirementsInfo-planeAspect-02282"></a>
 If the image&#8217;s tiling is <code>VK_IMAGE_TILING_DRM_FORMAT_MODIFIER_EXT</code>,
 then <code>planeAspect</code> <strong class="purple">must</strong> be a single valid <em>memory plane</em> for the
 image.
 (That is, <code>aspectMask</code> <strong class="purple">must</strong> specify a plane index that is less than
 the
 <a href="vkspec.html#VkDrmFormatModifierPropertiesEXT"><code>drmFormatModifierPlaneCount</code></a>
 associated with the image&#8217;s
<a href="vkspec.html#VkImageCreateInfo"><code>format</code></a> and
<a href="vkspec.html#VkImageDrmFormatModifierPropertiesEXT"><code>drmFormatModifier</code></a>.)</p>
</li>
</ul>
</div>
</div>
</div>
<div class="sidebarblock">
<div class="content">
<div class="title">Valid Usage (Implicit)</div>
<div class="ulist">
<ul>
<li>
<p><a id="VUID-VkImagePlaneMemoryRequirementsInfo-sType-sType"></a> <code>sType</code> <strong class="purple">must</strong> be <code>VK_STRUCTURE_TYPE_IMAGE_PLANE_MEMORY_REQUIREMENTS_INFO</code></p>
</li>
<li>
<p><a id="VUID-VkImagePlaneMemoryRequirementsInfo-planeAspect-parameter"></a> <code>planeAspect</code> <strong class="purple">must</strong> be a valid <a href="#VkImageAspectFlagBits">VkImageAspectFlagBits</a> value</p>
</li>
</ul>
</div>
</div>
</div>
</div>
<div class="sect3">
<h4 id="_see_also_532">See Also</h4>
<div class="paragraph">
<p><a href="#VkImageAspectFlagBits">VkImageAspectFlagBits</a>, <a href="#VkStructureType">VkStructureType</a></p>
</div>
</div>
<div class="sect3">
<h4 id="_document_notes_532">Document Notes</h4>
<div class="paragraph">
<p>For more information, see the Vulkan Specification at URL</p>
</div>
<div class="paragraph">
<p><a href="https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VkImagePlaneMemoryRequirementsInfo" class="bare">https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VkImagePlaneMemoryRequirementsInfo</a></p>
</div>
<div class="paragraph">
<p>This page is extracted from the Vulkan Specification.
Fixes and changes should be made to the Specification, not directly.</p>
</div>
<div style="page-break-after: always;"></div>
</div>
</div>
<div class="sect2">
<h3 id="_vkimageresolve3">VkImageResolve(3)</h3>
<div class="sect3">
<h4 id="_name_533">Name</h4>
<div class="paragraph">
<p>VkImageResolve - Structure specifying an image resolve operation</p>
</div>
</div>
<div class="sect3">
<h4 id="_c_specification_533">C Specification</h4>
<div class="paragraph">
<p>The <code>VkImageResolve</code> structure is defined as:</p>
</div>
<div id="VkImageResolve" class="listingblock">
<div class="content">
<pre class="highlight"><code class="language-c++" data-lang="c++">typedef struct VkImageResolve {
    VkImageSubresourceLayers    srcSubresource;
    VkOffset3D                  srcOffset;
    VkImageSubresourceLayers    dstSubresource;
    VkOffset3D                  dstOffset;
    VkExtent3D                  extent;
} VkImageResolve;</code></pre>
</div>
</div>
</div>
<div class="sect3">
<h4 id="_members_170">Members</h4>
<div class="ulist">
<ul>
<li>
<p><code>srcSubresource</code> and <code>dstSubresource</code> are
<a href="#VkImageSubresourceLayers">VkImageSubresourceLayers</a> structures specifying the image
subresources of the images used for the source and destination image
data, respectively.
Resolve of depth/stencil images is not supported.</p>
</li>
<li>
<p><code>srcOffset</code> and <code>dstOffset</code> select the initial <code>x</code>, <code>y</code>,
and <code>z</code> offsets in texels of the sub-regions of the source and
destination image data.</p>
</li>
<li>
<p><code>extent</code> is the size in texels of the source image to resolve in
<code>width</code>, <code>height</code> and <code>depth</code>.</p>
</li>
</ul>
</div>
</div>
<div class="sect3">
<h4 id="_description_533">Description</h4>
<div class="sidebarblock">
<div class="content">
<div class="title">Valid Usage</div>
<div class="ulist">
<ul>
<li>
<p><a id="VUID-VkImageResolve-aspectMask-00266"></a>
The <code>aspectMask</code> member of <code>srcSubresource</code> and
<code>dstSubresource</code> <strong class="purple">must</strong> only contain <code>VK_IMAGE_ASPECT_COLOR_BIT</code></p>
</li>
<li>
<p><a id="VUID-VkImageResolve-layerCount-00267"></a>
The <code>layerCount</code> member of <code>srcSubresource</code> and
<code>dstSubresource</code> <strong class="purple">must</strong> match</p>
</li>
<li>
<p><a id="VUID-VkImageResolve-srcImage-00268"></a>
If either of the calling command&#8217;s <code>srcImage</code> or <code>dstImage</code>
parameters are of <a href="#VkImageType">VkImageType</a> <code>VK_IMAGE_TYPE_3D</code>, the
<code>baseArrayLayer</code> and <code>layerCount</code> members of both
<code>srcSubresource</code> and <code>dstSubresource</code> <strong class="purple">must</strong> be <code>0</code> and <code>1</code>,
respectively</p>
</li>
<li>
<p><a id="VUID-VkImageResolve-srcOffset-00269"></a>
<code>srcOffset.x</code> and <span class="eq">(<code>extent.width</code> + 
<code>srcOffset.x</code>)</span> <strong class="purple">must</strong> both be greater than or equal to <code>0</code> and less
than or equal to the source image subresource width</p>
</li>
<li>
<p><a id="VUID-VkImageResolve-srcOffset-00270"></a>
<code>srcOffset.y</code> and <span class="eq">(<code>extent.height</code> + 
<code>srcOffset.y</code>)</span> <strong class="purple">must</strong> both be greater than or equal to <code>0</code> and less
than or equal to the source image subresource height</p>
</li>
<li>
<p><a id="VUID-VkImageResolve-srcImage-00271"></a>
If the calling command&#8217;s <code>srcImage</code> is of type
<code>VK_IMAGE_TYPE_1D</code>, then <code>srcOffset.y</code> <strong class="purple">must</strong> be <code>0</code> and
<code>extent.height</code> <strong class="purple">must</strong> be <code>1</code>.</p>
</li>
<li>
<p><a id="VUID-VkImageResolve-srcOffset-00272"></a>
<code>srcOffset.z</code> and <span class="eq">(<code>extent.depth</code> + 
<code>srcOffset.z</code>)</span> <strong class="purple">must</strong> both be greater than or equal to <code>0</code> and less
than or equal to the source image subresource depth</p>
</li>
<li>
<p><a id="VUID-VkImageResolve-srcImage-00273"></a>
If the calling command&#8217;s <code>srcImage</code> is of type
<code>VK_IMAGE_TYPE_1D</code> or <code>VK_IMAGE_TYPE_2D</code>, then <code>srcOffset.z</code>
<strong class="purple">must</strong> be <code>0</code> and <code>extent.depth</code> <strong class="purple">must</strong> be <code>1</code>.</p>
</li>
<li>
<p><a id="VUID-VkImageResolve-dstOffset-00274"></a>
<code>dstOffset.x</code> and <span class="eq">(<code>extent.width</code> + 
<code>dstOffset.x</code>)</span> <strong class="purple">must</strong> both be greater than or equal to <code>0</code> and less
than or equal to the destination image subresource width</p>
</li>
<li>
<p><a id="VUID-VkImageResolve-dstOffset-00275"></a>
<code>dstOffset.y</code> and <span class="eq">(<code>extent.height</code> + 
<code>dstOffset.y</code>)</span> <strong class="purple">must</strong> both be greater than or equal to <code>0</code> and less
than or equal to the destination image subresource height</p>
</li>
<li>
<p><a id="VUID-VkImageResolve-dstImage-00276"></a>
If the calling command&#8217;s <code>dstImage</code> is of type
<code>VK_IMAGE_TYPE_1D</code>, then <code>dstOffset.y</code> <strong class="purple">must</strong> be <code>0</code> and
<code>extent.height</code> <strong class="purple">must</strong> be <code>1</code>.</p>
</li>
<li>
<p><a id="VUID-VkImageResolve-dstOffset-00277"></a>
<code>dstOffset.z</code> and <span class="eq">(<code>extent.depth</code> + 
<code>dstOffset.z</code>)</span> <strong class="purple">must</strong> both be greater than or equal to <code>0</code> and less
than or equal to the destination image subresource depth</p>
</li>
<li>
<p><a id="VUID-VkImageResolve-dstImage-00278"></a>
If the calling command&#8217;s <code>dstImage</code> is of type
<code>VK_IMAGE_TYPE_1D</code> or <code>VK_IMAGE_TYPE_2D</code>, then <code>dstOffset.z</code>
<strong class="purple">must</strong> be <code>0</code> and <code>extent.depth</code> <strong class="purple">must</strong> be <code>1</code>.</p>
</li>
</ul>
</div>
</div>
</div>
<div class="sidebarblock">
<div class="content">
<div class="title">Valid Usage (Implicit)</div>
<div class="ulist">
<ul>
<li>
<p><a id="VUID-VkImageResolve-srcSubresource-parameter"></a> <code>srcSubresource</code> <strong class="purple">must</strong> be a valid <code>VkImageSubresourceLayers</code> structure</p>
</li>
<li>
<p><a id="VUID-VkImageResolve-dstSubresource-parameter"></a> <code>dstSubresource</code> <strong class="purple">must</strong> be a valid <code>VkImageSubresourceLayers</code> structure</p>
</li>
</ul>
</div>
</div>
</div>
</div>
<div class="sect3">
<h4 id="_see_also_533">See Also</h4>
<div class="paragraph">
<p><a href="#VkExtent3D">VkExtent3D</a>, <a href="#VkImageSubresourceLayers">VkImageSubresourceLayers</a>, <a href="#VkOffset3D">VkOffset3D</a>, <a href="#vkCmdResolveImage">vkCmdResolveImage</a></p>
</div>
</div>
<div class="sect3">
<h4 id="_document_notes_533">Document Notes</h4>
<div class="paragraph">
<p>For more information, see the Vulkan Specification at URL</p>
</div>
<div class="paragraph">
<p><a href="https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VkImageResolve" class="bare">https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VkImageResolve</a></p>
</div>
<div class="paragraph">
<p>This page is extracted from the Vulkan Specification.
Fixes and changes should be made to the Specification, not directly.</p>
</div>
<div style="page-break-after: always;"></div>
</div>
</div>
<div class="sect2">
<h3 id="_vkimagesparsememoryrequirementsinfo23">VkImageSparseMemoryRequirementsInfo2(3)</h3>
<div class="sect3">
<h4 id="_name_534">Name</h4>
<div class="paragraph">
<p>VkImageSparseMemoryRequirementsInfo2 - (None)</p>
</div>
</div>
<div class="sect3">
<h4 id="_c_specification_534">C Specification</h4>
<div class="paragraph">
<p>The <code>VkImageSparseMemoryRequirementsInfo2</code> structure is defined as:</p>
</div>
<div id="VkImageSparseMemoryRequirementsInfo2" class="listingblock">
<div class="content">
<pre class="highlight"><code class="language-c++" data-lang="c++">typedef struct VkImageSparseMemoryRequirementsInfo2 {
    VkStructureType    sType;
    const void*        pNext;
    VkImage            image;
} VkImageSparseMemoryRequirementsInfo2;</code></pre>
</div>
</div>
<div class="paragraph">
<p>or the equivalent</p>
</div>
<div id="VkImageSparseMemoryRequirementsInfo2KHR" class="listingblock">
<div class="content">
<pre class="highlight"><code class="language-c++" data-lang="c++">typedef VkImageSparseMemoryRequirementsInfo2 VkImageSparseMemoryRequirementsInfo2KHR;</code></pre>
</div>
</div>
</div>
<div class="sect3">
<h4 id="_members_171">Members</h4>
<div class="ulist">
<ul>
<li>
<p><code>sType</code> is the type of this structure.</p>
</li>
<li>
<p><code>pNext</code> is <code>NULL</code> or a pointer to an extension-specific structure.</p>
</li>
<li>
<p><code>image</code> is the image to query.</p>
</li>
</ul>
</div>
</div>
<div class="sect3">
<h4 id="_description_534">Description</h4>
<div class="sidebarblock">
<div class="content">
<div class="title">Valid Usage (Implicit)</div>
<div class="ulist">
<ul>
<li>
<p><a id="VUID-VkImageSparseMemoryRequirementsInfo2-sType-sType"></a> <code>sType</code> <strong class="purple">must</strong> be <code>VK_STRUCTURE_TYPE_IMAGE_SPARSE_MEMORY_REQUIREMENTS_INFO_2</code></p>
</li>
<li>
<p><a id="VUID-VkImageSparseMemoryRequirementsInfo2-pNext-pNext"></a> <code>pNext</code> <strong class="purple">must</strong> be <code>NULL</code></p>
</li>
<li>
<p><a id="VUID-VkImageSparseMemoryRequirementsInfo2-image-parameter"></a> <code>image</code> <strong class="purple">must</strong> be a valid <code>VkImage</code> handle</p>
</li>
</ul>
</div>
</div>
</div>
</div>
<div class="sect3">
<h4 id="_see_also_534">See Also</h4>
<div class="paragraph">
<p><a href="#VkImage">VkImage</a>, <a href="#VkStructureType">VkStructureType</a>, <a href="#vkGetImageSparseMemoryRequirements2">vkGetImageSparseMemoryRequirements2</a>, <a href="#vkGetImageSparseMemoryRequirements2KHR">vkGetImageSparseMemoryRequirements2KHR</a></p>
</div>
</div>
<div class="sect3">
<h4 id="_document_notes_534">Document Notes</h4>
<div class="paragraph">
<p>For more information, see the Vulkan Specification at URL</p>
</div>
<div class="paragraph">
<p><a href="https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VkImageSparseMemoryRequirementsInfo2" class="bare">https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VkImageSparseMemoryRequirementsInfo2</a></p>
</div>
<div class="paragraph">
<p>This page is extracted from the Vulkan Specification.
Fixes and changes should be made to the Specification, not directly.</p>
</div>
<div style="page-break-after: always;"></div>
</div>
</div>
<div class="sect2">
<h3 id="_vkimagestencilusagecreateinfoext3">VkImageStencilUsageCreateInfoEXT(3)</h3>
<div class="sect3">
<h4 id="_name_535">Name</h4>
<div class="paragraph">
<p>VkImageStencilUsageCreateInfoEXT - Specify separate usage flags for the stencil aspect of a depth-stencil image</p>
</div>
</div>
<div class="sect3">
<h4 id="_c_specification_535">C Specification</h4>
<div class="paragraph">
<p>If the <code>pNext</code> chain of <a href="#VkImageCreateInfo">VkImageCreateInfo</a> includes a
<code>VkImageStencilUsageCreateInfoEXT</code> structure, then that structure
includes the usage flags specific to the stencil aspect of the image for an
image with a depth-stencil format.</p>
</div>
<div class="paragraph">
<p>The <code>VkImageStencilUsageCreateInfoEXT</code> structure is defined as:</p>
</div>
<div id="VkImageStencilUsageCreateInfoEXT" class="listingblock">
<div class="content">
<pre class="highlight"><code class="language-c++" data-lang="c++">typedef struct VkImageStencilUsageCreateInfoEXT {
    VkStructureType      sType;
    const void*          pNext;
    VkImageUsageFlags    stencilUsage;
} VkImageStencilUsageCreateInfoEXT;</code></pre>
</div>
</div>
</div>
<div class="sect3">
<h4 id="_members_172">Members</h4>
<div class="ulist">
<ul>
<li>
<p><code>sType</code> is the type of this structure.</p>
</li>
<li>
<p><code>pNext</code> is <code>NULL</code> or a pointer to an extension-specific structure.</p>
</li>
<li>
<p><code>stencilUsage</code> is a bitmask of <a href="#VkImageUsageFlagBits">VkImageUsageFlagBits</a> describing
the intended usage of the stencil aspect of the image.</p>
</li>
</ul>
</div>
</div>
<div class="sect3">
<h4 id="_description_535">Description</h4>
<div class="paragraph">
<p>This structure specifies image usages which only apply to the stencil aspect
of a depth/stencil format image.
When this structure is included in the <code>pNext</code> chain of
<a href="#VkImageCreateInfo">VkImageCreateInfo</a>, the stencil aspect of the image <strong class="purple">must</strong> only be used
as specified by <code>stencilUsage</code>.
When this structure is not included in the <code>pNext</code> chain of
<a href="#VkImageCreateInfo">VkImageCreateInfo</a>, the stencil aspect of an image <strong class="purple">must</strong> only be used
as specified <a href="#VkImageCreateInfo">VkImageCreateInfo</a>::<code>usage</code>.
Use of other aspects of an image are unaffected by this structure.</p>
</div>
<div class="paragraph">
<p>This structure <strong class="purple">can</strong> also be included in the <code>pNext</code> chain of
<a href="#VkPhysicalDeviceImageFormatInfo2">VkPhysicalDeviceImageFormatInfo2</a> to query additional capabilities
specific to image creation parameter combinations including a separate set
of usage flags for the stencil aspect of the image using
<a href="#vkGetPhysicalDeviceImageFormatProperties2">vkGetPhysicalDeviceImageFormatProperties2</a>.
When this structure is not present in the <code>pNext</code> chain of
<code>VkPhysicalDeviceImageFormatInfo2</code> then the implicit value of
<code>stencilUsage</code> matches that of
<code>VkPhysicalDeviceImageFormatInfo2</code>::<code>usage</code>.</p>
</div>
<div class="sidebarblock">
<div class="content">
<div class="title">Valid Usage</div>
<div class="ulist">
<ul>
<li>
<p><a id="VUID-VkImageStencilUsageCreateInfoEXT-stencilUsage-02539"></a>
If <code>stencilUsage</code> includes
<code>VK_IMAGE_USAGE_TRANSIENT_ATTACHMENT_BIT</code>, then bits other than
<code>VK_IMAGE_USAGE_DEPTH_STENCIL_ATTACHMENT_BIT</code>, and
<code>VK_IMAGE_USAGE_INPUT_ATTACHMENT_BIT</code> <strong class="purple">must</strong> not be set</p>
</li>
</ul>
</div>
</div>
</div>
<div class="sidebarblock">
<div class="content">
<div class="title">Valid Usage (Implicit)</div>
<div class="ulist">
<ul>
<li>
<p><a id="VUID-VkImageStencilUsageCreateInfoEXT-sType-sType"></a> <code>sType</code> <strong class="purple">must</strong> be <code>VK_STRUCTURE_TYPE_IMAGE_STENCIL_USAGE_CREATE_INFO_EXT</code></p>
</li>
<li>
<p><a id="VUID-VkImageStencilUsageCreateInfoEXT-stencilUsage-parameter"></a> <code>stencilUsage</code> <strong class="purple">must</strong> be a valid combination of <a href="#VkImageUsageFlagBits">VkImageUsageFlagBits</a> values</p>
</li>
<li>
<p><a id="VUID-VkImageStencilUsageCreateInfoEXT-stencilUsage-requiredbitmask"></a> <code>stencilUsage</code> <strong class="purple">must</strong> not be <code>0</code></p>
</li>
</ul>
</div>
</div>
</div>
</div>
<div class="sect3">
<h4 id="_see_also_535">See Also</h4>
<div class="paragraph">
<p><a href="#VkImageUsageFlags">VkImageUsageFlags</a>, <a href="#VkStructureType">VkStructureType</a></p>
</div>
</div>
<div class="sect3">
<h4 id="_document_notes_535">Document Notes</h4>
<div class="paragraph">
<p>For more information, see the Vulkan Specification at URL</p>
</div>
<div class="paragraph">
<p><a href="https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VkImageStencilUsageCreateInfoEXT" class="bare">https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VkImageStencilUsageCreateInfoEXT</a></p>
</div>
<div class="paragraph">
<p>This page is extracted from the Vulkan Specification.
Fixes and changes should be made to the Specification, not directly.</p>
</div>
<div style="page-break-after: always;"></div>
</div>
</div>
<div class="sect2">
<h3 id="_vkimagesubresource3">VkImageSubresource(3)</h3>
<div class="sect3">
<h4 id="_name_536">Name</h4>
<div class="paragraph">
<p>VkImageSubresource - Structure specifying an image subresource</p>
</div>
</div>
<div class="sect3">
<h4 id="_c_specification_536">C Specification</h4>
<div class="paragraph">
<p>The <code>VkImageSubresource</code> structure is defined as:</p>
</div>
<div id="VkImageSubresource" class="listingblock">
<div class="content">
<pre class="highlight"><code class="language-c++" data-lang="c++">typedef struct VkImageSubresource {
    VkImageAspectFlags    aspectMask;
    uint32_t              mipLevel;
    uint32_t              arrayLayer;
} VkImageSubresource;</code></pre>
</div>
</div>
</div>
<div class="sect3">
<h4 id="_members_173">Members</h4>
<div class="ulist">
<ul>
<li>
<p><code>aspectMask</code> is a <a href="#VkImageAspectFlags">VkImageAspectFlags</a> selecting the image
<em>aspect</em>.</p>
</li>
<li>
<p><code>mipLevel</code> selects the mipmap level.</p>
</li>
<li>
<p><code>arrayLayer</code> selects the array layer.</p>
</li>
</ul>
</div>
</div>
<div class="sect3">
<h4 id="_description_536">Description</h4>
<div class="sidebarblock">
<div class="content">
<div class="title">Valid Usage (Implicit)</div>
<div class="ulist">
<ul>
<li>
<p><a id="VUID-VkImageSubresource-aspectMask-parameter"></a> <code>aspectMask</code> <strong class="purple">must</strong> be a valid combination of <a href="#VkImageAspectFlagBits">VkImageAspectFlagBits</a> values</p>
</li>
<li>
<p><a id="VUID-VkImageSubresource-aspectMask-requiredbitmask"></a> <code>aspectMask</code> <strong class="purple">must</strong> not be <code>0</code></p>
</li>
</ul>
</div>
</div>
</div>
</div>
<div class="sect3">
<h4 id="_see_also_536">See Also</h4>
<div class="paragraph">
<p><a href="#VkImageAspectFlags">VkImageAspectFlags</a>, <a href="#VkSparseImageMemoryBind">VkSparseImageMemoryBind</a>, <a href="#vkGetImageSubresourceLayout">vkGetImageSubresourceLayout</a></p>
</div>
</div>
<div class="sect3">
<h4 id="_document_notes_536">Document Notes</h4>
<div class="paragraph">
<p>For more information, see the Vulkan Specification at URL</p>
</div>
<div class="paragraph">
<p><a href="https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VkImageSubresource" class="bare">https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VkImageSubresource</a></p>
</div>
<div class="paragraph">
<p>This page is extracted from the Vulkan Specification.
Fixes and changes should be made to the Specification, not directly.</p>
</div>
<div style="page-break-after: always;"></div>
</div>
</div>
<div class="sect2">
<h3 id="_vkimagesubresourcelayers3">VkImageSubresourceLayers(3)</h3>
<div class="sect3">
<h4 id="_name_537">Name</h4>
<div class="paragraph">
<p>VkImageSubresourceLayers - Structure specifying an image subresource layers</p>
</div>
</div>
<div class="sect3">
<h4 id="_c_specification_537">C Specification</h4>
<div class="paragraph">
<p>The <code>VkImageSubresourceLayers</code> structure is defined as:</p>
</div>
<div id="VkImageSubresourceLayers" class="listingblock">
<div class="content">
<pre class="highlight"><code class="language-c++" data-lang="c++">typedef struct VkImageSubresourceLayers {
    VkImageAspectFlags    aspectMask;
    uint32_t              mipLevel;
    uint32_t              baseArrayLayer;
    uint32_t              layerCount;
} VkImageSubresourceLayers;</code></pre>
</div>
</div>
</div>
<div class="sect3">
<h4 id="_members_174">Members</h4>
<div class="ulist">
<ul>
<li>
<p><code>aspectMask</code> is a combination of <a href="#VkImageAspectFlagBits">VkImageAspectFlagBits</a>,
selecting the color, depth and/or stencil aspects to be copied.</p>
</li>
<li>
<p><code>mipLevel</code> is the mipmap level to copy from.</p>
</li>
<li>
<p><code>baseArrayLayer</code> and <code>layerCount</code> are the starting layer and
number of layers to copy.</p>
</li>
</ul>
</div>
</div>
<div class="sect3">
<h4 id="_description_537">Description</h4>
<div class="sidebarblock">
<div class="content">
<div class="title">Valid Usage</div>
<div class="ulist">
<ul>
<li>
<p><a id="VUID-VkImageSubresourceLayers-aspectMask-00167"></a>
If <code>aspectMask</code> contains <code>VK_IMAGE_ASPECT_COLOR_BIT</code>, it <strong class="purple">must</strong>
not contain either of <code>VK_IMAGE_ASPECT_DEPTH_BIT</code> or
<code>VK_IMAGE_ASPECT_STENCIL_BIT</code></p>
</li>
<li>
<p><a id="VUID-VkImageSubresourceLayers-aspectMask-00168"></a>
<code>aspectMask</code> <strong class="purple">must</strong> not contain <code>VK_IMAGE_ASPECT_METADATA_BIT</code></p>
</li>
<li>
<p><a id="VUID-VkImageSubresourceLayers-aspectMask-02247"></a>
<code>aspectMask</code> <strong class="purple">must</strong> not include
<code>VK_IMAGE_ASPECT_MEMORY_PLANE_i_BIT_EXT</code> for any index <code>i</code>.</p>
</li>
<li>
<p><a id="VUID-VkImageSubresourceLayers-layerCount-01700"></a>
<code>layerCount</code> <strong class="purple">must</strong> be greater than 0</p>
</li>
</ul>
</div>
</div>
</div>
<div class="sidebarblock">
<div class="content">
<div class="title">Valid Usage (Implicit)</div>
<div class="ulist">
<ul>
<li>
<p><a id="VUID-VkImageSubresourceLayers-aspectMask-parameter"></a> <code>aspectMask</code> <strong class="purple">must</strong> be a valid combination of <a href="#VkImageAspectFlagBits">VkImageAspectFlagBits</a> values</p>
</li>
<li>
<p><a id="VUID-VkImageSubresourceLayers-aspectMask-requiredbitmask"></a> <code>aspectMask</code> <strong class="purple">must</strong> not be <code>0</code></p>
</li>
</ul>
</div>
</div>
</div>
</div>
<div class="sect3">
<h4 id="_see_also_537">See Also</h4>
<div class="paragraph">
<p><a href="#VkBufferImageCopy">VkBufferImageCopy</a>, <a href="#VkImageAspectFlags">VkImageAspectFlags</a>, <a href="#VkImageBlit">VkImageBlit</a>, <a href="#VkImageCopy">VkImageCopy</a>, <a href="#VkImageResolve">VkImageResolve</a></p>
</div>
</div>
<div class="sect3">
<h4 id="_document_notes_537">Document Notes</h4>
<div class="paragraph">
<p>For more information, see the Vulkan Specification at URL</p>
</div>
<div class="paragraph">
<p><a href="https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VkImageSubresourceLayers" class="bare">https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VkImageSubresourceLayers</a></p>
</div>
<div class="paragraph">
<p>This page is extracted from the Vulkan Specification.
Fixes and changes should be made to the Specification, not directly.</p>
</div>
<div style="page-break-after: always;"></div>
</div>
</div>
<div class="sect2">
<h3 id="_vkimagesubresourcerange3">VkImageSubresourceRange(3)</h3>
<div class="sect3">
<h4 id="_name_538">Name</h4>
<div class="paragraph">
<p>VkImageSubresourceRange - Structure specifying an image subresource range</p>
</div>
</div>
<div class="sect3">
<h4 id="_c_specification_538">C Specification</h4>
<div class="paragraph">
<p>The <code>VkImageSubresourceRange</code> structure is defined as:</p>
</div>
<div id="VkImageSubresourceRange" class="listingblock">
<div class="content">
<pre class="highlight"><code class="language-c++" data-lang="c++">typedef struct VkImageSubresourceRange {
    VkImageAspectFlags    aspectMask;
    uint32_t              baseMipLevel;
    uint32_t              levelCount;
    uint32_t              baseArrayLayer;
    uint32_t              layerCount;
} VkImageSubresourceRange;</code></pre>
</div>
</div>
</div>
<div class="sect3">
<h4 id="_members_175">Members</h4>
<div class="ulist">
<ul>
<li>
<p><code>aspectMask</code> is a bitmask of <a href="#VkImageAspectFlagBits">VkImageAspectFlagBits</a> specifying
which aspect(s) of the image are included in the view.</p>
</li>
<li>
<p><code>baseMipLevel</code> is the first mipmap level accessible to the view.</p>
</li>
<li>
<p><code>levelCount</code> is the number of mipmap levels (starting from
<code>baseMipLevel</code>) accessible to the view.</p>
</li>
<li>
<p><code>baseArrayLayer</code> is the first array layer accessible to the view.</p>
</li>
<li>
<p><code>layerCount</code> is the number of array layers (starting from
<code>baseArrayLayer</code>) accessible to the view.</p>
</li>
</ul>
</div>
</div>
<div class="sect3">
<h4 id="_description_538">Description</h4>
<div class="paragraph">
<p>The number of mipmap levels and array layers <strong class="purple">must</strong> be a subset of the image
subresources in the image.
If an application wants to use all mip levels or layers in an image after
the <code>baseMipLevel</code> or <code>baseArrayLayer</code>, it <strong class="purple">can</strong> set <code>levelCount</code>
and <code>layerCount</code> to the special values <code>VK_REMAINING_MIP_LEVELS</code> and
<code>VK_REMAINING_ARRAY_LAYERS</code> without knowing the exact number of mip
levels or layers.</p>
</div>
<div class="paragraph">
<p>For cube and cube array image views, the layers of the image view starting
at <code>baseArrayLayer</code> correspond to faces in the order +X, -X, +Y, -Y, +Z,
-Z.
For cube arrays, each set of six sequential layers is a single cube, so the
number of cube maps in a cube map array view is <em><code>layerCount</code> / 6</em>, and
image array layer <span class="eq">(<code>baseArrayLayer</code> +  i)</span> is face index
<span class="eq">(i mod 6)</span> of cube <em>i / 6</em>.
If the number of layers in the view, whether set explicitly in
<code>layerCount</code> or implied by <code>VK_REMAINING_ARRAY_LAYERS</code>, is not a
multiple of 6, the last cube map in the array <strong class="purple">must</strong> not be accessed.</p>
</div>
<div class="paragraph">
<p><code>aspectMask</code> <strong class="purple">must</strong> be only <code>VK_IMAGE_ASPECT_COLOR_BIT</code>,
<code>VK_IMAGE_ASPECT_DEPTH_BIT</code> or <code>VK_IMAGE_ASPECT_STENCIL_BIT</code> if
<code>format</code> is a color, depth-only or stencil-only format,
respectively, except if <code>format</code> is a
<a href="vkspec.html#formats-requiring-sampler-ycbcr-conversion">multi-planar format</a>.
If using a depth/stencil format with both depth and stencil components,
<code>aspectMask</code> <strong class="purple">must</strong> include at least one of
<code>VK_IMAGE_ASPECT_DEPTH_BIT</code> and <code>VK_IMAGE_ASPECT_STENCIL_BIT</code>, and
<strong class="purple">can</strong> include both.</p>
</div>
<div class="paragraph">
<p>When the <code>VkImageSubresourceRange</code> structure is used to select a subset
of the slices of a 3D image&#8217;s mip level in order to create a 2D or 2D array
image view of a 3D image created with
<code>VK_IMAGE_CREATE_2D_ARRAY_COMPATIBLE_BIT</code>, <code>baseArrayLayer</code> and
<code>layerCount</code> specify the first slice index and the number of slices to
include in the created image view.
Such an image view <strong class="purple">can</strong> be used as a framebuffer attachment that refers only
to the specified range of slices of the selected mip level.
However, any layout transitions performed on such an attachment view during
a render pass instance still apply to the entire subresource referenced
which includes all the slices of the selected mip level.</p>
</div>
<div class="paragraph">
<p>When using an image view of a depth/stencil image to populate a descriptor
set (e.g. for sampling in the shader, or for use as an input attachment),
the <code>aspectMask</code> <strong class="purple">must</strong> only include one bit and selects whether the
image view is used for depth reads (i.e. using a floating-point sampler or
input attachment in the shader) or stencil reads (i.e. using an unsigned
integer sampler or input attachment in the shader).
When an image view of a depth/stencil image is used as a depth/stencil
framebuffer attachment, the <code>aspectMask</code> is ignored and both depth and
stencil image subresources are used.</p>
</div>
<div class="paragraph">
<p>The <code>components</code> member is of type <a href="#VkComponentMapping">VkComponentMapping</a>, and
describes a remapping from components of the image to components of the
vector returned by shader image instructions.
This remapping <strong class="purple">must</strong> be identity for storage image descriptors, input
attachment descriptors,
framebuffer attachments, and any <code>VkImageView</code> used with a combined
image sampler that enables <a href="vkspec.html#samplers-YCbCr-conversion">sampler Y&#8217;C<sub>B</sub>C<sub>R</sub>
conversion</a>.</p>
</div>
<div class="paragraph">
<p>When creating a <code>VkImageView</code>, if <a href="vkspec.html#samplers-YCbCr-conversion">sampler
Y&#8217;C<sub>B</sub>C<sub>R</sub> conversion</a> is enabled in the sampler, the <code>aspectMask</code> of a
<code>subresourceRange</code> used by the <code>VkImageView</code> <strong class="purple">must</strong> be
<code>VK_IMAGE_ASPECT_COLOR_BIT</code>.</p>
</div>
<div class="paragraph">
<p>When creating a <code>VkImageView</code>, if sampler Y&#8217;C<sub>B</sub>C<sub>R</sub> conversion is not
enabled in the sampler and the image <code>format</code> is
<a href="vkspec.html#formats-requiring-sampler-ycbcr-conversion">multi-planar</a>, the image <strong class="purple">must</strong>
have been created with <code>VK_IMAGE_CREATE_MUTABLE_FORMAT_BIT</code>, and the
<code>aspectMask</code> of the <code>VkImageView</code>&#8217;s <code>subresourceRange</code> <strong class="purple">must</strong> be
<code>VK_IMAGE_ASPECT_PLANE_0_BIT</code>, <code>VK_IMAGE_ASPECT_PLANE_1_BIT</code> or
<code>VK_IMAGE_ASPECT_PLANE_2_BIT</code>.</p>
</div>
<div class="sidebarblock">
<div class="content">
<div class="title">Valid Usage</div>
<div class="ulist">
<ul>
<li>
<p><a id="VUID-VkImageSubresourceRange-levelCount-01720"></a>
If <code>levelCount</code> is not <code>VK_REMAINING_MIP_LEVELS</code>, it <strong class="purple">must</strong> be
greater than <code>0</code></p>
</li>
<li>
<p><a id="VUID-VkImageSubresourceRange-layerCount-01721"></a>
If <code>layerCount</code> is not <code>VK_REMAINING_ARRAY_LAYERS</code>, it <strong class="purple">must</strong> be
greater than <code>0</code></p>
</li>
<li>
<p><a id="VUID-VkImageSubresourceRange-aspectMask-01670"></a>
If <code>aspectMask</code> includes <code>VK_IMAGE_ASPECT_COLOR_BIT</code>, then it
<strong class="purple">must</strong> not include any of <code>VK_IMAGE_ASPECT_PLANE_0_BIT</code>,
<code>VK_IMAGE_ASPECT_PLANE_1_BIT</code>, or <code>VK_IMAGE_ASPECT_PLANE_2_BIT</code></p>
</li>
<li>
<p><a id="VUID-VkImageSubresourceRange-aspectMask-02278"></a>
<code>aspectMask</code> <strong class="purple">must</strong> not include
<code>VK_IMAGE_ASPECT_MEMORY_PLANE_i_BIT_EXT</code> for any index <code>i</code>.</p>
</li>
</ul>
</div>
</div>
</div>
<div class="sidebarblock">
<div class="content">
<div class="title">Valid Usage (Implicit)</div>
<div class="ulist">
<ul>
<li>
<p><a id="VUID-VkImageSubresourceRange-aspectMask-parameter"></a> <code>aspectMask</code> <strong class="purple">must</strong> be a valid combination of <a href="#VkImageAspectFlagBits">VkImageAspectFlagBits</a> values</p>
</li>
<li>
<p><a id="VUID-VkImageSubresourceRange-aspectMask-requiredbitmask"></a> <code>aspectMask</code> <strong class="purple">must</strong> not be <code>0</code></p>
</li>
</ul>
</div>
</div>
</div>
</div>
<div class="sect3">
<h4 id="_see_also_538">See Also</h4>
<div class="paragraph">
<p><a href="#VkImageAspectFlags">VkImageAspectFlags</a>, <a href="#VkImageMemoryBarrier">VkImageMemoryBarrier</a>, <a href="#VkImageViewCreateInfo">VkImageViewCreateInfo</a>, <a href="#vkCmdClearColorImage">vkCmdClearColorImage</a>, <a href="#vkCmdClearDepthStencilImage">vkCmdClearDepthStencilImage</a></p>
</div>
</div>
<div class="sect3">
<h4 id="_document_notes_538">Document Notes</h4>
<div class="paragraph">
<p>For more information, see the Vulkan Specification at URL</p>
</div>
<div class="paragraph">
<p><a href="https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VkImageSubresourceRange" class="bare">https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VkImageSubresourceRange</a></p>
</div>
<div class="paragraph">
<p>This page is extracted from the Vulkan Specification.
Fixes and changes should be made to the Specification, not directly.</p>
</div>
<div style="page-break-after: always;"></div>
</div>
</div>
<div class="sect2">
<h3 id="_vkimageswapchaincreateinfokhr3">VkImageSwapchainCreateInfoKHR(3)</h3>
<div class="sect3">
<h4 id="_name_539">Name</h4>
<div class="paragraph">
<p>VkImageSwapchainCreateInfoKHR - Specify that an image will be bound to swapchain memory</p>
</div>
</div>
<div class="sect3">
<h4 id="_c_specification_539">C Specification</h4>
<div class="paragraph">
<p>If the <code>pNext</code> chain of <a href="#VkImageCreateInfo">VkImageCreateInfo</a> includes a
<code>VkImageSwapchainCreateInfoKHR</code> structure, then that structure includes
a swapchain handle indicating that the image will be bound to memory from
that swapchain.</p>
</div>
<div class="paragraph">
<p>The <code>VkImageSwapchainCreateInfoKHR</code> structure is defined as:</p>
</div>
<div id="VkImageSwapchainCreateInfoKHR" class="listingblock">
<div class="content">
<pre class="highlight"><code class="language-c++" data-lang="c++">typedef struct VkImageSwapchainCreateInfoKHR {
    VkStructureType    sType;
    const void*        pNext;
    VkSwapchainKHR     swapchain;
} VkImageSwapchainCreateInfoKHR;</code></pre>
</div>
</div>
</div>
<div class="sect3">
<h4 id="_members_176">Members</h4>
<div class="ulist">
<ul>
<li>
<p><code>sType</code> is the type of this structure.</p>
</li>
<li>
<p><code>pNext</code> is <code>NULL</code> or a pointer to an extension-specific structure.</p>
</li>
<li>
<p><code>swapchain</code> is <a href="#VK_NULL_HANDLE">VK_NULL_HANDLE</a> or a handle of a swapchain that
the image will be bound to.</p>
</li>
</ul>
</div>
</div>
<div class="sect3">
<h4 id="_description_539">Description</h4>
<div class="sidebarblock">
<div class="content">
<div class="title">Valid Usage</div>
<div class="ulist">
<ul>
<li>
<p><a id="VUID-VkImageSwapchainCreateInfoKHR-swapchain-00995"></a>
If <code>swapchain</code> is not <a href="#VK_NULL_HANDLE">VK_NULL_HANDLE</a>, the fields of
<a href="#VkImageCreateInfo">VkImageCreateInfo</a> <strong class="purple">must</strong> match the
<a href="vkspec.html#swapchain-wsi-image-create-info">implied image creation parameters</a>
of the swapchain</p>
</li>
</ul>
</div>
</div>
</div>
<div class="sidebarblock">
<div class="content">
<div class="title">Valid Usage (Implicit)</div>
<div class="ulist">
<ul>
<li>
<p><a id="VUID-VkImageSwapchainCreateInfoKHR-sType-sType"></a> <code>sType</code> <strong class="purple">must</strong> be <code>VK_STRUCTURE_TYPE_IMAGE_SWAPCHAIN_CREATE_INFO_KHR</code></p>
</li>
<li>
<p><a id="VUID-VkImageSwapchainCreateInfoKHR-swapchain-parameter"></a> If <code>swapchain</code> is not <a href="#VK_NULL_HANDLE">VK_NULL_HANDLE</a>, <code>swapchain</code> <strong class="purple">must</strong> be a valid <code>VkSwapchainKHR</code> handle</p>
</li>
</ul>
</div>
</div>
</div>
</div>
<div class="sect3">
<h4 id="_see_also_539">See Also</h4>
<div class="paragraph">
<p><a href="#VkStructureType">VkStructureType</a>, <a href="#VkSwapchainKHR">VkSwapchainKHR</a></p>
</div>
</div>
<div class="sect3">
<h4 id="_document_notes_539">Document Notes</h4>
<div class="paragraph">
<p>For more information, see the Vulkan Specification at URL</p>
</div>
<div class="paragraph">
<p><a href="https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VkImageSwapchainCreateInfoKHR" class="bare">https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VkImageSwapchainCreateInfoKHR</a></p>
</div>
<div class="paragraph">
<p>This page is extracted from the Vulkan Specification.
Fixes and changes should be made to the Specification, not directly.</p>
</div>
<div style="page-break-after: always;"></div>
</div>
</div>
<div class="sect2">
<h3 id="_vkimageviewastcdecodemodeext3">VkImageViewASTCDecodeModeEXT(3)</h3>
<div class="sect3">
<h4 id="_name_540">Name</h4>
<div class="paragraph">
<p>VkImageViewASTCDecodeModeEXT - Structure describing the ASTC decode mode for an image view</p>
</div>
</div>
<div class="sect3">
<h4 id="_c_specification_540">C Specification</h4>
<div class="paragraph">
<p>If the <code>pNext</code> list includes a <code>VkImageViewASTCDecodeModeEXT</code>
structure, then that structure includes a parameter that specifies the
decode mode for image views using ASTC compressed formats.</p>
</div>
<div class="paragraph">
<p>The <code>VkImageViewASTCDecodeModeEXT</code> structure is defined as:</p>
</div>
<div id="VkImageViewASTCDecodeModeEXT" class="listingblock">
<div class="content">
<pre class="highlight"><code class="language-c++" data-lang="c++">typedef struct VkImageViewASTCDecodeModeEXT {
    VkStructureType    sType;
    const void*        pNext;
    VkFormat           decodeMode;
} VkImageViewASTCDecodeModeEXT;</code></pre>
</div>
</div>
</div>
<div class="sect3">
<h4 id="_members_177">Members</h4>
<div class="ulist">
<ul>
<li>
<p><code>sType</code> is the type of this structure.</p>
</li>
<li>
<p><code>pNext</code> is <code>NULL</code> or a pointer to an extension-specific structure.</p>
</li>
<li>
<p><code>decodeMode</code> is the intermediate format used to decode ASTC
compressed formats.</p>
</li>
</ul>
</div>
</div>
<div class="sect3">
<h4 id="_description_540">Description</h4>
<div class="sidebarblock">
<div class="content">
<div class="title">Valid Usage</div>
<div class="ulist">
<ul>
<li>
<p><a id="VUID-VkImageViewASTCDecodeModeEXT-decodeMode-02230"></a>
<code>decodeMode</code> <strong class="purple">must</strong> be one of <code>VK_FORMAT_R16G16B16A16_SFLOAT</code>,
<code>VK_FORMAT_R8G8B8A8_UNORM</code>, or
<code>VK_FORMAT_E5B9G9R9_UFLOAT_PACK32</code></p>
</li>
<li>
<p><a id="VUID-VkImageViewASTCDecodeModeEXT-decodeMode-02231"></a>
If the <a href="vkspec.html#features-astc-decodeModeSharedExponent"><code>decodeModeSharedExponent</code></a> feature is not enabled,
<code>decodeMode</code> <strong class="purple">must</strong> not be <code>VK_FORMAT_E5B9G9R9_UFLOAT_PACK32</code></p>
</li>
<li>
<p><a id="VUID-VkImageViewASTCDecodeModeEXT-decodeMode-02232"></a>
If <code>decodeMode</code> is <code>VK_FORMAT_R8G8B8A8_UNORM</code> the image view
<strong class="purple">must</strong> not include blocks using any of the ASTC HDR modes</p>
</li>
<li>
<p><a id="VUID-VkImageViewASTCDecodeModeEXT-format-02233"></a>
<code>format</code> of the image view <strong class="purple">must</strong> be one of
<code>VK_FORMAT_ASTC_4x4_UNORM_BLOCK</code>,
<code>VK_FORMAT_ASTC_4x4_SRGB_BLOCK</code>,
<code>VK_FORMAT_ASTC_5x4_UNORM_BLOCK</code>,
<code>VK_FORMAT_ASTC_5x4_SRGB_BLOCK</code>,
<code>VK_FORMAT_ASTC_5x5_UNORM_BLOCK</code>,
<code>VK_FORMAT_ASTC_5x5_SRGB_BLOCK</code>,
<code>VK_FORMAT_ASTC_6x5_UNORM_BLOCK</code>,
<code>VK_FORMAT_ASTC_6x5_SRGB_BLOCK</code>,
<code>VK_FORMAT_ASTC_6x6_UNORM_BLOCK</code>,
<code>VK_FORMAT_ASTC_6x6_SRGB_BLOCK</code>,
<code>VK_FORMAT_ASTC_8x5_UNORM_BLOCK</code>,
<code>VK_FORMAT_ASTC_8x5_SRGB_BLOCK</code>,
<code>VK_FORMAT_ASTC_8x6_UNORM_BLOCK</code>,
<code>VK_FORMAT_ASTC_8x6_SRGB_BLOCK</code>,
<code>VK_FORMAT_ASTC_8x8_UNORM_BLOCK</code>,
<code>VK_FORMAT_ASTC_8x8_SRGB_BLOCK</code>,
<code>VK_FORMAT_ASTC_10x5_UNORM_BLOCK</code>,
<code>VK_FORMAT_ASTC_10x5_SRGB_BLOCK</code>,
<code>VK_FORMAT_ASTC_10x6_UNORM_BLOCK</code>,
<code>VK_FORMAT_ASTC_10x6_SRGB_BLOCK</code>,
<code>VK_FORMAT_ASTC_10x8_UNORM_BLOCK</code>,
<code>VK_FORMAT_ASTC_10x8_SRGB_BLOCK</code>,
<code>VK_FORMAT_ASTC_10x10_UNORM_BLOCK</code>,
<code>VK_FORMAT_ASTC_10x10_SRGB_BLOCK</code>,
<code>VK_FORMAT_ASTC_12x10_UNORM_BLOCK</code>,
<code>VK_FORMAT_ASTC_12x10_SRGB_BLOCK</code>,
<code>VK_FORMAT_ASTC_12x12_UNORM_BLOCK</code>, or
<code>VK_FORMAT_ASTC_12x12_SRGB_BLOCK</code></p>
</li>
</ul>
</div>
</div>
</div>
<div class="paragraph">
<p>If <code>format</code> uses sRGB encoding then the <code>decodeMode</code> has no effect.</p>
</div>
<div class="sidebarblock">
<div class="content">
<div class="title">Valid Usage (Implicit)</div>
<div class="ulist">
<ul>
<li>
<p><a id="VUID-VkImageViewASTCDecodeModeEXT-sType-sType"></a> <code>sType</code> <strong class="purple">must</strong> be <code>VK_STRUCTURE_TYPE_IMAGE_VIEW_ASTC_DECODE_MODE_EXT</code></p>
</li>
<li>
<p><a id="VUID-VkImageViewASTCDecodeModeEXT-decodeMode-parameter"></a> <code>decodeMode</code> <strong class="purple">must</strong> be a valid <a href="#VkFormat">VkFormat</a> value</p>
</li>
</ul>
</div>
</div>
</div>
</div>
<div class="sect3">
<h4 id="_see_also_540">See Also</h4>
<div class="paragraph">
<p><a href="#VkFormat">VkFormat</a>, <a href="#VkStructureType">VkStructureType</a></p>
</div>
</div>
<div class="sect3">
<h4 id="_document_notes_540">Document Notes</h4>
<div class="paragraph">
<p>For more information, see the Vulkan Specification at URL</p>
</div>
<div class="paragraph">
<p><a href="https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VkImageViewASTCDecodeModeEXT" class="bare">https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VkImageViewASTCDecodeModeEXT</a></p>
</div>
<div class="paragraph">
<p>This page is extracted from the Vulkan Specification.
Fixes and changes should be made to the Specification, not directly.</p>
</div>
<div style="page-break-after: always;"></div>
</div>
</div>
<div class="sect2">
<h3 id="_vkimageviewcreateinfo3">VkImageViewCreateInfo(3)</h3>
<div class="sect3">
<h4 id="_name_541">Name</h4>
<div class="paragraph">
<p>VkImageViewCreateInfo - Structure specifying parameters of a newly created image view</p>
</div>
</div>
<div class="sect3">
<h4 id="_c_specification_541">C Specification</h4>
<div class="paragraph">
<p>The <code>VkImageViewCreateInfo</code> structure is defined as:</p>
</div>
<div id="VkImageViewCreateInfo" class="listingblock">
<div class="content">
<pre class="highlight"><code class="language-c++" data-lang="c++">typedef struct VkImageViewCreateInfo {
    VkStructureType            sType;
    const void*                pNext;
    VkImageViewCreateFlags     flags;
    VkImage                    image;
    VkImageViewType            viewType;
    VkFormat                   format;
    VkComponentMapping         components;
    VkImageSubresourceRange    subresourceRange;
} VkImageViewCreateInfo;</code></pre>
</div>
</div>
</div>
<div class="sect3">
<h4 id="_members_178">Members</h4>
<div class="ulist">
<ul>
<li>
<p><code>sType</code> is the type of this structure.</p>
</li>
<li>
<p><code>pNext</code> is <code>NULL</code> or a pointer to an extension-specific structure.</p>
</li>
<li>
<p><code>flags</code> is a bitmask of <a href="#VkImageViewCreateFlagBits">VkImageViewCreateFlagBits</a> describing
additional parameters of the image view.</p>
</li>
<li>
<p><code>image</code> is a <a href="#VkImage">VkImage</a> on which the view will be created.</p>
</li>
<li>
<p><code>viewType</code> is a <a href="#VkImageViewType">VkImageViewType</a> value specifying the type of
the image view.</p>
</li>
<li>
<p><code>format</code> is a <a href="#VkFormat">VkFormat</a> describing the format and type used to
interpret texel blocks in the image.</p>
</li>
<li>
<p><code>components</code> is a <a href="#VkComponentMapping">VkComponentMapping</a> specifies a remapping of
color components (or of depth or stencil components after they have been
converted into color components).</p>
</li>
<li>
<p><code>subresourceRange</code> is a <a href="#VkImageSubresourceRange">VkImageSubresourceRange</a> selecting the
set of mipmap levels and array layers to be accessible to the view.</p>
</li>
</ul>
</div>
</div>
<div class="sect3">
<h4 id="_description_541">Description</h4>
<div class="paragraph">
<p>Some of the <code>image</code> creation parameters are inherited by the view.
In particular, image view creation inherits the implicit parameter
<code>usage</code> specifying the allowed usages of the image view that, by
default, takes the value of the corresponding <code>usage</code> parameter
specified in <code>VkImageCreateInfo</code> at image creation time.
If the image was has a depth-stencil format and was created with an instance
of <a href="#VkImageStencilUsageCreateInfoEXT">VkImageStencilUsageCreateInfoEXT</a> in the <code>pNext</code> chain of
<a href="#VkImageCreateInfo">VkImageCreateInfo</a>, the usage is calculated based on the
<code>subresource.aspectMask</code> provided:
  * If <code>aspectMask</code> includes only <code>VK_IMAGE_ASPECT_STENCIL_BIT</code>, the
    implicit <code>usage</code> is equal to
    <a href="#VkImageStencilUsageCreateInfoEXT">VkImageStencilUsageCreateInfoEXT</a>::<code>stencilUsage</code>.
  * If <code>aspectMask</code> includes only <code>VK_IMAGE_ASPECT_DEPTH_BIT</code>, the
    implicit <code>usage</code> is equal to
    <a href="#VkImageCreateInfo">VkImageCreateInfo</a>::<code>stencilUsage</code>.
  * If both aspects are included in <code>aspectMask</code>, the implicit
    <code>usage</code> is equal to the intersection of
    slinkVkImageCreateInfo::<code>usage</code> and
    <a href="#VkImageStencilUsageCreateInfoEXT">VkImageStencilUsageCreateInfoEXT</a>::<code>stencilUsage</code>.
The implicit <code>usage</code> <strong class="purple">can</strong> be overriden by including an instance of
<a href="#VkImageViewUsageCreateInfo">VkImageViewUsageCreateInfo</a> structure in the <code>pNext</code> chain.</p>
</div>
<div class="paragraph">
<p>If <code>image</code> was created with the <code>VK_IMAGE_CREATE_MUTABLE_FORMAT_BIT</code>
flag,
and if the <code>format</code> of the image is not
<a href="vkspec.html#formats-requiring-sampler-ycbcr-conversion">multi-planar</a>,
<code>format</code> <strong class="purple">can</strong> be different from the image&#8217;s format, but if
<code>image</code> was created without the
<code>VK_IMAGE_CREATE_BLOCK_TEXEL_VIEW_COMPATIBLE_BIT</code> flag and
they are not equal they <strong class="purple">must</strong> be <em>compatible</em>.
Image format compatibility is defined in the
<a href="vkspec.html#formats-compatibility-classes">Format Compatibility Classes</a> section.
Views of compatible formats will have the same mapping between texel
coordinates and memory locations irrespective of the <code>format</code>, with only
the interpretation of the bit pattern changing.</p>
</div>
<div class="admonitionblock note">
<table>
<tr>
<td class="icon">
<i class="fa icon-note" title="Note"></i>
</td>
<td class="content">
<div class="title">Note</div>
<div class="paragraph">
<p>Values intended to be used with one view format <strong class="purple">may</strong> not be exactly
preserved when written or read through a different format.
For example, an integer value that happens to have the bit pattern of a
floating point denorm or NaN <strong class="purple">may</strong> be flushed or canonicalized when written
or read through a view with a floating point format.
Similarly, a value written through a signed normalized format that has a bit
pattern exactly equal to <span class="eq">-2<sup>b</sup></span> <strong class="purple">may</strong> be changed to <span class="eq">-2<sup>b</sup> +  1</span>
as described in <a href="vkspec.html#fundamentals-fixedfpconv">Conversion from Normalized
Fixed-Point to Floating-Point</a>.</p>
</div>
</td>
</tr>
</table>
</div>
<div class="paragraph">
<p>If <code>image</code> was created with the
<code>VK_IMAGE_CREATE_BLOCK_TEXEL_VIEW_COMPATIBLE_BIT</code> flag, <code>format</code>
<strong class="purple">must</strong> be <em>compatible</em> with the image&#8217;s format as described above, or <strong class="purple">must</strong>
be an uncompressed format in which case it <strong class="purple">must</strong> be <em>size-compatible</em> with
the image&#8217;s format, as defined for
<a href="vkspec.html#copies-images-format-size-compatibility">copying data between images</a> In
this case the resulting image view&#8217;s texel dimensions equal the dimensions
of the selected mip level divided by the compressed texel block size and
rounded up.</p>
</div>
<div class="paragraph">
<p>If the image view is to be used with a sampler which supports
<a href="vkspec.html#samplers-YCbCr-conversion">sampler Y&#8217;C<sub>B</sub>C<sub>R</sub> conversion</a>, an <em>identically
defined object</em> of type <a href="#VkSamplerYcbcrConversion">VkSamplerYcbcrConversion</a> to that used to
create the sampler <strong class="purple">must</strong> be passed to <a href="#vkCreateImageView">vkCreateImageView</a> in a
<a href="#VkSamplerYcbcrConversionInfo">VkSamplerYcbcrConversionInfo</a> added to the <code>pNext</code> chain of
<a href="#VkImageViewCreateInfo">VkImageViewCreateInfo</a>.</p>
</div>
<div class="paragraph">
<p>If the image has a
<a href="vkspec.html#formats-requiring-sampler-ycbcr-conversion">multi-planar</a> <code>format</code> and
<code>subresourceRange.aspectMask</code> is <code>VK_IMAGE_ASPECT_COLOR_BIT</code>,
<code>format</code> <strong class="purple">must</strong> be identical to the image <code>format</code>, and the sampler
to be used with the image view <strong class="purple">must</strong> enable
<a href="vkspec.html#samplers-YCbCr-conversion">sampler Y&#8217;C<sub>B</sub>C<sub>R</sub> conversion</a>.</p>
</div>
<div class="paragraph">
<p>If <code>image</code> was created with the <code>VK_IMAGE_CREATE_MUTABLE_FORMAT_BIT</code>
and the image has a
<a href="vkspec.html#formats-requiring-sampler-ycbcr-conversion">multi-planar</a> <code>format</code>,
and if <code>subresourceRange.aspectMask</code> is
<code>VK_IMAGE_ASPECT_PLANE_0_BIT</code>, <code>VK_IMAGE_ASPECT_PLANE_1_BIT</code>, or
<code>VK_IMAGE_ASPECT_PLANE_2_BIT</code>, <code>format</code> <strong class="purple">must</strong> be
<a href="vkspec.html#formats-compatible-planes">compatible</a> with the corresponding plane of the
image, and the sampler to be used with the image view <strong class="purple">must</strong> not enable
<a href="vkspec.html#samplers-YCbCr-conversion">sampler Y&#8217;C<sub>B</sub>C<sub>R</sub> conversion</a>.
The <code>width</code> and <code>height</code> of the single-plane image view <strong class="purple">must</strong> be
derived from the multi-planar image&#8217;s dimensions in the manner listed for
<a href="vkspec.html#formats-compatible-planes">plane compatibility</a> for the plane.</p>
</div>
<div class="paragraph">
<p>Any view of an image plane will have the same mapping between texel
coordinates and memory locations as used by the channels of the color
aspect, subject to the formulae relating texel coordinates to
lower-resolution planes as described in <a href="vkspec.html#textures-chroma-reconstruction">Chroma Reconstruction</a>.
That is, if an R or B plane has a reduced resolution relative to the G plane
of the multi-planar image, the image view operates using the (<em>u<sub>plane</sub></em>,
<em>v<sub>plane</sub></em>) unnormalized coordinates of the reduced-resolution plane, and
these coordinates access the same memory locations as the (<em>u<sub>color</sub></em>,
<em>v<sub>color</sub></em>) unnormalized coordinates of the color aspect for which chroma
reconstruction operations operate on the same (<em>u<sub>plane</sub></em>, <em>v<sub>plane</sub></em>) or
(<em>i<sub>plane</sub></em>, <em>j<sub>plane</sub></em>) coordinates.</p>
</div>
<table id="resources-image-views-compatibility" class="tableblock frame-all grid-all stretch">
<caption class="title">Table 7. Image and image view parameter compatibility requirements</caption>
<colgroup>
<col style="width: 15%;" />
<col style="width: 35%;" />
<col style="width: 50%;" />
</colgroup>
<thead>
<tr>
<th class="tableblock halign-left valign-top">Dim, Arrayed, MS</th>
<th class="tableblock halign-left valign-top">Image parameters</th>
<th class="tableblock halign-left valign-top">View parameters</th>
</tr>
</thead>
<tbody>
<tr>
<th class="tableblock halign-left valign-top"></th>
<td class="tableblock halign-left valign-top"><p class="tableblock"><code>imageType</code> = ci.<code>imageType</code><br />
    <code>width</code> = ci.<code>extent.width</code><br />
    <code>height</code> = ci.<code>extent.height</code><br />
    <code>depth</code> = ci.<code>extent.depth</code><br />
    <code>arrayLayers</code> = ci.<code>arrayLayers</code><br />
    <code>samples</code> = ci.<code>samples</code><br />
    <code>flags</code> = ci.<code>flags</code><br />
    where ci is the <a href="#VkImageCreateInfo">VkImageCreateInfo</a> used to create <code>image</code>.</p></td>
<td class="tableblock halign-left valign-top"><p class="tableblock"><code>baseArrayLayer</code>, <code>layerCount</code>, and <code>levelCount</code>
    are members of the <code>subresourceRange</code> member.</p></td>
</tr>
<tr>
<th class="tableblock halign-left valign-top"><p class="tableblock">1D, 0, 0</p></th>
<td class="tableblock halign-left valign-top"><p class="tableblock"><code>imageType</code> = <code>VK_IMAGE_TYPE_1D</code><br />
<code>width</code> ≥ 1<br />
<code>height</code> = 1<br />
<code>depth</code> = 1<br />
<code>arrayLayers</code> ≥ 1<br />
<code>samples</code> = 1</p></td>
<td class="tableblock halign-left valign-top"><p class="tableblock"><code>viewType</code> = <code>VK_IMAGE_VIEW_TYPE_1D</code><br />
<code>baseArrayLayer</code> ≥ 0<br />
<code>layerCount</code> = 1</p></td>
</tr>
<tr>
<th class="tableblock halign-left valign-top"><p class="tableblock">1D, 1, 0</p></th>
<td class="tableblock halign-left valign-top"><p class="tableblock"><code>imageType</code> = <code>VK_IMAGE_TYPE_1D</code><br />
<code>width</code> ≥ 1<br />
<code>height</code> = 1<br />
<code>depth</code> = 1<br />
<code>arrayLayers</code> ≥ 1<br />
<code>samples</code> = 1</p></td>
<td class="tableblock halign-left valign-top"><p class="tableblock"><code>viewType</code> = <code>VK_IMAGE_VIEW_TYPE_1D_ARRAY</code><br />
<code>baseArrayLayer</code> ≥ 0<br />
<code>layerCount</code> ≥ 1</p></td>
</tr>
<tr>
<th class="tableblock halign-left valign-top"><p class="tableblock">2D, 0, 0</p></th>
<td class="tableblock halign-left valign-top"><p class="tableblock"><code>imageType</code> = <code>VK_IMAGE_TYPE_2D</code><br />
<code>width</code> ≥ 1<br />
<code>height</code> ≥ 1<br />
<code>depth</code> = 1<br />
<code>arrayLayers</code> ≥ 1<br />
<code>samples</code> = 1</p></td>
<td class="tableblock halign-left valign-top"><p class="tableblock"><code>viewType</code> = <code>VK_IMAGE_VIEW_TYPE_2D</code><br />
<code>baseArrayLayer</code> ≥ 0<br />
<code>layerCount</code> = 1</p></td>
</tr>
<tr>
<th class="tableblock halign-left valign-top"><p class="tableblock">2D, 1, 0</p></th>
<td class="tableblock halign-left valign-top"><p class="tableblock"><code>imageType</code> = <code>VK_IMAGE_TYPE_2D</code><br />
<code>width</code> ≥ 1<br />
<code>height</code> ≥ 1<br />
<code>depth</code> = 1<br />
<code>arrayLayers</code> ≥ 1<br />
<code>samples</code> = 1</p></td>
<td class="tableblock halign-left valign-top"><p class="tableblock"><code>viewType</code> = <code>VK_IMAGE_VIEW_TYPE_2D_ARRAY</code><br />
<code>baseArrayLayer</code> ≥ 0<br />
<code>layerCount</code> ≥ 1</p></td>
</tr>
<tr>
<th class="tableblock halign-left valign-top"><p class="tableblock">2D, 0, 1</p></th>
<td class="tableblock halign-left valign-top"><p class="tableblock"><code>imageType</code> = <code>VK_IMAGE_TYPE_2D</code><br />
<code>width</code> ≥ 1<br />
<code>height</code> ≥ 1<br />
<code>depth</code> = 1<br />
<code>arrayLayers</code> ≥ 1<br />
<code>samples</code> &gt; 1</p></td>
<td class="tableblock halign-left valign-top"><p class="tableblock"><code>viewType</code> = <code>VK_IMAGE_VIEW_TYPE_2D</code><br />
<code>baseArrayLayer</code> ≥ 0<br />
<code>layerCount</code> = 1</p></td>
</tr>
<tr>
<th class="tableblock halign-left valign-top"><p class="tableblock">2D, 1, 1</p></th>
<td class="tableblock halign-left valign-top"><p class="tableblock"><code>imageType</code> = <code>VK_IMAGE_TYPE_2D</code><br />
<code>width</code> ≥ 1<br />
<code>height</code> ≥ 1<br />
<code>depth</code> = 1<br />
<code>arrayLayers</code> ≥ 1<br />
<code>samples</code> &gt; 1</p></td>
<td class="tableblock halign-left valign-top"><p class="tableblock"><code>viewType</code> = <code>VK_IMAGE_VIEW_TYPE_2D_ARRAY</code><br />
<code>baseArrayLayer</code> ≥ 0<br />
<code>layerCount</code> ≥ 1</p></td>
</tr>
<tr>
<th class="tableblock halign-left valign-top"><p class="tableblock">CUBE, 0, 0</p></th>
<td class="tableblock halign-left valign-top"><p class="tableblock"><code>imageType</code> = <code>VK_IMAGE_TYPE_2D</code><br />
<code>width</code> ≥ 1<br />
<code>height</code> = <code>width</code><br />
<code>depth</code> = 1<br />
<code>arrayLayers</code> ≥ 6<br />
<code>samples</code> = 1<br />
<code>flags</code> includes <code>VK_IMAGE_CREATE_CUBE_COMPATIBLE_BIT</code></p></td>
<td class="tableblock halign-left valign-top"><p class="tableblock"><code>viewType</code> = <code>VK_IMAGE_VIEW_TYPE_CUBE</code><br />
<code>baseArrayLayer</code> ≥ 0<br />
<code>layerCount</code> = 6</p></td>
</tr>
<tr>
<th class="tableblock halign-left valign-top"><p class="tableblock">CUBE, 1, 0</p></th>
<td class="tableblock halign-left valign-top"><p class="tableblock"><code>imageType</code> = <code>VK_IMAGE_TYPE_2D</code><br />
<code>width</code> ≥ 1<br />
<code>height</code> = width<br />
<code>depth</code> = 1<br />
<em>N</em> ≥ 1<br />
<code>arrayLayers</code> ≥ 6 × <em>N</em><br />
<code>samples</code> = 1<br />
<code>flags</code> includes <code>VK_IMAGE_CREATE_CUBE_COMPATIBLE_BIT</code></p></td>
<td class="tableblock halign-left valign-top"><p class="tableblock"><code>viewType</code> = <code>VK_IMAGE_VIEW_TYPE_CUBE_ARRAY</code><br />
<code>baseArrayLayer</code> ≥ 0<br />
<code>layerCount</code> = 6 × <em>N</em>, <em>N</em> ≥ 1</p></td>
</tr>
<tr>
<th class="tableblock halign-left valign-top"><p class="tableblock">3D, 0, 0</p></th>
<td class="tableblock halign-left valign-top"><p class="tableblock"><code>imageType</code> = <code>VK_IMAGE_TYPE_3D</code><br />
<code>width</code> ≥ 1<br />
<code>height</code> ≥ 1<br />
<code>depth</code> ≥ 1<br />
<code>arrayLayers</code> = 1<br />
<code>samples</code> = 1</p></td>
<td class="tableblock halign-left valign-top"><p class="tableblock"><code>viewType</code> = <code>VK_IMAGE_VIEW_TYPE_3D</code><br />
<code>baseArrayLayer</code> = 0<br />
<code>layerCount</code> = 1</p></td>
</tr>
<tr>
<th class="tableblock halign-left valign-top"><p class="tableblock">3D, 0, 0</p></th>
<td class="tableblock halign-left valign-top"><p class="tableblock"><code>imageType</code> = <code>VK_IMAGE_TYPE_3D</code><br />
<code>width</code> ≥ 1<br />
<code>height</code> ≥ 1<br />
<code>depth</code> ≥ 1<br />
<code>arrayLayers</code> = 1<br />
<code>samples</code> = 1<br />
<code>flags</code> includes <code>VK_IMAGE_CREATE_2D_ARRAY_COMPATIBLE_BIT</code><br />
<code>flags</code> does not include <code>VK_IMAGE_CREATE_SPARSE_BINDING_BIT</code>, <code>VK_IMAGE_CREATE_SPARSE_RESIDENCY_BIT</code>, and <code>VK_IMAGE_CREATE_SPARSE_ALIASED_BIT</code></p></td>
<td class="tableblock halign-left valign-top"><p class="tableblock"><code>viewType</code> = <code>VK_IMAGE_VIEW_TYPE_2D</code><br />
<code>levelCount</code> = 1<br />
<code>baseArrayLayer</code> ≥ 0<br />
<code>layerCount</code> = 1</p></td>
</tr>
<tr>
<th class="tableblock halign-left valign-top"><p class="tableblock">3D, 0, 0</p></th>
<td class="tableblock halign-left valign-top"><p class="tableblock"><code>imageType</code> = <code>VK_IMAGE_TYPE_3D</code><br />
<code>width</code> ≥ 1<br />
<code>height</code> ≥ 1<br />
<code>depth</code> ≥ 1<br />
<code>arrayLayers</code> = 1<br />
<code>samples</code> = 1<br />
<code>flags</code> includes <code>VK_IMAGE_CREATE_2D_ARRAY_COMPATIBLE_BIT</code><br />
<code>flags</code> does not include <code>VK_IMAGE_CREATE_SPARSE_BINDING_BIT</code>, <code>VK_IMAGE_CREATE_SPARSE_RESIDENCY_BIT</code>, and <code>VK_IMAGE_CREATE_SPARSE_ALIASED_BIT</code></p></td>
<td class="tableblock halign-left valign-top"><p class="tableblock"><code>viewType</code> = <code>VK_IMAGE_VIEW_TYPE_2D_ARRAY</code><br />
<code>levelCount</code> = 1<br />
<code>baseArrayLayer</code> ≥ 0<br />
<code>layerCount</code> ≥ 1</p></td>
</tr>
</tbody>
</table>
<div class="sidebarblock">
<div class="content">
<div class="title">Valid Usage</div>
<div class="ulist">
<ul>
<li>
<p><a id="VUID-VkImageViewCreateInfo-image-01003"></a>
If <code>image</code> was not created with
<code>VK_IMAGE_CREATE_CUBE_COMPATIBLE_BIT</code> then <code>viewType</code> <strong class="purple">must</strong> not
be <code>VK_IMAGE_VIEW_TYPE_CUBE</code> or <code>VK_IMAGE_VIEW_TYPE_CUBE_ARRAY</code></p>
</li>
<li>
<p><a id="VUID-VkImageViewCreateInfo-viewType-01004"></a>
If the <a href="vkspec.html#features-imageCubeArray">image cubemap arrays</a> feature is not
enabled, <code>viewType</code> <strong class="purple">must</strong> not be <code>VK_IMAGE_VIEW_TYPE_CUBE_ARRAY</code></p>
</li>
<li>
<p><a id="VUID-VkImageViewCreateInfo-image-01005"></a>
If <code>image</code> was created with <code>VK_IMAGE_TYPE_3D</code> but without
<code>VK_IMAGE_CREATE_2D_ARRAY_COMPATIBLE_BIT</code> set then <code>viewType</code>
<strong class="purple">must</strong> not be <code>VK_IMAGE_VIEW_TYPE_2D</code> or
<code>VK_IMAGE_VIEW_TYPE_2D_ARRAY</code></p>
</li>
<li>
<p><a id="VUID-VkImageViewCreateInfo-image-02570"></a>
<code>image</code> <strong class="purple">must</strong> have been created with a <code>usage</code> value containing
at least one of <code>VK_IMAGE_USAGE_SAMPLED_BIT</code>,
<code>VK_IMAGE_USAGE_STORAGE_BIT</code>,
<code>VK_IMAGE_USAGE_COLOR_ATTACHMENT_BIT</code>,
<code>VK_IMAGE_USAGE_DEPTH_STENCIL_ATTACHMENT_BIT</code>,
<code>VK_IMAGE_USAGE_INPUT_ATTACHMENT_BIT</code>,
<code>VK_IMAGE_USAGE_SHADING_RATE_IMAGE_BIT_NV</code>, or
<code>VK_IMAGE_USAGE_FRAGMENT_DENSITY_MAP_BIT_EXT</code></p>
</li>
<li>
<p><a id="VUID-VkImageViewCreateInfo-None-02273"></a>
The <a href="vkspec.html#resources-image-view-format-features">format features</a> of the
resultant image view <strong class="purple">must</strong> contain at least one bit.</p>
</li>
<li>
<p><a id="VUID-VkImageViewCreateInfo-usage-02274"></a>
If <code>usage</code> contains <code>VK_IMAGE_USAGE_SAMPLED_BIT</code>, then the
<a href="vkspec.html#resources-image-view-format-features">format features</a> of the
resultant image view <strong class="purple">must</strong> contain
<code>VK_FORMAT_FEATURE_SAMPLED_IMAGE_BIT</code>.</p>
</li>
<li>
<p><a id="VUID-VkImageViewCreateInfo-usage-02275"></a>
If <code>usage</code> contains <code>VK_IMAGE_USAGE_STORAGE_BIT</code>, then the image
view&#8217;s <a href="vkspec.html#resources-image-view-format-features">format features</a> <strong class="purple">must</strong>
contain <code>VK_FORMAT_FEATURE_STORAGE_IMAGE_BIT</code>.</p>
</li>
<li>
<p><a id="VUID-VkImageViewCreateInfo-usage-02276"></a>
If <code>usage</code> contains <code>VK_IMAGE_USAGE_COLOR_ATTACHMENT_BIT</code>, then
the image view&#8217;s <a href="vkspec.html#resources-image-view-format-features">format
features</a> <strong class="purple">must</strong> contain <code>VK_FORMAT_FEATURE_COLOR_ATTACHMENT_BIT</code>.</p>
</li>
<li>
<p><a id="VUID-VkImageViewCreateInfo-usage-02277"></a>
If <code>usage</code> contains
<code>VK_IMAGE_USAGE_DEPTH_STENCIL_ATTACHMENT_BIT</code>, then the image view&#8217;s
<a href="vkspec.html#resources-image-view-format-features">format features</a> <strong class="purple">must</strong> contain
<code>VK_FORMAT_FEATURE_DEPTH_STENCIL_ATTACHMENT_BIT</code>.</p>
</li>
<li>
<p><a id="VUID-VkImageViewCreateInfo-usage-02652"></a>
If <code>usage</code> contains <code>VK_IMAGE_USAGE_INPUT_ATTACHMENT_BIT</code>, then
the image view&#8217;s <a href="vkspec.html#resources-image-view-format-features">format
features</a> <strong class="purple">must</strong> contain at least one of
<code>VK_FORMAT_FEATURE_COLOR_ATTACHMENT_BIT</code> or
<code>VK_FORMAT_FEATURE_DEPTH_STENCIL_ATTACHMENT_BIT</code>.</p>
</li>
<li>
<p><a id="VUID-VkImageViewCreateInfo-subresourceRange-01478"></a>
<code>subresourceRange.baseMipLevel</code> <strong class="purple">must</strong> be less than the
<code>mipLevels</code> specified in <a href="#VkImageCreateInfo">VkImageCreateInfo</a> when <code>image</code>
was created</p>
</li>
<li>
<p><a id="VUID-VkImageViewCreateInfo-subresourceRange-01718"></a>
If <code>subresourceRange.levelCount</code> is not
<code>VK_REMAINING_MIP_LEVELS</code>, <span class="eq"><code>subresourceRange.baseMipLevel</code>
+  <code>subresourceRange.levelCount</code></span> <strong class="purple">must</strong> be less than or equal to
the <code>mipLevels</code> specified in <a href="#VkImageCreateInfo">VkImageCreateInfo</a> when
<code>image</code> was created</p>
</li>
<li>
<p><a id="VUID-VkImageViewCreateInfo-image-02571"></a>
If <code>image</code> was created with <code>usage</code> containing
<code>VK_IMAGE_USAGE_FRAGMENT_DENSITY_MAP_BIT_EXT</code>,
<code>subresourceRange.levelCount</code> <strong class="purple">must</strong> be <code>1</code></p>
</li>
<li>
<p><a id="VUID-VkImageViewCreateInfo-image-01482"></a>
If <code>image</code> is not a 3D image created with
<code>VK_IMAGE_CREATE_2D_ARRAY_COMPATIBLE_BIT</code> set, or <code>viewType</code> is
not <code>VK_IMAGE_VIEW_TYPE_2D</code> or <code>VK_IMAGE_VIEW_TYPE_2D_ARRAY</code>,
<code>subresourceRange</code>::<code>baseArrayLayer</code> <strong class="purple">must</strong> be less than the
<code>arrayLayers</code> specified in <a href="#VkImageCreateInfo">VkImageCreateInfo</a> when <code>image</code>
was created</p>
</li>
<li>
<p><a id="VUID-VkImageViewCreateInfo-subresourceRange-01483"></a>
If <code>subresourceRange</code>::<code>layerCount</code> is not
<code>VK_REMAINING_ARRAY_LAYERS</code>, <code>image</code> is not a 3D image created
with <code>VK_IMAGE_CREATE_2D_ARRAY_COMPATIBLE_BIT</code> set, or
<code>viewType</code> is not <code>VK_IMAGE_VIEW_TYPE_2D</code> or
<code>VK_IMAGE_VIEW_TYPE_2D_ARRAY</code>,
<code>subresourceRange</code>::<code>layerCount</code> <strong class="purple">must</strong> be non-zero and
<span class="eq"><code>subresourceRange</code>::<code>baseArrayLayer</code> + 
<code>subresourceRange</code>::<code>layerCount</code></span> <strong class="purple">must</strong> be less than or equal to
the <code>arrayLayers</code> specified in <a href="#VkImageCreateInfo">VkImageCreateInfo</a> when
<code>image</code> was created</p>
</li>
<li>
<p><a id="VUID-VkImageViewCreateInfo-image-01484"></a>
If <code>image</code> is a 3D image created with
<code>VK_IMAGE_CREATE_2D_ARRAY_COMPATIBLE_BIT</code> set, and <code>viewType</code> is
<code>VK_IMAGE_VIEW_TYPE_2D</code> or <code>VK_IMAGE_VIEW_TYPE_2D_ARRAY</code>,
<code>subresourceRange</code>::<code>baseArrayLayer</code> <strong class="purple">must</strong> be less than the
<code>extent.depth</code> specified in <a href="#VkImageCreateInfo">VkImageCreateInfo</a> when <code>image</code>
was created</p>
</li>
<li>
<p><a id="VUID-VkImageViewCreateInfo-subresourceRange-01485"></a>
If <code>subresourceRange</code>::<code>layerCount</code> is not
<code>VK_REMAINING_ARRAY_LAYERS</code>, <code>image</code> is a 3D image created with
<code>VK_IMAGE_CREATE_2D_ARRAY_COMPATIBLE_BIT</code> set, and <code>viewType</code> is
<code>VK_IMAGE_VIEW_TYPE_2D</code> or <code>VK_IMAGE_VIEW_TYPE_2D_ARRAY</code>,
<code>subresourceRange</code>::<code>layerCount</code> <strong class="purple">must</strong> be non-zero and
<span class="eq"><code>subresourceRange</code>::<code>baseArrayLayer</code> + 
<code>subresourceRange</code>::<code>layerCount</code></span> <strong class="purple">must</strong> be less than or equal to
the <code>extent.depth</code> specified in <a href="#VkImageCreateInfo">VkImageCreateInfo</a> when
<code>image</code> was created</p>
</li>
<li>
<p><a id="VUID-VkImageViewCreateInfo-image-01018"></a>
If <code>image</code> was created with the
<code>VK_IMAGE_CREATE_MUTABLE_FORMAT_BIT</code> flag, <code>format</code> <strong class="purple">must</strong> be
compatible with the <code>format</code> used to create <code>image</code>, as defined
in <a href="vkspec.html#formats-compatibility-classes">Format Compatibility Classes</a></p>
</li>
<li>
<p><a id="VUID-VkImageViewCreateInfo-image-01761"></a>
If <code>image</code> was created with the
<code>VK_IMAGE_CREATE_MUTABLE_FORMAT_BIT</code> flag,
but without the <code>VK_IMAGE_CREATE_BLOCK_TEXEL_VIEW_COMPATIBLE_BIT</code>
flag,
and if the <code>format</code> of the <code>image</code> is not a
<a href="vkspec.html#formats-requiring-sampler-ycbcr-conversion">multi-planar</a> format,
<code>format</code> <strong class="purple">must</strong> be compatible with the <code>format</code> used to create
<code>image</code>, as defined in <a href="vkspec.html#formats-compatibility-classes">Format
Compatibility Classes</a></p>
</li>
<li>
<p><a id="VUID-VkImageViewCreateInfo-image-01583"></a>
If <code>image</code> was created with the
<code>VK_IMAGE_CREATE_BLOCK_TEXEL_VIEW_COMPATIBLE_BIT</code> flag, <code>format</code>
<strong class="purple">must</strong> be compatible with, or <strong class="purple">must</strong> be an uncompressed format that is
size-compatible with, the <code>format</code> used to create <code>image</code>.</p>
</li>
<li>
<p><a id="VUID-VkImageViewCreateInfo-image-01584"></a>
If <code>image</code> was created with the
<code>VK_IMAGE_CREATE_BLOCK_TEXEL_VIEW_COMPATIBLE_BIT</code> flag, the
<code>levelCount</code> and <code>layerCount</code> members of <code>subresourceRange</code>
<strong class="purple">must</strong> both be <code>1</code>.</p>
</li>
<li>
<p><a id="VUID-VkImageViewCreateInfo-pNext-01585"></a>
If a <code>VkImageFormatListCreateInfoKHR</code> structure was included in the
<code>pNext</code> chain of the <code>VkImageCreateInfo</code> struct used when
creating <code>image</code> and the <code>viewFormatCount</code> field of
<code>VkImageFormatListCreateInfoKHR</code> is not zero then <code>format</code> <strong class="purple">must</strong>
be one of the formats in
<code>VkImageFormatListCreateInfoKHR</code>::<code>pViewFormats</code>.</p>
</li>
<li>
<p><a id="VUID-VkImageViewCreateInfo-image-01586"></a>
If <code>image</code> was created with the
<code>VK_IMAGE_CREATE_MUTABLE_FORMAT_BIT</code> flag, if the <code>format</code> of
the <code>image</code> is a
<a href="vkspec.html#formats-requiring-sampler-ycbcr-conversion">multi-planar</a> format, and
if <code>subresourceRange.aspectMask</code> is one of
<code>VK_IMAGE_ASPECT_PLANE_0_BIT</code>, <code>VK_IMAGE_ASPECT_PLANE_1_BIT</code>, or
<code>VK_IMAGE_ASPECT_PLANE_2_BIT</code>, then <code>format</code> <strong class="purple">must</strong> be compatible
with the <a href="#VkFormat">VkFormat</a> for the plane of the <code>image</code> <code>format</code>
indicated by <code>subresourceRange.aspectMask</code>, as defined in
<a href="vkspec.html#formats-compatible-planes" class="bare">html/vkspec.html#formats-compatible-planes</a></p>
</li>
<li>
<p><a id="VUID-VkImageViewCreateInfo-image-01762"></a>
If <code>image</code> was not created with the
<code>VK_IMAGE_CREATE_MUTABLE_FORMAT_BIT</code> flag,
or if the <code>format</code> of the <code>image</code> is a
<a href="vkspec.html#formats-requiring-sampler-ycbcr-conversion">multi-planar</a> format and
if <code>subresourceRange.aspectMask</code> is <code>VK_IMAGE_ASPECT_COLOR_BIT</code>,
<code>format</code> <strong class="purple">must</strong> be identical to the <code>format</code> used to create
<code>image</code></p>
</li>
<li>
<p><a id="VUID-VkImageViewCreateInfo-pNext-01970"></a>
If the <code>pNext</code> chain contains an instance of
<a href="#VkSamplerYcbcrConversionInfo">VkSamplerYcbcrConversionInfo</a> with a <code>conversion</code> value other
than <a href="#VK_NULL_HANDLE">VK_NULL_HANDLE</a>, all members of <code>components</code> <strong class="purple">must</strong> have
the value <code>VK_COMPONENT_SWIZZLE_IDENTITY</code>.</p>
</li>
<li>
<p><a id="VUID-VkImageViewCreateInfo-image-01020"></a>
If <code>image</code> is non-sparse then it <strong class="purple">must</strong> be bound completely and
contiguously to a single <code>VkDeviceMemory</code> object</p>
</li>
<li>
<p><a id="VUID-VkImageViewCreateInfo-subResourceRange-01021"></a>
<code>subresourceRange</code> and <code>viewType</code> <strong class="purple">must</strong> be compatible with the
image, as described in the
<a href="vkspec.html#resources-image-views-compatibility">compatibility table</a></p>
</li>
<li>
<p><a id="VUID-VkImageViewCreateInfo-image-02399"></a>
If <code>image</code> has an
<a href="vkspec.html#memory-external-android-hardware-buffer-external-formats">external
format</a>, <code>format</code> <strong class="purple">must</strong> be <code>VK_FORMAT_UNDEFINED</code>.</p>
</li>
<li>
<p><a id="VUID-VkImageViewCreateInfo-image-02400"></a>
If <code>image</code> has an
<a href="vkspec.html#memory-external-android-hardware-buffer-external-formats">external
format</a>, the <code>pNext</code> chain <strong class="purple">must</strong> contain an instance of
<a href="#VkSamplerYcbcrConversionInfo">VkSamplerYcbcrConversionInfo</a> with a <code>conversion</code> object
created with the same external format as <code>image</code>.</p>
</li>
<li>
<p><a id="VUID-VkImageViewCreateInfo-image-02401"></a>
If <code>image</code> has an
<a href="vkspec.html#memory-external-android-hardware-buffer-external-formats">external
format</a>, all members of <code>components</code> <strong class="purple">must</strong> be
<code>VK_COMPONENT_SWIZZLE_IDENTITY</code>.</p>
</li>
<li>
<p><a id="VUID-VkImageViewCreateInfo-image-02086"></a>
If <code>image</code> was created with <code>usage</code> containing
<code>VK_IMAGE_USAGE_SHADING_RATE_IMAGE_BIT_NV</code>, <code>viewType</code> <strong class="purple">must</strong> be
<code>VK_IMAGE_VIEW_TYPE_2D</code> or <code>VK_IMAGE_VIEW_TYPE_2D_ARRAY</code></p>
</li>
<li>
<p><a id="VUID-VkImageViewCreateInfo-image-02087"></a>
If <code>image</code> was created with <code>usage</code> containing
<code>VK_IMAGE_USAGE_SHADING_RATE_IMAGE_BIT_NV</code>, <code>format</code> <strong class="purple">must</strong> be
<code>VK_FORMAT_R8_UINT</code></p>
</li>
<li>
<p><a id="VUID-VkImageViewCreateInfo-flags-02572"></a>
If <a href="vkspec.html#features-fragmentdensitymapdynamic">dynamic fragment density map</a>
feature is not enabled, <code>flags</code> <strong class="purple">must</strong> not contain
<code>VK_IMAGE_VIEW_CREATE_FRAGMENT_DENSITY_MAP_DYNAMIC_BIT_EXT</code></p>
</li>
<li>
<p><a id="VUID-VkImageViewCreateInfo-image-02573"></a>
    If <a href="vkspec.html#features-fragmentdensitymapdynamic">dynamic fragment density map</a>
    feature is not enabled and <code>image</code> was created with <code>usage</code>
    containing <code>VK_IMAGE_USAGE_FRAGMENT_DENSITY_MAP_BIT_EXT</code>,
    <code>flags</code> <strong class="purple">must</strong> not contain any of
    <code>VK_IMAGE_CREATE_PROTECTED_BIT</code>,
    <code>VK_IMAGE_CREATE_SPARSE_BINDING_BIT</code>,
    <code>VK_IMAGE_CREATE_SPARSE_RESIDENCY_BIT</code>, or
    <code>VK_IMAGE_CREATE_SPARSE_ALIASED_BIT</code>
ifdef::VK_VERSION_1_1,VK_KHR_maintenance2</p>
</li>
<li>
<p><a id="VUID-VkImageViewCreateInfo-pNext-02662"></a>
If the <code>pNext</code> chain includes an instance of
<a href="#VkImageViewUsageCreateInfo">VkImageViewUsageCreateInfo</a>, and <code>image</code> was not created with
an instance of <a href="#VkImageStencilUsageCreateInfoEXT">VkImageStencilUsageCreateInfoEXT</a> in the <code>pNext</code>
chain of <a href="#VkImageCreateInfo">VkImageCreateInfo</a>, its <code>usage</code> member <strong class="purple">must</strong> not
include any bits that were not set in the <code>usage</code> member of the
<a href="#VkImageCreateInfo">VkImageCreateInfo</a> structure used to create <code>image</code></p>
</li>
<li>
<p><a id="VUID-VkImageViewCreateInfo-pNext-02663"></a>
If the <code>pNext</code> chain includes an instance of
<a href="#VkImageViewUsageCreateInfo">VkImageViewUsageCreateInfo</a>, <code>image</code> was created with an
instance of <a href="#VkImageStencilUsageCreateInfoEXT">VkImageStencilUsageCreateInfoEXT</a> in the <code>pNext</code>
chain of <a href="#VkImageCreateInfo">VkImageCreateInfo</a>, and <code>subResourceRange.aspectMask</code>
includes <code>VK_IMAGE_ASPECT_STENCIL_BIT</code>, the <code>usage</code> member of
the <a href="#VkImageViewUsageCreateInfo">VkImageViewUsageCreateInfo</a> instance <strong class="purple">must</strong> not include any bits
that were not set in the <code>usage</code> member of the
<a href="#VkImageStencilUsageCreateInfoEXT">VkImageStencilUsageCreateInfoEXT</a> structure used to create
<code>image</code></p>
</li>
<li>
<p><a id="VUID-VkImageViewCreateInfo-pNext-02664"></a>
    If the <code>pNext</code> chain includes an instance of
    <a href="#VkImageViewUsageCreateInfo">VkImageViewUsageCreateInfo</a>, <code>image</code> was created with an
    instance of <a href="#VkImageStencilUsageCreateInfoEXT">VkImageStencilUsageCreateInfoEXT</a> in the <code>pNext</code>
    chain of <a href="#VkImageCreateInfo">VkImageCreateInfo</a>, and <code>subResourceRange.aspectMask</code>
    includes bits other than <code>VK_IMAGE_ASPECT_STENCIL_BIT</code>, the
    <code>usage</code> member of the <a href="#VkImageViewUsageCreateInfo">VkImageViewUsageCreateInfo</a> instance
    <strong class="purple">must</strong> not include any bits that were not set in the <code>usage</code> member
    of the <a href="#VkImageCreateInfo">VkImageCreateInfo</a> structure used to create <code>image</code>
endif::VK_VERSION_1_1,VK_KHR_maintenance2</p>
</li>
</ul>
</div>
</div>
</div>
<div class="sidebarblock">
<div class="content">
<div class="title">Valid Usage (Implicit)</div>
<div class="ulist">
<ul>
<li>
<p><a id="VUID-VkImageViewCreateInfo-sType-sType"></a> <code>sType</code> <strong class="purple">must</strong> be <code>VK_STRUCTURE_TYPE_IMAGE_VIEW_CREATE_INFO</code></p>
</li>
<li>
<p><a id="VUID-VkImageViewCreateInfo-pNext-pNext"></a> Each <code>pNext</code> member of any structure (including this one) in the <code>pNext</code> chain <strong class="purple">must</strong> be either <code>NULL</code> or a pointer to a valid instance of <a href="#VkImageViewASTCDecodeModeEXT">VkImageViewASTCDecodeModeEXT</a>, <a href="#VkImageViewUsageCreateInfo">VkImageViewUsageCreateInfo</a>, or <a href="#VkSamplerYcbcrConversionInfo">VkSamplerYcbcrConversionInfo</a></p>
</li>
<li>
<p><a id="VUID-VkImageViewCreateInfo-sType-unique"></a> Each <code>sType</code> member in the <code>pNext</code> chain <strong class="purple">must</strong> be unique</p>
</li>
<li>
<p><a id="VUID-VkImageViewCreateInfo-flags-parameter"></a> <code>flags</code> <strong class="purple">must</strong> be a valid combination of <a href="#VkImageViewCreateFlagBits">VkImageViewCreateFlagBits</a> values</p>
</li>
<li>
<p><a id="VUID-VkImageViewCreateInfo-image-parameter"></a> <code>image</code> <strong class="purple">must</strong> be a valid <code>VkImage</code> handle</p>
</li>
<li>
<p><a id="VUID-VkImageViewCreateInfo-viewType-parameter"></a> <code>viewType</code> <strong class="purple">must</strong> be a valid <a href="#VkImageViewType">VkImageViewType</a> value</p>
</li>
<li>
<p><a id="VUID-VkImageViewCreateInfo-format-parameter"></a> <code>format</code> <strong class="purple">must</strong> be a valid <a href="#VkFormat">VkFormat</a> value</p>
</li>
<li>
<p><a id="VUID-VkImageViewCreateInfo-components-parameter"></a> <code>components</code> <strong class="purple">must</strong> be a valid <code>VkComponentMapping</code> structure</p>
</li>
<li>
<p><a id="VUID-VkImageViewCreateInfo-subresourceRange-parameter"></a> <code>subresourceRange</code> <strong class="purple">must</strong> be a valid <code>VkImageSubresourceRange</code> structure</p>
</li>
</ul>
</div>
</div>
</div>
</div>
<div class="sect3">
<h4 id="_see_also_541">See Also</h4>
<div class="paragraph">
<p><a href="#VkComponentMapping">VkComponentMapping</a>, <a href="#VkFormat">VkFormat</a>, <a href="#VkImage">VkImage</a>, <a href="#VkImageSubresourceRange">VkImageSubresourceRange</a>, <a href="#VkImageViewCreateFlags">VkImageViewCreateFlags</a>, <a href="#VkImageViewType">VkImageViewType</a>, <a href="#VkStructureType">VkStructureType</a>, <a href="#vkCreateImageView">vkCreateImageView</a></p>
</div>
</div>
<div class="sect3">
<h4 id="_document_notes_541">Document Notes</h4>
<div class="paragraph">
<p>For more information, see the Vulkan Specification at URL</p>
</div>
<div class="paragraph">
<p><a href="https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VkImageViewCreateInfo" class="bare">https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VkImageViewCreateInfo</a></p>
</div>
<div class="paragraph">
<p>This page is extracted from the Vulkan Specification.
Fixes and changes should be made to the Specification, not directly.</p>
</div>
<div style="page-break-after: always;"></div>
</div>
</div>
<div class="sect2">
<h3 id="_vkimageviewhandleinfonvx3">VkImageViewHandleInfoNVX(3)</h3>
<div class="sect3">
<h4 id="_name_542">Name</h4>
<div class="paragraph">
<p>VkImageViewHandleInfoNVX - Structure specifying the image view for handle queries</p>
</div>
</div>
<div class="sect3">
<h4 id="_c_specification_542">C Specification</h4>
<div class="paragraph">
<p>The <code>VkImageViewHandleInfoNVX</code> structure is defined as:</p>
</div>
<div id="VkImageViewHandleInfoNVX" class="listingblock">
<div class="content">
<pre class="highlight"><code class="language-c++" data-lang="c++">typedef struct VkImageViewHandleInfoNVX {
    VkStructureType     sType;
    const void*         pNext;
    VkImageView         imageView;
    VkDescriptorType    descriptorType;
    VkSampler           sampler;
} VkImageViewHandleInfoNVX;</code></pre>
</div>
</div>
</div>
<div class="sect3">
<h4 id="_members_179">Members</h4>
<div class="ulist">
<ul>
<li>
<p><code>sType</code> is the type of this structure.</p>
</li>
<li>
<p><code>pNext</code> is <code>NULL</code> or a pointer to an extension-specific structure.</p>
</li>
<li>
<p><code>imageView</code> is the image view to query.</p>
</li>
<li>
<p><code>descriptorType</code> is the type of descriptor for which to query a
handle.</p>
</li>
<li>
<p><code>sampler</code> is the sampler to combine with the image view when
generating the handle.</p>
</li>
</ul>
</div>
</div>
<div class="sect3">
<h4 id="_description_542">Description</h4>
<div class="sidebarblock">
<div class="content">
<div class="title">Valid Usage</div>
<div class="ulist">
<ul>
<li>
<p><a id="VUID-VkImageViewHandleInfoNVX-descriptorType-02654"></a>
<code>descriptorType</code> <strong class="purple">must</strong> be <code>VK_DESCRIPTOR_TYPE_SAMPLED_IMAGE</code>,
<code>VK_DESCRIPTOR_TYPE_STORAGE_IMAGE</code>, or
<code>VK_DESCRIPTOR_TYPE_COMBINED_IMAGE_SAMPLER</code></p>
</li>
<li>
<p><a id="VUID-VkImageViewHandleInfoNVX-sampler-02655"></a>
<code>sampler</code> <strong class="purple">must</strong> be a valid <a href="#VkSampler">VkSampler</a> if <code>descriptorType</code>
is <code>VK_DESCRIPTOR_TYPE_COMBINED_IMAGE_SAMPLER</code></p>
</li>
<li>
<p><a id="VUID-VkImageViewHandleInfoNVX-imageView-02656"></a>
   If descriptorType is <code>VK_DESCRIPTOR_TYPE_SAMPLED_IMAGE</code> or
   <code>VK_DESCRIPTOR_TYPE_COMBINED_IMAGE_SAMPLER</code>, the image that
   <code>imageView</code> was created from <strong class="purple">must</strong> have been created with the
   <code>VK_IMAGE_USAGE_SAMPLED_BIT</code>
usage bit set</p>
</li>
<li>
<p><a id="VUID-VkImageViewHandleInfoNVX-imageView-02657"></a>
If descriptorType is <code>VK_DESCRIPTOR_TYPE_STORAGE_IMAGE</code>, the image
that <code>imageView</code> was created from <strong class="purple">must</strong> have been created with the
<code>VK_IMAGE_USAGE_STORAGE_BIT</code> usage bit set</p>
</li>
</ul>
</div>
</div>
</div>
<div class="sidebarblock">
<div class="content">
<div class="title">Valid Usage (Implicit)</div>
<div class="ulist">
<ul>
<li>
<p><a id="VUID-VkImageViewHandleInfoNVX-sType-sType"></a> <code>sType</code> <strong class="purple">must</strong> be <code>VK_STRUCTURE_TYPE_IMAGE_VIEW_HANDLE_INFO_NVX</code></p>
</li>
<li>
<p><a id="VUID-VkImageViewHandleInfoNVX-pNext-pNext"></a> <code>pNext</code> <strong class="purple">must</strong> be <code>NULL</code></p>
</li>
<li>
<p><a id="VUID-VkImageViewHandleInfoNVX-imageView-parameter"></a> <code>imageView</code> <strong class="purple">must</strong> be a valid <code>VkImageView</code> handle</p>
</li>
<li>
<p><a id="VUID-VkImageViewHandleInfoNVX-descriptorType-parameter"></a> <code>descriptorType</code> <strong class="purple">must</strong> be a valid <a href="#VkDescriptorType">VkDescriptorType</a> value</p>
</li>
<li>
<p><a id="VUID-VkImageViewHandleInfoNVX-sampler-parameter"></a> If <code>sampler</code> is not <a href="#VK_NULL_HANDLE">VK_NULL_HANDLE</a>, <code>sampler</code> <strong class="purple">must</strong> be a valid <code>VkSampler</code> handle</p>
</li>
<li>
<p><a id="VUID-VkImageViewHandleInfoNVX-commonparent"></a> Both of <code>imageView</code>, and <code>sampler</code> that are valid handles <strong class="purple">must</strong> have been created, allocated, or retrieved from the same <code>VkDevice</code></p>
</li>
</ul>
</div>
</div>
</div>
</div>
<div class="sect3">
<h4 id="_see_also_542">See Also</h4>
<div class="paragraph">
<p><a href="#VkDescriptorType">VkDescriptorType</a>, <a href="#VkImageView">VkImageView</a>, <a href="#VkSampler">VkSampler</a>, <a href="#VkStructureType">VkStructureType</a>, <a href="#vkGetImageViewHandleNVX">vkGetImageViewHandleNVX</a></p>
</div>
</div>
<div class="sect3">
<h4 id="_document_notes_542">Document Notes</h4>
<div class="paragraph">
<p>For more information, see the Vulkan Specification at URL</p>
</div>
<div class="paragraph">
<p><a href="https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VkImageViewHandleInfoNVX" class="bare">https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VkImageViewHandleInfoNVX</a></p>
</div>
<div class="paragraph">
<p>This page is extracted from the Vulkan Specification.
Fixes and changes should be made to the Specification, not directly.</p>
</div>
<div style="page-break-after: always;"></div>
</div>
</div>
<div class="sect2">
<h3 id="_vkimageviewusagecreateinfo3">VkImageViewUsageCreateInfo(3)</h3>
<div class="sect3">
<h4 id="_name_543">Name</h4>
<div class="paragraph">
<p>VkImageViewUsageCreateInfo - Specify the intended usage of an image view</p>
</div>
</div>
<div class="sect3">
<h4 id="_c_specification_543">C Specification</h4>
<div class="paragraph">
<p>The set of usages for the created image view <strong class="purple">can</strong> be restricted compared to
the parent image&#8217;s <code>usage</code> flags by chaining a
<code>VkImageViewUsageCreateInfo</code> structure through the <code>pNext</code> member to
<code>VkImageViewCreateInfo</code>.</p>
</div>
<div class="paragraph">
<p>The <code>VkImageViewUsageCreateInfo</code> structure is defined as:</p>
</div>
<div id="VkImageViewUsageCreateInfo" class="listingblock">
<div class="content">
<pre class="highlight"><code class="language-c++" data-lang="c++">typedef struct VkImageViewUsageCreateInfo {
    VkStructureType      sType;
    const void*          pNext;
    VkImageUsageFlags    usage;
} VkImageViewUsageCreateInfo;</code></pre>
</div>
</div>
<div class="paragraph">
<p>or the equivalent</p>
</div>
<div id="VkImageViewUsageCreateInfoKHR" class="listingblock">
<div class="content">
<pre class="highlight"><code class="language-c++" data-lang="c++">typedef VkImageViewUsageCreateInfo VkImageViewUsageCreateInfoKHR;</code></pre>
</div>
</div>
</div>
<div class="sect3">
<h4 id="_members_180">Members</h4>
<div class="ulist">
<ul>
<li>
<p><code>sType</code> is the type of this structure.</p>
</li>
<li>
<p><code>pNext</code> is <code>NULL</code> or a pointer to an extension-specific structure.</p>
</li>
<li>
<p><code>usage</code> is a bitmask describing the allowed usages of the image
view.
See <a href="#VkImageUsageFlagBits">VkImageUsageFlagBits</a> for a description of the supported bits.</p>
</li>
</ul>
</div>
</div>
<div class="sect3">
<h4 id="_description_543">Description</h4>
<div class="paragraph">
<p>When this structure is chained to <code>VkImageViewCreateInfo</code> the
<code>usage</code> field overrides the implicit <code>usage</code> parameter inherited
from image creation time and its value is used instead for the purposes of
determining the valid usage conditions of <a href="#VkImageViewCreateInfo">VkImageViewCreateInfo</a>.</p>
</div>
<div class="sidebarblock">
<div class="content">
<div class="title">Valid Usage (Implicit)</div>
<div class="ulist">
<ul>
<li>
<p><a id="VUID-VkImageViewUsageCreateInfo-sType-sType"></a> <code>sType</code> <strong class="purple">must</strong> be <code>VK_STRUCTURE_TYPE_IMAGE_VIEW_USAGE_CREATE_INFO</code></p>
</li>
<li>
<p><a id="VUID-VkImageViewUsageCreateInfo-usage-parameter"></a> <code>usage</code> <strong class="purple">must</strong> be a valid combination of <a href="#VkImageUsageFlagBits">VkImageUsageFlagBits</a> values</p>
</li>
<li>
<p><a id="VUID-VkImageViewUsageCreateInfo-usage-requiredbitmask"></a> <code>usage</code> <strong class="purple">must</strong> not be <code>0</code></p>
</li>
</ul>
</div>
</div>
</div>
</div>
<div class="sect3">
<h4 id="_see_also_543">See Also</h4>
<div class="paragraph">
<p><a href="#VkImageUsageFlags">VkImageUsageFlags</a>, <a href="#VkStructureType">VkStructureType</a></p>
</div>
</div>
<div class="sect3">
<h4 id="_document_notes_543">Document Notes</h4>
<div class="paragraph">
<p>For more information, see the Vulkan Specification at URL</p>
</div>
<div class="paragraph">
<p><a href="https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VkImageViewUsageCreateInfo" class="bare">https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VkImageViewUsageCreateInfo</a></p>
</div>
<div class="paragraph">
<p>This page is extracted from the Vulkan Specification.
Fixes and changes should be made to the Specification, not directly.</p>
</div>
<div style="page-break-after: always;"></div>
</div>
</div>
<div class="sect2">
<h3 id="_vkimportandroidhardwarebufferinfoandroid3">VkImportAndroidHardwareBufferInfoANDROID(3)</h3>
<div class="sect3">
<h4 id="_name_544">Name</h4>
<div class="paragraph">
<p>VkImportAndroidHardwareBufferInfoANDROID - Import memory from an Android hardware buffer</p>
</div>
</div>
<div class="sect3">
<h4 id="_c_specification_544">C Specification</h4>
<div class="paragraph">
<p>To import memory created outside of the current Vulkan instance from an
Android hardware buffer, add a
<code>VkImportAndroidHardwareBufferInfoANDROID</code> structure to the <code>pNext</code>
chain of the <a href="#VkMemoryAllocateInfo">VkMemoryAllocateInfo</a> structure.
The <code>VkImportAndroidHardwareBufferInfoANDROID</code> structure is defined as:</p>
</div>
<div id="VkImportAndroidHardwareBufferInfoANDROID" class="listingblock">
<div class="content">
<pre class="highlight"><code class="language-c++" data-lang="c++">typedef struct VkImportAndroidHardwareBufferInfoANDROID {
    VkStructureType            sType;
    const void*                pNext;
    struct AHardwareBuffer*    buffer;
} VkImportAndroidHardwareBufferInfoANDROID;</code></pre>
</div>
</div>
</div>
<div class="sect3">
<h4 id="_members_181">Members</h4>
<div class="ulist">
<ul>
<li>
<p><code>sType</code> is the type of this structure.</p>
</li>
<li>
<p><code>pNext</code> is <code>NULL</code> or a pointer to an extension-specific structure.</p>
</li>
<li>
<p><code>buffer</code> is the Android hardware buffer to import.</p>
</li>
</ul>
</div>
</div>
<div class="sect3">
<h4 id="_description_544">Description</h4>
<div class="paragraph">
<p>If the <a href="#vkAllocateMemory">vkAllocateMemory</a> command succeeds, the implementation <strong class="purple">must</strong>
acquire a reference to the imported hardware buffer, which it <strong class="purple">must</strong> release
when the device memory object is freed.
If the command fails, the implementation <strong class="purple">must</strong> not retain a reference.</p>
</div>
<div class="sidebarblock">
<div class="content">
<div class="title">Valid Usage</div>
<div class="ulist">
<ul>
<li>
<p><a id="VUID-VkImportAndroidHardwareBufferInfoANDROID-buffer-01880"></a>
If <code>buffer</code> is not <code>NULL</code>, Android hardware buffers <strong class="purple">must</strong> be
supported for import, as reported by
<a href="#VkExternalImageFormatProperties">VkExternalImageFormatProperties</a> or
<a href="#VkExternalBufferProperties">VkExternalBufferProperties</a>.</p>
</li>
<li>
<p><a id="VUID-VkImportAndroidHardwareBufferInfoANDROID-buffer-01881"></a>
If <code>buffer</code> is not <code>NULL</code>, it <strong class="purple">must</strong> be a valid Android hardware
buffer object with <code>AHardwareBuffer_Desc</code>::<code>format</code> and
<code>AHardwareBuffer_Desc</code>::<code>usage</code> compatible with Vulkan as
described in <a href="vkspec.html#memory-external-android-hardware-buffer">Android Hardware
Buffers</a>.</p>
</li>
</ul>
</div>
</div>
</div>
<div class="sidebarblock">
<div class="content">
<div class="title">Valid Usage (Implicit)</div>
<div class="ulist">
<ul>
<li>
<p><a id="VUID-VkImportAndroidHardwareBufferInfoANDROID-sType-sType"></a> <code>sType</code> <strong class="purple">must</strong> be <code>VK_STRUCTURE_TYPE_IMPORT_ANDROID_HARDWARE_BUFFER_INFO_ANDROID</code></p>
</li>
<li>
<p><a id="VUID-VkImportAndroidHardwareBufferInfoANDROID-buffer-parameter"></a> <code>buffer</code> <strong class="purple">must</strong> be a valid pointer to a <code>AHardwareBuffer</code> value</p>
</li>
</ul>
</div>
</div>
</div>
</div>
<div class="sect3">
<h4 id="_see_also_544">See Also</h4>
<div class="paragraph">
<p><a href="#VkStructureType">VkStructureType</a></p>
</div>
</div>
<div class="sect3">
<h4 id="_document_notes_544">Document Notes</h4>
<div class="paragraph">
<p>For more information, see the Vulkan Specification at URL</p>
</div>
<div class="paragraph">
<p><a href="https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VkImportAndroidHardwareBufferInfoANDROID" class="bare">https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VkImportAndroidHardwareBufferInfoANDROID</a></p>
</div>
<div class="paragraph">
<p>This page is extracted from the Vulkan Specification.
Fixes and changes should be made to the Specification, not directly.</p>
</div>
<div style="page-break-after: always;"></div>
</div>
</div>
<div class="sect2">
<h3 id="_vkimportfencefdinfokhr3">VkImportFenceFdInfoKHR(3)</h3>
<div class="sect3">
<h4 id="_name_545">Name</h4>
<div class="paragraph">
<p>VkImportFenceFdInfoKHR - (None)</p>
</div>
</div>
<div class="sect3">
<h4 id="_c_specification_545">C Specification</h4>
<div class="paragraph">
<p>The <code>VkImportFenceFdInfoKHR</code> structure is defined as:</p>
</div>
<div id="VkImportFenceFdInfoKHR" class="listingblock">
<div class="content">
<pre class="highlight"><code class="language-c++" data-lang="c++">typedef struct VkImportFenceFdInfoKHR {
    VkStructureType                      sType;
    const void*                          pNext;
    VkFence                              fence;
    VkFenceImportFlags                   flags;
    VkExternalFenceHandleTypeFlagBits    handleType;
    int                                  fd;
} VkImportFenceFdInfoKHR;</code></pre>
</div>
</div>
</div>
<div class="sect3">
<h4 id="_members_182">Members</h4>
<div class="ulist">
<ul>
<li>
<p><code>sType</code> is the type of this structure.</p>
</li>
<li>
<p><code>pNext</code> is <code>NULL</code> or a pointer to an extension-specific structure.</p>
</li>
<li>
<p><code>fence</code> is the fence into which the payload will be imported.</p>
</li>
<li>
<p><code>flags</code> is a bitmask of <a href="#VkFenceImportFlagBits">VkFenceImportFlagBits</a> specifying
additional parameters for the fence payload import operation.</p>
</li>
<li>
<p><code>handleType</code> specifies the type of <code>fd</code>.</p>
</li>
<li>
<p><code>fd</code> is the external handle to import.</p>
</li>
</ul>
</div>
</div>
<div class="sect3">
<h4 id="_description_545">Description</h4>
<div class="paragraph">
<p>The handle types supported by <code>handleType</code> are:</p>
</div>
<table id="synchronization-fence-handletypes-fd" class="tableblock frame-all grid-all" style="width: 80%;">
<caption class="title">Table 8. Handle Types Supported by <a href="#VkImportFenceFdInfoKHR">VkImportFenceFdInfoKHR</a></caption>
<colgroup>
<col style="width: 33.3333%;" />
<col style="width: 33.3333%;" />
<col style="width: 33.3334%;" />
</colgroup>
<thead>
<tr>
<th class="tableblock halign-left valign-top">Handle Type</th>
<th class="tableblock halign-left valign-top">Transference</th>
<th class="tableblock halign-left valign-top">Permanence Supported</th>
</tr>
</thead>
<tbody>
<tr>
<td class="tableblock halign-left valign-top"><p class="tableblock"><code>VK_EXTERNAL_FENCE_HANDLE_TYPE_OPAQUE_FD_BIT</code></p></td>
<td class="tableblock halign-left valign-top"><p class="tableblock">Reference</p></td>
<td class="tableblock halign-left valign-top"><p class="tableblock">Temporary,Permanent</p></td>
</tr>
<tr>
<td class="tableblock halign-left valign-top"><p class="tableblock"><code>VK_EXTERNAL_FENCE_HANDLE_TYPE_SYNC_FD_BIT</code></p></td>
<td class="tableblock halign-left valign-top"><p class="tableblock">Copy</p></td>
<td class="tableblock halign-left valign-top"><p class="tableblock">Temporary</p></td>
</tr>
</tbody>
</table>
<div class="sidebarblock">
<div class="content">
<div class="title">Valid Usage</div>
<div class="ulist">
<ul>
<li>
<p><a id="VUID-VkImportFenceFdInfoKHR-handleType-01464"></a>
<code>handleType</code> <strong class="purple">must</strong> be a value included in the
<a href="vkspec.html#synchronization-fence-handletypes-fd">Handle Types Supported by
VkImportFenceFdInfoKHR</a> table.</p>
</li>
<li>
<p><a id="VUID-VkImportFenceFdInfoKHR-fd-01541"></a>
<code>fd</code> <strong class="purple">must</strong> obey any requirements listed for <code>handleType</code> in
<a href="vkspec.html#external-fence-handle-types-compatibility">external fence handle types
compatibility</a>.</p>
</li>
</ul>
</div>
</div>
</div>
<div class="paragraph">
<p>If <code>handleType</code> is <code>VK_EXTERNAL_FENCE_HANDLE_TYPE_SYNC_FD_BIT</code>, the
special value <code>-1</code> for <code>fd</code> is treated like a valid sync file descriptor
referring to an object that has already signaled.
The import operation will succeed and the <code>VkFence</code> will have a
temporarily imported payload as if a valid file descriptor had been
provided.</p>
</div>
<div class="admonitionblock note">
<table>
<tr>
<td class="icon">
<i class="fa icon-note" title="Note"></i>
</td>
<td class="content">
<div class="title">Note</div>
<div class="paragraph">
<p>This special behavior for importing an invalid sync file descriptor allows
easier interoperability with other system APIs which use the convention that
an invalid sync file descriptor represents work that has already completed
and does not need to be waited for.
It is consistent with the option for implementations to return a <code>-1</code> file
descriptor when exporting a <code>VK_EXTERNAL_FENCE_HANDLE_TYPE_SYNC_FD_BIT</code>
from a <code>VkFence</code> which is signaled.</p>
</div>
</td>
</tr>
</table>
</div>
<div class="sidebarblock">
<div class="content">
<div class="title">Valid Usage (Implicit)</div>
<div class="ulist">
<ul>
<li>
<p><a id="VUID-VkImportFenceFdInfoKHR-sType-sType"></a> <code>sType</code> <strong class="purple">must</strong> be <code>VK_STRUCTURE_TYPE_IMPORT_FENCE_FD_INFO_KHR</code></p>
</li>
<li>
<p><a id="VUID-VkImportFenceFdInfoKHR-pNext-pNext"></a> <code>pNext</code> <strong class="purple">must</strong> be <code>NULL</code></p>
</li>
<li>
<p><a id="VUID-VkImportFenceFdInfoKHR-fence-parameter"></a> <code>fence</code> <strong class="purple">must</strong> be a valid <code>VkFence</code> handle</p>
</li>
<li>
<p><a id="VUID-VkImportFenceFdInfoKHR-flags-parameter"></a> <code>flags</code> <strong class="purple">must</strong> be a valid combination of <a href="#VkFenceImportFlagBits">VkFenceImportFlagBits</a> values</p>
</li>
<li>
<p><a id="VUID-VkImportFenceFdInfoKHR-handleType-parameter"></a> <code>handleType</code> <strong class="purple">must</strong> be a valid <a href="#VkExternalFenceHandleTypeFlagBits">VkExternalFenceHandleTypeFlagBits</a> value</p>
</li>
</ul>
</div>
</div>
</div>
<div class="sidebarblock">
<div class="content">
<div class="title">Host Synchronization</div>
<div class="ulist">
<ul>
<li>
<p>Host access to <code>fence</code> <strong class="purple">must</strong> be externally synchronized</p>
</li>
</ul>
</div>
</div>
</div>
</div>
<div class="sect3">
<h4 id="_see_also_545">See Also</h4>
<div class="paragraph">
<p><a href="#VkExternalFenceHandleTypeFlagBits">VkExternalFenceHandleTypeFlagBits</a>, <a href="#VkFence">VkFence</a>, <a href="#VkFenceImportFlags">VkFenceImportFlags</a>, <a href="#VkStructureType">VkStructureType</a>, <a href="#vkImportFenceFdKHR">vkImportFenceFdKHR</a></p>
</div>
</div>
<div class="sect3">
<h4 id="_document_notes_545">Document Notes</h4>
<div class="paragraph">
<p>For more information, see the Vulkan Specification at URL</p>
</div>
<div class="paragraph">
<p><a href="https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VkImportFenceFdInfoKHR" class="bare">https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VkImportFenceFdInfoKHR</a></p>
</div>
<div class="paragraph">
<p>This page is extracted from the Vulkan Specification.
Fixes and changes should be made to the Specification, not directly.</p>
</div>
<div style="page-break-after: always;"></div>
</div>
</div>
<div class="sect2">
<h3 id="_vkimportfencewin32handleinfokhr3">VkImportFenceWin32HandleInfoKHR(3)</h3>
<div class="sect3">
<h4 id="_name_546">Name</h4>
<div class="paragraph">
<p>VkImportFenceWin32HandleInfoKHR - (None)</p>
</div>
</div>
<div class="sect3">
<h4 id="_c_specification_546">C Specification</h4>
<div class="paragraph">
<p>The <code>VkImportFenceWin32HandleInfoKHR</code> structure is defined as:</p>
</div>
<div id="VkImportFenceWin32HandleInfoKHR" class="listingblock">
<div class="content">
<pre class="highlight"><code class="language-c++" data-lang="c++">typedef struct VkImportFenceWin32HandleInfoKHR {
    VkStructureType                      sType;
    const void*                          pNext;
    VkFence                              fence;
    VkFenceImportFlags                   flags;
    VkExternalFenceHandleTypeFlagBits    handleType;
    HANDLE                               handle;
    LPCWSTR                              name;
} VkImportFenceWin32HandleInfoKHR;</code></pre>
</div>
</div>
</div>
<div class="sect3">
<h4 id="_members_183">Members</h4>
<div class="ulist">
<ul>
<li>
<p><code>sType</code> is the type of this structure.</p>
</li>
<li>
<p><code>pNext</code> is <code>NULL</code> or a pointer to an extension-specific structure.</p>
</li>
<li>
<p><code>fence</code> is the fence into which the state will be imported.</p>
</li>
<li>
<p><code>flags</code> is a bitmask of <a href="#VkFenceImportFlagBits">VkFenceImportFlagBits</a> specifying
additional parameters for the fence payload import operation.</p>
</li>
<li>
<p><code>handleType</code> specifies the type of <code>handle</code>.</p>
</li>
<li>
<p><code>handle</code> is the external handle to import, or <code>NULL</code>.</p>
</li>
<li>
<p><code>name</code> is the NULL-terminated UTF-16 string naming the underlying
synchronization primitive to import, or <code>NULL</code>.</p>
</li>
</ul>
</div>
</div>
<div class="sect3">
<h4 id="_description_546">Description</h4>
<div class="paragraph">
<p>The handle types supported by <code>handleType</code> are:</p>
</div>
<table id="synchronization-fence-handletypes-win32" class="tableblock frame-all grid-all" style="width: 80%;">
<caption class="title">Table 9. Handle Types Supported by <a href="#VkImportFenceWin32HandleInfoKHR">VkImportFenceWin32HandleInfoKHR</a></caption>
<colgroup>
<col style="width: 33.3333%;" />
<col style="width: 33.3333%;" />
<col style="width: 33.3334%;" />
</colgroup>
<thead>
<tr>
<th class="tableblock halign-left valign-top">Handle Type</th>
<th class="tableblock halign-left valign-top">Transference</th>
<th class="tableblock halign-left valign-top">Permanence Supported</th>
</tr>
</thead>
<tbody>
<tr>
<td class="tableblock halign-left valign-top"><p class="tableblock"><code>VK_EXTERNAL_FENCE_HANDLE_TYPE_OPAQUE_WIN32_BIT</code></p></td>
<td class="tableblock halign-left valign-top"><p class="tableblock">Reference</p></td>
<td class="tableblock halign-left valign-top"><p class="tableblock">Temporary,Permanent</p></td>
</tr>
<tr>
<td class="tableblock halign-left valign-top"><p class="tableblock"><code>VK_EXTERNAL_FENCE_HANDLE_TYPE_OPAQUE_WIN32_KMT_BIT</code></p></td>
<td class="tableblock halign-left valign-top"><p class="tableblock">Reference</p></td>
<td class="tableblock halign-left valign-top"><p class="tableblock">Temporary,Permanent</p></td>
</tr>
</tbody>
</table>
<div class="sidebarblock">
<div class="content">
<div class="title">Valid Usage</div>
<div class="ulist">
<ul>
<li>
<p><a id="VUID-VkImportFenceWin32HandleInfoKHR-handleType-01457"></a>
<code>handleType</code> <strong class="purple">must</strong> be a value included in the
<a href="vkspec.html#synchronization-fence-handletypes-win32">Handle Types Supported by
VkImportFenceWin32HandleInfoKHR</a> table.</p>
</li>
<li>
<p><a id="VUID-VkImportFenceWin32HandleInfoKHR-handleType-01459"></a>
If <code>handleType</code> is not
<code>VK_EXTERNAL_FENCE_HANDLE_TYPE_OPAQUE_WIN32_BIT</code>, <code>name</code> <strong class="purple">must</strong>
be <code>NULL</code>.</p>
</li>
<li>
<p><a id="VUID-VkImportFenceWin32HandleInfoKHR-handleType-01460"></a>
If <code>handleType</code> is not <code>0</code> and <code>handle</code> is <code>NULL</code>, <code>name</code>
<strong class="purple">must</strong> name a valid synchronization primitive of the type specified by
<code>handleType</code>.</p>
</li>
<li>
<p><a id="VUID-VkImportFenceWin32HandleInfoKHR-handleType-01461"></a>
If <code>handleType</code> is not <code>0</code> and <code>name</code> is <code>NULL</code>, <code>handle</code>
<strong class="purple">must</strong> be a valid handle of the type specified by <code>handleType</code>.</p>
</li>
<li>
<p><a id="VUID-VkImportFenceWin32HandleInfoKHR-handle-01462"></a>
If <code>handle</code> is not <code>NULL</code>, <code>name</code> must be <code>NULL</code>.</p>
</li>
<li>
<p><a id="VUID-VkImportFenceWin32HandleInfoKHR-handle-01539"></a>
If <code>handle</code> is not <code>NULL</code>, it <strong class="purple">must</strong> obey any requirements listed for
<code>handleType</code> in <a href="vkspec.html#external-fence-handle-types-compatibility">external
fence handle types compatibility</a>.</p>
</li>
<li>
<p><a id="VUID-VkImportFenceWin32HandleInfoKHR-name-01540"></a>
If <code>name</code> is not <code>NULL</code>, it <strong class="purple">must</strong> obey any requirements listed for
<code>handleType</code> in <a href="vkspec.html#external-fence-handle-types-compatibility">external
fence handle types compatibility</a>.</p>
</li>
</ul>
</div>
</div>
</div>
<div class="sidebarblock">
<div class="content">
<div class="title">Valid Usage (Implicit)</div>
<div class="ulist">
<ul>
<li>
<p><a id="VUID-VkImportFenceWin32HandleInfoKHR-sType-sType"></a> <code>sType</code> <strong class="purple">must</strong> be <code>VK_STRUCTURE_TYPE_IMPORT_FENCE_WIN32_HANDLE_INFO_KHR</code></p>
</li>
<li>
<p><a id="VUID-VkImportFenceWin32HandleInfoKHR-pNext-pNext"></a> <code>pNext</code> <strong class="purple">must</strong> be <code>NULL</code></p>
</li>
<li>
<p><a id="VUID-VkImportFenceWin32HandleInfoKHR-fence-parameter"></a> <code>fence</code> <strong class="purple">must</strong> be a valid <code>VkFence</code> handle</p>
</li>
<li>
<p><a id="VUID-VkImportFenceWin32HandleInfoKHR-flags-parameter"></a> <code>flags</code> <strong class="purple">must</strong> be a valid combination of <a href="#VkFenceImportFlagBits">VkFenceImportFlagBits</a> values</p>
</li>
<li>
<p><a id="VUID-VkImportFenceWin32HandleInfoKHR-handleType-parameter"></a> If <code>handleType</code> is not <code>0</code>, <code>handleType</code> <strong class="purple">must</strong> be a valid <a href="#VkExternalFenceHandleTypeFlagBits">VkExternalFenceHandleTypeFlagBits</a> value</p>
</li>
</ul>
</div>
</div>
</div>
<div class="sidebarblock">
<div class="content">
<div class="title">Host Synchronization</div>
<div class="ulist">
<ul>
<li>
<p>Host access to <code>fence</code> <strong class="purple">must</strong> be externally synchronized</p>
</li>
</ul>
</div>
</div>
</div>
</div>
<div class="sect3">
<h4 id="_see_also_546">See Also</h4>
<div class="paragraph">
<p><a href="#VkExternalFenceHandleTypeFlagBits">VkExternalFenceHandleTypeFlagBits</a>, <a href="#VkFence">VkFence</a>, <a href="#VkFenceImportFlags">VkFenceImportFlags</a>, <a href="#VkStructureType">VkStructureType</a>, <a href="#vkImportFenceWin32HandleKHR">vkImportFenceWin32HandleKHR</a></p>
</div>
</div>
<div class="sect3">
<h4 id="_document_notes_546">Document Notes</h4>
<div class="paragraph">
<p>For more information, see the Vulkan Specification at URL</p>
</div>
<div class="paragraph">
<p><a href="https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VkImportFenceWin32HandleInfoKHR" class="bare">https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VkImportFenceWin32HandleInfoKHR</a></p>
</div>
<div class="paragraph">
<p>This page is extracted from the Vulkan Specification.
Fixes and changes should be made to the Specification, not directly.</p>
</div>
<div style="page-break-after: always;"></div>
</div>
</div>
<div class="sect2">
<h3 id="_vkimportmemoryfdinfokhr3">VkImportMemoryFdInfoKHR(3)</h3>
<div class="sect3">
<h4 id="_name_547">Name</h4>
<div class="paragraph">
<p>VkImportMemoryFdInfoKHR - import memory created on the same physical device from a file descriptor</p>
</div>
</div>
<div class="sect3">
<h4 id="_c_specification_547">C Specification</h4>
<div class="paragraph">
<p>To import memory from a POSIX file descriptor handle, add a
<a href="#VkImportMemoryFdInfoKHR">VkImportMemoryFdInfoKHR</a> structure to the <code>pNext</code> chain of the
<a href="#VkMemoryAllocateInfo">VkMemoryAllocateInfo</a> structure.
The <code>VkImportMemoryFdInfoKHR</code> structure is defined as:</p>
</div>
<div id="VkImportMemoryFdInfoKHR" class="listingblock">
<div class="content">
<pre class="highlight"><code class="language-c++" data-lang="c++">typedef struct VkImportMemoryFdInfoKHR {
    VkStructureType                       sType;
    const void*                           pNext;
    VkExternalMemoryHandleTypeFlagBits    handleType;
    int                                   fd;
} VkImportMemoryFdInfoKHR;</code></pre>
</div>
</div>
</div>
<div class="sect3">
<h4 id="_members_184">Members</h4>
<div class="ulist">
<ul>
<li>
<p><code>sType</code> is the type of this structure.</p>
</li>
<li>
<p><code>pNext</code> is <code>NULL</code> or a pointer to an extension-specific structure.</p>
</li>
<li>
<p><code>handleType</code> specifies the handle type of <code>fd</code>.</p>
</li>
<li>
<p><code>fd</code> is the external handle to import.</p>
</li>
</ul>
</div>
</div>
<div class="sect3">
<h4 id="_description_547">Description</h4>
<div class="paragraph">
<p>Importing memory from a file descriptor transfers ownership of the file
descriptor from the application to the Vulkan implementation.
The application <strong class="purple">must</strong> not perform any operations on the file descriptor
after a successful import.</p>
</div>
<div class="paragraph">
<p>Applications <strong class="purple">can</strong> import the same underlying memory into multiple instances
of Vulkan, into the same instance from which it was exported, and multiple
times into a given Vulkan instance.
In all cases, each import operation <strong class="purple">must</strong> create a distinct
<code>VkDeviceMemory</code> object.</p>
</div>
<div class="sidebarblock">
<div class="content">
<div class="title">Valid Usage</div>
<div class="ulist">
<ul>
<li>
<p><a id="VUID-VkImportMemoryFdInfoKHR-handleType-00667"></a>
If <code>handleType</code> is not <code>0</code>, it <strong class="purple">must</strong> be supported for import, as
reported by <a href="#VkExternalImageFormatProperties">VkExternalImageFormatProperties</a> or
<a href="#VkExternalBufferProperties">VkExternalBufferProperties</a>.</p>
</li>
<li>
<p><a id="VUID-VkImportMemoryFdInfoKHR-fd-00668"></a>
The memory from which <code>fd</code> was exported <strong class="purple">must</strong> have been created on
the same underlying physical device as <code>device</code>.</p>
</li>
<li>
<p><a id="VUID-VkImportMemoryFdInfoKHR-handleType-00669"></a>
If <code>handleType</code> is not <code>0</code>, it <strong class="purple">must</strong> be defined as a POSIX file
descriptor handle.</p>
</li>
<li>
<p><a id="VUID-VkImportMemoryFdInfoKHR-handleType-00670"></a>
If <code>handleType</code> is not <code>0</code>, <code>fd</code> <strong class="purple">must</strong> be a valid handle of the
type specified by <code>handleType</code>.</p>
</li>
<li>
<p><a id="VUID-VkImportMemoryFdInfoKHR-fd-01746"></a>
The memory represented by <code>fd</code> <strong class="purple">must</strong> have been created from a
physical device and driver that is compatible with <code>device</code> and
<code>handleType</code>, as described in
<a href="vkspec.html#external-memory-handle-types-compatibility" class="bare">html/vkspec.html#external-memory-handle-types-compatibility</a>.</p>
</li>
<li>
<p><a id="VUID-VkImportMemoryFdInfoKHR-fd-01520"></a>
<code>fd</code> <strong class="purple">must</strong> obey any requirements listed for <code>handleType</code> in
<a href="vkspec.html#external-memory-handle-types-compatibility">external memory handle
types compatibility</a>.</p>
</li>
</ul>
</div>
</div>
</div>
<div class="sidebarblock">
<div class="content">
<div class="title">Valid Usage (Implicit)</div>
<div class="ulist">
<ul>
<li>
<p><a id="VUID-VkImportMemoryFdInfoKHR-sType-sType"></a> <code>sType</code> <strong class="purple">must</strong> be <code>VK_STRUCTURE_TYPE_IMPORT_MEMORY_FD_INFO_KHR</code></p>
</li>
<li>
<p><a id="VUID-VkImportMemoryFdInfoKHR-handleType-parameter"></a> If <code>handleType</code> is not <code>0</code>, <code>handleType</code> <strong class="purple">must</strong> be a valid <a href="#VkExternalMemoryHandleTypeFlagBits">VkExternalMemoryHandleTypeFlagBits</a> value</p>
</li>
</ul>
</div>
</div>
</div>
</div>
<div class="sect3">
<h4 id="_see_also_547">See Also</h4>
<div class="paragraph">
<p><a href="#VkExternalMemoryHandleTypeFlagBits">VkExternalMemoryHandleTypeFlagBits</a>, <a href="#VkStructureType">VkStructureType</a></p>
</div>
</div>
<div class="sect3">
<h4 id="_document_notes_547">Document Notes</h4>
<div class="paragraph">
<p>For more information, see the Vulkan Specification at URL</p>
</div>
<div class="paragraph">
<p><a href="https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VkImportMemoryFdInfoKHR" class="bare">https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VkImportMemoryFdInfoKHR</a></p>
</div>
<div class="paragraph">
<p>This page is extracted from the Vulkan Specification.
Fixes and changes should be made to the Specification, not directly.</p>
</div>
<div style="page-break-after: always;"></div>
</div>
</div>
<div class="sect2">
<h3 id="_vkimportmemoryhostpointerinfoext3">VkImportMemoryHostPointerInfoEXT(3)</h3>
<div class="sect3">
<h4 id="_name_548">Name</h4>
<div class="paragraph">
<p>VkImportMemoryHostPointerInfoEXT - import memory from a host pointer</p>
</div>
</div>
<div class="sect3">
<h4 id="_c_specification_548">C Specification</h4>
<div class="paragraph">
<p>To import memory from a host pointer, add a
<a href="#VkImportMemoryHostPointerInfoEXT">VkImportMemoryHostPointerInfoEXT</a> structure to the <code>pNext</code> chain of
the <a href="#VkMemoryAllocateInfo">VkMemoryAllocateInfo</a> structure.
The <code>VkImportMemoryHostPointerInfoEXT</code> structure is defined as:</p>
</div>
<div id="VkImportMemoryHostPointerInfoEXT" class="listingblock">
<div class="content">
<pre class="highlight"><code class="language-c++" data-lang="c++">typedef struct VkImportMemoryHostPointerInfoEXT {
    VkStructureType                       sType;
    const void*                           pNext;
    VkExternalMemoryHandleTypeFlagBits    handleType;
    void*                                 pHostPointer;
} VkImportMemoryHostPointerInfoEXT;</code></pre>
</div>
</div>
</div>
<div class="sect3">
<h4 id="_members_185">Members</h4>
<div class="ulist">
<ul>
<li>
<p><code>sType</code> is the type of this structure.</p>
</li>
<li>
<p><code>pNext</code> is <code>NULL</code> or a pointer to an extension-specific structure.</p>
</li>
<li>
<p><code>handleType</code> specifies the handle type.</p>
</li>
<li>
<p><code>pHostPointer</code> is the host pointer to import from.</p>
</li>
</ul>
</div>
</div>
<div class="sect3">
<h4 id="_description_548">Description</h4>
<div class="paragraph">
<p>Importing memory from a host pointer shares ownership of the memory between
the host and the Vulkan implementation.
The application <strong class="purple">can</strong> continue to access the memory through the host pointer
but it is the application&#8217;s responsibility to synchronize device and
non-device access to the underlying memory as defined in
<a href="vkspec.html#memory-device-hostaccess">Host Access to Device Memory Objects</a>.</p>
</div>
<div class="paragraph">
<p>Applications <strong class="purple">can</strong> import the same underlying memory into multiple instances
of Vulkan and multiple times into a given Vulkan instance.
However, implementations <strong class="purple">may</strong> fail to import the same underlying memory
multiple times into a given physical device due to platform constraints.</p>
</div>
<div class="paragraph">
<p>Importing memory from a particular host pointer <strong class="purple">may</strong> not be possible due to
additional platform-specific restrictions beyond the scope of this
specification in which case the implementation <strong class="purple">must</strong> fail the memory import
operation with the error code <code>VK_ERROR_INVALID_EXTERNAL_HANDLE_KHR</code>.</p>
</div>
<div class="paragraph">
<p>The application <strong class="purple">must</strong> ensure that the imported memory range remains valid
and accessible for the lifetime of the imported memory object.</p>
</div>
<div class="sidebarblock">
<div class="content">
<div class="title">Valid Usage</div>
<div class="ulist">
<ul>
<li>
<p><a id="VUID-VkImportMemoryHostPointerInfoEXT-handleType-01747"></a>
If <code>handleType</code> is not <code>0</code>, it <strong class="purple">must</strong> be supported for import, as
reported in <a href="#VkExternalMemoryPropertiesKHR">VkExternalMemoryPropertiesKHR</a></p>
</li>
<li>
<p><a id="VUID-VkImportMemoryHostPointerInfoEXT-handleType-01748"></a>
If <code>handleType</code> is not <code>0</code>, it <strong class="purple">must</strong> be
<code>VK_EXTERNAL_MEMORY_HANDLE_TYPE_HOST_ALLOCATION_BIT_EXT</code> or
<code>VK_EXTERNAL_MEMORY_HANDLE_TYPE_HOST_MAPPED_FOREIGN_MEMORY_BIT_EXT</code></p>
</li>
<li>
<p><a id="VUID-VkImportMemoryHostPointerInfoEXT-pHostPointer-01749"></a>
<code>pHostPointer</code> <strong class="purple">must</strong> be a pointer aligned to an integer multiple of
<code>VkPhysicalDeviceExternalMemoryHostPropertiesEXT</code>::<code>minImportedHostPointerAlignment</code></p>
</li>
<li>
<p><a id="VUID-VkImportMemoryHostPointerInfoEXT-handleType-01750"></a>
If <code>handleType</code> is
<code>VK_EXTERNAL_MEMORY_HANDLE_TYPE_HOST_ALLOCATION_BIT_EXT</code>,
<code>pHostPointer</code> <strong class="purple">must</strong> be a pointer to <code>allocationSize</code> number of
bytes of host memory, where <code>allocationSize</code> is the member of the
<code>VkMemoryAllocateInfo</code> structure this structure is chained to</p>
</li>
<li>
<p><a id="VUID-VkImportMemoryHostPointerInfoEXT-handleType-01751"></a>
If <code>handleType</code> is
<code>VK_EXTERNAL_MEMORY_HANDLE_TYPE_HOST_MAPPED_FOREIGN_MEMORY_BIT_EXT</code>,
<code>pHostPointer</code> <strong class="purple">must</strong> be a pointer to <code>allocationSize</code> number of
bytes of host mapped foreign memory, where <code>allocationSize</code> is the
member of the <code>VkMemoryAllocateInfo</code> structure this structure is
chained to</p>
</li>
</ul>
</div>
</div>
</div>
<div class="sidebarblock">
<div class="content">
<div class="title">Valid Usage (Implicit)</div>
<div class="ulist">
<ul>
<li>
<p><a id="VUID-VkImportMemoryHostPointerInfoEXT-sType-sType"></a> <code>sType</code> <strong class="purple">must</strong> be <code>VK_STRUCTURE_TYPE_IMPORT_MEMORY_HOST_POINTER_INFO_EXT</code></p>
</li>
<li>
<p><a id="VUID-VkImportMemoryHostPointerInfoEXT-handleType-parameter"></a> <code>handleType</code> <strong class="purple">must</strong> be a valid <a href="#VkExternalMemoryHandleTypeFlagBits">VkExternalMemoryHandleTypeFlagBits</a> value</p>
</li>
</ul>
</div>
</div>
</div>
</div>
<div class="sect3">
<h4 id="_see_also_548">See Also</h4>
<div class="paragraph">
<p><a href="#VkExternalMemoryHandleTypeFlagBits">VkExternalMemoryHandleTypeFlagBits</a>, <a href="#VkStructureType">VkStructureType</a></p>
</div>
</div>
<div class="sect3">
<h4 id="_document_notes_548">Document Notes</h4>
<div class="paragraph">
<p>For more information, see the Vulkan Specification at URL</p>
</div>
<div class="paragraph">
<p><a href="https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VkImportMemoryHostPointerInfoEXT" class="bare">https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VkImportMemoryHostPointerInfoEXT</a></p>
</div>
<div class="paragraph">
<p>This page is extracted from the Vulkan Specification.
Fixes and changes should be made to the Specification, not directly.</p>
</div>
<div style="page-break-after: always;"></div>
</div>
</div>
<div class="sect2">
<h3 id="_vkimportmemorywin32handleinfokhr3">VkImportMemoryWin32HandleInfoKHR(3)</h3>
<div class="sect3">
<h4 id="_name_549">Name</h4>
<div class="paragraph">
<p>VkImportMemoryWin32HandleInfoKHR - import Win32 memory created on the same physical device</p>
</div>
</div>
<div class="sect3">
<h4 id="_c_specification_549">C Specification</h4>
<div class="paragraph">
<p>To import memory from a Windows handle, add a
<a href="#VkImportMemoryWin32HandleInfoKHR">VkImportMemoryWin32HandleInfoKHR</a> structure to the <code>pNext</code> chain of
the <a href="#VkMemoryAllocateInfo">VkMemoryAllocateInfo</a> structure.</p>
</div>
<div class="paragraph">
<p>The <code>VkImportMemoryWin32HandleInfoKHR</code> structure is defined as:</p>
</div>
<div id="VkImportMemoryWin32HandleInfoKHR" class="listingblock">
<div class="content">
<pre class="highlight"><code class="language-c++" data-lang="c++">typedef struct VkImportMemoryWin32HandleInfoKHR {
    VkStructureType                       sType;
    const void*                           pNext;
    VkExternalMemoryHandleTypeFlagBits    handleType;
    HANDLE                                handle;
    LPCWSTR                               name;
} VkImportMemoryWin32HandleInfoKHR;</code></pre>
</div>
</div>
</div>
<div class="sect3">
<h4 id="_members_186">Members</h4>
<div class="ulist">
<ul>
<li>
<p><code>sType</code> is the type of this structure.</p>
</li>
<li>
<p><code>pNext</code> is <code>NULL</code> or a pointer to an extension-specific structure.</p>
</li>
<li>
<p><code>handleType</code> specifies the type of <code>handle</code> or <code>name</code>.</p>
</li>
<li>
<p><code>handle</code> is the external handle to import, or <code>NULL</code>.</p>
</li>
<li>
<p><code>name</code> is a NULL-terminated UTF-16 string naming the underlying
memory resource to import, or <code>NULL</code>.</p>
</li>
</ul>
</div>
</div>
<div class="sect3">
<h4 id="_description_549">Description</h4>
<div class="paragraph">
<p>Importing memory objects from Windows handles does not transfer ownership of
the handle to the Vulkan implementation.
For handle types defined as NT handles, the application <strong class="purple">must</strong> release
ownership using the <code>CloseHandle</code> system call when the handle is no
longer needed.</p>
</div>
<div class="paragraph">
<p>Applications <strong class="purple">can</strong> import the same underlying memory into multiple instances
of Vulkan, into the same instance from which it was exported, and multiple
times into a given Vulkan instance.
In all cases, each import operation <strong class="purple">must</strong> create a distinct
<code>VkDeviceMemory</code> object.</p>
</div>
<div class="sidebarblock">
<div class="content">
<div class="title">Valid Usage</div>
<div class="ulist">
<ul>
<li>
<p><a id="VUID-VkImportMemoryWin32HandleInfoKHR-handleType-00658"></a>
If <code>handleType</code> is not <code>0</code>, it <strong class="purple">must</strong> be supported for import, as
reported by <a href="#VkExternalImageFormatProperties">VkExternalImageFormatProperties</a> or
<a href="#VkExternalBufferProperties">VkExternalBufferProperties</a>.</p>
</li>
<li>
<p><a id="VUID-VkImportMemoryWin32HandleInfoKHR-handle-00659"></a>
The memory from which <code>handle</code> was exported, or the memory named by
<code>name</code> <strong class="purple">must</strong> have been created on the same underlying physical
device as <code>device</code>.</p>
</li>
<li>
<p><a id="VUID-VkImportMemoryWin32HandleInfoKHR-handleType-00660"></a>
If <code>handleType</code> is not <code>0</code>, it <strong class="purple">must</strong> be defined as an NT handle or a
global share handle.</p>
</li>
<li>
<p><a id="VUID-VkImportMemoryWin32HandleInfoKHR-handleType-01439"></a>
If <code>handleType</code> is not
<code>VK_EXTERNAL_MEMORY_HANDLE_TYPE_OPAQUE_WIN32_BIT</code>,
<code>VK_EXTERNAL_MEMORY_HANDLE_TYPE_D3D11_TEXTURE_BIT</code>,
<code>VK_EXTERNAL_MEMORY_HANDLE_TYPE_D3D12_HEAP_BIT</code>, or
<code>VK_EXTERNAL_MEMORY_HANDLE_TYPE_D3D12_RESOURCE_BIT</code>, <code>name</code>
<strong class="purple">must</strong> be <code>NULL</code>.</p>
</li>
<li>
<p><a id="VUID-VkImportMemoryWin32HandleInfoKHR-handleType-01440"></a>
If <code>handleType</code> is not <code>0</code> and <code>handle</code> is <code>NULL</code>, <code>name</code>
<strong class="purple">must</strong> name a valid memory resource of the type specified by
<code>handleType</code>.</p>
</li>
<li>
<p><a id="VUID-VkImportMemoryWin32HandleInfoKHR-handleType-00661"></a>
If <code>handleType</code> is not <code>0</code> and <code>name</code> is <code>NULL</code>, <code>handle</code>
<strong class="purple">must</strong> be a valid handle of the type specified by <code>handleType</code>.</p>
</li>
<li>
<p><a id="VUID-VkImportMemoryWin32HandleInfoKHR-handle-01441"></a>
if <code>handle</code> is not <code>NULL</code>, <code>name</code> must be <code>NULL</code>.</p>
</li>
<li>
<p><a id="VUID-VkImportMemoryWin32HandleInfoKHR-handle-01518"></a>
If <code>handle</code> is not <code>NULL</code>, it <strong class="purple">must</strong> obey any requirements listed for
<code>handleType</code> in
<a href="vkspec.html#external-memory-handle-types-compatibility">external memory handle
types compatibility</a>.</p>
</li>
<li>
<p><a id="VUID-VkImportMemoryWin32HandleInfoKHR-name-01519"></a>
If <code>name</code> is not <code>NULL</code>, it <strong class="purple">must</strong> obey any requirements listed for
<code>handleType</code> in
<a href="vkspec.html#external-memory-handle-types-compatibility">external memory handle
types compatibility</a>.</p>
</li>
</ul>
</div>
</div>
</div>
<div class="sidebarblock">
<div class="content">
<div class="title">Valid Usage (Implicit)</div>
<div class="ulist">
<ul>
<li>
<p><a id="VUID-VkImportMemoryWin32HandleInfoKHR-sType-sType"></a> <code>sType</code> <strong class="purple">must</strong> be <code>VK_STRUCTURE_TYPE_IMPORT_MEMORY_WIN32_HANDLE_INFO_KHR</code></p>
</li>
<li>
<p><a id="VUID-VkImportMemoryWin32HandleInfoKHR-handleType-parameter"></a> If <code>handleType</code> is not <code>0</code>, <code>handleType</code> <strong class="purple">must</strong> be a valid <a href="#VkExternalMemoryHandleTypeFlagBits">VkExternalMemoryHandleTypeFlagBits</a> value</p>
</li>
</ul>
</div>
</div>
</div>
</div>
<div class="sect3">
<h4 id="_see_also_549">See Also</h4>
<div class="paragraph">
<p><a href="#VkExternalMemoryHandleTypeFlagBits">VkExternalMemoryHandleTypeFlagBits</a>, <a href="#VkStructureType">VkStructureType</a></p>
</div>
</div>
<div class="sect3">
<h4 id="_document_notes_549">Document Notes</h4>
<div class="paragraph">
<p>For more information, see the Vulkan Specification at URL</p>
</div>
<div class="paragraph">
<p><a href="https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VkImportMemoryWin32HandleInfoKHR" class="bare">https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VkImportMemoryWin32HandleInfoKHR</a></p>
</div>
<div class="paragraph">
<p>This page is extracted from the Vulkan Specification.
Fixes and changes should be made to the Specification, not directly.</p>
</div>
<div style="page-break-after: always;"></div>
</div>
</div>
<div class="sect2">
<h3 id="_vkimportmemorywin32handleinfonv3">VkImportMemoryWin32HandleInfoNV(3)</h3>
<div class="sect3">
<h4 id="_name_550">Name</h4>
<div class="paragraph">
<p>VkImportMemoryWin32HandleInfoNV - import Win32 memory created on the same physical device</p>
</div>
</div>
<div class="sect3">
<h4 id="_c_specification_550">C Specification</h4>
<div class="paragraph">
<p>To import memory created on the same physical device but outside of the
current Vulkan instance, add a <a href="#VkImportMemoryWin32HandleInfoNV">VkImportMemoryWin32HandleInfoNV</a>
structure to the <code>pNext</code> chain of the <a href="#VkMemoryAllocateInfo">VkMemoryAllocateInfo</a>
structure, specifying a handle to and the type of the memory.</p>
</div>
<div class="paragraph">
<p>The <code>VkImportMemoryWin32HandleInfoNV</code> structure is defined as:</p>
</div>
<div id="VkImportMemoryWin32HandleInfoNV" class="listingblock">
<div class="content">
<pre class="highlight"><code class="language-c++" data-lang="c++">typedef struct VkImportMemoryWin32HandleInfoNV {
    VkStructureType                      sType;
    const void*                          pNext;
    VkExternalMemoryHandleTypeFlagsNV    handleType;
    HANDLE                               handle;
} VkImportMemoryWin32HandleInfoNV;</code></pre>
</div>
</div>
</div>
<div class="sect3">
<h4 id="_members_187">Members</h4>
<div class="ulist">
<ul>
<li>
<p><code>sType</code> is the type of this structure.</p>
</li>
<li>
<p><code>pNext</code> is <code>NULL</code> or a pointer to an extension-specific structure.</p>
</li>
<li>
<p><code>handleType</code> is <code>0</code> or a <a href="#VkExternalMemoryHandleTypeFlagBitsNV">VkExternalMemoryHandleTypeFlagBitsNV</a>
value specifying the type of memory handle in <code>handle</code>.</p>
</li>
<li>
<p><code>handle</code> is a Windows <code>HANDLE</code> referring to the memory.</p>
</li>
</ul>
</div>
</div>
<div class="sect3">
<h4 id="_description_550">Description</h4>
<div class="paragraph">
<p>If <code>handleType</code> is <code>0</code>, this structure is ignored by consumers of the
<a href="#VkMemoryAllocateInfo">VkMemoryAllocateInfo</a> structure it is chained from.</p>
</div>
<div class="sidebarblock">
<div class="content">
<div class="title">Valid Usage</div>
<div class="ulist">
<ul>
<li>
<p><a id="VUID-VkImportMemoryWin32HandleInfoNV-handleType-01327"></a>
<code>handleType</code> <strong class="purple">must</strong> not have more than one bit set.</p>
</li>
<li>
<p><a id="VUID-VkImportMemoryWin32HandleInfoNV-handle-01328"></a>
<code>handle</code> <strong class="purple">must</strong> be a valid handle to memory, obtained as specified by
<code>handleType</code>.</p>
</li>
</ul>
</div>
</div>
</div>
<div class="sidebarblock">
<div class="content">
<div class="title">Valid Usage (Implicit)</div>
<div class="ulist">
<ul>
<li>
<p><a id="VUID-VkImportMemoryWin32HandleInfoNV-sType-sType"></a> <code>sType</code> <strong class="purple">must</strong> be <code>VK_STRUCTURE_TYPE_IMPORT_MEMORY_WIN32_HANDLE_INFO_NV</code></p>
</li>
<li>
<p><a id="VUID-VkImportMemoryWin32HandleInfoNV-handleType-parameter"></a> <code>handleType</code> <strong class="purple">must</strong> be a valid combination of <a href="#VkExternalMemoryHandleTypeFlagBitsNV">VkExternalMemoryHandleTypeFlagBitsNV</a> values</p>
</li>
</ul>
</div>
</div>
</div>
</div>
<div class="sect3">
<h4 id="_see_also_550">See Also</h4>
<div class="paragraph">
<p><a href="#VkExternalMemoryHandleTypeFlagsNV">VkExternalMemoryHandleTypeFlagsNV</a>, <a href="#VkStructureType">VkStructureType</a></p>
</div>
</div>
<div class="sect3">
<h4 id="_document_notes_550">Document Notes</h4>
<div class="paragraph">
<p>For more information, see the Vulkan Specification at URL</p>
</div>
<div class="paragraph">
<p><a href="https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VkImportMemoryWin32HandleInfoNV" class="bare">https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VkImportMemoryWin32HandleInfoNV</a></p>
</div>
<div class="paragraph">
<p>This page is extracted from the Vulkan Specification.
Fixes and changes should be made to the Specification, not directly.</p>
</div>
<div style="page-break-after: always;"></div>
</div>
</div>
<div class="sect2">
<h3 id="_vkimportsemaphorefdinfokhr3">VkImportSemaphoreFdInfoKHR(3)</h3>
<div class="sect3">
<h4 id="_name_551">Name</h4>
<div class="paragraph">
<p>VkImportSemaphoreFdInfoKHR - Structure specifying POSIX file descriptor to import to a semaphore</p>
</div>
</div>
<div class="sect3">
<h4 id="_c_specification_551">C Specification</h4>
<div class="paragraph">
<p>The <code>VkImportSemaphoreFdInfoKHR</code> structure is defined as:</p>
</div>
<div id="VkImportSemaphoreFdInfoKHR" class="listingblock">
<div class="content">
<pre class="highlight"><code class="language-c++" data-lang="c++">typedef struct VkImportSemaphoreFdInfoKHR {
    VkStructureType                          sType;
    const void*                              pNext;
    VkSemaphore                              semaphore;
    VkSemaphoreImportFlags                   flags;
    VkExternalSemaphoreHandleTypeFlagBits    handleType;
    int                                      fd;
} VkImportSemaphoreFdInfoKHR;</code></pre>
</div>
</div>
</div>
<div class="sect3">
<h4 id="_members_188">Members</h4>
<div class="ulist">
<ul>
<li>
<p><code>sType</code> is the type of this structure.</p>
</li>
<li>
<p><code>pNext</code> is <code>NULL</code> or a pointer to an extension-specific structure.</p>
</li>
<li>
<p><code>semaphore</code> is the semaphore into which the payload will be
imported.</p>
</li>
<li>
<p><code>flags</code> is a bitmask of <a href="#VkSemaphoreImportFlagBits">VkSemaphoreImportFlagBits</a> specifying
additional parameters for the semaphore payload import operation.</p>
</li>
<li>
<p><code>handleType</code> specifies the type of <code>fd</code>.</p>
</li>
<li>
<p><code>fd</code> is the external handle to import.</p>
</li>
</ul>
</div>
</div>
<div class="sect3">
<h4 id="_description_551">Description</h4>
<div class="paragraph">
<p>The handle types supported by <code>handleType</code> are:</p>
</div>
<table id="synchronization-semaphore-handletypes-fd" class="tableblock frame-all grid-all" style="width: 80%;">
<caption class="title">Table 10. Handle Types Supported by <a href="#VkImportSemaphoreFdInfoKHR">VkImportSemaphoreFdInfoKHR</a></caption>
<colgroup>
<col style="width: 33.3333%;" />
<col style="width: 33.3333%;" />
<col style="width: 33.3334%;" />
</colgroup>
<thead>
<tr>
<th class="tableblock halign-left valign-top">Handle Type</th>
<th class="tableblock halign-left valign-top">Transference</th>
<th class="tableblock halign-left valign-top">Permanence Supported</th>
</tr>
</thead>
<tbody>
<tr>
<td class="tableblock halign-left valign-top"><p class="tableblock"><code>VK_EXTERNAL_SEMAPHORE_HANDLE_TYPE_OPAQUE_FD_BIT</code></p></td>
<td class="tableblock halign-left valign-top"><p class="tableblock">Reference</p></td>
<td class="tableblock halign-left valign-top"><p class="tableblock">Temporary,Permanent</p></td>
</tr>
<tr>
<td class="tableblock halign-left valign-top"><p class="tableblock"><code>VK_EXTERNAL_SEMAPHORE_HANDLE_TYPE_SYNC_FD_BIT</code></p></td>
<td class="tableblock halign-left valign-top"><p class="tableblock">Copy</p></td>
<td class="tableblock halign-left valign-top"><p class="tableblock">Temporary</p></td>
</tr>
</tbody>
</table>
<div class="sidebarblock">
<div class="content">
<div class="title">Valid Usage</div>
<div class="ulist">
<ul>
<li>
<p><a id="VUID-VkImportSemaphoreFdInfoKHR-handleType-01143"></a>
<code>handleType</code> <strong class="purple">must</strong> be a value included in the
<a href="vkspec.html#synchronization-semaphore-handletypes-fd">Handle Types Supported by
VkImportSemaphoreFdInfoKHR</a> table.</p>
</li>
<li>
<p><a id="VUID-VkImportSemaphoreFdInfoKHR-fd-01544"></a>
<code>fd</code> <strong class="purple">must</strong> obey any requirements listed for <code>handleType</code> in
<a href="vkspec.html#external-semaphore-handle-types-compatibility">external semaphore
handle types compatibility</a>.</p>
</li>
</ul>
</div>
</div>
</div>
<div class="sidebarblock">
<div class="content">
<div class="title">Valid Usage (Implicit)</div>
<div class="ulist">
<ul>
<li>
<p><a id="VUID-VkImportSemaphoreFdInfoKHR-sType-sType"></a> <code>sType</code> <strong class="purple">must</strong> be <code>VK_STRUCTURE_TYPE_IMPORT_SEMAPHORE_FD_INFO_KHR</code></p>
</li>
<li>
<p><a id="VUID-VkImportSemaphoreFdInfoKHR-pNext-pNext"></a> <code>pNext</code> <strong class="purple">must</strong> be <code>NULL</code></p>
</li>
<li>
<p><a id="VUID-VkImportSemaphoreFdInfoKHR-semaphore-parameter"></a> <code>semaphore</code> <strong class="purple">must</strong> be a valid <code>VkSemaphore</code> handle</p>
</li>
<li>
<p><a id="VUID-VkImportSemaphoreFdInfoKHR-flags-parameter"></a> <code>flags</code> <strong class="purple">must</strong> be a valid combination of <a href="#VkSemaphoreImportFlagBits">VkSemaphoreImportFlagBits</a> values</p>
</li>
<li>
<p><a id="VUID-VkImportSemaphoreFdInfoKHR-handleType-parameter"></a> <code>handleType</code> <strong class="purple">must</strong> be a valid <a href="#VkExternalSemaphoreHandleTypeFlagBits">VkExternalSemaphoreHandleTypeFlagBits</a> value</p>
</li>
</ul>
</div>
</div>
</div>
<div class="sidebarblock">
<div class="content">
<div class="title">Host Synchronization</div>
<div class="ulist">
<ul>
<li>
<p>Host access to <code>semaphore</code> <strong class="purple">must</strong> be externally synchronized</p>
</li>
</ul>
</div>
</div>
</div>
</div>
<div class="sect3">
<h4 id="_see_also_551">See Also</h4>
<div class="paragraph">
<p><a href="#VkExternalSemaphoreHandleTypeFlagBits">VkExternalSemaphoreHandleTypeFlagBits</a>, <a href="#VkSemaphore">VkSemaphore</a>, <a href="#VkSemaphoreImportFlags">VkSemaphoreImportFlags</a>, <a href="#VkStructureType">VkStructureType</a>, <a href="#vkImportSemaphoreFdKHR">vkImportSemaphoreFdKHR</a></p>
</div>
</div>
<div class="sect3">
<h4 id="_document_notes_551">Document Notes</h4>
<div class="paragraph">
<p>For more information, see the Vulkan Specification at URL</p>
</div>
<div class="paragraph">
<p><a href="https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VkImportSemaphoreFdInfoKHR" class="bare">https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VkImportSemaphoreFdInfoKHR</a></p>
</div>
<div class="paragraph">
<p>This page is extracted from the Vulkan Specification.
Fixes and changes should be made to the Specification, not directly.</p>
</div>
<div style="page-break-after: always;"></div>
</div>
</div>
<div class="sect2">
<h3 id="_vkimportsemaphorewin32handleinfokhr3">VkImportSemaphoreWin32HandleInfoKHR(3)</h3>
<div class="sect3">
<h4 id="_name_552">Name</h4>
<div class="paragraph">
<p>VkImportSemaphoreWin32HandleInfoKHR - Structure specifying Windows handle to import to a semaphore</p>
</div>
</div>
<div class="sect3">
<h4 id="_c_specification_552">C Specification</h4>
<div class="paragraph">
<p>The <code>VkImportSemaphoreWin32HandleInfoKHR</code> structure is defined as:</p>
</div>
<div id="VkImportSemaphoreWin32HandleInfoKHR" class="listingblock">
<div class="content">
<pre class="highlight"><code class="language-c++" data-lang="c++">typedef struct VkImportSemaphoreWin32HandleInfoKHR {
    VkStructureType                          sType;
    const void*                              pNext;
    VkSemaphore                              semaphore;
    VkSemaphoreImportFlags                   flags;
    VkExternalSemaphoreHandleTypeFlagBits    handleType;
    HANDLE                                   handle;
    LPCWSTR                                  name;
} VkImportSemaphoreWin32HandleInfoKHR;</code></pre>
</div>
</div>
</div>
<div class="sect3">
<h4 id="_members_189">Members</h4>
<div class="ulist">
<ul>
<li>
<p><code>sType</code> is the type of this structure.</p>
</li>
<li>
<p><code>pNext</code> is <code>NULL</code> or a pointer to an extension-specific structure.</p>
</li>
<li>
<p><code>semaphore</code> is the semaphore into which the payload will be
imported.</p>
</li>
<li>
<p><code>flags</code> is a bitmask of <a href="#VkSemaphoreImportFlagBits">VkSemaphoreImportFlagBits</a> specifying
additional parameters for the semaphore payload import operation.</p>
</li>
<li>
<p><code>handleType</code> specifies the type of <code>handle</code>.</p>
</li>
<li>
<p><code>handle</code> is the external handle to import, or <code>NULL</code>.</p>
</li>
<li>
<p><code>name</code> is a NULL-terminated UTF-16 string naming the underlying
synchronization primitive to import, or <code>NULL</code>.</p>
</li>
</ul>
</div>
</div>
<div class="sect3">
<h4 id="_description_552">Description</h4>
<div class="paragraph">
<p>The handle types supported by <code>handleType</code> are:</p>
</div>
<table id="synchronization-semaphore-handletypes-win32" class="tableblock frame-all grid-all" style="width: 80%;">
<caption class="title">Table 11. Handle Types Supported by <a href="#VkImportSemaphoreWin32HandleInfoKHR">VkImportSemaphoreWin32HandleInfoKHR</a></caption>
<colgroup>
<col style="width: 33.3333%;" />
<col style="width: 33.3333%;" />
<col style="width: 33.3334%;" />
</colgroup>
<thead>
<tr>
<th class="tableblock halign-left valign-top">Handle Type</th>
<th class="tableblock halign-left valign-top">Transference</th>
<th class="tableblock halign-left valign-top">Permanence Supported</th>
</tr>
</thead>
<tbody>
<tr>
<td class="tableblock halign-left valign-top"><p class="tableblock"><code>VK_EXTERNAL_SEMAPHORE_HANDLE_TYPE_OPAQUE_WIN32_BIT</code></p></td>
<td class="tableblock halign-left valign-top"><p class="tableblock">Reference</p></td>
<td class="tableblock halign-left valign-top"><p class="tableblock">Temporary,Permanent</p></td>
</tr>
<tr>
<td class="tableblock halign-left valign-top"><p class="tableblock"><code>VK_EXTERNAL_SEMAPHORE_HANDLE_TYPE_OPAQUE_WIN32_KMT_BIT</code></p></td>
<td class="tableblock halign-left valign-top"><p class="tableblock">Reference</p></td>
<td class="tableblock halign-left valign-top"><p class="tableblock">Temporary,Permanent</p></td>
</tr>
<tr>
<td class="tableblock halign-left valign-top"><p class="tableblock"><code>VK_EXTERNAL_SEMAPHORE_HANDLE_TYPE_D3D12_FENCE_BIT</code></p></td>
<td class="tableblock halign-left valign-top"><p class="tableblock">Reference</p></td>
<td class="tableblock halign-left valign-top"><p class="tableblock">Temporary,Permanent</p></td>
</tr>
</tbody>
</table>
<div class="sidebarblock">
<div class="content">
<div class="title">Valid Usage</div>
<div class="ulist">
<ul>
<li>
<p><a id="VUID-VkImportSemaphoreWin32HandleInfoKHR-handleType-01140"></a>
<code>handleType</code> <strong class="purple">must</strong> be a value included in the
<a href="vkspec.html#synchronization-semaphore-handletypes-win32">Handle Types Supported by
VkImportSemaphoreWin32HandleInfoKHR</a> table.</p>
</li>
<li>
<p><a id="VUID-VkImportSemaphoreWin32HandleInfoKHR-handleType-01466"></a>
If <code>handleType</code> is not
<code>VK_EXTERNAL_SEMAPHORE_HANDLE_TYPE_OPAQUE_WIN32_BIT</code> or
<code>VK_EXTERNAL_SEMAPHORE_HANDLE_TYPE_D3D12_FENCE_BIT</code>, <code>name</code>
<strong class="purple">must</strong> be <code>NULL</code>.</p>
</li>
<li>
<p><a id="VUID-VkImportSemaphoreWin32HandleInfoKHR-handleType-01467"></a>
If <code>handleType</code> is not <code>0</code> and <code>handle</code> is <code>NULL</code>, <code>name</code>
<strong class="purple">must</strong> name a valid synchronization primitive of the type specified by
<code>handleType</code>.</p>
</li>
<li>
<p><a id="VUID-VkImportSemaphoreWin32HandleInfoKHR-handleType-01468"></a>
If <code>handleType</code> is not <code>0</code> and <code>name</code> is <code>NULL</code>, <code>handle</code>
<strong class="purple">must</strong> be a valid handle of the type specified by <code>handleType</code>.</p>
</li>
<li>
<p><a id="VUID-VkImportSemaphoreWin32HandleInfoKHR-handle-01469"></a>
If <code>handle</code> is not <code>NULL</code>, <code>name</code> must be <code>NULL</code>.</p>
</li>
<li>
<p><a id="VUID-VkImportSemaphoreWin32HandleInfoKHR-handle-01542"></a>
If <code>handle</code> is not <code>NULL</code>, it <strong class="purple">must</strong> obey any requirements listed for
<code>handleType</code> in
<a href="vkspec.html#external-semaphore-handle-types-compatibility">external semaphore
handle types compatibility</a>.</p>
</li>
<li>
<p><a id="VUID-VkImportSemaphoreWin32HandleInfoKHR-name-01543"></a>
If <code>name</code> is not <code>NULL</code>, it <strong class="purple">must</strong> obey any requirements listed for
<code>handleType</code> in
<a href="vkspec.html#external-semaphore-handle-types-compatibility">external semaphore
handle types compatibility</a>.</p>
</li>
</ul>
</div>
</div>
</div>
<div class="sidebarblock">
<div class="content">
<div class="title">Valid Usage (Implicit)</div>
<div class="ulist">
<ul>
<li>
<p><a id="VUID-VkImportSemaphoreWin32HandleInfoKHR-sType-sType"></a> <code>sType</code> <strong class="purple">must</strong> be <code>VK_STRUCTURE_TYPE_IMPORT_SEMAPHORE_WIN32_HANDLE_INFO_KHR</code></p>
</li>
<li>
<p><a id="VUID-VkImportSemaphoreWin32HandleInfoKHR-pNext-pNext"></a> <code>pNext</code> <strong class="purple">must</strong> be <code>NULL</code></p>
</li>
<li>
<p><a id="VUID-VkImportSemaphoreWin32HandleInfoKHR-semaphore-parameter"></a> <code>semaphore</code> <strong class="purple">must</strong> be a valid <code>VkSemaphore</code> handle</p>
</li>
<li>
<p><a id="VUID-VkImportSemaphoreWin32HandleInfoKHR-flags-parameter"></a> <code>flags</code> <strong class="purple">must</strong> be a valid combination of <a href="#VkSemaphoreImportFlagBits">VkSemaphoreImportFlagBits</a> values</p>
</li>
<li>
<p><a id="VUID-VkImportSemaphoreWin32HandleInfoKHR-handleType-parameter"></a> If <code>handleType</code> is not <code>0</code>, <code>handleType</code> <strong class="purple">must</strong> be a valid <a href="#VkExternalSemaphoreHandleTypeFlagBits">VkExternalSemaphoreHandleTypeFlagBits</a> value</p>
</li>
</ul>
</div>
</div>
</div>
<div class="sidebarblock">
<div class="content">
<div class="title">Host Synchronization</div>
<div class="ulist">
<ul>
<li>
<p>Host access to <code>semaphore</code> <strong class="purple">must</strong> be externally synchronized</p>
</li>
</ul>
</div>
</div>
</div>
</div>
<div class="sect3">
<h4 id="_see_also_552">See Also</h4>
<div class="paragraph">
<p><a href="#VkExternalSemaphoreHandleTypeFlagBits">VkExternalSemaphoreHandleTypeFlagBits</a>, <a href="#VkSemaphore">VkSemaphore</a>, <a href="#VkSemaphoreImportFlags">VkSemaphoreImportFlags</a>, <a href="#VkStructureType">VkStructureType</a>, <a href="#vkImportSemaphoreWin32HandleKHR">vkImportSemaphoreWin32HandleKHR</a></p>
</div>
</div>
<div class="sect3">
<h4 id="_document_notes_552">Document Notes</h4>
<div class="paragraph">
<p>For more information, see the Vulkan Specification at URL</p>
</div>
<div class="paragraph">
<p><a href="https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VkImportSemaphoreWin32HandleInfoKHR" class="bare">https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VkImportSemaphoreWin32HandleInfoKHR</a></p>
</div>
<div class="paragraph">
<p>This page is extracted from the Vulkan Specification.
Fixes and changes should be made to the Specification, not directly.</p>
</div>
<div style="page-break-after: always;"></div>
</div>
</div>
<div class="sect2">
<h3 id="_vkindirectcommandslayoutcreateinfonvx3">VkIndirectCommandsLayoutCreateInfoNVX(3)</h3>
<div class="sect3">
<h4 id="_name_553">Name</h4>
<div class="paragraph">
<p>VkIndirectCommandsLayoutCreateInfoNVX - Structure specifying the parameters of a newly created indirect commands layout object</p>
</div>
</div>
<div class="sect3">
<h4 id="_c_specification_553">C Specification</h4>
<div class="paragraph">
<p>The <code>VkIndirectCommandsLayoutCreateInfoNVX</code> structure is defined as:</p>
</div>
<div id="VkIndirectCommandsLayoutCreateInfoNVX" class="listingblock">
<div class="content">
<pre class="highlight"><code class="language-c++" data-lang="c++">typedef struct VkIndirectCommandsLayoutCreateInfoNVX {
    VkStructureType                            sType;
    const void*                                pNext;
    VkPipelineBindPoint                        pipelineBindPoint;
    VkIndirectCommandsLayoutUsageFlagsNVX      flags;
    uint32_t                                   tokenCount;
    const VkIndirectCommandsLayoutTokenNVX*    pTokens;
} VkIndirectCommandsLayoutCreateInfoNVX;</code></pre>
</div>
</div>
</div>
<div class="sect3">
<h4 id="_members_190">Members</h4>
<div class="ulist">
<ul>
<li>
<p><code>sType</code> is the type of this structure.</p>
</li>
<li>
<p><code>pNext</code> is <code>NULL</code> or a pointer to an extension-specific structure.</p>
</li>
<li>
<p><code>pipelineBindPoint</code> is the <a href="#VkPipelineBindPoint">VkPipelineBindPoint</a> that this
layout targets.</p>
</li>
<li>
<p><code>flags</code> is a bitmask of
<a href="#VkIndirectCommandsLayoutUsageFlagBitsNVX">VkIndirectCommandsLayoutUsageFlagBitsNVX</a> specifying usage hints of
this layout.</p>
</li>
<li>
<p><code>tokenCount</code> is the length of the individual command sequnce.</p>
</li>
<li>
<p><code>pTokens</code> is an array describing each command token in detail.
See <a href="#VkIndirectCommandsTokenTypeNVX">VkIndirectCommandsTokenTypeNVX</a> and
<a href="#VkIndirectCommandsLayoutTokenNVX">VkIndirectCommandsLayoutTokenNVX</a> below for details.</p>
</li>
</ul>
</div>
</div>
<div class="sect3">
<h4 id="_description_553">Description</h4>
<div class="paragraph">
<p>The following code illustrates some of the key flags:</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="highlight"><code class="language-c" data-lang="c">void cmdProcessAllSequences(cmd, objectTable, indirectCommandsLayout, pIndirectCommandsTokens, sequencesCount, indexbuffer, indexbufferoffset)
{
  for (s = 0; s &lt; sequencesCount; s++)
  {
    sequence = s;

    if (indirectCommandsLayout.flags &amp; VK_INDIRECT_COMMANDS_LAYOUT_USAGE_UNORDERED_SEQUENCES_BIT_NVX) {
      sequence = incoherent_implementation_dependent_permutation[ sequence ];
    }
    if (indirectCommandsLayout.flags &amp; VK_INDIRECT_COMMANDS_LAYOUT_USAGE_INDEXED_SEQUENCES_BIT_NVX) {
      sequence = indexbuffer.load_uint32( sequence * sizeof(uint32_t) + indexbufferoffset);
    }

    cmdProcessSequence( cmd, objectTable, indirectCommandsLayout, pIndirectCommandsTokens, sequence );
  }
}</code></pre>
</div>
</div>
<div class="sidebarblock">
<div class="content">
<div class="title">Valid Usage</div>
<div class="ulist">
<ul>
<li>
<p><a id="VUID-VkIndirectCommandsLayoutCreateInfoNVX-tokenCount-01347"></a>
<code>tokenCount</code> <strong class="purple">must</strong> be greater than <code>0</code> and below
<code>VkDeviceGeneratedCommandsLimitsNVX</code>::<code>maxIndirectCommandsLayoutTokenCount</code></p>
</li>
<li>
<p><a id="VUID-VkIndirectCommandsLayoutCreateInfoNVX-computeBindingPointSupport-01348"></a>
If the
<code>VkDeviceGeneratedCommandsFeaturesNVX</code>::<code>computeBindingPointSupport</code>
feature is not enabled, then <code>pipelineBindPoint</code> <strong class="purple">must</strong> not be
<code>VK_PIPELINE_BIND_POINT_COMPUTE</code></p>
</li>
<li>
<p><a id="VUID-VkIndirectCommandsLayoutCreateInfoNVX-pTokens-01349"></a>
If <code>pTokens</code> contains an entry of
<code>VK_INDIRECT_COMMANDS_TOKEN_TYPE_PIPELINE_NVX</code> it <strong class="purple">must</strong> be the first
element of the array and there <strong class="purple">must</strong> be only a single element of such
token type.</p>
</li>
<li>
<p><a id="VUID-VkIndirectCommandsLayoutCreateInfoNVX-pTokens-01350"></a>
All state binding tokens in <code>pTokens</code> <strong class="purple">must</strong> occur prior work
provoking tokens (<code>VK_INDIRECT_COMMANDS_TOKEN_TYPE_DRAW_NVX</code>,
<code>VK_INDIRECT_COMMANDS_TOKEN_TYPE_DRAW_INDEXED_NVX</code>,
<code>VK_INDIRECT_COMMANDS_TOKEN_TYPE_DISPATCH_NVX</code>).</p>
</li>
<li>
<p><a id="VUID-VkIndirectCommandsLayoutCreateInfoNVX-pTokens-01351"></a>
The content of <code>pTokens</code> <strong class="purple">must</strong> include one single work provoking
token that is compatible with the <code>pipelineBindPoint</code>.</p>
</li>
</ul>
</div>
</div>
</div>
<div class="sidebarblock">
<div class="content">
<div class="title">Valid Usage (Implicit)</div>
<div class="ulist">
<ul>
<li>
<p><a id="VUID-VkIndirectCommandsLayoutCreateInfoNVX-sType-sType"></a> <code>sType</code> <strong class="purple">must</strong> be <code>VK_STRUCTURE_TYPE_INDIRECT_COMMANDS_LAYOUT_CREATE_INFO_NVX</code></p>
</li>
<li>
<p><a id="VUID-VkIndirectCommandsLayoutCreateInfoNVX-pNext-pNext"></a> <code>pNext</code> <strong class="purple">must</strong> be <code>NULL</code></p>
</li>
<li>
<p><a id="VUID-VkIndirectCommandsLayoutCreateInfoNVX-pipelineBindPoint-parameter"></a> <code>pipelineBindPoint</code> <strong class="purple">must</strong> be a valid <a href="#VkPipelineBindPoint">VkPipelineBindPoint</a> value</p>
</li>
<li>
<p><a id="VUID-VkIndirectCommandsLayoutCreateInfoNVX-flags-parameter"></a> <code>flags</code> <strong class="purple">must</strong> be a valid combination of <a href="#VkIndirectCommandsLayoutUsageFlagBitsNVX">VkIndirectCommandsLayoutUsageFlagBitsNVX</a> values</p>
</li>
<li>
<p><a id="VUID-VkIndirectCommandsLayoutCreateInfoNVX-flags-requiredbitmask"></a> <code>flags</code> <strong class="purple">must</strong> not be <code>0</code></p>
</li>
<li>
<p><a id="VUID-VkIndirectCommandsLayoutCreateInfoNVX-pTokens-parameter"></a> <code>pTokens</code> <strong class="purple">must</strong> be a valid pointer to an array of <code>tokenCount</code> valid <code>VkIndirectCommandsLayoutTokenNVX</code> structures</p>
</li>
<li>
<p><a id="VUID-VkIndirectCommandsLayoutCreateInfoNVX-tokenCount-arraylength"></a> <code>tokenCount</code> <strong class="purple">must</strong> be greater than <code>0</code></p>
</li>
</ul>
</div>
</div>
</div>
</div>
<div class="sect3">
<h4 id="_see_also_553">See Also</h4>
<div class="paragraph">
<p><a href="#VkIndirectCommandsLayoutTokenNVX">VkIndirectCommandsLayoutTokenNVX</a>, <a href="#VkIndirectCommandsLayoutUsageFlagsNVX">VkIndirectCommandsLayoutUsageFlagsNVX</a>, <a href="#VkPipelineBindPoint">VkPipelineBindPoint</a>, <a href="#VkStructureType">VkStructureType</a>, <a href="#vkCreateIndirectCommandsLayoutNVX">vkCreateIndirectCommandsLayoutNVX</a></p>
</div>
</div>
<div class="sect3">
<h4 id="_document_notes_553">Document Notes</h4>
<div class="paragraph">
<p>For more information, see the Vulkan Specification at URL</p>
</div>
<div class="paragraph">
<p><a href="https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VkIndirectCommandsLayoutCreateInfoNVX" class="bare">https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VkIndirectCommandsLayoutCreateInfoNVX</a></p>
</div>
<div class="paragraph">
<p>This page is extracted from the Vulkan Specification.
Fixes and changes should be made to the Specification, not directly.</p>
</div>
<div style="page-break-after: always;"></div>
</div>
</div>
<div class="sect2">
<h3 id="_vkindirectcommandslayouttokennvx3">VkIndirectCommandsLayoutTokenNVX(3)</h3>
<div class="sect3">
<h4 id="_name_554">Name</h4>
<div class="paragraph">
<p>VkIndirectCommandsLayoutTokenNVX - Struct specifying the details of an indirect command layout token</p>
</div>
</div>
<div class="sect3">
<h4 id="_c_specification_554">C Specification</h4>
<div class="paragraph">
<p>The <code>VkIndirectCommandsLayoutTokenNVX</code> structure specifies details to
the function arguments that need to be known at layout creation time:</p>
</div>
<div id="VkIndirectCommandsLayoutTokenNVX" class="listingblock">
<div class="content">
<pre class="highlight"><code class="language-c++" data-lang="c++">typedef struct VkIndirectCommandsLayoutTokenNVX {
    VkIndirectCommandsTokenTypeNVX    tokenType;
    uint32_t                          bindingUnit;
    uint32_t                          dynamicCount;
    uint32_t                          divisor;
} VkIndirectCommandsLayoutTokenNVX;</code></pre>
</div>
</div>
</div>
<div class="sect3">
<h4 id="_members_191">Members</h4>
<div class="ulist">
<ul>
<li>
<p><code>type</code> specifies the token command type.</p>
</li>
<li>
<p><code>bindingUnit</code> has a different meaning depending on the type, please
refer pseudo code further down for details.</p>
</li>
<li>
<p><code>dynamicCount</code> has a different meaning depending on the type, please
refer pseudo code further down for details.</p>
</li>
<li>
<p><code>divisor</code> defines the rate at which the input data buffers are
accessed.</p>
</li>
</ul>
</div>
</div>
<div class="sect3">
<h4 id="_description_554">Description</h4>
<div class="sidebarblock">
<div class="content">
<div class="title">Valid Usage</div>
<div class="ulist">
<ul>
<li>
<p><a id="VUID-VkIndirectCommandsLayoutTokenNVX-bindingUnit-01342"></a>
<code>bindingUnit</code> <strong class="purple">must</strong> stay within device supported limits for the
appropriate commands.</p>
</li>
<li>
<p><a id="VUID-VkIndirectCommandsLayoutTokenNVX-dynamicCount-01343"></a>
<code>dynamicCount</code> <strong class="purple">must</strong> stay within device supported limits for the
appropriate commands.</p>
</li>
<li>
<p><a id="VUID-VkIndirectCommandsLayoutTokenNVX-divisor-01344"></a>
<code>divisor</code> <strong class="purple">must</strong> be greater than <code>0</code> and a power of two.</p>
</li>
</ul>
</div>
</div>
</div>
<div class="sidebarblock">
<div class="content">
<div class="title">Valid Usage (Implicit)</div>
<div class="ulist">
<ul>
<li>
<p><a id="VUID-VkIndirectCommandsLayoutTokenNVX-tokenType-parameter"></a> <code>tokenType</code> <strong class="purple">must</strong> be a valid <a href="#VkIndirectCommandsTokenTypeNVX">VkIndirectCommandsTokenTypeNVX</a> value</p>
</li>
</ul>
</div>
</div>
</div>
</div>
<div class="sect3">
<h4 id="_see_also_554">See Also</h4>
<div class="paragraph">
<p><a href="#VkIndirectCommandsLayoutCreateInfoNVX">VkIndirectCommandsLayoutCreateInfoNVX</a>, <a href="#VkIndirectCommandsTokenTypeNVX">VkIndirectCommandsTokenTypeNVX</a></p>
</div>
</div>
<div class="sect3">
<h4 id="_document_notes_554">Document Notes</h4>
<div class="paragraph">
<p>For more information, see the Vulkan Specification at URL</p>
</div>
<div class="paragraph">
<p><a href="https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VkIndirectCommandsLayoutTokenNVX" class="bare">https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VkIndirectCommandsLayoutTokenNVX</a></p>
</div>
<div class="paragraph">
<p>This page is extracted from the Vulkan Specification.
Fixes and changes should be made to the Specification, not directly.</p>
</div>
<div style="page-break-after: always;"></div>
</div>
</div>
<div class="sect2">
<h3 id="_vkindirectcommandstokennvx3">VkIndirectCommandsTokenNVX(3)</h3>
<div class="sect3">
<h4 id="_name_555">Name</h4>
<div class="paragraph">
<p>VkIndirectCommandsTokenNVX - Structure specifying parameters for the reservation of command buffer space</p>
</div>
</div>
<div class="sect3">
<h4 id="_c_specification_555">C Specification</h4>
<div class="paragraph">
<p>The <code>VkIndirectCommandsTokenNVX</code> structure specifies the input data for
a token at processing time.</p>
</div>
<div id="VkIndirectCommandsTokenNVX" class="listingblock">
<div class="content">
<pre class="highlight"><code class="language-c++" data-lang="c++">typedef struct VkIndirectCommandsTokenNVX {
    VkIndirectCommandsTokenTypeNVX    tokenType;
    VkBuffer                          buffer;
    VkDeviceSize                      offset;
} VkIndirectCommandsTokenNVX;</code></pre>
</div>
</div>
</div>
<div class="sect3">
<h4 id="_members_192">Members</h4>
<div class="ulist">
<ul>
<li>
<p><code>tokenType</code> specifies the token command type.</p>
</li>
<li>
<p><code>buffer</code> specifies the <a href="#VkBuffer">VkBuffer</a> storing the functional
arguments for each squence.
These argumetns can be written by the device.</p>
</li>
<li>
<p><code>offset</code> specified an offset into <code>buffer</code> where the arguments
start.</p>
</li>
</ul>
</div>
</div>
<div class="sect3">
<h4 id="_description_555">Description</h4>
<div class="sidebarblock">
<div class="content">
<div class="title">Valid Usage</div>
<div class="ulist">
<ul>
<li>
<p><a id="VUID-VkIndirectCommandsTokenNVX-buffer-01345"></a>
The <code>buffer</code>&#8217;s usage flag <strong class="purple">must</strong> have the
<code>VK_BUFFER_USAGE_INDIRECT_BUFFER_BIT</code> bit set.</p>
</li>
<li>
<p><a id="VUID-VkIndirectCommandsTokenNVX-offset-01346"></a>
The <code>offset</code> <strong class="purple">must</strong> be aligned to
<code>VkDeviceGeneratedCommandsLimitsNVX</code>::<code>minCommandsTokenBufferOffsetAlignment</code>.</p>
</li>
</ul>
</div>
</div>
</div>
<div class="sidebarblock">
<div class="content">
<div class="title">Valid Usage (Implicit)</div>
<div class="ulist">
<ul>
<li>
<p><a id="VUID-VkIndirectCommandsTokenNVX-tokenType-parameter"></a> <code>tokenType</code> <strong class="purple">must</strong> be a valid <a href="#VkIndirectCommandsTokenTypeNVX">VkIndirectCommandsTokenTypeNVX</a> value</p>
</li>
<li>
<p><a id="VUID-VkIndirectCommandsTokenNVX-buffer-parameter"></a> <code>buffer</code> <strong class="purple">must</strong> be a valid <code>VkBuffer</code> handle</p>
</li>
</ul>
</div>
</div>
</div>
</div>
<div class="sect3">
<h4 id="_see_also_555">See Also</h4>
<div class="paragraph">
<p><a href="#VkBuffer">VkBuffer</a>, <a href="#VkCmdProcessCommandsInfoNVX">VkCmdProcessCommandsInfoNVX</a>, <code>VkDeviceSize</code>, <a href="#VkIndirectCommandsTokenTypeNVX">VkIndirectCommandsTokenTypeNVX</a></p>
</div>
</div>
<div class="sect3">
<h4 id="_document_notes_555">Document Notes</h4>
<div class="paragraph">
<p>For more information, see the Vulkan Specification at URL</p>
</div>
<div class="paragraph">
<p><a href="https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VkIndirectCommandsTokenNVX" class="bare">https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VkIndirectCommandsTokenNVX</a></p>
</div>
<div class="paragraph">
<p>This page is extracted from the Vulkan Specification.
Fixes and changes should be made to the Specification, not directly.</p>
</div>
<div style="page-break-after: always;"></div>
</div>
</div>
<div class="sect2">
<h3 id="_vkinputattachmentaspectreference3">VkInputAttachmentAspectReference(3)</h3>
<div class="sect3">
<h4 id="_name_556">Name</h4>
<div class="paragraph">
<p>VkInputAttachmentAspectReference - Structure specifying a subpass/input attachment pair and an aspect mask that <strong class="purple">can</strong> be read.</p>
</div>
</div>
<div class="sect3">
<h4 id="_c_specification_556">C Specification</h4>
<div class="paragraph">
<p>The <code>VkInputAttachmentAspectReference</code> structure specifies an aspect
mask for a specific input attachment of a specific subpass in the render
pass.</p>
</div>
<div class="paragraph">
<p><code>subpass</code> and <code>inputAttachmentIndex</code> index into the render pass as:</p>
</div>
<div class="paragraph">
<p><code>pCreateInfo</code>::<code>pSubpasses</code>[<code>subpass</code>].<code>pInputAttachments</code>[<code>inputAttachmentIndex</code>]</p>
</div>
<div id="VkInputAttachmentAspectReference" class="listingblock">
<div class="content">
<pre class="highlight"><code class="language-c++" data-lang="c++">typedef struct VkInputAttachmentAspectReference {
    uint32_t              subpass;
    uint32_t              inputAttachmentIndex;
    VkImageAspectFlags    aspectMask;
} VkInputAttachmentAspectReference;</code></pre>
</div>
</div>
<div class="paragraph">
<p>or the equivalent</p>
</div>
<div id="VkInputAttachmentAspectReferenceKHR" class="listingblock">
<div class="content">
<pre class="highlight"><code class="language-c++" data-lang="c++">typedef VkInputAttachmentAspectReference VkInputAttachmentAspectReferenceKHR;</code></pre>
</div>
</div>
</div>
<div class="sect3">
<h4 id="_members_193">Members</h4>
<div class="ulist">
<ul>
<li>
<p><code>subpass</code> is an index into the <code>pSubpasses</code> array of the parent
<code>VkRenderPassCreateInfo</code> structure.</p>
</li>
<li>
<p><code>inputAttachmentIndex</code> is an index into the <code>pInputAttachments</code>
of the specified subpass.</p>
</li>
<li>
<p><code>aspectMask</code> is a mask of which aspect(s) <strong class="purple">can</strong> be accessed within
the specified subpass.</p>
</li>
</ul>
</div>
</div>
<div class="sect3">
<h4 id="_description_556">Description</h4>
<div class="sidebarblock">
<div class="content">
<div class="title">Valid Usage</div>
<div class="ulist">
<ul>
<li>
<p><a id="VUID-VkInputAttachmentAspectReference-aspectMask-01964"></a>
<code>aspectMask</code> <strong class="purple">must</strong> not include <code>VK_IMAGE_ASPECT_METADATA_BIT</code></p>
</li>
<li>
<p><a id="VUID-VkInputAttachmentAspectReference-aspectMask-02250"></a>
<code>aspectMask</code> <strong class="purple">must</strong> not include
<code>VK_IMAGE_ASPECT_MEMORY_PLANE_i_BIT_EXT</code> for any index <code>i</code>.</p>
</li>
</ul>
</div>
</div>
</div>
<div class="sidebarblock">
<div class="content">
<div class="title">Valid Usage (Implicit)</div>
<div class="ulist">
<ul>
<li>
<p><a id="VUID-VkInputAttachmentAspectReference-aspectMask-parameter"></a> <code>aspectMask</code> <strong class="purple">must</strong> be a valid combination of <a href="#VkImageAspectFlagBits">VkImageAspectFlagBits</a> values</p>
</li>
<li>
<p><a id="VUID-VkInputAttachmentAspectReference-aspectMask-requiredbitmask"></a> <code>aspectMask</code> <strong class="purple">must</strong> not be <code>0</code></p>
</li>
</ul>
</div>
</div>
</div>
</div>
<div class="sect3">
<h4 id="_see_also_556">See Also</h4>
<div class="paragraph">
<p><a href="#VkImageAspectFlags">VkImageAspectFlags</a>, <a href="#VkRenderPassInputAttachmentAspectCreateInfo">VkRenderPassInputAttachmentAspectCreateInfo</a></p>
</div>
</div>
<div class="sect3">
<h4 id="_document_notes_556">Document Notes</h4>
<div class="paragraph">
<p>For more information, see the Vulkan Specification at URL</p>
</div>
<div class="paragraph">
<p><a href="https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VkInputAttachmentAspectReference" class="bare">https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VkInputAttachmentAspectReference</a></p>
</div>
<div class="paragraph">
<p>This page is extracted from the Vulkan Specification.
Fixes and changes should be made to the Specification, not directly.</p>
</div>
<div style="page-break-after: always;"></div>
</div>
</div>
<div class="sect2">
<h3 id="_vkinstancecreateinfo3">VkInstanceCreateInfo(3)</h3>
<div class="sect3">
<h4 id="_name_557">Name</h4>
<div class="paragraph">
<p>VkInstanceCreateInfo - Structure specifying parameters of a newly created instance</p>
</div>
</div>
<div class="sect3">
<h4 id="_c_specification_557">C Specification</h4>
<div class="paragraph">
<p>The <code>VkInstanceCreateInfo</code> structure is defined as:</p>
</div>
<div id="VkInstanceCreateInfo" class="listingblock">
<div class="content">
<pre class="highlight"><code class="language-c++" data-lang="c++">typedef struct VkInstanceCreateInfo {
    VkStructureType             sType;
    const void*                 pNext;
    VkInstanceCreateFlags       flags;
    const VkApplicationInfo*    pApplicationInfo;
    uint32_t                    enabledLayerCount;
    const char* const*          ppEnabledLayerNames;
    uint32_t                    enabledExtensionCount;
    const char* const*          ppEnabledExtensionNames;
} VkInstanceCreateInfo;</code></pre>
</div>
</div>
</div>
<div class="sect3">
<h4 id="_members_194">Members</h4>
<div class="ulist">
<ul>
<li>
<p><code>sType</code> is the type of this structure.</p>
</li>
<li>
<p><code>pNext</code> is <code>NULL</code> or a pointer to an extension-specific structure.</p>
</li>
<li>
<p><code>flags</code> is reserved for future use.</p>
</li>
<li>
<p><code>pApplicationInfo</code> is <code>NULL</code> or a pointer to an instance of
<code>VkApplicationInfo</code>.
If not <code>NULL</code>, this information helps implementations recognize behavior
inherent to classes of applications.
<a href="#VkApplicationInfo">VkApplicationInfo</a> is defined in detail below.</p>
</li>
<li>
<p><code>enabledLayerCount</code> is the number of global layers to enable.</p>
</li>
<li>
<p><code>ppEnabledLayerNames</code> is a pointer to an array of
<code>enabledLayerCount</code> null-terminated UTF-8 strings containing the
names of layers to enable for the created instance.
See the <a href="vkspec.html#extendingvulkan-layers" class="bare">html/vkspec.html#extendingvulkan-layers</a> section for further details.</p>
</li>
<li>
<p><code>enabledExtensionCount</code> is the number of global extensions to
enable.</p>
</li>
<li>
<p><code>ppEnabledExtensionNames</code> is a pointer to an array of
<code>enabledExtensionCount</code> null-terminated UTF-8 strings containing the
names of extensions to enable.</p>
</li>
</ul>
</div>
</div>
<div class="sect3">
<h4 id="_description_557">Description</h4>
<div class="sidebarblock">
<div class="content">
<div class="title">Valid Usage (Implicit)</div>
<div class="ulist">
<ul>
<li>
<p><a id="VUID-VkInstanceCreateInfo-sType-sType"></a> <code>sType</code> <strong class="purple">must</strong> be <code>VK_STRUCTURE_TYPE_INSTANCE_CREATE_INFO</code></p>
</li>
<li>
<p><a id="VUID-VkInstanceCreateInfo-pNext-pNext"></a> Each <code>pNext</code> member of any structure (including this one) in the <code>pNext</code> chain <strong class="purple">must</strong> be either <code>NULL</code> or a pointer to a valid instance of <a href="#VkDebugReportCallbackCreateInfoEXT">VkDebugReportCallbackCreateInfoEXT</a>, <a href="#VkDebugUtilsMessengerCreateInfoEXT">VkDebugUtilsMessengerCreateInfoEXT</a>, <a href="#VkValidationFeaturesEXT">VkValidationFeaturesEXT</a>, or <a href="#VkValidationFlagsEXT">VkValidationFlagsEXT</a></p>
</li>
<li>
<p><a id="VUID-VkInstanceCreateInfo-sType-unique"></a> Each <code>sType</code> member in the <code>pNext</code> chain <strong class="purple">must</strong> be unique</p>
</li>
<li>
<p><a id="VUID-VkInstanceCreateInfo-flags-zerobitmask"></a> <code>flags</code> <strong class="purple">must</strong> be <code>0</code></p>
</li>
<li>
<p><a id="VUID-VkInstanceCreateInfo-pApplicationInfo-parameter"></a> If <code>pApplicationInfo</code> is not <code>NULL</code>, <code>pApplicationInfo</code> <strong class="purple">must</strong> be a valid pointer to a valid <code>VkApplicationInfo</code> structure</p>
</li>
<li>
<p><a id="VUID-VkInstanceCreateInfo-ppEnabledLayerNames-parameter"></a> If <code>enabledLayerCount</code> is not <code>0</code>, <code>ppEnabledLayerNames</code> <strong class="purple">must</strong> be a valid pointer to an array of <code>enabledLayerCount</code> null-terminated UTF-8 strings</p>
</li>
<li>
<p><a id="VUID-VkInstanceCreateInfo-ppEnabledExtensionNames-parameter"></a> If <code>enabledExtensionCount</code> is not <code>0</code>, <code>ppEnabledExtensionNames</code> <strong class="purple">must</strong> be a valid pointer to an array of <code>enabledExtensionCount</code> null-terminated UTF-8 strings</p>
</li>
</ul>
</div>
</div>
</div>
</div>
<div class="sect3">
<h4 id="_see_also_557">See Also</h4>
<div class="paragraph">
<p><a href="#VkApplicationInfo">VkApplicationInfo</a>, <a href="#VkInstanceCreateFlags">VkInstanceCreateFlags</a>, <a href="#VkStructureType">VkStructureType</a>, <a href="#vkCreateInstance">vkCreateInstance</a></p>
</div>
</div>
<div class="sect3">
<h4 id="_document_notes_557">Document Notes</h4>
<div class="paragraph">
<p>For more information, see the Vulkan Specification at URL</p>
</div>
<div class="paragraph">
<p><a href="https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VkInstanceCreateInfo" class="bare">https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VkInstanceCreateInfo</a></p>
</div>
<div class="paragraph">
<p>This page is extracted from the Vulkan Specification.
Fixes and changes should be made to the Specification, not directly.</p>
</div>
<div style="page-break-after: always;"></div>
</div>
</div>
<div class="sect2">
<h3 id="_vklayerproperties3">VkLayerProperties(3)</h3>
<div class="sect3">
<h4 id="_name_558">Name</h4>
<div class="paragraph">
<p>VkLayerProperties - Structure specifying layer properties</p>
</div>
</div>
<div class="sect3">
<h4 id="_c_specification_558">C Specification</h4>
<div class="paragraph">
<p>The <code>VkLayerProperties</code> structure is defined as:</p>
</div>
<div id="VkLayerProperties" class="listingblock">
<div class="content">
<pre class="highlight"><code class="language-c++" data-lang="c++">typedef struct VkLayerProperties {
    char        layerName[VK_MAX_EXTENSION_NAME_SIZE];
    uint32_t    specVersion;
    uint32_t    implementationVersion;
    char        description[VK_MAX_DESCRIPTION_SIZE];
} VkLayerProperties;</code></pre>
</div>
</div>
</div>
<div class="sect3">
<h4 id="_members_195">Members</h4>
<div class="ulist">
<ul>
<li>
<p><code>layerName</code> is a null-terminated UTF-8 string specifying the name of
the layer.
Use this name in the <code>ppEnabledLayerNames</code> array passed in the
<a href="#VkInstanceCreateInfo">VkInstanceCreateInfo</a> structure to enable this layer for an
instance.</p>
</li>
<li>
<p><code>specVersion</code> is the Vulkan version the layer was written to,
encoded as described in <a href="vkspec.html#extendingvulkan-coreversions-versionnumbers" class="bare">html/vkspec.html#extendingvulkan-coreversions-versionnumbers</a>.</p>
</li>
<li>
<p><code>implementationVersion</code> is the version of this layer.
It is an integer, increasing with backward compatible changes.</p>
</li>
<li>
<p><code>description</code> is a null-terminated UTF-8 string providing additional
details that <strong class="purple">can</strong> be used by the application to identify the layer.</p>
</li>
</ul>
</div>
</div>
<div class="sect3">
<h4 id="_description_558">Description</h4>

</div>
<div class="sect3">
<h4 id="_see_also_558">See Also</h4>
<div class="paragraph">
<p><a href="#vkEnumerateDeviceLayerProperties">vkEnumerateDeviceLayerProperties</a>, <a href="#vkEnumerateInstanceLayerProperties">vkEnumerateInstanceLayerProperties</a></p>
</div>
</div>
<div class="sect3">
<h4 id="_document_notes_558">Document Notes</h4>
<div class="paragraph">
<p>For more information, see the Vulkan Specification at URL</p>
</div>
<div class="paragraph">
<p><a href="https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VkLayerProperties" class="bare">https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VkLayerProperties</a></p>
</div>
<div class="paragraph">
<p>This page is extracted from the Vulkan Specification.
Fixes and changes should be made to the Specification, not directly.</p>
</div>
<div style="page-break-after: always;"></div>
</div>
</div>
<div class="sect2">
<h3 id="_vkmacossurfacecreateinfomvk3">VkMacOSSurfaceCreateInfoMVK(3)</h3>
<div class="sect3">
<h4 id="_name_559">Name</h4>
<div class="paragraph">
<p>VkMacOSSurfaceCreateInfoMVK - Structure specifying parameters of a newly created macOS surface object</p>
</div>
</div>
<div class="sect3">
<h4 id="_c_specification_559">C Specification</h4>
<div class="paragraph">
<p>The <a href="#VkMacOSSurfaceCreateInfoMVK">VkMacOSSurfaceCreateInfoMVK</a> structure is defined as:</p>
</div>
<div id="VkMacOSSurfaceCreateInfoMVK" class="listingblock">
<div class="content">
<pre class="highlight"><code class="language-c++" data-lang="c++">typedef struct VkMacOSSurfaceCreateInfoMVK {
    VkStructureType                 sType;
    const void*                     pNext;
    VkMacOSSurfaceCreateFlagsMVK    flags;
    const void*                     pView;
} VkMacOSSurfaceCreateInfoMVK;</code></pre>
</div>
</div>
</div>
<div class="sect3">
<h4 id="_members_196">Members</h4>
<div class="ulist">
<ul>
<li>
<p><code>sType</code> is the type of this structure.</p>
</li>
<li>
<p><code>pNext</code> is <code>NULL</code> or a pointer to an extension-specific structure.</p>
</li>
<li>
<p><code>flags</code> is reserved for future use.</p>
</li>
<li>
<p><code>pView</code> is a reference to a <code>NSView</code> object which will display
this surface.
This <code>NSView</code> <strong class="purple">must</strong> be backed by a <code>CALayer</code> instance of type
<a href="#CAMetalLayer">CAMetalLayer</a>.</p>
</li>
</ul>
</div>
</div>
<div class="sect3">
<h4 id="_description_559">Description</h4>
<div class="sidebarblock">
<div class="content">
<div class="title">Valid Usage</div>
<div class="ulist">
<ul>
<li>
<p><a id="VUID-VkMacOSSurfaceCreateInfoMVK-pView-01317"></a>
<code>pView</code> <strong class="purple">must</strong> be a valid <code>NSView</code> and <strong class="purple">must</strong> be backed by a
<code>CALayer</code> instance of type <a href="#CAMetalLayer">CAMetalLayer</a>.</p>
</li>
</ul>
</div>
</div>
</div>
<div class="sidebarblock">
<div class="content">
<div class="title">Valid Usage (Implicit)</div>
<div class="ulist">
<ul>
<li>
<p><a id="VUID-VkMacOSSurfaceCreateInfoMVK-sType-sType"></a> <code>sType</code> <strong class="purple">must</strong> be <code>VK_STRUCTURE_TYPE_MACOS_SURFACE_CREATE_INFO_MVK</code></p>
</li>
<li>
<p><a id="VUID-VkMacOSSurfaceCreateInfoMVK-pNext-pNext"></a> <code>pNext</code> <strong class="purple">must</strong> be <code>NULL</code></p>
</li>
<li>
<p><a id="VUID-VkMacOSSurfaceCreateInfoMVK-flags-zerobitmask"></a> <code>flags</code> <strong class="purple">must</strong> be <code>0</code></p>
</li>
</ul>
</div>
</div>
</div>
</div>
<div class="sect3">
<h4 id="_see_also_559">See Also</h4>
<div class="paragraph">
<p><a href="#VkMacOSSurfaceCreateFlagsMVK">VkMacOSSurfaceCreateFlagsMVK</a>, <a href="#VkStructureType">VkStructureType</a>, <a href="#vkCreateMacOSSurfaceMVK">vkCreateMacOSSurfaceMVK</a></p>
</div>
</div>
<div class="sect3">
<h4 id="_document_notes_559">Document Notes</h4>
<div class="paragraph">
<p>For more information, see the Vulkan Specification at URL</p>
</div>
<div class="paragraph">
<p><a href="https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VkMacOSSurfaceCreateInfoMVK" class="bare">https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VkMacOSSurfaceCreateInfoMVK</a></p>
</div>
<div class="paragraph">
<p>This page is extracted from the Vulkan Specification.
Fixes and changes should be made to the Specification, not directly.</p>
</div>
<div style="page-break-after: always;"></div>
</div>
</div>
<div class="sect2">
<h3 id="_vkmappedmemoryrange3">VkMappedMemoryRange(3)</h3>
<div class="sect3">
<h4 id="_name_560">Name</h4>
<div class="paragraph">
<p>VkMappedMemoryRange - Structure specifying a mapped memory range</p>
</div>
</div>
<div class="sect3">
<h4 id="_c_specification_560">C Specification</h4>
<div class="paragraph">
<p>The <code>VkMappedMemoryRange</code> structure is defined as:</p>
</div>
<div id="VkMappedMemoryRange" class="listingblock">
<div class="content">
<pre class="highlight"><code class="language-c++" data-lang="c++">typedef struct VkMappedMemoryRange {
    VkStructureType    sType;
    const void*        pNext;
    VkDeviceMemory     memory;
    VkDeviceSize       offset;
    VkDeviceSize       size;
} VkMappedMemoryRange;</code></pre>
</div>
</div>
</div>
<div class="sect3">
<h4 id="_members_197">Members</h4>
<div class="ulist">
<ul>
<li>
<p><code>sType</code> is the type of this structure.</p>
</li>
<li>
<p><code>pNext</code> is <code>NULL</code> or a pointer to an extension-specific structure.</p>
</li>
<li>
<p><code>memory</code> is the memory object to which this range belongs.</p>
</li>
<li>
<p><code>offset</code> is the zero-based byte offset from the beginning of the
memory object.</p>
</li>
<li>
<p><code>size</code> is either the size of range, or <code>VK_WHOLE_SIZE</code> to affect
the range from <code>offset</code> to the end of the current mapping of the
allocation.</p>
</li>
</ul>
</div>
</div>
<div class="sect3">
<h4 id="_description_560">Description</h4>
<div class="sidebarblock">
<div class="content">
<div class="title">Valid Usage</div>
<div class="ulist">
<ul>
<li>
<p><a id="VUID-VkMappedMemoryRange-memory-00684"></a>
<code>memory</code> <strong class="purple">must</strong> be currently host mapped</p>
</li>
<li>
<p><a id="VUID-VkMappedMemoryRange-size-00685"></a>
If <code>size</code> is not equal to <code>VK_WHOLE_SIZE</code>, <code>offset</code> and
<code>size</code> <strong class="purple">must</strong> specify a range contained within the currently mapped
range of <code>memory</code></p>
</li>
<li>
<p><a id="VUID-VkMappedMemoryRange-size-00686"></a>
If <code>size</code> is equal to <code>VK_WHOLE_SIZE</code>, <code>offset</code> <strong class="purple">must</strong> be
within the currently mapped range of <code>memory</code></p>
</li>
<li>
<p><a id="VUID-VkMappedMemoryRange-size-01389"></a>
If <code>size</code> is equal to <code>VK_WHOLE_SIZE</code>, the end of the current
mapping of <code>memory</code> <strong class="purple">must</strong> be a multiple of
<a href="#VkPhysicalDeviceLimits">VkPhysicalDeviceLimits</a>::<code>nonCoherentAtomSize</code> bytes from the
beginning of the memory object.</p>
</li>
<li>
<p><a id="VUID-VkMappedMemoryRange-offset-00687"></a>
<code>offset</code> <strong class="purple">must</strong> be a multiple of
<a href="#VkPhysicalDeviceLimits">VkPhysicalDeviceLimits</a>::<code>nonCoherentAtomSize</code></p>
</li>
<li>
<p><a id="VUID-VkMappedMemoryRange-size-01390"></a>
If <code>size</code> is not equal to <code>VK_WHOLE_SIZE</code>, <code>size</code> <strong class="purple">must</strong>
either be a multiple of
<a href="#VkPhysicalDeviceLimits">VkPhysicalDeviceLimits</a>::<code>nonCoherentAtomSize</code>, or <code>offset</code>
plus <code>size</code> <strong class="purple">must</strong> equal the size of <code>memory</code>.</p>
</li>
</ul>
</div>
</div>
</div>
<div class="sidebarblock">
<div class="content">
<div class="title">Valid Usage (Implicit)</div>
<div class="ulist">
<ul>
<li>
<p><a id="VUID-VkMappedMemoryRange-sType-sType"></a> <code>sType</code> <strong class="purple">must</strong> be <code>VK_STRUCTURE_TYPE_MAPPED_MEMORY_RANGE</code></p>
</li>
<li>
<p><a id="VUID-VkMappedMemoryRange-pNext-pNext"></a> <code>pNext</code> <strong class="purple">must</strong> be <code>NULL</code></p>
</li>
<li>
<p><a id="VUID-VkMappedMemoryRange-memory-parameter"></a> <code>memory</code> <strong class="purple">must</strong> be a valid <code>VkDeviceMemory</code> handle</p>
</li>
</ul>
</div>
</div>
</div>
</div>
<div class="sect3">
<h4 id="_see_also_560">See Also</h4>
<div class="paragraph">
<p><a href="#VkDeviceMemory">VkDeviceMemory</a>, <code>VkDeviceSize</code>, <a href="#VkStructureType">VkStructureType</a>, <a href="#vkFlushMappedMemoryRanges">vkFlushMappedMemoryRanges</a>, <a href="#vkInvalidateMappedMemoryRanges">vkInvalidateMappedMemoryRanges</a></p>
</div>
</div>
<div class="sect3">
<h4 id="_document_notes_560">Document Notes</h4>
<div class="paragraph">
<p>For more information, see the Vulkan Specification at URL</p>
</div>
<div class="paragraph">
<p><a href="https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VkMappedMemoryRange" class="bare">https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VkMappedMemoryRange</a></p>
</div>
<div class="paragraph">
<p>This page is extracted from the Vulkan Specification.
Fixes and changes should be made to the Specification, not directly.</p>
</div>
<div style="page-break-after: always;"></div>
</div>
</div>
<div class="sect2">
<h3 id="_vkmemoryallocateflagsinfo3">VkMemoryAllocateFlagsInfo(3)</h3>
<div class="sect3">
<h4 id="_name_561">Name</h4>
<div class="paragraph">
<p>VkMemoryAllocateFlagsInfo - Structure controlling how many instances of memory will be allocated</p>
</div>
</div>
<div class="sect3">
<h4 id="_c_specification_561">C Specification</h4>
<div class="paragraph">
<p>If the <code>pNext</code> chain of <a href="#VkMemoryAllocateInfo">VkMemoryAllocateInfo</a> includes a
<code>VkMemoryAllocateFlagsInfo</code> structure, then that structure includes
flags and a device mask controlling how many instances of the memory will be
allocated.</p>
</div>
<div class="paragraph">
<p>The <code>VkMemoryAllocateFlagsInfo</code> structure is defined as:</p>
</div>
<div id="VkMemoryAllocateFlagsInfo" class="listingblock">
<div class="content">
<pre class="highlight"><code class="language-c++" data-lang="c++">typedef struct VkMemoryAllocateFlagsInfo {
    VkStructureType          sType;
    const void*              pNext;
    VkMemoryAllocateFlags    flags;
    uint32_t                 deviceMask;
} VkMemoryAllocateFlagsInfo;</code></pre>
</div>
</div>
<div class="paragraph">
<p>or the equivalent</p>
</div>
<div id="VkMemoryAllocateFlagsInfoKHR" class="listingblock">
<div class="content">
<pre class="highlight"><code class="language-c++" data-lang="c++">typedef VkMemoryAllocateFlagsInfo VkMemoryAllocateFlagsInfoKHR;</code></pre>
</div>
</div>
</div>
<div class="sect3">
<h4 id="_members_198">Members</h4>
<div class="ulist">
<ul>
<li>
<p><code>sType</code> is the type of this structure.</p>
</li>
<li>
<p><code>pNext</code> is <code>NULL</code> or a pointer to an extension-specific structure.</p>
</li>
<li>
<p><code>flags</code> is a bitmask of <a href="#VkMemoryAllocateFlagBits">VkMemoryAllocateFlagBits</a> controlling
the allocation.</p>
</li>
<li>
<p><code>deviceMask</code> is a mask of physical devices in the logical device,
indicating that memory <strong class="purple">must</strong> be allocated on each device in the mask, if
<code>VK_MEMORY_ALLOCATE_DEVICE_MASK_BIT</code> is set in <code>flags</code>.</p>
</li>
</ul>
</div>
</div>
<div class="sect3">
<h4 id="_description_561">Description</h4>
<div class="paragraph">
<p>If <code>VK_MEMORY_ALLOCATE_DEVICE_MASK_BIT</code> is not set, the number of
instances allocated depends on whether
<code>VK_MEMORY_HEAP_MULTI_INSTANCE_BIT</code> is set in the memory heap.
If <code>VK_MEMORY_HEAP_MULTI_INSTANCE_BIT</code> is set, then memory is allocated
for every physical device in the logical device (as if <code>deviceMask</code> has
bits set for all device indices).
If <code>VK_MEMORY_HEAP_MULTI_INSTANCE_BIT</code> is not set, then a single
instance of memory is allocated (as if <code>deviceMask</code> is set to one).</p>
</div>
<div class="paragraph">
<p>On some implementations, allocations from a multi-instance heap <strong class="purple">may</strong> consume
memory on all physical devices even if the <code>deviceMask</code> excludes some
devices.
If <a href="#VkPhysicalDeviceGroupProperties">VkPhysicalDeviceGroupProperties</a>::<code>subsetAllocation</code> is
<code>VK_TRUE</code>, then memory is only consumed for the devices in the device
mask.</p>
</div>
<div class="admonitionblock note">
<table>
<tr>
<td class="icon">
<i class="fa icon-note" title="Note"></i>
</td>
<td class="content">
<div class="title">Note</div>
<div class="paragraph">
<p>In practice, most allocations on a multi-instance heap will be allocated
across all physical devices.
Unicast allocation support is an optional optimization for a minority of
allocations.</p>
</div>
</td>
</tr>
</table>
</div>
<div class="sidebarblock">
<div class="content">
<div class="title">Valid Usage</div>
<div class="ulist">
<ul>
<li>
<p><a id="VUID-VkMemoryAllocateFlagsInfo-deviceMask-00675"></a>
If <code>VK_MEMORY_ALLOCATE_DEVICE_MASK_BIT</code> is set, <code>deviceMask</code>
<strong class="purple">must</strong> be a valid device mask.</p>
</li>
<li>
<p><a id="VUID-VkMemoryAllocateFlagsInfo-deviceMask-00676"></a>
If <code>VK_MEMORY_ALLOCATE_DEVICE_MASK_BIT</code> is set, <code>deviceMask</code>
<strong class="purple">must</strong> not be zero</p>
</li>
</ul>
</div>
</div>
</div>
<div class="sidebarblock">
<div class="content">
<div class="title">Valid Usage (Implicit)</div>
<div class="ulist">
<ul>
<li>
<p><a id="VUID-VkMemoryAllocateFlagsInfo-sType-sType"></a> <code>sType</code> <strong class="purple">must</strong> be <code>VK_STRUCTURE_TYPE_MEMORY_ALLOCATE_FLAGS_INFO</code></p>
</li>
<li>
<p><a id="VUID-VkMemoryAllocateFlagsInfo-flags-parameter"></a> <code>flags</code> <strong class="purple">must</strong> be a valid combination of <a href="#VkMemoryAllocateFlagBits">VkMemoryAllocateFlagBits</a> values</p>
</li>
</ul>
</div>
</div>
</div>
</div>
<div class="sect3">
<h4 id="_see_also_561">See Also</h4>
<div class="paragraph">
<p><a href="#VkMemoryAllocateFlags">VkMemoryAllocateFlags</a>, <a href="#VkStructureType">VkStructureType</a></p>
</div>
</div>
<div class="sect3">
<h4 id="_document_notes_561">Document Notes</h4>
<div class="paragraph">
<p>For more information, see the Vulkan Specification at URL</p>
</div>
<div class="paragraph">
<p><a href="https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VkMemoryAllocateFlagsInfo" class="bare">https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VkMemoryAllocateFlagsInfo</a></p>
</div>
<div class="paragraph">
<p>This page is extracted from the Vulkan Specification.
Fixes and changes should be made to the Specification, not directly.</p>
</div>
<div style="page-break-after: always;"></div>
</div>
</div>
<div class="sect2">
<h3 id="_vkmemoryallocateinfo3">VkMemoryAllocateInfo(3)</h3>
<div class="sect3">
<h4 id="_name_562">Name</h4>
<div class="paragraph">
<p>VkMemoryAllocateInfo - Structure containing parameters of a memory allocation</p>
</div>
</div>
<div class="sect3">
<h4 id="_c_specification_562">C Specification</h4>
<div class="paragraph">
<p>The <code>VkMemoryAllocateInfo</code> structure is defined as:</p>
</div>
<div id="VkMemoryAllocateInfo" class="listingblock">
<div class="content">
<pre class="highlight"><code class="language-c++" data-lang="c++">typedef struct VkMemoryAllocateInfo {
    VkStructureType    sType;
    const void*        pNext;
    VkDeviceSize       allocationSize;
    uint32_t           memoryTypeIndex;
} VkMemoryAllocateInfo;</code></pre>
</div>
</div>
</div>
<div class="sect3">
<h4 id="_members_199">Members</h4>
<div class="ulist">
<ul>
<li>
<p><code>sType</code> is the type of this structure.</p>
</li>
<li>
<p><code>pNext</code> is <code>NULL</code> or a pointer to an extension-specific structure.</p>
</li>
<li>
<p><code>allocationSize</code> is the size of the allocation in bytes</p>
</li>
<li>
<p><code>memoryTypeIndex</code> is an index identifying a memory type from the
<code>memoryTypes</code> array of the <a href="#VkPhysicalDeviceMemoryProperties">VkPhysicalDeviceMemoryProperties</a>
structure</p>
</li>
</ul>
</div>
</div>
<div class="sect3">
<h4 id="_description_562">Description</h4>
<div class="paragraph">
<p>An instance of the <a href="#VkMemoryAllocateInfo">VkMemoryAllocateInfo</a> structure defines a memory
import operation if the <code>pNext</code> chain contains an instance of one of the
following structures:</p>
</div>
<div class="ulist">
<ul>
<li>
<p><a href="#VkImportMemoryWin32HandleInfoKHR">VkImportMemoryWin32HandleInfoKHR</a> with non-zero <code>handleType</code>
value</p>
</li>
<li>
<p><a href="#VkImportMemoryFdInfoKHR">VkImportMemoryFdInfoKHR</a> with a non-zero <code>handleType</code> value</p>
</li>
<li>
<p><a href="#VkImportMemoryHostPointerInfoEXT">VkImportMemoryHostPointerInfoEXT</a> with a non-zero <code>handleType</code>
value</p>
</li>
<li>
<p><a href="#VkImportAndroidHardwareBufferInfoANDROID">VkImportAndroidHardwareBufferInfoANDROID</a> with a non-<code>NULL</code>
<code>buffer</code> value</p>
</li>
</ul>
</div>
<div class="paragraph">
<p>Importing memory <strong class="purple">must</strong> not modify the content of the memory.
Implementations <strong class="purple">must</strong> ensure that importing memory does not enable the
importing Vulkan instance to access any memory or resources in other Vulkan
instances other than that corresponding to the memory object imported.
Implementations <strong class="purple">must</strong> also ensure accessing imported memory which has not
been initialized does not allow the importing Vulkan instance to obtain data
from the exporting Vulkan instance or vice-versa.</p>
</div>
<div class="admonitionblock note">
<table>
<tr>
<td class="icon">
<i class="fa icon-note" title="Note"></i>
</td>
<td class="content">
<div class="title">Note</div>
<div class="paragraph">
<p>How exported and imported memory is isolated is left to the implementation,
but applications should be aware that such isolation <strong class="purple">may</strong> prevent
implementations from placing multiple exportable memory objects in the same
physical or virtual page.
Hence, applications <strong class="purple">should</strong> avoid creating many small external memory
objects whenever possible.</p>
</div>
</td>
</tr>
</table>
</div>
<div class="paragraph">
<p>When performing a memory import operation, it is the responsibility of the
application to ensure the external handles meet all valid usage
requirements.
However, implementations <strong class="purple">must</strong> perform sufficient validation of external
handles to ensure that the operation results in a valid memory object which
will not cause program termination, device loss, queue stalls, or corruption
of other resources when used as allowed according to its allocation
parameters.
If the external handle provided does not meet these requirements, the
implementation <strong class="purple">must</strong> fail the memory import operation with the error code
<code>VK_ERROR_INVALID_EXTERNAL_HANDLE</code>.</p>
</div>
<div class="sidebarblock">
<div class="content">
<div class="title">Valid Usage</div>
<div class="ulist">
<ul>
<li>
<p><a id="VUID-VkMemoryAllocateInfo-pNext-00639"></a>
    If the <code>pNext</code> chain contains an instance of
    <code>VkExportMemoryAllocateInfo</code>, and any of the handle types specified
    in <code>VkExportMemoryAllocateInfo</code>::<code>handleTypes</code> require a
    dedicated allocation, as reported by
    <a href="#vkGetPhysicalDeviceImageFormatProperties2">vkGetPhysicalDeviceImageFormatProperties2</a> in
    <code>VkExternalImageFormatProperties</code>::<code>externalMemoryProperties</code>::<code>externalMemoryFeatures</code>
    or
    <code>VkExternalBufferProperties</code>::<code>externalMemoryProperties</code>::<code>externalMemoryFeatures</code>,
    the <code>pNext</code> chain must contain an instance of
<a href="#VkMemoryDedicatedAllocateInfo">VkMemoryDedicatedAllocateInfo</a>
or
<a href="#VkDedicatedAllocationMemoryAllocateInfoNV">VkDedicatedAllocationMemoryAllocateInfoNV</a>
    with either its <code>image</code> or <code>buffer</code> field set to a value other
    than <a href="#VK_NULL_HANDLE">VK_NULL_HANDLE</a>.</p>
</li>
<li>
<p><a id="VUID-VkMemoryAllocateInfo-pNext-00640"></a>
If the <code>pNext</code> chain contains an instance of
<a href="#VkExportMemoryAllocateInfo">VkExportMemoryAllocateInfo</a>, it <strong class="purple">must</strong> not contain an instance of
<a href="#VkExportMemoryAllocateInfoNV">VkExportMemoryAllocateInfoNV</a> or
<a href="#VkExportMemoryWin32HandleInfoNV">VkExportMemoryWin32HandleInfoNV</a>.</p>
</li>
<li>
<p><a id="VUID-VkMemoryAllocateInfo-pNext-00641"></a>
If the <code>pNext</code> chain contains an instance of
<a href="#VkImportMemoryWin32HandleInfoKHR">VkImportMemoryWin32HandleInfoKHR</a>, it <strong class="purple">must</strong> not contain an instance
of <a href="#VkImportMemoryWin32HandleInfoNV">VkImportMemoryWin32HandleInfoNV</a>.</p>
</li>
<li>
<p><a id="VUID-VkMemoryAllocateInfo-allocationSize-01742"></a>
If the parameters define an import operation, the external handle
specified was created by the Vulkan API, and the external handle type is
<code>VK_EXTERNAL_MEMORY_HANDLE_TYPE_OPAQUE_FD_BIT_KHR</code>, then the values
of <code>allocationSize</code> and <code>memoryTypeIndex</code> <strong class="purple">must</strong> match those
specified when the memory object being imported was created.</p>
</li>
<li>
<p><a id="VUID-VkMemoryAllocateInfo-None-00643"></a>
If the parameters define an import operation and the external handle
specified was created by the Vulkan API, the device mask specified by
<a href="#VkMemoryAllocateFlagsInfo">VkMemoryAllocateFlagsInfo</a> <strong class="purple">must</strong> match that specified when the
memory object being imported was allocated.</p>
</li>
<li>
<p><a id="VUID-VkMemoryAllocateInfo-None-00644"></a>
If the parameters define an import operation and the external handle
specified was created by the Vulkan API, the list of physical devices
that comprise the logical device passed to <a href="#vkAllocateMemory">vkAllocateMemory</a> <strong class="purple">must</strong>
match the list of physical devices that comprise the logical device on
which the memory was originally allocated.</p>
</li>
<li>
<p><a id="VUID-VkMemoryAllocateInfo-memoryTypeIndex-00645"></a>
If the parameters define an import operation and the external handle is
an NT handle or a global share handle created outside of the Vulkan API,
the value of <code>memoryTypeIndex</code> <strong class="purple">must</strong> be one of those returned by
<a href="#vkGetMemoryWin32HandlePropertiesKHR">vkGetMemoryWin32HandlePropertiesKHR</a>.</p>
</li>
<li>
<p><a id="VUID-VkMemoryAllocateInfo-allocationSize-01743"></a>
If the parameters define an import operation, the external handle was
created by the Vulkan API, and the external handle type is
<code>VK_EXTERNAL_MEMORY_HANDLE_TYPE_OPAQUE_WIN32_BIT_KHR</code> or
<code>VK_EXTERNAL_MEMORY_HANDLE_TYPE_OPAQUE_WIN32_KMT_BIT_KHR</code>, then the
values of <code>allocationSize</code> and <code>memoryTypeIndex</code> <strong class="purple">must</strong> match
those specified when the memory object being imported was created.</p>
</li>
<li>
<p><a id="VUID-VkMemoryAllocateInfo-allocationSize-00646"></a>
If the parameters define an import operation and the external handle
type is <code>VK_EXTERNAL_MEMORY_HANDLE_TYPE_D3D11_TEXTURE_BIT</code>,
<code>VK_EXTERNAL_MEMORY_HANDLE_TYPE_D3D11_TEXTURE_KMT_BIT</code>, or
<code>VK_EXTERNAL_MEMORY_HANDLE_TYPE_D3D12_RESOURCE_BIT</code>,
<code>allocationSize</code> <strong class="purple">must</strong> match the size reported in the memory
requirements of the <code>image</code> or <code>buffer</code> member of the instance
of <code>VkDedicatedAllocationMemoryAllocateInfoNV</code> included in the
<code>pNext</code> chain.</p>
</li>
<li>
<p><a id="VUID-VkMemoryAllocateInfo-allocationSize-00647"></a>
If the parameters define an import operation and the external handle
type is <code>VK_EXTERNAL_MEMORY_HANDLE_TYPE_D3D12_HEAP_BIT</code>,
<code>allocationSize</code> <strong class="purple">must</strong> match the size specified when creating the
Direct3D 12 heap from which the external handle was extracted.</p>
</li>
<li>
<p><a id="VUID-VkMemoryAllocateInfo-memoryTypeIndex-00648"></a>
If the parameters define an import operation and the external handle is
a POSIX file descriptor created outside of the Vulkan API, the value of
<code>memoryTypeIndex</code> <strong class="purple">must</strong> be one of those returned by
<a href="#vkGetMemoryFdPropertiesKHR">vkGetMemoryFdPropertiesKHR</a>.</p>
</li>
<li>
<p><a id="VUID-VkMemoryAllocateInfo-memoryTypeIndex-01872"></a>
If the protected memory feature is not enabled, the
<code>VkMemoryAllocateInfo</code>::<code>memoryTypeIndex</code> <strong class="purple">must</strong> not indicate a
memory type that reports <code>VK_MEMORY_PROPERTY_PROTECTED_BIT</code>.</p>
</li>
<li>
<p><a id="VUID-VkMemoryAllocateInfo-memoryTypeIndex-01744"></a>
If the parameters define an import operation and the external handle is
a host pointer, the value of <code>memoryTypeIndex</code> <strong class="purple">must</strong> be one of those
returned by <a href="#vkGetMemoryHostPointerPropertiesEXT">vkGetMemoryHostPointerPropertiesEXT</a></p>
</li>
<li>
<p><a id="VUID-VkMemoryAllocateInfo-allocationSize-01745"></a>
If the parameters define an import operation and the external handle is
a host pointer, <code>allocationSize</code> <strong class="purple">must</strong> be an integer multiple of
<code>VkPhysicalDeviceExternalMemoryHostPropertiesEXT</code>::<code>minImportedHostPointerAlignment</code></p>
</li>
<li>
<p><a id="VUID-VkMemoryAllocateInfo-allocationSize-02383"></a>
If the parameters define an import operation and the external handle
type is
<code>VK_EXTERNAL_MEMORY_HANDLE_TYPE_ANDROID_HARDWARE_BUFFER_BIT_ANDROID</code>,
<code>allocationSize</code> <strong class="purple">must</strong> be the size returned by
<a href="#vkGetAndroidHardwareBufferPropertiesANDROID">vkGetAndroidHardwareBufferPropertiesANDROID</a> for the Android
hardware buffer.</p>
</li>
<li>
<p><a id="VUID-VkMemoryAllocateInfo-pNext-02384"></a>
If the parameters define an import operation and the external handle
type is
<code>VK_EXTERNAL_MEMORY_HANDLE_TYPE_ANDROID_HARDWARE_BUFFER_BIT_ANDROID</code>,
and the <code>pNext</code> chain does not contain an instance of
<a href="#VkMemoryDedicatedAllocateInfo">VkMemoryDedicatedAllocateInfo</a> or
<a href="#VkMemoryDedicatedAllocateInfo">VkMemoryDedicatedAllocateInfo</a>::<code>image</code> is
<a href="#VK_NULL_HANDLE">VK_NULL_HANDLE</a>, the Android hardware buffer <strong class="purple">must</strong> have a
<code>AHardwareBuffer_Desc</code>::<code>format</code> of
<code>AHARDWAREBUFFER_FORMAT_BLOB</code> and a
<code>AHardwareBuffer_Desc</code>::<code>usage</code> that includes
<code>AHARDWAREBUFFER_USAGE_GPU_DATA_BUFFER</code>.</p>
</li>
<li>
<p><a id="VUID-VkMemoryAllocateInfo-memoryTypeIndex-02385"></a>
If the parameters define an import operation and the external handle
type is
<code>VK_EXTERNAL_MEMORY_HANDLE_TYPE_ANDROID_HARDWARE_BUFFER_BIT_ANDROID</code>,
<code>memoryTypeIndex</code> <strong class="purple">must</strong> be one of those returned by
<a href="#vkGetAndroidHardwareBufferPropertiesANDROID">vkGetAndroidHardwareBufferPropertiesANDROID</a> for the Android
hardware buffer.</p>
</li>
<li>
<p><a id="VUID-VkMemoryAllocateInfo-pNext-01874"></a>
If the parameters do not define an import operation, and the <code>pNext</code>
chain contains an instance of <code>VkExportMemoryAllocateInfo</code> with
<code>VK_EXTERNAL_MEMORY_HANDLE_TYPE_ANDROID_HARDWARE_BUFFER_BIT_ANDROID</code>
included in its <code>handleTypes</code> member, and the <code>pNext</code> contains
an instance of <a href="#VkMemoryDedicatedAllocateInfo">VkMemoryDedicatedAllocateInfo</a> with <code>image</code> not
equal to <a href="#VK_NULL_HANDLE">VK_NULL_HANDLE</a>, then <code>allocationSize</code> <strong class="purple">must</strong> be <code>0</code>,
otherwise <code>allocationSize</code> <strong class="purple">must</strong> be greater than <code>0</code>.</p>
</li>
<li>
<p><a id="VUID-VkMemoryAllocateInfo-pNext-02386"></a>
If the parameters define an import operation, the external handle is an
Android hardware buffer, and the <code>pNext</code> chain includes an instance
of <a href="#VkMemoryDedicatedAllocateInfo">VkMemoryDedicatedAllocateInfo</a> with <code>image</code> that is not
<a href="#VK_NULL_HANDLE">VK_NULL_HANDLE</a>, the Android hardware buffer&#8217;s
<a href="#AHardwareBuffer">AHardwareBuffer</a>::<code>usage</code> <strong class="purple">must</strong> include at least one of
<code>AHARDWAREBUFFER_USAGE_GPU_COLOR_OUTPUT</code> or
<code>AHARDWAREBUFFER_USAGE_GPU_SAMPLED_IMAGE</code>.</p>
</li>
<li>
<p><a id="VUID-VkMemoryAllocateInfo-pNext-02387"></a>
If the parameters define an import operation, the external handle is an
Android hardware buffer, and the <code>pNext</code> chain includes an instance
of <a href="#VkMemoryDedicatedAllocateInfo">VkMemoryDedicatedAllocateInfo</a> with <code>image</code> that is not
<a href="#VK_NULL_HANDLE">VK_NULL_HANDLE</a>, the format of <code>image</code> <strong class="purple">must</strong> be
<code>VK_FORMAT_UNDEFINED</code> or the format returned by
<a href="#vkGetAndroidHardwareBufferPropertiesANDROID">vkGetAndroidHardwareBufferPropertiesANDROID</a> in
<a href="#VkAndroidHardwareBufferFormatPropertiesANDROID">VkAndroidHardwareBufferFormatPropertiesANDROID</a>::<code>format</code> for
the Android hardware buffer.</p>
</li>
<li>
<p><a id="VUID-VkMemoryAllocateInfo-pNext-02388"></a>
If the parameters define an import operation, the external handle is an
Android hardware buffer, and the <code>pNext</code> chain includes an instance
of <a href="#VkMemoryDedicatedAllocateInfo">VkMemoryDedicatedAllocateInfo</a> with <code>image</code> that is not
<a href="#VK_NULL_HANDLE">VK_NULL_HANDLE</a>, the width, height, and array layer dimensions of
<code>image</code> and the Android hardware buffer&#8217;s <code>AHardwareBuffer_Desc</code>
<strong class="purple">must</strong> be identical.</p>
</li>
<li>
<p><a id="VUID-VkMemoryAllocateInfo-pNext-02389"></a>
If the parameters define an import operation, the external handle is an
Android hardware buffer, and the <code>pNext</code> chain includes an instance
of <a href="#VkMemoryDedicatedAllocateInfo">VkMemoryDedicatedAllocateInfo</a> with <code>image</code> that is not
<a href="#VK_NULL_HANDLE">VK_NULL_HANDLE</a>, and the Android hardware buffer&#8217;s
<a href="#AHardwareBuffer">AHardwareBuffer</a>::<code>usage</code> includes
<code>AHARDWAREBUFFER_USAGE_GPU_MIPMAP_COMPLETE</code>, the <code>image</code> <strong class="purple">must</strong>
have a complete mipmap chain.</p>
</li>
<li>
<p><a id="VUID-VkMemoryAllocateInfo-pNext-02586"></a>
If the parameters define an import operation, the external handle is an
Android hardware buffer, and the <code>pNext</code> chain includes an instance
of <a href="#VkMemoryDedicatedAllocateInfo">VkMemoryDedicatedAllocateInfo</a> with <code>image</code> that is not
<a href="#VK_NULL_HANDLE">VK_NULL_HANDLE</a>, and the Android hardware buffer&#8217;s
<a href="#AHardwareBuffer">AHardwareBuffer</a>::<code>usage</code> does not include
<code>AHARDWAREBUFFER_USAGE_GPU_MIPMAP_COMPLETE</code>, the <code>image</code> <strong class="purple">must</strong>
have exactly one mipmap level.</p>
</li>
<li>
<p><a id="VUID-VkMemoryAllocateInfo-pNext-02390"></a>
If the parameters define an import operation, the external handle is an
Android hardware buffer, and the <code>pNext</code> chain includes an instance
of <a href="#VkMemoryDedicatedAllocateInfo">VkMemoryDedicatedAllocateInfo</a> with <code>image</code> that is not
<a href="#VK_NULL_HANDLE">VK_NULL_HANDLE</a>, each bit set in the usage of <code>image</code> <strong class="purple">must</strong> be
listed in
<a href="vkspec.html#memory-external-android-hardware-buffer-usage">AHardwareBuffer Usage
Equivalence</a>, and if there is a corresponding
<code>AHARDWAREBUFFER_USAGE</code> bit listed that bit <strong class="purple">must</strong> be included in the
Android hardware buffer&#8217;s <code>AHardwareBuffer_Desc</code>::<code>usage</code>.</p>
</li>
</ul>
</div>
</div>
</div>
<div class="sidebarblock">
<div class="content">
<div class="title">Valid Usage (Implicit)</div>
<div class="ulist">
<ul>
<li>
<p><a id="VUID-VkMemoryAllocateInfo-sType-sType"></a> <code>sType</code> <strong class="purple">must</strong> be <code>VK_STRUCTURE_TYPE_MEMORY_ALLOCATE_INFO</code></p>
</li>
<li>
<p><a id="VUID-VkMemoryAllocateInfo-pNext-pNext"></a> Each <code>pNext</code> member of any structure (including this one) in the <code>pNext</code> chain <strong class="purple">must</strong> be either <code>NULL</code> or a pointer to a valid instance of <a href="#VkDedicatedAllocationMemoryAllocateInfoNV">VkDedicatedAllocationMemoryAllocateInfoNV</a>, <a href="#VkExportMemoryAllocateInfo">VkExportMemoryAllocateInfo</a>, <a href="#VkExportMemoryAllocateInfoNV">VkExportMemoryAllocateInfoNV</a>, <a href="#VkExportMemoryWin32HandleInfoKHR">VkExportMemoryWin32HandleInfoKHR</a>, <a href="#VkExportMemoryWin32HandleInfoNV">VkExportMemoryWin32HandleInfoNV</a>, <a href="#VkImportAndroidHardwareBufferInfoANDROID">VkImportAndroidHardwareBufferInfoANDROID</a>, <a href="#VkImportMemoryFdInfoKHR">VkImportMemoryFdInfoKHR</a>, <a href="#VkImportMemoryHostPointerInfoEXT">VkImportMemoryHostPointerInfoEXT</a>, <a href="#VkImportMemoryWin32HandleInfoKHR">VkImportMemoryWin32HandleInfoKHR</a>, <a href="#VkImportMemoryWin32HandleInfoNV">VkImportMemoryWin32HandleInfoNV</a>, <a href="#VkMemoryAllocateFlagsInfo">VkMemoryAllocateFlagsInfo</a>, <a href="#VkMemoryDedicatedAllocateInfo">VkMemoryDedicatedAllocateInfo</a>, or <a href="#VkMemoryPriorityAllocateInfoEXT">VkMemoryPriorityAllocateInfoEXT</a></p>
</li>
<li>
<p><a id="VUID-VkMemoryAllocateInfo-sType-unique"></a> Each <code>sType</code> member in the <code>pNext</code> chain <strong class="purple">must</strong> be unique</p>
</li>
</ul>
</div>
</div>
</div>
</div>
<div class="sect3">
<h4 id="_see_also_562">See Also</h4>
<div class="paragraph">
<p><code>VkDeviceSize</code>, <a href="#VkStructureType">VkStructureType</a>, <a href="#vkAllocateMemory">vkAllocateMemory</a></p>
</div>
</div>
<div class="sect3">
<h4 id="_document_notes_562">Document Notes</h4>
<div class="paragraph">
<p>For more information, see the Vulkan Specification at URL</p>
</div>
<div class="paragraph">
<p><a href="https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VkMemoryAllocateInfo" class="bare">https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VkMemoryAllocateInfo</a></p>
</div>
<div class="paragraph">
<p>This page is extracted from the Vulkan Specification.
Fixes and changes should be made to the Specification, not directly.</p>
</div>
<div style="page-break-after: always;"></div>
</div>
</div>
<div class="sect2">
<h3 id="_vkmemorybarrier3">VkMemoryBarrier(3)</h3>
<div class="sect3">
<h4 id="_name_563">Name</h4>
<div class="paragraph">
<p>VkMemoryBarrier - Structure specifying a global memory barrier</p>
</div>
</div>
<div class="sect3">
<h4 id="_c_specification_563">C Specification</h4>
<div class="paragraph">
<p>The <code>VkMemoryBarrier</code> structure is defined as:</p>
</div>
<div id="VkMemoryBarrier" class="listingblock">
<div class="content">
<pre class="highlight"><code class="language-c++" data-lang="c++">typedef struct VkMemoryBarrier {
    VkStructureType    sType;
    const void*        pNext;
    VkAccessFlags      srcAccessMask;
    VkAccessFlags      dstAccessMask;
} VkMemoryBarrier;</code></pre>
</div>
</div>
</div>
<div class="sect3">
<h4 id="_members_200">Members</h4>
<div class="ulist">
<ul>
<li>
<p><code>sType</code> is the type of this structure.</p>
</li>
<li>
<p><code>pNext</code> is <code>NULL</code> or a pointer to an extension-specific structure.</p>
</li>
<li>
<p><code>srcAccessMask</code> is a bitmask of <a href="#VkAccessFlagBits">VkAccessFlagBits</a> specifying a
<a href="vkspec.html#synchronization-access-masks">source access mask</a>.</p>
</li>
<li>
<p><code>dstAccessMask</code> is a bitmask of <a href="#VkAccessFlagBits">VkAccessFlagBits</a> specifying a
<a href="vkspec.html#synchronization-access-masks">destination access mask</a>.</p>
</li>
</ul>
</div>
</div>
<div class="sect3">
<h4 id="_description_563">Description</h4>
<div class="paragraph">
<p>The first <a href="vkspec.html#synchronization-dependencies-access-scopes">access scope</a> is
limited to access types in the <a href="vkspec.html#synchronization-access-masks">source access
mask</a> specified by <code>srcAccessMask</code>.</p>
</div>
<div class="paragraph">
<p>The second <a href="vkspec.html#synchronization-dependencies-access-scopes">access scope</a> is
limited to access types in the <a href="vkspec.html#synchronization-access-masks">destination
access mask</a> specified by <code>dstAccessMask</code>.</p>
</div>
<div class="sidebarblock">
<div class="content">
<div class="title">Valid Usage (Implicit)</div>
<div class="ulist">
<ul>
<li>
<p><a id="VUID-VkMemoryBarrier-sType-sType"></a> <code>sType</code> <strong class="purple">must</strong> be <code>VK_STRUCTURE_TYPE_MEMORY_BARRIER</code></p>
</li>
<li>
<p><a id="VUID-VkMemoryBarrier-pNext-pNext"></a> <code>pNext</code> <strong class="purple">must</strong> be <code>NULL</code></p>
</li>
<li>
<p><a id="VUID-VkMemoryBarrier-srcAccessMask-parameter"></a> <code>srcAccessMask</code> <strong class="purple">must</strong> be a valid combination of <a href="#VkAccessFlagBits">VkAccessFlagBits</a> values</p>
</li>
<li>
<p><a id="VUID-VkMemoryBarrier-dstAccessMask-parameter"></a> <code>dstAccessMask</code> <strong class="purple">must</strong> be a valid combination of <a href="#VkAccessFlagBits">VkAccessFlagBits</a> values</p>
</li>
</ul>
</div>
</div>
</div>
</div>
<div class="sect3">
<h4 id="_see_also_563">See Also</h4>
<div class="paragraph">
<p><a href="#VkAccessFlags">VkAccessFlags</a>, <a href="#VkStructureType">VkStructureType</a>, <a href="#vkCmdPipelineBarrier">vkCmdPipelineBarrier</a>, <a href="#vkCmdWaitEvents">vkCmdWaitEvents</a></p>
</div>
</div>
<div class="sect3">
<h4 id="_document_notes_563">Document Notes</h4>
<div class="paragraph">
<p>For more information, see the Vulkan Specification at URL</p>
</div>
<div class="paragraph">
<p><a href="https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VkMemoryBarrier" class="bare">https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VkMemoryBarrier</a></p>
</div>
<div class="paragraph">
<p>This page is extracted from the Vulkan Specification.
Fixes and changes should be made to the Specification, not directly.</p>
</div>
<div style="page-break-after: always;"></div>
</div>
</div>
<div class="sect2">
<h3 id="_vkmemorydedicatedallocateinfo3">VkMemoryDedicatedAllocateInfo(3)</h3>
<div class="sect3">
<h4 id="_name_564">Name</h4>
<div class="paragraph">
<p>VkMemoryDedicatedAllocateInfo - Specify a dedicated memory allocation resource</p>
</div>
</div>
<div class="sect3">
<h4 id="_c_specification_564">C Specification</h4>
<div class="paragraph">
<p>If the <code>pNext</code> chain includes a <code>VkMemoryDedicatedAllocateInfo</code>
structure, then that structure includes a handle of the sole buffer or image
resource that the memory <strong class="purple">can</strong> be bound to.</p>
</div>
<div class="paragraph">
<p>The <code>VkMemoryDedicatedAllocateInfo</code> structure is defined as:</p>
</div>
<div id="VkMemoryDedicatedAllocateInfo" class="listingblock">
<div class="content">
<pre class="highlight"><code class="language-c++" data-lang="c++">typedef struct VkMemoryDedicatedAllocateInfo {
    VkStructureType    sType;
    const void*        pNext;
    VkImage            image;
    VkBuffer           buffer;
} VkMemoryDedicatedAllocateInfo;</code></pre>
</div>
</div>
<div class="paragraph">
<p>or the equivalent</p>
</div>
<div id="VkMemoryDedicatedAllocateInfoKHR" class="listingblock">
<div class="content">
<pre class="highlight"><code class="language-c++" data-lang="c++">typedef VkMemoryDedicatedAllocateInfo VkMemoryDedicatedAllocateInfoKHR;</code></pre>
</div>
</div>
</div>
<div class="sect3">
<h4 id="_members_201">Members</h4>
<div class="ulist">
<ul>
<li>
<p><code>sType</code> is the type of this structure.</p>
</li>
<li>
<p><code>pNext</code> is <code>NULL</code> or a pointer to an extension-specific structure.</p>
</li>
<li>
<p><code>image</code> is <a href="#VK_NULL_HANDLE">VK_NULL_HANDLE</a> or a handle of an image which this
memory will be bound to.</p>
</li>
<li>
<p><code>buffer</code> is <a href="#VK_NULL_HANDLE">VK_NULL_HANDLE</a> or a handle of a buffer which this
memory will be bound to.</p>
</li>
</ul>
</div>
</div>
<div class="sect3">
<h4 id="_description_564">Description</h4>
<div class="sidebarblock">
<div class="content">
<div class="title">Valid Usage</div>
<div class="ulist">
<ul>
<li>
<p><a id="VUID-VkMemoryDedicatedAllocateInfo-image-01432"></a>
At least one of <code>image</code> and <code>buffer</code> <strong class="purple">must</strong> be
<a href="#VK_NULL_HANDLE">VK_NULL_HANDLE</a></p>
</li>
<li>
<p><a id="VUID-VkMemoryDedicatedAllocateInfo-image-01433"></a>
If <code>image</code> is not <a href="#VK_NULL_HANDLE">VK_NULL_HANDLE</a>,
<code>VkMemoryAllocateInfo</code>::<code>allocationSize</code> <strong class="purple">must</strong> equal the
<code>VkMemoryRequirements</code>::<code>size</code> of the image</p>
</li>
<li>
<p><a id="VUID-VkMemoryDedicatedAllocateInfo-image-01434"></a>
If <code>image</code> is not <a href="#VK_NULL_HANDLE">VK_NULL_HANDLE</a>, <code>image</code> <strong class="purple">must</strong> have been
created without <code>VK_IMAGE_CREATE_SPARSE_BINDING_BIT</code> set in
<code>VkImageCreateInfo</code>::<code>flags</code></p>
</li>
<li>
<p><a id="VUID-VkMemoryDedicatedAllocateInfo-buffer-01435"></a>
If <code>buffer</code> is not <a href="#VK_NULL_HANDLE">VK_NULL_HANDLE</a>,
<code>VkMemoryAllocateInfo</code>::<code>allocationSize</code> <strong class="purple">must</strong> equal the
<code>VkMemoryRequirements</code>::<code>size</code> of the buffer</p>
</li>
<li>
<p><a id="VUID-VkMemoryDedicatedAllocateInfo-buffer-01436"></a>
If <code>buffer</code> is not <a href="#VK_NULL_HANDLE">VK_NULL_HANDLE</a>, <code>buffer</code> <strong class="purple">must</strong> have
been created without <code>VK_BUFFER_CREATE_SPARSE_BINDING_BIT</code> set in
<a href="#VkBufferCreateInfo">VkBufferCreateInfo</a>::<code>flags</code></p>
</li>
<li>
<p><a id="VUID-VkMemoryDedicatedAllocateInfo-image-01876"></a>
If <code>image</code> is not <a href="#VK_NULL_HANDLE">VK_NULL_HANDLE</a> and
<a href="#VkMemoryAllocateInfo">VkMemoryAllocateInfo</a> defines a memory import operation with handle
type <code>VK_EXTERNAL_MEMORY_HANDLE_TYPE_OPAQUE_WIN32_BIT</code>,
<code>VK_EXTERNAL_MEMORY_HANDLE_TYPE_OPAQUE_WIN32_KMT_BIT</code>,
<code>VK_EXTERNAL_MEMORY_HANDLE_TYPE_D3D11_TEXTURE_BIT</code>,
<code>VK_EXTERNAL_MEMORY_HANDLE_TYPE_D3D11_TEXTURE_KMT_BIT</code>,
<code>VK_EXTERNAL_MEMORY_HANDLE_TYPE_D3D12_HEAP_BIT</code>, or
<code>VK_EXTERNAL_MEMORY_HANDLE_TYPE_D3D12_RESOURCE_BIT</code>, and the
external handle was created by the Vulkan API, then the memory being
imported <strong class="purple">must</strong> also be a dedicated image allocation and <code>image</code> must
be identical to the image associated with the imported memory.</p>
</li>
<li>
<p><a id="VUID-VkMemoryDedicatedAllocateInfo-buffer-01877"></a>
If <code>buffer</code> is not <a href="#VK_NULL_HANDLE">VK_NULL_HANDLE</a> and
<a href="#VkMemoryAllocateInfo">VkMemoryAllocateInfo</a> defines a memory import operation with handle
type <code>VK_EXTERNAL_MEMORY_HANDLE_TYPE_OPAQUE_WIN32_BIT</code>,
<code>VK_EXTERNAL_MEMORY_HANDLE_TYPE_OPAQUE_WIN32_KMT_BIT</code>,
<code>VK_EXTERNAL_MEMORY_HANDLE_TYPE_D3D11_TEXTURE_BIT</code>,
<code>VK_EXTERNAL_MEMORY_HANDLE_TYPE_D3D11_TEXTURE_KMT_BIT</code>,
<code>VK_EXTERNAL_MEMORY_HANDLE_TYPE_D3D12_HEAP_BIT</code>, or
<code>VK_EXTERNAL_MEMORY_HANDLE_TYPE_D3D12_RESOURCE_BIT</code>, and the
external handle was created by the Vulkan API, then the memory being
imported <strong class="purple">must</strong> also be a dedicated buffer allocation and <code>buffer</code>
must be identical to the buffer associated with the imported memory.</p>
</li>
<li>
<p><a id="VUID-VkMemoryDedicatedAllocateInfo-image-01878"></a>
If <code>image</code> is not <a href="#VK_NULL_HANDLE">VK_NULL_HANDLE</a> and
<a href="#VkMemoryAllocateInfo">VkMemoryAllocateInfo</a> defines a memory import operation with handle
type <code>VK_EXTERNAL_MEMORY_HANDLE_TYPE_OPAQUE_FD_BIT</code>, the memory
being imported <strong class="purple">must</strong> also be a dedicated image allocation and
<code>image</code> must be identical to the image associated with the imported
memory.</p>
</li>
<li>
<p><a id="VUID-VkMemoryDedicatedAllocateInfo-buffer-01879"></a>
If <code>buffer</code> is not <a href="#VK_NULL_HANDLE">VK_NULL_HANDLE</a> and
<a href="#VkMemoryAllocateInfo">VkMemoryAllocateInfo</a> defines a memory import operation with handle
type <code>VK_EXTERNAL_MEMORY_HANDLE_TYPE_OPAQUE_FD_BIT</code>, the memory
being imported <strong class="purple">must</strong> also be a dedicated buffer allocation and
<code>buffer</code> must be identical to the buffer associated with the
imported memory.</p>
</li>
<li>
<p><a id="VUID-VkMemoryDedicatedAllocateInfo-image-01797"></a>
If <code>image</code> is not <a href="#VK_NULL_HANDLE">VK_NULL_HANDLE</a>, <code>image</code> <strong class="purple">must</strong> not have
been created with <code>VK_IMAGE_CREATE_DISJOINT_BIT</code> set in
<a href="#VkImageCreateInfo">VkImageCreateInfo</a>::<code>flags</code></p>
</li>
</ul>
</div>
</div>
</div>
<div class="sidebarblock">
<div class="content">
<div class="title">Valid Usage (Implicit)</div>
<div class="ulist">
<ul>
<li>
<p><a id="VUID-VkMemoryDedicatedAllocateInfo-sType-sType"></a> <code>sType</code> <strong class="purple">must</strong> be <code>VK_STRUCTURE_TYPE_MEMORY_DEDICATED_ALLOCATE_INFO</code></p>
</li>
<li>
<p><a id="VUID-VkMemoryDedicatedAllocateInfo-image-parameter"></a> If <code>image</code> is not <a href="#VK_NULL_HANDLE">VK_NULL_HANDLE</a>, <code>image</code> <strong class="purple">must</strong> be a valid <code>VkImage</code> handle</p>
</li>
<li>
<p><a id="VUID-VkMemoryDedicatedAllocateInfo-buffer-parameter"></a> If <code>buffer</code> is not <a href="#VK_NULL_HANDLE">VK_NULL_HANDLE</a>, <code>buffer</code> <strong class="purple">must</strong> be a valid <code>VkBuffer</code> handle</p>
</li>
<li>
<p><a id="VUID-VkMemoryDedicatedAllocateInfo-commonparent"></a> Both of <code>buffer</code>, and <code>image</code> that are valid handles <strong class="purple">must</strong> have been created, allocated, or retrieved from the same <code>VkDevice</code></p>
</li>
</ul>
</div>
</div>
</div>
</div>
<div class="sect3">
<h4 id="_see_also_564">See Also</h4>
<div class="paragraph">
<p><a href="#VkBuffer">VkBuffer</a>, <a href="#VkImage">VkImage</a>, <a href="#VkStructureType">VkStructureType</a></p>
</div>
</div>
<div class="sect3">
<h4 id="_document_notes_564">Document Notes</h4>
<div class="paragraph">
<p>For more information, see the Vulkan Specification at URL</p>
</div>
<div class="paragraph">
<p><a href="https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VkMemoryDedicatedAllocateInfo" class="bare">https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VkMemoryDedicatedAllocateInfo</a></p>
</div>
<div class="paragraph">
<p>This page is extracted from the Vulkan Specification.
Fixes and changes should be made to the Specification, not directly.</p>
</div>
<div style="page-break-after: always;"></div>
</div>
</div>
<div class="sect2">
<h3 id="_vkmemorydedicatedrequirements3">VkMemoryDedicatedRequirements(3)</h3>
<div class="sect3">
<h4 id="_name_565">Name</h4>
<div class="paragraph">
<p>VkMemoryDedicatedRequirements - Structure describing dedicated allocation requirements of buffer and image resources</p>
</div>
</div>
<div class="sect3">
<h4 id="_c_specification_565">C Specification</h4>
<div class="paragraph">
<p>To determine the dedicated allocation requirements of a buffer or image
resource, add a <a href="#VkMemoryDedicatedRequirements">VkMemoryDedicatedRequirements</a> structure to the
<code>pNext</code> chain of the <a href="#VkMemoryRequirements2">VkMemoryRequirements2</a> structure passed as the
<code>pMemoryRequirements</code> parameter of <code>vkGetBufferMemoryRequirements2</code>
or <code>vkGetImageMemoryRequirements2</code>.</p>
</div>
<div class="paragraph">
<p>The <code>VkMemoryDedicatedRequirements</code> structure is defined as:</p>
</div>
<div id="VkMemoryDedicatedRequirements" class="listingblock">
<div class="content">
<pre class="highlight"><code class="language-c++" data-lang="c++">typedef struct VkMemoryDedicatedRequirements {
    VkStructureType    sType;
    void*              pNext;
    VkBool32           prefersDedicatedAllocation;
    VkBool32           requiresDedicatedAllocation;
} VkMemoryDedicatedRequirements;</code></pre>
</div>
</div>
<div class="paragraph">
<p>or the equivalent</p>
</div>
<div id="VkMemoryDedicatedRequirementsKHR" class="listingblock">
<div class="content">
<pre class="highlight"><code class="language-c++" data-lang="c++">typedef VkMemoryDedicatedRequirements VkMemoryDedicatedRequirementsKHR;</code></pre>
</div>
</div>
</div>
<div class="sect3">
<h4 id="_members_202">Members</h4>
<div class="ulist">
<ul>
<li>
<p><code>sType</code> is the type of this structure.</p>
</li>
<li>
<p><code>pNext</code> is <code>NULL</code> or a pointer to an extension-specific structure.</p>
</li>
<li>
<p><code>prefersDedicatedAllocation</code> specifies that the implementation would
prefer a dedicated allocation for this resource.
The application is still free to suballocate the resource but it <strong class="purple">may</strong>
get better performance if a dedicated allocation is used.</p>
</li>
<li>
<p><code>requiresDedicatedAllocation</code> specifies that a dedicated allocation
is required for this resource.</p>
</li>
</ul>
</div>
</div>
<div class="sect3">
<h4 id="_description_565">Description</h4>
<div class="paragraph">
<p>When the implementation sets <code>requiresDedicatedAllocation</code> to
<code>VK_TRUE</code>, it <strong class="purple">must</strong> also set <code>prefersDedicatedAllocation</code> to
<code>VK_TRUE</code>.</p>
</div>
<div class="paragraph">
<p>If the <code>VkMemoryDedicatedRequirements</code> structure is included in the
<code>pNext</code> chain of the <a href="#VkMemoryRequirements2">VkMemoryRequirements2</a> structure passed as the
<code>pMemoryRequirements</code> parameter of a
<code>vkGetBufferMemoryRequirements2</code> call, <code>requiresDedicatedAllocation</code>
<strong class="purple">may</strong> be <code>VK_TRUE</code> under one of the following conditions:</p>
</div>
<div class="ulist">
<ul>
<li>
<p>The <code>pNext</code> chain of <code>VkBufferCreateInfo</code> for the call to
<code>vkCreateBuffer</code> used to create the buffer being queried contained
an instance of <code>VkExternalMemoryBufferCreateInfo</code>, and any of the
handle types specified in
<code>VkExternalMemoryBufferCreateInfo</code>::<code>handleTypes</code> requires
dedicated allocation, as reported by
<a href="#vkGetPhysicalDeviceExternalBufferProperties">vkGetPhysicalDeviceExternalBufferProperties</a> in
<code>VkExternalBufferProperties</code>::<code>externalMemoryProperties</code>::<code>externalMemoryFeatures</code>,
the <code>requiresDedicatedAllocation</code> field will be set to
<code>VK_TRUE</code>.</p>
</li>
</ul>
</div>
<div class="paragraph">
<p>In all other cases, <code>requiresDedicatedAllocation</code> <strong class="purple">must</strong> be set to
<code>VK_FALSE</code> by the implementation whenever a
<code>VkMemoryDedicatedRequirements</code> structure is included in the <code>pNext</code>
chain of the <code>VkMemoryRequirements2</code> structure passed to a call to
<code>vkGetBufferMemoryRequirements2</code>.</p>
</div>
<div class="paragraph">
<p>If the <code>VkMemoryDedicatedRequirements</code> structure is included in the
<code>pNext</code> chain of the <code>VkMemoryRequirements2</code> structure passed as the
<code>pMemoryRequirements</code> parameter of a
<code>vkGetBufferMemoryRequirements2</code> call and
<code>VK_BUFFER_CREATE_SPARSE_BINDING_BIT</code> was set in
<code>VkBufferCreateInfo</code>::<code>flags</code> when <code>buffer</code> was created then the
implementation <strong class="purple">must</strong> set both <code>prefersDedicatedAllocation</code> and
<code>requiresDedicatedAllocation</code> to <code>VK_FALSE</code>.</p>
</div>
<div class="paragraph">
<p>If the <code>VkMemoryDedicatedRequirements</code> structure is included in the
<code>pNext</code> chain of the <code>VkMemoryRequirements2</code> structure passed as the
<code>pMemoryRequirements</code> parameter of a <code>vkGetImageMemoryRequirements2</code>
call, <code>requiresDedicatedAllocation</code> <strong class="purple">may</strong> be <code>VK_TRUE</code> under one of
the following conditions:</p>
</div>
<div class="ulist">
<ul>
<li>
<p>The <code>pNext</code> chain of <code>VkImageCreateInfo</code> for the call to
<code>vkCreateImage</code> used to create the image being queried contained an
instance of <code>VkExternalMemoryImageCreateInfo</code>, and any of the handle
types specified in
<code>VkExternalMemoryImageCreateInfo</code>::<code>handleTypes</code> requires
dedicated allocation, as reported by
<a href="#vkGetPhysicalDeviceImageFormatProperties2">vkGetPhysicalDeviceImageFormatProperties2</a> in
<code>VkExternalImageFormatProperties</code>::<code>externalMemoryProperties</code>::<code>externalMemoryFeatures</code>,
the <code>requiresDedicatedAllocation</code> field will be set to
<code>VK_TRUE</code>.</p>
</li>
</ul>
</div>
<div class="paragraph">
<p>In all other cases, <code>requiresDedicatedAllocation</code> <strong class="purple">must</strong> be set to
<code>VK_FALSE</code> by the implementation whenever a
<code>VkMemoryDedicatedRequirements</code> structure is included in the <code>pNext</code>
chain of the <code>VkMemoryRequirements2</code> structure passed to a call to
<code>vkGetImageMemoryRequirements2</code>.</p>
</div>
<div class="paragraph">
<p>If the <code>VkMemoryDedicatedRequirements</code> structure is included in the
<code>pNext</code> chain of the <code>VkMemoryRequirements2</code> structure passed as the
<code>pMemoryRequirements</code> parameter of a <code>vkGetImageMemoryRequirements2</code>
call and <code>VK_IMAGE_CREATE_SPARSE_BINDING_BIT</code> was set in
<code>VkImageCreateInfo</code>::<code>flags</code> when <code>image</code> was created then the
implementation <strong class="purple">must</strong> set both <code>prefersDedicatedAllocation</code> and
<code>requiresDedicatedAllocation</code> to <code>VK_FALSE</code>.</p>
</div>
<div class="sidebarblock">
<div class="content">
<div class="title">Valid Usage (Implicit)</div>
<div class="ulist">
<ul>
<li>
<p><a id="VUID-VkMemoryDedicatedRequirements-sType-sType"></a> <code>sType</code> <strong class="purple">must</strong> be <code>VK_STRUCTURE_TYPE_MEMORY_DEDICATED_REQUIREMENTS</code></p>
</li>
</ul>
</div>
</div>
</div>
</div>
<div class="sect3">
<h4 id="_see_also_565">See Also</h4>
<div class="paragraph">
<p><code>VkBool32</code>, <a href="#VkStructureType">VkStructureType</a></p>
</div>
</div>
<div class="sect3">
<h4 id="_document_notes_565">Document Notes</h4>
<div class="paragraph">
<p>For more information, see the Vulkan Specification at URL</p>
</div>
<div class="paragraph">
<p><a href="https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VkMemoryDedicatedRequirements" class="bare">https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VkMemoryDedicatedRequirements</a></p>
</div>
<div class="paragraph">
<p>This page is extracted from the Vulkan Specification.
Fixes and changes should be made to the Specification, not directly.</p>
</div>
<div style="page-break-after: always;"></div>
</div>
</div>
<div class="sect2">
<h3 id="_vkmemoryfdpropertieskhr3">VkMemoryFdPropertiesKHR(3)</h3>
<div class="sect3">
<h4 id="_name_566">Name</h4>
<div class="paragraph">
<p>VkMemoryFdPropertiesKHR - Properties of External Memory File Descriptors</p>
</div>
</div>
<div class="sect3">
<h4 id="_c_specification_566">C Specification</h4>
<div class="paragraph">
<p>The <code>VkMemoryFdPropertiesKHR</code> structure returned is defined as:</p>
</div>
<div id="VkMemoryFdPropertiesKHR" class="listingblock">
<div class="content">
<pre class="highlight"><code class="language-c++" data-lang="c++">typedef struct VkMemoryFdPropertiesKHR {
    VkStructureType    sType;
    void*              pNext;
    uint32_t           memoryTypeBits;
} VkMemoryFdPropertiesKHR;</code></pre>
</div>
</div>
</div>
<div class="sect3">
<h4 id="_members_203">Members</h4>
<div class="ulist">
<ul>
<li>
<p><code>sType</code> is the type of this structure.</p>
</li>
<li>
<p><code>pNext</code> is <code>NULL</code> or a pointer to an extension-specific structure.</p>
</li>
<li>
<p><code>memoryTypeBits</code> is a bitmask containing one bit set for every
memory type which the specified file descriptor <strong class="purple">can</strong> be imported as.</p>
</li>
</ul>
</div>
</div>
<div class="sect3">
<h4 id="_description_566">Description</h4>
<div class="sidebarblock">
<div class="content">
<div class="title">Valid Usage (Implicit)</div>
<div class="ulist">
<ul>
<li>
<p><a id="VUID-VkMemoryFdPropertiesKHR-sType-sType"></a> <code>sType</code> <strong class="purple">must</strong> be <code>VK_STRUCTURE_TYPE_MEMORY_FD_PROPERTIES_KHR</code></p>
</li>
<li>
<p><a id="VUID-VkMemoryFdPropertiesKHR-pNext-pNext"></a> <code>pNext</code> <strong class="purple">must</strong> be <code>NULL</code></p>
</li>
</ul>
</div>
</div>
</div>
</div>
<div class="sect3">
<h4 id="_see_also_566">See Also</h4>
<div class="paragraph">
<p><a href="#VkStructureType">VkStructureType</a>, <a href="#vkGetMemoryFdPropertiesKHR">vkGetMemoryFdPropertiesKHR</a></p>
</div>
</div>
<div class="sect3">
<h4 id="_document_notes_566">Document Notes</h4>
<div class="paragraph">
<p>For more information, see the Vulkan Specification at URL</p>
</div>
<div class="paragraph">
<p><a href="https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VkMemoryFdPropertiesKHR" class="bare">https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VkMemoryFdPropertiesKHR</a></p>
</div>
<div class="paragraph">
<p>This page is extracted from the Vulkan Specification.
Fixes and changes should be made to the Specification, not directly.</p>
</div>
<div style="page-break-after: always;"></div>
</div>
</div>
<div class="sect2">
<h3 id="_vkmemorygetandroidhardwarebufferinfoandroid3">VkMemoryGetAndroidHardwareBufferInfoANDROID(3)</h3>
<div class="sect3">
<h4 id="_name_567">Name</h4>
<div class="paragraph">
<p>VkMemoryGetAndroidHardwareBufferInfoANDROID - Structure describing an Android hardware buffer memory export operation</p>
</div>
</div>
<div class="sect3">
<h4 id="_c_specification_567">C Specification</h4>
<div class="paragraph">
<p>The <code>VkMemoryGetAndroidHardwareBufferInfoANDROID</code> structure is defined
as:</p>
</div>
<div id="VkMemoryGetAndroidHardwareBufferInfoANDROID" class="listingblock">
<div class="content">
<pre class="highlight"><code class="language-c++" data-lang="c++">typedef struct VkMemoryGetAndroidHardwareBufferInfoANDROID {
    VkStructureType    sType;
    const void*        pNext;
    VkDeviceMemory     memory;
} VkMemoryGetAndroidHardwareBufferInfoANDROID;</code></pre>
</div>
</div>
</div>
<div class="sect3">
<h4 id="_members_204">Members</h4>
<div class="ulist">
<ul>
<li>
<p><code>sType</code> is the type of this structure.</p>
</li>
<li>
<p><code>pNext</code> is <code>NULL</code> or a pointer to an extension-specific structure.</p>
</li>
<li>
<p><code>memory</code> is the memory object from which the Android hardware buffer
will be exported.</p>
</li>
</ul>
</div>
</div>
<div class="sect3">
<h4 id="_description_567">Description</h4>
<div class="sidebarblock">
<div class="content">
<div class="title">Valid Usage</div>
<div class="ulist">
<ul>
<li>
<p><a id="VUID-VkMemoryGetAndroidHardwareBufferInfoANDROID-handleTypes-01882"></a>
<code>VK_EXTERNAL_MEMORY_HANDLE_TYPE_ANDROID_HARDWARE_BUFFER_BIT_ANDROID</code>
<strong class="purple">must</strong> have been included in
<a href="#VkExportMemoryAllocateInfoKHR">VkExportMemoryAllocateInfoKHR</a>::<code>handleTypes</code> when <code>memory</code>
was created.</p>
</li>
<li>
<p><a id="VUID-VkMemoryGetAndroidHardwareBufferInfoANDROID-pNext-01883"></a>
If the <code>pNext</code> chain of the <a href="#VkMemoryAllocateInfo">VkMemoryAllocateInfo</a> used to
allocate <code>memory</code> included a <a href="#VkMemoryDedicatedAllocateInfo">VkMemoryDedicatedAllocateInfo</a>
with non-<code>NULL</code> <code>image</code> member, then that <code>image</code> <strong class="purple">must</strong> already
be bound to <code>memory</code>.</p>
</li>
</ul>
</div>
</div>
</div>
<div class="sidebarblock">
<div class="content">
<div class="title">Valid Usage (Implicit)</div>
<div class="ulist">
<ul>
<li>
<p><a id="VUID-VkMemoryGetAndroidHardwareBufferInfoANDROID-sType-sType"></a> <code>sType</code> <strong class="purple">must</strong> be <code>VK_STRUCTURE_TYPE_MEMORY_GET_ANDROID_HARDWARE_BUFFER_INFO_ANDROID</code></p>
</li>
<li>
<p><a id="VUID-VkMemoryGetAndroidHardwareBufferInfoANDROID-pNext-pNext"></a> <code>pNext</code> <strong class="purple">must</strong> be <code>NULL</code></p>
</li>
<li>
<p><a id="VUID-VkMemoryGetAndroidHardwareBufferInfoANDROID-memory-parameter"></a> <code>memory</code> <strong class="purple">must</strong> be a valid <code>VkDeviceMemory</code> handle</p>
</li>
</ul>
</div>
</div>
</div>
</div>
<div class="sect3">
<h4 id="_see_also_567">See Also</h4>
<div class="paragraph">
<p><a href="#VkDeviceMemory">VkDeviceMemory</a>, <a href="#VkStructureType">VkStructureType</a>, <a href="#vkGetMemoryAndroidHardwareBufferANDROID">vkGetMemoryAndroidHardwareBufferANDROID</a></p>
</div>
</div>
<div class="sect3">
<h4 id="_document_notes_567">Document Notes</h4>
<div class="paragraph">
<p>For more information, see the Vulkan Specification at URL</p>
</div>
<div class="paragraph">
<p><a href="https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VkMemoryGetAndroidHardwareBufferInfoANDROID" class="bare">https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VkMemoryGetAndroidHardwareBufferInfoANDROID</a></p>
</div>
<div class="paragraph">
<p>This page is extracted from the Vulkan Specification.
Fixes and changes should be made to the Specification, not directly.</p>
</div>
<div style="page-break-after: always;"></div>
</div>
</div>
<div class="sect2">
<h3 id="_vkmemorygetfdinfokhr3">VkMemoryGetFdInfoKHR(3)</h3>
<div class="sect3">
<h4 id="_name_568">Name</h4>
<div class="paragraph">
<p>VkMemoryGetFdInfoKHR - Structure describing a POSIX FD semaphore export operation</p>
</div>
</div>
<div class="sect3">
<h4 id="_c_specification_568">C Specification</h4>
<div class="paragraph">
<p>The <code>VkMemoryGetFdInfoKHR</code> structure is defined as:</p>
</div>
<div id="VkMemoryGetFdInfoKHR" class="listingblock">
<div class="content">
<pre class="highlight"><code class="language-c++" data-lang="c++">typedef struct VkMemoryGetFdInfoKHR {
    VkStructureType                       sType;
    const void*                           pNext;
    VkDeviceMemory                        memory;
    VkExternalMemoryHandleTypeFlagBits    handleType;
} VkMemoryGetFdInfoKHR;</code></pre>
</div>
</div>
</div>
<div class="sect3">
<h4 id="_members_205">Members</h4>
<div class="ulist">
<ul>
<li>
<p><code>sType</code> is the type of this structure.</p>
</li>
<li>
<p><code>pNext</code> is <code>NULL</code> or a pointer to an extension-specific structure.</p>
</li>
<li>
<p><code>memory</code> is the memory object from which the handle will be
exported.</p>
</li>
<li>
<p><code>handleType</code> is the type of handle requested.</p>
</li>
</ul>
</div>
</div>
<div class="sect3">
<h4 id="_description_568">Description</h4>
<div class="paragraph">
<p>The properties of the file descriptor exported depend on the value of
<code>handleType</code>.
See <a href="#VkExternalMemoryHandleTypeFlagBits">VkExternalMemoryHandleTypeFlagBits</a> for a description of the
properties of the defined external memory handle types.</p>
</div>
<div class="admonitionblock note">
<table>
<tr>
<td class="icon">
<i class="fa icon-note" title="Note"></i>
</td>
<td class="content">
<div class="title">Note</div>
<div class="paragraph">
<p>The size of the exported file <strong class="purple">may</strong> be larger than the size requested by
<a href="#VkMemoryAllocateInfo">VkMemoryAllocateInfo</a>::allocationSize.
If <code>handleType</code> is <code>VK_EXTERNAL_MEMORY_HANDLE_TYPE_DMA_BUF_BIT_EXT</code>,
then the application <strong class="purple">can</strong> query the file&#8217;s actual size with
<a href="man:lseek(2)">lseek(2)</a>.</p>
</div>
</td>
</tr>
</table>
</div>
<div class="sidebarblock">
<div class="content">
<div class="title">Valid Usage</div>
<div class="ulist">
<ul>
<li>
<p><a id="VUID-VkMemoryGetFdInfoKHR-handleType-00671"></a>
<code>handleType</code> <strong class="purple">must</strong> have been included in
<a href="#VkExportMemoryAllocateInfo">VkExportMemoryAllocateInfo</a>::<code>handleTypes</code> when <code>memory</code>
was created.</p>
</li>
<li>
<p><a id="VUID-VkMemoryGetFdInfoKHR-handleType-00672"></a>
<code>handleType</code> <strong class="purple">must</strong> be defined as a POSIX file descriptor handle.</p>
</li>
</ul>
</div>
</div>
</div>
<div class="sidebarblock">
<div class="content">
<div class="title">Valid Usage (Implicit)</div>
<div class="ulist">
<ul>
<li>
<p><a id="VUID-VkMemoryGetFdInfoKHR-sType-sType"></a> <code>sType</code> <strong class="purple">must</strong> be <code>VK_STRUCTURE_TYPE_MEMORY_GET_FD_INFO_KHR</code></p>
</li>
<li>
<p><a id="VUID-VkMemoryGetFdInfoKHR-pNext-pNext"></a> <code>pNext</code> <strong class="purple">must</strong> be <code>NULL</code></p>
</li>
<li>
<p><a id="VUID-VkMemoryGetFdInfoKHR-memory-parameter"></a> <code>memory</code> <strong class="purple">must</strong> be a valid <code>VkDeviceMemory</code> handle</p>
</li>
<li>
<p><a id="VUID-VkMemoryGetFdInfoKHR-handleType-parameter"></a> <code>handleType</code> <strong class="purple">must</strong> be a valid <a href="#VkExternalMemoryHandleTypeFlagBits">VkExternalMemoryHandleTypeFlagBits</a> value</p>
</li>
</ul>
</div>
</div>
</div>
</div>
<div class="sect3">
<h4 id="_see_also_568">See Also</h4>
<div class="paragraph">
<p><a href="#VkDeviceMemory">VkDeviceMemory</a>, <a href="#VkExternalMemoryHandleTypeFlagBits">VkExternalMemoryHandleTypeFlagBits</a>, <a href="#VkStructureType">VkStructureType</a>, <a href="#vkGetMemoryFdKHR">vkGetMemoryFdKHR</a></p>
</div>
</div>
<div class="sect3">
<h4 id="_document_notes_568">Document Notes</h4>
<div class="paragraph">
<p>For more information, see the Vulkan Specification at URL</p>
</div>
<div class="paragraph">
<p><a href="https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VkMemoryGetFdInfoKHR" class="bare">https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VkMemoryGetFdInfoKHR</a></p>
</div>
<div class="paragraph">
<p>This page is extracted from the Vulkan Specification.
Fixes and changes should be made to the Specification, not directly.</p>
</div>
<div style="page-break-after: always;"></div>
</div>
</div>
<div class="sect2">
<h3 id="_vkmemorygetwin32handleinfokhr3">VkMemoryGetWin32HandleInfoKHR(3)</h3>
<div class="sect3">
<h4 id="_name_569">Name</h4>
<div class="paragraph">
<p>VkMemoryGetWin32HandleInfoKHR - Structure describing a Win32 handle semaphore export operation</p>
</div>
</div>
<div class="sect3">
<h4 id="_c_specification_569">C Specification</h4>
<div class="paragraph">
<p>The <code>VkMemoryGetWin32HandleInfoKHR</code> structure is defined as:</p>
</div>
<div id="VkMemoryGetWin32HandleInfoKHR" class="listingblock">
<div class="content">
<pre class="highlight"><code class="language-c++" data-lang="c++">typedef struct VkMemoryGetWin32HandleInfoKHR {
    VkStructureType                       sType;
    const void*                           pNext;
    VkDeviceMemory                        memory;
    VkExternalMemoryHandleTypeFlagBits    handleType;
} VkMemoryGetWin32HandleInfoKHR;</code></pre>
</div>
</div>
</div>
<div class="sect3">
<h4 id="_members_206">Members</h4>
<div class="ulist">
<ul>
<li>
<p><code>sType</code> is the type of this structure.</p>
</li>
<li>
<p><code>pNext</code> is <code>NULL</code> or a pointer to an extension-specific structure.</p>
</li>
<li>
<p><code>memory</code> is the memory object from which the handle will be
exported.</p>
</li>
<li>
<p><code>handleType</code> is the type of handle requested.</p>
</li>
</ul>
</div>
</div>
<div class="sect3">
<h4 id="_description_569">Description</h4>
<div class="paragraph">
<p>The properties of the handle returned depend on the value of
<code>handleType</code>.
See <a href="#VkExternalMemoryHandleTypeFlagBits">VkExternalMemoryHandleTypeFlagBits</a> for a description of the
properties of the defined external memory handle types.</p>
</div>
<div class="sidebarblock">
<div class="content">
<div class="title">Valid Usage</div>
<div class="ulist">
<ul>
<li>
<p><a id="VUID-VkMemoryGetWin32HandleInfoKHR-handleType-00662"></a>
<code>handleType</code> <strong class="purple">must</strong> have been included in
<a href="#VkExportMemoryAllocateInfo">VkExportMemoryAllocateInfo</a>::<code>handleTypes</code> when <code>memory</code>
was created.</p>
</li>
<li>
<p><a id="VUID-VkMemoryGetWin32HandleInfoKHR-handleType-00663"></a>
If <code>handleType</code> is defined as an NT handle,
<a href="#vkGetMemoryWin32HandleKHR">vkGetMemoryWin32HandleKHR</a> <strong class="purple">must</strong> be called no more than once for
each valid unique combination of <code>memory</code> and <code>handleType</code>.</p>
</li>
<li>
<p><a id="VUID-VkMemoryGetWin32HandleInfoKHR-handleType-00664"></a>
<code>handleType</code> <strong class="purple">must</strong> be defined as an NT handle or a global share
handle.</p>
</li>
</ul>
</div>
</div>
</div>
<div class="sidebarblock">
<div class="content">
<div class="title">Valid Usage (Implicit)</div>
<div class="ulist">
<ul>
<li>
<p><a id="VUID-VkMemoryGetWin32HandleInfoKHR-sType-sType"></a> <code>sType</code> <strong class="purple">must</strong> be <code>VK_STRUCTURE_TYPE_MEMORY_GET_WIN32_HANDLE_INFO_KHR</code></p>
</li>
<li>
<p><a id="VUID-VkMemoryGetWin32HandleInfoKHR-pNext-pNext"></a> <code>pNext</code> <strong class="purple">must</strong> be <code>NULL</code></p>
</li>
<li>
<p><a id="VUID-VkMemoryGetWin32HandleInfoKHR-memory-parameter"></a> <code>memory</code> <strong class="purple">must</strong> be a valid <code>VkDeviceMemory</code> handle</p>
</li>
<li>
<p><a id="VUID-VkMemoryGetWin32HandleInfoKHR-handleType-parameter"></a> <code>handleType</code> <strong class="purple">must</strong> be a valid <a href="#VkExternalMemoryHandleTypeFlagBits">VkExternalMemoryHandleTypeFlagBits</a> value</p>
</li>
</ul>
</div>
</div>
</div>
</div>
<div class="sect3">
<h4 id="_see_also_569">See Also</h4>
<div class="paragraph">
<p><a href="#VkDeviceMemory">VkDeviceMemory</a>, <a href="#VkExternalMemoryHandleTypeFlagBits">VkExternalMemoryHandleTypeFlagBits</a>, <a href="#VkStructureType">VkStructureType</a>, <a href="#vkGetMemoryWin32HandleKHR">vkGetMemoryWin32HandleKHR</a></p>
</div>
</div>
<div class="sect3">
<h4 id="_document_notes_569">Document Notes</h4>
<div class="paragraph">
<p>For more information, see the Vulkan Specification at URL</p>
</div>
<div class="paragraph">
<p><a href="https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VkMemoryGetWin32HandleInfoKHR" class="bare">https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VkMemoryGetWin32HandleInfoKHR</a></p>
</div>
<div class="paragraph">
<p>This page is extracted from the Vulkan Specification.
Fixes and changes should be made to the Specification, not directly.</p>
</div>
<div style="page-break-after: always;"></div>
</div>
</div>
<div class="sect2">
<h3 id="_vkmemoryheap3">VkMemoryHeap(3)</h3>
<div class="sect3">
<h4 id="_name_570">Name</h4>
<div class="paragraph">
<p>VkMemoryHeap - Structure specifying a memory heap</p>
</div>
</div>
<div class="sect3">
<h4 id="_c_specification_570">C Specification</h4>
<div class="paragraph">
<p>The <code>VkMemoryHeap</code> structure is defined as:</p>
</div>
<div id="VkMemoryHeap" class="listingblock">
<div class="content">
<pre class="highlight"><code class="language-c++" data-lang="c++">typedef struct VkMemoryHeap {
    VkDeviceSize         size;
    VkMemoryHeapFlags    flags;
} VkMemoryHeap;</code></pre>
</div>
</div>
</div>
<div class="sect3">
<h4 id="_members_207">Members</h4>
<div class="ulist">
<ul>
<li>
<p><code>size</code> is the total memory size in bytes in the heap.</p>
</li>
<li>
<p><code>flags</code> is a bitmask of <a href="#VkMemoryHeapFlagBits">VkMemoryHeapFlagBits</a> specifying
attribute flags for the heap.</p>
</li>
</ul>
</div>
</div>
<div class="sect3">
<h4 id="_description_570">Description</h4>

</div>
<div class="sect3">
<h4 id="_see_also_570">See Also</h4>
<div class="paragraph">
<p><code>VkDeviceSize</code>, <a href="#VkMemoryHeapFlags">VkMemoryHeapFlags</a>, <a href="#VkPhysicalDeviceMemoryProperties">VkPhysicalDeviceMemoryProperties</a></p>
</div>
</div>
<div class="sect3">
<h4 id="_document_notes_570">Document Notes</h4>
<div class="paragraph">
<p>For more information, see the Vulkan Specification at URL</p>
</div>
<div class="paragraph">
<p><a href="https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VkMemoryHeap" class="bare">https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VkMemoryHeap</a></p>
</div>
<div class="paragraph">
<p>This page is extracted from the Vulkan Specification.
Fixes and changes should be made to the Specification, not directly.</p>
</div>
<div style="page-break-after: always;"></div>
</div>
</div>
<div class="sect2">
<h3 id="_vkmemoryhostpointerpropertiesext3">VkMemoryHostPointerPropertiesEXT(3)</h3>
<div class="sect3">
<h4 id="_name_571">Name</h4>
<div class="paragraph">
<p>VkMemoryHostPointerPropertiesEXT - Properties of external memory host pointer</p>
</div>
</div>
<div class="sect3">
<h4 id="_c_specification_571">C Specification</h4>
<div class="paragraph">
<p>The <code>VkMemoryHostPointerPropertiesEXT</code> structure is defined as:</p>
</div>
<div id="VkMemoryHostPointerPropertiesEXT" class="listingblock">
<div class="content">
<pre class="highlight"><code class="language-c++" data-lang="c++">typedef struct VkMemoryHostPointerPropertiesEXT {
    VkStructureType    sType;
    void*              pNext;
    uint32_t           memoryTypeBits;
} VkMemoryHostPointerPropertiesEXT;</code></pre>
</div>
</div>
</div>
<div class="sect3">
<h4 id="_members_208">Members</h4>
<div class="ulist">
<ul>
<li>
<p><code>sType</code> is the type of this structure.</p>
</li>
<li>
<p><code>pNext</code> is <code>NULL</code> or a pointer to an extension-specific structure.</p>
</li>
<li>
<p><code>memoryTypeBits</code> is a bitmask containing one bit set for every
memory type which the specified host pointer <strong class="purple">can</strong> be imported as.</p>
</li>
</ul>
</div>
</div>
<div class="sect3">
<h4 id="_description_571">Description</h4>
<div class="paragraph">
<p>The value returned by <code>memoryTypeBits</code> <strong class="purple">must</strong> only include bits that
identify memory types which are host visible.</p>
</div>
<div class="sidebarblock">
<div class="content">
<div class="title">Valid Usage (Implicit)</div>
<div class="ulist">
<ul>
<li>
<p><a id="VUID-VkMemoryHostPointerPropertiesEXT-sType-sType"></a> <code>sType</code> <strong class="purple">must</strong> be <code>VK_STRUCTURE_TYPE_MEMORY_HOST_POINTER_PROPERTIES_EXT</code></p>
</li>
<li>
<p><a id="VUID-VkMemoryHostPointerPropertiesEXT-pNext-pNext"></a> <code>pNext</code> <strong class="purple">must</strong> be <code>NULL</code></p>
</li>
</ul>
</div>
</div>
</div>
</div>
<div class="sect3">
<h4 id="_see_also_571">See Also</h4>
<div class="paragraph">
<p><a href="#VkStructureType">VkStructureType</a>, <a href="#vkGetMemoryHostPointerPropertiesEXT">vkGetMemoryHostPointerPropertiesEXT</a></p>
</div>
</div>
<div class="sect3">
<h4 id="_document_notes_571">Document Notes</h4>
<div class="paragraph">
<p>For more information, see the Vulkan Specification at URL</p>
</div>
<div class="paragraph">
<p><a href="https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VkMemoryHostPointerPropertiesEXT" class="bare">https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VkMemoryHostPointerPropertiesEXT</a></p>
</div>
<div class="paragraph">
<p>This page is extracted from the Vulkan Specification.
Fixes and changes should be made to the Specification, not directly.</p>
</div>
<div style="page-break-after: always;"></div>
</div>
</div>
<div class="sect2">
<h3 id="_vkmemorypriorityallocateinfoext3">VkMemoryPriorityAllocateInfoEXT(3)</h3>
<div class="sect3">
<h4 id="_name_572">Name</h4>
<div class="paragraph">
<p>VkMemoryPriorityAllocateInfoEXT - Specify a memory allocation priority</p>
</div>
</div>
<div class="sect3">
<h4 id="_c_specification_572">C Specification</h4>
<div class="paragraph">
<p>If the <code>pNext</code> chain includes a <code>VkMemoryPriorityAllocateInfoEXT</code>
structure, then that structure includes a priority for the memory.</p>
</div>
<div class="paragraph">
<p>The <code>VkMemoryPriorityAllocateInfoEXT</code> structure is defined as:</p>
</div>
<div id="VkMemoryPriorityAllocateInfoEXT" class="listingblock">
<div class="content">
<pre class="highlight"><code class="language-c++" data-lang="c++">typedef struct VkMemoryPriorityAllocateInfoEXT {
    VkStructureType    sType;
    const void*        pNext;
    float              priority;
} VkMemoryPriorityAllocateInfoEXT;</code></pre>
</div>
</div>
</div>
<div class="sect3">
<h4 id="_members_209">Members</h4>
<div class="ulist">
<ul>
<li>
<p><code>sType</code> is the type of this structure.</p>
</li>
<li>
<p><code>pNext</code> is <code>NULL</code> or a pointer to an extension-specific structure.</p>
</li>
<li>
<p><code>priority</code> is a floating-point value between <code>0</code> and <code>1</code>, indicating
the priority of the allocation relative to other memory allocations.
Larger values are higher priority.
The granularity of the priorities is implementation-dependent.</p>
</li>
</ul>
</div>
</div>
<div class="sect3">
<h4 id="_description_572">Description</h4>
<div class="paragraph">
<p>Memory allocations with higher priority <strong class="purple">may</strong> be more likely to stay in
device-local memory when the system is under memory pressure.</p>
</div>
<div class="paragraph">
<p>If this structure is not included, it is as if the <code>priority</code> value were
<code>0.5</code>.</p>
</div>
<div class="sidebarblock">
<div class="content">
<div class="title">Valid Usage</div>
<div class="ulist">
<ul>
<li>
<p><a id="VUID-VkMemoryPriorityAllocateInfoEXT-priority-02602"></a>
<code>priority</code> <strong class="purple">must</strong> be between <code>0</code> and <code>1</code>, inclusive</p>
</li>
</ul>
</div>
</div>
</div>
<div class="sidebarblock">
<div class="content">
<div class="title">Valid Usage (Implicit)</div>
<div class="ulist">
<ul>
<li>
<p><a id="VUID-VkMemoryPriorityAllocateInfoEXT-sType-sType"></a> <code>sType</code> <strong class="purple">must</strong> be <code>VK_STRUCTURE_TYPE_MEMORY_PRIORITY_ALLOCATE_INFO_EXT</code></p>
</li>
</ul>
</div>
</div>
</div>
</div>
<div class="sect3">
<h4 id="_see_also_572">See Also</h4>
<div class="paragraph">
<p><a href="#VkStructureType">VkStructureType</a></p>
</div>
</div>
<div class="sect3">
<h4 id="_document_notes_572">Document Notes</h4>
<div class="paragraph">
<p>For more information, see the Vulkan Specification at URL</p>
</div>
<div class="paragraph">
<p><a href="https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VkMemoryPriorityAllocateInfoEXT" class="bare">https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VkMemoryPriorityAllocateInfoEXT</a></p>
</div>
<div class="paragraph">
<p>This page is extracted from the Vulkan Specification.
Fixes and changes should be made to the Specification, not directly.</p>
</div>
<div style="page-break-after: always;"></div>
</div>
</div>
<div class="sect2">
<h3 id="_vkmemoryrequirements3">VkMemoryRequirements(3)</h3>
<div class="sect3">
<h4 id="_name_573">Name</h4>
<div class="paragraph">
<p>VkMemoryRequirements - Structure specifying memory requirements</p>
</div>
</div>
<div class="sect3">
<h4 id="_c_specification_573">C Specification</h4>
<div class="paragraph">
<p>The <code>VkMemoryRequirements</code> structure is defined as:</p>
</div>
<div id="VkMemoryRequirements" class="listingblock">
<div class="content">
<pre class="highlight"><code class="language-c++" data-lang="c++">typedef struct VkMemoryRequirements {
    VkDeviceSize    size;
    VkDeviceSize    alignment;
    uint32_t        memoryTypeBits;
} VkMemoryRequirements;</code></pre>
</div>
</div>
</div>
<div class="sect3">
<h4 id="_members_210">Members</h4>
<div class="ulist">
<ul>
<li>
<p><code>size</code> is the size, in bytes, of the memory allocation <strong class="purple">required</strong> for
the resource.</p>
</li>
<li>
<p><code>alignment</code> is the alignment, in bytes, of the offset within the
allocation <strong class="purple">required</strong> for the resource.</p>
</li>
<li>
<p><code>memoryTypeBits</code> is a bitmask and contains one bit set for every
supported memory type for the resource.
Bit <code>i</code> is set if and only if the memory type <code>i</code> in the
<code>VkPhysicalDeviceMemoryProperties</code> structure for the physical device
is supported for the resource.</p>
</li>
</ul>
</div>
</div>
<div class="sect3">
<h4 id="_description_573">Description</h4>

</div>
<div class="sect3">
<h4 id="_see_also_573">See Also</h4>
<div class="paragraph">
<p><code>VkDeviceSize</code>, <a href="#VkMemoryRequirements2">VkMemoryRequirements2</a>, <a href="#vkGetBufferMemoryRequirements">vkGetBufferMemoryRequirements</a>, <a href="#vkGetImageMemoryRequirements">vkGetImageMemoryRequirements</a></p>
</div>
</div>
<div class="sect3">
<h4 id="_document_notes_573">Document Notes</h4>
<div class="paragraph">
<p>For more information, see the Vulkan Specification at URL</p>
</div>
<div class="paragraph">
<p><a href="https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VkMemoryRequirements" class="bare">https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VkMemoryRequirements</a></p>
</div>
<div class="paragraph">
<p>This page is extracted from the Vulkan Specification.
Fixes and changes should be made to the Specification, not directly.</p>
</div>
<div style="page-break-after: always;"></div>
</div>
</div>
<div class="sect2">
<h3 id="_vkmemoryrequirements23">VkMemoryRequirements2(3)</h3>
<div class="sect3">
<h4 id="_name_574">Name</h4>
<div class="paragraph">
<p>VkMemoryRequirements2 - Structure specifying memory requirements</p>
</div>
</div>
<div class="sect3">
<h4 id="_c_specification_574">C Specification</h4>
<div class="paragraph">
<p>The <code>VkMemoryRequirements2</code> structure is defined as:</p>
</div>
<div id="VkMemoryRequirements2" class="listingblock">
<div class="content">
<pre class="highlight"><code class="language-c++" data-lang="c++">typedef struct VkMemoryRequirements2 {
    VkStructureType         sType;
    void*                   pNext;
    VkMemoryRequirements    memoryRequirements;
} VkMemoryRequirements2;</code></pre>
</div>
</div>
<div class="paragraph">
<p>or the equivalent</p>
</div>
<div id="VkMemoryRequirements2KHR" class="listingblock">
<div class="content">
<pre class="highlight"><code class="language-c++" data-lang="c++">typedef VkMemoryRequirements2 VkMemoryRequirements2KHR;</code></pre>
</div>
</div>
</div>
<div class="sect3">
<h4 id="_members_211">Members</h4>
<div class="ulist">
<ul>
<li>
<p><code>sType</code> is the type of this structure.</p>
</li>
<li>
<p><code>pNext</code> is <code>NULL</code> or a pointer to an extension-specific structure.</p>
</li>
<li>
<p><code>memoryRequirements</code> is a structure of type
<a href="#VkMemoryRequirements">VkMemoryRequirements</a> describing the memory requirements of the
resource.</p>
</li>
</ul>
</div>
</div>
<div class="sect3">
<h4 id="_description_574">Description</h4>
<div class="sidebarblock">
<div class="content">
<div class="title">Valid Usage (Implicit)</div>
<div class="ulist">
<ul>
<li>
<p><a id="VUID-VkMemoryRequirements2-sType-sType"></a> <code>sType</code> <strong class="purple">must</strong> be <code>VK_STRUCTURE_TYPE_MEMORY_REQUIREMENTS_2</code></p>
</li>
<li>
<p><a id="VUID-VkMemoryRequirements2-pNext-pNext"></a> <code>pNext</code> <strong class="purple">must</strong> be <code>NULL</code> or a pointer to a valid instance of <a href="#VkMemoryDedicatedRequirements">VkMemoryDedicatedRequirements</a></p>
</li>
</ul>
</div>
</div>
</div>
</div>
<div class="sect3">
<h4 id="_see_also_574">See Also</h4>
<div class="paragraph">
<p><a href="#VkMemoryRequirements">VkMemoryRequirements</a>, <a href="#VkStructureType">VkStructureType</a>, <a href="#vkGetBufferMemoryRequirements2">vkGetBufferMemoryRequirements2</a>, <a href="#vkGetBufferMemoryRequirements2KHR">vkGetBufferMemoryRequirements2KHR</a>, <a href="#vkGetImageMemoryRequirements2">vkGetImageMemoryRequirements2</a>, <a href="#vkGetImageMemoryRequirements2KHR">vkGetImageMemoryRequirements2KHR</a></p>
</div>
</div>
<div class="sect3">
<h4 id="_document_notes_574">Document Notes</h4>
<div class="paragraph">
<p>For more information, see the Vulkan Specification at URL</p>
</div>
<div class="paragraph">
<p><a href="https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VkMemoryRequirements2" class="bare">https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VkMemoryRequirements2</a></p>
</div>
<div class="paragraph">
<p>This page is extracted from the Vulkan Specification.
Fixes and changes should be made to the Specification, not directly.</p>
</div>
<div style="page-break-after: always;"></div>
</div>
</div>
<div class="sect2">
<h3 id="_vkmemorytype3">VkMemoryType(3)</h3>
<div class="sect3">
<h4 id="_name_575">Name</h4>
<div class="paragraph">
<p>VkMemoryType - Structure specifying memory type</p>
</div>
</div>
<div class="sect3">
<h4 id="_c_specification_575">C Specification</h4>
<div class="paragraph">
<p>The <code>VkMemoryType</code> structure is defined as:</p>
</div>
<div id="VkMemoryType" class="listingblock">
<div class="content">
<pre class="highlight"><code class="language-c++" data-lang="c++">typedef struct VkMemoryType {
    VkMemoryPropertyFlags    propertyFlags;
    uint32_t                 heapIndex;
} VkMemoryType;</code></pre>
</div>
</div>
</div>
<div class="sect3">
<h4 id="_members_212">Members</h4>
<div class="ulist">
<ul>
<li>
<p><code>heapIndex</code> describes which memory heap this memory type corresponds
to, and <strong class="purple">must</strong> be less than <code>memoryHeapCount</code> from the
<a href="#VkPhysicalDeviceMemoryProperties">VkPhysicalDeviceMemoryProperties</a> structure.</p>
</li>
<li>
<p><code>propertyFlags</code> is a bitmask of <a href="#VkMemoryPropertyFlagBits">VkMemoryPropertyFlagBits</a> of
properties for this memory type.</p>
</li>
</ul>
</div>
</div>
<div class="sect3">
<h4 id="_description_575">Description</h4>

</div>
<div class="sect3">
<h4 id="_see_also_575">See Also</h4>
<div class="paragraph">
<p><a href="#VkMemoryPropertyFlags">VkMemoryPropertyFlags</a>, <a href="#VkPhysicalDeviceMemoryProperties">VkPhysicalDeviceMemoryProperties</a></p>
</div>
</div>
<div class="sect3">
<h4 id="_document_notes_575">Document Notes</h4>
<div class="paragraph">
<p>For more information, see the Vulkan Specification at URL</p>
</div>
<div class="paragraph">
<p><a href="https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VkMemoryType" class="bare">https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VkMemoryType</a></p>
</div>
<div class="paragraph">
<p>This page is extracted from the Vulkan Specification.
Fixes and changes should be made to the Specification, not directly.</p>
</div>
<div style="page-break-after: always;"></div>
</div>
</div>
<div class="sect2">
<h3 id="_vkmemorywin32handlepropertieskhr3">VkMemoryWin32HandlePropertiesKHR(3)</h3>
<div class="sect3">
<h4 id="_name_576">Name</h4>
<div class="paragraph">
<p>VkMemoryWin32HandlePropertiesKHR - Properties of External Memory Windows Handles</p>
</div>
</div>
<div class="sect3">
<h4 id="_c_specification_576">C Specification</h4>
<div class="paragraph">
<p>The <code>VkMemoryWin32HandlePropertiesKHR</code> structure returned is defined as:</p>
</div>
<div id="VkMemoryWin32HandlePropertiesKHR" class="listingblock">
<div class="content">
<pre class="highlight"><code class="language-c++" data-lang="c++">typedef struct VkMemoryWin32HandlePropertiesKHR {
    VkStructureType    sType;
    void*              pNext;
    uint32_t           memoryTypeBits;
} VkMemoryWin32HandlePropertiesKHR;</code></pre>
</div>
</div>
</div>
<div class="sect3">
<h4 id="_members_213">Members</h4>
<div class="ulist">
<ul>
<li>
<p><code>sType</code> is the type of this structure.</p>
</li>
<li>
<p><code>pNext</code> is <code>NULL</code> or a pointer to an extension-specific structure.</p>
</li>
<li>
<p><code>memoryTypeBits</code> is a bitmask containing one bit set for every
memory type which the specified windows handle <strong class="purple">can</strong> be imported as.</p>
</li>
</ul>
</div>
</div>
<div class="sect3">
<h4 id="_description_576">Description</h4>
<div class="sidebarblock">
<div class="content">
<div class="title">Valid Usage (Implicit)</div>
<div class="ulist">
<ul>
<li>
<p><a id="VUID-VkMemoryWin32HandlePropertiesKHR-sType-sType"></a> <code>sType</code> <strong class="purple">must</strong> be <code>VK_STRUCTURE_TYPE_MEMORY_WIN32_HANDLE_PROPERTIES_KHR</code></p>
</li>
<li>
<p><a id="VUID-VkMemoryWin32HandlePropertiesKHR-pNext-pNext"></a> <code>pNext</code> <strong class="purple">must</strong> be <code>NULL</code></p>
</li>
</ul>
</div>
</div>
</div>
</div>
<div class="sect3">
<h4 id="_see_also_576">See Also</h4>
<div class="paragraph">
<p><a href="#VkStructureType">VkStructureType</a>, <a href="#vkGetMemoryWin32HandlePropertiesKHR">vkGetMemoryWin32HandlePropertiesKHR</a></p>
</div>
</div>
<div class="sect3">
<h4 id="_document_notes_576">Document Notes</h4>
<div class="paragraph">
<p>For more information, see the Vulkan Specification at URL</p>
</div>
<div class="paragraph">
<p><a href="https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VkMemoryWin32HandlePropertiesKHR" class="bare">https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VkMemoryWin32HandlePropertiesKHR</a></p>
</div>
<div class="paragraph">
<p>This page is extracted from the Vulkan Specification.
Fixes and changes should be made to the Specification, not directly.</p>
</div>
<div style="page-break-after: always;"></div>
</div>
</div>
<div class="sect2">
<h3 id="_vkmetalsurfacecreateinfoext3">VkMetalSurfaceCreateInfoEXT(3)</h3>
<div class="sect3">
<h4 id="_name_577">Name</h4>
<div class="paragraph">
<p>VkMetalSurfaceCreateInfoEXT - Structure specifying parameters of a newly created Metal surface object</p>
</div>
</div>
<div class="sect3">
<h4 id="_c_specification_577">C Specification</h4>
<div class="paragraph">
<p>The <a href="#VkMetalSurfaceCreateInfoEXT">VkMetalSurfaceCreateInfoEXT</a> structure is defined as:</p>
</div>
<div id="VkMetalSurfaceCreateInfoEXT" class="listingblock">
<div class="content">
<pre class="highlight"><code class="language-c++" data-lang="c++">typedef struct VkMetalSurfaceCreateInfoEXT {
    VkStructureType                 sType;
    const void*                     pNext;
    VkMetalSurfaceCreateFlagsEXT    flags;
    const CAMetalLayer*             pLayer;
} VkMetalSurfaceCreateInfoEXT;</code></pre>
</div>
</div>
</div>
<div class="sect3">
<h4 id="_members_214">Members</h4>
<div class="ulist">
<ul>
<li>
<p><code>sType</code> is the type of this structure.</p>
</li>
<li>
<p><code>pNext</code> is <code>NULL</code> or a pointer to an extension-specific structure.</p>
</li>
<li>
<p><code>flags</code> is reserved for future use.</p>
</li>
<li>
<p><code>pLayer</code> is a reference to a <a href="#CAMetalLayer">CAMetalLayer</a> object that
represents a renderable surface.</p>
</li>
</ul>
</div>
</div>
<div class="sect3">
<h4 id="_description_577">Description</h4>
<div class="sidebarblock">
<div class="content">
<div class="title">Valid Usage</div>

</div>
</div>
<div class="sidebarblock">
<div class="content">
<div class="title">Valid Usage (Implicit)</div>
<div class="ulist">
<ul>
<li>
<p><a id="VUID-VkMetalSurfaceCreateInfoEXT-sType-sType"></a> <code>sType</code> <strong class="purple">must</strong> be <code>VK_STRUCTURE_TYPE_METAL_SURFACE_CREATE_INFO_EXT</code></p>
</li>
<li>
<p><a id="VUID-VkMetalSurfaceCreateInfoEXT-pNext-pNext"></a> <code>pNext</code> <strong class="purple">must</strong> be <code>NULL</code></p>
</li>
<li>
<p><a id="VUID-VkMetalSurfaceCreateInfoEXT-flags-zerobitmask"></a> <code>flags</code> <strong class="purple">must</strong> be <code>0</code></p>
</li>
</ul>
</div>
</div>
</div>
</div>
<div class="sect3">
<h4 id="_see_also_577">See Also</h4>
<div class="paragraph">
<p><a href="#VkMetalSurfaceCreateFlagsEXT">VkMetalSurfaceCreateFlagsEXT</a>, <a href="#VkStructureType">VkStructureType</a>, <a href="#vkCreateMetalSurfaceEXT">vkCreateMetalSurfaceEXT</a></p>
</div>
</div>
<div class="sect3">
<h4 id="_document_notes_577">Document Notes</h4>
<div class="paragraph">
<p>For more information, see the Vulkan Specification at URL</p>
</div>
<div class="paragraph">
<p><a href="https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VkMetalSurfaceCreateInfoEXT" class="bare">https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VkMetalSurfaceCreateInfoEXT</a></p>
</div>
<div class="paragraph">
<p>This page is extracted from the Vulkan Specification.
Fixes and changes should be made to the Specification, not directly.</p>
</div>
<div style="page-break-after: always;"></div>
</div>
</div>
<div class="sect2">
<h3 id="_vkmultisamplepropertiesext3">VkMultisamplePropertiesEXT(3)</h3>
<div class="sect3">
<h4 id="_name_578">Name</h4>
<div class="paragraph">
<p>VkMultisamplePropertiesEXT - Structure returning information about sample count specific additional multisampling capabilities</p>
</div>
</div>
<div class="sect3">
<h4 id="_c_specification_578">C Specification</h4>
<div class="paragraph">
<p>The <code>VkMultisamplePropertiesEXT</code> structure is defined as</p>
</div>
<div id="VkMultisamplePropertiesEXT" class="listingblock">
<div class="content">
<pre class="highlight"><code class="language-c++" data-lang="c++">typedef struct VkMultisamplePropertiesEXT {
    VkStructureType    sType;
    void*              pNext;
    VkExtent2D         maxSampleLocationGridSize;
} VkMultisamplePropertiesEXT;</code></pre>
</div>
</div>
</div>
<div class="sect3">
<h4 id="_members_215">Members</h4>
<div class="ulist">
<ul>
<li>
<p><code>sType</code> is the type of this structure.</p>
</li>
<li>
<p><code>pNext</code> is <code>NULL</code> or a pointer to an extension-specific structure.</p>
</li>
<li>
<p><code>maxSampleLocationGridSize</code> is the maximum size of the pixel grid in
which sample locations <strong class="purple">can</strong> vary.</p>
</li>
</ul>
</div>
</div>
<div class="sect3">
<h4 id="_description_578">Description</h4>
<div class="sidebarblock">
<div class="content">
<div class="title">Valid Usage (Implicit)</div>
<div class="ulist">
<ul>
<li>
<p><a id="VUID-VkMultisamplePropertiesEXT-sType-sType"></a> <code>sType</code> <strong class="purple">must</strong> be <code>VK_STRUCTURE_TYPE_MULTISAMPLE_PROPERTIES_EXT</code></p>
</li>
<li>
<p><a id="VUID-VkMultisamplePropertiesEXT-pNext-pNext"></a> <code>pNext</code> <strong class="purple">must</strong> be <code>NULL</code></p>
</li>
</ul>
</div>
</div>
</div>
</div>
<div class="sect3">
<h4 id="_see_also_578">See Also</h4>
<div class="paragraph">
<p><a href="#VkExtent2D">VkExtent2D</a>, <a href="#VkStructureType">VkStructureType</a>, <a href="#vkGetPhysicalDeviceMultisamplePropertiesEXT">vkGetPhysicalDeviceMultisamplePropertiesEXT</a></p>
</div>
</div>
<div class="sect3">
<h4 id="_document_notes_578">Document Notes</h4>
<div class="paragraph">
<p>For more information, see the Vulkan Specification at URL</p>
</div>
<div class="paragraph">
<p><a href="https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VkMultisamplePropertiesEXT" class="bare">https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VkMultisamplePropertiesEXT</a></p>
</div>
<div class="paragraph">
<p>This page is extracted from the Vulkan Specification.
Fixes and changes should be made to the Specification, not directly.</p>
</div>
<div style="page-break-after: always;"></div>
</div>
</div>
<div class="sect2">
<h3 id="_vkobjecttablecreateinfonvx3">VkObjectTableCreateInfoNVX(3)</h3>
<div class="sect3">
<h4 id="_name_579">Name</h4>
<div class="paragraph">
<p>VkObjectTableCreateInfoNVX - Structure specifying the parameters of a newly created object table</p>
</div>
</div>
<div class="sect3">
<h4 id="_c_specification_579">C Specification</h4>
<div class="paragraph">
<p>The <code>VkObjectTableCreateInfoNVX</code> structure is defined as:</p>
</div>
<div id="VkObjectTableCreateInfoNVX" class="listingblock">
<div class="content">
<pre class="highlight"><code class="language-c++" data-lang="c++">typedef struct VkObjectTableCreateInfoNVX {
    VkStructureType                      sType;
    const void*                          pNext;
    uint32_t                             objectCount;
    const VkObjectEntryTypeNVX*          pObjectEntryTypes;
    const uint32_t*                      pObjectEntryCounts;
    const VkObjectEntryUsageFlagsNVX*    pObjectEntryUsageFlags;
    uint32_t                             maxUniformBuffersPerDescriptor;
    uint32_t                             maxStorageBuffersPerDescriptor;
    uint32_t                             maxStorageImagesPerDescriptor;
    uint32_t                             maxSampledImagesPerDescriptor;
    uint32_t                             maxPipelineLayouts;
} VkObjectTableCreateInfoNVX;</code></pre>
</div>
</div>
</div>
<div class="sect3">
<h4 id="_members_216">Members</h4>
<div class="ulist">
<ul>
<li>
<p><code>sType</code> is the type of this structure.</p>
</li>
<li>
<p><code>pNext</code> is <code>NULL</code> or a pointer to an extension-specific structure.</p>
</li>
<li>
<p><code>objectCount</code> is the number of entry configurations that the object
table supports.</p>
</li>
<li>
<p><code>pObjectEntryTypes</code> is an array of <a href="#VkObjectEntryTypeNVX">VkObjectEntryTypeNVX</a> values
providing the entry type of a given configuration.</p>
</li>
<li>
<p><code>pObjectEntryCounts</code> is an array of counts of how many objects can
be registered in the table.</p>
</li>
<li>
<p><code>pObjectEntryUsageFlags</code> is an array of bitmasks of
<a href="#VkObjectEntryUsageFlagBitsNVX">VkObjectEntryUsageFlagBitsNVX</a> specifying the binding usage of the
entry.</p>
</li>
<li>
<p><code>maxUniformBuffersPerDescriptor</code> is the maximum number of
<code>VK_DESCRIPTOR_TYPE_UNIFORM_BUFFER</code> or
<code>VK_DESCRIPTOR_TYPE_UNIFORM_BUFFER_DYNAMIC</code> used by any single
registered <code>VkDescriptorSet</code> in this table.</p>
</li>
<li>
<p><code>maxStorageBuffersPerDescriptor</code> is the maximum number of
<code>VK_DESCRIPTOR_TYPE_STORAGE_BUFFER</code> or
<code>VK_DESCRIPTOR_TYPE_STORAGE_BUFFER_DYNAMIC</code> used by any single
registered <code>VkDescriptorSet</code> in this table.</p>
</li>
<li>
<p><code>maxStorageImagesPerDescriptor</code> is the maximum number of
<code>VK_DESCRIPTOR_TYPE_STORAGE_IMAGE</code> or
<code>VK_DESCRIPTOR_TYPE_STORAGE_TEXEL_BUFFER</code> used by any single
registered <code>VkDescriptorSet</code> in this table.</p>
</li>
<li>
<p><code>maxSampledImagesPerDescriptor</code> is the maximum number of
<code>VK_DESCRIPTOR_TYPE_SAMPLER</code>,
<code>VK_DESCRIPTOR_TYPE_COMBINED_IMAGE_SAMPLER</code>,
<code>VK_DESCRIPTOR_TYPE_UNIFORM_TEXEL_BUFFER</code> or
<code>VK_DESCRIPTOR_TYPE_INPUT_ATTACHMENT</code> used by any single registered
<code>VkDescriptorSet</code> in this table.</p>
</li>
<li>
<p><code>maxPipelineLayouts</code> is the maximum number of unique
<code>VkPipelineLayout</code> used by any registered <code>VkDescriptorSet</code> or
<code>VkPipeline</code> in this table.</p>
</li>
</ul>
</div>
</div>
<div class="sect3">
<h4 id="_description_579">Description</h4>
<div class="sidebarblock">
<div class="content">
<div class="title">Valid Usage</div>
<div class="ulist">
<ul>
<li>
<p><a id="VUID-VkObjectTableCreateInfoNVX-computeBindingPointSupport-01355"></a>
If the
<code>VkDeviceGeneratedCommandsFeaturesNVX</code>::<code>computeBindingPointSupport</code>
feature is not enabled, <code>pObjectEntryUsageFlags</code> <strong class="purple">must</strong> not contain
<code>VK_OBJECT_ENTRY_USAGE_COMPUTE_BIT_NVX</code></p>
</li>
<li>
<p><a id="VUID-VkObjectTableCreateInfoNVX-pObjectEntryCounts-01356"></a>
Any value within <code>pObjectEntryCounts</code> <strong class="purple">must</strong> not exceed
<code>VkDeviceGeneratedCommandsLimitsNVX</code>::<code>maxObjectEntryCounts</code></p>
</li>
<li>
<p><a id="VUID-VkObjectTableCreateInfoNVX-maxUniformBuffersPerDescriptor-01357"></a>
<code>maxUniformBuffersPerDescriptor</code> <strong class="purple">must</strong> be within the limits
supported by the device.</p>
</li>
<li>
<p><a id="VUID-VkObjectTableCreateInfoNVX-maxStorageBuffersPerDescriptor-01358"></a>
<code>maxStorageBuffersPerDescriptor</code> <strong class="purple">must</strong> be within the limits
supported by the device.</p>
</li>
<li>
<p><a id="VUID-VkObjectTableCreateInfoNVX-maxStorageImagesPerDescriptor-01359"></a>
<code>maxStorageImagesPerDescriptor</code> <strong class="purple">must</strong> be within the limits supported
by the device.</p>
</li>
<li>
<p><a id="VUID-VkObjectTableCreateInfoNVX-maxSampledImagesPerDescriptor-01360"></a>
<code>maxSampledImagesPerDescriptor</code> <strong class="purple">must</strong> be within the limits supported
by the device.</p>
</li>
</ul>
</div>
</div>
</div>
<div class="sidebarblock">
<div class="content">
<div class="title">Valid Usage (Implicit)</div>
<div class="ulist">
<ul>
<li>
<p><a id="VUID-VkObjectTableCreateInfoNVX-sType-sType"></a> <code>sType</code> <strong class="purple">must</strong> be <code>VK_STRUCTURE_TYPE_OBJECT_TABLE_CREATE_INFO_NVX</code></p>
</li>
<li>
<p><a id="VUID-VkObjectTableCreateInfoNVX-pNext-pNext"></a> <code>pNext</code> <strong class="purple">must</strong> be <code>NULL</code></p>
</li>
<li>
<p><a id="VUID-VkObjectTableCreateInfoNVX-pObjectEntryTypes-parameter"></a> <code>pObjectEntryTypes</code> <strong class="purple">must</strong> be a valid pointer to an array of <code>objectCount</code> valid <a href="#VkObjectEntryTypeNVX">VkObjectEntryTypeNVX</a> values</p>
</li>
<li>
<p><a id="VUID-VkObjectTableCreateInfoNVX-pObjectEntryCounts-parameter"></a> <code>pObjectEntryCounts</code> <strong class="purple">must</strong> be a valid pointer to an array of <code>objectCount</code> <code>uint32_t</code> values</p>
</li>
<li>
<p><a id="VUID-VkObjectTableCreateInfoNVX-pObjectEntryUsageFlags-parameter"></a> <code>pObjectEntryUsageFlags</code> <strong class="purple">must</strong> be a valid pointer to an array of <code>objectCount</code> valid combinations of <a href="#VkObjectEntryUsageFlagBitsNVX">VkObjectEntryUsageFlagBitsNVX</a> values</p>
</li>
<li>
<p><a id="VUID-VkObjectTableCreateInfoNVX-pObjectEntryUsageFlags-requiredbitmask"></a> Each element of <code>pObjectEntryUsageFlags</code> <strong class="purple">must</strong> not be <code>0</code></p>
</li>
<li>
<p><a id="VUID-VkObjectTableCreateInfoNVX-objectCount-arraylength"></a> <code>objectCount</code> <strong class="purple">must</strong> be greater than <code>0</code></p>
</li>
</ul>
</div>
</div>
</div>
</div>
<div class="sect3">
<h4 id="_see_also_579">See Also</h4>
<div class="paragraph">
<p><a href="#VkObjectEntryTypeNVX">VkObjectEntryTypeNVX</a>, <a href="#VkObjectEntryUsageFlagsNVX">VkObjectEntryUsageFlagsNVX</a>, <a href="#VkStructureType">VkStructureType</a>, <a href="#vkCreateObjectTableNVX">vkCreateObjectTableNVX</a></p>
</div>
</div>
<div class="sect3">
<h4 id="_document_notes_579">Document Notes</h4>
<div class="paragraph">
<p>For more information, see the Vulkan Specification at URL</p>
</div>
<div class="paragraph">
<p><a href="https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VkObjectTableCreateInfoNVX" class="bare">https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VkObjectTableCreateInfoNVX</a></p>
</div>
<div class="paragraph">
<p>This page is extracted from the Vulkan Specification.
Fixes and changes should be made to the Specification, not directly.</p>
</div>
<div style="page-break-after: always;"></div>
</div>
</div>
<div class="sect2">
<h3 id="_vkobjecttabledescriptorsetentrynvx3">VkObjectTableDescriptorSetEntryNVX(3)</h3>
<div class="sect3">
<h4 id="_name_580">Name</h4>
<div class="paragraph">
<p>VkObjectTableDescriptorSetEntryNVX - Parameters of an object table descriptor set entry</p>
</div>
</div>
<div class="sect3">
<h4 id="_c_specification_580">C Specification</h4>
<div id="VkObjectTableDescriptorSetEntryNVX" class="listingblock">
<div class="content">
<pre class="highlight"><code class="language-c++" data-lang="c++">typedef struct VkObjectTableDescriptorSetEntryNVX {
    VkObjectEntryTypeNVX          type;
    VkObjectEntryUsageFlagsNVX    flags;
    VkPipelineLayout              pipelineLayout;
    VkDescriptorSet               descriptorSet;
} VkObjectTableDescriptorSetEntryNVX;</code></pre>
</div>
</div>
</div>
<div class="sect3">
<h4 id="_members_217">Members</h4>
<div class="ulist">
<ul>
<li>
<p><code>pipelineLayout</code> specifies the <a href="#VkPipelineLayout">VkPipelineLayout</a> that the
<code>descriptorSet</code> is used with.</p>
</li>
<li>
<p><code>descriptorSet</code> specifies the <a href="#VkDescriptorSet">VkDescriptorSet</a> that can be
bound with this entry.</p>
</li>
</ul>
</div>
</div>
<div class="sect3">
<h4 id="_description_580">Description</h4>
<div class="sidebarblock">
<div class="content">
<div class="title">Valid Usage</div>
<div class="ulist">
<ul>
<li>
<p><a id="VUID-VkObjectTableDescriptorSetEntryNVX-type-01369"></a>
<code>type</code> <strong class="purple">must</strong> be <code>VK_OBJECT_ENTRY_TYPE_DESCRIPTOR_SET_NVX</code></p>
</li>
</ul>
</div>
</div>
</div>
<div class="sidebarblock">
<div class="content">
<div class="title">Valid Usage (Implicit)</div>
<div class="ulist">
<ul>
<li>
<p><a id="VUID-VkObjectTableDescriptorSetEntryNVX-type-parameter"></a> <code>type</code> <strong class="purple">must</strong> be a valid <a href="#VkObjectEntryTypeNVX">VkObjectEntryTypeNVX</a> value</p>
</li>
<li>
<p><a id="VUID-VkObjectTableDescriptorSetEntryNVX-flags-parameter"></a> <code>flags</code> <strong class="purple">must</strong> be a valid combination of <a href="#VkObjectEntryUsageFlagBitsNVX">VkObjectEntryUsageFlagBitsNVX</a> values</p>
</li>
<li>
<p><a id="VUID-VkObjectTableDescriptorSetEntryNVX-flags-requiredbitmask"></a> <code>flags</code> <strong class="purple">must</strong> not be <code>0</code></p>
</li>
<li>
<p><a id="VUID-VkObjectTableDescriptorSetEntryNVX-pipelineLayout-parameter"></a> <code>pipelineLayout</code> <strong class="purple">must</strong> be a valid <code>VkPipelineLayout</code> handle</p>
</li>
<li>
<p><a id="VUID-VkObjectTableDescriptorSetEntryNVX-descriptorSet-parameter"></a> <code>descriptorSet</code> <strong class="purple">must</strong> be a valid <code>VkDescriptorSet</code> handle</p>
</li>
<li>
<p><a id="VUID-VkObjectTableDescriptorSetEntryNVX-commonparent"></a> Both of <code>descriptorSet</code>, and <code>pipelineLayout</code> <strong class="purple">must</strong> have been created, allocated, or retrieved from the same <code>VkDevice</code></p>
</li>
</ul>
</div>
</div>
</div>
</div>
<div class="sect3">
<h4 id="_see_also_580">See Also</h4>
<div class="paragraph">
<p><a href="#VkDescriptorSet">VkDescriptorSet</a>, <a href="#VkObjectEntryTypeNVX">VkObjectEntryTypeNVX</a>, <a href="#VkObjectEntryUsageFlagsNVX">VkObjectEntryUsageFlagsNVX</a>, <a href="#VkPipelineLayout">VkPipelineLayout</a></p>
</div>
</div>
<div class="sect3">
<h4 id="_document_notes_580">Document Notes</h4>
<div class="paragraph">
<p>For more information, see the Vulkan Specification at URL</p>
</div>
<div class="paragraph">
<p><a href="https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VkObjectTableDescriptorSetEntryNVX" class="bare">https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VkObjectTableDescriptorSetEntryNVX</a></p>
</div>
<div class="paragraph">
<p>This page is extracted from the Vulkan Specification.
Fixes and changes should be made to the Specification, not directly.</p>
</div>
<div style="page-break-after: always;"></div>
</div>
</div>
<div class="sect2">
<h3 id="_vkobjecttableentrynvx3">VkObjectTableEntryNVX(3)</h3>
<div class="sect3">
<h4 id="_name_581">Name</h4>
<div class="paragraph">
<p>VkObjectTableEntryNVX - Common parameters of an object table resource entry</p>
</div>
</div>
<div class="sect3">
<h4 id="_c_specification_581">C Specification</h4>
<div class="paragraph">
<p>Common to all resource entries are:</p>
</div>
<div id="VkObjectTableEntryNVX" class="listingblock">
<div class="content">
<pre class="highlight"><code class="language-c++" data-lang="c++">typedef struct VkObjectTableEntryNVX {
    VkObjectEntryTypeNVX          type;
    VkObjectEntryUsageFlagsNVX    flags;
} VkObjectTableEntryNVX;</code></pre>
</div>
</div>
</div>
<div class="sect3">
<h4 id="_members_218">Members</h4>
<div class="ulist">
<ul>
<li>
<p><code>type</code> defines the entry type</p>
</li>
<li>
<p><code>flags</code> defines which <a href="#VkPipelineBindPoint">VkPipelineBindPoint</a> the resource can be
used with.
Some entry types allow only a single flag to be set.</p>
</li>
</ul>
</div>
</div>
<div class="sect3">
<h4 id="_description_581">Description</h4>
<div class="sidebarblock">
<div class="content">
<div class="title">Valid Usage</div>
<div class="ulist">
<ul>
<li>
<p><a id="VUID-VkObjectTableEntryNVX-computeBindingPointSupport-01367"></a>
If the
<code>VkDeviceGeneratedCommandsFeaturesNVX</code>::<code>computeBindingPointSupport</code>
feature is not enabled, <code>flags</code> <strong class="purple">must</strong> not contain
<code>VK_OBJECT_ENTRY_USAGE_COMPUTE_BIT_NVX</code></p>
</li>
</ul>
</div>
</div>
</div>
<div class="sidebarblock">
<div class="content">
<div class="title">Valid Usage (Implicit)</div>
<div class="ulist">
<ul>
<li>
<p><a id="VUID-VkObjectTableEntryNVX-type-parameter"></a> <code>type</code> <strong class="purple">must</strong> be a valid <a href="#VkObjectEntryTypeNVX">VkObjectEntryTypeNVX</a> value</p>
</li>
<li>
<p><a id="VUID-VkObjectTableEntryNVX-flags-parameter"></a> <code>flags</code> <strong class="purple">must</strong> be a valid combination of <a href="#VkObjectEntryUsageFlagBitsNVX">VkObjectEntryUsageFlagBitsNVX</a> values</p>
</li>
<li>
<p><a id="VUID-VkObjectTableEntryNVX-flags-requiredbitmask"></a> <code>flags</code> <strong class="purple">must</strong> not be <code>0</code></p>
</li>
</ul>
</div>
</div>
</div>
</div>
<div class="sect3">
<h4 id="_see_also_581">See Also</h4>
<div class="paragraph">
<p><a href="#VkObjectEntryTypeNVX">VkObjectEntryTypeNVX</a>, <a href="#VkObjectEntryUsageFlagsNVX">VkObjectEntryUsageFlagsNVX</a>, <a href="#vkRegisterObjectsNVX">vkRegisterObjectsNVX</a></p>
</div>
</div>
<div class="sect3">
<h4 id="_document_notes_581">Document Notes</h4>
<div class="paragraph">
<p>For more information, see the Vulkan Specification at URL</p>
</div>
<div class="paragraph">
<p><a href="https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VkObjectTableEntryNVX" class="bare">https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VkObjectTableEntryNVX</a></p>
</div>
<div class="paragraph">
<p>This page is extracted from the Vulkan Specification.
Fixes and changes should be made to the Specification, not directly.</p>
</div>
<div style="page-break-after: always;"></div>
</div>
</div>
<div class="sect2">
<h3 id="_vkobjecttableindexbufferentrynvx3">VkObjectTableIndexBufferEntryNVX(3)</h3>
<div class="sect3">
<h4 id="_name_582">Name</h4>
<div class="paragraph">
<p>VkObjectTableIndexBufferEntryNVX - Parameters of an object table index buffer entry</p>
</div>
</div>
<div class="sect3">
<h4 id="_c_specification_582">C Specification</h4>
<div id="VkObjectTableIndexBufferEntryNVX" class="listingblock">
<div class="content">
<pre class="highlight"><code class="language-c++" data-lang="c++">typedef struct VkObjectTableIndexBufferEntryNVX {
    VkObjectEntryTypeNVX          type;
    VkObjectEntryUsageFlagsNVX    flags;
    VkBuffer                      buffer;
    VkIndexType                   indexType;
} VkObjectTableIndexBufferEntryNVX;</code></pre>
</div>
</div>
</div>
<div class="sect3">
<h4 id="_members_219">Members</h4>
<div class="ulist">
<ul>
<li>
<p><code>buffer</code> specifies the <a href="#VkBuffer">VkBuffer</a> that can be bound as index
buffer</p>
</li>
<li>
<p><code>indexType</code> specifies the <a href="#VkIndexType">VkIndexType</a> used with this index
buffer</p>
</li>
</ul>
</div>
</div>
<div class="sect3">
<h4 id="_description_582">Description</h4>
<div class="sidebarblock">
<div class="content">
<div class="title">Valid Usage</div>
<div class="ulist">
<ul>
<li>
<p><a id="VUID-VkObjectTableIndexBufferEntryNVX-type-01371"></a>
<code>type</code> <strong class="purple">must</strong> be <code>VK_OBJECT_ENTRY_TYPE_INDEX_BUFFER_NVX</code></p>
</li>
</ul>
</div>
</div>
</div>
<div class="sidebarblock">
<div class="content">
<div class="title">Valid Usage (Implicit)</div>
<div class="ulist">
<ul>
<li>
<p><a id="VUID-VkObjectTableIndexBufferEntryNVX-type-parameter"></a> <code>type</code> <strong class="purple">must</strong> be a valid <a href="#VkObjectEntryTypeNVX">VkObjectEntryTypeNVX</a> value</p>
</li>
<li>
<p><a id="VUID-VkObjectTableIndexBufferEntryNVX-flags-parameter"></a> <code>flags</code> <strong class="purple">must</strong> be a valid combination of <a href="#VkObjectEntryUsageFlagBitsNVX">VkObjectEntryUsageFlagBitsNVX</a> values</p>
</li>
<li>
<p><a id="VUID-VkObjectTableIndexBufferEntryNVX-flags-requiredbitmask"></a> <code>flags</code> <strong class="purple">must</strong> not be <code>0</code></p>
</li>
<li>
<p><a id="VUID-VkObjectTableIndexBufferEntryNVX-buffer-parameter"></a> <code>buffer</code> <strong class="purple">must</strong> be a valid <code>VkBuffer</code> handle</p>
</li>
<li>
<p><a id="VUID-VkObjectTableIndexBufferEntryNVX-indexType-parameter"></a> <code>indexType</code> <strong class="purple">must</strong> be a valid <a href="#VkIndexType">VkIndexType</a> value</p>
</li>
</ul>
</div>
</div>
</div>
</div>
<div class="sect3">
<h4 id="_see_also_582">See Also</h4>
<div class="paragraph">
<p><a href="#VkBuffer">VkBuffer</a>, <a href="#VkIndexType">VkIndexType</a>, <a href="#VkObjectEntryTypeNVX">VkObjectEntryTypeNVX</a>, <a href="#VkObjectEntryUsageFlagsNVX">VkObjectEntryUsageFlagsNVX</a></p>
</div>
</div>
<div class="sect3">
<h4 id="_document_notes_582">Document Notes</h4>
<div class="paragraph">
<p>For more information, see the Vulkan Specification at URL</p>
</div>
<div class="paragraph">
<p><a href="https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VkObjectTableIndexBufferEntryNVX" class="bare">https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VkObjectTableIndexBufferEntryNVX</a></p>
</div>
<div class="paragraph">
<p>This page is extracted from the Vulkan Specification.
Fixes and changes should be made to the Specification, not directly.</p>
</div>
<div style="page-break-after: always;"></div>
</div>
</div>
<div class="sect2">
<h3 id="_vkobjecttablepipelineentrynvx3">VkObjectTablePipelineEntryNVX(3)</h3>
<div class="sect3">
<h4 id="_name_583">Name</h4>
<div class="paragraph">
<p>VkObjectTablePipelineEntryNVX - Parameters of an object table pipeline entry</p>
</div>
</div>
<div class="sect3">
<h4 id="_c_specification_583">C Specification</h4>
<div id="VkObjectTablePipelineEntryNVX" class="listingblock">
<div class="content">
<pre class="highlight"><code class="language-c++" data-lang="c++">typedef struct VkObjectTablePipelineEntryNVX {
    VkObjectEntryTypeNVX          type;
    VkObjectEntryUsageFlagsNVX    flags;
    VkPipeline                    pipeline;
} VkObjectTablePipelineEntryNVX;</code></pre>
</div>
</div>
</div>
<div class="sect3">
<h4 id="_members_220">Members</h4>
<div class="ulist">
<ul>
<li>
<p><code>pipeline</code> specifies the <a href="#VkPipeline">VkPipeline</a> that this resource entry
references.</p>
</li>
</ul>
</div>
</div>
<div class="sect3">
<h4 id="_description_583">Description</h4>
<div class="sidebarblock">
<div class="content">
<div class="title">Valid Usage</div>
<div class="ulist">
<ul>
<li>
<p><a id="VUID-VkObjectTablePipelineEntryNVX-type-01368"></a>
<code>type</code> <strong class="purple">must</strong> be <code>VK_OBJECT_ENTRY_TYPE_PIPELINE_NVX</code></p>
</li>
</ul>
</div>
</div>
</div>
<div class="sidebarblock">
<div class="content">
<div class="title">Valid Usage (Implicit)</div>
<div class="ulist">
<ul>
<li>
<p><a id="VUID-VkObjectTablePipelineEntryNVX-type-parameter"></a> <code>type</code> <strong class="purple">must</strong> be a valid <a href="#VkObjectEntryTypeNVX">VkObjectEntryTypeNVX</a> value</p>
</li>
<li>
<p><a id="VUID-VkObjectTablePipelineEntryNVX-flags-parameter"></a> <code>flags</code> <strong class="purple">must</strong> be a valid combination of <a href="#VkObjectEntryUsageFlagBitsNVX">VkObjectEntryUsageFlagBitsNVX</a> values</p>
</li>
<li>
<p><a id="VUID-VkObjectTablePipelineEntryNVX-flags-requiredbitmask"></a> <code>flags</code> <strong class="purple">must</strong> not be <code>0</code></p>
</li>
<li>
<p><a id="VUID-VkObjectTablePipelineEntryNVX-pipeline-parameter"></a> <code>pipeline</code> <strong class="purple">must</strong> be a valid <code>VkPipeline</code> handle</p>
</li>
</ul>
</div>
</div>
</div>
</div>
<div class="sect3">
<h4 id="_see_also_583">See Also</h4>
<div class="paragraph">
<p><a href="#VkObjectEntryTypeNVX">VkObjectEntryTypeNVX</a>, <a href="#VkObjectEntryUsageFlagsNVX">VkObjectEntryUsageFlagsNVX</a>, <a href="#VkPipeline">VkPipeline</a></p>
</div>
</div>
<div class="sect3">
<h4 id="_document_notes_583">Document Notes</h4>
<div class="paragraph">
<p>For more information, see the Vulkan Specification at URL</p>
</div>
<div class="paragraph">
<p><a href="https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VkObjectTablePipelineEntryNVX" class="bare">https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VkObjectTablePipelineEntryNVX</a></p>
</div>
<div class="paragraph">
<p>This page is extracted from the Vulkan Specification.
Fixes and changes should be made to the Specification, not directly.</p>
</div>
<div style="page-break-after: always;"></div>
</div>
</div>
<div class="sect2">
<h3 id="_vkobjecttablepushconstantentrynvx3">VkObjectTablePushConstantEntryNVX(3)</h3>
<div class="sect3">
<h4 id="_name_584">Name</h4>
<div class="paragraph">
<p>VkObjectTablePushConstantEntryNVX - Parameters of an object table push constant entry</p>
</div>
</div>
<div class="sect3">
<h4 id="_c_specification_584">C Specification</h4>
<div id="VkObjectTablePushConstantEntryNVX" class="listingblock">
<div class="content">
<pre class="highlight"><code class="language-c++" data-lang="c++">typedef struct VkObjectTablePushConstantEntryNVX {
    VkObjectEntryTypeNVX          type;
    VkObjectEntryUsageFlagsNVX    flags;
    VkPipelineLayout              pipelineLayout;
    VkShaderStageFlags            stageFlags;
} VkObjectTablePushConstantEntryNVX;</code></pre>
</div>
</div>
</div>
<div class="sect3">
<h4 id="_members_221">Members</h4>
<div class="ulist">
<ul>
<li>
<p><code>pipelineLayout</code> specifies the <a href="#VkPipelineLayout">VkPipelineLayout</a> that the
pushconstants are used with</p>
</li>
<li>
<p><code>stageFlags</code> specifies the <a href="#VkShaderStageFlags">VkShaderStageFlags</a> that the
pushconstants are used with</p>
</li>
</ul>
</div>
</div>
<div class="sect3">
<h4 id="_description_584">Description</h4>
<div class="sidebarblock">
<div class="content">
<div class="title">Valid Usage</div>
<div class="ulist">
<ul>
<li>
<p><a id="VUID-VkObjectTablePushConstantEntryNVX-type-01372"></a>
<code>type</code> <strong class="purple">must</strong> be <code>VK_OBJECT_ENTRY_TYPE_PUSH_CONSTANT_NVX</code></p>
</li>
</ul>
</div>
</div>
</div>
<div class="sidebarblock">
<div class="content">
<div class="title">Valid Usage (Implicit)</div>
<div class="ulist">
<ul>
<li>
<p><a id="VUID-VkObjectTablePushConstantEntryNVX-type-parameter"></a> <code>type</code> <strong class="purple">must</strong> be a valid <a href="#VkObjectEntryTypeNVX">VkObjectEntryTypeNVX</a> value</p>
</li>
<li>
<p><a id="VUID-VkObjectTablePushConstantEntryNVX-flags-parameter"></a> <code>flags</code> <strong class="purple">must</strong> be a valid combination of <a href="#VkObjectEntryUsageFlagBitsNVX">VkObjectEntryUsageFlagBitsNVX</a> values</p>
</li>
<li>
<p><a id="VUID-VkObjectTablePushConstantEntryNVX-flags-requiredbitmask"></a> <code>flags</code> <strong class="purple">must</strong> not be <code>0</code></p>
</li>
<li>
<p><a id="VUID-VkObjectTablePushConstantEntryNVX-pipelineLayout-parameter"></a> <code>pipelineLayout</code> <strong class="purple">must</strong> be a valid <code>VkPipelineLayout</code> handle</p>
</li>
<li>
<p><a id="VUID-VkObjectTablePushConstantEntryNVX-stageFlags-parameter"></a> <code>stageFlags</code> <strong class="purple">must</strong> be a valid combination of <a href="#VkShaderStageFlagBits">VkShaderStageFlagBits</a> values</p>
</li>
<li>
<p><a id="VUID-VkObjectTablePushConstantEntryNVX-stageFlags-requiredbitmask"></a> <code>stageFlags</code> <strong class="purple">must</strong> not be <code>0</code></p>
</li>
</ul>
</div>
</div>
</div>
</div>
<div class="sect3">
<h4 id="_see_also_584">See Also</h4>
<div class="paragraph">
<p><a href="#VkObjectEntryTypeNVX">VkObjectEntryTypeNVX</a>, <a href="#VkObjectEntryUsageFlagsNVX">VkObjectEntryUsageFlagsNVX</a>, <a href="#VkPipelineLayout">VkPipelineLayout</a>, <a href="#VkShaderStageFlags">VkShaderStageFlags</a></p>
</div>
</div>
<div class="sect3">
<h4 id="_document_notes_584">Document Notes</h4>
<div class="paragraph">
<p>For more information, see the Vulkan Specification at URL</p>
</div>
<div class="paragraph">
<p><a href="https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VkObjectTablePushConstantEntryNVX" class="bare">https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VkObjectTablePushConstantEntryNVX</a></p>
</div>
<div class="paragraph">
<p>This page is extracted from the Vulkan Specification.
Fixes and changes should be made to the Specification, not directly.</p>
</div>
<div style="page-break-after: always;"></div>
</div>
</div>
<div class="sect2">
<h3 id="_vkobjecttablevertexbufferentrynvx3">VkObjectTableVertexBufferEntryNVX(3)</h3>
<div class="sect3">
<h4 id="_name_585">Name</h4>
<div class="paragraph">
<p>VkObjectTableVertexBufferEntryNVX - Parameters of an object table vertex buffer entry</p>
</div>
</div>
<div class="sect3">
<h4 id="_c_specification_585">C Specification</h4>
<div id="VkObjectTableVertexBufferEntryNVX" class="listingblock">
<div class="content">
<pre class="highlight"><code class="language-c++" data-lang="c++">typedef struct VkObjectTableVertexBufferEntryNVX {
    VkObjectEntryTypeNVX          type;
    VkObjectEntryUsageFlagsNVX    flags;
    VkBuffer                      buffer;
} VkObjectTableVertexBufferEntryNVX;</code></pre>
</div>
</div>
</div>
<div class="sect3">
<h4 id="_members_222">Members</h4>
<div class="ulist">
<ul>
<li>
<p><code>buffer</code> specifies the <a href="#VkBuffer">VkBuffer</a> that can be bound as vertex
bufer</p>
</li>
</ul>
</div>
</div>
<div class="sect3">
<h4 id="_description_585">Description</h4>
<div class="sidebarblock">
<div class="content">
<div class="title">Valid Usage</div>
<div class="ulist">
<ul>
<li>
<p><a id="VUID-VkObjectTableVertexBufferEntryNVX-type-01370"></a>
<code>type</code> <strong class="purple">must</strong> be <code>VK_OBJECT_ENTRY_TYPE_VERTEX_BUFFER_NVX</code></p>
</li>
</ul>
</div>
</div>
</div>
<div class="sidebarblock">
<div class="content">
<div class="title">Valid Usage (Implicit)</div>
<div class="ulist">
<ul>
<li>
<p><a id="VUID-VkObjectTableVertexBufferEntryNVX-type-parameter"></a> <code>type</code> <strong class="purple">must</strong> be a valid <a href="#VkObjectEntryTypeNVX">VkObjectEntryTypeNVX</a> value</p>
</li>
<li>
<p><a id="VUID-VkObjectTableVertexBufferEntryNVX-flags-parameter"></a> <code>flags</code> <strong class="purple">must</strong> be a valid combination of <a href="#VkObjectEntryUsageFlagBitsNVX">VkObjectEntryUsageFlagBitsNVX</a> values</p>
</li>
<li>
<p><a id="VUID-VkObjectTableVertexBufferEntryNVX-flags-requiredbitmask"></a> <code>flags</code> <strong class="purple">must</strong> not be <code>0</code></p>
</li>
<li>
<p><a id="VUID-VkObjectTableVertexBufferEntryNVX-buffer-parameter"></a> <code>buffer</code> <strong class="purple">must</strong> be a valid <code>VkBuffer</code> handle</p>
</li>
</ul>
</div>
</div>
</div>
</div>
<div class="sect3">
<h4 id="_see_also_585">See Also</h4>
<div class="paragraph">
<p><a href="#VkBuffer">VkBuffer</a>, <a href="#VkObjectEntryTypeNVX">VkObjectEntryTypeNVX</a>, <a href="#VkObjectEntryUsageFlagsNVX">VkObjectEntryUsageFlagsNVX</a></p>
</div>
</div>
<div class="sect3">
<h4 id="_document_notes_585">Document Notes</h4>
<div class="paragraph">
<p>For more information, see the Vulkan Specification at URL</p>
</div>
<div class="paragraph">
<p><a href="https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VkObjectTableVertexBufferEntryNVX" class="bare">https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VkObjectTableVertexBufferEntryNVX</a></p>
</div>
<div class="paragraph">
<p>This page is extracted from the Vulkan Specification.
Fixes and changes should be made to the Specification, not directly.</p>
</div>
<div style="page-break-after: always;"></div>
</div>
</div>
<div class="sect2">
<h3 id="_vkoffset2d3">VkOffset2D(3)</h3>
<div class="sect3">
<h4 id="_name_586">Name</h4>
<div class="paragraph">
<p>VkOffset2D - Structure specifying a two-dimensional offset</p>
</div>
</div>
<div class="sect3">
<h4 id="_c_specification_586">C Specification</h4>
<div class="paragraph">
<p>A two-dimensional offsets is defined by the structure:</p>
</div>
<div id="VkOffset2D" class="listingblock">
<div class="content">
<pre class="highlight"><code class="language-c++" data-lang="c++">typedef struct VkOffset2D {
    int32_t    x;
    int32_t    y;
} VkOffset2D;</code></pre>
</div>
</div>
</div>
<div class="sect3">
<h4 id="_members_223">Members</h4>
<div class="ulist">
<ul>
<li>
<p><code>x</code> is the x offset.</p>
</li>
<li>
<p><code>y</code> is the y offset.</p>
</li>
</ul>
</div>
</div>
<div class="sect3">
<h4 id="_description_586">Description</h4>

</div>
<div class="sect3">
<h4 id="_see_also_586">See Also</h4>
<div class="paragraph">
<p><a href="#VkDisplayPlaneCapabilitiesKHR">VkDisplayPlaneCapabilitiesKHR</a>, <a href="#VkRect2D">VkRect2D</a>, <a href="#VkRectLayerKHR">VkRectLayerKHR</a></p>
</div>
</div>
<div class="sect3">
<h4 id="_document_notes_586">Document Notes</h4>
<div class="paragraph">
<p>For more information, see the Vulkan Specification at URL</p>
</div>
<div class="paragraph">
<p><a href="https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VkOffset2D" class="bare">https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VkOffset2D</a></p>
</div>
<div class="paragraph">
<p>This page is extracted from the Vulkan Specification.
Fixes and changes should be made to the Specification, not directly.</p>
</div>
<div style="page-break-after: always;"></div>
</div>
</div>
<div class="sect2">
<h3 id="_vkoffset3d3">VkOffset3D(3)</h3>
<div class="sect3">
<h4 id="_name_587">Name</h4>
<div class="paragraph">
<p>VkOffset3D - Structure specifying a three-dimensional offset</p>
</div>
</div>
<div class="sect3">
<h4 id="_c_specification_587">C Specification</h4>
<div class="paragraph">
<p>A three-dimensional offset is defined by the structure:</p>
</div>
<div id="VkOffset3D" class="listingblock">
<div class="content">
<pre class="highlight"><code class="language-c++" data-lang="c++">typedef struct VkOffset3D {
    int32_t    x;
    int32_t    y;
    int32_t    z;
} VkOffset3D;</code></pre>
</div>
</div>
</div>
<div class="sect3">
<h4 id="_members_224">Members</h4>
<div class="ulist">
<ul>
<li>
<p><code>x</code> is the x offset.</p>
</li>
<li>
<p><code>y</code> is the y offset.</p>
</li>
<li>
<p><code>z</code> is the z offset.</p>
</li>
</ul>
</div>
</div>
<div class="sect3">
<h4 id="_description_587">Description</h4>

</div>
<div class="sect3">
<h4 id="_see_also_587">See Also</h4>
<div class="paragraph">
<p><a href="#VkBufferImageCopy">VkBufferImageCopy</a>, <a href="#VkImageBlit">VkImageBlit</a>, <a href="#VkImageCopy">VkImageCopy</a>, <a href="#VkImageResolve">VkImageResolve</a>, <a href="#VkSparseImageMemoryBind">VkSparseImageMemoryBind</a></p>
</div>
</div>
<div class="sect3">
<h4 id="_document_notes_587">Document Notes</h4>
<div class="paragraph">
<p>For more information, see the Vulkan Specification at URL</p>
</div>
<div class="paragraph">
<p><a href="https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VkOffset3D" class="bare">https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VkOffset3D</a></p>
</div>
<div class="paragraph">
<p>This page is extracted from the Vulkan Specification.
Fixes and changes should be made to the Specification, not directly.</p>
</div>
<div style="page-break-after: always;"></div>
</div>
</div>
<div class="sect2">
<h3 id="_vkpastpresentationtiminggoogle3">VkPastPresentationTimingGOOGLE(3)</h3>
<div class="sect3">
<h4 id="_name_588">Name</h4>
<div class="paragraph">
<p>VkPastPresentationTimingGOOGLE - Structure containing timing information about a previously-presented image</p>
</div>
</div>
<div class="sect3">
<h4 id="_c_specification_588">C Specification</h4>
<div class="paragraph">
<p>The <code>VkPastPresentationTimingGOOGLE</code> structure is defined as:</p>
</div>
<div id="VkPastPresentationTimingGOOGLE" class="listingblock">
<div class="content">
<pre class="highlight"><code class="language-c++" data-lang="c++">typedef struct VkPastPresentationTimingGOOGLE {
    uint32_t    presentID;
    uint64_t    desiredPresentTime;
    uint64_t    actualPresentTime;
    uint64_t    earliestPresentTime;
    uint64_t    presentMargin;
} VkPastPresentationTimingGOOGLE;</code></pre>
</div>
</div>
</div>
<div class="sect3">
<h4 id="_members_225">Members</h4>
<div class="ulist">
<ul>
<li>
<p><code>presentID</code> is an application-provided value that was given to a
previous <code>vkQueuePresentKHR</code> command via
<a href="#VkPresentTimeGOOGLE">VkPresentTimeGOOGLE</a>::<code>presentID</code> (see below).
It <strong class="purple">can</strong> be used to uniquely identify a previous present with the
<a href="#vkQueuePresentKHR">vkQueuePresentKHR</a> command.</p>
</li>
<li>
<p><code>desiredPresentTime</code> is an application-provided value that was given
to a previous <a href="#vkQueuePresentKHR">vkQueuePresentKHR</a> command via
<a href="#VkPresentTimeGOOGLE">VkPresentTimeGOOGLE</a>::<code>desiredPresentTime</code>.
If non-zero, it was used by the application to indicate that an image
not be presented any sooner than <code>desiredPresentTime</code>.</p>
</li>
<li>
<p><code>actualPresentTime</code> is the time when the image of the
<code>swapchain</code> was actually displayed.</p>
</li>
<li>
<p><code>earliestPresentTime</code> is the time when the image of the
<code>swapchain</code> could have been displayed.
This <strong class="purple">may</strong> differ from <code>actualPresentTime</code> if the application
requested that the image be presented no sooner than
<a href="#VkPresentTimeGOOGLE">VkPresentTimeGOOGLE</a>::<code>desiredPresentTime</code>.</p>
</li>
<li>
<p><code>presentMargin</code> is an indication of how early the
<code>vkQueuePresentKHR</code> command was processed compared to how soon it
needed to be processed, and still be presented at
<code>earliestPresentTime</code>.</p>
</li>
</ul>
</div>
</div>
<div class="sect3">
<h4 id="_description_588">Description</h4>
<div class="paragraph">
<p>The results for a given <code>swapchain</code> and <code>presentID</code> are only
returned once from <code>vkGetPastPresentationTimingGOOGLE</code>.</p>
</div>
<div class="paragraph">
<p>The application <strong class="purple">can</strong> use the <code>VkPastPresentationTimingGOOGLE</code> values to
occasionally adjust its timing.
For example, if <code>actualPresentTime</code> is later than expected (e.g. one
<code>refreshDuration</code> late), the application may increase its target IPD to
a higher multiple of <code>refreshDuration</code> (e.g. decrease its frame rate
from 60Hz to 30Hz).
If <code>actualPresentTime</code> and <code>earliestPresentTime</code> are consistently
different, and if <code>presentMargin</code> is consistently large enough, the
application may decrease its target IPD to a smaller multiple of
<code>refreshDuration</code> (e.g. increase its frame rate from 30Hz to 60Hz).
If <code>actualPresentTime</code> and <code>earliestPresentTime</code> are same, and if
<code>presentMargin</code> is consistently high, the application may delay the
start of its input-render-present loop in order to decrease the latency
between user input and the corresponding present (always leaving some margin
in case a new image takes longer to render than the previous image).
An application that desires its target IPD to always be the same as
<code>refreshDuration</code>, can also adjust features until
<code>actualPresentTime</code> is never late and <code>presentMargin</code> is
satisfactory.</p>
</div>
</div>
<div class="sect3">
<h4 id="_see_also_588">See Also</h4>
<div class="paragraph">
<p><a href="#vkGetPastPresentationTimingGOOGLE">vkGetPastPresentationTimingGOOGLE</a></p>
</div>
</div>
<div class="sect3">
<h4 id="_document_notes_588">Document Notes</h4>
<div class="paragraph">
<p>For more information, see the Vulkan Specification at URL</p>
</div>
<div class="paragraph">
<p><a href="https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VkPastPresentationTimingGOOGLE" class="bare">https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VkPastPresentationTimingGOOGLE</a></p>
</div>
<div class="paragraph">
<p>This page is extracted from the Vulkan Specification.
Fixes and changes should be made to the Specification, not directly.</p>
</div>
<div style="page-break-after: always;"></div>
</div>
</div>
<div class="sect2">
<h3 id="_vkphysicaldevice16bitstoragefeatures3">VkPhysicalDevice16BitStorageFeatures(3)</h3>
<div class="sect3">
<h4 id="_name_589">Name</h4>
<div class="paragraph">
<p>VkPhysicalDevice16BitStorageFeatures - Structure describing features supported by VK_KHR_16bit_storage</p>
</div>
</div>
<div class="sect3">
<h4 id="_c_specification_589">C Specification</h4>
<div class="paragraph">
<p>To query 16-bit storage features additionally supported call
<a href="#vkGetPhysicalDeviceFeatures2">vkGetPhysicalDeviceFeatures2</a> with a
<code>VkPhysicalDevice16BitStorageFeatures</code> structure included in the
<code>pNext</code> chain of its <code>pFeatures</code> parameter.
The <code>VkPhysicalDevice16BitStorageFeatures</code> structure <strong class="purple">can</strong> also be in the
<code>pNext</code> chain of a <a href="#VkDeviceCreateInfo">VkDeviceCreateInfo</a> structure, in which case it
controls which additional features are enabled in the device.</p>
</div>
<div class="paragraph">
<p>The <a href="#VkPhysicalDevice16BitStorageFeatures">VkPhysicalDevice16BitStorageFeatures</a> structure is defined as:</p>
</div>
<div id="VkPhysicalDevice16BitStorageFeatures" class="listingblock">
<div class="content">
<pre class="highlight"><code class="language-c++" data-lang="c++">typedef struct VkPhysicalDevice16BitStorageFeatures {
    VkStructureType    sType;
    void*              pNext;
    VkBool32           storageBuffer16BitAccess;
    VkBool32           uniformAndStorageBuffer16BitAccess;
    VkBool32           storagePushConstant16;
    VkBool32           storageInputOutput16;
} VkPhysicalDevice16BitStorageFeatures;</code></pre>
</div>
</div>
<div class="paragraph">
<p>or the equivalent</p>
</div>
<div id="VkPhysicalDevice16BitStorageFeaturesKHR" class="listingblock">
<div class="content">
<pre class="highlight"><code class="language-c++" data-lang="c++">typedef VkPhysicalDevice16BitStorageFeatures VkPhysicalDevice16BitStorageFeaturesKHR;</code></pre>
</div>
</div>
</div>
<div class="sect3">
<h4 id="_members_226">Members</h4>
<div class="ulist">
<ul>
<li>
<p><code>sType</code> is the type of this structure.</p>
</li>
<li>
<p><code>pNext</code> is <code>NULL</code> or a pointer to an extension-specific structure.</p>
</li>
<li>
<p><a id="features-storageBuffer16BitAccess"></a> <code>storageBuffer16BitAccess</code>
specifies whether objects in the <code>StorageBuffer</code>
or <code>PhysicalStorageBufferEXT</code>
storage class with the <code>Block</code> decoration <strong class="purple">can</strong> have 16-bit integer
and 16-bit floating-point members.
If this feature is not enabled, 16-bit integer or 16-bit floating-point
members <strong class="purple">must</strong> not be used in such objects.
This also specifies whether shader modules <strong class="purple">can</strong> declare the
<code>StorageBuffer16BitAccess</code> capability.</p>
</li>
<li>
<p><a id="features-uniformAndStorageBuffer16BitAccess"></a>
<code>uniformAndStorageBuffer16BitAccess</code> specifies whether objects in
the <code>Uniform</code> storage class with the <code>Block</code> decoration and in the
<code>StorageBuffer</code>
or <code>PhysicalStorageBufferEXT</code>
storage class with the same decoration <strong class="purple">can</strong> have 16-bit integer and
16-bit floating-point members.
If this feature is not enabled, 16-bit integer or 16-bit floating-point
members <strong class="purple">must</strong> not be used in such objects.
This also specifies whether shader modules <strong class="purple">can</strong> declare the
<code>UniformAndStorageBuffer16BitAccess</code> capability.</p>
</li>
<li>
<p><a id="features-storagePushConstant16"></a> <code>storagePushConstant16</code> specifies
whether objects in the <code>PushConstant</code> storage class <strong class="purple">can</strong> have 16-bit
integer and 16-bit floating-point members.
If this feature is not enabled, 16-bit integer or floating-point members
<strong class="purple">must</strong> not be used in such objects.
This also specifies whether shader modules <strong class="purple">can</strong> declare the
<code>StoragePushConstant16</code> capability.</p>
</li>
<li>
<p><a id="features-storageInputOutput16"></a> <code>storageInputOutput16</code> specifies
whether objects in the <code>Input</code> and <code>Output</code> storage classes <strong class="purple">can</strong>
have 16-bit integer and 16-bit floating-point members.
If this feature is not enabled, 16-bit integer or 16-bit floating-point
members <strong class="purple">must</strong> not be used in such objects.
This also specifies whether shader modules <strong class="purple">can</strong> declare the
<code>StorageInputOutput16</code> capability.</p>
</li>
</ul>
</div>
</div>
<div class="sect3">
<h4 id="_description_589">Description</h4>
<div class="sidebarblock">
<div class="content">
<div class="title">Valid Usage (Implicit)</div>
<div class="ulist">
<ul>
<li>
<p><a id="VUID-VkPhysicalDevice16BitStorageFeatures-sType-sType"></a> <code>sType</code> <strong class="purple">must</strong> be <code>VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_16BIT_STORAGE_FEATURES</code></p>
</li>
</ul>
</div>
</div>
</div>
</div>
<div class="sect3">
<h4 id="_see_also_589">See Also</h4>
<div class="paragraph">
<p><code>VkBool32</code>, <a href="#VkStructureType">VkStructureType</a></p>
</div>
</div>
<div class="sect3">
<h4 id="_document_notes_589">Document Notes</h4>
<div class="paragraph">
<p>For more information, see the Vulkan Specification at URL</p>
</div>
<div class="paragraph">
<p><a href="https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VkPhysicalDevice16BitStorageFeatures" class="bare">https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VkPhysicalDevice16BitStorageFeatures</a></p>
</div>
<div class="paragraph">
<p>This page is extracted from the Vulkan Specification.
Fixes and changes should be made to the Specification, not directly.</p>
</div>
<div style="page-break-after: always;"></div>
</div>
</div>
<div class="sect2">
<h3 id="_vkphysicaldevice8bitstoragefeatureskhr3">VkPhysicalDevice8BitStorageFeaturesKHR(3)</h3>
<div class="sect3">
<h4 id="_name_590">Name</h4>
<div class="paragraph">
<p>VkPhysicalDevice8BitStorageFeaturesKHR - Structure describing features supported by VK_KHR_8bit_storage</p>
</div>
</div>
<div class="sect3">
<h4 id="_c_specification_590">C Specification</h4>
<div class="paragraph">
<p>To query 8-bit storage features additionally supported call
<a href="#vkGetPhysicalDeviceFeatures2">vkGetPhysicalDeviceFeatures2</a> with a
<code>VkPhysicalDevice8BitStorageFeaturesKHR</code> structure included in the
<code>pNext</code> chain of its <code>pFeatures</code> parameter.
The <code>VkPhysicalDevice8BitStorageFeaturesKHR</code> structure <strong class="purple">can</strong> also be in
the <code>pNext</code> chain of a <a href="#VkDeviceCreateInfo">VkDeviceCreateInfo</a> structure, in which case
it controls which additional features are enabled in the device.</p>
</div>
<div class="paragraph">
<p>The <a href="#VkPhysicalDevice8BitStorageFeaturesKHR">VkPhysicalDevice8BitStorageFeaturesKHR</a> structure is defined as:</p>
</div>
<div id="VkPhysicalDevice8BitStorageFeaturesKHR" class="listingblock">
<div class="content">
<pre class="highlight"><code class="language-c++" data-lang="c++">typedef struct VkPhysicalDevice8BitStorageFeaturesKHR {
    VkStructureType    sType;
    void*              pNext;
    VkBool32           storageBuffer8BitAccess;
    VkBool32           uniformAndStorageBuffer8BitAccess;
    VkBool32           storagePushConstant8;
} VkPhysicalDevice8BitStorageFeaturesKHR;</code></pre>
</div>
</div>
</div>
<div class="sect3">
<h4 id="_members_227">Members</h4>
<div class="ulist">
<ul>
<li>
<p><code>sType</code> is the type of this structure.</p>
</li>
<li>
<p><code>pNext</code> is <code>NULL</code> or a pointer to an extension-specific structure.</p>
</li>
<li>
<p><a id="features-storageBuffer8BitAccess"></a> <code>storageBuffer8BitAccess</code>
indicates whether objects in the <code>StorageBuffer</code>
or <code>PhysicalStorageBufferEXT</code>
storage class with the <code>Block</code> decoration <strong class="purple">can</strong> have 8-bit integer
members.
If this feature is not enabled, 8-bit integer members <strong class="purple">must</strong> not be used
in such objects.
This also indicates whether shader modules <strong class="purple">can</strong> declare the
<code>StorageBuffer8BitAccess</code> capability.</p>
</li>
<li>
<p><a id="features-uniformAndStorageBuffer8BitAccess"></a>
<code>uniformAndStorageBuffer8BitAccess</code> indicates whether objects in the
<code>Uniform</code> storage class with the <code>Block</code> decoration and in the
<code>StorageBuffer</code>
or <code>PhysicalStorageBufferEXT</code>
storage class with the same decoration <strong class="purple">can</strong> have 8-bit integer members.
If this feature is not enabled, 8-bit integer members <strong class="purple">must</strong> not be used
in such objects.
This also indicates whether shader modules <strong class="purple">can</strong> declare the
<code>UniformAndStorageBuffer8BitAccess</code> capability.</p>
</li>
<li>
<p><a id="features-storagePushConstant8"></a> <code>storagePushConstant8</code> indicates
whether objects in the <code>PushConstant</code> storage class <strong class="purple">can</strong> have 8-bit
integer members.
If this feature is not enabled, 8-bit integer members <strong class="purple">must</strong> not be used
in such objects.
This also indicates whether shader modules <strong class="purple">can</strong> declare the
<code>StoragePushConstant8</code> capability.</p>
</li>
</ul>
</div>
</div>
<div class="sect3">
<h4 id="_description_590">Description</h4>
<div class="sidebarblock">
<div class="content">
<div class="title">Valid Usage (Implicit)</div>
<div class="ulist">
<ul>
<li>
<p><a id="VUID-VkPhysicalDevice8BitStorageFeaturesKHR-sType-sType"></a> <code>sType</code> <strong class="purple">must</strong> be <code>VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_8BIT_STORAGE_FEATURES_KHR</code></p>
</li>
</ul>
</div>
</div>
</div>
</div>
<div class="sect3">
<h4 id="_see_also_590">See Also</h4>
<div class="paragraph">
<p><code>VkBool32</code>, <a href="#VkStructureType">VkStructureType</a></p>
</div>
</div>
<div class="sect3">
<h4 id="_document_notes_590">Document Notes</h4>
<div class="paragraph">
<p>For more information, see the Vulkan Specification at URL</p>
</div>
<div class="paragraph">
<p><a href="https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VkPhysicalDevice8BitStorageFeaturesKHR" class="bare">https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VkPhysicalDevice8BitStorageFeaturesKHR</a></p>
</div>
<div class="paragraph">
<p>This page is extracted from the Vulkan Specification.
Fixes and changes should be made to the Specification, not directly.</p>
</div>
<div style="page-break-after: always;"></div>
</div>
</div>
<div class="sect2">
<h3 id="_vkphysicaldeviceastcdecodefeaturesext3">VkPhysicalDeviceASTCDecodeFeaturesEXT(3)</h3>
<div class="sect3">
<h4 id="_name_591">Name</h4>
<div class="paragraph">
<p>VkPhysicalDeviceASTCDecodeFeaturesEXT - Structure describing ASTC decode mode features</p>
</div>
</div>
<div class="sect3">
<h4 id="_c_specification_591">C Specification</h4>
<div class="paragraph">
<p>The <code>VkPhysicalDeviceASTCDecodeFeaturesEXT</code> structure is defined as:</p>
</div>
<div id="VkPhysicalDeviceASTCDecodeFeaturesEXT" class="listingblock">
<div class="content">
<pre class="highlight"><code class="language-c++" data-lang="c++">typedef struct VkPhysicalDeviceASTCDecodeFeaturesEXT {
    VkStructureType    sType;
    void*              pNext;
    VkBool32           decodeModeSharedExponent;
} VkPhysicalDeviceASTCDecodeFeaturesEXT;</code></pre>
</div>
</div>
</div>
<div class="sect3">
<h4 id="_members_228">Members</h4>
<div class="paragraph">
<p>The members of the <code>VkPhysicalDeviceASTCDecodeFeaturesEXT</code> structure
describe the following features:</p>
</div>
</div>
<div class="sect3">
<h4 id="_description_591">Description</h4>
<div class="ulist">
<ul>
<li>
<p><a id="features-astc-decodeModeSharedExponent"></a>
<code>decodeModeSharedExponent</code> indicates whether the implementation
supports decoding ASTC compressed formats to
<code>VK_FORMAT_E5B9G9R9_UFLOAT_PACK32</code> internal precision.</p>
</li>
</ul>
</div>
<div class="paragraph">
<p>If the <code>VkPhysicalDeviceASTCDecodeFeaturesEXT</code> structure is included in
the <code>pNext</code> chain of <a href="#vkGetPhysicalDeviceFeatures2KHR">vkGetPhysicalDeviceFeatures2KHR</a>, it is filled
with values indicating whether each feature is supported.
<code>VkPhysicalDeviceASTCDecodeFeaturesEXT</code> <strong class="purple">can</strong> also be used in the
<code>pNext</code> chain of <a href="#vkCreateDevice">vkCreateDevice</a> to enable features.</p>
</div>
<div class="sidebarblock">
<div class="content">
<div class="title">Valid Usage (Implicit)</div>
<div class="ulist">
<ul>
<li>
<p><a id="VUID-VkPhysicalDeviceASTCDecodeFeaturesEXT-sType-sType"></a> <code>sType</code> <strong class="purple">must</strong> be <code>VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_ASTC_DECODE_FEATURES_EXT</code></p>
</li>
</ul>
</div>
</div>
</div>
</div>
<div class="sect3">
<h4 id="_see_also_591">See Also</h4>
<div class="paragraph">
<p><code>VkBool32</code>, <a href="#VkStructureType">VkStructureType</a></p>
</div>
</div>
<div class="sect3">
<h4 id="_document_notes_591">Document Notes</h4>
<div class="paragraph">
<p>For more information, see the Vulkan Specification at URL</p>
</div>
<div class="paragraph">
<p><a href="https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VkPhysicalDeviceASTCDecodeFeaturesEXT" class="bare">https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VkPhysicalDeviceASTCDecodeFeaturesEXT</a></p>
</div>
<div class="paragraph">
<p>This page is extracted from the Vulkan Specification.
Fixes and changes should be made to the Specification, not directly.</p>
</div>
<div style="page-break-after: always;"></div>
</div>
</div>
<div class="sect2">
<h3 id="_vkphysicaldeviceblendoperationadvancedfeaturesext3">VkPhysicalDeviceBlendOperationAdvancedFeaturesEXT(3)</h3>
<div class="sect3">
<h4 id="_name_592">Name</h4>
<div class="paragraph">
<p>VkPhysicalDeviceBlendOperationAdvancedFeaturesEXT - Structure describing advanced blending features that can be supported by an implementation</p>
</div>
</div>
<div class="sect3">
<h4 id="_c_specification_592">C Specification</h4>
<div class="paragraph">
<p>The <code>VkPhysicalDeviceBlendOperationAdvancedFeaturesEXT</code> structure is
defined as:</p>
</div>
<div id="VkPhysicalDeviceBlendOperationAdvancedFeaturesEXT" class="listingblock">
<div class="content">
<pre class="highlight"><code class="language-c++" data-lang="c++">typedef struct VkPhysicalDeviceBlendOperationAdvancedFeaturesEXT {
    VkStructureType    sType;
    void*              pNext;
    VkBool32           advancedBlendCoherentOperations;
} VkPhysicalDeviceBlendOperationAdvancedFeaturesEXT;</code></pre>
</div>
</div>
</div>
<div class="sect3">
<h4 id="_members_229">Members</h4>
<div class="paragraph">
<p>The members of the <code>VkPhysicalDeviceBlendOperationAdvancedFeaturesEXT</code>
structure describe the following features:</p>
</div>
</div>
<div class="sect3">
<h4 id="_description_592">Description</h4>
<div class="ulist">
<ul>
<li>
<p><a id="features-advancedBlendCoherentOperations"></a>
<code>advancedBlendCoherentOperations</code> specifies whether blending using
<a href="vkspec.html#framebuffer-blend-advanced">advanced blend operations</a> is guaranteed
to execute atomically and in <a href="vkspec.html#drawing-primitive-order">primitive
order</a>.
If this is <code>VK_TRUE</code>,
<code>VK_ACCESS_COLOR_ATTACHMENT_READ_NONCOHERENT_BIT_EXT</code> is treated the
same as <code>VK_ACCESS_COLOR_ATTACHMENT_READ_BIT</code>, and advanced blending
needs no additional synchronization over basic blending.
If this is <code>VK_FALSE</code>, then memory dependencies are required to
guarantee order between two advanced blending operations that occur on
the same sample.</p>
</li>
</ul>
</div>
<div class="paragraph">
<p>If the <code>VkPhysicalDeviceBlendOperationAdvancedFeaturesEXT</code> structure is
included in the <code>pNext</code> chain of <a href="#VkPhysicalDeviceFeatures2">VkPhysicalDeviceFeatures2</a>, it is
filled with values indicating whether each feature is supported.
<code>VkPhysicalDeviceBlendOperationAdvancedFeaturesEXT</code> <strong class="purple">can</strong> also be used in
<code>pNext</code> chain of <a href="#VkDeviceCreateInfo">VkDeviceCreateInfo</a> to enable the features.</p>
</div>
<div class="sidebarblock">
<div class="content">
<div class="title">Valid Usage (Implicit)</div>
<div class="ulist">
<ul>
<li>
<p><a id="VUID-VkPhysicalDeviceBlendOperationAdvancedFeaturesEXT-sType-sType"></a> <code>sType</code> <strong class="purple">must</strong> be <code>VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_BLEND_OPERATION_ADVANCED_FEATURES_EXT</code></p>
</li>
</ul>
</div>
</div>
</div>
</div>
<div class="sect3">
<h4 id="_see_also_592">See Also</h4>
<div class="paragraph">
<p><code>VkBool32</code>, <a href="#VkStructureType">VkStructureType</a></p>
</div>
</div>
<div class="sect3">
<h4 id="_document_notes_592">Document Notes</h4>
<div class="paragraph">
<p>For more information, see the Vulkan Specification at URL</p>
</div>
<div class="paragraph">
<p><a href="https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VkPhysicalDeviceBlendOperationAdvancedFeaturesEXT" class="bare">https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VkPhysicalDeviceBlendOperationAdvancedFeaturesEXT</a></p>
</div>
<div class="paragraph">
<p>This page is extracted from the Vulkan Specification.
Fixes and changes should be made to the Specification, not directly.</p>
</div>
<div style="page-break-after: always;"></div>
</div>
</div>
<div class="sect2">
<h3 id="_vkphysicaldeviceblendoperationadvancedpropertiesext3">VkPhysicalDeviceBlendOperationAdvancedPropertiesEXT(3)</h3>
<div class="sect3">
<h4 id="_name_593">Name</h4>
<div class="paragraph">
<p>VkPhysicalDeviceBlendOperationAdvancedPropertiesEXT - Structure describing advanced blending limits that can be supported by an implementation</p>
</div>
</div>
<div class="sect3">
<h4 id="_c_specification_593">C Specification</h4>
<div class="paragraph">
<p>The <code>VkPhysicalDeviceBlendOperationAdvancedPropertiesEXT</code> structure is
defined as:</p>
</div>
<div id="VkPhysicalDeviceBlendOperationAdvancedPropertiesEXT" class="listingblock">
<div class="content">
<pre class="highlight"><code class="language-c++" data-lang="c++">typedef struct VkPhysicalDeviceBlendOperationAdvancedPropertiesEXT {
    VkStructureType    sType;
    void*              pNext;
    uint32_t           advancedBlendMaxColorAttachments;
    VkBool32           advancedBlendIndependentBlend;
    VkBool32           advancedBlendNonPremultipliedSrcColor;
    VkBool32           advancedBlendNonPremultipliedDstColor;
    VkBool32           advancedBlendCorrelatedOverlap;
    VkBool32           advancedBlendAllOperations;
} VkPhysicalDeviceBlendOperationAdvancedPropertiesEXT;</code></pre>
</div>
</div>
</div>
<div class="sect3">
<h4 id="_members_230">Members</h4>
<div class="paragraph">
<p>The members of the <code>VkPhysicalDeviceBlendOperationAdvancedPropertiesEXT</code>
structure describe the following implementation-dependent limits:</p>
</div>
</div>
<div class="sect3">
<h4 id="_description_593">Description</h4>
<div class="ulist">
<ul>
<li>
<p><code>sType</code> is the type of this structure.</p>
</li>
<li>
<p><code>pNext</code> is <code>NULL</code> or a pointer to an extension-specific structure.</p>
</li>
<li>
<p><a id="limits-advancedBlendMaxColorAttachments"></a>
<code>advancedBlendMaxColorAttachments</code> is one greater than the highest
color attachment index that <strong class="purple">can</strong> be used in a subpass, for a pipeline
that uses an <a href="vkspec.html#framebuffer-blend-advanced">advanced blend operation</a>.</p>
</li>
<li>
<p><a id="limits-advancedBlendIndependentBlend"></a>
<code>advancedBlendIndependentBlend</code> specifies whether advanced blend
operations <strong class="purple">can</strong> vary per-attachment.</p>
</li>
<li>
<p><a id="limits-advancedBlendNonPremultipliedSrcColor"></a>
<code>advancedBlendNonPremultipliedSrcColor</code> specifies whether the source
color <strong class="purple">can</strong> be treated as non-premultiplied.
If this is <code>VK_FALSE</code>, then
<a href="#VkPipelineColorBlendAdvancedStateCreateInfoEXT">VkPipelineColorBlendAdvancedStateCreateInfoEXT</a>::<code>srcPremultiplied</code>
<strong class="purple">must</strong> be <code>VK_TRUE</code>.</p>
</li>
<li>
<p><a id="limits-advancedBlendNonPremultipliedDstColor"></a>
<code>advancedBlendNonPremultipliedDstColor</code> specifies whether the
destination color <strong class="purple">can</strong> be treated as non-premultiplied.
If this is <code>VK_FALSE</code>, then
<a href="#VkPipelineColorBlendAdvancedStateCreateInfoEXT">VkPipelineColorBlendAdvancedStateCreateInfoEXT</a>::<code>dstPremultiplied</code>
<strong class="purple">must</strong> be <code>VK_TRUE</code>.</p>
</li>
<li>
<p><a id="limits-advancedBlendCorrelatedOverlap"></a>
<code>advancedBlendCorrelatedOverlap</code> specifies whether the overlap mode
<strong class="purple">can</strong> be treated as correlated.
If this is <code>VK_FALSE</code>, then
<a href="#VkPipelineColorBlendAdvancedStateCreateInfoEXT">VkPipelineColorBlendAdvancedStateCreateInfoEXT</a>::<code>blendOverlap</code>
<strong class="purple">must</strong> be <code>VK_BLEND_OVERLAP_UNCORRELATED_EXT</code>.</p>
</li>
<li>
<p><a id="limits-advancedBlendAllOperations"></a> <code>advancedBlendAllOperations</code>
specifies whether all advanced blend operation enums are supported.
See the valid usage of <a href="#VkPipelineColorBlendAttachmentState">VkPipelineColorBlendAttachmentState</a>.</p>
</li>
</ul>
</div>
<div class="paragraph">
<p>If the <code>VkPhysicalDeviceBlendOperationAdvancedPropertiesEXT</code> structure
is included in the <code>pNext</code> chain of <a href="#VkPhysicalDeviceProperties2">VkPhysicalDeviceProperties2</a>,
it is filled with the implementation-dependent limits.</p>
</div>
<div class="sidebarblock">
<div class="content">
<div class="title">Valid Usage (Implicit)</div>
<div class="ulist">
<ul>
<li>
<p><a id="VUID-VkPhysicalDeviceBlendOperationAdvancedPropertiesEXT-sType-sType"></a> <code>sType</code> <strong class="purple">must</strong> be <code>VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_BLEND_OPERATION_ADVANCED_PROPERTIES_EXT</code></p>
</li>
</ul>
</div>
</div>
</div>
</div>
<div class="sect3">
<h4 id="_see_also_593">See Also</h4>
<div class="paragraph">
<p><code>VkBool32</code>, <a href="#VkStructureType">VkStructureType</a></p>
</div>
</div>
<div class="sect3">
<h4 id="_document_notes_593">Document Notes</h4>
<div class="paragraph">
<p>For more information, see the Vulkan Specification at URL</p>
</div>
<div class="paragraph">
<p><a href="https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VkPhysicalDeviceBlendOperationAdvancedPropertiesEXT" class="bare">https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VkPhysicalDeviceBlendOperationAdvancedPropertiesEXT</a></p>
</div>
<div class="paragraph">
<p>This page is extracted from the Vulkan Specification.
Fixes and changes should be made to the Specification, not directly.</p>
</div>
<div style="page-break-after: always;"></div>
</div>
</div>
<div class="sect2">
<h3 id="_vkphysicaldevicebufferdeviceaddressfeaturesext3">VkPhysicalDeviceBufferDeviceAddressFeaturesEXT(3)</h3>
<div class="sect3">
<h4 id="_name_594">Name</h4>
<div class="paragraph">
<p>VkPhysicalDeviceBufferDeviceAddressFeaturesEXT - Structure describing buffer address features that can be supported by an implementation</p>
</div>
</div>
<div class="sect3">
<h4 id="_c_specification_594">C Specification</h4>
<div class="paragraph">
<p>The <code>VkPhysicalDeviceBufferDeviceAddressFeaturesEXT</code> structure is
defined as:</p>
</div>
<div id="VkPhysicalDeviceBufferDeviceAddressFeaturesEXT" class="listingblock">
<div class="content">
<pre class="highlight"><code class="language-c++" data-lang="c++">typedef struct VkPhysicalDeviceBufferDeviceAddressFeaturesEXT {
    VkStructureType    sType;
    void*              pNext;
    VkBool32           bufferDeviceAddress;
    VkBool32           bufferDeviceAddressCaptureReplay;
    VkBool32           bufferDeviceAddressMultiDevice;
} VkPhysicalDeviceBufferDeviceAddressFeaturesEXT;</code></pre>
</div>
</div>
</div>
<div class="sect3">
<h4 id="_members_231">Members</h4>
<div class="paragraph">
<p>The members of the <code>VkPhysicalDeviceBufferDeviceAddressFeaturesEXT</code>
structure describe the following features:</p>
</div>
</div>
<div class="sect3">
<h4 id="_description_594">Description</h4>
<div class="ulist">
<ul>
<li>
<p><a id="features-bufferDeviceAddress"></a> <code>bufferDeviceAddress</code> indicates
that the implementation supports accessing buffer memory in shaders as
storage buffers via an address queried from
<a href="#vkGetBufferDeviceAddressEXT">vkGetBufferDeviceAddressEXT</a>.</p>
</li>
<li>
<p><a id="features-bufferDeviceAddressCaptureReplay"></a>
<code>bufferDeviceAddressCaptureReplay</code> indicates that the implementation
supports saving and reusing buffer addresses, e.g. for trace capture and
replay.</p>
</li>
<li>
<p><a id="features-bufferDeviceAddressMultiDevice"></a>
<code>bufferDeviceAddressMultiDevice</code> indicates that the implementation
supports the <code>bufferDeviceAddress</code> feature for logical devices
created with multiple physical devices.
If this feature is not supported, buffer addresses <strong class="purple">must</strong> not be queried
on a logical device created with more than one physical device.</p>
</li>
</ul>
</div>
<div class="admonitionblock note">
<table>
<tr>
<td class="icon">
<i class="fa icon-note" title="Note"></i>
</td>
<td class="content">
<div class="title">Note</div>
<div class="paragraph">
<p><code>bufferDeviceAddressMultiDevice</code> exists to allow certain legacy
platforms to be able to support <code>bufferDeviceAddress</code> without needing to
support shared GPU virtual addresses for multi-device configurations.</p>
</div>
</td>
</tr>
</table>
</div>
<div class="paragraph">
<p>See <a href="#vkGetBufferDeviceAddressEXT">vkGetBufferDeviceAddressEXT</a> for more information.</p>
</div>
<div class="paragraph">
<p>If the <code>VkPhysicalDeviceBufferDeviceAddressFeaturesEXT</code> structure is
included in the <code>pNext</code> chain of <a href="#VkPhysicalDeviceFeatures2KHR">VkPhysicalDeviceFeatures2KHR</a>, it
is filled with values indicating whether the feature is supported.
<code>VkPhysicalDeviceBufferDeviceAddressFeaturesEXT</code> <strong class="purple">can</strong> also be used in
the <code>pNext</code> chain of <a href="#VkDeviceCreateInfo">VkDeviceCreateInfo</a> to enable features.</p>
</div>
<div class="sidebarblock">
<div class="content">
<div class="title">Valid Usage (Implicit)</div>
<div class="ulist">
<ul>
<li>
<p><a id="VUID-VkPhysicalDeviceBufferDeviceAddressFeaturesEXT-sType-sType"></a> <code>sType</code> <strong class="purple">must</strong> be <code>VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_BUFFER_DEVICE_ADDRESS_FEATURES_EXT</code></p>
</li>
</ul>
</div>
</div>
</div>
</div>
<div class="sect3">
<h4 id="_see_also_594">See Also</h4>
<div class="paragraph">
<p><code>VkBool32</code>, <a href="#VkStructureType">VkStructureType</a></p>
</div>
</div>
<div class="sect3">
<h4 id="_document_notes_594">Document Notes</h4>
<div class="paragraph">
<p>For more information, see the Vulkan Specification at URL</p>
</div>
<div class="paragraph">
<p><a href="https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VkPhysicalDeviceBufferDeviceAddressFeaturesEXT" class="bare">https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VkPhysicalDeviceBufferDeviceAddressFeaturesEXT</a></p>
</div>
<div class="paragraph">
<p>This page is extracted from the Vulkan Specification.
Fixes and changes should be made to the Specification, not directly.</p>
</div>
<div style="page-break-after: always;"></div>
</div>
</div>
<div class="sect2">
<h3 id="_vkphysicaldevicecomputeshaderderivativesfeaturesnv3">VkPhysicalDeviceComputeShaderDerivativesFeaturesNV(3)</h3>
<div class="sect3">
<h4 id="_name_595">Name</h4>
<div class="paragraph">
<p>VkPhysicalDeviceComputeShaderDerivativesFeaturesNV - Structure describing compute shader derivative features that can be supported by an implementation</p>
</div>
</div>
<div class="sect3">
<h4 id="_c_specification_595">C Specification</h4>
<div class="paragraph">
<p>The <code>VkPhysicalDeviceComputeShaderDerivativesFeaturesNV</code> structure is
defined as:</p>
</div>
<div id="VkPhysicalDeviceComputeShaderDerivativesFeaturesNV" class="listingblock">
<div class="content">
<pre class="highlight"><code class="language-c++" data-lang="c++">typedef struct VkPhysicalDeviceComputeShaderDerivativesFeaturesNV {
    VkStructureType    sType;
    void*              pNext;
    VkBool32           computeDerivativeGroupQuads;
    VkBool32           computeDerivativeGroupLinear;
} VkPhysicalDeviceComputeShaderDerivativesFeaturesNV;</code></pre>
</div>
</div>
</div>
<div class="sect3">
<h4 id="_members_232">Members</h4>
<div class="paragraph">
<p>The members of the <code>VkPhysicalDeviceComputeShaderDerivativesFeaturesNV</code>
structure describe the following features:</p>
</div>
</div>
<div class="sect3">
<h4 id="_description_595">Description</h4>
<div class="ulist">
<ul>
<li>
<p><a id="features-computeShaderDerivativesQuads"></a>
<code>computeDerivativeGroupQuads</code> indicates that the implementation
supports the <code>ComputeDerivativeGroupQuadsNV</code> SPIR-V capability.</p>
</li>
<li>
<p><a id="features-computeShaderDerivativesLinear"></a>
<code>computeDerivativeGroupLinear</code> indicates that the implementation
supports the <code>ComputeDerivativeGroupLinearNV</code> SPIR-V capability.</p>
</li>
</ul>
</div>
<div class="paragraph">
<p>See <a href="vkspec.html#texture-derivatives-compute">Compute Shader Derivatives</a> for more
information.</p>
</div>
<div class="paragraph">
<p>If the <code>VkPhysicalDeviceComputeShaderDerivativesFeaturesNV</code> structure is
included in the <code>pNext</code> chain of <a href="#VkPhysicalDeviceFeatures2KHR">VkPhysicalDeviceFeatures2KHR</a>, it
is filled with values indicating whether each feature is supported.
<code>VkPhysicalDeviceComputeShaderDerivativesFeaturesNV</code> <strong class="purple">can</strong> also be used
in the <code>pNext</code> chain of <a href="#VkDeviceCreateInfo">VkDeviceCreateInfo</a> to enable features.</p>
</div>
<div class="sidebarblock">
<div class="content">
<div class="title">Valid Usage (Implicit)</div>
<div class="ulist">
<ul>
<li>
<p><a id="VUID-VkPhysicalDeviceComputeShaderDerivativesFeaturesNV-sType-sType"></a> <code>sType</code> <strong class="purple">must</strong> be <code>VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_COMPUTE_SHADER_DERIVATIVES_FEATURES_NV</code></p>
</li>
</ul>
</div>
</div>
</div>
</div>
<div class="sect3">
<h4 id="_see_also_595">See Also</h4>
<div class="paragraph">
<p><code>VkBool32</code>, <a href="#VkStructureType">VkStructureType</a></p>
</div>
</div>
<div class="sect3">
<h4 id="_document_notes_595">Document Notes</h4>
<div class="paragraph">
<p>For more information, see the Vulkan Specification at URL</p>
</div>
<div class="paragraph">
<p><a href="https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VkPhysicalDeviceComputeShaderDerivativesFeaturesNV" class="bare">https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VkPhysicalDeviceComputeShaderDerivativesFeaturesNV</a></p>
</div>
<div class="paragraph">
<p>This page is extracted from the Vulkan Specification.
Fixes and changes should be made to the Specification, not directly.</p>
</div>
<div style="page-break-after: always;"></div>
</div>
</div>
<div class="sect2">
<h3 id="_vkphysicaldeviceconditionalrenderingfeaturesext3">VkPhysicalDeviceConditionalRenderingFeaturesEXT(3)</h3>
<div class="sect3">
<h4 id="_name_596">Name</h4>
<div class="paragraph">
<p>VkPhysicalDeviceConditionalRenderingFeaturesEXT - Structure describing if a secondary command buffer can be executed if conditional rendering is active in the primary command buffer</p>
</div>
</div>
<div class="sect3">
<h4 id="_c_specification_596">C Specification</h4>
<div class="paragraph">
<p>The <code>VkPhysicalDeviceConditionalRenderingFeaturesEXT</code> structure is
defined as:</p>
</div>
<div id="VkPhysicalDeviceConditionalRenderingFeaturesEXT" class="listingblock">
<div class="content">
<pre class="highlight"><code class="language-c++" data-lang="c++">typedef struct VkPhysicalDeviceConditionalRenderingFeaturesEXT {
    VkStructureType    sType;
    void*              pNext;
    VkBool32           conditionalRendering;
    VkBool32           inheritedConditionalRendering;
} VkPhysicalDeviceConditionalRenderingFeaturesEXT;</code></pre>
</div>
</div>
</div>
<div class="sect3">
<h4 id="_members_233">Members</h4>
<div class="ulist">
<ul>
<li>
<p><code>sType</code> is the type of this structure.</p>
</li>
<li>
<p><code>pNext</code> is <code>NULL</code> or a pointer to an extension-specific structure.</p>
</li>
<li>
<p><a id="features-conditionalRendering"></a> <code>conditionalRendering</code> specifies
whether conditional rendering is supported.</p>
</li>
<li>
<p><a id="features-inheritedConditionalRendering"></a>
<code>inheritedConditionalRendering</code> specifies whether a secondary
command buffer <strong class="purple">can</strong> be executed while conditional rendering is active in
the primary command buffer.</p>
</li>
</ul>
</div>
</div>
<div class="sect3">
<h4 id="_description_596">Description</h4>
<div class="paragraph">
<p>If the <code>VkPhysicalDeviceConditionalRenderingFeaturesEXT</code> structure is
included in the <code>pNext</code> chain of <a href="#VkPhysicalDeviceFeatures2">VkPhysicalDeviceFeatures2</a>, it is
filled with values indicating the implementation-dependent behavior.
<code>VkPhysicalDeviceConditionalRenderingFeaturesEXT</code> <strong class="purple">can</strong> also be used in
<code>pNext</code> chain of <a href="#VkDeviceCreateInfo">VkDeviceCreateInfo</a> to enable the features.</p>
</div>
<div class="sidebarblock">
<div class="content">
<div class="title">Valid Usage (Implicit)</div>
<div class="ulist">
<ul>
<li>
<p><a id="VUID-VkPhysicalDeviceConditionalRenderingFeaturesEXT-sType-sType"></a> <code>sType</code> <strong class="purple">must</strong> be <code>VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_CONDITIONAL_RENDERING_FEATURES_EXT</code></p>
</li>
</ul>
</div>
</div>
</div>
</div>
<div class="sect3">
<h4 id="_see_also_596">See Also</h4>
<div class="paragraph">
<p><code>VkBool32</code>, <a href="#VkStructureType">VkStructureType</a></p>
</div>
</div>
<div class="sect3">
<h4 id="_document_notes_596">Document Notes</h4>
<div class="paragraph">
<p>For more information, see the Vulkan Specification at URL</p>
</div>
<div class="paragraph">
<p><a href="https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VkPhysicalDeviceConditionalRenderingFeaturesEXT" class="bare">https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VkPhysicalDeviceConditionalRenderingFeaturesEXT</a></p>
</div>
<div class="paragraph">
<p>This page is extracted from the Vulkan Specification.
Fixes and changes should be made to the Specification, not directly.</p>
</div>
<div style="page-break-after: always;"></div>
</div>
</div>
<div class="sect2">
<h3 id="_vkphysicaldeviceconservativerasterizationpropertiesext3">VkPhysicalDeviceConservativeRasterizationPropertiesEXT(3)</h3>
<div class="sect3">
<h4 id="_name_597">Name</h4>
<div class="paragraph">
<p>VkPhysicalDeviceConservativeRasterizationPropertiesEXT - Structure describing conservative raster properties that can be supported by an implementation</p>
</div>
</div>
<div class="sect3">
<h4 id="_c_specification_597">C Specification</h4>
<div class="paragraph">
<p>The <code>VkPhysicalDeviceConservativeRasterizationPropertiesEXT</code> structure
is defined as:</p>
</div>
<div id="VkPhysicalDeviceConservativeRasterizationPropertiesEXT" class="listingblock">
<div class="content">
<pre class="highlight"><code class="language-c++" data-lang="c++">typedef struct VkPhysicalDeviceConservativeRasterizationPropertiesEXT {
    VkStructureType    sType;
    void*              pNext;
    float              primitiveOverestimationSize;
    float              maxExtraPrimitiveOverestimationSize;
    float              extraPrimitiveOverestimationSizeGranularity;
    VkBool32           primitiveUnderestimation;
    VkBool32           conservativePointAndLineRasterization;
    VkBool32           degenerateTrianglesRasterized;
    VkBool32           degenerateLinesRasterized;
    VkBool32           fullyCoveredFragmentShaderInputVariable;
    VkBool32           conservativeRasterizationPostDepthCoverage;
} VkPhysicalDeviceConservativeRasterizationPropertiesEXT;</code></pre>
</div>
</div>
</div>
<div class="sect3">
<h4 id="_members_234">Members</h4>
<div class="paragraph">
<p>The members of the
<code>VkPhysicalDeviceConservativeRasterizationPropertiesEXT</code> structure
describe the following implementation-dependent limits:</p>
</div>
</div>
<div class="sect3">
<h4 id="_description_597">Description</h4>
<div class="ulist">
<ul>
<li>
<p><code>sType</code> is the type of this structure.</p>
</li>
<li>
<p><code>pNext</code> is <code>NULL</code> or a pointer to an extension-specific structure.</p>
</li>
<li>
<p><a id="limits-primitiveOverestimationSize"></a> <code>primitiveOverestimationSize</code>
is the size in pixels the generating primitive is increased at each of
its edges during conservative rasterization overestimation mode.
Even with a size of 0.0, conservative rasterization overestimation rules
still apply and if any part of the pixel rectangle is covered by the
generating primitive, fragments are generated for the entire pixel.
However implementations <strong class="purple">may</strong> make the pixel coverage area even more
conservative by increasing the size of the generating primitive.</p>
</li>
<li>
<p><a id="limits-maxExtraPrimitiveOverestimationSize"></a>
<code>maxExtraPrimitiveOverestimationSize</code> is the maximum size in pixels
of extra overestimation the implementation supports in the pipeline
state.
A value of 0.0 means the implementation does not support any additional
overestimation of the generating primitive during conservative
rasterization.
A value above 0.0 allows the application to further increase the size of
the generating primitive during conservative rasterization
overestimation.</p>
</li>
<li>
<p><a id="limits-extraPrimitiveOverestimationSizeGranularity"></a>
<code>extraPrimitiveOverestimationSizeGranularity</code> is the granularity of
extra overestimation that can be specified in the pipeline state between
0.0 and <code>maxExtraPrimitiveOverestimationSize</code> inclusive.
A value of 0.0 means the implementation can use the smallest
representable non-zero value in the screen space pixel fixed-point grid.</p>
</li>
<li>
<p><a id="limits-primitiveUnderestimation"></a> <code>primitiveUnderestimation</code> is
true if the implementation supports the
<code>VK_CONSERVATIVE_RASTERIZATION_MODE_UNDERESTIMATE_EXT</code> conservative
rasterization mode in addition to
<code>VK_CONSERVATIVE_RASTERIZATION_MODE_OVERESTIMATE_EXT</code>.
Otherwise the implementation only supports
<code>VK_CONSERVATIVE_RASTERIZATION_MODE_OVERESTIMATE_EXT</code>.</p>
</li>
<li>
<p><a id="limits-conservativePointAndLineRasterization"></a>
<code>conservativePointAndLineRasterization</code> is true if the
implementation supports conservative rasterization of point and line
primitives as well as triangle primitives.
Otherwise the implementation only supports triangle primitives.</p>
</li>
<li>
<p><a id="limits-degenerateTrianglesRasterized"></a>
<code>degenerateTrianglesRasterized</code> is false if the implementation culls
primitives generated from triangles that become zero area after they are
quantized to the fixed-point rasterization pixel grid.
<code>degenerateTrianglesRasterized</code> is true if these primitives are not
culled and the provoking vertex attributes and depth value are used for
the fragments.
The primitive area calculation is done on the primitive generated from
the clipped triangle if applicable.
Zero area primitives are backfacing and the application <strong class="purple">can</strong> enable
backface culling if desired.</p>
</li>
<li>
<p><a id="limits-degenerateLinesRasterized"></a> <code>degenerateLinesRasterized</code> is
false if the implementation culls lines that become zero length after
they are quantized to the fixed-point rasterization pixel grid.
<code>degenerateLinesRasterized</code> is true if zero length lines are not
culled and the provoking vertex attributes and depth value are used for
the fragments.</p>
</li>
<li>
<p><a id="limits-fullyCoveredFragmentShaderInputVariable"></a>
<code>fullyCoveredFragmentShaderInputVariable</code> is true if the
implementation supports the SPIR-V builtin fragment shader input
variable FullyCoveredEXT which specifies that conservative rasterization
is enabled and the fragment area is fully covered by the generating
primitive.</p>
</li>
<li>
<p><a id="limits-conservativeRasterizationPostDepthCoverage"></a>
<code>conservativeRasterizationPostDepthCoverage</code> is true if the
implementation supports conservative rasterization with the
<a href="vkspec.html#shaders-fragment-earlytest-postdepthcoverage"><code>PostDepthCoverage</code></a>
execution mode enabled.
When supported the <code>SampleMask</code> built-in input variable will reflect
the coverage after the early per-fragment depth and stencil tests are
applied even when conservative rasterization is enabled.
Otherwise
<a href="vkspec.html#shaders-fragment-earlytest-postdepthcoverage"><code>PostDepthCoverage</code></a>
execution mode <strong class="purple">must</strong> not be used when conservative rasterization is
enabled.</p>
</li>
</ul>
</div>
<div class="paragraph">
<p>If the <code>VkPhysicalDeviceConservativeRasterizationPropertiesEXT</code>
structure is included in the <code>pNext</code> chain of
<a href="#VkPhysicalDeviceProperties2">VkPhysicalDeviceProperties2</a>, it is filled with the
implementation-dependent limits and properties.</p>
</div>
<div class="sidebarblock">
<div class="content">
<div class="title">Valid Usage (Implicit)</div>
<div class="ulist">
<ul>
<li>
<p><a id="VUID-VkPhysicalDeviceConservativeRasterizationPropertiesEXT-sType-sType"></a> <code>sType</code> <strong class="purple">must</strong> be <code>VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_CONSERVATIVE_RASTERIZATION_PROPERTIES_EXT</code></p>
</li>
</ul>
</div>
</div>
</div>
</div>
<div class="sect3">
<h4 id="_see_also_597">See Also</h4>
<div class="paragraph">
<p><code>VkBool32</code>, <a href="#VkStructureType">VkStructureType</a></p>
</div>
</div>
<div class="sect3">
<h4 id="_document_notes_597">Document Notes</h4>
<div class="paragraph">
<p>For more information, see the Vulkan Specification at URL</p>
</div>
<div class="paragraph">
<p><a href="https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VkPhysicalDeviceConservativeRasterizationPropertiesEXT" class="bare">https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VkPhysicalDeviceConservativeRasterizationPropertiesEXT</a></p>
</div>
<div class="paragraph">
<p>This page is extracted from the Vulkan Specification.
Fixes and changes should be made to the Specification, not directly.</p>
</div>
<div style="page-break-after: always;"></div>
</div>
</div>
<div class="sect2">
<h3 id="_vkphysicaldevicecooperativematrixfeaturesnv3">VkPhysicalDeviceCooperativeMatrixFeaturesNV(3)</h3>
<div class="sect3">
<h4 id="_name_598">Name</h4>
<div class="paragraph">
<p>VkPhysicalDeviceCooperativeMatrixFeaturesNV - Structure describing cooperative matrix features that can be supported by an implementation</p>
</div>
</div>
<div class="sect3">
<h4 id="_c_specification_598">C Specification</h4>
<div class="paragraph">
<p>The <code>VkPhysicalDeviceCooperativeMatrixFeaturesNV</code> structure is defined
as:</p>
</div>
<div id="VkPhysicalDeviceCooperativeMatrixFeaturesNV" class="listingblock">
<div class="content">
<pre class="highlight"><code class="language-c++" data-lang="c++">typedef struct VkPhysicalDeviceCooperativeMatrixFeaturesNV {
    VkStructureType    sType;
    void*              pNext;
    VkBool32           cooperativeMatrix;
    VkBool32           cooperativeMatrixRobustBufferAccess;
} VkPhysicalDeviceCooperativeMatrixFeaturesNV;</code></pre>
</div>
</div>
</div>
<div class="sect3">
<h4 id="_members_235">Members</h4>
<div class="paragraph">
<p>The members of the <code>VkPhysicalDeviceCooperativeMatrixFeaturesNV</code>
structure describe the following features:</p>
</div>
</div>
<div class="sect3">
<h4 id="_description_598">Description</h4>
<div class="ulist">
<ul>
<li>
<p><a id="features-cooperativeMatrix"></a> <code>cooperativeMatrix</code> indicates that
the implementation supports the <code>CooperativeMatrixNV</code> SPIR-V
capability.</p>
</li>
<li>
<p><a id="features-cooperativeMatrixRobustBufferAccess"></a>
<code>cooperativeMatrixRobustBufferAccess</code> indicates that the
implementation supports robust buffer access for SPIR-V
<code>OpCooperativeMatrixLoadNV</code> and <code>OpCooperativeMatrixStoreNV</code>
instructions.</p>
</li>
</ul>
</div>
<div class="paragraph">
<p>If the <code>VkPhysicalDeviceCooperativeMatrixFeaturesNV</code> structure is
included in the <code>pNext</code> chain of <a href="#VkPhysicalDeviceFeatures2KHR">VkPhysicalDeviceFeatures2KHR</a>, it
is filled with values indicating whether the feature is supported.
<code>VkPhysicalDeviceCooperativeMatrixFeaturesNV</code> <strong class="purple">can</strong> also be used in the
<code>pNext</code> chain of <a href="#VkDeviceCreateInfo">VkDeviceCreateInfo</a> to enable features.</p>
</div>
<div class="sidebarblock">
<div class="content">
<div class="title">Valid Usage (Implicit)</div>
<div class="ulist">
<ul>
<li>
<p><a id="VUID-VkPhysicalDeviceCooperativeMatrixFeaturesNV-sType-sType"></a> <code>sType</code> <strong class="purple">must</strong> be <code>VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_COOPERATIVE_MATRIX_FEATURES_NV</code></p>
</li>
</ul>
</div>
</div>
</div>
</div>
<div class="sect3">
<h4 id="_see_also_598">See Also</h4>
<div class="paragraph">
<p><code>VkBool32</code>, <a href="#VkStructureType">VkStructureType</a></p>
</div>
</div>
<div class="sect3">
<h4 id="_document_notes_598">Document Notes</h4>
<div class="paragraph">
<p>For more information, see the Vulkan Specification at URL</p>
</div>
<div class="paragraph">
<p><a href="https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VkPhysicalDeviceCooperativeMatrixFeaturesNV" class="bare">https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VkPhysicalDeviceCooperativeMatrixFeaturesNV</a></p>
</div>
<div class="paragraph">
<p>This page is extracted from the Vulkan Specification.
Fixes and changes should be made to the Specification, not directly.</p>
</div>
<div style="page-break-after: always;"></div>
</div>
</div>
<div class="sect2">
<h3 id="_vkphysicaldevicecooperativematrixpropertiesnv3">VkPhysicalDeviceCooperativeMatrixPropertiesNV(3)</h3>
<div class="sect3">
<h4 id="_name_599">Name</h4>
<div class="paragraph">
<p>VkPhysicalDeviceCooperativeMatrixPropertiesNV - Structure describing cooperative matrix properties supported by an implementation</p>
</div>
</div>
<div class="sect3">
<h4 id="_c_specification_599">C Specification</h4>
<div class="paragraph">
<p>The <code>VkPhysicalDeviceCooperativeMatrixPropertiesNV</code> structure is defined
as:</p>
</div>
<div id="VkPhysicalDeviceCooperativeMatrixPropertiesNV" class="listingblock">
<div class="content">
<pre class="highlight"><code class="language-c++" data-lang="c++">typedef struct VkPhysicalDeviceCooperativeMatrixPropertiesNV {
    VkStructureType       sType;
    void*                 pNext;
    VkShaderStageFlags    cooperativeMatrixSupportedStages;
} VkPhysicalDeviceCooperativeMatrixPropertiesNV;</code></pre>
</div>
</div>
</div>
<div class="sect3">
<h4 id="_members_236">Members</h4>
<div class="paragraph">
<p>The members of the <code>VkPhysicalDeviceCooperativeMatrixPropertiesNV</code>
structure describe the following implementation-dependent limits:</p>
</div>
</div>
<div class="sect3">
<h4 id="_description_599">Description</h4>
<div class="ulist">
<ul>
<li>
<p><code>sType</code> is the type of this structure.</p>
</li>
<li>
<p><code>pNext</code> is <code>NULL</code> or a pointer to an extension-specific structure.</p>
</li>
<li>
<p><a id="limits-cooperativeMatrixSupportedStages"></a>
<code>cooperativeMatrixSupportedStages</code> is a bitfield of
<a href="#VkShaderStageFlagBits">VkShaderStageFlagBits</a> describing the shader stages that
cooperative matrix instructions are supported in.
<code>cooperativeMatrixSupportedStages</code> will have the
<code>VK_SHADER_STAGE_COMPUTE_BIT</code> bit set if any of the physical
device&#8217;s queues support <code>VK_QUEUE_COMPUTE_BIT</code>.</p>
</li>
</ul>
</div>
<div class="paragraph">
<p>If the <code>VkPhysicalDeviceCooperativeMatrixPropertiesNV</code> structure is
included in the <code>pNext</code> chain of <a href="#VkPhysicalDeviceProperties2">VkPhysicalDeviceProperties2</a>, it
is filled with the implementation-dependent limits.</p>
</div>
<div class="sidebarblock">
<div class="content">
<div class="title">Valid Usage (Implicit)</div>
<div class="ulist">
<ul>
<li>
<p><a id="VUID-VkPhysicalDeviceCooperativeMatrixPropertiesNV-sType-sType"></a> <code>sType</code> <strong class="purple">must</strong> be <code>VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_COOPERATIVE_MATRIX_PROPERTIES_NV</code></p>
</li>
</ul>
</div>
</div>
</div>
</div>
<div class="sect3">
<h4 id="_see_also_599">See Also</h4>
<div class="paragraph">
<p><a href="#VkShaderStageFlags">VkShaderStageFlags</a>, <a href="#VkStructureType">VkStructureType</a></p>
</div>
</div>
<div class="sect3">
<h4 id="_document_notes_599">Document Notes</h4>
<div class="paragraph">
<p>For more information, see the Vulkan Specification at URL</p>
</div>
<div class="paragraph">
<p><a href="https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VkPhysicalDeviceCooperativeMatrixPropertiesNV" class="bare">https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VkPhysicalDeviceCooperativeMatrixPropertiesNV</a></p>
</div>
<div class="paragraph">
<p>This page is extracted from the Vulkan Specification.
Fixes and changes should be made to the Specification, not directly.</p>
</div>
<div style="page-break-after: always;"></div>
</div>
</div>
<div class="sect2">
<h3 id="_vkphysicaldevicecornersampledimagefeaturesnv3">VkPhysicalDeviceCornerSampledImageFeaturesNV(3)</h3>
<div class="sect3">
<h4 id="_name_600">Name</h4>
<div class="paragraph">
<p>VkPhysicalDeviceCornerSampledImageFeaturesNV - Structure describing corner sampled image features that can be supported by an implementation</p>
</div>
</div>
<div class="sect3">
<h4 id="_c_specification_600">C Specification</h4>
<div class="paragraph">
<p>The <code>VkPhysicalDeviceCornerSampledImageFeaturesNV</code> structure is defined
as:</p>
</div>
<div id="VkPhysicalDeviceCornerSampledImageFeaturesNV" class="listingblock">
<div class="content">
<pre class="highlight"><code class="language-c++" data-lang="c++">typedef struct VkPhysicalDeviceCornerSampledImageFeaturesNV {
    VkStructureType    sType;
    void*              pNext;
    VkBool32           cornerSampledImage;
} VkPhysicalDeviceCornerSampledImageFeaturesNV;</code></pre>
</div>
</div>
</div>
<div class="sect3">
<h4 id="_members_237">Members</h4>
<div class="paragraph">
<p>The members of the <code>VkPhysicalDeviceCornerSampledImageFeaturesNV</code>
structure describe the following features:</p>
</div>
</div>
<div class="sect3">
<h4 id="_description_600">Description</h4>
<div class="ulist">
<ul>
<li>
<p><a id="features-cornersampledimage"></a> <code>cornerSampledImage</code> specifies
whether images can be created with a
<a href="#VkImageCreateInfo">VkImageCreateInfo</a>::<code>flags</code> containing
<code>VK_IMAGE_CREATE_CORNER_SAMPLED_BIT_NV</code>.
See <a href="vkspec.html#resources-images-corner-sampled">Corner-Sampled Images</a>.</p>
</li>
</ul>
</div>
<div class="paragraph">
<p>If the <code>VkPhysicalDeviceCornerSampledImageFeaturesNV</code> structure is
included in the <code>pNext</code> chain of <a href="#VkPhysicalDeviceFeatures2KHR">VkPhysicalDeviceFeatures2KHR</a>, it
is filled with values indicating whether each feature is supported.
<code>VkPhysicalDeviceCornerSampledImageFeaturesNV</code> <strong class="purple">can</strong> also be used in the
<code>pNext</code> chain of <a href="#VkDeviceCreateInfo">VkDeviceCreateInfo</a> to enable features.</p>
</div>
<div class="sidebarblock">
<div class="content">
<div class="title">Valid Usage (Implicit)</div>
<div class="ulist">
<ul>
<li>
<p><a id="VUID-VkPhysicalDeviceCornerSampledImageFeaturesNV-sType-sType"></a> <code>sType</code> <strong class="purple">must</strong> be <code>VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_CORNER_SAMPLED_IMAGE_FEATURES_NV</code></p>
</li>
</ul>
</div>
</div>
</div>
</div>
<div class="sect3">
<h4 id="_see_also_600">See Also</h4>
<div class="paragraph">
<p><code>VkBool32</code>, <a href="#VkStructureType">VkStructureType</a></p>
</div>
</div>
<div class="sect3">
<h4 id="_document_notes_600">Document Notes</h4>
<div class="paragraph">
<p>For more information, see the Vulkan Specification at URL</p>
</div>
<div class="paragraph">
<p><a href="https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VkPhysicalDeviceCornerSampledImageFeaturesNV" class="bare">https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VkPhysicalDeviceCornerSampledImageFeaturesNV</a></p>
</div>
<div class="paragraph">
<p>This page is extracted from the Vulkan Specification.
Fixes and changes should be made to the Specification, not directly.</p>
</div>
<div style="page-break-after: always;"></div>
</div>
</div>
<div class="sect2">
<h3 id="_vkphysicaldevicededicatedallocationimagealiasingfeaturesnv3">VkPhysicalDeviceDedicatedAllocationImageAliasingFeaturesNV(3)</h3>
<div class="sect3">
<h4 id="_name_601">Name</h4>
<div class="paragraph">
<p>VkPhysicalDeviceDedicatedAllocationImageAliasingFeaturesNV - Structure describing dedicated allocation image aliasing features that can be supported by an implementation</p>
</div>
</div>
<div class="sect3">
<h4 id="_c_specification_601">C Specification</h4>
<div class="paragraph">
<p>The <code>VkPhysicalDeviceDedicatedAllocationImageAliasingFeaturesNV</code>
structure is defined as:</p>
</div>
<div id="VkPhysicalDeviceDedicatedAllocationImageAliasingFeaturesNV" class="listingblock">
<div class="content">
<pre class="highlight"><code class="language-c++" data-lang="c++">typedef struct VkPhysicalDeviceDedicatedAllocationImageAliasingFeaturesNV {
    VkStructureType    sType;
    void*              pNext;
    VkBool32           dedicatedAllocationImageAliasing;
} VkPhysicalDeviceDedicatedAllocationImageAliasingFeaturesNV;</code></pre>
</div>
</div>
</div>
<div class="sect3">
<h4 id="_members_238">Members</h4>
<div class="paragraph">
<p>The members of the
<code>VkPhysicalDeviceDedicatedAllocationImageAliasingFeaturesNV</code> structure
describe the following features:</p>
</div>
</div>
<div class="sect3">
<h4 id="_description_601">Description</h4>
<div class="ulist">
<ul>
<li>
<p><a id="features-dedicatedAllocationImageAliasing"></a>
<code>dedicatedAllocationImageAliasing</code> indicates that the implementation
supports aliasing of compatible image objects on a dedicated allocation.</p>
</li>
</ul>
</div>
<div class="paragraph">
<p>If the <code>VkPhysicalDeviceDedicatedAllocationImageAliasingFeaturesNV</code>
structure is included in the <code>pNext</code> chain of
<a href="#VkPhysicalDeviceFeatures2KHR">VkPhysicalDeviceFeatures2KHR</a>, it is filled with values indicating
whether each feature is supported.
<code>VkPhysicalDeviceDedicatedAllocationImageAliasingFeaturesNV</code> <strong class="purple">can</strong> also
be used in the <code>pNext</code> chain of <a href="#VkDeviceCreateInfo">VkDeviceCreateInfo</a> to enable
features.</p>
</div>
<div class="sidebarblock">
<div class="content">
<div class="title">Valid Usage (Implicit)</div>
<div class="ulist">
<ul>
<li>
<p><a id="VUID-VkPhysicalDeviceDedicatedAllocationImageAliasingFeaturesNV-sType-sType"></a> <code>sType</code> <strong class="purple">must</strong> be <code>VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_DEDICATED_ALLOCATION_IMAGE_ALIASING_FEATURES_NV</code></p>
</li>
</ul>
</div>
</div>
</div>
</div>
<div class="sect3">
<h4 id="_see_also_601">See Also</h4>
<div class="paragraph">
<p><code>VkBool32</code>, <a href="#VkStructureType">VkStructureType</a></p>
</div>
</div>
<div class="sect3">
<h4 id="_document_notes_601">Document Notes</h4>
<div class="paragraph">
<p>For more information, see the Vulkan Specification at URL</p>
</div>
<div class="paragraph">
<p><a href="https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VkPhysicalDeviceDedicatedAllocationImageAliasingFeaturesNV" class="bare">https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VkPhysicalDeviceDedicatedAllocationImageAliasingFeaturesNV</a></p>
</div>
<div class="paragraph">
<p>This page is extracted from the Vulkan Specification.
Fixes and changes should be made to the Specification, not directly.</p>
</div>
<div style="page-break-after: always;"></div>
</div>
</div>
<div class="sect2">
<h3 id="_vkphysicaldevicedepthclipenablefeaturesext3">VkPhysicalDeviceDepthClipEnableFeaturesEXT(3)</h3>
<div class="sect3">
<h4 id="_name_602">Name</h4>
<div class="paragraph">
<p>VkPhysicalDeviceDepthClipEnableFeaturesEXT - Structure indicating support for explicit enable of depth clip</p>
</div>
</div>
<div class="sect3">
<h4 id="_c_specification_602">C Specification</h4>
<div class="paragraph">
<p>The <code>VkPhysicalDeviceDepthClipEnableFeaturesEXT</code> structure is defined
as:</p>
</div>
<div id="VkPhysicalDeviceDepthClipEnableFeaturesEXT" class="listingblock">
<div class="content">
<pre class="highlight"><code class="language-c++" data-lang="c++">typedef struct VkPhysicalDeviceDepthClipEnableFeaturesEXT {
    VkStructureType    sType;
    void*              pNext;
    VkBool32           depthClipEnable;
} VkPhysicalDeviceDepthClipEnableFeaturesEXT;</code></pre>
</div>
</div>
</div>
<div class="sect3">
<h4 id="_members_239">Members</h4>
<div class="paragraph">
<p>The members of the <code>VkPhysicalDeviceDepthClipEnableFeaturesEXT</code>
structure describe the following features:</p>
</div>
</div>
<div class="sect3">
<h4 id="_description_602">Description</h4>
<div class="ulist">
<ul>
<li>
<p><a id="features-depthClipEnable"></a> <code>depthClipEnable</code> indicates that the
implementation supports setting the depth clipping operation explicitly
via the <a href="#VkPipelineRasterizationDepthClipStateCreateInfoEXT">VkPipelineRasterizationDepthClipStateCreateInfoEXT</a>
pipeline state.
Otherwise depth clipping is only enabled when
<code>VkPipelineRasterizationStateCreateInfo</code>::<code>depthClampEnable</code> is
set to <code>VK_FALSE</code>.</p>
</li>
</ul>
</div>
<div class="paragraph">
<p>If the <code>VkPhysicalDeviceDepthClipEnableFeaturesEXT</code> structure is
included in the <code>pNext</code> chain of <a href="#VkPhysicalDeviceFeatures2KHR">VkPhysicalDeviceFeatures2KHR</a>, it
is filled with values indicating whether the feature is supported.
<code>VkPhysicalDeviceDepthClipEnableFeaturesEXT</code> <strong class="purple">can</strong> also be used in the
<code>pNext</code> chain of <a href="#VkDeviceCreateInfo">VkDeviceCreateInfo</a> to enable this feature.</p>
</div>
<div class="sidebarblock">
<div class="content">
<div class="title">Valid Usage (Implicit)</div>
<div class="ulist">
<ul>
<li>
<p><a id="VUID-VkPhysicalDeviceDepthClipEnableFeaturesEXT-sType-sType"></a> <code>sType</code> <strong class="purple">must</strong> be <code>VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_DEPTH_CLIP_ENABLE_FEATURES_EXT</code></p>
</li>
</ul>
</div>
</div>
</div>
</div>
<div class="sect3">
<h4 id="_see_also_602">See Also</h4>
<div class="paragraph">
<p><code>VkBool32</code>, <a href="#VkStructureType">VkStructureType</a></p>
</div>
</div>
<div class="sect3">
<h4 id="_document_notes_602">Document Notes</h4>
<div class="paragraph">
<p>For more information, see the Vulkan Specification at URL</p>
</div>
<div class="paragraph">
<p><a href="https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VkPhysicalDeviceDepthClipEnableFeaturesEXT" class="bare">https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VkPhysicalDeviceDepthClipEnableFeaturesEXT</a></p>
</div>
<div class="paragraph">
<p>This page is extracted from the Vulkan Specification.
Fixes and changes should be made to the Specification, not directly.</p>
</div>
<div style="page-break-after: always;"></div>
</div>
</div>
<div class="sect2">
<h3 id="_vkphysicaldevicedepthstencilresolvepropertieskhr3">VkPhysicalDeviceDepthStencilResolvePropertiesKHR(3)</h3>
<div class="sect3">
<h4 id="_name_603">Name</h4>
<div class="paragraph">
<p>VkPhysicalDeviceDepthStencilResolvePropertiesKHR - Structure describing depth/stencil resolve properties that can be supported by an implementation</p>
</div>
</div>
<div class="sect3">
<h4 id="_c_specification_603">C Specification</h4>
<div class="paragraph">
<p>The <code>VkPhysicalDeviceDepthStencilResolvePropertiesKHR</code> structure is
defined as:</p>
</div>
<div id="VkPhysicalDeviceDepthStencilResolvePropertiesKHR" class="listingblock">
<div class="content">
<pre class="highlight"><code class="language-c++" data-lang="c++">typedef struct VkPhysicalDeviceDepthStencilResolvePropertiesKHR {
    VkStructureType          sType;
    void*                    pNext;
    VkResolveModeFlagsKHR    supportedDepthResolveModes;
    VkResolveModeFlagsKHR    supportedStencilResolveModes;
    VkBool32                 independentResolveNone;
    VkBool32                 independentResolve;
} VkPhysicalDeviceDepthStencilResolvePropertiesKHR;</code></pre>
</div>
</div>
</div>
<div class="sect3">
<h4 id="_members_240">Members</h4>
<div class="paragraph">
<p>The members of the <code>VkPhysicalDeviceDepthStencilResolvePropertiesKHR</code>
structure describe the following implementation-dependent limits:</p>
</div>
</div>
<div class="sect3">
<h4 id="_description_603">Description</h4>
<div class="ulist">
<ul>
<li>
<p><a id="features-depthResolveModes"></a> <code>supportedDepthResolveModes</code> is a
bitmask of <a href="#VkResolveModeFlagBitsKHR">VkResolveModeFlagBitsKHR</a> indicating the set of
supported depth resolve modes.
<code>VK_RESOLVE_MODE_SAMPLE_ZERO_BIT_KHR</code> <strong class="purple">must</strong> be included in the set
but implementations <strong class="purple">may</strong> support additional modes.</p>
</li>
<li>
<p><a id="features-stencilResolveModes"></a> <code>supportedStencilResolveModes</code> is a
bitmask of <a href="#VkResolveModeFlagBitsKHR">VkResolveModeFlagBitsKHR</a> indicating the set of
supported stencil resolve modes.
<code>VK_RESOLVE_MODE_SAMPLE_ZERO_BIT_KHR</code> <strong class="purple">must</strong> be included in the set
but implementations <strong class="purple">may</strong> support additional modes.
<code>VK_RESOLVE_MODE_AVERAGE_BIT_KHR</code> <strong class="purple">must</strong> not be included in the set.</p>
</li>
<li>
<p><a id="features-independentResolveNone"></a> <code>independentResolveNone</code> is
<code>VK_TRUE</code> if the implementation supports setting the depth and
stencil resolve modes to different values when one of those modes is
<code>VK_RESOLVE_MODE_NONE_KHR</code>.
Otherwise the implementation only supports setting both modes to the
same value.</p>
</li>
<li>
<p><a id="features-independentResolve"></a> <code>independentResolve</code> is
<code>VK_TRUE</code> if the implementation supports all combinations of the
supported depth and stencil resolve modes.</p>
</li>
</ul>
</div>
<div class="sidebarblock">
<div class="content">
<div class="title">Valid Usage (Implicit)</div>
<div class="ulist">
<ul>
<li>
<p><a id="VUID-VkPhysicalDeviceDepthStencilResolvePropertiesKHR-sType-sType"></a> <code>sType</code> <strong class="purple">must</strong> be <code>VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_DEPTH_STENCIL_RESOLVE_PROPERTIES_KHR</code></p>
</li>
</ul>
</div>
</div>
</div>
</div>
<div class="sect3">
<h4 id="_see_also_603">See Also</h4>
<div class="paragraph">
<p><code>VkBool32</code>, <a href="#VkResolveModeFlagsKHR">VkResolveModeFlagsKHR</a>, <a href="#VkStructureType">VkStructureType</a></p>
</div>
</div>
<div class="sect3">
<h4 id="_document_notes_603">Document Notes</h4>
<div class="paragraph">
<p>For more information, see the Vulkan Specification at URL</p>
</div>
<div class="paragraph">
<p><a href="https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VkPhysicalDeviceDepthStencilResolvePropertiesKHR" class="bare">https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VkPhysicalDeviceDepthStencilResolvePropertiesKHR</a></p>
</div>
<div class="paragraph">
<p>This page is extracted from the Vulkan Specification.
Fixes and changes should be made to the Specification, not directly.</p>
</div>
<div style="page-break-after: always;"></div>
</div>
</div>
<div class="sect2">
<h3 id="_vkphysicaldevicedescriptorindexingfeaturesext3">VkPhysicalDeviceDescriptorIndexingFeaturesEXT(3)</h3>
<div class="sect3">
<h4 id="_name_604">Name</h4>
<div class="paragraph">
<p>VkPhysicalDeviceDescriptorIndexingFeaturesEXT - Structure describing descriptor indexing features that can be supported by an implementation</p>
</div>
</div>
<div class="sect3">
<h4 id="_c_specification_604">C Specification</h4>
<div class="paragraph">
<p>The <code>VkPhysicalDeviceDescriptorIndexingFeaturesEXT</code> structure is defined
as:</p>
</div>
<div id="VkPhysicalDeviceDescriptorIndexingFeaturesEXT" class="listingblock">
<div class="content">
<pre class="highlight"><code class="language-c++" data-lang="c++">typedef struct VkPhysicalDeviceDescriptorIndexingFeaturesEXT {
    VkStructureType    sType;
    void*              pNext;
    VkBool32           shaderInputAttachmentArrayDynamicIndexing;
    VkBool32           shaderUniformTexelBufferArrayDynamicIndexing;
    VkBool32           shaderStorageTexelBufferArrayDynamicIndexing;
    VkBool32           shaderUniformBufferArrayNonUniformIndexing;
    VkBool32           shaderSampledImageArrayNonUniformIndexing;
    VkBool32           shaderStorageBufferArrayNonUniformIndexing;
    VkBool32           shaderStorageImageArrayNonUniformIndexing;
    VkBool32           shaderInputAttachmentArrayNonUniformIndexing;
    VkBool32           shaderUniformTexelBufferArrayNonUniformIndexing;
    VkBool32           shaderStorageTexelBufferArrayNonUniformIndexing;
    VkBool32           descriptorBindingUniformBufferUpdateAfterBind;
    VkBool32           descriptorBindingSampledImageUpdateAfterBind;
    VkBool32           descriptorBindingStorageImageUpdateAfterBind;
    VkBool32           descriptorBindingStorageBufferUpdateAfterBind;
    VkBool32           descriptorBindingUniformTexelBufferUpdateAfterBind;
    VkBool32           descriptorBindingStorageTexelBufferUpdateAfterBind;
    VkBool32           descriptorBindingUpdateUnusedWhilePending;
    VkBool32           descriptorBindingPartiallyBound;
    VkBool32           descriptorBindingVariableDescriptorCount;
    VkBool32           runtimeDescriptorArray;
} VkPhysicalDeviceDescriptorIndexingFeaturesEXT;</code></pre>
</div>
</div>
</div>
<div class="sect3">
<h4 id="_members_241">Members</h4>
<div class="paragraph">
<p>The members of the <code>VkPhysicalDeviceDescriptorIndexingFeaturesEXT</code>
structure describe the following features:</p>
</div>
</div>
<div class="sect3">
<h4 id="_description_604">Description</h4>
<div class="ulist">
<ul>
<li>
<p><a id="features-shaderInputAttachmentArrayDynamicIndexing"></a>
<code>shaderInputAttachmentArrayDynamicIndexing</code> indicates whether arrays
of input attachments <strong class="purple">can</strong> be indexed by dynamically uniform integer
expressions in shader code.
If this feature is not enabled, resources with a descriptor type of
<code>VK_DESCRIPTOR_TYPE_INPUT_ATTACHMENT</code> <strong class="purple">must</strong> be indexed only by
constant integral expressions when aggregated into arrays in shader
code.
This also indicates whether shader modules <strong class="purple">can</strong> declare the
<code>InputAttachmentArrayDynamicIndexingEXT</code> capability.</p>
</li>
<li>
<p><a id="features-shaderUniformTexelBufferArrayDynamicIndexing"></a>
<code>shaderUniformTexelBufferArrayDynamicIndexing</code> indicates whether
arrays of uniform texel buffers <strong class="purple">can</strong> be indexed by dynamically uniform
integer expressions in shader code.
If this feature is not enabled, resources with a descriptor type of
<code>VK_DESCRIPTOR_TYPE_UNIFORM_TEXEL_BUFFER</code> <strong class="purple">must</strong> be indexed only by
constant integral expressions when aggregated into arrays in shader
code.
This also indicates whether shader modules <strong class="purple">can</strong> declare the
<code>UniformTexelBufferArrayDynamicIndexingEXT</code> capability.</p>
</li>
<li>
<p><a id="features-shaderStorageTexelBufferArrayDynamicIndexing"></a>
<code>shaderStorageTexelBufferArrayDynamicIndexing</code> indicates whether
arrays of storage texel buffers <strong class="purple">can</strong> be indexed by dynamically uniform
integer expressions in shader code.
If this feature is not enabled, resources with a descriptor type of
<code>VK_DESCRIPTOR_TYPE_STORAGE_TEXEL_BUFFER</code> <strong class="purple">must</strong> be indexed only by
constant integral expressions when aggregated into arrays in shader
code.
This also indicates whether shader modules <strong class="purple">can</strong> declare the
<code>StorageTexelBufferArrayDynamicIndexingEXT</code> capability.</p>
</li>
<li>
<p><a id="features-shaderUniformBufferArrayNonUniformIndexing"></a>
<code>shaderUniformBufferArrayNonUniformIndexing</code> indicates whether
arrays of uniform buffers <strong class="purple">can</strong> be indexed by non-uniform integer
expressions in shader code.
If this feature is not enabled, resources with a descriptor type of
<code>VK_DESCRIPTOR_TYPE_UNIFORM_BUFFER</code> or
<code>VK_DESCRIPTOR_TYPE_UNIFORM_BUFFER_DYNAMIC</code> <strong class="purple">must</strong> not be indexed by
non-uniform integer expressions when aggregated into arrays in shader
code.
This also indicates whether shader modules <strong class="purple">can</strong> declare the
<code>UniformBufferArrayNonUniformIndexingEXT</code> capability.</p>
</li>
<li>
<p><a id="features-shaderSampledImageArrayNonUniformIndexing"></a>
<code>shaderSampledImageArrayNonUniformIndexing</code> indicates whether arrays
of samplers or sampled images <strong class="purple">can</strong> be indexed by non-uniform integer
expressions in shader code.
If this feature is not enabled, resources with a descriptor type of
<code>VK_DESCRIPTOR_TYPE_SAMPLER</code>,
<code>VK_DESCRIPTOR_TYPE_COMBINED_IMAGE_SAMPLER</code>, or
<code>VK_DESCRIPTOR_TYPE_SAMPLED_IMAGE</code> <strong class="purple">must</strong> not be indexed by
non-uniform integer expressions when aggregated into arrays in shader
code.
This also indicates whether shader modules <strong class="purple">can</strong> declare the
<code>SampledImageArrayNonUniformIndexingEXT</code> capability.</p>
</li>
<li>
<p><a id="features-shaderStorageBufferArrayNonUniformIndexing"></a>
<code>shaderStorageBufferArrayNonUniformIndexing</code> indicates whether
arrays of storage buffers <strong class="purple">can</strong> be indexed by non-uniform integer
expressions in shader code.
If this feature is not enabled, resources with a descriptor type of
<code>VK_DESCRIPTOR_TYPE_STORAGE_BUFFER</code> or
<code>VK_DESCRIPTOR_TYPE_STORAGE_BUFFER_DYNAMIC</code> <strong class="purple">must</strong> not be indexed by
non-uniform integer expressions when aggregated into arrays in shader
code.
This also indicates whether shader modules <strong class="purple">can</strong> declare the
<code>StorageBufferArrayNonUniformIndexingEXT</code> capability.</p>
</li>
<li>
<p><a id="features-shaderStorageImageArrayNonUniformIndexing"></a>
<code>shaderStorageImageArrayNonUniformIndexing</code> indicates whether arrays
of storage images <strong class="purple">can</strong> be indexed by non-uniform integer expressions in
shader code.
If this feature is not enabled, resources with a descriptor type of
<code>VK_DESCRIPTOR_TYPE_STORAGE_IMAGE</code> <strong class="purple">must</strong> not be indexed by
non-uniform integer expressions when aggregated into arrays in shader
code.
This also indicates whether shader modules <strong class="purple">can</strong> declare the
<code>StorageImageArrayNonUniformIndexingEXT</code> capability.</p>
</li>
<li>
<p><a id="features-shaderInputAttachmentArrayNonUniformIndexing"></a>
<code>shaderInputAttachmentArrayNonUniformIndexing</code> indicates whether
arrays of input attachments <strong class="purple">can</strong> be indexed by non-uniform integer
expressions in shader code.
If this feature is not enabled, resources with a descriptor type of
<code>VK_DESCRIPTOR_TYPE_INPUT_ATTACHMENT</code> <strong class="purple">must</strong> not be indexed by
non-uniform integer expressions when aggregated into arrays in shader
code.
This also indicates whether shader modules <strong class="purple">can</strong> declare the
<code>InputAttachmentArrayNonUniformIndexingEXT</code> capability.</p>
</li>
<li>
<p><a id="features-shaderUniformTexelBufferArrayNonUniformIndexing"></a>
<code>shaderUniformTexelBufferArrayNonUniformIndexing</code> indicates whether
arrays of uniform texel buffers <strong class="purple">can</strong> be indexed by non-uniform integer
expressions in shader code.
If this feature is not enabled, resources with a descriptor type of
<code>VK_DESCRIPTOR_TYPE_UNIFORM_TEXEL_BUFFER</code> <strong class="purple">must</strong> not be indexed by
non-uniform integer expressions when aggregated into arrays in shader
code.
This also indicates whether shader modules <strong class="purple">can</strong> declare the
<code>UniformTexelBufferArrayNonUniformIndexingEXT</code> capability.</p>
</li>
<li>
<p><a id="features-shaderStorageTexelBufferArrayNonUniformIndexing"></a>
<code>shaderStorageTexelBufferArrayNonUniformIndexing</code> indicates whether
arrays of storage texel buffers <strong class="purple">can</strong> be indexed by non-uniform integer
expressions in shader code.
If this feature is not enabled, resources with a descriptor type of
<code>VK_DESCRIPTOR_TYPE_STORAGE_TEXEL_BUFFER</code> <strong class="purple">must</strong> not be indexed by
non-uniform integer expressions when aggregated into arrays in shader
code.
This also indicates whether shader modules <strong class="purple">can</strong> declare the
<code>StorageTexelBufferArrayNonUniformIndexingEXT</code> capability.</p>
</li>
<li>
<p><a id="features-descriptorBindingUniformBufferUpdateAfterBind"></a>
<code>descriptorBindingUniformBufferUpdateAfterBind</code> indicates whether
the implementation supports updating uniform buffer descriptors after a
set is bound.
If this feature is not enabled,
<code>VK_DESCRIPTOR_BINDING_UPDATE_AFTER_BIND_BIT_EXT</code> <strong class="purple">must</strong> not be used
with <code>VK_DESCRIPTOR_TYPE_UNIFORM_BUFFER</code>.</p>
</li>
<li>
<p><a id="features-descriptorBindingSampledImageUpdateAfterBind"></a>
<code>descriptorBindingSampledImageUpdateAfterBind</code> indicates whether the
implementation supports updating sampled image descriptors after a set
is bound.
If this feature is not enabled,
<code>VK_DESCRIPTOR_BINDING_UPDATE_AFTER_BIND_BIT_EXT</code> <strong class="purple">must</strong> not be used
with <code>VK_DESCRIPTOR_TYPE_SAMPLER</code>,
<code>VK_DESCRIPTOR_TYPE_COMBINED_IMAGE_SAMPLER</code>, or
<code>VK_DESCRIPTOR_TYPE_SAMPLED_IMAGE</code>.</p>
</li>
<li>
<p><a id="features-descriptorBindingStorageImageUpdateAfterBind"></a>
<code>descriptorBindingStorageImageUpdateAfterBind</code> indicates whether the
implementation supports updating storage image descriptors after a set
is bound.
If this feature is not enabled,
<code>VK_DESCRIPTOR_BINDING_UPDATE_AFTER_BIND_BIT_EXT</code> <strong class="purple">must</strong> not be used
with <code>VK_DESCRIPTOR_TYPE_STORAGE_IMAGE</code>.</p>
</li>
<li>
<p><a id="features-descriptorBindingStorageBufferUpdateAfterBind"></a>
<code>descriptorBindingStorageBufferUpdateAfterBind</code> indicates whether
the implementation supports updating storage buffer descriptors after a
set is bound.
If this feature is not enabled,
<code>VK_DESCRIPTOR_BINDING_UPDATE_AFTER_BIND_BIT_EXT</code> <strong class="purple">must</strong> not be used
with <code>VK_DESCRIPTOR_TYPE_STORAGE_BUFFER</code>.</p>
</li>
<li>
<p><a id="features-descriptorBindingUniformTexelBufferUpdateAfterBind"></a>
<code>descriptorBindingUniformTexelBufferUpdateAfterBind</code> indicates
whether the implementation supports updating uniform texel buffer
descriptors after a set is bound.
If this feature is not enabled,
<code>VK_DESCRIPTOR_BINDING_UPDATE_AFTER_BIND_BIT_EXT</code> <strong class="purple">must</strong> not be used
with <code>VK_DESCRIPTOR_TYPE_UNIFORM_TEXEL_BUFFER</code>.</p>
</li>
<li>
<p><a id="features-descriptorBindingStorageTexelBufferUpdateAfterBind"></a>
<code>descriptorBindingStorageTexelBufferUpdateAfterBind</code> indicates
whether the implementation supports updating storage texel buffer
descriptors after a set is bound.
If this feature is not enabled,
<code>VK_DESCRIPTOR_BINDING_UPDATE_AFTER_BIND_BIT_EXT</code> <strong class="purple">must</strong> not be used
with <code>VK_DESCRIPTOR_TYPE_STORAGE_TEXEL_BUFFER</code>.</p>
</li>
<li>
<p><a id="features-descriptorBindingUpdateUnusedWhilePending"></a>
<code>descriptorBindingUpdateUnusedWhilePending</code> indicates whether the
implementation supports updating descriptors while the set is in use.
If this feature is not enabled,
<code>VK_DESCRIPTOR_BINDING_UPDATE_UNUSED_WHILE_PENDING_BIT_EXT</code> <strong class="purple">must</strong>
not be used.</p>
</li>
<li>
<p><a id="features-descriptorBindingPartiallyBound"></a>
<code>descriptorBindingPartiallyBound</code> indicates whether the
implementation supports statically using a descriptor set binding in
which some descriptors are not valid.
If this feature is not enabled,
<code>VK_DESCRIPTOR_BINDING_PARTIALLY_BOUND_BIT_EXT</code> <strong class="purple">must</strong> not be used.</p>
</li>
<li>
<p><a id="features-descriptorBindingVariableDescriptorCount"></a>
<code>descriptorBindingVariableDescriptorCount</code> indicates whether the
implementation supports descriptor sets with a variable-sized last
binding.
If this feature is not enabled,
<code>VK_DESCRIPTOR_BINDING_VARIABLE_DESCRIPTOR_COUNT_BIT_EXT</code> <strong class="purple">must</strong> not
be used.</p>
</li>
<li>
<p><a id="features-runtimeDescriptorArray"></a> <code>runtimeDescriptorArray</code>
indicates whether the implementation supports the SPIR-V
<code>RuntimeDescriptorArrayEXT</code> capability.
If this feature is not enabled, descriptors <strong class="purple">must</strong> not be declared in
runtime arrays.</p>
</li>
</ul>
</div>
<div class="paragraph">
<p>If the <code>VkPhysicalDeviceDescriptorIndexingFeaturesEXT</code> structure is
included in the <code>pNext</code> chain of <a href="#VkPhysicalDeviceFeatures2KHR">VkPhysicalDeviceFeatures2KHR</a>, it
is filled with values indicating whether each feature is supported.
<code>VkPhysicalDeviceDescriptorIndexingFeaturesEXT</code> <strong class="purple">can</strong> also be used in the
<code>pNext</code> chain of <a href="#VkDeviceCreateInfo">VkDeviceCreateInfo</a> to enable features.</p>
</div>
<div class="sidebarblock">
<div class="content">
<div class="title">Valid Usage (Implicit)</div>
<div class="ulist">
<ul>
<li>
<p><a id="VUID-VkPhysicalDeviceDescriptorIndexingFeaturesEXT-sType-sType"></a> <code>sType</code> <strong class="purple">must</strong> be <code>VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_DESCRIPTOR_INDEXING_FEATURES_EXT</code></p>
</li>
</ul>
</div>
</div>
</div>
</div>
<div class="sect3">
<h4 id="_see_also_604">See Also</h4>
<div class="paragraph">
<p><code>VkBool32</code>, <a href="#VkStructureType">VkStructureType</a></p>
</div>
</div>
<div class="sect3">
<h4 id="_document_notes_604">Document Notes</h4>
<div class="paragraph">
<p>For more information, see the Vulkan Specification at URL</p>
</div>
<div class="paragraph">
<p><a href="https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VkPhysicalDeviceDescriptorIndexingFeaturesEXT" class="bare">https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VkPhysicalDeviceDescriptorIndexingFeaturesEXT</a></p>
</div>
<div class="paragraph">
<p>This page is extracted from the Vulkan Specification.
Fixes and changes should be made to the Specification, not directly.</p>
</div>
<div style="page-break-after: always;"></div>
</div>
</div>
<div class="sect2">
<h3 id="_vkphysicaldevicedescriptorindexingpropertiesext3">VkPhysicalDeviceDescriptorIndexingPropertiesEXT(3)</h3>
<div class="sect3">
<h4 id="_name_605">Name</h4>
<div class="paragraph">
<p>VkPhysicalDeviceDescriptorIndexingPropertiesEXT - Structure describing descriptor indexing properties that can be supported by an implementation</p>
</div>
</div>
<div class="sect3">
<h4 id="_c_specification_605">C Specification</h4>
<div class="paragraph">
<p>The <code>VkPhysicalDeviceDescriptorIndexingPropertiesEXT</code> structure is
defined as:</p>
</div>
<div id="VkPhysicalDeviceDescriptorIndexingPropertiesEXT" class="listingblock">
<div class="content">
<pre class="highlight"><code class="language-c++" data-lang="c++">typedef struct VkPhysicalDeviceDescriptorIndexingPropertiesEXT {
    VkStructureType    sType;
    void*              pNext;
    uint32_t           maxUpdateAfterBindDescriptorsInAllPools;
    VkBool32           shaderUniformBufferArrayNonUniformIndexingNative;
    VkBool32           shaderSampledImageArrayNonUniformIndexingNative;
    VkBool32           shaderStorageBufferArrayNonUniformIndexingNative;
    VkBool32           shaderStorageImageArrayNonUniformIndexingNative;
    VkBool32           shaderInputAttachmentArrayNonUniformIndexingNative;
    VkBool32           robustBufferAccessUpdateAfterBind;
    VkBool32           quadDivergentImplicitLod;
    uint32_t           maxPerStageDescriptorUpdateAfterBindSamplers;
    uint32_t           maxPerStageDescriptorUpdateAfterBindUniformBuffers;
    uint32_t           maxPerStageDescriptorUpdateAfterBindStorageBuffers;
    uint32_t           maxPerStageDescriptorUpdateAfterBindSampledImages;
    uint32_t           maxPerStageDescriptorUpdateAfterBindStorageImages;
    uint32_t           maxPerStageDescriptorUpdateAfterBindInputAttachments;
    uint32_t           maxPerStageUpdateAfterBindResources;
    uint32_t           maxDescriptorSetUpdateAfterBindSamplers;
    uint32_t           maxDescriptorSetUpdateAfterBindUniformBuffers;
    uint32_t           maxDescriptorSetUpdateAfterBindUniformBuffersDynamic;
    uint32_t           maxDescriptorSetUpdateAfterBindStorageBuffers;
    uint32_t           maxDescriptorSetUpdateAfterBindStorageBuffersDynamic;
    uint32_t           maxDescriptorSetUpdateAfterBindSampledImages;
    uint32_t           maxDescriptorSetUpdateAfterBindStorageImages;
    uint32_t           maxDescriptorSetUpdateAfterBindInputAttachments;
} VkPhysicalDeviceDescriptorIndexingPropertiesEXT;</code></pre>
</div>
</div>
</div>
<div class="sect3">
<h4 id="_members_242">Members</h4>
<div class="paragraph">
<p>The members of the <code>VkPhysicalDeviceDescriptorIndexingPropertiesEXT</code>
structure describe the following implementation-dependent limits:</p>
</div>
</div>
<div class="sect3">
<h4 id="_description_605">Description</h4>
<div class="ulist">
<ul>
<li>
<p><code>sType</code> is the type of this structure.</p>
</li>
<li>
<p><code>pNext</code> is <code>NULL</code> or a pointer to an extension-specific structure.</p>
</li>
<li>
<p><a id="limits-maxUpdateAfterBindDescriptorsInAllPools"></a>
<code>maxUpdateAfterBindDescriptorsInAllPools</code> is the maximum number of
descriptors (summed over all descriptor types) that <strong class="purple">can</strong> be created
across all pools that are created with the
<code>VK_DESCRIPTOR_POOL_CREATE_UPDATE_AFTER_BIND_BIT_EXT</code> bit set.
Pool creation <strong class="purple">may</strong> fail when this limit is exceeded, or when the space
this limit represents is unable to satisfy a pool creation due to
fragmentation.</p>
</li>
<li>
<p><a id="limits-shaderUniformBufferArrayNonUniformIndexingNative"></a>
<code>shaderUniformBufferArrayNonUniformIndexingNative</code> is a boolean
value indicating whether uniform buffer descriptors natively support
nonuniform indexing.
If this is <code>VK_FALSE</code>, then a single dynamic instance of an
instruction that nonuniformly indexes an array of uniform buffers <strong class="purple">may</strong>
execute multiple times in order to access all the descriptors.</p>
</li>
<li>
<p><a id="limits-shaderSampledImageArrayNonUniformIndexingNative"></a>
<code>shaderSampledImageArrayNonUniformIndexingNative</code> is a boolean value
indicating whether sampler and image descriptors natively support
nonuniform indexing.
If this is <code>VK_FALSE</code>, then a single dynamic instance of an
instruction that nonuniformly indexes an array of samplers or images
<strong class="purple">may</strong> execute multiple times in order to access all the descriptors.</p>
</li>
<li>
<p><a id="limits-shaderStorageBufferArrayNonUniformIndexingNative"></a>
<code>shaderStorageBufferArrayNonUniformIndexingNative</code> is a boolean
value indicating whether storage buffer descriptors natively support
nonuniform indexing.
If this is <code>VK_FALSE</code>, then a single dynamic instance of an
instruction that nonuniformly indexes an array of storage buffers <strong class="purple">may</strong>
execute multiple times in order to access all the descriptors.</p>
</li>
<li>
<p><a id="limits-shaderStorageImageArrayNonUniformIndexingNative"></a>
<code>shaderStorageImageArrayNonUniformIndexingNative</code> is a boolean value
indicating whether storage image descriptors natively support nonuniform
indexing.
If this is <code>VK_FALSE</code>, then a single dynamic instance of an
instruction that nonuniformly indexes an array of storage images <strong class="purple">may</strong>
execute multiple times in order to access all the descriptors.</p>
</li>
<li>
<p><a id="limits-shaderInputAttachmentArrayNonUniformIndexingNative"></a>
<code>shaderInputAttachmentArrayNonUniformIndexingNative</code> is a boolean
value indicating whether input attachment descriptors natively support
nonuniform indexing.
If this is <code>VK_FALSE</code>, then a single dynamic instance of an
instruction that nonuniformly indexes an array of input attachments <strong class="purple">may</strong>
execute multiple times in order to access all the descriptors.</p>
</li>
<li>
<p><a id="limits-robustBufferAccessUpdateAfterBind"></a>
<code>robustBufferAccessUpdateAfterBind</code> is a boolean value indicating
whether <a href="vkspec.html#features-robustBufferAccess"><code>robustBufferAccess</code></a> <strong class="purple">can</strong>
be enabled in a device simultaneously with
<code>descriptorBindingUniformBufferUpdateAfterBind</code>,
<code>descriptorBindingStorageBufferUpdateAfterBind</code>,
<code>descriptorBindingUniformTexelBufferUpdateAfterBind</code>, and/or
<code>descriptorBindingStorageTexelBufferUpdateAfterBind</code>.
If this is <code>VK_FALSE</code>, then either <code>robustBufferAccess</code> <strong class="purple">must</strong> be
disabled or all of these update-after-bind features <strong class="purple">must</strong> be disabled.</p>
</li>
<li>
<p><a id="limits-quadDivergentImplicitLod"></a> <code>quadDivergentImplicitLod</code> is a
boolean value indicating whether implicit level of detail calculations
for image operations have well-defined results when the image and/or
sampler objects used for the instruction are not uniform within a quad.
See <a href="vkspec.html#textures-derivative-image-operations">Derivative Image
Operations</a>.</p>
</li>
<li>
<p><a id="limits-maxPerStageDescriptorUpdateAfterBindSamplers"></a>
<code>maxPerStageDescriptorUpdateAfterBindSamplers</code> is similar to
<code>maxPerStageDescriptorSamplers</code> but counts descriptors from
descriptor sets created with or without the
<code>VK_DESCRIPTOR_SET_LAYOUT_CREATE_UPDATE_AFTER_BIND_POOL_BIT_EXT</code> bit
set.</p>
</li>
<li>
<p><a id="limits-maxPerStageDescriptorUpdateAfterBindUniformBuffers"></a>
<code>maxPerStageDescriptorUpdateAfterBindUniformBuffers</code> is similar to
<code>maxPerStageDescriptorUniformBuffers</code> but counts descriptors from
descriptor sets created with or without the
<code>VK_DESCRIPTOR_SET_LAYOUT_CREATE_UPDATE_AFTER_BIND_POOL_BIT_EXT</code> bit
set.</p>
</li>
<li>
<p><a id="limits-maxPerStageDescriptorUpdateAfterBindStorageBuffers"></a>
<code>maxPerStageDescriptorUpdateAfterBindStorageBuffers</code> is similar to
<code>maxPerStageDescriptorStorageBuffers</code> but counts descriptors from
descriptor sets created with or without the
<code>VK_DESCRIPTOR_SET_LAYOUT_CREATE_UPDATE_AFTER_BIND_POOL_BIT_EXT</code> bit
set.</p>
</li>
<li>
<p><a id="limits-maxPerStageDescriptorUpdateAfterBindSampledImages"></a>
<code>maxPerStageDescriptorUpdateAfterBindSampledImages</code> is similar to
<code>maxPerStageDescriptorSampledImages</code> but counts descriptors from
descriptor sets created with or without the
<code>VK_DESCRIPTOR_SET_LAYOUT_CREATE_UPDATE_AFTER_BIND_POOL_BIT_EXT</code> bit
set.</p>
</li>
<li>
<p><a id="limits-maxPerStageDescriptorUpdateAfterBindStorageImages"></a>
<code>maxPerStageDescriptorUpdateAfterBindStorageImages</code> is similar to
<code>maxPerStageDescriptorStorageImages</code> but counts descriptors from
descriptor sets created with or without the
<code>VK_DESCRIPTOR_SET_LAYOUT_CREATE_UPDATE_AFTER_BIND_POOL_BIT_EXT</code> bit
set.</p>
</li>
<li>
<p><a id="limits-maxPerStageDescriptorUpdateAfterBindInputAttachments"></a>
<code>maxPerStageDescriptorUpdateAfterBindInputAttachments</code> is similar to
<code>maxPerStageDescriptorInputAttachments</code> but counts descriptors from
descriptor sets created with or without the
<code>VK_DESCRIPTOR_SET_LAYOUT_CREATE_UPDATE_AFTER_BIND_POOL_BIT_EXT</code> bit
set.</p>
</li>
<li>
<p><a id="limits-maxPerStageUpdateAfterBindResources"></a>
<code>maxPerStageUpdateAfterBindResources</code> is similar to
<code>maxPerStageResources</code> but counts descriptors from descriptor sets
created with or without the
<code>VK_DESCRIPTOR_SET_LAYOUT_CREATE_UPDATE_AFTER_BIND_POOL_BIT_EXT</code> bit
set.</p>
</li>
<li>
<p><a id="limits-maxDescriptorSetUpdateAfterBindSamplers"></a>
<code>maxDescriptorSetUpdateAfterBindSamplers</code> is similar to
<code>maxDescriptorSetSamplers</code> but counts descriptors from descriptor
sets created with or without the
<code>VK_DESCRIPTOR_SET_LAYOUT_CREATE_UPDATE_AFTER_BIND_POOL_BIT_EXT</code> bit
set.</p>
</li>
<li>
<p><a id="limits-maxDescriptorSetUpdateAfterBindUniformBuffers"></a>
<code>maxDescriptorSetUpdateAfterBindUniformBuffers</code> is similar to
<code>maxDescriptorSetUniformBuffers</code> but counts descriptors from
descriptor sets created with or without the
<code>VK_DESCRIPTOR_SET_LAYOUT_CREATE_UPDATE_AFTER_BIND_POOL_BIT_EXT</code> bit
set.</p>
</li>
<li>
<p><a id="limits-maxDescriptorSetUpdateAfterBindUniformBuffersDynamic"></a>
<code>maxDescriptorSetUpdateAfterBindUniformBuffersDynamic</code> is similar to
<code>maxDescriptorSetUniformBuffersDynamic</code> but counts descriptors from
descriptor sets created with or without the
<code>VK_DESCRIPTOR_SET_LAYOUT_CREATE_UPDATE_AFTER_BIND_POOL_BIT_EXT</code> bit
set.</p>
</li>
<li>
<p><a id="limits-maxDescriptorSetUpdateAfterBindStorageBuffers"></a>
<code>maxDescriptorSetUpdateAfterBindStorageBuffers</code> is similar to
<code>maxDescriptorSetStorageBuffers</code> but counts descriptors from
descriptor sets created with or without the
<code>VK_DESCRIPTOR_SET_LAYOUT_CREATE_UPDATE_AFTER_BIND_POOL_BIT_EXT</code> bit
set.</p>
</li>
<li>
<p><a id="limits-maxDescriptorSetUpdateAfterBindStorageBuffersDynamic"></a>
<code>maxDescriptorSetUpdateAfterBindStorageBuffersDynamic</code> is similar to
<code>maxDescriptorSetStorageBuffersDynamic</code> but counts descriptors from
descriptor sets created with or without the
<code>VK_DESCRIPTOR_SET_LAYOUT_CREATE_UPDATE_AFTER_BIND_POOL_BIT_EXT</code> bit
set.</p>
</li>
<li>
<p><a id="limits-maxDescriptorSetUpdateAfterBindSampledImages"></a>
<code>maxDescriptorSetUpdateAfterBindSampledImages</code> is similar to
<code>maxDescriptorSetSampledImages</code> but counts descriptors from
descriptor sets created with or without the
<code>VK_DESCRIPTOR_SET_LAYOUT_CREATE_UPDATE_AFTER_BIND_POOL_BIT_EXT</code> bit
set.</p>
</li>
<li>
<p><a id="limits-maxDescriptorSetUpdateAfterBindStorageImages"></a>
<code>maxDescriptorSetUpdateAfterBindStorageImages</code> is similar to
<code>maxDescriptorSetStorageImages</code> but counts descriptors from
descriptor sets created with or without the
<code>VK_DESCRIPTOR_SET_LAYOUT_CREATE_UPDATE_AFTER_BIND_POOL_BIT_EXT</code> bit
set.</p>
</li>
<li>
<p><a id="limits-maxDescriptorSetUpdateAfterBindInputAttachments"></a>
<code>maxDescriptorSetUpdateAfterBindInputAttachments</code> is similar to
<code>maxDescriptorSetInputAttachments</code> but counts descriptors from
descriptor sets created with or without the
<code>VK_DESCRIPTOR_SET_LAYOUT_CREATE_UPDATE_AFTER_BIND_POOL_BIT_EXT</code> bit
set.</p>
</li>
</ul>
</div>
<div class="paragraph">
<p>If the <code>VkPhysicalDeviceDescriptorIndexingPropertiesEXT</code> structure is
included in the <code>pNext</code> chain of <a href="#VkPhysicalDeviceProperties2">VkPhysicalDeviceProperties2</a>, it
is filled with the implementation-dependent limits.</p>
</div>
<div class="sidebarblock">
<div class="content">
<div class="title">Valid Usage (Implicit)</div>
<div class="ulist">
<ul>
<li>
<p><a id="VUID-VkPhysicalDeviceDescriptorIndexingPropertiesEXT-sType-sType"></a> <code>sType</code> <strong class="purple">must</strong> be <code>VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_DESCRIPTOR_INDEXING_PROPERTIES_EXT</code></p>
</li>
</ul>
</div>
</div>
</div>
</div>
<div class="sect3">
<h4 id="_see_also_605">See Also</h4>
<div class="paragraph">
<p><code>VkBool32</code>, <a href="#VkStructureType">VkStructureType</a></p>
</div>
</div>
<div class="sect3">
<h4 id="_document_notes_605">Document Notes</h4>
<div class="paragraph">
<p>For more information, see the Vulkan Specification at URL</p>
</div>
<div class="paragraph">
<p><a href="https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VkPhysicalDeviceDescriptorIndexingPropertiesEXT" class="bare">https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VkPhysicalDeviceDescriptorIndexingPropertiesEXT</a></p>
</div>
<div class="paragraph">
<p>This page is extracted from the Vulkan Specification.
Fixes and changes should be made to the Specification, not directly.</p>
</div>
<div style="page-break-after: always;"></div>
</div>
</div>
<div class="sect2">
<h3 id="_vkphysicaldevicediscardrectanglepropertiesext3">VkPhysicalDeviceDiscardRectanglePropertiesEXT(3)</h3>
<div class="sect3">
<h4 id="_name_606">Name</h4>
<div class="paragraph">
<p>VkPhysicalDeviceDiscardRectanglePropertiesEXT - Structure describing discard rectangle limits that can be supported by an implementation</p>
</div>
</div>
<div class="sect3">
<h4 id="_c_specification_606">C Specification</h4>
<div class="paragraph">
<p>The <code>VkPhysicalDeviceDiscardRectanglePropertiesEXT</code> structure is defined
as:</p>
</div>
<div id="VkPhysicalDeviceDiscardRectanglePropertiesEXT" class="listingblock">
<div class="content">
<pre class="highlight"><code class="language-c++" data-lang="c++">typedef struct VkPhysicalDeviceDiscardRectanglePropertiesEXT {
    VkStructureType    sType;
    void*              pNext;
    uint32_t           maxDiscardRectangles;
} VkPhysicalDeviceDiscardRectanglePropertiesEXT;</code></pre>
</div>
</div>
</div>
<div class="sect3">
<h4 id="_members_243">Members</h4>
<div class="paragraph">
<p>The members of the <code>VkPhysicalDeviceDiscardRectanglePropertiesEXT</code>
structure describe the following implementation-dependent limits:</p>
</div>
</div>
<div class="sect3">
<h4 id="_description_606">Description</h4>
<div class="ulist">
<ul>
<li>
<p><code>sType</code> is the type of this structure.</p>
</li>
<li>
<p><code>pNext</code> is <code>NULL</code> or a pointer to an extension-specific structure.</p>
</li>
<li>
<p><a id="limits-maxDiscardRectangles"></a> <code>maxDiscardRectangles</code> is the
maximum number of active discard rectangles that <strong class="purple">can</strong> be specified.</p>
</li>
</ul>
</div>
<div class="paragraph">
<p>If the <code>VkPhysicalDeviceDiscardRectanglePropertiesEXT</code> structure is
included in the <code>pNext</code> chain of <a href="#VkPhysicalDeviceProperties2">VkPhysicalDeviceProperties2</a>, it
is filled with the implementation-dependent limits.</p>
</div>
<div class="sidebarblock">
<div class="content">
<div class="title">Valid Usage (Implicit)</div>
<div class="ulist">
<ul>
<li>
<p><a id="VUID-VkPhysicalDeviceDiscardRectanglePropertiesEXT-sType-sType"></a> <code>sType</code> <strong class="purple">must</strong> be <code>VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_DISCARD_RECTANGLE_PROPERTIES_EXT</code></p>
</li>
</ul>
</div>
</div>
</div>
</div>
<div class="sect3">
<h4 id="_see_also_606">See Also</h4>
<div class="paragraph">
<p><a href="#VkStructureType">VkStructureType</a></p>
</div>
</div>
<div class="sect3">
<h4 id="_document_notes_606">Document Notes</h4>
<div class="paragraph">
<p>For more information, see the Vulkan Specification at URL</p>
</div>
<div class="paragraph">
<p><a href="https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VkPhysicalDeviceDiscardRectanglePropertiesEXT" class="bare">https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VkPhysicalDeviceDiscardRectanglePropertiesEXT</a></p>
</div>
<div class="paragraph">
<p>This page is extracted from the Vulkan Specification.
Fixes and changes should be made to the Specification, not directly.</p>
</div>
<div style="page-break-after: always;"></div>
</div>
</div>
<div class="sect2">
<h3 id="_vkphysicaldevicedriverpropertieskhr3">VkPhysicalDeviceDriverPropertiesKHR(3)</h3>
<div class="sect3">
<h4 id="_name_607">Name</h4>
<div class="paragraph">
<p>VkPhysicalDeviceDriverPropertiesKHR - Structure containing driver identification information</p>
</div>
</div>
<div class="sect3">
<h4 id="_c_specification_607">C Specification</h4>
<div class="paragraph">
<p>To query the properties of the driver corresponding to a physical device,
add <a href="#VkPhysicalDeviceDriverPropertiesKHR">VkPhysicalDeviceDriverPropertiesKHR</a> to the <code>pNext</code> chain of
the <a href="#VkPhysicalDeviceProperties2">VkPhysicalDeviceProperties2</a> structure.
The <code>VkPhysicalDeviceDriverPropertiesKHR</code> structure is defined as:</p>
</div>
<div id="VkPhysicalDeviceDriverPropertiesKHR" class="listingblock">
<div class="content">
<pre class="highlight"><code class="language-c++" data-lang="c++">typedef struct VkPhysicalDeviceDriverPropertiesKHR {
    VkStructureType            sType;
    void*                      pNext;
    VkDriverIdKHR              driverID;
    char                       driverName[VK_MAX_DRIVER_NAME_SIZE_KHR];
    char                       driverInfo[VK_MAX_DRIVER_INFO_SIZE_KHR];
    VkConformanceVersionKHR    conformanceVersion;
} VkPhysicalDeviceDriverPropertiesKHR;</code></pre>
</div>
</div>
</div>
<div class="sect3">
<h4 id="_members_244">Members</h4>
<div class="ulist">
<ul>
<li>
<p><code>sType</code> is the type of this structure.</p>
</li>
<li>
<p><code>pNext</code> is <code>NULL</code> or a pointer to an extension specific structure.</p>
</li>
<li>
<p><code>driverID</code> is a unique identifier for the driver of the physical
device.</p>
</li>
<li>
<p><code>driverName</code> is a null-terminated UTF-8 string containing the name
of the driver.</p>
</li>
<li>
<p><code>driverInfo</code> is a null-terminated UTF-8 string containing additional
information about the driver.</p>
</li>
<li>
<p><code>conformanceVersion</code> is the version of the Vulkan conformance test
this driver is conformant against (see <a href="#VkConformanceVersionKHR">VkConformanceVersionKHR</a>).</p>
</li>
</ul>
</div>
</div>
<div class="sect3">
<h4 id="_description_607">Description</h4>
<div class="paragraph">
<p><code>driverID</code> <strong class="purple">must</strong> be immutable for a given driver across instances,
processes, driver versions, and system reboots.</p>
</div>
<div class="sidebarblock">
<div class="content">
<div class="title">Valid Usage (Implicit)</div>
<div class="ulist">
<ul>
<li>
<p><a id="VUID-VkPhysicalDeviceDriverPropertiesKHR-sType-sType"></a> <code>sType</code> <strong class="purple">must</strong> be <code>VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_DRIVER_PROPERTIES_KHR</code></p>
</li>
</ul>
</div>
</div>
</div>
</div>
<div class="sect3">
<h4 id="_see_also_607">See Also</h4>
<div class="paragraph">
<p><a href="#VkConformanceVersionKHR">VkConformanceVersionKHR</a>, <a href="#VkDriverIdKHR">VkDriverIdKHR</a>, <a href="#VkStructureType">VkStructureType</a></p>
</div>
</div>
<div class="sect3">
<h4 id="_document_notes_607">Document Notes</h4>
<div class="paragraph">
<p>For more information, see the Vulkan Specification at URL</p>
</div>
<div class="paragraph">
<p><a href="https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VkPhysicalDeviceDriverPropertiesKHR" class="bare">https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VkPhysicalDeviceDriverPropertiesKHR</a></p>
</div>
<div class="paragraph">
<p>This page is extracted from the Vulkan Specification.
Fixes and changes should be made to the Specification, not directly.</p>
</div>
<div style="page-break-after: always;"></div>
</div>
</div>
<div class="sect2">
<h3 id="_vkphysicaldeviceexclusivescissorfeaturesnv3">VkPhysicalDeviceExclusiveScissorFeaturesNV(3)</h3>
<div class="sect3">
<h4 id="_name_608">Name</h4>
<div class="paragraph">
<p>VkPhysicalDeviceExclusiveScissorFeaturesNV - Structure describing exclusive scissor features that can be supported by an implementation</p>
</div>
</div>
<div class="sect3">
<h4 id="_c_specification_608">C Specification</h4>
<div class="paragraph">
<p>The <code>VkPhysicalDeviceExclusiveScissorFeaturesNV</code> structure is defined
as:</p>
</div>
<div id="VkPhysicalDeviceExclusiveScissorFeaturesNV" class="listingblock">
<div class="content">
<pre class="highlight"><code class="language-c++" data-lang="c++">typedef struct VkPhysicalDeviceExclusiveScissorFeaturesNV {
    VkStructureType    sType;
    void*              pNext;
    VkBool32           exclusiveScissor;
} VkPhysicalDeviceExclusiveScissorFeaturesNV;</code></pre>
</div>
</div>
</div>
<div class="sect3">
<h4 id="_members_245">Members</h4>
<div class="paragraph">
<p>The members of the <code>VkPhysicalDeviceExclusiveScissorFeaturesNV</code>
structure describe the following features:</p>
</div>
</div>
<div class="sect3">
<h4 id="_description_608">Description</h4>
<div class="ulist">
<ul>
<li>
<p><a id="features-exclusiveScissor"></a> <code>exclusiveScissor</code> indicates that the
implementation supports the exclusive scissor test.</p>
</li>
</ul>
</div>
<div class="paragraph">
<p>See <a href="vkspec.html#fragops-exclusive-scissor">Exclusive Scissor Test</a> for more
information.</p>
</div>
<div class="paragraph">
<p>If the <code>VkPhysicalDeviceExclusiveScissorFeaturesNV</code> structure is
included in the <code>pNext</code> chain of <a href="#VkPhysicalDeviceFeatures2KHR">VkPhysicalDeviceFeatures2KHR</a>, it
is filled with values indicating whether the feature is supported.
<code>VkPhysicalDeviceExclusiveScissorFeaturesNV</code> <strong class="purple">can</strong> also be used in the
<code>pNext</code> chain of <a href="#VkDeviceCreateInfo">VkDeviceCreateInfo</a> to enable the feature.</p>
</div>
<div class="sidebarblock">
<div class="content">
<div class="title">Valid Usage (Implicit)</div>
<div class="ulist">
<ul>
<li>
<p><a id="VUID-VkPhysicalDeviceExclusiveScissorFeaturesNV-sType-sType"></a> <code>sType</code> <strong class="purple">must</strong> be <code>VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_EXCLUSIVE_SCISSOR_FEATURES_NV</code></p>
</li>
</ul>
</div>
</div>
</div>
</div>
<div class="sect3">
<h4 id="_see_also_608">See Also</h4>
<div class="paragraph">
<p><code>VkBool32</code>, <a href="#VkStructureType">VkStructureType</a></p>
</div>
</div>
<div class="sect3">
<h4 id="_document_notes_608">Document Notes</h4>
<div class="paragraph">
<p>For more information, see the Vulkan Specification at URL</p>
</div>
<div class="paragraph">
<p><a href="https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VkPhysicalDeviceExclusiveScissorFeaturesNV" class="bare">https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VkPhysicalDeviceExclusiveScissorFeaturesNV</a></p>
</div>
<div class="paragraph">
<p>This page is extracted from the Vulkan Specification.
Fixes and changes should be made to the Specification, not directly.</p>
</div>
<div style="page-break-after: always;"></div>
</div>
</div>
<div class="sect2">
<h3 id="_vkphysicaldeviceexternalbufferinfo3">VkPhysicalDeviceExternalBufferInfo(3)</h3>
<div class="sect3">
<h4 id="_name_609">Name</h4>
<div class="paragraph">
<p>VkPhysicalDeviceExternalBufferInfo - Structure specifying buffer creation parameters</p>
</div>
</div>
<div class="sect3">
<h4 id="_c_specification_609">C Specification</h4>
<div class="paragraph">
<p>The <code>VkPhysicalDeviceExternalBufferInfo</code> structure is defined as:</p>
</div>
<div id="VkPhysicalDeviceExternalBufferInfo" class="listingblock">
<div class="content">
<pre class="highlight"><code class="language-c++" data-lang="c++">typedef struct VkPhysicalDeviceExternalBufferInfo {
    VkStructureType                       sType;
    const void*                           pNext;
    VkBufferCreateFlags                   flags;
    VkBufferUsageFlags                    usage;
    VkExternalMemoryHandleTypeFlagBits    handleType;
} VkPhysicalDeviceExternalBufferInfo;</code></pre>
</div>
</div>
<div class="paragraph">
<p>or the equivalent</p>
</div>
<div id="VkPhysicalDeviceExternalBufferInfoKHR" class="listingblock">
<div class="content">
<pre class="highlight"><code class="language-c++" data-lang="c++">typedef VkPhysicalDeviceExternalBufferInfo VkPhysicalDeviceExternalBufferInfoKHR;</code></pre>
</div>
</div>
</div>
<div class="sect3">
<h4 id="_members_246">Members</h4>
<div class="ulist">
<ul>
<li>
<p><code>sType</code> is the type of this structure</p>
</li>
<li>
<p><code>pNext</code> is NULL or a pointer to an extension-specific structure.</p>
</li>
<li>
<p><code>flags</code> is a bitmask of <a href="#VkBufferCreateFlagBits">VkBufferCreateFlagBits</a> describing
additional parameters of the buffer, corresponding to
<a href="#VkBufferCreateInfo">VkBufferCreateInfo</a>::<code>flags</code>.</p>
</li>
<li>
<p><code>usage</code> is a bitmask of <a href="#VkBufferUsageFlagBits">VkBufferUsageFlagBits</a> describing the
intended usage of the buffer, corresponding to
<a href="#VkBufferCreateInfo">VkBufferCreateInfo</a>::<code>usage</code>.</p>
</li>
<li>
<p><code>handleType</code> is a <a href="#VkExternalMemoryHandleTypeFlagBits">VkExternalMemoryHandleTypeFlagBits</a> value
specifying the memory handle type that will be used with the memory
associated with the buffer.</p>
</li>
</ul>
</div>
</div>
<div class="sect3">
<h4 id="_description_609">Description</h4>
<div class="sidebarblock">
<div class="content">
<div class="title">Valid Usage (Implicit)</div>
<div class="ulist">
<ul>
<li>
<p><a id="VUID-VkPhysicalDeviceExternalBufferInfo-sType-sType"></a> <code>sType</code> <strong class="purple">must</strong> be <code>VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_EXTERNAL_BUFFER_INFO</code></p>
</li>
<li>
<p><a id="VUID-VkPhysicalDeviceExternalBufferInfo-pNext-pNext"></a> <code>pNext</code> <strong class="purple">must</strong> be <code>NULL</code></p>
</li>
<li>
<p><a id="VUID-VkPhysicalDeviceExternalBufferInfo-flags-parameter"></a> <code>flags</code> <strong class="purple">must</strong> be a valid combination of <a href="#VkBufferCreateFlagBits">VkBufferCreateFlagBits</a> values</p>
</li>
<li>
<p><a id="VUID-VkPhysicalDeviceExternalBufferInfo-usage-parameter"></a> <code>usage</code> <strong class="purple">must</strong> be a valid combination of <a href="#VkBufferUsageFlagBits">VkBufferUsageFlagBits</a> values</p>
</li>
<li>
<p><a id="VUID-VkPhysicalDeviceExternalBufferInfo-usage-requiredbitmask"></a> <code>usage</code> <strong class="purple">must</strong> not be <code>0</code></p>
</li>
<li>
<p><a id="VUID-VkPhysicalDeviceExternalBufferInfo-handleType-parameter"></a> <code>handleType</code> <strong class="purple">must</strong> be a valid <a href="#VkExternalMemoryHandleTypeFlagBits">VkExternalMemoryHandleTypeFlagBits</a> value</p>
</li>
</ul>
</div>
</div>
</div>
</div>
<div class="sect3">
<h4 id="_see_also_609">See Also</h4>
<div class="paragraph">
<p><a href="#VkBufferCreateFlags">VkBufferCreateFlags</a>, <a href="#VkBufferUsageFlags">VkBufferUsageFlags</a>, <a href="#VkExternalMemoryHandleTypeFlagBits">VkExternalMemoryHandleTypeFlagBits</a>, <a href="#VkStructureType">VkStructureType</a>, <a href="#vkGetPhysicalDeviceExternalBufferProperties">vkGetPhysicalDeviceExternalBufferProperties</a>, <a href="#vkGetPhysicalDeviceExternalBufferPropertiesKHR">vkGetPhysicalDeviceExternalBufferPropertiesKHR</a></p>
</div>
</div>
<div class="sect3">
<h4 id="_document_notes_609">Document Notes</h4>
<div class="paragraph">
<p>For more information, see the Vulkan Specification at URL</p>
</div>
<div class="paragraph">
<p><a href="https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VkPhysicalDeviceExternalBufferInfo" class="bare">https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VkPhysicalDeviceExternalBufferInfo</a></p>
</div>
<div class="paragraph">
<p>This page is extracted from the Vulkan Specification.
Fixes and changes should be made to the Specification, not directly.</p>
</div>
<div style="page-break-after: always;"></div>
</div>
</div>
<div class="sect2">
<h3 id="_vkphysicaldeviceexternalfenceinfo3">VkPhysicalDeviceExternalFenceInfo(3)</h3>
<div class="sect3">
<h4 id="_name_610">Name</h4>
<div class="paragraph">
<p>VkPhysicalDeviceExternalFenceInfo - Structure specifying fence creation parameters.</p>
</div>
</div>
<div class="sect3">
<h4 id="_c_specification_610">C Specification</h4>
<div class="paragraph">
<p>The <code>VkPhysicalDeviceExternalFenceInfo</code> structure is defined as:</p>
</div>
<div id="VkPhysicalDeviceExternalFenceInfo" class="listingblock">
<div class="content">
<pre class="highlight"><code class="language-c++" data-lang="c++">typedef struct VkPhysicalDeviceExternalFenceInfo {
    VkStructureType                      sType;
    const void*                          pNext;
    VkExternalFenceHandleTypeFlagBits    handleType;
} VkPhysicalDeviceExternalFenceInfo;</code></pre>
</div>
</div>
<div class="paragraph">
<p>or the equivalent</p>
</div>
<div id="VkPhysicalDeviceExternalFenceInfoKHR" class="listingblock">
<div class="content">
<pre class="highlight"><code class="language-c++" data-lang="c++">typedef VkPhysicalDeviceExternalFenceInfo VkPhysicalDeviceExternalFenceInfoKHR;</code></pre>
</div>
</div>
</div>
<div class="sect3">
<h4 id="_members_247">Members</h4>
<div class="ulist">
<ul>
<li>
<p><code>sType</code> is the type of this structure</p>
</li>
<li>
<p><code>pNext</code> is NULL or a pointer to an extension-specific structure.</p>
</li>
<li>
<p><code>handleType</code> is a <a href="#VkExternalFenceHandleTypeFlagBits">VkExternalFenceHandleTypeFlagBits</a> value
indicating an external fence handle type for which capabilities will be
returned.</p>
</li>
</ul>
</div>
</div>
<div class="sect3">
<h4 id="_description_610">Description</h4>
<div class="admonitionblock note">
<table>
<tr>
<td class="icon">
<i class="fa icon-note" title="Note"></i>
</td>
<td class="content">
<div class="title">Note</div>
<div class="paragraph">
<p>Handles of type <code>VK_EXTERNAL_FENCE_HANDLE_TYPE_SYNC_FD_BIT</code> generated by
the implementation may represent either Linux Sync Files or Android Fences
at the implementation&#8217;s discretion.
Applications <strong class="purple">should</strong> only use operations defined for both types of file
descriptors, unless they know via means external to Vulkan the type of the
file descriptor, or are prepared to deal with the system-defined operation
failures resulting from using the wrong type.</p>
</div>
</td>
</tr>
</table>
</div>
<div class="sidebarblock">
<div class="content">
<div class="title">Valid Usage (Implicit)</div>
<div class="ulist">
<ul>
<li>
<p><a id="VUID-VkPhysicalDeviceExternalFenceInfo-sType-sType"></a> <code>sType</code> <strong class="purple">must</strong> be <code>VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_EXTERNAL_FENCE_INFO</code></p>
</li>
<li>
<p><a id="VUID-VkPhysicalDeviceExternalFenceInfo-pNext-pNext"></a> <code>pNext</code> <strong class="purple">must</strong> be <code>NULL</code></p>
</li>
<li>
<p><a id="VUID-VkPhysicalDeviceExternalFenceInfo-handleType-parameter"></a> <code>handleType</code> <strong class="purple">must</strong> be a valid <a href="#VkExternalFenceHandleTypeFlagBits">VkExternalFenceHandleTypeFlagBits</a> value</p>
</li>
</ul>
</div>
</div>
</div>
</div>
<div class="sect3">
<h4 id="_see_also_610">See Also</h4>
<div class="paragraph">
<p><a href="#VkExternalFenceHandleTypeFlagBits">VkExternalFenceHandleTypeFlagBits</a>, <a href="#VkStructureType">VkStructureType</a>, <a href="#vkGetPhysicalDeviceExternalFenceProperties">vkGetPhysicalDeviceExternalFenceProperties</a>, <a href="#vkGetPhysicalDeviceExternalFencePropertiesKHR">vkGetPhysicalDeviceExternalFencePropertiesKHR</a></p>
</div>
</div>
<div class="sect3">
<h4 id="_document_notes_610">Document Notes</h4>
<div class="paragraph">
<p>For more information, see the Vulkan Specification at URL</p>
</div>
<div class="paragraph">
<p><a href="https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VkPhysicalDeviceExternalFenceInfo" class="bare">https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VkPhysicalDeviceExternalFenceInfo</a></p>
</div>
<div class="paragraph">
<p>This page is extracted from the Vulkan Specification.
Fixes and changes should be made to the Specification, not directly.</p>
</div>
<div style="page-break-after: always;"></div>
</div>
</div>
<div class="sect2">
<h3 id="_vkphysicaldeviceexternalimageformatinfo3">VkPhysicalDeviceExternalImageFormatInfo(3)</h3>
<div class="sect3">
<h4 id="_name_611">Name</h4>
<div class="paragraph">
<p>VkPhysicalDeviceExternalImageFormatInfo - Structure specifying external image creation parameters</p>
</div>
</div>
<div class="sect3">
<h4 id="_c_specification_611">C Specification</h4>
<div class="paragraph">
<p>To determine the image capabilities compatible with an external memory
handle type, add <a href="#VkPhysicalDeviceExternalImageFormatInfo">VkPhysicalDeviceExternalImageFormatInfo</a> to the
<code>pNext</code> chain of the <a href="#VkPhysicalDeviceImageFormatInfo2">VkPhysicalDeviceImageFormatInfo2</a> structure
and <code>VkExternalImageFormatProperties</code> to the <code>pNext</code> chain of the
<a href="#VkImageFormatProperties2">VkImageFormatProperties2</a> structure.</p>
</div>
<div class="paragraph">
<p>The <code>VkPhysicalDeviceExternalImageFormatInfo</code> structure is defined as:</p>
</div>
<div id="VkPhysicalDeviceExternalImageFormatInfo" class="listingblock">
<div class="content">
<pre class="highlight"><code class="language-c++" data-lang="c++">typedef struct VkPhysicalDeviceExternalImageFormatInfo {
    VkStructureType                       sType;
    const void*                           pNext;
    VkExternalMemoryHandleTypeFlagBits    handleType;
} VkPhysicalDeviceExternalImageFormatInfo;</code></pre>
</div>
</div>
<div class="paragraph">
<p>or the equivalent</p>
</div>
<div id="VkPhysicalDeviceExternalImageFormatInfoKHR" class="listingblock">
<div class="content">
<pre class="highlight"><code class="language-c++" data-lang="c++">typedef VkPhysicalDeviceExternalImageFormatInfo VkPhysicalDeviceExternalImageFormatInfoKHR;</code></pre>
</div>
</div>
</div>
<div class="sect3">
<h4 id="_members_248">Members</h4>
<div class="ulist">
<ul>
<li>
<p><code>sType</code> is the type of this structure.</p>
</li>
<li>
<p><code>pNext</code> is <code>NULL</code> or a pointer to an extension-specific structure.</p>
</li>
<li>
<p><code>handleType</code> is a <a href="#VkExternalMemoryHandleTypeFlagBits">VkExternalMemoryHandleTypeFlagBits</a> value
specifying the memory handle type that will be used with the memory
associated with the image.</p>
</li>
</ul>
</div>
</div>
<div class="sect3">
<h4 id="_description_611">Description</h4>
<div class="paragraph">
<p>If <code>handleType</code> is 0, <a href="#vkGetPhysicalDeviceImageFormatProperties2">vkGetPhysicalDeviceImageFormatProperties2</a>
will behave as if <a href="#VkPhysicalDeviceExternalImageFormatInfo">VkPhysicalDeviceExternalImageFormatInfo</a> was not
present, and <a href="#VkExternalImageFormatProperties">VkExternalImageFormatProperties</a> will be ignored.</p>
</div>
<div class="paragraph">
<p>If <code>handleType</code> is not compatible with the <code>format</code>, <code>type</code>,
<code>tiling</code>, <code>usage</code>, and <code>flags</code> specified in
<a href="#VkPhysicalDeviceImageFormatInfo2">VkPhysicalDeviceImageFormatInfo2</a>, then
<a href="#vkGetPhysicalDeviceImageFormatProperties2">vkGetPhysicalDeviceImageFormatProperties2</a> returns
<code>VK_ERROR_FORMAT_NOT_SUPPORTED</code>.</p>
</div>
<div class="sidebarblock">
<div class="content">
<div class="title">Valid Usage (Implicit)</div>
<div class="ulist">
<ul>
<li>
<p><a id="VUID-VkPhysicalDeviceExternalImageFormatInfo-sType-sType"></a> <code>sType</code> <strong class="purple">must</strong> be <code>VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_EXTERNAL_IMAGE_FORMAT_INFO</code></p>
</li>
<li>
<p><a id="VUID-VkPhysicalDeviceExternalImageFormatInfo-handleType-parameter"></a> If <code>handleType</code> is not <code>0</code>, <code>handleType</code> <strong class="purple">must</strong> be a valid <a href="#VkExternalMemoryHandleTypeFlagBits">VkExternalMemoryHandleTypeFlagBits</a> value</p>
</li>
</ul>
</div>
</div>
</div>
</div>
<div class="sect3">
<h4 id="_see_also_611">See Also</h4>
<div class="paragraph">
<p><a href="#VkExternalMemoryHandleTypeFlagBits">VkExternalMemoryHandleTypeFlagBits</a>, <a href="#VkStructureType">VkStructureType</a></p>
</div>
</div>
<div class="sect3">
<h4 id="_document_notes_611">Document Notes</h4>
<div class="paragraph">
<p>For more information, see the Vulkan Specification at URL</p>
</div>
<div class="paragraph">
<p><a href="https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VkPhysicalDeviceExternalImageFormatInfo" class="bare">https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VkPhysicalDeviceExternalImageFormatInfo</a></p>
</div>
<div class="paragraph">
<p>This page is extracted from the Vulkan Specification.
Fixes and changes should be made to the Specification, not directly.</p>
</div>
<div style="page-break-after: always;"></div>
</div>
</div>
<div class="sect2">
<h3 id="_vkphysicaldeviceexternalmemoryhostpropertiesext3">VkPhysicalDeviceExternalMemoryHostPropertiesEXT(3)</h3>
<div class="sect3">
<h4 id="_name_612">Name</h4>
<div class="paragraph">
<p>VkPhysicalDeviceExternalMemoryHostPropertiesEXT - Structure describing external memory host pointer limits that can be supported by an implementation</p>
</div>
</div>
<div class="sect3">
<h4 id="_c_specification_612">C Specification</h4>
<div class="paragraph">
<p>The <code>VkPhysicalDeviceExternalMemoryHostPropertiesEXT</code> structure is
defined as:</p>
</div>
<div id="VkPhysicalDeviceExternalMemoryHostPropertiesEXT" class="listingblock">
<div class="content">
<pre class="highlight"><code class="language-c++" data-lang="c++">typedef struct VkPhysicalDeviceExternalMemoryHostPropertiesEXT {
    VkStructureType    sType;
    void*              pNext;
    VkDeviceSize       minImportedHostPointerAlignment;
} VkPhysicalDeviceExternalMemoryHostPropertiesEXT;</code></pre>
</div>
</div>
</div>
<div class="sect3">
<h4 id="_members_249">Members</h4>
<div class="paragraph">
<p>The members of the <code>VkPhysicalDeviceExternalMemoryHostPropertiesEXT</code>
structure describe the following implementation-dependent limits:</p>
</div>
</div>
<div class="sect3">
<h4 id="_description_612">Description</h4>
<div class="ulist">
<ul>
<li>
<p><code>sType</code> is the type of this structure.</p>
</li>
<li>
<p><code>pNext</code> is <code>NULL</code> or a pointer to an extension-specific structure.</p>
</li>
<li>
<p><a id="limits-minImportedHostPointerAlignment"></a>
<code>minImportedHostPointerAlignment</code> is the minimum <strong class="purple">required</strong>
alignment, in bytes, for the base address and size of host pointers that
<strong class="purple">can</strong> be imported to a Vulkan memory object.</p>
</li>
</ul>
</div>
<div class="paragraph">
<p>If the <code>VkPhysicalDeviceExternalMemoryHostPropertiesEXT</code> structure is
included in the <code>pNext</code> chain of <a href="#VkPhysicalDeviceProperties2">VkPhysicalDeviceProperties2</a>, it
is filled with the implementation-dependent limits.</p>
</div>
<div class="sidebarblock">
<div class="content">
<div class="title">Valid Usage (Implicit)</div>
<div class="ulist">
<ul>
<li>
<p><a id="VUID-VkPhysicalDeviceExternalMemoryHostPropertiesEXT-sType-sType"></a> <code>sType</code> <strong class="purple">must</strong> be <code>VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_EXTERNAL_MEMORY_HOST_PROPERTIES_EXT</code></p>
</li>
</ul>
</div>
</div>
</div>
</div>
<div class="sect3">
<h4 id="_see_also_612">See Also</h4>
<div class="paragraph">
<p><code>VkDeviceSize</code>, <a href="#VkStructureType">VkStructureType</a></p>
</div>
</div>
<div class="sect3">
<h4 id="_document_notes_612">Document Notes</h4>
<div class="paragraph">
<p>For more information, see the Vulkan Specification at URL</p>
</div>
<div class="paragraph">
<p><a href="https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VkPhysicalDeviceExternalMemoryHostPropertiesEXT" class="bare">https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VkPhysicalDeviceExternalMemoryHostPropertiesEXT</a></p>
</div>
<div class="paragraph">
<p>This page is extracted from the Vulkan Specification.
Fixes and changes should be made to the Specification, not directly.</p>
</div>
<div style="page-break-after: always;"></div>
</div>
</div>
<div class="sect2">
<h3 id="_vkphysicaldeviceexternalsemaphoreinfo3">VkPhysicalDeviceExternalSemaphoreInfo(3)</h3>
<div class="sect3">
<h4 id="_name_613">Name</h4>
<div class="paragraph">
<p>VkPhysicalDeviceExternalSemaphoreInfo - Structure specifying semaphore creation parameters.</p>
</div>
</div>
<div class="sect3">
<h4 id="_c_specification_613">C Specification</h4>
<div class="paragraph">
<p>The <code>VkPhysicalDeviceExternalSemaphoreInfo</code> structure is defined as:</p>
</div>
<div id="VkPhysicalDeviceExternalSemaphoreInfo" class="listingblock">
<div class="content">
<pre class="highlight"><code class="language-c++" data-lang="c++">typedef struct VkPhysicalDeviceExternalSemaphoreInfo {
    VkStructureType                          sType;
    const void*                              pNext;
    VkExternalSemaphoreHandleTypeFlagBits    handleType;
} VkPhysicalDeviceExternalSemaphoreInfo;</code></pre>
</div>
</div>
<div class="paragraph">
<p>or the equivalent</p>
</div>
<div id="VkPhysicalDeviceExternalSemaphoreInfoKHR" class="listingblock">
<div class="content">
<pre class="highlight"><code class="language-c++" data-lang="c++">typedef VkPhysicalDeviceExternalSemaphoreInfo VkPhysicalDeviceExternalSemaphoreInfoKHR;</code></pre>
</div>
</div>
</div>
<div class="sect3">
<h4 id="_members_250">Members</h4>
<div class="ulist">
<ul>
<li>
<p><code>sType</code> is the type of this structure</p>
</li>
<li>
<p><code>pNext</code> is NULL or a pointer to an extension-specific structure.</p>
</li>
<li>
<p><code>handleType</code> is a <a href="#VkExternalSemaphoreHandleTypeFlagBits">VkExternalSemaphoreHandleTypeFlagBits</a> value
specifying the external semaphore handle type for which capabilities
will be returned.</p>
</li>
</ul>
</div>
</div>
<div class="sect3">
<h4 id="_description_613">Description</h4>
<div class="sidebarblock">
<div class="content">
<div class="title">Valid Usage (Implicit)</div>
<div class="ulist">
<ul>
<li>
<p><a id="VUID-VkPhysicalDeviceExternalSemaphoreInfo-sType-sType"></a> <code>sType</code> <strong class="purple">must</strong> be <code>VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_EXTERNAL_SEMAPHORE_INFO</code></p>
</li>
<li>
<p><a id="VUID-VkPhysicalDeviceExternalSemaphoreInfo-pNext-pNext"></a> <code>pNext</code> <strong class="purple">must</strong> be <code>NULL</code></p>
</li>
<li>
<p><a id="VUID-VkPhysicalDeviceExternalSemaphoreInfo-handleType-parameter"></a> <code>handleType</code> <strong class="purple">must</strong> be a valid <a href="#VkExternalSemaphoreHandleTypeFlagBits">VkExternalSemaphoreHandleTypeFlagBits</a> value</p>
</li>
</ul>
</div>
</div>
</div>
</div>
<div class="sect3">
<h4 id="_see_also_613">See Also</h4>
<div class="paragraph">
<p><a href="#VkExternalSemaphoreHandleTypeFlagBits">VkExternalSemaphoreHandleTypeFlagBits</a>, <a href="#VkStructureType">VkStructureType</a>, <a href="#vkGetPhysicalDeviceExternalSemaphoreProperties">vkGetPhysicalDeviceExternalSemaphoreProperties</a>, <a href="#vkGetPhysicalDeviceExternalSemaphorePropertiesKHR">vkGetPhysicalDeviceExternalSemaphorePropertiesKHR</a></p>
</div>
</div>
<div class="sect3">
<h4 id="_document_notes_613">Document Notes</h4>
<div class="paragraph">
<p>For more information, see the Vulkan Specification at URL</p>
</div>
<div class="paragraph">
<p><a href="https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VkPhysicalDeviceExternalSemaphoreInfo" class="bare">https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VkPhysicalDeviceExternalSemaphoreInfo</a></p>
</div>
<div class="paragraph">
<p>This page is extracted from the Vulkan Specification.
Fixes and changes should be made to the Specification, not directly.</p>
</div>
<div style="page-break-after: always;"></div>
</div>
</div>
<div class="sect2">
<h3 id="_vkphysicaldevicefeatures3">VkPhysicalDeviceFeatures(3)</h3>
<div class="sect3">
<h4 id="_name_614">Name</h4>
<div class="paragraph">
<p>VkPhysicalDeviceFeatures - Structure describing the fine-grained features that can be supported by an implementation</p>
</div>
</div>
<div class="sect3">
<h4 id="_c_specification_614">C Specification</h4>
<div class="paragraph">
<p>The <code>VkPhysicalDeviceFeatures</code> structure is defined as:</p>
</div>
<div id="VkPhysicalDeviceFeatures" class="listingblock">
<div class="content">
<pre class="highlight"><code class="language-c++" data-lang="c++">typedef struct VkPhysicalDeviceFeatures {
    VkBool32    robustBufferAccess;
    VkBool32    fullDrawIndexUint32;
    VkBool32    imageCubeArray;
    VkBool32    independentBlend;
    VkBool32    geometryShader;
    VkBool32    tessellationShader;
    VkBool32    sampleRateShading;
    VkBool32    dualSrcBlend;
    VkBool32    logicOp;
    VkBool32    multiDrawIndirect;
    VkBool32    drawIndirectFirstInstance;
    VkBool32    depthClamp;
    VkBool32    depthBiasClamp;
    VkBool32    fillModeNonSolid;
    VkBool32    depthBounds;
    VkBool32    wideLines;
    VkBool32    largePoints;
    VkBool32    alphaToOne;
    VkBool32    multiViewport;
    VkBool32    samplerAnisotropy;
    VkBool32    textureCompressionETC2;
    VkBool32    textureCompressionASTC_LDR;
    VkBool32    textureCompressionBC;
    VkBool32    occlusionQueryPrecise;
    VkBool32    pipelineStatisticsQuery;
    VkBool32    vertexPipelineStoresAndAtomics;
    VkBool32    fragmentStoresAndAtomics;
    VkBool32    shaderTessellationAndGeometryPointSize;
    VkBool32    shaderImageGatherExtended;
    VkBool32    shaderStorageImageExtendedFormats;
    VkBool32    shaderStorageImageMultisample;
    VkBool32    shaderStorageImageReadWithoutFormat;
    VkBool32    shaderStorageImageWriteWithoutFormat;
    VkBool32    shaderUniformBufferArrayDynamicIndexing;
    VkBool32    shaderSampledImageArrayDynamicIndexing;
    VkBool32    shaderStorageBufferArrayDynamicIndexing;
    VkBool32    shaderStorageImageArrayDynamicIndexing;
    VkBool32    shaderClipDistance;
    VkBool32    shaderCullDistance;
    VkBool32    shaderFloat64;
    VkBool32    shaderInt64;
    VkBool32    shaderInt16;
    VkBool32    shaderResourceResidency;
    VkBool32    shaderResourceMinLod;
    VkBool32    sparseBinding;
    VkBool32    sparseResidencyBuffer;
    VkBool32    sparseResidencyImage2D;
    VkBool32    sparseResidencyImage3D;
    VkBool32    sparseResidency2Samples;
    VkBool32    sparseResidency4Samples;
    VkBool32    sparseResidency8Samples;
    VkBool32    sparseResidency16Samples;
    VkBool32    sparseResidencyAliased;
    VkBool32    variableMultisampleRate;
    VkBool32    inheritedQueries;
} VkPhysicalDeviceFeatures;</code></pre>
</div>
</div>
</div>
<div class="sect3">
<h4 id="_members_251">Members</h4>
<div class="paragraph">
<p>The members of the <code>VkPhysicalDeviceFeatures</code> structure describe the
following features:</p>
</div>
</div>
<div class="sect3">
<h4 id="_description_614">Description</h4>
<div class="ulist">
<ul>
<li>
<p><a id="features-robustBufferAccess"></a> <code>robustBufferAccess</code> specifies that
accesses to buffers are bounds-checked against the range of the buffer
descriptor (as determined by <code>VkDescriptorBufferInfo</code>::<code>range</code>,
<code>VkBufferViewCreateInfo</code>::<code>range</code>, or the size of the buffer).
Out of bounds accesses <strong class="purple">must</strong> not cause application termination, and the
effects of shader loads, stores, and atomics <strong class="purple">must</strong> conform to an
implementation-dependent behavior as described below.</p>
<div class="ulist">
<ul>
<li>
<p>A buffer access is considered to be out of bounds if any of the
following are true:</p>
<div class="ulist">
<ul>
<li>
<p>The pointer was formed by <code>OpImageTexelPointer</code> and the coordinate
is less than zero or greater than or equal to the number of whole
elements in the bound range.</p>
</li>
<li>
<p>The pointer was not formed by <code>OpImageTexelPointer</code> and the object
pointed to is not wholly contained within the bound range.
This includes accesses performed via <em>variable pointers</em> where the
buffer descriptor being accessed cannot be statically determined.
Uninitialized pointers and pointers equal to <code>OpConstantNull</code> are
treated as pointing to a zero-sized object, so all accesses through
such pointers are considered to be out of bounds.
Buffer accesses through buffer device addresses are not
bounds-checked.
If the
<a href="vkspec.html#features-cooperativeMatrixRobustBufferAccess"><code>cooperativeMatrixRobustBufferAccess</code></a>
feature is not enabled, then accesses using
<code>OpCooperativeMatrixLoadNV</code> and <code>OpCooperativeMatrixStoreNV</code>
<strong class="purple">may</strong> not be bounds-checked.</p>
<div class="admonitionblock note">
<table>
<tr>
<td class="icon">
<i class="fa icon-note" title="Note"></i>
</td>
<td class="content">
<div class="title">Note</div>
<div class="paragraph">
<p>If a SPIR-V <code>OpLoad</code> instruction loads a structure and the tail end of
the structure is out of bounds, then all members of the structure are
considered out of bounds even if the members at the end are not statically
used.</p>
</div>
</td>
</tr>
</table>
</div>
</li>
<li>
<p>If any buffer access in a given SPIR-V block is determined to be out
of bounds, then any other access of the same type (load, store, or
atomic) in the same SPIR-V block that accesses an address less than 16
bytes away from the out of bounds address <strong class="purple">may</strong> also be considered out
of bounds.</p>
</li>
</ul>
</div>
</li>
<li>
<p>Out-of-bounds buffer loads will return any of the following values:</p>
<div class="ulist">
<ul>
<li>
<p>Values from anywhere within the memory range(s) bound to the buffer
(possibly including bytes of memory past the end of the buffer, up to
the end of the bound range).</p>
</li>
<li>
<p>Zero values, or <span class="eq">(0,0,0,x)</span> vectors for vector reads where x is a
valid value represented in the type of the vector components and <strong class="purple">may</strong>
be any of:</p>
<div class="ulist">
<ul>
<li>
<p>0, 1, or the maximum representable positive integer value, for signed
or unsigned integer components</p>
</li>
<li>
<p>0.0 or 1.0, for floating-point components</p>
</li>
</ul>
</div>
</li>
</ul>
</div>
</li>
<li>
<p>Out-of-bounds writes <strong class="purple">may</strong> modify values within the memory range(s)
bound to the buffer, but <strong class="purple">must</strong> not modify any other memory.</p>
</li>
<li>
<p>Out-of-bounds atomics <strong class="purple">may</strong> modify values within the memory range(s)
bound to the buffer, but <strong class="purple">must</strong> not modify any other memory, and return
an undefined value.</p>
</li>
<li>
<p>Vertex input attributes are considered out of bounds if the offset of
the attribute in the bound vertex buffer range plus the size of the
attribute is greater than either:</p>
<div class="ulist">
<ul>
<li>
<p><code>vertexBufferRangeSize</code>, if <span class="eq"><code>bindingStride</code> == 0</span>; or</p>
</li>
<li>
<p><span class="eq">(<code>vertexBufferRangeSize</code> - (<code>vertexBufferRangeSize</code> %
<code>bindingStride</code>))</span></p>
</li>
</ul>
</div>
<div class="paragraph">
<p>where <code>vertexBufferRangeSize</code> is the byte size of the memory range bound
to the vertex buffer binding and <code>bindingStride</code> is the byte stride of
the corresponding vertex input binding.
Further, if any vertex input attribute using a specific vertex input binding
is out of bounds, then all vertex input attributes using that vertex input
binding for that vertex shader invocation are considered out of bounds.</p>
</div>
<div class="ulist">
<ul>
<li>
<p>If a vertex input attribute is out of bounds, it will be assigned one
of the following values:</p>
<div class="ulist">
<ul>
<li>
<p>Values from anywhere within the memory range(s) bound to the buffer,
converted according to the format of the attribute.</p>
</li>
<li>
<p>Zero values, format converted according to the format of the
attribute.</p>
</li>
<li>
<p>Zero values, or <span class="eq">(0,0,0,x)</span> vectors, as described above.</p>
</li>
</ul>
</div>
</li>
</ul>
</div>
</li>
<li>
<p>If <code>robustBufferAccess</code> is not enabled, applications <strong class="purple">must</strong> not
perform out of bounds accesses.</p>
</li>
</ul>
</div>
</li>
<li>
<p><a id="features-fullDrawIndexUint32"></a> <code>fullDrawIndexUint32</code> specifies the
full 32-bit range of indices is supported for indexed draw calls when
using a <a href="#VkIndexType">VkIndexType</a> of <code>VK_INDEX_TYPE_UINT32</code>.
<code>maxDrawIndexedIndexValue</code> is the maximum index value that <strong class="purple">may</strong> be
used (aside from the primitive restart index, which is always 2<sup>32</sup>-1
when the <a href="#VkIndexType">VkIndexType</a> is <code>VK_INDEX_TYPE_UINT32</code>).
If this feature is supported, <code>maxDrawIndexedIndexValue</code> <strong class="purple">must</strong> be
2<sup>32</sup>-1; otherwise it <strong class="purple">must</strong> be no smaller than 2<sup>24</sup>-1.
See <a href="vkspec.html#limits-maxDrawIndexedIndexValue">maxDrawIndexedIndexValue</a>.</p>
</li>
<li>
<p><a id="features-imageCubeArray"></a> <code>imageCubeArray</code> specifies whether image
views with a <a href="#VkImageViewType">VkImageViewType</a> of
<code>VK_IMAGE_VIEW_TYPE_CUBE_ARRAY</code> <strong class="purple">can</strong> be created, and that the
corresponding <code>SampledCubeArray</code> and <code>ImageCubeArray</code> SPIR-V
capabilities <strong class="purple">can</strong> be used in shader code.</p>
</li>
<li>
<p><a id="features-independentBlend"></a> <code>independentBlend</code> specifies whether
the <code>VkPipelineColorBlendAttachmentState</code> settings are controlled
independently per-attachment.
If this feature is not enabled, the
<code>VkPipelineColorBlendAttachmentState</code> settings for all color
attachments <strong class="purple">must</strong> be identical.
Otherwise, a different <code>VkPipelineColorBlendAttachmentState</code> <strong class="purple">can</strong> be
provided for each bound color attachment.</p>
</li>
<li>
<p><a id="features-geometryShader"></a> <code>geometryShader</code> specifies whether
geometry shaders are supported.
If this feature is not enabled, the <code>VK_SHADER_STAGE_GEOMETRY_BIT</code>
and <code>VK_PIPELINE_STAGE_GEOMETRY_SHADER_BIT</code> enum values <strong class="purple">must</strong> not be
used.
This also specifies whether shader modules <strong class="purple">can</strong> declare the
<code>Geometry</code> capability.</p>
</li>
<li>
<p><a id="features-tessellationShader"></a> <code>tessellationShader</code> specifies
whether tessellation control and evaluation shaders are supported.
If this feature is not enabled, the
<code>VK_SHADER_STAGE_TESSELLATION_CONTROL_BIT</code>,
<code>VK_SHADER_STAGE_TESSELLATION_EVALUATION_BIT</code>,
<code>VK_PIPELINE_STAGE_TESSELLATION_CONTROL_SHADER_BIT</code>,
<code>VK_PIPELINE_STAGE_TESSELLATION_EVALUATION_SHADER_BIT</code>, and
<code>VK_STRUCTURE_TYPE_PIPELINE_TESSELLATION_STATE_CREATE_INFO</code> enum
values <strong class="purple">must</strong> not be used.
This also specifies whether shader modules <strong class="purple">can</strong> declare the
<code>Tessellation</code> capability.</p>
</li>
<li>
<p><a id="features-sampleRateShading"></a> <code>sampleRateShading</code> specifies whether
<a href="vkspec.html#primsrast-sampleshading">Sample Shading</a> and multisample interpolation
are supported.
If this feature is not enabled, the <code>sampleShadingEnable</code> member of
the <code>VkPipelineMultisampleStateCreateInfo</code> structure <strong class="purple">must</strong> be set to
<code>VK_FALSE</code> and the <code>minSampleShading</code> member is ignored.
This also specifies whether shader modules <strong class="purple">can</strong> declare the
<code>SampleRateShading</code> capability.</p>
</li>
<li>
<p><a id="features-dualSrcBlend"></a> <code>dualSrcBlend</code> specifies whether blend
operations which take two sources are supported.
If this feature is not enabled, the <code>VK_BLEND_FACTOR_SRC1_COLOR</code>,
<code>VK_BLEND_FACTOR_ONE_MINUS_SRC1_COLOR</code>,
<code>VK_BLEND_FACTOR_SRC1_ALPHA</code>, and
<code>VK_BLEND_FACTOR_ONE_MINUS_SRC1_ALPHA</code> enum values <strong class="purple">must</strong> not be used
as source or destination blending factors.
See <a href="vkspec.html#framebuffer-dsb" class="bare">html/vkspec.html#framebuffer-dsb</a>.</p>
</li>
<li>
<p><a id="features-logicOp"></a> <code>logicOp</code> specifies whether logic operations
are supported.
If this feature is not enabled, the <code>logicOpEnable</code> member of the
<code>VkPipelineColorBlendStateCreateInfo</code> structure <strong class="purple">must</strong> be set to
<code>VK_FALSE</code>, and the <code>logicOp</code> member is ignored.</p>
</li>
<li>
<p><a id="features-multiDrawIndirect"></a> <code>multiDrawIndirect</code> specifies whether
multiple draw indirect is supported.
If this feature is not enabled, the <code>drawCount</code> parameter to the
<code>vkCmdDrawIndirect</code> and <code>vkCmdDrawIndexedIndirect</code> commands
<strong class="purple">must</strong> be 0 or 1.
The <code>maxDrawIndirectCount</code> member of the
<code>VkPhysicalDeviceLimits</code> structure <strong class="purple">must</strong> also be 1 if this feature
is not supported.
See <a href="vkspec.html#limits-maxDrawIndirectCount">maxDrawIndirectCount</a>.</p>
</li>
<li>
<p><a id="features-drawIndirectFirstInstance"></a> <code>drawIndirectFirstInstance</code>
specifies whether indirect draw calls support the <code>firstInstance</code>
parameter.
If this feature is not enabled, the <code>firstInstance</code> member of all
<code>VkDrawIndirectCommand</code> and <code>VkDrawIndexedIndirectCommand</code>
structures that are provided to the <code>vkCmdDrawIndirect</code> and
<code>vkCmdDrawIndexedIndirect</code> commands <strong class="purple">must</strong> be 0.</p>
</li>
<li>
<p><a id="features-depthClamp"></a> <code>depthClamp</code> specifies whether depth
clamping is supported.
If this feature is not enabled, the <code>depthClampEnable</code> member of the
<code>VkPipelineRasterizationStateCreateInfo</code> structure <strong class="purple">must</strong> be set to
<code>VK_FALSE</code>.
Otherwise, setting <code>depthClampEnable</code> to <code>VK_TRUE</code> will enable
depth clamping.</p>
</li>
<li>
<p><a id="features-depthBiasClamp"></a> <code>depthBiasClamp</code> specifies whether depth
bias clamping is supported.
If this feature is not enabled, the <code>depthBiasClamp</code> member of the
<code>VkPipelineRasterizationStateCreateInfo</code> structure <strong class="purple">must</strong> be set to
0.0 unless the <code>VK_DYNAMIC_STATE_DEPTH_BIAS</code> dynamic state is
enabled, and the <code>depthBiasClamp</code> parameter to
<code>vkCmdSetDepthBias</code> <strong class="purple">must</strong> be set to 0.0.</p>
</li>
<li>
<p><a id="features-fillModeNonSolid"></a> <code>fillModeNonSolid</code> specifies whether
point and wireframe fill modes are supported.
If this feature is not enabled, the <code>VK_POLYGON_MODE_POINT</code> and
<code>VK_POLYGON_MODE_LINE</code> enum values <strong class="purple">must</strong> not be used.</p>
</li>
<li>
<p><a id="features-depthBounds"></a> <code>depthBounds</code> specifies whether depth
bounds tests are supported.
If this feature is not enabled, the <code>depthBoundsTestEnable</code> member
of the <code>VkPipelineDepthStencilStateCreateInfo</code> structure <strong class="purple">must</strong> be
set to <code>VK_FALSE</code>.
When <code>depthBoundsTestEnable</code> is set to <code>VK_FALSE</code>, the
<code>minDepthBounds</code> and <code>maxDepthBounds</code> members of the
<code>VkPipelineDepthStencilStateCreateInfo</code> structure are ignored.</p>
</li>
<li>
<p><a id="features-wideLines"></a> <code>wideLines</code> specifies whether lines with
width other than 1.0 are supported.
If this feature is not enabled, the <code>lineWidth</code> member of the
<code>VkPipelineRasterizationStateCreateInfo</code> structure <strong class="purple">must</strong> be set to
1.0 unless the <code>VK_DYNAMIC_STATE_LINE_WIDTH</code> dynamic state is
enabled, and the <code>lineWidth</code> parameter to <code>vkCmdSetLineWidth</code>
<strong class="purple">must</strong> be set to 1.0.
When this feature is supported, the range and granularity of supported
line widths are indicated by the <code>lineWidthRange</code> and
<code>lineWidthGranularity</code> members of the <code>VkPhysicalDeviceLimits</code>
structure, respectively.</p>
</li>
<li>
<p><a id="features-largePoints"></a> <code>largePoints</code> specifies whether points with
size greater than 1.0 are supported.
If this feature is not enabled, only a point size of 1.0 written by a
shader is supported.
The range and granularity of supported point sizes are indicated by the
<code>pointSizeRange</code> and <code>pointSizeGranularity</code> members of the
<code>VkPhysicalDeviceLimits</code> structure, respectively.</p>
</li>
<li>
<p><a id="features-alphaToOne"></a> <code>alphaToOne</code> specifies whether the
implementation is able to replace the alpha value of the color fragment
output from the fragment shader with the maximum representable alpha
value for fixed-point colors or 1.0 for floating-point colors.
If this feature is not enabled, then the <code>alphaToOneEnable</code> member
of the <code>VkPipelineMultisampleStateCreateInfo</code> structure <strong class="purple">must</strong> be set
to <code>VK_FALSE</code>.
Otherwise setting <code>alphaToOneEnable</code> to <code>VK_TRUE</code> will enable
alpha-to-one behavior.</p>
</li>
<li>
<p><a id="features-multiViewport"></a> <code>multiViewport</code> specifies whether more
than one viewport is supported.
If this feature is not enabled:</p>
<div class="ulist">
<ul>
<li>
<p>The <code>viewportCount</code> and <code>scissorCount</code> members of the
<code>VkPipelineViewportStateCreateInfo</code> structure <strong class="purple">must</strong> be set to 1.</p>
</li>
<li>
<p>The <code>firstViewport</code> and <code>viewportCount</code> parameters to the
<code>vkCmdSetViewport</code> command <strong class="purple">must</strong> be set to 0 and 1, respectively.</p>
</li>
<li>
<p>The <code>firstScissor</code> and <code>scissorCount</code> parameters to the
<code>vkCmdSetScissor</code> command <strong class="purple">must</strong> be set to 0 and 1, respectively.</p>
</li>
<li>
<p>The <code>exclusiveScissorCount</code> member of the
<code>VkPipelineViewportExclusiveScissorStateCreateInfoNV</code> structure
<strong class="purple">must</strong> be set to 0 or 1.</p>
</li>
<li>
<p>The <code>firstExclusiveScissor</code> and <code>exclusiveScissorCount</code>
parameters to the <code>vkCmdSetExclusiveScissorNV</code> command <strong class="purple">must</strong> be set
to 0 and 1, respectively.</p>
</li>
</ul>
</div>
</li>
<li>
<p><a id="features-samplerAnisotropy"></a> <code>samplerAnisotropy</code> specifies whether
anisotropic filtering is supported.
If this feature is not enabled, the <code>anisotropyEnable</code> member of the
<code>VkSamplerCreateInfo</code> structure <strong class="purple">must</strong> be <code>VK_FALSE</code>.</p>
</li>
<li>
<p><a id="features-textureCompressionETC2"></a> <code>textureCompressionETC2</code>
specifies whether all of the ETC2 and EAC compressed texture formats are
supported.
If this feature is enabled, then the
<code>VK_FORMAT_FEATURE_SAMPLED_IMAGE_BIT</code>,
<code>VK_FORMAT_FEATURE_BLIT_SRC_BIT</code> and
<code>VK_FORMAT_FEATURE_SAMPLED_IMAGE_FILTER_LINEAR_BIT</code> features <strong class="purple">must</strong>
be supported in <code>optimalTilingFeatures</code> for the following formats:</p>
<div class="ulist">
<ul>
<li>
<p><code>VK_FORMAT_ETC2_R8G8B8_UNORM_BLOCK</code></p>
</li>
<li>
<p><code>VK_FORMAT_ETC2_R8G8B8_SRGB_BLOCK</code></p>
</li>
<li>
<p><code>VK_FORMAT_ETC2_R8G8B8A1_UNORM_BLOCK</code></p>
</li>
<li>
<p><code>VK_FORMAT_ETC2_R8G8B8A1_SRGB_BLOCK</code></p>
</li>
<li>
<p><code>VK_FORMAT_ETC2_R8G8B8A8_UNORM_BLOCK</code></p>
</li>
<li>
<p><code>VK_FORMAT_ETC2_R8G8B8A8_SRGB_BLOCK</code></p>
</li>
<li>
<p><code>VK_FORMAT_EAC_R11_UNORM_BLOCK</code></p>
</li>
<li>
<p><code>VK_FORMAT_EAC_R11_SNORM_BLOCK</code></p>
</li>
<li>
<p><code>VK_FORMAT_EAC_R11G11_UNORM_BLOCK</code></p>
</li>
<li>
<p><code>VK_FORMAT_EAC_R11G11_SNORM_BLOCK</code></p>
</li>
</ul>
</div>
<div class="paragraph">
<p>To query for additional properties, or if the feature is not enabled,
<a href="#vkGetPhysicalDeviceFormatProperties">vkGetPhysicalDeviceFormatProperties</a> and
<a href="#vkGetPhysicalDeviceImageFormatProperties">vkGetPhysicalDeviceImageFormatProperties</a> <strong class="purple">can</strong> be used to check for
supported properties of individual formats as normal.</p>
</div>
</li>
<li>
<p><a id="features-textureCompressionASTC_LDR"></a> <code>textureCompressionASTC_LDR</code>
specifies whether all of the ASTC LDR compressed texture formats are
supported.
If this feature is enabled, then the
<code>VK_FORMAT_FEATURE_SAMPLED_IMAGE_BIT</code>,
<code>VK_FORMAT_FEATURE_BLIT_SRC_BIT</code> and
<code>VK_FORMAT_FEATURE_SAMPLED_IMAGE_FILTER_LINEAR_BIT</code> features <strong class="purple">must</strong>
be supported in <code>optimalTilingFeatures</code> for the following formats:</p>
<div class="ulist">
<ul>
<li>
<p><code>VK_FORMAT_ASTC_4x4_UNORM_BLOCK</code></p>
</li>
<li>
<p><code>VK_FORMAT_ASTC_4x4_SRGB_BLOCK</code></p>
</li>
<li>
<p><code>VK_FORMAT_ASTC_5x4_UNORM_BLOCK</code></p>
</li>
<li>
<p><code>VK_FORMAT_ASTC_5x4_SRGB_BLOCK</code></p>
</li>
<li>
<p><code>VK_FORMAT_ASTC_5x5_UNORM_BLOCK</code></p>
</li>
<li>
<p><code>VK_FORMAT_ASTC_5x5_SRGB_BLOCK</code></p>
</li>
<li>
<p><code>VK_FORMAT_ASTC_6x5_UNORM_BLOCK</code></p>
</li>
<li>
<p><code>VK_FORMAT_ASTC_6x5_SRGB_BLOCK</code></p>
</li>
<li>
<p><code>VK_FORMAT_ASTC_6x6_UNORM_BLOCK</code></p>
</li>
<li>
<p><code>VK_FORMAT_ASTC_6x6_SRGB_BLOCK</code></p>
</li>
<li>
<p><code>VK_FORMAT_ASTC_8x5_UNORM_BLOCK</code></p>
</li>
<li>
<p><code>VK_FORMAT_ASTC_8x5_SRGB_BLOCK</code></p>
</li>
<li>
<p><code>VK_FORMAT_ASTC_8x6_UNORM_BLOCK</code></p>
</li>
<li>
<p><code>VK_FORMAT_ASTC_8x6_SRGB_BLOCK</code></p>
</li>
<li>
<p><code>VK_FORMAT_ASTC_8x8_UNORM_BLOCK</code></p>
</li>
<li>
<p><code>VK_FORMAT_ASTC_8x8_SRGB_BLOCK</code></p>
</li>
<li>
<p><code>VK_FORMAT_ASTC_10x5_UNORM_BLOCK</code></p>
</li>
<li>
<p><code>VK_FORMAT_ASTC_10x5_SRGB_BLOCK</code></p>
</li>
<li>
<p><code>VK_FORMAT_ASTC_10x6_UNORM_BLOCK</code></p>
</li>
<li>
<p><code>VK_FORMAT_ASTC_10x6_SRGB_BLOCK</code></p>
</li>
<li>
<p><code>VK_FORMAT_ASTC_10x8_UNORM_BLOCK</code></p>
</li>
<li>
<p><code>VK_FORMAT_ASTC_10x8_SRGB_BLOCK</code></p>
</li>
<li>
<p><code>VK_FORMAT_ASTC_10x10_UNORM_BLOCK</code></p>
</li>
<li>
<p><code>VK_FORMAT_ASTC_10x10_SRGB_BLOCK</code></p>
</li>
<li>
<p><code>VK_FORMAT_ASTC_12x10_UNORM_BLOCK</code></p>
</li>
<li>
<p><code>VK_FORMAT_ASTC_12x10_SRGB_BLOCK</code></p>
</li>
<li>
<p><code>VK_FORMAT_ASTC_12x12_UNORM_BLOCK</code></p>
</li>
<li>
<p><code>VK_FORMAT_ASTC_12x12_SRGB_BLOCK</code></p>
</li>
</ul>
</div>
<div class="paragraph">
<p>To query for additional properties, or if the feature is not enabled,
<a href="#vkGetPhysicalDeviceFormatProperties">vkGetPhysicalDeviceFormatProperties</a> and
<a href="#vkGetPhysicalDeviceImageFormatProperties">vkGetPhysicalDeviceImageFormatProperties</a> <strong class="purple">can</strong> be used to check for
supported properties of individual formats as normal.</p>
</div>
</li>
<li>
<p><a id="features-textureCompressionBC"></a> <code>textureCompressionBC</code> specifies
whether all of the BC compressed texture formats are supported.
If this feature is enabled, then the
<code>VK_FORMAT_FEATURE_SAMPLED_IMAGE_BIT</code>,
<code>VK_FORMAT_FEATURE_BLIT_SRC_BIT</code> and
<code>VK_FORMAT_FEATURE_SAMPLED_IMAGE_FILTER_LINEAR_BIT</code> features <strong class="purple">must</strong>
be supported in <code>optimalTilingFeatures</code> for the following formats:</p>
<div class="ulist">
<ul>
<li>
<p><code>VK_FORMAT_BC1_RGB_UNORM_BLOCK</code></p>
</li>
<li>
<p><code>VK_FORMAT_BC1_RGB_SRGB_BLOCK</code></p>
</li>
<li>
<p><code>VK_FORMAT_BC1_RGBA_UNORM_BLOCK</code></p>
</li>
<li>
<p><code>VK_FORMAT_BC1_RGBA_SRGB_BLOCK</code></p>
</li>
<li>
<p><code>VK_FORMAT_BC2_UNORM_BLOCK</code></p>
</li>
<li>
<p><code>VK_FORMAT_BC2_SRGB_BLOCK</code></p>
</li>
<li>
<p><code>VK_FORMAT_BC3_UNORM_BLOCK</code></p>
</li>
<li>
<p><code>VK_FORMAT_BC3_SRGB_BLOCK</code></p>
</li>
<li>
<p><code>VK_FORMAT_BC4_UNORM_BLOCK</code></p>
</li>
<li>
<p><code>VK_FORMAT_BC4_SNORM_BLOCK</code></p>
</li>
<li>
<p><code>VK_FORMAT_BC5_UNORM_BLOCK</code></p>
</li>
<li>
<p><code>VK_FORMAT_BC5_SNORM_BLOCK</code></p>
</li>
<li>
<p><code>VK_FORMAT_BC6H_UFLOAT_BLOCK</code></p>
</li>
<li>
<p><code>VK_FORMAT_BC6H_SFLOAT_BLOCK</code></p>
</li>
<li>
<p><code>VK_FORMAT_BC7_UNORM_BLOCK</code></p>
</li>
<li>
<p><code>VK_FORMAT_BC7_SRGB_BLOCK</code></p>
</li>
</ul>
</div>
<div class="paragraph">
<p>To query for additional properties, or if the feature is not enabled,
<a href="#vkGetPhysicalDeviceFormatProperties">vkGetPhysicalDeviceFormatProperties</a> and
<a href="#vkGetPhysicalDeviceImageFormatProperties">vkGetPhysicalDeviceImageFormatProperties</a> <strong class="purple">can</strong> be used to check for
supported properties of individual formats as normal.</p>
</div>
</li>
<li>
<p><a id="features-occlusionQueryPrecise"></a> <code>occlusionQueryPrecise</code> specifies
whether occlusion queries returning actual sample counts are supported.
Occlusion queries are created in a <code>VkQueryPool</code> by specifying the
<code>queryType</code> of <code>VK_QUERY_TYPE_OCCLUSION</code> in the
<code>VkQueryPoolCreateInfo</code> structure which is passed to
<code>vkCreateQueryPool</code>.
If this feature is enabled, queries of this type <strong class="purple">can</strong> enable
<code>VK_QUERY_CONTROL_PRECISE_BIT</code> in the <code>flags</code> parameter to
<code>vkCmdBeginQuery</code>.
If this feature is not supported, the implementation supports only
boolean occlusion queries.
When any samples are passed, boolean queries will return a non-zero
result value, otherwise a result value of zero is returned.
When this feature is enabled and <code>VK_QUERY_CONTROL_PRECISE_BIT</code> is
set, occlusion queries will report the actual number of samples passed.</p>
</li>
<li>
<p><a id="features-pipelineStatisticsQuery"></a> <code>pipelineStatisticsQuery</code>
specifies whether the pipeline statistics queries are supported.
If this feature is not enabled, queries of type
<code>VK_QUERY_TYPE_PIPELINE_STATISTICS</code> <strong class="purple">cannot</strong> be created, and none of
the <a href="#VkQueryPipelineStatisticFlagBits">VkQueryPipelineStatisticFlagBits</a> bits <strong class="purple">can</strong> be set in the
<code>pipelineStatistics</code> member of the <code>VkQueryPoolCreateInfo</code>
structure.</p>
</li>
<li>
<p><a id="features-vertexPipelineStoresAndAtomics"></a>
<code>vertexPipelineStoresAndAtomics</code> specifies whether storage buffers
and images support stores and atomic operations in the vertex,
tessellation, and geometry shader stages.
If this feature is not enabled, all storage image, storage texel
buffers, and storage buffer variables used by these stages in shader
modules <strong class="purple">must</strong> be decorated with the <code>NonWritable</code> decoration (or the
<code>readonly</code> memory qualifier in GLSL).</p>
</li>
<li>
<p><a id="features-fragmentStoresAndAtomics"></a> <code>fragmentStoresAndAtomics</code>
specifies whether storage buffers and images support stores and atomic
operations in the fragment shader stage.
If this feature is not enabled, all storage image, storage texel
buffers, and storage buffer variables used by the fragment stage in
shader modules <strong class="purple">must</strong> be decorated with the <code>NonWritable</code> decoration
(or the <code>readonly</code> memory qualifier in GLSL).</p>
</li>
<li>
<p><a id="features-shaderTessellationAndGeometryPointSize"></a>
<code>shaderTessellationAndGeometryPointSize</code> specifies whether the
<code>PointSize</code> built-in decoration is available in the tessellation
control, tessellation evaluation, and geometry shader stages.
If this feature is not enabled, members decorated with the
<code>PointSize</code> built-in decoration <strong class="purple">must</strong> not be read from or written to
and all points written from a tessellation or geometry shader will have
a size of 1.0.
This also specifies whether shader modules <strong class="purple">can</strong> declare the
<code>TessellationPointSize</code> capability for tessellation control and
evaluation shaders, or if the shader modules <strong class="purple">can</strong> declare the
<code>GeometryPointSize</code> capability for geometry shaders.
An implementation supporting this feature <strong class="purple">must</strong> also support one or both
of the <a href="vkspec.html#features-tessellationShader"><code>tessellationShader</code></a> or
<a href="vkspec.html#features-geometryShader"><code>geometryShader</code></a> features.</p>
</li>
<li>
<p><a id="features-shaderImageGatherExtended"></a> <code>shaderImageGatherExtended</code>
specifies whether the extended set of image gather instructions are
available in shader code.
If this feature is not enabled, the <code>OpImage</code>*<code>Gather</code>
instructions do not support the <code>Offset</code> and <code>ConstOffsets</code>
operands.
This also specifies whether shader modules <strong class="purple">can</strong> declare the
<code>ImageGatherExtended</code> capability.</p>
</li>
<li>
<p><a id="features-shaderStorageImageExtendedFormats"></a>
<code>shaderStorageImageExtendedFormats</code> specifies whether all the
extended storage image formats are available in shader code.
If this feature is enabled then the
<code>VK_FORMAT_FEATURE_STORAGE_IMAGE_BIT</code> feature <strong class="purple">must</strong> be supported in
<code>optimalTilingFeatures</code> for all of the extended formats.
To query for additional properties, or if the feature is not enabled,
<a href="#vkGetPhysicalDeviceFormatProperties">vkGetPhysicalDeviceFormatProperties</a> and
<a href="#vkGetPhysicalDeviceImageFormatProperties">vkGetPhysicalDeviceImageFormatProperties</a> <strong class="purple">can</strong> be used to check for
supported properties of individual formats as normal.</p>
</li>
<li>
<p><a id="features-shaderStorageImageMultisample"></a>
<code>shaderStorageImageMultisample</code> specifies whether multisampled
storage images are supported.
If this feature is not enabled, images that are created with a
<code>usage</code> that includes <code>VK_IMAGE_USAGE_STORAGE_BIT</code> <strong class="purple">must</strong> be
created with <code>samples</code> equal to <code>VK_SAMPLE_COUNT_1_BIT</code>.
This also specifies whether shader modules <strong class="purple">can</strong> declare the
<code>StorageImageMultisample</code> capability.</p>
</li>
<li>
<p><a id="features-shaderStorageImageReadWithoutFormat"></a>
<code>shaderStorageImageReadWithoutFormat</code> specifies whether storage
images require a format qualifier to be specified when reading from
storage images.
If this feature is not enabled, the <code>OpImageRead</code> instruction <strong class="purple">must</strong>
not have an <code>OpTypeImage</code> of <code>Unknown</code>.
This also specifies whether shader modules <strong class="purple">can</strong> declare the
<code>StorageImageReadWithoutFormat</code> capability.</p>
</li>
<li>
<p><a id="features-shaderStorageImageWriteWithoutFormat"></a>
<code>shaderStorageImageWriteWithoutFormat</code> specifies whether storage
images require a format qualifier to be specified when writing to
storage images.
If this feature is not enabled, the <code>OpImageWrite</code> instruction <strong class="purple">must</strong>
not have an <code>OpTypeImage</code> of <code>Unknown</code>.
This also specifies whether shader modules <strong class="purple">can</strong> declare the
<code>StorageImageWriteWithoutFormat</code> capability.</p>
</li>
<li>
<p><a id="features-shaderUniformBufferArrayDynamicIndexing"></a>
<code>shaderUniformBufferArrayDynamicIndexing</code> specifies whether arrays
of uniform buffers <strong class="purple">can</strong> be indexed by <em>dynamically uniform</em> integer
expressions in shader code.
If this feature is not enabled, resources with a descriptor type of
<code>VK_DESCRIPTOR_TYPE_UNIFORM_BUFFER</code> or
<code>VK_DESCRIPTOR_TYPE_UNIFORM_BUFFER_DYNAMIC</code> <strong class="purple">must</strong> be indexed only by
constant integral expressions when aggregated into arrays in shader
code.
This also specifies whether shader modules <strong class="purple">can</strong> declare the
<code>UniformBufferArrayDynamicIndexing</code> capability.</p>
</li>
<li>
<p><a id="features-shaderSampledImageArrayDynamicIndexing"></a>
<code>shaderSampledImageArrayDynamicIndexing</code> specifies whether arrays of
samplers or sampled images <strong class="purple">can</strong> be indexed by dynamically uniform
integer expressions in shader code.
If this feature is not enabled, resources with a descriptor type of
<code>VK_DESCRIPTOR_TYPE_SAMPLER</code>,
<code>VK_DESCRIPTOR_TYPE_COMBINED_IMAGE_SAMPLER</code>, or
<code>VK_DESCRIPTOR_TYPE_SAMPLED_IMAGE</code> <strong class="purple">must</strong> be indexed only by constant
integral expressions when aggregated into arrays in shader code.
This also specifies whether shader modules <strong class="purple">can</strong> declare the
<code>SampledImageArrayDynamicIndexing</code> capability.</p>
</li>
<li>
<p><a id="features-shaderStorageBufferArrayDynamicIndexing"></a>
<code>shaderStorageBufferArrayDynamicIndexing</code> specifies whether arrays
of storage buffers <strong class="purple">can</strong> be indexed by dynamically uniform integer
expressions in shader code.
If this feature is not enabled, resources with a descriptor type of
<code>VK_DESCRIPTOR_TYPE_STORAGE_BUFFER</code> or
<code>VK_DESCRIPTOR_TYPE_STORAGE_BUFFER_DYNAMIC</code> <strong class="purple">must</strong> be indexed only by
constant integral expressions when aggregated into arrays in shader
code.
This also specifies whether shader modules <strong class="purple">can</strong> declare the
<code>StorageBufferArrayDynamicIndexing</code> capability.</p>
</li>
<li>
<p><a id="features-shaderStorageImageArrayDynamicIndexing"></a>
<code>shaderStorageImageArrayDynamicIndexing</code> specifies whether arrays of
storage images <strong class="purple">can</strong> be indexed by dynamically uniform integer
expressions in shader code.
If this feature is not enabled, resources with a descriptor type of
<code>VK_DESCRIPTOR_TYPE_STORAGE_IMAGE</code> <strong class="purple">must</strong> be indexed only by constant
integral expressions when aggregated into arrays in shader code.
This also specifies whether shader modules <strong class="purple">can</strong> declare the
<code>StorageImageArrayDynamicIndexing</code> capability.</p>
</li>
<li>
<p><a id="features-shaderClipDistance"></a> <code>shaderClipDistance</code> specifies
whether clip distances are supported in shader code.
If this feature is not enabled, any members decorated with the
<code>ClipDistance</code> built-in decoration <strong class="purple">must</strong> not be read from or written
to in shader modules.
This also specifies whether shader modules <strong class="purple">can</strong> declare the
<code>ClipDistance</code> capability.</p>
</li>
<li>
<p><a id="features-shaderCullDistance"></a> <code>shaderCullDistance</code> specifies
whether cull distances are supported in shader code.
If this feature is not enabled, any members decorated with the
<code>CullDistance</code> built-in decoration <strong class="purple">must</strong> not be read from or written
to in shader modules.
This also specifies whether shader modules <strong class="purple">can</strong> declare the
<code>CullDistance</code> capability.</p>
</li>
<li>
<p><a id="features-shaderFloat64"></a> <code>shaderFloat64</code> specifies whether 64-bit
floats (doubles) are supported in shader code.
If this feature is not enabled, 64-bit floating-point types <strong class="purple">must</strong> not be
used in shader code.
This also specifies whether shader modules <strong class="purple">can</strong> declare the <code>Float64</code>
capability.</p>
</li>
<li>
<p><a id="features-shaderInt64"></a> <code>shaderInt64</code> specifies whether 64-bit
integers (signed and unsigned) are supported in shader code.
If this feature is not enabled, 64-bit integer types <strong class="purple">must</strong> not be used
in shader code.
This also specifies whether shader modules <strong class="purple">can</strong> declare the <code>Int64</code>
capability.</p>
</li>
<li>
<p><a id="features-shaderInt16"></a> <code>shaderInt16</code> specifies whether 16-bit
integers (signed and unsigned) are supported in shader code.
If this feature is not enabled, 16-bit integer types <strong class="purple">must</strong> not be used
in shader code.
This also specifies whether shader modules <strong class="purple">can</strong> declare the <code>Int16</code>
capability.</p>
</li>
<li>
<p><a id="features-shaderResourceResidency"></a> <code>shaderResourceResidency</code>
specifies whether image operations that return resource residency
information are supported in shader code.
If this feature is not enabled, the <code>OpImageSparse</code>* instructions
<strong class="purple">must</strong> not be used in shader code.
This also specifies whether shader modules <strong class="purple">can</strong> declare the
<code>SparseResidency</code> capability.
The feature requires at least one of the <code>sparseResidency*</code> features
to be supported.</p>
</li>
<li>
<p><a id="features-shaderResourceMinLod"></a> <code>shaderResourceMinLod</code> specifies
whether image operations that specify the minimum resource LOD are
supported in shader code.
If this feature is not enabled, the <code>MinLod</code> image operand <strong class="purple">must</strong> not
be used in shader code.
This also specifies whether shader modules <strong class="purple">can</strong> declare the <code>MinLod</code>
capability.</p>
</li>
<li>
<p><a id="features-sparseBinding"></a> <code>sparseBinding</code> specifies whether
resource memory <strong class="purple">can</strong> be managed at opaque sparse block level instead of
at the object level.
If this feature is not enabled, resource memory <strong class="purple">must</strong> be bound only on a
per-object basis using the <code>vkBindBufferMemory</code> and
<code>vkBindImageMemory</code> commands.
In this case, buffers and images <strong class="purple">must</strong> not be created with
<code>VK_BUFFER_CREATE_SPARSE_BINDING_BIT</code> and
<code>VK_IMAGE_CREATE_SPARSE_BINDING_BIT</code> set in the <code>flags</code> member
of the <code>VkBufferCreateInfo</code> and <code>VkImageCreateInfo</code> structures,
respectively.
Otherwise resource memory <strong class="purple">can</strong> be managed as described in
<a href="vkspec.html#sparsememory-sparseresourcefeatures">Sparse Resource Features</a>.</p>
</li>
<li>
<p><a id="features-sparseResidencyBuffer"></a> <code>sparseResidencyBuffer</code> specifies
whether the device <strong class="purple">can</strong> access partially resident buffers.
If this feature is not enabled, buffers <strong class="purple">must</strong> not be created with
<code>VK_BUFFER_CREATE_SPARSE_RESIDENCY_BIT</code> set in the <code>flags</code>
member of the <code>VkBufferCreateInfo</code> structure.</p>
</li>
<li>
<p><a id="features-sparseResidencyImage2D"></a> <code>sparseResidencyImage2D</code>
specifies whether the device <strong class="purple">can</strong> access partially resident 2D images
with 1 sample per pixel.
If this feature is not enabled, images with an <code>imageType</code> of
<code>VK_IMAGE_TYPE_2D</code> and <code>samples</code> set to
<code>VK_SAMPLE_COUNT_1_BIT</code> <strong class="purple">must</strong> not be created with
<code>VK_IMAGE_CREATE_SPARSE_RESIDENCY_BIT</code> set in the <code>flags</code> member
of the <code>VkImageCreateInfo</code> structure.</p>
</li>
<li>
<p><a id="features-sparseResidencyImage3D"></a> <code>sparseResidencyImage3D</code>
specifies whether the device <strong class="purple">can</strong> access partially resident 3D images.
If this feature is not enabled, images with an <code>imageType</code> of
<code>VK_IMAGE_TYPE_3D</code> <strong class="purple">must</strong> not be created with
<code>VK_IMAGE_CREATE_SPARSE_RESIDENCY_BIT</code> set in the <code>flags</code> member
of the <code>VkImageCreateInfo</code> structure.</p>
</li>
<li>
<p><a id="features-sparseResidency2Samples"></a> <code>sparseResidency2Samples</code>
specifies whether the physical device <strong class="purple">can</strong> access partially resident 2D
images with 2 samples per pixel.
If this feature is not enabled, images with an <code>imageType</code> of
<code>VK_IMAGE_TYPE_2D</code> and <code>samples</code> set to
<code>VK_SAMPLE_COUNT_2_BIT</code> <strong class="purple">must</strong> not be created with
<code>VK_IMAGE_CREATE_SPARSE_RESIDENCY_BIT</code> set in the <code>flags</code> member
of the <code>VkImageCreateInfo</code> structure.</p>
</li>
<li>
<p><a id="features-sparseResidency4Samples"></a> <code>sparseResidency4Samples</code>
specifies whether the physical device <strong class="purple">can</strong> access partially resident 2D
images with 4 samples per pixel.
If this feature is not enabled, images with an <code>imageType</code> of
<code>VK_IMAGE_TYPE_2D</code> and <code>samples</code> set to
<code>VK_SAMPLE_COUNT_4_BIT</code> <strong class="purple">must</strong> not be created with
<code>VK_IMAGE_CREATE_SPARSE_RESIDENCY_BIT</code> set in the <code>flags</code> member
of the <code>VkImageCreateInfo</code> structure.</p>
</li>
<li>
<p><a id="features-sparseResidency8Samples"></a> <code>sparseResidency8Samples</code>
specifies whether the physical device <strong class="purple">can</strong> access partially resident 2D
images with 8 samples per pixel.
If this feature is not enabled, images with an <code>imageType</code> of
<code>VK_IMAGE_TYPE_2D</code> and <code>samples</code> set to
<code>VK_SAMPLE_COUNT_8_BIT</code> <strong class="purple">must</strong> not be created with
<code>VK_IMAGE_CREATE_SPARSE_RESIDENCY_BIT</code> set in the <code>flags</code> member
of the <code>VkImageCreateInfo</code> structure.</p>
</li>
<li>
<p><a id="features-sparseResidency16Samples"></a> <code>sparseResidency16Samples</code>
specifies whether the physical device <strong class="purple">can</strong> access partially resident 2D
images with 16 samples per pixel.
If this feature is not enabled, images with an <code>imageType</code> of
<code>VK_IMAGE_TYPE_2D</code> and <code>samples</code> set to
<code>VK_SAMPLE_COUNT_16_BIT</code> <strong class="purple">must</strong> not be created with
<code>VK_IMAGE_CREATE_SPARSE_RESIDENCY_BIT</code> set in the <code>flags</code> member
of the <code>VkImageCreateInfo</code> structure.</p>
</li>
<li>
<p><a id="features-sparseResidencyAliased"></a> <code>sparseResidencyAliased</code>
specifies whether the physical device <strong class="purple">can</strong> correctly access data aliased
into multiple locations.
If this feature is not enabled, the
<code>VK_BUFFER_CREATE_SPARSE_ALIASED_BIT</code> and
<code>VK_IMAGE_CREATE_SPARSE_ALIASED_BIT</code> enum values <strong class="purple">must</strong> not be used
in <code>flags</code> members of the <code>VkBufferCreateInfo</code> and
<code>VkImageCreateInfo</code> structures, respectively.</p>
</li>
<li>
<p><a id="features-variableMultisampleRate"></a> <code>variableMultisampleRate</code>
specifies whether all pipelines that will be bound to a command buffer
during a subpass with no attachments <strong class="purple">must</strong> have the same value for
<code>VkPipelineMultisampleStateCreateInfo</code>::<code>rasterizationSamples</code>.
If set to <code>VK_TRUE</code>, the implementation supports variable
multisample rates in a subpass with no attachments.
If set to <code>VK_FALSE</code>, then all pipelines bound in such a subpass
<strong class="purple">must</strong> have the same multisample rate.
This has no effect in situations where a subpass uses any attachments.</p>
</li>
<li>
<p><a id="features-inheritedQueries"></a> <code>inheritedQueries</code> specifies whether a
secondary command buffer <strong class="purple">may</strong> be executed while a query is active.</p>
</li>
</ul>
</div>
</div>
<div class="sect3">
<h4 id="_see_also_614">See Also</h4>
<div class="paragraph">
<p><code>VkBool32</code>, <a href="#VkDeviceCreateInfo">VkDeviceCreateInfo</a>, <a href="#VkPhysicalDeviceFeatures2">VkPhysicalDeviceFeatures2</a>, <a href="#vkGetPhysicalDeviceFeatures">vkGetPhysicalDeviceFeatures</a></p>
</div>
</div>
<div class="sect3">
<h4 id="_document_notes_614">Document Notes</h4>
<div class="paragraph">
<p>For more information, see the Vulkan Specification at URL</p>
</div>
<div class="paragraph">
<p><a href="https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VkPhysicalDeviceFeatures" class="bare">https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VkPhysicalDeviceFeatures</a></p>
</div>
<div class="paragraph">
<p>This page is extracted from the Vulkan Specification.
Fixes and changes should be made to the Specification, not directly.</p>
</div>
<div style="page-break-after: always;"></div>
</div>
</div>
<div class="sect2">
<h3 id="_vkphysicaldevicefeatures23">VkPhysicalDeviceFeatures2(3)</h3>
<div class="sect3">
<h4 id="_name_615">Name</h4>
<div class="paragraph">
<p>VkPhysicalDeviceFeatures2 - Structure describing the fine-grained features that can be supported by an implementation</p>
</div>
</div>
<div class="sect3">
<h4 id="_c_specification_615">C Specification</h4>
<div class="paragraph">
<p>The <code>VkPhysicalDeviceFeatures2</code> structure is defined as:</p>
</div>
<div id="VkPhysicalDeviceFeatures2" class="listingblock">
<div class="content">
<pre class="highlight"><code class="language-c++" data-lang="c++">typedef struct VkPhysicalDeviceFeatures2 {
    VkStructureType             sType;
    void*                       pNext;
    VkPhysicalDeviceFeatures    features;
} VkPhysicalDeviceFeatures2;</code></pre>
</div>
</div>
<div class="paragraph">
<p>or the equivalent</p>
</div>
<div id="VkPhysicalDeviceFeatures2KHR" class="listingblock">
<div class="content">
<pre class="highlight"><code class="language-c++" data-lang="c++">typedef VkPhysicalDeviceFeatures2 VkPhysicalDeviceFeatures2KHR;</code></pre>
</div>
</div>
</div>
<div class="sect3">
<h4 id="_members_252">Members</h4>
<div class="paragraph">
<p>The <code>VkPhysicalDeviceFeatures2</code> structure is defined as:</p>
</div>
</div>
<div class="sect3">
<h4 id="_description_615">Description</h4>
<div class="ulist">
<ul>
<li>
<p><code>sType</code> is the type of this structure.</p>
</li>
<li>
<p><code>pNext</code> is <code>NULL</code> or a pointer to an extension-specific structure.</p>
</li>
<li>
<p><code>features</code> is a structure of type <a href="#VkPhysicalDeviceFeatures">VkPhysicalDeviceFeatures</a>
describing the fine-grained features of the Vulkan 1.0 API.</p>
</li>
</ul>
</div>
<div class="paragraph">
<p>The <code>pNext</code> chain of this structure is used to extend the structure with
features defined by extensions.
This structure <strong class="purple">can</strong> be used in <a href="#vkGetPhysicalDeviceFeatures2">vkGetPhysicalDeviceFeatures2</a> or <strong class="purple">can</strong> be
in the <code>pNext</code> chain of a <a href="#VkDeviceCreateInfo">VkDeviceCreateInfo</a> structure, in which
case it controls which features are enabled in the device in lieu of
<code>pEnabledFeatures</code>.</p>
</div>
<div class="sidebarblock">
<div class="content">
<div class="title">Valid Usage (Implicit)</div>
<div class="ulist">
<ul>
<li>
<p><a id="VUID-VkPhysicalDeviceFeatures2-sType-sType"></a> <code>sType</code> <strong class="purple">must</strong> be <code>VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_FEATURES_2</code></p>
</li>
</ul>
</div>
</div>
</div>
</div>
<div class="sect3">
<h4 id="_see_also_615">See Also</h4>
<div class="paragraph">
<p><a href="#VkPhysicalDeviceFeatures">VkPhysicalDeviceFeatures</a>, <a href="#VkStructureType">VkStructureType</a>, <a href="#vkGetPhysicalDeviceFeatures2">vkGetPhysicalDeviceFeatures2</a>, <a href="#vkGetPhysicalDeviceFeatures2KHR">vkGetPhysicalDeviceFeatures2KHR</a></p>
</div>
</div>
<div class="sect3">
<h4 id="_document_notes_615">Document Notes</h4>
<div class="paragraph">
<p>For more information, see the Vulkan Specification at URL</p>
</div>
<div class="paragraph">
<p><a href="https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VkPhysicalDeviceFeatures2" class="bare">https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VkPhysicalDeviceFeatures2</a></p>
</div>
<div class="paragraph">
<p>This page is extracted from the Vulkan Specification.
Fixes and changes should be made to the Specification, not directly.</p>
</div>
<div style="page-break-after: always;"></div>
</div>
</div>
<div class="sect2">
<h3 id="_vkphysicaldevicefloat16int8featureskhr3">VkPhysicalDeviceFloat16Int8FeaturesKHR(3)</h3>
<div class="sect3">
<h4 id="_name_616">Name</h4>
<div class="paragraph">
<p>VkPhysicalDeviceFloat16Int8FeaturesKHR - Structure describing features supported by VK_KHR_shader_float16_int8</p>
</div>
</div>
<div class="sect3">
<h4 id="_c_specification_616">C Specification</h4>
<div class="paragraph">
<p>To query features additionally supported by the
<code><a href="vkspec.html#VK_KHR_shader_float16_int8" class="bare">html/vkspec.html#VK_KHR_shader_float16_int8</a></code> extension, call
<a href="#vkGetPhysicalDeviceFeatures2KHR">vkGetPhysicalDeviceFeatures2KHR</a> with a
<code>VkPhysicalDeviceFloat16Int8FeaturesKHR</code> structure in the <code>pNext</code>
chain.
The <code>VkPhysicalDeviceFloat16Int8FeaturesKHR</code> structure <strong class="purple">can</strong> also be in
the <code>pNext</code> chain of a <a href="#VkDeviceCreateInfo">VkDeviceCreateInfo</a> structure, in which case
it controls which additional features are enabled in the device.</p>
</div>
<div class="paragraph">
<p>The <code>VkPhysicalDeviceFloat16Int8FeaturesKHR</code> structure is defined as:</p>
</div>
<div id="VkPhysicalDeviceFloat16Int8FeaturesKHR" class="listingblock">
<div class="content">
<pre class="highlight"><code class="language-c++" data-lang="c++">typedef struct VkPhysicalDeviceFloat16Int8FeaturesKHR {
    VkStructureType    sType;
    void*              pNext;
    VkBool32           shaderFloat16;
    VkBool32           shaderInt8;
} VkPhysicalDeviceFloat16Int8FeaturesKHR;</code></pre>
</div>
</div>
</div>
<div class="sect3">
<h4 id="_members_253">Members</h4>
<div class="ulist">
<ul>
<li>
<p><code>sType</code> is the type of this structure.</p>
</li>
<li>
<p><code>pNext</code> is <code>NULL</code> or a pointer to an extension-specific structure.</p>
</li>
<li>
<p><a id="features-shaderFloat16"></a> <code>shaderFloat16</code> indicates whether 16-bit
floats (halfs) are supported in shader code.
This also indicates whether shader modules <strong class="purple">can</strong> declare the <code>Float16</code>
capability.</p>
</li>
<li>
<p><a id="features-shaderInt8"></a> <code>shaderInt8</code> indicates whether 8-bit
integers (signed and unsigned) are supported in shader code.
This also indicates whether shader modules <strong class="purple">can</strong> declare the <code>Int8</code>
capability.</p>
</li>
</ul>
</div>
</div>
<div class="sect3">
<h4 id="_description_616">Description</h4>
<div class="sidebarblock">
<div class="content">
<div class="title">Valid Usage (Implicit)</div>
<div class="ulist">
<ul>
<li>
<p><a id="VUID-VkPhysicalDeviceFloat16Int8FeaturesKHR-sType-sType"></a> <code>sType</code> <strong class="purple">must</strong> be <code>VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_FLOAT16_INT8_FEATURES_KHR</code></p>
</li>
</ul>
</div>
</div>
</div>
</div>
<div class="sect3">
<h4 id="_see_also_616">See Also</h4>
<div class="paragraph">
<p><code>VkBool32</code>, <a href="#VkStructureType">VkStructureType</a></p>
</div>
</div>
<div class="sect3">
<h4 id="_document_notes_616">Document Notes</h4>
<div class="paragraph">
<p>For more information, see the Vulkan Specification at URL</p>
</div>
<div class="paragraph">
<p><a href="https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VkPhysicalDeviceFloat16Int8FeaturesKHR" class="bare">https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VkPhysicalDeviceFloat16Int8FeaturesKHR</a></p>
</div>
<div class="paragraph">
<p>This page is extracted from the Vulkan Specification.
Fixes and changes should be made to the Specification, not directly.</p>
</div>
<div style="page-break-after: always;"></div>
</div>
</div>
<div class="sect2">
<h3 id="_vkphysicaldevicefloatcontrolspropertieskhr3">VkPhysicalDeviceFloatControlsPropertiesKHR(3)</h3>
<div class="sect3">
<h4 id="_name_617">Name</h4>
<div class="paragraph">
<p>VkPhysicalDeviceFloatControlsPropertiesKHR - Structure describing properties supported by VK_KHR_shader_float_controls</p>
</div>
</div>
<div class="sect3">
<h4 id="_c_specification_617">C Specification</h4>
<div class="paragraph">
<p>The members of the <code>VkPhysicalDeviceFloatControlsPropertiesKHR</code>
structure describe the following implementation-dependent limits:</p>
</div>
<div id="VkPhysicalDeviceFloatControlsPropertiesKHR" class="listingblock">
<div class="content">
<pre class="highlight"><code class="language-c++" data-lang="c++">typedef struct VkPhysicalDeviceFloatControlsPropertiesKHR {
    VkStructureType    sType;
    void*              pNext;
    VkBool32           separateDenormSettings;
    VkBool32           separateRoundingModeSettings;
    VkBool32           shaderSignedZeroInfNanPreserveFloat16;
    VkBool32           shaderSignedZeroInfNanPreserveFloat32;
    VkBool32           shaderSignedZeroInfNanPreserveFloat64;
    VkBool32           shaderDenormPreserveFloat16;
    VkBool32           shaderDenormPreserveFloat32;
    VkBool32           shaderDenormPreserveFloat64;
    VkBool32           shaderDenormFlushToZeroFloat16;
    VkBool32           shaderDenormFlushToZeroFloat32;
    VkBool32           shaderDenormFlushToZeroFloat64;
    VkBool32           shaderRoundingModeRTEFloat16;
    VkBool32           shaderRoundingModeRTEFloat32;
    VkBool32           shaderRoundingModeRTEFloat64;
    VkBool32           shaderRoundingModeRTZFloat16;
    VkBool32           shaderRoundingModeRTZFloat32;
    VkBool32           shaderRoundingModeRTZFloat64;
} VkPhysicalDeviceFloatControlsPropertiesKHR;</code></pre>
</div>
</div>
</div>
<div class="sect3">
<h4 id="_members_254">Members</h4>
<div class="ulist">
<ul>
<li>
<p><a id="features-separateDenormSettings"></a> <code>separateDenormSettings</code> is a
boolean value indicating whether the implementation supports separate
settings for 16-bit and 64-bit denormals.</p>
</li>
<li>
<p><a id="features-separateRoundingModeSettings"></a>
<code>separateRoundingModeSettings</code> is a boolean value indicating whether
the implementation supports separate rounding modes for 16-bit and
64-bit floating point instructions.</p>
</li>
<li>
<p><a id="features-shaderSignedZeroInfNanPreserveFloat16"></a>
<code>shaderSignedZeroInfNanPreserveFloat16</code> is a boolean value
indicating whether sign of a zero, <span class="eq">Nan</span>s and
\(\pm\infty\) <strong class="purple">can</strong> be preserved in 16-bit floating-point
computations.
It also indicates whether the <code>SignedZeroInfNanPreserve</code> execution
mode <strong class="purple">can</strong> be used for 16-bit floating-point types.</p>
</li>
<li>
<p><a id="features-shaderSignedZeroInfNanPreserveFloat32"></a>
<code>shaderSignedZeroInfNanPreserveFloat32</code> is a boolean value
indicating whether sign of a zero, <span class="eq">Nan</span>s and
\(\pm\infty\) <strong class="purple">can</strong> be preserved in 32-bit floating-point
computations.
It also indicates whether the <code>SignedZeroInfNanPreserve</code> execution
mode <strong class="purple">can</strong> be used for 32-bit floating-point types.</p>
</li>
<li>
<p><a id="features-shaderSignedZeroInfNanPreserveFloat64"></a>
<code>shaderSignedZeroInfNanPreserveFloat64</code> is a boolean value
indicating whether sign of a zero, <span class="eq">Nan</span>s and
\(\pm\infty\) <strong class="purple">can</strong> be preserved in 64-bit floating-point
computations.
It also indicates whether the <code>SignedZeroInfNanPreserve</code> execution
mode <strong class="purple">can</strong> be used for 64-bit floating-point types.</p>
</li>
<li>
<p><a id="features-shaderDenormPreserveFloat16"></a>
<code>shaderDenormPreserveFloat16</code> is a boolean value indicating whether
denormals <strong class="purple">can</strong> be preserved in 16-bit floating-point computations.
It also indicates whether the <code>DenormPreserve</code> execution mode <strong class="purple">can</strong> be
used for 16-bit floating-point types.</p>
</li>
<li>
<p><a id="features-shaderDenormPreserveFloat32"></a>
<code>shaderDenormPreserveFloat32</code> is a boolean value indicating whether
denormals <strong class="purple">can</strong> be preserved in 32-bit floating-point computations.
It also indicates whether the <code>DenormPreserve</code> execution mode <strong class="purple">can</strong> be
used for 32-bit floating-point types.</p>
</li>
<li>
<p><a id="features-shaderDenormPreserveFloat64"></a>
<code>shaderDenormPreserveFloat64</code> is a boolean value indicating whether
denormals <strong class="purple">can</strong> be preserved in 64-bit floating-point computations.
It also indicates whether the <code>DenormPreserve</code> execution mode <strong class="purple">can</strong> be
used for 64-bit floating-point types.</p>
</li>
<li>
<p><a id="features-shaderDenormFlushToZeroFloat16"></a>
<code>shaderDenormFlushToZeroFloat16</code> is a boolean value indicating
whether denormals <strong class="purple">can</strong> be flushed to zero in 16-bit floating-point
computations.
It also indicates whether the <code>DenormFlushToZero</code> execution mode <strong class="purple">can</strong>
be used for 16-bit floating-point types.</p>
</li>
<li>
<p><a id="features-shaderDenormFlushToZeroFloat32"></a>
<code>shaderDenormFlushToZeroFloat32</code> is a boolean value indicating
whether denormals <strong class="purple">can</strong> be flushed to zero in 32-bit floating-point
computations.
It also indicates whether the <code>DenormFlushToZero</code> execution mode <strong class="purple">can</strong>
be used for 32-bit floating-point types.</p>
</li>
<li>
<p><a id="features-shaderDenormFlushToZeroFloat64"></a>
<code>shaderDenormFlushToZeroFloat64</code> is a boolean value indicating
whether denormals <strong class="purple">can</strong> be flushed to zero in 64-bit floating-point
computations.
It also indicates whether the <code>DenormFlushToZero</code> execution mode <strong class="purple">can</strong>
be used for 64-bit floating-point types.</p>
</li>
<li>
<p><a id="features-shaderRoundingModeRTEFloat16"></a>
<code>shaderRoundingModeRTEFloat16</code> is a boolean value indicating whether
an implementation supports the round-to-nearest-even rounding mode for
16-bit floating-point arithmetic and conversion instructions.
It also indicates whether the <code>RoundingModeRTE</code> execution mode <strong class="purple">can</strong>
be used for 16-bit floating-point types.</p>
</li>
<li>
<p><a id="features-shaderRoundingModeRTEFloat32"></a>
<code>shaderRoundingModeRTEFloat32</code> is a boolean value indicating whether
an implementation supports the round-to-nearest-even rounding mode for
32-bit floating-point arithmetic and conversion instructions.
It also indicates whether the <code>RoundingModeRTE</code> execution mode <strong class="purple">can</strong>
be used for 32-bit floating-point types.</p>
</li>
<li>
<p><a id="features-shaderRoundingModeRTEFloat64"></a>
<code>shaderRoundingModeRTEFloat64</code> is a boolean value indicating whether
an implementation supports the round-to-nearest-even rounding mode for
64-bit floating-point arithmetic and conversion instructions.
It also indicates whether the <code>RoundingModeRTE</code> execution mode <strong class="purple">can</strong>
be used for 64-bit floating-point types.</p>
</li>
<li>
<p><a id="features-shaderRoundingModeRTZFloat16"></a>
<code>shaderRoundingModeRTZFloat16</code> is a boolean value indicating whether
an implementation supports the round-towards-zero rounding mode for
16-bit floating-point arithmetic and conversion instructions.
It also indicates whether the <code>RoundingModeRTZ</code> execution mode <strong class="purple">can</strong>
be used for 16-bit floating-point types.</p>
</li>
<li>
<p><a id="features-shaderRoundingModeRTZFloat32"></a>
<code>shaderRoundingModeRTZFloat32</code> is a boolean value indicating whether
an implementation supports the round-towards-zero rounding mode for
32-bit floating-point arithmetic and conversion instructions.
It also indicates whether the <code>RoundingModeRTZ</code> execution mode <strong class="purple">can</strong>
be used for 32-bit floating-point types.</p>
</li>
<li>
<p><a id="features-shaderRoundingModeRTZFloat64"></a>
<code>shaderRoundingModeRTZFloat64</code> is a boolean value indicating whether
an implementation supports the round-towards-zero rounding mode for
64-bit floating-point arithmetic and conversion instructions.
It also indicates whether the <code>RoundingModeRTZ</code> execution mode <strong class="purple">can</strong>
be used for 64-bit floating-point types.</p>
</li>
</ul>
</div>
</div>
<div class="sect3">
<h4 id="_description_617">Description</h4>
<div class="admonitionblock note">
<table>
<tr>
<td class="icon">
<i class="fa icon-note" title="Note"></i>
</td>
<td class="content">
<div class="title">editing-note</div>
<div class="paragraph">
<p>Implementations may not be able to control behavior of denorms for
floating-point atomics.
This needs to be taken into account when such atomics will be added to
Vulkan.</p>
</div>
</td>
</tr>
</table>
</div>
<div class="paragraph">
<p>If the <code>VkPhysicalDeviceFloatControlsPropertiesKHR</code> structure is
included in the <code>pNext</code> chain of <a href="#VkPhysicalDeviceProperties2">VkPhysicalDeviceProperties2</a>, it
is filled with the implementation-dependent limits.</p>
</div>
<div class="sidebarblock">
<div class="content">
<div class="title">Valid Usage (Implicit)</div>
<div class="ulist">
<ul>
<li>
<p><a id="VUID-VkPhysicalDeviceFloatControlsPropertiesKHR-sType-sType"></a> <code>sType</code> <strong class="purple">must</strong> be <code>VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_FLOAT_CONTROLS_PROPERTIES_KHR</code></p>
</li>
</ul>
</div>
</div>
</div>
</div>
<div class="sect3">
<h4 id="_see_also_617">See Also</h4>
<div class="paragraph">
<p><code>VkBool32</code>, <a href="#VkStructureType">VkStructureType</a></p>
</div>
</div>
<div class="sect3">
<h4 id="_document_notes_617">Document Notes</h4>
<div class="paragraph">
<p>For more information, see the Vulkan Specification at URL</p>
</div>
<div class="paragraph">
<p><a href="https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VkPhysicalDeviceFloatControlsPropertiesKHR" class="bare">https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VkPhysicalDeviceFloatControlsPropertiesKHR</a></p>
</div>
<div class="paragraph">
<p>This page is extracted from the Vulkan Specification.
Fixes and changes should be made to the Specification, not directly.</p>
</div>
<div style="page-break-after: always;"></div>
</div>
</div>
<div class="sect2">
<h3 id="_vkphysicaldevicefragmentdensitymapfeaturesext3">VkPhysicalDeviceFragmentDensityMapFeaturesEXT(3)</h3>
<div class="sect3">
<h4 id="_name_618">Name</h4>
<div class="paragraph">
<p>VkPhysicalDeviceFragmentDensityMapFeaturesEXT - Structure describing fragment density map features that can be supported by an implementation</p>
</div>
</div>
<div class="sect3">
<h4 id="_c_specification_618">C Specification</h4>
<div class="paragraph">
<p>The <code>VkPhysicalDeviceFragmentDensityMapFeaturesEXT</code> structure is defined
as:</p>
</div>
<div id="VkPhysicalDeviceFragmentDensityMapFeaturesEXT" class="listingblock">
<div class="content">
<pre class="highlight"><code class="language-c++" data-lang="c++">typedef struct VkPhysicalDeviceFragmentDensityMapFeaturesEXT {
    VkStructureType    sType;
    void*              pNext;
    VkBool32           fragmentDensityMap;
    VkBool32           fragmentDensityMapDynamic;
    VkBool32           fragmentDensityMapNonSubsampledImages;
} VkPhysicalDeviceFragmentDensityMapFeaturesEXT;</code></pre>
</div>
</div>
</div>
<div class="sect3">
<h4 id="_members_255">Members</h4>
<div class="paragraph">
<p>The members of the <code>VkPhysicalDeviceFragmentDensityMapFeaturesEXT</code>
structure describe the following features:</p>
</div>
</div>
<div class="sect3">
<h4 id="_description_618">Description</h4>
<div class="ulist">
<ul>
<li>
<p><a id="features-fragmentdensitymap"></a> <code>fragmentDensityMap</code> specifies
whether the implementation supports render passes with a fragment
density map attachment.
If this feature is not enabled and the <code>pNext</code> chain of
<code>VkRenderPassCreateInfo</code> contains
<code>VkRenderPassFragmentDensityMapCreateInfoEXT</code>,
<code>fragmentDensityMapAttachment</code> <strong class="purple">must</strong> be <code>VK_ATTACHMENT_UNUSED</code>.</p>
</li>
<li>
<p><a id="features-fragmentdensitymapdynamic"></a> <code>fragmentDensityMapDynamic</code>
specifies whether the implementation supports dynamic fragment density
map image views.
If this feature is not enabled,
<code>VK_IMAGE_VIEW_CREATE_FRAGMENT_DENSITY_MAP_DYNAMIC_BIT_EXT</code> <strong class="purple">must</strong>
not be included in <code>VkImageViewCreateInfo</code>::<code>flags</code>.</p>
</li>
<li>
<p><a id="features-nonsubsampledimages"></a>
<code>fragmentDensityMapNonSubsampledImages</code> specifies whether the
implementation supports regular non-subsampled image attachments with
fragment density map render passes.
If this feature is not enabled, render passes with a
<a href="vkspec.html#renderpass-fragmentdensitymapattachment">fragment density map
attachment</a> <strong class="purple">must</strong> only have <a href="vkspec.html#resources-subsampledimages">subsampled
attachments</a> bound.</p>
</li>
</ul>
</div>
<div class="paragraph">
<p>If the <code>VkPhysicalDeviceFragmentDensityMapFeaturesEXT</code> structure is
included in the <code>pNext</code> chain of <a href="#VkPhysicalDeviceFeatures2">VkPhysicalDeviceFeatures2</a>, it is
filled with values indicating whether each feature is supported.
<code>VkPhysicalDeviceFragmentDensityMapFeaturesEXT</code> <strong class="purple">can</strong> also be used in
<code>pNext</code> chain of <a href="#VkDeviceCreateInfo">VkDeviceCreateInfo</a> to enable the features.</p>
</div>
<div class="sidebarblock">
<div class="content">
<div class="title">Valid Usage (Implicit)</div>
<div class="ulist">
<ul>
<li>
<p><a id="VUID-VkPhysicalDeviceFragmentDensityMapFeaturesEXT-sType-sType"></a> <code>sType</code> <strong class="purple">must</strong> be <code>VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_FRAGMENT_DENSITY_MAP_FEATURES_EXT</code></p>
</li>
</ul>
</div>
</div>
</div>
</div>
<div class="sect3">
<h4 id="_see_also_618">See Also</h4>
<div class="paragraph">
<p><code>VkBool32</code>, <a href="#VkStructureType">VkStructureType</a></p>
</div>
</div>
<div class="sect3">
<h4 id="_document_notes_618">Document Notes</h4>
<div class="paragraph">
<p>For more information, see the Vulkan Specification at URL</p>
</div>
<div class="paragraph">
<p><a href="https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VkPhysicalDeviceFragmentDensityMapFeaturesEXT" class="bare">https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VkPhysicalDeviceFragmentDensityMapFeaturesEXT</a></p>
</div>
<div class="paragraph">
<p>This page is extracted from the Vulkan Specification.
Fixes and changes should be made to the Specification, not directly.</p>
</div>
<div style="page-break-after: always;"></div>
</div>
</div>
<div class="sect2">
<h3 id="_vkphysicaldevicefragmentdensitymappropertiesext3">VkPhysicalDeviceFragmentDensityMapPropertiesEXT(3)</h3>
<div class="sect3">
<h4 id="_name_619">Name</h4>
<div class="paragraph">
<p>VkPhysicalDeviceFragmentDensityMapPropertiesEXT - Structure describing fragment density map properties that can be supported by an implementation</p>
</div>
</div>
<div class="sect3">
<h4 id="_c_specification_619">C Specification</h4>
<div class="paragraph">
<p>The <code>VkPhysicalDeviceFragmentDensityMapPropertiesEXT</code> structure is
defined as:</p>
</div>
<div id="VkPhysicalDeviceFragmentDensityMapPropertiesEXT" class="listingblock">
<div class="content">
<pre class="highlight"><code class="language-c++" data-lang="c++">typedef struct VkPhysicalDeviceFragmentDensityMapPropertiesEXT {
    VkStructureType    sType;
    void*              pNext;
    VkExtent2D         minFragmentDensityTexelSize;
    VkExtent2D         maxFragmentDensityTexelSize;
    VkBool32           fragmentDensityInvocations;
} VkPhysicalDeviceFragmentDensityMapPropertiesEXT;</code></pre>
</div>
</div>
</div>
<div class="sect3">
<h4 id="_members_256">Members</h4>
<div class="paragraph">
<p>The members of the <code>VkPhysicalDeviceFragmentDensityMapPropertiesEXT</code>
structure describe the following implementation-dependent limits:</p>
</div>
</div>
<div class="sect3">
<h4 id="_description_619">Description</h4>
<div class="ulist">
<ul>
<li>
<p><a id="limits-minfragmentdensitytexelsize"></a> <code>minFragmentDensityTexelSize</code>
is the minimum <a href="vkspec.html#glossary-fragment-density-texel-size">fragment density
texel size</a>.</p>
</li>
<li>
<p><a id="limits-maxfragmentdensitytexelsize"></a> <code>maxFragmentDensityTexelSize</code>
is the maximum fragment density texel size.</p>
</li>
<li>
<p><a id="limits-fragmentdensityinvocations"></a> <code>fragmentDensityInvocations</code>
specifies whether the implementation <strong class="purple">may</strong> invoke additional fragment
shader invocations for each covered sample.</p>
</li>
</ul>
</div>
<div class="sidebarblock">
<div class="content">
<div class="title">Valid Usage (Implicit)</div>
<div class="ulist">
<ul>
<li>
<p><a id="VUID-VkPhysicalDeviceFragmentDensityMapPropertiesEXT-sType-sType"></a> <code>sType</code> <strong class="purple">must</strong> be <code>VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_FRAGMENT_DENSITY_MAP_PROPERTIES_EXT</code></p>
</li>
</ul>
</div>
</div>
</div>
<div class="paragraph">
<p>If the <code>VkPhysicalDeviceFragmentDensityMapPropertiesEXT</code> structure is
included in the <code>pNext</code> chain of <a href="#VkPhysicalDeviceProperties2KHR">VkPhysicalDeviceProperties2KHR</a>,
it is filled with the implementation-dependent limits and properties.</p>
</div>
</div>
<div class="sect3">
<h4 id="_see_also_619">See Also</h4>
<div class="paragraph">
<p><code>VkBool32</code>, <a href="#VkExtent2D">VkExtent2D</a>, <a href="#VkStructureType">VkStructureType</a></p>
</div>
</div>
<div class="sect3">
<h4 id="_document_notes_619">Document Notes</h4>
<div class="paragraph">
<p>For more information, see the Vulkan Specification at URL</p>
</div>
<div class="paragraph">
<p><a href="https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VkPhysicalDeviceFragmentDensityMapPropertiesEXT" class="bare">https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VkPhysicalDeviceFragmentDensityMapPropertiesEXT</a></p>
</div>
<div class="paragraph">
<p>This page is extracted from the Vulkan Specification.
Fixes and changes should be made to the Specification, not directly.</p>
</div>
<div style="page-break-after: always;"></div>
</div>
</div>
<div class="sect2">
<h3 id="_vkphysicaldevicefragmentshaderbarycentricfeaturesnv3">VkPhysicalDeviceFragmentShaderBarycentricFeaturesNV(3)</h3>
<div class="sect3">
<h4 id="_name_620">Name</h4>
<div class="paragraph">
<p>VkPhysicalDeviceFragmentShaderBarycentricFeaturesNV - Structure describing barycentric support in fragment shaders that can be supported by an implementation</p>
</div>
</div>
<div class="sect3">
<h4 id="_c_specification_620">C Specification</h4>
<div class="paragraph">
<p>The <code>VkPhysicalDeviceFragmentShaderBarycentricFeaturesNV</code> structure is
defined as:</p>
</div>
<div id="VkPhysicalDeviceFragmentShaderBarycentricFeaturesNV" class="listingblock">
<div class="content">
<pre class="highlight"><code class="language-c++" data-lang="c++">typedef struct VkPhysicalDeviceFragmentShaderBarycentricFeaturesNV {
    VkStructureType    sType;
    void*              pNext;
    VkBool32           fragmentShaderBarycentric;
} VkPhysicalDeviceFragmentShaderBarycentricFeaturesNV;</code></pre>
</div>
</div>
</div>
<div class="sect3">
<h4 id="_members_257">Members</h4>
<div class="paragraph">
<p>The members of the <code>VkPhysicalDeviceFragmentShaderBarycentricFeaturesNV</code>
structure describe the following features:</p>
</div>
</div>
<div class="sect3">
<h4 id="_description_620">Description</h4>
<div class="ulist">
<ul>
<li>
<p><a id="features-fragmentShaderBarycentric"></a> <code>fragmentShaderBarycentric</code>
indicates that the implementation supports the <code>BaryCoordNV</code> and
<code>BaryCoordNoPerspNV</code> SPIR-V fragment shader built-ins and supports
the <code>PerVertexNV</code> SPIR-V decoration on fragment shader input
variables.</p>
</li>
</ul>
</div>
<div class="paragraph">
<p>See <a href="vkspec.html#primsrast-barycentric">Barycentric Interpolation</a> for more
information.</p>
</div>
<div class="paragraph">
<p>If the <code>VkPhysicalDeviceFragmentShaderBarycentricFeaturesNV</code> structure
is included in the <code>pNext</code> chain of <a href="#VkPhysicalDeviceFeatures2KHR">VkPhysicalDeviceFeatures2KHR</a>,
it is filled with values indicating whether the feature is supported.
<code>VkPhysicalDeviceFragmentShaderBarycentricFeaturesNV</code> <strong class="purple">can</strong> also be used
in the <code>pNext</code> chain of <a href="#VkDeviceCreateInfo">VkDeviceCreateInfo</a> to enable features.</p>
</div>
<div class="sidebarblock">
<div class="content">
<div class="title">Valid Usage (Implicit)</div>
<div class="ulist">
<ul>
<li>
<p><a id="VUID-VkPhysicalDeviceFragmentShaderBarycentricFeaturesNV-sType-sType"></a> <code>sType</code> <strong class="purple">must</strong> be <code>VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_FRAGMENT_SHADER_BARYCENTRIC_FEATURES_NV</code></p>
</li>
</ul>
</div>
</div>
</div>
</div>
<div class="sect3">
<h4 id="_see_also_620">See Also</h4>
<div class="paragraph">
<p><code>VkBool32</code>, <a href="#VkStructureType">VkStructureType</a></p>
</div>
</div>
<div class="sect3">
<h4 id="_document_notes_620">Document Notes</h4>
<div class="paragraph">
<p>For more information, see the Vulkan Specification at URL</p>
</div>
<div class="paragraph">
<p><a href="https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VkPhysicalDeviceFragmentShaderBarycentricFeaturesNV" class="bare">https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VkPhysicalDeviceFragmentShaderBarycentricFeaturesNV</a></p>
</div>
<div class="paragraph">
<p>This page is extracted from the Vulkan Specification.
Fixes and changes should be made to the Specification, not directly.</p>
</div>
<div style="page-break-after: always;"></div>
</div>
</div>
<div class="sect2">
<h3 id="_vkphysicaldevicegroupproperties3">VkPhysicalDeviceGroupProperties(3)</h3>
<div class="sect3">
<h4 id="_name_621">Name</h4>
<div class="paragraph">
<p>VkPhysicalDeviceGroupProperties - Structure specifying physical device group properties</p>
</div>
</div>
<div class="sect3">
<h4 id="_c_specification_621">C Specification</h4>
<div class="paragraph">
<p>The <code>VkPhysicalDeviceGroupProperties</code> structure is defined as:</p>
</div>
<div id="VkPhysicalDeviceGroupProperties" class="listingblock">
<div class="content">
<pre class="highlight"><code class="language-c++" data-lang="c++">typedef struct VkPhysicalDeviceGroupProperties {
    VkStructureType     sType;
    void*               pNext;
    uint32_t            physicalDeviceCount;
    VkPhysicalDevice    physicalDevices[VK_MAX_DEVICE_GROUP_SIZE];
    VkBool32            subsetAllocation;
} VkPhysicalDeviceGroupProperties;</code></pre>
</div>
</div>
<div class="paragraph">
<p>or the equivalent</p>
</div>
<div id="VkPhysicalDeviceGroupPropertiesKHR" class="listingblock">
<div class="content">
<pre class="highlight"><code class="language-c++" data-lang="c++">typedef VkPhysicalDeviceGroupProperties VkPhysicalDeviceGroupPropertiesKHR;</code></pre>
</div>
</div>
</div>
<div class="sect3">
<h4 id="_members_258">Members</h4>
<div class="ulist">
<ul>
<li>
<p><code>sType</code> is the type of this structure.</p>
</li>
<li>
<p><code>pNext</code> is <code>NULL</code> or a pointer to an extension-specific structure.</p>
</li>
<li>
<p><code>physicalDeviceCount</code> is the number of physical devices in the
group.</p>
</li>
<li>
<p><code>physicalDevices</code> is an array of physical device handles
representing all physical devices in the group.
The first <code>physicalDeviceCount</code> elements of the array will be valid.</p>
</li>
<li>
<p><code>subsetAllocation</code> specifies whether logical devices created from
the group support allocating device memory on a subset of devices, via
the <code>deviceMask</code> member of the <a href="#VkMemoryAllocateFlagsInfo">VkMemoryAllocateFlagsInfo</a>.
If this is <code>VK_FALSE</code>, then all device memory allocations are made
across all physical devices in the group.
If <code>physicalDeviceCount</code> is <code>1</code>, then <code>subsetAllocation</code> <strong class="purple">must</strong>
be <code>VK_FALSE</code>.</p>
</li>
</ul>
</div>
</div>
<div class="sect3">
<h4 id="_description_621">Description</h4>
<div class="sidebarblock">
<div class="content">
<div class="title">Valid Usage (Implicit)</div>
<div class="ulist">
<ul>
<li>
<p><a id="VUID-VkPhysicalDeviceGroupProperties-sType-sType"></a> <code>sType</code> <strong class="purple">must</strong> be <code>VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_GROUP_PROPERTIES</code></p>
</li>
<li>
<p><a id="VUID-VkPhysicalDeviceGroupProperties-pNext-pNext"></a> <code>pNext</code> <strong class="purple">must</strong> be <code>NULL</code></p>
</li>
</ul>
</div>
</div>
</div>
</div>
<div class="sect3">
<h4 id="_see_also_621">See Also</h4>
<div class="paragraph">
<p><code>VkBool32</code>, <a href="#VkPhysicalDevice">VkPhysicalDevice</a>, <a href="#VkStructureType">VkStructureType</a>, <a href="#vkEnumeratePhysicalDeviceGroups">vkEnumeratePhysicalDeviceGroups</a>, <a href="#vkEnumeratePhysicalDeviceGroupsKHR">vkEnumeratePhysicalDeviceGroupsKHR</a></p>
</div>
</div>
<div class="sect3">
<h4 id="_document_notes_621">Document Notes</h4>
<div class="paragraph">
<p>For more information, see the Vulkan Specification at URL</p>
</div>
<div class="paragraph">
<p><a href="https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VkPhysicalDeviceGroupProperties" class="bare">https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VkPhysicalDeviceGroupProperties</a></p>
</div>
<div class="paragraph">
<p>This page is extracted from the Vulkan Specification.
Fixes and changes should be made to the Specification, not directly.</p>
</div>
<div style="page-break-after: always;"></div>
</div>
</div>
<div class="sect2">
<h3 id="_vkphysicaldevicehostqueryresetfeaturesext3">VkPhysicalDeviceHostQueryResetFeaturesEXT(3)</h3>
<div class="sect3">
<h4 id="_name_622">Name</h4>
<div class="paragraph">
<p>VkPhysicalDeviceHostQueryResetFeaturesEXT - Structure describing whether queries can be reset from the host</p>
</div>
</div>
<div class="sect3">
<h4 id="_c_specification_622">C Specification</h4>
<div class="paragraph">
<p>The <code>VkPhysicalDeviceHostQueryResetFeaturesEXT</code> structure is defined as:</p>
</div>
<div id="VkPhysicalDeviceHostQueryResetFeaturesEXT" class="listingblock">
<div class="content">
<pre class="highlight"><code class="language-c++" data-lang="c++">typedef struct VkPhysicalDeviceHostQueryResetFeaturesEXT {
    VkStructureType    sType;
    void*              pNext;
    VkBool32           hostQueryReset;
} VkPhysicalDeviceHostQueryResetFeaturesEXT;</code></pre>
</div>
</div>
</div>
<div class="sect3">
<h4 id="_members_259">Members</h4>
<div class="paragraph">
<p>The members of the <code>VkPhysicalDeviceHostQueryResetFeaturesEXT</code> structure
describe the following features:</p>
</div>
</div>
<div class="sect3">
<h4 id="_description_622">Description</h4>
<div class="ulist">
<ul>
<li>
<p><a id="features-hostQueryReset"></a> <code>hostQueryReset</code> indicates that the
implementation supports resetting queries from the host with
<a href="#vkResetQueryPoolEXT">vkResetQueryPoolEXT</a>.</p>
</li>
</ul>
</div>
<div class="paragraph">
<p>If the <code>VkPhysicalDeviceHostQueryResetFeaturesEXT</code> structure is included
in the <code>pNext</code> chain of <a href="#VkPhysicalDeviceFeatures2">VkPhysicalDeviceFeatures2</a>, it is filled
with values indicating whether the feature is supported.
<code>VkPhysicalDeviceHostQueryResetFeaturesEXT</code> <strong class="purple">can</strong> also be used in the
<code>pNext</code> chain of <a href="#VkDeviceCreateInfo">VkDeviceCreateInfo</a> to enable features.</p>
</div>
<div class="sidebarblock">
<div class="content">
<div class="title">Valid Usage (Implicit)</div>
<div class="ulist">
<ul>
<li>
<p><a id="VUID-VkPhysicalDeviceHostQueryResetFeaturesEXT-sType-sType"></a> <code>sType</code> <strong class="purple">must</strong> be <code>VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_HOST_QUERY_RESET_FEATURES_EXT</code></p>
</li>
</ul>
</div>
</div>
</div>
</div>
<div class="sect3">
<h4 id="_see_also_622">See Also</h4>
<div class="paragraph">
<p><code>VkBool32</code>, <a href="#VkStructureType">VkStructureType</a></p>
</div>
</div>
<div class="sect3">
<h4 id="_document_notes_622">Document Notes</h4>
<div class="paragraph">
<p>For more information, see the Vulkan Specification at URL</p>
</div>
<div class="paragraph">
<p><a href="https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VkPhysicalDeviceHostQueryResetFeaturesEXT" class="bare">https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VkPhysicalDeviceHostQueryResetFeaturesEXT</a></p>
</div>
<div class="paragraph">
<p>This page is extracted from the Vulkan Specification.
Fixes and changes should be made to the Specification, not directly.</p>
</div>
<div style="page-break-after: always;"></div>
</div>
</div>
<div class="sect2">
<h3 id="_vkphysicaldeviceidproperties3">VkPhysicalDeviceIDProperties(3)</h3>
<div class="sect3">
<h4 id="_name_623">Name</h4>
<div class="paragraph">
<p>VkPhysicalDeviceIDProperties - Structure specifying IDs related to the physical device</p>
</div>
</div>
<div class="sect3">
<h4 id="_c_specification_623">C Specification</h4>
<div class="paragraph">
<p>To query the UUID and LUID of a device, add
<a href="#VkPhysicalDeviceIDProperties">VkPhysicalDeviceIDProperties</a> to the <code>pNext</code> chain of the
<a href="#VkPhysicalDeviceProperties2">VkPhysicalDeviceProperties2</a> structure.
The <code>VkPhysicalDeviceIDProperties</code> structure is defined as:</p>
</div>
<div id="VkPhysicalDeviceIDProperties" class="listingblock">
<div class="content">
<pre class="highlight"><code class="language-c++" data-lang="c++">typedef struct VkPhysicalDeviceIDProperties {
    VkStructureType    sType;
    void*              pNext;
    uint8_t            deviceUUID[VK_UUID_SIZE];
    uint8_t            driverUUID[VK_UUID_SIZE];
    uint8_t            deviceLUID[VK_LUID_SIZE];
    uint32_t           deviceNodeMask;
    VkBool32           deviceLUIDValid;
} VkPhysicalDeviceIDProperties;</code></pre>
</div>
</div>
<div class="paragraph">
<p>or the equivalent</p>
</div>
<div id="VkPhysicalDeviceIDPropertiesKHR" class="listingblock">
<div class="content">
<pre class="highlight"><code class="language-c++" data-lang="c++">typedef VkPhysicalDeviceIDProperties VkPhysicalDeviceIDPropertiesKHR;</code></pre>
</div>
</div>
</div>
<div class="sect3">
<h4 id="_members_260">Members</h4>
<div class="ulist">
<ul>
<li>
<p><code>sType</code> is the type of this structure.</p>
</li>
<li>
<p><code>pNext</code> is <code>NULL</code> or a pointer to an extension-specific structure.</p>
</li>
<li>
<p><code>deviceUUID</code> is an array of size <code>VK_UUID_SIZE</code>, containing
8-bit values that represent a universally unique identifier for the
device.</p>
</li>
<li>
<p><code>driverUUID</code> is an array of size <code>VK_UUID_SIZE</code>, containing
8-bit values that represent a universally unique identifier for the
driver build in use by the device.</p>
</li>
<li>
<p><code>deviceLUID</code> is an array of size <code>VK_LUID_SIZE</code>, containing
8-bit values that represent a locally unique identifier for the device.</p>
</li>
<li>
<p><code>deviceNodeMask</code> is a bitfield identifying the node within a linked
device adapter corresponding to the device.</p>
</li>
<li>
<p><code>deviceLUIDValid</code> is a boolean value that will be <code>VK_TRUE</code> if
<code>deviceLUID</code> contains a valid LUID and <code>deviceNodeMask</code> contains
a valid node mask, and <code>VK_FALSE</code> if they do not.</p>
</li>
</ul>
</div>
</div>
<div class="sect3">
<h4 id="_description_623">Description</h4>
<div class="paragraph">
<p><code>deviceUUID</code> <strong class="purple">must</strong> be immutable for a given device across instances,
processes, driver APIs, driver versions, and system reboots.</p>
</div>
<div class="paragraph">
<p>Applications <strong class="purple">can</strong> compare the <code>driverUUID</code> value across instance and
process boundaries, and <strong class="purple">can</strong> make similar queries in external APIs to
determine whether they are capable of sharing memory objects and resources
using them with the device.</p>
</div>
<div class="paragraph">
<p><code>deviceUUID</code> and/or <code>driverUUID</code> <strong class="purple">must</strong> be used to determine whether
a particular external object can be shared between driver components, where
such a restriction exists as defined in the compatibility table for the
particular object type:</p>
</div>
<div class="ulist">
<ul>
<li>
<p><a href="vkspec.html#external-memory-handle-types-compatibility">External memory handle
types compatibility</a></p>
</li>
<li>
<p><a href="vkspec.html#external-semaphore-handle-types-compatibility">External semaphore
handle types compatibility</a></p>
</li>
<li>
<p><a href="vkspec.html#external-fence-handle-types-compatibility">External fence handle types
compatibility</a></p>
</li>
</ul>
</div>
<div class="paragraph">
<p>If <code>deviceLUIDValid</code> is <code>VK_FALSE</code>, the values of <code>deviceLUID</code>
and <code>deviceNodeMask</code> are undefined.
If <code>deviceLUIDValid</code> is <code>VK_TRUE</code> and Vulkan is running on the
Windows operating system, the contents of <code>deviceLUID</code> <strong class="purple">can</strong> be cast to
an <code>LUID</code> object and <strong class="purple">must</strong> be equal to the locally unique identifier of a
<code>IDXGIAdapter1</code> object that corresponds to <code>physicalDevice</code>.
If <code>deviceLUIDValid</code> is <code>VK_TRUE</code>, <code>deviceNodeMask</code> <strong class="purple">must</strong>
contain exactly one bit.
If Vulkan is running on an operating system that supports the Direct3D 12
API and <code>physicalDevice</code> corresponds to an individual device in a linked
device adapter, <code>deviceNodeMask</code> identifies the Direct3D 12 node
corresponding to <code>physicalDevice</code>.
Otherwise, <code>deviceNodeMask</code> <strong class="purple">must</strong> be <code>1</code>.</p>
</div>
<div class="admonitionblock note">
<table>
<tr>
<td class="icon">
<i class="fa icon-note" title="Note"></i>
</td>
<td class="content">
<div class="title">Note</div>
<div class="paragraph">
<p>Although they have identical descriptions,
<a href="#VkPhysicalDeviceIDProperties">VkPhysicalDeviceIDProperties</a>::<code>deviceUUID</code> may differ from
<a href="#VkPhysicalDeviceProperties2">VkPhysicalDeviceProperties2</a>::<code>pipelineCacheUUID</code>.
The former is intended to identify and correlate devices across API and
driver boundaries, while the latter is used to identify a compatible device
and driver combination to use when serializing and de-serializing pipeline
state.</p>
</div>
</td>
</tr>
</table>
</div>
<div class="admonitionblock note">
<table>
<tr>
<td class="icon">
<i class="fa icon-note" title="Note"></i>
</td>
<td class="content">
<div class="title">Note</div>
<div class="paragraph">
<p>While <a href="#VkPhysicalDeviceIDProperties">VkPhysicalDeviceIDProperties</a>::<code>deviceUUID</code> is specified to
remain consistent across driver versions and system reboots, it is not
intended to be usable as a serializable persistent identifier for a device.
It may change when a device is physically added to, removed from, or moved
to a different connector in a system while that system is powered down.
Further, there is no reasonable way to verify with conformance testing that
a given device retains the same UUID in a given system across all driver
versions supported in that system.
While implementations should make every effort to report consistent device
UUIDs across driver versions, applications should avoid relying on the
persistence of this value for uses other than identifying compatible devices
for external object sharing purposes.</p>
</div>
</td>
</tr>
</table>
</div>
<div class="sidebarblock">
<div class="content">
<div class="title">Valid Usage (Implicit)</div>
<div class="ulist">
<ul>
<li>
<p><a id="VUID-VkPhysicalDeviceIDProperties-sType-sType"></a> <code>sType</code> <strong class="purple">must</strong> be <code>VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_ID_PROPERTIES</code></p>
</li>
</ul>
</div>
</div>
</div>
</div>
<div class="sect3">
<h4 id="_see_also_623">See Also</h4>
<div class="paragraph">
<p><code>VkBool32</code>, <a href="#VkStructureType">VkStructureType</a></p>
</div>
</div>
<div class="sect3">
<h4 id="_document_notes_623">Document Notes</h4>
<div class="paragraph">
<p>For more information, see the Vulkan Specification at URL</p>
</div>
<div class="paragraph">
<p><a href="https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VkPhysicalDeviceIDProperties" class="bare">https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VkPhysicalDeviceIDProperties</a></p>
</div>
<div class="paragraph">
<p>This page is extracted from the Vulkan Specification.
Fixes and changes should be made to the Specification, not directly.</p>
</div>
<div style="page-break-after: always;"></div>
</div>
</div>
<div class="sect2">
<h3 id="_vkphysicaldeviceimagedrmformatmodifierinfoext3">VkPhysicalDeviceImageDrmFormatModifierInfoEXT(3)</h3>
<div class="sect3">
<h4 id="_name_624">Name</h4>
<div class="paragraph">
<p>VkPhysicalDeviceImageDrmFormatModifierInfoEXT - Structure specifying a DRM format modifier as image creation parameter</p>
</div>
</div>
<div class="sect3">
<h4 id="_c_specification_624">C Specification</h4>
<div class="paragraph">
<p>To query the image capabilities that are compatible with a
<a href="vkspec.html#glossary-drm-format-modifier">Linux DRM format modifier</a>, set
<a href="#VkPhysicalDeviceImageFormatInfo2">VkPhysicalDeviceImageFormatInfo2</a>::<code>tiling</code> to
<code>VK_IMAGE_TILING_DRM_FORMAT_MODIFIER_EXT</code> and add
<a href="#VkPhysicalDeviceImageDrmFormatModifierInfoEXT">VkPhysicalDeviceImageDrmFormatModifierInfoEXT</a> to the <code>pNext</code> chain
of <a href="#VkPhysicalDeviceImageFormatInfo2">VkPhysicalDeviceImageFormatInfo2</a>.</p>
</div>
<div class="paragraph">
<p>The <a href="#VkPhysicalDeviceImageDrmFormatModifierInfoEXT">VkPhysicalDeviceImageDrmFormatModifierInfoEXT</a> structure is defined
as:</p>
</div>
<div id="VkPhysicalDeviceImageDrmFormatModifierInfoEXT" class="listingblock">
<div class="content">
<pre class="highlight"><code class="language-c++" data-lang="c++">typedef struct VkPhysicalDeviceImageDrmFormatModifierInfoEXT {
    VkStructureType    sType;
    const void*        pNext;
    uint64_t           drmFormatModifier;
    VkSharingMode      sharingMode;
    uint32_t           queueFamilyIndexCount;
    const uint32_t*    pQueueFamilyIndices;
} VkPhysicalDeviceImageDrmFormatModifierInfoEXT;</code></pre>
</div>
</div>
</div>
<div class="sect3">
<h4 id="_members_261">Members</h4>
<div class="ulist">
<ul>
<li>
<p><code>sType</code> is the type of this structure.</p>
</li>
<li>
<p><code>pNext</code> is <code>NULL</code> or a pointer to an extension-specific structure.</p>
</li>
<li>
<p><code>drmFormatModifier</code> is the image&#8217;s <em>Linux DRM format modifier</em>,
corresponding to
<a href="#VkImageDrmFormatModifierExplicitCreateInfoEXT">VkImageDrmFormatModifierExplicitCreateInfoEXT</a>::<code>modifier</code> or
to <a href="#VkImageDrmFormatModifierListCreateInfoEXT">VkImageDrmFormatModifierListCreateInfoEXT</a>::<code>pModifiers</code>.</p>
</li>
<li>
<p><code>sharingMode</code> specifies how the image will be accessed by multiple
queue families.</p>
</li>
<li>
<p><code>queueFamilyIndexCount</code> is the number of entries in the
<code>pQueueFamilyIndices</code> array.</p>
</li>
<li>
<p><code>pQueueFamilyIndices</code> is a list of queue families that will access
the image (ignored if <code>sharingMode</code> is not
<code>VK_SHARING_MODE_CONCURRENT</code>).</p>
</li>
</ul>
</div>
</div>
<div class="sect3">
<h4 id="_description_624">Description</h4>
<div class="paragraph">
<p>If the <code>drmFormatModifier</code> is incompatible with the parameters specified
in <a href="#VkPhysicalDeviceImageFormatInfo2">VkPhysicalDeviceImageFormatInfo2</a> and its <code>pNext</code> chain, then
<a href="#vkGetPhysicalDeviceImageFormatProperties2">vkGetPhysicalDeviceImageFormatProperties2</a> returns
<code>VK_ERROR_FORMAT_NOT_SUPPORTED</code>.
The implementation <strong class="purple">must</strong> support the query of any <code>drmFormatModifier</code>,
including unknown and invalid modifier values.</p>
</div>
<div class="sidebarblock">
<div class="content">
<div class="title">Valid Usage</div>
<div class="ulist">
<ul>
<li>
<p><a id="VUID-VkPhysicalDeviceImageDrmFormatModifierInfoEXT-sharingMode-02314"></a>
If <code>sharingMode</code> is <code>VK_SHARING_MODE_CONCURRENT</code>, then
<code>pQueueFamilyIndices</code> <strong class="purple">must</strong> be a valid pointer to an array of
<code>queueFamilyIndexCount</code> <code>uint32_t</code> values.</p>
</li>
<li>
<p><a id="VUID-VkPhysicalDeviceImageDrmFormatModifierInfoEXT-sharingMode-02315"></a>
If <code>sharingMode</code> is <code>VK_SHARING_MODE_CONCURRENT</code>, then
<code>queueFamilyIndexCount</code> <strong class="purple">must</strong> be greater than <code>1</code>.</p>
</li>
<li>
<p><a id="VUID-VkPhysicalDeviceImageDrmFormatModifierInfoEXT-sharingMode-02316"></a>
If <code>sharingMode</code> is <code>VK_SHARING_MODE_CONCURRENT</code>, each element
of <code>pQueueFamilyIndices</code> <strong class="purple">must</strong> be unique and <strong class="purple">must</strong> be less than the
<code>pQueueFamilyPropertyCount</code> returned by
<a href="#vkGetPhysicalDeviceQueueFamilyProperties2">vkGetPhysicalDeviceQueueFamilyProperties2</a> for the
<code>physicalDevice</code> that was used to create <code>device</code>.</p>
</li>
</ul>
</div>
</div>
</div>
<div class="sidebarblock">
<div class="content">
<div class="title">Valid Usage (Implicit)</div>
<div class="ulist">
<ul>
<li>
<p><a id="VUID-VkPhysicalDeviceImageDrmFormatModifierInfoEXT-sType-sType"></a> <code>sType</code> <strong class="purple">must</strong> be <code>VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_IMAGE_DRM_FORMAT_MODIFIER_INFO_EXT</code></p>
</li>
<li>
<p><a id="VUID-VkPhysicalDeviceImageDrmFormatModifierInfoEXT-sharingMode-parameter"></a> <code>sharingMode</code> <strong class="purple">must</strong> be a valid <a href="#VkSharingMode">VkSharingMode</a> value</p>
</li>
</ul>
</div>
</div>
</div>
</div>
<div class="sect3">
<h4 id="_see_also_624">See Also</h4>
<div class="paragraph">
<p><a href="#VkSharingMode">VkSharingMode</a>, <a href="#VkStructureType">VkStructureType</a></p>
</div>
</div>
<div class="sect3">
<h4 id="_document_notes_624">Document Notes</h4>
<div class="paragraph">
<p>For more information, see the Vulkan Specification at URL</p>
</div>
<div class="paragraph">
<p><a href="https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VkPhysicalDeviceImageDrmFormatModifierInfoEXT" class="bare">https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VkPhysicalDeviceImageDrmFormatModifierInfoEXT</a></p>
</div>
<div class="paragraph">
<p>This page is extracted from the Vulkan Specification.
Fixes and changes should be made to the Specification, not directly.</p>
</div>
<div style="page-break-after: always;"></div>
</div>
</div>
<div class="sect2">
<h3 id="_vkphysicaldeviceimageformatinfo23">VkPhysicalDeviceImageFormatInfo2(3)</h3>
<div class="sect3">
<h4 id="_name_625">Name</h4>
<div class="paragraph">
<p>VkPhysicalDeviceImageFormatInfo2 - Structure specifying image creation parameters</p>
</div>
</div>
<div class="sect3">
<h4 id="_c_specification_625">C Specification</h4>
<div class="paragraph">
<p>The <code>VkPhysicalDeviceImageFormatInfo2</code> structure is defined as:</p>
</div>
<div id="VkPhysicalDeviceImageFormatInfo2" class="listingblock">
<div class="content">
<pre class="highlight"><code class="language-c++" data-lang="c++">typedef struct VkPhysicalDeviceImageFormatInfo2 {
    VkStructureType       sType;
    const void*           pNext;
    VkFormat              format;
    VkImageType           type;
    VkImageTiling         tiling;
    VkImageUsageFlags     usage;
    VkImageCreateFlags    flags;
} VkPhysicalDeviceImageFormatInfo2;</code></pre>
</div>
</div>
<div class="paragraph">
<p>or the equivalent</p>
</div>
<div id="VkPhysicalDeviceImageFormatInfo2KHR" class="listingblock">
<div class="content">
<pre class="highlight"><code class="language-c++" data-lang="c++">typedef VkPhysicalDeviceImageFormatInfo2 VkPhysicalDeviceImageFormatInfo2KHR;</code></pre>
</div>
</div>
</div>
<div class="sect3">
<h4 id="_members_262">Members</h4>
<div class="ulist">
<ul>
<li>
<p><code>sType</code> is the type of this structure.</p>
</li>
<li>
<p><code>pNext</code> is <code>NULL</code> or a pointer to an extension-specific structure.
The <code>pNext</code> chain of <code>VkPhysicalDeviceImageFormatInfo2</code> is used
to provide additional image parameters to
<code>vkGetPhysicalDeviceImageFormatProperties2</code>.</p>
</li>
<li>
<p><code>format</code> is a <a href="#VkFormat">VkFormat</a> value indicating the image format,
corresponding to <a href="#VkImageCreateInfo">VkImageCreateInfo</a>::<code>format</code>.</p>
</li>
<li>
<p><code>type</code> is a <a href="#VkImageType">VkImageType</a> value indicating the image type,
corresponding to <a href="#VkImageCreateInfo">VkImageCreateInfo</a>::<code>imageType</code>.</p>
</li>
<li>
<p><code>tiling</code> is a <a href="#VkImageTiling">VkImageTiling</a> value indicating the image tiling,
corresponding to <a href="#VkImageCreateInfo">VkImageCreateInfo</a>::<code>tiling</code>.</p>
</li>
<li>
<p><code>usage</code> is a bitmask of <a href="#VkImageUsageFlagBits">VkImageUsageFlagBits</a> indicating the
intended usage of the image, corresponding to
<a href="#VkImageCreateInfo">VkImageCreateInfo</a>::<code>usage</code>.</p>
</li>
<li>
<p><code>flags</code> is a bitmask of <a href="#VkImageCreateFlagBits">VkImageCreateFlagBits</a> indicating
additional parameters of the image, corresponding to
<a href="#VkImageCreateInfo">VkImageCreateInfo</a>::<code>flags</code>.</p>
</li>
</ul>
</div>
</div>
<div class="sect3">
<h4 id="_description_625">Description</h4>
<div class="paragraph">
<p>The members of <code>VkPhysicalDeviceImageFormatInfo2</code> correspond to the
arguments to <a href="#vkGetPhysicalDeviceImageFormatProperties">vkGetPhysicalDeviceImageFormatProperties</a>, with
<code>sType</code> and <code>pNext</code> added for extensibility.</p>
</div>
<div class="sidebarblock">
<div class="content">
<div class="title">Valid Usage</div>
<div class="ulist">
<ul>
<li>
<p><a id="VUID-VkPhysicalDeviceImageFormatInfo2-tiling-02249"></a>
<code>tiling</code> <strong class="purple">must</strong> be <code>VK_IMAGE_TILING_DRM_FORMAT_MODIFIER_EXT</code> if
and only if the <code>pNext</code> chain contains
<a href="#VkPhysicalDeviceImageDrmFormatModifierInfoEXT">VkPhysicalDeviceImageDrmFormatModifierInfoEXT</a>.</p>
</li>
<li>
<p><a id="VUID-VkPhysicalDeviceImageFormatInfo2-tiling-02313"></a>
If <code>tiling</code> is <code>VK_IMAGE_TILING_DRM_FORMAT_MODIFIER_EXT</code> and
<code>flags</code> contains <code>VK_IMAGE_CREATE_MUTABLE_FORMAT_BIT</code>, then the
<code>pNext</code> chain <strong class="purple">must</strong> contain <a href="#VkImageFormatListCreateInfoKHR">VkImageFormatListCreateInfoKHR</a>
with non-zero <code>viewFormatCount</code>.</p>
</li>
</ul>
</div>
</div>
</div>
<div class="sidebarblock">
<div class="content">
<div class="title">Valid Usage (Implicit)</div>
<div class="ulist">
<ul>
<li>
<p><a id="VUID-VkPhysicalDeviceImageFormatInfo2-sType-sType"></a> <code>sType</code> <strong class="purple">must</strong> be <code>VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_IMAGE_FORMAT_INFO_2</code></p>
</li>
<li>
<p><a id="VUID-VkPhysicalDeviceImageFormatInfo2-pNext-pNext"></a> Each <code>pNext</code> member of any structure (including this one) in the <code>pNext</code> chain <strong class="purple">must</strong> be either <code>NULL</code> or a pointer to a valid instance of <a href="#VkImageFormatListCreateInfoKHR">VkImageFormatListCreateInfoKHR</a>, <a href="#VkImageStencilUsageCreateInfoEXT">VkImageStencilUsageCreateInfoEXT</a>, <a href="#VkPhysicalDeviceExternalImageFormatInfo">VkPhysicalDeviceExternalImageFormatInfo</a>, <a href="#VkPhysicalDeviceImageDrmFormatModifierInfoEXT">VkPhysicalDeviceImageDrmFormatModifierInfoEXT</a>, or <a href="#VkPhysicalDeviceImageViewImageFormatInfoEXT">VkPhysicalDeviceImageViewImageFormatInfoEXT</a></p>
</li>
<li>
<p><a id="VUID-VkPhysicalDeviceImageFormatInfo2-sType-unique"></a> Each <code>sType</code> member in the <code>pNext</code> chain <strong class="purple">must</strong> be unique</p>
</li>
<li>
<p><a id="VUID-VkPhysicalDeviceImageFormatInfo2-format-parameter"></a> <code>format</code> <strong class="purple">must</strong> be a valid <a href="#VkFormat">VkFormat</a> value</p>
</li>
<li>
<p><a id="VUID-VkPhysicalDeviceImageFormatInfo2-type-parameter"></a> <code>type</code> <strong class="purple">must</strong> be a valid <a href="#VkImageType">VkImageType</a> value</p>
</li>
<li>
<p><a id="VUID-VkPhysicalDeviceImageFormatInfo2-tiling-parameter"></a> <code>tiling</code> <strong class="purple">must</strong> be a valid <a href="#VkImageTiling">VkImageTiling</a> value</p>
</li>
<li>
<p><a id="VUID-VkPhysicalDeviceImageFormatInfo2-usage-parameter"></a> <code>usage</code> <strong class="purple">must</strong> be a valid combination of <a href="#VkImageUsageFlagBits">VkImageUsageFlagBits</a> values</p>
</li>
<li>
<p><a id="VUID-VkPhysicalDeviceImageFormatInfo2-usage-requiredbitmask"></a> <code>usage</code> <strong class="purple">must</strong> not be <code>0</code></p>
</li>
<li>
<p><a id="VUID-VkPhysicalDeviceImageFormatInfo2-flags-parameter"></a> <code>flags</code> <strong class="purple">must</strong> be a valid combination of <a href="#VkImageCreateFlagBits">VkImageCreateFlagBits</a> values</p>
</li>
</ul>
</div>
</div>
</div>
</div>
<div class="sect3">
<h4 id="_see_also_625">See Also</h4>
<div class="paragraph">
<p><a href="#VkFormat">VkFormat</a>, <a href="#VkImageCreateFlags">VkImageCreateFlags</a>, <a href="#VkImageTiling">VkImageTiling</a>, <a href="#VkImageType">VkImageType</a>, <a href="#VkImageUsageFlags">VkImageUsageFlags</a>, <a href="#VkStructureType">VkStructureType</a>, <a href="#vkGetPhysicalDeviceImageFormatProperties2">vkGetPhysicalDeviceImageFormatProperties2</a>, <a href="#vkGetPhysicalDeviceImageFormatProperties2KHR">vkGetPhysicalDeviceImageFormatProperties2KHR</a></p>
</div>
</div>
<div class="sect3">
<h4 id="_document_notes_625">Document Notes</h4>
<div class="paragraph">
<p>For more information, see the Vulkan Specification at URL</p>
</div>
<div class="paragraph">
<p><a href="https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VkPhysicalDeviceImageFormatInfo2" class="bare">https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VkPhysicalDeviceImageFormatInfo2</a></p>
</div>
<div class="paragraph">
<p>This page is extracted from the Vulkan Specification.
Fixes and changes should be made to the Specification, not directly.</p>
</div>
<div style="page-break-after: always;"></div>
</div>
</div>
<div class="sect2">
<h3 id="_vkphysicaldeviceimageviewimageformatinfoext3">VkPhysicalDeviceImageViewImageFormatInfoEXT(3)</h3>
<div class="sect3">
<h4 id="_name_626">Name</h4>
<div class="paragraph">
<p>VkPhysicalDeviceImageViewImageFormatInfoEXT - Structure for providing image view type</p>
</div>
</div>
<div class="sect3">
<h4 id="_c_specification_626">C Specification</h4>
<div class="paragraph">
<p>The <code>VkPhysicalDeviceImageViewImageFormatInfoEXT</code> structure is defined
as:</p>
</div>
<div id="VkPhysicalDeviceImageViewImageFormatInfoEXT" class="listingblock">
<div class="content">
<pre class="highlight"><code class="language-c++" data-lang="c++">typedef struct VkPhysicalDeviceImageViewImageFormatInfoEXT {
    VkStructureType    sType;
    void*              pNext;
    VkImageViewType    imageViewType;
} VkPhysicalDeviceImageViewImageFormatInfoEXT;</code></pre>
</div>
</div>
</div>
<div class="sect3">
<h4 id="_members_263">Members</h4>
<div class="ulist">
<ul>
<li>
<p><code>sType</code> is the type of this structure.</p>
</li>
<li>
<p><code>pNext</code> is <code>NULL</code> or a pointer to an extension-specific structure.</p>
</li>
<li>
<p><code>imageViewType</code> is a <a href="#VkImageViewType">VkImageViewType</a> value specifying the type
of the image view.</p>
</li>
</ul>
</div>
</div>
<div class="sect3">
<h4 id="_description_626">Description</h4>
<div class="sidebarblock">
<div class="content">
<div class="title">Valid Usage (Implicit)</div>
<div class="ulist">
<ul>
<li>
<p><a id="VUID-VkPhysicalDeviceImageViewImageFormatInfoEXT-sType-sType"></a> <code>sType</code> <strong class="purple">must</strong> be <code>VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_IMAGE_VIEW_IMAGE_FORMAT_INFO_EXT</code></p>
</li>
<li>
<p><a id="VUID-VkPhysicalDeviceImageViewImageFormatInfoEXT-imageViewType-parameter"></a> <code>imageViewType</code> <strong class="purple">must</strong> be a valid <a href="#VkImageViewType">VkImageViewType</a> value</p>
</li>
</ul>
</div>
</div>
</div>
</div>
<div class="sect3">
<h4 id="_see_also_626">See Also</h4>
<div class="paragraph">
<p><a href="#VkImageViewType">VkImageViewType</a>, <a href="#VkStructureType">VkStructureType</a></p>
</div>
</div>
<div class="sect3">
<h4 id="_document_notes_626">Document Notes</h4>
<div class="paragraph">
<p>For more information, see the Vulkan Specification at URL</p>
</div>
<div class="paragraph">
<p><a href="https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VkPhysicalDeviceImageViewImageFormatInfoEXT" class="bare">https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VkPhysicalDeviceImageViewImageFormatInfoEXT</a></p>
</div>
<div class="paragraph">
<p>This page is extracted from the Vulkan Specification.
Fixes and changes should be made to the Specification, not directly.</p>
</div>
<div style="page-break-after: always;"></div>
</div>
</div>
<div class="sect2">
<h3 id="_vkphysicaldeviceinlineuniformblockfeaturesext3">VkPhysicalDeviceInlineUniformBlockFeaturesEXT(3)</h3>
<div class="sect3">
<h4 id="_name_627">Name</h4>
<div class="paragraph">
<p>VkPhysicalDeviceInlineUniformBlockFeaturesEXT - Structure describing inline uniform block features that can be supported by an implementation</p>
</div>
</div>
<div class="sect3">
<h4 id="_c_specification_627">C Specification</h4>
<div class="paragraph">
<p>The <code>VkPhysicalDeviceInlineUniformBlockFeaturesEXT</code> structure is defined
as:</p>
</div>
<div id="VkPhysicalDeviceInlineUniformBlockFeaturesEXT" class="listingblock">
<div class="content">
<pre class="highlight"><code class="language-c++" data-lang="c++">typedef struct VkPhysicalDeviceInlineUniformBlockFeaturesEXT {
    VkStructureType    sType;
    void*              pNext;
    VkBool32           inlineUniformBlock;
    VkBool32           descriptorBindingInlineUniformBlockUpdateAfterBind;
} VkPhysicalDeviceInlineUniformBlockFeaturesEXT;</code></pre>
</div>
</div>
</div>
<div class="sect3">
<h4 id="_members_264">Members</h4>
<div class="paragraph">
<p>The members of the <code>VkPhysicalDeviceInlineUniformBlockFeaturesEXT</code>
structure describe the following features:</p>
</div>
</div>
<div class="sect3">
<h4 id="_description_627">Description</h4>
<div class="ulist">
<ul>
<li>
<p><a id="features-inlineUniformBlock"></a> <code>inlineUniformBlock</code> indicates
whether the implementation supports inline uniform block descriptors.
If this feature is not enabled,
<code>VK_DESCRIPTOR_TYPE_INLINE_UNIFORM_BLOCK_EXT</code> <strong class="purple">must</strong> not be used.</p>
</li>
<li>
<p><a id="features-descriptorBindingInlineUniformBlockUpdateAfterBind"></a>
<code>descriptorBindingInlineUniformBlockUpdateAfterBind</code>
indicates whether the implementation supports updating inline uniform
block descriptors after a set is bound.
If this feature is not enabled,
<code>VK_DESCRIPTOR_BINDING_UPDATE_AFTER_BIND_BIT_EXT</code> <strong class="purple">must</strong> not be used
with <code>VK_DESCRIPTOR_TYPE_INLINE_UNIFORM_BLOCK_EXT</code>.</p>
</li>
</ul>
</div>
<div class="paragraph">
<p>If the <code>VkPhysicalDeviceInlineUniformBlockFeaturesEXT</code> structure is
included in the <code>pNext</code> chain of <a href="#VkPhysicalDeviceFeatures2">VkPhysicalDeviceFeatures2</a>, it is
filled with values indicating whether each feature is supported.
<code>VkPhysicalDeviceInlineUniformBlockFeaturesEXT</code> <strong class="purple">can</strong> also be used in the
<code>pNext</code> chain of <a href="#VkDeviceCreateInfo">VkDeviceCreateInfo</a> to enable features.</p>
</div>
<div class="sidebarblock">
<div class="content">
<div class="title">Valid Usage (Implicit)</div>
<div class="ulist">
<ul>
<li>
<p><a id="VUID-VkPhysicalDeviceInlineUniformBlockFeaturesEXT-sType-sType"></a> <code>sType</code> <strong class="purple">must</strong> be <code>VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_INLINE_UNIFORM_BLOCK_FEATURES_EXT</code></p>
</li>
</ul>
</div>
</div>
</div>
</div>
<div class="sect3">
<h4 id="_see_also_627">See Also</h4>
<div class="paragraph">
<p><code>VkBool32</code>, <a href="#VkStructureType">VkStructureType</a></p>
</div>
</div>
<div class="sect3">
<h4 id="_document_notes_627">Document Notes</h4>
<div class="paragraph">
<p>For more information, see the Vulkan Specification at URL</p>
</div>
<div class="paragraph">
<p><a href="https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VkPhysicalDeviceInlineUniformBlockFeaturesEXT" class="bare">https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VkPhysicalDeviceInlineUniformBlockFeaturesEXT</a></p>
</div>
<div class="paragraph">
<p>This page is extracted from the Vulkan Specification.
Fixes and changes should be made to the Specification, not directly.</p>
</div>
<div style="page-break-after: always;"></div>
</div>
</div>
<div class="sect2">
<h3 id="_vkphysicaldeviceinlineuniformblockpropertiesext3">VkPhysicalDeviceInlineUniformBlockPropertiesEXT(3)</h3>
<div class="sect3">
<h4 id="_name_628">Name</h4>
<div class="paragraph">
<p>VkPhysicalDeviceInlineUniformBlockPropertiesEXT - Structure describing inline uniform block properties that can be supported by an implementation</p>
</div>
</div>
<div class="sect3">
<h4 id="_c_specification_628">C Specification</h4>
<div class="paragraph">
<p>The <code>VkPhysicalDeviceInlineUniformBlockPropertiesEXT</code> structure is
defined as:</p>
</div>
<div id="VkPhysicalDeviceInlineUniformBlockPropertiesEXT" class="listingblock">
<div class="content">
<pre class="highlight"><code class="language-c++" data-lang="c++">typedef struct VkPhysicalDeviceInlineUniformBlockPropertiesEXT {
    VkStructureType    sType;
    void*              pNext;
    uint32_t           maxInlineUniformBlockSize;
    uint32_t           maxPerStageDescriptorInlineUniformBlocks;
    uint32_t           maxPerStageDescriptorUpdateAfterBindInlineUniformBlocks;
    uint32_t           maxDescriptorSetInlineUniformBlocks;
    uint32_t           maxDescriptorSetUpdateAfterBindInlineUniformBlocks;
} VkPhysicalDeviceInlineUniformBlockPropertiesEXT;</code></pre>
</div>
</div>
</div>
<div class="sect3">
<h4 id="_members_265">Members</h4>
<div class="paragraph">
<p>The members of the <code>VkPhysicalDeviceInlineUniformBlockPropertiesEXT</code>
structure describe the following implementation-dependent limits:</p>
</div>
</div>
<div class="sect3">
<h4 id="_description_628">Description</h4>
<div class="ulist">
<ul>
<li>
<p><code>sType</code> is the type of this structure.</p>
</li>
<li>
<p><code>pNext</code> is <code>NULL</code> or a pointer to an extension-specific structure.</p>
</li>
<li>
<p><a id="limits-maxInlineUniformBlockSize"></a> <code>maxInlineUniformBlockSize</code> is
the maximum size in bytes of an <a href="vkspec.html#descriptorsets-inlineuniformblock">inline uniform block</a> binding.</p>
</li>
<li>
<p><a id="limits-maxPerStageDescriptorInlineUniformBlocks"></a>
<code>maxPerStageDescriptorInlineUniformBlock</code> is the maximum number of
inline uniform block bindings that <strong class="purple">can</strong> be accessible to a single shader
stage in a pipeline layout.
Descriptor bindings with a descriptor type of
<code>VK_DESCRIPTOR_TYPE_INLINE_UNIFORM_BLOCK_EXT</code> count against this
limit.
Only descriptor bindings in descriptor set layouts created without the
<code>VK_DESCRIPTOR_SET_LAYOUT_CREATE_UPDATE_AFTER_BIND_POOL_BIT_EXT</code> bit
set count against this limit.</p>
</li>
<li>
<p><a id="limits-maxPerStageDescriptorUpdateAfterBindInlineUniformBlocks"></a>
<code>maxPerStageDescriptorUpdateAfterBindInlineUniformBlocks</code>
is similar to <code>maxPerStageDescriptorInlineUniformBlocks</code> but counts
descriptor bindings from descriptor sets created with or without the
<code>VK_DESCRIPTOR_SET_LAYOUT_CREATE_UPDATE_AFTER_BIND_POOL_BIT_EXT</code> bit
set.</p>
</li>
<li>
<p><a id="limits-maxDescriptorSetInlineUniformBlocks"></a>
<code>maxDescriptorSetInlineUniformBlocks</code> is the maximum number of
inline uniform block bindings that <strong class="purple">can</strong> be included in descriptor
bindings in a pipeline layout across all pipeline shader stages and
descriptor set numbers.
Descriptor bindings with a descriptor type of
<code>VK_DESCRIPTOR_TYPE_INLINE_UNIFORM_BLOCK_EXT</code> count against this
limit.
Only descriptor bindings in descriptor set layouts created without the
<code>VK_DESCRIPTOR_SET_LAYOUT_CREATE_UPDATE_AFTER_BIND_POOL_BIT_EXT</code> bit
set count against this limit.</p>
</li>
<li>
<p><a id="limits-maxDescriptorSetUpdateAfterBindInlineUniformBlocks"></a>
<code>maxDescriptorSetUpdateAfterBindInlineUniformBlocks</code>
is similar to <code>maxDescriptorSetInlineUniformBlocks</code> but counts
descriptor bindings from descriptor sets created with or without the
<code>VK_DESCRIPTOR_SET_LAYOUT_CREATE_UPDATE_AFTER_BIND_POOL_BIT_EXT</code> bit
set.</p>
</li>
</ul>
</div>
<div class="paragraph">
<p>If the <code>VkPhysicalDeviceInlineUniformBlockPropertiesEXT</code> structure is
included in the <code>pNext</code> chain of <a href="#VkPhysicalDeviceProperties2">VkPhysicalDeviceProperties2</a>, it
is filled with the implementation-dependent limits.</p>
</div>
<div class="sidebarblock">
<div class="content">
<div class="title">Valid Usage (Implicit)</div>
<div class="ulist">
<ul>
<li>
<p><a id="VUID-VkPhysicalDeviceInlineUniformBlockPropertiesEXT-sType-sType"></a> <code>sType</code> <strong class="purple">must</strong> be <code>VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_INLINE_UNIFORM_BLOCK_PROPERTIES_EXT</code></p>
</li>
</ul>
</div>
</div>
</div>
</div>
<div class="sect3">
<h4 id="_see_also_628">See Also</h4>
<div class="paragraph">
<p><a href="#VkStructureType">VkStructureType</a></p>
</div>
</div>
<div class="sect3">
<h4 id="_document_notes_628">Document Notes</h4>
<div class="paragraph">
<p>For more information, see the Vulkan Specification at URL</p>
</div>
<div class="paragraph">
<p><a href="https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VkPhysicalDeviceInlineUniformBlockPropertiesEXT" class="bare">https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VkPhysicalDeviceInlineUniformBlockPropertiesEXT</a></p>
</div>
<div class="paragraph">
<p>This page is extracted from the Vulkan Specification.
Fixes and changes should be made to the Specification, not directly.</p>
</div>
<div style="page-break-after: always;"></div>
</div>
</div>
<div class="sect2">
<h3 id="_vkphysicaldevicelimits3">VkPhysicalDeviceLimits(3)</h3>
<div class="sect3">
<h4 id="_name_629">Name</h4>
<div class="paragraph">
<p>VkPhysicalDeviceLimits - Structure reporting implementation-dependent physical device limits</p>
</div>
</div>
<div class="sect3">
<h4 id="_c_specification_629">C Specification</h4>
<div class="paragraph">
<p>The <code>VkPhysicalDeviceLimits</code> structure is defined as:</p>
</div>
<div id="VkPhysicalDeviceLimits" class="listingblock">
<div class="content">
<pre class="highlight"><code class="language-c++" data-lang="c++">typedef struct VkPhysicalDeviceLimits {
    uint32_t              maxImageDimension1D;
    uint32_t              maxImageDimension2D;
    uint32_t              maxImageDimension3D;
    uint32_t              maxImageDimensionCube;
    uint32_t              maxImageArrayLayers;
    uint32_t              maxTexelBufferElements;
    uint32_t              maxUniformBufferRange;
    uint32_t              maxStorageBufferRange;
    uint32_t              maxPushConstantsSize;
    uint32_t              maxMemoryAllocationCount;
    uint32_t              maxSamplerAllocationCount;
    VkDeviceSize          bufferImageGranularity;
    VkDeviceSize          sparseAddressSpaceSize;
    uint32_t              maxBoundDescriptorSets;
    uint32_t              maxPerStageDescriptorSamplers;
    uint32_t              maxPerStageDescriptorUniformBuffers;
    uint32_t              maxPerStageDescriptorStorageBuffers;
    uint32_t              maxPerStageDescriptorSampledImages;
    uint32_t              maxPerStageDescriptorStorageImages;
    uint32_t              maxPerStageDescriptorInputAttachments;
    uint32_t              maxPerStageResources;
    uint32_t              maxDescriptorSetSamplers;
    uint32_t              maxDescriptorSetUniformBuffers;
    uint32_t              maxDescriptorSetUniformBuffersDynamic;
    uint32_t              maxDescriptorSetStorageBuffers;
    uint32_t              maxDescriptorSetStorageBuffersDynamic;
    uint32_t              maxDescriptorSetSampledImages;
    uint32_t              maxDescriptorSetStorageImages;
    uint32_t              maxDescriptorSetInputAttachments;
    uint32_t              maxVertexInputAttributes;
    uint32_t              maxVertexInputBindings;
    uint32_t              maxVertexInputAttributeOffset;
    uint32_t              maxVertexInputBindingStride;
    uint32_t              maxVertexOutputComponents;
    uint32_t              maxTessellationGenerationLevel;
    uint32_t              maxTessellationPatchSize;
    uint32_t              maxTessellationControlPerVertexInputComponents;
    uint32_t              maxTessellationControlPerVertexOutputComponents;
    uint32_t              maxTessellationControlPerPatchOutputComponents;
    uint32_t              maxTessellationControlTotalOutputComponents;
    uint32_t              maxTessellationEvaluationInputComponents;
    uint32_t              maxTessellationEvaluationOutputComponents;
    uint32_t              maxGeometryShaderInvocations;
    uint32_t              maxGeometryInputComponents;
    uint32_t              maxGeometryOutputComponents;
    uint32_t              maxGeometryOutputVertices;
    uint32_t              maxGeometryTotalOutputComponents;
    uint32_t              maxFragmentInputComponents;
    uint32_t              maxFragmentOutputAttachments;
    uint32_t              maxFragmentDualSrcAttachments;
    uint32_t              maxFragmentCombinedOutputResources;
    uint32_t              maxComputeSharedMemorySize;
    uint32_t              maxComputeWorkGroupCount[3];
    uint32_t              maxComputeWorkGroupInvocations;
    uint32_t              maxComputeWorkGroupSize[3];
    uint32_t              subPixelPrecisionBits;
    uint32_t              subTexelPrecisionBits;
    uint32_t              mipmapPrecisionBits;
    uint32_t              maxDrawIndexedIndexValue;
    uint32_t              maxDrawIndirectCount;
    float                 maxSamplerLodBias;
    float                 maxSamplerAnisotropy;
    uint32_t              maxViewports;
    uint32_t              maxViewportDimensions[2];
    float                 viewportBoundsRange[2];
    uint32_t              viewportSubPixelBits;
    size_t                minMemoryMapAlignment;
    VkDeviceSize          minTexelBufferOffsetAlignment;
    VkDeviceSize          minUniformBufferOffsetAlignment;
    VkDeviceSize          minStorageBufferOffsetAlignment;
    int32_t               minTexelOffset;
    uint32_t              maxTexelOffset;
    int32_t               minTexelGatherOffset;
    uint32_t              maxTexelGatherOffset;
    float                 minInterpolationOffset;
    float                 maxInterpolationOffset;
    uint32_t              subPixelInterpolationOffsetBits;
    uint32_t              maxFramebufferWidth;
    uint32_t              maxFramebufferHeight;
    uint32_t              maxFramebufferLayers;
    VkSampleCountFlags    framebufferColorSampleCounts;
    VkSampleCountFlags    framebufferDepthSampleCounts;
    VkSampleCountFlags    framebufferStencilSampleCounts;
    VkSampleCountFlags    framebufferNoAttachmentsSampleCounts;
    uint32_t              maxColorAttachments;
    VkSampleCountFlags    sampledImageColorSampleCounts;
    VkSampleCountFlags    sampledImageIntegerSampleCounts;
    VkSampleCountFlags    sampledImageDepthSampleCounts;
    VkSampleCountFlags    sampledImageStencilSampleCounts;
    VkSampleCountFlags    storageImageSampleCounts;
    uint32_t              maxSampleMaskWords;
    VkBool32              timestampComputeAndGraphics;
    float                 timestampPeriod;
    uint32_t              maxClipDistances;
    uint32_t              maxCullDistances;
    uint32_t              maxCombinedClipAndCullDistances;
    uint32_t              discreteQueuePriorities;
    float                 pointSizeRange[2];
    float                 lineWidthRange[2];
    float                 pointSizeGranularity;
    float                 lineWidthGranularity;
    VkBool32              strictLines;
    VkBool32              standardSampleLocations;
    VkDeviceSize          optimalBufferCopyOffsetAlignment;
    VkDeviceSize          optimalBufferCopyRowPitchAlignment;
    VkDeviceSize          nonCoherentAtomSize;
} VkPhysicalDeviceLimits;</code></pre>
</div>
</div>
</div>
<div class="sect3">
<h4 id="_members_266">Members</h4>
<div class="paragraph">
<p>The <code>VkPhysicalDeviceLimits</code> are properties of the physical device.
These are available in the <code>limits</code> member of the
<a href="#VkPhysicalDeviceProperties">VkPhysicalDeviceProperties</a> structure which is returned from
<a href="#vkGetPhysicalDeviceProperties">vkGetPhysicalDeviceProperties</a>.</p>
</div>
<div class="ulist">
<ul>
<li>
<p><a id="limits-maxImageDimension1D"></a> <code>maxImageDimension1D</code> is the maximum
dimension (<code>width</code>) supported for all images created with an
<code>imageType</code> of <code>VK_IMAGE_TYPE_1D</code>.</p>
</li>
<li>
<p><a id="limits-maxImageDimension2D"></a> <code>maxImageDimension2D</code> is the maximum
dimension (<code>width</code> or <code>height</code>) supported for all images created
with an <code>imageType</code> of <code>VK_IMAGE_TYPE_2D</code> and without
<code>VK_IMAGE_CREATE_CUBE_COMPATIBLE_BIT</code> set in <code>flags</code>.</p>
</li>
<li>
<p><a id="limits-maxImageDimension3D"></a> <code>maxImageDimension3D</code> is the maximum
dimension (<code>width</code>, <code>height</code>, or <code>depth</code>) supported for all
images created with an <code>imageType</code> of <code>VK_IMAGE_TYPE_3D</code>.</p>
</li>
<li>
<p><a id="limits-maxImageDimensionCube"></a> <code>maxImageDimensionCube</code> is the
maximum dimension (<code>width</code> or <code>height</code>) supported for all images
created with an <code>imageType</code> of <code>VK_IMAGE_TYPE_2D</code> and with
<code>VK_IMAGE_CREATE_CUBE_COMPATIBLE_BIT</code> set in <code>flags</code>.</p>
</li>
<li>
<p><a id="limits-maxImageArrayLayers"></a> <code>maxImageArrayLayers</code> is the maximum
number of layers (<code>arrayLayers</code>) for an image.</p>
</li>
<li>
<p><a id="limits-maxTexelBufferElements"></a> <code>maxTexelBufferElements</code> is the
maximum number of addressable texels for a buffer view created on a
buffer which was created with the
<code>VK_BUFFER_USAGE_UNIFORM_TEXEL_BUFFER_BIT</code> or
<code>VK_BUFFER_USAGE_STORAGE_TEXEL_BUFFER_BIT</code> set in the <code>usage</code>
member of the <code>VkBufferCreateInfo</code> structure.</p>
</li>
<li>
<p><a id="limits-maxUniformBufferRange"></a> <code>maxUniformBufferRange</code> is the
maximum value that <strong class="purple">can</strong> be specified in the <code>range</code> member of any
<a href="#VkDescriptorBufferInfo">VkDescriptorBufferInfo</a> structures passed to a call to
<a href="#vkUpdateDescriptorSets">vkUpdateDescriptorSets</a> for descriptors of type
<code>VK_DESCRIPTOR_TYPE_UNIFORM_BUFFER</code> or
<code>VK_DESCRIPTOR_TYPE_UNIFORM_BUFFER_DYNAMIC</code>.</p>
</li>
<li>
<p><a id="limits-maxStorageBufferRange"></a> <code>maxStorageBufferRange</code> is the
maximum value that <strong class="purple">can</strong> be specified in the <code>range</code> member of any
<a href="#VkDescriptorBufferInfo">VkDescriptorBufferInfo</a> structures passed to a call to
<a href="#vkUpdateDescriptorSets">vkUpdateDescriptorSets</a> for descriptors of type
<code>VK_DESCRIPTOR_TYPE_STORAGE_BUFFER</code> or
<code>VK_DESCRIPTOR_TYPE_STORAGE_BUFFER_DYNAMIC</code>.</p>
</li>
<li>
<p><a id="limits-maxPushConstantsSize"></a> <code>maxPushConstantsSize</code> is the
maximum size, in bytes, of the pool of push constant memory.
For each of the push constant ranges indicated by the
<code>pPushConstantRanges</code> member of the <code>VkPipelineLayoutCreateInfo</code>
structure, <span class="eq">(<code>offset</code> +  <code>size</code>)</span> <strong class="purple">must</strong> be less than or
equal to this limit.</p>
</li>
<li>
<p><a id="limits-maxMemoryAllocationCount"></a> <code>maxMemoryAllocationCount</code> is
the maximum number of device memory allocations, as created by
<a href="#vkAllocateMemory">vkAllocateMemory</a>, which <strong class="purple">can</strong> simultaneously exist.</p>
</li>
<li>
<p><a id="limits-maxSamplerAllocationCount"></a> <code>maxSamplerAllocationCount</code> is
the maximum number of sampler objects, as created by
<a href="#vkCreateSampler">vkCreateSampler</a>, which <strong class="purple">can</strong> simultaneously exist on a device.</p>
</li>
<li>
<p><a id="limits-bufferImageGranularity"></a> <code>bufferImageGranularity</code> is the
granularity, in bytes, at which buffer or linear image resources, and
optimal image resources <strong class="purple">can</strong> be bound to adjacent offsets in the same
<code>VkDeviceMemory</code> object without aliasing.
See <a href="vkspec.html#resources-bufferimagegranularity">Buffer-Image Granularity</a> for
more details.</p>
</li>
<li>
<p><a id="limits-sparseAddressSpaceSize"></a> <code>sparseAddressSpaceSize</code> is the
total amount of address space available, in bytes, for sparse memory
resources.
This is an upper bound on the sum of the size of all sparse resources,
regardless of whether any memory is bound to them.</p>
</li>
<li>
<p><a id="limits-maxBoundDescriptorSets"></a> <code>maxBoundDescriptorSets</code> is the
maximum number of descriptor sets that <strong class="purple">can</strong> be simultaneously used by a
pipeline.
All <code>DescriptorSet</code> decorations in shader modules <strong class="purple">must</strong> have a value
less than <code>maxBoundDescriptorSets</code>.
See <a href="vkspec.html#descriptorsets-sets" class="bare">html/vkspec.html#descriptorsets-sets</a>.</p>
</li>
<li>
<p><a id="limits-maxPerStageDescriptorSamplers"></a>
<code>maxPerStageDescriptorSamplers</code> is the maximum number of samplers
that <strong class="purple">can</strong> be accessible to a single shader stage in a pipeline layout.
Descriptors with a type of <code>VK_DESCRIPTOR_TYPE_SAMPLER</code> or
<code>VK_DESCRIPTOR_TYPE_COMBINED_IMAGE_SAMPLER</code> count against this
limit.
Only descriptors in descriptor set layouts created without the
<code>VK_DESCRIPTOR_SET_LAYOUT_CREATE_UPDATE_AFTER_BIND_POOL_BIT_EXT</code> bit
set count against this limit.
A descriptor is accessible to a shader stage when the <code>stageFlags</code>
member of the <code>VkDescriptorSetLayoutBinding</code> structure has the bit
for that shader stage set.
See <a href="vkspec.html#descriptorsets-sampler" class="bare">html/vkspec.html#descriptorsets-sampler</a> and
<a href="vkspec.html#descriptorsets-combinedimagesampler" class="bare">html/vkspec.html#descriptorsets-combinedimagesampler</a>.</p>
</li>
<li>
<p><a id="limits-maxPerStageDescriptorUniformBuffers"></a>
<code>maxPerStageDescriptorUniformBuffers</code> is the maximum number of
uniform buffers that <strong class="purple">can</strong> be accessible to a single shader stage in a
pipeline layout.
Descriptors with a type of <code>VK_DESCRIPTOR_TYPE_UNIFORM_BUFFER</code> or
<code>VK_DESCRIPTOR_TYPE_UNIFORM_BUFFER_DYNAMIC</code> count against this
limit.
Only descriptors in descriptor set layouts created without the
<code>VK_DESCRIPTOR_SET_LAYOUT_CREATE_UPDATE_AFTER_BIND_POOL_BIT_EXT</code> bit
set count against this limit.
A descriptor is accessible to a shader stage when the <code>stageFlags</code>
member of the <code>VkDescriptorSetLayoutBinding</code> structure has the bit
for that shader stage set.
See <a href="vkspec.html#descriptorsets-uniformbuffer" class="bare">html/vkspec.html#descriptorsets-uniformbuffer</a> and
<a href="vkspec.html#descriptorsets-uniformbufferdynamic" class="bare">html/vkspec.html#descriptorsets-uniformbufferdynamic</a>.</p>
</li>
<li>
<p><a id="limits-maxPerStageDescriptorStorageBuffers"></a>
<code>maxPerStageDescriptorStorageBuffers</code> is the maximum number of
storage buffers that <strong class="purple">can</strong> be accessible to a single shader stage in a
pipeline layout.
Descriptors with a type of <code>VK_DESCRIPTOR_TYPE_STORAGE_BUFFER</code> or
<code>VK_DESCRIPTOR_TYPE_STORAGE_BUFFER_DYNAMIC</code> count against this
limit.
Only descriptors in descriptor set layouts created without the
<code>VK_DESCRIPTOR_SET_LAYOUT_CREATE_UPDATE_AFTER_BIND_POOL_BIT_EXT</code> bit
set count against this limit.
A descriptor is accessible to a pipeline shader stage when the
<code>stageFlags</code> member of the <code>VkDescriptorSetLayoutBinding</code>
structure has the bit for that shader stage set.
See <a href="vkspec.html#descriptorsets-storagebuffer" class="bare">html/vkspec.html#descriptorsets-storagebuffer</a> and
<a href="vkspec.html#descriptorsets-storagebufferdynamic" class="bare">html/vkspec.html#descriptorsets-storagebufferdynamic</a>.</p>
</li>
<li>
<p><a id="limits-maxPerStageDescriptorSampledImages"></a>
<code>maxPerStageDescriptorSampledImages</code> is the maximum number of
sampled images that <strong class="purple">can</strong> be accessible to a single shader stage in a
pipeline layout.
Descriptors with a type of
<code>VK_DESCRIPTOR_TYPE_COMBINED_IMAGE_SAMPLER</code>,
<code>VK_DESCRIPTOR_TYPE_SAMPLED_IMAGE</code>, or
<code>VK_DESCRIPTOR_TYPE_UNIFORM_TEXEL_BUFFER</code> count against this limit.
Only descriptors in descriptor set layouts created without the
<code>VK_DESCRIPTOR_SET_LAYOUT_CREATE_UPDATE_AFTER_BIND_POOL_BIT_EXT</code> bit
set count against this limit.
A descriptor is accessible to a pipeline shader stage when the
<code>stageFlags</code> member of the <code>VkDescriptorSetLayoutBinding</code>
structure has the bit for that shader stage set.
See <a href="vkspec.html#descriptorsets-combinedimagesampler" class="bare">html/vkspec.html#descriptorsets-combinedimagesampler</a>,
<a href="vkspec.html#descriptorsets-sampledimage" class="bare">html/vkspec.html#descriptorsets-sampledimage</a>, and
<a href="vkspec.html#descriptorsets-uniformtexelbuffer" class="bare">html/vkspec.html#descriptorsets-uniformtexelbuffer</a>.</p>
</li>
<li>
<p><a id="limits-maxPerStageDescriptorStorageImages"></a>
<code>maxPerStageDescriptorStorageImages</code> is the maximum number of
storage images that <strong class="purple">can</strong> be accessible to a single shader stage in a
pipeline layout.
Descriptors with a type of <code>VK_DESCRIPTOR_TYPE_STORAGE_IMAGE</code>, or
<code>VK_DESCRIPTOR_TYPE_STORAGE_TEXEL_BUFFER</code> count against this limit.
Only descriptors in descriptor set layouts created without the
<code>VK_DESCRIPTOR_SET_LAYOUT_CREATE_UPDATE_AFTER_BIND_POOL_BIT_EXT</code> bit
set count against this limit.
A descriptor is accessible to a pipeline shader stage when the
<code>stageFlags</code> member of the <code>VkDescriptorSetLayoutBinding</code>
structure has the bit for that shader stage set.
See <a href="vkspec.html#descriptorsets-storageimage" class="bare">html/vkspec.html#descriptorsets-storageimage</a>, and
<a href="vkspec.html#descriptorsets-storagetexelbuffer" class="bare">html/vkspec.html#descriptorsets-storagetexelbuffer</a>.</p>
</li>
<li>
<p><a id="limits-maxPerStageDescriptorInputAttachments"></a>
<code>maxPerStageDescriptorInputAttachments</code> is the maximum number of
input attachments that <strong class="purple">can</strong> be accessible to a single shader stage in a
pipeline layout.
Descriptors with a type of <code>VK_DESCRIPTOR_TYPE_INPUT_ATTACHMENT</code>
count against this limit.
Only descriptors in descriptor set layouts created without the
<code>VK_DESCRIPTOR_SET_LAYOUT_CREATE_UPDATE_AFTER_BIND_POOL_BIT_EXT</code> bit
set count against this limit.
A descriptor is accessible to a pipeline shader stage when the
<code>stageFlags</code> member of the <code>VkDescriptorSetLayoutBinding</code>
structure has the bit for that shader stage set.
These are only supported for the fragment stage.
See <a href="vkspec.html#descriptorsets-inputattachment" class="bare">html/vkspec.html#descriptorsets-inputattachment</a>.</p>
</li>
<li>
<p><a id="limits-maxPerStageResources"></a> <code>maxPerStageResources</code> is the
maximum number of resources that <strong class="purple">can</strong> be accessible to a single shader
stage in a pipeline layout.
Descriptors with a type of
<code>VK_DESCRIPTOR_TYPE_COMBINED_IMAGE_SAMPLER</code>,
<code>VK_DESCRIPTOR_TYPE_SAMPLED_IMAGE</code>,
<code>VK_DESCRIPTOR_TYPE_STORAGE_IMAGE</code>,
<code>VK_DESCRIPTOR_TYPE_UNIFORM_TEXEL_BUFFER</code>,
<code>VK_DESCRIPTOR_TYPE_STORAGE_TEXEL_BUFFER</code>,
<code>VK_DESCRIPTOR_TYPE_UNIFORM_BUFFER</code>,
<code>VK_DESCRIPTOR_TYPE_STORAGE_BUFFER</code>,
<code>VK_DESCRIPTOR_TYPE_UNIFORM_BUFFER_DYNAMIC</code>,
<code>VK_DESCRIPTOR_TYPE_STORAGE_BUFFER_DYNAMIC</code>, or
<code>VK_DESCRIPTOR_TYPE_INPUT_ATTACHMENT</code> count against this limit.
Only descriptors in descriptor set layouts created without the
<code>VK_DESCRIPTOR_SET_LAYOUT_CREATE_UPDATE_AFTER_BIND_POOL_BIT_EXT</code> bit
set count against this limit.
For the fragment shader stage the framebuffer color attachments also
count against this limit.</p>
</li>
<li>
<p><a id="limits-maxDescriptorSetSamplers"></a> <code>maxDescriptorSetSamplers</code> is
the maximum number of samplers that <strong class="purple">can</strong> be included in descriptor
bindings in a pipeline layout across all pipeline shader stages and
descriptor set numbers.
Descriptors with a type of <code>VK_DESCRIPTOR_TYPE_SAMPLER</code> or
<code>VK_DESCRIPTOR_TYPE_COMBINED_IMAGE_SAMPLER</code> count against this
limit.
Only descriptors in descriptor set layouts created without the
<code>VK_DESCRIPTOR_SET_LAYOUT_CREATE_UPDATE_AFTER_BIND_POOL_BIT_EXT</code> bit
set count against this limit.
See <a href="vkspec.html#descriptorsets-sampler" class="bare">html/vkspec.html#descriptorsets-sampler</a> and
<a href="vkspec.html#descriptorsets-combinedimagesampler" class="bare">html/vkspec.html#descriptorsets-combinedimagesampler</a>.</p>
</li>
<li>
<p><a id="limits-maxDescriptorSetUniformBuffers"></a>
<code>maxDescriptorSetUniformBuffers</code> is the maximum number of uniform
buffers that <strong class="purple">can</strong> be included in descriptor bindings in a pipeline
layout across all pipeline shader stages and descriptor set numbers.
Descriptors with a type of <code>VK_DESCRIPTOR_TYPE_UNIFORM_BUFFER</code> or
<code>VK_DESCRIPTOR_TYPE_UNIFORM_BUFFER_DYNAMIC</code> count against this
limit.
Only descriptors in descriptor set layouts created without the
<code>VK_DESCRIPTOR_SET_LAYOUT_CREATE_UPDATE_AFTER_BIND_POOL_BIT_EXT</code> bit
set count against this limit.
See <a href="vkspec.html#descriptorsets-uniformbuffer" class="bare">html/vkspec.html#descriptorsets-uniformbuffer</a> and
<a href="vkspec.html#descriptorsets-uniformbufferdynamic" class="bare">html/vkspec.html#descriptorsets-uniformbufferdynamic</a>.</p>
</li>
<li>
<p><a id="limits-maxDescriptorSetUniformBuffersDynamic"></a>
<code>maxDescriptorSetUniformBuffersDynamic</code> is the maximum number of
dynamic uniform buffers that <strong class="purple">can</strong> be included in descriptor bindings in
a pipeline layout across all pipeline shader stages and descriptor set
numbers.
Descriptors with a type of
<code>VK_DESCRIPTOR_TYPE_UNIFORM_BUFFER_DYNAMIC</code> count against this
limit.
Only descriptors in descriptor set layouts created without the
<code>VK_DESCRIPTOR_SET_LAYOUT_CREATE_UPDATE_AFTER_BIND_POOL_BIT_EXT</code> bit
set count against this limit.
See <a href="vkspec.html#descriptorsets-uniformbufferdynamic" class="bare">html/vkspec.html#descriptorsets-uniformbufferdynamic</a>.</p>
</li>
<li>
<p><a id="limits-maxDescriptorSetStorageBuffers"></a>
<code>maxDescriptorSetStorageBuffers</code> is the maximum number of storage
buffers that <strong class="purple">can</strong> be included in descriptor bindings in a pipeline
layout across all pipeline shader stages and descriptor set numbers.
Descriptors with a type of <code>VK_DESCRIPTOR_TYPE_STORAGE_BUFFER</code> or
<code>VK_DESCRIPTOR_TYPE_STORAGE_BUFFER_DYNAMIC</code> count against this
limit.
Only descriptors in descriptor set layouts created without the
<code>VK_DESCRIPTOR_SET_LAYOUT_CREATE_UPDATE_AFTER_BIND_POOL_BIT_EXT</code> bit
set count against this limit.
See <a href="vkspec.html#descriptorsets-storagebuffer" class="bare">html/vkspec.html#descriptorsets-storagebuffer</a> and
<a href="vkspec.html#descriptorsets-storagebufferdynamic" class="bare">html/vkspec.html#descriptorsets-storagebufferdynamic</a>.</p>
</li>
<li>
<p><a id="limits-maxDescriptorSetStorageBuffersDynamic"></a>
<code>maxDescriptorSetStorageBuffersDynamic</code> is the maximum number of
dynamic storage buffers that <strong class="purple">can</strong> be included in descriptor bindings in
a pipeline layout across all pipeline shader stages and descriptor set
numbers.
Descriptors with a type of
<code>VK_DESCRIPTOR_TYPE_STORAGE_BUFFER_DYNAMIC</code> count against this
limit.
Only descriptors in descriptor set layouts created without the
<code>VK_DESCRIPTOR_SET_LAYOUT_CREATE_UPDATE_AFTER_BIND_POOL_BIT_EXT</code> bit
set count against this limit.
See <a href="vkspec.html#descriptorsets-storagebufferdynamic" class="bare">html/vkspec.html#descriptorsets-storagebufferdynamic</a>.</p>
</li>
<li>
<p><a id="limits-maxDescriptorSetSampledImages"></a>
<code>maxDescriptorSetSampledImages</code> is the maximum number of sampled
images that <strong class="purple">can</strong> be included in descriptor bindings in a pipeline layout
across all pipeline shader stages and descriptor set numbers.
Descriptors with a type of
<code>VK_DESCRIPTOR_TYPE_COMBINED_IMAGE_SAMPLER</code>,
<code>VK_DESCRIPTOR_TYPE_SAMPLED_IMAGE</code>, or
<code>VK_DESCRIPTOR_TYPE_UNIFORM_TEXEL_BUFFER</code> count against this limit.
Only descriptors in descriptor set layouts created without the
<code>VK_DESCRIPTOR_SET_LAYOUT_CREATE_UPDATE_AFTER_BIND_POOL_BIT_EXT</code> bit
set count against this limit.
See <a href="vkspec.html#descriptorsets-combinedimagesampler" class="bare">html/vkspec.html#descriptorsets-combinedimagesampler</a>,
<a href="vkspec.html#descriptorsets-sampledimage" class="bare">html/vkspec.html#descriptorsets-sampledimage</a>, and
<a href="vkspec.html#descriptorsets-uniformtexelbuffer" class="bare">html/vkspec.html#descriptorsets-uniformtexelbuffer</a>.</p>
</li>
<li>
<p><a id="limits-maxDescriptorSetStorageImages"></a>
<code>maxDescriptorSetStorageImages</code> is the maximum number of storage
images that <strong class="purple">can</strong> be included in descriptor bindings in a pipeline layout
across all pipeline shader stages and descriptor set numbers.
Descriptors with a type of <code>VK_DESCRIPTOR_TYPE_STORAGE_IMAGE</code>, or
<code>VK_DESCRIPTOR_TYPE_STORAGE_TEXEL_BUFFER</code> count against this limit.
Only descriptors in descriptor set layouts created without the
<code>VK_DESCRIPTOR_SET_LAYOUT_CREATE_UPDATE_AFTER_BIND_POOL_BIT_EXT</code> bit
set count against this limit.
See <a href="vkspec.html#descriptorsets-storageimage" class="bare">html/vkspec.html#descriptorsets-storageimage</a>, and
<a href="vkspec.html#descriptorsets-storagetexelbuffer" class="bare">html/vkspec.html#descriptorsets-storagetexelbuffer</a>.</p>
</li>
<li>
<p><a id="limits-maxDescriptorSetInputAttachments"></a>
<code>maxDescriptorSetInputAttachments</code> is the maximum number of input
attachments that <strong class="purple">can</strong> be included in descriptor bindings in a pipeline
layout across all pipeline shader stages and descriptor set numbers.
Descriptors with a type of <code>VK_DESCRIPTOR_TYPE_INPUT_ATTACHMENT</code>
count against this limit.
Only descriptors in descriptor set layouts created without the
<code>VK_DESCRIPTOR_SET_LAYOUT_CREATE_UPDATE_AFTER_BIND_POOL_BIT_EXT</code> bit
set count against this limit.
See <a href="vkspec.html#descriptorsets-inputattachment" class="bare">html/vkspec.html#descriptorsets-inputattachment</a>.</p>
</li>
<li>
<p><a id="limits-maxVertexInputAttributes"></a> <code>maxVertexInputAttributes</code> is
the maximum number of vertex input attributes that <strong class="purple">can</strong> be specified for
a graphics pipeline.
These are described in the array of
<code>VkVertexInputAttributeDescription</code> structures that are provided at
graphics pipeline creation time via the
<code>pVertexAttributeDescriptions</code> member of the
<code>VkPipelineVertexInputStateCreateInfo</code> structure.
See <a href="vkspec.html#fxvertex-attrib" class="bare">html/vkspec.html#fxvertex-attrib</a> and <a href="vkspec.html#fxvertex-input" class="bare">html/vkspec.html#fxvertex-input</a>.</p>
</li>
<li>
<p><a id="limits-maxVertexInputBindings"></a> <code>maxVertexInputBindings</code> is the
maximum number of vertex buffers that <strong class="purple">can</strong> be specified for providing
vertex attributes to a graphics pipeline.
These are described in the array of
<code>VkVertexInputBindingDescription</code> structures that are provided at
graphics pipeline creation time via the <code>pVertexBindingDescriptions</code>
member of the <code>VkPipelineVertexInputStateCreateInfo</code> structure.
The <code>binding</code> member of <code>VkVertexInputBindingDescription</code> <strong class="purple">must</strong>
be less than this limit.
See <a href="vkspec.html#fxvertex-input" class="bare">html/vkspec.html#fxvertex-input</a>.</p>
</li>
<li>
<p><a id="limits-maxVertexInputAttributeOffset"></a>
<code>maxVertexInputAttributeOffset</code> is the maximum vertex input
attribute offset that <strong class="purple">can</strong> be added to the vertex input binding stride.
The <code>offset</code> member of the <code>VkVertexInputAttributeDescription</code>
structure <strong class="purple">must</strong> be less than or equal to this limit.
See <a href="vkspec.html#fxvertex-input" class="bare">html/vkspec.html#fxvertex-input</a>.</p>
</li>
<li>
<p><a id="limits-maxVertexInputBindingStride"></a> <code>maxVertexInputBindingStride</code>
is the maximum vertex input binding stride that <strong class="purple">can</strong> be specified in a
vertex input binding.
The <code>stride</code> member of the <code>VkVertexInputBindingDescription</code>
structure <strong class="purple">must</strong> be less than or equal to this limit.
See <a href="vkspec.html#fxvertex-input" class="bare">html/vkspec.html#fxvertex-input</a>.</p>
</li>
<li>
<p><a id="limits-maxVertexOutputComponents"></a> <code>maxVertexOutputComponents</code> is
the maximum number of components of output variables which <strong class="purple">can</strong> be
output by a vertex shader.
See <a href="vkspec.html#shaders-vertex" class="bare">html/vkspec.html#shaders-vertex</a>.</p>
</li>
<li>
<p><a id="limits-maxTessellationGenerationLevel"></a>
<code>maxTessellationGenerationLevel</code> is the maximum tessellation
generation level supported by the fixed-function tessellation primitive
generator.
See <a href="vkspec.html#tessellation" class="bare">html/vkspec.html#tessellation</a>.</p>
</li>
<li>
<p><a id="limits-maxTessellationPatchSize"></a> <code>maxTessellationPatchSize</code> is
the maximum patch size, in vertices, of patches that <strong class="purple">can</strong> be processed
by the tessellation control shader and tessellation primitive generator.
The <code>patchControlPoints</code> member of the
<code>VkPipelineTessellationStateCreateInfo</code> structure specified at
pipeline creation time and the value provided in the <code>OutputVertices</code>
execution mode of shader modules <strong class="purple">must</strong> be less than or equal to this
limit.
See <a href="vkspec.html#tessellation" class="bare">html/vkspec.html#tessellation</a>.</p>
</li>
<li>
<p><a id="limits-maxTessellationControlPerVertexInputComponents"></a>
<code>maxTessellationControlPerVertexInputComponents</code> is the maximum
number of components of input variables which <strong class="purple">can</strong> be provided as
per-vertex inputs to the tessellation control shader stage.</p>
</li>
<li>
<p><a id="limits-maxTessellationControlPerVertexOutputComponents"></a>
<code>maxTessellationControlPerVertexOutputComponents</code> is the maximum
number of components of per-vertex output variables which <strong class="purple">can</strong> be output
from the tessellation control shader stage.</p>
</li>
<li>
<p><a id="limits-maxTessellationControlPerPatchOutputComponents"></a>
<code>maxTessellationControlPerPatchOutputComponents</code> is the maximum
number of components of per-patch output variables which <strong class="purple">can</strong> be output
from the tessellation control shader stage.</p>
</li>
<li>
<p><a id="limits-maxTessellationControlTotalOutputComponents"></a>
<code>maxTessellationControlTotalOutputComponents</code> is the maximum total
number of components of per-vertex and per-patch output variables which
<strong class="purple">can</strong> be output from the tessellation control shader stage.</p>
</li>
<li>
<p><a id="limits-maxTessellationEvaluationInputComponents"></a>
<code>maxTessellationEvaluationInputComponents</code> is the maximum number of
components of input variables which <strong class="purple">can</strong> be provided as per-vertex
inputs to the tessellation evaluation shader stage.</p>
</li>
<li>
<p><a id="limits-maxTessellationEvaluationOutputComponents"></a>
<code>maxTessellationEvaluationOutputComponents</code> is the maximum number of
components of per-vertex output variables which <strong class="purple">can</strong> be output from the
tessellation evaluation shader stage.</p>
</li>
<li>
<p><a id="limits-maxGeometryShaderInvocations"></a>
<code>maxGeometryShaderInvocations</code> is the maximum invocation count
supported for instanced geometry shaders.
The value provided in the <code>Invocations</code> execution mode of shader
modules <strong class="purple">must</strong> be less than or equal to this limit.
See <a href="vkspec.html#geometry" class="bare">html/vkspec.html#geometry</a>.</p>
</li>
<li>
<p><a id="limits-maxGeometryInputComponents"></a> <code>maxGeometryInputComponents</code>
is the maximum number of components of input variables which <strong class="purple">can</strong> be
provided as inputs to the geometry shader stage.</p>
</li>
<li>
<p><a id="limits-maxGeometryOutputComponents"></a> <code>maxGeometryOutputComponents</code>
is the maximum number of components of output variables which <strong class="purple">can</strong> be
output from the geometry shader stage.</p>
</li>
<li>
<p><a id="limits-maxGeometryOutputVertices"></a> <code>maxGeometryOutputVertices</code> is
the maximum number of vertices which <strong class="purple">can</strong> be emitted by any geometry
shader.</p>
</li>
<li>
<p><a id="limits-maxGeometryTotalOutputComponents"></a>
<code>maxGeometryTotalOutputComponents</code> is the maximum total number of
components of output, across all emitted vertices, which <strong class="purple">can</strong> be output
from the geometry shader stage.</p>
</li>
<li>
<p><a id="limits-maxFragmentInputComponents"></a> <code>maxFragmentInputComponents</code>
is the maximum number of components of input variables which <strong class="purple">can</strong> be
provided as inputs to the fragment shader stage.</p>
</li>
<li>
<p><a id="limits-maxFragmentOutputAttachments"></a>
<code>maxFragmentOutputAttachments</code> is the maximum number of output
attachments which <strong class="purple">can</strong> be written to by the fragment shader stage.</p>
</li>
<li>
<p><a id="limits-maxFragmentDualSrcAttachments"></a>
<code>maxFragmentDualSrcAttachments</code> is the maximum number of output
attachments which <strong class="purple">can</strong> be written to by the fragment shader stage when
blending is enabled and one of the dual source blend modes is in use.
See <a href="vkspec.html#framebuffer-dsb" class="bare">html/vkspec.html#framebuffer-dsb</a> and <a href="vkspec.html#features-dualSrcBlend">dualSrcBlend</a>.</p>
</li>
<li>
<p><a id="limits-maxFragmentCombinedOutputResources"></a>
<code>maxFragmentCombinedOutputResources</code> is the total number of storage
buffers, storage images, and output buffers which <strong class="purple">can</strong> be used in the
fragment shader stage.</p>
</li>
<li>
<p><a id="limits-maxComputeSharedMemorySize"></a> <code>maxComputeSharedMemorySize</code>
is the maximum total storage size, in bytes, available for variables
declared with the <code>Workgroup</code> storage class in shader modules (or
with the <code>shared</code> storage qualifier in GLSL) in the compute shader
stage.
The amount of storage consumed by the variables declared with the
<code>Workgroup</code> storage class is implementation-dependent.
However, the amount of storage consumed may not exceed the largest block
size that would be obtained if all active variables declared with
<code>Workgroup</code> storage class were assigned offsets in an arbitrary order
by successively taking the smallest valid offset according to the
<a href="vkspec.html#interfaces-resources-layout-std430">Standard Storage Buffer Layout</a>
rules.
(This is equivalent to using the GLSL std430 layout rules.)</p>
</li>
<li>
<p><a id="limits-maxComputeWorkGroupCount"></a> <code>maxComputeWorkGroupCount</code>[3] is
the maximum number of local workgroups that <strong class="purple">can</strong> be dispatched by a
single dispatch command.
These three values represent the maximum number of local workgroups for
the X, Y, and Z dimensions, respectively.
The workgroup count parameters to the dispatch commands <strong class="purple">must</strong> be less
than or equal to the corresponding limit.
See <a href="vkspec.html#dispatch" class="bare">html/vkspec.html#dispatch</a>.</p>
</li>
<li>
<p><a id="limits-maxComputeWorkGroupInvocations"></a>
<code>maxComputeWorkGroupInvocations</code> is the maximum total number of
compute shader invocations in a single local workgroup.
The product of the X, Y, and Z sizes as specified by the <code>LocalSize</code>
execution mode in shader modules and by the object decorated by the
<code>WorkgroupSize</code> decoration <strong class="purple">must</strong> be less than or equal to this limit.</p>
</li>
<li>
<p><a id="limits-maxComputeWorkGroupSize"></a> <code>maxComputeWorkGroupSize</code>[3] is
the maximum size of a local compute workgroup, per dimension.
These three values represent the maximum local workgroup size in the X,
Y, and Z dimensions, respectively.
The <code>x</code>, <code>y</code>, and <code>z</code> sizes specified by the <code>LocalSize</code>
execution mode and by the object decorated by the <code>WorkgroupSize</code>
decoration in shader modules <strong class="purple">must</strong> be less than or equal to the
corresponding limit.</p>
</li>
<li>
<p><a id="limits-subPixelPrecisionBits"></a> <code>subPixelPrecisionBits</code> is the
number of bits of subpixel precision in framebuffer coordinates
<span class="eq">x<sub>f</sub></span> and <span class="eq">y<sub>f</sub></span>.
See <a href="vkspec.html#primsrast" class="bare">html/vkspec.html#primsrast</a>.</p>
</li>
<li>
<p><a id="limits-subTexelPrecisionBits"></a> <code>subTexelPrecisionBits</code> is the
number of bits of precision in the division along an axis of an image
used for minification and magnification filters.
<span class="eq">2<sup><code>subTexelPrecisionBits</code></sup></span> is the actual number of divisions
along each axis of the image represented.
Sub-texel values calculated during image sampling will snap to these
locations when generating the filtered results.</p>
</li>
<li>
<p><a id="limits-mipmapPrecisionBits"></a> <code>mipmapPrecisionBits</code> is the number
of bits of division that the LOD calculation for mipmap fetching get
snapped to when determining the contribution from each mip level to the
mip filtered results.
<span class="eq">2<sup><code>mipmapPrecisionBits</code></sup></span> is the actual number of divisions.</p>
</li>
<li>
<p><a id="limits-maxDrawIndexedIndexValue"></a> <code>maxDrawIndexedIndexValue</code> is
the maximum index value that <strong class="purple">can</strong> be used for indexed draw calls when
using 32-bit indices.
This excludes the primitive restart index value of 0xFFFFFFFF.
See <a href="vkspec.html#features-fullDrawIndexUint32">fullDrawIndexUint32</a>.</p>
</li>
<li>
<p><a id="limits-maxDrawIndirectCount"></a> <code>maxDrawIndirectCount</code> is the
maximum draw count that is supported for indirect draw calls.
See <a href="vkspec.html#features-multiDrawIndirect">multiDrawIndirect</a>.</p>
</li>
<li>
<p><a id="limits-maxSamplerLodBias"></a> <code>maxSamplerLodBias</code> is the maximum
absolute sampler LOD bias.
The sum of the <code>mipLodBias</code> member of the <code>VkSamplerCreateInfo</code>
structure and the <code>Bias</code> operand of image sampling operations in
shader modules (or 0 if no <code>Bias</code> operand is provided to an image
sampling operation) are clamped to the range
<span class="eq">[-<code>maxSamplerLodBias</code>,+<code>maxSamplerLodBias</code>]</span>.
See <a href="vkspec.html#samplers-mipLodBias" class="bare">html/vkspec.html#samplers-mipLodBias</a>.</p>
</li>
<li>
<p><a id="limits-maxSamplerAnisotropy"></a> <code>maxSamplerAnisotropy</code> is the
maximum degree of sampler anisotropy.
The maximum degree of anisotropic filtering used for an image sampling
operation is the minimum of the <code>maxAnisotropy</code> member of the
<code>VkSamplerCreateInfo</code> structure and this limit.
See <a href="vkspec.html#samplers-maxAnisotropy" class="bare">html/vkspec.html#samplers-maxAnisotropy</a>.</p>
</li>
<li>
<p><a id="limits-maxViewports"></a> <code>maxViewports</code> is the maximum number of
active viewports.
The <code>viewportCount</code> member of the
<code>VkPipelineViewportStateCreateInfo</code> structure that is provided at
pipeline creation <strong class="purple">must</strong> be less than or equal to this limit.</p>
</li>
<li>
<p><a id="limits-maxViewportDimensions"></a> <code>maxViewportDimensions</code>[2] are the
maximum viewport dimensions in the X (width) and Y (height) dimensions,
respectively.
The maximum viewport dimensions <strong class="purple">must</strong> be greater than or equal to the
largest image which <strong class="purple">can</strong> be created and used as a framebuffer
attachment.
See <a href="vkspec.html#vertexpostproc-viewport">Controlling the Viewport</a>.</p>
</li>
<li>
<p><a id="limits-viewportboundsrange"></a> <code>viewportBoundsRange</code>[2] is the
<span class="eq">[minimum, maximum]</span> range that the corners of a viewport <strong class="purple">must</strong> be
contained in.
This range <strong class="purple">must</strong> be at least <span class="eq">[-2 × <code>size</code>, 2 ×
<code>size</code> - 1]</span>, where <span class="eq"><code>size</code> =
max(<code>maxViewportDimensions</code>[0], <code>maxViewportDimensions</code>[1])</span>.
See <a href="vkspec.html#vertexpostproc-viewport">Controlling the Viewport</a>.</p>
<div class="admonitionblock note">
<table>
<tr>
<td class="icon">
<i class="fa icon-note" title="Note"></i>
</td>
<td class="content">
<div class="title">Note</div>
<div class="paragraph">
<p>The intent of the <code>viewportBoundsRange</code> limit is to allow a maximum
sized viewport to be arbitrarily shifted relative to the output target as
long as at least some portion intersects.
This would give a bounds limit of <span class="eq">[-<code>size</code> +  1, 2 ×
<code>size</code> - 1]</span> which would allow all possible non-empty-set intersections
of the output target and the viewport.
Since these numbers are typically powers of two, picking the signed number
range using the smallest possible number of bits ends up with the specified
range.</p>
</div>
</td>
</tr>
</table>
</div>
</li>
<li>
<p><a id="limits-viewportSubPixelBits"></a> <code>viewportSubPixelBits</code> is the number
of bits of subpixel precision for viewport bounds.
The subpixel precision that floating-point viewport bounds are
interpreted at is given by this limit.</p>
</li>
<li>
<p><a id="limits-minMemoryMapAlignment"></a> <code>minMemoryMapAlignment</code> is the
minimum <strong class="purple">required</strong> alignment, in bytes, of host visible memory
allocations within the host address space.
When mapping a memory allocation with <a href="#vkMapMemory">vkMapMemory</a>, subtracting
<code>offset</code> bytes from the returned pointer will always produce an
integer multiple of this limit.
See <a href="vkspec.html#memory-device-hostaccess" class="bare">html/vkspec.html#memory-device-hostaccess</a>.</p>
</li>
<li>
<p><a id="limits-minTexelBufferOffsetAlignment"></a>
<code>minTexelBufferOffsetAlignment</code> is the minimum <strong class="purple">required</strong> alignment,
in bytes, for the <code>offset</code> member of the
<code>VkBufferViewCreateInfo</code> structure for texel buffers.
When a buffer view is created for a buffer which was created with
<code>VK_BUFFER_USAGE_UNIFORM_TEXEL_BUFFER_BIT</code> or
<code>VK_BUFFER_USAGE_STORAGE_TEXEL_BUFFER_BIT</code> set in the <code>usage</code>
member of the <code>VkBufferCreateInfo</code> structure, the <code>offset</code> <strong class="purple">must</strong>
be an integer multiple of this limit.</p>
</li>
<li>
<p><a id="limits-minUniformBufferOffsetAlignment"></a>
<code>minUniformBufferOffsetAlignment</code> is the minimum <strong class="purple">required</strong>
alignment, in bytes, for the <code>offset</code> member of the
<code>VkDescriptorBufferInfo</code> structure for uniform buffers.
When a descriptor of type <code>VK_DESCRIPTOR_TYPE_UNIFORM_BUFFER</code> or
<code>VK_DESCRIPTOR_TYPE_UNIFORM_BUFFER_DYNAMIC</code> is updated, the
<code>offset</code> <strong class="purple">must</strong> be an integer multiple of this limit.
Similarly, dynamic offsets for uniform buffers <strong class="purple">must</strong> be multiples of
this limit.</p>
</li>
<li>
<p><a id="limits-minStorageBufferOffsetAlignment"></a>
<code>minStorageBufferOffsetAlignment</code> is the minimum <strong class="purple">required</strong>
alignment, in bytes, for the <code>offset</code> member of the
<code>VkDescriptorBufferInfo</code> structure for storage buffers.
When a descriptor of type <code>VK_DESCRIPTOR_TYPE_STORAGE_BUFFER</code> or
<code>VK_DESCRIPTOR_TYPE_STORAGE_BUFFER_DYNAMIC</code> is updated, the
<code>offset</code> <strong class="purple">must</strong> be an integer multiple of this limit.
Similarly, dynamic offsets for storage buffers <strong class="purple">must</strong> be multiples of
this limit.</p>
</li>
<li>
<p><a id="limits-minTexelOffset"></a> <code>minTexelOffset</code> is the minimum offset
value for the <code>ConstOffset</code> image operand of any of the
<code>OpImageSample</code>* or <code>OpImageFetch</code>* image instructions.</p>
</li>
<li>
<p><a id="limits-maxTexelOffset"></a> <code>maxTexelOffset</code> is the maximum offset
value for the <code>ConstOffset</code> image operand of any of the
<code>OpImageSample</code>* or <code>OpImageFetch</code>* image instructions.</p>
</li>
<li>
<p><a id="limits-minTexelGatherOffset"></a> <code>minTexelGatherOffset</code> is the
minimum offset value for the <code>Offset</code> or <code>ConstOffsets</code> image
operands of any of the <code>OpImage</code>*<code>Gather</code> image instructions.</p>
</li>
<li>
<p><a id="limits-maxTexelGatherOffset"></a> <code>maxTexelGatherOffset</code> is the
maximum offset value for the <code>Offset</code> or <code>ConstOffsets</code> image
operands of any of the <code>OpImage</code>*<code>Gather</code> image instructions.</p>
</li>
<li>
<p><a id="limits-minInterpolationOffset"></a> <code>minInterpolationOffset</code> is the
minimum negative offset value for the <code>offset</code> operand of the
<code>InterpolateAtOffset</code> extended instruction.</p>
</li>
<li>
<p><a id="limits-maxInterpolationOffset"></a> <code>maxInterpolationOffset</code> is the
maximum positive offset value for the <code>offset</code> operand of the
<code>InterpolateAtOffset</code> extended instruction.</p>
</li>
<li>
<p><a id="limits-subPixelInterpolationOffsetBits"></a>
<code>subPixelInterpolationOffsetBits</code> is the number of subpixel
fractional bits that the <code>x</code> and <code>y</code> offsets to the
<code>InterpolateAtOffset</code> extended instruction <strong class="purple">may</strong> be rounded to as
fixed-point values.</p>
</li>
<li>
<p><a id="limits-maxFramebufferWidth"></a> <code>maxFramebufferWidth</code> is the maximum
width for a framebuffer.
The <code>width</code> member of the <code>VkFramebufferCreateInfo</code> structure
<strong class="purple">must</strong> be less than or equal to this limit.</p>
</li>
<li>
<p><a id="limits-maxFramebufferHeight"></a> <code>maxFramebufferHeight</code> is the
maximum height for a framebuffer.
The <code>height</code> member of the <code>VkFramebufferCreateInfo</code> structure
<strong class="purple">must</strong> be less than or equal to this limit.</p>
</li>
<li>
<p><a id="limits-maxFramebufferLayers"></a> <code>maxFramebufferLayers</code> is the
maximum layer count for a layered framebuffer.
The <code>layers</code> member of the <code>VkFramebufferCreateInfo</code> structure
<strong class="purple">must</strong> be less than or equal to this limit.</p>
</li>
<li>
<p><a id="limits-framebufferColorSampleCounts"></a>
<code>framebufferColorSampleCounts</code> is a bitmask<sup>1</sup> of
<a href="#VkSampleCountFlagBits">VkSampleCountFlagBits</a> indicating the color sample counts that are
supported for all framebuffer color attachments with floating- or
fixed-point formats.
There is no limit that specifies the color sample counts that are
supported for all color attachments with integer formats.</p>
</li>
<li>
<p><a id="limits-framebufferDepthSampleCounts"></a>
<code>framebufferDepthSampleCounts</code> is a bitmask<sup>1</sup> of
<a href="#VkSampleCountFlagBits">VkSampleCountFlagBits</a> indicating the supported depth sample counts
for all framebuffer depth/stencil attachments, when the format includes
a depth component.</p>
</li>
<li>
<p><code>framebufferStencilSampleCounts</code> is a bitmask<sup>1</sup> of
<a href="#VkSampleCountFlagBits">VkSampleCountFlagBits</a> indicating the supported stencil sample
counts for all framebuffer depth/stencil attachments, when the format
includes a stencil component.</p>
</li>
<li>
<p><code>framebufferNoAttachmentsSampleCounts</code> is a bitmask<sup>1</sup> of
<a href="#VkSampleCountFlagBits">VkSampleCountFlagBits</a> indicating the supported sample counts for a
framebuffer with no attachments.</p>
</li>
<li>
<p><a id="limits-maxColorAttachments"></a> <code>maxColorAttachments</code> is the maximum
number of color attachments that <strong class="purple">can</strong> be used by a subpass in a render
pass.
The <code>colorAttachmentCount</code> member of the <code>VkSubpassDescription</code>
structure <strong class="purple">must</strong> be less than or equal to this limit.</p>
</li>
<li>
<p><a id="limits-sampledImageColorSampleCounts"></a>
<code>sampledImageColorSampleCounts</code> is a bitmask<sup>1</sup> of
<a href="#VkSampleCountFlagBits">VkSampleCountFlagBits</a> indicating the sample counts supported for
all 2D images created with <code>VK_IMAGE_TILING_OPTIMAL</code>, <code>usage</code>
containing <code>VK_IMAGE_USAGE_SAMPLED_BIT</code>, and a non-integer color
format.</p>
</li>
<li>
<p><a id="limits-sampledImageIntegerSampleCounts"></a>
<code>sampledImageIntegerSampleCounts</code> is a bitmask<sup>1</sup> of
<a href="#VkSampleCountFlagBits">VkSampleCountFlagBits</a> indicating the sample counts supported for
all 2D images created with <code>VK_IMAGE_TILING_OPTIMAL</code>, <code>usage</code>
containing <code>VK_IMAGE_USAGE_SAMPLED_BIT</code>, and an integer color
format.</p>
</li>
<li>
<p><a id="limits-sampledImageDepthSampleCounts"></a>
<code>sampledImageDepthSampleCounts</code> is a bitmask<sup>1</sup> of
<a href="#VkSampleCountFlagBits">VkSampleCountFlagBits</a> indicating the sample counts supported for
all 2D images created with <code>VK_IMAGE_TILING_OPTIMAL</code>, <code>usage</code>
containing <code>VK_IMAGE_USAGE_SAMPLED_BIT</code>, and a depth format.</p>
</li>
<li>
<p><a id="limits-sampledImageStencilSampleCounts"></a>
<code>sampledImageStencilSampleCounts</code> is a bitmask<sup>1</sup> of
<a href="#VkSampleCountFlagBits">VkSampleCountFlagBits</a> indicating the sample supported for all 2D
images created with <code>VK_IMAGE_TILING_OPTIMAL</code>, <code>usage</code>
containing <code>VK_IMAGE_USAGE_SAMPLED_BIT</code>, and a stencil format.</p>
</li>
<li>
<p><a id="limits-storageImageSampleCounts"></a> <code>storageImageSampleCounts</code> is a
bitmask<sup>1</sup> of <a href="#VkSampleCountFlagBits">VkSampleCountFlagBits</a> indicating the sample counts
supported for all 2D images created with <code>VK_IMAGE_TILING_OPTIMAL</code>,
and <code>usage</code> containing <code>VK_IMAGE_USAGE_STORAGE_BIT</code>.</p>
</li>
<li>
<p><a id="limits-maxSampleMaskWords"></a> <code>maxSampleMaskWords</code> is the maximum
number of array elements of a variable decorated with the
<code>SampleMask</code> built-in decoration.</p>
</li>
<li>
<p><a id="limits-timestampComputeAndGraphics"></a> <code>timestampComputeAndGraphics</code>
specifies support for timestamps on all graphics and compute queues.
If this limit is set to <code>VK_TRUE</code>, all queues that advertise the
<code>VK_QUEUE_GRAPHICS_BIT</code> or <code>VK_QUEUE_COMPUTE_BIT</code> in the
<code>VkQueueFamilyProperties</code>::<code>queueFlags</code> support
<code>VkQueueFamilyProperties</code>::<code>timestampValidBits</code> of at least 36.
See <a href="vkspec.html#queries-timestamps">Timestamp Queries</a>.</p>
</li>
<li>
<p><a id="limits-timestampPeriod"></a> <code>timestampPeriod</code> is the number of
nanoseconds <strong class="purple">required</strong> for a timestamp query to be incremented by 1.
See <a href="vkspec.html#queries-timestamps">Timestamp Queries</a>.</p>
</li>
<li>
<p><a id="limits-maxClipDistances"></a> <code>maxClipDistances</code> is the maximum number
of clip distances that <strong class="purple">can</strong> be used in a single shader stage.
The size of any array declared with the <code>ClipDistance</code> built-in
decoration in a shader module <strong class="purple">must</strong> be less than or equal to this limit.</p>
</li>
<li>
<p><a id="limits-maxCullDistances"></a> <code>maxCullDistances</code> is the maximum number
of cull distances that <strong class="purple">can</strong> be used in a single shader stage.
The size of any array declared with the <code>CullDistance</code> built-in
decoration in a shader module <strong class="purple">must</strong> be less than or equal to this limit.</p>
</li>
<li>
<p><a id="limits-maxCombinedClipAndCullDistances"></a>
<code>maxCombinedClipAndCullDistances</code> is the maximum combined number of
clip and cull distances that <strong class="purple">can</strong> be used in a single shader stage.
The sum of the sizes of any pair of arrays declared with the
<code>ClipDistance</code> and <code>CullDistance</code> built-in decoration used by a
single shader stage in a shader module <strong class="purple">must</strong> be less than or equal to
this limit.</p>
</li>
<li>
<p><a id="limits-discreteQueuePriorities"></a> <code>discreteQueuePriorities</code> is the
number of discrete priorities that <strong class="purple">can</strong> be assigned to a queue based on
the value of each member of
<code>VkDeviceQueueCreateInfo</code>::<code>pQueuePriorities</code>.
This <strong class="purple">must</strong> be at least 2, and levels <strong class="purple">must</strong> be spread evenly over the
range, with at least one level at 1.0, and another at 0.0.
See <a href="vkspec.html#devsandqueues-priority" class="bare">html/vkspec.html#devsandqueues-priority</a>.</p>
</li>
<li>
<p><a id="limits-pointSizeRange"></a> <code>pointSizeRange</code>[2] is the range
<span class="eq">[<code>minimum</code>,<code>maximum</code>]</span> of supported sizes for points.
Values written to variables decorated with the <code>PointSize</code> built-in
decoration are clamped to this range.</p>
</li>
<li>
<p><a id="limits-lineWidthRange"></a> <code>lineWidthRange</code>[2] is the range
<span class="eq">[<code>minimum</code>,<code>maximum</code>]</span> of supported widths for lines.
Values specified by the <code>lineWidth</code> member of the
<code>VkPipelineRasterizationStateCreateInfo</code> or the <code>lineWidth</code>
parameter to <code>vkCmdSetLineWidth</code> are clamped to this range.</p>
</li>
<li>
<p><a id="limits-pointSizeGranularity"></a> <code>pointSizeGranularity</code> is the
granularity of supported point sizes.
Not all point sizes in the range defined by <code>pointSizeRange</code> are
supported.
This limit specifies the granularity (or increment) between successive
supported point sizes.</p>
</li>
<li>
<p><a id="limits-lineWidthGranularity"></a> <code>lineWidthGranularity</code> is the
granularity of supported line widths.
Not all line widths in the range defined by <code>lineWidthRange</code> are
supported.
This limit specifies the granularity (or increment) between successive
supported line widths.</p>
</li>
<li>
<p><a id="limits-strictLines"></a> <code>strictLines</code> specifies whether lines are
rasterized according to the preferred method of rasterization.
If set to <code>VK_FALSE</code>, lines <strong class="purple">may</strong> be rasterized under a relaxed set
of rules.
If set to <code>VK_TRUE</code>, lines are rasterized as per the strict
definition.
See <a href="vkspec.html#primsrast-lines-basic">Basic Line Segment Rasterization</a>.</p>
</li>
<li>
<p><a id="limits-standardSampleLocations"></a> <code>standardSampleLocations</code>
specifies whether rasterization uses the standard sample locations as
documented in <a href="vkspec.html#primsrast-multisampling">Multisampling</a>.
If set to <code>VK_TRUE</code>, the implementation uses the documented sample
locations.
If set to <code>VK_FALSE</code>, the implementation <strong class="purple">may</strong> use different sample
locations.</p>
</li>
<li>
<p><a id="limits-optimalBufferCopyOffsetAlignment"></a>
<code>optimalBufferCopyOffsetAlignment</code> is the optimal buffer offset
alignment in bytes for <code>vkCmdCopyBufferToImage</code> and
<code>vkCmdCopyImageToBuffer</code>.
The per texel alignment requirements are enforced, but applications
<strong class="purple">should</strong> use the optimal alignment for optimal performance and power use.</p>
</li>
<li>
<p><a id="limits-optimalBufferCopyRowPitchAlignment"></a>
<code>optimalBufferCopyRowPitchAlignment</code> is the optimal buffer row pitch
alignment in bytes for <code>vkCmdCopyBufferToImage</code> and
<code>vkCmdCopyImageToBuffer</code>.
Row pitch is the number of bytes between texels with the same X
coordinate in adjacent rows (Y coordinates differ by one).
The per texel alignment requirements are enforced, but applications
<strong class="purple">should</strong> use the optimal alignment for optimal performance and power use.</p>
</li>
<li>
<p><a id="limits-nonCoherentAtomSize"></a> <code>nonCoherentAtomSize</code> is the size and
alignment in bytes that bounds concurrent access to
<a href="vkspec.html#memory-device-hostaccess">host-mapped device memory</a>.</p>
</li>
</ul>
</div>
</div>
<div class="sect3">
<h4 id="_description_629">Description</h4>
<div class="dlist">
<dl>
<dt class="hdlist1">1</dt>
<dd>
<p>For all bitmasks of <a href="#VkSampleCountFlagBits">VkSampleCountFlagBits</a>, the sample count limits
defined above represent the minimum supported sample counts for each
image type.
Individual images <strong class="purple">may</strong> support additional sample counts, which are
queried using <a href="#vkGetPhysicalDeviceImageFormatProperties">vkGetPhysicalDeviceImageFormatProperties</a> as
described in <a href="vkspec.html#features-supported-sample-counts">Supported Sample
Counts</a>.</p>
</dd>
</dl>
</div>
</div>
<div class="sect3">
<h4 id="_see_also_629">See Also</h4>
<div class="paragraph">
<p><code>VkBool32</code>, <code>VkDeviceSize</code>, <a href="#VkPhysicalDeviceProperties">VkPhysicalDeviceProperties</a>, <a href="#VkSampleCountFlags">VkSampleCountFlags</a></p>
</div>
</div>
<div class="sect3">
<h4 id="_document_notes_629">Document Notes</h4>
<div class="paragraph">
<p>For more information, see the Vulkan Specification at URL</p>
</div>
<div class="paragraph">
<p><a href="https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VkPhysicalDeviceLimits" class="bare">https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VkPhysicalDeviceLimits</a></p>
</div>
<div class="paragraph">
<p>This page is extracted from the Vulkan Specification.
Fixes and changes should be made to the Specification, not directly.</p>
</div>
<div style="page-break-after: always;"></div>
</div>
</div>
<div class="sect2">
<h3 id="_vkphysicaldevicemaintenance3properties3">VkPhysicalDeviceMaintenance3Properties(3)</h3>
<div class="sect3">
<h4 id="_name_630">Name</h4>
<div class="paragraph">
<p>VkPhysicalDeviceMaintenance3Properties - Structure describing descriptor set properties</p>
</div>
</div>
<div class="sect3">
<h4 id="_c_specification_630">C Specification</h4>
<div class="paragraph">
<p>The <code>VkPhysicalDeviceMaintenance3Properties</code> structure is defined as:</p>
</div>
<div id="VkPhysicalDeviceMaintenance3Properties" class="listingblock">
<div class="content">
<pre class="highlight"><code class="language-c++" data-lang="c++">typedef struct VkPhysicalDeviceMaintenance3Properties {
    VkStructureType    sType;
    void*              pNext;
    uint32_t           maxPerSetDescriptors;
    VkDeviceSize       maxMemoryAllocationSize;
} VkPhysicalDeviceMaintenance3Properties;</code></pre>
</div>
</div>
<div class="paragraph">
<p>or the equivalent</p>
</div>
<div id="VkPhysicalDeviceMaintenance3PropertiesKHR" class="listingblock">
<div class="content">
<pre class="highlight"><code class="language-c++" data-lang="c++">typedef VkPhysicalDeviceMaintenance3Properties VkPhysicalDeviceMaintenance3PropertiesKHR;</code></pre>
</div>
</div>
</div>
<div class="sect3">
<h4 id="_members_267">Members</h4>
<div class="paragraph">
<p>The members of the <code>VkPhysicalDeviceMaintenance3Properties</code> structure
describe the following implementation-dependent limits:</p>
</div>
</div>
<div class="sect3">
<h4 id="_description_630">Description</h4>
<div class="ulist">
<ul>
<li>
<p><code>sType</code> is the type of this structure.</p>
</li>
<li>
<p><code>pNext</code> is <code>NULL</code> or a pointer to an extension-specific structure.</p>
</li>
<li>
<p><a id="limits-maxPerSetDescriptors"></a> <code>maxPerSetDescriptors</code> is a maximum
number of descriptors (summed over all descriptor types) in a single
descriptor set that is guaranteed to satisfy any
implementation-dependent constraints on the size of a descriptor set
itself.
Applications <strong class="purple">can</strong> query whether a descriptor set that goes beyond this
limit is supported using <a href="#vkGetDescriptorSetLayoutSupport">vkGetDescriptorSetLayoutSupport</a>.</p>
</li>
<li>
<p><a id="limits-maxMemoryAllocationSize"></a> <code>maxMemoryAllocationSize</code> is the
maximum size of a memory allocation that <strong class="purple">can</strong> be created, even if there
is more space available in the heap.</p>
</li>
</ul>
</div>
<div class="paragraph">
<p>If the <code>VkPhysicalDeviceMaintenance3Properties</code> structure is included in
the <code>pNext</code> chain of <a href="#VkPhysicalDeviceProperties2">VkPhysicalDeviceProperties2</a>, it is filled
with the implementation-dependent limits.</p>
</div>
<div class="sidebarblock">
<div class="content">
<div class="title">Valid Usage (Implicit)</div>
<div class="ulist">
<ul>
<li>
<p><a id="VUID-VkPhysicalDeviceMaintenance3Properties-sType-sType"></a> <code>sType</code> <strong class="purple">must</strong> be <code>VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_MAINTENANCE_3_PROPERTIES</code></p>
</li>
</ul>
</div>
</div>
</div>
</div>
<div class="sect3">
<h4 id="_see_also_630">See Also</h4>
<div class="paragraph">
<p><code>VkDeviceSize</code>, <a href="#VkStructureType">VkStructureType</a></p>
</div>
</div>
<div class="sect3">
<h4 id="_document_notes_630">Document Notes</h4>
<div class="paragraph">
<p>For more information, see the Vulkan Specification at URL</p>
</div>
<div class="paragraph">
<p><a href="https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VkPhysicalDeviceMaintenance3Properties" class="bare">https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VkPhysicalDeviceMaintenance3Properties</a></p>
</div>
<div class="paragraph">
<p>This page is extracted from the Vulkan Specification.
Fixes and changes should be made to the Specification, not directly.</p>
</div>
<div style="page-break-after: always;"></div>
</div>
</div>
<div class="sect2">
<h3 id="_vkphysicaldevicememorybudgetpropertiesext3">VkPhysicalDeviceMemoryBudgetPropertiesEXT(3)</h3>
<div class="sect3">
<h4 id="_name_631">Name</h4>
<div class="paragraph">
<p>VkPhysicalDeviceMemoryBudgetPropertiesEXT - Structure specifying physical device memory budget and usage</p>
</div>
</div>
<div class="sect3">
<h4 id="_c_specification_631">C Specification</h4>
<div class="paragraph">
<p>If the <code>VkPhysicalDeviceMemoryBudgetPropertiesEXT</code> structure is included
in the <code>pNext</code> chain of <a href="#VkPhysicalDeviceMemoryProperties2">VkPhysicalDeviceMemoryProperties2</a>, it is
filled with the current memory budgets and usages.</p>
</div>
<div class="paragraph">
<p>The <code>VkPhysicalDeviceMemoryBudgetPropertiesEXT</code> structure is defined as:</p>
</div>
<div id="VkPhysicalDeviceMemoryBudgetPropertiesEXT" class="listingblock">
<div class="content">
<pre class="highlight"><code class="language-c++" data-lang="c++">typedef struct VkPhysicalDeviceMemoryBudgetPropertiesEXT {
    VkStructureType    sType;
    void*              pNext;
    VkDeviceSize       heapBudget[VK_MAX_MEMORY_HEAPS];
    VkDeviceSize       heapUsage[VK_MAX_MEMORY_HEAPS];
} VkPhysicalDeviceMemoryBudgetPropertiesEXT;</code></pre>
</div>
</div>
</div>
<div class="sect3">
<h4 id="_members_268">Members</h4>
<div class="ulist">
<ul>
<li>
<p><code>sType</code> is the type of this structure.</p>
</li>
<li>
<p><code>pNext</code> is <code>NULL</code> or a pointer to an extension-specific structure.</p>
</li>
<li>
<p><code>heapBudget</code> is an array of memory budgets, with one element for
each memory heap.
A heap&#8217;s budget is a rough estimate of how much memory the process <strong class="purple">can</strong>
allocate from that heap before allocations <strong class="purple">may</strong> fail or cause
performance degradation.
The budget includes any currently allocated device memory.</p>
</li>
<li>
<p><code>heapUsage</code> is an array of memory usage, with one element for each
memory heap.
A heap&#8217;s usage is an estimate of how much memory the process is
currently using in that heap.</p>
</li>
</ul>
</div>
</div>
<div class="sect3">
<h4 id="_description_631">Description</h4>
<div class="paragraph">
<p>The values returned in this structure are not invariant.
The <code>heapBudget</code> and <code>heapUsage</code> values <strong class="purple">must</strong> be zero for array
elements greater than or equal to
<a href="#VkPhysicalDeviceMemoryProperties">VkPhysicalDeviceMemoryProperties</a>::<code>memoryHeapCount</code>.
The <code>heapBudget</code> value <strong class="purple">must</strong> be non-zero for array elements less than
<a href="#VkPhysicalDeviceMemoryProperties">VkPhysicalDeviceMemoryProperties</a>::<code>memoryHeapCount</code>.
The <code>heapBudget</code> value <strong class="purple">must</strong> be less than or equal to
<a href="#VkMemoryHeap">VkMemoryHeap</a>::<code>size</code> for each heap.</p>
</div>
<div class="sidebarblock">
<div class="content">
<div class="title">Valid Usage (Implicit)</div>
<div class="ulist">
<ul>
<li>
<p><a id="VUID-VkPhysicalDeviceMemoryBudgetPropertiesEXT-sType-sType"></a> <code>sType</code> <strong class="purple">must</strong> be <code>VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_MEMORY_BUDGET_PROPERTIES_EXT</code></p>
</li>
</ul>
</div>
</div>
</div>
</div>
<div class="sect3">
<h4 id="_see_also_631">See Also</h4>
<div class="paragraph">
<p><code>VkDeviceSize</code>, <a href="#VkStructureType">VkStructureType</a></p>
</div>
</div>
<div class="sect3">
<h4 id="_document_notes_631">Document Notes</h4>
<div class="paragraph">
<p>For more information, see the Vulkan Specification at URL</p>
</div>
<div class="paragraph">
<p><a href="https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VkPhysicalDeviceMemoryBudgetPropertiesEXT" class="bare">https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VkPhysicalDeviceMemoryBudgetPropertiesEXT</a></p>
</div>
<div class="paragraph">
<p>This page is extracted from the Vulkan Specification.
Fixes and changes should be made to the Specification, not directly.</p>
</div>
<div style="page-break-after: always;"></div>
</div>
</div>
<div class="sect2">
<h3 id="_vkphysicaldevicememorypriorityfeaturesext3">VkPhysicalDeviceMemoryPriorityFeaturesEXT(3)</h3>
<div class="sect3">
<h4 id="_name_632">Name</h4>
<div class="paragraph">
<p>VkPhysicalDeviceMemoryPriorityFeaturesEXT - Structure describing memory priority features that can be supported by an implementation</p>
</div>
</div>
<div class="sect3">
<h4 id="_c_specification_632">C Specification</h4>
<div class="paragraph">
<p>The <code>VkPhysicalDeviceMemoryPriorityFeaturesEXT</code> structure is defined as:</p>
</div>
<div id="VkPhysicalDeviceMemoryPriorityFeaturesEXT" class="listingblock">
<div class="content">
<pre class="highlight"><code class="language-c++" data-lang="c++">typedef struct VkPhysicalDeviceMemoryPriorityFeaturesEXT {
    VkStructureType    sType;
    void*              pNext;
    VkBool32           memoryPriority;
} VkPhysicalDeviceMemoryPriorityFeaturesEXT;</code></pre>
</div>
</div>
</div>
<div class="sect3">
<h4 id="_members_269">Members</h4>
<div class="paragraph">
<p>The members of the <code>VkPhysicalDeviceMemoryPriorityFeaturesEXT</code> structure
describe the following features:</p>
</div>
</div>
<div class="sect3">
<h4 id="_description_632">Description</h4>
<div class="ulist">
<ul>
<li>
<p><a id="features-memoryPriority"></a> <code>memoryPriority</code> indicates that the
implementation supports memory priorities specified at memory allocation
time via <a href="#VkMemoryPriorityAllocateInfoEXT">VkMemoryPriorityAllocateInfoEXT</a>.</p>
</li>
</ul>
</div>
<div class="paragraph">
<p>If the <code>VkPhysicalDeviceMemoryPriorityFeaturesEXT</code> structure is included
in the <code>pNext</code> chain of <a href="#VkPhysicalDeviceFeatures2KHR">VkPhysicalDeviceFeatures2KHR</a>, it is filled
with values indicating whether the feature is supported.
<code>VkPhysicalDeviceMemoryPriorityFeaturesEXT</code> <strong class="purple">can</strong> also be used in the
<code>pNext</code> chain of <a href="#VkDeviceCreateInfo">VkDeviceCreateInfo</a> to enable features.</p>
</div>
<div class="sidebarblock">
<div class="content">
<div class="title">Valid Usage (Implicit)</div>
<div class="ulist">
<ul>
<li>
<p><a id="VUID-VkPhysicalDeviceMemoryPriorityFeaturesEXT-sType-sType"></a> <code>sType</code> <strong class="purple">must</strong> be <code>VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_MEMORY_PRIORITY_FEATURES_EXT</code></p>
</li>
</ul>
</div>
</div>
</div>
</div>
<div class="sect3">
<h4 id="_see_also_632">See Also</h4>
<div class="paragraph">
<p><code>VkBool32</code>, <a href="#VkStructureType">VkStructureType</a></p>
</div>
</div>
<div class="sect3">
<h4 id="_document_notes_632">Document Notes</h4>
<div class="paragraph">
<p>For more information, see the Vulkan Specification at URL</p>
</div>
<div class="paragraph">
<p><a href="https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VkPhysicalDeviceMemoryPriorityFeaturesEXT" class="bare">https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VkPhysicalDeviceMemoryPriorityFeaturesEXT</a></p>
</div>
<div class="paragraph">
<p>This page is extracted from the Vulkan Specification.
Fixes and changes should be made to the Specification, not directly.</p>
</div>
<div style="page-break-after: always;"></div>
</div>
</div>
<div class="sect2">
<h3 id="_vkphysicaldevicememoryproperties3">VkPhysicalDeviceMemoryProperties(3)</h3>
<div class="sect3">
<h4 id="_name_633">Name</h4>
<div class="paragraph">
<p>VkPhysicalDeviceMemoryProperties - Structure specifying physical device memory properties</p>
</div>
</div>
<div class="sect3">
<h4 id="_c_specification_633">C Specification</h4>
<div class="paragraph">
<p>The <code>VkPhysicalDeviceMemoryProperties</code> structure is defined as:</p>
</div>
<div id="VkPhysicalDeviceMemoryProperties" class="listingblock">
<div class="content">
<pre class="highlight"><code class="language-c++" data-lang="c++">typedef struct VkPhysicalDeviceMemoryProperties {
    uint32_t        memoryTypeCount;
    VkMemoryType    memoryTypes[VK_MAX_MEMORY_TYPES];
    uint32_t        memoryHeapCount;
    VkMemoryHeap    memoryHeaps[VK_MAX_MEMORY_HEAPS];
} VkPhysicalDeviceMemoryProperties;</code></pre>
</div>
</div>
</div>
<div class="sect3">
<h4 id="_members_270">Members</h4>
<div class="ulist">
<ul>
<li>
<p><code>memoryTypeCount</code> is the number of valid elements in the
<code>memoryTypes</code> array.</p>
</li>
<li>
<p><code>memoryTypes</code> is an array of <a href="#VkMemoryType">VkMemoryType</a> structures
describing the <em>memory types</em> that <strong class="purple">can</strong> be used to access memory
allocated from the heaps specified by <code>memoryHeaps</code>.</p>
</li>
<li>
<p><code>memoryHeapCount</code> is the number of valid elements in the
<code>memoryHeaps</code> array.</p>
</li>
<li>
<p><code>memoryHeaps</code> is an array of <a href="#VkMemoryHeap">VkMemoryHeap</a> structures
describing the <em>memory heaps</em> from which memory <strong class="purple">can</strong> be allocated.</p>
</li>
</ul>
</div>
</div>
<div class="sect3">
<h4 id="_description_633">Description</h4>
<div class="paragraph">
<p>The <code>VkPhysicalDeviceMemoryProperties</code> structure describes a number of
<em>memory heaps</em> as well as a number of <em>memory types</em> that <strong class="purple">can</strong> be used to
access memory allocated in those heaps.
Each heap describes a memory resource of a particular size, and each memory
type describes a set of memory properties (e.g. host cached vs uncached)
that <strong class="purple">can</strong> be used with a given memory heap.
Allocations using a particular memory type will consume resources from the
heap indicated by that memory type&#8217;s heap index.
More than one memory type <strong class="purple">may</strong> share each heap, and the heaps and memory
types provide a mechanism to advertise an accurate size of the physical
memory resources while allowing the memory to be used with a variety of
different properties.</p>
</div>
<div class="paragraph">
<p>The number of memory heaps is given by <code>memoryHeapCount</code> and is less
than or equal to <code>VK_MAX_MEMORY_HEAPS</code>.
Each heap is described by an element of the <code>memoryHeaps</code> array as a
<a href="#VkMemoryHeap">VkMemoryHeap</a> structure.
The number of memory types available across all memory heaps is given by
<code>memoryTypeCount</code> and is less than or equal to
<code>VK_MAX_MEMORY_TYPES</code>.
Each memory type is described by an element of the <code>memoryTypes</code> array
as a <a href="#VkMemoryType">VkMemoryType</a> structure.</p>
</div>
<div class="paragraph">
<p>At least one heap <strong class="purple">must</strong> include <code>VK_MEMORY_HEAP_DEVICE_LOCAL_BIT</code> in
<a href="#VkMemoryHeap">VkMemoryHeap</a>::<code>flags</code>.
If there are multiple heaps that all have similar performance
characteristics, they <strong class="purple">may</strong> all include
<code>VK_MEMORY_HEAP_DEVICE_LOCAL_BIT</code>.
In a unified memory architecture (UMA) system there is often only a single
memory heap which is considered to be equally &#8220;local&#8221; to the host and to
the device, and such an implementation <strong class="purple">must</strong> advertise the heap as
device-local.</p>
</div>
<div id="memory-device-bitmask-list" class="paragraph">
<p>Each memory type returned by <a href="#vkGetPhysicalDeviceMemoryProperties">vkGetPhysicalDeviceMemoryProperties</a> <strong class="purple">must</strong>
have its <code>propertyFlags</code> set to one of the following values:</p>
</div>
<div class="ulist">
<ul>
<li>
<p>0</p>
</li>
<li>
<p><code>VK_MEMORY_PROPERTY_HOST_VISIBLE_BIT</code> |<br />
<code>VK_MEMORY_PROPERTY_HOST_COHERENT_BIT</code></p>
</li>
<li>
<p><code>VK_MEMORY_PROPERTY_HOST_VISIBLE_BIT</code> |<br />
<code>VK_MEMORY_PROPERTY_HOST_CACHED_BIT</code></p>
</li>
<li>
<p><code>VK_MEMORY_PROPERTY_HOST_VISIBLE_BIT</code> |<br />
<code>VK_MEMORY_PROPERTY_HOST_CACHED_BIT</code> |<br />
<code>VK_MEMORY_PROPERTY_HOST_COHERENT_BIT</code></p>
</li>
<li>
<p><code>VK_MEMORY_PROPERTY_DEVICE_LOCAL_BIT</code></p>
</li>
<li>
<p><code>VK_MEMORY_PROPERTY_DEVICE_LOCAL_BIT</code> |<br />
<code>VK_MEMORY_PROPERTY_HOST_VISIBLE_BIT</code> |<br />
<code>VK_MEMORY_PROPERTY_HOST_COHERENT_BIT</code></p>
</li>
<li>
<p><code>VK_MEMORY_PROPERTY_DEVICE_LOCAL_BIT</code> |<br />
<code>VK_MEMORY_PROPERTY_HOST_VISIBLE_BIT</code> |<br />
<code>VK_MEMORY_PROPERTY_HOST_CACHED_BIT</code></p>
</li>
<li>
<p><code>VK_MEMORY_PROPERTY_DEVICE_LOCAL_BIT</code> |<br />
<code>VK_MEMORY_PROPERTY_HOST_VISIBLE_BIT</code> |<br />
<code>VK_MEMORY_PROPERTY_HOST_CACHED_BIT</code> |<br />
<code>VK_MEMORY_PROPERTY_HOST_COHERENT_BIT</code></p>
</li>
<li>
<p><code>VK_MEMORY_PROPERTY_DEVICE_LOCAL_BIT</code> |<br />
<code>VK_MEMORY_PROPERTY_LAZILY_ALLOCATED_BIT</code></p>
</li>
<li>
<p><code>VK_MEMORY_PROPERTY_PROTECTED_BIT</code></p>
</li>
<li>
<p><code>VK_MEMORY_PROPERTY_PROTECTED_BIT</code> |
<code>VK_MEMORY_PROPERTY_DEVICE_LOCAL_BIT</code></p>
</li>
</ul>
</div>
<div class="paragraph">
<p>There <strong class="purple">must</strong> be at least one memory type with both the
<code>VK_MEMORY_PROPERTY_HOST_VISIBLE_BIT</code> and
<code>VK_MEMORY_PROPERTY_HOST_COHERENT_BIT</code> bits set in its
<code>propertyFlags</code>.
There <strong class="purple">must</strong> be at least one memory type with the
<code>VK_MEMORY_PROPERTY_DEVICE_LOCAL_BIT</code> bit set in its
<code>propertyFlags</code>.</p>
</div>
<div class="paragraph">
<p>For each pair of elements <strong>X</strong> and <strong>Y</strong> returned in <code>memoryTypes</code>, <strong>X</strong>
<strong class="purple">must</strong> be placed at a lower index position than <strong>Y</strong> if:</p>
</div>
<div class="ulist">
<ul>
<li>
<p>either the set of bit flags returned in the <code>propertyFlags</code> member
of <strong>X</strong> is a strict subset of the set of bit flags returned in the
<code>propertyFlags</code> member of <strong>Y</strong>.</p>
</li>
<li>
<p>or the <code>propertyFlags</code> members of <strong>X</strong> and <strong>Y</strong> are equal, and <strong>X</strong>
belongs to a memory heap with greater performance (as determined in an
implementation-specific manner).</p>
</li>
</ul>
</div>
<div class="admonitionblock note">
<table>
<tr>
<td class="icon">
<i class="fa icon-note" title="Note"></i>
</td>
<td class="content">
<div class="title">Note</div>
<div class="paragraph">
<p>There is no ordering requirement between <strong>X</strong> and <strong>Y</strong> elements for the case
their <code>propertyFlags</code> members are not in a subset relation.
That potentially allows more than one possible way to order the same set of
memory types.
Notice that the <a href="vkspec.html#memory-device-bitmask-list">list of all allowed memory
property flag combinations</a> is written in a valid order.
But if instead <code>VK_MEMORY_PROPERTY_DEVICE_LOCAL_BIT</code> was before
<code>VK_MEMORY_PROPERTY_HOST_VISIBLE_BIT</code> |
<code>VK_MEMORY_PROPERTY_HOST_COHERENT_BIT</code>, the list would still be in a
valid order.</p>
</div>
</td>
</tr>
</table>
</div>
<div class="paragraph">
<p>This ordering requirement enables applications to use a simple search loop
to select the desired memory type along the lines of:</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="highlight"><code class="language-c++" data-lang="c++">// Find a memory in `memoryTypeBitsRequirement` that includes all of `requiredProperties`
int32_t findProperties(const VkPhysicalDeviceMemoryProperties* pMemoryProperties,
                       uint32_t memoryTypeBitsRequirement,
                       VkMemoryPropertyFlags requiredProperties) {
    const uint32_t memoryCount = pMemoryProperties-&gt;memoryTypeCount;
    for (uint32_t memoryIndex = 0; memoryIndex &lt; memoryCount; ++memoryIndex) {
        const uint32_t memoryTypeBits = (1 &lt;&lt; memoryIndex);
        const bool isRequiredMemoryType = memoryTypeBitsRequirement &amp; memoryTypeBits;

        const VkMemoryPropertyFlags properties =
            pMemoryProperties-&gt;memoryTypes[memoryIndex].propertyFlags;
        const bool hasRequiredProperties =
            (properties &amp; requiredProperties) == requiredProperties;

        if (isRequiredMemoryType &amp;&amp; hasRequiredProperties)
            return static_cast&lt;int32_t&gt;(memoryIndex);
    }

    // failed to find memory type
    return -1;
}

// Try to find an optimal memory type, or if it does not exist try fallback memory type
// `device` is the VkDevice
// `image` is the VkImage that requires memory to be bound
// `memoryProperties` properties as returned by vkGetPhysicalDeviceMemoryProperties
// `requiredProperties` are the property flags that must be present
// `optimalProperties` are the property flags that are preferred by the application
VkMemoryRequirements memoryRequirements;
vkGetImageMemoryRequirements(device, image, &amp;memoryRequirements);
int32_t memoryType =
    findProperties(&amp;memoryProperties, memoryRequirements.memoryTypeBits, optimalProperties);
if (memoryType == -1) // not found; try fallback properties
    memoryType =
        findProperties(&amp;memoryProperties, memoryRequirements.memoryTypeBits, requiredProperties);</code></pre>
</div>
</div>
</div>
<div class="sect3">
<h4 id="_see_also_633">See Also</h4>
<div class="paragraph">
<p><a href="#VkMemoryHeap">VkMemoryHeap</a>, <a href="#VkMemoryType">VkMemoryType</a>, <a href="#VkPhysicalDeviceMemoryProperties2">VkPhysicalDeviceMemoryProperties2</a>, <a href="#vkGetPhysicalDeviceMemoryProperties">vkGetPhysicalDeviceMemoryProperties</a></p>
</div>
</div>
<div class="sect3">
<h4 id="_document_notes_633">Document Notes</h4>
<div class="paragraph">
<p>For more information, see the Vulkan Specification at URL</p>
</div>
<div class="paragraph">
<p><a href="https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VkPhysicalDeviceMemoryProperties" class="bare">https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VkPhysicalDeviceMemoryProperties</a></p>
</div>
<div class="paragraph">
<p>This page is extracted from the Vulkan Specification.
Fixes and changes should be made to the Specification, not directly.</p>
</div>
<div style="page-break-after: always;"></div>
</div>
</div>
<div class="sect2">
<h3 id="_vkphysicaldevicememoryproperties23">VkPhysicalDeviceMemoryProperties2(3)</h3>
<div class="sect3">
<h4 id="_name_634">Name</h4>
<div class="paragraph">
<p>VkPhysicalDeviceMemoryProperties2 - Structure specifying physical device memory properties</p>
</div>
</div>
<div class="sect3">
<h4 id="_c_specification_634">C Specification</h4>
<div class="paragraph">
<p>The <code>VkPhysicalDeviceMemoryProperties2</code> structure is defined as:</p>
</div>
<div id="VkPhysicalDeviceMemoryProperties2" class="listingblock">
<div class="content">
<pre class="highlight"><code class="language-c++" data-lang="c++">typedef struct VkPhysicalDeviceMemoryProperties2 {
    VkStructureType                     sType;
    void*                               pNext;
    VkPhysicalDeviceMemoryProperties    memoryProperties;
} VkPhysicalDeviceMemoryProperties2;</code></pre>
</div>
</div>
<div class="paragraph">
<p>or the equivalent</p>
</div>
<div id="VkPhysicalDeviceMemoryProperties2KHR" class="listingblock">
<div class="content">
<pre class="highlight"><code class="language-c++" data-lang="c++">typedef VkPhysicalDeviceMemoryProperties2 VkPhysicalDeviceMemoryProperties2KHR;</code></pre>
</div>
</div>
</div>
<div class="sect3">
<h4 id="_members_271">Members</h4>
<div class="ulist">
<ul>
<li>
<p><code>sType</code> is the type of this structure.</p>
</li>
<li>
<p><code>pNext</code> is <code>NULL</code> or a pointer to an extension-specific structure.</p>
</li>
<li>
<p><code>memoryProperties</code> is a structure of type
<a href="#VkPhysicalDeviceMemoryProperties">VkPhysicalDeviceMemoryProperties</a> which is populated with the same
values as in <a href="#vkGetPhysicalDeviceMemoryProperties">vkGetPhysicalDeviceMemoryProperties</a>.</p>
</li>
</ul>
</div>
</div>
<div class="sect3">
<h4 id="_description_634">Description</h4>
<div class="sidebarblock">
<div class="content">
<div class="title">Valid Usage (Implicit)</div>
<div class="ulist">
<ul>
<li>
<p><a id="VUID-VkPhysicalDeviceMemoryProperties2-sType-sType"></a> <code>sType</code> <strong class="purple">must</strong> be <code>VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_MEMORY_PROPERTIES_2</code></p>
</li>
<li>
<p><a id="VUID-VkPhysicalDeviceMemoryProperties2-pNext-pNext"></a> <code>pNext</code> <strong class="purple">must</strong> be <code>NULL</code> or a pointer to a valid instance of <a href="#VkPhysicalDeviceMemoryBudgetPropertiesEXT">VkPhysicalDeviceMemoryBudgetPropertiesEXT</a></p>
</li>
</ul>
</div>
</div>
</div>
</div>
<div class="sect3">
<h4 id="_see_also_634">See Also</h4>
<div class="paragraph">
<p><a href="#VkPhysicalDeviceMemoryProperties">VkPhysicalDeviceMemoryProperties</a>, <a href="#VkStructureType">VkStructureType</a>, <a href="#vkGetPhysicalDeviceMemoryProperties2">vkGetPhysicalDeviceMemoryProperties2</a>, <a href="#vkGetPhysicalDeviceMemoryProperties2KHR">vkGetPhysicalDeviceMemoryProperties2KHR</a></p>
</div>
</div>
<div class="sect3">
<h4 id="_document_notes_634">Document Notes</h4>
<div class="paragraph">
<p>For more information, see the Vulkan Specification at URL</p>
</div>
<div class="paragraph">
<p><a href="https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VkPhysicalDeviceMemoryProperties2" class="bare">https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VkPhysicalDeviceMemoryProperties2</a></p>
</div>
<div class="paragraph">
<p>This page is extracted from the Vulkan Specification.
Fixes and changes should be made to the Specification, not directly.</p>
</div>
<div style="page-break-after: always;"></div>
</div>
</div>
<div class="sect2">
<h3 id="_vkphysicaldevicemeshshaderfeaturesnv3">VkPhysicalDeviceMeshShaderFeaturesNV(3)</h3>
<div class="sect3">
<h4 id="_name_635">Name</h4>
<div class="paragraph">
<p>VkPhysicalDeviceMeshShaderFeaturesNV - Structure describing mesh shading features that can be supported by an implementation</p>
</div>
</div>
<div class="sect3">
<h4 id="_c_specification_635">C Specification</h4>
<div class="paragraph">
<p>The <code>VkPhysicalDeviceMeshShaderFeaturesNV</code> structure is defined as:</p>
</div>
<div id="VkPhysicalDeviceMeshShaderFeaturesNV" class="listingblock">
<div class="content">
<pre class="highlight"><code class="language-c++" data-lang="c++">typedef struct VkPhysicalDeviceMeshShaderFeaturesNV {
    VkStructureType    sType;
    void*              pNext;
    VkBool32           taskShader;
    VkBool32           meshShader;
} VkPhysicalDeviceMeshShaderFeaturesNV;</code></pre>
</div>
</div>
</div>
<div class="sect3">
<h4 id="_members_272">Members</h4>
<div class="ulist">
<ul>
<li>
<p><a id="features-taskShader"></a> <code>taskShader</code> indicates whether the task
shader stage is supported.</p>
</li>
<li>
<p><a id="features-meshShader"></a> <code>meshShader</code> indicates whether the mesh
shader stage is supported.</p>
</li>
</ul>
</div>
</div>
<div class="sect3">
<h4 id="_description_635">Description</h4>
<div class="paragraph">
<p>If the <code>VkPhysicalDeviceMeshShaderFeaturesNV</code> structure is included in
the <code>pNext</code> chain of <a href="#VkPhysicalDeviceFeatures2">VkPhysicalDeviceFeatures2</a>, it is filled with
a value indicating whether the feature is supported.
<code>VkPhysicalDeviceMeshShaderFeaturesNV</code> <strong class="purple">can</strong> also be used in <code>pNext</code>
chain of <a href="#VkDeviceCreateInfo">VkDeviceCreateInfo</a> to enable the features.</p>
</div>
<div class="sidebarblock">
<div class="content">
<div class="title">Valid Usage (Implicit)</div>
<div class="ulist">
<ul>
<li>
<p><a id="VUID-VkPhysicalDeviceMeshShaderFeaturesNV-sType-sType"></a> <code>sType</code> <strong class="purple">must</strong> be <code>VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_MESH_SHADER_FEATURES_NV</code></p>
</li>
</ul>
</div>
</div>
</div>
</div>
<div class="sect3">
<h4 id="_see_also_635">See Also</h4>
<div class="paragraph">
<p><code>VkBool32</code>, <a href="#VkStructureType">VkStructureType</a></p>
</div>
</div>
<div class="sect3">
<h4 id="_document_notes_635">Document Notes</h4>
<div class="paragraph">
<p>For more information, see the Vulkan Specification at URL</p>
</div>
<div class="paragraph">
<p><a href="https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VkPhysicalDeviceMeshShaderFeaturesNV" class="bare">https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VkPhysicalDeviceMeshShaderFeaturesNV</a></p>
</div>
<div class="paragraph">
<p>This page is extracted from the Vulkan Specification.
Fixes and changes should be made to the Specification, not directly.</p>
</div>
<div style="page-break-after: always;"></div>
</div>
</div>
<div class="sect2">
<h3 id="_vkphysicaldevicemeshshaderpropertiesnv3">VkPhysicalDeviceMeshShaderPropertiesNV(3)</h3>
<div class="sect3">
<h4 id="_name_636">Name</h4>
<div class="paragraph">
<p>VkPhysicalDeviceMeshShaderPropertiesNV - Structure describing mesh shading properties</p>
</div>
</div>
<div class="sect3">
<h4 id="_c_specification_636">C Specification</h4>
<div class="paragraph">
<p>The <code>VkPhysicalDeviceMeshShaderPropertiesNV</code> structure is defined as:</p>
</div>
<div id="VkPhysicalDeviceMeshShaderPropertiesNV" class="listingblock">
<div class="content">
<pre class="highlight"><code class="language-c++" data-lang="c++">typedef struct VkPhysicalDeviceMeshShaderPropertiesNV {
    VkStructureType    sType;
    void*              pNext;
    uint32_t           maxDrawMeshTasksCount;
    uint32_t           maxTaskWorkGroupInvocations;
    uint32_t           maxTaskWorkGroupSize[3];
    uint32_t           maxTaskTotalMemorySize;
    uint32_t           maxTaskOutputCount;
    uint32_t           maxMeshWorkGroupInvocations;
    uint32_t           maxMeshWorkGroupSize[3];
    uint32_t           maxMeshTotalMemorySize;
    uint32_t           maxMeshOutputVertices;
    uint32_t           maxMeshOutputPrimitives;
    uint32_t           maxMeshMultiviewViewCount;
    uint32_t           meshOutputPerVertexGranularity;
    uint32_t           meshOutputPerPrimitiveGranularity;
} VkPhysicalDeviceMeshShaderPropertiesNV;</code></pre>
</div>
</div>
</div>
<div class="sect3">
<h4 id="_members_273">Members</h4>
<div class="paragraph">
<p>The members of the <code>VkPhysicalDeviceMeshShaderPropertiesNV</code> structure
describe the following implementation-dependent limits:</p>
</div>
</div>
<div class="sect3">
<h4 id="_description_636">Description</h4>
<div class="ulist">
<ul>
<li>
<p><code>sType</code> is the type of this structure.</p>
</li>
<li>
<p><code>pNext</code> is <code>NULL</code> or a pointer to an extension-specific structure.</p>
</li>
<li>
<p><code>maxDrawMeshTasksCount</code> is the maximum number of local workgroups
that <strong class="purple">can</strong> be launched by a single draw mesh tasks command.
See <a href="vkspec.html#drawing-mesh-shading" class="bare">html/vkspec.html#drawing-mesh-shading</a>.</p>
</li>
<li>
<p><code>maxTaskWorkGroupInvocations</code> is the maximum total number of task
shader invocations in a single local workgroup.
The product of the X, Y, and Z sizes as specified by the <code>LocalSize</code>
execution mode in shader modules and by the object decorated by the
<code>WorkgroupSize</code> decoration <strong class="purple">must</strong> be less than or equal to this limit.</p>
</li>
<li>
<p><code>maxTaskWorkGroupSize</code>[3] is the maximum size of a local task
workgroup.
These three values represent the maximum local workgroup size in the X,
Y, and Z dimensions, respectively.
The <code>x</code>, <code>y</code>, and <code>z</code> sizes specified by the <code>LocalSize</code>
execution mode and by the object decorated by the <code>WorkgroupSize</code>
decoration in shader modules <strong class="purple">must</strong> be less than or equal to the
corresponding limit.</p>
</li>
<li>
<p><code>maxTaskTotalMemorySize</code> is the maximum number of bytes that the
task shader can use in total for shared and output memory combined.</p>
</li>
<li>
<p><code>maxTaskOutputCount</code> is the maximum number of output tasks a single
task shader workgroup can emit.</p>
</li>
<li>
<p><code>maxMeshWorkGroupInvocations</code> is the maximum total number of mesh
shader invocations in a single local workgroup.
The product of the X, Y, and Z sizes as specified by the <code>LocalSize</code>
execution mode in shader modules and by the object decorated by the
<code>WorkgroupSize</code> decoration <strong class="purple">must</strong> be less than or equal to this limit.</p>
</li>
<li>
<p><code>maxMeshWorkGroupSize</code>[3] is the maximum size of a local mesh
workgroup.
These three values represent the maximum local workgroup size in the X,
Y, and Z dimensions, respectively.
The <code>x</code>, <code>y</code>, and <code>z</code> sizes specified by the <code>LocalSize</code>
execution mode and by the object decorated by the <code>WorkgroupSize</code>
decoration in shader modules <strong class="purple">must</strong> be less than or equal to the
corresponding limit.</p>
</li>
<li>
<p><code>maxMeshTotalMemorySize</code> is the maximum number of bytes that the
mesh shader can use in total for shared and output memory combined.</p>
</li>
<li>
<p><code>maxMeshOutputVertices</code> is the maximum number of vertices a mesh
shader output can store.</p>
</li>
<li>
<p><code>maxMeshOutputPrimitives</code> is the maximum number of primitives a mesh
shader output can store.</p>
</li>
<li>
<p><code>maxMeshMultiviewViewCount</code> is the maximum number of multi-view
views a mesh shader can use.</p>
</li>
<li>
<p><code>meshOutputPerVertexGranularity</code> is the granularity with which mesh
vertex outputs are allocated.
The value can be used to compute the memory size used by the mesh
shader, which must be less than or equal to
<code>maxMeshTotalMemorySize</code>.</p>
</li>
<li>
<p><code>meshOutputPerPrimitiveGranularity</code> is the granularity with which
mesh outputs qualified as per-primitive are allocated.
The value can be used to compute the memory size used by the mesh
shader, which must be less than or equal to
<code>maxMeshTotalMemorySize</code>.</p>
</li>
</ul>
</div>
<div class="paragraph">
<p>If the <code>VkPhysicalDeviceMeshShaderPropertiesNV</code> structure is included in
the <code>pNext</code> chain of <a href="#VkPhysicalDeviceProperties2">VkPhysicalDeviceProperties2</a>, it is filled
with the implementation-dependent limits.</p>
</div>
<div class="sidebarblock">
<div class="content">
<div class="title">Valid Usage (Implicit)</div>
<div class="ulist">
<ul>
<li>
<p><a id="VUID-VkPhysicalDeviceMeshShaderPropertiesNV-sType-sType"></a> <code>sType</code> <strong class="purple">must</strong> be <code>VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_MESH_SHADER_PROPERTIES_NV</code></p>
</li>
</ul>
</div>
</div>
</div>
</div>
<div class="sect3">
<h4 id="_see_also_636">See Also</h4>
<div class="paragraph">
<p><a href="#VkStructureType">VkStructureType</a></p>
</div>
</div>
<div class="sect3">
<h4 id="_document_notes_636">Document Notes</h4>
<div class="paragraph">
<p>For more information, see the Vulkan Specification at URL</p>
</div>
<div class="paragraph">
<p><a href="https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VkPhysicalDeviceMeshShaderPropertiesNV" class="bare">https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VkPhysicalDeviceMeshShaderPropertiesNV</a></p>
</div>
<div class="paragraph">
<p>This page is extracted from the Vulkan Specification.
Fixes and changes should be made to the Specification, not directly.</p>
</div>
<div style="page-break-after: always;"></div>
</div>
</div>
<div class="sect2">
<h3 id="_vkphysicaldevicemultiviewfeatures3">VkPhysicalDeviceMultiviewFeatures(3)</h3>
<div class="sect3">
<h4 id="_name_637">Name</h4>
<div class="paragraph">
<p>VkPhysicalDeviceMultiviewFeatures - Structure describing multiview features that can be supported by an implementation</p>
</div>
</div>
<div class="sect3">
<h4 id="_c_specification_637">C Specification</h4>
<div class="paragraph">
<p>The <code>VkPhysicalDeviceMultiviewFeatures</code> structure is defined as:</p>
</div>
<div id="VkPhysicalDeviceMultiviewFeatures" class="listingblock">
<div class="content">
<pre class="highlight"><code class="language-c++" data-lang="c++">typedef struct VkPhysicalDeviceMultiviewFeatures {
    VkStructureType    sType;
    void*              pNext;
    VkBool32           multiview;
    VkBool32           multiviewGeometryShader;
    VkBool32           multiviewTessellationShader;
} VkPhysicalDeviceMultiviewFeatures;</code></pre>
</div>
</div>
<div class="paragraph">
<p>or the equivalent</p>
</div>
<div id="VkPhysicalDeviceMultiviewFeaturesKHR" class="listingblock">
<div class="content">
<pre class="highlight"><code class="language-c++" data-lang="c++">typedef VkPhysicalDeviceMultiviewFeatures VkPhysicalDeviceMultiviewFeaturesKHR;</code></pre>
</div>
</div>
</div>
<div class="sect3">
<h4 id="_members_274">Members</h4>
<div class="paragraph">
<p>The members of the <code>VkPhysicalDeviceMultiviewFeatures</code> structure
describe the following features:</p>
</div>
</div>
<div class="sect3">
<h4 id="_description_637">Description</h4>
<div class="ulist">
<ul>
<li>
<p><a id="features-multiview"></a> <code>multiview</code> specifies whether the
implementation supports multiview rendering within a render pass.
If this feature is not enabled, the view mask of each subpass <strong class="purple">must</strong>
always be zero.</p>
</li>
<li>
<p><a id="features-multiview-gs"></a> <code>multiviewGeometryShader</code> specifies
whether the implementation supports multiview rendering within a render
pass, with <a href="vkspec.html#geometry">geometry shaders</a>.
If this feature is not enabled, then a pipeline compiled against a
subpass with a non-zero view mask <strong class="purple">must</strong> not include a geometry shader.</p>
</li>
<li>
<p><a id="features-multiview-tess"></a> <code>multiviewTessellationShader</code> specifies
whether the implementation supports multiview rendering within a render
pass, with <a href="vkspec.html#tessellation">tessellation shaders</a>.
If this feature is not enabled, then a pipeline compiled against a
subpass with a non-zero view mask <strong class="purple">must</strong> not include any tessellation
shaders.</p>
</li>
</ul>
</div>
<div class="paragraph">
<p>If the <code>VkPhysicalDeviceMultiviewFeatures</code> structure is included in the
<code>pNext</code> chain of <a href="#VkPhysicalDeviceFeatures2">VkPhysicalDeviceFeatures2</a>, it is filled with
values indicating whether each feature is supported.
<code>VkPhysicalDeviceMultiviewFeatures</code> <strong class="purple">can</strong> also be used in the <code>pNext</code>
chain of <a href="#VkDeviceCreateInfo">VkDeviceCreateInfo</a> to enable the features.</p>
</div>
<div class="sidebarblock">
<div class="content">
<div class="title">Valid Usage</div>
<div class="ulist">
<ul>
<li>
<p><a id="VUID-VkPhysicalDeviceMultiviewFeatures-multiviewGeometryShader-00580"></a>
If <code>multiviewGeometryShader</code> is enabled then <code>multiview</code> <strong class="purple">must</strong>
also be enabled.</p>
</li>
<li>
<p><a id="VUID-VkPhysicalDeviceMultiviewFeatures-multiviewTessellationShader-00581"></a>
If <code>multiviewTessellationShader</code> is enabled then <code>multiview</code>
<strong class="purple">must</strong> also be enabled.</p>
</li>
</ul>
</div>
</div>
</div>
<div class="sidebarblock">
<div class="content">
<div class="title">Valid Usage (Implicit)</div>
<div class="ulist">
<ul>
<li>
<p><a id="VUID-VkPhysicalDeviceMultiviewFeatures-sType-sType"></a> <code>sType</code> <strong class="purple">must</strong> be <code>VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_MULTIVIEW_FEATURES</code></p>
</li>
</ul>
</div>
</div>
</div>
</div>
<div class="sect3">
<h4 id="_see_also_637">See Also</h4>
<div class="paragraph">
<p><code>VkBool32</code>, <a href="#VkStructureType">VkStructureType</a></p>
</div>
</div>
<div class="sect3">
<h4 id="_document_notes_637">Document Notes</h4>
<div class="paragraph">
<p>For more information, see the Vulkan Specification at URL</p>
</div>
<div class="paragraph">
<p><a href="https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VkPhysicalDeviceMultiviewFeatures" class="bare">https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VkPhysicalDeviceMultiviewFeatures</a></p>
</div>
<div class="paragraph">
<p>This page is extracted from the Vulkan Specification.
Fixes and changes should be made to the Specification, not directly.</p>
</div>
<div style="page-break-after: always;"></div>
</div>
</div>
<div class="sect2">
<h3 id="_vkphysicaldevicemultiviewperviewattributespropertiesnvx3">VkPhysicalDeviceMultiviewPerViewAttributesPropertiesNVX(3)</h3>
<div class="sect3">
<h4 id="_name_638">Name</h4>
<div class="paragraph">
<p>VkPhysicalDeviceMultiviewPerViewAttributesPropertiesNVX - Structure describing multiview limits that can be supported by an implementation</p>
</div>
</div>
<div class="sect3">
<h4 id="_c_specification_638">C Specification</h4>
<div class="paragraph">
<p>The <code>VkPhysicalDeviceMultiviewPerViewAttributesPropertiesNVX</code> structure
is defined as:</p>
</div>
<div id="VkPhysicalDeviceMultiviewPerViewAttributesPropertiesNVX" class="listingblock">
<div class="content">
<pre class="highlight"><code class="language-c++" data-lang="c++">typedef struct VkPhysicalDeviceMultiviewPerViewAttributesPropertiesNVX {
    VkStructureType    sType;
    void*              pNext;
    VkBool32           perViewPositionAllComponents;
} VkPhysicalDeviceMultiviewPerViewAttributesPropertiesNVX;</code></pre>
</div>
</div>
</div>
<div class="sect3">
<h4 id="_members_275">Members</h4>
<div class="paragraph">
<p>The members of the
<code>VkPhysicalDeviceMultiviewPerViewAttributesPropertiesNVX</code> structure
describe the following implementation-dependent limits:</p>
</div>
</div>
<div class="sect3">
<h4 id="_description_638">Description</h4>
<div class="ulist">
<ul>
<li>
<p><code>sType</code> is the type of this structure.</p>
</li>
<li>
<p><code>pNext</code> is <code>NULL</code> or a pointer to an extension-specific structure.</p>
</li>
<li>
<p><a id="limits-perViewPositionAllComponents"></a>
<code>perViewPositionAllComponents</code> is <code>VK_TRUE</code> if the
implementation supports per-view position values that differ in
components other than the X component.</p>
</li>
</ul>
</div>
<div class="paragraph">
<p>If the <code>VkPhysicalDeviceMultiviewPerViewAttributesPropertiesNVX</code>
structure is included in the <code>pNext</code> chain of
<a href="#VkPhysicalDeviceProperties2">VkPhysicalDeviceProperties2</a>, it is filled with the
implementation-dependent limits.</p>
</div>
<div class="sidebarblock">
<div class="content">
<div class="title">Valid Usage (Implicit)</div>
<div class="ulist">
<ul>
<li>
<p><a id="VUID-VkPhysicalDeviceMultiviewPerViewAttributesPropertiesNVX-sType-sType"></a> <code>sType</code> <strong class="purple">must</strong> be <code>VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_MULTIVIEW_PER_VIEW_ATTRIBUTES_PROPERTIES_NVX</code></p>
</li>
</ul>
</div>
</div>
</div>
</div>
<div class="sect3">
<h4 id="_see_also_638">See Also</h4>
<div class="paragraph">
<p><code>VkBool32</code>, <a href="#VkStructureType">VkStructureType</a></p>
</div>
</div>
<div class="sect3">
<h4 id="_document_notes_638">Document Notes</h4>
<div class="paragraph">
<p>For more information, see the Vulkan Specification at URL</p>
</div>
<div class="paragraph">
<p><a href="https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VkPhysicalDeviceMultiviewPerViewAttributesPropertiesNVX" class="bare">https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VkPhysicalDeviceMultiviewPerViewAttributesPropertiesNVX</a></p>
</div>
<div class="paragraph">
<p>This page is extracted from the Vulkan Specification.
Fixes and changes should be made to the Specification, not directly.</p>
</div>
<div style="page-break-after: always;"></div>
</div>
</div>
<div class="sect2">
<h3 id="_vkphysicaldevicemultiviewproperties3">VkPhysicalDeviceMultiviewProperties(3)</h3>
<div class="sect3">
<h4 id="_name_639">Name</h4>
<div class="paragraph">
<p>VkPhysicalDeviceMultiviewProperties - Structure describing multiview limits that can be supported by an implementation</p>
</div>
</div>
<div class="sect3">
<h4 id="_c_specification_639">C Specification</h4>
<div class="paragraph">
<p>The <code>VkPhysicalDeviceMultiviewProperties</code> structure is defined as:</p>
</div>
<div id="VkPhysicalDeviceMultiviewProperties" class="listingblock">
<div class="content">
<pre class="highlight"><code class="language-c++" data-lang="c++">typedef struct VkPhysicalDeviceMultiviewProperties {
    VkStructureType    sType;
    void*              pNext;
    uint32_t           maxMultiviewViewCount;
    uint32_t           maxMultiviewInstanceIndex;
} VkPhysicalDeviceMultiviewProperties;</code></pre>
</div>
</div>
<div class="paragraph">
<p>or the equivalent</p>
</div>
<div id="VkPhysicalDeviceMultiviewPropertiesKHR" class="listingblock">
<div class="content">
<pre class="highlight"><code class="language-c++" data-lang="c++">typedef VkPhysicalDeviceMultiviewProperties VkPhysicalDeviceMultiviewPropertiesKHR;</code></pre>
</div>
</div>
</div>
<div class="sect3">
<h4 id="_members_276">Members</h4>
<div class="paragraph">
<p>The members of the <code>VkPhysicalDeviceMultiviewProperties</code> structure
describe the following implementation-dependent limits:</p>
</div>
</div>
<div class="sect3">
<h4 id="_description_639">Description</h4>
<div class="ulist">
<ul>
<li>
<p><code>sType</code> is the type of this structure.</p>
</li>
<li>
<p><code>pNext</code> is <code>NULL</code> or a pointer to an extension-specific structure.</p>
</li>
<li>
<p><a id="limits-maxMultiviewViewCount"></a> <code>maxMultiviewViewCount</code> is one
greater than the maximum view index that <strong class="purple">can</strong> be used in a subpass.</p>
</li>
<li>
<p><a id="limits-maxMultiviewInstanceIndex"></a> <code>maxMultiviewInstanceIndex</code> is
the maximum valid value of instance index allowed to be generated by a
drawing command recorded within a subpass of a multiview render pass
instance.</p>
</li>
</ul>
</div>
<div class="paragraph">
<p>If the <code>VkPhysicalDeviceMultiviewProperties</code> structure is included in
the <code>pNext</code> chain of <a href="#VkPhysicalDeviceProperties2">VkPhysicalDeviceProperties2</a>, it is filled
with the implementation-dependent limits.</p>
</div>
<div class="sidebarblock">
<div class="content">
<div class="title">Valid Usage (Implicit)</div>
<div class="ulist">
<ul>
<li>
<p><a id="VUID-VkPhysicalDeviceMultiviewProperties-sType-sType"></a> <code>sType</code> <strong class="purple">must</strong> be <code>VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_MULTIVIEW_PROPERTIES</code></p>
</li>
</ul>
</div>
</div>
</div>
</div>
<div class="sect3">
<h4 id="_see_also_639">See Also</h4>
<div class="paragraph">
<p><a href="#VkStructureType">VkStructureType</a></p>
</div>
</div>
<div class="sect3">
<h4 id="_document_notes_639">Document Notes</h4>
<div class="paragraph">
<p>For more information, see the Vulkan Specification at URL</p>
</div>
<div class="paragraph">
<p><a href="https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VkPhysicalDeviceMultiviewProperties" class="bare">https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VkPhysicalDeviceMultiviewProperties</a></p>
</div>
<div class="paragraph">
<p>This page is extracted from the Vulkan Specification.
Fixes and changes should be made to the Specification, not directly.</p>
</div>
<div style="page-break-after: always;"></div>
</div>
</div>
<div class="sect2">
<h3 id="_vkphysicaldevicepcibusinfopropertiesext3">VkPhysicalDevicePCIBusInfoPropertiesEXT(3)</h3>
<div class="sect3">
<h4 id="_name_640">Name</h4>
<div class="paragraph">
<p>VkPhysicalDevicePCIBusInfoPropertiesEXT - Structure containing PCI bus information of a physical device</p>
</div>
</div>
<div class="sect3">
<h4 id="_c_specification_640">C Specification</h4>
<div class="paragraph">
<p>To query the PCI bus information of a physical device, add
<a href="#VkPhysicalDevicePCIBusInfoPropertiesEXT">VkPhysicalDevicePCIBusInfoPropertiesEXT</a> to the <code>pNext</code> chain of
the <a href="#VkPhysicalDeviceProperties2">VkPhysicalDeviceProperties2</a> structure.
The <code>VkPhysicalDevicePCIBusInfoPropertiesEXT</code> structure is defined as:</p>
</div>
<div id="VkPhysicalDevicePCIBusInfoPropertiesEXT" class="listingblock">
<div class="content">
<pre class="highlight"><code class="language-c++" data-lang="c++">typedef struct VkPhysicalDevicePCIBusInfoPropertiesEXT {
    VkStructureType    sType;
    void*              pNext;
    uint32_t           pciDomain;
    uint32_t           pciBus;
    uint32_t           pciDevice;
    uint32_t           pciFunction;
} VkPhysicalDevicePCIBusInfoPropertiesEXT;</code></pre>
</div>
</div>
</div>
<div class="sect3">
<h4 id="_members_277">Members</h4>
<div class="ulist">
<ul>
<li>
<p><code>sType</code> is the type of this structure.</p>
</li>
<li>
<p><code>pNext</code> is <code>NULL</code> or a pointer to an extension-specific structure.</p>
</li>
<li>
<p><code>pciDomain</code> is the PCI bus domain.</p>
</li>
<li>
<p><code>pciBus</code> is the PCI bus identifier.</p>
</li>
<li>
<p><code>pciDevice</code> is the PCI device identifier.</p>
</li>
<li>
<p><code>pciFunction</code> is the PCI device function identifier.</p>
</li>
</ul>
</div>
</div>
<div class="sect3">
<h4 id="_description_640">Description</h4>
<div class="sidebarblock">
<div class="content">
<div class="title">Valid Usage (Implicit)</div>
<div class="ulist">
<ul>
<li>
<p><a id="VUID-VkPhysicalDevicePCIBusInfoPropertiesEXT-sType-sType"></a> <code>sType</code> <strong class="purple">must</strong> be <code>VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_PCI_BUS_INFO_PROPERTIES_EXT</code></p>
</li>
</ul>
</div>
</div>
</div>
</div>
<div class="sect3">
<h4 id="_see_also_640">See Also</h4>
<div class="paragraph">
<p><a href="#VkStructureType">VkStructureType</a></p>
</div>
</div>
<div class="sect3">
<h4 id="_document_notes_640">Document Notes</h4>
<div class="paragraph">
<p>For more information, see the Vulkan Specification at URL</p>
</div>
<div class="paragraph">
<p><a href="https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VkPhysicalDevicePCIBusInfoPropertiesEXT" class="bare">https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VkPhysicalDevicePCIBusInfoPropertiesEXT</a></p>
</div>
<div class="paragraph">
<p>This page is extracted from the Vulkan Specification.
Fixes and changes should be made to the Specification, not directly.</p>
</div>
<div style="page-break-after: always;"></div>
</div>
</div>
<div class="sect2">
<h3 id="_vkphysicaldevicepointclippingproperties3">VkPhysicalDevicePointClippingProperties(3)</h3>
<div class="sect3">
<h4 id="_name_641">Name</h4>
<div class="paragraph">
<p>VkPhysicalDevicePointClippingProperties - Structure describing the point clipping behavior supported by an implementation</p>
</div>
</div>
<div class="sect3">
<h4 id="_c_specification_641">C Specification</h4>
<div class="paragraph">
<p>The <code>VkPhysicalDevicePointClippingProperties</code> structure is defined as:</p>
</div>
<div id="VkPhysicalDevicePointClippingProperties" class="listingblock">
<div class="content">
<pre class="highlight"><code class="language-c++" data-lang="c++">typedef struct VkPhysicalDevicePointClippingProperties {
    VkStructureType            sType;
    void*                      pNext;
    VkPointClippingBehavior    pointClippingBehavior;
} VkPhysicalDevicePointClippingProperties;</code></pre>
</div>
</div>
<div class="paragraph">
<p>or the equivalent</p>
</div>
<div id="VkPhysicalDevicePointClippingPropertiesKHR" class="listingblock">
<div class="content">
<pre class="highlight"><code class="language-c++" data-lang="c++">typedef VkPhysicalDevicePointClippingProperties VkPhysicalDevicePointClippingPropertiesKHR;</code></pre>
</div>
</div>
</div>
<div class="sect3">
<h4 id="_members_278">Members</h4>
<div class="paragraph">
<p>The members of the <code>VkPhysicalDevicePointClippingProperties</code> structure
describe the following implementation-dependent limit:</p>
</div>
</div>
<div class="sect3">
<h4 id="_description_641">Description</h4>
<div class="ulist">
<ul>
<li>
<p><code>sType</code> is the type of this structure.</p>
</li>
<li>
<p><code>pNext</code> is <code>NULL</code> or a pointer to an extension-specific structure.</p>
</li>
<li>
<p><a id="limits-pointClipping"></a> <code>pointClippingBehavior</code> is the point
clipping behavior supported by the implementation, and is of type
<a href="#VkPointClippingBehavior">VkPointClippingBehavior</a>.</p>
</li>
</ul>
</div>
<div class="paragraph">
<p>If the <code>VkPhysicalDevicePointClippingProperties</code> structure is included
in the <code>pNext</code> chain of <a href="#VkPhysicalDeviceProperties2">VkPhysicalDeviceProperties2</a>, it is filled
with the implementation-dependent limits.</p>
</div>
<div class="sidebarblock">
<div class="content">
<div class="title">Valid Usage (Implicit)</div>
<div class="ulist">
<ul>
<li>
<p><a id="VUID-VkPhysicalDevicePointClippingProperties-sType-sType"></a> <code>sType</code> <strong class="purple">must</strong> be <code>VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_POINT_CLIPPING_PROPERTIES</code></p>
</li>
</ul>
</div>
</div>
</div>
</div>
<div class="sect3">
<h4 id="_see_also_641">See Also</h4>
<div class="paragraph">
<p><a href="#VkPointClippingBehavior">VkPointClippingBehavior</a>, <a href="#VkStructureType">VkStructureType</a></p>
</div>
</div>
<div class="sect3">
<h4 id="_document_notes_641">Document Notes</h4>
<div class="paragraph">
<p>For more information, see the Vulkan Specification at URL</p>
</div>
<div class="paragraph">
<p><a href="https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VkPhysicalDevicePointClippingProperties" class="bare">https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VkPhysicalDevicePointClippingProperties</a></p>
</div>
<div class="paragraph">
<p>This page is extracted from the Vulkan Specification.
Fixes and changes should be made to the Specification, not directly.</p>
</div>
<div style="page-break-after: always;"></div>
</div>
</div>
<div class="sect2">
<h3 id="_vkphysicaldeviceproperties3">VkPhysicalDeviceProperties(3)</h3>
<div class="sect3">
<h4 id="_name_642">Name</h4>
<div class="paragraph">
<p>VkPhysicalDeviceProperties - Structure specifying physical device properties</p>
</div>
</div>
<div class="sect3">
<h4 id="_c_specification_642">C Specification</h4>
<div class="paragraph">
<p>The <code>VkPhysicalDeviceProperties</code> structure is defined as:</p>
</div>
<div id="VkPhysicalDeviceProperties" class="listingblock">
<div class="content">
<pre class="highlight"><code class="language-c++" data-lang="c++">typedef struct VkPhysicalDeviceProperties {
    uint32_t                            apiVersion;
    uint32_t                            driverVersion;
    uint32_t                            vendorID;
    uint32_t                            deviceID;
    VkPhysicalDeviceType                deviceType;
    char                                deviceName[VK_MAX_PHYSICAL_DEVICE_NAME_SIZE];
    uint8_t                             pipelineCacheUUID[VK_UUID_SIZE];
    VkPhysicalDeviceLimits              limits;
    VkPhysicalDeviceSparseProperties    sparseProperties;
} VkPhysicalDeviceProperties;</code></pre>
</div>
</div>
</div>
<div class="sect3">
<h4 id="_members_279">Members</h4>
<div class="ulist">
<ul>
<li>
<p><code>apiVersion</code> is the version of Vulkan supported by the device,
encoded as described in <a href="vkspec.html#extendingvulkan-coreversions-versionnumbers" class="bare">html/vkspec.html#extendingvulkan-coreversions-versionnumbers</a>.</p>
</li>
<li>
<p><code>driverVersion</code> is the vendor-specified version of the driver.</p>
</li>
<li>
<p><code>vendorID</code> is a unique identifier for the <em>vendor</em> (see below) of
the physical device.</p>
</li>
<li>
<p><code>deviceID</code> is a unique identifier for the physical device among
devices available from the vendor.</p>
</li>
<li>
<p><code>deviceType</code> is a <a href="#VkPhysicalDeviceType">VkPhysicalDeviceType</a> specifying the type of
device.</p>
</li>
<li>
<p><code>deviceName</code> is a null-terminated UTF-8 string containing the name
of the device.</p>
</li>
<li>
<p><code>pipelineCacheUUID</code> is an array of size <code>VK_UUID_SIZE</code>,
containing 8-bit values that represent a universally unique identifier
for the device.</p>
</li>
<li>
<p><code>limits</code> is the <a href="#VkPhysicalDeviceLimits">VkPhysicalDeviceLimits</a> structure which
specifies device-specific limits of the physical device.
See <a href="vkspec.html#limits">Limits</a> for details.</p>
</li>
<li>
<p><code>sparseProperties</code> is the <a href="#VkPhysicalDeviceSparseProperties">VkPhysicalDeviceSparseProperties</a>
structure which specifies various sparse related properties of the
physical device.
See <a href="vkspec.html#sparsememory-physicalprops">Sparse Properties</a> for details.</p>
</li>
</ul>
</div>
</div>
<div class="sect3">
<h4 id="_description_642">Description</h4>
<div class="admonitionblock note">
<table>
<tr>
<td class="icon">
<i class="fa icon-note" title="Note"></i>
</td>
<td class="content">
<div class="title">Note</div>
<div class="paragraph">
<p>The value of <code>apiVersion</code> <strong class="purple">may</strong> be different than the version returned by
<a href="#vkEnumerateInstanceVersion">vkEnumerateInstanceVersion</a>; either higher or lower.
In such cases, the application <strong class="purple">must</strong> not use functionality that exceeds the
version of Vulkan associated with a given object.
The <code>pApiVersion</code> parameter returned by <a href="#vkEnumerateInstanceVersion">vkEnumerateInstanceVersion</a>
is the version associated with a <a href="#VkInstance">VkInstance</a> and its children, except
for a <a href="#VkPhysicalDevice">VkPhysicalDevice</a> and its children.
<code>VkPhysicalDeviceProperties</code>::<code>apiVersion</code> is the version associated
with a <a href="#VkPhysicalDevice">VkPhysicalDevice</a> and its children.</p>
</div>
</td>
</tr>
</table>
</div>
<div class="paragraph">
<p>The <code>vendorID</code> and <code>deviceID</code> fields are provided to allow
applications to adapt to device characteristics that are not adequately
exposed by other Vulkan queries.</p>
</div>
<div class="admonitionblock note">
<table>
<tr>
<td class="icon">
<i class="fa icon-note" title="Note"></i>
</td>
<td class="content">
<div class="title">Note</div>
<div class="paragraph">
<p>These <strong class="purple">may</strong> include performance profiles, hardware errata, or other
characteristics.</p>
</div>
</td>
</tr>
</table>
</div>
<div class="paragraph">
<p>The <em>vendor</em> identified by <code>vendorID</code> is the entity responsible for the
most salient characteristics of the underlying implementation of the
<a href="#VkPhysicalDevice">VkPhysicalDevice</a> being queried.</p>
</div>
<div class="admonitionblock note">
<table>
<tr>
<td class="icon">
<i class="fa icon-note" title="Note"></i>
</td>
<td class="content">
<div class="title">Note</div>
<div class="paragraph">
<p>For example, in the case of a discrete GPU implementation, this <strong class="purple">should</strong> be
the GPU chipset vendor.
In the case of a hardware accelerator integrated into a system-on-chip
(SoC), this <strong class="purple">should</strong> be the supplier of the silicon IP used to create the
accelerator.</p>
</div>
</td>
</tr>
</table>
</div>
<div class="paragraph">
<p>If the vendor has a <a href="https://pcisig.com/membership/member-companies">PCI
vendor ID</a>, the low 16 bits of <code>vendorID</code> <strong class="purple">must</strong> contain that PCI vendor
ID, and the remaining bits <strong class="purple">must</strong> be set to zero.
Otherwise, the value returned <strong class="purple">must</strong> be a valid Khronos vendor ID, obtained
as described in the <a href="vkspec.html#vulkan-styleguide">Vulkan Documentation and Extensions:
Procedures and Conventions</a> document in the section &#8220;Registering a Vendor
ID with Khronos&#8221;.
Khronos vendor IDs are allocated starting at 0x10000, to distinguish them
from the PCI vendor ID namespace.
Khronos vendor IDs are symbolically defined in the <a href="#VkVendorId">VkVendorId</a> type.</p>
</div>
<div class="paragraph">
<p>The vendor is also responsible for the value returned in <code>deviceID</code>.
If the implementation is driven primarily by a <a href="https://pcisig.com/">PCI
device</a> with a <a href="https://pcisig.com/">PCI device ID</a>, the low 16 bits of
<code>deviceID</code> <strong class="purple">must</strong> contain that PCI device ID, and the remaining bits
<strong class="purple">must</strong> be set to zero.
Otherwise, the choice of what values to return <strong class="purple">may</strong> be dictated by operating
system or platform policies - but <strong class="purple">should</strong> uniquely identify both the device
version and any major configuration options (for example, core count in the
case of multicore devices).</p>
</div>
<div class="admonitionblock note">
<table>
<tr>
<td class="icon">
<i class="fa icon-note" title="Note"></i>
</td>
<td class="content">
<div class="title">Note</div>
<div class="paragraph">
<p>The same device ID <strong class="purple">should</strong> be used for all physical implementations of that
device version and configuration.
For example, all uses of a specific silicon IP GPU version and configuration
<strong class="purple">should</strong> use the same device ID, even if those uses occur in different SoCs.</p>
</div>
</td>
</tr>
</table>
</div>
</div>
<div class="sect3">
<h4 id="_see_also_642">See Also</h4>
<div class="paragraph">
<p><a href="#VkPhysicalDeviceLimits">VkPhysicalDeviceLimits</a>, <a href="#VkPhysicalDeviceProperties2">VkPhysicalDeviceProperties2</a>, <a href="#VkPhysicalDeviceSparseProperties">VkPhysicalDeviceSparseProperties</a>, <a href="#VkPhysicalDeviceType">VkPhysicalDeviceType</a>, <a href="#vkGetPhysicalDeviceProperties">vkGetPhysicalDeviceProperties</a></p>
</div>
</div>
<div class="sect3">
<h4 id="_document_notes_642">Document Notes</h4>
<div class="paragraph">
<p>For more information, see the Vulkan Specification at URL</p>
</div>
<div class="paragraph">
<p><a href="https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VkPhysicalDeviceProperties" class="bare">https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VkPhysicalDeviceProperties</a></p>
</div>
<div class="paragraph">
<p>This page is extracted from the Vulkan Specification.
Fixes and changes should be made to the Specification, not directly.</p>
</div>
<div style="page-break-after: always;"></div>
</div>
</div>
<div class="sect2">
<h3 id="_vkphysicaldeviceproperties23">VkPhysicalDeviceProperties2(3)</h3>
<div class="sect3">
<h4 id="_name_643">Name</h4>
<div class="paragraph">
<p>VkPhysicalDeviceProperties2 - Structure specifying physical device properties</p>
</div>
</div>
<div class="sect3">
<h4 id="_c_specification_643">C Specification</h4>
<div class="paragraph">
<p>The <code>VkPhysicalDeviceProperties2</code> structure is defined as:</p>
</div>
<div id="VkPhysicalDeviceProperties2" class="listingblock">
<div class="content">
<pre class="highlight"><code class="language-c++" data-lang="c++">typedef struct VkPhysicalDeviceProperties2 {
    VkStructureType               sType;
    void*                         pNext;
    VkPhysicalDeviceProperties    properties;
} VkPhysicalDeviceProperties2;</code></pre>
</div>
</div>
<div class="paragraph">
<p>or the equivalent</p>
</div>
<div id="VkPhysicalDeviceProperties2KHR" class="listingblock">
<div class="content">
<pre class="highlight"><code class="language-c++" data-lang="c++">typedef VkPhysicalDeviceProperties2 VkPhysicalDeviceProperties2KHR;</code></pre>
</div>
</div>
</div>
<div class="sect3">
<h4 id="_members_280">Members</h4>
<div class="ulist">
<ul>
<li>
<p><code>sType</code> is the type of this structure.</p>
</li>
<li>
<p><code>pNext</code> is <code>NULL</code> or a pointer to an extension-specific structure.</p>
</li>
<li>
<p><code>properties</code> is a structure of type <a href="#VkPhysicalDeviceProperties">VkPhysicalDeviceProperties</a>
describing the properties of the physical device.
This structure is written with the same values as if it were written by
<a href="#vkGetPhysicalDeviceProperties">vkGetPhysicalDeviceProperties</a>.</p>
</li>
</ul>
</div>
</div>
<div class="sect3">
<h4 id="_description_643">Description</h4>
<div class="paragraph">
<p>The <code>pNext</code> chain of this structure is used to extend the structure with
properties defined by extensions.</p>
</div>
<div class="sidebarblock">
<div class="content">
<div class="title">Valid Usage (Implicit)</div>
<div class="ulist">
<ul>
<li>
<p><a id="VUID-VkPhysicalDeviceProperties2-sType-sType"></a> <code>sType</code> <strong class="purple">must</strong> be <code>VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_PROPERTIES_2</code></p>
</li>
<li>
<p><a id="VUID-VkPhysicalDeviceProperties2-pNext-pNext"></a> Each <code>pNext</code> member of any structure (including this one) in the <code>pNext</code> chain <strong class="purple">must</strong> be either <code>NULL</code> or a pointer to a valid instance of <a href="#VkPhysicalDeviceBlendOperationAdvancedPropertiesEXT">VkPhysicalDeviceBlendOperationAdvancedPropertiesEXT</a>, <a href="#VkPhysicalDeviceConservativeRasterizationPropertiesEXT">VkPhysicalDeviceConservativeRasterizationPropertiesEXT</a>, <a href="#VkPhysicalDeviceCooperativeMatrixPropertiesNV">VkPhysicalDeviceCooperativeMatrixPropertiesNV</a>, <a href="#VkPhysicalDeviceDepthStencilResolvePropertiesKHR">VkPhysicalDeviceDepthStencilResolvePropertiesKHR</a>, <a href="#VkPhysicalDeviceDescriptorIndexingPropertiesEXT">VkPhysicalDeviceDescriptorIndexingPropertiesEXT</a>, <a href="#VkPhysicalDeviceDiscardRectanglePropertiesEXT">VkPhysicalDeviceDiscardRectanglePropertiesEXT</a>, <a href="#VkPhysicalDeviceDriverPropertiesKHR">VkPhysicalDeviceDriverPropertiesKHR</a>, <a href="#VkPhysicalDeviceExternalMemoryHostPropertiesEXT">VkPhysicalDeviceExternalMemoryHostPropertiesEXT</a>, <a href="#VkPhysicalDeviceFloatControlsPropertiesKHR">VkPhysicalDeviceFloatControlsPropertiesKHR</a>, <a href="#VkPhysicalDeviceFragmentDensityMapPropertiesEXT">VkPhysicalDeviceFragmentDensityMapPropertiesEXT</a>, <a href="#VkPhysicalDeviceIDProperties">VkPhysicalDeviceIDProperties</a>, <a href="#VkPhysicalDeviceInlineUniformBlockPropertiesEXT">VkPhysicalDeviceInlineUniformBlockPropertiesEXT</a>, <a href="#VkPhysicalDeviceMaintenance3Properties">VkPhysicalDeviceMaintenance3Properties</a>, <a href="#VkPhysicalDeviceMeshShaderPropertiesNV">VkPhysicalDeviceMeshShaderPropertiesNV</a>, <a href="#VkPhysicalDeviceMultiviewPerViewAttributesPropertiesNVX">VkPhysicalDeviceMultiviewPerViewAttributesPropertiesNVX</a>, <a href="#VkPhysicalDeviceMultiviewProperties">VkPhysicalDeviceMultiviewProperties</a>, <a href="#VkPhysicalDevicePCIBusInfoPropertiesEXT">VkPhysicalDevicePCIBusInfoPropertiesEXT</a>, <a href="#VkPhysicalDevicePointClippingProperties">VkPhysicalDevicePointClippingProperties</a>, <a href="#VkPhysicalDeviceProtectedMemoryProperties">VkPhysicalDeviceProtectedMemoryProperties</a>, <a href="#VkPhysicalDevicePushDescriptorPropertiesKHR">VkPhysicalDevicePushDescriptorPropertiesKHR</a>, <a href="#VkPhysicalDeviceRayTracingPropertiesNV">VkPhysicalDeviceRayTracingPropertiesNV</a>, <a href="#VkPhysicalDeviceSampleLocationsPropertiesEXT">VkPhysicalDeviceSampleLocationsPropertiesEXT</a>, <a href="#VkPhysicalDeviceSamplerFilterMinmaxPropertiesEXT">VkPhysicalDeviceSamplerFilterMinmaxPropertiesEXT</a>, <a href="#VkPhysicalDeviceShaderCorePropertiesAMD">VkPhysicalDeviceShaderCorePropertiesAMD</a>, <a href="#VkPhysicalDeviceShadingRateImagePropertiesNV">VkPhysicalDeviceShadingRateImagePropertiesNV</a>, <a href="#VkPhysicalDeviceSubgroupProperties">VkPhysicalDeviceSubgroupProperties</a>, <a href="#VkPhysicalDeviceTransformFeedbackPropertiesEXT">VkPhysicalDeviceTransformFeedbackPropertiesEXT</a>, or <a href="#VkPhysicalDeviceVertexAttributeDivisorPropertiesEXT">VkPhysicalDeviceVertexAttributeDivisorPropertiesEXT</a></p>
</li>
<li>
<p><a id="VUID-VkPhysicalDeviceProperties2-sType-unique"></a> Each <code>sType</code> member in the <code>pNext</code> chain <strong class="purple">must</strong> be unique</p>
</li>
</ul>
</div>
</div>
</div>
</div>
<div class="sect3">
<h4 id="_see_also_643">See Also</h4>
<div class="paragraph">
<p><a href="#VkPhysicalDeviceProperties">VkPhysicalDeviceProperties</a>, <a href="#VkStructureType">VkStructureType</a>, <a href="#vkGetPhysicalDeviceProperties2">vkGetPhysicalDeviceProperties2</a>, <a href="#vkGetPhysicalDeviceProperties2KHR">vkGetPhysicalDeviceProperties2KHR</a></p>
</div>
</div>
<div class="sect3">
<h4 id="_document_notes_643">Document Notes</h4>
<div class="paragraph">
<p>For more information, see the Vulkan Specification at URL</p>
</div>
<div class="paragraph">
<p><a href="https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VkPhysicalDeviceProperties2" class="bare">https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VkPhysicalDeviceProperties2</a></p>
</div>
<div class="paragraph">
<p>This page is extracted from the Vulkan Specification.
Fixes and changes should be made to the Specification, not directly.</p>
</div>
<div style="page-break-after: always;"></div>
</div>
</div>
<div class="sect2">
<h3 id="_vkphysicaldeviceprotectedmemoryfeatures3">VkPhysicalDeviceProtectedMemoryFeatures(3)</h3>
<div class="sect3">
<h4 id="_name_644">Name</h4>
<div class="paragraph">
<p>VkPhysicalDeviceProtectedMemoryFeatures - Structure describing protected memory features that can be supported by an implementation</p>
</div>
</div>
<div class="sect3">
<h4 id="_c_specification_644">C Specification</h4>
<div class="paragraph">
<p>The <code>VkPhysicalDeviceProtectedMemoryFeatures</code> structure is defined as:</p>
</div>
<div id="VkPhysicalDeviceProtectedMemoryFeatures" class="listingblock">
<div class="content">
<pre class="highlight"><code class="language-c++" data-lang="c++">typedef struct VkPhysicalDeviceProtectedMemoryFeatures {
    VkStructureType    sType;
    void*              pNext;
    VkBool32           protectedMemory;
} VkPhysicalDeviceProtectedMemoryFeatures;</code></pre>
</div>
</div>
</div>
<div class="sect3">
<h4 id="_members_281">Members</h4>
<div class="ulist">
<ul>
<li>
<p><a id="features-features-protectedMemory"></a> <code>protectedMemory</code> specifies
whether protected memory is supported.</p>
</li>
</ul>
</div>
</div>
<div class="sect3">
<h4 id="_description_644">Description</h4>
<div class="paragraph">
<p>If the <code>VkPhysicalDeviceProtectedMemoryFeatures</code> structure is included
in the <code>pNext</code> chain of <a href="#VkPhysicalDeviceFeatures2">VkPhysicalDeviceFeatures2</a>, it is filled
with a value indicating whether the feature is supported.</p>
</div>
<div class="sidebarblock">
<div class="content">
<div class="title">Valid Usage (Implicit)</div>
<div class="ulist">
<ul>
<li>
<p><a id="VUID-VkPhysicalDeviceProtectedMemoryFeatures-sType-sType"></a> <code>sType</code> <strong class="purple">must</strong> be <code>VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_PROTECTED_MEMORY_FEATURES</code></p>
</li>
</ul>
</div>
</div>
</div>
</div>
<div class="sect3">
<h4 id="_see_also_644">See Also</h4>
<div class="paragraph">
<p><code>VkBool32</code>, <a href="#VkStructureType">VkStructureType</a></p>
</div>
</div>
<div class="sect3">
<h4 id="_document_notes_644">Document Notes</h4>
<div class="paragraph">
<p>For more information, see the Vulkan Specification at URL</p>
</div>
<div class="paragraph">
<p><a href="https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VkPhysicalDeviceProtectedMemoryFeatures" class="bare">https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VkPhysicalDeviceProtectedMemoryFeatures</a></p>
</div>
<div class="paragraph">
<p>This page is extracted from the Vulkan Specification.
Fixes and changes should be made to the Specification, not directly.</p>
</div>
<div style="page-break-after: always;"></div>
</div>
</div>
<div class="sect2">
<h3 id="_vkphysicaldeviceprotectedmemoryproperties3">VkPhysicalDeviceProtectedMemoryProperties(3)</h3>
<div class="sect3">
<h4 id="_name_645">Name</h4>
<div class="paragraph">
<p>VkPhysicalDeviceProtectedMemoryProperties - Structure describing protected memory properties that can be supported by an implementation</p>
</div>
</div>
<div class="sect3">
<h4 id="_c_specification_645">C Specification</h4>
<div class="paragraph">
<p>The <code>VkPhysicalDeviceProtectedMemoryProperties</code> structure is defined as:</p>
</div>
<div id="VkPhysicalDeviceProtectedMemoryProperties" class="listingblock">
<div class="content">
<pre class="highlight"><code class="language-c++" data-lang="c++">typedef struct VkPhysicalDeviceProtectedMemoryProperties {
    VkStructureType    sType;
    void*              pNext;
    VkBool32           protectedNoFault;
} VkPhysicalDeviceProtectedMemoryProperties;</code></pre>
</div>
</div>
</div>
<div class="sect3">
<h4 id="_members_282">Members</h4>
<div class="ulist">
<ul>
<li>
<p><code>sType</code> is the type of this structure.</p>
</li>
<li>
<p><code>pNext</code> is <code>NULL</code> or a pointer to an extension-specific structure.</p>
</li>
<li>
<p><code>protectedNoFault</code> specifies the behavior of the implementation when
<a href="vkspec.html#memory-protected-access-rules">protected memory access rules</a> are
broken.
If <code>protectedNoFault</code> is <code>VK_TRUE</code>, breaking those rules will
not result in process termination or device loss.</p>
</li>
</ul>
</div>
</div>
<div class="sect3">
<h4 id="_description_645">Description</h4>
<div class="paragraph">
<p>If the <code>VkPhysicalDeviceProtectedMemoryProperties</code> structure is included
in the <code>pNext</code> chain of <a href="#VkPhysicalDeviceProperties2">VkPhysicalDeviceProperties2</a>, it is filled
with a value indicating the implementation-dependent behavior.</p>
</div>
<div class="sidebarblock">
<div class="content">
<div class="title">Valid Usage (Implicit)</div>
<div class="ulist">
<ul>
<li>
<p><a id="VUID-VkPhysicalDeviceProtectedMemoryProperties-sType-sType"></a> <code>sType</code> <strong class="purple">must</strong> be <code>VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_PROTECTED_MEMORY_PROPERTIES</code></p>
</li>
</ul>
</div>
</div>
</div>
</div>
<div class="sect3">
<h4 id="_see_also_645">See Also</h4>
<div class="paragraph">
<p><code>VkBool32</code>, <a href="#VkStructureType">VkStructureType</a></p>
</div>
</div>
<div class="sect3">
<h4 id="_document_notes_645">Document Notes</h4>
<div class="paragraph">
<p>For more information, see the Vulkan Specification at URL</p>
</div>
<div class="paragraph">
<p><a href="https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VkPhysicalDeviceProtectedMemoryProperties" class="bare">https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VkPhysicalDeviceProtectedMemoryProperties</a></p>
</div>
<div class="paragraph">
<p>This page is extracted from the Vulkan Specification.
Fixes and changes should be made to the Specification, not directly.</p>
</div>
<div style="page-break-after: always;"></div>
</div>
</div>
<div class="sect2">
<h3 id="_vkphysicaldevicepushdescriptorpropertieskhr3">VkPhysicalDevicePushDescriptorPropertiesKHR(3)</h3>
<div class="sect3">
<h4 id="_name_646">Name</h4>
<div class="paragraph">
<p>VkPhysicalDevicePushDescriptorPropertiesKHR - Structure describing push descriptor limits that can be supported by an implementation</p>
</div>
</div>
<div class="sect3">
<h4 id="_c_specification_646">C Specification</h4>
<div class="paragraph">
<p>The <code>VkPhysicalDevicePushDescriptorPropertiesKHR</code> structure is defined
as:</p>
</div>
<div id="VkPhysicalDevicePushDescriptorPropertiesKHR" class="listingblock">
<div class="content">
<pre class="highlight"><code class="language-c++" data-lang="c++">typedef struct VkPhysicalDevicePushDescriptorPropertiesKHR {
    VkStructureType    sType;
    void*              pNext;
    uint32_t           maxPushDescriptors;
} VkPhysicalDevicePushDescriptorPropertiesKHR;</code></pre>
</div>
</div>
</div>
<div class="sect3">
<h4 id="_members_283">Members</h4>
<div class="paragraph">
<p>The members of the <code>VkPhysicalDevicePushDescriptorPropertiesKHR</code>
structure describe the following implementation-dependent limits:</p>
</div>
</div>
<div class="sect3">
<h4 id="_description_646">Description</h4>
<div class="ulist">
<ul>
<li>
<p><code>sType</code> is the type of this structure.</p>
</li>
<li>
<p><code>pNext</code> is <code>NULL</code> or a pointer to an extension-specific structure.</p>
</li>
<li>
<p><a id="limits-maxPushDescriptors"></a> <code>maxPushDescriptors</code> is the maximum
number of descriptors that <strong class="purple">can</strong> be used in a descriptor set created with
<code>VK_DESCRIPTOR_SET_LAYOUT_CREATE_PUSH_DESCRIPTOR_BIT_KHR</code> set.</p>
</li>
</ul>
</div>
<div class="paragraph">
<p>If the <code>VkPhysicalDevicePushDescriptorPropertiesKHR</code> structure is
included in the <code>pNext</code> chain of <a href="#VkPhysicalDeviceProperties2">VkPhysicalDeviceProperties2</a>, it
is filled with the implementation-dependent limits.</p>
</div>
<div class="sidebarblock">
<div class="content">
<div class="title">Valid Usage (Implicit)</div>
<div class="ulist">
<ul>
<li>
<p><a id="VUID-VkPhysicalDevicePushDescriptorPropertiesKHR-sType-sType"></a> <code>sType</code> <strong class="purple">must</strong> be <code>VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_PUSH_DESCRIPTOR_PROPERTIES_KHR</code></p>
</li>
</ul>
</div>
</div>
</div>
</div>
<div class="sect3">
<h4 id="_see_also_646">See Also</h4>
<div class="paragraph">
<p><a href="#VkStructureType">VkStructureType</a></p>
</div>
</div>
<div class="sect3">
<h4 id="_document_notes_646">Document Notes</h4>
<div class="paragraph">
<p>For more information, see the Vulkan Specification at URL</p>
</div>
<div class="paragraph">
<p><a href="https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VkPhysicalDevicePushDescriptorPropertiesKHR" class="bare">https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VkPhysicalDevicePushDescriptorPropertiesKHR</a></p>
</div>
<div class="paragraph">
<p>This page is extracted from the Vulkan Specification.
Fixes and changes should be made to the Specification, not directly.</p>
</div>
<div style="page-break-after: always;"></div>
</div>
</div>
<div class="sect2">
<h3 id="_vkphysicaldeviceraytracingpropertiesnv3">VkPhysicalDeviceRayTracingPropertiesNV(3)</h3>
<div class="sect3">
<h4 id="_name_647">Name</h4>
<div class="paragraph">
<p>VkPhysicalDeviceRayTracingPropertiesNV - Properties of the physical device for ray tracing</p>
</div>
</div>
<div class="sect3">
<h4 id="_c_specification_647">C Specification</h4>
<div class="paragraph">
<p>The <code>VkPhysicalDeviceRayTracingPropertiesNV</code> structure is defined as:</p>
</div>
<div id="VkPhysicalDeviceRayTracingPropertiesNV" class="listingblock">
<div class="content">
<pre class="highlight"><code class="language-c++" data-lang="c++">typedef struct VkPhysicalDeviceRayTracingPropertiesNV {
    VkStructureType    sType;
    void*              pNext;
    uint32_t           shaderGroupHandleSize;
    uint32_t           maxRecursionDepth;
    uint32_t           maxShaderGroupStride;
    uint32_t           shaderGroupBaseAlignment;
    uint64_t           maxGeometryCount;
    uint64_t           maxInstanceCount;
    uint64_t           maxTriangleCount;
    uint32_t           maxDescriptorSetAccelerationStructures;
} VkPhysicalDeviceRayTracingPropertiesNV;</code></pre>
</div>
</div>
</div>
<div class="sect3">
<h4 id="_members_284">Members</h4>
<div class="ulist">
<ul>
<li>
<p><code>sType</code> is the type of this structure.</p>
</li>
<li>
<p><code>pNext</code> is <code>NULL</code> or a pointer to an extension-specific structure.</p>
</li>
<li>
<p><code>shaderGroupHandleSize</code> size in bytes of the shader header.</p>
</li>
<li>
<p><code>maxRecursionDepth</code> is the maximum number of levels of recursion
allowed in a trace command.</p>
</li>
<li>
<p><code>maxShaderGroupStride</code> is the maximum stride in bytes allowed
between shader groups in the SBT.</p>
</li>
<li>
<p><code>shaderGroupBaseAlignment</code> is the required alignment in bytes for
the base of the SBTs.</p>
</li>
<li>
<p><code>maxGeometryCount</code> is the maximum number of geometries in the bottom
level acceleration structure.</p>
</li>
<li>
<p><code>maxInstanceCount</code> is the maximum number of instances in the top
level acceleration structure.</p>
</li>
<li>
<p><code>maxTriangleCount</code> is the maximum number of triangles in all
geometries in the bottom level acceleration structure.</p>
</li>
<li>
<p><code>maxDescriptorSetAccelerationStructures</code> is the maximum number of
acceleration structure descriptors that are allowed in a descriptor set.</p>
</li>
</ul>
</div>
</div>
<div class="sect3">
<h4 id="_description_647">Description</h4>
<div class="paragraph">
<p>If the <code>VkPhysicalDeviceRayTracingPropertiesNV</code> structure is included in
the <code>pNext</code> chain of <a href="#VkPhysicalDeviceProperties2">VkPhysicalDeviceProperties2</a>, it is filled
with the implementation-dependent limits.</p>
</div>
<div class="sidebarblock">
<div class="content">
<div class="title">Valid Usage (Implicit)</div>
<div class="ulist">
<ul>
<li>
<p><a id="VUID-VkPhysicalDeviceRayTracingPropertiesNV-sType-sType"></a> <code>sType</code> <strong class="purple">must</strong> be <code>VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_RAY_TRACING_PROPERTIES_NV</code></p>
</li>
</ul>
</div>
</div>
</div>
</div>
<div class="sect3">
<h4 id="_see_also_647">See Also</h4>
<div class="paragraph">
<p><a href="#VkStructureType">VkStructureType</a></p>
</div>
</div>
<div class="sect3">
<h4 id="_document_notes_647">Document Notes</h4>
<div class="paragraph">
<p>For more information, see the Vulkan Specification at URL</p>
</div>
<div class="paragraph">
<p><a href="https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VkPhysicalDeviceRayTracingPropertiesNV" class="bare">https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VkPhysicalDeviceRayTracingPropertiesNV</a></p>
</div>
<div class="paragraph">
<p>This page is extracted from the Vulkan Specification.
Fixes and changes should be made to the Specification, not directly.</p>
</div>
<div style="page-break-after: always;"></div>
</div>
</div>
<div class="sect2">
<h3 id="_vkphysicaldevicerepresentativefragmenttestfeaturesnv3">VkPhysicalDeviceRepresentativeFragmentTestFeaturesNV(3)</h3>
<div class="sect3">
<h4 id="_name_648">Name</h4>
<div class="paragraph">
<p>VkPhysicalDeviceRepresentativeFragmentTestFeaturesNV - Structure describing the representative fragment test features that can be supported by an implementation</p>
</div>
</div>
<div class="sect3">
<h4 id="_c_specification_648">C Specification</h4>
<div class="paragraph">
<p>The <code>VkPhysicalDeviceRepresentativeFragmentTestFeaturesNV</code> structure is
defined as:</p>
</div>
<div id="VkPhysicalDeviceRepresentativeFragmentTestFeaturesNV" class="listingblock">
<div class="content">
<pre class="highlight"><code class="language-c++" data-lang="c++">typedef struct VkPhysicalDeviceRepresentativeFragmentTestFeaturesNV {
    VkStructureType    sType;
    void*              pNext;
    VkBool32           representativeFragmentTest;
} VkPhysicalDeviceRepresentativeFragmentTestFeaturesNV;</code></pre>
</div>
</div>
</div>
<div class="sect3">
<h4 id="_members_285">Members</h4>
<div class="paragraph">
<p>The members of the
<code>VkPhysicalDeviceRepresentativeFragmentTestFeaturesNV</code> structure
describe the following features:</p>
</div>
</div>
<div class="sect3">
<h4 id="_description_648">Description</h4>
<div class="ulist">
<ul>
<li>
<p><a id="features-representativeFragmentTest"></a> <code>representativeFragmentTest</code>
indicates whether the implementation supports the representative
fragment test.
See <a href="vkspec.html#fragops-rep-frag-test">Representative Fragment Test</a>.</p>
</li>
</ul>
</div>
<div class="paragraph">
<p>If the <code>VkPhysicalDeviceRepresentativeFragmentTestFeaturesNV</code> structure
is included in the <code>pNext</code> chain of <a href="#VkPhysicalDeviceFeatures2KHR">VkPhysicalDeviceFeatures2KHR</a>,
it is filled with values indicating whether the feature is supported.
<code>VkPhysicalDeviceRepresentativeFragmentTestFeaturesNV</code> <strong class="purple">can</strong> also be used
in the <code>pNext</code> chain of <a href="#VkDeviceCreateInfo">VkDeviceCreateInfo</a> to enable the feature.</p>
</div>
<div class="sidebarblock">
<div class="content">
<div class="title">Valid Usage (Implicit)</div>
<div class="ulist">
<ul>
<li>
<p><a id="VUID-VkPhysicalDeviceRepresentativeFragmentTestFeaturesNV-sType-sType"></a> <code>sType</code> <strong class="purple">must</strong> be <code>VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_REPRESENTATIVE_FRAGMENT_TEST_FEATURES_NV</code></p>
</li>
</ul>
</div>
</div>
</div>
</div>
<div class="sect3">
<h4 id="_see_also_648">See Also</h4>
<div class="paragraph">
<p><code>VkBool32</code>, <a href="#VkStructureType">VkStructureType</a></p>
</div>
</div>
<div class="sect3">
<h4 id="_document_notes_648">Document Notes</h4>
<div class="paragraph">
<p>For more information, see the Vulkan Specification at URL</p>
</div>
<div class="paragraph">
<p><a href="https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VkPhysicalDeviceRepresentativeFragmentTestFeaturesNV" class="bare">https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VkPhysicalDeviceRepresentativeFragmentTestFeaturesNV</a></p>
</div>
<div class="paragraph">
<p>This page is extracted from the Vulkan Specification.
Fixes and changes should be made to the Specification, not directly.</p>
</div>
<div style="page-break-after: always;"></div>
</div>
</div>
<div class="sect2">
<h3 id="_vkphysicaldevicesamplelocationspropertiesext3">VkPhysicalDeviceSampleLocationsPropertiesEXT(3)</h3>
<div class="sect3">
<h4 id="_name_649">Name</h4>
<div class="paragraph">
<p>VkPhysicalDeviceSampleLocationsPropertiesEXT - Structure describing sample location limits that can be supported by an implementation</p>
</div>
</div>
<div class="sect3">
<h4 id="_c_specification_649">C Specification</h4>
<div class="paragraph">
<p>The <code>VkPhysicalDeviceSampleLocationsPropertiesEXT</code> structure is defined
as:</p>
</div>
<div id="VkPhysicalDeviceSampleLocationsPropertiesEXT" class="listingblock">
<div class="content">
<pre class="highlight"><code class="language-c++" data-lang="c++">typedef struct VkPhysicalDeviceSampleLocationsPropertiesEXT {
    VkStructureType       sType;
    void*                 pNext;
    VkSampleCountFlags    sampleLocationSampleCounts;
    VkExtent2D            maxSampleLocationGridSize;
    float                 sampleLocationCoordinateRange[2];
    uint32_t              sampleLocationSubPixelBits;
    VkBool32              variableSampleLocations;
} VkPhysicalDeviceSampleLocationsPropertiesEXT;</code></pre>
</div>
</div>
</div>
<div class="sect3">
<h4 id="_members_286">Members</h4>
<div class="paragraph">
<p>The members of the <code>VkPhysicalDeviceSampleLocationsPropertiesEXT</code>
structure describe the following implementation-dependent limits:</p>
</div>
</div>
<div class="sect3">
<h4 id="_description_649">Description</h4>
<div class="ulist">
<ul>
<li>
<p><code>sType</code> is the type of this structure.</p>
</li>
<li>
<p><code>pNext</code> is <code>NULL</code> or a pointer to an extension-specific structure.</p>
</li>
<li>
<p><a id="limits-sampleLocationSampleCounts"></a> <code>sampleLocationSampleCounts</code>
is a bitmask of <a href="#VkSampleCountFlagBits">VkSampleCountFlagBits</a> indicating the sample counts
supporting custom sample locations.</p>
</li>
<li>
<p><a id="limits-maxSampleLocationGridSize"></a> <code>maxSampleLocationGridSize</code> is
the maximum size of the pixel grid in which sample locations <strong class="purple">can</strong> vary
that is supported for all sample counts in
<code>sampleLocationSampleCounts</code>.</p>
</li>
<li>
<p><a id="limits-sampleLocationCoordinateRange"></a>
<code>sampleLocationCoordinateRange</code>[2] is the range of supported sample
location coordinates.</p>
</li>
<li>
<p><a id="limits-sampleLocationSubPixelBits"></a> <code>sampleLocationSubPixelBits</code>
is the number of bits of subpixel precision for sample locations.</p>
</li>
<li>
<p><a id="limits-variableSampleLocations"></a> <code>variableSampleLocations</code>
specifies whether the sample locations used by all pipelines that will
be bound to a command buffer during a subpass <strong class="purple">must</strong> match.
If set to <code>VK_TRUE</code>, the implementation supports variable sample
locations in a subpass.
If set to <code>VK_FALSE</code>, then the sample locations <strong class="purple">must</strong> stay constant
in each subpass.</p>
</li>
</ul>
</div>
<div class="paragraph">
<p>If the <code>VkPhysicalDeviceSampleLocationsPropertiesEXT</code> structure is
included in the <code>pNext</code> chain of <a href="#VkPhysicalDeviceProperties2">VkPhysicalDeviceProperties2</a>, it
is filled with the implementation-dependent limits.</p>
</div>
<div class="sidebarblock">
<div class="content">
<div class="title">Valid Usage (Implicit)</div>
<div class="ulist">
<ul>
<li>
<p><a id="VUID-VkPhysicalDeviceSampleLocationsPropertiesEXT-sType-sType"></a> <code>sType</code> <strong class="purple">must</strong> be <code>VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SAMPLE_LOCATIONS_PROPERTIES_EXT</code></p>
</li>
</ul>
</div>
</div>
</div>
</div>
<div class="sect3">
<h4 id="_see_also_649">See Also</h4>
<div class="paragraph">
<p><code>VkBool32</code>, <a href="#VkExtent2D">VkExtent2D</a>, <a href="#VkSampleCountFlags">VkSampleCountFlags</a>, <a href="#VkStructureType">VkStructureType</a></p>
</div>
</div>
<div class="sect3">
<h4 id="_document_notes_649">Document Notes</h4>
<div class="paragraph">
<p>For more information, see the Vulkan Specification at URL</p>
</div>
<div class="paragraph">
<p><a href="https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VkPhysicalDeviceSampleLocationsPropertiesEXT" class="bare">https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VkPhysicalDeviceSampleLocationsPropertiesEXT</a></p>
</div>
<div class="paragraph">
<p>This page is extracted from the Vulkan Specification.
Fixes and changes should be made to the Specification, not directly.</p>
</div>
<div style="page-break-after: always;"></div>
</div>
</div>
<div class="sect2">
<h3 id="_vkphysicaldevicesamplerfilterminmaxpropertiesext3">VkPhysicalDeviceSamplerFilterMinmaxPropertiesEXT(3)</h3>
<div class="sect3">
<h4 id="_name_650">Name</h4>
<div class="paragraph">
<p>VkPhysicalDeviceSamplerFilterMinmaxPropertiesEXT - Structure describing sampler filter minmax limits that can be supported by an implementation</p>
</div>
</div>
<div class="sect3">
<h4 id="_c_specification_650">C Specification</h4>
<div class="paragraph">
<p>The <code>VkPhysicalDeviceSamplerFilterMinmaxPropertiesEXT</code> structure is
defined as:</p>
</div>
<div id="VkPhysicalDeviceSamplerFilterMinmaxPropertiesEXT" class="listingblock">
<div class="content">
<pre class="highlight"><code class="language-c++" data-lang="c++">typedef struct VkPhysicalDeviceSamplerFilterMinmaxPropertiesEXT {
    VkStructureType    sType;
    void*              pNext;
    VkBool32           filterMinmaxSingleComponentFormats;
    VkBool32           filterMinmaxImageComponentMapping;
} VkPhysicalDeviceSamplerFilterMinmaxPropertiesEXT;</code></pre>
</div>
</div>
</div>
<div class="sect3">
<h4 id="_members_287">Members</h4>
<div class="paragraph">
<p>The members of the <code>VkPhysicalDeviceSamplerFilterMinmaxPropertiesEXT</code>
structure describe the following implementation-dependent limits:</p>
</div>
</div>
<div class="sect3">
<h4 id="_description_650">Description</h4>
<div class="ulist">
<ul>
<li>
<p><code>sType</code> is the type of this structure.</p>
</li>
<li>
<p><code>pNext</code> is <code>NULL</code> or a pointer to an extension-specific structure.</p>
</li>
<li>
<p><a id="limits-filterMinmaxSingleComponentFormats"></a>
<code>filterMinmaxSingleComponentFormats</code> is a boolean value indicating
whether a minimum set of required formats support min/max filtering.</p>
</li>
<li>
<p><a id="limits-filterMinmaxImageComponentMapping"></a>
<code>filterMinmaxImageComponentMapping</code> is a boolean value indicating
whether the implementation supports non-identity component mapping of
the image when doing min/max filtering.</p>
</li>
</ul>
</div>
<div class="paragraph">
<p>If the <code>VkPhysicalDeviceSamplerFilterMinmaxPropertiesEXT</code> structure is
included in the <code>pNext</code> chain of <a href="#VkPhysicalDeviceProperties2">VkPhysicalDeviceProperties2</a>, it
is filled with the implementation-dependent limits.</p>
</div>
<div class="paragraph">
<p>If <code>filterMinmaxSingleComponentFormats</code> is <code>VK_TRUE</code>, the following
formats <strong class="purple">must</strong> support the
<code>VK_FORMAT_FEATURE_SAMPLED_IMAGE_FILTER_MINMAX_BIT_EXT</code> feature with
<code>VK_IMAGE_TILING_OPTIMAL</code>, if they support
<code>VK_FORMAT_FEATURE_SAMPLED_IMAGE_BIT</code>.</p>
</div>
<div class="ulist">
<ul>
<li>
<p><code>VK_FORMAT_R8_UNORM</code></p>
</li>
<li>
<p><code>VK_FORMAT_R8_SNORM</code></p>
</li>
<li>
<p><code>VK_FORMAT_R16_UNORM</code></p>
</li>
<li>
<p><code>VK_FORMAT_R16_SNORM</code></p>
</li>
<li>
<p><code>VK_FORMAT_R16_SFLOAT</code></p>
</li>
<li>
<p><code>VK_FORMAT_R32_SFLOAT</code></p>
</li>
<li>
<p><code>VK_FORMAT_D16_UNORM</code></p>
</li>
<li>
<p><code>VK_FORMAT_X8_D24_UNORM_PACK32</code></p>
</li>
<li>
<p><code>VK_FORMAT_D32_SFLOAT</code></p>
</li>
<li>
<p><code>VK_FORMAT_D16_UNORM_S8_UINT</code></p>
</li>
<li>
<p><code>VK_FORMAT_D24_UNORM_S8_UINT</code></p>
</li>
<li>
<p><code>VK_FORMAT_D32_SFLOAT_S8_UINT</code></p>
</li>
</ul>
</div>
<div class="paragraph">
<p>If the format is a depth/stencil format, this bit only specifies that the
depth aspect (not the stencil aspect) of an image of this format supports
min/max filtering, and that min/max filtering of the depth aspect is
supported when depth compare is disabled in the sampler.</p>
</div>
<div class="paragraph">
<p>If <code>filterMinmaxImageComponentMapping</code> is <code>VK_FALSE</code> the component
mapping of the image view used with min/max filtering <strong class="purple">must</strong> have been
created with the <code>r</code> component set to
<code>VK_COMPONENT_SWIZZLE_IDENTITY</code>.
Only the <code>r</code> component of the sampled image value is defined and the
other component values are undefined.
If <code>filterMinmaxImageComponentMapping</code> is <code>VK_TRUE</code> this restriction
does not apply and image component mapping works as normal.</p>
</div>
<div class="sidebarblock">
<div class="content">
<div class="title">Valid Usage (Implicit)</div>
<div class="ulist">
<ul>
<li>
<p><a id="VUID-VkPhysicalDeviceSamplerFilterMinmaxPropertiesEXT-sType-sType"></a> <code>sType</code> <strong class="purple">must</strong> be <code>VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SAMPLER_FILTER_MINMAX_PROPERTIES_EXT</code></p>
</li>
</ul>
</div>
</div>
</div>
</div>
<div class="sect3">
<h4 id="_see_also_650">See Also</h4>
<div class="paragraph">
<p><code>VkBool32</code>, <a href="#VkStructureType">VkStructureType</a></p>
</div>
</div>
<div class="sect3">
<h4 id="_document_notes_650">Document Notes</h4>
<div class="paragraph">
<p>For more information, see the Vulkan Specification at URL</p>
</div>
<div class="paragraph">
<p><a href="https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VkPhysicalDeviceSamplerFilterMinmaxPropertiesEXT" class="bare">https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VkPhysicalDeviceSamplerFilterMinmaxPropertiesEXT</a></p>
</div>
<div class="paragraph">
<p>This page is extracted from the Vulkan Specification.
Fixes and changes should be made to the Specification, not directly.</p>
</div>
<div style="page-break-after: always;"></div>
</div>
</div>
<div class="sect2">
<h3 id="_vkphysicaldevicesamplerycbcrconversionfeatures3">VkPhysicalDeviceSamplerYcbcrConversionFeatures(3)</h3>
<div class="sect3">
<h4 id="_name_651">Name</h4>
<div class="paragraph">
<p>VkPhysicalDeviceSamplerYcbcrConversionFeatures - Structure describing Y&#8217;CbCr conversion features that can be supported by an implementation</p>
</div>
</div>
<div class="sect3">
<h4 id="_c_specification_651">C Specification</h4>
<div class="paragraph">
<p>The <code>VkPhysicalDeviceSamplerYcbcrConversionFeatures</code> structure is
defined as:</p>
</div>
<div id="VkPhysicalDeviceSamplerYcbcrConversionFeatures" class="listingblock">
<div class="content">
<pre class="highlight"><code class="language-c++" data-lang="c++">typedef struct VkPhysicalDeviceSamplerYcbcrConversionFeatures {
    VkStructureType    sType;
    void*              pNext;
    VkBool32           samplerYcbcrConversion;
} VkPhysicalDeviceSamplerYcbcrConversionFeatures;</code></pre>
</div>
</div>
<div class="paragraph">
<p>or the equivalent</p>
</div>
<div id="VkPhysicalDeviceSamplerYcbcrConversionFeaturesKHR" class="listingblock">
<div class="content">
<pre class="highlight"><code class="language-c++" data-lang="c++">typedef VkPhysicalDeviceSamplerYcbcrConversionFeatures VkPhysicalDeviceSamplerYcbcrConversionFeaturesKHR;</code></pre>
</div>
</div>
</div>
<div class="sect3">
<h4 id="_members_288">Members</h4>
<div class="paragraph">
<p>The members of the <code>VkPhysicalDeviceSamplerYcbcrConversionFeatures</code>
structure describe the following feature:</p>
</div>
</div>
<div class="sect3">
<h4 id="_description_651">Description</h4>
<div class="ulist">
<ul>
<li>
<p><a id="features-sampler-YCbCr-conversion"></a> <code>samplerYcbcrConversion</code>
specifies whether the implementation supports
<a href="vkspec.html#samplers-YCbCr-conversion">sampler Y&#8217;C<sub>B</sub>C<sub>R</sub> conversion</a>.
If <code>samplerYcbcrConversion</code> is <code>VK_FALSE</code>, sampler Y&#8217;C<sub>B</sub>C<sub>R</sub>
conversion is not supported, and samplers using sampler Y&#8217;C<sub>B</sub>C<sub>R</sub>
conversion <strong class="purple">must</strong> not be used.</p>
</li>
</ul>
</div>
<div class="sidebarblock">
<div class="content">
<div class="title">Valid Usage (Implicit)</div>
<div class="ulist">
<ul>
<li>
<p><a id="VUID-VkPhysicalDeviceSamplerYcbcrConversionFeatures-sType-sType"></a> <code>sType</code> <strong class="purple">must</strong> be <code>VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SAMPLER_YCBCR_CONVERSION_FEATURES</code></p>
</li>
</ul>
</div>
</div>
</div>
</div>
<div class="sect3">
<h4 id="_see_also_651">See Also</h4>
<div class="paragraph">
<p><code>VkBool32</code>, <a href="#VkStructureType">VkStructureType</a></p>
</div>
</div>
<div class="sect3">
<h4 id="_document_notes_651">Document Notes</h4>
<div class="paragraph">
<p>For more information, see the Vulkan Specification at URL</p>
</div>
<div class="paragraph">
<p><a href="https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VkPhysicalDeviceSamplerYcbcrConversionFeatures" class="bare">https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VkPhysicalDeviceSamplerYcbcrConversionFeatures</a></p>
</div>
<div class="paragraph">
<p>This page is extracted from the Vulkan Specification.
Fixes and changes should be made to the Specification, not directly.</p>
</div>
<div style="page-break-after: always;"></div>
</div>
</div>
<div class="sect2">
<h3 id="_vkphysicaldevicescalarblocklayoutfeaturesext3">VkPhysicalDeviceScalarBlockLayoutFeaturesEXT(3)</h3>
<div class="sect3">
<h4 id="_name_652">Name</h4>
<div class="paragraph">
<p>VkPhysicalDeviceScalarBlockLayoutFeaturesEXT - Structure indicating support for scalar block layouts</p>
</div>
</div>
<div class="sect3">
<h4 id="_c_specification_652">C Specification</h4>
<div class="paragraph">
<p>The <code>VkPhysicalDeviceScalarBlockLayoutFeaturesEXT</code> structure is defined
as:</p>
</div>
<div id="VkPhysicalDeviceScalarBlockLayoutFeaturesEXT" class="listingblock">
<div class="content">
<pre class="highlight"><code class="language-c++" data-lang="c++">typedef struct VkPhysicalDeviceScalarBlockLayoutFeaturesEXT {
    VkStructureType    sType;
    void*              pNext;
    VkBool32           scalarBlockLayout;
} VkPhysicalDeviceScalarBlockLayoutFeaturesEXT;</code></pre>
</div>
</div>
</div>
<div class="sect3">
<h4 id="_members_289">Members</h4>
<div class="paragraph">
<p>The members of the <code>VkPhysicalDeviceScalarBlockLayoutFeaturesEXT</code>
structure describe the following features:</p>
</div>
</div>
<div class="sect3">
<h4 id="_description_652">Description</h4>
<div class="ulist">
<ul>
<li>
<p><a id="features-scalarBlockLayout"></a> <code>scalarBlockLayout</code> indicates that
the implementation supports the layout of resource blocks in shaders
using <a href="vkspec.html#interfaces-scalar-block-layout">scalar alignment</a>.</p>
</li>
</ul>
</div>
<div class="paragraph">
<p>If the <code>VkPhysicalDeviceScalarBlockLayoutFeaturesEXT</code> structure is
included in the <code>pNext</code> chain of <a href="#VkPhysicalDeviceFeatures2KHR">VkPhysicalDeviceFeatures2KHR</a>, it
is filled with values indicating whether the feature is supported.
<code>VkPhysicalDeviceScalarBlockLayoutFeaturesEXT</code> <strong class="purple">can</strong> also be used in the
<code>pNext</code> chain of <a href="#VkDeviceCreateInfo">VkDeviceCreateInfo</a> to enable this feature.</p>
</div>
<div class="sidebarblock">
<div class="content">
<div class="title">Valid Usage (Implicit)</div>
<div class="ulist">
<ul>
<li>
<p><a id="VUID-VkPhysicalDeviceScalarBlockLayoutFeaturesEXT-sType-sType"></a> <code>sType</code> <strong class="purple">must</strong> be <code>VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SCALAR_BLOCK_LAYOUT_FEATURES_EXT</code></p>
</li>
</ul>
</div>
</div>
</div>
</div>
<div class="sect3">
<h4 id="_see_also_652">See Also</h4>
<div class="paragraph">
<p><code>VkBool32</code>, <a href="#VkStructureType">VkStructureType</a></p>
</div>
</div>
<div class="sect3">
<h4 id="_document_notes_652">Document Notes</h4>
<div class="paragraph">
<p>For more information, see the Vulkan Specification at URL</p>
</div>
<div class="paragraph">
<p><a href="https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VkPhysicalDeviceScalarBlockLayoutFeaturesEXT" class="bare">https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VkPhysicalDeviceScalarBlockLayoutFeaturesEXT</a></p>
</div>
<div class="paragraph">
<p>This page is extracted from the Vulkan Specification.
Fixes and changes should be made to the Specification, not directly.</p>
</div>
<div style="page-break-after: always;"></div>
</div>
</div>
<div class="sect2">
<h3 id="_vkphysicaldeviceshaderatomicint64featureskhr3">VkPhysicalDeviceShaderAtomicInt64FeaturesKHR(3)</h3>
<div class="sect3">
<h4 id="_name_653">Name</h4>
<div class="paragraph">
<p>VkPhysicalDeviceShaderAtomicInt64FeaturesKHR - Structure describing features supported by VK_KHR_shader_atomic_int64</p>
</div>
</div>
<div class="sect3">
<h4 id="_c_specification_653">C Specification</h4>
<div class="paragraph">
<p>To query 64-bit atomic support for signed and unsigned integers call
<a href="#vkGetPhysicalDeviceFeatures2">vkGetPhysicalDeviceFeatures2</a> with a
<code>VkPhysicalDeviceShaderAtomicInt64FeaturesKHR</code> structure included in the
<code>pNext</code> chain of its <code>pFeatures</code> parameter.</p>
</div>
<div class="paragraph">
<p>The <a href="#VkPhysicalDeviceShaderAtomicInt64FeaturesKHR">VkPhysicalDeviceShaderAtomicInt64FeaturesKHR</a> structure is defined
as:</p>
</div>
<div id="VkPhysicalDeviceShaderAtomicInt64FeaturesKHR" class="listingblock">
<div class="content">
<pre class="highlight"><code class="language-c++" data-lang="c++">typedef struct VkPhysicalDeviceShaderAtomicInt64FeaturesKHR {
    VkStructureType    sType;
    void*              pNext;
    VkBool32           shaderBufferInt64Atomics;
    VkBool32           shaderSharedInt64Atomics;
} VkPhysicalDeviceShaderAtomicInt64FeaturesKHR;</code></pre>
</div>
</div>
</div>
<div class="sect3">
<h4 id="_members_290">Members</h4>
<div class="ulist">
<ul>
<li>
<p><code>sType</code> is the type of this structure.</p>
</li>
<li>
<p><code>pNext</code> is <code>NULL</code> or a pointer to an extension-specific structure.</p>
</li>
<li>
<p><a id="features-shaderBufferInt64Atomics"></a> <code>shaderBufferInt64Atomics</code>
indicates whether shaders <strong class="purple">can</strong> support 64-bit unsigned and signed
integer atomic operations on buffers.</p>
</li>
<li>
<p><a id="features-shaderSharedInt64Atomics"></a> <code>shaderSharedInt64Atomics</code>
indicates whether shaders <strong class="purple">can</strong> support 64-bit unsigned and signed
integer atomic operations on shared memory.</p>
</li>
</ul>
</div>
</div>
<div class="sect3">
<h4 id="_description_653">Description</h4>
<div class="sidebarblock">
<div class="content">
<div class="title">Valid Usage (Implicit)</div>
<div class="ulist">
<ul>
<li>
<p><a id="VUID-VkPhysicalDeviceShaderAtomicInt64FeaturesKHR-sType-sType"></a> <code>sType</code> <strong class="purple">must</strong> be <code>VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_ATOMIC_INT64_FEATURES_KHR</code></p>
</li>
</ul>
</div>
</div>
</div>
</div>
<div class="sect3">
<h4 id="_see_also_653">See Also</h4>
<div class="paragraph">
<p><code>VkBool32</code>, <a href="#VkStructureType">VkStructureType</a></p>
</div>
</div>
<div class="sect3">
<h4 id="_document_notes_653">Document Notes</h4>
<div class="paragraph">
<p>For more information, see the Vulkan Specification at URL</p>
</div>
<div class="paragraph">
<p><a href="https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VkPhysicalDeviceShaderAtomicInt64FeaturesKHR" class="bare">https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VkPhysicalDeviceShaderAtomicInt64FeaturesKHR</a></p>
</div>
<div class="paragraph">
<p>This page is extracted from the Vulkan Specification.
Fixes and changes should be made to the Specification, not directly.</p>
</div>
<div style="page-break-after: always;"></div>
</div>
</div>
<div class="sect2">
<h3 id="_vkphysicaldeviceshadercorepropertiesamd3">VkPhysicalDeviceShaderCorePropertiesAMD(3)</h3>
<div class="sect3">
<h4 id="_name_654">Name</h4>
<div class="paragraph">
<p>VkPhysicalDeviceShaderCorePropertiesAMD - Structure describing shader core properties that can be supported by an implementation</p>
</div>
</div>
<div class="sect3">
<h4 id="_c_specification_654">C Specification</h4>
<div class="paragraph">
<p>The <code>VkPhysicalDeviceShaderCorePropertiesAMD</code> structure is defined as:</p>
</div>
<div id="VkPhysicalDeviceShaderCorePropertiesAMD" class="listingblock">
<div class="content">
<pre class="highlight"><code class="language-c++" data-lang="c++">typedef struct VkPhysicalDeviceShaderCorePropertiesAMD {
    VkStructureType    sType;
    void*              pNext;
    uint32_t           shaderEngineCount;
    uint32_t           shaderArraysPerEngineCount;
    uint32_t           computeUnitsPerShaderArray;
    uint32_t           simdPerComputeUnit;
    uint32_t           wavefrontsPerSimd;
    uint32_t           wavefrontSize;
    uint32_t           sgprsPerSimd;
    uint32_t           minSgprAllocation;
    uint32_t           maxSgprAllocation;
    uint32_t           sgprAllocationGranularity;
    uint32_t           vgprsPerSimd;
    uint32_t           minVgprAllocation;
    uint32_t           maxVgprAllocation;
    uint32_t           vgprAllocationGranularity;
} VkPhysicalDeviceShaderCorePropertiesAMD;</code></pre>
</div>
</div>
</div>
<div class="sect3">
<h4 id="_members_291">Members</h4>
<div class="paragraph">
<p>The members of the <code>VkPhysicalDeviceShaderCorePropertiesAMD</code> structure
describe the following implementation-dependent limits:</p>
</div>
</div>
<div class="sect3">
<h4 id="_description_654">Description</h4>
<div class="ulist">
<ul>
<li>
<p><code>sType</code> is the type of this structure.</p>
</li>
<li>
<p><code>pNext</code> is <code>NULL</code> or a pointer to an extension-specific structure.</p>
</li>
<li>
<p><a id="limits-shaderEngineCount"></a> <code>shaderEngineCount</code> is an unsigned
integer value indicating the number of shader engines found inside the
shader core of the physical device.</p>
</li>
<li>
<p><a id="limits-shaderArraysPerEngineCount"></a> <code>shaderArraysPerEngineCount</code>
is an unsigned integer value indicating the number of shader arrays
inside a shader engine.
Each shader array has its own scan converter, set of compute units, and
a render back end (color and depth buffers).
Shader arrays within a shader engine share shader processor input (wave
launcher) and shader export (export buffer) units.
Currently, a shader engine can have one or two shader arrays.</p>
</li>
<li>
<p><a id="limits-computeUnitsPerShaderArray"></a> <code>computeUnitsPerShaderArray</code>
is an unsigned integer value indicating the number of compute units
within a shader array.
A compute unit houses a set of SIMDs along with a sequencer module and a
local data store.</p>
</li>
<li>
<p><a id="limits-simdPerComputeUnit"></a> <code>simdPerComputeUnit</code> is an unsigned
integer value indicating the number of SIMDs inside a compute unit.
Each SIMD processes a single instruction at a time.</p>
</li>
<li>
<p><a id="limits-wavefrontSize"></a> <code>wavefrontSize</code> is an unsigned integer
value indicating the number of channels (or threads) in a wavefront.</p>
</li>
<li>
<p><a id="limits-sgprsPerSimd"></a> <code>sgprsPerSimd</code> is an unsigned integer value
indicating the number of physical Scalar General Purpose Registers
(SGPRs) per SIMD.</p>
</li>
<li>
<p><a id="limits-minSgprAllocation"></a> <code>minSgprAllocation</code> is an unsigned
integer value indicating the minimum number of SGPRs allocated for a
wave.</p>
</li>
<li>
<p><a id="limits-maxSgprAllocation"></a> <code>maxSgprAllocation</code> is an unsigned
integer value indicating the maximum number of SGPRs allocated for a
wave.</p>
</li>
<li>
<p><a id="limits-sgprAllocationGranularity"></a> <code>sgprAllocationGranularity</code> is
an unsigned integer value indicating the granularity of SGPR allocation
for a wave.</p>
</li>
<li>
<p><a id="limits-vgprsPerSimd"></a> <code>vgprsPerSimd</code> is an unsigned integer value
indicating the number of physical Vector General Purpose Registers
(VGPRs) per SIMD.</p>
</li>
<li>
<p><a id="limits-minVgprAllocation"></a> <code>minVgprAllocation</code> is an unsigned
integer value indicating the minimum number of VGPRs allocated for a
wave.</p>
</li>
<li>
<p><a id="limits-maxVgprAllocation"></a> <code>maxVgprAllocation</code> is an unsigned
integer value indicating the maximum number of VGPRs allocated for a
wave.</p>
</li>
<li>
<p><a id="limits-vgprAllocationGranularity"></a> <code>vgprAllocationGranularity</code> is
an unsigned integer value indicating the granularity of VGPR allocation
for a wave.</p>
</li>
</ul>
</div>
<div class="paragraph">
<p>If the <code>VkPhysicalDeviceShaderCorePropertiesAMD</code> structure is included
in the <code>pNext</code> chain of <a href="#VkPhysicalDeviceProperties2">VkPhysicalDeviceProperties2</a>, it is filled
with the implementation-dependent limits.</p>
</div>
<div class="sidebarblock">
<div class="content">
<div class="title">Valid Usage (Implicit)</div>
<div class="ulist">
<ul>
<li>
<p><a id="VUID-VkPhysicalDeviceShaderCorePropertiesAMD-sType-sType"></a> <code>sType</code> <strong class="purple">must</strong> be <code>VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_CORE_PROPERTIES_AMD</code></p>
</li>
</ul>
</div>
</div>
</div>
</div>
<div class="sect3">
<h4 id="_see_also_654">See Also</h4>
<div class="paragraph">
<p><a href="#VkStructureType">VkStructureType</a></p>
</div>
</div>
<div class="sect3">
<h4 id="_document_notes_654">Document Notes</h4>
<div class="paragraph">
<p>For more information, see the Vulkan Specification at URL</p>
</div>
<div class="paragraph">
<p><a href="https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VkPhysicalDeviceShaderCorePropertiesAMD" class="bare">https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VkPhysicalDeviceShaderCorePropertiesAMD</a></p>
</div>
<div class="paragraph">
<p>This page is extracted from the Vulkan Specification.
Fixes and changes should be made to the Specification, not directly.</p>
</div>
<div style="page-break-after: always;"></div>
</div>
</div>
<div class="sect2">
<h3 id="_vkphysicaldeviceshaderdrawparametersfeatures3">VkPhysicalDeviceShaderDrawParametersFeatures(3)</h3>
<div class="sect3">
<h4 id="_name_655">Name</h4>
<div class="paragraph">
<p>VkPhysicalDeviceShaderDrawParametersFeatures - Structure describing shader draw parameter features that can be supported by an implementation</p>
</div>
</div>
<div class="sect3">
<h4 id="_c_specification_655">C Specification</h4>
<div class="paragraph">
<p>The <code>VkPhysicalDeviceShaderDrawParametersFeatures</code> structure is defined
as:</p>
</div>
<div id="VkPhysicalDeviceShaderDrawParametersFeatures" class="listingblock">
<div class="content">
<pre class="highlight"><code class="language-c++" data-lang="c++">typedef struct VkPhysicalDeviceShaderDrawParametersFeatures {
    VkStructureType    sType;
    void*              pNext;
    VkBool32           shaderDrawParameters;
} VkPhysicalDeviceShaderDrawParametersFeatures;</code></pre>
</div>
</div>
</div>
<div class="sect3">
<h4 id="_members_292">Members</h4>
<div class="ulist">
<ul>
<li>
<p><a id="features-shaderDrawParameters"></a> <code>shaderDrawParameters</code> specifies
whether shader draw parameters are supported.</p>
</li>
</ul>
</div>
</div>
<div class="sect3">
<h4 id="_description_655">Description</h4>
<div class="paragraph">
<p>If the <code>VkPhysicalDeviceShaderDrawParametersFeatures</code> structure is
included in the <code>pNext</code> chain of <a href="#VkPhysicalDeviceFeatures2">VkPhysicalDeviceFeatures2</a>, it is
filled with a value indicating whether the feature is supported.</p>
</div>
<div class="sidebarblock">
<div class="content">
<div class="title">Valid Usage (Implicit)</div>
<div class="ulist">
<ul>
<li>
<p><a id="VUID-VkPhysicalDeviceShaderDrawParametersFeatures-sType-sType"></a> <code>sType</code> <strong class="purple">must</strong> be <code>VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_DRAW_PARAMETERS_FEATURES</code></p>
</li>
</ul>
</div>
</div>
</div>
</div>
<div class="sect3">
<h4 id="_see_also_655">See Also</h4>
<div class="paragraph">
<p><code>VkBool32</code>, <a href="#VkStructureType">VkStructureType</a></p>
</div>
</div>
<div class="sect3">
<h4 id="_document_notes_655">Document Notes</h4>
<div class="paragraph">
<p>For more information, see the Vulkan Specification at URL</p>
</div>
<div class="paragraph">
<p><a href="https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VkPhysicalDeviceShaderDrawParametersFeatures" class="bare">https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VkPhysicalDeviceShaderDrawParametersFeatures</a></p>
</div>
<div class="paragraph">
<p>This page is extracted from the Vulkan Specification.
Fixes and changes should be made to the Specification, not directly.</p>
</div>
<div style="page-break-after: always;"></div>
</div>
</div>
<div class="sect2">
<h3 id="_vkphysicaldeviceshaderimagefootprintfeaturesnv3">VkPhysicalDeviceShaderImageFootprintFeaturesNV(3)</h3>
<div class="sect3">
<h4 id="_name_656">Name</h4>
<div class="paragraph">
<p>VkPhysicalDeviceShaderImageFootprintFeaturesNV - Structure describing shader image footprint features that can be supported by an implementation</p>
</div>
</div>
<div class="sect3">
<h4 id="_c_specification_656">C Specification</h4>
<div class="paragraph">
<p>The <code>VkPhysicalDeviceShaderImageFootprintFeaturesNV</code> structure is
defined as:</p>
</div>
<div id="VkPhysicalDeviceShaderImageFootprintFeaturesNV" class="listingblock">
<div class="content">
<pre class="highlight"><code class="language-c++" data-lang="c++">typedef struct VkPhysicalDeviceShaderImageFootprintFeaturesNV {
    VkStructureType    sType;
    void*              pNext;
    VkBool32           imageFootprint;
} VkPhysicalDeviceShaderImageFootprintFeaturesNV;</code></pre>
</div>
</div>
</div>
<div class="sect3">
<h4 id="_members_293">Members</h4>
<div class="ulist">
<ul>
<li>
<p><a id="features-imageFootprint"></a> <code>imageFootprint</code> specifies whether the
implementation supports the <code>ImageFootprintNV</code> SPIR-V capability.</p>
</li>
</ul>
</div>
</div>
<div class="sect3">
<h4 id="_description_656">Description</h4>
<div class="paragraph">
<p>See <a href="vkspec.html#textures-footprint">Texel Footprint Evaluation</a> for more information.</p>
</div>
<div class="paragraph">
<p>If the <code>VkPhysicalDeviceShaderImageFootprintFeaturesNV</code> structure is
included in the <code>pNext</code> chain of <a href="#VkPhysicalDeviceFeatures2KHR">VkPhysicalDeviceFeatures2KHR</a>, it
is filled with values indicating whether each feature is supported.
<code>VkPhysicalDeviceShaderImageFootprintFeaturesNV</code> <strong class="purple">can</strong> also be used in
the <code>pNext</code> chain of <a href="#VkDeviceCreateInfo">VkDeviceCreateInfo</a> to enable features.</p>
</div>
<div class="sidebarblock">
<div class="content">
<div class="title">Valid Usage (Implicit)</div>
<div class="ulist">
<ul>
<li>
<p><a id="VUID-VkPhysicalDeviceShaderImageFootprintFeaturesNV-sType-sType"></a> <code>sType</code> <strong class="purple">must</strong> be <code>VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_IMAGE_FOOTPRINT_FEATURES_NV</code></p>
</li>
</ul>
</div>
</div>
</div>
</div>
<div class="sect3">
<h4 id="_see_also_656">See Also</h4>
<div class="paragraph">
<p><code>VkBool32</code>, <a href="#VkStructureType">VkStructureType</a></p>
</div>
</div>
<div class="sect3">
<h4 id="_document_notes_656">Document Notes</h4>
<div class="paragraph">
<p>For more information, see the Vulkan Specification at URL</p>
</div>
<div class="paragraph">
<p><a href="https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VkPhysicalDeviceShaderImageFootprintFeaturesNV" class="bare">https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VkPhysicalDeviceShaderImageFootprintFeaturesNV</a></p>
</div>
<div class="paragraph">
<p>This page is extracted from the Vulkan Specification.
Fixes and changes should be made to the Specification, not directly.</p>
</div>
<div style="page-break-after: always;"></div>
</div>
</div>
<div class="sect2">
<h3 id="_vkphysicaldeviceshadingrateimagefeaturesnv3">VkPhysicalDeviceShadingRateImageFeaturesNV(3)</h3>
<div class="sect3">
<h4 id="_name_657">Name</h4>
<div class="paragraph">
<p>VkPhysicalDeviceShadingRateImageFeaturesNV - Structure describing shading rate image features that can be supported by an implementation</p>
</div>
</div>
<div class="sect3">
<h4 id="_c_specification_657">C Specification</h4>
<div class="paragraph">
<p>The <code>VkPhysicalDeviceShadingRateImageFeaturesNV</code> structure is defined
as:</p>
</div>
<div id="VkPhysicalDeviceShadingRateImageFeaturesNV" class="listingblock">
<div class="content">
<pre class="highlight"><code class="language-c++" data-lang="c++">typedef struct VkPhysicalDeviceShadingRateImageFeaturesNV {
    VkStructureType    sType;
    void*              pNext;
    VkBool32           shadingRateImage;
    VkBool32           shadingRateCoarseSampleOrder;
} VkPhysicalDeviceShadingRateImageFeaturesNV;</code></pre>
</div>
</div>
</div>
<div class="sect3">
<h4 id="_members_294">Members</h4>
<div class="paragraph">
<p>The members of the <code>VkPhysicalDeviceShadingRateImageFeaturesNV</code>
structure describe the following features:</p>
</div>
</div>
<div class="sect3">
<h4 id="_description_657">Description</h4>
<div class="ulist">
<ul>
<li>
<p><a id="features-shadingRateImage"></a> <code>shadingRateImage</code> indicates that the
implementation supports the use of a shading rate image to derive an
effective shading rate for fragment processing.
It also indicates that the implementation supports the
<code>ShadingRateNV</code> SPIR-V execution mode.</p>
</li>
<li>
<p><a id="features-shadingRateCoarseSampleOrder"></a>
<code>shadingRateCoarseSampleOrder</code> indicates that the implementation
supports a user-configurable ordering of coverage samples in fragments
larger than one pixel.</p>
</li>
</ul>
</div>
<div class="paragraph">
<p>See <a href="vkspec.html#primsrast-shading-rate-image">Shading Rate Image</a> for more
information.</p>
</div>
<div class="paragraph">
<p>If the <code>VkPhysicalDeviceShadingRateImageFeaturesNV</code> structure is
included in the <code>pNext</code> chain of <a href="#VkPhysicalDeviceFeatures2KHR">VkPhysicalDeviceFeatures2KHR</a>, it
is filled with values indicating whether the feature is supported.
<code>VkPhysicalDeviceShadingRateImageFeaturesNV</code> <strong class="purple">can</strong> also be used in the
<code>pNext</code> chain of <a href="#VkDeviceCreateInfo">VkDeviceCreateInfo</a> to enable features.</p>
</div>
<div class="sidebarblock">
<div class="content">
<div class="title">Valid Usage (Implicit)</div>
<div class="ulist">
<ul>
<li>
<p><a id="VUID-VkPhysicalDeviceShadingRateImageFeaturesNV-sType-sType"></a> <code>sType</code> <strong class="purple">must</strong> be <code>VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADING_RATE_IMAGE_FEATURES_NV</code></p>
</li>
</ul>
</div>
</div>
</div>
</div>
<div class="sect3">
<h4 id="_see_also_657">See Also</h4>
<div class="paragraph">
<p><code>VkBool32</code>, <a href="#VkStructureType">VkStructureType</a></p>
</div>
</div>
<div class="sect3">
<h4 id="_document_notes_657">Document Notes</h4>
<div class="paragraph">
<p>For more information, see the Vulkan Specification at URL</p>
</div>
<div class="paragraph">
<p><a href="https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VkPhysicalDeviceShadingRateImageFeaturesNV" class="bare">https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VkPhysicalDeviceShadingRateImageFeaturesNV</a></p>
</div>
<div class="paragraph">
<p>This page is extracted from the Vulkan Specification.
Fixes and changes should be made to the Specification, not directly.</p>
</div>
<div style="page-break-after: always;"></div>
</div>
</div>
<div class="sect2">
<h3 id="_vkphysicaldeviceshadingrateimagepropertiesnv3">VkPhysicalDeviceShadingRateImagePropertiesNV(3)</h3>
<div class="sect3">
<h4 id="_name_658">Name</h4>
<div class="paragraph">
<p>VkPhysicalDeviceShadingRateImagePropertiesNV - Structure describing shading rate image limits that can be supported by an implementation</p>
</div>
</div>
<div class="sect3">
<h4 id="_c_specification_658">C Specification</h4>
<div class="paragraph">
<p>The <code>VkPhysicalDeviceShadingRateImagePropertiesNV</code> structure is defined
as:</p>
</div>
<div id="VkPhysicalDeviceShadingRateImagePropertiesNV" class="listingblock">
<div class="content">
<pre class="highlight"><code class="language-c++" data-lang="c++">typedef struct VkPhysicalDeviceShadingRateImagePropertiesNV {
    VkStructureType    sType;
    void*              pNext;
    VkExtent2D         shadingRateTexelSize;
    uint32_t           shadingRatePaletteSize;
    uint32_t           shadingRateMaxCoarseSamples;
} VkPhysicalDeviceShadingRateImagePropertiesNV;</code></pre>
</div>
</div>
</div>
<div class="sect3">
<h4 id="_members_295">Members</h4>
<div class="paragraph">
<p>The members of the <code>VkPhysicalDeviceShadingRateImagePropertiesNV</code>
structure describe the following implementation-dependent properties related
to the <a href="vkspec.html#primsrast-shading-rate-image">shading rate image</a> feature:</p>
</div>
</div>
<div class="sect3">
<h4 id="_description_658">Description</h4>
<div class="ulist">
<ul>
<li>
<p><code>sType</code> is the type of this structure.</p>
</li>
<li>
<p><code>pNext</code> is <code>NULL</code> or a pointer to an extension-specific structure.</p>
</li>
<li>
<p><a id="limits-shading-rate-texel-size"></a> <code>shadingRateTexelSize</code> indicates
the width and height of the portion of the framebuffer corresponding to
each texel in the shading rate image.</p>
</li>
<li>
<p><a id="limits-shading-rate-palette-size"></a> <code>shadingRatePaletteSize</code>
indicates the maximum number of palette entries supported for the
shading rate image.</p>
</li>
<li>
<p><a id="limits-shading-rate-max-coarse-samples"></a>
<code>shadingRateMaxCoarseSamples</code> specifies the maximum number of
coverage samples supported in a single fragment.
If the product of the fragment size derived from the base shading rate
and the number of coverage samples per pixel exceeds this limit, the
final shading rate will be adjusted so that its product does not exceed
the limit.</p>
</li>
</ul>
</div>
<div class="paragraph">
<p>If the <code>VkPhysicalDeviceShadingRateImagePropertiesNV</code> structure is
included in the <code>pNext</code> chain of <a href="#VkPhysicalDeviceProperties2">VkPhysicalDeviceProperties2</a>, it
is filled with the implementation-dependent limits.</p>
</div>
<div class="sidebarblock">
<div class="content">
<div class="title">Valid Usage (Implicit)</div>
<div class="ulist">
<ul>
<li>
<p><a id="VUID-VkPhysicalDeviceShadingRateImagePropertiesNV-sType-sType"></a> <code>sType</code> <strong class="purple">must</strong> be <code>VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADING_RATE_IMAGE_PROPERTIES_NV</code></p>
</li>
</ul>
</div>
</div>
</div>
</div>
<div class="sect3">
<h4 id="_see_also_658">See Also</h4>
<div class="paragraph">
<p><a href="#VkExtent2D">VkExtent2D</a>, <a href="#VkStructureType">VkStructureType</a></p>
</div>
</div>
<div class="sect3">
<h4 id="_document_notes_658">Document Notes</h4>
<div class="paragraph">
<p>For more information, see the Vulkan Specification at URL</p>
</div>
<div class="paragraph">
<p><a href="https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VkPhysicalDeviceShadingRateImagePropertiesNV" class="bare">https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VkPhysicalDeviceShadingRateImagePropertiesNV</a></p>
</div>
<div class="paragraph">
<p>This page is extracted from the Vulkan Specification.
Fixes and changes should be made to the Specification, not directly.</p>
</div>
<div style="page-break-after: always;"></div>
</div>
</div>
<div class="sect2">
<h3 id="_vkphysicaldevicesparseimageformatinfo23">VkPhysicalDeviceSparseImageFormatInfo2(3)</h3>
<div class="sect3">
<h4 id="_name_659">Name</h4>
<div class="paragraph">
<p>VkPhysicalDeviceSparseImageFormatInfo2 - Structure specifying sparse image format inputs</p>
</div>
</div>
<div class="sect3">
<h4 id="_c_specification_659">C Specification</h4>
<div class="paragraph">
<p>The <code>VkPhysicalDeviceSparseImageFormatInfo2</code> structure is defined as:</p>
</div>
<div id="VkPhysicalDeviceSparseImageFormatInfo2" class="listingblock">
<div class="content">
<pre class="highlight"><code class="language-c++" data-lang="c++">typedef struct VkPhysicalDeviceSparseImageFormatInfo2 {
    VkStructureType          sType;
    const void*              pNext;
    VkFormat                 format;
    VkImageType              type;
    VkSampleCountFlagBits    samples;
    VkImageUsageFlags        usage;
    VkImageTiling            tiling;
} VkPhysicalDeviceSparseImageFormatInfo2;</code></pre>
</div>
</div>
<div class="paragraph">
<p>or the equivalent</p>
</div>
<div id="VkPhysicalDeviceSparseImageFormatInfo2KHR" class="listingblock">
<div class="content">
<pre class="highlight"><code class="language-c++" data-lang="c++">typedef VkPhysicalDeviceSparseImageFormatInfo2 VkPhysicalDeviceSparseImageFormatInfo2KHR;</code></pre>
</div>
</div>
</div>
<div class="sect3">
<h4 id="_members_296">Members</h4>
<div class="ulist">
<ul>
<li>
<p><code>sType</code> is the type of this structure.</p>
</li>
<li>
<p><code>pNext</code> is <code>NULL</code> or a pointer to an extension-specific structure.</p>
</li>
<li>
<p><code>format</code> is the image format.</p>
</li>
<li>
<p><code>type</code> is the dimensionality of image.</p>
</li>
<li>
<p><code>samples</code> is the number of samples per texel as defined in
<a href="#VkSampleCountFlagBits">VkSampleCountFlagBits</a>.</p>
</li>
<li>
<p><code>usage</code> is a bitmask describing the intended usage of the image.</p>
</li>
<li>
<p><code>tiling</code> is the tiling arrangement of the texel blocks in memory.</p>
</li>
</ul>
</div>
</div>
<div class="sect3">
<h4 id="_description_659">Description</h4>
<div class="sidebarblock">
<div class="content">
<div class="title">Valid Usage</div>
<div class="ulist">
<ul>
<li>
<p><a id="VUID-VkPhysicalDeviceSparseImageFormatInfo2-samples-01095"></a>
<code>samples</code> <strong class="purple">must</strong> be a bit value that is set in
<code>VkImageFormatProperties</code>::<code>sampleCounts</code> returned by
<code>vkGetPhysicalDeviceImageFormatProperties</code> with <code>format</code>,
<code>type</code>, <code>tiling</code>, and <code>usage</code> equal to those in this command
and <code>flags</code> equal to the value that is set in
<code>VkImageCreateInfo</code>::<code>flags</code> when the image is created</p>
</li>
</ul>
</div>
</div>
</div>
<div class="sidebarblock">
<div class="content">
<div class="title">Valid Usage (Implicit)</div>
<div class="ulist">
<ul>
<li>
<p><a id="VUID-VkPhysicalDeviceSparseImageFormatInfo2-sType-sType"></a> <code>sType</code> <strong class="purple">must</strong> be <code>VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SPARSE_IMAGE_FORMAT_INFO_2</code></p>
</li>
<li>
<p><a id="VUID-VkPhysicalDeviceSparseImageFormatInfo2-pNext-pNext"></a> <code>pNext</code> <strong class="purple">must</strong> be <code>NULL</code></p>
</li>
<li>
<p><a id="VUID-VkPhysicalDeviceSparseImageFormatInfo2-format-parameter"></a> <code>format</code> <strong class="purple">must</strong> be a valid <a href="#VkFormat">VkFormat</a> value</p>
</li>
<li>
<p><a id="VUID-VkPhysicalDeviceSparseImageFormatInfo2-type-parameter"></a> <code>type</code> <strong class="purple">must</strong> be a valid <a href="#VkImageType">VkImageType</a> value</p>
</li>
<li>
<p><a id="VUID-VkPhysicalDeviceSparseImageFormatInfo2-samples-parameter"></a> <code>samples</code> <strong class="purple">must</strong> be a valid <a href="#VkSampleCountFlagBits">VkSampleCountFlagBits</a> value</p>
</li>
<li>
<p><a id="VUID-VkPhysicalDeviceSparseImageFormatInfo2-usage-parameter"></a> <code>usage</code> <strong class="purple">must</strong> be a valid combination of <a href="#VkImageUsageFlagBits">VkImageUsageFlagBits</a> values</p>
</li>
<li>
<p><a id="VUID-VkPhysicalDeviceSparseImageFormatInfo2-usage-requiredbitmask"></a> <code>usage</code> <strong class="purple">must</strong> not be <code>0</code></p>
</li>
<li>
<p><a id="VUID-VkPhysicalDeviceSparseImageFormatInfo2-tiling-parameter"></a> <code>tiling</code> <strong class="purple">must</strong> be a valid <a href="#VkImageTiling">VkImageTiling</a> value</p>
</li>
</ul>
</div>
</div>
</div>
</div>
<div class="sect3">
<h4 id="_see_also_659">See Also</h4>
<div class="paragraph">
<p><a href="#VkFormat">VkFormat</a>, <a href="#VkImageTiling">VkImageTiling</a>, <a href="#VkImageType">VkImageType</a>, <a href="#VkImageUsageFlags">VkImageUsageFlags</a>, <a href="#VkSampleCountFlagBits">VkSampleCountFlagBits</a>, <a href="#VkStructureType">VkStructureType</a>, <a href="#vkGetPhysicalDeviceSparseImageFormatProperties2">vkGetPhysicalDeviceSparseImageFormatProperties2</a>, <a href="#vkGetPhysicalDeviceSparseImageFormatProperties2KHR">vkGetPhysicalDeviceSparseImageFormatProperties2KHR</a></p>
</div>
</div>
<div class="sect3">
<h4 id="_document_notes_659">Document Notes</h4>
<div class="paragraph">
<p>For more information, see the Vulkan Specification at URL</p>
</div>
<div class="paragraph">
<p><a href="https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VkPhysicalDeviceSparseImageFormatInfo2" class="bare">https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VkPhysicalDeviceSparseImageFormatInfo2</a></p>
</div>
<div class="paragraph">
<p>This page is extracted from the Vulkan Specification.
Fixes and changes should be made to the Specification, not directly.</p>
</div>
<div style="page-break-after: always;"></div>
</div>
</div>
<div class="sect2">
<h3 id="_vkphysicaldevicesparseproperties3">VkPhysicalDeviceSparseProperties(3)</h3>
<div class="sect3">
<h4 id="_name_660">Name</h4>
<div class="paragraph">
<p>VkPhysicalDeviceSparseProperties - Structure specifying physical device sparse memory properties</p>
</div>
</div>
<div class="sect3">
<h4 id="_c_specification_660">C Specification</h4>
<div class="paragraph">
<p>The <code>VkPhysicalDeviceSparseProperties</code> structure is defined as:</p>
</div>
<div id="VkPhysicalDeviceSparseProperties" class="listingblock">
<div class="content">
<pre class="highlight"><code class="language-c++" data-lang="c++">typedef struct VkPhysicalDeviceSparseProperties {
    VkBool32    residencyStandard2DBlockShape;
    VkBool32    residencyStandard2DMultisampleBlockShape;
    VkBool32    residencyStandard3DBlockShape;
    VkBool32    residencyAlignedMipSize;
    VkBool32    residencyNonResidentStrict;
} VkPhysicalDeviceSparseProperties;</code></pre>
</div>
</div>
</div>
<div class="sect3">
<h4 id="_members_297">Members</h4>
<div class="ulist">
<ul>
<li>
<p><code>residencyStandard2DBlockShape</code> is <code>VK_TRUE</code> if the physical
device will access all single-sample 2D sparse resources using the
standard sparse image block shapes (based on image format), as described
in the <a href="vkspec.html#sparsememory-sparseblockshapessingle">Standard Sparse Image
Block Shapes (Single Sample)</a> table.
If this property is not supported the value returned in the
<code>imageGranularity</code> member of the <code>VkSparseImageFormatProperties</code>
structure for single-sample 2D images is not <strong class="purple">required</strong> to match the
standard sparse image block dimensions listed in the table.</p>
</li>
<li>
<p><code>residencyStandard2DMultisampleBlockShape</code> is <code>VK_TRUE</code> if the
physical device will access all multisample 2D sparse resources using
the standard sparse image block shapes (based on image format), as
described in the <a href="vkspec.html#sparsememory-sparseblockshapesmsaa">Standard Sparse
Image Block Shapes (MSAA)</a> table.
If this property is not supported, the value returned in the
<code>imageGranularity</code> member of the <code>VkSparseImageFormatProperties</code>
structure for multisample 2D images is not <strong class="purple">required</strong> to match the
standard sparse image block dimensions listed in the table.</p>
</li>
<li>
<p><code>residencyStandard3DBlockShape</code> is <code>VK_TRUE</code> if the physical
device will access all 3D sparse resources using the standard sparse
image block shapes (based on image format), as described in the
<a href="vkspec.html#sparsememory-sparseblockshapessingle">Standard Sparse Image Block
Shapes (Single Sample)</a> table.
If this property is not supported, the value returned in the
<code>imageGranularity</code> member of the <code>VkSparseImageFormatProperties</code>
structure for 3D images is not <strong class="purple">required</strong> to match the standard sparse
image block dimensions listed in the table.</p>
</li>
<li>
<p><code>residencyAlignedMipSize</code> is <code>VK_TRUE</code> if images with mip level
dimensions that are not integer multiples of the corresponding
dimensions of the sparse image block <strong class="purple">may</strong> be placed in the mip tail.
If this property is not reported, only mip levels with dimensions
smaller than the <code>imageGranularity</code> member of the
<code>VkSparseImageFormatProperties</code> structure will be placed in the mip
tail.
If this property is reported the implementation is allowed to return
<code>VK_SPARSE_IMAGE_FORMAT_ALIGNED_MIP_SIZE_BIT</code> in the <code>flags</code>
member of <code>VkSparseImageFormatProperties</code>, indicating that mip level
dimensions that are not integer multiples of the corresponding
dimensions of the sparse image block will be placed in the mip tail.</p>
</li>
<li>
<p><code>residencyNonResidentStrict</code> specifies whether the physical device
<strong class="purple">can</strong> consistently access non-resident regions of a resource.
If this property is <code>VK_TRUE</code>, access to non-resident regions of
resources will be guaranteed to return values as if the resource were
populated with 0; writes to non-resident regions will be discarded.</p>
</li>
</ul>
</div>
</div>
<div class="sect3">
<h4 id="_description_660">Description</h4>

</div>
<div class="sect3">
<h4 id="_see_also_660">See Also</h4>
<div class="paragraph">
<p><code>VkBool32</code>, <a href="#VkPhysicalDeviceProperties">VkPhysicalDeviceProperties</a></p>
</div>
</div>
<div class="sect3">
<h4 id="_document_notes_660">Document Notes</h4>
<div class="paragraph">
<p>For more information, see the Vulkan Specification at URL</p>
</div>
<div class="paragraph">
<p><a href="https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VkPhysicalDeviceSparseProperties" class="bare">https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VkPhysicalDeviceSparseProperties</a></p>
</div>
<div class="paragraph">
<p>This page is extracted from the Vulkan Specification.
Fixes and changes should be made to the Specification, not directly.</p>
</div>
<div style="page-break-after: always;"></div>
</div>
</div>
<div class="sect2">
<h3 id="_vkphysicaldevicesubgroupproperties3">VkPhysicalDeviceSubgroupProperties(3)</h3>
<div class="sect3">
<h4 id="_name_661">Name</h4>
<div class="paragraph">
<p>VkPhysicalDeviceSubgroupProperties - Structure describing subgroup support for an implementation</p>
</div>
</div>
<div class="sect3">
<h4 id="_c_specification_661">C Specification</h4>
<div class="paragraph">
<p>The <code>VkPhysicalDeviceSubgroupProperties</code> structure is defined as:</p>
</div>
<div id="VkPhysicalDeviceSubgroupProperties" class="listingblock">
<div class="content">
<pre class="highlight"><code class="language-c++" data-lang="c++">typedef struct VkPhysicalDeviceSubgroupProperties {
    VkStructureType           sType;
    void*                     pNext;
    uint32_t                  subgroupSize;
    VkShaderStageFlags        supportedStages;
    VkSubgroupFeatureFlags    supportedOperations;
    VkBool32                  quadOperationsInAllStages;
} VkPhysicalDeviceSubgroupProperties;</code></pre>
</div>
</div>
</div>
<div class="sect3">
<h4 id="_members_298">Members</h4>
<div class="paragraph">
<p>The members of the <code>VkPhysicalDeviceSubgroupProperties</code> structure
describe the following implementation-dependent limits:</p>
</div>
</div>
<div class="sect3">
<h4 id="_description_661">Description</h4>
<div class="ulist">
<ul>
<li>
<p><code>sType</code> is the type of this structure.</p>
</li>
<li>
<p><code>pNext</code> is <code>NULL</code> or a pointer to an extension-specific structure.</p>
</li>
<li>
<p><code>subgroupSize</code> is the number of invocations in each subgroup.
This will match any <a href="vkspec.html#interfaces-builtin-variables-sgs"><code>SubgroupSize</code></a> decorated variable used in any shader module created
on this device.
<code>subgroupSize</code> is at least 1 if any of the physical device&#8217;s queues
support <code>VK_QUEUE_GRAPHICS_BIT</code> or <code>VK_QUEUE_COMPUTE_BIT</code>.</p>
</li>
<li>
<p><code>supportedStages</code> is a bitfield of <a href="#VkShaderStageFlagBits">VkShaderStageFlagBits</a>
describing the shader stages that subgroup operations are supported in.
<code>supportedStages</code> will have the <code>VK_SHADER_STAGE_COMPUTE_BIT</code>
bit set if any of the physical device&#8217;s queues support
<code>VK_QUEUE_COMPUTE_BIT</code>.</p>
</li>
<li>
<p><code>supportedOperations</code> is a bitmask of
<a href="#VkSubgroupFeatureFlagBits">VkSubgroupFeatureFlagBits</a> specifying the sets of subgroup
operations supported on this device.
<code>supportedOperations</code> will have the
<code>VK_SUBGROUP_FEATURE_BASIC_BIT</code> bit set if any of the physical
device&#8217;s queues support <code>VK_QUEUE_GRAPHICS_BIT</code> or
<code>VK_QUEUE_COMPUTE_BIT</code>.</p>
</li>
<li>
<p><code>quadOperationsInAllStages</code> is a boolean that specifies whether
<a href="vkspec.html#features-subgroup-quad">quad subgroup operations</a> are available in all
stages, or are restricted to fragment and compute stages.</p>
</li>
</ul>
</div>
<div class="paragraph">
<p>If the <code>VkPhysicalDeviceSubgroupProperties</code> structure is included in the
<code>pNext</code> chain of <a href="#VkPhysicalDeviceProperties2">VkPhysicalDeviceProperties2</a>, it is filled with
the implementation-dependent limits.</p>
</div>
<div class="sidebarblock">
<div class="content">
<div class="title">Valid Usage (Implicit)</div>
<div class="ulist">
<ul>
<li>
<p><a id="VUID-VkPhysicalDeviceSubgroupProperties-sType-sType"></a> <code>sType</code> <strong class="purple">must</strong> be <code>VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SUBGROUP_PROPERTIES</code></p>
</li>
</ul>
</div>
</div>
</div>
</div>
<div class="sect3">
<h4 id="_see_also_661">See Also</h4>
<div class="paragraph">
<p><code>VkBool32</code>, <a href="#VkShaderStageFlags">VkShaderStageFlags</a>, <a href="#VkStructureType">VkStructureType</a>, <a href="#VkSubgroupFeatureFlags">VkSubgroupFeatureFlags</a></p>
</div>
</div>
<div class="sect3">
<h4 id="_document_notes_661">Document Notes</h4>
<div class="paragraph">
<p>For more information, see the Vulkan Specification at URL</p>
</div>
<div class="paragraph">
<p><a href="https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VkPhysicalDeviceSubgroupProperties" class="bare">https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VkPhysicalDeviceSubgroupProperties</a></p>
</div>
<div class="paragraph">
<p>This page is extracted from the Vulkan Specification.
Fixes and changes should be made to the Specification, not directly.</p>
</div>
<div style="page-break-after: always;"></div>
</div>
</div>
<div class="sect2">
<h3 id="_vkphysicaldevicesurfaceinfo2khr3">VkPhysicalDeviceSurfaceInfo2KHR(3)</h3>
<div class="sect3">
<h4 id="_name_662">Name</h4>
<div class="paragraph">
<p>VkPhysicalDeviceSurfaceInfo2KHR - Structure specifying a surface and related swapchain creation parameters</p>
</div>
</div>
<div class="sect3">
<h4 id="_c_specification_662">C Specification</h4>
<div class="paragraph">
<p>The <code>VkPhysicalDeviceSurfaceInfo2KHR</code> structure is defined as:</p>
</div>
<div id="VkPhysicalDeviceSurfaceInfo2KHR" class="listingblock">
<div class="content">
<pre class="highlight"><code class="language-c++" data-lang="c++">typedef struct VkPhysicalDeviceSurfaceInfo2KHR {
    VkStructureType    sType;
    const void*        pNext;
    VkSurfaceKHR       surface;
} VkPhysicalDeviceSurfaceInfo2KHR;</code></pre>
</div>
</div>
</div>
<div class="sect3">
<h4 id="_members_299">Members</h4>
<div class="ulist">
<ul>
<li>
<p><code>sType</code> is the type of this structure.</p>
</li>
<li>
<p><code>pNext</code> is <code>NULL</code> or a pointer to an extension-specific structure.</p>
</li>
<li>
<p><code>surface</code> is the surface that will be associated with the swapchain.</p>
</li>
</ul>
</div>
</div>
<div class="sect3">
<h4 id="_description_662">Description</h4>
<div class="paragraph">
<p>The members of <code>VkPhysicalDeviceSurfaceInfo2KHR</code> correspond to the
arguments to <a href="#vkGetPhysicalDeviceSurfaceCapabilitiesKHR">vkGetPhysicalDeviceSurfaceCapabilitiesKHR</a>, with
<code>sType</code> and <code>pNext</code> added for extensibility.</p>
</div>
<div class="paragraph">
<p>Additional capabilities of a surface <strong class="purple">may</strong> be available to swapchains created
with different full-screen exclusive settings - particularly if exclusive
full-screen access is application controlled.
These additional capabilities <strong class="purple">can</strong> be queried by including the
<a href="#VkSurfaceFullScreenExclusiveInfoEXT">VkSurfaceFullScreenExclusiveInfoEXT</a> structure in the <code>pNext</code> chain
of this structure when used to query surface properties.
Additionally, for Win32 surfaces with application controlled exclusive
full-screen access, chaining a valid instance of the
<a href="#VkSurfaceFullScreenExclusiveWin32InfoEXT">VkSurfaceFullScreenExclusiveWin32InfoEXT</a> structure <strong class="purple">may</strong> also report
additional surface capabilities.
These additional capabilities only apply to swapchains created with the same
parameters passed into the <code>pNext</code> chain of
<a href="#VkSwapchainCreateInfoKHR">VkSwapchainCreateInfoKHR</a>.</p>
</div>
<div class="sidebarblock">
<div class="content">
<div class="title">Valid Usage</div>
<div class="ulist">
<ul>
<li>
<p><a id="VUID-VkPhysicalDeviceSurfaceInfo2KHR-pNext-02672"></a>
If the <code>pNext</code> chain includes an instance of
<a href="#VkSurfaceFullScreenExclusiveInfoEXT">VkSurfaceFullScreenExclusiveInfoEXT</a> with its
<code>fullScreenExclusive</code> member set to
<code>VK_FULL_SCREEN_EXCLUSIVE_APPLICATION_CONTROLLED_EXT</code>, and
<code>surface</code> was created using <a href="#vkCreateWin32SurfaceKHR">vkCreateWin32SurfaceKHR</a>, an
instance of <a href="#VkSurfaceFullScreenExclusiveWin32InfoEXT">VkSurfaceFullScreenExclusiveWin32InfoEXT</a> <strong class="purple">must</strong> be
present in the <code>pNext</code> chain</p>
</li>
</ul>
</div>
</div>
</div>
<div class="sidebarblock">
<div class="content">
<div class="title">Valid Usage (Implicit)</div>
<div class="ulist">
<ul>
<li>
<p><a id="VUID-VkPhysicalDeviceSurfaceInfo2KHR-sType-sType"></a> <code>sType</code> <strong class="purple">must</strong> be <code>VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SURFACE_INFO_2_KHR</code></p>
</li>
<li>
<p><a id="VUID-VkPhysicalDeviceSurfaceInfo2KHR-pNext-pNext"></a> Each <code>pNext</code> member of any structure (including this one) in the <code>pNext</code> chain <strong class="purple">must</strong> be either <code>NULL</code> or a pointer to a valid instance of <a href="#VkSurfaceFullScreenExclusiveInfoEXT">VkSurfaceFullScreenExclusiveInfoEXT</a> or <a href="#VkSurfaceFullScreenExclusiveWin32InfoEXT">VkSurfaceFullScreenExclusiveWin32InfoEXT</a></p>
</li>
<li>
<p><a id="VUID-VkPhysicalDeviceSurfaceInfo2KHR-sType-unique"></a> Each <code>sType</code> member in the <code>pNext</code> chain <strong class="purple">must</strong> be unique</p>
</li>
<li>
<p><a id="VUID-VkPhysicalDeviceSurfaceInfo2KHR-surface-parameter"></a> <code>surface</code> <strong class="purple">must</strong> be a valid <code>VkSurfaceKHR</code> handle</p>
</li>
</ul>
</div>
</div>
</div>
</div>
<div class="sect3">
<h4 id="_see_also_662">See Also</h4>
<div class="paragraph">
<p><a href="#VkStructureType">VkStructureType</a>, <a href="#VkSurfaceKHR">VkSurfaceKHR</a>, <a href="#vkGetDeviceGroupSurfacePresentModes2EXT">vkGetDeviceGroupSurfacePresentModes2EXT</a>, <a href="#vkGetPhysicalDeviceSurfaceCapabilities2KHR">vkGetPhysicalDeviceSurfaceCapabilities2KHR</a>, <a href="#vkGetPhysicalDeviceSurfaceFormats2KHR">vkGetPhysicalDeviceSurfaceFormats2KHR</a>, <a href="#vkGetPhysicalDeviceSurfacePresentModes2EXT">vkGetPhysicalDeviceSurfacePresentModes2EXT</a></p>
</div>
</div>
<div class="sect3">
<h4 id="_document_notes_662">Document Notes</h4>
<div class="paragraph">
<p>For more information, see the Vulkan Specification at URL</p>
</div>
<div class="paragraph">
<p><a href="https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VkPhysicalDeviceSurfaceInfo2KHR" class="bare">https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VkPhysicalDeviceSurfaceInfo2KHR</a></p>
</div>
<div class="paragraph">
<p>This page is extracted from the Vulkan Specification.
Fixes and changes should be made to the Specification, not directly.</p>
</div>
<div style="page-break-after: always;"></div>
</div>
</div>
<div class="sect2">
<h3 id="_vkphysicaldevicetransformfeedbackfeaturesext3">VkPhysicalDeviceTransformFeedbackFeaturesEXT(3)</h3>
<div class="sect3">
<h4 id="_name_663">Name</h4>
<div class="paragraph">
<p>VkPhysicalDeviceTransformFeedbackFeaturesEXT - Structure describing transform feedback features that can be supported by an implementation</p>
</div>
</div>
<div class="sect3">
<h4 id="_c_specification_663">C Specification</h4>
<div class="paragraph">
<p>The <code>VkPhysicalDeviceTransformFeedbackFeaturesEXT</code> structure is defined
as:</p>
</div>
<div id="VkPhysicalDeviceTransformFeedbackFeaturesEXT" class="listingblock">
<div class="content">
<pre class="highlight"><code class="language-c++" data-lang="c++">typedef struct VkPhysicalDeviceTransformFeedbackFeaturesEXT {
    VkStructureType    sType;
    void*              pNext;
    VkBool32           transformFeedback;
    VkBool32           geometryStreams;
} VkPhysicalDeviceTransformFeedbackFeaturesEXT;</code></pre>
</div>
</div>
</div>
<div class="sect3">
<h4 id="_members_300">Members</h4>
<div class="paragraph">
<p>The members of the <code>VkPhysicalDeviceTransformFeedbackFeaturesEXT</code>
structure describe the following features:</p>
</div>
</div>
<div class="sect3">
<h4 id="_description_663">Description</h4>
<div class="ulist">
<ul>
<li>
<p><a id="features-transformFeedback"></a> <code>transformFeedback</code> indicates whether
the implementation supports transform feedback and shader modules <strong class="purple">can</strong>
declare the <code>TransformFeedback</code> capability.</p>
</li>
<li>
<p><a id="features-geometryStreams"></a> <code>geometryStreams</code> indicates whether the
implementation supports the <code>GeometryStreams</code> SPIR-V capability.</p>
</li>
</ul>
</div>
<div class="paragraph">
<p>If the <code>VkPhysicalDeviceTransformFeedbackFeaturesEXT</code> structure is
included in the <code>pNext</code> chain of <a href="#VkPhysicalDeviceFeatures2KHR">VkPhysicalDeviceFeatures2KHR</a>, it
is filled with values indicating whether each feature is supported.
<code>VkPhysicalDeviceTransformFeedbackFeaturesEXT</code> <strong class="purple">can</strong> also be used in the
<code>pNext</code> chain of <a href="#VkDeviceCreateInfo">VkDeviceCreateInfo</a> to enable features.</p>
</div>
<div class="sidebarblock">
<div class="content">
<div class="title">Valid Usage (Implicit)</div>
<div class="ulist">
<ul>
<li>
<p><a id="VUID-VkPhysicalDeviceTransformFeedbackFeaturesEXT-sType-sType"></a> <code>sType</code> <strong class="purple">must</strong> be <code>VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_TRANSFORM_FEEDBACK_FEATURES_EXT</code></p>
</li>
</ul>
</div>
</div>
</div>
</div>
<div class="sect3">
<h4 id="_see_also_663">See Also</h4>
<div class="paragraph">
<p><code>VkBool32</code>, <a href="#VkStructureType">VkStructureType</a></p>
</div>
</div>
<div class="sect3">
<h4 id="_document_notes_663">Document Notes</h4>
<div class="paragraph">
<p>For more information, see the Vulkan Specification at URL</p>
</div>
<div class="paragraph">
<p><a href="https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VkPhysicalDeviceTransformFeedbackFeaturesEXT" class="bare">https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VkPhysicalDeviceTransformFeedbackFeaturesEXT</a></p>
</div>
<div class="paragraph">
<p>This page is extracted from the Vulkan Specification.
Fixes and changes should be made to the Specification, not directly.</p>
</div>
<div style="page-break-after: always;"></div>
</div>
</div>
<div class="sect2">
<h3 id="_vkphysicaldevicetransformfeedbackpropertiesext3">VkPhysicalDeviceTransformFeedbackPropertiesEXT(3)</h3>
<div class="sect3">
<h4 id="_name_664">Name</h4>
<div class="paragraph">
<p>VkPhysicalDeviceTransformFeedbackPropertiesEXT - Structure describing transform feedback properties that can be supported by an implementation</p>
</div>
</div>
<div class="sect3">
<h4 id="_c_specification_664">C Specification</h4>
<div class="paragraph">
<p>The <code>VkPhysicalDeviceTransformFeedbackPropertiesEXT</code> structure is
defined as:</p>
</div>
<div id="VkPhysicalDeviceTransformFeedbackPropertiesEXT" class="listingblock">
<div class="content">
<pre class="highlight"><code class="language-c++" data-lang="c++">typedef struct VkPhysicalDeviceTransformFeedbackPropertiesEXT {
    VkStructureType    sType;
    void*              pNext;
    uint32_t           maxTransformFeedbackStreams;
    uint32_t           maxTransformFeedbackBuffers;
    VkDeviceSize       maxTransformFeedbackBufferSize;
    uint32_t           maxTransformFeedbackStreamDataSize;
    uint32_t           maxTransformFeedbackBufferDataSize;
    uint32_t           maxTransformFeedbackBufferDataStride;
    VkBool32           transformFeedbackQueries;
    VkBool32           transformFeedbackStreamsLinesTriangles;
    VkBool32           transformFeedbackRasterizationStreamSelect;
    VkBool32           transformFeedbackDraw;
} VkPhysicalDeviceTransformFeedbackPropertiesEXT;</code></pre>
</div>
</div>
</div>
<div class="sect3">
<h4 id="_members_301">Members</h4>
<div class="paragraph">
<p>The members of the <code>VkPhysicalDeviceTransformFeedbackPropertiesEXT</code>
structure describe the following implementation-dependent limits:</p>
</div>
</div>
<div class="sect3">
<h4 id="_description_664">Description</h4>
<div class="ulist">
<ul>
<li>
<p><code>sType</code> is the type of this structure.</p>
</li>
<li>
<p><code>pNext</code> is <code>NULL</code> or a pointer to an extension-specific structure.</p>
</li>
<li>
<p><a id="limits-maxTransformFeedbackStreams"></a> <code>maxTransformFeedbackStreams</code>
is the maximum number of vertex streams that can be output from geometry
shaders declared with the <code>GeometryStreams</code> capability.
If the implementation does not support
<code>VkPhysicalDeviceTransformFeedbackFeaturesEXT</code>::<code>geometryStreams</code>
then <code>maxTransformFeedbackStreams</code> <strong class="purple">must</strong> be set to <code>1</code>.</p>
</li>
<li>
<p><a id="limits-maxTransformFeedbackBuffers"></a> <code>maxTransformFeedbackBuffers</code>
is the maximum number of transform feedback buffers that can be bound
for capturing shader outputs from the last vertex processing stage.</p>
</li>
<li>
<p><a id="limits-maxTransformFeedbackBufferSize"></a>
<code>maxTransformFeedbackBufferSize</code> is the maximum size that can be
specified when binding a buffer for transform feedback in
<a href="#vkCmdBindTransformFeedbackBuffersEXT">vkCmdBindTransformFeedbackBuffersEXT</a>.</p>
</li>
<li>
<p><a id="limits-maxTransformFeedbackStreamDataSize"></a>
<code>maxTransformFeedbackStreamDataSize</code> is the maximum amount of data
in bytes for each vertex that captured to one or more transform feedback
buffers associated with a specific vertex stream.</p>
</li>
<li>
<p><a id="limits-maxTransformFeedbackBufferDataSize"></a>
<code>maxTransformFeedbackBufferDataSize</code> is the maximum amount of data
in bytes for each vertex that can be captured to a specific transform
feedback buffer.</p>
</li>
<li>
<p><a id="limits-maxTransformFeedbackBufferDataStride"></a>
<code>maxTransformFeedbackBufferDataStride</code> is the maximum stride between
each capture of vertex data to the buffer.</p>
</li>
<li>
<p><a id="limits-transformFeedbackQueries"></a> <code>transformFeedbackQueries</code> is
true if the implementation supports the
<code>VK_QUERY_TYPE_TRANSFORM_FEEDBACK_STREAM_EXT</code> query type.
<code>transformFeedbackQueries</code> is false if queries of this type <strong class="purple">cannot</strong>
be created.</p>
</li>
<li>
<p><a id="limits-transformFeedbackStreamsLinesTriangles"></a>
<code>transformFeedbackStreamsLinesTriangles</code> is true if the
implementation supports the geometry shader <code>OpExecutionMode</code> of
<code>OutputLineStrip</code> and <code>OutputTriangleStrip</code> in addition to
<code>OutputPoints</code> when more than one vertex stream is output.
If <code>transformFeedbackStreamsLinesTriangles</code> is false the
implementation only supports an <code>OpExecutionMode</code> of
<code>OutputPoints</code> when more than one vertex stream is output from the
geometry shader.</p>
</li>
<li>
<p><a id="limits-transformFeedbackRasterizationStreamSelect"></a>
<code>transformFeedbackRasterizationStreamSelect</code> is true if the
implementation supports the <code>GeometryStreams</code> SPIR-V capability and
the application can use
<a href="#VkPipelineRasterizationStateStreamCreateInfoEXT">VkPipelineRasterizationStateStreamCreateInfoEXT</a> to modify which
vertex stream output is used for rasterization.
Otherwise vertex stream <code>0</code> <strong class="purple">must</strong> always be used for rasterization.</p>
</li>
<li>
<p><a id="limits-transformFeedbackDraw"></a> <code>transformFeedbackDraw</code> is true if
the implementation supports the <a href="#vkCmdDrawIndirectByteCountEXT">vkCmdDrawIndirectByteCountEXT</a>
function otherwise the function <strong class="purple">must</strong> not be called.</p>
</li>
</ul>
</div>
<div class="paragraph">
<p>If the <code>VkPhysicalDeviceTransformFeedbackPropertiesEXT</code> structure is
included in the <code>pNext</code> chain of <a href="#VkPhysicalDeviceProperties2">VkPhysicalDeviceProperties2</a>, it
is filled with the implementation-dependent limits and properties.</p>
</div>
<div class="sidebarblock">
<div class="content">
<div class="title">Valid Usage (Implicit)</div>
<div class="ulist">
<ul>
<li>
<p><a id="VUID-VkPhysicalDeviceTransformFeedbackPropertiesEXT-sType-sType"></a> <code>sType</code> <strong class="purple">must</strong> be <code>VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_TRANSFORM_FEEDBACK_PROPERTIES_EXT</code></p>
</li>
</ul>
</div>
</div>
</div>
</div>
<div class="sect3">
<h4 id="_see_also_664">See Also</h4>
<div class="paragraph">
<p><code>VkBool32</code>, <code>VkDeviceSize</code>, <a href="#VkStructureType">VkStructureType</a></p>
</div>
</div>
<div class="sect3">
<h4 id="_document_notes_664">Document Notes</h4>
<div class="paragraph">
<p>For more information, see the Vulkan Specification at URL</p>
</div>
<div class="paragraph">
<p><a href="https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VkPhysicalDeviceTransformFeedbackPropertiesEXT" class="bare">https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VkPhysicalDeviceTransformFeedbackPropertiesEXT</a></p>
</div>
<div class="paragraph">
<p>This page is extracted from the Vulkan Specification.
Fixes and changes should be made to the Specification, not directly.</p>
</div>
<div style="page-break-after: always;"></div>
</div>
</div>
<div class="sect2">
<h3 id="_vkphysicaldevicevariablepointersfeatures3">VkPhysicalDeviceVariablePointersFeatures(3)</h3>
<div class="sect3">
<h4 id="_name_665">Name</h4>
<div class="paragraph">
<p>VkPhysicalDeviceVariablePointersFeatures - Structure describing variable pointers features that can be supported by an implementation</p>
</div>
</div>
<div class="sect3">
<h4 id="_c_specification_665">C Specification</h4>
<div class="paragraph">
<p>The <code>VkPhysicalDeviceVariablePointersFeatures</code> structure is defined as:</p>
</div>
<div id="VkPhysicalDeviceVariablePointersFeatures" class="listingblock">
<div class="content">
<pre class="highlight"><code class="language-c++" data-lang="c++">typedef struct VkPhysicalDeviceVariablePointersFeatures {
    VkStructureType    sType;
    void*              pNext;
    VkBool32           variablePointersStorageBuffer;
    VkBool32           variablePointers;
} VkPhysicalDeviceVariablePointersFeatures;</code></pre>
</div>
</div>
<div class="paragraph">
<p>or the equivalent</p>
</div>
<div id="VkPhysicalDeviceVariablePointersFeaturesKHR" class="listingblock">
<div class="content">
<pre class="highlight"><code class="language-c++" data-lang="c++">typedef VkPhysicalDeviceVariablePointersFeatures VkPhysicalDeviceVariablePointersFeaturesKHR;</code></pre>
</div>
</div>
</div>
<div class="sect3">
<h4 id="_members_302">Members</h4>
<div class="paragraph">
<p>The members of the <code>VkPhysicalDeviceVariablePointersFeatures</code> structure
describe the following features:</p>
</div>
</div>
<div class="sect3">
<h4 id="_description_665">Description</h4>
<div class="ulist">
<ul>
<li>
<p><a id="features-variablePointersStorageBuffer"></a>
<code>variablePointersStorageBuffer</code> specifies whether the implementation
supports the SPIR-V <code>VariablePointersStorageBuffer</code> capability.
When this feature is not enabled, shader modules <strong class="purple">must</strong> not declare the
<code>SPV_KHR_variable_pointers</code> extension or the
<code>VariablePointersStorageBuffer</code> capability.</p>
</li>
<li>
<p><a id="features-variablePointers"></a> <code>variablePointers</code> specifies whether
the implementation supports the SPIR-V <code>VariablePointers</code> capability.
When this feature is not enabled, shader modules <strong class="purple">must</strong> not declare the
<code>VariablePointers</code> capability.</p>
</li>
</ul>
</div>
<div class="paragraph">
<p>If the <code>VkPhysicalDeviceVariablePointersFeatures</code> structure is included
in the <code>pNext</code> chain of <a href="#VkPhysicalDeviceFeatures2">VkPhysicalDeviceFeatures2</a>, it is filled
with values indicating whether each feature is supported.
<code>VkPhysicalDeviceVariablePointersFeatures</code> <strong class="purple">can</strong> also be used in the
<code>pNext</code> chain of <a href="#VkDeviceCreateInfo">VkDeviceCreateInfo</a> to enable the features.</p>
</div>
<div class="sidebarblock">
<div class="content">
<div class="title">Valid Usage</div>
<div class="ulist">
<ul>
<li>
<p><a id="VUID-VkPhysicalDeviceVariablePointersFeatures-variablePointers-01431"></a>
If <code>variablePointers</code> is enabled then
<code>variablePointersStorageBuffer</code> <strong class="purple">must</strong> also be enabled.</p>
</li>
</ul>
</div>
</div>
</div>
<div class="sidebarblock">
<div class="content">
<div class="title">Valid Usage (Implicit)</div>
<div class="ulist">
<ul>
<li>
<p><a id="VUID-VkPhysicalDeviceVariablePointersFeatures-sType-sType"></a> <code>sType</code> <strong class="purple">must</strong> be <code>VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_VARIABLE_POINTERS_FEATURES</code></p>
</li>
</ul>
</div>
</div>
</div>
</div>
<div class="sect3">
<h4 id="_see_also_665">See Also</h4>
<div class="paragraph">
<p><code>VkBool32</code>, <a href="#VkStructureType">VkStructureType</a></p>
</div>
</div>
<div class="sect3">
<h4 id="_document_notes_665">Document Notes</h4>
<div class="paragraph">
<p>For more information, see the Vulkan Specification at URL</p>
</div>
<div class="paragraph">
<p><a href="https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VkPhysicalDeviceVariablePointersFeatures" class="bare">https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VkPhysicalDeviceVariablePointersFeatures</a></p>
</div>
<div class="paragraph">
<p>This page is extracted from the Vulkan Specification.
Fixes and changes should be made to the Specification, not directly.</p>
</div>
<div style="page-break-after: always;"></div>
</div>
</div>
<div class="sect2">
<h3 id="_vkphysicaldevicevertexattributedivisorfeaturesext3">VkPhysicalDeviceVertexAttributeDivisorFeaturesEXT(3)</h3>
<div class="sect3">
<h4 id="_name_666">Name</h4>
<div class="paragraph">
<p>VkPhysicalDeviceVertexAttributeDivisorFeaturesEXT - Structure describing if fetching of vertex attribute may be repeated for instanced rendering</p>
</div>
</div>
<div class="sect3">
<h4 id="_c_specification_666">C Specification</h4>
<div class="paragraph">
<p>The <code>VkPhysicalDeviceVertexAttributeDivisorFeaturesEXT</code> structure is
defined as:</p>
</div>
<div id="VkPhysicalDeviceVertexAttributeDivisorFeaturesEXT" class="listingblock">
<div class="content">
<pre class="highlight"><code class="language-c++" data-lang="c++">typedef struct VkPhysicalDeviceVertexAttributeDivisorFeaturesEXT {
    VkStructureType    sType;
    void*              pNext;
    VkBool32           vertexAttributeInstanceRateDivisor;
    VkBool32           vertexAttributeInstanceRateZeroDivisor;
} VkPhysicalDeviceVertexAttributeDivisorFeaturesEXT;</code></pre>
</div>
</div>
</div>
<div class="sect3">
<h4 id="_members_303">Members</h4>
<div class="ulist">
<ul>
<li>
<p><code>sType</code> is the type of this structure.</p>
</li>
<li>
<p><code>pNext</code> is <code>NULL</code> or a pointer to an extension-specific structure.</p>
</li>
<li>
<p><a id="features-vertexAttributeInstanceRateDivisor"></a>
<code>vertexAttributeInstanceRateDivisor</code> specifies whether vertex
attribute fetching may be repeated in case of instanced rendering.</p>
</li>
<li>
<p><a id="features-vertexAttributeInstanceRateZeroDivisor"></a>
<code>vertexAttributeInstanceRateZeroDivisor</code> specifies whether a zero
value for <code>VkVertexInputBindingDivisorDescriptionEXT</code>::<code>divisor</code>
is supported.</p>
</li>
</ul>
</div>
</div>
<div class="sect3">
<h4 id="_description_666">Description</h4>
<div class="paragraph">
<p>If the <code>VkPhysicalDeviceVertexAttributeDivisorFeaturesEXT</code> structure is
included in the <code>pNext</code> chain of <a href="#VkPhysicalDeviceFeatures2">VkPhysicalDeviceFeatures2</a>, it is
filled with values indicating the implementation-dependent behavior.
<code>VkPhysicalDeviceVertexAttributeDivisorFeaturesEXT</code> <strong class="purple">can</strong> also be used in
<code>pNext</code> chain of <a href="#VkDeviceCreateInfo">VkDeviceCreateInfo</a> to enable the feature.</p>
</div>
<div class="sidebarblock">
<div class="content">
<div class="title">Valid Usage (Implicit)</div>
<div class="ulist">
<ul>
<li>
<p><a id="VUID-VkPhysicalDeviceVertexAttributeDivisorFeaturesEXT-sType-sType"></a> <code>sType</code> <strong class="purple">must</strong> be <code>VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_VERTEX_ATTRIBUTE_DIVISOR_FEATURES_EXT</code></p>
</li>
</ul>
</div>
</div>
</div>
</div>
<div class="sect3">
<h4 id="_see_also_666">See Also</h4>
<div class="paragraph">
<p><code>VkBool32</code>, <a href="#VkStructureType">VkStructureType</a></p>
</div>
</div>
<div class="sect3">
<h4 id="_document_notes_666">Document Notes</h4>
<div class="paragraph">
<p>For more information, see the Vulkan Specification at URL</p>
</div>
<div class="paragraph">
<p><a href="https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VkPhysicalDeviceVertexAttributeDivisorFeaturesEXT" class="bare">https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VkPhysicalDeviceVertexAttributeDivisorFeaturesEXT</a></p>
</div>
<div class="paragraph">
<p>This page is extracted from the Vulkan Specification.
Fixes and changes should be made to the Specification, not directly.</p>
</div>
<div style="page-break-after: always;"></div>
</div>
</div>
<div class="sect2">
<h3 id="_vkphysicaldevicevertexattributedivisorpropertiesext3">VkPhysicalDeviceVertexAttributeDivisorPropertiesEXT(3)</h3>
<div class="sect3">
<h4 id="_name_667">Name</h4>
<div class="paragraph">
<p>VkPhysicalDeviceVertexAttributeDivisorPropertiesEXT - Structure describing max value of vertex attribute divisor that can be supported by an implementation</p>
</div>
</div>
<div class="sect3">
<h4 id="_c_specification_667">C Specification</h4>
<div class="paragraph">
<p>The <code>VkPhysicalDeviceVertexAttributeDivisorPropertiesEXT</code> structure is
defined as:</p>
</div>
<div id="VkPhysicalDeviceVertexAttributeDivisorPropertiesEXT" class="listingblock">
<div class="content">
<pre class="highlight"><code class="language-c++" data-lang="c++">typedef struct VkPhysicalDeviceVertexAttributeDivisorPropertiesEXT {
    VkStructureType    sType;
    void*              pNext;
    uint32_t           maxVertexAttribDivisor;
} VkPhysicalDeviceVertexAttributeDivisorPropertiesEXT;</code></pre>
</div>
</div>
</div>
<div class="sect3">
<h4 id="_members_304">Members</h4>
<div class="paragraph">
<p>The members of the <code>VkPhysicalDeviceVertexAttributeDivisorPropertiesEXT</code>
structure describe the following implementation-dependent limits:</p>
</div>
</div>
<div class="sect3">
<h4 id="_description_667">Description</h4>
<div class="ulist">
<ul>
<li>
<p><code>sType</code> is the type of this structure.</p>
</li>
<li>
<p><code>pNext</code> is <code>NULL</code> or a pointer to an extension-specific structure.</p>
</li>
<li>
<p><a id="limits-maxVertexAttribDivisor"></a> <code>maxVertexAttribDivisor</code> is the
maximum value of the number of instances that will repeat the value of
vertex attribute data when instanced rendering is enabled.</p>
</li>
</ul>
</div>
<div class="paragraph">
<p>If the <code>VkPhysicalDeviceVertexAttributeDivisorPropertiesEXT</code> structure
is included in the <code>pNext</code> chain of <a href="#VkPhysicalDeviceProperties2">VkPhysicalDeviceProperties2</a>,
it is filled with the implementation-dependent limits.</p>
</div>
<div class="sidebarblock">
<div class="content">
<div class="title">Valid Usage (Implicit)</div>
<div class="ulist">
<ul>
<li>
<p><a id="VUID-VkPhysicalDeviceVertexAttributeDivisorPropertiesEXT-sType-sType"></a> <code>sType</code> <strong class="purple">must</strong> be <code>VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_VERTEX_ATTRIBUTE_DIVISOR_PROPERTIES_EXT</code></p>
</li>
</ul>
</div>
</div>
</div>
</div>
<div class="sect3">
<h4 id="_see_also_667">See Also</h4>
<div class="paragraph">
<p><a href="#VkStructureType">VkStructureType</a></p>
</div>
</div>
<div class="sect3">
<h4 id="_document_notes_667">Document Notes</h4>
<div class="paragraph">
<p>For more information, see the Vulkan Specification at URL</p>
</div>
<div class="paragraph">
<p><a href="https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VkPhysicalDeviceVertexAttributeDivisorPropertiesEXT" class="bare">https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VkPhysicalDeviceVertexAttributeDivisorPropertiesEXT</a></p>
</div>
<div class="paragraph">
<p>This page is extracted from the Vulkan Specification.
Fixes and changes should be made to the Specification, not directly.</p>
</div>
<div style="page-break-after: always;"></div>
</div>
</div>
<div class="sect2">
<h3 id="_vkphysicaldevicevulkanmemorymodelfeatureskhr3">VkPhysicalDeviceVulkanMemoryModelFeaturesKHR(3)</h3>
<div class="sect3">
<h4 id="_name_668">Name</h4>
<div class="paragraph">
<p>VkPhysicalDeviceVulkanMemoryModelFeaturesKHR - Structure describing features supported by VK_KHR_vulkan_memory_model</p>
</div>
</div>
<div class="sect3">
<h4 id="_c_specification_668">C Specification</h4>
<div class="paragraph">
<p>To query memory model features additionally supported call
<a href="#vkGetPhysicalDeviceFeatures2">vkGetPhysicalDeviceFeatures2</a> with a
<code>VkPhysicalDeviceVulkanMemoryModelFeaturesKHR</code> structure included in the
<code>pNext</code> chain of its <code>pFeatures</code> parameter.
The <code>VkPhysicalDeviceVulkanMemoryModelFeaturesKHR</code> structure <strong class="purple">can</strong> also
be in the <code>pNext</code> chain of a <a href="#VkDeviceCreateInfo">VkDeviceCreateInfo</a> structure, in
which case it controls which additional features are enabled in the device.</p>
</div>
<div class="paragraph">
<p>The <a href="#VkPhysicalDeviceVulkanMemoryModelFeaturesKHR">VkPhysicalDeviceVulkanMemoryModelFeaturesKHR</a> structure is defined
as:</p>
</div>
<div id="VkPhysicalDeviceVulkanMemoryModelFeaturesKHR" class="listingblock">
<div class="content">
<pre class="highlight"><code class="language-c++" data-lang="c++">typedef struct VkPhysicalDeviceVulkanMemoryModelFeaturesKHR {
    VkStructureType    sType;
    void*              pNext;
    VkBool32           vulkanMemoryModel;
    VkBool32           vulkanMemoryModelDeviceScope;
    VkBool32           vulkanMemoryModelAvailabilityVisibilityChains;
} VkPhysicalDeviceVulkanMemoryModelFeaturesKHR;</code></pre>
</div>
</div>
</div>
<div class="sect3">
<h4 id="_members_305">Members</h4>
<div class="ulist">
<ul>
<li>
<p><code>sType</code> is the type of this structure.</p>
</li>
<li>
<p><code>pNext</code> is <code>NULL</code> or a pointer to an extension-specific structure.</p>
</li>
<li>
<p><a id="features-vulkanMemoryModel"></a> <code>vulkanMemoryModel</code> indicates whether
the Vulkan Memory Model is supported, as defined in
<a href="vkspec.html#memory-model">Vulkan Memory Model</a>.
This also indicates whether shader modules <strong class="purple">can</strong> declare the
<code>VulkanMemoryModelKHR</code> capability.</p>
</li>
<li>
<p><a id="features-vulkanMemoryModelDeviceScope"></a>
<code>vulkanMemoryModelDeviceScope</code> indicates whether the Vulkan Memory
Model can use <code>Device</code> scope synchronization.
This also indicates whether shader modules <strong class="purple">can</strong> declare the
<code>VulkanMemoryModelDeviceScopeKHR</code> capability.</p>
</li>
<li>
<p><a id="features-vulkanMemoryModelAvailabilityVisibilityChains"></a>
<code>vulkanMemoryModelAvailabilityVisibilityChains</code> indicates whether
the Vulkan Memory Model can use <a href="vkspec.html#memory-model-availability-visibility">availability and visibility chains</a> with more than one element.</p>
</li>
</ul>
</div>
</div>
<div class="sect3">
<h4 id="_description_668">Description</h4>
<div class="sidebarblock">
<div class="content">
<div class="title">Valid Usage (Implicit)</div>
<div class="ulist">
<ul>
<li>
<p><a id="VUID-VkPhysicalDeviceVulkanMemoryModelFeaturesKHR-sType-sType"></a> <code>sType</code> <strong class="purple">must</strong> be <code>VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_VULKAN_MEMORY_MODEL_FEATURES_KHR</code></p>
</li>
</ul>
</div>
</div>
</div>
</div>
<div class="sect3">
<h4 id="_see_also_668">See Also</h4>
<div class="paragraph">
<p><code>VkBool32</code>, <a href="#VkStructureType">VkStructureType</a></p>
</div>
</div>
<div class="sect3">
<h4 id="_document_notes_668">Document Notes</h4>
<div class="paragraph">
<p>For more information, see the Vulkan Specification at URL</p>
</div>
<div class="paragraph">
<p><a href="https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VkPhysicalDeviceVulkanMemoryModelFeaturesKHR" class="bare">https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VkPhysicalDeviceVulkanMemoryModelFeaturesKHR</a></p>
</div>
<div class="paragraph">
<p>This page is extracted from the Vulkan Specification.
Fixes and changes should be made to the Specification, not directly.</p>
</div>
<div style="page-break-after: always;"></div>
</div>
</div>
<div class="sect2">
<h3 id="_vkphysicaldeviceycbcrimagearraysfeaturesext3">VkPhysicalDeviceYcbcrImageArraysFeaturesEXT(3)</h3>
<div class="sect3">
<h4 id="_name_669">Name</h4>
<div class="paragraph">
<p>VkPhysicalDeviceYcbcrImageArraysFeaturesEXT - Structure describing extended Y</p>
</div>
</div>
<div class="sect3">
<h4 id="_c_specification_669">C Specification</h4>
<div class="paragraph">
<p>The <code>VkPhysicalDeviceYcbcrImageArraysFeaturesEXT</code> structure is defined
as:</p>
</div>
<div id="VkPhysicalDeviceYcbcrImageArraysFeaturesEXT" class="listingblock">
<div class="content">
<pre class="highlight"><code class="language-c++" data-lang="c++">typedef struct VkPhysicalDeviceYcbcrImageArraysFeaturesEXT {
    VkStructureType    sType;
    void*              pNext;
    VkBool32           ycbcrImageArrays;
} VkPhysicalDeviceYcbcrImageArraysFeaturesEXT;</code></pre>
</div>
</div>
</div>
<div class="sect3">
<h4 id="_members_306">Members</h4>
<div class="paragraph">
<p>The members of the <code>VkPhysicalDeviceYcbcrImageArraysFeaturesEXT</code>
structure describe the following features:</p>
</div>
</div>
<div class="sect3">
<h4 id="_description_669">Description</h4>
<div class="ulist">
<ul>
<li>
<p><a id="features-ycbcrImageArrays"></a> <code>ycbcrImageArrays</code> indicates that the
implementation supports creating images with a format that requires
<a href="vkspec.html#formats-requiring-sampler-ycbcr-conversion">Y&#8217;C<sub>B</sub>C<sub>R</sub> conversion</a>
and has multiple array layers.</p>
</li>
</ul>
</div>
<div class="paragraph">
<p>If the <code>VkPhysicalDeviceYcbcrImageArraysFeaturesEXT</code> structure is
included in the <code>pNext</code> chain of <a href="#VkPhysicalDeviceFeatures2KHR">VkPhysicalDeviceFeatures2KHR</a>, it
is filled with values indicating whether the feature is supported.
<code>VkPhysicalDeviceYcbcrImageArraysFeaturesEXT</code> <strong class="purple">can</strong> also be used in the
<code>pNext</code> chain of <a href="#VkDeviceCreateInfo">VkDeviceCreateInfo</a> to enable features.</p>
</div>
<div class="sidebarblock">
<div class="content">
<div class="title">Valid Usage (Implicit)</div>
<div class="ulist">
<ul>
<li>
<p><a id="VUID-VkPhysicalDeviceYcbcrImageArraysFeaturesEXT-sType-sType"></a> <code>sType</code> <strong class="purple">must</strong> be <code>VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_YCBCR_IMAGE_ARRAYS_FEATURES_EXT</code></p>
</li>
</ul>
</div>
</div>
</div>
</div>
<div class="sect3">
<h4 id="_see_also_669">See Also</h4>
<div class="paragraph">
<p><code>VkBool32</code>, <a href="#VkStructureType">VkStructureType</a></p>
</div>
</div>
<div class="sect3">
<h4 id="_document_notes_669">Document Notes</h4>
<div class="paragraph">
<p>For more information, see the Vulkan Specification at URL</p>
</div>
<div class="paragraph">
<p><a href="https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VkPhysicalDeviceYcbcrImageArraysFeaturesEXT" class="bare">https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VkPhysicalDeviceYcbcrImageArraysFeaturesEXT</a></p>
</div>
<div class="paragraph">
<p>This page is extracted from the Vulkan Specification.
Fixes and changes should be made to the Specification, not directly.</p>
</div>
<div style="page-break-after: always;"></div>
</div>
</div>
<div class="sect2">
<h3 id="_vkpipelinecachecreateinfo3">VkPipelineCacheCreateInfo(3)</h3>
<div class="sect3">
<h4 id="_name_670">Name</h4>
<div class="paragraph">
<p>VkPipelineCacheCreateInfo - Structure specifying parameters of a newly created pipeline cache</p>
</div>
</div>
<div class="sect3">
<h4 id="_c_specification_670">C Specification</h4>
<div class="paragraph">
<p>The <code>VkPipelineCacheCreateInfo</code> structure is defined as:</p>
</div>
<div id="VkPipelineCacheCreateInfo" class="listingblock">
<div class="content">
<pre class="highlight"><code class="language-c++" data-lang="c++">typedef struct VkPipelineCacheCreateInfo {
    VkStructureType               sType;
    const void*                   pNext;
    VkPipelineCacheCreateFlags    flags;
    size_t                        initialDataSize;
    const void*                   pInitialData;
} VkPipelineCacheCreateInfo;</code></pre>
</div>
</div>
</div>
<div class="sect3">
<h4 id="_members_307">Members</h4>
<div class="ulist">
<ul>
<li>
<p><code>sType</code> is the type of this structure.</p>
</li>
<li>
<p><code>pNext</code> is <code>NULL</code> or a pointer to an extension-specific structure.</p>
</li>
<li>
<p><code>flags</code> is reserved for future use.</p>
</li>
<li>
<p><code>initialDataSize</code> is the number of bytes in <code>pInitialData</code>.
If <code>initialDataSize</code> is zero, the pipeline cache will initially be
empty.</p>
</li>
<li>
<p><code>pInitialData</code> is a pointer to previously retrieved pipeline cache
data.
If the pipeline cache data is incompatible (as defined below) with the
device, the pipeline cache will be initially empty.
If <code>initialDataSize</code> is zero, <code>pInitialData</code> is ignored.</p>
</li>
</ul>
</div>
</div>
<div class="sect3">
<h4 id="_description_670">Description</h4>
<div class="sidebarblock">
<div class="content">
<div class="title">Valid Usage</div>
<div class="ulist">
<ul>
<li>
<p><a id="VUID-VkPipelineCacheCreateInfo-initialDataSize-00768"></a>
If <code>initialDataSize</code> is not <code>0</code>, it <strong class="purple">must</strong> be equal to the size of
<code>pInitialData</code>, as returned by <code>vkGetPipelineCacheData</code> when
<code>pInitialData</code> was originally retrieved</p>
</li>
<li>
<p><a id="VUID-VkPipelineCacheCreateInfo-initialDataSize-00769"></a>
If <code>initialDataSize</code> is not <code>0</code>, <code>pInitialData</code> <strong class="purple">must</strong> have been
retrieved from a previous call to <code>vkGetPipelineCacheData</code></p>
</li>
</ul>
</div>
</div>
</div>
<div class="sidebarblock">
<div class="content">
<div class="title">Valid Usage (Implicit)</div>
<div class="ulist">
<ul>
<li>
<p><a id="VUID-VkPipelineCacheCreateInfo-sType-sType"></a> <code>sType</code> <strong class="purple">must</strong> be <code>VK_STRUCTURE_TYPE_PIPELINE_CACHE_CREATE_INFO</code></p>
</li>
<li>
<p><a id="VUID-VkPipelineCacheCreateInfo-pNext-pNext"></a> <code>pNext</code> <strong class="purple">must</strong> be <code>NULL</code></p>
</li>
<li>
<p><a id="VUID-VkPipelineCacheCreateInfo-flags-zerobitmask"></a> <code>flags</code> <strong class="purple">must</strong> be <code>0</code></p>
</li>
<li>
<p><a id="VUID-VkPipelineCacheCreateInfo-pInitialData-parameter"></a> If <code>initialDataSize</code> is not <code>0</code>, <code>pInitialData</code> <strong class="purple">must</strong> be a valid pointer to an array of <code>initialDataSize</code> bytes</p>
</li>
</ul>
</div>
</div>
</div>
</div>
<div class="sect3">
<h4 id="_see_also_670">See Also</h4>
<div class="paragraph">
<p><a href="#VkPipelineCacheCreateFlags">VkPipelineCacheCreateFlags</a>, <a href="#VkStructureType">VkStructureType</a>, <a href="#vkCreatePipelineCache">vkCreatePipelineCache</a></p>
</div>
</div>
<div class="sect3">
<h4 id="_document_notes_670">Document Notes</h4>
<div class="paragraph">
<p>For more information, see the Vulkan Specification at URL</p>
</div>
<div class="paragraph">
<p><a href="https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VkPipelineCacheCreateInfo" class="bare">https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VkPipelineCacheCreateInfo</a></p>
</div>
<div class="paragraph">
<p>This page is extracted from the Vulkan Specification.
Fixes and changes should be made to the Specification, not directly.</p>
</div>
<div style="page-break-after: always;"></div>
</div>
</div>
<div class="sect2">
<h3 id="_vkpipelinecolorblendadvancedstatecreateinfoext3">VkPipelineColorBlendAdvancedStateCreateInfoEXT(3)</h3>
<div class="sect3">
<h4 id="_name_671">Name</h4>
<div class="paragraph">
<p>VkPipelineColorBlendAdvancedStateCreateInfoEXT - Structure specifying parameters that affect advanced blend operations</p>
</div>
</div>
<div class="sect3">
<h4 id="_c_specification_671">C Specification</h4>
<div class="paragraph">
<p>If the <code>pNext</code> chain of <a href="#VkPipelineColorBlendStateCreateInfo">VkPipelineColorBlendStateCreateInfo</a>
includes a <code>VkPipelineColorBlendAdvancedStateCreateInfoEXT</code> structure,
then that structure includes parameters that affect advanced blend
operations.</p>
</div>
<div class="paragraph">
<p>The <code>VkPipelineColorBlendAdvancedStateCreateInfoEXT</code> structure is
defined as:</p>
</div>
<div id="VkPipelineColorBlendAdvancedStateCreateInfoEXT" class="listingblock">
<div class="content">
<pre class="highlight"><code class="language-c++" data-lang="c++">typedef struct VkPipelineColorBlendAdvancedStateCreateInfoEXT {
    VkStructureType      sType;
    const void*          pNext;
    VkBool32             srcPremultiplied;
    VkBool32             dstPremultiplied;
    VkBlendOverlapEXT    blendOverlap;
} VkPipelineColorBlendAdvancedStateCreateInfoEXT;</code></pre>
</div>
</div>
</div>
<div class="sect3">
<h4 id="_members_308">Members</h4>
<div class="ulist">
<ul>
<li>
<p><code>sType</code> is the type of this structure.</p>
</li>
<li>
<p><code>pNext</code> is <code>NULL</code> or a pointer to an extension-specific structure.</p>
</li>
<li>
<p><code>srcPremultiplied</code> specifies whether the source color of the blend
operation is treated as premultiplied.</p>
</li>
<li>
<p><code>dstPremultiplied</code> specifies whether the destination color of the
blend operation is treated as premultiplied.</p>
</li>
<li>
<p><code>blendOverlap</code> is a <a href="#VkBlendOverlapEXT">VkBlendOverlapEXT</a> value specifying how the
source and destination sample&#8217;s coverage is correlated.</p>
</li>
</ul>
</div>
</div>
<div class="sect3">
<h4 id="_description_671">Description</h4>
<div class="paragraph">
<p>If this structure is not present, <code>srcPremultiplied</code> and
<code>dstPremultiplied</code> are both considered to be <code>VK_TRUE</code>, and
<code>blendOverlap</code> is considered to be
<code>VK_BLEND_OVERLAP_UNCORRELATED_EXT</code>.</p>
</div>
<div class="sidebarblock">
<div class="content">
<div class="title">Valid Usage</div>
<div class="ulist">
<ul>
<li>
<p><a id="VUID-VkPipelineColorBlendAdvancedStateCreateInfoEXT-srcPremultiplied-01424"></a>
If the <a href="vkspec.html#limits-advancedBlendNonPremultipliedSrcColor">non-premultiplied
source color</a> property is not supported, <code>srcPremultiplied</code> <strong class="purple">must</strong>
be <code>VK_TRUE</code></p>
</li>
<li>
<p><a id="VUID-VkPipelineColorBlendAdvancedStateCreateInfoEXT-dstPremultiplied-01425"></a>
If the <a href="vkspec.html#limits-advancedBlendNonPremultipliedDstColor">non-premultiplied
destination color</a> property is not supported, <code>dstPremultiplied</code>
<strong class="purple">must</strong> be <code>VK_TRUE</code></p>
</li>
<li>
<p><a id="VUID-VkPipelineColorBlendAdvancedStateCreateInfoEXT-blendOverlap-01426"></a>
If the <a href="vkspec.html#limits-advancedBlendCorrelatedOverlap">correlated overlap</a>
property is not supported, <code>blendOverlap</code> <strong class="purple">must</strong> be
<code>VK_BLEND_OVERLAP_UNCORRELATED_EXT</code></p>
</li>
</ul>
</div>
</div>
</div>
<div class="sidebarblock">
<div class="content">
<div class="title">Valid Usage (Implicit)</div>
<div class="ulist">
<ul>
<li>
<p><a id="VUID-VkPipelineColorBlendAdvancedStateCreateInfoEXT-sType-sType"></a> <code>sType</code> <strong class="purple">must</strong> be <code>VK_STRUCTURE_TYPE_PIPELINE_COLOR_BLEND_ADVANCED_STATE_CREATE_INFO_EXT</code></p>
</li>
<li>
<p><a id="VUID-VkPipelineColorBlendAdvancedStateCreateInfoEXT-blendOverlap-parameter"></a> <code>blendOverlap</code> <strong class="purple">must</strong> be a valid <a href="#VkBlendOverlapEXT">VkBlendOverlapEXT</a> value</p>
</li>
</ul>
</div>
</div>
</div>
</div>
<div class="sect3">
<h4 id="_see_also_671">See Also</h4>
<div class="paragraph">
<p><a href="#VkBlendOverlapEXT">VkBlendOverlapEXT</a>, <code>VkBool32</code>, <a href="#VkStructureType">VkStructureType</a></p>
</div>
</div>
<div class="sect3">
<h4 id="_document_notes_671">Document Notes</h4>
<div class="paragraph">
<p>For more information, see the Vulkan Specification at URL</p>
</div>
<div class="paragraph">
<p><a href="https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VkPipelineColorBlendAdvancedStateCreateInfoEXT" class="bare">https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VkPipelineColorBlendAdvancedStateCreateInfoEXT</a></p>
</div>
<div class="paragraph">
<p>This page is extracted from the Vulkan Specification.
Fixes and changes should be made to the Specification, not directly.</p>
</div>
<div style="page-break-after: always;"></div>
</div>
</div>
<div class="sect2">
<h3 id="_vkpipelinecolorblendattachmentstate3">VkPipelineColorBlendAttachmentState(3)</h3>
<div class="sect3">
<h4 id="_name_672">Name</h4>
<div class="paragraph">
<p>VkPipelineColorBlendAttachmentState - Structure specifying a pipeline color blend attachment state</p>
</div>
</div>
<div class="sect3">
<h4 id="_c_specification_672">C Specification</h4>
<div class="paragraph">
<p>The <code>VkPipelineColorBlendAttachmentState</code> structure is defined as:</p>
</div>
<div id="VkPipelineColorBlendAttachmentState" class="listingblock">
<div class="content">
<pre class="highlight"><code class="language-c++" data-lang="c++">typedef struct VkPipelineColorBlendAttachmentState {
    VkBool32                 blendEnable;
    VkBlendFactor            srcColorBlendFactor;
    VkBlendFactor            dstColorBlendFactor;
    VkBlendOp                colorBlendOp;
    VkBlendFactor            srcAlphaBlendFactor;
    VkBlendFactor            dstAlphaBlendFactor;
    VkBlendOp                alphaBlendOp;
    VkColorComponentFlags    colorWriteMask;
} VkPipelineColorBlendAttachmentState;</code></pre>
</div>
</div>
</div>
<div class="sect3">
<h4 id="_members_309">Members</h4>
<div class="ulist">
<ul>
<li>
<p><code>blendEnable</code> controls whether blending is enabled for the
corresponding color attachment.
If blending is not enabled, the source fragment&#8217;s color for that
attachment is passed through unmodified.</p>
</li>
<li>
<p><code>srcColorBlendFactor</code> selects which blend factor is used to
determine the source factors <span class="eq">(S<sub>r</sub>,S<sub>g</sub>,S<sub>b</sub>)</span>.</p>
</li>
<li>
<p><code>dstColorBlendFactor</code> selects which blend factor is used to
determine the destination factors <span class="eq">(D<sub>r</sub>,D<sub>g</sub>,D<sub>b</sub>)</span>.</p>
</li>
<li>
<p><code>colorBlendOp</code> selects which blend operation is used to calculate
the RGB values to write to the color attachment.</p>
</li>
<li>
<p><code>srcAlphaBlendFactor</code> selects which blend factor is used to
determine the source factor <span class="eq">S<sub>a</sub></span>.</p>
</li>
<li>
<p><code>dstAlphaBlendFactor</code> selects which blend factor is used to
determine the destination factor <span class="eq">D<sub>a</sub></span>.</p>
</li>
<li>
<p><code>alphaBlendOp</code> selects which blend operation is use to calculate the
alpha values to write to the color attachment.</p>
</li>
<li>
<p><code>colorWriteMask</code> is a bitmask of <a href="#VkColorComponentFlagBits">VkColorComponentFlagBits</a>
specifying which of the R, G, B, and/or A components are enabled for
writing, as described for the <a href="vkspec.html#framebuffer-color-write-mask">Color Write
Mask</a>.</p>
</li>
</ul>
</div>
</div>
<div class="sect3">
<h4 id="_description_672">Description</h4>
<div class="sidebarblock">
<div class="content">
<div class="title">Valid Usage</div>
<div class="ulist">
<ul>
<li>
<p><a id="VUID-VkPipelineColorBlendAttachmentState-srcColorBlendFactor-00608"></a>
If the <a href="vkspec.html#features-dualSrcBlend">dual source blending</a> feature is not
enabled, <code>srcColorBlendFactor</code> <strong class="purple">must</strong> not be
<code>VK_BLEND_FACTOR_SRC1_COLOR</code>,
<code>VK_BLEND_FACTOR_ONE_MINUS_SRC1_COLOR</code>,
<code>VK_BLEND_FACTOR_SRC1_ALPHA</code>, or
<code>VK_BLEND_FACTOR_ONE_MINUS_SRC1_ALPHA</code></p>
</li>
<li>
<p><a id="VUID-VkPipelineColorBlendAttachmentState-dstColorBlendFactor-00609"></a>
If the <a href="vkspec.html#features-dualSrcBlend">dual source blending</a> feature is not
enabled, <code>dstColorBlendFactor</code> <strong class="purple">must</strong> not be
<code>VK_BLEND_FACTOR_SRC1_COLOR</code>,
<code>VK_BLEND_FACTOR_ONE_MINUS_SRC1_COLOR</code>,
<code>VK_BLEND_FACTOR_SRC1_ALPHA</code>, or
<code>VK_BLEND_FACTOR_ONE_MINUS_SRC1_ALPHA</code></p>
</li>
<li>
<p><a id="VUID-VkPipelineColorBlendAttachmentState-srcAlphaBlendFactor-00610"></a>
If the <a href="vkspec.html#features-dualSrcBlend">dual source blending</a> feature is not
enabled, <code>srcAlphaBlendFactor</code> <strong class="purple">must</strong> not be
<code>VK_BLEND_FACTOR_SRC1_COLOR</code>,
<code>VK_BLEND_FACTOR_ONE_MINUS_SRC1_COLOR</code>,
<code>VK_BLEND_FACTOR_SRC1_ALPHA</code>, or
<code>VK_BLEND_FACTOR_ONE_MINUS_SRC1_ALPHA</code></p>
</li>
<li>
<p><a id="VUID-VkPipelineColorBlendAttachmentState-dstAlphaBlendFactor-00611"></a>
If the <a href="vkspec.html#features-dualSrcBlend">dual source blending</a> feature is not
enabled, <code>dstAlphaBlendFactor</code> <strong class="purple">must</strong> not be
<code>VK_BLEND_FACTOR_SRC1_COLOR</code>,
<code>VK_BLEND_FACTOR_ONE_MINUS_SRC1_COLOR</code>,
<code>VK_BLEND_FACTOR_SRC1_ALPHA</code>, or
<code>VK_BLEND_FACTOR_ONE_MINUS_SRC1_ALPHA</code></p>
</li>
<li>
<p><a id="VUID-VkPipelineColorBlendAttachmentState-colorBlendOp-01406"></a>
If either of <code>colorBlendOp</code> or <code>alphaBlendOp</code> is an
<a href="vkspec.html#framebuffer-blend-advanced">advanced blend operation</a>, then
<code>colorBlendOp</code> <strong class="purple">must</strong> equal <code>alphaBlendOp</code></p>
</li>
<li>
<p><a id="VUID-VkPipelineColorBlendAttachmentState-advancedBlendIndependentBlend-01407"></a>
If
<a href="#VkPhysicalDeviceBlendOperationAdvancedPropertiesEXT">VkPhysicalDeviceBlendOperationAdvancedPropertiesEXT</a>::<code>advancedBlendIndependentBlend</code>
is <code>VK_FALSE</code> and <code>colorBlendOp</code> is an
<a href="vkspec.html#framebuffer-blend-advanced">advanced blend operation</a>, then
<code>colorBlendOp</code> <strong class="purple">must</strong> be the same for all attachments.</p>
</li>
<li>
<p><a id="VUID-VkPipelineColorBlendAttachmentState-advancedBlendIndependentBlend-01408"></a>
If
<a href="#VkPhysicalDeviceBlendOperationAdvancedPropertiesEXT">VkPhysicalDeviceBlendOperationAdvancedPropertiesEXT</a>::<code>advancedBlendIndependentBlend</code>
is <code>VK_FALSE</code> and <code>alphaBlendOp</code> is an
<a href="vkspec.html#framebuffer-blend-advanced">advanced blend operation</a>, then
<code>alphaBlendOp</code> <strong class="purple">must</strong> be the same for all attachments.</p>
</li>
<li>
<p><a id="VUID-VkPipelineColorBlendAttachmentState-advancedBlendAllOperations-01409"></a>
If
<a href="#VkPhysicalDeviceBlendOperationAdvancedPropertiesEXT">VkPhysicalDeviceBlendOperationAdvancedPropertiesEXT</a>::<code>advancedBlendAllOperations</code>
is <code>VK_FALSE</code>, then <code>colorBlendOp</code> <strong class="purple">must</strong> not be
<code>VK_BLEND_OP_ZERO_EXT</code>, <code>VK_BLEND_OP_SRC_EXT</code>,
<code>VK_BLEND_OP_DST_EXT</code>, <code>VK_BLEND_OP_SRC_OVER_EXT</code>,
<code>VK_BLEND_OP_DST_OVER_EXT</code>, <code>VK_BLEND_OP_SRC_IN_EXT</code>,
<code>VK_BLEND_OP_DST_IN_EXT</code>, <code>VK_BLEND_OP_SRC_OUT_EXT</code>,
<code>VK_BLEND_OP_DST_OUT_EXT</code>, <code>VK_BLEND_OP_SRC_ATOP_EXT</code>,
<code>VK_BLEND_OP_DST_ATOP_EXT</code>, <code>VK_BLEND_OP_XOR_EXT</code>,
<code>VK_BLEND_OP_INVERT_EXT</code>, <code>VK_BLEND_OP_INVERT_RGB_EXT</code>,
<code>VK_BLEND_OP_LINEARDODGE_EXT</code>, <code>VK_BLEND_OP_LINEARBURN_EXT</code>,
<code>VK_BLEND_OP_VIVIDLIGHT_EXT</code>, <code>VK_BLEND_OP_LINEARLIGHT_EXT</code>,
<code>VK_BLEND_OP_PINLIGHT_EXT</code>, <code>VK_BLEND_OP_HARDMIX_EXT</code>,
<code>VK_BLEND_OP_PLUS_EXT</code>, <code>VK_BLEND_OP_PLUS_CLAMPED_EXT</code>,
<code>VK_BLEND_OP_PLUS_CLAMPED_ALPHA_EXT</code>,
<code>VK_BLEND_OP_PLUS_DARKER_EXT</code>, <code>VK_BLEND_OP_MINUS_EXT</code>,
<code>VK_BLEND_OP_MINUS_CLAMPED_EXT</code>, <code>VK_BLEND_OP_CONTRAST_EXT</code>,
<code>VK_BLEND_OP_INVERT_OVG_EXT</code>, <code>VK_BLEND_OP_RED_EXT</code>,
<code>VK_BLEND_OP_GREEN_EXT</code>, or <code>VK_BLEND_OP_BLUE_EXT</code></p>
</li>
<li>
<p><a id="VUID-VkPipelineColorBlendAttachmentState-colorBlendOp-01410"></a>
If <code>colorBlendOp</code> or <code>alphaBlendOp</code> is an
<a href="vkspec.html#framebuffer-blend-advanced">advanced blend operation</a>, then
<a href="#VkSubpassDescription">VkSubpassDescription</a>::<code>colorAttachmentCount</code> of the subpass
this pipeline is compiled against <strong class="purple">must</strong> be less than or equal to
<a href="#VkPhysicalDeviceBlendOperationAdvancedPropertiesEXT">VkPhysicalDeviceBlendOperationAdvancedPropertiesEXT</a>::advancedBlendMaxColorAttachments</p>
</li>
</ul>
</div>
</div>
</div>
<div class="sidebarblock">
<div class="content">
<div class="title">Valid Usage (Implicit)</div>
<div class="ulist">
<ul>
<li>
<p><a id="VUID-VkPipelineColorBlendAttachmentState-srcColorBlendFactor-parameter"></a> <code>srcColorBlendFactor</code> <strong class="purple">must</strong> be a valid <a href="#VkBlendFactor">VkBlendFactor</a> value</p>
</li>
<li>
<p><a id="VUID-VkPipelineColorBlendAttachmentState-dstColorBlendFactor-parameter"></a> <code>dstColorBlendFactor</code> <strong class="purple">must</strong> be a valid <a href="#VkBlendFactor">VkBlendFactor</a> value</p>
</li>
<li>
<p><a id="VUID-VkPipelineColorBlendAttachmentState-colorBlendOp-parameter"></a> <code>colorBlendOp</code> <strong class="purple">must</strong> be a valid <a href="#VkBlendOp">VkBlendOp</a> value</p>
</li>
<li>
<p><a id="VUID-VkPipelineColorBlendAttachmentState-srcAlphaBlendFactor-parameter"></a> <code>srcAlphaBlendFactor</code> <strong class="purple">must</strong> be a valid <a href="#VkBlendFactor">VkBlendFactor</a> value</p>
</li>
<li>
<p><a id="VUID-VkPipelineColorBlendAttachmentState-dstAlphaBlendFactor-parameter"></a> <code>dstAlphaBlendFactor</code> <strong class="purple">must</strong> be a valid <a href="#VkBlendFactor">VkBlendFactor</a> value</p>
</li>
<li>
<p><a id="VUID-VkPipelineColorBlendAttachmentState-alphaBlendOp-parameter"></a> <code>alphaBlendOp</code> <strong class="purple">must</strong> be a valid <a href="#VkBlendOp">VkBlendOp</a> value</p>
</li>
<li>
<p><a id="VUID-VkPipelineColorBlendAttachmentState-colorWriteMask-parameter"></a> <code>colorWriteMask</code> <strong class="purple">must</strong> be a valid combination of <a href="#VkColorComponentFlagBits">VkColorComponentFlagBits</a> values</p>
</li>
</ul>
</div>
</div>
</div>
</div>
<div class="sect3">
<h4 id="_see_also_672">See Also</h4>
<div class="paragraph">
<p><a href="#VkBlendFactor">VkBlendFactor</a>, <a href="#VkBlendOp">VkBlendOp</a>, <code>VkBool32</code>, <a href="#VkColorComponentFlags">VkColorComponentFlags</a>, <a href="#VkPipelineColorBlendStateCreateInfo">VkPipelineColorBlendStateCreateInfo</a></p>
</div>
</div>
<div class="sect3">
<h4 id="_document_notes_672">Document Notes</h4>
<div class="paragraph">
<p>For more information, see the Vulkan Specification at URL</p>
</div>
<div class="paragraph">
<p><a href="https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VkPipelineColorBlendAttachmentState" class="bare">https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VkPipelineColorBlendAttachmentState</a></p>
</div>
<div class="paragraph">
<p>This page is extracted from the Vulkan Specification.
Fixes and changes should be made to the Specification, not directly.</p>
</div>
<div style="page-break-after: always;"></div>
</div>
</div>
<div class="sect2">
<h3 id="_vkpipelinecolorblendstatecreateinfo3">VkPipelineColorBlendStateCreateInfo(3)</h3>
<div class="sect3">
<h4 id="_name_673">Name</h4>
<div class="paragraph">
<p>VkPipelineColorBlendStateCreateInfo - Structure specifying parameters of a newly created pipeline color blend state</p>
</div>
</div>
<div class="sect3">
<h4 id="_c_specification_673">C Specification</h4>
<div class="paragraph">
<p>The <code>VkPipelineColorBlendStateCreateInfo</code> structure is defined as:</p>
</div>
<div id="VkPipelineColorBlendStateCreateInfo" class="listingblock">
<div class="content">
<pre class="highlight"><code class="language-c++" data-lang="c++">typedef struct VkPipelineColorBlendStateCreateInfo {
    VkStructureType                               sType;
    const void*                                   pNext;
    VkPipelineColorBlendStateCreateFlags          flags;
    VkBool32                                      logicOpEnable;
    VkLogicOp                                     logicOp;
    uint32_t                                      attachmentCount;
    const VkPipelineColorBlendAttachmentState*    pAttachments;
    float                                         blendConstants[4];
} VkPipelineColorBlendStateCreateInfo;</code></pre>
</div>
</div>
</div>
<div class="sect3">
<h4 id="_members_310">Members</h4>
<div class="ulist">
<ul>
<li>
<p><code>sType</code> is the type of this structure.</p>
</li>
<li>
<p><code>pNext</code> is <code>NULL</code> or a pointer to an extension-specific structure.</p>
</li>
<li>
<p><code>flags</code> is reserved for future use.</p>
</li>
<li>
<p><code>logicOpEnable</code> controls whether to apply <a href="vkspec.html#framebuffer-logicop">Logical Operations</a>.</p>
</li>
<li>
<p><code>logicOp</code> selects which logical operation to apply.</p>
</li>
<li>
<p><code>attachmentCount</code> is the number of
<code>VkPipelineColorBlendAttachmentState</code> elements in
<code>pAttachments</code>.
This value <strong class="purple">must</strong> equal the <code>colorAttachmentCount</code> for the subpass in
which this pipeline is used.</p>
</li>
<li>
<p><code>pAttachments</code>: is a pointer to array of per target attachment
states.</p>
</li>
<li>
<p><code>blendConstants</code> is an array of four values used as the R, G, B, and
A components of the blend constant that are used in blending, depending
on the <a href="vkspec.html#framebuffer-blendfactors">blend factor</a>.</p>
</li>
</ul>
</div>
</div>
<div class="sect3">
<h4 id="_description_673">Description</h4>
<div class="paragraph">
<p>Each element of the <code>pAttachments</code> array is a
<a href="#VkPipelineColorBlendAttachmentState">VkPipelineColorBlendAttachmentState</a> structure specifying per-target
blending state for each individual color attachment.
If the <a href="vkspec.html#features-independentBlend">independent blending</a> feature is not
enabled on the device, all <a href="#VkPipelineColorBlendAttachmentState">VkPipelineColorBlendAttachmentState</a>
elements in the <code>pAttachments</code> array <strong class="purple">must</strong> be identical.</p>
</div>
<div class="sidebarblock">
<div class="content">
<div class="title">Valid Usage</div>
<div class="ulist">
<ul>
<li>
<p><a id="VUID-VkPipelineColorBlendStateCreateInfo-pAttachments-00605"></a>
If the <a href="vkspec.html#features-independentBlend">independent blending</a> feature is not
enabled, all elements of <code>pAttachments</code> <strong class="purple">must</strong> be identical</p>
</li>
<li>
<p><a id="VUID-VkPipelineColorBlendStateCreateInfo-logicOpEnable-00606"></a>
If the <a href="vkspec.html#features-logicOp">logic operations</a> feature is not enabled,
<code>logicOpEnable</code> <strong class="purple">must</strong> be <code>VK_FALSE</code></p>
</li>
<li>
<p><a id="VUID-VkPipelineColorBlendStateCreateInfo-logicOpEnable-00607"></a>
If <code>logicOpEnable</code> is <code>VK_TRUE</code>, <code>logicOp</code> <strong class="purple">must</strong> be a valid
<a href="#VkLogicOp">VkLogicOp</a> value</p>
</li>
</ul>
</div>
</div>
</div>
<div class="sidebarblock">
<div class="content">
<div class="title">Valid Usage (Implicit)</div>
<div class="ulist">
<ul>
<li>
<p><a id="VUID-VkPipelineColorBlendStateCreateInfo-sType-sType"></a> <code>sType</code> <strong class="purple">must</strong> be <code>VK_STRUCTURE_TYPE_PIPELINE_COLOR_BLEND_STATE_CREATE_INFO</code></p>
</li>
<li>
<p><a id="VUID-VkPipelineColorBlendStateCreateInfo-pNext-pNext"></a> <code>pNext</code> <strong class="purple">must</strong> be <code>NULL</code> or a pointer to a valid instance of <a href="#VkPipelineColorBlendAdvancedStateCreateInfoEXT">VkPipelineColorBlendAdvancedStateCreateInfoEXT</a></p>
</li>
<li>
<p><a id="VUID-VkPipelineColorBlendStateCreateInfo-flags-zerobitmask"></a> <code>flags</code> <strong class="purple">must</strong> be <code>0</code></p>
</li>
<li>
<p><a id="VUID-VkPipelineColorBlendStateCreateInfo-pAttachments-parameter"></a> If <code>attachmentCount</code> is not <code>0</code>, <code>pAttachments</code> <strong class="purple">must</strong> be a valid pointer to an array of <code>attachmentCount</code> valid <code>VkPipelineColorBlendAttachmentState</code> structures</p>
</li>
</ul>
</div>
</div>
</div>
</div>
<div class="sect3">
<h4 id="_see_also_673">See Also</h4>
<div class="paragraph">
<p><code>VkBool32</code>, <a href="#VkGraphicsPipelineCreateInfo">VkGraphicsPipelineCreateInfo</a>, <a href="#VkLogicOp">VkLogicOp</a>, <a href="#VkPipelineColorBlendAttachmentState">VkPipelineColorBlendAttachmentState</a>, <a href="#VkPipelineColorBlendStateCreateFlags">VkPipelineColorBlendStateCreateFlags</a>, <a href="#VkStructureType">VkStructureType</a></p>
</div>
</div>
<div class="sect3">
<h4 id="_document_notes_673">Document Notes</h4>
<div class="paragraph">
<p>For more information, see the Vulkan Specification at URL</p>
</div>
<div class="paragraph">
<p><a href="https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VkPipelineColorBlendStateCreateInfo" class="bare">https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VkPipelineColorBlendStateCreateInfo</a></p>
</div>
<div class="paragraph">
<p>This page is extracted from the Vulkan Specification.
Fixes and changes should be made to the Specification, not directly.</p>
</div>
<div style="page-break-after: always;"></div>
</div>
</div>
<div class="sect2">
<h3 id="_vkpipelinecoveragemodulationstatecreateinfonv3">VkPipelineCoverageModulationStateCreateInfoNV(3)</h3>
<div class="sect3">
<h4 id="_name_674">Name</h4>
<div class="paragraph">
<p>VkPipelineCoverageModulationStateCreateInfoNV - Structure specifying parameters controlling coverage modulation</p>
</div>
</div>
<div class="sect3">
<h4 id="_c_specification_674">C Specification</h4>
<div class="paragraph">
<p>As part of coverage reduction, fragment color values <strong class="purple">can</strong> also be modulated
(multiplied) by a value that is a function of fraction of covered
rasterization samples associated with that color sample.</p>
</div>
<div class="paragraph">
<p>Pipeline state controlling coverage reduction is specified through the
members of the <code>VkPipelineCoverageModulationStateCreateInfoNV</code>
structure.</p>
</div>
<div class="paragraph">
<p>The <code>VkPipelineCoverageModulationStateCreateInfoNV</code> structure is defined
as:</p>
</div>
<div id="VkPipelineCoverageModulationStateCreateInfoNV" class="listingblock">
<div class="content">
<pre class="highlight"><code class="language-c++" data-lang="c++">typedef struct VkPipelineCoverageModulationStateCreateInfoNV {
    VkStructureType                                   sType;
    const void*                                       pNext;
    VkPipelineCoverageModulationStateCreateFlagsNV    flags;
    VkCoverageModulationModeNV                        coverageModulationMode;
    VkBool32                                          coverageModulationTableEnable;
    uint32_t                                          coverageModulationTableCount;
    const float*                                      pCoverageModulationTable;
} VkPipelineCoverageModulationStateCreateInfoNV;</code></pre>
</div>
</div>
</div>
<div class="sect3">
<h4 id="_members_311">Members</h4>
<div class="ulist">
<ul>
<li>
<p><code>sType</code> is the type of this structure.</p>
</li>
<li>
<p><code>pNext</code> is <code>NULL</code> or a pointer to an extension-specific structure.</p>
</li>
<li>
<p><code>flags</code> is reserved for future use.</p>
</li>
<li>
<p><code>coverageModulationMode</code> controls which color components are
modulated and is of type <a href="#VkCoverageModulationModeNV">VkCoverageModulationModeNV</a>.</p>
</li>
<li>
<p><code>coverageModulationTableEnable</code> controls whether the modulation
factor is looked up from a table in <code>pCoverageModulationTable</code>.</p>
</li>
<li>
<p><code>coverageModulationTableCount</code> is the number of elements in
<code>pCoverageModulationTable</code>.</p>
</li>
<li>
<p><code>pCoverageModulationTable</code> is a table of modulation factors
containing a value for each number of covered samples.</p>
</li>
</ul>
</div>
</div>
<div class="sect3">
<h4 id="_description_674">Description</h4>
<div class="paragraph">
<p>If <code>coverageModulationTableEnable</code> is <code>VK_FALSE</code>, then for each
color sample the associated bits of the fragment&#8217;s coverage are counted and
divided by the number of associated bits to produce a modulation factor
<span class="eq">R</span> in the range <span class="eq">(0,1]</span> (a value of zero would have been killed due
to a color coverage of 0).
Specifically:</p>
</div>
<div class="ulist">
<ul>
<li>
<p><span class="eq">N</span> = value of <code>rasterizationSamples</code></p>
</li>
<li>
<p><span class="eq">M</span> = value of <a href="#VkAttachmentDescription">VkAttachmentDescription</a>::<code>samples</code> for any
color attachments</p>
</li>
<li>
<p><span class="eq">R = popcount(associated coverage bits) / (N / M)</span></p>
</li>
</ul>
</div>
<div class="paragraph">
<p>If <code>coverageModulationTableEnable</code> is <code>VK_TRUE</code>, the value <span class="eq">R</span>
is computed using a programmable lookup table.
The lookup table has <span class="eq">N / M</span> elements, and the element of the table is
selected by:</p>
</div>
<div class="ulist">
<ul>
<li>
<p><span class="eq">R = <code>pCoverageModulationTable</code>[popcount(associated coverage
bits)-1]</span></p>
</li>
</ul>
</div>
<div class="paragraph">
<p>Note that the table does not have an entry for <span class="eq">popcount(associated
coverage bits) = 0</span>, because such samples would have been killed.</p>
</div>
<div class="paragraph">
<p>The values of <code>pCoverageModulationTable</code> <strong class="purple">may</strong> be rounded to an
implementation-dependent precision, which is at least as fine as <span class="eq">1 /
N</span>, and clamped to <span class="eq">[0,1]</span>.</p>
</div>
<div class="paragraph">
<p>For each color attachment with a floating point or normalized color format,
each fragment output color value is replicated to <span class="eq">M</span> values which <strong class="purple">can</strong>
each be modulated (multiplied) by that color sample&#8217;s associated value of
<span class="eq">R</span>.
Which components are modulated is controlled by
<code>coverageModulationMode</code>.</p>
</div>
<div class="paragraph">
<p>If this structure is not present, it is as if <code>coverageModulationMode</code>
is <code>VK_COVERAGE_MODULATION_MODE_NONE_NV</code>.</p>
</div>
<div class="sidebarblock">
<div class="content">
<div class="title">Valid Usage</div>
<div class="ulist">
<ul>
<li>
<p><a id="VUID-VkPipelineCoverageModulationStateCreateInfoNV-coverageModulationTableEnable-01405"></a>
If <code>coverageModulationTableEnable</code> is <code>VK_TRUE</code>,
<code>coverageModulationTableCount</code> <strong class="purple">must</strong> be equal to the number of
rasterization samples divided by the number of color samples in the
subpass.</p>
</li>
</ul>
</div>
</div>
</div>
<div class="sidebarblock">
<div class="content">
<div class="title">Valid Usage (Implicit)</div>
<div class="ulist">
<ul>
<li>
<p><a id="VUID-VkPipelineCoverageModulationStateCreateInfoNV-sType-sType"></a> <code>sType</code> <strong class="purple">must</strong> be <code>VK_STRUCTURE_TYPE_PIPELINE_COVERAGE_MODULATION_STATE_CREATE_INFO_NV</code></p>
</li>
<li>
<p><a id="VUID-VkPipelineCoverageModulationStateCreateInfoNV-flags-zerobitmask"></a> <code>flags</code> <strong class="purple">must</strong> be <code>0</code></p>
</li>
<li>
<p><a id="VUID-VkPipelineCoverageModulationStateCreateInfoNV-coverageModulationMode-parameter"></a> <code>coverageModulationMode</code> <strong class="purple">must</strong> be a valid <a href="#VkCoverageModulationModeNV">VkCoverageModulationModeNV</a> value</p>
</li>
</ul>
</div>
</div>
</div>
</div>
<div class="sect3">
<h4 id="_see_also_674">See Also</h4>
<div class="paragraph">
<p><code>VkBool32</code>, <a href="#VkCoverageModulationModeNV">VkCoverageModulationModeNV</a>, <a href="#VkPipelineCoverageModulationStateCreateFlagsNV">VkPipelineCoverageModulationStateCreateFlagsNV</a>, <a href="#VkStructureType">VkStructureType</a></p>
</div>
</div>
<div class="sect3">
<h4 id="_document_notes_674">Document Notes</h4>
<div class="paragraph">
<p>For more information, see the Vulkan Specification at URL</p>
</div>
<div class="paragraph">
<p><a href="https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VkPipelineCoverageModulationStateCreateInfoNV" class="bare">https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VkPipelineCoverageModulationStateCreateInfoNV</a></p>
</div>
<div class="paragraph">
<p>This page is extracted from the Vulkan Specification.
Fixes and changes should be made to the Specification, not directly.</p>
</div>
<div style="page-break-after: always;"></div>
</div>
</div>
<div class="sect2">
<h3 id="_vkpipelinecoveragetocolorstatecreateinfonv3">VkPipelineCoverageToColorStateCreateInfoNV(3)</h3>
<div class="sect3">
<h4 id="_name_675">Name</h4>
<div class="paragraph">
<p>VkPipelineCoverageToColorStateCreateInfoNV - Structure specifying whether fragment coverage replaces a color</p>
</div>
</div>
<div class="sect3">
<h4 id="_c_specification_675">C Specification</h4>
<div class="paragraph">
<p>If the <code>pNext</code> chain of <a href="#VkPipelineMultisampleStateCreateInfo">VkPipelineMultisampleStateCreateInfo</a>
includes a <code>VkPipelineCoverageToColorStateCreateInfoNV</code> structure, then
that structure controls whether the fragment coverage is substituted for a
fragment color output and, if so, which output is replaced.</p>
</div>
<div class="paragraph">
<p>The <code>VkPipelineCoverageToColorStateCreateInfoNV</code> structure is defined
as:</p>
</div>
<div id="VkPipelineCoverageToColorStateCreateInfoNV" class="listingblock">
<div class="content">
<pre class="highlight"><code class="language-c++" data-lang="c++">typedef struct VkPipelineCoverageToColorStateCreateInfoNV {
    VkStructureType                                sType;
    const void*                                    pNext;
    VkPipelineCoverageToColorStateCreateFlagsNV    flags;
    VkBool32                                       coverageToColorEnable;
    uint32_t                                       coverageToColorLocation;
} VkPipelineCoverageToColorStateCreateInfoNV;</code></pre>
</div>
</div>
</div>
<div class="sect3">
<h4 id="_members_312">Members</h4>
<div class="ulist">
<ul>
<li>
<p><code>sType</code> is the type of this structure</p>
</li>
<li>
<p><code>pNext</code> is <code>NULL</code> or a pointer to an extension-specific structure</p>
</li>
<li>
<p><code>flags</code> is reserved for future use.</p>
</li>
<li>
<p><code>coverageToColorEnable</code> controls whether the fragment coverage value
replaces a fragment color output.</p>
</li>
<li>
<p><code>coverageToColorLocation</code> controls which fragment shader color
output value is replaced.</p>
</li>
</ul>
</div>
</div>
<div class="sect3">
<h4 id="_description_675">Description</h4>
<div class="paragraph">
<p>If <code>coverageToColorEnable</code> is <code>VK_TRUE</code>, the fragment coverage
information is treated as a bitmask with one bit for each sample (as in the
<a href="vkspec.html#fragops-samplemask">Sample Mask</a> section), and this bitmask replaces the
first component of the color value corresponding to the fragment shader
output location with <code>Location</code> equal to <code>coverageToColorLocation</code>
and <code>Index</code> equal to zero.
If the color attachment format has fewer bits than the sample coverage, the
low bits of the sample coverage bitmask are taken without any clamping.
If the color attachment format has more bits than the sample coverage, the
high bits of the sample coverage bitmask are filled with zeros.</p>
</div>
<div class="paragraph">
<p>If <a href="vkspec.html#primsrast-sampleshading">Sample Shading</a> is in use, the coverage
bitmask only has bits set for samples that correspond to the fragment shader
invocation that shades those samples.</p>
</div>
<div class="paragraph">
<p>This pipeline stage occurs after sample counting and before blending, and is
always performed after fragment shading regardless of the setting of
<code>EarlyFragmentTests</code>.</p>
</div>
<div class="paragraph">
<p>If <code>coverageToColorEnable</code> is <code>VK_FALSE</code>, these operations are
skipped.
If this structure is not present, it is as if <code>coverageToColorEnable</code> is
<code>VK_FALSE</code>.</p>
</div>
<div class="sidebarblock">
<div class="content">
<div class="title">Valid Usage</div>
<div class="ulist">
<ul>
<li>
<p><a id="VUID-VkPipelineCoverageToColorStateCreateInfoNV-coverageToColorEnable-01404"></a>
If <code>coverageToColorEnable</code> is <code>VK_TRUE</code>, then the render pass
subpass indicated by
<a href="#VkGraphicsPipelineCreateInfo">VkGraphicsPipelineCreateInfo</a>::<code>renderPass</code> and
<a href="#VkGraphicsPipelineCreateInfo">VkGraphicsPipelineCreateInfo</a>::<code>subpass</code> <strong class="purple">must</strong> have a color
attachment at the location selected by <code>coverageToColorLocation</code>,
with a <a href="#VkFormat">VkFormat</a> of <code>VK_FORMAT_R8_UINT</code>,
<code>VK_FORMAT_R8_SINT</code>, <code>VK_FORMAT_R16_UINT</code>,
<code>VK_FORMAT_R16_SINT</code>, <code>VK_FORMAT_R32_UINT</code>, or
<code>VK_FORMAT_R32_SINT</code></p>
</li>
</ul>
</div>
</div>
</div>
<div class="sidebarblock">
<div class="content">
<div class="title">Valid Usage (Implicit)</div>
<div class="ulist">
<ul>
<li>
<p><a id="VUID-VkPipelineCoverageToColorStateCreateInfoNV-sType-sType"></a> <code>sType</code> <strong class="purple">must</strong> be <code>VK_STRUCTURE_TYPE_PIPELINE_COVERAGE_TO_COLOR_STATE_CREATE_INFO_NV</code></p>
</li>
<li>
<p><a id="VUID-VkPipelineCoverageToColorStateCreateInfoNV-flags-zerobitmask"></a> <code>flags</code> <strong class="purple">must</strong> be <code>0</code></p>
</li>
</ul>
</div>
</div>
</div>
</div>
<div class="sect3">
<h4 id="_see_also_675">See Also</h4>
<div class="paragraph">
<p><code>VkBool32</code>, <a href="#VkPipelineCoverageToColorStateCreateFlagsNV">VkPipelineCoverageToColorStateCreateFlagsNV</a>, <a href="#VkStructureType">VkStructureType</a></p>
</div>
</div>
<div class="sect3">
<h4 id="_document_notes_675">Document Notes</h4>
<div class="paragraph">
<p>For more information, see the Vulkan Specification at URL</p>
</div>
<div class="paragraph">
<p><a href="https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VkPipelineCoverageToColorStateCreateInfoNV" class="bare">https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VkPipelineCoverageToColorStateCreateInfoNV</a></p>
</div>
<div class="paragraph">
<p>This page is extracted from the Vulkan Specification.
Fixes and changes should be made to the Specification, not directly.</p>
</div>
<div style="page-break-after: always;"></div>
</div>
</div>
<div class="sect2">
<h3 id="_vkpipelinecreationfeedbackcreateinfoext3">VkPipelineCreationFeedbackCreateInfoEXT(3)</h3>
<div class="sect3">
<h4 id="_name_676">Name</h4>
<div class="paragraph">
<p>VkPipelineCreationFeedbackCreateInfoEXT - Request for feedback about the creation of a pipeline</p>
</div>
</div>
<div class="sect3">
<h4 id="_c_specification_676">C Specification</h4>
<div class="paragraph">
<p>Feedback about the creation of a particular pipeline object <strong class="purple">can</strong> be obtained
by including a <code>VkPipelineCreationFeedbackCreateInfoEXT</code> structure in
the pNext chain of <a href="#VkGraphicsPipelineCreateInfo">VkGraphicsPipelineCreateInfo</a>,
<a href="#VkRayTracingPipelineCreateInfoNV">VkRayTracingPipelineCreateInfoNV</a>,
or <a href="#VkComputePipelineCreateInfo">VkComputePipelineCreateInfo</a>.
The <code>VkPipelineCreationFeedbackCreateInfoEXT</code> structure is defined as:</p>
</div>
<div id="VkPipelineCreationFeedbackCreateInfoEXT" class="listingblock">
<div class="content">
<pre class="highlight"><code class="language-c++" data-lang="c++">typedef struct VkPipelineCreationFeedbackCreateInfoEXT {
    VkStructureType                   sType;
    const void*                       pNext;
    VkPipelineCreationFeedbackEXT*    pPipelineCreationFeedback;
    uint32_t                          pipelineStageCreationFeedbackCount;
    VkPipelineCreationFeedbackEXT*    pPipelineStageCreationFeedbacks;
} VkPipelineCreationFeedbackCreateInfoEXT;</code></pre>
</div>
</div>
</div>
<div class="sect3">
<h4 id="_members_313">Members</h4>
<div class="ulist">
<ul>
<li>
<p><code>sType</code> is the type of this structure.</p>
</li>
<li>
<p><code>pNext</code> is <code>NULL</code> or a pointer to an extension-specific structure.</p>
</li>
<li>
<p><code>pPipelineCreationFeedback</code> is a pointer to a
<a href="#VkPipelineCreationFeedbackEXT">VkPipelineCreationFeedbackEXT</a> structure.</p>
</li>
<li>
<p><code>pipelineStageCreationFeedbackCount</code> is the number of elements in
<code>pPipelineStageCreationFeedbacks</code>.</p>
</li>
<li>
<p><code>pPipelineStageCreationFeedbacks</code> is an array of size
<code>pipelineStageCreationFeedbackCount</code> of
<a href="#VkPipelineCreationFeedbackEXT">VkPipelineCreationFeedbackEXT</a> structures.</p>
</li>
</ul>
</div>
</div>
<div class="sect3">
<h4 id="_description_676">Description</h4>
<div class="paragraph">
<p>An implementation <strong class="purple">should</strong> write pipeline creation feedback to
<code>pPipelineCreationFeedback</code> and <strong class="purple">may</strong> write pipeline stage creation
feedback to <code>pPipelineStageCreationFeedbacks</code>.
An implementation <strong class="purple">must</strong> set or clear the
<code>VK_PIPELINE_CREATION_FEEDBACK_VALID_BIT_EXT</code> in
<a href="#VkPipelineCreationFeedbackEXT">VkPipelineCreationFeedbackEXT</a>::<code>flags</code> for
<code>pPipelineCreationFeedback</code> and every element of
<code>pPipelineStageCreationFeedbacks</code>.</p>
</div>
<div class="admonitionblock note">
<table>
<tr>
<td class="icon">
<i class="fa icon-note" title="Note"></i>
</td>
<td class="content">
<div class="title">Note</div>
<div class="paragraph">
<p>One common scenario for an implementation to skip per-stage feedback is when
<code>VK_PIPELINE_CREATION_FEEDBACK_APPLICATION_PIPELINE_CACHE_HIT_BIT_EXT</code>
is set in <code>pPipelineCreationFeedback</code>.</p>
</div>
</td>
</tr>
</table>
</div>
<div class="paragraph">
<p>When chained to
<a href="#VkRayTracingPipelineCreateInfoNV">VkRayTracingPipelineCreateInfoNV</a> or
<a href="#VkGraphicsPipelineCreateInfo">VkGraphicsPipelineCreateInfo</a>, the <code>i</code> element of
<code>pPipelineStageCreationFeedbacks</code> corresponds to the <code>i</code> element of
<a href="#VkRayTracingPipelineCreateInfoNV">VkRayTracingPipelineCreateInfoNV</a>::<code>pStages</code> or
<a href="#VkGraphicsPipelineCreateInfo">VkGraphicsPipelineCreateInfo</a>::<code>pStages</code>.
When chained to <a href="#VkComputePipelineCreateInfo">VkComputePipelineCreateInfo</a>, the first element of
<code>pPipelineStageCreationFeedbacks</code> corresponds to
<a href="#VkComputePipelineCreateInfo">VkComputePipelineCreateInfo</a>::<code>stage</code>.</p>
</div>
<div class="sidebarblock">
<div class="content">
<div class="title">Valid Usage</div>
<div class="ulist">
<ul>
<li>
<p><a id="VUID-VkPipelineCreationFeedbackCreateInfoEXT-pipelineStageCreationFeedbackCount-02668"></a>
When chained to <a href="#VkGraphicsPipelineCreateInfo">VkGraphicsPipelineCreateInfo</a>,
<a href="#VkPipelineCreationFeedbackEXT">VkPipelineCreationFeedbackEXT</a>::<code>pipelineStageCreationFeedbackCount</code>
<strong class="purple">must</strong> equal <a href="#VkGraphicsPipelineCreateInfo">VkGraphicsPipelineCreateInfo</a>::<code>stageCount</code></p>
</li>
<li>
<p><a id="VUID-VkPipelineCreationFeedbackCreateInfoEXT-pipelineStageCreationFeedbackCount-02669"></a>
When chained to <a href="#VkComputePipelineCreateInfo">VkComputePipelineCreateInfo</a>,
<a href="#VkPipelineCreationFeedbackEXT">VkPipelineCreationFeedbackEXT</a>::<code>pipelineStageCreationFeedbackCount</code>
<strong class="purple">must</strong> equal 1</p>
</li>
<li>
<p><a id="VUID-VkPipelineCreationFeedbackCreateInfoEXT-pipelineStageCreationFeedbackCount-02670"></a>
When chained to <a href="#VkRayTracingPipelineCreateInfoNV">VkRayTracingPipelineCreateInfoNV</a>,
<a href="#VkPipelineCreationFeedbackEXT">VkPipelineCreationFeedbackEXT</a>::<code>pipelineStageCreationFeedbackCount</code>
<strong class="purple">must</strong> equal <a href="#VkRayTracingPipelineCreateInfoNV">VkRayTracingPipelineCreateInfoNV</a>::<code>stageCount</code></p>
</li>
</ul>
</div>
</div>
</div>
<div class="sidebarblock">
<div class="content">
<div class="title">Valid Usage (Implicit)</div>
<div class="ulist">
<ul>
<li>
<p><a id="VUID-VkPipelineCreationFeedbackCreateInfoEXT-sType-sType"></a> <code>sType</code> <strong class="purple">must</strong> be <code>VK_STRUCTURE_TYPE_PIPELINE_CREATION_FEEDBACK_CREATE_INFO_EXT</code></p>
</li>
<li>
<p><a id="VUID-VkPipelineCreationFeedbackCreateInfoEXT-pPipelineCreationFeedback-parameter"></a> <code>pPipelineCreationFeedback</code> <strong class="purple">must</strong> be a valid pointer to a <code>VkPipelineCreationFeedbackEXT</code> structure</p>
</li>
<li>
<p><a id="VUID-VkPipelineCreationFeedbackCreateInfoEXT-pPipelineStageCreationFeedbacks-parameter"></a> <code>pPipelineStageCreationFeedbacks</code> <strong class="purple">must</strong> be a valid pointer to an array of <code>pipelineStageCreationFeedbackCount</code> <code>VkPipelineCreationFeedbackEXT</code> structures</p>
</li>
<li>
<p><a id="VUID-VkPipelineCreationFeedbackCreateInfoEXT-pipelineStageCreationFeedbackCount-arraylength"></a> <code>pipelineStageCreationFeedbackCount</code> <strong class="purple">must</strong> be greater than <code>0</code></p>
</li>
</ul>
</div>
</div>
</div>
</div>
<div class="sect3">
<h4 id="_see_also_676">See Also</h4>
<div class="paragraph">
<p><a href="#VkComputePipelineCreateInfo">VkComputePipelineCreateInfo</a>, <a href="#VkGraphicsPipelineCreateInfo">VkGraphicsPipelineCreateInfo</a>, <a href="#VkPipelineCreationFeedbackEXT">VkPipelineCreationFeedbackEXT</a>, <a href="#VkRayTracingPipelineCreateInfoNV">VkRayTracingPipelineCreateInfoNV</a>, <a href="#VkStructureType">VkStructureType</a></p>
</div>
</div>
<div class="sect3">
<h4 id="_document_notes_676">Document Notes</h4>
<div class="paragraph">
<p>For more information, see the Vulkan Specification at URL</p>
</div>
<div class="paragraph">
<p><a href="https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VkPipelineCreationFeedbackCreateInfoEXT" class="bare">https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VkPipelineCreationFeedbackCreateInfoEXT</a></p>
</div>
<div class="paragraph">
<p>This page is extracted from the Vulkan Specification.
Fixes and changes should be made to the Specification, not directly.</p>
</div>
<div style="page-break-after: always;"></div>
</div>
</div>
<div class="sect2">
<h3 id="_vkpipelinecreationfeedbackext3">VkPipelineCreationFeedbackEXT(3)</h3>
<div class="sect3">
<h4 id="_name_677">Name</h4>
<div class="paragraph">
<p>VkPipelineCreationFeedbackEXT - Feedback about the creation of a pipeline or pipeline stage</p>
</div>
</div>
<div class="sect3">
<h4 id="_c_specification_677">C Specification</h4>
<div class="paragraph">
<p>The <code>VkPipelineCreationFeedbackEXT</code> structure is defined as:</p>
</div>
<div id="VkPipelineCreationFeedbackEXT" class="listingblock">
<div class="content">
<pre class="highlight"><code class="language-c++" data-lang="c++">typedef struct VkPipelineCreationFeedbackEXT {
    VkPipelineCreationFeedbackFlagsEXT    flags;
    uint64_t                              duration;
} VkPipelineCreationFeedbackEXT;</code></pre>
</div>
</div>
</div>
<div class="sect3">
<h4 id="_members_314">Members</h4>
<div class="ulist">
<ul>
<li>
<p><code>flags</code> is a bitmask of <a href="#VkPipelineCreationFeedbackFlagBitsEXT">VkPipelineCreationFeedbackFlagBitsEXT</a>
providing feedback about the creation of a pipeline or of a pipeline
stage.</p>
</li>
<li>
<p><code>duration</code> is the duration spent creating a pipeline or pipeline
stage in nanoseconds.</p>
</li>
</ul>
</div>
</div>
<div class="sect3">
<h4 id="_description_677">Description</h4>
<div class="paragraph">
<p>If the <code>VK_PIPELINE_CREATION_FEEDBACK_VALID_BIT_EXT</code> is not set in
<code>flags</code>, an implementation <strong class="purple">must</strong> not set any other bits in <code>flags</code>,
and all other <code>VkPipelineCreationFeedbackEXT</code> data members are
undefined.</p>
</div>
</div>
<div class="sect3">
<h4 id="_see_also_677">See Also</h4>
<div class="paragraph">
<p><a href="#VkPipelineCreationFeedbackCreateInfoEXT">VkPipelineCreationFeedbackCreateInfoEXT</a>, <a href="#VkPipelineCreationFeedbackFlagBitsEXT">VkPipelineCreationFeedbackFlagBitsEXT</a>, <a href="#VkPipelineCreationFeedbackFlagsEXT">VkPipelineCreationFeedbackFlagsEXT</a></p>
</div>
</div>
<div class="sect3">
<h4 id="_document_notes_677">Document Notes</h4>
<div class="paragraph">
<p>For more information, see the Vulkan Specification at URL</p>
</div>
<div class="paragraph">
<p><a href="https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VkPipelineCreationFeedbackEXT" class="bare">https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VkPipelineCreationFeedbackEXT</a></p>
</div>
<div class="paragraph">
<p>This page is extracted from the Vulkan Specification.
Fixes and changes should be made to the Specification, not directly.</p>
</div>
<div style="page-break-after: always;"></div>
</div>
</div>
<div class="sect2">
<h3 id="_vkpipelinedepthstencilstatecreateinfo3">VkPipelineDepthStencilStateCreateInfo(3)</h3>
<div class="sect3">
<h4 id="_name_678">Name</h4>
<div class="paragraph">
<p>VkPipelineDepthStencilStateCreateInfo - Structure specifying parameters of a newly created pipeline depth stencil state</p>
</div>
</div>
<div class="sect3">
<h4 id="_c_specification_678">C Specification</h4>
<div class="paragraph">
<p>The <code>VkPipelineDepthStencilStateCreateInfo</code> structure is defined as:</p>
</div>
<div id="VkPipelineDepthStencilStateCreateInfo" class="listingblock">
<div class="content">
<pre class="highlight"><code class="language-c++" data-lang="c++">typedef struct VkPipelineDepthStencilStateCreateInfo {
    VkStructureType                           sType;
    const void*                               pNext;
    VkPipelineDepthStencilStateCreateFlags    flags;
    VkBool32                                  depthTestEnable;
    VkBool32                                  depthWriteEnable;
    VkCompareOp                               depthCompareOp;
    VkBool32                                  depthBoundsTestEnable;
    VkBool32                                  stencilTestEnable;
    VkStencilOpState                          front;
    VkStencilOpState                          back;
    float                                     minDepthBounds;
    float                                     maxDepthBounds;
} VkPipelineDepthStencilStateCreateInfo;</code></pre>
</div>
</div>
</div>
<div class="sect3">
<h4 id="_members_315">Members</h4>
<div class="ulist">
<ul>
<li>
<p><code>sType</code> is the type of this structure.</p>
</li>
<li>
<p><code>pNext</code> is <code>NULL</code> or a pointer to an extension-specific structure.</p>
</li>
<li>
<p><code>flags</code> is reserved for future use.</p>
</li>
<li>
<p><code>depthTestEnable</code> controls whether <a href="vkspec.html#fragops-depth">depth testing</a>
is enabled.</p>
</li>
<li>
<p><code>depthWriteEnable</code> controls whether <a href="vkspec.html#fragops-depth-write">depth
writes</a> are enabled when <code>depthTestEnable</code> is <code>VK_TRUE</code>.
Depth writes are always disabled when <code>depthTestEnable</code> is
<code>VK_FALSE</code>.</p>
</li>
<li>
<p><code>depthCompareOp</code> is the comparison operator used in the
<a href="vkspec.html#fragops-depth">depth test</a>.</p>
</li>
<li>
<p><code>depthBoundsTestEnable</code> controls whether <a href="vkspec.html#fragops-dbt">depth bounds
testing</a> is enabled.</p>
</li>
<li>
<p><code>stencilTestEnable</code> controls whether <a href="vkspec.html#fragops-stencil">stencil
testing</a> is enabled.</p>
</li>
<li>
<p><code>front</code> and <code>back</code> control the parameters of the
<a href="vkspec.html#fragops-stencil">stencil test</a>.</p>
</li>
<li>
<p><code>minDepthBounds</code> and <code>maxDepthBounds</code> define the range of values
used in the <a href="vkspec.html#fragops-dbt">depth bounds test</a>.</p>
</li>
</ul>
</div>
</div>
<div class="sect3">
<h4 id="_description_678">Description</h4>
<div class="sidebarblock">
<div class="content">
<div class="title">Valid Usage</div>
<div class="ulist">
<ul>
<li>
<p><a id="VUID-VkPipelineDepthStencilStateCreateInfo-depthBoundsTestEnable-00598"></a>
If the <a href="vkspec.html#features-depthBounds">depth bounds testing</a> feature is not
enabled, <code>depthBoundsTestEnable</code> <strong class="purple">must</strong> be <code>VK_FALSE</code></p>
</li>
</ul>
</div>
</div>
</div>
<div class="sidebarblock">
<div class="content">
<div class="title">Valid Usage (Implicit)</div>
<div class="ulist">
<ul>
<li>
<p><a id="VUID-VkPipelineDepthStencilStateCreateInfo-sType-sType"></a> <code>sType</code> <strong class="purple">must</strong> be <code>VK_STRUCTURE_TYPE_PIPELINE_DEPTH_STENCIL_STATE_CREATE_INFO</code></p>
</li>
<li>
<p><a id="VUID-VkPipelineDepthStencilStateCreateInfo-pNext-pNext"></a> <code>pNext</code> <strong class="purple">must</strong> be <code>NULL</code></p>
</li>
<li>
<p><a id="VUID-VkPipelineDepthStencilStateCreateInfo-flags-zerobitmask"></a> <code>flags</code> <strong class="purple">must</strong> be <code>0</code></p>
</li>
<li>
<p><a id="VUID-VkPipelineDepthStencilStateCreateInfo-depthCompareOp-parameter"></a> <code>depthCompareOp</code> <strong class="purple">must</strong> be a valid <a href="#VkCompareOp">VkCompareOp</a> value</p>
</li>
<li>
<p><a id="VUID-VkPipelineDepthStencilStateCreateInfo-front-parameter"></a> <code>front</code> <strong class="purple">must</strong> be a valid <code>VkStencilOpState</code> structure</p>
</li>
<li>
<p><a id="VUID-VkPipelineDepthStencilStateCreateInfo-back-parameter"></a> <code>back</code> <strong class="purple">must</strong> be a valid <code>VkStencilOpState</code> structure</p>
</li>
</ul>
</div>
</div>
</div>
</div>
<div class="sect3">
<h4 id="_see_also_678">See Also</h4>
<div class="paragraph">
<p><code>VkBool32</code>, <a href="#VkCompareOp">VkCompareOp</a>, <a href="#VkGraphicsPipelineCreateInfo">VkGraphicsPipelineCreateInfo</a>, <a href="#VkPipelineDepthStencilStateCreateFlags">VkPipelineDepthStencilStateCreateFlags</a>, <a href="#VkStencilOpState">VkStencilOpState</a>, <a href="#VkStructureType">VkStructureType</a></p>
</div>
</div>
<div class="sect3">
<h4 id="_document_notes_678">Document Notes</h4>
<div class="paragraph">
<p>For more information, see the Vulkan Specification at URL</p>
</div>
<div class="paragraph">
<p><a href="https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VkPipelineDepthStencilStateCreateInfo" class="bare">https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VkPipelineDepthStencilStateCreateInfo</a></p>
</div>
<div class="paragraph">
<p>This page is extracted from the Vulkan Specification.
Fixes and changes should be made to the Specification, not directly.</p>
</div>
<div style="page-break-after: always;"></div>
</div>
</div>
<div class="sect2">
<h3 id="_vkpipelinediscardrectanglestatecreateinfoext3">VkPipelineDiscardRectangleStateCreateInfoEXT(3)</h3>
<div class="sect3">
<h4 id="_name_679">Name</h4>
<div class="paragraph">
<p>VkPipelineDiscardRectangleStateCreateInfoEXT - Structure specifying discard rectangle</p>
</div>
</div>
<div class="sect3">
<h4 id="_c_specification_679">C Specification</h4>
<div class="paragraph">
<p>The discard rectangles test determines if fragment&#8217;s framebuffer coordinates
<span class="eq">(x<sub>f</sub>,y<sub>f</sub>)</span> are inclusive or exclusive to a set of discard-space
rectangles.
The discard rectangles are set with the
<code>VkPipelineDiscardRectangleStateCreateInfoEXT</code> pipeline state, which is
defined as:</p>
</div>
<div id="VkPipelineDiscardRectangleStateCreateInfoEXT" class="listingblock">
<div class="content">
<pre class="highlight"><code class="language-c++" data-lang="c++">typedef struct VkPipelineDiscardRectangleStateCreateInfoEXT {
    VkStructureType                                  sType;
    const void*                                      pNext;
    VkPipelineDiscardRectangleStateCreateFlagsEXT    flags;
    VkDiscardRectangleModeEXT                        discardRectangleMode;
    uint32_t                                         discardRectangleCount;
    const VkRect2D*                                  pDiscardRectangles;
} VkPipelineDiscardRectangleStateCreateInfoEXT;</code></pre>
</div>
</div>
</div>
<div class="sect3">
<h4 id="_members_316">Members</h4>
<div class="ulist">
<ul>
<li>
<p><code>sType</code> is the type of this structure.</p>
</li>
<li>
<p><code>pNext</code> is <code>NULL</code> or a pointer to an extension-specific structure.</p>
</li>
<li>
<p><code>flags</code> is reserved for future use.</p>
</li>
<li>
<p><code>discardRectangleMode</code> is the mode used to determine whether
fragments that lie within the discard rectangle are discarded or not.</p>
</li>
<li>
<p><code>discardRectangleCount</code> is the number of discard rectangles used by
the pipeline.</p>
</li>
<li>
<p><code>pDiscardRectangles</code> is a pointer to an array of <a href="#VkRect2D">VkRect2D</a>
structures, defining the discard rectangles.
If the discard rectangle state is dynamic, this member is ignored.</p>
</li>
</ul>
</div>
</div>
<div class="sect3">
<h4 id="_description_679">Description</h4>
<div class="sidebarblock">
<div class="content">
<div class="title">Valid Usage</div>
<div class="ulist">
<ul>
<li>
<p><a id="VUID-VkPipelineDiscardRectangleStateCreateInfoEXT-discardRectangleCount-00582"></a>
<code>discardRectangleCount</code> <strong class="purple">must</strong> be between <code>0</code> and
<code>VkPhysicalDeviceDiscardRectanglePropertiesEXT</code>::<code>maxDiscardRectangles</code>,
inclusive</p>
</li>
</ul>
</div>
</div>
</div>
<div class="sidebarblock">
<div class="content">
<div class="title">Valid Usage (Implicit)</div>
<div class="ulist">
<ul>
<li>
<p><a id="VUID-VkPipelineDiscardRectangleStateCreateInfoEXT-sType-sType"></a> <code>sType</code> <strong class="purple">must</strong> be <code>VK_STRUCTURE_TYPE_PIPELINE_DISCARD_RECTANGLE_STATE_CREATE_INFO_EXT</code></p>
</li>
<li>
<p><a id="VUID-VkPipelineDiscardRectangleStateCreateInfoEXT-flags-zerobitmask"></a> <code>flags</code> <strong class="purple">must</strong> be <code>0</code></p>
</li>
<li>
<p><a id="VUID-VkPipelineDiscardRectangleStateCreateInfoEXT-discardRectangleMode-parameter"></a> <code>discardRectangleMode</code> <strong class="purple">must</strong> be a valid <a href="#VkDiscardRectangleModeEXT">VkDiscardRectangleModeEXT</a> value</p>
</li>
</ul>
</div>
</div>
</div>
</div>
<div class="sect3">
<h4 id="_see_also_679">See Also</h4>
<div class="paragraph">
<p><a href="#VkDiscardRectangleModeEXT">VkDiscardRectangleModeEXT</a>, <a href="#VkPipelineDiscardRectangleStateCreateFlagsEXT">VkPipelineDiscardRectangleStateCreateFlagsEXT</a>, <a href="#VkRect2D">VkRect2D</a>, <a href="#VkStructureType">VkStructureType</a></p>
</div>
</div>
<div class="sect3">
<h4 id="_document_notes_679">Document Notes</h4>
<div class="paragraph">
<p>For more information, see the Vulkan Specification at URL</p>
</div>
<div class="paragraph">
<p><a href="https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VkPipelineDiscardRectangleStateCreateInfoEXT" class="bare">https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VkPipelineDiscardRectangleStateCreateInfoEXT</a></p>
</div>
<div class="paragraph">
<p>This page is extracted from the Vulkan Specification.
Fixes and changes should be made to the Specification, not directly.</p>
</div>
<div style="page-break-after: always;"></div>
</div>
</div>
<div class="sect2">
<h3 id="_vkpipelinedynamicstatecreateinfo3">VkPipelineDynamicStateCreateInfo(3)</h3>
<div class="sect3">
<h4 id="_name_680">Name</h4>
<div class="paragraph">
<p>VkPipelineDynamicStateCreateInfo - Structure specifying parameters of a newly created pipeline dynamic state</p>
</div>
</div>
<div class="sect3">
<h4 id="_c_specification_680">C Specification</h4>
<div class="paragraph">
<p>The <code>VkPipelineDynamicStateCreateInfo</code> structure is defined as:</p>
</div>
<div id="VkPipelineDynamicStateCreateInfo" class="listingblock">
<div class="content">
<pre class="highlight"><code class="language-c++" data-lang="c++">typedef struct VkPipelineDynamicStateCreateInfo {
    VkStructureType                      sType;
    const void*                          pNext;
    VkPipelineDynamicStateCreateFlags    flags;
    uint32_t                             dynamicStateCount;
    const VkDynamicState*                pDynamicStates;
} VkPipelineDynamicStateCreateInfo;</code></pre>
</div>
</div>
</div>
<div class="sect3">
<h4 id="_members_317">Members</h4>
<div class="ulist">
<ul>
<li>
<p><code>sType</code> is the type of this structure.</p>
</li>
<li>
<p><code>pNext</code> is <code>NULL</code> or a pointer to an extension-specific structure.</p>
</li>
<li>
<p><code>flags</code> is reserved for future use.</p>
</li>
<li>
<p><code>dynamicStateCount</code> is the number of elements in the
<code>pDynamicStates</code> array.</p>
</li>
<li>
<p><code>pDynamicStates</code> is an array of <a href="#VkDynamicState">VkDynamicState</a> values
specifying which pieces of pipeline state will use the values from
dynamic state commands rather than from pipeline state creation info.</p>
</li>
</ul>
</div>
</div>
<div class="sect3">
<h4 id="_description_680">Description</h4>
<div class="sidebarblock">
<div class="content">
<div class="title">Valid Usage</div>
<div class="ulist">
<ul>
<li>
<p><a id="VUID-VkPipelineDynamicStateCreateInfo-pDynamicStates-01442"></a>
Each element of <code>pDynamicStates</code> <strong class="purple">must</strong> be unique</p>
</li>
</ul>
</div>
</div>
</div>
<div class="sidebarblock">
<div class="content">
<div class="title">Valid Usage (Implicit)</div>
<div class="ulist">
<ul>
<li>
<p><a id="VUID-VkPipelineDynamicStateCreateInfo-sType-sType"></a> <code>sType</code> <strong class="purple">must</strong> be <code>VK_STRUCTURE_TYPE_PIPELINE_DYNAMIC_STATE_CREATE_INFO</code></p>
</li>
<li>
<p><a id="VUID-VkPipelineDynamicStateCreateInfo-pNext-pNext"></a> <code>pNext</code> <strong class="purple">must</strong> be <code>NULL</code></p>
</li>
<li>
<p><a id="VUID-VkPipelineDynamicStateCreateInfo-flags-zerobitmask"></a> <code>flags</code> <strong class="purple">must</strong> be <code>0</code></p>
</li>
<li>
<p><a id="VUID-VkPipelineDynamicStateCreateInfo-pDynamicStates-parameter"></a> If <code>dynamicStateCount</code> is not <code>0</code>, <code>pDynamicStates</code> <strong class="purple">must</strong> be a valid pointer to an array of <code>dynamicStateCount</code> valid <a href="#VkDynamicState">VkDynamicState</a> values</p>
</li>
</ul>
</div>
</div>
</div>
</div>
<div class="sect3">
<h4 id="_see_also_680">See Also</h4>
<div class="paragraph">
<p><a href="#VkDynamicState">VkDynamicState</a>, <a href="#VkGraphicsPipelineCreateInfo">VkGraphicsPipelineCreateInfo</a>, <a href="#VkPipelineDynamicStateCreateFlags">VkPipelineDynamicStateCreateFlags</a>, <a href="#VkStructureType">VkStructureType</a></p>
</div>
</div>
<div class="sect3">
<h4 id="_document_notes_680">Document Notes</h4>
<div class="paragraph">
<p>For more information, see the Vulkan Specification at URL</p>
</div>
<div class="paragraph">
<p><a href="https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VkPipelineDynamicStateCreateInfo" class="bare">https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VkPipelineDynamicStateCreateInfo</a></p>
</div>
<div class="paragraph">
<p>This page is extracted from the Vulkan Specification.
Fixes and changes should be made to the Specification, not directly.</p>
</div>
<div style="page-break-after: always;"></div>
</div>
</div>
<div class="sect2">
<h3 id="_vkpipelineinputassemblystatecreateinfo3">VkPipelineInputAssemblyStateCreateInfo(3)</h3>
<div class="sect3">
<h4 id="_name_681">Name</h4>
<div class="paragraph">
<p>VkPipelineInputAssemblyStateCreateInfo - Structure specifying parameters of a newly created pipeline input assembly state</p>
</div>
</div>
<div class="sect3">
<h4 id="_c_specification_681">C Specification</h4>
<div class="paragraph">
<p>Drawing can be achieved in two modes:</p>
</div>
<div class="ulist">
<ul>
<li>
<p><a href="vkspec.html#drawing-mesh-shading">Programmable Mesh Shading</a>, the mesh shader
assembles primitives, or</p>
</li>
<li>
<p><a href="vkspec.html#drawing-primitive-shading">Programmable Primitive Shading</a>, the input
primitives are assembled</p>
</li>
</ul>
</div>
<div class="paragraph">
<p>as follows.</p>
</div>
<div class="paragraph">
<p>Each draw is made up of zero or more vertices and zero or more instances,
which are processed by the device and result in the assembly of primitives.
Primitives are assembled according to the <code>pInputAssemblyState</code> member
of the <code>VkGraphicsPipelineCreateInfo</code> structure, which is of type
<code>VkPipelineInputAssemblyStateCreateInfo</code>:</p>
</div>
<div id="VkPipelineInputAssemblyStateCreateInfo" class="listingblock">
<div class="content">
<pre class="highlight"><code class="language-c++" data-lang="c++">typedef struct VkPipelineInputAssemblyStateCreateInfo {
    VkStructureType                            sType;
    const void*                                pNext;
    VkPipelineInputAssemblyStateCreateFlags    flags;
    VkPrimitiveTopology                        topology;
    VkBool32                                   primitiveRestartEnable;
} VkPipelineInputAssemblyStateCreateInfo;</code></pre>
</div>
</div>
</div>
<div class="sect3">
<h4 id="_members_318">Members</h4>
<div class="ulist">
<ul>
<li>
<p><code>sType</code> is the type of this structure.</p>
</li>
<li>
<p><code>pNext</code> is <code>NULL</code> or a pointer to an extension-specific structure.</p>
</li>
<li>
<p><code>flags</code> is reserved for future use.</p>
</li>
<li>
<p><code>topology</code> is a <a href="#VkPrimitiveTopology">VkPrimitiveTopology</a> defining the primitive
topology, as described below.</p>
</li>
<li>
<p><code>primitiveRestartEnable</code> controls whether a special vertex index
value is treated as restarting the assembly of primitives.
This enable only applies to indexed draws (<a href="#vkCmdDrawIndexed">vkCmdDrawIndexed</a> and
<a href="#vkCmdDrawIndexedIndirect">vkCmdDrawIndexedIndirect</a>), and the special index value is either
0xFFFFFFFF when the <code>indexType</code> parameter of
<code>vkCmdBindIndexBuffer</code> is equal to <code>VK_INDEX_TYPE_UINT32</code>, or
0xFFFF when <code>indexType</code> is equal to <code>VK_INDEX_TYPE_UINT16</code>.
Primitive restart is not allowed for &#8220;list&#8221; topologies.</p>
</li>
</ul>
</div>
</div>
<div class="sect3">
<h4 id="_description_681">Description</h4>
<div class="paragraph">
<p>Restarting the assembly of primitives discards the most recent index values
if those elements formed an incomplete primitive, and restarts the primitive
assembly using the subsequent indices, but only assembling the immediately
following element through the end of the originally specified elements.
The primitive restart index value comparison is performed before adding the
<code>vertexOffset</code> value to the index value.</p>
</div>
<div class="sidebarblock">
<div class="content">
<div class="title">Valid Usage</div>
<div class="ulist">
<ul>
<li>
<p><a id="VUID-VkPipelineInputAssemblyStateCreateInfo-topology-00428"></a>
If <code>topology</code> is <code>VK_PRIMITIVE_TOPOLOGY_POINT_LIST</code>,
<code>VK_PRIMITIVE_TOPOLOGY_LINE_LIST</code>,
<code>VK_PRIMITIVE_TOPOLOGY_TRIANGLE_LIST</code>,
<code>VK_PRIMITIVE_TOPOLOGY_LINE_LIST_WITH_ADJACENCY</code>,
<code>VK_PRIMITIVE_TOPOLOGY_TRIANGLE_LIST_WITH_ADJACENCY</code> or
<code>VK_PRIMITIVE_TOPOLOGY_PATCH_LIST</code>, <code>primitiveRestartEnable</code>
<strong class="purple">must</strong> be <code>VK_FALSE</code></p>
</li>
<li>
<p><a id="VUID-VkPipelineInputAssemblyStateCreateInfo-topology-00429"></a>
If the <a href="vkspec.html#features-geometryShader">geometry shaders</a> feature is not
enabled, <code>topology</code> <strong class="purple">must</strong> not be any of
<code>VK_PRIMITIVE_TOPOLOGY_LINE_LIST_WITH_ADJACENCY</code>,
<code>VK_PRIMITIVE_TOPOLOGY_LINE_STRIP_WITH_ADJACENCY</code>,
<code>VK_PRIMITIVE_TOPOLOGY_TRIANGLE_LIST_WITH_ADJACENCY</code> or
<code>VK_PRIMITIVE_TOPOLOGY_TRIANGLE_STRIP_WITH_ADJACENCY</code></p>
</li>
<li>
<p><a id="VUID-VkPipelineInputAssemblyStateCreateInfo-topology-00430"></a>
If the <a href="vkspec.html#features-tessellationShader">tessellation shaders</a> feature is
not enabled, <code>topology</code> <strong class="purple">must</strong> not be
<code>VK_PRIMITIVE_TOPOLOGY_PATCH_LIST</code></p>
</li>
</ul>
</div>
</div>
</div>
<div class="sidebarblock">
<div class="content">
<div class="title">Valid Usage (Implicit)</div>
<div class="ulist">
<ul>
<li>
<p><a id="VUID-VkPipelineInputAssemblyStateCreateInfo-sType-sType"></a> <code>sType</code> <strong class="purple">must</strong> be <code>VK_STRUCTURE_TYPE_PIPELINE_INPUT_ASSEMBLY_STATE_CREATE_INFO</code></p>
</li>
<li>
<p><a id="VUID-VkPipelineInputAssemblyStateCreateInfo-pNext-pNext"></a> <code>pNext</code> <strong class="purple">must</strong> be <code>NULL</code></p>
</li>
<li>
<p><a id="VUID-VkPipelineInputAssemblyStateCreateInfo-flags-zerobitmask"></a> <code>flags</code> <strong class="purple">must</strong> be <code>0</code></p>
</li>
<li>
<p><a id="VUID-VkPipelineInputAssemblyStateCreateInfo-topology-parameter"></a> <code>topology</code> <strong class="purple">must</strong> be a valid <a href="#VkPrimitiveTopology">VkPrimitiveTopology</a> value</p>
</li>
</ul>
</div>
</div>
</div>
</div>
<div class="sect3">
<h4 id="_see_also_681">See Also</h4>
<div class="paragraph">
<p><code>VkBool32</code>, <a href="#VkGraphicsPipelineCreateInfo">VkGraphicsPipelineCreateInfo</a>, <a href="#VkPipelineInputAssemblyStateCreateFlags">VkPipelineInputAssemblyStateCreateFlags</a>, <a href="#VkPrimitiveTopology">VkPrimitiveTopology</a>, <a href="#VkStructureType">VkStructureType</a></p>
</div>
</div>
<div class="sect3">
<h4 id="_document_notes_681">Document Notes</h4>
<div class="paragraph">
<p>For more information, see the Vulkan Specification at URL</p>
</div>
<div class="paragraph">
<p><a href="https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VkPipelineInputAssemblyStateCreateInfo" class="bare">https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VkPipelineInputAssemblyStateCreateInfo</a></p>
</div>
<div class="paragraph">
<p>This page is extracted from the Vulkan Specification.
Fixes and changes should be made to the Specification, not directly.</p>
</div>
<div style="page-break-after: always;"></div>
</div>
</div>
<div class="sect2">
<h3 id="_vkpipelinelayoutcreateinfo3">VkPipelineLayoutCreateInfo(3)</h3>
<div class="sect3">
<h4 id="_name_682">Name</h4>
<div class="paragraph">
<p>VkPipelineLayoutCreateInfo - Structure specifying the parameters of a newly created pipeline layout object</p>
</div>
</div>
<div class="sect3">
<h4 id="_c_specification_682">C Specification</h4>
<div class="paragraph">
<p>The <a href="#VkPipelineLayoutCreateInfo">VkPipelineLayoutCreateInfo</a> structure is defined as:</p>
</div>
<div id="VkPipelineLayoutCreateInfo" class="listingblock">
<div class="content">
<pre class="highlight"><code class="language-c++" data-lang="c++">typedef struct VkPipelineLayoutCreateInfo {
    VkStructureType                 sType;
    const void*                     pNext;
    VkPipelineLayoutCreateFlags     flags;
    uint32_t                        setLayoutCount;
    const VkDescriptorSetLayout*    pSetLayouts;
    uint32_t                        pushConstantRangeCount;
    const VkPushConstantRange*      pPushConstantRanges;
} VkPipelineLayoutCreateInfo;</code></pre>
</div>
</div>
</div>
<div class="sect3">
<h4 id="_members_319">Members</h4>
<div class="ulist">
<ul>
<li>
<p><code>sType</code> is the type of this structure.</p>
</li>
<li>
<p><code>pNext</code> is <code>NULL</code> or a pointer to an extension-specific structure.</p>
</li>
<li>
<p><code>flags</code> is reserved for future use.</p>
</li>
<li>
<p><code>setLayoutCount</code> is the number of descriptor sets included in the
pipeline layout.</p>
</li>
<li>
<p><code>pSetLayouts</code> is a pointer to an array of
<code>VkDescriptorSetLayout</code> objects.</p>
</li>
<li>
<p><code>pushConstantRangeCount</code> is the number of push constant ranges
included in the pipeline layout.</p>
</li>
<li>
<p><code>pPushConstantRanges</code> is a pointer to an array of
<code>VkPushConstantRange</code> structures defining a set of push constant
ranges for use in a single pipeline layout.
In addition to descriptor set layouts, a pipeline layout also describes
how many push constants <strong class="purple">can</strong> be accessed by each stage of the pipeline.</p>
<div class="admonitionblock note">
<table>
<tr>
<td class="icon">
<i class="fa icon-note" title="Note"></i>
</td>
<td class="content">
<div class="title">Note</div>
<div class="paragraph">
<p>Push constants represent a high speed path to modify constant data in
pipelines that is expected to outperform memory-backed resource updates.</p>
</div>
</td>
</tr>
</table>
</div>
</li>
</ul>
</div>
</div>
<div class="sect3">
<h4 id="_description_682">Description</h4>
<div class="sidebarblock">
<div class="content">
<div class="title">Valid Usage</div>
<div class="ulist">
<ul>
<li>
<p><a id="VUID-VkPipelineLayoutCreateInfo-setLayoutCount-00286"></a>
<code>setLayoutCount</code> <strong class="purple">must</strong> be less than or equal to
<code>VkPhysicalDeviceLimits</code>::<code>maxBoundDescriptorSets</code></p>
</li>
<li>
<p><a id="VUID-VkPipelineLayoutCreateInfo-descriptorType-03016"></a>
The total number of descriptors in descriptor set layouts created
without the
<code>VK_DESCRIPTOR_SET_LAYOUT_CREATE_UPDATE_AFTER_BIND_POOL_BIT_EXT</code> bit
set with a <code>descriptorType</code> of <code>VK_DESCRIPTOR_TYPE_SAMPLER</code> and
<code>VK_DESCRIPTOR_TYPE_COMBINED_IMAGE_SAMPLER</code> accessible to any given
shader stage across all elements of <code>pSetLayouts</code> <strong class="purple">must</strong> be less than
or equal to
<code>VkPhysicalDeviceLimits</code>::<code>maxPerStageDescriptorSamplers</code></p>
</li>
<li>
<p><a id="VUID-VkPipelineLayoutCreateInfo-descriptorType-03017"></a>
The total number of descriptors in descriptor set layouts created
without the
<code>VK_DESCRIPTOR_SET_LAYOUT_CREATE_UPDATE_AFTER_BIND_POOL_BIT_EXT</code> bit
set with a <code>descriptorType</code> of
<code>VK_DESCRIPTOR_TYPE_UNIFORM_BUFFER</code> and
<code>VK_DESCRIPTOR_TYPE_UNIFORM_BUFFER_DYNAMIC</code> accessible to any given
shader stage across all elements of <code>pSetLayouts</code> <strong class="purple">must</strong> be less than
or equal to
<code>VkPhysicalDeviceLimits</code>::<code>maxPerStageDescriptorUniformBuffers</code></p>
</li>
<li>
<p><a id="VUID-VkPipelineLayoutCreateInfo-descriptorType-03018"></a>
The total number of descriptors in descriptor set layouts created
without the
<code>VK_DESCRIPTOR_SET_LAYOUT_CREATE_UPDATE_AFTER_BIND_POOL_BIT_EXT</code> bit
set with a <code>descriptorType</code> of
<code>VK_DESCRIPTOR_TYPE_STORAGE_BUFFER</code> and
<code>VK_DESCRIPTOR_TYPE_STORAGE_BUFFER_DYNAMIC</code> accessible to any given
shader stage across all elements of <code>pSetLayouts</code> <strong class="purple">must</strong> be less than
or equal to
<code>VkPhysicalDeviceLimits</code>::<code>maxPerStageDescriptorStorageBuffers</code></p>
</li>
<li>
<p><a id="VUID-VkPipelineLayoutCreateInfo-descriptorType-03019"></a>
The total number of descriptors in descriptor set layouts created
without the
<code>VK_DESCRIPTOR_SET_LAYOUT_CREATE_UPDATE_AFTER_BIND_POOL_BIT_EXT</code> bit
set with a <code>descriptorType</code> of
<code>VK_DESCRIPTOR_TYPE_COMBINED_IMAGE_SAMPLER</code>,
<code>VK_DESCRIPTOR_TYPE_SAMPLED_IMAGE</code>, and
<code>VK_DESCRIPTOR_TYPE_UNIFORM_TEXEL_BUFFER</code> accessible to any given
shader stage across all elements of <code>pSetLayouts</code> <strong class="purple">must</strong> be less than
or equal to
<code>VkPhysicalDeviceLimits</code>::<code>maxPerStageDescriptorSampledImages</code></p>
</li>
<li>
<p><a id="VUID-VkPipelineLayoutCreateInfo-descriptorType-03020"></a>
The total number of descriptors in descriptor set layouts created
without the
<code>VK_DESCRIPTOR_SET_LAYOUT_CREATE_UPDATE_AFTER_BIND_POOL_BIT_EXT</code> bit
set with a <code>descriptorType</code> of
<code>VK_DESCRIPTOR_TYPE_STORAGE_IMAGE</code>, and
<code>VK_DESCRIPTOR_TYPE_STORAGE_TEXEL_BUFFER</code> accessible to any given
shader stage across all elements of <code>pSetLayouts</code> <strong class="purple">must</strong> be less than
or equal to
<code>VkPhysicalDeviceLimits</code>::<code>maxPerStageDescriptorStorageImages</code></p>
</li>
<li>
<p><a id="VUID-VkPipelineLayoutCreateInfo-descriptorType-03021"></a>
The total number of descriptors in descriptor set layouts created
without the
<code>VK_DESCRIPTOR_SET_LAYOUT_CREATE_UPDATE_AFTER_BIND_POOL_BIT_EXT</code> bit
set with a <code>descriptorType</code> of
<code>VK_DESCRIPTOR_TYPE_INPUT_ATTACHMENT</code> accessible to any given shader
stage across all elements of <code>pSetLayouts</code> <strong class="purple">must</strong> be less than or
equal to
<code>VkPhysicalDeviceLimits</code>::<code>maxPerStageDescriptorInputAttachments</code></p>
</li>
<li>
<p><a id="VUID-VkPipelineLayoutCreateInfo-descriptorType-02214"></a>
The total number of bindings in descriptor set layouts created without
the <code>VK_DESCRIPTOR_SET_LAYOUT_CREATE_UPDATE_AFTER_BIND_POOL_BIT_EXT</code>
bit set with a <code>descriptorType</code> of
<code>VK_DESCRIPTOR_TYPE_INLINE_UNIFORM_BLOCK_EXT</code> accessible to any
given shader stage across all elements of <code>pSetLayouts</code> <strong class="purple">must</strong> be
less than or equal to
<code>VkPhysicalDeviceInlineUniformBlockPropertiesEXT</code>::<code>maxPerStageDescriptorInlineUniformBlocks</code></p>
</li>
<li>
<p><a id="VUID-VkPipelineLayoutCreateInfo-descriptorType-03022"></a>
The total number of descriptors with a <code>descriptorType</code> of
<code>VK_DESCRIPTOR_TYPE_SAMPLER</code> and
<code>VK_DESCRIPTOR_TYPE_COMBINED_IMAGE_SAMPLER</code> accessible to any given
shader stage across all elements of <code>pSetLayouts</code> <strong class="purple">must</strong> be less than
or equal to
<code>VkPhysicalDeviceDescriptorIndexingPropertiesEXT</code>::<code>maxPerStageDescriptorUpdateAfterBindSamplers</code></p>
</li>
<li>
<p><a id="VUID-VkPipelineLayoutCreateInfo-descriptorType-03023"></a>
The total number of descriptors with a <code>descriptorType</code> of
<code>VK_DESCRIPTOR_TYPE_UNIFORM_BUFFER</code> and
<code>VK_DESCRIPTOR_TYPE_UNIFORM_BUFFER_DYNAMIC</code> accessible to any given
shader stage across all elements of <code>pSetLayouts</code> <strong class="purple">must</strong> be less than
or equal to
<code>VkPhysicalDeviceDescriptorIndexingPropertiesEXT</code>::<code>maxPerStageDescriptorUpdateAfterBindUniformBuffers</code></p>
</li>
<li>
<p><a id="VUID-VkPipelineLayoutCreateInfo-descriptorType-03024"></a>
The total number of descriptors with a <code>descriptorType</code> of
<code>VK_DESCRIPTOR_TYPE_STORAGE_BUFFER</code> and
<code>VK_DESCRIPTOR_TYPE_STORAGE_BUFFER_DYNAMIC</code> accessible to any given
shader stage across all elements of <code>pSetLayouts</code> <strong class="purple">must</strong> be less than
or equal to
<code>VkPhysicalDeviceDescriptorIndexingPropertiesEXT</code>::<code>maxPerStageDescriptorUpdateAfterBindStorageBuffers</code></p>
</li>
<li>
<p><a id="VUID-VkPipelineLayoutCreateInfo-descriptorType-03025"></a>
The total number of descriptors with a <code>descriptorType</code> of
<code>VK_DESCRIPTOR_TYPE_COMBINED_IMAGE_SAMPLER</code>,
<code>VK_DESCRIPTOR_TYPE_SAMPLED_IMAGE</code>, and
<code>VK_DESCRIPTOR_TYPE_UNIFORM_TEXEL_BUFFER</code> accessible to any given
shader stage across all elements of <code>pSetLayouts</code> <strong class="purple">must</strong> be less than
or equal to
<code>VkPhysicalDeviceDescriptorIndexingPropertiesEXT</code>::<code>maxPerStageDescriptorUpdateAfterBindSampledImages</code></p>
</li>
<li>
<p><a id="VUID-VkPipelineLayoutCreateInfo-descriptorType-03026"></a>
The total number of descriptors with a <code>descriptorType</code> of
<code>VK_DESCRIPTOR_TYPE_STORAGE_IMAGE</code>, and
<code>VK_DESCRIPTOR_TYPE_STORAGE_TEXEL_BUFFER</code> accessible to any given
shader stage across all elements of <code>pSetLayouts</code> <strong class="purple">must</strong> be less than
or equal to
<code>VkPhysicalDeviceDescriptorIndexingPropertiesEXT</code>::<code>maxPerStageDescriptorUpdateAfterBindStorageImages</code></p>
</li>
<li>
<p><a id="VUID-VkPipelineLayoutCreateInfo-descriptorType-03027"></a>
The total number of descriptors with a <code>descriptorType</code> of
<code>VK_DESCRIPTOR_TYPE_INPUT_ATTACHMENT</code> accessible to any given shader
stage across all elements of <code>pSetLayouts</code> <strong class="purple">must</strong> be less than or
equal to
<code>VkPhysicalDeviceDescriptorIndexingPropertiesEXT</code>::<code>maxPerStageDescriptorUpdateAfterBindInputAttachments</code></p>
</li>
<li>
<p><a id="VUID-VkPipelineLayoutCreateInfo-descriptorType-02215"></a>
The total number of bindings with a <code>descriptorType</code> of
<code>VK_DESCRIPTOR_TYPE_INLINE_UNIFORM_BLOCK_EXT</code> accessible to any
given shader stage across all elements of <code>pSetLayouts</code> <strong class="purple">must</strong> be
less than or equal to
<code>VkPhysicalDeviceInlineUniformBlockPropertiesEXT</code>::<code>maxPerStageDescriptorUpdateAfterBindInlineUniformBlocks</code></p>
</li>
<li>
<p><a id="VUID-VkPipelineLayoutCreateInfo-descriptorType-03028"></a>
The total number of descriptors in descriptor set layouts created
without the
<code>VK_DESCRIPTOR_SET_LAYOUT_CREATE_UPDATE_AFTER_BIND_POOL_BIT_EXT</code> bit
set with a <code>descriptorType</code> of <code>VK_DESCRIPTOR_TYPE_SAMPLER</code> and
<code>VK_DESCRIPTOR_TYPE_COMBINED_IMAGE_SAMPLER</code> accessible across all
shader stages and across all elements of <code>pSetLayouts</code> <strong class="purple">must</strong> be less
than or equal to
<code>VkPhysicalDeviceLimits</code>::<code>maxDescriptorSetSamplers</code></p>
</li>
<li>
<p><a id="VUID-VkPipelineLayoutCreateInfo-descriptorType-03029"></a>
The total number of descriptors in descriptor set layouts created
without the
<code>VK_DESCRIPTOR_SET_LAYOUT_CREATE_UPDATE_AFTER_BIND_POOL_BIT_EXT</code> bit
set with a <code>descriptorType</code> of
<code>VK_DESCRIPTOR_TYPE_UNIFORM_BUFFER</code> accessible across all shader
stages and across all elements of <code>pSetLayouts</code> <strong class="purple">must</strong> be less than
or equal to
<code>VkPhysicalDeviceLimits</code>::<code>maxDescriptorSetUniformBuffers</code></p>
</li>
<li>
<p><a id="VUID-VkPipelineLayoutCreateInfo-descriptorType-03030"></a>
The total number of descriptors in descriptor set layouts created
without the
<code>VK_DESCRIPTOR_SET_LAYOUT_CREATE_UPDATE_AFTER_BIND_POOL_BIT_EXT</code> bit
set with a <code>descriptorType</code> of
<code>VK_DESCRIPTOR_TYPE_UNIFORM_BUFFER_DYNAMIC</code> accessible across all
shader stages and across all elements of <code>pSetLayouts</code> <strong class="purple">must</strong> be less
than or equal to
<code>VkPhysicalDeviceLimits</code>::<code>maxDescriptorSetUniformBuffersDynamic</code></p>
</li>
<li>
<p><a id="VUID-VkPipelineLayoutCreateInfo-descriptorType-03031"></a>
The total number of descriptors in descriptor set layouts created
without the
<code>VK_DESCRIPTOR_SET_LAYOUT_CREATE_UPDATE_AFTER_BIND_POOL_BIT_EXT</code> bit
set with a <code>descriptorType</code> of
<code>VK_DESCRIPTOR_TYPE_STORAGE_BUFFER</code> accessible across all shader
stages and across all elements of <code>pSetLayouts</code> <strong class="purple">must</strong> be less than
or equal to
<code>VkPhysicalDeviceLimits</code>::<code>maxDescriptorSetStorageBuffers</code></p>
</li>
<li>
<p><a id="VUID-VkPipelineLayoutCreateInfo-descriptorType-03032"></a>
The total number of descriptors in descriptor set layouts created
without the
<code>VK_DESCRIPTOR_SET_LAYOUT_CREATE_UPDATE_AFTER_BIND_POOL_BIT_EXT</code> bit
set with a <code>descriptorType</code> of
<code>VK_DESCRIPTOR_TYPE_STORAGE_BUFFER_DYNAMIC</code> accessible across all
shader stages and across all elements of <code>pSetLayouts</code> <strong class="purple">must</strong> be less
than or equal to
<code>VkPhysicalDeviceLimits</code>::<code>maxDescriptorSetStorageBuffersDynamic</code></p>
</li>
<li>
<p><a id="VUID-VkPipelineLayoutCreateInfo-descriptorType-03033"></a>
The total number of descriptors in descriptor set layouts created
without the
<code>VK_DESCRIPTOR_SET_LAYOUT_CREATE_UPDATE_AFTER_BIND_POOL_BIT_EXT</code> bit
set with a <code>descriptorType</code> of
<code>VK_DESCRIPTOR_TYPE_COMBINED_IMAGE_SAMPLER</code>,
<code>VK_DESCRIPTOR_TYPE_SAMPLED_IMAGE</code>, and
<code>VK_DESCRIPTOR_TYPE_UNIFORM_TEXEL_BUFFER</code> accessible across all
shader stages and across all elements of <code>pSetLayouts</code> <strong class="purple">must</strong> be less
than or equal to
<code>VkPhysicalDeviceLimits</code>::<code>maxDescriptorSetSampledImages</code></p>
</li>
<li>
<p><a id="VUID-VkPipelineLayoutCreateInfo-descriptorType-03034"></a>
The total number of descriptors in descriptor set layouts created
without the
<code>VK_DESCRIPTOR_SET_LAYOUT_CREATE_UPDATE_AFTER_BIND_POOL_BIT_EXT</code> bit
set with a <code>descriptorType</code> of
<code>VK_DESCRIPTOR_TYPE_STORAGE_IMAGE</code>, and
<code>VK_DESCRIPTOR_TYPE_STORAGE_TEXEL_BUFFER</code> accessible across all
shader stages and across all elements of <code>pSetLayouts</code> <strong class="purple">must</strong> be less
than or equal to
<code>VkPhysicalDeviceLimits</code>::<code>maxDescriptorSetStorageImages</code></p>
</li>
<li>
<p><a id="VUID-VkPipelineLayoutCreateInfo-descriptorType-03035"></a>
The total number of descriptors in descriptor set layouts created
without the
<code>VK_DESCRIPTOR_SET_LAYOUT_CREATE_UPDATE_AFTER_BIND_POOL_BIT_EXT</code> bit
set with a <code>descriptorType</code> of
<code>VK_DESCRIPTOR_TYPE_INPUT_ATTACHMENT</code> accessible across all shader
stages and across all elements of <code>pSetLayouts</code> <strong class="purple">must</strong> be less than
or equal to
<code>VkPhysicalDeviceLimits</code>::<code>maxDescriptorSetInputAttachments</code></p>
</li>
<li>
<p><a id="VUID-VkPipelineLayoutCreateInfo-descriptorType-02216"></a>
The total number of bindings in descriptor set layouts created without
the <code>VK_DESCRIPTOR_SET_LAYOUT_CREATE_UPDATE_AFTER_BIND_POOL_BIT_EXT</code>
bit set with a <code>descriptorType</code> of
<code>VK_DESCRIPTOR_TYPE_INLINE_UNIFORM_BLOCK_EXT</code> accessible across all
shader stages and across all elements of <code>pSetLayouts</code> <strong class="purple">must</strong> be less
than or equal to
<code>VkPhysicalDeviceInlineUniformBlockPropertiesEXT</code>::<code>maxDescriptorSetInlineUniformBlocks</code></p>
</li>
<li>
<p><a id="VUID-VkPipelineLayoutCreateInfo-pSetLayouts-03036"></a>
The total number of descriptors of the type
<code>VK_DESCRIPTOR_TYPE_SAMPLER</code> and
<code>VK_DESCRIPTOR_TYPE_COMBINED_IMAGE_SAMPLER</code> accessible across all
shader stages and across all elements of <code>pSetLayouts</code> <strong class="purple">must</strong> be less
than or equal to
<code>VkPhysicalDeviceDescriptorIndexingPropertiesEXT</code>::<code>maxDescriptorSetUpdateAfterBindSamplers</code></p>
</li>
<li>
<p><a id="VUID-VkPipelineLayoutCreateInfo-pSetLayouts-03037"></a>
The total number of descriptors of the type
<code>VK_DESCRIPTOR_TYPE_UNIFORM_BUFFER</code> accessible across all shader
stages and across all elements of <code>pSetLayouts</code> <strong class="purple">must</strong> be less than
or equal to
<code>VkPhysicalDeviceDescriptorIndexingPropertiesEXT</code>::<code>maxDescriptorSetUpdateAfterBindUniformBuffers</code></p>
</li>
<li>
<p><a id="VUID-VkPipelineLayoutCreateInfo-pSetLayouts-03038"></a>
The total number of descriptors of the type
<code>VK_DESCRIPTOR_TYPE_UNIFORM_BUFFER_DYNAMIC</code> accessible across all
shader stages and across all elements of <code>pSetLayouts</code> <strong class="purple">must</strong> be less
than or equal to
<code>VkPhysicalDeviceDescriptorIndexingPropertiesEXT</code>::<code>maxDescriptorSetUpdateAfterBindUniformBuffersDynamic</code></p>
</li>
<li>
<p><a id="VUID-VkPipelineLayoutCreateInfo-pSetLayouts-03039"></a>
The total number of descriptors of the type
<code>VK_DESCRIPTOR_TYPE_STORAGE_BUFFER</code> accessible across all shader
stages and across all elements of <code>pSetLayouts</code> <strong class="purple">must</strong> be less than
or equal to
<code>VkPhysicalDeviceDescriptorIndexingPropertiesEXT</code>::<code>maxDescriptorSetUpdateAfterBindStorageBuffers</code></p>
</li>
<li>
<p><a id="VUID-VkPipelineLayoutCreateInfo-pSetLayouts-03040"></a>
The total number of descriptors of the type
<code>VK_DESCRIPTOR_TYPE_STORAGE_BUFFER_DYNAMIC</code> accessible across all
shader stages and across all elements of <code>pSetLayouts</code> <strong class="purple">must</strong> be less
than or equal to
<code>VkPhysicalDeviceDescriptorIndexingPropertiesEXT</code>::<code>maxDescriptorSetUpdateAfterBindStorageBuffersDynamic</code></p>
</li>
<li>
<p><a id="VUID-VkPipelineLayoutCreateInfo-pSetLayouts-03041"></a>
The total number of descriptors of the type
<code>VK_DESCRIPTOR_TYPE_COMBINED_IMAGE_SAMPLER</code>,
<code>VK_DESCRIPTOR_TYPE_SAMPLED_IMAGE</code>, and
<code>VK_DESCRIPTOR_TYPE_UNIFORM_TEXEL_BUFFER</code> accessible across all
shader stages and across all elements of <code>pSetLayouts</code> <strong class="purple">must</strong> be less
than or equal to
<code>VkPhysicalDeviceDescriptorIndexingPropertiesEXT</code>::<code>maxDescriptorSetUpdateAfterBindSampledImages</code></p>
</li>
<li>
<p><a id="VUID-VkPipelineLayoutCreateInfo-pSetLayouts-03042"></a>
The total number of descriptors of the type
<code>VK_DESCRIPTOR_TYPE_STORAGE_IMAGE</code>, and
<code>VK_DESCRIPTOR_TYPE_STORAGE_TEXEL_BUFFER</code> accessible across all
shader stages and across all elements of <code>pSetLayouts</code> <strong class="purple">must</strong> be less
than or equal to
<code>VkPhysicalDeviceDescriptorIndexingPropertiesEXT</code>::<code>maxDescriptorSetUpdateAfterBindStorageImages</code></p>
</li>
<li>
<p><a id="VUID-VkPipelineLayoutCreateInfo-pSetLayouts-03043"></a>
The total number of descriptors of the type
<code>VK_DESCRIPTOR_TYPE_INPUT_ATTACHMENT</code> accessible across all shader
stages and across all elements of <code>pSetLayouts</code> <strong class="purple">must</strong> be less than
or equal to
<code>VkPhysicalDeviceDescriptorIndexingPropertiesEXT</code>::<code>maxDescriptorSetUpdateAfterBindInputAttachments</code></p>
</li>
<li>
<p><a id="VUID-VkPipelineLayoutCreateInfo-descriptorType-02217"></a>
The total number of bindings with a <code>descriptorType</code> of
<code>VK_DESCRIPTOR_TYPE_INLINE_UNIFORM_BLOCK_EXT</code> accessible across all
shader stages and across all elements of <code>pSetLayouts</code> <strong class="purple">must</strong> be less
than or equal to
<code>VkPhysicalDeviceInlineUniformBlockPropertiesEXT</code>::<code>maxDescriptorSetUpdateAfterBindInlineUniformBlocks</code></p>
</li>
<li>
<p><a id="VUID-VkPipelineLayoutCreateInfo-pPushConstantRanges-00292"></a>
Any two elements of <code>pPushConstantRanges</code> <strong class="purple">must</strong> not include the same
stage in <code>stageFlags</code></p>
</li>
<li>
<p><a id="VUID-VkPipelineLayoutCreateInfo-pSetLayouts-00293"></a>
<code>pSetLayouts</code> <strong class="purple">must</strong> not contain more than one descriptor set layout
that was created with
<code>VK_DESCRIPTOR_SET_LAYOUT_CREATE_PUSH_DESCRIPTOR_BIT_KHR</code> set</p>
</li>
<li>
<p><a id="VUID-VkPipelineLayoutCreateInfo-descriptorType-02381"></a>
The total number of bindings with a <code>descriptorType</code> of
<code>VK_DESCRIPTOR_TYPE_ACCELERATION_STRUCTURE_NV</code> accessible across all
shader stages and across all elements of <code>pSetLayouts</code> <strong class="purple">must</strong> be less
than or equal to
<code>VkPhysicalDeviceRayTracingPropertiesNV</code>::<code>maxDescriptorSetAccelerationStructures</code></p>
</li>
</ul>
</div>
</div>
</div>
<div class="sidebarblock">
<div class="content">
<div class="title">Valid Usage (Implicit)</div>
<div class="ulist">
<ul>
<li>
<p><a id="VUID-VkPipelineLayoutCreateInfo-sType-sType"></a> <code>sType</code> <strong class="purple">must</strong> be <code>VK_STRUCTURE_TYPE_PIPELINE_LAYOUT_CREATE_INFO</code></p>
</li>
<li>
<p><a id="VUID-VkPipelineLayoutCreateInfo-pNext-pNext"></a> <code>pNext</code> <strong class="purple">must</strong> be <code>NULL</code></p>
</li>
<li>
<p><a id="VUID-VkPipelineLayoutCreateInfo-flags-zerobitmask"></a> <code>flags</code> <strong class="purple">must</strong> be <code>0</code></p>
</li>
<li>
<p><a id="VUID-VkPipelineLayoutCreateInfo-pSetLayouts-parameter"></a> If <code>setLayoutCount</code> is not <code>0</code>, <code>pSetLayouts</code> <strong class="purple">must</strong> be a valid pointer to an array of <code>setLayoutCount</code> valid <code>VkDescriptorSetLayout</code> handles</p>
</li>
<li>
<p><a id="VUID-VkPipelineLayoutCreateInfo-pPushConstantRanges-parameter"></a> If <code>pushConstantRangeCount</code> is not <code>0</code>, <code>pPushConstantRanges</code> <strong class="purple">must</strong> be a valid pointer to an array of <code>pushConstantRangeCount</code> valid <code>VkPushConstantRange</code> structures</p>
</li>
</ul>
</div>
</div>
</div>
</div>
<div class="sect3">
<h4 id="_see_also_682">See Also</h4>
<div class="paragraph">
<p><a href="#VkDescriptorSetLayout">VkDescriptorSetLayout</a>, <a href="#VkPipelineLayoutCreateFlags">VkPipelineLayoutCreateFlags</a>, <a href="#VkPushConstantRange">VkPushConstantRange</a>, <a href="#VkStructureType">VkStructureType</a>, <a href="#vkCreatePipelineLayout">vkCreatePipelineLayout</a></p>
</div>
</div>
<div class="sect3">
<h4 id="_document_notes_682">Document Notes</h4>
<div class="paragraph">
<p>For more information, see the Vulkan Specification at URL</p>
</div>
<div class="paragraph">
<p><a href="https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VkPipelineLayoutCreateInfo" class="bare">https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VkPipelineLayoutCreateInfo</a></p>
</div>
<div class="paragraph">
<p>This page is extracted from the Vulkan Specification.
Fixes and changes should be made to the Specification, not directly.</p>
</div>
<div style="page-break-after: always;"></div>
</div>
</div>
<div class="sect2">
<h3 id="_vkpipelinemultisamplestatecreateinfo3">VkPipelineMultisampleStateCreateInfo(3)</h3>
<div class="sect3">
<h4 id="_name_683">Name</h4>
<div class="paragraph">
<p>VkPipelineMultisampleStateCreateInfo - Structure specifying parameters of a newly created pipeline multisample state</p>
</div>
</div>
<div class="sect3">
<h4 id="_c_specification_683">C Specification</h4>
<div class="paragraph">
<p>The <code>VkPipelineMultisampleStateCreateInfo</code> structure is defined as:</p>
</div>
<div id="VkPipelineMultisampleStateCreateInfo" class="listingblock">
<div class="content">
<pre class="highlight"><code class="language-c++" data-lang="c++">typedef struct VkPipelineMultisampleStateCreateInfo {
    VkStructureType                          sType;
    const void*                              pNext;
    VkPipelineMultisampleStateCreateFlags    flags;
    VkSampleCountFlagBits                    rasterizationSamples;
    VkBool32                                 sampleShadingEnable;
    float                                    minSampleShading;
    const VkSampleMask*                      pSampleMask;
    VkBool32                                 alphaToCoverageEnable;
    VkBool32                                 alphaToOneEnable;
} VkPipelineMultisampleStateCreateInfo;</code></pre>
</div>
</div>
</div>
<div class="sect3">
<h4 id="_members_320">Members</h4>
<div class="ulist">
<ul>
<li>
<p><code>sType</code> is the type of this structure.</p>
</li>
<li>
<p><code>pNext</code> is <code>NULL</code> or a pointer to an extension-specific structure.</p>
</li>
<li>
<p><code>flags</code> is reserved for future use.</p>
</li>
<li>
<p><code>rasterizationSamples</code> is a <a href="#VkSampleCountFlagBits">VkSampleCountFlagBits</a> specifying
the number of samples used in rasterization.</p>
</li>
<li>
<p><code>sampleShadingEnable</code> <strong class="purple">can</strong> be used to enable
<a href="vkspec.html#primsrast-sampleshading">Sample Shading</a>.</p>
</li>
<li>
<p><code>minSampleShading</code> specifies a minimum fraction of sample shading if
<code>sampleShadingEnable</code> is set to <code>VK_TRUE</code>.</p>
</li>
<li>
<p><code>pSampleMask</code> is a bitmask of static coverage information that is
ANDed with the coverage information generated during rasterization, as
described in <a href="vkspec.html#fragops-samplemask">Sample Mask</a>.</p>
</li>
<li>
<p><code>alphaToCoverageEnable</code> controls whether a temporary coverage value
is generated based on the alpha component of the fragment&#8217;s first color
output as specified in the <a href="vkspec.html#fragops-covg">Multisample Coverage</a>
section.</p>
</li>
<li>
<p><code>alphaToOneEnable</code> controls whether the alpha component of the
fragment&#8217;s first color output is replaced with one as described in
<a href="vkspec.html#fragops-covg">Multisample Coverage</a>.</p>
</li>
</ul>
</div>
</div>
<div class="sect3">
<h4 id="_description_683">Description</h4>
<div class="sidebarblock">
<div class="content">
<div class="title">Valid Usage</div>
<div class="ulist">
<ul>
<li>
<p><a id="VUID-VkPipelineMultisampleStateCreateInfo-sampleShadingEnable-00784"></a>
If the <a href="vkspec.html#features-sampleRateShading">sample rate shading</a> feature is not
enabled, <code>sampleShadingEnable</code> <strong class="purple">must</strong> be <code>VK_FALSE</code></p>
</li>
<li>
<p><a id="VUID-VkPipelineMultisampleStateCreateInfo-alphaToOneEnable-00785"></a>
If the <a href="vkspec.html#features-alphaToOne">alpha to one</a> feature is not enabled,
<code>alphaToOneEnable</code> <strong class="purple">must</strong> be <code>VK_FALSE</code></p>
</li>
<li>
<p><a id="VUID-VkPipelineMultisampleStateCreateInfo-minSampleShading-00786"></a>
<code>minSampleShading</code> <strong class="purple">must</strong> be in the range <span class="eq">[0,1]</span></p>
</li>
<li>
<p><a id="VUID-VkPipelineMultisampleStateCreateInfo-rasterizationSamples-01415"></a>
If the <code>VK_NV_framebuffer_mixed_samples</code> extension is enabled, and if
the subpass has any color attachments and <code>rasterizationSamples</code> is
greater than the number of color samples, then <code>sampleShadingEnable</code>
<strong class="purple">must</strong> be <code>VK_FALSE</code></p>
</li>
</ul>
</div>
</div>
</div>
<div class="sidebarblock">
<div class="content">
<div class="title">Valid Usage (Implicit)</div>
<div class="ulist">
<ul>
<li>
<p><a id="VUID-VkPipelineMultisampleStateCreateInfo-sType-sType"></a> <code>sType</code> <strong class="purple">must</strong> be <code>VK_STRUCTURE_TYPE_PIPELINE_MULTISAMPLE_STATE_CREATE_INFO</code></p>
</li>
<li>
<p><a id="VUID-VkPipelineMultisampleStateCreateInfo-pNext-pNext"></a> Each <code>pNext</code> member of any structure (including this one) in the <code>pNext</code> chain <strong class="purple">must</strong> be either <code>NULL</code> or a pointer to a valid instance of <a href="#VkPipelineCoverageModulationStateCreateInfoNV">VkPipelineCoverageModulationStateCreateInfoNV</a>, <a href="#VkPipelineCoverageToColorStateCreateInfoNV">VkPipelineCoverageToColorStateCreateInfoNV</a>, or <a href="#VkPipelineSampleLocationsStateCreateInfoEXT">VkPipelineSampleLocationsStateCreateInfoEXT</a></p>
</li>
<li>
<p><a id="VUID-VkPipelineMultisampleStateCreateInfo-sType-unique"></a> Each <code>sType</code> member in the <code>pNext</code> chain <strong class="purple">must</strong> be unique</p>
</li>
<li>
<p><a id="VUID-VkPipelineMultisampleStateCreateInfo-flags-zerobitmask"></a> <code>flags</code> <strong class="purple">must</strong> be <code>0</code></p>
</li>
<li>
<p><a id="VUID-VkPipelineMultisampleStateCreateInfo-rasterizationSamples-parameter"></a> <code>rasterizationSamples</code> <strong class="purple">must</strong> be a valid <a href="#VkSampleCountFlagBits">VkSampleCountFlagBits</a> value</p>
</li>
<li>
<p><a id="VUID-VkPipelineMultisampleStateCreateInfo-pSampleMask-parameter"></a> If <code>pSampleMask</code> is not <code>NULL</code>, <code>pSampleMask</code> <strong class="purple">must</strong> be a valid pointer to an array of \(\lceil{\mathit{rasterizationSamples} \over 32}\rceil\) <code>VkSampleMask</code> values</p>
</li>
</ul>
</div>
</div>
</div>
</div>
<div class="sect3">
<h4 id="_see_also_683">See Also</h4>
<div class="paragraph">
<p><code>VkBool32</code>, <a href="#VkGraphicsPipelineCreateInfo">VkGraphicsPipelineCreateInfo</a>, <a href="#VkPipelineMultisampleStateCreateFlags">VkPipelineMultisampleStateCreateFlags</a>, <a href="#VkSampleCountFlagBits">VkSampleCountFlagBits</a>, <code>VkSampleMask</code>, <a href="#VkStructureType">VkStructureType</a></p>
</div>
</div>
<div class="sect3">
<h4 id="_document_notes_683">Document Notes</h4>
<div class="paragraph">
<p>For more information, see the Vulkan Specification at URL</p>
</div>
<div class="paragraph">
<p><a href="https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VkPipelineMultisampleStateCreateInfo" class="bare">https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VkPipelineMultisampleStateCreateInfo</a></p>
</div>
<div class="paragraph">
<p>This page is extracted from the Vulkan Specification.
Fixes and changes should be made to the Specification, not directly.</p>
</div>
<div style="page-break-after: always;"></div>
</div>
</div>
<div class="sect2">
<h3 id="_vkpipelinerasterizationconservativestatecreateinfoext3">VkPipelineRasterizationConservativeStateCreateInfoEXT(3)</h3>
<div class="sect3">
<h4 id="_name_684">Name</h4>
<div class="paragraph">
<p>VkPipelineRasterizationConservativeStateCreateInfoEXT - Structure specifying conservative raster state</p>
</div>
</div>
<div class="sect3">
<h4 id="_c_specification_684">C Specification</h4>
<div class="paragraph">
<p>Polygon rasterization <strong class="purple">can</strong> be made conservative by setting
<code>conservativeRasterizationMode</code> to
<code>VK_CONSERVATIVE_RASTERIZATION_MODE_OVERESTIMATE_EXT</code> or
<code>VK_CONSERVATIVE_RASTERIZATION_MODE_UNDERESTIMATE_EXT</code> in
<code>VkPipelineRasterizationConservativeStateCreateInfoEXT</code>.
The <code>VkPipelineRasterizationConservativeStateCreateInfoEXT</code> state is set
by adding an instance of this structure to the <code>pNext</code> chain of an
instance of the <code>VkPipelineRasterizationStateCreateInfo</code> structure when
creating the graphics pipeline.
Enabling these modes also affects line and point rasterization if the
implementation sets
<code>VkPhysicalDeviceConservativeRasterizationPropertiesEXT</code>::<code>conservativePointAndLineRasterization</code>
to <code>VK_TRUE</code>.</p>
</div>
<div class="paragraph">
<p><code>VkPipelineRasterizationConservativeStateCreateInfoEXT</code> is defined as:</p>
</div>
<div id="VkPipelineRasterizationConservativeStateCreateInfoEXT" class="listingblock">
<div class="content">
<pre class="highlight"><code class="language-c++" data-lang="c++">typedef struct VkPipelineRasterizationConservativeStateCreateInfoEXT {
    VkStructureType                                           sType;
    const void*                                               pNext;
    VkPipelineRasterizationConservativeStateCreateFlagsEXT    flags;
    VkConservativeRasterizationModeEXT                        conservativeRasterizationMode;
    float                                                     extraPrimitiveOverestimationSize;
} VkPipelineRasterizationConservativeStateCreateInfoEXT;</code></pre>
</div>
</div>
</div>
<div class="sect3">
<h4 id="_members_321">Members</h4>
<div class="ulist">
<ul>
<li>
<p><code>sType</code> is the type of this structure.</p>
</li>
<li>
<p><code>pNext</code> is <code>NULL</code> or a pointer to an extension-specific structure.</p>
</li>
<li>
<p><code>flags</code> is reserved for future use.</p>
</li>
<li>
<p><code>conservativeRasterizationMode</code> is the conservative rasterization
mode to use.</p>
</li>
<li>
<p><code>extraPrimitiveOverestimationSize</code> is the extra size in pixels to
increase the generating primitive during conservative rasterization at
each of its edges in <code>X</code> and <code>Y</code> equally in screen space beyond the base
overestimation specified in
<code>VkPhysicalDeviceConservativeRasterizationPropertiesEXT</code>::<code>primitiveOverestimationSize</code>.</p>
</li>
</ul>
</div>
</div>
<div class="sect3">
<h4 id="_description_684">Description</h4>
<div class="sidebarblock">
<div class="content">
<div class="title">Valid Usage</div>
<div class="ulist">
<ul>
<li>
<p><a id="VUID-VkPipelineRasterizationConservativeStateCreateInfoEXT-extraPrimitiveOverestimationSize-01769"></a>
<code>extraPrimitiveOverestimationSize</code> <strong class="purple">must</strong> be in the range of <code>0.0</code> to
<code>VkPhysicalDeviceConservativeRasterizationPropertiesEXT</code>::<code>maxExtraPrimitiveOverestimationSize</code>
inclusive</p>
</li>
</ul>
</div>
</div>
</div>
<div class="sidebarblock">
<div class="content">
<div class="title">Valid Usage (Implicit)</div>
<div class="ulist">
<ul>
<li>
<p><a id="VUID-VkPipelineRasterizationConservativeStateCreateInfoEXT-sType-sType"></a> <code>sType</code> <strong class="purple">must</strong> be <code>VK_STRUCTURE_TYPE_PIPELINE_RASTERIZATION_CONSERVATIVE_STATE_CREATE_INFO_EXT</code></p>
</li>
<li>
<p><a id="VUID-VkPipelineRasterizationConservativeStateCreateInfoEXT-flags-zerobitmask"></a> <code>flags</code> <strong class="purple">must</strong> be <code>0</code></p>
</li>
<li>
<p><a id="VUID-VkPipelineRasterizationConservativeStateCreateInfoEXT-conservativeRasterizationMode-parameter"></a> <code>conservativeRasterizationMode</code> <strong class="purple">must</strong> be a valid <a href="#VkConservativeRasterizationModeEXT">VkConservativeRasterizationModeEXT</a> value</p>
</li>
</ul>
</div>
</div>
</div>
</div>
<div class="sect3">
<h4 id="_see_also_684">See Also</h4>
<div class="paragraph">
<p><a href="#VkConservativeRasterizationModeEXT">VkConservativeRasterizationModeEXT</a>, <a href="#VkPipelineRasterizationConservativeStateCreateFlagsEXT">VkPipelineRasterizationConservativeStateCreateFlagsEXT</a>, <a href="#VkStructureType">VkStructureType</a></p>
</div>
</div>
<div class="sect3">
<h4 id="_document_notes_684">Document Notes</h4>
<div class="paragraph">
<p>For more information, see the Vulkan Specification at URL</p>
</div>
<div class="paragraph">
<p><a href="https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VkPipelineRasterizationConservativeStateCreateInfoEXT" class="bare">https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VkPipelineRasterizationConservativeStateCreateInfoEXT</a></p>
</div>
<div class="paragraph">
<p>This page is extracted from the Vulkan Specification.
Fixes and changes should be made to the Specification, not directly.</p>
</div>
<div style="page-break-after: always;"></div>
</div>
</div>
<div class="sect2">
<h3 id="_vkpipelinerasterizationdepthclipstatecreateinfoext3">VkPipelineRasterizationDepthClipStateCreateInfoEXT(3)</h3>
<div class="sect3">
<h4 id="_name_685">Name</h4>
<div class="paragraph">
<p>VkPipelineRasterizationDepthClipStateCreateInfoEXT - Structure specifying depth clipping state</p>
</div>
</div>
<div class="sect3">
<h4 id="_c_specification_685">C Specification</h4>
<div class="paragraph">
<p>If the pNext chain of <a href="#VkPipelineRasterizationStateCreateInfo">VkPipelineRasterizationStateCreateInfo</a> includes
a <code>VkPipelineRasterizationDepthClipStateCreateInfoEXT</code> structure, then
that structure controls whether depth clipping is enabled or disabled.</p>
</div>
<div class="paragraph">
<p>The <code>VkPipelineRasterizationDepthClipStateCreateInfoEXT</code> structure is
defined as:</p>
</div>
<div id="VkPipelineRasterizationDepthClipStateCreateInfoEXT" class="listingblock">
<div class="content">
<pre class="highlight"><code class="language-c++" data-lang="c++">typedef struct VkPipelineRasterizationDepthClipStateCreateInfoEXT {
    VkStructureType                                        sType;
    const void*                                            pNext;
    VkPipelineRasterizationDepthClipStateCreateFlagsEXT    flags;
    VkBool32                                               depthClipEnable;
} VkPipelineRasterizationDepthClipStateCreateInfoEXT;</code></pre>
</div>
</div>
</div>
<div class="sect3">
<h4 id="_members_322">Members</h4>
<div class="ulist">
<ul>
<li>
<p><code>sType</code> is the type of this structure.</p>
</li>
<li>
<p><code>pNext</code> is <code>NULL</code> or a pointer to an extension-specific structure.</p>
</li>
<li>
<p><code>flags</code> is reserved for future use.</p>
</li>
<li>
<p><code>depthClipEnable</code> controls whether depth clipping is enabled as
described in <a href="vkspec.html#vertexpostproc-clipping">Primitive Clipping</a>.</p>
</li>
</ul>
</div>
</div>
<div class="sect3">
<h4 id="_description_685">Description</h4>
<div class="sidebarblock">
<div class="content">
<div class="title">Valid Usage (Implicit)</div>
<div class="ulist">
<ul>
<li>
<p><a id="VUID-VkPipelineRasterizationDepthClipStateCreateInfoEXT-sType-sType"></a> <code>sType</code> <strong class="purple">must</strong> be <code>VK_STRUCTURE_TYPE_PIPELINE_RASTERIZATION_DEPTH_CLIP_STATE_CREATE_INFO_EXT</code></p>
</li>
<li>
<p><a id="VUID-VkPipelineRasterizationDepthClipStateCreateInfoEXT-flags-zerobitmask"></a> <code>flags</code> <strong class="purple">must</strong> be <code>0</code></p>
</li>
</ul>
</div>
</div>
</div>
</div>
<div class="sect3">
<h4 id="_see_also_685">See Also</h4>
<div class="paragraph">
<p><code>VkBool32</code>, <a href="#VkPipelineRasterizationDepthClipStateCreateFlagsEXT">VkPipelineRasterizationDepthClipStateCreateFlagsEXT</a>, <a href="#VkStructureType">VkStructureType</a></p>
</div>
</div>
<div class="sect3">
<h4 id="_document_notes_685">Document Notes</h4>
<div class="paragraph">
<p>For more information, see the Vulkan Specification at URL</p>
</div>
<div class="paragraph">
<p><a href="https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VkPipelineRasterizationDepthClipStateCreateInfoEXT" class="bare">https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VkPipelineRasterizationDepthClipStateCreateInfoEXT</a></p>
</div>
<div class="paragraph">
<p>This page is extracted from the Vulkan Specification.
Fixes and changes should be made to the Specification, not directly.</p>
</div>
<div style="page-break-after: always;"></div>
</div>
</div>
<div class="sect2">
<h3 id="_vkpipelinerasterizationstatecreateinfo3">VkPipelineRasterizationStateCreateInfo(3)</h3>
<div class="sect3">
<h4 id="_name_686">Name</h4>
<div class="paragraph">
<p>VkPipelineRasterizationStateCreateInfo - Structure specifying parameters of a newly created pipeline rasterization state</p>
</div>
</div>
<div class="sect3">
<h4 id="_c_specification_686">C Specification</h4>
<div class="paragraph">
<p>The <code>VkPipelineRasterizationStateCreateInfo</code> structure is defined as:</p>
</div>
<div id="VkPipelineRasterizationStateCreateInfo" class="listingblock">
<div class="content">
<pre class="highlight"><code class="language-c++" data-lang="c++">typedef struct VkPipelineRasterizationStateCreateInfo {
    VkStructureType                            sType;
    const void*                                pNext;
    VkPipelineRasterizationStateCreateFlags    flags;
    VkBool32                                   depthClampEnable;
    VkBool32                                   rasterizerDiscardEnable;
    VkPolygonMode                              polygonMode;
    VkCullModeFlags                            cullMode;
    VkFrontFace                                frontFace;
    VkBool32                                   depthBiasEnable;
    float                                      depthBiasConstantFactor;
    float                                      depthBiasClamp;
    float                                      depthBiasSlopeFactor;
    float                                      lineWidth;
} VkPipelineRasterizationStateCreateInfo;</code></pre>
</div>
</div>
</div>
<div class="sect3">
<h4 id="_members_323">Members</h4>
<div class="ulist">
<ul>
<li>
<p><code>sType</code> is the type of this structure.</p>
</li>
<li>
<p><code>pNext</code> is <code>NULL</code> or a pointer to an extension-specific structure.</p>
</li>
<li>
<p><code>flags</code> is reserved for future use.</p>
</li>
<li>
<p><code>depthClampEnable</code> controls whether to clamp the fragment&#8217;s depth
values as described in <a href="vkspec.html#fragops-depth">Depth Test</a>.
If the pipeline is not created with
<a href="#VkPipelineRasterizationDepthClipStateCreateInfoEXT">VkPipelineRasterizationDepthClipStateCreateInfoEXT</a> present then
enabling depth clamp will also disable clipping primitives to the z
planes of the frustrum as described in <a href="vkspec.html#vertexpostproc-clipping">Primitive Clipping</a>.
Otherwise depth clipping is controlled by the state set in
<code>VkPipelineRasterizationDepthClipStateCreateInfoEXT</code>.</p>
</li>
<li>
<p><code>rasterizerDiscardEnable</code> controls whether primitives are discarded
immediately before the rasterization stage.</p>
</li>
<li>
<p><code>polygonMode</code> is the triangle rendering mode.
See <a href="#VkPolygonMode">VkPolygonMode</a>.</p>
</li>
<li>
<p><code>cullMode</code> is the triangle facing direction used for primitive
culling.
See <a href="#VkCullModeFlagBits">VkCullModeFlagBits</a>.</p>
</li>
<li>
<p><code>frontFace</code> is a <a href="#VkFrontFace">VkFrontFace</a> value specifying the front-facing
triangle orientation to be used for culling.</p>
</li>
<li>
<p><code>depthBiasEnable</code> controls whether to bias fragment depth values.</p>
</li>
<li>
<p><code>depthBiasConstantFactor</code> is a scalar factor controlling the
constant depth value added to each fragment.</p>
</li>
<li>
<p><code>depthBiasClamp</code> is the maximum (or minimum) depth bias of a
fragment.</p>
</li>
<li>
<p><code>depthBiasSlopeFactor</code> is a scalar factor applied to a fragment&#8217;s
slope in depth bias calculations.</p>
</li>
<li>
<p><code>lineWidth</code> is the width of rasterized line segments.</p>
</li>
</ul>
</div>
</div>
<div class="sect3">
<h4 id="_description_686">Description</h4>
<div class="paragraph">
<p>The application <strong class="purple">can</strong> also add a
<code>VkPipelineRasterizationStateRasterizationOrderAMD</code> structure to the
<code>pNext</code> chain of a <code>VkPipelineRasterizationStateCreateInfo</code>
structure.
This structure enables selecting the rasterization order to use when
rendering with the corresponding graphics pipeline as described in
<a href="vkspec.html#primrast-order">Rasterization Order</a>.</p>
</div>
<div class="sidebarblock">
<div class="content">
<div class="title">Valid Usage</div>
<div class="ulist">
<ul>
<li>
<p><a id="VUID-VkPipelineRasterizationStateCreateInfo-depthClampEnable-00782"></a>
If the <a href="vkspec.html#features-depthClamp">depth clamping</a> feature is not enabled,
<code>depthClampEnable</code> <strong class="purple">must</strong> be <code>VK_FALSE</code></p>
</li>
<li>
<p><a id="VUID-VkPipelineRasterizationStateCreateInfo-polygonMode-01507"></a>
If the <a href="vkspec.html#features-fillModeNonSolid">non-solid fill modes</a> feature is not
enabled, <code>polygonMode</code> <strong class="purple">must</strong> be <code>VK_POLYGON_MODE_FILL</code> or
<code>VK_POLYGON_MODE_FILL_RECTANGLE_NV</code></p>
</li>
<li>
<p><a id="VUID-VkPipelineRasterizationStateCreateInfo-polygonMode-01414"></a>
If the <code><a href="vkspec.html#VK_NV_fill_rectangle" class="bare">html/vkspec.html#VK_NV_fill_rectangle</a></code> extension is not enabled,
<code>polygonMode</code> <strong class="purple">must</strong> not be <code>VK_POLYGON_MODE_FILL_RECTANGLE_NV</code></p>
</li>
</ul>
</div>
</div>
</div>
<div class="sidebarblock">
<div class="content">
<div class="title">Valid Usage (Implicit)</div>
<div class="ulist">
<ul>
<li>
<p><a id="VUID-VkPipelineRasterizationStateCreateInfo-sType-sType"></a> <code>sType</code> <strong class="purple">must</strong> be <code>VK_STRUCTURE_TYPE_PIPELINE_RASTERIZATION_STATE_CREATE_INFO</code></p>
</li>
<li>
<p><a id="VUID-VkPipelineRasterizationStateCreateInfo-pNext-pNext"></a> Each <code>pNext</code> member of any structure (including this one) in the <code>pNext</code> chain <strong class="purple">must</strong> be either <code>NULL</code> or a pointer to a valid instance of <a href="#VkPipelineRasterizationConservativeStateCreateInfoEXT">VkPipelineRasterizationConservativeStateCreateInfoEXT</a>, <a href="#VkPipelineRasterizationDepthClipStateCreateInfoEXT">VkPipelineRasterizationDepthClipStateCreateInfoEXT</a>, <a href="#VkPipelineRasterizationStateRasterizationOrderAMD">VkPipelineRasterizationStateRasterizationOrderAMD</a>, or <a href="#VkPipelineRasterizationStateStreamCreateInfoEXT">VkPipelineRasterizationStateStreamCreateInfoEXT</a></p>
</li>
<li>
<p><a id="VUID-VkPipelineRasterizationStateCreateInfo-sType-unique"></a> Each <code>sType</code> member in the <code>pNext</code> chain <strong class="purple">must</strong> be unique</p>
</li>
<li>
<p><a id="VUID-VkPipelineRasterizationStateCreateInfo-flags-zerobitmask"></a> <code>flags</code> <strong class="purple">must</strong> be <code>0</code></p>
</li>
<li>
<p><a id="VUID-VkPipelineRasterizationStateCreateInfo-polygonMode-parameter"></a> <code>polygonMode</code> <strong class="purple">must</strong> be a valid <a href="#VkPolygonMode">VkPolygonMode</a> value</p>
</li>
<li>
<p><a id="VUID-VkPipelineRasterizationStateCreateInfo-cullMode-parameter"></a> <code>cullMode</code> <strong class="purple">must</strong> be a valid combination of <a href="#VkCullModeFlagBits">VkCullModeFlagBits</a> values</p>
</li>
<li>
<p><a id="VUID-VkPipelineRasterizationStateCreateInfo-frontFace-parameter"></a> <code>frontFace</code> <strong class="purple">must</strong> be a valid <a href="#VkFrontFace">VkFrontFace</a> value</p>
</li>
</ul>
</div>
</div>
</div>
</div>
<div class="sect3">
<h4 id="_see_also_686">See Also</h4>
<div class="paragraph">
<p><code>VkBool32</code>, <a href="#VkCullModeFlags">VkCullModeFlags</a>, <a href="#VkFrontFace">VkFrontFace</a>, <a href="#VkGraphicsPipelineCreateInfo">VkGraphicsPipelineCreateInfo</a>, <a href="#VkPipelineRasterizationStateCreateFlags">VkPipelineRasterizationStateCreateFlags</a>, <a href="#VkPolygonMode">VkPolygonMode</a>, <a href="#VkStructureType">VkStructureType</a></p>
</div>
</div>
<div class="sect3">
<h4 id="_document_notes_686">Document Notes</h4>
<div class="paragraph">
<p>For more information, see the Vulkan Specification at URL</p>
</div>
<div class="paragraph">
<p><a href="https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VkPipelineRasterizationStateCreateInfo" class="bare">https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VkPipelineRasterizationStateCreateInfo</a></p>
</div>
<div class="paragraph">
<p>This page is extracted from the Vulkan Specification.
Fixes and changes should be made to the Specification, not directly.</p>
</div>
<div style="page-break-after: always;"></div>
</div>
</div>
<div class="sect2">
<h3 id="_vkpipelinerasterizationstaterasterizationorderamd3">VkPipelineRasterizationStateRasterizationOrderAMD(3)</h3>
<div class="sect3">
<h4 id="_name_687">Name</h4>
<div class="paragraph">
<p>VkPipelineRasterizationStateRasterizationOrderAMD - Structure defining rasterization order for a graphics pipeline</p>
</div>
</div>
<div class="sect3">
<h4 id="_c_specification_687">C Specification</h4>
<div class="paragraph">
<p>The rasterization order to use for a graphics pipeline is specified by
adding a <code>VkPipelineRasterizationStateRasterizationOrderAMD</code> structure
to the <code>pNext</code> chain of a <a href="#VkPipelineRasterizationStateCreateInfo">VkPipelineRasterizationStateCreateInfo</a>
structure.</p>
</div>
<div class="paragraph">
<p>The <code>VkPipelineRasterizationStateRasterizationOrderAMD</code> structure is
defined as:</p>
</div>
<div id="VkPipelineRasterizationStateRasterizationOrderAMD" class="listingblock">
<div class="content">
<pre class="highlight"><code class="language-c++" data-lang="c++">typedef struct VkPipelineRasterizationStateRasterizationOrderAMD {
    VkStructureType            sType;
    const void*                pNext;
    VkRasterizationOrderAMD    rasterizationOrder;
} VkPipelineRasterizationStateRasterizationOrderAMD;</code></pre>
</div>
</div>
</div>
<div class="sect3">
<h4 id="_members_324">Members</h4>
<div class="ulist">
<ul>
<li>
<p><code>sType</code> is the type of this structure.</p>
</li>
<li>
<p><code>pNext</code> is <code>NULL</code> or a pointer to an extension-specific structure.</p>
</li>
<li>
<p><code>rasterizationOrder</code> is a <a href="#VkRasterizationOrderAMD">VkRasterizationOrderAMD</a> value
specifying the primitive rasterization order to use.</p>
</li>
</ul>
</div>
</div>
<div class="sect3">
<h4 id="_description_687">Description</h4>
<div class="sidebarblock">
<div class="content">
<div class="title">Valid Usage (Implicit)</div>
<div class="ulist">
<ul>
<li>
<p><a id="VUID-VkPipelineRasterizationStateRasterizationOrderAMD-sType-sType"></a> <code>sType</code> <strong class="purple">must</strong> be <code>VK_STRUCTURE_TYPE_PIPELINE_RASTERIZATION_STATE_RASTERIZATION_ORDER_AMD</code></p>
</li>
<li>
<p><a id="VUID-VkPipelineRasterizationStateRasterizationOrderAMD-rasterizationOrder-parameter"></a> <code>rasterizationOrder</code> <strong class="purple">must</strong> be a valid <a href="#VkRasterizationOrderAMD">VkRasterizationOrderAMD</a> value</p>
</li>
</ul>
</div>
</div>
</div>
<div class="paragraph">
<p>If the <code><a href="vkspec.html#VK_AMD_rasterization_order" class="bare">html/vkspec.html#VK_AMD_rasterization_order</a></code> device extension is not enabled or
the application does not request a particular rasterization order through
specifying a <code>VkPipelineRasterizationStateRasterizationOrderAMD</code>
structure then the rasterization order used by the graphics pipeline
defaults to <code>VK_RASTERIZATION_ORDER_STRICT_AMD</code>.</p>
</div>
</div>
<div class="sect3">
<h4 id="_see_also_687">See Also</h4>
<div class="paragraph">
<p><a href="#VkRasterizationOrderAMD">VkRasterizationOrderAMD</a>, <a href="#VkStructureType">VkStructureType</a></p>
</div>
</div>
<div class="sect3">
<h4 id="_document_notes_687">Document Notes</h4>
<div class="paragraph">
<p>For more information, see the Vulkan Specification at URL</p>
</div>
<div class="paragraph">
<p><a href="https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VkPipelineRasterizationStateRasterizationOrderAMD" class="bare">https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VkPipelineRasterizationStateRasterizationOrderAMD</a></p>
</div>
<div class="paragraph">
<p>This page is extracted from the Vulkan Specification.
Fixes and changes should be made to the Specification, not directly.</p>
</div>
<div style="page-break-after: always;"></div>
</div>
</div>
<div class="sect2">
<h3 id="_vkpipelinerasterizationstatestreamcreateinfoext3">VkPipelineRasterizationStateStreamCreateInfoEXT(3)</h3>
<div class="sect3">
<h4 id="_name_688">Name</h4>
<div class="paragraph">
<p>VkPipelineRasterizationStateStreamCreateInfoEXT - Structure defining the geometry stream used for rasterization</p>
</div>
</div>
<div class="sect3">
<h4 id="_c_specification_688">C Specification</h4>
<div class="paragraph">
<p>The vertex stream used for rasterization is specified by adding a
<code>VkPipelineRasterizationStateStreamCreateInfoEXT</code> structure to the
<code>pNext</code> chain of a <a href="#VkPipelineRasterizationStateCreateInfo">VkPipelineRasterizationStateCreateInfo</a>
structure.</p>
</div>
<div class="paragraph">
<p>The <code>VkPipelineRasterizationStateStreamCreateInfoEXT</code> structure is
defined as:</p>
</div>
<div id="VkPipelineRasterizationStateStreamCreateInfoEXT" class="listingblock">
<div class="content">
<pre class="highlight"><code class="language-c++" data-lang="c++">typedef struct VkPipelineRasterizationStateStreamCreateInfoEXT {
    VkStructureType                                     sType;
    const void*                                         pNext;
    VkPipelineRasterizationStateStreamCreateFlagsEXT    flags;
    uint32_t                                            rasterizationStream;
} VkPipelineRasterizationStateStreamCreateInfoEXT;</code></pre>
</div>
</div>
</div>
<div class="sect3">
<h4 id="_members_325">Members</h4>
<div class="ulist">
<ul>
<li>
<p><code>sType</code> is the type of this structure.</p>
</li>
<li>
<p><code>pNext</code> is <code>NULL</code> or a pointer to an extension-specific structure.</p>
</li>
<li>
<p><code>flags</code> is reserved for future use.</p>
</li>
<li>
<p><code>rasterizationStream</code> is the vertex stream selected for
rasterization.</p>
</li>
</ul>
</div>
</div>
<div class="sect3">
<h4 id="_description_688">Description</h4>
<div class="paragraph">
<p>If this structure is not present, <code>rasterizationStream</code> is assumed to be
zero.</p>
</div>
<div class="sidebarblock">
<div class="content">
<div class="title">Valid Usage</div>
<div class="ulist">
<ul>
<li>
<p><a id="VUID-VkPipelineRasterizationStateStreamCreateInfoEXT-geometryStreams-02324"></a>
<code>VkPhysicalDeviceTransformFeedbackFeaturesEXT</code>::<code>geometryStreams</code>
<strong class="purple">must</strong> be enabled</p>
</li>
<li>
<p><a id="VUID-VkPipelineRasterizationStateStreamCreateInfoEXT-rasterizationStream-02325"></a>
<code>rasterizationStream</code> <strong class="purple">must</strong> be less than
<a href="#VkPhysicalDeviceTransformFeedbackPropertiesEXT">VkPhysicalDeviceTransformFeedbackPropertiesEXT</a>::<code>maxTransformFeedbackStreams</code></p>
</li>
<li>
<p><a id="VUID-VkPipelineRasterizationStateStreamCreateInfoEXT-rasterizationStream-02326"></a>
<code>rasterizationStream</code> <strong class="purple">must</strong> be zero if
<code>VkPhysicalDeviceTransformFeedbackPropertiesEXT</code>::<code>transformFeedbackRasterizationStreamSelect</code>
is <code>VK_FALSE</code></p>
</li>
</ul>
</div>
</div>
</div>
<div class="sidebarblock">
<div class="content">
<div class="title">Valid Usage (Implicit)</div>
<div class="ulist">
<ul>
<li>
<p><a id="VUID-VkPipelineRasterizationStateStreamCreateInfoEXT-sType-sType"></a> <code>sType</code> <strong class="purple">must</strong> be <code>VK_STRUCTURE_TYPE_PIPELINE_RASTERIZATION_STATE_STREAM_CREATE_INFO_EXT</code></p>
</li>
<li>
<p><a id="VUID-VkPipelineRasterizationStateStreamCreateInfoEXT-flags-zerobitmask"></a> <code>flags</code> <strong class="purple">must</strong> be <code>0</code></p>
</li>
</ul>
</div>
</div>
</div>
</div>
<div class="sect3">
<h4 id="_see_also_688">See Also</h4>
<div class="paragraph">
<p><a href="#VkPipelineRasterizationStateStreamCreateFlagsEXT">VkPipelineRasterizationStateStreamCreateFlagsEXT</a>, <a href="#VkStructureType">VkStructureType</a></p>
</div>
</div>
<div class="sect3">
<h4 id="_document_notes_688">Document Notes</h4>
<div class="paragraph">
<p>For more information, see the Vulkan Specification at URL</p>
</div>
<div class="paragraph">
<p><a href="https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VkPipelineRasterizationStateStreamCreateInfoEXT" class="bare">https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VkPipelineRasterizationStateStreamCreateInfoEXT</a></p>
</div>
<div class="paragraph">
<p>This page is extracted from the Vulkan Specification.
Fixes and changes should be made to the Specification, not directly.</p>
</div>
<div style="page-break-after: always;"></div>
</div>
</div>
<div class="sect2">
<h3 id="_vkpipelinerepresentativefragmentteststatecreateinfonv3">VkPipelineRepresentativeFragmentTestStateCreateInfoNV(3)</h3>
<div class="sect3">
<h4 id="_name_689">Name</h4>
<div class="paragraph">
<p>VkPipelineRepresentativeFragmentTestStateCreateInfoNV - Structure specifying representative fragment test</p>
</div>
</div>
<div class="sect3">
<h4 id="_c_specification_689">C Specification</h4>
<div class="paragraph">
<p>If the <code>pNext</code> chain of <a href="#VkGraphicsPipelineCreateInfo">VkGraphicsPipelineCreateInfo</a> includes a
<code>VkPipelineRepresentativeFragmentTestStateCreateInfoNV</code> structure, then
that structure includes parameters that control the representative fragment
test.</p>
</div>
<div class="paragraph">
<p>The <code>VkPipelineRepresentativeFragmentTestStateCreateInfoNV</code> structure is
defined as:</p>
</div>
<div id="VkPipelineRepresentativeFragmentTestStateCreateInfoNV" class="listingblock">
<div class="content">
<pre class="highlight"><code class="language-c++" data-lang="c++">typedef struct VkPipelineRepresentativeFragmentTestStateCreateInfoNV {
    VkStructureType    sType;
    const void*        pNext;
    VkBool32           representativeFragmentTestEnable;
} VkPipelineRepresentativeFragmentTestStateCreateInfoNV;</code></pre>
</div>
</div>
</div>
<div class="sect3">
<h4 id="_members_326">Members</h4>
<div class="ulist">
<ul>
<li>
<p><code>sType</code> is the type of this structure.</p>
</li>
<li>
<p><code>pNext</code> is <code>NULL</code> or a pointer to an extension-specific structure.</p>
</li>
<li>
<p><code>representativeFragmentTestEnable</code> controls whether the
representative fragment test is enabled.</p>
</li>
</ul>
</div>
</div>
<div class="sect3">
<h4 id="_description_689">Description</h4>
<div class="paragraph">
<p>If this structure is not present, <code>representativeFragmentTestEnable</code> is
considered to be <code>VK_FALSE</code>, and the representative fragment test is
disabled.</p>
</div>
<div class="paragraph">
<p>If <a href="vkspec.html#fragops-early-mode">early fragment tests</a> are not enabled in the
active fragment shader, the representative fragment shader test has no
effect, even if enabled.</p>
</div>
<div class="sidebarblock">
<div class="content">
<div class="title">Valid Usage (Implicit)</div>
<div class="ulist">
<ul>
<li>
<p><a id="VUID-VkPipelineRepresentativeFragmentTestStateCreateInfoNV-sType-sType"></a> <code>sType</code> <strong class="purple">must</strong> be <code>VK_STRUCTURE_TYPE_PIPELINE_REPRESENTATIVE_FRAGMENT_TEST_STATE_CREATE_INFO_NV</code></p>
</li>
</ul>
</div>
</div>
</div>
</div>
<div class="sect3">
<h4 id="_see_also_689">See Also</h4>
<div class="paragraph">
<p><code>VkBool32</code>, <a href="#VkStructureType">VkStructureType</a></p>
</div>
</div>
<div class="sect3">
<h4 id="_document_notes_689">Document Notes</h4>
<div class="paragraph">
<p>For more information, see the Vulkan Specification at URL</p>
</div>
<div class="paragraph">
<p><a href="https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VkPipelineRepresentativeFragmentTestStateCreateInfoNV" class="bare">https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VkPipelineRepresentativeFragmentTestStateCreateInfoNV</a></p>
</div>
<div class="paragraph">
<p>This page is extracted from the Vulkan Specification.
Fixes and changes should be made to the Specification, not directly.</p>
</div>
<div style="page-break-after: always;"></div>
</div>
</div>
<div class="sect2">
<h3 id="_vkpipelinesamplelocationsstatecreateinfoext3">VkPipelineSampleLocationsStateCreateInfoEXT(3)</h3>
<div class="sect3">
<h4 id="_name_690">Name</h4>
<div class="paragraph">
<p>VkPipelineSampleLocationsStateCreateInfoEXT - Structure specifying sample locations for a pipeline</p>
</div>
</div>
<div class="sect3">
<h4 id="_c_specification_690">C Specification</h4>
<div class="paragraph">
<p>Applications <strong class="purple">can</strong> also control the sample locations used for rasterization.</p>
</div>
<div class="paragraph">
<p>If the <code>pNext</code> chain of the <a href="#VkPipelineMultisampleStateCreateInfo">VkPipelineMultisampleStateCreateInfo</a>
structure specified at pipeline creation time includes an instance of the
<code>VkPipelineSampleLocationsStateCreateInfoEXT</code> structure, then that
structure controls the sample locations used when rasterizing primitives
with the pipeline.</p>
</div>
<div class="paragraph">
<p>The <code>VkPipelineSampleLocationsStateCreateInfoEXT</code> structure is defined
as:</p>
</div>
<div id="VkPipelineSampleLocationsStateCreateInfoEXT" class="listingblock">
<div class="content">
<pre class="highlight"><code class="language-c++" data-lang="c++">typedef struct VkPipelineSampleLocationsStateCreateInfoEXT {
    VkStructureType             sType;
    const void*                 pNext;
    VkBool32                    sampleLocationsEnable;
    VkSampleLocationsInfoEXT    sampleLocationsInfo;
} VkPipelineSampleLocationsStateCreateInfoEXT;</code></pre>
</div>
</div>
</div>
<div class="sect3">
<h4 id="_members_327">Members</h4>
<div class="ulist">
<ul>
<li>
<p><code>sType</code> is the type of this structure.</p>
</li>
<li>
<p><code>pNext</code> is <code>NULL</code> or a pointer to an extension-specific structure.</p>
</li>
<li>
<p><code>sampleLocationsEnable</code> controls whether custom sample locations are
used.
If <code>sampleLocationsEnable</code> is <code>VK_FALSE</code>, the default sample
locations are used and the values specified in <code>sampleLocationsInfo</code>
are ignored.</p>
</li>
<li>
<p><code>sampleLocationsInfo</code> is the sample locations to use during
rasterization if <code>sampleLocationsEnable</code> is <code>VK_TRUE</code> and the
graphics pipeline is not created with
<code>VK_DYNAMIC_STATE_SAMPLE_LOCATIONS_EXT</code>.</p>
</li>
</ul>
</div>
</div>
<div class="sect3">
<h4 id="_description_690">Description</h4>
<div class="sidebarblock">
<div class="content">
<div class="title">Valid Usage (Implicit)</div>
<div class="ulist">
<ul>
<li>
<p><a id="VUID-VkPipelineSampleLocationsStateCreateInfoEXT-sType-sType"></a> <code>sType</code> <strong class="purple">must</strong> be <code>VK_STRUCTURE_TYPE_PIPELINE_SAMPLE_LOCATIONS_STATE_CREATE_INFO_EXT</code></p>
</li>
<li>
<p><a id="VUID-VkPipelineSampleLocationsStateCreateInfoEXT-sampleLocationsInfo-parameter"></a> <code>sampleLocationsInfo</code> <strong class="purple">must</strong> be a valid <code>VkSampleLocationsInfoEXT</code> structure</p>
</li>
</ul>
</div>
</div>
</div>
</div>
<div class="sect3">
<h4 id="_see_also_690">See Also</h4>
<div class="paragraph">
<p><code>VkBool32</code>, <a href="#VkSampleLocationsInfoEXT">VkSampleLocationsInfoEXT</a>, <a href="#VkStructureType">VkStructureType</a></p>
</div>
</div>
<div class="sect3">
<h4 id="_document_notes_690">Document Notes</h4>
<div class="paragraph">
<p>For more information, see the Vulkan Specification at URL</p>
</div>
<div class="paragraph">
<p><a href="https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VkPipelineSampleLocationsStateCreateInfoEXT" class="bare">https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VkPipelineSampleLocationsStateCreateInfoEXT</a></p>
</div>
<div class="paragraph">
<p>This page is extracted from the Vulkan Specification.
Fixes and changes should be made to the Specification, not directly.</p>
</div>
<div style="page-break-after: always;"></div>
</div>
</div>
<div class="sect2">
<h3 id="_vkpipelineshaderstagecreateinfo3">VkPipelineShaderStageCreateInfo(3)</h3>
<div class="sect3">
<h4 id="_name_691">Name</h4>
<div class="paragraph">
<p>VkPipelineShaderStageCreateInfo - Structure specifying parameters of a newly created pipeline shader stage</p>
</div>
</div>
<div class="sect3">
<h4 id="_c_specification_691">C Specification</h4>
<div class="paragraph">
<p>The <code>VkPipelineShaderStageCreateInfo</code> structure is defined as:</p>
</div>
<div id="VkPipelineShaderStageCreateInfo" class="listingblock">
<div class="content">
<pre class="highlight"><code class="language-c++" data-lang="c++">typedef struct VkPipelineShaderStageCreateInfo {
    VkStructureType                     sType;
    const void*                         pNext;
    VkPipelineShaderStageCreateFlags    flags;
    VkShaderStageFlagBits               stage;
    VkShaderModule                      module;
    const char*                         pName;
    const VkSpecializationInfo*         pSpecializationInfo;
} VkPipelineShaderStageCreateInfo;</code></pre>
</div>
</div>
</div>
<div class="sect3">
<h4 id="_members_328">Members</h4>
<div class="ulist">
<ul>
<li>
<p><code>sType</code> is the type of this structure.</p>
</li>
<li>
<p><code>pNext</code> is <code>NULL</code> or a pointer to an extension-specific structure.</p>
</li>
<li>
<p><code>flags</code> is reserved for future use.</p>
</li>
<li>
<p><code>stage</code> is a <a href="#VkShaderStageFlagBits">VkShaderStageFlagBits</a> value specifying a single
pipeline stage.</p>
</li>
<li>
<p><code>module</code> is a <a href="#VkShaderModule">VkShaderModule</a> object that contains the shader
for this stage.</p>
</li>
<li>
<p><code>pName</code> is a pointer to a null-terminated UTF-8 string specifying
the entry point name of the shader for this stage.</p>
</li>
<li>
<p><code>pSpecializationInfo</code> is a pointer to <a href="#VkSpecializationInfo">VkSpecializationInfo</a>, as
described in <a href="vkspec.html#pipelines-specialization-constants">Specialization
Constants</a>, and <strong class="purple">can</strong> be <code>NULL</code>.</p>
</li>
</ul>
</div>
</div>
<div class="sect3">
<h4 id="_description_691">Description</h4>
<div class="sidebarblock">
<div class="content">
<div class="title">Valid Usage</div>
<div class="ulist">
<ul>
<li>
<p><a id="VUID-VkPipelineShaderStageCreateInfo-stage-00704"></a>
If the <a href="vkspec.html#features-geometryShader">geometry shaders</a> feature is not
enabled, <code>stage</code> <strong class="purple">must</strong> not be <code>VK_SHADER_STAGE_GEOMETRY_BIT</code></p>
</li>
<li>
<p><a id="VUID-VkPipelineShaderStageCreateInfo-stage-00705"></a>
If the <a href="vkspec.html#features-tessellationShader">tessellation shaders</a> feature is
not enabled, <code>stage</code> <strong class="purple">must</strong> not be
<code>VK_SHADER_STAGE_TESSELLATION_CONTROL_BIT</code> or
<code>VK_SHADER_STAGE_TESSELLATION_EVALUATION_BIT</code></p>
</li>
<li>
<p><a id="VUID-VkPipelineShaderStageCreateInfo-stage-02091"></a>
If the <a href="vkspec.html#features-meshShader">mesh shader</a> feature is not enabled,
<code>stage</code> <strong class="purple">must</strong> not be <code>VK_SHADER_STAGE_MESH_BIT_NV</code></p>
</li>
<li>
<p><a id="VUID-VkPipelineShaderStageCreateInfo-stage-02092"></a>
If the <a href="vkspec.html#features-taskShader">task shader</a> feature is not enabled,
<code>stage</code> <strong class="purple">must</strong> not be <code>VK_SHADER_STAGE_TASK_BIT_NV</code></p>
</li>
<li>
<p><a id="VUID-VkPipelineShaderStageCreateInfo-stage-00706"></a>
<code>stage</code> <strong class="purple">must</strong> not be <code>VK_SHADER_STAGE_ALL_GRAPHICS</code>, or
<code>VK_SHADER_STAGE_ALL</code></p>
</li>
<li>
<p><a id="VUID-VkPipelineShaderStageCreateInfo-pName-00707"></a>
<code>pName</code> <strong class="purple">must</strong> be the name of an <code>OpEntryPoint</code> in <code>module</code>
with an execution model that matches <code>stage</code></p>
</li>
<li>
<p><a id="VUID-VkPipelineShaderStageCreateInfo-maxClipDistances-00708"></a>
If the identified entry point includes any variable in its interface
that is declared with the <code>ClipDistance</code> <code>BuiltIn</code> decoration,
that variable <strong class="purple">must</strong> not have an array size greater than
<code>VkPhysicalDeviceLimits</code>::<code>maxClipDistances</code></p>
</li>
<li>
<p><a id="VUID-VkPipelineShaderStageCreateInfo-maxCullDistances-00709"></a>
If the identified entry point includes any variable in its interface
that is declared with the <code>CullDistance</code> <code>BuiltIn</code> decoration,
that variable <strong class="purple">must</strong> not have an array size greater than
<code>VkPhysicalDeviceLimits</code>::<code>maxCullDistances</code></p>
</li>
<li>
<p><a id="VUID-VkPipelineShaderStageCreateInfo-maxCombinedClipAndCullDistances-00710"></a>
If the identified entry point includes any variables in its interface
that are declared with the <code>ClipDistance</code> or <code>CullDistance</code>
<code>BuiltIn</code> decoration, those variables <strong class="purple">must</strong> not have array sizes
which sum to more than
<code>VkPhysicalDeviceLimits</code>::<code>maxCombinedClipAndCullDistances</code></p>
</li>
<li>
<p><a id="VUID-VkPipelineShaderStageCreateInfo-maxSampleMaskWords-00711"></a>
If the identified entry point includes any variable in its interface
that is declared with the <code>SampleMask</code> <code>BuiltIn</code> decoration, that
variable <strong class="purple">must</strong> not have an array size greater than
<code>VkPhysicalDeviceLimits</code>::<code>maxSampleMaskWords</code></p>
</li>
<li>
<p><a id="VUID-VkPipelineShaderStageCreateInfo-stage-00712"></a>
If <code>stage</code> is <code>VK_SHADER_STAGE_VERTEX_BIT</code>, the identified entry
point <strong class="purple">must</strong> not include any input variable in its interface that is
decorated with <code>CullDistance</code></p>
</li>
<li>
<p><a id="VUID-VkPipelineShaderStageCreateInfo-stage-00713"></a>
If <code>stage</code> is <code>VK_SHADER_STAGE_TESSELLATION_CONTROL_BIT</code> or
<code>VK_SHADER_STAGE_TESSELLATION_EVALUATION_BIT</code>, and the identified
entry point has an <code>OpExecutionMode</code> instruction that specifies a
patch size with <code>OutputVertices</code>, the patch size <strong class="purple">must</strong> be greater
than <code>0</code> and less than or equal to
<code>VkPhysicalDeviceLimits</code>::<code>maxTessellationPatchSize</code></p>
</li>
<li>
<p><a id="VUID-VkPipelineShaderStageCreateInfo-stage-00714"></a>
If <code>stage</code> is <code>VK_SHADER_STAGE_GEOMETRY_BIT</code>, the identified
entry point <strong class="purple">must</strong> have an <code>OpExecutionMode</code> instruction that
specifies a maximum output vertex count that is greater than <code>0</code> and
less than or equal to
<code>VkPhysicalDeviceLimits</code>::<code>maxGeometryOutputVertices</code></p>
</li>
<li>
<p><a id="VUID-VkPipelineShaderStageCreateInfo-stage-00715"></a>
If <code>stage</code> is <code>VK_SHADER_STAGE_GEOMETRY_BIT</code>, the identified
entry point <strong class="purple">must</strong> have an <code>OpExecutionMode</code> instruction that
specifies an invocation count that is greater than <code>0</code> and less than or
equal to
<code>VkPhysicalDeviceLimits</code>::<code>maxGeometryShaderInvocations</code></p>
</li>
<li>
<p><a id="VUID-VkPipelineShaderStageCreateInfo-stage-02596"></a>
If <code>stage</code> is a vertex processing stage, and the identified entry
point writes to <code>Layer</code> for any primitive, it <strong class="purple">must</strong> write the same
value to <code>Layer</code> for all vertices of a given primitive</p>
</li>
<li>
<p><a id="VUID-VkPipelineShaderStageCreateInfo-stage-02597"></a>
If <code>stage</code> is a vertex processing stage, and the identified entry
point writes to <code>ViewportIndex</code> for any primitive, it <strong class="purple">must</strong> write the
same value to <code>ViewportIndex</code> for all vertices of a given primitive</p>
</li>
<li>
<p><a id="VUID-VkPipelineShaderStageCreateInfo-stage-00718"></a>
If <code>stage</code> is <code>VK_SHADER_STAGE_FRAGMENT_BIT</code>, the identified
entry point <strong class="purple">must</strong> not include any output variables in its interface
decorated with <code>CullDistance</code></p>
</li>
<li>
<p><a id="VUID-VkPipelineShaderStageCreateInfo-stage-00719"></a>
If <code>stage</code> is <code>VK_SHADER_STAGE_FRAGMENT_BIT</code>, and the identified
entry point writes to <code>FragDepth</code> in any execution path, it <strong class="purple">must</strong>
write to <code>FragDepth</code> in all execution paths</p>
</li>
<li>
<p><a id="VUID-VkPipelineShaderStageCreateInfo-stage-01511"></a>
If <code>stage</code> is <code>VK_SHADER_STAGE_FRAGMENT_BIT</code>, and the identified
entry point writes to <code>FragStencilRefEXT</code> in any execution path, it
<strong class="purple">must</strong> write to <code>FragStencilRefEXT</code> in all execution paths</p>
</li>
<li>
<p><a id="VUID-VkPipelineShaderStageCreateInfo-stage-02093"></a>
If <code>stage</code> is <code>VK_SHADER_STAGE_MESH_BIT_NV</code>, the identified
entry point <strong class="purple">must</strong> have an <code>OpExecutionMode</code> instruction that
specifies a maximum output vertex count, <code>OutputVertices</code>, that is
greater than <code>0</code> and less than or equal to
<code>VkPhysicalDeviceMeshShaderPropertiesNV</code>::<code>maxMeshOutputVertices</code>.</p>
</li>
<li>
<p><a id="VUID-VkPipelineShaderStageCreateInfo-stage-02094"></a>
If <code>stage</code> is <code>VK_SHADER_STAGE_MESH_BIT_NV</code>, the identified
entry point <strong class="purple">must</strong> have an <code>OpExecutionMode</code> instruction that
specifies a maximum output primitive count, <code>OutputPrimitivesNV</code>,
that is greater than <code>0</code> and less than or equal to
<code>VkPhysicalDeviceMeshShaderPropertiesNV</code>::<code>maxMeshOutputPrimitives</code>.</p>
</li>
</ul>
</div>
</div>
</div>
<div class="sidebarblock">
<div class="content">
<div class="title">Valid Usage (Implicit)</div>
<div class="ulist">
<ul>
<li>
<p><a id="VUID-VkPipelineShaderStageCreateInfo-sType-sType"></a> <code>sType</code> <strong class="purple">must</strong> be <code>VK_STRUCTURE_TYPE_PIPELINE_SHADER_STAGE_CREATE_INFO</code></p>
</li>
<li>
<p><a id="VUID-VkPipelineShaderStageCreateInfo-pNext-pNext"></a> <code>pNext</code> <strong class="purple">must</strong> be <code>NULL</code></p>
</li>
<li>
<p><a id="VUID-VkPipelineShaderStageCreateInfo-flags-zerobitmask"></a> <code>flags</code> <strong class="purple">must</strong> be <code>0</code></p>
</li>
<li>
<p><a id="VUID-VkPipelineShaderStageCreateInfo-stage-parameter"></a> <code>stage</code> <strong class="purple">must</strong> be a valid <a href="#VkShaderStageFlagBits">VkShaderStageFlagBits</a> value</p>
</li>
<li>
<p><a id="VUID-VkPipelineShaderStageCreateInfo-module-parameter"></a> <code>module</code> <strong class="purple">must</strong> be a valid <code>VkShaderModule</code> handle</p>
</li>
<li>
<p><a id="VUID-VkPipelineShaderStageCreateInfo-pName-parameter"></a> <code>pName</code> <strong class="purple">must</strong> be a null-terminated UTF-8 string</p>
</li>
<li>
<p><a id="VUID-VkPipelineShaderStageCreateInfo-pSpecializationInfo-parameter"></a> If <code>pSpecializationInfo</code> is not <code>NULL</code>, <code>pSpecializationInfo</code> <strong class="purple">must</strong> be a valid pointer to a valid <code>VkSpecializationInfo</code> structure</p>
</li>
</ul>
</div>
</div>
</div>
</div>
<div class="sect3">
<h4 id="_see_also_691">See Also</h4>
<div class="paragraph">
<p><a href="#VkComputePipelineCreateInfo">VkComputePipelineCreateInfo</a>, <a href="#VkGraphicsPipelineCreateInfo">VkGraphicsPipelineCreateInfo</a>, <a href="#VkPipelineShaderStageCreateFlags">VkPipelineShaderStageCreateFlags</a>, <a href="#VkRayTracingPipelineCreateInfoNV">VkRayTracingPipelineCreateInfoNV</a>, <a href="#VkShaderModule">VkShaderModule</a>, <a href="#VkShaderStageFlagBits">VkShaderStageFlagBits</a>, <a href="#VkSpecializationInfo">VkSpecializationInfo</a>, <a href="#VkStructureType">VkStructureType</a></p>
</div>
</div>
<div class="sect3">
<h4 id="_document_notes_691">Document Notes</h4>
<div class="paragraph">
<p>For more information, see the Vulkan Specification at URL</p>
</div>
<div class="paragraph">
<p><a href="https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VkPipelineShaderStageCreateInfo" class="bare">https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VkPipelineShaderStageCreateInfo</a></p>
</div>
<div class="paragraph">
<p>This page is extracted from the Vulkan Specification.
Fixes and changes should be made to the Specification, not directly.</p>
</div>
<div style="page-break-after: always;"></div>
</div>
</div>
<div class="sect2">
<h3 id="_vkpipelinetessellationdomainoriginstatecreateinfo3">VkPipelineTessellationDomainOriginStateCreateInfo(3)</h3>
<div class="sect3">
<h4 id="_name_692">Name</h4>
<div class="paragraph">
<p>VkPipelineTessellationDomainOriginStateCreateInfo - Structure specifying the orientation of the tessellation domain</p>
</div>
</div>
<div class="sect3">
<h4 id="_c_specification_692">C Specification</h4>
<div class="paragraph">
<p>The <code>VkPipelineTessellationDomainOriginStateCreateInfo</code> structure is
defined as:</p>
</div>
<div id="VkPipelineTessellationDomainOriginStateCreateInfo" class="listingblock">
<div class="content">
<pre class="highlight"><code class="language-c++" data-lang="c++">typedef struct VkPipelineTessellationDomainOriginStateCreateInfo {
    VkStructureType               sType;
    const void*                   pNext;
    VkTessellationDomainOrigin    domainOrigin;
} VkPipelineTessellationDomainOriginStateCreateInfo;</code></pre>
</div>
</div>
<div class="paragraph">
<p>or the equivalent</p>
</div>
<div id="VkPipelineTessellationDomainOriginStateCreateInfoKHR" class="listingblock">
<div class="content">
<pre class="highlight"><code class="language-c++" data-lang="c++">typedef VkPipelineTessellationDomainOriginStateCreateInfo VkPipelineTessellationDomainOriginStateCreateInfoKHR;</code></pre>
</div>
</div>
</div>
<div class="sect3">
<h4 id="_members_329">Members</h4>
<div class="ulist">
<ul>
<li>
<p><code>sType</code> is the type of this structure.</p>
</li>
<li>
<p><code>pNext</code> is <code>NULL</code> or a pointer to an extension-specific structure.</p>
</li>
<li>
<p><code>domainOrigin</code> controls the origin of the tessellation domain space,
and is of type <a href="#VkTessellationDomainOrigin">VkTessellationDomainOrigin</a>.</p>
</li>
</ul>
</div>
</div>
<div class="sect3">
<h4 id="_description_692">Description</h4>
<div class="paragraph">
<p>If the <code>VkPipelineTessellationDomainOriginStateCreateInfo</code> structure is
included in the <code>pNext</code> chain of
<a href="#VkPipelineTessellationStateCreateInfo">VkPipelineTessellationStateCreateInfo</a>, it controls the origin of the
tessellation domain.
If this structure is not present, it is as if <code>domainOrigin</code> were
<code>VK_TESSELLATION_DOMAIN_ORIGIN_UPPER_LEFT</code>.</p>
</div>
<div class="sidebarblock">
<div class="content">
<div class="title">Valid Usage (Implicit)</div>
<div class="ulist">
<ul>
<li>
<p><a id="VUID-VkPipelineTessellationDomainOriginStateCreateInfo-sType-sType"></a> <code>sType</code> <strong class="purple">must</strong> be <code>VK_STRUCTURE_TYPE_PIPELINE_TESSELLATION_DOMAIN_ORIGIN_STATE_CREATE_INFO</code></p>
</li>
<li>
<p><a id="VUID-VkPipelineTessellationDomainOriginStateCreateInfo-domainOrigin-parameter"></a> <code>domainOrigin</code> <strong class="purple">must</strong> be a valid <a href="#VkTessellationDomainOrigin">VkTessellationDomainOrigin</a> value</p>
</li>
</ul>
</div>
</div>
</div>
</div>
<div class="sect3">
<h4 id="_see_also_692">See Also</h4>
<div class="paragraph">
<p><a href="#VkStructureType">VkStructureType</a>, <a href="#VkTessellationDomainOrigin">VkTessellationDomainOrigin</a></p>
</div>
</div>
<div class="sect3">
<h4 id="_document_notes_692">Document Notes</h4>
<div class="paragraph">
<p>For more information, see the Vulkan Specification at URL</p>
</div>
<div class="paragraph">
<p><a href="https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VkPipelineTessellationDomainOriginStateCreateInfo" class="bare">https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VkPipelineTessellationDomainOriginStateCreateInfo</a></p>
</div>
<div class="paragraph">
<p>This page is extracted from the Vulkan Specification.
Fixes and changes should be made to the Specification, not directly.</p>
</div>
<div style="page-break-after: always;"></div>
</div>
</div>
<div class="sect2">
<h3 id="_vkpipelinetessellationstatecreateinfo3">VkPipelineTessellationStateCreateInfo(3)</h3>
<div class="sect3">
<h4 id="_name_693">Name</h4>
<div class="paragraph">
<p>VkPipelineTessellationStateCreateInfo - Structure specifying parameters of a newly created pipeline tessellation state</p>
</div>
</div>
<div class="sect3">
<h4 id="_c_specification_693">C Specification</h4>
<div class="paragraph">
<p>The <code>VkPipelineTessellationStateCreateInfo</code> structure is defined as:</p>
</div>
<div id="VkPipelineTessellationStateCreateInfo" class="listingblock">
<div class="content">
<pre class="highlight"><code class="language-c++" data-lang="c++">typedef struct VkPipelineTessellationStateCreateInfo {
    VkStructureType                           sType;
    const void*                               pNext;
    VkPipelineTessellationStateCreateFlags    flags;
    uint32_t                                  patchControlPoints;
} VkPipelineTessellationStateCreateInfo;</code></pre>
</div>
</div>
</div>
<div class="sect3">
<h4 id="_members_330">Members</h4>
<div class="ulist">
<ul>
<li>
<p><code>sType</code> is the type of this structure.</p>
</li>
<li>
<p><code>pNext</code> is <code>NULL</code> or a pointer to an extension-specific structure.</p>
</li>
<li>
<p><code>flags</code> is reserved for future use.</p>
</li>
<li>
<p><code>patchControlPoints</code> number of control points per patch.</p>
</li>
</ul>
</div>
</div>
<div class="sect3">
<h4 id="_description_693">Description</h4>
<div class="sidebarblock">
<div class="content">
<div class="title">Valid Usage</div>
<div class="ulist">
<ul>
<li>
<p><a id="VUID-VkPipelineTessellationStateCreateInfo-patchControlPoints-01214"></a>
<code>patchControlPoints</code> <strong class="purple">must</strong> be greater than zero and less than or
equal to <code>VkPhysicalDeviceLimits</code>::<code>maxTessellationPatchSize</code></p>
</li>
</ul>
</div>
</div>
</div>
<div class="sidebarblock">
<div class="content">
<div class="title">Valid Usage (Implicit)</div>
<div class="ulist">
<ul>
<li>
<p><a id="VUID-VkPipelineTessellationStateCreateInfo-sType-sType"></a> <code>sType</code> <strong class="purple">must</strong> be <code>VK_STRUCTURE_TYPE_PIPELINE_TESSELLATION_STATE_CREATE_INFO</code></p>
</li>
<li>
<p><a id="VUID-VkPipelineTessellationStateCreateInfo-pNext-pNext"></a> <code>pNext</code> <strong class="purple">must</strong> be <code>NULL</code> or a pointer to a valid instance of <a href="#VkPipelineTessellationDomainOriginStateCreateInfo">VkPipelineTessellationDomainOriginStateCreateInfo</a></p>
</li>
<li>
<p><a id="VUID-VkPipelineTessellationStateCreateInfo-flags-zerobitmask"></a> <code>flags</code> <strong class="purple">must</strong> be <code>0</code></p>
</li>
</ul>
</div>
</div>
</div>
</div>
<div class="sect3">
<h4 id="_see_also_693">See Also</h4>
<div class="paragraph">
<p><a href="#VkGraphicsPipelineCreateInfo">VkGraphicsPipelineCreateInfo</a>, <a href="#VkPipelineTessellationStateCreateFlags">VkPipelineTessellationStateCreateFlags</a>, <a href="#VkStructureType">VkStructureType</a></p>
</div>
</div>
<div class="sect3">
<h4 id="_document_notes_693">Document Notes</h4>
<div class="paragraph">
<p>For more information, see the Vulkan Specification at URL</p>
</div>
<div class="paragraph">
<p><a href="https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VkPipelineTessellationStateCreateInfo" class="bare">https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VkPipelineTessellationStateCreateInfo</a></p>
</div>
<div class="paragraph">
<p>This page is extracted from the Vulkan Specification.
Fixes and changes should be made to the Specification, not directly.</p>
</div>
<div style="page-break-after: always;"></div>
</div>
</div>
<div class="sect2">
<h3 id="_vkpipelinevertexinputdivisorstatecreateinfoext3">VkPipelineVertexInputDivisorStateCreateInfoEXT(3)</h3>
<div class="sect3">
<h4 id="_name_694">Name</h4>
<div class="paragraph">
<p>VkPipelineVertexInputDivisorStateCreateInfoEXT - Structure specifying vertex attributes assignment during instanced rendering</p>
</div>
</div>
<div class="sect3">
<h4 id="_c_specification_694">C Specification</h4>
<div class="paragraph">
<p>If
<a href="vkspec.html#features-vertexAttributeInstanceRateDivisor"><code>vertexAttributeInstanceRateDivisor</code></a>
feature is enabled and the <code>pNext</code> chain of
<a href="#VkPipelineVertexInputStateCreateInfo">VkPipelineVertexInputStateCreateInfo</a> includes a
<code>VkPipelineVertexInputDivisorStateCreateInfoEXT</code> structure, then that
structure controls how vertex attributes are assigned to an instance when
instanced rendering is enabled.</p>
</div>
<div class="paragraph">
<p>The <code>VkPipelineVertexInputDivisorStateCreateInfoEXT</code> structure is
defined as:</p>
</div>
<div id="VkPipelineVertexInputDivisorStateCreateInfoEXT" class="listingblock">
<div class="content">
<pre class="highlight"><code class="language-c++" data-lang="c++">typedef struct VkPipelineVertexInputDivisorStateCreateInfoEXT {
    VkStructureType                                     sType;
    const void*                                         pNext;
    uint32_t                                            vertexBindingDivisorCount;
    const VkVertexInputBindingDivisorDescriptionEXT*    pVertexBindingDivisors;
} VkPipelineVertexInputDivisorStateCreateInfoEXT;</code></pre>
</div>
</div>
</div>
<div class="sect3">
<h4 id="_members_331">Members</h4>
<div class="ulist">
<ul>
<li>
<p><code>sType</code> is the type of this structure</p>
</li>
<li>
<p><code>pNext</code> is <code>NULL</code> or a pointer to an extension-specific structure</p>
</li>
<li>
<p><code>vertexBindingDivisorCount</code> is the number of elements in the
<code>pVertexBindingDivisors</code> array.</p>
</li>
<li>
<p><code>pVertexBindingDivisors</code> is a pointer to an array of
<code>VkVertexInputBindingDivisorDescriptionEXT</code> structures, which
specifies the divisor value for each binding.</p>
</li>
</ul>
</div>
</div>
<div class="sect3">
<h4 id="_description_694">Description</h4>
<div class="sidebarblock">
<div class="content">
<div class="title">Valid Usage (Implicit)</div>
<div class="ulist">
<ul>
<li>
<p><a id="VUID-VkPipelineVertexInputDivisorStateCreateInfoEXT-sType-sType"></a> <code>sType</code> <strong class="purple">must</strong> be <code>VK_STRUCTURE_TYPE_PIPELINE_VERTEX_INPUT_DIVISOR_STATE_CREATE_INFO_EXT</code></p>
</li>
<li>
<p><a id="VUID-VkPipelineVertexInputDivisorStateCreateInfoEXT-pVertexBindingDivisors-parameter"></a> <code>pVertexBindingDivisors</code> <strong class="purple">must</strong> be a valid pointer to an array of <code>vertexBindingDivisorCount</code> <code>VkVertexInputBindingDivisorDescriptionEXT</code> structures</p>
</li>
<li>
<p><a id="VUID-VkPipelineVertexInputDivisorStateCreateInfoEXT-vertexBindingDivisorCount-arraylength"></a> <code>vertexBindingDivisorCount</code> <strong class="purple">must</strong> be greater than <code>0</code></p>
</li>
</ul>
</div>
</div>
</div>
</div>
<div class="sect3">
<h4 id="_see_also_694">See Also</h4>
<div class="paragraph">
<p><a href="#VkStructureType">VkStructureType</a>, <a href="#VkVertexInputBindingDivisorDescriptionEXT">VkVertexInputBindingDivisorDescriptionEXT</a></p>
</div>
</div>
<div class="sect3">
<h4 id="_document_notes_694">Document Notes</h4>
<div class="paragraph">
<p>For more information, see the Vulkan Specification at URL</p>
</div>
<div class="paragraph">
<p><a href="https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VkPipelineVertexInputDivisorStateCreateInfoEXT" class="bare">https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VkPipelineVertexInputDivisorStateCreateInfoEXT</a></p>
</div>
<div class="paragraph">
<p>This page is extracted from the Vulkan Specification.
Fixes and changes should be made to the Specification, not directly.</p>
</div>
<div style="page-break-after: always;"></div>
</div>
</div>
<div class="sect2">
<h3 id="_vkpipelinevertexinputstatecreateinfo3">VkPipelineVertexInputStateCreateInfo(3)</h3>
<div class="sect3">
<h4 id="_name_695">Name</h4>
<div class="paragraph">
<p>VkPipelineVertexInputStateCreateInfo - Structure specifying parameters of a newly created pipeline vertex input state</p>
</div>
</div>
<div class="sect3">
<h4 id="_c_specification_695">C Specification</h4>
<div class="paragraph">
<p>The <code>VkPipelineVertexInputStateCreateInfo</code> structure is defined as:</p>
</div>
<div id="VkPipelineVertexInputStateCreateInfo" class="listingblock">
<div class="content">
<pre class="highlight"><code class="language-c++" data-lang="c++">typedef struct VkPipelineVertexInputStateCreateInfo {
    VkStructureType                             sType;
    const void*                                 pNext;
    VkPipelineVertexInputStateCreateFlags       flags;
    uint32_t                                    vertexBindingDescriptionCount;
    const VkVertexInputBindingDescription*      pVertexBindingDescriptions;
    uint32_t                                    vertexAttributeDescriptionCount;
    const VkVertexInputAttributeDescription*    pVertexAttributeDescriptions;
} VkPipelineVertexInputStateCreateInfo;</code></pre>
</div>
</div>
</div>
<div class="sect3">
<h4 id="_members_332">Members</h4>
<div class="ulist">
<ul>
<li>
<p><code>sType</code> is the type of this structure.</p>
</li>
<li>
<p><code>pNext</code> is <code>NULL</code> or a pointer to an extension-specific structure.</p>
</li>
<li>
<p><code>flags</code> is reserved for future use.</p>
</li>
<li>
<p><code>vertexBindingDescriptionCount</code> is the number of vertex binding
descriptions provided in <code>pVertexBindingDescriptions</code>.</p>
</li>
<li>
<p><code>pVertexBindingDescriptions</code> is a pointer to an array of
<code>VkVertexInputBindingDescription</code> structures.</p>
</li>
<li>
<p><code>vertexAttributeDescriptionCount</code> is the number of vertex attribute
descriptions provided in <code>pVertexAttributeDescriptions</code>.</p>
</li>
<li>
<p><code>pVertexAttributeDescriptions</code> is a pointer to an array of
<code>VkVertexInputAttributeDescription</code> structures.</p>
</li>
</ul>
</div>
</div>
<div class="sect3">
<h4 id="_description_695">Description</h4>
<div class="sidebarblock">
<div class="content">
<div class="title">Valid Usage</div>
<div class="ulist">
<ul>
<li>
<p><a id="VUID-VkPipelineVertexInputStateCreateInfo-vertexBindingDescriptionCount-00613"></a>
<code>vertexBindingDescriptionCount</code> <strong class="purple">must</strong> be less than or equal to
<code>VkPhysicalDeviceLimits</code>::<code>maxVertexInputBindings</code></p>
</li>
<li>
<p><a id="VUID-VkPipelineVertexInputStateCreateInfo-vertexAttributeDescriptionCount-00614"></a>
<code>vertexAttributeDescriptionCount</code> <strong class="purple">must</strong> be less than or equal to
<code>VkPhysicalDeviceLimits</code>::<code>maxVertexInputAttributes</code></p>
</li>
<li>
<p><a id="VUID-VkPipelineVertexInputStateCreateInfo-binding-00615"></a>
For every <code>binding</code> specified by each element of
<code>pVertexAttributeDescriptions</code>, a
<code>VkVertexInputBindingDescription</code> <strong class="purple">must</strong> exist in
<code>pVertexBindingDescriptions</code> with the same value of <code>binding</code></p>
</li>
<li>
<p><a id="VUID-VkPipelineVertexInputStateCreateInfo-pVertexBindingDescriptions-00616"></a>
All elements of <code>pVertexBindingDescriptions</code> <strong class="purple">must</strong> describe distinct
binding numbers</p>
</li>
<li>
<p><a id="VUID-VkPipelineVertexInputStateCreateInfo-pVertexAttributeDescriptions-00617"></a>
All elements of <code>pVertexAttributeDescriptions</code> <strong class="purple">must</strong> describe
distinct attribute locations</p>
</li>
</ul>
</div>
</div>
</div>
<div class="sidebarblock">
<div class="content">
<div class="title">Valid Usage (Implicit)</div>
<div class="ulist">
<ul>
<li>
<p><a id="VUID-VkPipelineVertexInputStateCreateInfo-sType-sType"></a> <code>sType</code> <strong class="purple">must</strong> be <code>VK_STRUCTURE_TYPE_PIPELINE_VERTEX_INPUT_STATE_CREATE_INFO</code></p>
</li>
<li>
<p><a id="VUID-VkPipelineVertexInputStateCreateInfo-pNext-pNext"></a> <code>pNext</code> <strong class="purple">must</strong> be <code>NULL</code> or a pointer to a valid instance of <a href="#VkPipelineVertexInputDivisorStateCreateInfoEXT">VkPipelineVertexInputDivisorStateCreateInfoEXT</a></p>
</li>
<li>
<p><a id="VUID-VkPipelineVertexInputStateCreateInfo-flags-zerobitmask"></a> <code>flags</code> <strong class="purple">must</strong> be <code>0</code></p>
</li>
<li>
<p><a id="VUID-VkPipelineVertexInputStateCreateInfo-pVertexBindingDescriptions-parameter"></a> If <code>vertexBindingDescriptionCount</code> is not <code>0</code>, <code>pVertexBindingDescriptions</code> <strong class="purple">must</strong> be a valid pointer to an array of <code>vertexBindingDescriptionCount</code> valid <code>VkVertexInputBindingDescription</code> structures</p>
</li>
<li>
<p><a id="VUID-VkPipelineVertexInputStateCreateInfo-pVertexAttributeDescriptions-parameter"></a> If <code>vertexAttributeDescriptionCount</code> is not <code>0</code>, <code>pVertexAttributeDescriptions</code> <strong class="purple">must</strong> be a valid pointer to an array of <code>vertexAttributeDescriptionCount</code> valid <code>VkVertexInputAttributeDescription</code> structures</p>
</li>
</ul>
</div>
</div>
</div>
</div>
<div class="sect3">
<h4 id="_see_also_695">See Also</h4>
<div class="paragraph">
<p><a href="#VkGraphicsPipelineCreateInfo">VkGraphicsPipelineCreateInfo</a>, <a href="#VkPipelineVertexInputStateCreateFlags">VkPipelineVertexInputStateCreateFlags</a>, <a href="#VkStructureType">VkStructureType</a>, <a href="#VkVertexInputAttributeDescription">VkVertexInputAttributeDescription</a>, <a href="#VkVertexInputBindingDescription">VkVertexInputBindingDescription</a></p>
</div>
</div>
<div class="sect3">
<h4 id="_document_notes_695">Document Notes</h4>
<div class="paragraph">
<p>For more information, see the Vulkan Specification at URL</p>
</div>
<div class="paragraph">
<p><a href="https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VkPipelineVertexInputStateCreateInfo" class="bare">https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VkPipelineVertexInputStateCreateInfo</a></p>
</div>
<div class="paragraph">
<p>This page is extracted from the Vulkan Specification.
Fixes and changes should be made to the Specification, not directly.</p>
</div>
<div style="page-break-after: always;"></div>
</div>
</div>
<div class="sect2">
<h3 id="_vkpipelineviewportcoarsesampleorderstatecreateinfonv3">VkPipelineViewportCoarseSampleOrderStateCreateInfoNV(3)</h3>
<div class="sect3">
<h4 id="_name_696">Name</h4>
<div class="paragraph">
<p>VkPipelineViewportCoarseSampleOrderStateCreateInfoNV - Structure specifying parameters controlling sample order in coarse fragments</p>
</div>
</div>
<div class="sect3">
<h4 id="_c_specification_696">C Specification</h4>
<div class="paragraph">
<p>If the <code>pNext</code> chain of <a href="#VkPipelineViewportStateCreateInfo">VkPipelineViewportStateCreateInfo</a> includes
a <code>VkPipelineViewportCoarseSampleOrderStateCreateInfoNV</code> structure, then
that structure includes parameters that control the order of coverage
samples in fragments larger than one pixel.</p>
</div>
<div class="paragraph">
<p>The <code>VkPipelineViewportCoarseSampleOrderStateCreateInfoNV</code> structure is
defined as:</p>
</div>
<div id="VkPipelineViewportCoarseSampleOrderStateCreateInfoNV" class="listingblock">
<div class="content">
<pre class="highlight"><code class="language-c++" data-lang="c++">typedef struct VkPipelineViewportCoarseSampleOrderStateCreateInfoNV {
    VkStructureType                       sType;
    const void*                           pNext;
    VkCoarseSampleOrderTypeNV             sampleOrderType;
    uint32_t                              customSampleOrderCount;
    const VkCoarseSampleOrderCustomNV*    pCustomSampleOrders;
} VkPipelineViewportCoarseSampleOrderStateCreateInfoNV;</code></pre>
</div>
</div>
</div>
<div class="sect3">
<h4 id="_members_333">Members</h4>
<div class="ulist">
<ul>
<li>
<p><code>sType</code> is the type of this structure.</p>
</li>
<li>
<p><code>pNext</code> is <code>NULL</code> or a pointer to an extension-specific structure.</p>
</li>
<li>
<p><code>sampleOrderType</code> specifies the mechanism used to order coverage
samples in fragments larger than one pixel.</p>
</li>
<li>
<p><code>customSampleOrderCount</code> specifies the number of custom sample
orderings to use when ordering coverage samples.</p>
</li>
<li>
<p><code>pCustomSampleOrders</code> is a pointer to an array of
<a href="#VkCoarseSampleOrderCustomNV">VkCoarseSampleOrderCustomNV</a> structures, each of which specifies
the coverage sample order for a single combination of fragment area and
coverage sample count.</p>
</li>
</ul>
</div>
</div>
<div class="sect3">
<h4 id="_description_696">Description</h4>
<div class="paragraph">
<p>If this structure is not present, <code>sampleOrderType</code> is considered to be
<code>VK_COARSE_SAMPLE_ORDER_TYPE_DEFAULT_NV</code>.</p>
</div>
<div class="paragraph">
<p>If <code>sampleOrderType</code> is <code>VK_COARSE_SAMPLE_ORDER_TYPE_CUSTOM_NV</code>, the
coverage sample order used for any combination of fragment area and coverage
sample count not enumerated in <code>pCustomSampleOrders</code> will be identical
to that used for <code>VK_COARSE_SAMPLE_ORDER_TYPE_DEFAULT_NV</code>.</p>
</div>
<div class="paragraph">
<p>If the pipeline was created with
<code>VK_DYNAMIC_STATE_VIEWPORT_COARSE_SAMPLE_ORDER_NV</code>, the contents of this
structure (if present) are ignored, and the coverage sample order is instead
specified by <a href="#vkCmdSetCoarseSampleOrderNV">vkCmdSetCoarseSampleOrderNV</a>.</p>
</div>
<div class="sidebarblock">
<div class="content">
<div class="title">Valid Usage</div>
<div class="ulist">
<ul>
<li>
<p><a id="VUID-VkPipelineViewportCoarseSampleOrderStateCreateInfoNV-sampleOrderType-02072"></a>
If <code>sampleOrderType</code> is not
<code>VK_COARSE_SAMPLE_ORDER_TYPE_CUSTOM_NV</code>,
<code>customSamplerOrderCount</code> <strong class="purple">must</strong> be <code>0</code></p>
</li>
<li>
<p><a id="VUID-VkPipelineViewportCoarseSampleOrderStateCreateInfoNV-pCustomSampleOrders-02234"></a>
The array <code>pCustomSampleOrders</code> <strong class="purple">must</strong> not contain two structures
with matching values for both the <code>shadingRate</code> and
<code>sampleCount</code> members.</p>
</li>
</ul>
</div>
</div>
</div>
<div class="sidebarblock">
<div class="content">
<div class="title">Valid Usage (Implicit)</div>
<div class="ulist">
<ul>
<li>
<p><a id="VUID-VkPipelineViewportCoarseSampleOrderStateCreateInfoNV-sType-sType"></a> <code>sType</code> <strong class="purple">must</strong> be <code>VK_STRUCTURE_TYPE_PIPELINE_VIEWPORT_COARSE_SAMPLE_ORDER_STATE_CREATE_INFO_NV</code></p>
</li>
<li>
<p><a id="VUID-VkPipelineViewportCoarseSampleOrderStateCreateInfoNV-sampleOrderType-parameter"></a> <code>sampleOrderType</code> <strong class="purple">must</strong> be a valid <a href="#VkCoarseSampleOrderTypeNV">VkCoarseSampleOrderTypeNV</a> value</p>
</li>
<li>
<p><a id="VUID-VkPipelineViewportCoarseSampleOrderStateCreateInfoNV-pCustomSampleOrders-parameter"></a> If <code>customSampleOrderCount</code> is not <code>0</code>, <code>pCustomSampleOrders</code> <strong class="purple">must</strong> be a valid pointer to an array of <code>customSampleOrderCount</code> valid <code>VkCoarseSampleOrderCustomNV</code> structures</p>
</li>
</ul>
</div>
</div>
</div>
</div>
<div class="sect3">
<h4 id="_see_also_696">See Also</h4>
<div class="paragraph">
<p><a href="#VkCoarseSampleOrderCustomNV">VkCoarseSampleOrderCustomNV</a>, <a href="#VkCoarseSampleOrderTypeNV">VkCoarseSampleOrderTypeNV</a>, <a href="#VkStructureType">VkStructureType</a></p>
</div>
</div>
<div class="sect3">
<h4 id="_document_notes_696">Document Notes</h4>
<div class="paragraph">
<p>For more information, see the Vulkan Specification at URL</p>
</div>
<div class="paragraph">
<p><a href="https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VkPipelineViewportCoarseSampleOrderStateCreateInfoNV" class="bare">https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VkPipelineViewportCoarseSampleOrderStateCreateInfoNV</a></p>
</div>
<div class="paragraph">
<p>This page is extracted from the Vulkan Specification.
Fixes and changes should be made to the Specification, not directly.</p>
</div>
<div style="page-break-after: always;"></div>
</div>
</div>
<div class="sect2">
<h3 id="_vkpipelineviewportexclusivescissorstatecreateinfonv3">VkPipelineViewportExclusiveScissorStateCreateInfoNV(3)</h3>
<div class="sect3">
<h4 id="_name_697">Name</h4>
<div class="paragraph">
<p>VkPipelineViewportExclusiveScissorStateCreateInfoNV - Structure specifying parameters controlling exclusive scissor testing</p>
</div>
</div>
<div class="sect3">
<h4 id="_c_specification_697">C Specification</h4>
<div class="paragraph">
<p>If the <code>pNext</code> chain of <code>VkPipelineViewportStateCreateInfo</code> includes
a <code>VkPipelineViewportExclusiveScissorStateCreateInfoNV</code> structure, then
that structure includes parameters that affect the exclusive scissor test.</p>
</div>
<div class="paragraph">
<p>The <code>VkPipelineViewportExclusiveScissorStateCreateInfoNV</code> structure is
defined as:</p>
</div>
<div id="VkPipelineViewportExclusiveScissorStateCreateInfoNV" class="listingblock">
<div class="content">
<pre class="highlight"><code class="language-c++" data-lang="c++">typedef struct VkPipelineViewportExclusiveScissorStateCreateInfoNV {
    VkStructureType    sType;
    const void*        pNext;
    uint32_t           exclusiveScissorCount;
    const VkRect2D*    pExclusiveScissors;
} VkPipelineViewportExclusiveScissorStateCreateInfoNV;</code></pre>
</div>
</div>
</div>
<div class="sect3">
<h4 id="_members_334">Members</h4>
<div class="ulist">
<ul>
<li>
<p><code>sType</code> is the type of this structure.</p>
</li>
<li>
<p><code>pNext</code> is <code>NULL</code> or a pointer to an extension-specific structure.</p>
</li>
<li>
<p><code>exclusiveScissorCount</code> is the number of exclusive scissor
rectangles used by the pipeline.</p>
</li>
<li>
<p><code>pExclusiveScissors</code> is a pointer to an array of <a href="#VkRect2D">VkRect2D</a>
structures defining exclusive scissor rectangles.
If the exclusive scissor state is dynamic, this member is ignored.</p>
</li>
</ul>
</div>
</div>
<div class="sect3">
<h4 id="_description_697">Description</h4>
<div class="paragraph">
<p>If this structure is not present, <code>exclusiveScissorCount</code> is considered
to be <code>0</code> and the exclusive scissor test is disabled.</p>
</div>
<div class="sidebarblock">
<div class="content">
<div class="title">Valid Usage</div>
<div class="ulist">
<ul>
<li>
<p><a id="VUID-VkPipelineViewportExclusiveScissorStateCreateInfoNV-exclusiveScissorCount-02027"></a>
If the <a href="vkspec.html#features-multiViewport">multiple viewports</a> feature is not
enabled, <code>exclusiveScissorCount</code> <strong class="purple">must</strong> be <code>0</code> or <code>1</code></p>
</li>
<li>
<p><a id="VUID-VkPipelineViewportExclusiveScissorStateCreateInfoNV-exclusiveScissorCount-02028"></a>
<code>exclusiveScissorCount</code> <strong class="purple">must</strong> be less than or equal to
<code>VkPhysicalDeviceLimits</code>::<code>maxViewports</code></p>
</li>
<li>
<p><a id="VUID-VkPipelineViewportExclusiveScissorStateCreateInfoNV-exclusiveScissorCount-02029"></a>
<code>exclusiveScissorCount</code> <strong class="purple">must</strong> be <code>0</code> or identical to the
<code>viewportCount</code> member of <code>VkPipelineViewportStateCreateInfo</code></p>
</li>
<li>
<p><a id="VUID-VkPipelineViewportExclusiveScissorStateCreateInfoNV-pDynamicStates-02030"></a>
If no element of the <code>pDynamicStates</code> member of <code>pDynamicState</code>
is <code>VK_DYNAMIC_STATE_EXCLUSIVE_SCISSOR_NV</code> and
<code>exclusiveScissorCount</code> is not <code>0</code>, <code>pExclusiveScissors</code> <strong class="purple">must</strong>
be a valid pointer to an array of <code>exclusiveScissorCount</code>
<code>VkRect2D</code> structures</p>
</li>
</ul>
</div>
</div>
</div>
<div class="sidebarblock">
<div class="content">
<div class="title">Valid Usage (Implicit)</div>
<div class="ulist">
<ul>
<li>
<p><a id="VUID-VkPipelineViewportExclusiveScissorStateCreateInfoNV-sType-sType"></a> <code>sType</code> <strong class="purple">must</strong> be <code>VK_STRUCTURE_TYPE_PIPELINE_VIEWPORT_EXCLUSIVE_SCISSOR_STATE_CREATE_INFO_NV</code></p>
</li>
<li>
<p><a id="VUID-VkPipelineViewportExclusiveScissorStateCreateInfoNV-pExclusiveScissors-parameter"></a> If <code>exclusiveScissorCount</code> is not <code>0</code>, and <code>pExclusiveScissors</code> is not <code>NULL</code>, <code>pExclusiveScissors</code> <strong class="purple">must</strong> be a valid pointer to an array of <code>exclusiveScissorCount</code> <code>VkRect2D</code> structures</p>
</li>
</ul>
</div>
</div>
</div>
</div>
<div class="sect3">
<h4 id="_see_also_697">See Also</h4>
<div class="paragraph">
<p><a href="#VkRect2D">VkRect2D</a>, <a href="#VkStructureType">VkStructureType</a></p>
</div>
</div>
<div class="sect3">
<h4 id="_document_notes_697">Document Notes</h4>
<div class="paragraph">
<p>For more information, see the Vulkan Specification at URL</p>
</div>
<div class="paragraph">
<p><a href="https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VkPipelineViewportExclusiveScissorStateCreateInfoNV" class="bare">https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VkPipelineViewportExclusiveScissorStateCreateInfoNV</a></p>
</div>
<div class="paragraph">
<p>This page is extracted from the Vulkan Specification.
Fixes and changes should be made to the Specification, not directly.</p>
</div>
<div style="page-break-after: always;"></div>
</div>
</div>
<div class="sect2">
<h3 id="_vkpipelineviewportshadingrateimagestatecreateinfonv3">VkPipelineViewportShadingRateImageStateCreateInfoNV(3)</h3>
<div class="sect3">
<h4 id="_name_698">Name</h4>
<div class="paragraph">
<p>VkPipelineViewportShadingRateImageStateCreateInfoNV - Structure specifying parameters controlling shading rate image usage</p>
</div>
</div>
<div class="sect3">
<h4 id="_c_specification_698">C Specification</h4>
<div class="paragraph">
<p>If the <code>pNext</code> chain of <a href="#VkPipelineViewportStateCreateInfo">VkPipelineViewportStateCreateInfo</a> includes
a <code>VkPipelineViewportShadingRateImageStateCreateInfoNV</code> structure, then
that structure includes parameters that control the shading rate.</p>
</div>
<div class="paragraph">
<p>The <code>VkPipelineViewportShadingRateImageStateCreateInfoNV</code> structure is
defined as:</p>
</div>
<div id="VkPipelineViewportShadingRateImageStateCreateInfoNV" class="listingblock">
<div class="content">
<pre class="highlight"><code class="language-c++" data-lang="c++">typedef struct VkPipelineViewportShadingRateImageStateCreateInfoNV {
    VkStructureType                  sType;
    const void*                      pNext;
    VkBool32                         shadingRateImageEnable;
    uint32_t                         viewportCount;
    const VkShadingRatePaletteNV*    pShadingRatePalettes;
} VkPipelineViewportShadingRateImageStateCreateInfoNV;</code></pre>
</div>
</div>
</div>
<div class="sect3">
<h4 id="_members_335">Members</h4>
<div class="ulist">
<ul>
<li>
<p><code>sType</code> is the type of this structure.</p>
</li>
<li>
<p><code>pNext</code> is <code>NULL</code> or a pointer to an extension-specific structure.</p>
</li>
<li>
<p><code>shadingRateImageEnable</code> specifies whether shading rate image and
palettes are used during rasterization.</p>
</li>
<li>
<p><code>viewportCount</code> specifies the number of per-viewport palettes used
to translate values stored in shading rate images.</p>
</li>
<li>
<p><code>pShadingRatePalettes</code> is a pointer to an array of
<a href="#VkShadingRatePaletteNV">VkShadingRatePaletteNV</a> structures defining the palette for each
viewport.
If the shading rate palette state is dynamic, this member is ignored.</p>
</li>
</ul>
</div>
</div>
<div class="sect3">
<h4 id="_description_698">Description</h4>
<div class="paragraph">
<p>If this structure is not present, <code>shadingRateImageEnable</code> is considered
to be <code>VK_FALSE</code>, and the shading rate image and palettes are not used.</p>
</div>
<div class="sidebarblock">
<div class="content">
<div class="title">Valid Usage</div>
<div class="ulist">
<ul>
<li>
<p><a id="VUID-VkPipelineViewportShadingRateImageStateCreateInfoNV-viewportCount-02054"></a>
If the <a href="vkspec.html#features-multiViewport">multiple viewports</a> feature is not
enabled, <code>viewportCount</code> <strong class="purple">must</strong> be <code>0</code> or <code>1</code></p>
</li>
<li>
<p><a id="VUID-VkPipelineViewportShadingRateImageStateCreateInfoNV-viewportCount-02055"></a>
<code>viewportCount</code> <strong class="purple">must</strong> be less than or equal to
<code>VkPhysicalDeviceLimits</code>::<code>maxViewports</code></p>
</li>
<li>
<p><a id="VUID-VkPipelineViewportShadingRateImageStateCreateInfoNV-shadingRateImageEnable-02056"></a>
If <code>shadingRateImageEnable</code> is <code>VK_TRUE</code>, <code>viewportCount</code>
<strong class="purple">must</strong> be equal to the <code>viewportCount</code> member of
<code>VkPipelineViewportStateCreateInfo</code></p>
</li>
<li>
<p><a id="VUID-VkPipelineViewportShadingRateImageStateCreateInfoNV-pDynamicStates-02057"></a>
If no element of the <code>pDynamicStates</code> member of <code>pDynamicState</code>
is <code>VK_DYNAMIC_STATE_VIEWPORT_SHADING_RATE_PALETTE_NV</code>,
<code>pShadingRatePalettes</code> <strong class="purple">must</strong> be a valid pointer to an array of
<code>viewportCount</code> <code>VkShadingRatePaletteNV</code> structures</p>
</li>
</ul>
</div>
</div>
</div>
<div class="sidebarblock">
<div class="content">
<div class="title">Valid Usage (Implicit)</div>
<div class="ulist">
<ul>
<li>
<p><a id="VUID-VkPipelineViewportShadingRateImageStateCreateInfoNV-sType-sType"></a> <code>sType</code> <strong class="purple">must</strong> be <code>VK_STRUCTURE_TYPE_PIPELINE_VIEWPORT_SHADING_RATE_IMAGE_STATE_CREATE_INFO_NV</code></p>
</li>
<li>
<p><a id="VUID-VkPipelineViewportShadingRateImageStateCreateInfoNV-pShadingRatePalettes-parameter"></a> If <code>viewportCount</code> is not <code>0</code>, and <code>pShadingRatePalettes</code> is not <code>NULL</code>, <code>pShadingRatePalettes</code> <strong class="purple">must</strong> be a valid pointer to an array of <code>viewportCount</code> valid <code>VkShadingRatePaletteNV</code> structures</p>
</li>
</ul>
</div>
</div>
</div>
</div>
<div class="sect3">
<h4 id="_see_also_698">See Also</h4>
<div class="paragraph">
<p><code>VkBool32</code>, <a href="#VkShadingRatePaletteNV">VkShadingRatePaletteNV</a>, <a href="#VkStructureType">VkStructureType</a></p>
</div>
</div>
<div class="sect3">
<h4 id="_document_notes_698">Document Notes</h4>
<div class="paragraph">
<p>For more information, see the Vulkan Specification at URL</p>
</div>
<div class="paragraph">
<p><a href="https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VkPipelineViewportShadingRateImageStateCreateInfoNV" class="bare">https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VkPipelineViewportShadingRateImageStateCreateInfoNV</a></p>
</div>
<div class="paragraph">
<p>This page is extracted from the Vulkan Specification.
Fixes and changes should be made to the Specification, not directly.</p>
</div>
<div style="page-break-after: always;"></div>
</div>
</div>
<div class="sect2">
<h3 id="_vkpipelineviewportstatecreateinfo3">VkPipelineViewportStateCreateInfo(3)</h3>
<div class="sect3">
<h4 id="_name_699">Name</h4>
<div class="paragraph">
<p>VkPipelineViewportStateCreateInfo - Structure specifying parameters of a newly created pipeline viewport state</p>
</div>
</div>
<div class="sect3">
<h4 id="_c_specification_699">C Specification</h4>
<div class="paragraph">
<p>The <code>VkPipelineViewportStateCreateInfo</code> structure is defined as:</p>
</div>
<div id="VkPipelineViewportStateCreateInfo" class="listingblock">
<div class="content">
<pre class="highlight"><code class="language-c++" data-lang="c++">typedef struct VkPipelineViewportStateCreateInfo {
    VkStructureType                       sType;
    const void*                           pNext;
    VkPipelineViewportStateCreateFlags    flags;
    uint32_t                              viewportCount;
    const VkViewport*                     pViewports;
    uint32_t                              scissorCount;
    const VkRect2D*                       pScissors;
} VkPipelineViewportStateCreateInfo;</code></pre>
</div>
</div>
</div>
<div class="sect3">
<h4 id="_members_336">Members</h4>
<div class="ulist">
<ul>
<li>
<p><code>sType</code> is the type of this structure.</p>
</li>
<li>
<p><code>pNext</code> is <code>NULL</code> or a pointer to an extension-specific structure.</p>
</li>
<li>
<p><code>flags</code> is reserved for future use.</p>
</li>
<li>
<p><code>viewportCount</code> is the number of viewports used by the pipeline.</p>
</li>
<li>
<p><code>pViewports</code> is a pointer to an array of <a href="#VkViewport">VkViewport</a>
structures, defining the viewport transforms.
If the viewport state is dynamic, this member is ignored.</p>
</li>
<li>
<p><code>scissorCount</code> is the number of <a href="vkspec.html#fragops-scissor">scissors</a> and
<strong class="purple">must</strong> match the number of viewports.</p>
</li>
<li>
<p><code>pScissors</code> is a pointer to an array of <a href="#VkRect2D">VkRect2D</a> structures
which define the rectangular bounds of the scissor for the corresponding
viewport.
If the scissor state is dynamic, this member is ignored.</p>
</li>
</ul>
</div>
</div>
<div class="sect3">
<h4 id="_description_699">Description</h4>
<div class="sidebarblock">
<div class="content">
<div class="title">Valid Usage</div>
<div class="ulist">
<ul>
<li>
<p><a id="VUID-VkPipelineViewportStateCreateInfo-viewportCount-01216"></a>
If the <a href="vkspec.html#features-multiViewport">multiple viewports</a> feature is not
enabled, <code>viewportCount</code> <strong class="purple">must</strong> be <code>1</code></p>
</li>
<li>
<p><a id="VUID-VkPipelineViewportStateCreateInfo-scissorCount-01217"></a>
If the <a href="vkspec.html#features-multiViewport">multiple viewports</a> feature is not
enabled, <code>scissorCount</code> <strong class="purple">must</strong> be <code>1</code></p>
</li>
<li>
<p><a id="VUID-VkPipelineViewportStateCreateInfo-viewportCount-01218"></a>
<code>viewportCount</code> <strong class="purple">must</strong> be between <code>1</code> and
<code>VkPhysicalDeviceLimits</code>::<code>maxViewports</code>, inclusive</p>
</li>
<li>
<p><a id="VUID-VkPipelineViewportStateCreateInfo-scissorCount-01219"></a>
<code>scissorCount</code> <strong class="purple">must</strong> be between <code>1</code> and
<code>VkPhysicalDeviceLimits</code>::<code>maxViewports</code>, inclusive</p>
</li>
<li>
<p><a id="VUID-VkPipelineViewportStateCreateInfo-scissorCount-01220"></a>
<code>scissorCount</code> and <code>viewportCount</code> <strong class="purple">must</strong> be identical</p>
</li>
<li>
<p><a id="VUID-VkPipelineViewportStateCreateInfo-viewportWScalingEnable-01726"></a>
If the <code>viewportWScalingEnable</code> member of a
<a href="#VkPipelineViewportWScalingStateCreateInfoNV">VkPipelineViewportWScalingStateCreateInfoNV</a> structure chained to
the <code>pNext</code> chain is <code>VK_TRUE</code>, the <code>viewportCount</code> member
of the <a href="#VkPipelineViewportWScalingStateCreateInfoNV">VkPipelineViewportWScalingStateCreateInfoNV</a> structure <strong class="purple">must</strong>
be equal to <code>viewportCount</code></p>
</li>
</ul>
</div>
</div>
</div>
<div class="sidebarblock">
<div class="content">
<div class="title">Valid Usage (Implicit)</div>
<div class="ulist">
<ul>
<li>
<p><a id="VUID-VkPipelineViewportStateCreateInfo-sType-sType"></a> <code>sType</code> <strong class="purple">must</strong> be <code>VK_STRUCTURE_TYPE_PIPELINE_VIEWPORT_STATE_CREATE_INFO</code></p>
</li>
<li>
<p><a id="VUID-VkPipelineViewportStateCreateInfo-pNext-pNext"></a> Each <code>pNext</code> member of any structure (including this one) in the <code>pNext</code> chain <strong class="purple">must</strong> be either <code>NULL</code> or a pointer to a valid instance of <a href="#VkPipelineViewportCoarseSampleOrderStateCreateInfoNV">VkPipelineViewportCoarseSampleOrderStateCreateInfoNV</a>, <a href="#VkPipelineViewportExclusiveScissorStateCreateInfoNV">VkPipelineViewportExclusiveScissorStateCreateInfoNV</a>, <a href="#VkPipelineViewportShadingRateImageStateCreateInfoNV">VkPipelineViewportShadingRateImageStateCreateInfoNV</a>, <a href="#VkPipelineViewportSwizzleStateCreateInfoNV">VkPipelineViewportSwizzleStateCreateInfoNV</a>, or <a href="#VkPipelineViewportWScalingStateCreateInfoNV">VkPipelineViewportWScalingStateCreateInfoNV</a></p>
</li>
<li>
<p><a id="VUID-VkPipelineViewportStateCreateInfo-sType-unique"></a> Each <code>sType</code> member in the <code>pNext</code> chain <strong class="purple">must</strong> be unique</p>
</li>
<li>
<p><a id="VUID-VkPipelineViewportStateCreateInfo-flags-zerobitmask"></a> <code>flags</code> <strong class="purple">must</strong> be <code>0</code></p>
</li>
<li>
<p><a id="VUID-VkPipelineViewportStateCreateInfo-viewportCount-arraylength"></a> <code>viewportCount</code> <strong class="purple">must</strong> be greater than <code>0</code></p>
</li>
<li>
<p><a id="VUID-VkPipelineViewportStateCreateInfo-scissorCount-arraylength"></a> <code>scissorCount</code> <strong class="purple">must</strong> be greater than <code>0</code></p>
</li>
</ul>
</div>
</div>
</div>
</div>
<div class="sect3">
<h4 id="_see_also_699">See Also</h4>
<div class="paragraph">
<p><a href="#VkGraphicsPipelineCreateInfo">VkGraphicsPipelineCreateInfo</a>, <a href="#VkPipelineViewportStateCreateFlags">VkPipelineViewportStateCreateFlags</a>, <a href="#VkRect2D">VkRect2D</a>, <a href="#VkStructureType">VkStructureType</a>, <a href="#VkViewport">VkViewport</a></p>
</div>
</div>
<div class="sect3">
<h4 id="_document_notes_699">Document Notes</h4>
<div class="paragraph">
<p>For more information, see the Vulkan Specification at URL</p>
</div>
<div class="paragraph">
<p><a href="https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VkPipelineViewportStateCreateInfo" class="bare">https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VkPipelineViewportStateCreateInfo</a></p>
</div>
<div class="paragraph">
<p>This page is extracted from the Vulkan Specification.
Fixes and changes should be made to the Specification, not directly.</p>
</div>
<div style="page-break-after: always;"></div>
</div>
</div>
<div class="sect2">
<h3 id="_vkpipelineviewportswizzlestatecreateinfonv3">VkPipelineViewportSwizzleStateCreateInfoNV(3)</h3>
<div class="sect3">
<h4 id="_name_700">Name</h4>
<div class="paragraph">
<p>VkPipelineViewportSwizzleStateCreateInfoNV - Structure specifying swizzle applied to primitive clip coordinates</p>
</div>
</div>
<div class="sect3">
<h4 id="_c_specification_700">C Specification</h4>
<div class="paragraph">
<p>Each primitive sent to a given viewport has a swizzle and <strong class="purple">optional</strong> negation
applied to its clip coordinates.
The swizzle that is applied depends on the viewport index, and is controlled
by the <code>VkPipelineViewportSwizzleStateCreateInfoNV</code> pipeline state:</p>
</div>
<div id="VkPipelineViewportSwizzleStateCreateInfoNV" class="listingblock">
<div class="content">
<pre class="highlight"><code class="language-c++" data-lang="c++">typedef struct VkPipelineViewportSwizzleStateCreateInfoNV {
    VkStructureType                                sType;
    const void*                                    pNext;
    VkPipelineViewportSwizzleStateCreateFlagsNV    flags;
    uint32_t                                       viewportCount;
    const VkViewportSwizzleNV*                     pViewportSwizzles;
} VkPipelineViewportSwizzleStateCreateInfoNV;</code></pre>
</div>
</div>
</div>
<div class="sect3">
<h4 id="_members_337">Members</h4>
<div class="ulist">
<ul>
<li>
<p><code>sType</code> is the type of this structure.</p>
</li>
<li>
<p><code>pNext</code> is <code>NULL</code> or a pointer to an extension-specific structure.</p>
</li>
<li>
<p><code>flags</code> is reserved for future use.</p>
</li>
<li>
<p><code>viewportCount</code> is the number of viewport swizzles used by the
pipeline.</p>
</li>
<li>
<p><code>pViewportSwizzles</code> is a pointer to an array of
<a href="#VkViewportSwizzleNV">VkViewportSwizzleNV</a> structures, defining the viewport swizzles.</p>
</li>
</ul>
</div>
</div>
<div class="sect3">
<h4 id="_description_700">Description</h4>
<div class="sidebarblock">
<div class="content">
<div class="title">Valid Usage</div>
<div class="ulist">
<ul>
<li>
<p><a id="VUID-VkPipelineViewportSwizzleStateCreateInfoNV-viewportCount-01215"></a>
<code>viewportCount</code> <strong class="purple">must</strong> match the <code>viewportCount</code> set in
<code>VkPipelineViewportStateCreateInfo</code></p>
</li>
</ul>
</div>
</div>
</div>
<div class="sidebarblock">
<div class="content">
<div class="title">Valid Usage (Implicit)</div>
<div class="ulist">
<ul>
<li>
<p><a id="VUID-VkPipelineViewportSwizzleStateCreateInfoNV-sType-sType"></a> <code>sType</code> <strong class="purple">must</strong> be <code>VK_STRUCTURE_TYPE_PIPELINE_VIEWPORT_SWIZZLE_STATE_CREATE_INFO_NV</code></p>
</li>
<li>
<p><a id="VUID-VkPipelineViewportSwizzleStateCreateInfoNV-flags-zerobitmask"></a> <code>flags</code> <strong class="purple">must</strong> be <code>0</code></p>
</li>
<li>
<p><a id="VUID-VkPipelineViewportSwizzleStateCreateInfoNV-pViewportSwizzles-parameter"></a> <code>pViewportSwizzles</code> <strong class="purple">must</strong> be a valid pointer to an array of <code>viewportCount</code> valid <code>VkViewportSwizzleNV</code> structures</p>
</li>
<li>
<p><a id="VUID-VkPipelineViewportSwizzleStateCreateInfoNV-viewportCount-arraylength"></a> <code>viewportCount</code> <strong class="purple">must</strong> be greater than <code>0</code></p>
</li>
</ul>
</div>
</div>
</div>
</div>
<div class="sect3">
<h4 id="_see_also_700">See Also</h4>
<div class="paragraph">
<p><a href="#VkPipelineViewportSwizzleStateCreateFlagsNV">VkPipelineViewportSwizzleStateCreateFlagsNV</a>, <a href="#VkStructureType">VkStructureType</a>, <a href="#VkViewportSwizzleNV">VkViewportSwizzleNV</a></p>
</div>
</div>
<div class="sect3">
<h4 id="_document_notes_700">Document Notes</h4>
<div class="paragraph">
<p>For more information, see the Vulkan Specification at URL</p>
</div>
<div class="paragraph">
<p><a href="https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VkPipelineViewportSwizzleStateCreateInfoNV" class="bare">https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VkPipelineViewportSwizzleStateCreateInfoNV</a></p>
</div>
<div class="paragraph">
<p>This page is extracted from the Vulkan Specification.
Fixes and changes should be made to the Specification, not directly.</p>
</div>
<div style="page-break-after: always;"></div>
</div>
</div>
<div class="sect2">
<h3 id="_vkpipelineviewportwscalingstatecreateinfonv3">VkPipelineViewportWScalingStateCreateInfoNV(3)</h3>
<div class="sect3">
<h4 id="_name_701">Name</h4>
<div class="paragraph">
<p>VkPipelineViewportWScalingStateCreateInfoNV - Structure specifying parameters of a newly created pipeline viewport W scaling state</p>
</div>
</div>
<div class="sect3">
<h4 id="_c_specification_701">C Specification</h4>
<div class="paragraph">
<p>The <code>VkPipelineViewportWScalingStateCreateInfoNV</code> structure is defined
as:</p>
</div>
<div id="VkPipelineViewportWScalingStateCreateInfoNV" class="listingblock">
<div class="content">
<pre class="highlight"><code class="language-c++" data-lang="c++">typedef struct VkPipelineViewportWScalingStateCreateInfoNV {
    VkStructureType                sType;
    const void*                    pNext;
    VkBool32                       viewportWScalingEnable;
    uint32_t                       viewportCount;
    const VkViewportWScalingNV*    pViewportWScalings;
} VkPipelineViewportWScalingStateCreateInfoNV;</code></pre>
</div>
</div>
</div>
<div class="sect3">
<h4 id="_members_338">Members</h4>
<div class="ulist">
<ul>
<li>
<p><code>sType</code> is the type of this structure.</p>
</li>
<li>
<p><code>pNext</code> is <code>NULL</code> or a pointer to an extension-specific structure.</p>
</li>
<li>
<p><code>viewportWScalingEnable</code> controls whether viewport <strong>W</strong> scaling is
enabled.</p>
</li>
<li>
<p><code>viewportCount</code> is the number of viewports used by <strong>W</strong> scaling, and
<strong class="purple">must</strong> match the number of viewports in the pipeline if viewport <strong>W</strong>
scaling is enabled.</p>
</li>
<li>
<p><code>pViewportWScalings</code> is a pointer to an array of
<code>VkViewportWScalingNV</code> structures, which define the <strong>W</strong> scaling
parameters for the corresponding viewport.
If the viewport <strong>W</strong> scaling state is dynamic, this member is ignored.</p>
</li>
</ul>
</div>
</div>
<div class="sect3">
<h4 id="_description_701">Description</h4>
<div class="sidebarblock">
<div class="content">
<div class="title">Valid Usage (Implicit)</div>
<div class="ulist">
<ul>
<li>
<p><a id="VUID-VkPipelineViewportWScalingStateCreateInfoNV-sType-sType"></a> <code>sType</code> <strong class="purple">must</strong> be <code>VK_STRUCTURE_TYPE_PIPELINE_VIEWPORT_W_SCALING_STATE_CREATE_INFO_NV</code></p>
</li>
<li>
<p><a id="VUID-VkPipelineViewportWScalingStateCreateInfoNV-viewportCount-arraylength"></a> <code>viewportCount</code> <strong class="purple">must</strong> be greater than <code>0</code></p>
</li>
</ul>
</div>
</div>
</div>
</div>
<div class="sect3">
<h4 id="_see_also_701">See Also</h4>
<div class="paragraph">
<p><code>VkBool32</code>, <a href="#VkStructureType">VkStructureType</a>, <a href="#VkViewportWScalingNV">VkViewportWScalingNV</a></p>
</div>
</div>
<div class="sect3">
<h4 id="_document_notes_701">Document Notes</h4>
<div class="paragraph">
<p>For more information, see the Vulkan Specification at URL</p>
</div>
<div class="paragraph">
<p><a href="https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VkPipelineViewportWScalingStateCreateInfoNV" class="bare">https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VkPipelineViewportWScalingStateCreateInfoNV</a></p>
</div>
<div class="paragraph">
<p>This page is extracted from the Vulkan Specification.
Fixes and changes should be made to the Specification, not directly.</p>
</div>
<div style="page-break-after: always;"></div>
</div>
</div>
<div class="sect2">
<h3 id="_vkpresentframetokenggp3">VkPresentFrameTokenGGP(3)</h3>
<div class="sect3">
<h4 id="_name_702">Name</h4>
<div class="paragraph">
<p>VkPresentFrameTokenGGP - The Google Games Platform frame token</p>
</div>
</div>
<div class="sect3">
<h4 id="_c_specification_702">C Specification</h4>
<div class="paragraph">
<p>When the <code><a href="vkspec.html#VK_GGP_frame_token" class="bare">html/vkspec.html#VK_GGP_frame_token</a></code> extension is enabled, a Google Games
Platform frame token <strong class="purple">can</strong> be specified when presenting an image to a
swapchain by including the <code>VkPresentFrameTokenGGP</code> structure in the
<code>pNext</code> chain of the <code>VkPresentInfoKHR</code> structure.</p>
</div>
<div class="paragraph">
<p>The <code>VkPresentFrameTokenGGP</code> structure is defined as:</p>
</div>
<div id="VkPresentFrameTokenGGP" class="listingblock">
<div class="content">
<pre class="highlight"><code class="language-c++" data-lang="c++">typedef struct VkPresentFrameTokenGGP {
    VkStructureType    sType;
    const void*        pNext;
    GgpFrameToken      frameToken;
} VkPresentFrameTokenGGP;</code></pre>
</div>
</div>
</div>
<div class="sect3">
<h4 id="_members_339">Members</h4>
<div class="ulist">
<ul>
<li>
<p><code>sType</code> is the type of this structure.</p>
</li>
<li>
<p><code>pNext</code> is <code>NULL</code> or a pointer to an extension-specific structure.</p>
</li>
<li>
<p><code>frameToken</code> is the Google Games Platform frame token.</p>
</li>
</ul>
</div>
</div>
<div class="sect3">
<h4 id="_description_702">Description</h4>
<div class="sidebarblock">
<div class="content">
<div class="title">Valid Usage</div>
<div class="ulist">
<ul>
<li>
<p><a id="VUID-VkPresentFrameTokenGGP-frameToken-02680"></a>
<code>frameToken</code> <strong class="purple">must</strong> be a valid <code>GgpFrameToken</code></p>
</li>
</ul>
</div>
</div>
</div>
<div class="sidebarblock">
<div class="content">
<div class="title">Valid Usage (Implicit)</div>
<div class="ulist">
<ul>
<li>
<p><a id="VUID-VkPresentFrameTokenGGP-sType-sType"></a> <code>sType</code> <strong class="purple">must</strong> be <code>VK_STRUCTURE_TYPE_PRESENT_FRAME_TOKEN_GGP</code></p>
</li>
</ul>
</div>
</div>
</div>
</div>
<div class="sect3">
<h4 id="_see_also_702">See Also</h4>
<div class="paragraph">
<p><a href="#VkStructureType">VkStructureType</a></p>
</div>
</div>
<div class="sect3">
<h4 id="_document_notes_702">Document Notes</h4>
<div class="paragraph">
<p>For more information, see the Vulkan Specification at URL</p>
</div>
<div class="paragraph">
<p><a href="https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VkPresentFrameTokenGGP" class="bare">https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VkPresentFrameTokenGGP</a></p>
</div>
<div class="paragraph">
<p>This page is extracted from the Vulkan Specification.
Fixes and changes should be made to the Specification, not directly.</p>
</div>
<div style="page-break-after: always;"></div>
</div>
</div>
<div class="sect2">
<h3 id="_vkpresentinfokhr3">VkPresentInfoKHR(3)</h3>
<div class="sect3">
<h4 id="_name_703">Name</h4>
<div class="paragraph">
<p>VkPresentInfoKHR - Structure describing parameters of a queue presentation</p>
</div>
</div>
<div class="sect3">
<h4 id="_c_specification_703">C Specification</h4>
<div class="paragraph">
<p>The <code>VkPresentInfoKHR</code> structure is defined as:</p>
</div>
<div id="VkPresentInfoKHR" class="listingblock">
<div class="content">
<pre class="highlight"><code class="language-c++" data-lang="c++">typedef struct VkPresentInfoKHR {
    VkStructureType          sType;
    const void*              pNext;
    uint32_t                 waitSemaphoreCount;
    const VkSemaphore*       pWaitSemaphores;
    uint32_t                 swapchainCount;
    const VkSwapchainKHR*    pSwapchains;
    const uint32_t*          pImageIndices;
    VkResult*                pResults;
} VkPresentInfoKHR;</code></pre>
</div>
</div>
</div>
<div class="sect3">
<h4 id="_members_340">Members</h4>
<div class="ulist">
<ul>
<li>
<p><code>sType</code> is the type of this structure.</p>
</li>
<li>
<p><code>pNext</code> is <code>NULL</code> or a pointer to an extension-specific structure.</p>
</li>
<li>
<p><code>waitSemaphoreCount</code> is the number of semaphores to wait for before
issuing the present request.
The number <strong class="purple">may</strong> be zero.</p>
</li>
<li>
<p><code>pWaitSemaphores</code>, if not <code>NULL</code>, is an array of <a href="#VkSemaphore">VkSemaphore</a>
objects with <code>waitSemaphoreCount</code> entries, and specifies the
semaphores to wait for before issuing the present request.</p>
</li>
<li>
<p><code>swapchainCount</code> is the number of swapchains being presented to by
this command.</p>
</li>
<li>
<p><code>pSwapchains</code> is an array of <a href="#VkSwapchainKHR">VkSwapchainKHR</a> objects with
<code>swapchainCount</code> entries.
A given swapchain <strong class="purple">must</strong> not appear in this list more than once.</p>
</li>
<li>
<p><code>pImageIndices</code> is an array of indices into the array of each
swapchain&#8217;s presentable images, with <code>swapchainCount</code> entries.
Each entry in this array identifies the image to present on the
corresponding entry in the <code>pSwapchains</code> array.</p>
</li>
<li>
<p><code>pResults</code> is an array of <a href="#VkResult">VkResult</a> typed elements with
<code>swapchainCount</code> entries.
Applications that do not need per-swapchain results <strong class="purple">can</strong> use <code>NULL</code> for
<code>pResults</code>.
If non-<code>NULL</code>, each entry in <code>pResults</code> will be set to the
<a href="#VkResult">VkResult</a> for presenting the swapchain corresponding to the same
index in <code>pSwapchains</code>.</p>
</li>
</ul>
</div>
</div>
<div class="sect3">
<h4 id="_description_703">Description</h4>
<div class="paragraph">
<p>Before an application <strong class="purple">can</strong> present an image, the image&#8217;s layout <strong class="purple">must</strong> be
transitioned to the <code>VK_IMAGE_LAYOUT_PRESENT_SRC_KHR</code>
layout, or for a shared presentable image the
<code>VK_IMAGE_LAYOUT_SHARED_PRESENT_KHR</code>
layout.</p>
</div>
<div class="admonitionblock note">
<table>
<tr>
<td class="icon">
<i class="fa icon-note" title="Note"></i>
</td>
<td class="content">
<div class="title">Note</div>
<div class="paragraph">
<p>When transitioning the image to
<code>VK_IMAGE_LAYOUT_SHARED_PRESENT_KHR</code> or
<code>VK_IMAGE_LAYOUT_PRESENT_SRC_KHR</code>, there is no need to delay subsequent
processing, or perform any visibility operations (as <a href="#vkQueuePresentKHR">vkQueuePresentKHR</a>
performs automatic visibility operations).
To achieve this, the <code>dstAccessMask</code> member of the
<a href="#VkImageMemoryBarrier">VkImageMemoryBarrier</a> <strong class="purple">should</strong> be set to <code>0</code>, and the <code>dstStageMask</code>
parameter <strong class="purple">should</strong> be set to <code>VK_PIPELINE_STAGE_BOTTOM_OF_PIPE_BIT</code>.</p>
</div>
</td>
</tr>
</table>
</div>
<div class="sidebarblock">
<div class="content">
<div class="title">Valid Usage</div>
<div class="ulist">
<ul>
<li>
<p><a id="VUID-VkPresentInfoKHR-pImageIndices-01430"></a>
Each element of <code>pImageIndices</code> <strong class="purple">must</strong> be the index of a presentable
image acquired from the swapchain specified by the corresponding element
of the <code>pSwapchains</code> array, and the presented image subresource
<strong class="purple">must</strong> be in the <code>VK_IMAGE_LAYOUT_PRESENT_SRC_KHR</code> or
<code>VK_IMAGE_LAYOUT_SHARED_PRESENT_KHR</code> layout at the time the
operation is executed on a <code>VkDevice</code></p>
</li>
</ul>
</div>
</div>
</div>
<div class="sidebarblock">
<div class="content">
<div class="title">Valid Usage (Implicit)</div>
<div class="ulist">
<ul>
<li>
<p><a id="VUID-VkPresentInfoKHR-sType-sType"></a> <code>sType</code> <strong class="purple">must</strong> be <code>VK_STRUCTURE_TYPE_PRESENT_INFO_KHR</code></p>
</li>
<li>
<p><a id="VUID-VkPresentInfoKHR-pNext-pNext"></a> Each <code>pNext</code> member of any structure (including this one) in the <code>pNext</code> chain <strong class="purple">must</strong> be either <code>NULL</code> or a pointer to a valid instance of <a href="#VkDeviceGroupPresentInfoKHR">VkDeviceGroupPresentInfoKHR</a>, <a href="#VkDisplayPresentInfoKHR">VkDisplayPresentInfoKHR</a>, <a href="#VkPresentFrameTokenGGP">VkPresentFrameTokenGGP</a>, <a href="#VkPresentRegionsKHR">VkPresentRegionsKHR</a>, or <a href="#VkPresentTimesInfoGOOGLE">VkPresentTimesInfoGOOGLE</a></p>
</li>
<li>
<p><a id="VUID-VkPresentInfoKHR-sType-unique"></a> Each <code>sType</code> member in the <code>pNext</code> chain <strong class="purple">must</strong> be unique</p>
</li>
<li>
<p><a id="VUID-VkPresentInfoKHR-pWaitSemaphores-parameter"></a> If <code>waitSemaphoreCount</code> is not <code>0</code>, <code>pWaitSemaphores</code> <strong class="purple">must</strong> be a valid pointer to an array of <code>waitSemaphoreCount</code> valid <code>VkSemaphore</code> handles</p>
</li>
<li>
<p><a id="VUID-VkPresentInfoKHR-pSwapchains-parameter"></a> <code>pSwapchains</code> <strong class="purple">must</strong> be a valid pointer to an array of <code>swapchainCount</code> valid <code>VkSwapchainKHR</code> handles</p>
</li>
<li>
<p><a id="VUID-VkPresentInfoKHR-pImageIndices-parameter"></a> <code>pImageIndices</code> <strong class="purple">must</strong> be a valid pointer to an array of <code>swapchainCount</code> <code>uint32_t</code> values</p>
</li>
<li>
<p><a id="VUID-VkPresentInfoKHR-pResults-parameter"></a> If <code>pResults</code> is not <code>NULL</code>, <code>pResults</code> <strong class="purple">must</strong> be a valid pointer to an array of <code>swapchainCount</code> <a href="#VkResult">VkResult</a> values</p>
</li>
<li>
<p><a id="VUID-VkPresentInfoKHR-swapchainCount-arraylength"></a> <code>swapchainCount</code> <strong class="purple">must</strong> be greater than <code>0</code></p>
</li>
<li>
<p><a id="VUID-VkPresentInfoKHR-commonparent"></a> Both of the elements of <code>pSwapchains</code>, and the elements of <code>pWaitSemaphores</code> that are valid handles <strong class="purple">must</strong> have been created, allocated, or retrieved from the same <code>VkInstance</code></p>
</li>
</ul>
</div>
</div>
</div>
</div>
<div class="sect3">
<h4 id="_see_also_703">See Also</h4>
<div class="paragraph">
<p><a href="#VkResult">VkResult</a>, <a href="#VkSemaphore">VkSemaphore</a>, <a href="#VkStructureType">VkStructureType</a>, <a href="#VkSwapchainKHR">VkSwapchainKHR</a>, <a href="#vkQueuePresentKHR">vkQueuePresentKHR</a></p>
</div>
</div>
<div class="sect3">
<h4 id="_document_notes_703">Document Notes</h4>
<div class="paragraph">
<p>For more information, see the Vulkan Specification at URL</p>
</div>
<div class="paragraph">
<p><a href="https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VkPresentInfoKHR" class="bare">https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VkPresentInfoKHR</a></p>
</div>
<div class="paragraph">
<p>This page is extracted from the Vulkan Specification.
Fixes and changes should be made to the Specification, not directly.</p>
</div>
<div style="page-break-after: always;"></div>
</div>
</div>
<div class="sect2">
<h3 id="_vkpresentregionkhr3">VkPresentRegionKHR(3)</h3>
<div class="sect3">
<h4 id="_name_704">Name</h4>
<div class="paragraph">
<p>VkPresentRegionKHR - Structure containing rectangular region changed by vkQueuePresentKHR for a given VkImage</p>
</div>
</div>
<div class="sect3">
<h4 id="_c_specification_704">C Specification</h4>
<div class="paragraph">
<p>For a given image and swapchain, the region to present is specified by the
<code>VkPresentRegionKHR</code> structure, which is defined as:</p>
</div>
<div id="VkPresentRegionKHR" class="listingblock">
<div class="content">
<pre class="highlight"><code class="language-c++" data-lang="c++">typedef struct VkPresentRegionKHR {
    uint32_t                 rectangleCount;
    const VkRectLayerKHR*    pRectangles;
} VkPresentRegionKHR;</code></pre>
</div>
</div>
</div>
<div class="sect3">
<h4 id="_members_341">Members</h4>
<div class="ulist">
<ul>
<li>
<p><code>rectangleCount</code> is the number of rectangles in <code>pRectangles</code>,
or zero if the entire image has changed and should be presented.</p>
</li>
<li>
<p><code>pRectangles</code> is either <code>NULL</code> or a pointer to an array of
<code>VkRectLayerKHR</code> structures.
The <code>VkRectLayerKHR</code> structure is the framebuffer coordinates, plus
layer, of a portion of a presentable image that has changed and <strong class="purple">must</strong> be
presented.
If non-<code>NULL</code>, each entry in <code>pRectangles</code> is a rectangle of the
given image that has changed since the last image was presented to the
given swapchain.</p>
</li>
</ul>
</div>
</div>
<div class="sect3">
<h4 id="_description_704">Description</h4>
<div class="sidebarblock">
<div class="content">
<div class="title">Valid Usage (Implicit)</div>
<div class="ulist">
<ul>
<li>
<p><a id="VUID-VkPresentRegionKHR-pRectangles-parameter"></a> If <code>rectangleCount</code> is not <code>0</code>, and <code>pRectangles</code> is not <code>NULL</code>, <code>pRectangles</code> <strong class="purple">must</strong> be a valid pointer to an array of <code>rectangleCount</code> valid <code>VkRectLayerKHR</code> structures</p>
</li>
</ul>
</div>
</div>
</div>
</div>
<div class="sect3">
<h4 id="_see_also_704">See Also</h4>
<div class="paragraph">
<p><a href="#VkPresentRegionsKHR">VkPresentRegionsKHR</a>, <a href="#VkRectLayerKHR">VkRectLayerKHR</a></p>
</div>
</div>
<div class="sect3">
<h4 id="_document_notes_704">Document Notes</h4>
<div class="paragraph">
<p>For more information, see the Vulkan Specification at URL</p>
</div>
<div class="paragraph">
<p><a href="https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VkPresentRegionKHR" class="bare">https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VkPresentRegionKHR</a></p>
</div>
<div class="paragraph">
<p>This page is extracted from the Vulkan Specification.
Fixes and changes should be made to the Specification, not directly.</p>
</div>
<div style="page-break-after: always;"></div>
</div>
</div>
<div class="sect2">
<h3 id="_vkpresentregionskhr3">VkPresentRegionsKHR(3)</h3>
<div class="sect3">
<h4 id="_name_705">Name</h4>
<div class="paragraph">
<p>VkPresentRegionsKHR - Structure hint of rectangular regions changed by vkQueuePresentKHR</p>
</div>
</div>
<div class="sect3">
<h4 id="_c_specification_705">C Specification</h4>
<div class="paragraph">
<p>When the <code>VK_KHR_incremental_present</code> extension is enabled, additional
fields <strong class="purple">can</strong> be specified that allow an application to specify that only
certain rectangular regions of the presentable images of a swapchain are
changed.
This is an optimization hint that a presentation engine <strong class="purple">may</strong> use to only
update the region of a surface that is actually changing.
The application still <strong class="purple">must</strong> ensure that all pixels of a presented image
contain the desired values, in case the presentation engine ignores this
hint.
An application <strong class="purple">can</strong> provide this hint by including the
<code>VkPresentRegionsKHR</code> structure in the <code>pNext</code> chain of the
<code>VkPresentInfoKHR</code> structure.</p>
</div>
<div class="paragraph">
<p>The <code>VkPresentRegionsKHR</code> structure is defined as:</p>
</div>
<div id="VkPresentRegionsKHR" class="listingblock">
<div class="content">
<pre class="highlight"><code class="language-c++" data-lang="c++">typedef struct VkPresentRegionsKHR {
    VkStructureType              sType;
    const void*                  pNext;
    uint32_t                     swapchainCount;
    const VkPresentRegionKHR*    pRegions;
} VkPresentRegionsKHR;</code></pre>
</div>
</div>
</div>
<div class="sect3">
<h4 id="_members_342">Members</h4>
<div class="ulist">
<ul>
<li>
<p><code>sType</code> is the type of this structure.</p>
</li>
<li>
<p><code>pNext</code> is <code>NULL</code> or a pointer to an extension-specific structure.</p>
</li>
<li>
<p><code>swapchainCount</code> is the number of swapchains being presented to by
this command.</p>
</li>
<li>
<p><code>pRegions</code> is <code>NULL</code> or a pointer to an array of
<code>VkPresentRegionKHR</code> elements with <code>swapchainCount</code> entries.
If not <code>NULL</code>, each element of <code>pRegions</code> contains the region that
has changed since the last present to the swapchain in the corresponding
entry in the <code>VkPresentInfoKHR</code>::<code>pSwapchains</code> array.</p>
</li>
</ul>
</div>
</div>
<div class="sect3">
<h4 id="_description_705">Description</h4>
<div class="sidebarblock">
<div class="content">
<div class="title">Valid Usage</div>
<div class="ulist">
<ul>
<li>
<p><a id="VUID-VkPresentRegionsKHR-swapchainCount-01260"></a>
<code>swapchainCount</code> <strong class="purple">must</strong> be the same value as
<code>VkPresentInfoKHR</code>::<code>swapchainCount</code>, where
<code>VkPresentInfoKHR</code> is in the <code>pNext</code> chain of this
<code>VkPresentRegionsKHR</code> structure</p>
</li>
</ul>
</div>
</div>
</div>
<div class="sidebarblock">
<div class="content">
<div class="title">Valid Usage (Implicit)</div>
<div class="ulist">
<ul>
<li>
<p><a id="VUID-VkPresentRegionsKHR-sType-sType"></a> <code>sType</code> <strong class="purple">must</strong> be <code>VK_STRUCTURE_TYPE_PRESENT_REGIONS_KHR</code></p>
</li>
<li>
<p><a id="VUID-VkPresentRegionsKHR-pRegions-parameter"></a> If <code>pRegions</code> is not <code>NULL</code>, <code>pRegions</code> <strong class="purple">must</strong> be a valid pointer to an array of <code>swapchainCount</code> valid <code>VkPresentRegionKHR</code> structures</p>
</li>
<li>
<p><a id="VUID-VkPresentRegionsKHR-swapchainCount-arraylength"></a> <code>swapchainCount</code> <strong class="purple">must</strong> be greater than <code>0</code></p>
</li>
</ul>
</div>
</div>
</div>
</div>
<div class="sect3">
<h4 id="_see_also_705">See Also</h4>
<div class="paragraph">
<p><a href="#VkPresentRegionKHR">VkPresentRegionKHR</a>, <a href="#VkStructureType">VkStructureType</a></p>
</div>
</div>
<div class="sect3">
<h4 id="_document_notes_705">Document Notes</h4>
<div class="paragraph">
<p>For more information, see the Vulkan Specification at URL</p>
</div>
<div class="paragraph">
<p><a href="https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VkPresentRegionsKHR" class="bare">https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VkPresentRegionsKHR</a></p>
</div>
<div class="paragraph">
<p>This page is extracted from the Vulkan Specification.
Fixes and changes should be made to the Specification, not directly.</p>
</div>
<div style="page-break-after: always;"></div>
</div>
</div>
<div class="sect2">
<h3 id="_vkpresenttimegoogle3">VkPresentTimeGOOGLE(3)</h3>
<div class="sect3">
<h4 id="_name_706">Name</h4>
<div class="paragraph">
<p>VkPresentTimeGOOGLE - The earliest time image should be presented</p>
</div>
</div>
<div class="sect3">
<h4 id="_c_specification_706">C Specification</h4>
<div class="paragraph">
<p>The <code>VkPresentTimeGOOGLE</code> structure is defined as:</p>
</div>
<div id="VkPresentTimeGOOGLE" class="listingblock">
<div class="content">
<pre class="highlight"><code class="language-c++" data-lang="c++">typedef struct VkPresentTimeGOOGLE {
    uint32_t    presentID;
    uint64_t    desiredPresentTime;
} VkPresentTimeGOOGLE;</code></pre>
</div>
</div>
</div>
<div class="sect3">
<h4 id="_members_343">Members</h4>
<div class="ulist">
<ul>
<li>
<p><code>presentID</code> is an application-provided identification value, that
<strong class="purple">can</strong> be used with the results of
<a href="#vkGetPastPresentationTimingGOOGLE">vkGetPastPresentationTimingGOOGLE</a>, in order to uniquely identify
this present.
In order to be useful to the application, it <strong class="purple">should</strong> be unique within
some period of time that is meaningful to the application.</p>
</li>
<li>
<p><code>desiredPresentTime</code> specifies that the image given <strong class="purple">should</strong> not be
displayed to the user any earlier than this time.
<code>desiredPresentTime</code> is a time in nanoseconds, relative to a
monotonically-increasing clock (e.g. <code>CLOCK_MONOTONIC</code> (see
clock_gettime(2)) on Android and Linux).
A value of zero specifies that the presentation engine <strong class="purple">may</strong> display the
image at any time.
This is useful when the application desires to provide <code>presentID</code>,
but does not need a specific <code>desiredPresentTime</code>.</p>
</li>
</ul>
</div>
</div>
<div class="sect3">
<h4 id="_description_706">Description</h4>

</div>
<div class="sect3">
<h4 id="_see_also_706">See Also</h4>
<div class="paragraph">
<p><a href="#VkPresentTimesInfoGOOGLE">VkPresentTimesInfoGOOGLE</a></p>
</div>
</div>
<div class="sect3">
<h4 id="_document_notes_706">Document Notes</h4>
<div class="paragraph">
<p>For more information, see the Vulkan Specification at URL</p>
</div>
<div class="paragraph">
<p><a href="https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VkPresentTimeGOOGLE" class="bare">https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VkPresentTimeGOOGLE</a></p>
</div>
<div class="paragraph">
<p>This page is extracted from the Vulkan Specification.
Fixes and changes should be made to the Specification, not directly.</p>
</div>
<div style="page-break-after: always;"></div>
</div>
</div>
<div class="sect2">
<h3 id="_vkpresenttimesinfogoogle3">VkPresentTimesInfoGOOGLE(3)</h3>
<div class="sect3">
<h4 id="_name_707">Name</h4>
<div class="paragraph">
<p>VkPresentTimesInfoGOOGLE - The earliest time each image should be presented</p>
</div>
</div>
<div class="sect3">
<h4 id="_c_specification_707">C Specification</h4>
<div class="paragraph">
<p>When the <code><a href="vkspec.html#VK_GOOGLE_display_timing" class="bare">html/vkspec.html#VK_GOOGLE_display_timing</a></code> extension is enabled, additional
fields <strong class="purple">can</strong> be specified that allow an application to specify the earliest
time that an image should be displayed.
This allows an application to avoid stutter that is caused by an image being
displayed earlier than planned.
Such stuttering can occur with both fixed and variable-refresh-rate
displays, because stuttering occurs when the geometry is not correctly
positioned for when the image is displayed.
An application <strong class="purple">can</strong> instruct the presentation engine that an image should
not be displayed earlier than a specified time by including the
<code>VkPresentTimesInfoGOOGLE</code> structure in the <code>pNext</code> chain of the
<code>VkPresentInfoKHR</code> structure.</p>
</div>
<div class="paragraph">
<p>The <code>VkPresentTimesInfoGOOGLE</code> structure is defined as:</p>
</div>
<div id="VkPresentTimesInfoGOOGLE" class="listingblock">
<div class="content">
<pre class="highlight"><code class="language-c++" data-lang="c++">typedef struct VkPresentTimesInfoGOOGLE {
    VkStructureType               sType;
    const void*                   pNext;
    uint32_t                      swapchainCount;
    const VkPresentTimeGOOGLE*    pTimes;
} VkPresentTimesInfoGOOGLE;</code></pre>
</div>
</div>
</div>
<div class="sect3">
<h4 id="_members_344">Members</h4>
<div class="ulist">
<ul>
<li>
<p><code>sType</code> is the type of this structure.</p>
</li>
<li>
<p><code>pNext</code> is <code>NULL</code> or a pointer to an extension-specific structure.</p>
</li>
<li>
<p><code>swapchainCount</code> is the number of swapchains being presented to by
this command.</p>
</li>
<li>
<p><code>pTimes</code> is <code>NULL</code> or a pointer to an array of
<code>VkPresentTimeGOOGLE</code> elements with <code>swapchainCount</code> entries.
If not <code>NULL</code>, each element of <code>pTimes</code> contains the earliest time
to present the image corresponding to the entry in the
<code>VkPresentInfoKHR</code>::<code>pImageIndices</code> array.</p>
</li>
</ul>
</div>
</div>
<div class="sect3">
<h4 id="_description_707">Description</h4>
<div class="sidebarblock">
<div class="content">
<div class="title">Valid Usage</div>
<div class="ulist">
<ul>
<li>
<p><a id="VUID-VkPresentTimesInfoGOOGLE-swapchainCount-01247"></a>
<code>swapchainCount</code> <strong class="purple">must</strong> be the same value as
<code>VkPresentInfoKHR</code>::<code>swapchainCount</code>, where
<code>VkPresentInfoKHR</code> is in the <code>pNext</code> chain of this
<code>VkPresentTimesInfoGOOGLE</code> structure.</p>
</li>
</ul>
</div>
</div>
</div>
<div class="sidebarblock">
<div class="content">
<div class="title">Valid Usage (Implicit)</div>
<div class="ulist">
<ul>
<li>
<p><a id="VUID-VkPresentTimesInfoGOOGLE-sType-sType"></a> <code>sType</code> <strong class="purple">must</strong> be <code>VK_STRUCTURE_TYPE_PRESENT_TIMES_INFO_GOOGLE</code></p>
</li>
<li>
<p><a id="VUID-VkPresentTimesInfoGOOGLE-pTimes-parameter"></a> If <code>pTimes</code> is not <code>NULL</code>, <code>pTimes</code> <strong class="purple">must</strong> be a valid pointer to an array of <code>swapchainCount</code> <code>VkPresentTimeGOOGLE</code> structures</p>
</li>
<li>
<p><a id="VUID-VkPresentTimesInfoGOOGLE-swapchainCount-arraylength"></a> <code>swapchainCount</code> <strong class="purple">must</strong> be greater than <code>0</code></p>
</li>
</ul>
</div>
</div>
</div>
</div>
<div class="sect3">
<h4 id="_see_also_707">See Also</h4>
<div class="paragraph">
<p><a href="#VkPresentTimeGOOGLE">VkPresentTimeGOOGLE</a>, <a href="#VkStructureType">VkStructureType</a></p>
</div>
</div>
<div class="sect3">
<h4 id="_document_notes_707">Document Notes</h4>
<div class="paragraph">
<p>For more information, see the Vulkan Specification at URL</p>
</div>
<div class="paragraph">
<p><a href="https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VkPresentTimesInfoGOOGLE" class="bare">https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VkPresentTimesInfoGOOGLE</a></p>
</div>
<div class="paragraph">
<p>This page is extracted from the Vulkan Specification.
Fixes and changes should be made to the Specification, not directly.</p>
</div>
<div style="page-break-after: always;"></div>
</div>
</div>
<div class="sect2">
<h3 id="_vkprotectedsubmitinfo3">VkProtectedSubmitInfo(3)</h3>
<div class="sect3">
<h4 id="_name_708">Name</h4>
<div class="paragraph">
<p>VkProtectedSubmitInfo - Structure indicating whether the submission is protected</p>
</div>
</div>
<div class="sect3">
<h4 id="_c_specification_708">C Specification</h4>
<div class="paragraph">
<p>If the <code>pNext</code> chain of <a href="#VkSubmitInfo">VkSubmitInfo</a> includes a
<code>VkProtectedSubmitInfo</code> structure, then the structure indicates whether
the batch is protected.
The <code>VkProtectedSubmitInfo</code> structure is defined as:</p>
</div>
<div id="VkProtectedSubmitInfo" class="listingblock">
<div class="content">
<pre class="highlight"><code class="language-c++" data-lang="c++">typedef struct VkProtectedSubmitInfo {
    VkStructureType    sType;
    const void*        pNext;
    VkBool32           protectedSubmit;
} VkProtectedSubmitInfo;</code></pre>
</div>
</div>
</div>
<div class="sect3">
<h4 id="_members_345">Members</h4>
<div class="ulist">
<ul>
<li>
<p><code>protectedSubmit</code> specifies whether the batch is protected.
If <code>protectedSubmit</code> is <code>VK_TRUE</code>, the batch is protected.
If <code>protectedSubmit</code> is <code>VK_FALSE</code>, the batch is unprotected.
If the <code>VkSubmitInfo</code>::<code>pNext</code> chain does not contain this
structure, the batch is unprotected.</p>
</li>
</ul>
</div>
</div>
<div class="sect3">
<h4 id="_description_708">Description</h4>
<div class="sidebarblock">
<div class="content">
<div class="title">Valid Usage</div>
<div class="ulist">
<ul>
<li>
<p><a id="VUID-VkProtectedSubmitInfo-protectedSubmit-01816"></a>
If the protected memory feature is not enabled, <code>protectedSubmit</code>
<strong class="purple">must</strong> not be <code>VK_TRUE</code>.</p>
</li>
<li>
<p><a id="VUID-VkProtectedSubmitInfo-protectedSubmit-01817"></a>
If <code>protectedSubmit</code> is <code>VK_TRUE</code>, then each element of the
<code>pCommandBuffers</code> array <strong class="purple">must</strong> be a protected command buffer.</p>
</li>
<li>
<p><a id="VUID-VkProtectedSubmitInfo-protectedSubmit-01818"></a>
If <code>protectedSubmit</code> is <code>VK_FALSE</code>, then each element of the
<code>pCommandBuffers</code> array <strong class="purple">must</strong> be an unprotected command buffer.</p>
</li>
<li>
<p><a id="VUID-VkProtectedSubmitInfo-pNext-01819"></a>
If the <code>VkSubmitInfo</code>::<code>pNext</code> chain does not include a
<code>VkProtectedSubmitInfo</code> structure, then each element of the command
buffer of the <code>pCommandBuffers</code> array <strong class="purple">must</strong> be an unprotected
command buffer.</p>
</li>
</ul>
</div>
</div>
</div>
<div class="sidebarblock">
<div class="content">
<div class="title">Valid Usage (Implicit)</div>
<div class="ulist">
<ul>
<li>
<p><a id="VUID-VkProtectedSubmitInfo-sType-sType"></a> <code>sType</code> <strong class="purple">must</strong> be <code>VK_STRUCTURE_TYPE_PROTECTED_SUBMIT_INFO</code></p>
</li>
</ul>
</div>
</div>
</div>
</div>
<div class="sect3">
<h4 id="_see_also_708">See Also</h4>
<div class="paragraph">
<p><code>VkBool32</code>, <a href="#VkStructureType">VkStructureType</a></p>
</div>
</div>
<div class="sect3">
<h4 id="_document_notes_708">Document Notes</h4>
<div class="paragraph">
<p>For more information, see the Vulkan Specification at URL</p>
</div>
<div class="paragraph">
<p><a href="https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VkProtectedSubmitInfo" class="bare">https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VkProtectedSubmitInfo</a></p>
</div>
<div class="paragraph">
<p>This page is extracted from the Vulkan Specification.
Fixes and changes should be made to the Specification, not directly.</p>
</div>
<div style="page-break-after: always;"></div>
</div>
</div>
<div class="sect2">
<h3 id="_vkpushconstantrange3">VkPushConstantRange(3)</h3>
<div class="sect3">
<h4 id="_name_709">Name</h4>
<div class="paragraph">
<p>VkPushConstantRange - Structure specifying a push constant range</p>
</div>
</div>
<div class="sect3">
<h4 id="_c_specification_709">C Specification</h4>
<div class="paragraph">
<p>The <code>VkPushConstantRange</code> structure is defined as:</p>
</div>
<div id="VkPushConstantRange" class="listingblock">
<div class="content">
<pre class="highlight"><code class="language-c++" data-lang="c++">typedef struct VkPushConstantRange {
    VkShaderStageFlags    stageFlags;
    uint32_t              offset;
    uint32_t              size;
} VkPushConstantRange;</code></pre>
</div>
</div>
</div>
<div class="sect3">
<h4 id="_members_346">Members</h4>
<div class="ulist">
<ul>
<li>
<p><code>stageFlags</code> is a set of stage flags describing the shader stages
that will access a range of push constants.
If a particular stage is not included in the range, then accessing
members of that range of push constants from the corresponding shader
stage will return undefined values.</p>
</li>
<li>
<p><code>offset</code> and <code>size</code> are the start offset and size, respectively,
consumed by the range.
Both <code>offset</code> and <code>size</code> are in units of bytes and <strong class="purple">must</strong> be a
multiple of 4.
The layout of the push constant variables is specified in the shader.</p>
</li>
</ul>
</div>
</div>
<div class="sect3">
<h4 id="_description_709">Description</h4>
<div class="sidebarblock">
<div class="content">
<div class="title">Valid Usage</div>
<div class="ulist">
<ul>
<li>
<p><a id="VUID-VkPushConstantRange-offset-00294"></a>
<code>offset</code> <strong class="purple">must</strong> be less than
<code>VkPhysicalDeviceLimits</code>::<code>maxPushConstantsSize</code></p>
</li>
<li>
<p><a id="VUID-VkPushConstantRange-offset-00295"></a>
<code>offset</code> <strong class="purple">must</strong> be a multiple of <code>4</code></p>
</li>
<li>
<p><a id="VUID-VkPushConstantRange-size-00296"></a>
<code>size</code> <strong class="purple">must</strong> be greater than <code>0</code></p>
</li>
<li>
<p><a id="VUID-VkPushConstantRange-size-00297"></a>
<code>size</code> <strong class="purple">must</strong> be a multiple of <code>4</code></p>
</li>
<li>
<p><a id="VUID-VkPushConstantRange-size-00298"></a>
<code>size</code> <strong class="purple">must</strong> be less than or equal to
<code>VkPhysicalDeviceLimits</code>::<code>maxPushConstantsSize</code> minus
<code>offset</code></p>
</li>
</ul>
</div>
</div>
</div>
<div class="sidebarblock">
<div class="content">
<div class="title">Valid Usage (Implicit)</div>
<div class="ulist">
<ul>
<li>
<p><a id="VUID-VkPushConstantRange-stageFlags-parameter"></a> <code>stageFlags</code> <strong class="purple">must</strong> be a valid combination of <a href="#VkShaderStageFlagBits">VkShaderStageFlagBits</a> values</p>
</li>
<li>
<p><a id="VUID-VkPushConstantRange-stageFlags-requiredbitmask"></a> <code>stageFlags</code> <strong class="purple">must</strong> not be <code>0</code></p>
</li>
</ul>
</div>
</div>
</div>
</div>
<div class="sect3">
<h4 id="_see_also_709">See Also</h4>
<div class="paragraph">
<p><a href="#VkPipelineLayoutCreateInfo">VkPipelineLayoutCreateInfo</a>, <a href="#VkShaderStageFlags">VkShaderStageFlags</a></p>
</div>
</div>
<div class="sect3">
<h4 id="_document_notes_709">Document Notes</h4>
<div class="paragraph">
<p>For more information, see the Vulkan Specification at URL</p>
</div>
<div class="paragraph">
<p><a href="https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VkPushConstantRange" class="bare">https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VkPushConstantRange</a></p>
</div>
<div class="paragraph">
<p>This page is extracted from the Vulkan Specification.
Fixes and changes should be made to the Specification, not directly.</p>
</div>
<div style="page-break-after: always;"></div>
</div>
</div>
<div class="sect2">
<h3 id="_vkquerypoolcreateinfo3">VkQueryPoolCreateInfo(3)</h3>
<div class="sect3">
<h4 id="_name_710">Name</h4>
<div class="paragraph">
<p>VkQueryPoolCreateInfo - Structure specifying parameters of a newly created query pool</p>
</div>
</div>
<div class="sect3">
<h4 id="_c_specification_710">C Specification</h4>
<div class="paragraph">
<p>The <code>VkQueryPoolCreateInfo</code> structure is defined as:</p>
</div>
<div id="VkQueryPoolCreateInfo" class="listingblock">
<div class="content">
<pre class="highlight"><code class="language-c++" data-lang="c++">typedef struct VkQueryPoolCreateInfo {
    VkStructureType                  sType;
    const void*                      pNext;
    VkQueryPoolCreateFlags           flags;
    VkQueryType                      queryType;
    uint32_t                         queryCount;
    VkQueryPipelineStatisticFlags    pipelineStatistics;
} VkQueryPoolCreateInfo;</code></pre>
</div>
</div>
</div>
<div class="sect3">
<h4 id="_members_347">Members</h4>
<div class="ulist">
<ul>
<li>
<p><code>sType</code> is the type of this structure.</p>
</li>
<li>
<p><code>pNext</code> is <code>NULL</code> or a pointer to an extension-specific structure.</p>
</li>
<li>
<p><code>flags</code> is reserved for future use.</p>
</li>
<li>
<p><code>queryType</code> is a <a href="#VkQueryType">VkQueryType</a> value specifying the type of
queries managed by the pool.</p>
</li>
<li>
<p><code>queryCount</code> is the number of queries managed by the pool.</p>
</li>
<li>
<p><code>pipelineStatistics</code> is a bitmask of
<a href="#VkQueryPipelineStatisticFlagBits">VkQueryPipelineStatisticFlagBits</a> specifying which counters will be
returned in queries on the new pool, as described below in
<a href="vkspec.html#queries-pipestats" class="bare">html/vkspec.html#queries-pipestats</a>.</p>
</li>
</ul>
</div>
</div>
<div class="sect3">
<h4 id="_description_710">Description</h4>
<div class="paragraph">
<p><code>pipelineStatistics</code> is ignored if <code>queryType</code> is not
<code>VK_QUERY_TYPE_PIPELINE_STATISTICS</code>.</p>
</div>
<div class="sidebarblock">
<div class="content">
<div class="title">Valid Usage</div>
<div class="ulist">
<ul>
<li>
<p><a id="VUID-VkQueryPoolCreateInfo-queryType-00791"></a>
If the <a href="vkspec.html#features-pipelineStatisticsQuery">pipeline statistics queries</a>
feature is not enabled, <code>queryType</code> <strong class="purple">must</strong> not be
<code>VK_QUERY_TYPE_PIPELINE_STATISTICS</code></p>
</li>
<li>
<p><a id="VUID-VkQueryPoolCreateInfo-queryType-00792"></a>
If <code>queryType</code> is <code>VK_QUERY_TYPE_PIPELINE_STATISTICS</code>,
<code>pipelineStatistics</code> <strong class="purple">must</strong> be a valid combination of
<a href="#VkQueryPipelineStatisticFlagBits">VkQueryPipelineStatisticFlagBits</a> values</p>
</li>
</ul>
</div>
</div>
</div>
<div class="sidebarblock">
<div class="content">
<div class="title">Valid Usage (Implicit)</div>
<div class="ulist">
<ul>
<li>
<p><a id="VUID-VkQueryPoolCreateInfo-sType-sType"></a> <code>sType</code> <strong class="purple">must</strong> be <code>VK_STRUCTURE_TYPE_QUERY_POOL_CREATE_INFO</code></p>
</li>
<li>
<p><a id="VUID-VkQueryPoolCreateInfo-pNext-pNext"></a> <code>pNext</code> <strong class="purple">must</strong> be <code>NULL</code></p>
</li>
<li>
<p><a id="VUID-VkQueryPoolCreateInfo-flags-zerobitmask"></a> <code>flags</code> <strong class="purple">must</strong> be <code>0</code></p>
</li>
<li>
<p><a id="VUID-VkQueryPoolCreateInfo-queryType-parameter"></a> <code>queryType</code> <strong class="purple">must</strong> be a valid <a href="#VkQueryType">VkQueryType</a> value</p>
</li>
</ul>
</div>
</div>
</div>
</div>
<div class="sect3">
<h4 id="_see_also_710">See Also</h4>
<div class="paragraph">
<p><a href="#VkQueryPipelineStatisticFlags">VkQueryPipelineStatisticFlags</a>, <a href="#VkQueryPoolCreateFlags">VkQueryPoolCreateFlags</a>, <a href="#VkQueryType">VkQueryType</a>, <a href="#VkStructureType">VkStructureType</a>, <a href="#vkCreateQueryPool">vkCreateQueryPool</a></p>
</div>
</div>
<div class="sect3">
<h4 id="_document_notes_710">Document Notes</h4>
<div class="paragraph">
<p>For more information, see the Vulkan Specification at URL</p>
</div>
<div class="paragraph">
<p><a href="https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VkQueryPoolCreateInfo" class="bare">https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VkQueryPoolCreateInfo</a></p>
</div>
<div class="paragraph">
<p>This page is extracted from the Vulkan Specification.
Fixes and changes should be made to the Specification, not directly.</p>
</div>
<div style="page-break-after: always;"></div>
</div>
</div>
<div class="sect2">
<h3 id="_vkqueuefamilycheckpointpropertiesnv3">VkQueueFamilyCheckpointPropertiesNV(3)</h3>
<div class="sect3">
<h4 id="_name_711">Name</h4>
<div class="paragraph">
<p>VkQueueFamilyCheckpointPropertiesNV - return structure for queue family checkpoint info query</p>
</div>
</div>
<div class="sect3">
<h4 id="_c_specification_711">C Specification</h4>
<div class="paragraph">
<p>The <a href="#VkQueueFamilyCheckpointPropertiesNV">VkQueueFamilyCheckpointPropertiesNV</a> structure is defined as:</p>
</div>
<div id="VkQueueFamilyCheckpointPropertiesNV" class="listingblock">
<div class="content">
<pre class="highlight"><code class="language-c++" data-lang="c++">typedef struct VkQueueFamilyCheckpointPropertiesNV {
    VkStructureType         sType;
    void*                   pNext;
    VkPipelineStageFlags    checkpointExecutionStageMask;
} VkQueueFamilyCheckpointPropertiesNV;</code></pre>
</div>
</div>
</div>
<div class="sect3">
<h4 id="_members_348">Members</h4>
<div class="ulist">
<ul>
<li>
<p><code>sType</code> is the type of this structure.</p>
</li>
<li>
<p><code>pNext</code> is <code>NULL</code> or a pointer to an extension-specific structure.</p>
</li>
<li>
<p><code>checkpointExecutionStageMask</code> is a mask indicating which pipeline
stages the implementation can execute checkpoint markers in.</p>
</li>
</ul>
</div>
</div>
<div class="sect3">
<h4 id="_description_711">Description</h4>
<div class="sidebarblock">
<div class="content">
<div class="title">Valid Usage (Implicit)</div>
<div class="ulist">
<ul>
<li>
<p><a id="VUID-VkQueueFamilyCheckpointPropertiesNV-sType-sType"></a> <code>sType</code> <strong class="purple">must</strong> be <code>VK_STRUCTURE_TYPE_QUEUE_FAMILY_CHECKPOINT_PROPERTIES_NV</code></p>
</li>
</ul>
</div>
</div>
</div>
</div>
<div class="sect3">
<h4 id="_see_also_711">See Also</h4>
<div class="paragraph">
<p><a href="#VkPipelineStageFlags">VkPipelineStageFlags</a>, <a href="#VkStructureType">VkStructureType</a></p>
</div>
</div>
<div class="sect3">
<h4 id="_document_notes_711">Document Notes</h4>
<div class="paragraph">
<p>For more information, see the Vulkan Specification at URL</p>
</div>
<div class="paragraph">
<p><a href="https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VkQueueFamilyCheckpointPropertiesNV" class="bare">https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VkQueueFamilyCheckpointPropertiesNV</a></p>
</div>
<div class="paragraph">
<p>This page is extracted from the Vulkan Specification.
Fixes and changes should be made to the Specification, not directly.</p>
</div>
<div style="page-break-after: always;"></div>
</div>
</div>
<div class="sect2">
<h3 id="_vkqueuefamilyproperties3">VkQueueFamilyProperties(3)</h3>
<div class="sect3">
<h4 id="_name_712">Name</h4>
<div class="paragraph">
<p>VkQueueFamilyProperties - Structure providing information about a queue family</p>
</div>
</div>
<div class="sect3">
<h4 id="_c_specification_712">C Specification</h4>
<div class="paragraph">
<p>The <code>VkQueueFamilyProperties</code> structure is defined as:</p>
</div>
<div id="VkQueueFamilyProperties" class="listingblock">
<div class="content">
<pre class="highlight"><code class="language-c++" data-lang="c++">typedef struct VkQueueFamilyProperties {
    VkQueueFlags    queueFlags;
    uint32_t        queueCount;
    uint32_t        timestampValidBits;
    VkExtent3D      minImageTransferGranularity;
} VkQueueFamilyProperties;</code></pre>
</div>
</div>
</div>
<div class="sect3">
<h4 id="_members_349">Members</h4>
<div class="ulist">
<ul>
<li>
<p><code>queueFlags</code> is a bitmask of <a href="#VkQueueFlagBits">VkQueueFlagBits</a> indicating
capabilities of the queues in this queue family.</p>
</li>
<li>
<p><code>queueCount</code> is the unsigned integer count of queues in this queue
family.
Each queue family <strong class="purple">must</strong> support at least one queue.</p>
</li>
<li>
<p><code>timestampValidBits</code> is the unsigned integer count of meaningful
bits in the timestamps written via <code>vkCmdWriteTimestamp</code>.
The valid range for the count is 36..64 bits, or a value of 0,
indicating no support for timestamps.
Bits outside the valid range are guaranteed to be zeros.</p>
</li>
<li>
<p><code>minImageTransferGranularity</code> is the minimum granularity supported
for image transfer operations on the queues in this queue family.</p>
</li>
</ul>
</div>
</div>
<div class="sect3">
<h4 id="_description_712">Description</h4>
<div class="paragraph">
<p>The value returned in <code>minImageTransferGranularity</code> has a unit of
compressed texel blocks for images having a block-compressed format, and a
unit of texels otherwise.</p>
</div>
<div class="paragraph">
<p>Possible values of <code>minImageTransferGranularity</code> are:</p>
</div>
<div class="ulist">
<ul>
<li>
<p><span class="eq">(0,0,0)</span> which indicates that only whole mip levels <strong class="purple">must</strong> be
transferred using the image transfer operations on the corresponding
queues.
In this case, the following restrictions apply to all offset and extent
parameters of image transfer operations:</p>
<div class="ulist">
<ul>
<li>
<p>The <code>x</code>, <code>y</code>, and <code>z</code> members of a <a href="#VkOffset3D">VkOffset3D</a>
parameter <strong class="purple">must</strong> always be zero.</p>
</li>
<li>
<p>The <code>width</code>, <code>height</code>, and <code>depth</code> members of a
<a href="#VkExtent3D">VkExtent3D</a> parameter <strong class="purple">must</strong> always match the width, height, and
depth of the image subresource corresponding to the parameter,
respectively.</p>
</li>
</ul>
</div>
</li>
<li>
<p><span class="eq">(A<sub>x</sub>, A<sub>y</sub>, A<sub>z</sub>)</span> where <span class="eq">A<sub>x</sub></span>, <span class="eq">A<sub>y</sub></span>, and <span class="eq">A<sub>z</sub></span>
are all integer powers of two.
In this case the following restrictions apply to all image transfer
operations:</p>
<div class="ulist">
<ul>
<li>
<p><code>x</code>, <code>y</code>, and <code>z</code> of a <a href="#VkOffset3D">VkOffset3D</a> parameter <strong class="purple">must</strong> be
integer multiples of <span class="eq">A<sub>x</sub></span>, <span class="eq">A<sub>y</sub></span>, and <span class="eq">A<sub>z</sub></span>,
respectively.</p>
</li>
<li>
<p><code>width</code> of a <a href="#VkExtent3D">VkExtent3D</a> parameter <strong class="purple">must</strong> be an integer
multiple of <span class="eq">A<sub>x</sub></span>, or else <span class="eq"><code>x</code> +  <code>width</code></span> <strong class="purple">must</strong>
equal the width of the image subresource corresponding to the
parameter.</p>
</li>
<li>
<p><code>height</code> of a <a href="#VkExtent3D">VkExtent3D</a> parameter <strong class="purple">must</strong> be an integer
multiple of <span class="eq">A<sub>y</sub></span>, or else <span class="eq"><code>y</code> +  <code>height</code></span> <strong class="purple">must</strong>
equal the height of the image subresource corresponding to the
parameter.</p>
</li>
<li>
<p><code>depth</code> of a <a href="#VkExtent3D">VkExtent3D</a> parameter <strong class="purple">must</strong> be an integer
multiple of <span class="eq">A<sub>z</sub></span>, or else <span class="eq"><code>z</code> +  <code>depth</code></span> <strong class="purple">must</strong>
equal the depth of the image subresource corresponding to the
parameter.</p>
</li>
<li>
<p>If the format of the image corresponding to the parameters is one of
the block-compressed formats then for the purposes of the above
calculations the granularity <strong class="purple">must</strong> be scaled up by the compressed texel
block dimensions.</p>
</li>
</ul>
</div>
</li>
</ul>
</div>
<div class="paragraph">
<p>Queues supporting graphics and/or compute operations <strong class="purple">must</strong> report
<span class="eq">(1,1,1)</span> in <code>minImageTransferGranularity</code>, meaning that there are
no additional restrictions on the granularity of image transfer operations
for these queues.
Other queues supporting image transfer operations are only <strong class="purple">required</strong> to
support whole mip level transfers, thus <code>minImageTransferGranularity</code>
for queues belonging to such queue families <strong class="purple">may</strong> be <span class="eq">(0,0,0)</span>.</p>
</div>
<div class="paragraph">
<p>The <a href="vkspec.html#memory-device">Device Memory</a> section describes memory properties
queried from the physical device.</p>
</div>
<div class="paragraph">
<p>For physical device feature queries see the <a href="vkspec.html#features">Features</a> chapter.</p>
</div>
</div>
<div class="sect3">
<h4 id="_see_also_712">See Also</h4>
<div class="paragraph">
<p><a href="#VkExtent3D">VkExtent3D</a>, <a href="#VkQueueFamilyProperties2">VkQueueFamilyProperties2</a>, <a href="#VkQueueFlags">VkQueueFlags</a>, <a href="#vkGetPhysicalDeviceQueueFamilyProperties">vkGetPhysicalDeviceQueueFamilyProperties</a></p>
</div>
</div>
<div class="sect3">
<h4 id="_document_notes_712">Document Notes</h4>
<div class="paragraph">
<p>For more information, see the Vulkan Specification at URL</p>
</div>
<div class="paragraph">
<p><a href="https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VkQueueFamilyProperties" class="bare">https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VkQueueFamilyProperties</a></p>
</div>
<div class="paragraph">
<p>This page is extracted from the Vulkan Specification.
Fixes and changes should be made to the Specification, not directly.</p>
</div>
<div style="page-break-after: always;"></div>
</div>
</div>
<div class="sect2">
<h3 id="_vkqueuefamilyproperties23">VkQueueFamilyProperties2(3)</h3>
<div class="sect3">
<h4 id="_name_713">Name</h4>
<div class="paragraph">
<p>VkQueueFamilyProperties2 - Structure providing information about a queue family</p>
</div>
</div>
<div class="sect3">
<h4 id="_c_specification_713">C Specification</h4>
<div class="paragraph">
<p>The <code>VkQueueFamilyProperties2</code> structure is defined as:</p>
</div>
<div id="VkQueueFamilyProperties2" class="listingblock">
<div class="content">
<pre class="highlight"><code class="language-c++" data-lang="c++">typedef struct VkQueueFamilyProperties2 {
    VkStructureType            sType;
    void*                      pNext;
    VkQueueFamilyProperties    queueFamilyProperties;
} VkQueueFamilyProperties2;</code></pre>
</div>
</div>
<div class="paragraph">
<p>or the equivalent</p>
</div>
<div id="VkQueueFamilyProperties2KHR" class="listingblock">
<div class="content">
<pre class="highlight"><code class="language-c++" data-lang="c++">typedef VkQueueFamilyProperties2 VkQueueFamilyProperties2KHR;</code></pre>
</div>
</div>
</div>
<div class="sect3">
<h4 id="_members_350">Members</h4>
<div class="ulist">
<ul>
<li>
<p><code>sType</code> is the type of this structure.</p>
</li>
<li>
<p><code>pNext</code> is <code>NULL</code> or a pointer to an extension-specific structure.</p>
</li>
<li>
<p><code>queueFamilyProperties</code> is a structure of type
<a href="#VkQueueFamilyProperties">VkQueueFamilyProperties</a> which is populated with the same values as
in <a href="#vkGetPhysicalDeviceQueueFamilyProperties">vkGetPhysicalDeviceQueueFamilyProperties</a>.</p>
</li>
</ul>
</div>
</div>
<div class="sect3">
<h4 id="_description_713">Description</h4>
<div class="sidebarblock">
<div class="content">
<div class="title">Valid Usage (Implicit)</div>
<div class="ulist">
<ul>
<li>
<p><a id="VUID-VkQueueFamilyProperties2-sType-sType"></a> <code>sType</code> <strong class="purple">must</strong> be <code>VK_STRUCTURE_TYPE_QUEUE_FAMILY_PROPERTIES_2</code></p>
</li>
<li>
<p><a id="VUID-VkQueueFamilyProperties2-pNext-pNext"></a> <code>pNext</code> <strong class="purple">must</strong> be <code>NULL</code> or a pointer to a valid instance of <a href="#VkQueueFamilyCheckpointPropertiesNV">VkQueueFamilyCheckpointPropertiesNV</a></p>
</li>
</ul>
</div>
</div>
</div>
</div>
<div class="sect3">
<h4 id="_see_also_713">See Also</h4>
<div class="paragraph">
<p><a href="#VkQueueFamilyProperties">VkQueueFamilyProperties</a>, <a href="#VkStructureType">VkStructureType</a>, <a href="#vkGetPhysicalDeviceQueueFamilyProperties2">vkGetPhysicalDeviceQueueFamilyProperties2</a>, <a href="#vkGetPhysicalDeviceQueueFamilyProperties2KHR">vkGetPhysicalDeviceQueueFamilyProperties2KHR</a></p>
</div>
</div>
<div class="sect3">
<h4 id="_document_notes_713">Document Notes</h4>
<div class="paragraph">
<p>For more information, see the Vulkan Specification at URL</p>
</div>
<div class="paragraph">
<p><a href="https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VkQueueFamilyProperties2" class="bare">https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VkQueueFamilyProperties2</a></p>
</div>
<div class="paragraph">
<p>This page is extracted from the Vulkan Specification.
Fixes and changes should be made to the Specification, not directly.</p>
</div>
<div style="page-break-after: always;"></div>
</div>
</div>
<div class="sect2">
<h3 id="_vkraytracingpipelinecreateinfonv3">VkRayTracingPipelineCreateInfoNV(3)</h3>
<div class="sect3">
<h4 id="_name_714">Name</h4>
<div class="paragraph">
<p>VkRayTracingPipelineCreateInfoNV - Structure specifying parameters of a newly created ray tracing pipeline</p>
</div>
</div>
<div class="sect3">
<h4 id="_c_specification_714">C Specification</h4>
<div class="paragraph">
<p>The <code>VkRayTracingPipelineCreateInfoNV</code> structure is defined as:</p>
</div>
<div id="VkRayTracingPipelineCreateInfoNV" class="listingblock">
<div class="content">
<pre class="highlight"><code class="language-c++" data-lang="c++">typedef struct VkRayTracingPipelineCreateInfoNV {
    VkStructureType                               sType;
    const void*                                   pNext;
    VkPipelineCreateFlags                         flags;
    uint32_t                                      stageCount;
    const VkPipelineShaderStageCreateInfo*        pStages;
    uint32_t                                      groupCount;
    const VkRayTracingShaderGroupCreateInfoNV*    pGroups;
    uint32_t                                      maxRecursionDepth;
    VkPipelineLayout                              layout;
    VkPipeline                                    basePipelineHandle;
    int32_t                                       basePipelineIndex;
} VkRayTracingPipelineCreateInfoNV;</code></pre>
</div>
</div>
</div>
<div class="sect3">
<h4 id="_members_351">Members</h4>
<div class="ulist">
<ul>
<li>
<p><code>sType</code> is the type of this structure.</p>
</li>
<li>
<p><code>pNext</code> is <code>NULL</code> or a pointer to an extension-specific structure.</p>
</li>
<li>
<p><code>flags</code> is a bitmask of <a href="#VkPipelineCreateFlagBits">VkPipelineCreateFlagBits</a> specifying
how the pipeline will be generated.</p>
</li>
<li>
<p><code>stageCount</code> is the number of entries in the <code>pStages</code> array.</p>
</li>
<li>
<p><code>pStages</code> is an array of size <code>stageCount</code> structures of type
<a href="#VkPipelineShaderStageCreateInfo">VkPipelineShaderStageCreateInfo</a> describing the set of the shader
stages to be included in the ray tracing pipeline.</p>
</li>
<li>
<p><code>groupCount</code> is the number of entries in the <code>pGroups</code> array.</p>
</li>
<li>
<p><code>pGroups</code> is an array of size <code>groupCount</code> structures of type
<a href="#VkRayTracingShaderGroupCreateInfoNV">VkRayTracingShaderGroupCreateInfoNV</a> describing the set of the
shader stages to be included in each shader group in the ray tracing
pipeline.</p>
</li>
<li>
<p><code>maxRecursionDepth</code> is the maximum recursion that will be called
from this pipeline.</p>
</li>
<li>
<p><code>layout</code> is the description of binding locations used by both the
pipeline and descriptor sets used with the pipeline.</p>
</li>
<li>
<p><code>basePipelineHandle</code> is a pipeline to derive from.</p>
</li>
<li>
<p><code>basePipelineIndex</code> is an index into the <code>pCreateInfos</code>
parameter to use as a pipeline to derive from.</p>
</li>
</ul>
</div>
</div>
<div class="sect3">
<h4 id="_description_714">Description</h4>
<div class="paragraph">
<p>The parameters <code>basePipelineHandle</code> and <code>basePipelineIndex</code> are
described in more detail in <a href="vkspec.html#pipelines-pipeline-derivatives">Pipeline
Derivatives</a>.</p>
</div>
<div class="sidebarblock">
<div class="content">
<div class="title">Valid Usage</div>
<div class="ulist">
<ul>
<li>
<p><a id="VUID-VkRayTracingPipelineCreateInfoNV-flags-02404"></a>
If <code>flags</code> contains the <code>VK_PIPELINE_CREATE_DERIVATIVE_BIT</code>
flag, and <code>basePipelineIndex</code> is <code>-1</code>, <code>basePipelineHandle</code>
<strong class="purple">must</strong> be a valid handle to a ray tracing <code>VkPipeline</code></p>
</li>
<li>
<p><a id="VUID-VkRayTracingPipelineCreateInfoNV-flags-02405"></a>
If <code>flags</code> contains the <code>VK_PIPELINE_CREATE_DERIVATIVE_BIT</code>
flag, and <code>basePipelineHandle</code> is <a href="#VK_NULL_HANDLE">VK_NULL_HANDLE</a>,
<code>basePipelineIndex</code> <strong class="purple">must</strong> be a valid index into the calling
command&#8217;s <code>pCreateInfos</code> parameter</p>
</li>
<li>
<p><a id="VUID-VkRayTracingPipelineCreateInfoNV-flags-02406"></a>
If <code>flags</code> contains the <code>VK_PIPELINE_CREATE_DERIVATIVE_BIT</code>
flag, and <code>basePipelineIndex</code> is not <code>-1</code>, <code>basePipelineHandle</code>
<strong class="purple">must</strong> be <a href="#VK_NULL_HANDLE">VK_NULL_HANDLE</a></p>
</li>
<li>
<p><a id="VUID-VkRayTracingPipelineCreateInfoNV-flags-02407"></a>
If <code>flags</code> contains the <code>VK_PIPELINE_CREATE_DERIVATIVE_BIT</code>
flag, and <code>basePipelineHandle</code> is not <a href="#VK_NULL_HANDLE">VK_NULL_HANDLE</a>,
<code>basePipelineIndex</code> <strong class="purple">must</strong> be <code>-1</code></p>
</li>
<li>
<p><a id="VUID-VkRayTracingPipelineCreateInfoNV-stage-02408"></a>
The <code>stage</code> member of one element of <code>pStages</code> <strong class="purple">must</strong> be
<code>VK_SHADER_STAGE_RAYGEN_BIT_NV</code></p>
</li>
<li>
<p><a id="VUID-VkRayTracingPipelineCreateInfoNV-pStages-02409"></a>
The shader code for the entry points identified by <code>pStages</code>, and
the rest of the state identified by this structure <strong class="purple">must</strong> adhere to the
pipeline linking rules described in the <a href="vkspec.html#interfaces">Shader Interfaces</a>
chapter</p>
</li>
<li>
<p><a id="VUID-VkRayTracingPipelineCreateInfoNV-layout-02410"></a>
<code>layout</code> <strong class="purple">must</strong> be
<a href="vkspec.html#descriptorsets-pipelinelayout-consistency">consistent</a> with all
shaders specified in <code>pStages</code></p>
</li>
<li>
<p><a id="VUID-VkRayTracingPipelineCreateInfoNV-layout-02411"></a>
The number of resources in <code>layout</code> accessible to each shader stage
that is used by the pipeline <strong class="purple">must</strong> be less than or equal to
<a href="#VkPhysicalDeviceLimits">VkPhysicalDeviceLimits</a>::<code>maxPerStageResources</code></p>
</li>
<li>
<p><a id="VUID-VkRayTracingPipelineCreateInfoNV-maxRecursionDepth-02412"></a>
<code>maxRecursionDepth</code> <strong class="purple">must</strong> be less than or equal to
<a href="#VkPhysicalDeviceRayTracingPropertiesNV">VkPhysicalDeviceRayTracingPropertiesNV</a>::<code>maxRecursionDepth</code></p>
</li>
</ul>
</div>
</div>
</div>
<div class="sidebarblock">
<div class="content">
<div class="title">Valid Usage (Implicit)</div>
<div class="ulist">
<ul>
<li>
<p><a id="VUID-VkRayTracingPipelineCreateInfoNV-sType-sType"></a> <code>sType</code> <strong class="purple">must</strong> be <code>VK_STRUCTURE_TYPE_RAY_TRACING_PIPELINE_CREATE_INFO_NV</code></p>
</li>
<li>
<p><a id="VUID-VkRayTracingPipelineCreateInfoNV-pNext-pNext"></a> <code>pNext</code> <strong class="purple">must</strong> be <code>NULL</code> or a pointer to a valid instance of <a href="#VkPipelineCreationFeedbackCreateInfoEXT">VkPipelineCreationFeedbackCreateInfoEXT</a></p>
</li>
<li>
<p><a id="VUID-VkRayTracingPipelineCreateInfoNV-flags-parameter"></a> <code>flags</code> <strong class="purple">must</strong> be a valid combination of <a href="#VkPipelineCreateFlagBits">VkPipelineCreateFlagBits</a> values</p>
</li>
<li>
<p><a id="VUID-VkRayTracingPipelineCreateInfoNV-pStages-parameter"></a> <code>pStages</code> <strong class="purple">must</strong> be a valid pointer to an array of <code>stageCount</code> valid <code>VkPipelineShaderStageCreateInfo</code> structures</p>
</li>
<li>
<p><a id="VUID-VkRayTracingPipelineCreateInfoNV-pGroups-parameter"></a> <code>pGroups</code> <strong class="purple">must</strong> be a valid pointer to an array of <code>groupCount</code> valid <code>VkRayTracingShaderGroupCreateInfoNV</code> structures</p>
</li>
<li>
<p><a id="VUID-VkRayTracingPipelineCreateInfoNV-layout-parameter"></a> <code>layout</code> <strong class="purple">must</strong> be a valid <code>VkPipelineLayout</code> handle</p>
</li>
<li>
<p><a id="VUID-VkRayTracingPipelineCreateInfoNV-stageCount-arraylength"></a> <code>stageCount</code> <strong class="purple">must</strong> be greater than <code>0</code></p>
</li>
<li>
<p><a id="VUID-VkRayTracingPipelineCreateInfoNV-groupCount-arraylength"></a> <code>groupCount</code> <strong class="purple">must</strong> be greater than <code>0</code></p>
</li>
<li>
<p><a id="VUID-VkRayTracingPipelineCreateInfoNV-commonparent"></a> Both of <code>basePipelineHandle</code>, and <code>layout</code> that are valid handles <strong class="purple">must</strong> have been created, allocated, or retrieved from the same <code>VkDevice</code></p>
</li>
</ul>
</div>
</div>
</div>
</div>
<div class="sect3">
<h4 id="_see_also_714">See Also</h4>
<div class="paragraph">
<p><a href="#VkPipeline">VkPipeline</a>, <a href="#VkPipelineCreateFlags">VkPipelineCreateFlags</a>, <a href="#VkPipelineLayout">VkPipelineLayout</a>, <a href="#VkPipelineShaderStageCreateInfo">VkPipelineShaderStageCreateInfo</a>, <a href="#VkRayTracingShaderGroupCreateInfoNV">VkRayTracingShaderGroupCreateInfoNV</a>, <a href="#VkStructureType">VkStructureType</a>, <a href="#vkCreateRayTracingPipelinesNV">vkCreateRayTracingPipelinesNV</a></p>
</div>
</div>
<div class="sect3">
<h4 id="_document_notes_714">Document Notes</h4>
<div class="paragraph">
<p>For more information, see the Vulkan Specification at URL</p>
</div>
<div class="paragraph">
<p><a href="https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VkRayTracingPipelineCreateInfoNV" class="bare">https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VkRayTracingPipelineCreateInfoNV</a></p>
</div>
<div class="paragraph">
<p>This page is extracted from the Vulkan Specification.
Fixes and changes should be made to the Specification, not directly.</p>
</div>
<div style="page-break-after: always;"></div>
</div>
</div>
<div class="sect2">
<h3 id="_vkraytracingshadergroupcreateinfonv3">VkRayTracingShaderGroupCreateInfoNV(3)</h3>
<div class="sect3">
<h4 id="_name_715">Name</h4>
<div class="paragraph">
<p>VkRayTracingShaderGroupCreateInfoNV - Structure specifying shaders in a shader group</p>
</div>
</div>
<div class="sect3">
<h4 id="_c_specification_715">C Specification</h4>
<div class="paragraph">
<p>The <code>VkRayTracingShaderGroupCreateInfoNV</code> structure is defined as:</p>
</div>
<div id="VkRayTracingShaderGroupCreateInfoNV" class="listingblock">
<div class="content">
<pre class="highlight"><code class="language-c++" data-lang="c++">typedef struct VkRayTracingShaderGroupCreateInfoNV {
    VkStructureType                  sType;
    const void*                      pNext;
    VkRayTracingShaderGroupTypeNV    type;
    uint32_t                         generalShader;
    uint32_t                         closestHitShader;
    uint32_t                         anyHitShader;
    uint32_t                         intersectionShader;
} VkRayTracingShaderGroupCreateInfoNV;</code></pre>
</div>
</div>
</div>
<div class="sect3">
<h4 id="_members_352">Members</h4>
<div class="ulist">
<ul>
<li>
<p><code>sType</code> is the type of this structure.</p>
</li>
<li>
<p><code>pNext</code> is <code>NULL</code> or a pointer to an extension-specific structure.</p>
</li>
<li>
<p><code>type</code> is the type of hit group specified in this structure.</p>
</li>
<li>
<p><code>generalShader</code> is the index of the ray generation, miss, or
callable shader from
<code>VkRayTracingPipelineCreateInfoNV</code>::<code>pStages</code> in the group if
the shader group has <code>type</code> of
<code>VK_RAY_TRACING_SHADER_GROUP_TYPE_GENERAL_NV</code> and
<code>VK_SHADER_UNUSED_NV</code> otherwise.</p>
</li>
<li>
<p><code>closestHitShader</code> is the optional index of the closest hit shader
from <code>VkRayTracingPipelineCreateInfoNV</code>::<code>pStages</code> in the group
if the shader group has <code>type</code> of
<code>VK_RAY_TRACING_SHADER_GROUP_TYPE_TRIANGLES_HIT_GROUP_NV</code> or
<code>VK_RAY_TRACING_SHADER_GROUP_TYPE_PROCEDURAL_HIT_GROUP_NV</code> and
<code>VK_SHADER_UNUSED_NV</code> otherwise.</p>
</li>
<li>
<p><code>anyHitShader</code> is the optional index of the any-hit shader from
<code>VkRayTracingPipelineCreateInfoNV</code>::<code>pStages</code> in the group if
the shader group has <code>type</code> of
<code>VK_RAY_TRACING_SHADER_GROUP_TYPE_TRIANGLES_HIT_GROUP_NV</code> or
<code>VK_RAY_TRACING_SHADER_GROUP_TYPE_PROCEDURAL_HIT_GROUP_NV</code> and
<code>VK_SHADER_UNUSED_NV</code> otherwise.</p>
</li>
<li>
<p><code>intersectionShader</code> is the index of the intersection shader from
<code>VkRayTracingPipelineCreateInfoNV</code>::<code>pStages</code> in the group if
the shader group has <code>type</code> of
<code>VK_RAY_TRACING_SHADER_GROUP_TYPE_PROCEDURAL_HIT_GROUP_NV</code> and
<code>VK_SHADER_UNUSED_NV</code> otherwise.</p>
</li>
</ul>
</div>
</div>
<div class="sect3">
<h4 id="_description_715">Description</h4>
<div class="sidebarblock">
<div class="content">
<div class="title">Valid Usage</div>
<div class="ulist">
<ul>
<li>
<p><a id="VUID-VkRayTracingShaderGroupCreateInfoNV-type-02413"></a>
If <code>type</code> is <code>VK_RAY_TRACING_SHADER_GROUP_TYPE_GENERAL_NV</code> then
<code>generalShader</code> <strong class="purple">must</strong> be a valid index into <code>pStages</code> referring
to a shader of <code>VK_SHADER_STAGE_RAYGEN_BIT_NV</code>,
<code>VK_SHADER_STAGE_MISS_BIT_NV</code>, or
<code>VK_SHADER_STAGE_CALLABLE_BIT_NV</code></p>
</li>
<li>
<p><a id="VUID-VkRayTracingShaderGroupCreateInfoNV-type-02414"></a>
If <code>type</code> is <code>VK_RAY_TRACING_SHADER_GROUP_TYPE_GENERAL_NV</code> then
<code>closestHitShader</code>, <code>anyHitShader</code>, and <code>intersectionShader</code>
<strong class="purple">must</strong> be <code>VK_SHADER_UNUSED_NV</code></p>
</li>
<li>
<p><a id="VUID-VkRayTracingShaderGroupCreateInfoNV-type-02415"></a>
If <code>type</code> is
<code>VK_RAY_TRACING_SHADER_GROUP_TYPE_PROCEDURAL_HIT_GROUP_NV</code> then
<code>intersectionShader</code> <strong class="purple">must</strong> be a valid index into <code>pStages</code>
referring to a shader of <code>VK_SHADER_STAGE_INTERSECTION_BIT_NV</code></p>
</li>
<li>
<p><a id="VUID-VkRayTracingShaderGroupCreateInfoNV-type-02416"></a>
If <code>type</code> is
<code>VK_RAY_TRACING_SHADER_GROUP_TYPE_TRIANGLES_HIT_GROUP_NV</code> then
<code>intersectionShader</code> <strong class="purple">must</strong> be <code>VK_SHADER_UNUSED_NV</code></p>
</li>
<li>
<p><a id="VUID-VkRayTracingShaderGroupCreateInfoNV-closestHitShader-02417"></a>
<code>closestHitShader</code> <strong class="purple">must</strong> be either <code>VK_SHADER_UNUSED_NV</code> or a
valid index into <code>pStages</code> referring to a shader of
<code>VK_SHADER_STAGE_CLOSEST_HIT_BIT_NV</code></p>
</li>
<li>
<p><a id="VUID-VkRayTracingShaderGroupCreateInfoNV-anyHitShader-02418"></a>
<code>anyHitShader</code> <strong class="purple">must</strong> be either <code>VK_SHADER_UNUSED_NV</code> or a valid
index into <code>pStages</code> referring to a shader of
<code>VK_SHADER_STAGE_ANY_HIT_BIT_NV</code></p>
</li>
</ul>
</div>
</div>
</div>
<div class="sidebarblock">
<div class="content">
<div class="title">Valid Usage (Implicit)</div>
<div class="ulist">
<ul>
<li>
<p><a id="VUID-VkRayTracingShaderGroupCreateInfoNV-sType-sType"></a> <code>sType</code> <strong class="purple">must</strong> be <code>VK_STRUCTURE_TYPE_RAY_TRACING_SHADER_GROUP_CREATE_INFO_NV</code></p>
</li>
<li>
<p><a id="VUID-VkRayTracingShaderGroupCreateInfoNV-pNext-pNext"></a> <code>pNext</code> <strong class="purple">must</strong> be <code>NULL</code></p>
</li>
<li>
<p><a id="VUID-VkRayTracingShaderGroupCreateInfoNV-type-parameter"></a> <code>type</code> <strong class="purple">must</strong> be a valid <a href="#VkRayTracingShaderGroupTypeNV">VkRayTracingShaderGroupTypeNV</a> value</p>
</li>
</ul>
</div>
</div>
</div>
</div>
<div class="sect3">
<h4 id="_see_also_715">See Also</h4>
<div class="paragraph">
<p><a href="#VkRayTracingPipelineCreateInfoNV">VkRayTracingPipelineCreateInfoNV</a>, <a href="#VkRayTracingShaderGroupTypeNV">VkRayTracingShaderGroupTypeNV</a>, <a href="#VkStructureType">VkStructureType</a></p>
</div>
</div>
<div class="sect3">
<h4 id="_document_notes_715">Document Notes</h4>
<div class="paragraph">
<p>For more information, see the Vulkan Specification at URL</p>
</div>
<div class="paragraph">
<p><a href="https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VkRayTracingShaderGroupCreateInfoNV" class="bare">https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VkRayTracingShaderGroupCreateInfoNV</a></p>
</div>
<div class="paragraph">
<p>This page is extracted from the Vulkan Specification.
Fixes and changes should be made to the Specification, not directly.</p>
</div>
<div style="page-break-after: always;"></div>
</div>
</div>
<div class="sect2">
<h3 id="_vkrect2d3">VkRect2D(3)</h3>
<div class="sect3">
<h4 id="_name_716">Name</h4>
<div class="paragraph">
<p>VkRect2D - Structure specifying a two-dimensional subregion</p>
</div>
</div>
<div class="sect3">
<h4 id="_c_specification_716">C Specification</h4>
<div class="paragraph">
<p>Rectangles are used to describe a specified rectangular region of pixels
within an image or framebuffer.
Rectangles include both an offset and an extent of the same dimensionality,
as described above.
Two-dimensional rectangles are defined by the structure</p>
</div>
<div id="VkRect2D" class="listingblock">
<div class="content">
<pre class="highlight"><code class="language-c++" data-lang="c++">typedef struct VkRect2D {
    VkOffset2D    offset;
    VkExtent2D    extent;
} VkRect2D;</code></pre>
</div>
</div>
</div>
<div class="sect3">
<h4 id="_members_353">Members</h4>
<div class="ulist">
<ul>
<li>
<p><code>offset</code> is a <a href="#VkOffset2D">VkOffset2D</a> specifying the rectangle offset.</p>
</li>
<li>
<p><code>extent</code> is a <a href="#VkExtent2D">VkExtent2D</a> specifying the rectangle extent.</p>
</li>
</ul>
</div>
</div>
<div class="sect3">
<h4 id="_description_716">Description</h4>

</div>
<div class="sect3">
<h4 id="_see_also_716">See Also</h4>
<div class="paragraph">
<p><a href="#VkBindImageMemoryDeviceGroupInfo">VkBindImageMemoryDeviceGroupInfo</a>, <a href="#VkClearRect">VkClearRect</a>, <a href="#VkDeviceGroupRenderPassBeginInfo">VkDeviceGroupRenderPassBeginInfo</a>, <a href="#VkDisplayPresentInfoKHR">VkDisplayPresentInfoKHR</a>, <a href="#VkExtent2D">VkExtent2D</a>, <a href="#VkOffset2D">VkOffset2D</a>, <a href="#VkPipelineDiscardRectangleStateCreateInfoEXT">VkPipelineDiscardRectangleStateCreateInfoEXT</a>, <a href="#VkPipelineViewportExclusiveScissorStateCreateInfoNV">VkPipelineViewportExclusiveScissorStateCreateInfoNV</a>, <a href="#VkPipelineViewportStateCreateInfo">VkPipelineViewportStateCreateInfo</a>, <a href="#VkRenderPassBeginInfo">VkRenderPassBeginInfo</a>, <a href="#vkCmdSetDiscardRectangleEXT">vkCmdSetDiscardRectangleEXT</a>, <a href="#vkCmdSetExclusiveScissorNV">vkCmdSetExclusiveScissorNV</a>, <a href="#vkCmdSetScissor">vkCmdSetScissor</a>, <a href="#vkGetPhysicalDevicePresentRectanglesKHR">vkGetPhysicalDevicePresentRectanglesKHR</a></p>
</div>
</div>
<div class="sect3">
<h4 id="_document_notes_716">Document Notes</h4>
<div class="paragraph">
<p>For more information, see the Vulkan Specification at URL</p>
</div>
<div class="paragraph">
<p><a href="https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VkRect2D" class="bare">https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VkRect2D</a></p>
</div>
<div class="paragraph">
<p>This page is extracted from the Vulkan Specification.
Fixes and changes should be made to the Specification, not directly.</p>
</div>
<div style="page-break-after: always;"></div>
</div>
</div>
<div class="sect2">
<h3 id="_vkrectlayerkhr3">VkRectLayerKHR(3)</h3>
<div class="sect3">
<h4 id="_name_717">Name</h4>
<div class="paragraph">
<p>VkRectLayerKHR - Structure containing a rectangle, including layer, changed by vkQueuePresentKHR for a given VkImage</p>
</div>
</div>
<div class="sect3">
<h4 id="_c_specification_717">C Specification</h4>
<div class="paragraph">
<p>The <code>VkRectLayerKHR</code> structure is defined as:</p>
</div>
<div id="VkRectLayerKHR" class="listingblock">
<div class="content">
<pre class="highlight"><code class="language-c++" data-lang="c++">typedef struct VkRectLayerKHR {
    VkOffset2D    offset;
    VkExtent2D    extent;
    uint32_t      layer;
} VkRectLayerKHR;</code></pre>
</div>
</div>
</div>
<div class="sect3">
<h4 id="_members_354">Members</h4>
<div class="ulist">
<ul>
<li>
<p><code>offset</code> is the origin of the rectangle, in pixels.</p>
</li>
<li>
<p><code>extent</code> is the size of the rectangle, in pixels.</p>
</li>
<li>
<p><code>layer</code> is the layer of the image.
For images with only one layer, the value of <code>layer</code> <strong class="purple">must</strong> be 0.</p>
</li>
</ul>
</div>
</div>
<div class="sect3">
<h4 id="_description_717">Description</h4>
<div class="sidebarblock">
<div class="content">
<div class="title">Valid Usage</div>
<div class="ulist">
<ul>
<li>
<p><a id="VUID-VkRectLayerKHR-offset-01261"></a>
The sum of <code>offset</code> and <code>extent</code> <strong class="purple">must</strong> be no greater than the
<code>imageExtent</code> member of the <code>VkSwapchainCreateInfoKHR</code> structure
given to <a href="#vkCreateSwapchainKHR">vkCreateSwapchainKHR</a>.</p>
</li>
<li>
<p><a id="VUID-VkRectLayerKHR-layer-01262"></a>
<code>layer</code> <strong class="purple">must</strong> be less than <code>imageArrayLayers</code> member of the
<code>VkSwapchainCreateInfoKHR</code> structure given to
<a href="#vkCreateSwapchainKHR">vkCreateSwapchainKHR</a>.</p>
</li>
</ul>
</div>
</div>
</div>
<div class="paragraph">
<p>Some platforms allow the size of a surface to change, and then scale the
pixels of the image to fit the surface.
<code>VkRectLayerKHR</code> specifies pixels of the swapchain&#8217;s image(s), which
will be constant for the life of the swapchain.</p>
</div>
</div>
<div class="sect3">
<h4 id="_see_also_717">See Also</h4>
<div class="paragraph">
<p><a href="#VkExtent2D">VkExtent2D</a>, <a href="#VkOffset2D">VkOffset2D</a>, <a href="#VkPresentRegionKHR">VkPresentRegionKHR</a></p>
</div>
</div>
<div class="sect3">
<h4 id="_document_notes_717">Document Notes</h4>
<div class="paragraph">
<p>For more information, see the Vulkan Specification at URL</p>
</div>
<div class="paragraph">
<p><a href="https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VkRectLayerKHR" class="bare">https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VkRectLayerKHR</a></p>
</div>
<div class="paragraph">
<p>This page is extracted from the Vulkan Specification.
Fixes and changes should be made to the Specification, not directly.</p>
</div>
<div style="page-break-after: always;"></div>
</div>
</div>
<div class="sect2">
<h3 id="_vkrefreshcycledurationgoogle3">VkRefreshCycleDurationGOOGLE(3)</h3>
<div class="sect3">
<h4 id="_name_718">Name</h4>
<div class="paragraph">
<p>VkRefreshCycleDurationGOOGLE - Structure containing the RC duration of a display</p>
</div>
</div>
<div class="sect3">
<h4 id="_c_specification_718">C Specification</h4>
<div class="paragraph">
<p>The <code>VkRefreshCycleDurationGOOGLE</code> structure is defined as:</p>
</div>
<div id="VkRefreshCycleDurationGOOGLE" class="listingblock">
<div class="content">
<pre class="highlight"><code class="language-c++" data-lang="c++">typedef struct VkRefreshCycleDurationGOOGLE {
    uint64_t    refreshDuration;
} VkRefreshCycleDurationGOOGLE;</code></pre>
</div>
</div>
</div>
<div class="sect3">
<h4 id="_members_355">Members</h4>
<div class="ulist">
<ul>
<li>
<p><code>refreshDuration</code> is the number of nanoseconds from the start of one
refresh cycle to the next.</p>
</li>
</ul>
</div>
</div>
<div class="sect3">
<h4 id="_description_718">Description</h4>

</div>
<div class="sect3">
<h4 id="_see_also_718">See Also</h4>
<div class="paragraph">
<p><a href="#vkGetRefreshCycleDurationGOOGLE">vkGetRefreshCycleDurationGOOGLE</a></p>
</div>
</div>
<div class="sect3">
<h4 id="_document_notes_718">Document Notes</h4>
<div class="paragraph">
<p>For more information, see the Vulkan Specification at URL</p>
</div>
<div class="paragraph">
<p><a href="https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VkRefreshCycleDurationGOOGLE" class="bare">https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VkRefreshCycleDurationGOOGLE</a></p>
</div>
<div class="paragraph">
<p>This page is extracted from the Vulkan Specification.
Fixes and changes should be made to the Specification, not directly.</p>
</div>
<div style="page-break-after: always;"></div>
</div>
</div>
<div class="sect2">
<h3 id="_vkrenderpassbegininfo3">VkRenderPassBeginInfo(3)</h3>
<div class="sect3">
<h4 id="_name_719">Name</h4>
<div class="paragraph">
<p>VkRenderPassBeginInfo - Structure specifying render pass begin info</p>
</div>
</div>
<div class="sect3">
<h4 id="_c_specification_719">C Specification</h4>
<div class="paragraph">
<p>The <code>VkRenderPassBeginInfo</code> structure is defined as:</p>
</div>
<div id="VkRenderPassBeginInfo" class="listingblock">
<div class="content">
<pre class="highlight"><code class="language-c++" data-lang="c++">typedef struct VkRenderPassBeginInfo {
    VkStructureType        sType;
    const void*            pNext;
    VkRenderPass           renderPass;
    VkFramebuffer          framebuffer;
    VkRect2D               renderArea;
    uint32_t               clearValueCount;
    const VkClearValue*    pClearValues;
} VkRenderPassBeginInfo;</code></pre>
</div>
</div>
</div>
<div class="sect3">
<h4 id="_members_356">Members</h4>
<div class="ulist">
<ul>
<li>
<p><code>sType</code> is the type of this structure.</p>
</li>
<li>
<p><code>pNext</code> is <code>NULL</code> or a pointer to an extension-specific structure.</p>
</li>
<li>
<p><code>renderPass</code> is the render pass to begin an instance of.</p>
</li>
<li>
<p><code>framebuffer</code> is the framebuffer containing the attachments that are
used with the render pass.</p>
</li>
<li>
<p><code>renderArea</code> is the render area that is affected by the render pass
instance, and is described in more detail below.</p>
</li>
<li>
<p><code>clearValueCount</code> is the number of elements in <code>pClearValues</code>.</p>
</li>
<li>
<p><code>pClearValues</code> is an array of <a href="#VkClearValue">VkClearValue</a> structures that
contains clear values for each attachment, if the attachment uses a
<code>loadOp</code> value of <code>VK_ATTACHMENT_LOAD_OP_CLEAR</code> or if the
attachment has a depth/stencil format and uses a <code>stencilLoadOp</code>
value of <code>VK_ATTACHMENT_LOAD_OP_CLEAR</code>.
The array is indexed by attachment number.
Only elements corresponding to cleared attachments are used.
Other elements of <code>pClearValues</code> are ignored.</p>
</li>
</ul>
</div>
</div>
<div class="sect3">
<h4 id="_description_719">Description</h4>
<div class="paragraph">
<p><code>renderArea</code> is the render area that is affected by the render pass
instance.
The effects of attachment load, store and multisample resolve operations are
restricted to the pixels whose x and y coordinates fall within the render
area on all attachments.
The render area extends to all layers of <code>framebuffer</code>.
The application <strong class="purple">must</strong> ensure (using scissor if necessary) that all rendering
is contained within the render area.
The render area <strong class="purple">must</strong> be contained within the framebuffer dimensions.</p>
</div>
<div class="paragraph">
<p>When multiview is enabled, the resolve operation at the end of a subpass
applies to all views in the view mask.</p>
</div>
<div class="admonitionblock note">
<table>
<tr>
<td class="icon">
<i class="fa icon-note" title="Note"></i>
</td>
<td class="content">
<div class="title">Note</div>
<div class="paragraph">
<p>There <strong class="purple">may</strong> be a performance cost for using a render area smaller than the
framebuffer, unless it matches the render area granularity for the render
pass.</p>
</div>
</td>
</tr>
</table>
</div>
<div class="sidebarblock">
<div class="content">
<div class="title">Valid Usage</div>
<div class="ulist">
<ul>
<li>
<p><a id="VUID-VkRenderPassBeginInfo-clearValueCount-00902"></a>
<code>clearValueCount</code> <strong class="purple">must</strong> be greater than the largest attachment index
in <code>renderPass</code> that specifies a <code>loadOp</code> (or
<code>stencilLoadOp</code>, if the attachment has a depth/stencil format) of
<code>VK_ATTACHMENT_LOAD_OP_CLEAR</code></p>
</li>
<li>
<p><a id="VUID-VkRenderPassBeginInfo-renderPass-00904"></a>
<code>renderPass</code> <strong class="purple">must</strong> be <a href="vkspec.html#renderpass-compatibility">compatible</a> with
the <code>renderPass</code> member of the <code>VkFramebufferCreateInfo</code>
structure specified when creating <code>framebuffer</code>.</p>
</li>
</ul>
</div>
</div>
</div>
<div class="sidebarblock">
<div class="content">
<div class="title">Valid Usage (Implicit)</div>
<div class="ulist">
<ul>
<li>
<p><a id="VUID-VkRenderPassBeginInfo-sType-sType"></a> <code>sType</code> <strong class="purple">must</strong> be <code>VK_STRUCTURE_TYPE_RENDER_PASS_BEGIN_INFO</code></p>
</li>
<li>
<p><a id="VUID-VkRenderPassBeginInfo-pNext-pNext"></a> Each <code>pNext</code> member of any structure (including this one) in the <code>pNext</code> chain <strong class="purple">must</strong> be either <code>NULL</code> or a pointer to a valid instance of <a href="#VkDeviceGroupRenderPassBeginInfo">VkDeviceGroupRenderPassBeginInfo</a> or <a href="#VkRenderPassSampleLocationsBeginInfoEXT">VkRenderPassSampleLocationsBeginInfoEXT</a></p>
</li>
<li>
<p><a id="VUID-VkRenderPassBeginInfo-sType-unique"></a> Each <code>sType</code> member in the <code>pNext</code> chain <strong class="purple">must</strong> be unique</p>
</li>
<li>
<p><a id="VUID-VkRenderPassBeginInfo-renderPass-parameter"></a> <code>renderPass</code> <strong class="purple">must</strong> be a valid <code>VkRenderPass</code> handle</p>
</li>
<li>
<p><a id="VUID-VkRenderPassBeginInfo-framebuffer-parameter"></a> <code>framebuffer</code> <strong class="purple">must</strong> be a valid <code>VkFramebuffer</code> handle</p>
</li>
<li>
<p><a id="VUID-VkRenderPassBeginInfo-pClearValues-parameter"></a> If <code>clearValueCount</code> is not <code>0</code>, <code>pClearValues</code> <strong class="purple">must</strong> be a valid pointer to an array of <code>clearValueCount</code> <code>VkClearValue</code> unions</p>
</li>
<li>
<p><a id="VUID-VkRenderPassBeginInfo-commonparent"></a> Both of <code>framebuffer</code>, and <code>renderPass</code> <strong class="purple">must</strong> have been created, allocated, or retrieved from the same <code>VkDevice</code></p>
</li>
</ul>
</div>
</div>
</div>
</div>
<div class="sect3">
<h4 id="_see_also_719">See Also</h4>
<div class="paragraph">
<p><a href="#VkClearValue">VkClearValue</a>, <a href="#VkFramebuffer">VkFramebuffer</a>, <a href="#VkRect2D">VkRect2D</a>, <a href="#VkRenderPass">VkRenderPass</a>, <a href="#VkStructureType">VkStructureType</a>, <a href="#vkCmdBeginRenderPass">vkCmdBeginRenderPass</a>, <a href="#vkCmdBeginRenderPass2KHR">vkCmdBeginRenderPass2KHR</a></p>
</div>
</div>
<div class="sect3">
<h4 id="_document_notes_719">Document Notes</h4>
<div class="paragraph">
<p>For more information, see the Vulkan Specification at URL</p>
</div>
<div class="paragraph">
<p><a href="https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VkRenderPassBeginInfo" class="bare">https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VkRenderPassBeginInfo</a></p>
</div>
<div class="paragraph">
<p>This page is extracted from the Vulkan Specification.
Fixes and changes should be made to the Specification, not directly.</p>
</div>
<div style="page-break-after: always;"></div>
</div>
</div>
<div class="sect2">
<h3 id="_vkrenderpasscreateinfo3">VkRenderPassCreateInfo(3)</h3>
<div class="sect3">
<h4 id="_name_720">Name</h4>
<div class="paragraph">
<p>VkRenderPassCreateInfo - Structure specifying parameters of a newly created render pass</p>
</div>
</div>
<div class="sect3">
<h4 id="_c_specification_720">C Specification</h4>
<div class="paragraph">
<p>The <code>VkRenderPassCreateInfo</code> structure is defined as:</p>
</div>
<div id="VkRenderPassCreateInfo" class="listingblock">
<div class="content">
<pre class="highlight"><code class="language-c++" data-lang="c++">typedef struct VkRenderPassCreateInfo {
    VkStructureType                   sType;
    const void*                       pNext;
    VkRenderPassCreateFlags           flags;
    uint32_t                          attachmentCount;
    const VkAttachmentDescription*    pAttachments;
    uint32_t                          subpassCount;
    const VkSubpassDescription*       pSubpasses;
    uint32_t                          dependencyCount;
    const VkSubpassDependency*        pDependencies;
} VkRenderPassCreateInfo;</code></pre>
</div>
</div>
</div>
<div class="sect3">
<h4 id="_members_357">Members</h4>
<div class="ulist">
<ul>
<li>
<p><code>sType</code> is the type of this structure.</p>
</li>
<li>
<p><code>pNext</code> is <code>NULL</code> or a pointer to an extension-specific structure.</p>
</li>
<li>
<p><code>flags</code> is reserved for future use.</p>
</li>
<li>
<p><code>attachmentCount</code> is the number of attachments used by this render
pass.</p>
</li>
<li>
<p><code>pAttachments</code> points to an array of <code>attachmentCount</code>
<a href="#VkAttachmentDescription">VkAttachmentDescription</a> structures describing the attachments used
by the render pass.</p>
</li>
<li>
<p><code>subpassCount</code> is the number of subpasses to create.</p>
</li>
<li>
<p><code>pSubpasses</code> points to an array of <code>subpassCount</code>
<a href="#VkSubpassDescription">VkSubpassDescription</a> structures describing each subpass.</p>
</li>
<li>
<p><code>dependencyCount</code> is the number of memory dependencies between pairs
of subpasses.</p>
</li>
<li>
<p><code>pDependencies</code> points to an array of <code>dependencyCount</code>
<a href="#VkSubpassDependency">VkSubpassDependency</a> structures describing dependencies between
pairs of subpasses.</p>
</li>
</ul>
</div>
</div>
<div class="sect3">
<h4 id="_description_720">Description</h4>
<div class="admonitionblock note">
<table>
<tr>
<td class="icon">
<i class="fa icon-note" title="Note"></i>
</td>
<td class="content">
<div class="title">Note</div>
<div class="paragraph">
<p>Care should be taken to avoid a data race here; if any subpasses access
attachments with overlapping memory locations, and one of those accesses is
a write, a subpass dependency needs to be included between them.</p>
</div>
</td>
</tr>
</table>
</div>
<div class="sidebarblock">
<div class="content">
<div class="title">Valid Usage</div>
<div class="ulist">
<ul>
<li>
<p><a id="VUID-VkRenderPassCreateInfo-attachment-00834"></a>
If the <code>attachment</code> member of any element of
<code>pInputAttachments</code>, <code>pColorAttachments</code>,
<code>pResolveAttachments</code> or <code>pDepthStencilAttachment</code>, or any
element of <code>pPreserveAttachments</code> in any element of <code>pSubpasses</code>
is not <code>VK_ATTACHMENT_UNUSED</code>, it <strong class="purple">must</strong> be less than
<code>attachmentCount</code></p>
</li>
<li>
<p><a id="VUID-VkRenderPassCreateInfo-pAttachments-00836"></a>
For any member of <code>pAttachments</code> with a <code>loadOp</code> equal to
<code>VK_ATTACHMENT_LOAD_OP_CLEAR</code>, the first use of that attachment
<strong class="purple">must</strong> not specify a <code>layout</code> equal to
<code>VK_IMAGE_LAYOUT_SHADER_READ_ONLY_OPTIMAL</code> or
<code>VK_IMAGE_LAYOUT_DEPTH_STENCIL_READ_ONLY_OPTIMAL</code>.</p>
</li>
<li>
<p><a id="VUID-VkRenderPassCreateInfo-pAttachments-02511"></a>
For any member of <code>pAttachments</code> with a <code>stencilLoadOp</code> equal to
<code>VK_ATTACHMENT_LOAD_OP_CLEAR</code>, the first use of that attachment
<strong class="purple">must</strong> not specify a <code>layout</code> equal to
<code>VK_IMAGE_LAYOUT_SHADER_READ_ONLY_OPTIMAL</code> or
<code>VK_IMAGE_LAYOUT_DEPTH_STENCIL_READ_ONLY_OPTIMAL</code>.</p>
</li>
<li>
<p><a id="VUID-VkRenderPassCreateInfo-pAttachments-01566"></a>
For any member of <code>pAttachments</code> with a <code>loadOp</code> equal to
<code>VK_ATTACHMENT_LOAD_OP_CLEAR</code>, the first use of that attachment
<strong class="purple">must</strong> not specify a <code>layout</code> equal to
<code>VK_IMAGE_LAYOUT_DEPTH_READ_ONLY_STENCIL_ATTACHMENT_OPTIMAL</code>.</p>
</li>
<li>
<p><a id="VUID-VkRenderPassCreateInfo-pAttachments-01567"></a>
For any member of <code>pAttachments</code> with a <code>stencilLoadOp</code> equal to
<code>VK_ATTACHMENT_LOAD_OP_CLEAR</code>, the first use of that attachment
<strong class="purple">must</strong> not specify a <code>layout</code> equal to
<code>VK_IMAGE_LAYOUT_DEPTH_ATTACHMENT_STENCIL_READ_ONLY_OPTIMAL</code>.</p>
</li>
<li>
<p><a id="VUID-VkRenderPassCreateInfo-pNext-01926"></a>
If the <code>pNext</code> chain includes an instance of
<a href="#VkRenderPassInputAttachmentAspectCreateInfo">VkRenderPassInputAttachmentAspectCreateInfo</a>, the <code>subpass</code>
member of each element of its <code>pAspectReferences</code> member <strong class="purple">must</strong> be
less than <code>subpassCount</code></p>
</li>
<li>
<p><a id="VUID-VkRenderPassCreateInfo-pNext-01927"></a>
If the <code>pNext</code> chain includes an instance of
<a href="#VkRenderPassInputAttachmentAspectCreateInfo">VkRenderPassInputAttachmentAspectCreateInfo</a>, the
<code>inputAttachmentIndex</code> member of each element of its
<code>pAspectReferences</code> member <strong class="purple">must</strong> be less than the value of
<code>inputAttachmentCount</code> in the member of <code>pSubpasses</code> identified
by its <code>subpass</code> member</p>
</li>
<li>
<p><a id="VUID-VkRenderPassCreateInfo-pNext-01963"></a>
If the <code>pNext</code> chain includes an instance of
<a href="#VkRenderPassInputAttachmentAspectCreateInfo">VkRenderPassInputAttachmentAspectCreateInfo</a>, for any element of
the <code>pInputAttachments</code> member of any element of <code>pSubpasses</code>
where the <code>attachment</code> member is not <code>VK_ATTACHMENT_UNUSED</code>, the
<code>aspectMask</code> member of the corresponding element of
<a href="#VkRenderPassInputAttachmentAspectCreateInfo">VkRenderPassInputAttachmentAspectCreateInfo</a>::<code>pAspectReferences</code>
<strong class="purple">must</strong> only include aspects that are present in images of the format
specified by the element of <code>pAttachments</code> at <code>attachment</code></p>
</li>
<li>
<p><a id="VUID-VkRenderPassCreateInfo-pNext-01928"></a>
If the <code>pNext</code> chain includes an instance of
<a href="#VkRenderPassMultiviewCreateInfo">VkRenderPassMultiviewCreateInfo</a>, and its <code>subpassCount</code> member
is not zero, that member <strong class="purple">must</strong> be equal to the value of
<code>subpassCount</code></p>
</li>
<li>
<p><a id="VUID-VkRenderPassCreateInfo-pNext-01929"></a>
If the <code>pNext</code> chain includes an instance of
<a href="#VkRenderPassMultiviewCreateInfo">VkRenderPassMultiviewCreateInfo</a>, if its <code>dependencyCount</code>
member is not zero, it <strong class="purple">must</strong> be equal to <code>dependencyCount</code></p>
</li>
<li>
<p><a id="VUID-VkRenderPassCreateInfo-pNext-01930"></a>
If the <code>pNext</code> chain includes an instance of
<a href="#VkRenderPassMultiviewCreateInfo">VkRenderPassMultiviewCreateInfo</a>, for each non-zero element of
<code>pViewOffsets</code>, the <code>srcSubpass</code> and <code>dstSubpass</code> members of
<code>pDependencies</code> at the same index <strong class="purple">must</strong> not be equal</p>
</li>
<li>
<p><a id="VUID-VkRenderPassCreateInfo-pNext-02512"></a>
If the <code>pNext</code> chain includes an instance of
<a href="#VkRenderPassMultiviewCreateInfo">VkRenderPassMultiviewCreateInfo</a>, for any element of
<code>pDependencies</code> with a <code>dependencyFlags</code> member that does not
include <code>VK_DEPENDENCY_VIEW_LOCAL_BIT</code>, the corresponding element of
the <code>pViewOffsets</code> member of that
<a href="#VkRenderPassMultiviewCreateInfo">VkRenderPassMultiviewCreateInfo</a> instance <strong class="purple">must</strong> be <code>0</code></p>
</li>
<li>
<p><a id="VUID-VkRenderPassCreateInfo-pNext-02513"></a>
If the <code>pNext</code> chain includes an instance of
<a href="#VkRenderPassMultiviewCreateInfo">VkRenderPassMultiviewCreateInfo</a>, elements of its <code>pViewMasks</code>
member <strong class="purple">must</strong> either all be <code>0</code>, or all not be <code>0</code></p>
</li>
<li>
<p><a id="VUID-VkRenderPassCreateInfo-pNext-02514"></a>
If the <code>pNext</code> chain includes an instance of
<a href="#VkRenderPassMultiviewCreateInfo">VkRenderPassMultiviewCreateInfo</a>, and each element of its
<code>pViewMasks</code> member is <code>0</code>, the <code>dependencyFlags</code> member of each
element of <code>pDependencies</code> <strong class="purple">must</strong> not include
<code>VK_DEPENDENCY_VIEW_LOCAL_BIT</code></p>
</li>
<li>
<p><a id="VUID-VkRenderPassCreateInfo-pNext-02515"></a>
If the <code>pNext</code> chain includes an instance of
<a href="#VkRenderPassMultiviewCreateInfo">VkRenderPassMultiviewCreateInfo</a>, and each element of its
<code>pViewMasks</code> member is <code>0</code>, <code>correlatedViewMaskCount</code> <strong class="purple">must</strong> be
<code>0</code></p>
</li>
<li>
<p><a id="VUID-VkRenderPassCreateInfo-pNext-02516"></a>
If the <code>pNext</code> chain includes an instance of
<a href="#VkRenderPassMultiviewCreateInfo">VkRenderPassMultiviewCreateInfo</a>, each element of its
<code>pViewMask</code> member <strong class="purple">must</strong> not include a bit at a position greater
than the value of
<a href="#VkPhysicalDeviceLimits">VkPhysicalDeviceLimits</a>::<code>maxFramebufferLayers</code></p>
</li>
<li>
<p><a id="VUID-VkRenderPassCreateInfo-pDependencies-00837"></a>
For any element of <code>pDependencies</code>, if the <code>srcSubpass</code> is not
<code>VK_SUBPASS_EXTERNAL</code>, all stage flags included in the
<code>srcStageMask</code> member of that dependency <strong class="purple">must</strong> be a pipeline stage
supported by the <a href="vkspec.html#synchronization-pipeline-stages-types">pipeline</a>
identified by the <code>pipelineBindPoint</code> member of the source subpass</p>
</li>
<li>
<p><a id="VUID-VkRenderPassCreateInfo-pDependencies-00838"></a>
For any element of <code>pDependencies</code>, if the <code>dstSubpass</code> is not
<code>VK_SUBPASS_EXTERNAL</code>, all stage flags included in the
<code>dstStageMask</code> member of that dependency <strong class="purple">must</strong> be a pipeline stage
supported by the <a href="vkspec.html#synchronization-pipeline-stages-types">pipeline</a>
identified by the <code>pipelineBindPoint</code> member of the source subpass</p>
</li>
<li>
<p><a id="VUID-VkRenderPassCreateInfo-srcSubpass-02517"></a>
The <code>srcSubpass</code> member of each element of <code>pDependencies</code> <strong class="purple">must</strong>
be less than <code>subpassCount</code></p>
</li>
<li>
<p><a id="VUID-VkRenderPassCreateInfo-dstSubpass-02518"></a>
The <code>dstSubpass</code> member of each element of <code>pDependencies</code> <strong class="purple">must</strong>
be less than <code>subpassCount</code></p>
</li>
</ul>
</div>
</div>
</div>
<div class="sidebarblock">
<div class="content">
<div class="title">Valid Usage (Implicit)</div>
<div class="ulist">
<ul>
<li>
<p><a id="VUID-VkRenderPassCreateInfo-sType-sType"></a> <code>sType</code> <strong class="purple">must</strong> be <code>VK_STRUCTURE_TYPE_RENDER_PASS_CREATE_INFO</code></p>
</li>
<li>
<p><a id="VUID-VkRenderPassCreateInfo-pNext-pNext"></a> Each <code>pNext</code> member of any structure (including this one) in the <code>pNext</code> chain <strong class="purple">must</strong> be either <code>NULL</code> or a pointer to a valid instance of <a href="#VkRenderPassFragmentDensityMapCreateInfoEXT">VkRenderPassFragmentDensityMapCreateInfoEXT</a>, <a href="#VkRenderPassInputAttachmentAspectCreateInfo">VkRenderPassInputAttachmentAspectCreateInfo</a>, or <a href="#VkRenderPassMultiviewCreateInfo">VkRenderPassMultiviewCreateInfo</a></p>
</li>
<li>
<p><a id="VUID-VkRenderPassCreateInfo-sType-unique"></a> Each <code>sType</code> member in the <code>pNext</code> chain <strong class="purple">must</strong> be unique</p>
</li>
<li>
<p><a id="VUID-VkRenderPassCreateInfo-pAttachments-parameter"></a> If <code>attachmentCount</code> is not <code>0</code>, <code>pAttachments</code> <strong class="purple">must</strong> be a valid pointer to an array of <code>attachmentCount</code> valid <code>VkAttachmentDescription</code> structures</p>
</li>
<li>
<p><a id="VUID-VkRenderPassCreateInfo-pSubpasses-parameter"></a> <code>pSubpasses</code> <strong class="purple">must</strong> be a valid pointer to an array of <code>subpassCount</code> valid <code>VkSubpassDescription</code> structures</p>
</li>
<li>
<p><a id="VUID-VkRenderPassCreateInfo-pDependencies-parameter"></a> If <code>dependencyCount</code> is not <code>0</code>, <code>pDependencies</code> <strong class="purple">must</strong> be a valid pointer to an array of <code>dependencyCount</code> valid <code>VkSubpassDependency</code> structures</p>
</li>
<li>
<p><a id="VUID-VkRenderPassCreateInfo-subpassCount-arraylength"></a> <code>subpassCount</code> <strong class="purple">must</strong> be greater than <code>0</code></p>
</li>
</ul>
</div>
</div>
</div>
</div>
<div class="sect3">
<h4 id="_see_also_720">See Also</h4>
<div class="paragraph">
<p><a href="#VkAttachmentDescription">VkAttachmentDescription</a>, <a href="#VkRenderPassCreateFlags">VkRenderPassCreateFlags</a>, <a href="#VkStructureType">VkStructureType</a>, <a href="#VkSubpassDependency">VkSubpassDependency</a>, <a href="#VkSubpassDescription">VkSubpassDescription</a>, <a href="#vkCreateRenderPass">vkCreateRenderPass</a></p>
</div>
</div>
<div class="sect3">
<h4 id="_document_notes_720">Document Notes</h4>
<div class="paragraph">
<p>For more information, see the Vulkan Specification at URL</p>
</div>
<div class="paragraph">
<p><a href="https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VkRenderPassCreateInfo" class="bare">https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VkRenderPassCreateInfo</a></p>
</div>
<div class="paragraph">
<p>This page is extracted from the Vulkan Specification.
Fixes and changes should be made to the Specification, not directly.</p>
</div>
<div style="page-break-after: always;"></div>
</div>
</div>
<div class="sect2">
<h3 id="_vkrenderpasscreateinfo2khr3">VkRenderPassCreateInfo2KHR(3)</h3>
<div class="sect3">
<h4 id="_name_721">Name</h4>
<div class="paragraph">
<p>VkRenderPassCreateInfo2KHR - Structure specifying parameters of a newly created render pass</p>
</div>
</div>
<div class="sect3">
<h4 id="_c_specification_721">C Specification</h4>
<div class="paragraph">
<p>The <code>VkRenderPassCreateInfo2KHR</code> structure is defined as:</p>
</div>
<div id="VkRenderPassCreateInfo2KHR" class="listingblock">
<div class="content">
<pre class="highlight"><code class="language-c++" data-lang="c++">typedef struct VkRenderPassCreateInfo2KHR {
    VkStructureType                       sType;
    const void*                           pNext;
    VkRenderPassCreateFlags               flags;
    uint32_t                              attachmentCount;
    const VkAttachmentDescription2KHR*    pAttachments;
    uint32_t                              subpassCount;
    const VkSubpassDescription2KHR*       pSubpasses;
    uint32_t                              dependencyCount;
    const VkSubpassDependency2KHR*        pDependencies;
    uint32_t                              correlatedViewMaskCount;
    const uint32_t*                       pCorrelatedViewMasks;
} VkRenderPassCreateInfo2KHR;</code></pre>
</div>
</div>
</div>
<div class="sect3">
<h4 id="_members_358">Members</h4>
<div class="ulist">
<ul>
<li>
<p><code>sType</code> is the type of this structure.</p>
</li>
<li>
<p><code>pNext</code> is <code>NULL</code> or a pointer to an extension-specific structure.</p>
</li>
<li>
<p><code>flags</code> is reserved for future use.</p>
</li>
<li>
<p><code>attachmentCount</code> is the number of attachments used by this render
pass.</p>
</li>
<li>
<p><code>pAttachments</code> points to an array of <code>attachmentCount</code>
<a href="#VkAttachmentDescription2KHR">VkAttachmentDescription2KHR</a> structures describing the attachments
used by the render pass.</p>
</li>
<li>
<p><code>subpassCount</code> is the number of subpasses to create.</p>
</li>
<li>
<p><code>pSubpasses</code> points to an array of <code>subpassCount</code>
<a href="#VkSubpassDescription2KHR">VkSubpassDescription2KHR</a> structures describing each subpass.</p>
</li>
<li>
<p><code>dependencyCount</code> is the number of dependencies between pairs of
subpasses.</p>
</li>
<li>
<p><code>pDependencies</code> points to an array of <code>dependencyCount</code>
<a href="#VkSubpassDependency2KHR">VkSubpassDependency2KHR</a> structures describing dependencies between
pairs of subpasses.</p>
</li>
<li>
<p><code>correlatedViewMaskCount</code> is the number of correlation masks.</p>
</li>
<li>
<p><code>pCorrelatedViewMasks</code> is an array of view masks indicating sets of
views that <strong class="purple">may</strong> be more efficient to render concurrently.</p>
</li>
</ul>
</div>
</div>
<div class="sect3">
<h4 id="_description_721">Description</h4>
<div class="paragraph">
<p>Parameters defined by this structure with the same name as those in
<a href="#VkRenderPassCreateInfo">VkRenderPassCreateInfo</a> have the identical effect to those parameters;
the child structures are variants of those used in
<a href="#VkRenderPassCreateInfo">VkRenderPassCreateInfo</a> which include <code>sType</code> and <code>pNext</code>
parameters, allowing them to be extended.</p>
</div>
<div class="paragraph">
<p>If the <a href="#VkSubpassDescription2KHR">VkSubpassDescription2KHR</a>::<code>viewMask</code> member of any element
of <code>pSubpasses</code> is not zero, <em>multiview</em> functionality is considered to
be enabled for this render pass.</p>
</div>
<div class="paragraph">
<p><code>correlatedViewMaskCount</code> and <code>pCorrelatedViewMasks</code> have the same
effect as <a href="#VkRenderPassMultiviewCreateInfo">VkRenderPassMultiviewCreateInfo</a>::<code>correlationMaskCount</code>
and <a href="#VkRenderPassMultiviewCreateInfo">VkRenderPassMultiviewCreateInfo</a>::<code>pCorrelationMasks</code>,
respectively.</p>
</div>
<div class="sidebarblock">
<div class="content">
<div class="title">Valid Usage</div>
<div class="ulist">
<ul>
<li>
<p><a id="VUID-VkRenderPassCreateInfo2KHR-None-03049"></a>
If any two subpasses operate on attachments with overlapping ranges of
the same <code>VkDeviceMemory</code> object, and at least one subpass writes to
that area of <code>VkDeviceMemory</code>, a subpass dependency <strong class="purple">must</strong> be
included (either directly or via some intermediate subpasses) between
them</p>
</li>
<li>
<p><a id="VUID-VkRenderPassCreateInfo2KHR-attachment-03050"></a>
If the <code>attachment</code> member of any element of
<code>pInputAttachments</code>, <code>pColorAttachments</code>,
<code>pResolveAttachments</code> or <code>pDepthStencilAttachment</code>, or the
attachment indexed by any element of <code>pPreserveAttachments</code> in any
given element of <code>pSubpasses</code> is bound to a range of a
<code>VkDeviceMemory</code> object that overlaps with any other attachment in
any subpass (including the same subpass), the
<code>VkAttachmentDescription2KHR</code> structures describing them <strong class="purple">must</strong>
include <code>VK_ATTACHMENT_DESCRIPTION_MAY_ALIAS_BIT</code> in <code>flags</code></p>
</li>
<li>
<p><a id="VUID-VkRenderPassCreateInfo2KHR-attachment-03051"></a>
If the <code>attachment</code> member of any element of
<code>pInputAttachments</code>, <code>pColorAttachments</code>,
<code>pResolveAttachments</code> or <code>pDepthStencilAttachment</code>, or any
element of <code>pPreserveAttachments</code> in any given element of
<code>pSubpasses</code> is not <code>VK_ATTACHMENT_UNUSED</code>, it <strong class="purple">must</strong> be less
than <code>attachmentCount</code></p>
</li>
<li>
<p><a id="VUID-VkRenderPassCreateInfo2KHR-pAttachments-02522"></a>
For any member of <code>pAttachments</code> with a <code>loadOp</code> equal to
<code>VK_ATTACHMENT_LOAD_OP_CLEAR</code>, the first use of that attachment
<strong class="purple">must</strong> not specify a <code>layout</code> equal to
<code>VK_IMAGE_LAYOUT_SHADER_READ_ONLY_OPTIMAL</code>,
<code>VK_IMAGE_LAYOUT_DEPTH_STENCIL_READ_ONLY_OPTIMAL</code>, or
<code>VK_IMAGE_LAYOUT_DEPTH_READ_ONLY_STENCIL_ATTACHMENT_OPTIMAL</code></p>
</li>
<li>
<p><a id="VUID-VkRenderPassCreateInfo2KHR-pAttachments-02523"></a>
For any member of <code>pAttachments</code> with a <code>stencilLoadOp</code> equal to
<code>VK_ATTACHMENT_LOAD_OP_CLEAR</code>, the first use of that attachment
<strong class="purple">must</strong> not specify a <code>layout</code> equal to
<code>VK_IMAGE_LAYOUT_SHADER_READ_ONLY_OPTIMAL</code>,
<code>VK_IMAGE_LAYOUT_DEPTH_STENCIL_READ_ONLY_OPTIMAL</code>, or
<code>VK_IMAGE_LAYOUT_DEPTH_ATTACHMENT_STENCIL_READ_ONLY_OPTIMAL</code>.</p>
</li>
<li>
<p><a id="VUID-VkRenderPassCreateInfo2KHR-pDependencies-03054"></a>
For any element of <code>pDependencies</code>, if the <code>srcSubpass</code> is not
<code>VK_SUBPASS_EXTERNAL</code>, all stage flags included in the
<code>srcStageMask</code> member of that dependency <strong class="purple">must</strong> be a pipeline stage
supported by the <a href="vkspec.html#synchronization-pipeline-stages-types">pipeline</a>
identified by the <code>pipelineBindPoint</code> member of the source subpass.</p>
</li>
<li>
<p><a id="VUID-VkRenderPassCreateInfo2KHR-pDependencies-03055"></a>
For any element of <code>pDependencies</code>, if the <code>dstSubpass</code> is not
<code>VK_SUBPASS_EXTERNAL</code>, all stage flags included in the
<code>dstStageMask</code> member of that dependency <strong class="purple">must</strong> be a pipeline stage
supported by the <a href="vkspec.html#synchronization-pipeline-stages-types">pipeline</a>
identified by the <code>pipelineBindPoint</code> member of the source subpass.</p>
</li>
<li>
<p><a id="VUID-VkRenderPassCreateInfo2KHR-pCorrelatedViewMasks-03056"></a>
The set of bits included in any element of <code>pCorrelatedViewMasks</code>
<strong class="purple">must</strong> not overlap with the set of bits included in any other element of
<code>pCorrelatedViewMasks</code></p>
</li>
<li>
<p><a id="VUID-VkRenderPassCreateInfo2KHR-viewMask-03057"></a>
If the <a href="#VkSubpassDescription2KHR">VkSubpassDescription2KHR</a>::<code>viewMask</code> member of all
elements of <code>pSubpasses</code> is <code>0</code>, <code>correlatedViewMaskCount</code> <strong class="purple">must</strong>
be <code>0</code></p>
</li>
<li>
<p><a id="VUID-VkRenderPassCreateInfo2KHR-viewMask-03058"></a>
The <a href="#VkSubpassDescription2KHR">VkSubpassDescription2KHR</a>::<code>viewMask</code> member of all
elements of <code>pSubpasses</code> <strong class="purple">must</strong> either all be <code>0</code>, or all not be <code>0</code></p>
</li>
<li>
<p><a id="VUID-VkRenderPassCreateInfo2KHR-viewMask-03059"></a>
If the <a href="#VkSubpassDescription2KHR">VkSubpassDescription2KHR</a>::<code>viewMask</code> member of all
elements of <code>pSubpasses</code> is <code>0</code>, the <code>dependencyFlags</code> member of
any element of <code>pDependencies</code> <strong class="purple">must</strong> not include
<code>VK_DEPENDENCY_VIEW_LOCAL_BIT</code></p>
</li>
<li>
<p><a id="VUID-VkRenderPassCreateInfo2KHR-pDependencies-03060"></a>
For any element of <code>pDependencies</code> where its <code>srcSubpass</code> member
equals its <code>dstSubpass</code> member, if the <code>viewMask</code> member of the
corresponding element of <code>pSubpasses</code> includes more than one bit,
its <code>dependencyFlags</code> member <strong class="purple">must</strong> include
<code>VK_DEPENDENCY_VIEW_LOCAL_BIT</code></p>
</li>
<li>
<p><a id="VUID-VkRenderPassCreateInfo2KHR-viewMask-02524"></a>
The <code>viewMask</code> member <strong class="purple">must</strong> not include a bit at a position greater
than the value of
<a href="#VkPhysicalDeviceLimits">VkPhysicalDeviceLimits</a>::<code>maxFramebufferLayers</code></p>
</li>
<li>
<p><a id="VUID-VkRenderPassCreateInfo2KHR-attachment-02525"></a>
If the <code>attachment</code> member of any element of the
<code>pInputAttachments</code> member of any element of <code>pSubpasses</code> is not
<code>VK_ATTACHMENT_UNUSED</code>, the <code>aspectMask</code> member of that element
of <code>pInputAttachments</code> <strong class="purple">must</strong> only include aspects that are present
in images of the format specified by the element of <code>pAttachments</code>
specified by <code>attachment</code></p>
</li>
<li>
<p><a id="VUID-VkRenderPassCreateInfo2KHR-srcSubpass-02526"></a>
The <code>srcSubpass</code> member of each element of <code>pDependencies</code> <strong class="purple">must</strong>
be less than <code>subpassCount</code></p>
</li>
<li>
<p><a id="VUID-VkRenderPassCreateInfo2KHR-dstSubpass-02527"></a>
The <code>dstSubpass</code> member of each element of <code>pDependencies</code> <strong class="purple">must</strong>
be less than <code>subpassCount</code></p>
</li>
</ul>
</div>
</div>
</div>
<div class="sidebarblock">
<div class="content">
<div class="title">Valid Usage (Implicit)</div>
<div class="ulist">
<ul>
<li>
<p><a id="VUID-VkRenderPassCreateInfo2KHR-sType-sType"></a> <code>sType</code> <strong class="purple">must</strong> be <code>VK_STRUCTURE_TYPE_RENDER_PASS_CREATE_INFO_2_KHR</code></p>
</li>
<li>
<p><a id="VUID-VkRenderPassCreateInfo2KHR-pNext-pNext"></a> <code>pNext</code> <strong class="purple">must</strong> be <code>NULL</code></p>
</li>
<li>
<p><a id="VUID-VkRenderPassCreateInfo2KHR-pAttachments-parameter"></a> If <code>attachmentCount</code> is not <code>0</code>, <code>pAttachments</code> <strong class="purple">must</strong> be a valid pointer to an array of <code>attachmentCount</code> valid <code>VkAttachmentDescription2KHR</code> structures</p>
</li>
<li>
<p><a id="VUID-VkRenderPassCreateInfo2KHR-pSubpasses-parameter"></a> <code>pSubpasses</code> <strong class="purple">must</strong> be a valid pointer to an array of <code>subpassCount</code> valid <code>VkSubpassDescription2KHR</code> structures</p>
</li>
<li>
<p><a id="VUID-VkRenderPassCreateInfo2KHR-pDependencies-parameter"></a> If <code>dependencyCount</code> is not <code>0</code>, <code>pDependencies</code> <strong class="purple">must</strong> be a valid pointer to an array of <code>dependencyCount</code> valid <code>VkSubpassDependency2KHR</code> structures</p>
</li>
<li>
<p><a id="VUID-VkRenderPassCreateInfo2KHR-pCorrelatedViewMasks-parameter"></a> If <code>correlatedViewMaskCount</code> is not <code>0</code>, <code>pCorrelatedViewMasks</code> <strong class="purple">must</strong> be a valid pointer to an array of <code>correlatedViewMaskCount</code> <code>uint32_t</code> values</p>
</li>
<li>
<p><a id="VUID-VkRenderPassCreateInfo2KHR-subpassCount-arraylength"></a> <code>subpassCount</code> <strong class="purple">must</strong> be greater than <code>0</code></p>
</li>
</ul>
</div>
</div>
</div>
</div>
<div class="sect3">
<h4 id="_see_also_721">See Also</h4>
<div class="paragraph">
<p><a href="#VkAttachmentDescription2KHR">VkAttachmentDescription2KHR</a>, <a href="#VkRenderPassCreateFlags">VkRenderPassCreateFlags</a>, <a href="#VkStructureType">VkStructureType</a>, <a href="#VkSubpassDependency2KHR">VkSubpassDependency2KHR</a>, <a href="#VkSubpassDescription2KHR">VkSubpassDescription2KHR</a>, <a href="#vkCreateRenderPass2KHR">vkCreateRenderPass2KHR</a></p>
</div>
</div>
<div class="sect3">
<h4 id="_document_notes_721">Document Notes</h4>
<div class="paragraph">
<p>For more information, see the Vulkan Specification at URL</p>
</div>
<div class="paragraph">
<p><a href="https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VkRenderPassCreateInfo2KHR" class="bare">https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VkRenderPassCreateInfo2KHR</a></p>
</div>
<div class="paragraph">
<p>This page is extracted from the Vulkan Specification.
Fixes and changes should be made to the Specification, not directly.</p>
</div>
<div style="page-break-after: always;"></div>
</div>
</div>
<div class="sect2">
<h3 id="_vkrenderpassfragmentdensitymapcreateinfoext3">VkRenderPassFragmentDensityMapCreateInfoEXT(3)</h3>
<div class="sect3">
<h4 id="_name_722">Name</h4>
<div class="paragraph">
<p>VkRenderPassFragmentDensityMapCreateInfoEXT - Structure containing fragment density map attachment for render pass</p>
</div>
</div>
<div class="sect3">
<h4 id="_c_specification_722">C Specification</h4>
<div class="paragraph">
<p>If the <code>VkRenderPassCreateInfo</code>::<code>pNext</code> chain includes a
<code>VkRenderPassFragmentDensityMapCreateInfoEXT</code> structure, then that
structure includes a fragment density map attachment for the render pass.</p>
</div>
<div class="paragraph">
<p>The <code>VkRenderPassFragmentDensityMapCreateInfoEXT</code> structure is defined
as:</p>
</div>
<div id="VkRenderPassFragmentDensityMapCreateInfoEXT" class="listingblock">
<div class="content">
<pre class="highlight"><code class="language-c++" data-lang="c++">typedef struct VkRenderPassFragmentDensityMapCreateInfoEXT {
    VkStructureType          sType;
    const void*              pNext;
    VkAttachmentReference    fragmentDensityMapAttachment;
} VkRenderPassFragmentDensityMapCreateInfoEXT;</code></pre>
</div>
</div>
</div>
<div class="sect3">
<h4 id="_members_359">Members</h4>
<div class="ulist">
<ul>
<li>
<p><code>sType</code> is the type of this structure.</p>
</li>
<li>
<p><code>pNext</code> is <code>NULL</code> or a pointer to an extension-specific structure.</p>
</li>
<li>
<p><code>fragmentDensityMapAttachment</code> is the fragment density map to use
for the render pass.</p>
</li>
</ul>
</div>
</div>
<div class="sect3">
<h4 id="_description_722">Description</h4>
<div class="paragraph">
<p>The fragment density map attachment is read at an implementation-dependent
time either by the host during <a href="#vkCmdBeginRenderPass">vkCmdBeginRenderPass</a> if the
attachment&#8217;s image view was not created with <code>flags</code> containing
<code>VK_IMAGE_VIEW_CREATE_FRAGMENT_DENSITY_MAP_DYNAMIC_BIT_EXT</code>, or by the
device when drawing commands in the renderpass execute
<code>VK_PIPELINE_STAGE_FRAGMENT_DENSITY_PROCESS_BIT_EXT</code>.</p>
</div>
<div class="paragraph">
<p>If this structure is not present, it is as if
<code>fragmentDensityMapAttachment</code> was given as <code>VK_ATTACHMENT_UNUSED</code>.</p>
</div>
<div class="sidebarblock">
<div class="content">
<div class="title">Valid Usage</div>
<div class="ulist">
<ul>
<li>
<p><a id="VUID-VkRenderPassFragmentDensityMapCreateInfoEXT-fragmentDensityMapAttachment-02547"></a>
If <code>fragmentDensityMapAttachment</code> is not <code>VK_ATTACHMENT_UNUSED</code>,
<code>fragmentDensityMapAttachment</code> <strong class="purple">must</strong> be less than
<code>VkRenderPassCreateInfo</code>::<code>attachmentCount</code></p>
</li>
<li>
<p><a id="VUID-VkRenderPassFragmentDensityMapCreateInfoEXT-fragmentDensityMapAttachment-02548"></a>
If <code>fragmentDensityMapAttachment</code> is not <code>VK_ATTACHMENT_UNUSED</code>,
<code>fragmentDensityMapAttachment</code> <strong class="purple">must</strong> not be an element of
<code>VkSubpassDescription</code>::<code>pInputAttachments</code>,
<code>VkSubpassDescription</code>::<code>pColorAttachments</code>,
<code>VkSubpassDescription</code>::<code>pResolveAttachments</code>,
<code>VkSubpassDescription</code>::<code>pDepthStencilAttachment</code>, or
<code>VkSubpassDescription</code>::<code>pPreserveAttachments</code> for any subpass</p>
</li>
<li>
<p><a id="VUID-VkRenderPassFragmentDensityMapCreateInfoEXT-fragmentDensityMapAttachment-02549"></a>
If <code>fragmentDensityMapAttachment</code> is not <code>VK_ATTACHMENT_UNUSED</code>,
<code>layout</code> <strong class="purple">must</strong> be equal to
<code>VK_IMAGE_LAYOUT_FRAGMENT_DENSITY_MAP_OPTIMAL_EXT</code>, or
<code>VK_IMAGE_LAYOUT_GENERAL</code></p>
</li>
<li>
<p><a id="VUID-VkRenderPassFragmentDensityMapCreateInfoEXT-fragmentDensityMapAttachment-02550"></a>
If <code>fragmentDensityMapAttachment</code> is not <code>VK_ATTACHMENT_UNUSED</code>,
<code>fragmentDensityMapAttachment</code> <strong class="purple">must</strong> reference an attachment with a
<code>loadOp</code> equal to <code>VK_ATTACHMENT_LOAD_OP_LOAD</code> or
<code>VK_ATTACHMENT_LOAD_OP_DONT_CARE</code>.</p>
</li>
<li>
<p><a id="VUID-VkRenderPassFragmentDensityMapCreateInfoEXT-fragmentDensityMapAttachment-02551"></a>
If <code>fragmentDensityMapAttachment</code> is not <code>VK_ATTACHMENT_UNUSED</code>,
<code>fragmentDensityMapAttachment</code> <strong class="purple">must</strong> reference an attachment with a
<code>storeOp</code> equal to <code>VK_ATTACHMENT_STORE_OP_DONT_CARE</code>.</p>
</li>
</ul>
</div>
</div>
</div>
<div class="sidebarblock">
<div class="content">
<div class="title">Valid Usage (Implicit)</div>
<div class="ulist">
<ul>
<li>
<p><a id="VUID-VkRenderPassFragmentDensityMapCreateInfoEXT-sType-sType"></a> <code>sType</code> <strong class="purple">must</strong> be <code>VK_STRUCTURE_TYPE_RENDER_PASS_FRAGMENT_DENSITY_MAP_CREATE_INFO_EXT</code></p>
</li>
<li>
<p><a id="VUID-VkRenderPassFragmentDensityMapCreateInfoEXT-fragmentDensityMapAttachment-parameter"></a> <code>fragmentDensityMapAttachment</code> <strong class="purple">must</strong> be a valid <code>VkAttachmentReference</code> structure</p>
</li>
</ul>
</div>
</div>
</div>
</div>
<div class="sect3">
<h4 id="_see_also_722">See Also</h4>
<div class="paragraph">
<p><a href="#VkAttachmentReference">VkAttachmentReference</a>, <a href="#VkStructureType">VkStructureType</a></p>
</div>
</div>
<div class="sect3">
<h4 id="_document_notes_722">Document Notes</h4>
<div class="paragraph">
<p>For more information, see the Vulkan Specification at URL</p>
</div>
<div class="paragraph">
<p><a href="https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VkRenderPassFragmentDensityMapCreateInfoEXT" class="bare">https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VkRenderPassFragmentDensityMapCreateInfoEXT</a></p>
</div>
<div class="paragraph">
<p>This page is extracted from the Vulkan Specification.
Fixes and changes should be made to the Specification, not directly.</p>
</div>
<div style="page-break-after: always;"></div>
</div>
</div>
<div class="sect2">
<h3 id="_vkrenderpassinputattachmentaspectcreateinfo3">VkRenderPassInputAttachmentAspectCreateInfo(3)</h3>
<div class="sect3">
<h4 id="_name_723">Name</h4>
<div class="paragraph">
<p>VkRenderPassInputAttachmentAspectCreateInfo - Structure specifying, for a given subpass/input attachment pair, which aspect <strong class="purple">can</strong> be read.</p>
</div>
</div>
<div class="sect3">
<h4 id="_c_specification_723">C Specification</h4>
<div class="paragraph">
<p>To specify which aspects of an input attachment <strong class="purple">can</strong> be read add a
<a href="#VkRenderPassInputAttachmentAspectCreateInfo">VkRenderPassInputAttachmentAspectCreateInfo</a> structure to the
<code>pNext</code> chain of the <a href="#VkRenderPassCreateInfo">VkRenderPassCreateInfo</a> structure:</p>
</div>
<div class="paragraph">
<p>The <code>VkRenderPassInputAttachmentAspectCreateInfo</code> structure is defined
as:</p>
</div>
<div id="VkRenderPassInputAttachmentAspectCreateInfo" class="listingblock">
<div class="content">
<pre class="highlight"><code class="language-c++" data-lang="c++">typedef struct VkRenderPassInputAttachmentAspectCreateInfo {
    VkStructureType                            sType;
    const void*                                pNext;
    uint32_t                                   aspectReferenceCount;
    const VkInputAttachmentAspectReference*    pAspectReferences;
} VkRenderPassInputAttachmentAspectCreateInfo;</code></pre>
</div>
</div>
<div class="paragraph">
<p>or the equivalent</p>
</div>
<div id="VkRenderPassInputAttachmentAspectCreateInfoKHR" class="listingblock">
<div class="content">
<pre class="highlight"><code class="language-c++" data-lang="c++">typedef VkRenderPassInputAttachmentAspectCreateInfo VkRenderPassInputAttachmentAspectCreateInfoKHR;</code></pre>
</div>
</div>
</div>
<div class="sect3">
<h4 id="_members_360">Members</h4>
<div class="ulist">
<ul>
<li>
<p><code>sType</code> is the type of this structure.</p>
</li>
<li>
<p><code>pNext</code> is <code>NULL</code> or a pointer to an extension-specific structure.</p>
</li>
<li>
<p><code>aspectReferenceCount</code> is the number of elements in the
<code>pAspectReferences</code> array.</p>
</li>
<li>
<p><code>pAspectReferences</code> points to an array of <code>aspectReferenceCount</code>
number of <a href="#VkInputAttachmentAspectReference">VkInputAttachmentAspectReference</a> structures describing
which aspect(s) <strong class="purple">can</strong> be accessed for a given input attachment within a
given subpass.</p>
</li>
</ul>
</div>
</div>
<div class="sect3">
<h4 id="_description_723">Description</h4>
<div class="sidebarblock">
<div class="content">
<div class="title">Valid Usage (Implicit)</div>
<div class="ulist">
<ul>
<li>
<p><a id="VUID-VkRenderPassInputAttachmentAspectCreateInfo-sType-sType"></a> <code>sType</code> <strong class="purple">must</strong> be <code>VK_STRUCTURE_TYPE_RENDER_PASS_INPUT_ATTACHMENT_ASPECT_CREATE_INFO</code></p>
</li>
<li>
<p><a id="VUID-VkRenderPassInputAttachmentAspectCreateInfo-pAspectReferences-parameter"></a> <code>pAspectReferences</code> <strong class="purple">must</strong> be a valid pointer to an array of <code>aspectReferenceCount</code> valid <code>VkInputAttachmentAspectReference</code> structures</p>
</li>
<li>
<p><a id="VUID-VkRenderPassInputAttachmentAspectCreateInfo-aspectReferenceCount-arraylength"></a> <code>aspectReferenceCount</code> <strong class="purple">must</strong> be greater than <code>0</code></p>
</li>
</ul>
</div>
</div>
</div>
</div>
<div class="sect3">
<h4 id="_see_also_723">See Also</h4>
<div class="paragraph">
<p><a href="#VkInputAttachmentAspectReference">VkInputAttachmentAspectReference</a>, <a href="#VkStructureType">VkStructureType</a></p>
</div>
</div>
<div class="sect3">
<h4 id="_document_notes_723">Document Notes</h4>
<div class="paragraph">
<p>For more information, see the Vulkan Specification at URL</p>
</div>
<div class="paragraph">
<p><a href="https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VkRenderPassInputAttachmentAspectCreateInfo" class="bare">https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VkRenderPassInputAttachmentAspectCreateInfo</a></p>
</div>
<div class="paragraph">
<p>This page is extracted from the Vulkan Specification.
Fixes and changes should be made to the Specification, not directly.</p>
</div>
<div style="page-break-after: always;"></div>
</div>
</div>
<div class="sect2">
<h3 id="_vkrenderpassmultiviewcreateinfo3">VkRenderPassMultiviewCreateInfo(3)</h3>
<div class="sect3">
<h4 id="_name_724">Name</h4>
<div class="paragraph">
<p>VkRenderPassMultiviewCreateInfo - Structure containing multiview info for all subpasses</p>
</div>
</div>
<div class="sect3">
<h4 id="_c_specification_724">C Specification</h4>
<div class="paragraph">
<p>If the <code>VkRenderPassCreateInfo</code>::<code>pNext</code> chain includes a
<code>VkRenderPassMultiviewCreateInfo</code> structure, then that structure
includes an array of view masks, view offsets, and correlation masks for the
render pass.</p>
</div>
<div class="paragraph">
<p>The <code>VkRenderPassMultiviewCreateInfo</code> structure is defined as:</p>
</div>
<div id="VkRenderPassMultiviewCreateInfo" class="listingblock">
<div class="content">
<pre class="highlight"><code class="language-c++" data-lang="c++">typedef struct VkRenderPassMultiviewCreateInfo {
    VkStructureType    sType;
    const void*        pNext;
    uint32_t           subpassCount;
    const uint32_t*    pViewMasks;
    uint32_t           dependencyCount;
    const int32_t*     pViewOffsets;
    uint32_t           correlationMaskCount;
    const uint32_t*    pCorrelationMasks;
} VkRenderPassMultiviewCreateInfo;</code></pre>
</div>
</div>
<div class="paragraph">
<p>or the equivalent</p>
</div>
<div id="VkRenderPassMultiviewCreateInfoKHR" class="listingblock">
<div class="content">
<pre class="highlight"><code class="language-c++" data-lang="c++">typedef VkRenderPassMultiviewCreateInfo VkRenderPassMultiviewCreateInfoKHR;</code></pre>
</div>
</div>
</div>
<div class="sect3">
<h4 id="_members_361">Members</h4>
<div class="ulist">
<ul>
<li>
<p><code>sType</code> is the type of this structure.</p>
</li>
<li>
<p><code>pNext</code> is <code>NULL</code> or a pointer to an extension-specific structure.</p>
</li>
<li>
<p><code>subpassCount</code> is zero or is the number of subpasses in the render
pass.</p>
</li>
<li>
<p><code>pViewMasks</code> points to an array of <code>subpassCount</code> number of view
masks, where each mask is a bitfield of view indices describing which
views rendering is broadcast to in each subpass, when multiview is
enabled.
If <code>subpassCount</code> is zero, each view mask is treated as zero.</p>
</li>
<li>
<p><code>dependencyCount</code> is zero or the number of dependencies in the
render pass.</p>
</li>
<li>
<p><code>pViewOffsets</code> points to an array of <code>dependencyCount</code> view
offsets, one for each dependency.
If <code>dependencyCount</code> is zero, each dependency&#8217;s view offset is
treated as zero.
Each view offset controls which views in the source subpass the views in
the destination subpass depend on.</p>
</li>
<li>
<p><code>correlationMaskCount</code> is zero or a number of correlation masks.</p>
</li>
<li>
<p><code>pCorrelationMasks</code> is an array of view masks indicating sets of
views that <strong class="purple">may</strong> be more efficient to render concurrently.</p>
</li>
</ul>
</div>
</div>
<div class="sect3">
<h4 id="_description_724">Description</h4>
<div class="paragraph">
<p>When a subpass uses a non-zero view mask, <em>multiview</em> functionality is
considered to be enabled.
Multiview is all-or-nothing for a render pass - that is, either all
subpasses <strong class="purple">must</strong> have a non-zero view mask (though some subpasses <strong class="purple">may</strong> have
only one view) or all <strong class="purple">must</strong> be zero.
Multiview causes all drawing and clear commands in the subpass to behave as
if they were broadcast to each view, where a view is represented by one
layer of the framebuffer attachments.
All draws and clears are broadcast to each <em>view index</em> whose bit is set in
the view mask.
The view index is provided in the <code>ViewIndex</code> shader input variable, and
color, depth/stencil, and input attachments all read/write the layer of the
framebuffer corresponding to the view index.</p>
</div>
<div class="paragraph">
<p>If the view mask is zero for all subpasses, multiview is considered to be
disabled and all drawing commands execute normally, without this additional
broadcasting.</p>
</div>
<div class="paragraph">
<p>Some implementations <strong class="purple">may</strong> not support multiview in conjunction with
<a href="vkspec.html#features-multiview-gs">geometry shaders</a> or
<a href="vkspec.html#features-multiview-tess">tessellation shaders</a>.</p>
</div>
<div id="renderpass-multiview-view-local" class="paragraph">
<p>When multiview is enabled, the <code>VK_DEPENDENCY_VIEW_LOCAL_BIT</code> bit in a
dependency <strong class="purple">can</strong> be used to express a view-local dependency, meaning that
each view in the destination subpass depends on a single view in the source
subpass.
Unlike pipeline barriers, a subpass dependency <strong class="purple">can</strong> potentially have a
different view mask in the source subpass and the destination subpass.
If the dependency is view-local, then each view (<span class="eq">dstView</span>) in the
destination subpass depends on the view <span class="eq">dstView + 
<code>pViewOffsets</code>[dependency]</span> in the source subpass.
If there is not such a view in the source subpass, then this dependency does
not affect that view in the destination subpass.
If the dependency is not view-local, then all views in the destination
subpass depend on all views in the source subpass, and the view offset is
ignored.
A non-zero view offset is not allowed in a self-dependency.</p>
</div>
<div class="paragraph">
<p>The elements of <code>pCorrelationMasks</code> are a set of masks of views
indicating that views in the same mask <strong class="purple">may</strong> exhibit spatial coherency
between the views, making it more efficient to render them concurrently.
Correlation masks <strong class="purple">must</strong> not have a functional effect on the results of the
multiview rendering.</p>
</div>
<div class="paragraph">
<p>When multiview is enabled, at the beginning of each subpass all non-render
pass state is undefined.
In particular, each time <a href="#vkCmdBeginRenderPass">vkCmdBeginRenderPass</a> or
<a href="#vkCmdNextSubpass">vkCmdNextSubpass</a> is called the graphics pipeline <strong class="purple">must</strong> be bound, any
relevant descriptor sets or vertex/index buffers <strong class="purple">must</strong> be bound, and any
relevant dynamic state or push constants <strong class="purple">must</strong> be set before they are used.</p>
</div>
<div class="paragraph">
<p>A multiview subpass <strong class="purple">can</strong> declare that its shaders will write per-view
attributes for all views in a single invocation, by setting the
<code>VK_SUBPASS_DESCRIPTION_PER_VIEW_ATTRIBUTES_BIT_NVX</code> bit in the subpass
description.
The only supported per-view attributes are position and viewport mask, and
per-view position and viewport masks are written to output array variables
decorated with <code>PositionPerViewNV</code> and <code>ViewportMaskPerViewNV</code>,
respectively.
If <code><a href="vkspec.html#VK_NV_viewport_array2" class="bare">html/vkspec.html#VK_NV_viewport_array2</a></code> is not supported and enabled,
<code>ViewportMaskPerViewNV</code> <strong class="purple">must</strong> not be used.
Values written to elements of <code>PositionPerViewNV</code> and
<code>ViewportMaskPerViewNV</code> <strong class="purple">must</strong> not depend on the <code>ViewIndex</code>.
The shader <strong class="purple">must</strong> also write to an output variable decorated with
<code>Position</code>, and the value written to <code>Position</code> <strong class="purple">must</strong> equal the value
written to <code>PositionPerViewNV</code>[<code>ViewIndex</code>].
Similarly, if <code>ViewportMaskPerViewNV</code> is written to then the shader <strong class="purple">must</strong>
also write to an output variable decorated with <code>ViewportMaskNV</code>, and the
value written to <code>ViewportMaskNV</code> <strong class="purple">must</strong> equal the value written to
<code>ViewportMaskPerViewNV</code>[<code>ViewIndex</code>].
Implementations will either use values taken from <code>Position</code> and
<code>ViewportMaskNV</code> and invoke the shader once for each view, or will use
values taken from <code>PositionPerViewNV</code> and <code>ViewportMaskPerViewNV</code> and
invoke the shader fewer times.
The values written to <code>Position</code> and <code>ViewportMaskNV</code> <strong class="purple">must</strong> not depend
on the values written to <code>PositionPerViewNV</code> and
<code>ViewportMaskPerViewNV</code>, or vice versa (to allow compilers to eliminate
the unused outputs).
All attributes that do not have <code>*PerViewNV</code> counterparts <strong class="purple">must</strong> not depend
on <code>ViewIndex</code>.</p>
</div>
<div class="paragraph">
<p>Per-view attributes are all-or-nothing for a subpass.
That is, all pipelines compiled against a subpass that includes the
<code>VK_SUBPASS_DESCRIPTION_PER_VIEW_ATTRIBUTES_BIT_NVX</code> bit <strong class="purple">must</strong> write
per-view attributes to the <code>*PerViewNV[]</code> shader outputs, in addition to the
non-per-view (e.g. <code>Position</code>) outputs.
Pipelines compiled against a subpass that does not include this bit <strong class="purple">must</strong>
not include the <code>*PerViewNV[]</code> outputs in their interfaces.</p>
</div>
<div class="sidebarblock">
<div class="content">
<div class="title">Valid Usage</div>
<div class="ulist">
<ul>
<li>
<p><a id="VUID-VkRenderPassMultiviewCreateInfo-pCorrelationMasks-00841"></a>
Each view index <strong class="purple">must</strong> not be set in more than one element of
<code>pCorrelationMasks</code></p>
</li>
</ul>
</div>
</div>
</div>
<div class="sidebarblock">
<div class="content">
<div class="title">Valid Usage (Implicit)</div>
<div class="ulist">
<ul>
<li>
<p><a id="VUID-VkRenderPassMultiviewCreateInfo-sType-sType"></a> <code>sType</code> <strong class="purple">must</strong> be <code>VK_STRUCTURE_TYPE_RENDER_PASS_MULTIVIEW_CREATE_INFO</code></p>
</li>
<li>
<p><a id="VUID-VkRenderPassMultiviewCreateInfo-pViewMasks-parameter"></a> If <code>subpassCount</code> is not <code>0</code>, <code>pViewMasks</code> <strong class="purple">must</strong> be a valid pointer to an array of <code>subpassCount</code> <code>uint32_t</code> values</p>
</li>
<li>
<p><a id="VUID-VkRenderPassMultiviewCreateInfo-pViewOffsets-parameter"></a> If <code>dependencyCount</code> is not <code>0</code>, <code>pViewOffsets</code> <strong class="purple">must</strong> be a valid pointer to an array of <code>dependencyCount</code> <code>int32_t</code> values</p>
</li>
<li>
<p><a id="VUID-VkRenderPassMultiviewCreateInfo-pCorrelationMasks-parameter"></a> If <code>correlationMaskCount</code> is not <code>0</code>, <code>pCorrelationMasks</code> <strong class="purple">must</strong> be a valid pointer to an array of <code>correlationMaskCount</code> <code>uint32_t</code> values</p>
</li>
</ul>
</div>
</div>
</div>
</div>
<div class="sect3">
<h4 id="_see_also_724">See Also</h4>
<div class="paragraph">
<p><a href="#VkStructureType">VkStructureType</a></p>
</div>
</div>
<div class="sect3">
<h4 id="_document_notes_724">Document Notes</h4>
<div class="paragraph">
<p>For more information, see the Vulkan Specification at URL</p>
</div>
<div class="paragraph">
<p><a href="https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VkRenderPassMultiviewCreateInfo" class="bare">https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VkRenderPassMultiviewCreateInfo</a></p>
</div>
<div class="paragraph">
<p>This page is extracted from the Vulkan Specification.
Fixes and changes should be made to the Specification, not directly.</p>
</div>
<div style="page-break-after: always;"></div>
</div>
</div>
<div class="sect2">
<h3 id="_vkrenderpasssamplelocationsbegininfoext3">VkRenderPassSampleLocationsBeginInfoEXT(3)</h3>
<div class="sect3">
<h4 id="_name_725">Name</h4>
<div class="paragraph">
<p>VkRenderPassSampleLocationsBeginInfoEXT - Structure specifying sample locations to use for the layout transition of custom sample locations compatible depth/stencil attachments</p>
</div>
</div>
<div class="sect3">
<h4 id="_c_specification_725">C Specification</h4>
<div class="paragraph">
<p>The image layout of the depth aspect of a depth/stencil attachment referring
to an image created with
<code>VK_IMAGE_CREATE_SAMPLE_LOCATIONS_COMPATIBLE_DEPTH_BIT_EXT</code> is dependent
on the last sample locations used to render to the image subresource, thus
preserving the contents of such depth/stencil attachments across subpass
boundaries requires the application to specify these sample locations
whenever a layout transition of the attachment <strong class="purple">may</strong> occur.
This information <strong class="purple">can</strong> be provided by chaining an instance of the
<code>VkRenderPassSampleLocationsBeginInfoEXT</code> structure to the <code>pNext</code>
chain of <code>VkRenderPassBeginInfo</code>.</p>
</div>
<div class="paragraph">
<p>The <code>VkRenderPassSampleLocationsBeginInfoEXT</code> structure is defined as:</p>
</div>
<div id="VkRenderPassSampleLocationsBeginInfoEXT" class="listingblock">
<div class="content">
<pre class="highlight"><code class="language-c++" data-lang="c++">typedef struct VkRenderPassSampleLocationsBeginInfoEXT {
    VkStructureType                          sType;
    const void*                              pNext;
    uint32_t                                 attachmentInitialSampleLocationsCount;
    const VkAttachmentSampleLocationsEXT*    pAttachmentInitialSampleLocations;
    uint32_t                                 postSubpassSampleLocationsCount;
    const VkSubpassSampleLocationsEXT*       pPostSubpassSampleLocations;
} VkRenderPassSampleLocationsBeginInfoEXT;</code></pre>
</div>
</div>
</div>
<div class="sect3">
<h4 id="_members_362">Members</h4>
<div class="ulist">
<ul>
<li>
<p><code>sType</code> is the type of this structure.</p>
</li>
<li>
<p><code>pNext</code> is <code>NULL</code> or a pointer to an extension-specific structure.</p>
</li>
<li>
<p><code>attachmentInitialSampleLocationsCount</code> is the number of elements in
the <code>pAttachmentInitialSampleLocations</code> array.</p>
</li>
<li>
<p><code>pAttachmentInitialSampleLocations</code> is an array of
<code>attachmentInitialSampleLocationsCount</code>
<a href="#VkAttachmentSampleLocationsEXT">VkAttachmentSampleLocationsEXT</a> structures specifying the
attachment indices and their corresponding sample location state.
Each element of <code>pAttachmentInitialSampleLocations</code> <strong class="purple">can</strong> specify the
sample location state to use in the automatic layout transition
performed to transition a depth/stencil attachment from the initial
layout of the attachment to the image layout specified for the
attachment in the first subpass using it.</p>
</li>
<li>
<p><code>postSubpassSampleLocationsCount</code> is the number of elements in the
<code>pPostSubpassSampleLocations</code> array.</p>
</li>
<li>
<p><code>pPostSubpassSampleLocations</code> is an array of
<code>postSubpassSampleLocationsCount</code> <a href="#VkSubpassSampleLocationsEXT">VkSubpassSampleLocationsEXT</a>
structures specifying the subpass indices and their corresponding sample
location state.
Each element of <code>pPostSubpassSampleLocations</code> <strong class="purple">can</strong> specify the
sample location state to use in the automatic layout transition
performed to transition the depth/stencil attachment used by the
specified subpass to the image layout specified in a dependent subpass
or to the final layout of the attachment in case the specified subpass
is the last subpass using that attachment.
In addition, if
<a href="#VkPhysicalDeviceSampleLocationsPropertiesEXT">VkPhysicalDeviceSampleLocationsPropertiesEXT</a>::<code>variableSampleLocations</code>
is <code>VK_FALSE</code>, each element of <code>pPostSubpassSampleLocations</code>
<strong class="purple">must</strong> specify the sample location state that matches the sample
locations used by all pipelines that will be bound to a command buffer
during the specified subpass.
If <code>variableSampleLocations</code> is <code>VK_TRUE</code>, the sample locations
used for rasterization do not depend on
<code>pPostSubpassSampleLocations</code>.</p>
</li>
</ul>
</div>
</div>
<div class="sect3">
<h4 id="_description_725">Description</h4>
<div class="sidebarblock">
<div class="content">
<div class="title">Valid Usage (Implicit)</div>
<div class="ulist">
<ul>
<li>
<p><a id="VUID-VkRenderPassSampleLocationsBeginInfoEXT-sType-sType"></a> <code>sType</code> <strong class="purple">must</strong> be <code>VK_STRUCTURE_TYPE_RENDER_PASS_SAMPLE_LOCATIONS_BEGIN_INFO_EXT</code></p>
</li>
<li>
<p><a id="VUID-VkRenderPassSampleLocationsBeginInfoEXT-pAttachmentInitialSampleLocations-parameter"></a> If <code>attachmentInitialSampleLocationsCount</code> is not <code>0</code>, <code>pAttachmentInitialSampleLocations</code> <strong class="purple">must</strong> be a valid pointer to an array of <code>attachmentInitialSampleLocationsCount</code> valid <code>VkAttachmentSampleLocationsEXT</code> structures</p>
</li>
<li>
<p><a id="VUID-VkRenderPassSampleLocationsBeginInfoEXT-pPostSubpassSampleLocations-parameter"></a> If <code>postSubpassSampleLocationsCount</code> is not <code>0</code>, <code>pPostSubpassSampleLocations</code> <strong class="purple">must</strong> be a valid pointer to an array of <code>postSubpassSampleLocationsCount</code> valid <code>VkSubpassSampleLocationsEXT</code> structures</p>
</li>
</ul>
</div>
</div>
</div>
</div>
<div class="sect3">
<h4 id="_see_also_725">See Also</h4>
<div class="paragraph">
<p><a href="#VkAttachmentSampleLocationsEXT">VkAttachmentSampleLocationsEXT</a>, <a href="#VkStructureType">VkStructureType</a>, <a href="#VkSubpassSampleLocationsEXT">VkSubpassSampleLocationsEXT</a></p>
</div>
</div>
<div class="sect3">
<h4 id="_document_notes_725">Document Notes</h4>
<div class="paragraph">
<p>For more information, see the Vulkan Specification at URL</p>
</div>
<div class="paragraph">
<p><a href="https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VkRenderPassSampleLocationsBeginInfoEXT" class="bare">https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VkRenderPassSampleLocationsBeginInfoEXT</a></p>
</div>
<div class="paragraph">
<p>This page is extracted from the Vulkan Specification.
Fixes and changes should be made to the Specification, not directly.</p>
</div>
<div style="page-break-after: always;"></div>
</div>
</div>
<div class="sect2">
<h3 id="_vksamplelocationext3">VkSampleLocationEXT(3)</h3>
<div class="sect3">
<h4 id="_name_726">Name</h4>
<div class="paragraph">
<p>VkSampleLocationEXT - Structure specifying the coordinates of a sample location</p>
</div>
</div>
<div class="sect3">
<h4 id="_c_specification_726">C Specification</h4>
<div class="paragraph">
<p>The <code>VkSampleLocationEXT</code> structure is defined as:</p>
</div>
<div id="VkSampleLocationEXT" class="listingblock">
<div class="content">
<pre class="highlight"><code class="language-c++" data-lang="c++">typedef struct VkSampleLocationEXT {
    float    x;
    float    y;
} VkSampleLocationEXT;</code></pre>
</div>
</div>
</div>
<div class="sect3">
<h4 id="_members_363">Members</h4>
<div class="ulist">
<ul>
<li>
<p><code>x</code> is the horizontal coordinate of the sample&#8217;s location.</p>
</li>
<li>
<p><code>y</code> is the vertical coordinate of the sample&#8217;s location.</p>
</li>
</ul>
</div>
</div>
<div class="sect3">
<h4 id="_description_726">Description</h4>
<div class="paragraph">
<p>The domain space of the sample location coordinates has an upper-left origin
within the pixel in framebuffer space.</p>
</div>
<div class="paragraph">
<p>The values specified in a <code>VkSampleLocationEXT</code> structure are always
clamped to the implementation-dependent sample location coordinate range
<span class="eq">[<code>sampleLocationCoordinateRange</code>[0],<code>sampleLocationCoordinateRange</code>[1]]</span>
that <strong class="purple">can</strong> be queried by chaining the
<a href="#VkPhysicalDeviceSampleLocationsPropertiesEXT">VkPhysicalDeviceSampleLocationsPropertiesEXT</a> structure to the
<code>pNext</code> chain of <a href="#VkPhysicalDeviceProperties2">VkPhysicalDeviceProperties2</a>.</p>
</div>
</div>
<div class="sect3">
<h4 id="_see_also_726">See Also</h4>
<div class="paragraph">
<p><a href="#VkSampleLocationsInfoEXT">VkSampleLocationsInfoEXT</a></p>
</div>
</div>
<div class="sect3">
<h4 id="_document_notes_726">Document Notes</h4>
<div class="paragraph">
<p>For more information, see the Vulkan Specification at URL</p>
</div>
<div class="paragraph">
<p><a href="https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VkSampleLocationEXT" class="bare">https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VkSampleLocationEXT</a></p>
</div>
<div class="paragraph">
<p>This page is extracted from the Vulkan Specification.
Fixes and changes should be made to the Specification, not directly.</p>
</div>
<div style="page-break-after: always;"></div>
</div>
</div>
<div class="sect2">
<h3 id="_vksamplelocationsinfoext3">VkSampleLocationsInfoEXT(3)</h3>
<div class="sect3">
<h4 id="_name_727">Name</h4>
<div class="paragraph">
<p>VkSampleLocationsInfoEXT - Structure specifying a set of sample locations</p>
</div>
</div>
<div class="sect3">
<h4 id="_c_specification_727">C Specification</h4>
<div class="paragraph">
<p>The <code>VkSampleLocationsInfoEXT</code> structure is defined as:</p>
</div>
<div id="VkSampleLocationsInfoEXT" class="listingblock">
<div class="content">
<pre class="highlight"><code class="language-c++" data-lang="c++">typedef struct VkSampleLocationsInfoEXT {
    VkStructureType               sType;
    const void*                   pNext;
    VkSampleCountFlagBits         sampleLocationsPerPixel;
    VkExtent2D                    sampleLocationGridSize;
    uint32_t                      sampleLocationsCount;
    const VkSampleLocationEXT*    pSampleLocations;
} VkSampleLocationsInfoEXT;</code></pre>
</div>
</div>
</div>
<div class="sect3">
<h4 id="_members_364">Members</h4>
<div class="ulist">
<ul>
<li>
<p><code>sType</code> is the type of this structure.</p>
</li>
<li>
<p><code>pNext</code> is <code>NULL</code> or a pointer to an extension-specific structure.</p>
</li>
<li>
<p><code>sampleLocationsPerPixel</code> is a <a href="#VkSampleCountFlagBits">VkSampleCountFlagBits</a>
specifying the number of sample locations per pixel.</p>
</li>
<li>
<p><code>sampleLocationGridSize</code> is the size of the sample location grid to
select custom sample locations for.</p>
</li>
<li>
<p><code>sampleLocationsCount</code> is the number of sample locations in
<code>pSampleLocations</code>.</p>
</li>
<li>
<p><code>pSampleLocations</code> is an array of <code>sampleLocationsCount</code>
<a href="#VkSampleLocationEXT">VkSampleLocationEXT</a> structures.</p>
</li>
</ul>
</div>
</div>
<div class="sect3">
<h4 id="_description_727">Description</h4>
<div class="paragraph">
<p>This structure <strong class="purple">can</strong> be used either to specify the sample locations to be
used for rendering or to specify the set of sample locations an image
subresource has been last rendered with for the purposes of layout
transitions of depth/stencil images created with
<code>VK_IMAGE_CREATE_SAMPLE_LOCATIONS_COMPATIBLE_DEPTH_BIT_EXT</code>.</p>
</div>
<div class="paragraph">
<p>The sample locations in <code>pSampleLocations</code> specify
<code>sampleLocationsPerPixel</code> number of sample locations for each pixel in
the grid of the size specified in <code>sampleLocationGridSize</code>.
The sample location for sample <span class="eq">i</span> at the pixel grid location
<span class="eq">(x,y)</span> is taken from <span class="eq"><code>pSampleLocations</code>[(x + y *
<code>sampleLocationGridSize.width</code>) * <code>sampleLocationsPerPixel</code> + i]</span>.</p>
</div>
<div class="paragraph">
<p>If the render pass has a fragment density map, the implementation will
choose the sample locations for the fragment and the contents of
<code>pSampleLocations</code> <strong class="purple">may</strong> be ignored.</p>
</div>
<div class="sidebarblock">
<div class="content">
<div class="title">Valid Usage</div>
<div class="ulist">
<ul>
<li>
<p><a id="VUID-VkSampleLocationsInfoEXT-sampleLocationsPerPixel-01526"></a>
<code>sampleLocationsPerPixel</code> <strong class="purple">must</strong> be a bit value that is set in
<a href="#VkPhysicalDeviceSampleLocationsPropertiesEXT">VkPhysicalDeviceSampleLocationsPropertiesEXT</a>::<code>sampleLocationSampleCounts</code></p>
</li>
<li>
<p><a id="VUID-VkSampleLocationsInfoEXT-sampleLocationsCount-01527"></a>
<code>sampleLocationsCount</code> <strong class="purple">must</strong> equal
<span class="eq"><code>sampleLocationsPerPixel</code> ×
<code>sampleLocationGridSize.width</code> ×
<code>sampleLocationGridSize.height</code></span></p>
</li>
</ul>
</div>
</div>
</div>
<div class="sidebarblock">
<div class="content">
<div class="title">Valid Usage (Implicit)</div>
<div class="ulist">
<ul>
<li>
<p><a id="VUID-VkSampleLocationsInfoEXT-sType-sType"></a> <code>sType</code> <strong class="purple">must</strong> be <code>VK_STRUCTURE_TYPE_SAMPLE_LOCATIONS_INFO_EXT</code></p>
</li>
<li>
<p><a id="VUID-VkSampleLocationsInfoEXT-sampleLocationsPerPixel-parameter"></a> If <code>sampleLocationsPerPixel</code> is not <code>0</code>, <code>sampleLocationsPerPixel</code> <strong class="purple">must</strong> be a valid <a href="#VkSampleCountFlagBits">VkSampleCountFlagBits</a> value</p>
</li>
<li>
<p><a id="VUID-VkSampleLocationsInfoEXT-pSampleLocations-parameter"></a> If <code>sampleLocationsCount</code> is not <code>0</code>, <code>pSampleLocations</code> <strong class="purple">must</strong> be a valid pointer to an array of <code>sampleLocationsCount</code> <code>VkSampleLocationEXT</code> structures</p>
</li>
</ul>
</div>
</div>
</div>
</div>
<div class="sect3">
<h4 id="_see_also_727">See Also</h4>
<div class="paragraph">
<p><a href="#VkAttachmentSampleLocationsEXT">VkAttachmentSampleLocationsEXT</a>, <a href="#VkExtent2D">VkExtent2D</a>, <a href="#VkPipelineSampleLocationsStateCreateInfoEXT">VkPipelineSampleLocationsStateCreateInfoEXT</a>, <a href="#VkSampleCountFlagBits">VkSampleCountFlagBits</a>, <a href="#VkSampleLocationEXT">VkSampleLocationEXT</a>, <a href="#VkStructureType">VkStructureType</a>, <a href="#VkSubpassSampleLocationsEXT">VkSubpassSampleLocationsEXT</a>, <a href="#vkCmdSetSampleLocationsEXT">vkCmdSetSampleLocationsEXT</a></p>
</div>
</div>
<div class="sect3">
<h4 id="_document_notes_727">Document Notes</h4>
<div class="paragraph">
<p>For more information, see the Vulkan Specification at URL</p>
</div>
<div class="paragraph">
<p><a href="https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VkSampleLocationsInfoEXT" class="bare">https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VkSampleLocationsInfoEXT</a></p>
</div>
<div class="paragraph">
<p>This page is extracted from the Vulkan Specification.
Fixes and changes should be made to the Specification, not directly.</p>
</div>
<div style="page-break-after: always;"></div>
</div>
</div>
<div class="sect2">
<h3 id="_vksamplercreateinfo3">VkSamplerCreateInfo(3)</h3>
<div class="sect3">
<h4 id="_name_728">Name</h4>
<div class="paragraph">
<p>VkSamplerCreateInfo - Structure specifying parameters of a newly created sampler</p>
</div>
</div>
<div class="sect3">
<h4 id="_c_specification_728">C Specification</h4>
<div class="paragraph">
<p>The <code>VkSamplerCreateInfo</code> structure is defined as:</p>
</div>
<div id="VkSamplerCreateInfo" class="listingblock">
<div class="content">
<pre class="highlight"><code class="language-c++" data-lang="c++">typedef struct VkSamplerCreateInfo {
    VkStructureType         sType;
    const void*             pNext;
    VkSamplerCreateFlags    flags;
    VkFilter                magFilter;
    VkFilter                minFilter;
    VkSamplerMipmapMode     mipmapMode;
    VkSamplerAddressMode    addressModeU;
    VkSamplerAddressMode    addressModeV;
    VkSamplerAddressMode    addressModeW;
    float                   mipLodBias;
    VkBool32                anisotropyEnable;
    float                   maxAnisotropy;
    VkBool32                compareEnable;
    VkCompareOp             compareOp;
    float                   minLod;
    float                   maxLod;
    VkBorderColor           borderColor;
    VkBool32                unnormalizedCoordinates;
} VkSamplerCreateInfo;</code></pre>
</div>
</div>
</div>
<div class="sect3">
<h4 id="_members_365">Members</h4>
<div class="ulist">
<ul>
<li>
<p><code>sType</code> is the type of this structure.</p>
</li>
<li>
<p><code>pNext</code> is <code>NULL</code> or a pointer to an extension-specific structure.</p>
</li>
<li>
<p><code>flags</code> is a bitmask of <a href="#VkSamplerCreateFlagBits">VkSamplerCreateFlagBits</a> describing
additional parameters of the sampler.</p>
</li>
<li>
<p><code>magFilter</code> is a <a href="#VkFilter">VkFilter</a> value specifying the magnification
filter to apply to lookups.</p>
</li>
<li>
<p><code>minFilter</code> is a <a href="#VkFilter">VkFilter</a> value specifying the minification
filter to apply to lookups.</p>
</li>
<li>
<p><code>mipmapMode</code> is a <a href="#VkSamplerMipmapMode">VkSamplerMipmapMode</a> value specifying the
mipmap filter to apply to lookups.</p>
</li>
<li>
<p><code>addressModeU</code> is a <a href="#VkSamplerAddressMode">VkSamplerAddressMode</a> value specifying the
addressing mode for outside [0..1] range for U coordinate.</p>
</li>
<li>
<p><code>addressModeV</code> is a <a href="#VkSamplerAddressMode">VkSamplerAddressMode</a> value specifying the
addressing mode for outside [0..1] range for V coordinate.</p>
</li>
<li>
<p><code>addressModeW</code> is a <a href="#VkSamplerAddressMode">VkSamplerAddressMode</a> value specifying the
addressing mode for outside [0..1] range for W coordinate.</p>
</li>
<li>
<p><a id="samplers-mipLodBias"></a> <code>mipLodBias</code> is the bias to be added to
mipmap LOD (level-of-detail) calculation and bias provided by image
sampling functions in SPIR-V, as described in the
<a href="vkspec.html#textures-level-of-detail-operation">Level-of-Detail Operation</a>
section.</p>
</li>
<li>
<p><a id="samplers-maxAnisotropy"></a> <code>anisotropyEnable</code> is <code>VK_TRUE</code> to
enable anisotropic filtering, as described in the
<a href="vkspec.html#textures-texel-anisotropic-filtering">Texel Anisotropic Filtering</a>
section, or <code>VK_FALSE</code> otherwise.</p>
</li>
<li>
<p><code>maxAnisotropy</code> is the anisotropy value clamp used by the sampler
when <code>anisotropyEnable</code> is <code>VK_TRUE</code>.
If <code>anisotropyEnable</code> is <code>VK_FALSE</code>, <code>maxAnisotropy</code> is
ignored.</p>
</li>
<li>
<p><code>compareEnable</code> is <code>VK_TRUE</code> to enable comparison against a
reference value during lookups, or <code>VK_FALSE</code> otherwise.</p>
<div class="ulist">
<ul>
<li>
<p>Note: Some implementations will default to shader state if this member
does not match.</p>
</li>
</ul>
</div>
</li>
<li>
<p><code>compareOp</code> is a <a href="#VkCompareOp">VkCompareOp</a> value specifying the comparison
function to apply to fetched data before filtering as described in the
<a href="vkspec.html#textures-depth-compare-operation">Depth Compare Operation</a> section.</p>
</li>
<li>
<p><code>minLod</code> and <code>maxLod</code> are the values used to clamp the computed
LOD value, as described in the <a href="vkspec.html#textures-level-of-detail-operation">Level-of-Detail Operation</a> section.</p>
</li>
<li>
<p><code>borderColor</code> is a <a href="#VkBorderColor">VkBorderColor</a> value specifying the
predefined border color to use.</p>
</li>
<li>
<p><a id="samplers-unnormalizedCoordinates"></a> <code>unnormalizedCoordinates</code>
controls whether to use unnormalized or normalized texel coordinates to
address texels of the image.
When set to <code>VK_TRUE</code>, the range of the image coordinates used to
lookup the texel is in the range of zero to the image dimensions for x,
y and z.
When set to <code>VK_FALSE</code> the range of image coordinates is zero to
one.</p>
<div class="paragraph">
<p>When <code>unnormalizedCoordinates</code> is <code>VK_TRUE</code>, images the sampler is
used with in the shader have the following requirements:</p>
</div>
<div class="ulist">
<ul>
<li>
<p>The <code>viewType</code> <strong class="purple">must</strong> be either <code>VK_IMAGE_VIEW_TYPE_1D</code> or
<code>VK_IMAGE_VIEW_TYPE_2D</code>.</p>
</li>
<li>
<p>The image view <strong class="purple">must</strong> have a single layer and a single mip level.</p>
</li>
</ul>
</div>
<div class="paragraph">
<p>When <code>unnormalizedCoordinates</code> is <code>VK_TRUE</code>, image built-in
functions in the shader that use the sampler have the following
requirements:</p>
</div>
<div class="ulist">
<ul>
<li>
<p>The functions <strong class="purple">must</strong> not use projection.</p>
</li>
<li>
<p>The functions <strong class="purple">must</strong> not use offsets.</p>
</li>
</ul>
</div>
</li>
</ul>
</div>
</div>
<div class="sect3">
<h4 id="_description_728">Description</h4>
<div class="admonitionblock note">
<table>
<tr>
<td class="icon">
<i class="fa icon-note" title="Note"></i>
</td>
<td class="content">
<div class="title">Mapping of OpenGL to Vulkan filter modes</div>
<div class="paragraph">
<p><code>magFilter</code> values of <code>VK_FILTER_NEAREST</code> and <code>VK_FILTER_LINEAR</code>
directly correspond to <code>GL_NEAREST</code> and <code>GL_LINEAR</code> magnification
filters.
<code>minFilter</code> and <code>mipmapMode</code> combine to correspond to the similarly
named OpenGL minification filter of <code>GL_minFilter_MIPMAP_mipmapMode</code>
(e.g. <code>minFilter</code> of <code>VK_FILTER_LINEAR</code> and <code>mipmapMode</code> of
<code>VK_SAMPLER_MIPMAP_MODE_NEAREST</code> correspond to
<code>GL_LINEAR_MIPMAP_NEAREST</code>).</p>
</div>
<div class="paragraph">
<p>There are no Vulkan filter modes that directly correspond to OpenGL
minification filters of <code>GL_LINEAR</code> or <code>GL_NEAREST</code>, but they <strong class="purple">can</strong> be
emulated using <code>VK_SAMPLER_MIPMAP_MODE_NEAREST</code>, <code>minLod</code> = 0, and
<code>maxLod</code> = 0.25, and using <code>minFilter</code> = <code>VK_FILTER_LINEAR</code> or
<code>minFilter</code> = <code>VK_FILTER_NEAREST</code>, respectively.</p>
</div>
<div class="paragraph">
<p>Note that using a <code>maxLod</code> of zero would cause
<a href="vkspec.html#textures-texel-filtering">magnification</a> to always be performed, and the
<code>magFilter</code> to always be used.
This is valid, just not an exact match for OpenGL behavior.
Clamping the maximum LOD to 0.25 allows the <span class="eq">λ</span> value to be
non-zero and minification to be performed, while still always rounding down
to the base level.
If the <code>minFilter</code> and <code>magFilter</code> are equal, then using a
<code>maxLod</code> of zero also works.</p>
</div>
</td>
</tr>
</table>
</div>
<div class="paragraph">
<p>The maximum number of sampler objects which <strong class="purple">can</strong> be simultaneously created
on a device is implementation-dependent and specified by the
<a href="vkspec.html#limits-maxSamplerAllocationCount">maxSamplerAllocationCount</a> member of the
<a href="#VkPhysicalDeviceLimits">VkPhysicalDeviceLimits</a> structure.
If <code>maxSamplerAllocationCount</code> is exceeded, <code>vkCreateSampler</code> will
return <code>VK_ERROR_TOO_MANY_OBJECTS</code>.</p>
</div>
<div class="paragraph">
<p>Since <a href="#VkSampler">VkSampler</a> is a non-dispatchable handle type, implementations
<strong class="purple">may</strong> return the same handle for sampler state vectors that are identical.
In such cases, all such objects would only count once against the
<code>maxSamplerAllocationCount</code> limit.</p>
</div>
<div class="sidebarblock">
<div class="content">
<div class="title">Valid Usage</div>
<div class="ulist">
<ul>
<li>
<p><a id="VUID-VkSamplerCreateInfo-mipLodBias-01069"></a>
The absolute value of <code>mipLodBias</code> <strong class="purple">must</strong> be less than or equal to
<code>VkPhysicalDeviceLimits</code>::<code>maxSamplerLodBias</code></p>
</li>
<li>
<p><a id="VUID-VkSamplerCreateInfo-maxLod-01973"></a>
<code>maxLod</code> <strong class="purple">must</strong> be greater than or equal to <code>minLod</code></p>
</li>
<li>
<p><a id="VUID-VkSamplerCreateInfo-anisotropyEnable-01070"></a>
If the <a href="vkspec.html#features-samplerAnisotropy">anisotropic sampling</a> feature is
not enabled, <code>anisotropyEnable</code> <strong class="purple">must</strong> be <code>VK_FALSE</code></p>
</li>
<li>
<p><a id="VUID-VkSamplerCreateInfo-anisotropyEnable-01071"></a>
If <code>anisotropyEnable</code> is <code>VK_TRUE</code>, <code>maxAnisotropy</code> <strong class="purple">must</strong> be
between <code>1.0</code> and
<code>VkPhysicalDeviceLimits</code>::<code>maxSamplerAnisotropy</code>, inclusive</p>
</li>
<li>
<p><a id="VUID-VkSamplerCreateInfo-minFilter-01645"></a>
If <a href="vkspec.html#samplers-YCbCr-conversion">sampler Y&#8217;C<sub>B</sub>C<sub>R</sub> conversion</a> is
enabled and
<code>VK_FORMAT_FEATURE_SAMPLED_IMAGE_YCBCR_CONVERSION_SEPARATE_RECONSTRUCTION_FILTER_BIT</code>
is not set for the format, <code>minFilter</code> and <code>magFilter</code> <strong class="purple">must</strong> be
equal to the sampler Y&#8217;C<sub>B</sub>C<sub>R</sub> conversion&#8217;s <code>chromaFilter</code></p>
</li>
<li>
<p><a id="VUID-VkSamplerCreateInfo-unnormalizedCoordinates-01072"></a>
If <code>unnormalizedCoordinates</code> is <code>VK_TRUE</code>, <code>minFilter</code> and
<code>magFilter</code> <strong class="purple">must</strong> be equal</p>
</li>
<li>
<p><a id="VUID-VkSamplerCreateInfo-unnormalizedCoordinates-01073"></a>
If <code>unnormalizedCoordinates</code> is <code>VK_TRUE</code>, <code>mipmapMode</code>
<strong class="purple">must</strong> be <code>VK_SAMPLER_MIPMAP_MODE_NEAREST</code></p>
</li>
<li>
<p><a id="VUID-VkSamplerCreateInfo-unnormalizedCoordinates-01074"></a>
If <code>unnormalizedCoordinates</code> is <code>VK_TRUE</code>, <code>minLod</code> and
<code>maxLod</code> <strong class="purple">must</strong> be zero</p>
</li>
<li>
<p><a id="VUID-VkSamplerCreateInfo-unnormalizedCoordinates-01075"></a>
If <code>unnormalizedCoordinates</code> is <code>VK_TRUE</code>, <code>addressModeU</code>
and <code>addressModeV</code> <strong class="purple">must</strong> each be either
<code>VK_SAMPLER_ADDRESS_MODE_CLAMP_TO_EDGE</code> or
<code>VK_SAMPLER_ADDRESS_MODE_CLAMP_TO_BORDER</code></p>
</li>
<li>
<p><a id="VUID-VkSamplerCreateInfo-unnormalizedCoordinates-01076"></a>
If <code>unnormalizedCoordinates</code> is <code>VK_TRUE</code>,
<code>anisotropyEnable</code> <strong class="purple">must</strong> be <code>VK_FALSE</code></p>
</li>
<li>
<p><a id="VUID-VkSamplerCreateInfo-unnormalizedCoordinates-01077"></a>
If <code>unnormalizedCoordinates</code> is <code>VK_TRUE</code>, <code>compareEnable</code>
<strong class="purple">must</strong> be <code>VK_FALSE</code></p>
</li>
<li>
<p><a id="VUID-VkSamplerCreateInfo-addressModeU-01078"></a>
If any of <code>addressModeU</code>, <code>addressModeV</code> or <code>addressModeW</code>
are <code>VK_SAMPLER_ADDRESS_MODE_CLAMP_TO_BORDER</code>, <code>borderColor</code>
<strong class="purple">must</strong> be a valid <a href="#VkBorderColor">VkBorderColor</a> value</p>
</li>
<li>
<p><a id="VUID-VkSamplerCreateInfo-addressModeU-01646"></a>
If <a href="vkspec.html#samplers-YCbCr-conversion">sampler Y&#8217;C<sub>B</sub>C<sub>R</sub> conversion</a> is
enabled, <code>addressModeU</code>, <code>addressModeV</code>, and <code>addressModeW</code>
<strong class="purple">must</strong> be <code>VK_SAMPLER_ADDRESS_MODE_CLAMP_TO_EDGE</code>,
<code>anisotropyEnable</code> <strong class="purple">must</strong> be <code>VK_FALSE</code>, and
<code>unnormalizedCoordinates</code> <strong class="purple">must</strong> be <code>VK_FALSE</code></p>
</li>
<li>
<p><a id="VUID-VkSamplerCreateInfo-None-01647"></a>
The sampler reduction mode <strong class="purple">must</strong> be set to
<code>VK_SAMPLER_REDUCTION_MODE_WEIGHTED_AVERAGE_EXT</code> if
<a href="vkspec.html#samplers-YCbCr-conversion">sampler Y&#8217;C<sub>B</sub>C<sub>R</sub> conversion</a> is enabled</p>
</li>
<li>
<p><a id="VUID-VkSamplerCreateInfo-addressModeU-01079"></a>
If the <code><a href="vkspec.html#VK_KHR_sampler_mirror_clamp_to_edge" class="bare">html/vkspec.html#VK_KHR_sampler_mirror_clamp_to_edge</a></code> extension is not
enabled, <code>addressModeU</code>, <code>addressModeV</code> and <code>addressModeW</code>
<strong class="purple">must</strong> not be <code>VK_SAMPLER_ADDRESS_MODE_MIRROR_CLAMP_TO_EDGE</code></p>
</li>
<li>
<p><a id="VUID-VkSamplerCreateInfo-compareEnable-01080"></a>
If <code>compareEnable</code> is <code>VK_TRUE</code>, <code>compareOp</code> <strong class="purple">must</strong> be a
valid <a href="#VkCompareOp">VkCompareOp</a> value</p>
</li>
<li>
<p><a id="VUID-VkSamplerCreateInfo-magFilter-01081"></a>
If either <code>magFilter</code> or <code>minFilter</code> is
<code>VK_FILTER_CUBIC_EXT</code>, <code>anisotropyEnable</code> <strong class="purple">must</strong> be
<code>VK_FALSE</code></p>
</li>
<li>
<p><a id="VUID-VkSamplerCreateInfo-compareEnable-01423"></a>
If <code>compareEnable</code> is <code>VK_TRUE</code>, the <code>reductionMode</code> member
of <a href="#VkSamplerReductionModeCreateInfoEXT">VkSamplerReductionModeCreateInfoEXT</a> <strong class="purple">must</strong> be
<code>VK_SAMPLER_REDUCTION_MODE_WEIGHTED_AVERAGE_EXT</code></p>
</li>
<li>
<p><a id="VUID-VkSamplerCreateInfo-flags-02574"></a>
If <code>flags</code> includes <code>VK_SAMPLER_CREATE_SUBSAMPLED_BIT_EXT</code>, then
<code>minFilter</code> and <code>magFilter</code> <strong class="purple">must</strong> be equal.</p>
</li>
<li>
<p><a id="VUID-VkSamplerCreateInfo-flags-02575"></a>
If <code>flags</code> includes <code>VK_SAMPLER_CREATE_SUBSAMPLED_BIT_EXT</code>, then
<code>mipmapMode</code> <strong class="purple">must</strong> be <code>VK_SAMPLER_MIPMAP_MODE_NEAREST</code>.</p>
</li>
<li>
<p><a id="VUID-VkSamplerCreateInfo-flags-02576"></a>
If <code>flags</code> includes <code>VK_SAMPLER_CREATE_SUBSAMPLED_BIT_EXT</code>, then
<code>minLod</code> and <code>maxLod</code> <strong class="purple">must</strong> be zero.</p>
</li>
<li>
<p><a id="VUID-VkSamplerCreateInfo-flags-02577"></a>
If <code>flags</code> includes <code>VK_SAMPLER_CREATE_SUBSAMPLED_BIT_EXT</code>, then
<code>addressModeU</code> and <code>addressModeV</code> <strong class="purple">must</strong> each be either
<code>VK_SAMPLER_ADDRESS_MODE_CLAMP_TO_EDGE</code> or
<code>VK_SAMPLER_ADDRESS_MODE_CLAMP_TO_BORDER</code>.</p>
</li>
<li>
<p><a id="VUID-VkSamplerCreateInfo-flags-02578"></a>
If <code>flags</code> includes <code>VK_SAMPLER_CREATE_SUBSAMPLED_BIT_EXT</code>, then
<code>anisotropyEnable</code> <strong class="purple">must</strong> be <code>VK_FALSE</code>.</p>
</li>
<li>
<p><a id="VUID-VkSamplerCreateInfo-flags-02579"></a>
If <code>flags</code> includes <code>VK_SAMPLER_CREATE_SUBSAMPLED_BIT_EXT</code>, then
<code>compareEnable</code> <strong class="purple">must</strong> be <code>VK_FALSE</code>.</p>
</li>
<li>
<p><a id="VUID-VkSamplerCreateInfo-flags-02580"></a>
If <code>flags</code> includes <code>VK_SAMPLER_CREATE_SUBSAMPLED_BIT_EXT</code>, then
<code>unnormalizedCoordinates</code> <strong class="purple">must</strong> be <code>VK_FALSE</code>.</p>
</li>
</ul>
</div>
</div>
</div>
<div class="sidebarblock">
<div class="content">
<div class="title">Valid Usage (Implicit)</div>
<div class="ulist">
<ul>
<li>
<p><a id="VUID-VkSamplerCreateInfo-sType-sType"></a> <code>sType</code> <strong class="purple">must</strong> be <code>VK_STRUCTURE_TYPE_SAMPLER_CREATE_INFO</code></p>
</li>
<li>
<p><a id="VUID-VkSamplerCreateInfo-pNext-pNext"></a> Each <code>pNext</code> member of any structure (including this one) in the <code>pNext</code> chain <strong class="purple">must</strong> be either <code>NULL</code> or a pointer to a valid instance of <a href="#VkSamplerReductionModeCreateInfoEXT">VkSamplerReductionModeCreateInfoEXT</a> or <a href="#VkSamplerYcbcrConversionInfo">VkSamplerYcbcrConversionInfo</a></p>
</li>
<li>
<p><a id="VUID-VkSamplerCreateInfo-sType-unique"></a> Each <code>sType</code> member in the <code>pNext</code> chain <strong class="purple">must</strong> be unique</p>
</li>
<li>
<p><a id="VUID-VkSamplerCreateInfo-flags-parameter"></a> <code>flags</code> <strong class="purple">must</strong> be a valid combination of <a href="#VkSamplerCreateFlagBits">VkSamplerCreateFlagBits</a> values</p>
</li>
<li>
<p><a id="VUID-VkSamplerCreateInfo-magFilter-parameter"></a> <code>magFilter</code> <strong class="purple">must</strong> be a valid <a href="#VkFilter">VkFilter</a> value</p>
</li>
<li>
<p><a id="VUID-VkSamplerCreateInfo-minFilter-parameter"></a> <code>minFilter</code> <strong class="purple">must</strong> be a valid <a href="#VkFilter">VkFilter</a> value</p>
</li>
<li>
<p><a id="VUID-VkSamplerCreateInfo-mipmapMode-parameter"></a> <code>mipmapMode</code> <strong class="purple">must</strong> be a valid <a href="#VkSamplerMipmapMode">VkSamplerMipmapMode</a> value</p>
</li>
<li>
<p><a id="VUID-VkSamplerCreateInfo-addressModeU-parameter"></a> <code>addressModeU</code> <strong class="purple">must</strong> be a valid <a href="#VkSamplerAddressMode">VkSamplerAddressMode</a> value</p>
</li>
<li>
<p><a id="VUID-VkSamplerCreateInfo-addressModeV-parameter"></a> <code>addressModeV</code> <strong class="purple">must</strong> be a valid <a href="#VkSamplerAddressMode">VkSamplerAddressMode</a> value</p>
</li>
<li>
<p><a id="VUID-VkSamplerCreateInfo-addressModeW-parameter"></a> <code>addressModeW</code> <strong class="purple">must</strong> be a valid <a href="#VkSamplerAddressMode">VkSamplerAddressMode</a> value</p>
</li>
</ul>
</div>
</div>
</div>
</div>
<div class="sect3">
<h4 id="_see_also_728">See Also</h4>
<div class="paragraph">
<p><code>VkBool32</code>, <a href="#VkBorderColor">VkBorderColor</a>, <a href="#VkCompareOp">VkCompareOp</a>, <a href="#VkFilter">VkFilter</a>, <a href="#VkSamplerAddressMode">VkSamplerAddressMode</a>, <a href="#VkSamplerCreateFlags">VkSamplerCreateFlags</a>, <a href="#VkSamplerMipmapMode">VkSamplerMipmapMode</a>, <a href="#VkStructureType">VkStructureType</a>, <a href="#vkCreateSampler">vkCreateSampler</a></p>
</div>
</div>
<div class="sect3">
<h4 id="_document_notes_728">Document Notes</h4>
<div class="paragraph">
<p>For more information, see the Vulkan Specification at URL</p>
</div>
<div class="paragraph">
<p><a href="https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VkSamplerCreateInfo" class="bare">https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VkSamplerCreateInfo</a></p>
</div>
<div class="paragraph">
<p>This page is extracted from the Vulkan Specification.
Fixes and changes should be made to the Specification, not directly.</p>
</div>
<div style="page-break-after: always;"></div>
</div>
</div>
<div class="sect2">
<h3 id="_vksamplerreductionmodecreateinfoext3">VkSamplerReductionModeCreateInfoEXT(3)</h3>
<div class="sect3">
<h4 id="_name_729">Name</h4>
<div class="paragraph">
<p>VkSamplerReductionModeCreateInfoEXT - Structure specifying sampler reduction mode</p>
</div>
</div>
<div class="sect3">
<h4 id="_c_specification_729">C Specification</h4>
<div class="paragraph">
<p>If the <code>pNext</code> chain of <a href="#VkSamplerCreateInfo">VkSamplerCreateInfo</a> includes a
<code>VkSamplerReductionModeCreateInfoEXT</code> structure, then that structure
includes a mode that controls how texture filtering combines texel values.</p>
</div>
<div class="paragraph">
<p>The <code>VkSamplerReductionModeCreateInfoEXT</code> structure is defined as:</p>
</div>
<div id="VkSamplerReductionModeCreateInfoEXT" class="listingblock">
<div class="content">
<pre class="highlight"><code class="language-c++" data-lang="c++">typedef struct VkSamplerReductionModeCreateInfoEXT {
    VkStructureType              sType;
    const void*                  pNext;
    VkSamplerReductionModeEXT    reductionMode;
} VkSamplerReductionModeCreateInfoEXT;</code></pre>
</div>
</div>
</div>
<div class="sect3">
<h4 id="_members_366">Members</h4>
<div class="ulist">
<ul>
<li>
<p><code>sType</code> is the type of this structure.</p>
</li>
<li>
<p><code>pNext</code> is <code>NULL</code> or a pointer to an extension-specific structure.</p>
</li>
<li>
<p><code>reductionMode</code> is an enum of type <a href="#VkSamplerReductionModeEXT">VkSamplerReductionModeEXT</a>
that controls how texture filtering combines texel values.</p>
</li>
</ul>
</div>
</div>
<div class="sect3">
<h4 id="_description_729">Description</h4>
<div class="paragraph">
<p>If this structure is not present, <code>reductionMode</code> is considered to be
<code>VK_SAMPLER_REDUCTION_MODE_WEIGHTED_AVERAGE_EXT</code>.</p>
</div>
<div class="sidebarblock">
<div class="content">
<div class="title">Valid Usage (Implicit)</div>
<div class="ulist">
<ul>
<li>
<p><a id="VUID-VkSamplerReductionModeCreateInfoEXT-sType-sType"></a> <code>sType</code> <strong class="purple">must</strong> be <code>VK_STRUCTURE_TYPE_SAMPLER_REDUCTION_MODE_CREATE_INFO_EXT</code></p>
</li>
<li>
<p><a id="VUID-VkSamplerReductionModeCreateInfoEXT-reductionMode-parameter"></a> <code>reductionMode</code> <strong class="purple">must</strong> be a valid <a href="#VkSamplerReductionModeEXT">VkSamplerReductionModeEXT</a> value</p>
</li>
</ul>
</div>
</div>
</div>
</div>
<div class="sect3">
<h4 id="_see_also_729">See Also</h4>
<div class="paragraph">
<p><a href="#VkSamplerReductionModeEXT">VkSamplerReductionModeEXT</a>, <a href="#VkStructureType">VkStructureType</a></p>
</div>
</div>
<div class="sect3">
<h4 id="_document_notes_729">Document Notes</h4>
<div class="paragraph">
<p>For more information, see the Vulkan Specification at URL</p>
</div>
<div class="paragraph">
<p><a href="https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VkSamplerReductionModeCreateInfoEXT" class="bare">https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VkSamplerReductionModeCreateInfoEXT</a></p>
</div>
<div class="paragraph">
<p>This page is extracted from the Vulkan Specification.
Fixes and changes should be made to the Specification, not directly.</p>
</div>
<div style="page-break-after: always;"></div>
</div>
</div>
<div class="sect2">
<h3 id="_vksamplerycbcrconversioncreateinfo3">VkSamplerYcbcrConversionCreateInfo(3)</h3>
<div class="sect3">
<h4 id="_name_730">Name</h4>
<div class="paragraph">
<p>VkSamplerYcbcrConversionCreateInfo - Structure specifying the parameters of the newly created conversion</p>
</div>
</div>
<div class="sect3">
<h4 id="_c_specification_730">C Specification</h4>
<div class="paragraph">
<p>The <code>VkSamplerYcbcrConversionCreateInfo</code> structure is defined as:</p>
</div>
<div id="VkSamplerYcbcrConversionCreateInfo" class="listingblock">
<div class="content">
<pre class="highlight"><code class="language-c++" data-lang="c++">typedef struct VkSamplerYcbcrConversionCreateInfo {
    VkStructureType                  sType;
    const void*                      pNext;
    VkFormat                         format;
    VkSamplerYcbcrModelConversion    ycbcrModel;
    VkSamplerYcbcrRange              ycbcrRange;
    VkComponentMapping               components;
    VkChromaLocation                 xChromaOffset;
    VkChromaLocation                 yChromaOffset;
    VkFilter                         chromaFilter;
    VkBool32                         forceExplicitReconstruction;
} VkSamplerYcbcrConversionCreateInfo;</code></pre>
</div>
</div>
<div class="paragraph">
<p>or the equivalent</p>
</div>
<div id="VkSamplerYcbcrConversionCreateInfoKHR" class="listingblock">
<div class="content">
<pre class="highlight"><code class="language-c++" data-lang="c++">typedef VkSamplerYcbcrConversionCreateInfo VkSamplerYcbcrConversionCreateInfoKHR;</code></pre>
</div>
</div>
</div>
<div class="sect3">
<h4 id="_members_367">Members</h4>
<div class="ulist">
<ul>
<li>
<p><code>sType</code> is the type of this structure.</p>
</li>
<li>
<p><code>pNext</code> is <code>NULL</code> or a pointer to an extension-specific structure.</p>
</li>
<li>
<p><code>format</code> is the format of the image from which color information
will be retrieved.</p>
</li>
<li>
<p><code>ycbcrModel</code> describes the color matrix for conversion between color
models.</p>
</li>
<li>
<p><code>ycbcrRange</code> describes whether the encoded values have headroom and
foot room, or whether the encoding uses the full numerical range.</p>
</li>
<li>
<p><code>components</code> applies a <em>swizzle</em> based on <a href="#VkComponentSwizzle">VkComponentSwizzle</a>
enums prior to range expansion and color model conversion.</p>
</li>
<li>
<p><code>xChromaOffset</code> describes the
<a href="vkspec.html#textures-chroma-reconstruction">sample location</a> associated with
downsampled chroma channels in the x dimension.
<code>xChromaOffset</code> has no effect for formats in which chroma channels
are the same resolution as the luma channel.</p>
</li>
<li>
<p><code>yChromaOffset</code> describes the
<a href="vkspec.html#textures-chroma-reconstruction">sample location</a> associated with
downsampled chroma channels in the y dimension.
<code>yChromaOffset</code> has no effect for formats in which the chroma
channels are not downsampled vertically.</p>
</li>
<li>
<p><code>chromaFilter</code> is the filter for chroma reconstruction.</p>
</li>
<li>
<p><code>forceExplicitReconstruction</code> <strong class="purple">can</strong> be used to ensure that
reconstruction is done explicitly, if supported.</p>
</li>
</ul>
</div>
</div>
<div class="sect3">
<h4 id="_description_730">Description</h4>
<div class="admonitionblock note">
<table>
<tr>
<td class="icon">
<i class="fa icon-note" title="Note"></i>
</td>
<td class="content">
<div class="title">Note</div>
<div class="paragraph">
<p>Setting <code>forceExplicitReconstruction</code> to <code>VK_TRUE</code> <strong class="purple">may</strong> have a
performance penalty on implementations where explicit reconstruction is not
the default mode of operation.</p>
</div>
</td>
</tr>
</table>
</div>
<div class="paragraph">
<p>If the <code>pNext</code> chain has an instance of <a href="#VkExternalFormatANDROID">VkExternalFormatANDROID</a>
with non-zero <code>externalFormat</code> member, the sampler Y&#8217;C<sub>B</sub>C<sub>R</sub> conversion
object represents an <em>external format conversion</em>, and <code>format</code> <strong class="purple">must</strong> be
<code>VK_FORMAT_UNDEFINED</code>.
Such conversions <strong class="purple">must</strong> only be used to sample image views with a matching
<a href="vkspec.html#memory-external-android-hardware-buffer-external-formats">external
format</a>.
When creating an external format conversion, the value of <code>components</code>
is ignored.</p>
</div>
<div class="sidebarblock">
<div class="content">
<div class="title">Valid Usage</div>
<div class="ulist">
<ul>
<li>
<p><a id="VUID-VkSamplerYcbcrConversionCreateInfo-format-01904"></a>
If an external format conversion is being created, <code>format</code> <strong class="purple">must</strong> be
<code>VK_FORMAT_UNDEFINED</code>, otherwise it <strong class="purple">must</strong> not be
<code>VK_FORMAT_UNDEFINED</code>.</p>
</li>
<li>
<p><a id="VUID-VkSamplerYcbcrConversionCreateInfo-format-01650"></a>
<code>format</code> <strong class="purple">must</strong> support
<code>VK_FORMAT_FEATURE_MIDPOINT_CHROMA_SAMPLES_BIT</code> or
<code>VK_FORMAT_FEATURE_COSITED_CHROMA_SAMPLES_BIT</code></p>
</li>
<li>
<p><a id="VUID-VkSamplerYcbcrConversionCreateInfo-xChromaOffset-01651"></a>
If the format does not support
<code>VK_FORMAT_FEATURE_COSITED_CHROMA_SAMPLES_BIT</code>, <code>xChromaOffset</code>
and <code>yChromaOffset</code> <strong class="purple">must</strong> not be
<code>VK_CHROMA_LOCATION_COSITED_EVEN</code></p>
</li>
<li>
<p><a id="VUID-VkSamplerYcbcrConversionCreateInfo-xChromaOffset-01652"></a>
If the format does not support
<code>VK_FORMAT_FEATURE_MIDPOINT_CHROMA_SAMPLES_BIT</code>, <code>xChromaOffset</code>
and <code>yChromaOffset</code> <strong class="purple">must</strong> not be <code>VK_CHROMA_LOCATION_MIDPOINT</code></p>
</li>
<li>
<p><a id="VUID-VkSamplerYcbcrConversionCreateInfo-format-01653"></a>
<code>format</code> <strong class="purple">must</strong> represent unsigned normalized values (i.e. the format
must be a <code>UNORM</code> format)</p>
</li>
<li>
<p><a id="VUID-VkSamplerYcbcrConversionCreateInfo-components-02581"></a>
If the format has a <code>_422</code> or <code>_420</code> suffix, then
<code>components.g</code> <strong class="purple">must</strong> be <code>VK_COMPONENT_SWIZZLE_IDENTITY</code></p>
</li>
<li>
<p><a id="VUID-VkSamplerYcbcrConversionCreateInfo-components-02582"></a>
If the format has a <code>_422</code> or <code>_420</code> suffix, then
<code>components.a</code> <strong class="purple">must</strong> be <code>VK_COMPONENT_SWIZZLE_IDENTITY</code>,
<code>VK_COMPONENT_SWIZZLE_ONE</code>, or <code>VK_COMPONENT_SWIZZLE_ZERO</code></p>
</li>
<li>
<p><a id="VUID-VkSamplerYcbcrConversionCreateInfo-components-02583"></a>
If the format has a <code>_422</code> or <code>_420</code> suffix, then
<code>components.r</code> <strong class="purple">must</strong> be <code>VK_COMPONENT_SWIZZLE_IDENTITY</code> or
<code>VK_COMPONENT_SWIZZLE_B</code></p>
</li>
<li>
<p><a id="VUID-VkSamplerYcbcrConversionCreateInfo-components-02584"></a>
If the format has a <code>_422</code> or <code>_420</code> suffix, then
<code>components.b</code> <strong class="purple">must</strong> be <code>VK_COMPONENT_SWIZZLE_IDENTITY</code> or
<code>VK_COMPONENT_SWIZZLE_R</code></p>
</li>
<li>
<p><a id="VUID-VkSamplerYcbcrConversionCreateInfo-components-02585"></a>
If the format has a <code>_422</code> or <code>_420</code> suffix, and if either
<code>components.r</code> or <code>components.b</code> is
<code>VK_COMPONENT_SWIZZLE_IDENTITY</code>, both values <strong class="purple">must</strong> be
<code>VK_COMPONENT_SWIZZLE_IDENTITY</code></p>
</li>
<li>
<p><a id="VUID-VkSamplerYcbcrConversionCreateInfo-ycbcrModel-01655"></a>
If <code>ycbcrModel</code> is not
<code>VK_SAMPLER_YCBCR_MODEL_CONVERSION_RGB_IDENTITY</code>, then
<code>components.r</code>, <code>components.g</code>, and <code>components.b</code> <strong class="purple">must</strong>
correspond to channels of the <code>format</code>; that is, <code>components.r</code>,
<code>components.g</code>, and <code>components.b</code> <strong class="purple">must</strong> not be
<code>VK_COMPONENT_SWIZZLE_ZERO</code> or <code>VK_COMPONENT_SWIZZLE_ONE</code>, and
<strong class="purple">must</strong> not correspond to a channel which contains zero or one as a
consequence of <a href="vkspec.html#textures-conversion-to-rgba">conversion to RGBA</a></p>
</li>
<li>
<p><a id="VUID-VkSamplerYcbcrConversionCreateInfo-forceExplicitReconstruction-01656"></a>
If the format does not support
<code>VK_FORMAT_FEATURE_SAMPLED_IMAGE_YCBCR_CONVERSION_CHROMA_RECONSTRUCTION_EXPLICIT_FORCEABLE_BIT</code>,
<code>forceExplicitReconstruction</code> <strong class="purple">must</strong> be FALSE</p>
</li>
<li>
<p><a id="VUID-VkSamplerYcbcrConversionCreateInfo-chromaFilter-01657"></a>
If the format does not support
<code>VK_FORMAT_FEATURE_SAMPLED_IMAGE_YCBCR_CONVERSION_LINEAR_FILTER_BIT</code>,
<code>chromaFilter</code> <strong class="purple">must</strong> be <code>VK_FILTER_NEAREST</code></p>
</li>
</ul>
</div>
</div>
</div>
<div class="sidebarblock">
<div class="content">
<div class="title">Valid Usage (Implicit)</div>
<div class="ulist">
<ul>
<li>
<p><a id="VUID-VkSamplerYcbcrConversionCreateInfo-sType-sType"></a> <code>sType</code> <strong class="purple">must</strong> be <code>VK_STRUCTURE_TYPE_SAMPLER_YCBCR_CONVERSION_CREATE_INFO</code></p>
</li>
<li>
<p><a id="VUID-VkSamplerYcbcrConversionCreateInfo-pNext-pNext"></a> <code>pNext</code> <strong class="purple">must</strong> be <code>NULL</code> or a pointer to a valid instance of <a href="#VkExternalFormatANDROID">VkExternalFormatANDROID</a></p>
</li>
<li>
<p><a id="VUID-VkSamplerYcbcrConversionCreateInfo-format-parameter"></a> <code>format</code> <strong class="purple">must</strong> be a valid <a href="#VkFormat">VkFormat</a> value</p>
</li>
<li>
<p><a id="VUID-VkSamplerYcbcrConversionCreateInfo-ycbcrModel-parameter"></a> <code>ycbcrModel</code> <strong class="purple">must</strong> be a valid <a href="#VkSamplerYcbcrModelConversion">VkSamplerYcbcrModelConversion</a> value</p>
</li>
<li>
<p><a id="VUID-VkSamplerYcbcrConversionCreateInfo-ycbcrRange-parameter"></a> <code>ycbcrRange</code> <strong class="purple">must</strong> be a valid <a href="#VkSamplerYcbcrRange">VkSamplerYcbcrRange</a> value</p>
</li>
<li>
<p><a id="VUID-VkSamplerYcbcrConversionCreateInfo-components-parameter"></a> <code>components</code> <strong class="purple">must</strong> be a valid <code>VkComponentMapping</code> structure</p>
</li>
<li>
<p><a id="VUID-VkSamplerYcbcrConversionCreateInfo-xChromaOffset-parameter"></a> <code>xChromaOffset</code> <strong class="purple">must</strong> be a valid <a href="#VkChromaLocation">VkChromaLocation</a> value</p>
</li>
<li>
<p><a id="VUID-VkSamplerYcbcrConversionCreateInfo-yChromaOffset-parameter"></a> <code>yChromaOffset</code> <strong class="purple">must</strong> be a valid <a href="#VkChromaLocation">VkChromaLocation</a> value</p>
</li>
<li>
<p><a id="VUID-VkSamplerYcbcrConversionCreateInfo-chromaFilter-parameter"></a> <code>chromaFilter</code> <strong class="purple">must</strong> be a valid <a href="#VkFilter">VkFilter</a> value</p>
</li>
</ul>
</div>
</div>
</div>
<div class="paragraph">
<p>If <code>chromaFilter</code> is <code>VK_FILTER_NEAREST</code>, chroma samples are
reconstructed to luma channel resolution using nearest-neighbour sampling.
Otherwise, chroma samples are reconstructed using interpolation.
More details can be found in <a href="vkspec.html#textures-sampler-YCbCr-conversion">the
description of sampler Y&#8217;C<sub>B</sub>C<sub>R</sub> conversion</a> in the <a href="vkspec.html#textures">Image
Operations</a> chapter.</p>
</div>
</div>
<div class="sect3">
<h4 id="_see_also_730">See Also</h4>
<div class="paragraph">
<p><code>VkBool32</code>, <a href="#VkChromaLocation">VkChromaLocation</a>, <a href="#VkComponentMapping">VkComponentMapping</a>, <a href="#VkFilter">VkFilter</a>, <a href="#VkFormat">VkFormat</a>, <a href="#VkSamplerYcbcrModelConversion">VkSamplerYcbcrModelConversion</a>, <a href="#VkSamplerYcbcrRange">VkSamplerYcbcrRange</a>, <a href="#VkStructureType">VkStructureType</a>, <a href="#vkCreateSamplerYcbcrConversion">vkCreateSamplerYcbcrConversion</a>, <a href="#vkCreateSamplerYcbcrConversionKHR">vkCreateSamplerYcbcrConversionKHR</a></p>
</div>
</div>
<div class="sect3">
<h4 id="_document_notes_730">Document Notes</h4>
<div class="paragraph">
<p>For more information, see the Vulkan Specification at URL</p>
</div>
<div class="paragraph">
<p><a href="https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VkSamplerYcbcrConversionCreateInfo" class="bare">https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VkSamplerYcbcrConversionCreateInfo</a></p>
</div>
<div class="paragraph">
<p>This page is extracted from the Vulkan Specification.
Fixes and changes should be made to the Specification, not directly.</p>
</div>
<div style="page-break-after: always;"></div>
</div>
</div>
<div class="sect2">
<h3 id="_vksamplerycbcrconversionimageformatproperties3">VkSamplerYcbcrConversionImageFormatProperties(3)</h3>
<div class="sect3">
<h4 id="_name_731">Name</h4>
<div class="paragraph">
<p>VkSamplerYcbcrConversionImageFormatProperties - Structure specifying combined image sampler descriptor count for multi-planar images</p>
</div>
</div>
<div class="sect3">
<h4 id="_c_specification_731">C Specification</h4>
<div class="paragraph">
<p>To determine the number of combined image samplers required to support a
multi-planar format, add <a href="#VkSamplerYcbcrConversionImageFormatProperties">VkSamplerYcbcrConversionImageFormatProperties</a>
to the <code>pNext</code> chain of the <a href="#VkImageFormatProperties2">VkImageFormatProperties2</a> structure in
a call to <code>vkGetPhysicalDeviceImageFormatProperties2</code>.</p>
</div>
<div class="paragraph">
<p>The <code>VkSamplerYcbcrConversionImageFormatProperties</code> structure is defined
as:</p>
</div>
<div id="VkSamplerYcbcrConversionImageFormatProperties" class="listingblock">
<div class="content">
<pre class="highlight"><code class="language-c++" data-lang="c++">typedef struct VkSamplerYcbcrConversionImageFormatProperties {
    VkStructureType    sType;
    void*              pNext;
    uint32_t           combinedImageSamplerDescriptorCount;
} VkSamplerYcbcrConversionImageFormatProperties;</code></pre>
</div>
</div>
<div class="paragraph">
<p>or the equivalent</p>
</div>
<div id="VkSamplerYcbcrConversionImageFormatPropertiesKHR" class="listingblock">
<div class="content">
<pre class="highlight"><code class="language-c++" data-lang="c++">typedef VkSamplerYcbcrConversionImageFormatProperties VkSamplerYcbcrConversionImageFormatPropertiesKHR;</code></pre>
</div>
</div>
</div>
<div class="sect3">
<h4 id="_members_368">Members</h4>
<div class="ulist">
<ul>
<li>
<p><code>sType</code> is the type of this structure.</p>
</li>
<li>
<p><code>pNext</code> is <code>NULL</code> or a pointer to an extension-specific structure.</p>
</li>
<li>
<p><code>combinedImageSamplerDescriptorCount</code> is the number of combined
image sampler descriptors that the implementation uses to access the
format.</p>
</li>
</ul>
</div>
</div>
<div class="sect3">
<h4 id="_description_731">Description</h4>
<div class="sidebarblock">
<div class="content">
<div class="title">Valid Usage (Implicit)</div>
<div class="ulist">
<ul>
<li>
<p><a id="VUID-VkSamplerYcbcrConversionImageFormatProperties-sType-sType"></a> <code>sType</code> <strong class="purple">must</strong> be <code>VK_STRUCTURE_TYPE_SAMPLER_YCBCR_CONVERSION_IMAGE_FORMAT_PROPERTIES</code></p>
</li>
</ul>
</div>
</div>
</div>
</div>
<div class="sect3">
<h4 id="_see_also_731">See Also</h4>
<div class="paragraph">
<p><a href="#VkStructureType">VkStructureType</a></p>
</div>
</div>
<div class="sect3">
<h4 id="_document_notes_731">Document Notes</h4>
<div class="paragraph">
<p>For more information, see the Vulkan Specification at URL</p>
</div>
<div class="paragraph">
<p><a href="https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VkSamplerYcbcrConversionImageFormatProperties" class="bare">https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VkSamplerYcbcrConversionImageFormatProperties</a></p>
</div>
<div class="paragraph">
<p>This page is extracted from the Vulkan Specification.
Fixes and changes should be made to the Specification, not directly.</p>
</div>
<div style="page-break-after: always;"></div>
</div>
</div>
<div class="sect2">
<h3 id="_vksamplerycbcrconversioninfo3">VkSamplerYcbcrConversionInfo(3)</h3>
<div class="sect3">
<h4 id="_name_732">Name</h4>
<div class="paragraph">
<p>VkSamplerYcbcrConversionInfo - Structure specifying Y&#8217;CbCr conversion to a sampler or image view</p>
</div>
</div>
<div class="sect3">
<h4 id="_c_specification_732">C Specification</h4>
<div class="paragraph">
<p>To create a sampler with Y&#8217;C<sub>B</sub>C<sub>R</sub> conversion enabled, add a
<a href="#VkSamplerYcbcrConversionInfo">VkSamplerYcbcrConversionInfo</a> to the <code>pNext</code> chain of the
<a href="#VkSamplerCreateInfo">VkSamplerCreateInfo</a> structure.
To create a sampler Y&#8217;C<sub>B</sub>C<sub>R</sub> conversion, the
<a href="vkspec.html#features-sampler-YCbCr-conversion"><code>samplerYcbcrConversion</code> feature</a>
<strong class="purple">must</strong> be enabled.
Conversion <strong class="purple">must</strong> be fixed at pipeline creation time, through use of a
combined image sampler with an immutable sampler in
<code>VkDescriptorSetLayoutBinding</code>.</p>
</div>
<div class="paragraph">
<p>A <a href="#VkSamplerYcbcrConversionInfo">VkSamplerYcbcrConversionInfo</a> <strong class="purple">must</strong> be provided for samplers to be
used with image views that access <code>VK_IMAGE_ASPECT_COLOR_BIT</code> if the
format appears in <a href="vkspec.html#formats-requiring-sampler-ycbcr-conversion" class="bare">html/vkspec.html#formats-requiring-sampler-ycbcr-conversion</a>
, or if the image view has an
<a href="vkspec.html#memory-external-android-hardware-buffer-external-formats">external format</a>
.</p>
</div>
<div class="paragraph">
<p>The <code>VkSamplerYcbcrConversionInfo</code> structure is defined as:</p>
</div>
<div id="VkSamplerYcbcrConversionInfo" class="listingblock">
<div class="content">
<pre class="highlight"><code class="language-c++" data-lang="c++">typedef struct VkSamplerYcbcrConversionInfo {
    VkStructureType             sType;
    const void*                 pNext;
    VkSamplerYcbcrConversion    conversion;
} VkSamplerYcbcrConversionInfo;</code></pre>
</div>
</div>
<div class="paragraph">
<p>or the equivalent</p>
</div>
<div id="VkSamplerYcbcrConversionInfoKHR" class="listingblock">
<div class="content">
<pre class="highlight"><code class="language-c++" data-lang="c++">typedef VkSamplerYcbcrConversionInfo VkSamplerYcbcrConversionInfoKHR;</code></pre>
</div>
</div>
</div>
<div class="sect3">
<h4 id="_members_369">Members</h4>
<div class="ulist">
<ul>
<li>
<p><code>sType</code> is the type of this structure.</p>
</li>
<li>
<p><code>pNext</code> is <code>NULL</code> or a pointer to an extension-specific structure.</p>
</li>
<li>
<p><code>conversion</code> is a <a href="#VkSamplerYcbcrConversion">VkSamplerYcbcrConversion</a> handle created with
<a href="#vkCreateSamplerYcbcrConversion">vkCreateSamplerYcbcrConversion</a>.</p>
</li>
</ul>
</div>
</div>
<div class="sect3">
<h4 id="_description_732">Description</h4>
<div class="sidebarblock">
<div class="content">
<div class="title">Valid Usage (Implicit)</div>
<div class="ulist">
<ul>
<li>
<p><a id="VUID-VkSamplerYcbcrConversionInfo-sType-sType"></a> <code>sType</code> <strong class="purple">must</strong> be <code>VK_STRUCTURE_TYPE_SAMPLER_YCBCR_CONVERSION_INFO</code></p>
</li>
<li>
<p><a id="VUID-VkSamplerYcbcrConversionInfo-conversion-parameter"></a> <code>conversion</code> <strong class="purple">must</strong> be a valid <code>VkSamplerYcbcrConversion</code> handle</p>
</li>
</ul>
</div>
</div>
</div>
</div>
<div class="sect3">
<h4 id="_see_also_732">See Also</h4>
<div class="paragraph">
<p><a href="#VkSamplerYcbcrConversion">VkSamplerYcbcrConversion</a>, <a href="#VkStructureType">VkStructureType</a></p>
</div>
</div>
<div class="sect3">
<h4 id="_document_notes_732">Document Notes</h4>
<div class="paragraph">
<p>For more information, see the Vulkan Specification at URL</p>
</div>
<div class="paragraph">
<p><a href="https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VkSamplerYcbcrConversionInfo" class="bare">https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VkSamplerYcbcrConversionInfo</a></p>
</div>
<div class="paragraph">
<p>This page is extracted from the Vulkan Specification.
Fixes and changes should be made to the Specification, not directly.</p>
</div>
<div style="page-break-after: always;"></div>
</div>
</div>
<div class="sect2">
<h3 id="_vksemaphorecreateinfo3">VkSemaphoreCreateInfo(3)</h3>
<div class="sect3">
<h4 id="_name_733">Name</h4>
<div class="paragraph">
<p>VkSemaphoreCreateInfo - Structure specifying parameters of a newly created semaphore</p>
</div>
</div>
<div class="sect3">
<h4 id="_c_specification_733">C Specification</h4>
<div class="paragraph">
<p>The <code>VkSemaphoreCreateInfo</code> structure is defined as:</p>
</div>
<div id="VkSemaphoreCreateInfo" class="listingblock">
<div class="content">
<pre class="highlight"><code class="language-c++" data-lang="c++">typedef struct VkSemaphoreCreateInfo {
    VkStructureType           sType;
    const void*               pNext;
    VkSemaphoreCreateFlags    flags;
} VkSemaphoreCreateInfo;</code></pre>
</div>
</div>
</div>
<div class="sect3">
<h4 id="_members_370">Members</h4>
<div class="ulist">
<ul>
<li>
<p><code>sType</code> is the type of this structure.</p>
</li>
<li>
<p><code>pNext</code> is <code>NULL</code> or a pointer to an extension-specific structure.</p>
</li>
<li>
<p><code>flags</code> is reserved for future use.</p>
</li>
</ul>
</div>
</div>
<div class="sect3">
<h4 id="_description_733">Description</h4>
<div class="sidebarblock">
<div class="content">
<div class="title">Valid Usage (Implicit)</div>
<div class="ulist">
<ul>
<li>
<p><a id="VUID-VkSemaphoreCreateInfo-sType-sType"></a> <code>sType</code> <strong class="purple">must</strong> be <code>VK_STRUCTURE_TYPE_SEMAPHORE_CREATE_INFO</code></p>
</li>
<li>
<p><a id="VUID-VkSemaphoreCreateInfo-pNext-pNext"></a> Each <code>pNext</code> member of any structure (including this one) in the <code>pNext</code> chain <strong class="purple">must</strong> be either <code>NULL</code> or a pointer to a valid instance of <a href="#VkExportSemaphoreCreateInfo">VkExportSemaphoreCreateInfo</a> or <a href="#VkExportSemaphoreWin32HandleInfoKHR">VkExportSemaphoreWin32HandleInfoKHR</a></p>
</li>
<li>
<p><a id="VUID-VkSemaphoreCreateInfo-sType-unique"></a> Each <code>sType</code> member in the <code>pNext</code> chain <strong class="purple">must</strong> be unique</p>
</li>
<li>
<p><a id="VUID-VkSemaphoreCreateInfo-flags-zerobitmask"></a> <code>flags</code> <strong class="purple">must</strong> be <code>0</code></p>
</li>
</ul>
</div>
</div>
</div>
</div>
<div class="sect3">
<h4 id="_see_also_733">See Also</h4>
<div class="paragraph">
<p><a href="#VkSemaphoreCreateFlags">VkSemaphoreCreateFlags</a>, <a href="#VkStructureType">VkStructureType</a>, <a href="#vkCreateSemaphore">vkCreateSemaphore</a></p>
</div>
</div>
<div class="sect3">
<h4 id="_document_notes_733">Document Notes</h4>
<div class="paragraph">
<p>For more information, see the Vulkan Specification at URL</p>
</div>
<div class="paragraph">
<p><a href="https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VkSemaphoreCreateInfo" class="bare">https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VkSemaphoreCreateInfo</a></p>
</div>
<div class="paragraph">
<p>This page is extracted from the Vulkan Specification.
Fixes and changes should be made to the Specification, not directly.</p>
</div>
<div style="page-break-after: always;"></div>
</div>
</div>
<div class="sect2">
<h3 id="_vksemaphoregetfdinfokhr3">VkSemaphoreGetFdInfoKHR(3)</h3>
<div class="sect3">
<h4 id="_name_734">Name</h4>
<div class="paragraph">
<p>VkSemaphoreGetFdInfoKHR - Structure describing a POSIX FD semaphore export operation</p>
</div>
</div>
<div class="sect3">
<h4 id="_c_specification_734">C Specification</h4>
<div class="paragraph">
<p>The <code>VkSemaphoreGetFdInfoKHR</code> structure is defined as:</p>
</div>
<div id="VkSemaphoreGetFdInfoKHR" class="listingblock">
<div class="content">
<pre class="highlight"><code class="language-c++" data-lang="c++">typedef struct VkSemaphoreGetFdInfoKHR {
    VkStructureType                          sType;
    const void*                              pNext;
    VkSemaphore                              semaphore;
    VkExternalSemaphoreHandleTypeFlagBits    handleType;
} VkSemaphoreGetFdInfoKHR;</code></pre>
</div>
</div>
</div>
<div class="sect3">
<h4 id="_members_371">Members</h4>
<div class="ulist">
<ul>
<li>
<p><code>sType</code> is the type of this structure.</p>
</li>
<li>
<p><code>pNext</code> is <code>NULL</code> or a pointer to an extension-specific structure.</p>
</li>
<li>
<p><code>semaphore</code> is the semaphore from which state will be exported.</p>
</li>
<li>
<p><code>handleType</code> is the type of handle requested.</p>
</li>
</ul>
</div>
</div>
<div class="sect3">
<h4 id="_description_734">Description</h4>
<div class="paragraph">
<p>The properties of the file descriptor returned depend on the value of
<code>handleType</code>.
See <a href="#VkExternalSemaphoreHandleTypeFlagBits">VkExternalSemaphoreHandleTypeFlagBits</a> for a description of the
properties of the defined external semaphore handle types.</p>
</div>
<div class="sidebarblock">
<div class="content">
<div class="title">Valid Usage</div>
<div class="ulist">
<ul>
<li>
<p><a id="VUID-VkSemaphoreGetFdInfoKHR-handleType-01132"></a>
<code>handleType</code> <strong class="purple">must</strong> have been included in
<a href="#VkExportSemaphoreCreateInfo">VkExportSemaphoreCreateInfo</a>::<code>handleTypes</code> when
<code>semaphore</code>&#8217;s current payload was created.</p>
</li>
<li>
<p><a id="VUID-VkSemaphoreGetFdInfoKHR-semaphore-01133"></a>
<code>semaphore</code> <strong class="purple">must</strong> not currently have its payload replaced by an
imported payload as described below in
<a href="vkspec.html#synchronization-semaphores-importing">Importing Semaphore Payloads</a>
unless that imported payload&#8217;s handle type was included in
<a href="#VkExternalSemaphoreProperties">VkExternalSemaphoreProperties</a>::<code>exportFromImportedHandleTypes</code>
for <code>handleType</code>.</p>
</li>
<li>
<p><a id="VUID-VkSemaphoreGetFdInfoKHR-handleType-01134"></a>
If <code>handleType</code> refers to a handle type with copy payload
transference semantics, as defined below in
<a href="vkspec.html#synchronization-semaphores-importing">Importing Semaphore Payloads</a>,
there <strong class="purple">must</strong> be no queue waiting on <code>semaphore</code>.</p>
</li>
<li>
<p><a id="VUID-VkSemaphoreGetFdInfoKHR-handleType-01135"></a>
If <code>handleType</code> refers to a handle type with copy payload
transference semantics, <code>semaphore</code> <strong class="purple">must</strong> be signaled, or have an
associated <a href="vkspec.html#synchronization-semaphores-signaling">semaphore signal
operation</a> pending execution.</p>
</li>
<li>
<p><a id="VUID-VkSemaphoreGetFdInfoKHR-handleType-01136"></a>
<code>handleType</code> <strong class="purple">must</strong> be defined as a POSIX file descriptor handle.</p>
</li>
</ul>
</div>
</div>
</div>
<div class="sidebarblock">
<div class="content">
<div class="title">Valid Usage (Implicit)</div>
<div class="ulist">
<ul>
<li>
<p><a id="VUID-VkSemaphoreGetFdInfoKHR-sType-sType"></a> <code>sType</code> <strong class="purple">must</strong> be <code>VK_STRUCTURE_TYPE_SEMAPHORE_GET_FD_INFO_KHR</code></p>
</li>
<li>
<p><a id="VUID-VkSemaphoreGetFdInfoKHR-pNext-pNext"></a> <code>pNext</code> <strong class="purple">must</strong> be <code>NULL</code></p>
</li>
<li>
<p><a id="VUID-VkSemaphoreGetFdInfoKHR-semaphore-parameter"></a> <code>semaphore</code> <strong class="purple">must</strong> be a valid <code>VkSemaphore</code> handle</p>
</li>
<li>
<p><a id="VUID-VkSemaphoreGetFdInfoKHR-handleType-parameter"></a> <code>handleType</code> <strong class="purple">must</strong> be a valid <a href="#VkExternalSemaphoreHandleTypeFlagBits">VkExternalSemaphoreHandleTypeFlagBits</a> value</p>
</li>
</ul>
</div>
</div>
</div>
</div>
<div class="sect3">
<h4 id="_see_also_734">See Also</h4>
<div class="paragraph">
<p><a href="#VkExternalSemaphoreHandleTypeFlagBits">VkExternalSemaphoreHandleTypeFlagBits</a>, <a href="#VkSemaphore">VkSemaphore</a>, <a href="#VkStructureType">VkStructureType</a>, <a href="#vkGetSemaphoreFdKHR">vkGetSemaphoreFdKHR</a></p>
</div>
</div>
<div class="sect3">
<h4 id="_document_notes_734">Document Notes</h4>
<div class="paragraph">
<p>For more information, see the Vulkan Specification at URL</p>
</div>
<div class="paragraph">
<p><a href="https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VkSemaphoreGetFdInfoKHR" class="bare">https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VkSemaphoreGetFdInfoKHR</a></p>
</div>
<div class="paragraph">
<p>This page is extracted from the Vulkan Specification.
Fixes and changes should be made to the Specification, not directly.</p>
</div>
<div style="page-break-after: always;"></div>
</div>
</div>
<div class="sect2">
<h3 id="_vksemaphoregetwin32handleinfokhr3">VkSemaphoreGetWin32HandleInfoKHR(3)</h3>
<div class="sect3">
<h4 id="_name_735">Name</h4>
<div class="paragraph">
<p>VkSemaphoreGetWin32HandleInfoKHR - Structure describing a Win32 handle semaphore export operation</p>
</div>
</div>
<div class="sect3">
<h4 id="_c_specification_735">C Specification</h4>
<div class="paragraph">
<p>The <code>VkSemaphoreGetWin32HandleInfoKHR</code> structure is defined as:</p>
</div>
<div id="VkSemaphoreGetWin32HandleInfoKHR" class="listingblock">
<div class="content">
<pre class="highlight"><code class="language-c++" data-lang="c++">typedef struct VkSemaphoreGetWin32HandleInfoKHR {
    VkStructureType                          sType;
    const void*                              pNext;
    VkSemaphore                              semaphore;
    VkExternalSemaphoreHandleTypeFlagBits    handleType;
} VkSemaphoreGetWin32HandleInfoKHR;</code></pre>
</div>
</div>
</div>
<div class="sect3">
<h4 id="_members_372">Members</h4>
<div class="ulist">
<ul>
<li>
<p><code>sType</code> is the type of this structure.</p>
</li>
<li>
<p><code>pNext</code> is <code>NULL</code> or a pointer to an extension-specific structure.</p>
</li>
<li>
<p><code>semaphore</code> is the semaphore from which state will be exported.</p>
</li>
<li>
<p><code>handleType</code> is the type of handle requested.</p>
</li>
</ul>
</div>
</div>
<div class="sect3">
<h4 id="_description_735">Description</h4>
<div class="paragraph">
<p>The properties of the handle returned depend on the value of
<code>handleType</code>.
See <a href="#VkExternalSemaphoreHandleTypeFlagBits">VkExternalSemaphoreHandleTypeFlagBits</a> for a description of the
properties of the defined external semaphore handle types.</p>
</div>
<div class="sidebarblock">
<div class="content">
<div class="title">Valid Usage</div>
<div class="ulist">
<ul>
<li>
<p><a id="VUID-VkSemaphoreGetWin32HandleInfoKHR-handleType-01126"></a>
<code>handleType</code> <strong class="purple">must</strong> have been included in
<a href="#VkExportSemaphoreCreateInfo">VkExportSemaphoreCreateInfo</a>::<code>handleTypes</code> when the
<code>semaphore</code>&#8217;s current payload was created.</p>
</li>
<li>
<p><a id="VUID-VkSemaphoreGetWin32HandleInfoKHR-handleType-01127"></a>
If <code>handleType</code> is defined as an NT handle,
<a href="#vkGetSemaphoreWin32HandleKHR">vkGetSemaphoreWin32HandleKHR</a> <strong class="purple">must</strong> be called no more than once for
each valid unique combination of <code>semaphore</code> and <code>handleType</code>.</p>
</li>
<li>
<p><a id="VUID-VkSemaphoreGetWin32HandleInfoKHR-semaphore-01128"></a>
<code>semaphore</code> <strong class="purple">must</strong> not currently have its payload replaced by an
imported payload as described below in
<a href="vkspec.html#synchronization-semaphores-importing">Importing Semaphore Payloads</a>
unless that imported payload&#8217;s handle type was included in
<a href="#VkExternalSemaphoreProperties">VkExternalSemaphoreProperties</a>::<code>exportFromImportedHandleTypes</code>
for <code>handleType</code>.</p>
</li>
<li>
<p><a id="VUID-VkSemaphoreGetWin32HandleInfoKHR-handleType-01129"></a>
If <code>handleType</code> refers to a handle type with copy payload
transference semantics, as defined below in
<a href="vkspec.html#synchronization-semaphores-importing">Importing Semaphore Payloads</a>,
there <strong class="purple">must</strong> be no queue waiting on <code>semaphore</code>.</p>
</li>
<li>
<p><a id="VUID-VkSemaphoreGetWin32HandleInfoKHR-handleType-01130"></a>
If <code>handleType</code> refers to a handle type with copy payload
transference semantics, <code>semaphore</code> <strong class="purple">must</strong> be signaled, or have an
associated <a href="vkspec.html#synchronization-semaphores-signaling">semaphore signal
operation</a> pending execution.</p>
</li>
<li>
<p><a id="VUID-VkSemaphoreGetWin32HandleInfoKHR-handleType-01131"></a>
<code>handleType</code> <strong class="purple">must</strong> be defined as an NT handle or a global share
handle.</p>
</li>
</ul>
</div>
</div>
</div>
<div class="sidebarblock">
<div class="content">
<div class="title">Valid Usage (Implicit)</div>
<div class="ulist">
<ul>
<li>
<p><a id="VUID-VkSemaphoreGetWin32HandleInfoKHR-sType-sType"></a> <code>sType</code> <strong class="purple">must</strong> be <code>VK_STRUCTURE_TYPE_SEMAPHORE_GET_WIN32_HANDLE_INFO_KHR</code></p>
</li>
<li>
<p><a id="VUID-VkSemaphoreGetWin32HandleInfoKHR-pNext-pNext"></a> <code>pNext</code> <strong class="purple">must</strong> be <code>NULL</code></p>
</li>
<li>
<p><a id="VUID-VkSemaphoreGetWin32HandleInfoKHR-semaphore-parameter"></a> <code>semaphore</code> <strong class="purple">must</strong> be a valid <code>VkSemaphore</code> handle</p>
</li>
<li>
<p><a id="VUID-VkSemaphoreGetWin32HandleInfoKHR-handleType-parameter"></a> <code>handleType</code> <strong class="purple">must</strong> be a valid <a href="#VkExternalSemaphoreHandleTypeFlagBits">VkExternalSemaphoreHandleTypeFlagBits</a> value</p>
</li>
</ul>
</div>
</div>
</div>
</div>
<div class="sect3">
<h4 id="_see_also_735">See Also</h4>
<div class="paragraph">
<p><a href="#VkExternalSemaphoreHandleTypeFlagBits">VkExternalSemaphoreHandleTypeFlagBits</a>, <a href="#VkSemaphore">VkSemaphore</a>, <a href="#VkStructureType">VkStructureType</a>, <a href="#vkGetSemaphoreWin32HandleKHR">vkGetSemaphoreWin32HandleKHR</a></p>
</div>
</div>
<div class="sect3">
<h4 id="_document_notes_735">Document Notes</h4>
<div class="paragraph">
<p>For more information, see the Vulkan Specification at URL</p>
</div>
<div class="paragraph">
<p><a href="https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VkSemaphoreGetWin32HandleInfoKHR" class="bare">https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VkSemaphoreGetWin32HandleInfoKHR</a></p>
</div>
<div class="paragraph">
<p>This page is extracted from the Vulkan Specification.
Fixes and changes should be made to the Specification, not directly.</p>
</div>
<div style="page-break-after: always;"></div>
</div>
</div>
<div class="sect2">
<h3 id="_vkshadermodulecreateinfo3">VkShaderModuleCreateInfo(3)</h3>
<div class="sect3">
<h4 id="_name_736">Name</h4>
<div class="paragraph">
<p>VkShaderModuleCreateInfo - Structure specifying parameters of a newly created shader module</p>
</div>
</div>
<div class="sect3">
<h4 id="_c_specification_736">C Specification</h4>
<div class="paragraph">
<p>The <code>VkShaderModuleCreateInfo</code> structure is defined as:</p>
</div>
<div id="VkShaderModuleCreateInfo" class="listingblock">
<div class="content">
<pre class="highlight"><code class="language-c++" data-lang="c++">typedef struct VkShaderModuleCreateInfo {
    VkStructureType              sType;
    const void*                  pNext;
    VkShaderModuleCreateFlags    flags;
    size_t                       codeSize;
    const uint32_t*              pCode;
} VkShaderModuleCreateInfo;</code></pre>
</div>
</div>
</div>
<div class="sect3">
<h4 id="_members_373">Members</h4>
<div class="ulist">
<ul>
<li>
<p><code>sType</code> is the type of this structure.</p>
</li>
<li>
<p><code>pNext</code> is <code>NULL</code> or a pointer to an extension-specific structure.</p>
</li>
<li>
<p><code>flags</code> is reserved for future use.</p>
</li>
<li>
<p><code>codeSize</code> is the size, in bytes, of the code pointed to by
<code>pCode</code>.</p>
</li>
<li>
<p><code>pCode</code> points to code that is used to create the shader module.
The type and format of the code is determined from the content of the
memory addressed by <code>pCode</code>.</p>
</li>
</ul>
</div>
</div>
<div class="sect3">
<h4 id="_description_736">Description</h4>
<div class="sidebarblock">
<div class="content">
<div class="title">Valid Usage</div>
<div class="ulist">
<ul>
<li>
<p><a id="VUID-VkShaderModuleCreateInfo-codeSize-01085"></a>
<code>codeSize</code> <strong class="purple">must</strong> be greater than 0</p>
</li>
<li>
<p><a id="VUID-VkShaderModuleCreateInfo-pCode-01376"></a>
If <code>pCode</code> points to SPIR-V code, <code>codeSize</code> <strong class="purple">must</strong> be a multiple
of 4</p>
</li>
<li>
<p><a id="VUID-VkShaderModuleCreateInfo-pCode-01377"></a>
<code>pCode</code> <strong class="purple">must</strong> point to either valid SPIR-V code, formatted and
packed as described by the <a href="vkspec.html#spirv-spec">Khronos SPIR-V Specification</a>
or valid GLSL code which <strong class="purple">must</strong> be written to the <code>GL_KHR_vulkan_glsl</code>
extension specification</p>
</li>
<li>
<p><a id="VUID-VkShaderModuleCreateInfo-pCode-01378"></a>
If <code>pCode</code> points to SPIR-V code, that code <strong class="purple">must</strong> adhere to the
validation rules described by the <a href="vkspec.html#spirvenv-module-validation">Validation Rules within a Module</a> section of the
<a href="vkspec.html#spirvenv-capabilities">SPIR-V Environment</a> appendix</p>
</li>
<li>
<p><a id="VUID-VkShaderModuleCreateInfo-pCode-01379"></a>
If <code>pCode</code> points to GLSL code, it <strong class="purple">must</strong> be valid GLSL code written
to the <code>GL_KHR_vulkan_glsl</code> GLSL extension specification</p>
</li>
<li>
<p><a id="VUID-VkShaderModuleCreateInfo-pCode-01089"></a>
<code>pCode</code> <strong class="purple">must</strong> declare the <code>Shader</code> capability for SPIR-V code</p>
</li>
<li>
<p><a id="VUID-VkShaderModuleCreateInfo-pCode-01090"></a>
<code>pCode</code> <strong class="purple">must</strong> not declare any capability that is not supported by
the API, as described by the <a href="vkspec.html#spirvenv-module-validation">Capabilities</a> section of the <a href="vkspec.html#spirvenv-capabilities">SPIR-V
Environment</a> appendix</p>
</li>
<li>
<p><a id="VUID-VkShaderModuleCreateInfo-pCode-01091"></a>
If <code>pCode</code> declares any of the capabilities listed as <strong class="purple">optional</strong> in
the <a href="vkspec.html#spirvenv-capabilities-table">SPIR-V Environment</a> appendix, the
corresponding feature(s) <strong class="purple">must</strong> be enabled.</p>
</li>
</ul>
</div>
</div>
</div>
<div class="sidebarblock">
<div class="content">
<div class="title">Valid Usage (Implicit)</div>
<div class="ulist">
<ul>
<li>
<p><a id="VUID-VkShaderModuleCreateInfo-sType-sType"></a> <code>sType</code> <strong class="purple">must</strong> be <code>VK_STRUCTURE_TYPE_SHADER_MODULE_CREATE_INFO</code></p>
</li>
<li>
<p><a id="VUID-VkShaderModuleCreateInfo-pNext-pNext"></a> <code>pNext</code> <strong class="purple">must</strong> be <code>NULL</code> or a pointer to a valid instance of <a href="#VkShaderModuleValidationCacheCreateInfoEXT">VkShaderModuleValidationCacheCreateInfoEXT</a></p>
</li>
<li>
<p><a id="VUID-VkShaderModuleCreateInfo-flags-zerobitmask"></a> <code>flags</code> <strong class="purple">must</strong> be <code>0</code></p>
</li>
<li>
<p><a id="VUID-VkShaderModuleCreateInfo-pCode-parameter"></a> <code>pCode</code> <strong class="purple">must</strong> be a valid pointer to an array of \(\textrm{codeSize} \over 4\) <code>uint32_t</code> values</p>
</li>
</ul>
</div>
</div>
</div>
</div>
<div class="sect3">
<h4 id="_see_also_736">See Also</h4>
<div class="paragraph">
<p><a href="#VkShaderModuleCreateFlags">VkShaderModuleCreateFlags</a>, <a href="#VkStructureType">VkStructureType</a>, <a href="#vkCreateShaderModule">vkCreateShaderModule</a></p>
</div>
</div>
<div class="sect3">
<h4 id="_document_notes_736">Document Notes</h4>
<div class="paragraph">
<p>For more information, see the Vulkan Specification at URL</p>
</div>
<div class="paragraph">
<p><a href="https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VkShaderModuleCreateInfo" class="bare">https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VkShaderModuleCreateInfo</a></p>
</div>
<div class="paragraph">
<p>This page is extracted from the Vulkan Specification.
Fixes and changes should be made to the Specification, not directly.</p>
</div>
<div style="page-break-after: always;"></div>
</div>
</div>
<div class="sect2">
<h3 id="_vkshadermodulevalidationcachecreateinfoext3">VkShaderModuleValidationCacheCreateInfoEXT(3)</h3>
<div class="sect3">
<h4 id="_name_737">Name</h4>
<div class="paragraph">
<p>VkShaderModuleValidationCacheCreateInfoEXT - Specify validation cache to use during shader module creation</p>
</div>
</div>
<div class="sect3">
<h4 id="_c_specification_737">C Specification</h4>
<div class="paragraph">
<p>To use a <a href="#VkValidationCacheEXT">VkValidationCacheEXT</a> to cache shader validation results, add
a <a href="#VkShaderModuleValidationCacheCreateInfoEXT">VkShaderModuleValidationCacheCreateInfoEXT</a> to the <code>pNext</code> chain
of the <a href="#VkShaderModuleCreateInfo">VkShaderModuleCreateInfo</a> structure, specifying the cache object
to use.</p>
</div>
<div class="paragraph">
<p>The <code>VkShaderModuleValidationCacheCreateInfoEXT</code> struct is defined as:</p>
</div>
<div id="VkShaderModuleValidationCacheCreateInfoEXT" class="listingblock">
<div class="content">
<pre class="highlight"><code class="language-c++" data-lang="c++">typedef struct VkShaderModuleValidationCacheCreateInfoEXT {
    VkStructureType         sType;
    const void*             pNext;
    VkValidationCacheEXT    validationCache;
} VkShaderModuleValidationCacheCreateInfoEXT;</code></pre>
</div>
</div>
</div>
<div class="sect3">
<h4 id="_members_374">Members</h4>
<div class="ulist">
<ul>
<li>
<p><code>sType</code> is the type of this structure.</p>
</li>
<li>
<p><code>pNext</code> is <code>NULL</code> or a pointer to an extension-specific structure.</p>
</li>
<li>
<p><code>validationCache</code> is the validation cache object from which the
results of prior validation attempts will be written, and to which new
validation results for this <a href="#VkShaderModule">VkShaderModule</a> will be written (if not
already present).</p>
</li>
</ul>
</div>
</div>
<div class="sect3">
<h4 id="_description_737">Description</h4>
<div class="sidebarblock">
<div class="content">
<div class="title">Valid Usage (Implicit)</div>
<div class="ulist">
<ul>
<li>
<p><a id="VUID-VkShaderModuleValidationCacheCreateInfoEXT-sType-sType"></a> <code>sType</code> <strong class="purple">must</strong> be <code>VK_STRUCTURE_TYPE_SHADER_MODULE_VALIDATION_CACHE_CREATE_INFO_EXT</code></p>
</li>
<li>
<p><a id="VUID-VkShaderModuleValidationCacheCreateInfoEXT-validationCache-parameter"></a> <code>validationCache</code> <strong class="purple">must</strong> be a valid <code>VkValidationCacheEXT</code> handle</p>
</li>
</ul>
</div>
</div>
</div>
</div>
<div class="sect3">
<h4 id="_see_also_737">See Also</h4>
<div class="paragraph">
<p><a href="#VkStructureType">VkStructureType</a>, <a href="#VkValidationCacheEXT">VkValidationCacheEXT</a></p>
</div>
</div>
<div class="sect3">
<h4 id="_document_notes_737">Document Notes</h4>
<div class="paragraph">
<p>For more information, see the Vulkan Specification at URL</p>
</div>
<div class="paragraph">
<p><a href="https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VkShaderModuleValidationCacheCreateInfoEXT" class="bare">https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VkShaderModuleValidationCacheCreateInfoEXT</a></p>
</div>
<div class="paragraph">
<p>This page is extracted from the Vulkan Specification.
Fixes and changes should be made to the Specification, not directly.</p>
</div>
<div style="page-break-after: always;"></div>
</div>
</div>
<div class="sect2">
<h3 id="_vkshaderresourceusageamd3">VkShaderResourceUsageAMD(3)</h3>
<div class="sect3">
<h4 id="_name_738">Name</h4>
<div class="paragraph">
<p>VkShaderResourceUsageAMD - Resource usage information about a particular shader within a pipeline</p>
</div>
</div>
<div class="sect3">
<h4 id="_c_specification_738">C Specification</h4>
<div class="paragraph">
<p>The <code>VkShaderResourceUsageAMD</code> structure is defined as:</p>
</div>
<div id="VkShaderResourceUsageAMD" class="listingblock">
<div class="content">
<pre class="highlight"><code class="language-c++" data-lang="c++">typedef struct VkShaderResourceUsageAMD {
    uint32_t    numUsedVgprs;
    uint32_t    numUsedSgprs;
    uint32_t    ldsSizePerLocalWorkGroup;
    size_t      ldsUsageSizeInBytes;
    size_t      scratchMemUsageInBytes;
} VkShaderResourceUsageAMD;</code></pre>
</div>
</div>
</div>
<div class="sect3">
<h4 id="_members_375">Members</h4>
<div class="ulist">
<ul>
<li>
<p><code>numUsedVgprs</code> is the number of vector instruction general-purpose
registers used by this shader.</p>
</li>
<li>
<p><code>numUsedSgprs</code> is the number of scalar instruction general-purpose
registers used by this shader.</p>
</li>
<li>
<p><code>ldsSizePerLocalWorkGroup</code> is the maximum local data store size per
work group in bytes.</p>
</li>
<li>
<p><code>ldsUsageSizeInBytes</code> is the LDS usage size in bytes per work group
by this shader.</p>
</li>
<li>
<p><code>scratchMemUsageInBytes</code> is the scratch memory usage in bytes by
this shader.</p>
</li>
</ul>
</div>
</div>
<div class="sect3">
<h4 id="_description_738">Description</h4>

</div>
<div class="sect3">
<h4 id="_see_also_738">See Also</h4>
<div class="paragraph">
<p><a href="#VkShaderStatisticsInfoAMD">VkShaderStatisticsInfoAMD</a></p>
</div>
</div>
<div class="sect3">
<h4 id="_document_notes_738">Document Notes</h4>
<div class="paragraph">
<p>For more information, see the Vulkan Specification at URL</p>
</div>
<div class="paragraph">
<p><a href="https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VkShaderResourceUsageAMD" class="bare">https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VkShaderResourceUsageAMD</a></p>
</div>
<div class="paragraph">
<p>This page is extracted from the Vulkan Specification.
Fixes and changes should be made to the Specification, not directly.</p>
</div>
<div style="page-break-after: always;"></div>
</div>
</div>
<div class="sect2">
<h3 id="_vkshaderstatisticsinfoamd3">VkShaderStatisticsInfoAMD(3)</h3>
<div class="sect3">
<h4 id="_name_739">Name</h4>
<div class="paragraph">
<p>VkShaderStatisticsInfoAMD - Statistical information about a particular shader within a pipeline</p>
</div>
</div>
<div class="sect3">
<h4 id="_c_specification_739">C Specification</h4>
<div class="paragraph">
<p>The <code>VkShaderStatisticsInfoAMD</code> structure is defined as:</p>
</div>
<div id="VkShaderStatisticsInfoAMD" class="listingblock">
<div class="content">
<pre class="highlight"><code class="language-c++" data-lang="c++">typedef struct VkShaderStatisticsInfoAMD {
    VkShaderStageFlags          shaderStageMask;
    VkShaderResourceUsageAMD    resourceUsage;
    uint32_t                    numPhysicalVgprs;
    uint32_t                    numPhysicalSgprs;
    uint32_t                    numAvailableVgprs;
    uint32_t                    numAvailableSgprs;
    uint32_t                    computeWorkGroupSize[3];
} VkShaderStatisticsInfoAMD;</code></pre>
</div>
</div>
</div>
<div class="sect3">
<h4 id="_members_376">Members</h4>
<div class="ulist">
<ul>
<li>
<p><code>shaderStageMask</code> are the combination of logical shader stages
contained within this shader.</p>
</li>
<li>
<p><code>resourceUsage</code> is an instance of <a href="#VkShaderResourceUsageAMD">VkShaderResourceUsageAMD</a>
describing internal physical device resources used by this shader.</p>
</li>
<li>
<p><code>numPhysicalVgprs</code> is the maximum number of vector instruction
general-purpose registers (VGPRs) available to the physical device.</p>
</li>
<li>
<p><code>numPhysicalSgprs</code> is the maximum number of scalar instruction
general-purpose registers (SGPRs) available to the physical device.</p>
</li>
<li>
<p><code>numAvailableVgprs</code> is the maximum limit of VGPRs made available to
the shader compiler.</p>
</li>
<li>
<p><code>numAvailableSgprs</code> is the maximum limit of SGPRs made available to
the shader compiler.</p>
</li>
<li>
<p><code>computeWorkGroupSize</code> is the local workgroup size of this shader in
{ X, Y, Z } dimensions.</p>
</li>
</ul>
</div>
</div>
<div class="sect3">
<h4 id="_description_739">Description</h4>
<div class="paragraph">
<p>Some implementations may merge multiple logical shader stages together in a
single shader.
In such cases, <code>shaderStageMask</code> will contain a bitmask of all of the
stages that are active within that shader.
Consequently, if specifying those stages as input to
<a href="#vkGetShaderInfoAMD">vkGetShaderInfoAMD</a>, the same output information <strong class="purple">may</strong> be returned for
all such shader stage queries.</p>
</div>
<div class="paragraph">
<p>The number of available VGPRs and SGPRs (<code>numAvailableVgprs</code> and
<code>numAvailableSgprs</code> respectively) are the shader-addressable subset of
physical registers that is given as a limit to the compiler for register
assignment.
These values <strong class="purple">may</strong> further be limited by implementations due to performance
optimizations where register pressure is a bottleneck.</p>
</div>
</div>
<div class="sect3">
<h4 id="_see_also_739">See Also</h4>
<div class="paragraph">
<p><a href="#VkShaderResourceUsageAMD">VkShaderResourceUsageAMD</a>, <a href="#VkShaderStageFlags">VkShaderStageFlags</a></p>
</div>
</div>
<div class="sect3">
<h4 id="_document_notes_739">Document Notes</h4>
<div class="paragraph">
<p>For more information, see the Vulkan Specification at URL</p>
</div>
<div class="paragraph">
<p><a href="https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VkShaderStatisticsInfoAMD" class="bare">https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VkShaderStatisticsInfoAMD</a></p>
</div>
<div class="paragraph">
<p>This page is extracted from the Vulkan Specification.
Fixes and changes should be made to the Specification, not directly.</p>
</div>
<div style="page-break-after: always;"></div>
</div>
</div>
<div class="sect2">
<h3 id="_vkshadingratepalettenv3">VkShadingRatePaletteNV(3)</h3>
<div class="sect3">
<h4 id="_name_740">Name</h4>
<div class="paragraph">
<p>VkShadingRatePaletteNV - Structure specifying a single shading rate palette</p>
</div>
</div>
<div class="sect3">
<h4 id="_c_specification_740">C Specification</h4>
<div class="paragraph">
<p>The <code>VkShadingRatePaletteNV</code> structure specifies to contents of a single
shading rate image palette and is defined as:</p>
</div>
<div id="VkShadingRatePaletteNV" class="listingblock">
<div class="content">
<pre class="highlight"><code class="language-c++" data-lang="c++">typedef struct VkShadingRatePaletteNV {
    uint32_t                              shadingRatePaletteEntryCount;
    const VkShadingRatePaletteEntryNV*    pShadingRatePaletteEntries;
} VkShadingRatePaletteNV;</code></pre>
</div>
</div>
</div>
<div class="sect3">
<h4 id="_members_377">Members</h4>
<div class="ulist">
<ul>
<li>
<p><code>shadingRatePaletteEntryCount</code> specifies the number of entries in
the shading rate image palette.</p>
</li>
<li>
<p><code>pShadingRatePaletteEntries</code> is a pointer to an array of
<a href="#VkShadingRatePaletteEntryNV">VkShadingRatePaletteEntryNV</a> enums defining the shading rate for
each palette entry.</p>
</li>
</ul>
</div>
</div>
<div class="sect3">
<h4 id="_description_740">Description</h4>
<div class="sidebarblock">
<div class="content">
<div class="title">Valid Usage</div>
<div class="ulist">
<ul>
<li>
<p><a id="VUID-VkShadingRatePaletteNV-shadingRatePaletteEntryCount-02071"></a>
<code>shadingRatePaletteEntryCount</code> <strong class="purple">must</strong> be between <code>1</code> and
<code>VkPhysicalDeviceShadingRateImagePropertiesNV</code>::<code>shadingRatePaletteSize</code>,
inclusive</p>
</li>
</ul>
</div>
</div>
</div>
<div class="sidebarblock">
<div class="content">
<div class="title">Valid Usage (Implicit)</div>
<div class="ulist">
<ul>
<li>
<p><a id="VUID-VkShadingRatePaletteNV-pShadingRatePaletteEntries-parameter"></a> <code>pShadingRatePaletteEntries</code> <strong class="purple">must</strong> be a valid pointer to an array of <code>shadingRatePaletteEntryCount</code> valid <a href="#VkShadingRatePaletteEntryNV">VkShadingRatePaletteEntryNV</a> values</p>
</li>
<li>
<p><a id="VUID-VkShadingRatePaletteNV-shadingRatePaletteEntryCount-arraylength"></a> <code>shadingRatePaletteEntryCount</code> <strong class="purple">must</strong> be greater than <code>0</code></p>
</li>
</ul>
</div>
</div>
</div>
</div>
<div class="sect3">
<h4 id="_see_also_740">See Also</h4>
<div class="paragraph">
<p><a href="#VkPipelineViewportShadingRateImageStateCreateInfoNV">VkPipelineViewportShadingRateImageStateCreateInfoNV</a>, <a href="#VkShadingRatePaletteEntryNV">VkShadingRatePaletteEntryNV</a>, <a href="#vkCmdSetViewportShadingRatePaletteNV">vkCmdSetViewportShadingRatePaletteNV</a></p>
</div>
</div>
<div class="sect3">
<h4 id="_document_notes_740">Document Notes</h4>
<div class="paragraph">
<p>For more information, see the Vulkan Specification at URL</p>
</div>
<div class="paragraph">
<p><a href="https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VkShadingRatePaletteNV" class="bare">https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VkShadingRatePaletteNV</a></p>
</div>
<div class="paragraph">
<p>This page is extracted from the Vulkan Specification.
Fixes and changes should be made to the Specification, not directly.</p>
</div>
<div style="page-break-after: always;"></div>
</div>
</div>
<div class="sect2">
<h3 id="_vksharedpresentsurfacecapabilitieskhr3">VkSharedPresentSurfaceCapabilitiesKHR(3)</h3>
<div class="sect3">
<h4 id="_name_741">Name</h4>
<div class="paragraph">
<p>VkSharedPresentSurfaceCapabilitiesKHR - structure describing capabilities of a surface for shared presentation</p>
</div>
</div>
<div class="sect3">
<h4 id="_c_specification_741">C Specification</h4>
<div class="paragraph">
<p>The <code>VkSharedPresentSurfaceCapabilitiesKHR</code> structure is defined as:</p>
</div>
<div id="VkSharedPresentSurfaceCapabilitiesKHR" class="listingblock">
<div class="content">
<pre class="highlight"><code class="language-c++" data-lang="c++">typedef struct VkSharedPresentSurfaceCapabilitiesKHR {
    VkStructureType      sType;
    void*                pNext;
    VkImageUsageFlags    sharedPresentSupportedUsageFlags;
} VkSharedPresentSurfaceCapabilitiesKHR;</code></pre>
</div>
</div>
</div>
<div class="sect3">
<h4 id="_members_378">Members</h4>
<div class="ulist">
<ul>
<li>
<p><code>sType</code> is the type of this structure.</p>
</li>
<li>
<p><code>pNext</code> is <code>NULL</code> or a pointer to an extension-specific structure.</p>
</li>
<li>
<p><code>sharedPresentSupportedUsageFlags</code> is a bitmask of
<a href="#VkImageUsageFlagBits">VkImageUsageFlagBits</a> representing the ways the application <strong class="purple">can</strong>
use the shared presentable image from a swapchain created with
<a href="#VkPresentModeKHR">VkPresentModeKHR</a> set to
<code>VK_PRESENT_MODE_SHARED_DEMAND_REFRESH_KHR</code> or
<code>VK_PRESENT_MODE_SHARED_CONTINUOUS_REFRESH_KHR</code> for the surface on
the specified device.
<code>VK_IMAGE_USAGE_COLOR_ATTACHMENT_BIT</code> <strong class="purple">must</strong> be included in the set
but implementations <strong class="purple">may</strong> support additional usages.</p>
</li>
</ul>
</div>
</div>
<div class="sect3">
<h4 id="_description_741">Description</h4>
<div class="sidebarblock">
<div class="content">
<div class="title">Valid Usage (Implicit)</div>
<div class="ulist">
<ul>
<li>
<p><a id="VUID-VkSharedPresentSurfaceCapabilitiesKHR-sType-sType"></a> <code>sType</code> <strong class="purple">must</strong> be <code>VK_STRUCTURE_TYPE_SHARED_PRESENT_SURFACE_CAPABILITIES_KHR</code></p>
</li>
</ul>
</div>
</div>
</div>
</div>
<div class="sect3">
<h4 id="_see_also_741">See Also</h4>
<div class="paragraph">
<p><a href="#VkImageUsageFlags">VkImageUsageFlags</a>, <a href="#VkStructureType">VkStructureType</a></p>
</div>
</div>
<div class="sect3">
<h4 id="_document_notes_741">Document Notes</h4>
<div class="paragraph">
<p>For more information, see the Vulkan Specification at URL</p>
</div>
<div class="paragraph">
<p><a href="https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VkSharedPresentSurfaceCapabilitiesKHR" class="bare">https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VkSharedPresentSurfaceCapabilitiesKHR</a></p>
</div>
<div class="paragraph">
<p>This page is extracted from the Vulkan Specification.
Fixes and changes should be made to the Specification, not directly.</p>
</div>
<div style="page-break-after: always;"></div>
</div>
</div>
<div class="sect2">
<h3 id="_vksparsebuffermemorybindinfo3">VkSparseBufferMemoryBindInfo(3)</h3>
<div class="sect3">
<h4 id="_name_742">Name</h4>
<div class="paragraph">
<p>VkSparseBufferMemoryBindInfo - Structure specifying a sparse buffer memory bind operation</p>
</div>
</div>
<div class="sect3">
<h4 id="_c_specification_742">C Specification</h4>
<div class="paragraph">
<p>Memory is bound to <code>VkBuffer</code> objects created with the
<code>VK_BUFFER_CREATE_SPARSE_BINDING_BIT</code> flag using the following
structure:</p>
</div>
<div id="VkSparseBufferMemoryBindInfo" class="listingblock">
<div class="content">
<pre class="highlight"><code class="language-c++" data-lang="c++">typedef struct VkSparseBufferMemoryBindInfo {
    VkBuffer                     buffer;
    uint32_t                     bindCount;
    const VkSparseMemoryBind*    pBinds;
} VkSparseBufferMemoryBindInfo;</code></pre>
</div>
</div>
</div>
<div class="sect3">
<h4 id="_members_379">Members</h4>
<div class="ulist">
<ul>
<li>
<p><code>buffer</code> is the <a href="#VkBuffer">VkBuffer</a> object to be bound.</p>
</li>
<li>
<p><code>bindCount</code> is the number of <a href="#VkSparseMemoryBind">VkSparseMemoryBind</a> structures in
the <code>pBinds</code> array.</p>
</li>
<li>
<p><code>pBinds</code> is a pointer to array of <a href="#VkSparseMemoryBind">VkSparseMemoryBind</a>
structures.</p>
</li>
</ul>
</div>
</div>
<div class="sect3">
<h4 id="_description_742">Description</h4>
<div class="sidebarblock">
<div class="content">
<div class="title">Valid Usage (Implicit)</div>
<div class="ulist">
<ul>
<li>
<p><a id="VUID-VkSparseBufferMemoryBindInfo-buffer-parameter"></a> <code>buffer</code> <strong class="purple">must</strong> be a valid <code>VkBuffer</code> handle</p>
</li>
<li>
<p><a id="VUID-VkSparseBufferMemoryBindInfo-pBinds-parameter"></a> <code>pBinds</code> <strong class="purple">must</strong> be a valid pointer to an array of <code>bindCount</code> valid <code>VkSparseMemoryBind</code> structures</p>
</li>
<li>
<p><a id="VUID-VkSparseBufferMemoryBindInfo-bindCount-arraylength"></a> <code>bindCount</code> <strong class="purple">must</strong> be greater than <code>0</code></p>
</li>
</ul>
</div>
</div>
</div>
</div>
<div class="sect3">
<h4 id="_see_also_742">See Also</h4>
<div class="paragraph">
<p><a href="#VkBindSparseInfo">VkBindSparseInfo</a>, <a href="#VkBuffer">VkBuffer</a>, <a href="#VkSparseMemoryBind">VkSparseMemoryBind</a></p>
</div>
</div>
<div class="sect3">
<h4 id="_document_notes_742">Document Notes</h4>
<div class="paragraph">
<p>For more information, see the Vulkan Specification at URL</p>
</div>
<div class="paragraph">
<p><a href="https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VkSparseBufferMemoryBindInfo" class="bare">https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VkSparseBufferMemoryBindInfo</a></p>
</div>
<div class="paragraph">
<p>This page is extracted from the Vulkan Specification.
Fixes and changes should be made to the Specification, not directly.</p>
</div>
<div style="page-break-after: always;"></div>
</div>
</div>
<div class="sect2">
<h3 id="_vksparseimageformatproperties3">VkSparseImageFormatProperties(3)</h3>
<div class="sect3">
<h4 id="_name_743">Name</h4>
<div class="paragraph">
<p>VkSparseImageFormatProperties - Structure specifying sparse image format properties</p>
</div>
</div>
<div class="sect3">
<h4 id="_c_specification_743">C Specification</h4>
<div class="paragraph">
<p>The <code>VkSparseImageFormatProperties</code> structure is defined as:</p>
</div>
<div id="VkSparseImageFormatProperties" class="listingblock">
<div class="content">
<pre class="highlight"><code class="language-c++" data-lang="c++">typedef struct VkSparseImageFormatProperties {
    VkImageAspectFlags          aspectMask;
    VkExtent3D                  imageGranularity;
    VkSparseImageFormatFlags    flags;
} VkSparseImageFormatProperties;</code></pre>
</div>
</div>
</div>
<div class="sect3">
<h4 id="_members_380">Members</h4>
<div class="ulist">
<ul>
<li>
<p><code>aspectMask</code> is a bitmask <a href="#VkImageAspectFlagBits">VkImageAspectFlagBits</a> specifying
which aspects of the image the properties apply to.</p>
</li>
<li>
<p><code>imageGranularity</code> is the width, height, and depth of the sparse
image block in texels or compressed texel blocks.</p>
</li>
<li>
<p><code>flags</code> is a bitmask of <a href="#VkSparseImageFormatFlagBits">VkSparseImageFormatFlagBits</a> specifying
additional information about the sparse resource.</p>
</li>
</ul>
</div>
</div>
<div class="sect3">
<h4 id="_description_743">Description</h4>

</div>
<div class="sect3">
<h4 id="_see_also_743">See Also</h4>
<div class="paragraph">
<p><a href="#VkExtent3D">VkExtent3D</a>, <a href="#VkImageAspectFlags">VkImageAspectFlags</a>, <a href="#VkSparseImageFormatFlags">VkSparseImageFormatFlags</a>, <a href="#VkSparseImageFormatProperties2">VkSparseImageFormatProperties2</a>, <a href="#VkSparseImageMemoryRequirements">VkSparseImageMemoryRequirements</a>, <a href="#vkGetPhysicalDeviceSparseImageFormatProperties">vkGetPhysicalDeviceSparseImageFormatProperties</a></p>
</div>
</div>
<div class="sect3">
<h4 id="_document_notes_743">Document Notes</h4>
<div class="paragraph">
<p>For more information, see the Vulkan Specification at URL</p>
</div>
<div class="paragraph">
<p><a href="https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VkSparseImageFormatProperties" class="bare">https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VkSparseImageFormatProperties</a></p>
</div>
<div class="paragraph">
<p>This page is extracted from the Vulkan Specification.
Fixes and changes should be made to the Specification, not directly.</p>
</div>
<div style="page-break-after: always;"></div>
</div>
</div>
<div class="sect2">
<h3 id="_vksparseimageformatproperties23">VkSparseImageFormatProperties2(3)</h3>
<div class="sect3">
<h4 id="_name_744">Name</h4>
<div class="paragraph">
<p>VkSparseImageFormatProperties2 - Structure specifying sparse image format properties</p>
</div>
</div>
<div class="sect3">
<h4 id="_c_specification_744">C Specification</h4>
<div class="paragraph">
<p>The <code>VkSparseImageFormatProperties2</code> structure is defined as:</p>
</div>
<div id="VkSparseImageFormatProperties2" class="listingblock">
<div class="content">
<pre class="highlight"><code class="language-c++" data-lang="c++">typedef struct VkSparseImageFormatProperties2 {
    VkStructureType                  sType;
    void*                            pNext;
    VkSparseImageFormatProperties    properties;
} VkSparseImageFormatProperties2;</code></pre>
</div>
</div>
<div class="paragraph">
<p>or the equivalent</p>
</div>
<div id="VkSparseImageFormatProperties2KHR" class="listingblock">
<div class="content">
<pre class="highlight"><code class="language-c++" data-lang="c++">typedef VkSparseImageFormatProperties2 VkSparseImageFormatProperties2KHR;</code></pre>
</div>
</div>
</div>
<div class="sect3">
<h4 id="_members_381">Members</h4>
<div class="ulist">
<ul>
<li>
<p><code>sType</code> is the type of this structure.</p>
</li>
<li>
<p><code>pNext</code> is <code>NULL</code> or a pointer to an extension-specific structure.</p>
</li>
<li>
<p><code>properties</code> is a structure of type
<a href="#VkSparseImageFormatProperties">VkSparseImageFormatProperties</a> which is populated with the same
values as in <a href="#vkGetPhysicalDeviceSparseImageFormatProperties">vkGetPhysicalDeviceSparseImageFormatProperties</a>.</p>
</li>
</ul>
</div>
</div>
<div class="sect3">
<h4 id="_description_744">Description</h4>
<div class="sidebarblock">
<div class="content">
<div class="title">Valid Usage (Implicit)</div>
<div class="ulist">
<ul>
<li>
<p><a id="VUID-VkSparseImageFormatProperties2-sType-sType"></a> <code>sType</code> <strong class="purple">must</strong> be <code>VK_STRUCTURE_TYPE_SPARSE_IMAGE_FORMAT_PROPERTIES_2</code></p>
</li>
<li>
<p><a id="VUID-VkSparseImageFormatProperties2-pNext-pNext"></a> <code>pNext</code> <strong class="purple">must</strong> be <code>NULL</code></p>
</li>
</ul>
</div>
</div>
</div>
</div>
<div class="sect3">
<h4 id="_see_also_744">See Also</h4>
<div class="paragraph">
<p><a href="#VkSparseImageFormatProperties">VkSparseImageFormatProperties</a>, <a href="#VkStructureType">VkStructureType</a>, <a href="#vkGetPhysicalDeviceSparseImageFormatProperties2">vkGetPhysicalDeviceSparseImageFormatProperties2</a>, <a href="#vkGetPhysicalDeviceSparseImageFormatProperties2KHR">vkGetPhysicalDeviceSparseImageFormatProperties2KHR</a></p>
</div>
</div>
<div class="sect3">
<h4 id="_document_notes_744">Document Notes</h4>
<div class="paragraph">
<p>For more information, see the Vulkan Specification at URL</p>
</div>
<div class="paragraph">
<p><a href="https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VkSparseImageFormatProperties2" class="bare">https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VkSparseImageFormatProperties2</a></p>
</div>
<div class="paragraph">
<p>This page is extracted from the Vulkan Specification.
Fixes and changes should be made to the Specification, not directly.</p>
</div>
<div style="page-break-after: always;"></div>
</div>
</div>
<div class="sect2">
<h3 id="_vksparseimagememorybind3">VkSparseImageMemoryBind(3)</h3>
<div class="sect3">
<h4 id="_name_745">Name</h4>
<div class="paragraph">
<p>VkSparseImageMemoryBind - Structure specifying sparse image memory bind</p>
</div>
</div>
<div class="sect3">
<h4 id="_c_specification_745">C Specification</h4>
<div class="paragraph">
<p>The <code>VkSparseImageMemoryBind</code> structure is defined as:</p>
</div>
<div id="VkSparseImageMemoryBind" class="listingblock">
<div class="content">
<pre class="highlight"><code class="language-c++" data-lang="c++">typedef struct VkSparseImageMemoryBind {
    VkImageSubresource         subresource;
    VkOffset3D                 offset;
    VkExtent3D                 extent;
    VkDeviceMemory             memory;
    VkDeviceSize               memoryOffset;
    VkSparseMemoryBindFlags    flags;
} VkSparseImageMemoryBind;</code></pre>
</div>
</div>
</div>
<div class="sect3">
<h4 id="_members_382">Members</h4>
<div class="ulist">
<ul>
<li>
<p><code>subresource</code> is the image <em>aspect</em> and region of interest in the
image.</p>
</li>
<li>
<p><code>offset</code> are the coordinates of the first texel within the image
subresource to bind.</p>
</li>
<li>
<p><code>extent</code> is the size in texels of the region within the image
subresource to bind.
The extent <strong class="purple">must</strong> be a multiple of the sparse image block dimensions,
except when binding sparse image blocks along the edge of an image
subresource it <strong class="purple">can</strong> instead be such that any coordinate of
<span class="eq"><code>offset</code> +  <code>extent</code></span> equals the corresponding
dimensions of the image subresource.</p>
</li>
<li>
<p><code>memory</code> is the <a href="#VkDeviceMemory">VkDeviceMemory</a> object that the sparse image
blocks of the image are bound to.
If <code>memory</code> is <a href="#VK_NULL_HANDLE">VK_NULL_HANDLE</a>, the sparse image blocks are
unbound.</p>
</li>
<li>
<p><code>memoryOffset</code> is an offset into <a href="#VkDeviceMemory">VkDeviceMemory</a> object.
If <code>memory</code> is <a href="#VK_NULL_HANDLE">VK_NULL_HANDLE</a>, this value is ignored.</p>
</li>
<li>
<p><code>flags</code> are sparse memory binding flags.</p>
</li>
</ul>
</div>
</div>
<div class="sect3">
<h4 id="_description_745">Description</h4>
<div class="sidebarblock">
<div class="content">
<div class="title">Valid Usage</div>
<div class="ulist">
<ul>
<li>
<p><a id="VUID-VkSparseImageMemoryBind-memory-01104"></a>
If the <a href="vkspec.html#features-sparseResidencyAliased">sparse aliased residency</a>
feature is not enabled, and if any other resources are bound to ranges
of <code>memory</code>, the range of <code>memory</code> being bound <strong class="purple">must</strong> not overlap
with those bound ranges</p>
</li>
<li>
<p><a id="VUID-VkSparseImageMemoryBind-memory-01105"></a>
<code>memory</code> and <code>memoryOffset</code> <strong class="purple">must</strong> match the memory requirements
of the calling command&#8217;s <code>image</code>, as described in section
<a href="vkspec.html#resources-association" class="bare">html/vkspec.html#resources-association</a></p>
</li>
<li>
<p><a id="VUID-VkSparseImageMemoryBind-subresource-01106"></a>
<code>subresource</code> <strong class="purple">must</strong> be a valid image subresource for <code>image</code>
(see <a href="vkspec.html#resources-image-views" class="bare">html/vkspec.html#resources-image-views</a>)</p>
</li>
<li>
<p><a id="VUID-VkSparseImageMemoryBind-offset-01107"></a>
<code>offset.x</code> <strong class="purple">must</strong> be a multiple of the sparse image block width
(<code>VkSparseImageFormatProperties</code>::<code>imageGranularity.width</code>) of
the image</p>
</li>
<li>
<p><a id="VUID-VkSparseImageMemoryBind-extent-01108"></a>
<code>extent.width</code> <strong class="purple">must</strong> either be a multiple of the sparse image block
width of the image, or else <span class="eq">(<code>extent.width</code> + 
<code>offset.x</code>)</span> <strong class="purple">must</strong> equal the width of the image subresource</p>
</li>
<li>
<p><a id="VUID-VkSparseImageMemoryBind-offset-01109"></a>
<code>offset.y</code> <strong class="purple">must</strong> be a multiple of the sparse image block height
(<code>VkSparseImageFormatProperties</code>::<code>imageGranularity.height</code>) of
the image</p>
</li>
<li>
<p><a id="VUID-VkSparseImageMemoryBind-extent-01110"></a>
<code>extent.height</code> <strong class="purple">must</strong> either be a multiple of the sparse image block
height of the image, or else <span class="eq">(<code>extent.height</code> + 
<code>offset.y</code>)</span> <strong class="purple">must</strong> equal the height of the image subresource</p>
</li>
<li>
<p><a id="VUID-VkSparseImageMemoryBind-offset-01111"></a>
<code>offset.z</code> <strong class="purple">must</strong> be a multiple of the sparse image block depth
(<code>VkSparseImageFormatProperties</code>::<code>imageGranularity.depth</code>) of
the image</p>
</li>
<li>
<p><a id="VUID-VkSparseImageMemoryBind-extent-01112"></a>
<code>extent.depth</code> <strong class="purple">must</strong> either be a multiple of the sparse image block
depth of the image, or else <span class="eq">(<code>extent.depth</code> + 
<code>offset.z</code>)</span> <strong class="purple">must</strong> equal the depth of the image subresource</p>
</li>
</ul>
</div>
</div>
</div>
<div class="sidebarblock">
<div class="content">
<div class="title">Valid Usage (Implicit)</div>
<div class="ulist">
<ul>
<li>
<p><a id="VUID-VkSparseImageMemoryBind-subresource-parameter"></a> <code>subresource</code> <strong class="purple">must</strong> be a valid <code>VkImageSubresource</code> structure</p>
</li>
<li>
<p><a id="VUID-VkSparseImageMemoryBind-memory-parameter"></a> If <code>memory</code> is not <a href="#VK_NULL_HANDLE">VK_NULL_HANDLE</a>, <code>memory</code> <strong class="purple">must</strong> be a valid <code>VkDeviceMemory</code> handle</p>
</li>
<li>
<p><a id="VUID-VkSparseImageMemoryBind-flags-parameter"></a> <code>flags</code> <strong class="purple">must</strong> be a valid combination of <a href="#VkSparseMemoryBindFlagBits">VkSparseMemoryBindFlagBits</a> values</p>
</li>
</ul>
</div>
</div>
</div>
</div>
<div class="sect3">
<h4 id="_see_also_745">See Also</h4>
<div class="paragraph">
<p><a href="#VkDeviceMemory">VkDeviceMemory</a>, <code>VkDeviceSize</code>, <a href="#VkExtent3D">VkExtent3D</a>, <a href="#VkImageSubresource">VkImageSubresource</a>, <a href="#VkOffset3D">VkOffset3D</a>, <a href="#VkSparseImageMemoryBindInfo">VkSparseImageMemoryBindInfo</a>, <a href="#VkSparseMemoryBindFlags">VkSparseMemoryBindFlags</a></p>
</div>
</div>
<div class="sect3">
<h4 id="_document_notes_745">Document Notes</h4>
<div class="paragraph">
<p>For more information, see the Vulkan Specification at URL</p>
</div>
<div class="paragraph">
<p><a href="https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VkSparseImageMemoryBind" class="bare">https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VkSparseImageMemoryBind</a></p>
</div>
<div class="paragraph">
<p>This page is extracted from the Vulkan Specification.
Fixes and changes should be made to the Specification, not directly.</p>
</div>
<div style="page-break-after: always;"></div>
</div>
</div>
<div class="sect2">
<h3 id="_vksparseimagememorybindinfo3">VkSparseImageMemoryBindInfo(3)</h3>
<div class="sect3">
<h4 id="_name_746">Name</h4>
<div class="paragraph">
<p>VkSparseImageMemoryBindInfo - Structure specifying sparse image memory bind info</p>
</div>
</div>
<div class="sect3">
<h4 id="_c_specification_746">C Specification</h4>
<div class="paragraph">
<p>Memory <strong class="purple">can</strong> be bound to sparse image blocks of <code>VkImage</code> objects created
with the <code>VK_IMAGE_CREATE_SPARSE_RESIDENCY_BIT</code> flag using the following
structure:</p>
</div>
<div id="VkSparseImageMemoryBindInfo" class="listingblock">
<div class="content">
<pre class="highlight"><code class="language-c++" data-lang="c++">typedef struct VkSparseImageMemoryBindInfo {
    VkImage                           image;
    uint32_t                          bindCount;
    const VkSparseImageMemoryBind*    pBinds;
} VkSparseImageMemoryBindInfo;</code></pre>
</div>
</div>
</div>
<div class="sect3">
<h4 id="_members_383">Members</h4>
<div class="ulist">
<ul>
<li>
<p><code>image</code> is the <a href="#VkImage">VkImage</a> object to be bound</p>
</li>
<li>
<p><code>bindCount</code> is the number of <a href="#VkSparseImageMemoryBind">VkSparseImageMemoryBind</a>
structures in <code>pBinds</code> array</p>
</li>
<li>
<p><code>pBinds</code> is a pointer to array of <a href="#VkSparseImageMemoryBind">VkSparseImageMemoryBind</a>
structures</p>
</li>
</ul>
</div>
</div>
<div class="sect3">
<h4 id="_description_746">Description</h4>
<div class="sidebarblock">
<div class="content">
<div class="title">Valid Usage</div>
<div class="ulist">
<ul>
<li>
<p><a id="VUID-VkSparseImageMemoryBindInfo-subresource-01722"></a>
The <code>subresource.mipLevel</code> member of each element of <code>pBinds</code>
<strong class="purple">must</strong> be less than the <code>mipLevels</code> specified in
<a href="#VkImageCreateInfo">VkImageCreateInfo</a> when <code>image</code> was created</p>
</li>
<li>
<p><a id="VUID-VkSparseImageMemoryBindInfo-subresource-01723"></a>
The <code>subresource.arrayLayer</code> member of each element of <code>pBinds</code>
<strong class="purple">must</strong> be less than the <code>arrayLayers</code> specified in
<a href="#VkImageCreateInfo">VkImageCreateInfo</a> when <code>image</code> was created</p>
</li>
</ul>
</div>
</div>
</div>
<div class="sidebarblock">
<div class="content">
<div class="title">Valid Usage (Implicit)</div>
<div class="ulist">
<ul>
<li>
<p><a id="VUID-VkSparseImageMemoryBindInfo-image-parameter"></a> <code>image</code> <strong class="purple">must</strong> be a valid <code>VkImage</code> handle</p>
</li>
<li>
<p><a id="VUID-VkSparseImageMemoryBindInfo-pBinds-parameter"></a> <code>pBinds</code> <strong class="purple">must</strong> be a valid pointer to an array of <code>bindCount</code> valid <code>VkSparseImageMemoryBind</code> structures</p>
</li>
<li>
<p><a id="VUID-VkSparseImageMemoryBindInfo-bindCount-arraylength"></a> <code>bindCount</code> <strong class="purple">must</strong> be greater than <code>0</code></p>
</li>
</ul>
</div>
</div>
</div>
</div>
<div class="sect3">
<h4 id="_see_also_746">See Also</h4>
<div class="paragraph">
<p><a href="#VkBindSparseInfo">VkBindSparseInfo</a>, <a href="#VkImage">VkImage</a>, <a href="#VkSparseImageMemoryBind">VkSparseImageMemoryBind</a></p>
</div>
</div>
<div class="sect3">
<h4 id="_document_notes_746">Document Notes</h4>
<div class="paragraph">
<p>For more information, see the Vulkan Specification at URL</p>
</div>
<div class="paragraph">
<p><a href="https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VkSparseImageMemoryBindInfo" class="bare">https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VkSparseImageMemoryBindInfo</a></p>
</div>
<div class="paragraph">
<p>This page is extracted from the Vulkan Specification.
Fixes and changes should be made to the Specification, not directly.</p>
</div>
<div style="page-break-after: always;"></div>
</div>
</div>
<div class="sect2">
<h3 id="_vksparseimagememoryrequirements3">VkSparseImageMemoryRequirements(3)</h3>
<div class="sect3">
<h4 id="_name_747">Name</h4>
<div class="paragraph">
<p>VkSparseImageMemoryRequirements - Structure specifying sparse image memory requirements</p>
</div>
</div>
<div class="sect3">
<h4 id="_c_specification_747">C Specification</h4>
<div class="paragraph">
<p>The <code>VkSparseImageMemoryRequirements</code> structure is defined as:</p>
</div>
<div id="VkSparseImageMemoryRequirements" class="listingblock">
<div class="content">
<pre class="highlight"><code class="language-c++" data-lang="c++">typedef struct VkSparseImageMemoryRequirements {
    VkSparseImageFormatProperties    formatProperties;
    uint32_t                         imageMipTailFirstLod;
    VkDeviceSize                     imageMipTailSize;
    VkDeviceSize                     imageMipTailOffset;
    VkDeviceSize                     imageMipTailStride;
} VkSparseImageMemoryRequirements;</code></pre>
</div>
</div>
</div>
<div class="sect3">
<h4 id="_members_384">Members</h4>
<div class="ulist">
<ul>
<li>
<p><code>formatProperties.aspectMask</code> is the set of aspects of the image
that this sparse memory requirement applies to.
This will usually have a single aspect specified.
However, depth/stencil images <strong class="purple">may</strong> have depth and stencil data
interleaved in the same sparse block, in which case both
<code>VK_IMAGE_ASPECT_DEPTH_BIT</code> and <code>VK_IMAGE_ASPECT_STENCIL_BIT</code>
would be present.</p>
</li>
<li>
<p><code>formatProperties.imageGranularity</code> describes the dimensions of a
single bindable sparse image block in texel units.
For aspect <code>VK_IMAGE_ASPECT_METADATA_BIT</code>, all dimensions will be
zero.
All metadata is located in the mip tail region.</p>
</li>
<li>
<p><code>formatProperties.flags</code> is a bitmask of
<a href="#VkSparseImageFormatFlagBits">VkSparseImageFormatFlagBits</a>:</p>
<div class="ulist">
<ul>
<li>
<p>If <code>VK_SPARSE_IMAGE_FORMAT_SINGLE_MIPTAIL_BIT</code> is set the image
uses a single mip tail region for all array layers.</p>
</li>
<li>
<p>If <code>VK_SPARSE_IMAGE_FORMAT_ALIGNED_MIP_SIZE_BIT</code> is set the
dimensions of mip levels <strong class="purple">must</strong> be integer multiples of the
corresponding dimensions of the sparse image block for levels not
located in the mip tail.</p>
</li>
<li>
<p>If <code>VK_SPARSE_IMAGE_FORMAT_NONSTANDARD_BLOCK_SIZE_BIT</code> is set the
image uses non-standard sparse image block dimensions.
The <code>formatProperties.imageGranularity</code> values do not match the
standard sparse image block dimension corresponding to the image&#8217;s
format.</p>
</li>
</ul>
</div>
</li>
<li>
<p><code>imageMipTailFirstLod</code> is the first mip level at which image
subresources are included in the mip tail region.</p>
</li>
<li>
<p><code>imageMipTailSize</code> is the memory size (in bytes) of the mip tail
region.
If <code>formatProperties.flags</code> contains
<code>VK_SPARSE_IMAGE_FORMAT_SINGLE_MIPTAIL_BIT</code>, this is the size of the
whole mip tail, otherwise this is the size of the mip tail of a single
array layer.
This value is guaranteed to be a multiple of the sparse block size in
bytes.</p>
</li>
<li>
<p><code>imageMipTailOffset</code> is the opaque memory offset used with
<a href="#VkSparseImageOpaqueMemoryBindInfo">VkSparseImageOpaqueMemoryBindInfo</a> to bind the mip tail region(s).</p>
</li>
<li>
<p><code>imageMipTailStride</code> is the offset stride between each array-layer&#8217;s
mip tail, if <code>formatProperties.flags</code> does not contain
<code>VK_SPARSE_IMAGE_FORMAT_SINGLE_MIPTAIL_BIT</code> (otherwise the value is
undefined).</p>
</li>
</ul>
</div>
</div>
<div class="sect3">
<h4 id="_description_747">Description</h4>

</div>
<div class="sect3">
<h4 id="_see_also_747">See Also</h4>
<div class="paragraph">
<p><code>VkDeviceSize</code>, <a href="#VkSparseImageFormatProperties">VkSparseImageFormatProperties</a>, <a href="#VkSparseImageMemoryRequirements2">VkSparseImageMemoryRequirements2</a>, <a href="#vkGetImageSparseMemoryRequirements">vkGetImageSparseMemoryRequirements</a></p>
</div>
</div>
<div class="sect3">
<h4 id="_document_notes_747">Document Notes</h4>
<div class="paragraph">
<p>For more information, see the Vulkan Specification at URL</p>
</div>
<div class="paragraph">
<p><a href="https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VkSparseImageMemoryRequirements" class="bare">https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VkSparseImageMemoryRequirements</a></p>
</div>
<div class="paragraph">
<p>This page is extracted from the Vulkan Specification.
Fixes and changes should be made to the Specification, not directly.</p>
</div>
<div style="page-break-after: always;"></div>
</div>
</div>
<div class="sect2">
<h3 id="_vksparseimagememoryrequirements23">VkSparseImageMemoryRequirements2(3)</h3>
<div class="sect3">
<h4 id="_name_748">Name</h4>
<div class="paragraph">
<p>VkSparseImageMemoryRequirements2 - (None)</p>
</div>
</div>
<div class="sect3">
<h4 id="_c_specification_748">C Specification</h4>
<div class="paragraph">
<p>The <code>VkSparseImageMemoryRequirements2</code> structure is defined as:</p>
</div>
<div id="VkSparseImageMemoryRequirements2" class="listingblock">
<div class="content">
<pre class="highlight"><code class="language-c++" data-lang="c++">typedef struct VkSparseImageMemoryRequirements2 {
    VkStructureType                    sType;
    void*                              pNext;
    VkSparseImageMemoryRequirements    memoryRequirements;
} VkSparseImageMemoryRequirements2;</code></pre>
</div>
</div>
<div class="paragraph">
<p>or the equivalent</p>
</div>
<div id="VkSparseImageMemoryRequirements2KHR" class="listingblock">
<div class="content">
<pre class="highlight"><code class="language-c++" data-lang="c++">typedef VkSparseImageMemoryRequirements2 VkSparseImageMemoryRequirements2KHR;</code></pre>
</div>
</div>
</div>
<div class="sect3">
<h4 id="_members_385">Members</h4>
<div class="ulist">
<ul>
<li>
<p><code>sType</code> is the type of this structure.</p>
</li>
<li>
<p><code>pNext</code> is <code>NULL</code> or a pointer to an extension-specific structure.</p>
</li>
<li>
<p><code>memoryRequirements</code> is a structure of type
<a href="#VkSparseImageMemoryRequirements">VkSparseImageMemoryRequirements</a> describing the memory requirements
of the sparse image.</p>
</li>
</ul>
</div>
</div>
<div class="sect3">
<h4 id="_description_748">Description</h4>
<div class="sidebarblock">
<div class="content">
<div class="title">Valid Usage (Implicit)</div>
<div class="ulist">
<ul>
<li>
<p><a id="VUID-VkSparseImageMemoryRequirements2-sType-sType"></a> <code>sType</code> <strong class="purple">must</strong> be <code>VK_STRUCTURE_TYPE_SPARSE_IMAGE_MEMORY_REQUIREMENTS_2</code></p>
</li>
<li>
<p><a id="VUID-VkSparseImageMemoryRequirements2-pNext-pNext"></a> <code>pNext</code> <strong class="purple">must</strong> be <code>NULL</code></p>
</li>
</ul>
</div>
</div>
</div>
</div>
<div class="sect3">
<h4 id="_see_also_748">See Also</h4>
<div class="paragraph">
<p><a href="#VkSparseImageMemoryRequirements">VkSparseImageMemoryRequirements</a>, <a href="#VkStructureType">VkStructureType</a>, <a href="#vkGetImageSparseMemoryRequirements2">vkGetImageSparseMemoryRequirements2</a>, <a href="#vkGetImageSparseMemoryRequirements2KHR">vkGetImageSparseMemoryRequirements2KHR</a></p>
</div>
</div>
<div class="sect3">
<h4 id="_document_notes_748">Document Notes</h4>
<div class="paragraph">
<p>For more information, see the Vulkan Specification at URL</p>
</div>
<div class="paragraph">
<p><a href="https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VkSparseImageMemoryRequirements2" class="bare">https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VkSparseImageMemoryRequirements2</a></p>
</div>
<div class="paragraph">
<p>This page is extracted from the Vulkan Specification.
Fixes and changes should be made to the Specification, not directly.</p>
</div>
<div style="page-break-after: always;"></div>
</div>
</div>
<div class="sect2">
<h3 id="_vksparseimageopaquememorybindinfo3">VkSparseImageOpaqueMemoryBindInfo(3)</h3>
<div class="sect3">
<h4 id="_name_749">Name</h4>
<div class="paragraph">
<p>VkSparseImageOpaqueMemoryBindInfo - Structure specifying sparse image opaque memory bind info</p>
</div>
</div>
<div class="sect3">
<h4 id="_c_specification_749">C Specification</h4>
<div class="paragraph">
<p>Memory is bound to opaque regions of <code>VkImage</code> objects created with the
<code>VK_IMAGE_CREATE_SPARSE_BINDING_BIT</code> flag using the following structure:</p>
</div>
<div id="VkSparseImageOpaqueMemoryBindInfo" class="listingblock">
<div class="content">
<pre class="highlight"><code class="language-c++" data-lang="c++">typedef struct VkSparseImageOpaqueMemoryBindInfo {
    VkImage                      image;
    uint32_t                     bindCount;
    const VkSparseMemoryBind*    pBinds;
} VkSparseImageOpaqueMemoryBindInfo;</code></pre>
</div>
</div>
</div>
<div class="sect3">
<h4 id="_members_386">Members</h4>
<div class="ulist">
<ul>
<li>
<p><code>image</code> is the <a href="#VkImage">VkImage</a> object to be bound.</p>
</li>
<li>
<p><code>bindCount</code> is the number of <a href="#VkSparseMemoryBind">VkSparseMemoryBind</a> structures in
the <code>pBinds</code> array.</p>
</li>
<li>
<p><code>pBinds</code> is a pointer to array of <a href="#VkSparseMemoryBind">VkSparseMemoryBind</a>
structures.</p>
</li>
</ul>
</div>
</div>
<div class="sect3">
<h4 id="_description_749">Description</h4>
<div class="sidebarblock">
<div class="content">
<div class="title">Valid Usage</div>
<div class="ulist">
<ul>
<li>
<p><a id="VUID-VkSparseImageOpaqueMemoryBindInfo-pBinds-01103"></a>
If the <code>flags</code> member of any element of <code>pBinds</code> contains
<code>VK_SPARSE_MEMORY_BIND_METADATA_BIT</code>, the binding range defined
<strong class="purple">must</strong> be within the mip tail region of the metadata aspect of
<code>image</code></p>
</li>
</ul>
</div>
</div>
</div>
<div class="sidebarblock">
<div class="content">
<div class="title">Valid Usage (Implicit)</div>
<div class="ulist">
<ul>
<li>
<p><a id="VUID-VkSparseImageOpaqueMemoryBindInfo-image-parameter"></a> <code>image</code> <strong class="purple">must</strong> be a valid <code>VkImage</code> handle</p>
</li>
<li>
<p><a id="VUID-VkSparseImageOpaqueMemoryBindInfo-pBinds-parameter"></a> <code>pBinds</code> <strong class="purple">must</strong> be a valid pointer to an array of <code>bindCount</code> valid <code>VkSparseMemoryBind</code> structures</p>
</li>
<li>
<p><a id="VUID-VkSparseImageOpaqueMemoryBindInfo-bindCount-arraylength"></a> <code>bindCount</code> <strong class="purple">must</strong> be greater than <code>0</code></p>
</li>
</ul>
</div>
</div>
</div>
</div>
<div class="sect3">
<h4 id="_see_also_749">See Also</h4>
<div class="paragraph">
<p><a href="#VkBindSparseInfo">VkBindSparseInfo</a>, <a href="#VkImage">VkImage</a>, <a href="#VkSparseMemoryBind">VkSparseMemoryBind</a></p>
</div>
</div>
<div class="sect3">
<h4 id="_document_notes_749">Document Notes</h4>
<div class="paragraph">
<p>For more information, see the Vulkan Specification at URL</p>
</div>
<div class="paragraph">
<p><a href="https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VkSparseImageOpaqueMemoryBindInfo" class="bare">https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VkSparseImageOpaqueMemoryBindInfo</a></p>
</div>
<div class="paragraph">
<p>This page is extracted from the Vulkan Specification.
Fixes and changes should be made to the Specification, not directly.</p>
</div>
<div style="page-break-after: always;"></div>
</div>
</div>
<div class="sect2">
<h3 id="_vksparsememorybind3">VkSparseMemoryBind(3)</h3>
<div class="sect3">
<h4 id="_name_750">Name</h4>
<div class="paragraph">
<p>VkSparseMemoryBind - Structure specifying a sparse memory bind operation</p>
</div>
</div>
<div class="sect3">
<h4 id="_c_specification_750">C Specification</h4>
<div class="paragraph">
<p>The <code>VkSparseMemoryBind</code> structure is defined as:</p>
</div>
<div id="VkSparseMemoryBind" class="listingblock">
<div class="content">
<pre class="highlight"><code class="language-c++" data-lang="c++">typedef struct VkSparseMemoryBind {
    VkDeviceSize               resourceOffset;
    VkDeviceSize               size;
    VkDeviceMemory             memory;
    VkDeviceSize               memoryOffset;
    VkSparseMemoryBindFlags    flags;
} VkSparseMemoryBind;</code></pre>
</div>
</div>
</div>
<div class="sect3">
<h4 id="_members_387">Members</h4>
<div class="ulist">
<ul>
<li>
<p><code>resourceOffset</code> is the offset into the resource.</p>
</li>
<li>
<p><code>size</code> is the size of the memory region to be bound.</p>
</li>
<li>
<p><code>memory</code> is the <a href="#VkDeviceMemory">VkDeviceMemory</a> object that the range of the
resource is bound to.
If <code>memory</code> is <a href="#VK_NULL_HANDLE">VK_NULL_HANDLE</a>, the range is unbound.</p>
</li>
<li>
<p><code>memoryOffset</code> is the offset into the <a href="#VkDeviceMemory">VkDeviceMemory</a> object to
bind the resource range to.
If <code>memory</code> is <a href="#VK_NULL_HANDLE">VK_NULL_HANDLE</a>, this value is ignored.</p>
</li>
<li>
<p><code>flags</code> is a bitmask of <a href="#VkSparseMemoryBindFlagBits">VkSparseMemoryBindFlagBits</a> specifying
usage of the binding operation.</p>
</li>
</ul>
</div>
</div>
<div class="sect3">
<h4 id="_description_750">Description</h4>
<div class="paragraph">
<p>The <em>binding range</em> <span class="eq">[<code>resourceOffset</code>, <code>resourceOffset</code> + 
<code>size</code>)</span> has different constraints based on <code>flags</code>.
If <code>flags</code> contains <code>VK_SPARSE_MEMORY_BIND_METADATA_BIT</code>, the
binding range <strong class="purple">must</strong> be within the mip tail region of the metadata aspect.
This metadata region is defined by:</p>
</div>
<div class="literalblock">
<div class="content">
<pre>:: [eq]#metadataRegion = [base, base {plus} pname:imageMipTailSize)#
:: [eq]#base = pname:imageMipTailOffset {plus} pname:imageMipTailStride
   {times} n#</pre>
</div>
</div>
<div class="paragraph">
<p>and <code>imageMipTailOffset</code>, <code>imageMipTailSize</code>, and
<code>imageMipTailStride</code> values are from the
<a href="#VkSparseImageMemoryRequirements">VkSparseImageMemoryRequirements</a> corresponding to the metadata aspect
of the image, and <span class="eq">n</span> is a valid array layer index for the image,</p>
</div>
<div class="paragraph">
<p><code>imageMipTailStride</code> is considered to be zero for aspects where
<code>VkSparseImageMemoryRequirements</code>::<code>formatProperties.flags</code> contains
<code>VK_SPARSE_IMAGE_FORMAT_SINGLE_MIPTAIL_BIT</code>.</p>
</div>
<div class="paragraph">
<p>If <code>flags</code> does not contain <code>VK_SPARSE_MEMORY_BIND_METADATA_BIT</code>,
the binding range <strong class="purple">must</strong> be within the range
<span class="eq">[0,<a href="#VkMemoryRequirements">VkMemoryRequirements</a>::<code>size</code>)</span>.</p>
</div>
<div class="sidebarblock">
<div class="content">
<div class="title">Valid Usage</div>
<div class="ulist">
<ul>
<li>
<p><a id="VUID-VkSparseMemoryBind-memory-01096"></a>
If <code>memory</code> is not <a href="#VK_NULL_HANDLE">VK_NULL_HANDLE</a>, <code>memory</code> and
<code>memoryOffset</code> <strong class="purple">must</strong> match the memory requirements of the resource,
as described in section <a href="vkspec.html#resources-association" class="bare">html/vkspec.html#resources-association</a></p>
</li>
<li>
<p><a id="VUID-VkSparseMemoryBind-memory-01097"></a>
If <code>memory</code> is not <a href="#VK_NULL_HANDLE">VK_NULL_HANDLE</a>, <code>memory</code> <strong class="purple">must</strong> not have
been created with a memory type that reports
<code>VK_MEMORY_PROPERTY_LAZILY_ALLOCATED_BIT</code> bit set</p>
</li>
<li>
<p><a id="VUID-VkSparseMemoryBind-size-01098"></a>
<code>size</code> <strong class="purple">must</strong> be greater than <code>0</code></p>
</li>
<li>
<p><a id="VUID-VkSparseMemoryBind-resourceOffset-01099"></a>
<code>resourceOffset</code> <strong class="purple">must</strong> be less than the size of the resource</p>
</li>
<li>
<p><a id="VUID-VkSparseMemoryBind-size-01100"></a>
<code>size</code> <strong class="purple">must</strong> be less than or equal to the size of the resource minus
<code>resourceOffset</code></p>
</li>
<li>
<p><a id="VUID-VkSparseMemoryBind-memoryOffset-01101"></a>
<code>memoryOffset</code> <strong class="purple">must</strong> be less than the size of <code>memory</code></p>
</li>
<li>
<p><a id="VUID-VkSparseMemoryBind-size-01102"></a>
<code>size</code> <strong class="purple">must</strong> be less than or equal to the size of <code>memory</code> minus
<code>memoryOffset</code></p>
</li>
</ul>
</div>
</div>
</div>
<div class="sidebarblock">
<div class="content">
<div class="title">Valid Usage (Implicit)</div>
<div class="ulist">
<ul>
<li>
<p><a id="VUID-VkSparseMemoryBind-memory-parameter"></a> If <code>memory</code> is not <a href="#VK_NULL_HANDLE">VK_NULL_HANDLE</a>, <code>memory</code> <strong class="purple">must</strong> be a valid <code>VkDeviceMemory</code> handle</p>
</li>
<li>
<p><a id="VUID-VkSparseMemoryBind-flags-parameter"></a> <code>flags</code> <strong class="purple">must</strong> be a valid combination of <a href="#VkSparseMemoryBindFlagBits">VkSparseMemoryBindFlagBits</a> values</p>
</li>
</ul>
</div>
</div>
</div>
</div>
<div class="sect3">
<h4 id="_see_also_750">See Also</h4>
<div class="paragraph">
<p><a href="#VkDeviceMemory">VkDeviceMemory</a>, <code>VkDeviceSize</code>, <a href="#VkSparseBufferMemoryBindInfo">VkSparseBufferMemoryBindInfo</a>, <a href="#VkSparseImageOpaqueMemoryBindInfo">VkSparseImageOpaqueMemoryBindInfo</a>, <a href="#VkSparseMemoryBindFlags">VkSparseMemoryBindFlags</a></p>
</div>
</div>
<div class="sect3">
<h4 id="_document_notes_750">Document Notes</h4>
<div class="paragraph">
<p>For more information, see the Vulkan Specification at URL</p>
</div>
<div class="paragraph">
<p><a href="https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VkSparseMemoryBind" class="bare">https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VkSparseMemoryBind</a></p>
</div>
<div class="paragraph">
<p>This page is extracted from the Vulkan Specification.
Fixes and changes should be made to the Specification, not directly.</p>
</div>
<div style="page-break-after: always;"></div>
</div>
</div>
<div class="sect2">
<h3 id="_vkspecializationinfo3">VkSpecializationInfo(3)</h3>
<div class="sect3">
<h4 id="_name_751">Name</h4>
<div class="paragraph">
<p>VkSpecializationInfo - Structure specifying specialization info</p>
</div>
</div>
<div class="sect3">
<h4 id="_c_specification_751">C Specification</h4>
<div class="paragraph">
<p>The <code>VkSpecializationInfo</code> structure is defined as:</p>
</div>
<div id="VkSpecializationInfo" class="listingblock">
<div class="content">
<pre class="highlight"><code class="language-c++" data-lang="c++">typedef struct VkSpecializationInfo {
    uint32_t                           mapEntryCount;
    const VkSpecializationMapEntry*    pMapEntries;
    size_t                             dataSize;
    const void*                        pData;
} VkSpecializationInfo;</code></pre>
</div>
</div>
</div>
<div class="sect3">
<h4 id="_members_388">Members</h4>
<div class="ulist">
<ul>
<li>
<p><code>mapEntryCount</code> is the number of entries in the <code>pMapEntries</code>
array.</p>
</li>
<li>
<p><code>pMapEntries</code> is a pointer to an array of
<code>VkSpecializationMapEntry</code> which maps constant IDs to offsets in
<code>pData</code>.</p>
</li>
<li>
<p><code>dataSize</code> is the byte size of the <code>pData</code> buffer.</p>
</li>
<li>
<p><code>pData</code> contains the actual constant values to specialize with.</p>
</li>
</ul>
</div>
</div>
<div class="sect3">
<h4 id="_description_751">Description</h4>
<div class="paragraph">
<p><code>pMapEntries</code> points to a structure of type
<a href="#VkSpecializationMapEntry">VkSpecializationMapEntry</a>.</p>
</div>
<div class="sidebarblock">
<div class="content">
<div class="title">Valid Usage</div>
<div class="ulist">
<ul>
<li>
<p><a id="VUID-VkSpecializationInfo-offset-00773"></a>
The <code>offset</code> member of each element of <code>pMapEntries</code> <strong class="purple">must</strong> be
less than <code>dataSize</code></p>
</li>
<li>
<p><a id="VUID-VkSpecializationInfo-pMapEntries-00774"></a>
The <code>size</code> member of each element of <code>pMapEntries</code> <strong class="purple">must</strong> be less
than or equal to <code>dataSize</code> minus <code>offset</code></p>
</li>
</ul>
</div>
</div>
</div>
<div class="sidebarblock">
<div class="content">
<div class="title">Valid Usage (Implicit)</div>
<div class="ulist">
<ul>
<li>
<p><a id="VUID-VkSpecializationInfo-pMapEntries-parameter"></a> If <code>mapEntryCount</code> is not <code>0</code>, <code>pMapEntries</code> <strong class="purple">must</strong> be a valid pointer to an array of <code>mapEntryCount</code> valid <code>VkSpecializationMapEntry</code> structures</p>
</li>
<li>
<p><a id="VUID-VkSpecializationInfo-pData-parameter"></a> If <code>dataSize</code> is not <code>0</code>, <code>pData</code> <strong class="purple">must</strong> be a valid pointer to an array of <code>dataSize</code> bytes</p>
</li>
</ul>
</div>
</div>
</div>
</div>
<div class="sect3">
<h4 id="_see_also_751">See Also</h4>
<div class="paragraph">
<p><a href="#VkPipelineShaderStageCreateInfo">VkPipelineShaderStageCreateInfo</a>, <a href="#VkSpecializationMapEntry">VkSpecializationMapEntry</a></p>
</div>
</div>
<div class="sect3">
<h4 id="_document_notes_751">Document Notes</h4>
<div class="paragraph">
<p>For more information, see the Vulkan Specification at URL</p>
</div>
<div class="paragraph">
<p><a href="https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VkSpecializationInfo" class="bare">https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VkSpecializationInfo</a></p>
</div>
<div class="paragraph">
<p>This page is extracted from the Vulkan Specification.
Fixes and changes should be made to the Specification, not directly.</p>
</div>
<div style="page-break-after: always;"></div>
</div>
</div>
<div class="sect2">
<h3 id="_vkspecializationmapentry3">VkSpecializationMapEntry(3)</h3>
<div class="sect3">
<h4 id="_name_752">Name</h4>
<div class="paragraph">
<p>VkSpecializationMapEntry - Structure specifying a specialization map entry</p>
</div>
</div>
<div class="sect3">
<h4 id="_c_specification_752">C Specification</h4>
<div class="paragraph">
<p>The <code>VkSpecializationMapEntry</code> structure is defined as:</p>
</div>
<div id="VkSpecializationMapEntry" class="listingblock">
<div class="content">
<pre class="highlight"><code class="language-c++" data-lang="c++">typedef struct VkSpecializationMapEntry {
    uint32_t    constantID;
    uint32_t    offset;
    size_t      size;
} VkSpecializationMapEntry;</code></pre>
</div>
</div>
</div>
<div class="sect3">
<h4 id="_members_389">Members</h4>
<div class="ulist">
<ul>
<li>
<p><code>constantID</code> is the ID of the specialization constant in SPIR-V.</p>
</li>
<li>
<p><code>offset</code> is the byte offset of the specialization constant value
within the supplied data buffer.</p>
</li>
<li>
<p><code>size</code> is the byte size of the specialization constant value within
the supplied data buffer.</p>
</li>
</ul>
</div>
</div>
<div class="sect3">
<h4 id="_description_752">Description</h4>
<div class="paragraph">
<p>If a <code>constantID</code> value is not a specialization constant ID used in the
shader, that map entry does not affect the behavior of the pipeline.</p>
</div>
<div class="sidebarblock">
<div class="content">
<div class="title">Valid Usage</div>
<div class="ulist">
<ul>
<li>
<p><a id="VUID-VkSpecializationMapEntry-constantID-00776"></a>
For a <code>constantID</code> specialization constant declared in a shader,
<code>size</code> <strong class="purple">must</strong> match the byte size of the <code>constantID</code>.
If the specialization constant is of type <code>boolean</code>, <code>size</code> <strong class="purple">must</strong>
be the byte size of <code>VkBool32</code></p>
</li>
</ul>
</div>
</div>
</div>
</div>
<div class="sect3">
<h4 id="_see_also_752">See Also</h4>
<div class="paragraph">
<p><a href="#VkSpecializationInfo">VkSpecializationInfo</a></p>
</div>
</div>
<div class="sect3">
<h4 id="_document_notes_752">Document Notes</h4>
<div class="paragraph">
<p>For more information, see the Vulkan Specification at URL</p>
</div>
<div class="paragraph">
<p><a href="https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VkSpecializationMapEntry" class="bare">https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VkSpecializationMapEntry</a></p>
</div>
<div class="paragraph">
<p>This page is extracted from the Vulkan Specification.
Fixes and changes should be made to the Specification, not directly.</p>
</div>
<div style="page-break-after: always;"></div>
</div>
</div>
<div class="sect2">
<h3 id="_vkstencilopstate3">VkStencilOpState(3)</h3>
<div class="sect3">
<h4 id="_name_753">Name</h4>
<div class="paragraph">
<p>VkStencilOpState - Structure specifying stencil operation state</p>
</div>
</div>
<div class="sect3">
<h4 id="_c_specification_753">C Specification</h4>
<div class="paragraph">
<p>The <code>VkStencilOpState</code> structure is defined as:</p>
</div>
<div id="VkStencilOpState" class="listingblock">
<div class="content">
<pre class="highlight"><code class="language-c++" data-lang="c++">typedef struct VkStencilOpState {
    VkStencilOp    failOp;
    VkStencilOp    passOp;
    VkStencilOp    depthFailOp;
    VkCompareOp    compareOp;
    uint32_t       compareMask;
    uint32_t       writeMask;
    uint32_t       reference;
} VkStencilOpState;</code></pre>
</div>
</div>
</div>
<div class="sect3">
<h4 id="_members_390">Members</h4>
<div class="ulist">
<ul>
<li>
<p><code>failOp</code> is a <a href="#VkStencilOp">VkStencilOp</a> value specifying the action
performed on samples that fail the stencil test.</p>
</li>
<li>
<p><code>passOp</code> is a <a href="#VkStencilOp">VkStencilOp</a> value specifying the action
performed on samples that pass both the depth and stencil tests.</p>
</li>
<li>
<p><code>depthFailOp</code> is a <a href="#VkStencilOp">VkStencilOp</a> value specifying the action
performed on samples that pass the stencil test and fail the depth test.</p>
</li>
<li>
<p><code>compareOp</code> is a <a href="#VkCompareOp">VkCompareOp</a> value specifying the comparison
operator used in the stencil test.</p>
</li>
<li>
<p><code>compareMask</code> selects the bits of the unsigned integer stencil
values participating in the stencil test.</p>
</li>
<li>
<p><code>writeMask</code> selects the bits of the unsigned integer stencil values
updated by the stencil test in the stencil framebuffer attachment.</p>
</li>
<li>
<p><code>reference</code> is an integer reference value that is used in the
unsigned stencil comparison.</p>
</li>
</ul>
</div>
</div>
<div class="sect3">
<h4 id="_description_753">Description</h4>
<div class="sidebarblock">
<div class="content">
<div class="title">Valid Usage (Implicit)</div>
<div class="ulist">
<ul>
<li>
<p><a id="VUID-VkStencilOpState-failOp-parameter"></a> <code>failOp</code> <strong class="purple">must</strong> be a valid <a href="#VkStencilOp">VkStencilOp</a> value</p>
</li>
<li>
<p><a id="VUID-VkStencilOpState-passOp-parameter"></a> <code>passOp</code> <strong class="purple">must</strong> be a valid <a href="#VkStencilOp">VkStencilOp</a> value</p>
</li>
<li>
<p><a id="VUID-VkStencilOpState-depthFailOp-parameter"></a> <code>depthFailOp</code> <strong class="purple">must</strong> be a valid <a href="#VkStencilOp">VkStencilOp</a> value</p>
</li>
<li>
<p><a id="VUID-VkStencilOpState-compareOp-parameter"></a> <code>compareOp</code> <strong class="purple">must</strong> be a valid <a href="#VkCompareOp">VkCompareOp</a> value</p>
</li>
</ul>
</div>
</div>
</div>
</div>
<div class="sect3">
<h4 id="_see_also_753">See Also</h4>
<div class="paragraph">
<p><a href="#VkCompareOp">VkCompareOp</a>, <a href="#VkPipelineDepthStencilStateCreateInfo">VkPipelineDepthStencilStateCreateInfo</a>, <a href="#VkStencilOp">VkStencilOp</a></p>
</div>
</div>
<div class="sect3">
<h4 id="_document_notes_753">Document Notes</h4>
<div class="paragraph">
<p>For more information, see the Vulkan Specification at URL</p>
</div>
<div class="paragraph">
<p><a href="https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VkStencilOpState" class="bare">https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VkStencilOpState</a></p>
</div>
<div class="paragraph">
<p>This page is extracted from the Vulkan Specification.
Fixes and changes should be made to the Specification, not directly.</p>
</div>
<div style="page-break-after: always;"></div>
</div>
</div>
<div class="sect2">
<h3 id="_vkstreamdescriptorsurfacecreateinfoggp3">VkStreamDescriptorSurfaceCreateInfoGGP(3)</h3>
<div class="sect3">
<h4 id="_name_754">Name</h4>
<div class="paragraph">
<p>VkStreamDescriptorSurfaceCreateInfoGGP - Structure specifying parameters of a newly created Google Games Platform stream surface object</p>
</div>
</div>
<div class="sect3">
<h4 id="_c_specification_754">C Specification</h4>
<div class="paragraph">
<p>The <code>VkStreamDescriptorSurfaceCreateInfoGGP</code> structure is defined as:</p>
</div>
<div id="VkStreamDescriptorSurfaceCreateInfoGGP" class="listingblock">
<div class="content">
<pre class="highlight"><code class="language-c++" data-lang="c++">typedef struct VkStreamDescriptorSurfaceCreateInfoGGP {
    VkStructureType                            sType;
    const void*                                pNext;
    VkStreamDescriptorSurfaceCreateFlagsGGP    flags;
    GgpStreamDescriptor                        streamDescriptor;
} VkStreamDescriptorSurfaceCreateInfoGGP;</code></pre>
</div>
</div>
</div>
<div class="sect3">
<h4 id="_members_391">Members</h4>
<div class="ulist">
<ul>
<li>
<p><code>sType</code> is the type of this structure.</p>
</li>
<li>
<p><code>pNext</code> is <code>NULL</code> or a pointer to an extension-specific structure.</p>
</li>
<li>
<p><code>flags</code> is reserved for future use.</p>
</li>
<li>
<p><code>streamDescriptor</code> is a <code>GgpStreamDescriptor</code> referring to the
GGP stream descriptor to associate with the surface.</p>
</li>
</ul>
</div>
</div>
<div class="sect3">
<h4 id="_description_754">Description</h4>
<div class="sidebarblock">
<div class="content">
<div class="title">Valid Usage</div>
<div class="ulist">
<ul>
<li>
<p><a id="VUID-VkStreamDescriptorSurfaceCreateInfoGGP-streamDescriptor-02681"></a>
<code>streamDescriptor</code> <strong class="purple">must</strong> be a valid <code>GgpStreamDescriptor</code></p>
</li>
</ul>
</div>
</div>
</div>
<div class="sidebarblock">
<div class="content">
<div class="title">Valid Usage (Implicit)</div>
<div class="ulist">
<ul>
<li>
<p><a id="VUID-VkStreamDescriptorSurfaceCreateInfoGGP-sType-sType"></a> <code>sType</code> <strong class="purple">must</strong> be <code>VK_STRUCTURE_TYPE_STREAM_DESCRIPTOR_SURFACE_CREATE_INFO_GGP</code></p>
</li>
<li>
<p><a id="VUID-VkStreamDescriptorSurfaceCreateInfoGGP-pNext-pNext"></a> <code>pNext</code> <strong class="purple">must</strong> be <code>NULL</code></p>
</li>
<li>
<p><a id="VUID-VkStreamDescriptorSurfaceCreateInfoGGP-flags-zerobitmask"></a> <code>flags</code> <strong class="purple">must</strong> be <code>0</code></p>
</li>
</ul>
</div>
</div>
</div>
</div>
<div class="sect3">
<h4 id="_see_also_754">See Also</h4>
<div class="paragraph">
<p><a href="#VkStreamDescriptorSurfaceCreateFlagsGGP">VkStreamDescriptorSurfaceCreateFlagsGGP</a>, <a href="#VkStructureType">VkStructureType</a>, <a href="#vkCreateStreamDescriptorSurfaceGGP">vkCreateStreamDescriptorSurfaceGGP</a></p>
</div>
</div>
<div class="sect3">
<h4 id="_document_notes_754">Document Notes</h4>
<div class="paragraph">
<p>For more information, see the Vulkan Specification at URL</p>
</div>
<div class="paragraph">
<p><a href="https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VkStreamDescriptorSurfaceCreateInfoGGP" class="bare">https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VkStreamDescriptorSurfaceCreateInfoGGP</a></p>
</div>
<div class="paragraph">
<p>This page is extracted from the Vulkan Specification.
Fixes and changes should be made to the Specification, not directly.</p>
</div>
<div style="page-break-after: always;"></div>
</div>
</div>
<div class="sect2">
<h3 id="_vksubmitinfo3">VkSubmitInfo(3)</h3>
<div class="sect3">
<h4 id="_name_755">Name</h4>
<div class="paragraph">
<p>VkSubmitInfo - Structure specifying a queue submit operation</p>
</div>
</div>
<div class="sect3">
<h4 id="_c_specification_755">C Specification</h4>
<div class="paragraph">
<p>The <code>VkSubmitInfo</code> structure is defined as:</p>
</div>
<div id="VkSubmitInfo" class="listingblock">
<div class="content">
<pre class="highlight"><code class="language-c++" data-lang="c++">typedef struct VkSubmitInfo {
    VkStructureType                sType;
    const void*                    pNext;
    uint32_t                       waitSemaphoreCount;
    const VkSemaphore*             pWaitSemaphores;
    const VkPipelineStageFlags*    pWaitDstStageMask;
    uint32_t                       commandBufferCount;
    const VkCommandBuffer*         pCommandBuffers;
    uint32_t                       signalSemaphoreCount;
    const VkSemaphore*             pSignalSemaphores;
} VkSubmitInfo;</code></pre>
</div>
</div>
</div>
<div class="sect3">
<h4 id="_members_392">Members</h4>
<div class="ulist">
<ul>
<li>
<p><code>sType</code> is the type of this structure.</p>
</li>
<li>
<p><code>pNext</code> is <code>NULL</code> or a pointer to an extension-specific structure.</p>
</li>
<li>
<p><code>waitSemaphoreCount</code> is the number of semaphores upon which to wait
before executing the command buffers for the batch.</p>
</li>
<li>
<p><code>pWaitSemaphores</code> is a pointer to an array of semaphores upon which
to wait before the command buffers for this batch begin execution.
If semaphores to wait on are provided, they define a
<a href="vkspec.html#synchronization-semaphores-waiting">semaphore wait operation</a>.</p>
</li>
<li>
<p><code>pWaitDstStageMask</code> is a pointer to an array of pipeline stages at
which each corresponding semaphore wait will occur.</p>
</li>
<li>
<p><code>commandBufferCount</code> is the number of command buffers to execute in
the batch.</p>
</li>
<li>
<p><code>pCommandBuffers</code> is a pointer to an array of command buffers to
execute in the batch.</p>
</li>
<li>
<p><code>signalSemaphoreCount</code> is the number of semaphores to be signaled
once the commands specified in <code>pCommandBuffers</code> have completed
execution.</p>
</li>
<li>
<p><code>pSignalSemaphores</code> is a pointer to an array of semaphores which
will be signaled when the command buffers for this batch have completed
execution.
If semaphores to be signaled are provided, they define a
<a href="vkspec.html#synchronization-semaphores-signaling">semaphore signal operation</a>.</p>
</li>
</ul>
</div>
</div>
<div class="sect3">
<h4 id="_description_755">Description</h4>
<div class="paragraph">
<p>The order that command buffers appear in <code>pCommandBuffers</code> is used to
determine <a href="vkspec.html#synchronization-submission-order">submission order</a>, and thus
all the <a href="vkspec.html#synchronization-implicit">implicit ordering guarantees</a> that
respect it.
Other than these implicit ordering guarantees and any <a href="vkspec.html#synchronization">explicit synchronization primitives</a>, these command buffers <strong class="purple">may</strong> overlap or
otherwise execute out of order.</p>
</div>
<div class="sidebarblock">
<div class="content">
<div class="title">Valid Usage</div>
<div class="ulist">
<ul>
<li>
<p><a id="VUID-VkSubmitInfo-pCommandBuffers-00075"></a>
Each element of <code>pCommandBuffers</code> <strong class="purple">must</strong> not have been allocated with
<code>VK_COMMAND_BUFFER_LEVEL_SECONDARY</code></p>
</li>
<li>
<p><a id="VUID-VkSubmitInfo-pWaitDstStageMask-00076"></a>
If the <a href="vkspec.html#features-geometryShader">geometry shaders</a> feature is not
enabled, each element of <code>pWaitDstStageMask</code> <strong class="purple">must</strong> not contain
<code>VK_PIPELINE_STAGE_GEOMETRY_SHADER_BIT</code></p>
</li>
<li>
<p><a id="VUID-VkSubmitInfo-pWaitDstStageMask-00077"></a>
If the <a href="vkspec.html#features-tessellationShader">tessellation shaders</a> feature is
not enabled, each element of <code>pWaitDstStageMask</code> <strong class="purple">must</strong> not contain
<code>VK_PIPELINE_STAGE_TESSELLATION_CONTROL_SHADER_BIT</code> or
<code>VK_PIPELINE_STAGE_TESSELLATION_EVALUATION_SHADER_BIT</code></p>
</li>
<li>
<p><a id="VUID-VkSubmitInfo-pWaitDstStageMask-00078"></a>
Each element of <code>pWaitDstStageMask</code> <strong class="purple">must</strong> not include
<code>VK_PIPELINE_STAGE_HOST_BIT</code>.</p>
</li>
<li>
<p><a id="VUID-VkSubmitInfo-pWaitDstStageMask-02089"></a>
If the <a href="vkspec.html#features-meshShader">mesh shaders</a> feature is not enabled, each
element of <code>pWaitDstStageMask</code> <strong class="purple">must</strong> not contain
<code>VK_PIPELINE_STAGE_MESH_SHADER_BIT_NV</code></p>
</li>
<li>
<p><a id="VUID-VkSubmitInfo-pWaitDstStageMask-02090"></a>
If the <a href="vkspec.html#features-taskShader">task shaders</a> feature is not enabled, each
element of <code>pWaitDstStageMask</code> <strong class="purple">must</strong> not contain
<code>VK_PIPELINE_STAGE_TASK_SHADER_BIT_NV</code></p>
</li>
</ul>
</div>
</div>
</div>
<div class="sidebarblock">
<div class="content">
<div class="title">Valid Usage (Implicit)</div>
<div class="ulist">
<ul>
<li>
<p><a id="VUID-VkSubmitInfo-sType-sType"></a> <code>sType</code> <strong class="purple">must</strong> be <code>VK_STRUCTURE_TYPE_SUBMIT_INFO</code></p>
</li>
<li>
<p><a id="VUID-VkSubmitInfo-pNext-pNext"></a> Each <code>pNext</code> member of any structure (including this one) in the <code>pNext</code> chain <strong class="purple">must</strong> be either <code>NULL</code> or a pointer to a valid instance of <a href="#VkD3D12FenceSubmitInfoKHR">VkD3D12FenceSubmitInfoKHR</a>, <a href="#VkDeviceGroupSubmitInfo">VkDeviceGroupSubmitInfo</a>, <a href="#VkProtectedSubmitInfo">VkProtectedSubmitInfo</a>, <a href="#VkWin32KeyedMutexAcquireReleaseInfoKHR">VkWin32KeyedMutexAcquireReleaseInfoKHR</a>, or <a href="#VkWin32KeyedMutexAcquireReleaseInfoNV">VkWin32KeyedMutexAcquireReleaseInfoNV</a></p>
</li>
<li>
<p><a id="VUID-VkSubmitInfo-sType-unique"></a> Each <code>sType</code> member in the <code>pNext</code> chain <strong class="purple">must</strong> be unique</p>
</li>
<li>
<p><a id="VUID-VkSubmitInfo-pWaitSemaphores-parameter"></a> If <code>waitSemaphoreCount</code> is not <code>0</code>, <code>pWaitSemaphores</code> <strong class="purple">must</strong> be a valid pointer to an array of <code>waitSemaphoreCount</code> valid <code>VkSemaphore</code> handles</p>
</li>
<li>
<p><a id="VUID-VkSubmitInfo-pWaitDstStageMask-parameter"></a> If <code>waitSemaphoreCount</code> is not <code>0</code>, <code>pWaitDstStageMask</code> <strong class="purple">must</strong> be a valid pointer to an array of <code>waitSemaphoreCount</code> valid combinations of <a href="#VkPipelineStageFlagBits">VkPipelineStageFlagBits</a> values</p>
</li>
<li>
<p><a id="VUID-VkSubmitInfo-pWaitDstStageMask-requiredbitmask"></a> Each element of <code>pWaitDstStageMask</code> <strong class="purple">must</strong> not be <code>0</code></p>
</li>
<li>
<p><a id="VUID-VkSubmitInfo-pCommandBuffers-parameter"></a> If <code>commandBufferCount</code> is not <code>0</code>, <code>pCommandBuffers</code> <strong class="purple">must</strong> be a valid pointer to an array of <code>commandBufferCount</code> valid <code>VkCommandBuffer</code> handles</p>
</li>
<li>
<p><a id="VUID-VkSubmitInfo-pSignalSemaphores-parameter"></a> If <code>signalSemaphoreCount</code> is not <code>0</code>, <code>pSignalSemaphores</code> <strong class="purple">must</strong> be a valid pointer to an array of <code>signalSemaphoreCount</code> valid <code>VkSemaphore</code> handles</p>
</li>
<li>
<p><a id="VUID-VkSubmitInfo-commonparent"></a> Each of the elements of <code>pCommandBuffers</code>, the elements of <code>pSignalSemaphores</code>, and the elements of <code>pWaitSemaphores</code> that are valid handles <strong class="purple">must</strong> have been created, allocated, or retrieved from the same <code>VkDevice</code></p>
</li>
</ul>
</div>
</div>
</div>
</div>
<div class="sect3">
<h4 id="_see_also_755">See Also</h4>
<div class="paragraph">
<p><a href="#VkCommandBuffer">VkCommandBuffer</a>, <a href="#VkPipelineStageFlags">VkPipelineStageFlags</a>, <a href="#VkSemaphore">VkSemaphore</a>, <a href="#VkStructureType">VkStructureType</a>, <a href="#vkQueueSubmit">vkQueueSubmit</a></p>
</div>
</div>
<div class="sect3">
<h4 id="_document_notes_755">Document Notes</h4>
<div class="paragraph">
<p>For more information, see the Vulkan Specification at URL</p>
</div>
<div class="paragraph">
<p><a href="https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VkSubmitInfo" class="bare">https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VkSubmitInfo</a></p>
</div>
<div class="paragraph">
<p>This page is extracted from the Vulkan Specification.
Fixes and changes should be made to the Specification, not directly.</p>
</div>
<div style="page-break-after: always;"></div>
</div>
</div>
<div class="sect2">
<h3 id="_vksubpassbegininfokhr3">VkSubpassBeginInfoKHR(3)</h3>
<div class="sect3">
<h4 id="_name_756">Name</h4>
<div class="paragraph">
<p>VkSubpassBeginInfoKHR - Structure specifying subpass begin info</p>
</div>
</div>
<div class="sect3">
<h4 id="_c_specification_756">C Specification</h4>
<div class="paragraph">
<p>The <code>VkSubpassBeginInfoKHR</code> structure is defined as:</p>
</div>
<div id="VkSubpassBeginInfoKHR" class="listingblock">
<div class="content">
<pre class="highlight"><code class="language-c++" data-lang="c++">typedef struct VkSubpassBeginInfoKHR {
    VkStructureType      sType;
    const void*          pNext;
    VkSubpassContents    contents;
} VkSubpassBeginInfoKHR;</code></pre>
</div>
</div>
</div>
<div class="sect3">
<h4 id="_members_393">Members</h4>
<div class="ulist">
<ul>
<li>
<p><code>sType</code> is the type of this structure.</p>
</li>
<li>
<p><code>pNext</code> is <code>NULL</code> or a pointer to an extension-specific structure.</p>
</li>
<li>
<p><code>contents</code> is a <a href="#VkSubpassContents">VkSubpassContents</a> value specifying how the
commands in the next subpass will be provided.</p>
</li>
</ul>
</div>
</div>
<div class="sect3">
<h4 id="_description_756">Description</h4>
<div class="sidebarblock">
<div class="content">
<div class="title">Valid Usage (Implicit)</div>
<div class="ulist">
<ul>
<li>
<p><a id="VUID-VkSubpassBeginInfoKHR-sType-sType"></a> <code>sType</code> <strong class="purple">must</strong> be <code>VK_STRUCTURE_TYPE_SUBPASS_BEGIN_INFO_KHR</code></p>
</li>
<li>
<p><a id="VUID-VkSubpassBeginInfoKHR-pNext-pNext"></a> <code>pNext</code> <strong class="purple">must</strong> be <code>NULL</code></p>
</li>
<li>
<p><a id="VUID-VkSubpassBeginInfoKHR-contents-parameter"></a> <code>contents</code> <strong class="purple">must</strong> be a valid <a href="#VkSubpassContents">VkSubpassContents</a> value</p>
</li>
</ul>
</div>
</div>
</div>
</div>
<div class="sect3">
<h4 id="_see_also_756">See Also</h4>
<div class="paragraph">
<p><a href="#VkStructureType">VkStructureType</a>, <a href="#VkSubpassContents">VkSubpassContents</a>, <a href="#vkCmdBeginRenderPass2KHR">vkCmdBeginRenderPass2KHR</a>, <a href="#vkCmdNextSubpass2KHR">vkCmdNextSubpass2KHR</a></p>
</div>
</div>
<div class="sect3">
<h4 id="_document_notes_756">Document Notes</h4>
<div class="paragraph">
<p>For more information, see the Vulkan Specification at URL</p>
</div>
<div class="paragraph">
<p><a href="https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VkSubpassBeginInfoKHR" class="bare">https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VkSubpassBeginInfoKHR</a></p>
</div>
<div class="paragraph">
<p>This page is extracted from the Vulkan Specification.
Fixes and changes should be made to the Specification, not directly.</p>
</div>
<div style="page-break-after: always;"></div>
</div>
</div>
<div class="sect2">
<h3 id="_vksubpassdependency3">VkSubpassDependency(3)</h3>
<div class="sect3">
<h4 id="_name_757">Name</h4>
<div class="paragraph">
<p>VkSubpassDependency - Structure specifying a subpass dependency</p>
</div>
</div>
<div class="sect3">
<h4 id="_c_specification_757">C Specification</h4>
<div class="paragraph">
<p>The <code>VkSubpassDependency</code> structure is defined as:</p>
</div>
<div id="VkSubpassDependency" class="listingblock">
<div class="content">
<pre class="highlight"><code class="language-c++" data-lang="c++">typedef struct VkSubpassDependency {
    uint32_t                srcSubpass;
    uint32_t                dstSubpass;
    VkPipelineStageFlags    srcStageMask;
    VkPipelineStageFlags    dstStageMask;
    VkAccessFlags           srcAccessMask;
    VkAccessFlags           dstAccessMask;
    VkDependencyFlags       dependencyFlags;
} VkSubpassDependency;</code></pre>
</div>
</div>
</div>
<div class="sect3">
<h4 id="_members_394">Members</h4>
<div class="ulist">
<ul>
<li>
<p><code>srcSubpass</code> is the subpass index of the first subpass in the
dependency, or <code>VK_SUBPASS_EXTERNAL</code>.</p>
</li>
<li>
<p><code>dstSubpass</code> is the subpass index of the second subpass in the
dependency, or <code>VK_SUBPASS_EXTERNAL</code>.</p>
</li>
<li>
<p><code>srcStageMask</code> is a bitmask of <a href="#VkPipelineStageFlagBits">VkPipelineStageFlagBits</a>
specifying the <a href="vkspec.html#synchronization-pipeline-stages-masks">source stage
mask</a>.</p>
</li>
<li>
<p><code>dstStageMask</code> is a bitmask of <a href="#VkPipelineStageFlagBits">VkPipelineStageFlagBits</a>
specifying the <a href="vkspec.html#synchronization-pipeline-stages-masks">destination
stage mask</a></p>
</li>
<li>
<p><code>srcAccessMask</code> is a bitmask of <a href="#VkAccessFlagBits">VkAccessFlagBits</a> specifying a
<a href="vkspec.html#synchronization-access-masks">source access mask</a>.</p>
</li>
<li>
<p><code>dstAccessMask</code> is a bitmask of <a href="#VkAccessFlagBits">VkAccessFlagBits</a> specifying a
<a href="vkspec.html#synchronization-access-masks">destination access mask</a>.</p>
</li>
<li>
<p><code>dependencyFlags</code> is a bitmask of <a href="#VkDependencyFlagBits">VkDependencyFlagBits</a>.</p>
</li>
</ul>
</div>
</div>
<div class="sect3">
<h4 id="_description_757">Description</h4>
<div class="paragraph">
<p>If <code>srcSubpass</code> is equal to <code>dstSubpass</code> then the
<a href="#VkSubpassDependency">VkSubpassDependency</a> describes a
<a href="vkspec.html#synchronization-pipeline-barriers-subpass-self-dependencies">subpass
self-dependency</a>, and only constrains the pipeline barriers allowed within
a subpass instance.
Otherwise, when a render pass instance which includes a subpass dependency
is submitted to a queue, it defines a memory dependency between the
subpasses identified by <code>srcSubpass</code> and <code>dstSubpass</code>.</p>
</div>
<div class="paragraph">
<p>If <code>srcSubpass</code> is equal to <code>VK_SUBPASS_EXTERNAL</code>, the first
<a href="vkspec.html#synchronization-dependencies-scopes">synchronization scope</a> includes
commands that occur earlier in <a href="vkspec.html#synchronization-submission-order">submission
order</a> than the <a href="#vkCmdBeginRenderPass">vkCmdBeginRenderPass</a> used to begin the render pass
instance.
Otherwise, the first set of commands includes all commands submitted as part
of the subpass instance identified by <code>srcSubpass</code> and any load, store
or multisample resolve operations on attachments used in <code>srcSubpass</code>.
In either case, the first synchronization scope is limited to operations on
the pipeline stages determined by the
<a href="vkspec.html#synchronization-pipeline-stages-masks">source stage mask</a> specified by
<code>srcStageMask</code>.</p>
</div>
<div class="paragraph">
<p>If <code>dstSubpass</code> is equal to <code>VK_SUBPASS_EXTERNAL</code>, the second
<a href="vkspec.html#synchronization-dependencies-scopes">synchronization scope</a> includes
commands that occur later in <a href="vkspec.html#synchronization-submission-order">submission
order</a> than the <a href="#vkCmdEndRenderPass">vkCmdEndRenderPass</a> used to end the render pass
instance.
Otherwise, the second set of commands includes all commands submitted as
part of the subpass instance identified by <code>dstSubpass</code> and any load,
store or multisample resolve operations on attachments used in
<code>dstSubpass</code>.
In either case, the second synchronization scope is limited to operations on
the pipeline stages determined by the
<a href="vkspec.html#synchronization-pipeline-stages-masks">destination stage mask</a> specified
by <code>dstStageMask</code>.</p>
</div>
<div class="paragraph">
<p>The first <a href="vkspec.html#synchronization-dependencies-access-scopes">access scope</a> is
limited to access in the pipeline stages determined by the
<a href="vkspec.html#synchronization-pipeline-stages-masks">source stage mask</a> specified by
<code>srcStageMask</code>.
It is also limited to access types in the <a href="vkspec.html#synchronization-access-masks">source access mask</a> specified by <code>srcAccessMask</code>.</p>
</div>
<div class="paragraph">
<p>The second <a href="vkspec.html#synchronization-dependencies-access-scopes">access scope</a> is
limited to access in the pipeline stages determined by the
<a href="vkspec.html#synchronization-pipeline-stages-masks">destination stage mask</a> specified
by <code>dstStageMask</code>.
It is also limited to access types in the <a href="vkspec.html#synchronization-access-masks">destination access mask</a> specified by <code>dstAccessMask</code>.</p>
</div>
<div class="paragraph">
<p>The <a href="vkspec.html#synchronization-dependencies-available-and-visible">availability and
visibility operations</a> defined by a subpass dependency affect the execution
of <a href="vkspec.html#renderpass-layout-transitions">image layout transitions</a> within the
render pass.</p>
</div>
<div class="admonitionblock note">
<table>
<tr>
<td class="icon">
<i class="fa icon-note" title="Note"></i>
</td>
<td class="content">
<div class="title">Note</div>
<div class="paragraph">
<p>For non-attachment resources, the memory dependency expressed by subpass
dependency is nearly identical to that of a <a href="#VkMemoryBarrier">VkMemoryBarrier</a> (with
matching <code>srcAccessMask</code>/<code>dstAccessMask</code> parameters) submitted as a
part of a <a href="#vkCmdPipelineBarrier">vkCmdPipelineBarrier</a> (with matching
<code>srcStageMask</code>/<code>dstStageMask</code> parameters).
The only difference being that its scopes are limited to the identified
subpasses rather than potentially affecting everything before and after.</p>
</div>
<div class="paragraph">
<p>For attachments however, subpass dependencies work more like a
<a href="#VkImageMemoryBarrier">VkImageMemoryBarrier</a> defined similarly to the <a href="#VkMemoryBarrier">VkMemoryBarrier</a>
above, the queue family indices set to <code>VK_QUEUE_FAMILY_IGNORED</code>, and
layouts as follows:</p>
</div>
<div class="ulist">
<ul>
<li>
<p>The equivalent to <code>oldLayout</code> is the attachment&#8217;s layout according
to the subpass description for <code>srcSubpass</code>.</p>
</li>
<li>
<p>The equivalent to <code>newLayout</code> is the attachment&#8217;s layout according
to the subpass description for <code>dstSubpass</code>.</p>
</li>
</ul>
</div>
</td>
</tr>
</table>
</div>
<div class="sidebarblock">
<div class="content">
<div class="title">Valid Usage</div>
<div class="ulist">
<ul>
<li>
<p><a id="VUID-VkSubpassDependency-srcSubpass-00858"></a>
If <code>srcSubpass</code> is not <code>VK_SUBPASS_EXTERNAL</code>, <code>srcStageMask</code>
<strong class="purple">must</strong> not include <code>VK_PIPELINE_STAGE_HOST_BIT</code></p>
</li>
<li>
<p><a id="VUID-VkSubpassDependency-dstSubpass-00859"></a>
If <code>dstSubpass</code> is not <code>VK_SUBPASS_EXTERNAL</code>, <code>dstStageMask</code>
<strong class="purple">must</strong> not include <code>VK_PIPELINE_STAGE_HOST_BIT</code></p>
</li>
<li>
<p><a id="VUID-VkSubpassDependency-srcStageMask-00860"></a>
If the <a href="vkspec.html#features-geometryShader">geometry shaders</a> feature is not
enabled, <code>srcStageMask</code> <strong class="purple">must</strong> not contain
<code>VK_PIPELINE_STAGE_GEOMETRY_SHADER_BIT</code></p>
</li>
<li>
<p><a id="VUID-VkSubpassDependency-dstStageMask-00861"></a>
If the <a href="vkspec.html#features-geometryShader">geometry shaders</a> feature is not
enabled, <code>dstStageMask</code> <strong class="purple">must</strong> not contain
<code>VK_PIPELINE_STAGE_GEOMETRY_SHADER_BIT</code></p>
</li>
<li>
<p><a id="VUID-VkSubpassDependency-srcStageMask-00862"></a>
If the <a href="vkspec.html#features-tessellationShader">tessellation shaders</a> feature is
not enabled, <code>srcStageMask</code> <strong class="purple">must</strong> not contain
<code>VK_PIPELINE_STAGE_TESSELLATION_CONTROL_SHADER_BIT</code> or
<code>VK_PIPELINE_STAGE_TESSELLATION_EVALUATION_SHADER_BIT</code></p>
</li>
<li>
<p><a id="VUID-VkSubpassDependency-dstStageMask-00863"></a>
If the <a href="vkspec.html#features-tessellationShader">tessellation shaders</a> feature is
not enabled, <code>dstStageMask</code> <strong class="purple">must</strong> not contain
<code>VK_PIPELINE_STAGE_TESSELLATION_CONTROL_SHADER_BIT</code> or
<code>VK_PIPELINE_STAGE_TESSELLATION_EVALUATION_SHADER_BIT</code></p>
</li>
<li>
<p><a id="VUID-VkSubpassDependency-srcSubpass-00864"></a>
<code>srcSubpass</code> <strong class="purple">must</strong> be less than or equal to <code>dstSubpass</code>, unless
one of them is <code>VK_SUBPASS_EXTERNAL</code>, to avoid cyclic dependencies
and ensure a valid execution order</p>
</li>
<li>
<p><a id="VUID-VkSubpassDependency-srcSubpass-00865"></a>
<code>srcSubpass</code> and <code>dstSubpass</code> <strong class="purple">must</strong> not both be equal to
<code>VK_SUBPASS_EXTERNAL</code></p>
</li>
<li>
<p><a id="VUID-VkSubpassDependency-srcSubpass-01989"></a>
If <code>srcSubpass</code> is equal to <code>dstSubpass</code>, <code>srcStageMask</code> and
<code>dstStageMask</code> <strong class="purple">must</strong> not set any bits that are neither
<code>VK_PIPELINE_STAGE_ALL_GRAPHICS_BIT</code>, nor one of the
<a href="vkspec.html#synchronization-pipeline-stages-types">graphics pipeline stages</a></p>
</li>
<li>
<p><a id="VUID-VkSubpassDependency-srcSubpass-00867"></a>
If <code>srcSubpass</code> is equal to <code>dstSubpass</code> and not all of the
stages in <code>srcStageMask</code> and <code>dstStageMask</code> are
<a href="vkspec.html#synchronization-framebuffer-regions">framebuffer-space stages</a>, the
<a href="vkspec.html#synchronization-pipeline-stages-order">logically latest</a> pipeline
stage in <code>srcStageMask</code> <strong class="purple">must</strong> be
<a href="vkspec.html#synchronization-pipeline-stages-order">logically earlier</a> than or
equal to the <a href="vkspec.html#synchronization-pipeline-stages-order">logically
earliest</a> pipeline stage in <code>dstStageMask</code></p>
</li>
<li>
<p><a id="VUID-VkSubpassDependency-srcAccessMask-00868"></a>
Any access flag included in <code>srcAccessMask</code> <strong class="purple">must</strong> be supported by
one of the pipeline stages in <code>srcStageMask</code>, as specified in the
<a href="vkspec.html#synchronization-access-types-supported">table of supported access
types</a></p>
</li>
<li>
<p><a id="VUID-VkSubpassDependency-dstAccessMask-00869"></a>
Any access flag included in <code>dstAccessMask</code> <strong class="purple">must</strong> be supported by
one of the pipeline stages in <code>dstStageMask</code>, as specified in the
<a href="vkspec.html#synchronization-access-types-supported">table of supported access
types</a></p>
</li>
<li>
<p><a id="VUID-VkSubpassDependency-srcSubpass-02243"></a>
If <code>srcSubpass</code> equals <code>dstSubpass</code>, and <code>srcStageMask</code> and
<code>dstStageMask</code> both include a
<a href="vkspec.html#synchronization-framebuffer-regions">framebuffer-space stage</a>, then
<code>dependencyFlags</code> <strong class="purple">must</strong> include <code>VK_DEPENDENCY_BY_REGION_BIT</code></p>
</li>
<li>
<p><a id="VUID-VkSubpassDependency-dependencyFlags-02520"></a>
If <code>dependencyFlags</code> includes <code>VK_DEPENDENCY_VIEW_LOCAL_BIT</code>,
<code>srcSubpass</code> <strong class="purple">must</strong> not be equal to <code>VK_SUBPASS_EXTERNAL</code></p>
</li>
<li>
<p><a id="VUID-VkSubpassDependency-dependencyFlags-02521"></a>
If <code>dependencyFlags</code> includes <code>VK_DEPENDENCY_VIEW_LOCAL_BIT</code>,
<code>dstSubpass</code> <strong class="purple">must</strong> not be equal to <code>VK_SUBPASS_EXTERNAL</code></p>
</li>
<li>
<p><a id="VUID-VkSubpassDependency-srcSubpass-00872"></a>
If <code>srcSubpass</code> equals <code>dstSubpass</code> and that subpass has more
than one bit set in the view mask, then <code>dependencyFlags</code> <strong class="purple">must</strong>
include <code>VK_DEPENDENCY_VIEW_LOCAL_BIT</code></p>
</li>
<li>
<p><a id="VUID-VkSubpassDependency-srcStageMask-02099"></a>
If the <a href="vkspec.html#features-meshShader">mesh shaders</a> feature is not enabled,
<code>srcStageMask</code> <strong class="purple">must</strong> not contain
<code>VK_PIPELINE_STAGE_MESH_SHADER_BIT_NV</code></p>
</li>
<li>
<p><a id="VUID-VkSubpassDependency-srcStageMask-02100"></a>
If the <a href="vkspec.html#features-taskShader">task shaders</a> feature is not enabled,
<code>srcStageMask</code> <strong class="purple">must</strong> not contain
<code>VK_PIPELINE_STAGE_TASK_SHADER_BIT_NV</code></p>
</li>
<li>
<p><a id="VUID-VkSubpassDependency-dstStageMask-02101"></a>
If the <a href="vkspec.html#features-meshShader">mesh shaders</a> feature is not enabled,
<code>dstStageMask</code> <strong class="purple">must</strong> not contain
<code>VK_PIPELINE_STAGE_MESH_SHADER_BIT_NV</code></p>
</li>
<li>
<p><a id="VUID-VkSubpassDependency-dstStageMask-02102"></a>
If the <a href="vkspec.html#features-taskShader">task shaders</a> feature is not enabled,
<code>dstStageMask</code> <strong class="purple">must</strong> not contain
<code>VK_PIPELINE_STAGE_TASK_SHADER_BIT_NV</code></p>
</li>
</ul>
</div>
</div>
</div>
<div class="sidebarblock">
<div class="content">
<div class="title">Valid Usage (Implicit)</div>
<div class="ulist">
<ul>
<li>
<p><a id="VUID-VkSubpassDependency-srcStageMask-parameter"></a> <code>srcStageMask</code> <strong class="purple">must</strong> be a valid combination of <a href="#VkPipelineStageFlagBits">VkPipelineStageFlagBits</a> values</p>
</li>
<li>
<p><a id="VUID-VkSubpassDependency-srcStageMask-requiredbitmask"></a> <code>srcStageMask</code> <strong class="purple">must</strong> not be <code>0</code></p>
</li>
<li>
<p><a id="VUID-VkSubpassDependency-dstStageMask-parameter"></a> <code>dstStageMask</code> <strong class="purple">must</strong> be a valid combination of <a href="#VkPipelineStageFlagBits">VkPipelineStageFlagBits</a> values</p>
</li>
<li>
<p><a id="VUID-VkSubpassDependency-dstStageMask-requiredbitmask"></a> <code>dstStageMask</code> <strong class="purple">must</strong> not be <code>0</code></p>
</li>
<li>
<p><a id="VUID-VkSubpassDependency-srcAccessMask-parameter"></a> <code>srcAccessMask</code> <strong class="purple">must</strong> be a valid combination of <a href="#VkAccessFlagBits">VkAccessFlagBits</a> values</p>
</li>
<li>
<p><a id="VUID-VkSubpassDependency-dstAccessMask-parameter"></a> <code>dstAccessMask</code> <strong class="purple">must</strong> be a valid combination of <a href="#VkAccessFlagBits">VkAccessFlagBits</a> values</p>
</li>
<li>
<p><a id="VUID-VkSubpassDependency-dependencyFlags-parameter"></a> <code>dependencyFlags</code> <strong class="purple">must</strong> be a valid combination of <a href="#VkDependencyFlagBits">VkDependencyFlagBits</a> values</p>
</li>
</ul>
</div>
</div>
</div>
</div>
<div class="sect3">
<h4 id="_see_also_757">See Also</h4>
<div class="paragraph">
<p><a href="#VkAccessFlags">VkAccessFlags</a>, <a href="#VkDependencyFlags">VkDependencyFlags</a>, <a href="#VkPipelineStageFlags">VkPipelineStageFlags</a>, <a href="#VkRenderPassCreateInfo">VkRenderPassCreateInfo</a></p>
</div>
</div>
<div class="sect3">
<h4 id="_document_notes_757">Document Notes</h4>
<div class="paragraph">
<p>For more information, see the Vulkan Specification at URL</p>
</div>
<div class="paragraph">
<p><a href="https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VkSubpassDependency" class="bare">https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VkSubpassDependency</a></p>
</div>
<div class="paragraph">
<p>This page is extracted from the Vulkan Specification.
Fixes and changes should be made to the Specification, not directly.</p>
</div>
<div style="page-break-after: always;"></div>
</div>
</div>
<div class="sect2">
<h3 id="_vksubpassdependency2khr3">VkSubpassDependency2KHR(3)</h3>
<div class="sect3">
<h4 id="_name_758">Name</h4>
<div class="paragraph">
<p>VkSubpassDependency2KHR - Structure specifying a subpass dependency</p>
</div>
</div>
<div class="sect3">
<h4 id="_c_specification_758">C Specification</h4>
<div class="paragraph">
<p>The <code>VkSubpassDependency2KHR</code> structure is defined as:</p>
</div>
<div id="VkSubpassDependency2KHR" class="listingblock">
<div class="content">
<pre class="highlight"><code class="language-c++" data-lang="c++">typedef struct VkSubpassDependency2KHR {
    VkStructureType         sType;
    const void*             pNext;
    uint32_t                srcSubpass;
    uint32_t                dstSubpass;
    VkPipelineStageFlags    srcStageMask;
    VkPipelineStageFlags    dstStageMask;
    VkAccessFlags           srcAccessMask;
    VkAccessFlags           dstAccessMask;
    VkDependencyFlags       dependencyFlags;
    int32_t                 viewOffset;
} VkSubpassDependency2KHR;</code></pre>
</div>
</div>
</div>
<div class="sect3">
<h4 id="_members_395">Members</h4>
<div class="ulist">
<ul>
<li>
<p><code>sType</code> is the type of this structure.</p>
</li>
<li>
<p><code>pNext</code> is <code>NULL</code> or a pointer to an extension-specific structure.</p>
</li>
<li>
<p><code>srcSubpass</code> is the subpass index of the first subpass in the
dependency, or <code>VK_SUBPASS_EXTERNAL</code>.</p>
</li>
<li>
<p><code>dstSubpass</code> is the subpass index of the second subpass in the
dependency, or <code>VK_SUBPASS_EXTERNAL</code>.</p>
</li>
<li>
<p><code>srcStageMask</code> is a bitmask of <a href="#VkPipelineStageFlagBits">VkPipelineStageFlagBits</a>
specifying the <a href="vkspec.html#synchronization-pipeline-stages-masks">source stage
mask</a>.</p>
</li>
<li>
<p><code>dstStageMask</code> is a bitmask of <a href="#VkPipelineStageFlagBits">VkPipelineStageFlagBits</a>
specifying the <a href="vkspec.html#synchronization-pipeline-stages-masks">destination
stage mask</a></p>
</li>
<li>
<p><code>srcAccessMask</code> is a bitmask of <a href="#VkAccessFlagBits">VkAccessFlagBits</a> specifying a
<a href="vkspec.html#synchronization-access-masks">source access mask</a>.</p>
</li>
<li>
<p><code>dstAccessMask</code> is a bitmask of <a href="#VkAccessFlagBits">VkAccessFlagBits</a> specifying a
<a href="vkspec.html#synchronization-access-masks">destination access mask</a>.</p>
</li>
<li>
<p><code>dependencyFlags</code> is a bitmask of <a href="#VkDependencyFlagBits">VkDependencyFlagBits</a>.</p>
</li>
<li>
<p><code>viewOffset</code> controls which views in the source subpass the views in
the destination subpass depend on.</p>
</li>
</ul>
</div>
</div>
<div class="sect3">
<h4 id="_description_758">Description</h4>
<div class="paragraph">
<p>Parameters defined by this structure with the same name as those in
<a href="#VkSubpassDependency">VkSubpassDependency</a> have the identical effect to those parameters.</p>
</div>
<div class="paragraph">
<p><code>viewOffset</code> has the same effect for the described subpass dependency as
<a href="#VkRenderPassMultiviewCreateInfo">VkRenderPassMultiviewCreateInfo</a>::<code>pViewOffsets</code> has on each
corresponding subpass dependency.</p>
</div>
<div class="sidebarblock">
<div class="content">
<div class="title">Valid Usage</div>
<div class="ulist">
<ul>
<li>
<p><a id="VUID-VkSubpassDependency2KHR-srcSubpass-03078"></a>
If <code>srcSubpass</code> is not <code>VK_SUBPASS_EXTERNAL</code>, <code>srcStageMask</code>
<strong class="purple">must</strong> not include <code>VK_PIPELINE_STAGE_HOST_BIT</code></p>
</li>
<li>
<p><a id="VUID-VkSubpassDependency2KHR-dstSubpass-03079"></a>
If <code>dstSubpass</code> is not <code>VK_SUBPASS_EXTERNAL</code>, <code>dstStageMask</code>
<strong class="purple">must</strong> not include <code>VK_PIPELINE_STAGE_HOST_BIT</code></p>
</li>
<li>
<p><a id="VUID-VkSubpassDependency2KHR-srcStageMask-03080"></a>
If the <a href="vkspec.html#features-geometryShader">geometry shaders</a> feature is not
enabled, <code>srcStageMask</code> <strong class="purple">must</strong> not contain
<code>VK_PIPELINE_STAGE_GEOMETRY_SHADER_BIT</code></p>
</li>
<li>
<p><a id="VUID-VkSubpassDependency2KHR-dstStageMask-03081"></a>
If the <a href="vkspec.html#features-geometryShader">geometry shaders</a> feature is not
enabled, <code>dstStageMask</code> <strong class="purple">must</strong> not contain
<code>VK_PIPELINE_STAGE_GEOMETRY_SHADER_BIT</code></p>
</li>
<li>
<p><a id="VUID-VkSubpassDependency2KHR-srcStageMask-03082"></a>
If the <a href="vkspec.html#features-tessellationShader">tessellation shaders</a> feature is
not enabled, <code>srcStageMask</code> <strong class="purple">must</strong> not contain
<code>VK_PIPELINE_STAGE_TESSELLATION_CONTROL_SHADER_BIT</code> or
<code>VK_PIPELINE_STAGE_TESSELLATION_EVALUATION_SHADER_BIT</code></p>
</li>
<li>
<p><a id="VUID-VkSubpassDependency2KHR-dstStageMask-03083"></a>
If the <a href="vkspec.html#features-tessellationShader">tessellation shaders</a> feature is
not enabled, <code>dstStageMask</code> <strong class="purple">must</strong> not contain
<code>VK_PIPELINE_STAGE_TESSELLATION_CONTROL_SHADER_BIT</code> or
<code>VK_PIPELINE_STAGE_TESSELLATION_EVALUATION_SHADER_BIT</code></p>
</li>
<li>
<p><a id="VUID-VkSubpassDependency2KHR-srcSubpass-03084"></a>
<code>srcSubpass</code> <strong class="purple">must</strong> be less than or equal to <code>dstSubpass</code>, unless
one of them is <code>VK_SUBPASS_EXTERNAL</code>, to avoid cyclic dependencies
and ensure a valid execution order</p>
</li>
<li>
<p><a id="VUID-VkSubpassDependency2KHR-srcSubpass-03085"></a>
<code>srcSubpass</code> and <code>dstSubpass</code> <strong class="purple">must</strong> not both be equal to
<code>VK_SUBPASS_EXTERNAL</code></p>
</li>
<li>
<p><a id="VUID-VkSubpassDependency2KHR-srcSubpass-02244"></a>
If <code>srcSubpass</code> is equal to <code>dstSubpass</code>, <code>srcStageMask</code> and
<code>dstStageMask</code> <strong class="purple">must</strong> not set any bits that are neither
<code>VK_PIPELINE_STAGE_ALL_GRAPHICS_BIT</code>, nor one of the
<a href="vkspec.html#synchronization-pipeline-stages-types">graphics pipeline stages</a></p>
</li>
<li>
<p><a id="VUID-VkSubpassDependency2KHR-srcSubpass-03087"></a>
If <code>srcSubpass</code> is equal to <code>dstSubpass</code> and not all of the
stages in <code>srcStageMask</code> and <code>dstStageMask</code> are
<a href="vkspec.html#synchronization-framebuffer-regions">framebuffer-space stages</a>, the
<a href="vkspec.html#synchronization-pipeline-stages-order">logically latest</a> pipeline
stage in <code>srcStageMask</code> <strong class="purple">must</strong> be
<a href="vkspec.html#synchronization-pipeline-stages-order">logically earlier</a> than or
equal to the <a href="vkspec.html#synchronization-pipeline-stages-order">logically
earliest</a> pipeline stage in <code>dstStageMask</code></p>
</li>
<li>
<p><a id="VUID-VkSubpassDependency2KHR-srcAccessMask-03088"></a>
Any access flag included in <code>srcAccessMask</code> <strong class="purple">must</strong> be supported by
one of the pipeline stages in <code>srcStageMask</code>, as specified in the
<a href="vkspec.html#synchronization-access-types-supported">table of supported access
types</a></p>
</li>
<li>
<p><a id="VUID-VkSubpassDependency2KHR-dstAccessMask-03089"></a>
Any access flag included in <code>dstAccessMask</code> <strong class="purple">must</strong> be supported by
one of the pipeline stages in <code>dstStageMask</code>, as specified in the
<a href="vkspec.html#synchronization-access-types-supported">table of supported access
types</a></p>
</li>
<li>
<p><a id="VUID-VkSubpassDependency2KHR-dependencyFlags-03090"></a>
If <code>dependencyFlags</code> includes <code>VK_DEPENDENCY_VIEW_LOCAL_BIT</code>,
<code>srcSubpass</code> <strong class="purple">must</strong> not be equal to <code>VK_SUBPASS_EXTERNAL</code></p>
</li>
<li>
<p><a id="VUID-VkSubpassDependency2KHR-dependencyFlags-03091"></a>
If <code>dependencyFlags</code> includes <code>VK_DEPENDENCY_VIEW_LOCAL_BIT</code>,
<code>dstSubpass</code> <strong class="purple">must</strong> not be equal to <code>VK_SUBPASS_EXTERNAL</code></p>
</li>
<li>
<p><a id="VUID-VkSubpassDependency2KHR-srcSubpass-02245"></a>
If <code>srcSubpass</code> equals <code>dstSubpass</code>, and <code>srcStageMask</code> and
<code>dstStageMask</code> both include a
<a href="vkspec.html#synchronization-framebuffer-regions">framebuffer-space stage</a>, then
<code>dependencyFlags</code> <strong class="purple">must</strong> include <code>VK_DEPENDENCY_BY_REGION_BIT</code></p>
</li>
<li>
<p><a id="VUID-VkSubpassDependency2KHR-viewOffset-02530"></a>
If <code>viewOffset</code> is not equal to <code>0</code>, <code>srcSubpass</code> <strong class="purple">must</strong> not be
equal to <code>dstSubpass</code></p>
</li>
<li>
<p><a id="VUID-VkSubpassDependency2KHR-dependencyFlags-03092"></a>
If <code>dependencyFlags</code> does not include
<code>VK_DEPENDENCY_VIEW_LOCAL_BIT</code>, <code>viewOffset</code> <strong class="purple">must</strong> be <code>0</code></p>
</li>
<li>
<p><a id="VUID-VkSubpassDependency2KHR-viewOffset-03093"></a>
If <code>viewOffset</code> is not <code>0</code>, <code>srcSubpass</code> <strong class="purple">must</strong> not be equal to
<code>dstSubpass</code>.</p>
</li>
<li>
<p><a id="VUID-VkSubpassDependency2KHR-srcStageMask-02103"></a>
If the <a href="vkspec.html#features-meshShader">mesh shaders</a> feature is not enabled,
<code>srcStageMask</code> <strong class="purple">must</strong> not contain
<code>VK_PIPELINE_STAGE_MESH_SHADER_BIT_NV</code></p>
</li>
<li>
<p><a id="VUID-VkSubpassDependency2KHR-srcStageMask-02104"></a>
If the <a href="vkspec.html#features-taskShader">task shaders</a> feature is not enabled,
<code>srcStageMask</code> <strong class="purple">must</strong> not contain
<code>VK_PIPELINE_STAGE_TASK_SHADER_BIT_NV</code></p>
</li>
<li>
<p><a id="VUID-VkSubpassDependency2KHR-dstStageMask-02105"></a>
If the <a href="vkspec.html#features-meshShader">mesh shaders</a> feature is not enabled,
<code>dstStageMask</code> <strong class="purple">must</strong> not contain
<code>VK_PIPELINE_STAGE_MESH_SHADER_BIT_NV</code></p>
</li>
<li>
<p><a id="VUID-VkSubpassDependency2KHR-dstStageMask-02106"></a>
If the <a href="vkspec.html#features-taskShader">task shaders</a> feature is not enabled,
<code>dstStageMask</code> <strong class="purple">must</strong> not contain
<code>VK_PIPELINE_STAGE_TASK_SHADER_BIT_NV</code></p>
</li>
</ul>
</div>
</div>
</div>
<div class="sidebarblock">
<div class="content">
<div class="title">Valid Usage (Implicit)</div>
<div class="ulist">
<ul>
<li>
<p><a id="VUID-VkSubpassDependency2KHR-sType-sType"></a> <code>sType</code> <strong class="purple">must</strong> be <code>VK_STRUCTURE_TYPE_SUBPASS_DEPENDENCY_2_KHR</code></p>
</li>
<li>
<p><a id="VUID-VkSubpassDependency2KHR-srcStageMask-parameter"></a> <code>srcStageMask</code> <strong class="purple">must</strong> be a valid combination of <a href="#VkPipelineStageFlagBits">VkPipelineStageFlagBits</a> values</p>
</li>
<li>
<p><a id="VUID-VkSubpassDependency2KHR-srcStageMask-requiredbitmask"></a> <code>srcStageMask</code> <strong class="purple">must</strong> not be <code>0</code></p>
</li>
<li>
<p><a id="VUID-VkSubpassDependency2KHR-dstStageMask-parameter"></a> <code>dstStageMask</code> <strong class="purple">must</strong> be a valid combination of <a href="#VkPipelineStageFlagBits">VkPipelineStageFlagBits</a> values</p>
</li>
<li>
<p><a id="VUID-VkSubpassDependency2KHR-dstStageMask-requiredbitmask"></a> <code>dstStageMask</code> <strong class="purple">must</strong> not be <code>0</code></p>
</li>
<li>
<p><a id="VUID-VkSubpassDependency2KHR-srcAccessMask-parameter"></a> <code>srcAccessMask</code> <strong class="purple">must</strong> be a valid combination of <a href="#VkAccessFlagBits">VkAccessFlagBits</a> values</p>
</li>
<li>
<p><a id="VUID-VkSubpassDependency2KHR-dstAccessMask-parameter"></a> <code>dstAccessMask</code> <strong class="purple">must</strong> be a valid combination of <a href="#VkAccessFlagBits">VkAccessFlagBits</a> values</p>
</li>
<li>
<p><a id="VUID-VkSubpassDependency2KHR-dependencyFlags-parameter"></a> <code>dependencyFlags</code> <strong class="purple">must</strong> be a valid combination of <a href="#VkDependencyFlagBits">VkDependencyFlagBits</a> values</p>
</li>
</ul>
</div>
</div>
</div>
</div>
<div class="sect3">
<h4 id="_see_also_758">See Also</h4>
<div class="paragraph">
<p><a href="#VkAccessFlags">VkAccessFlags</a>, <a href="#VkDependencyFlags">VkDependencyFlags</a>, <a href="#VkPipelineStageFlags">VkPipelineStageFlags</a>, <a href="#VkRenderPassCreateInfo2KHR">VkRenderPassCreateInfo2KHR</a>, <a href="#VkStructureType">VkStructureType</a></p>
</div>
</div>
<div class="sect3">
<h4 id="_document_notes_758">Document Notes</h4>
<div class="paragraph">
<p>For more information, see the Vulkan Specification at URL</p>
</div>
<div class="paragraph">
<p><a href="https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VkSubpassDependency2KHR" class="bare">https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VkSubpassDependency2KHR</a></p>
</div>
<div class="paragraph">
<p>This page is extracted from the Vulkan Specification.
Fixes and changes should be made to the Specification, not directly.</p>
</div>
<div style="page-break-after: always;"></div>
</div>
</div>
<div class="sect2">
<h3 id="_vksubpassdescription3">VkSubpassDescription(3)</h3>
<div class="sect3">
<h4 id="_name_759">Name</h4>
<div class="paragraph">
<p>VkSubpassDescription - Structure specifying a subpass description</p>
</div>
</div>
<div class="sect3">
<h4 id="_c_specification_759">C Specification</h4>
<div class="paragraph">
<p>The <code>VkSubpassDescription</code> structure is defined as:</p>
</div>
<div id="VkSubpassDescription" class="listingblock">
<div class="content">
<pre class="highlight"><code class="language-c++" data-lang="c++">typedef struct VkSubpassDescription {
    VkSubpassDescriptionFlags       flags;
    VkPipelineBindPoint             pipelineBindPoint;
    uint32_t                        inputAttachmentCount;
    const VkAttachmentReference*    pInputAttachments;
    uint32_t                        colorAttachmentCount;
    const VkAttachmentReference*    pColorAttachments;
    const VkAttachmentReference*    pResolveAttachments;
    const VkAttachmentReference*    pDepthStencilAttachment;
    uint32_t                        preserveAttachmentCount;
    const uint32_t*                 pPreserveAttachments;
} VkSubpassDescription;</code></pre>
</div>
</div>
</div>
<div class="sect3">
<h4 id="_members_396">Members</h4>
<div class="ulist">
<ul>
<li>
<p><code>flags</code> is a bitmask of <a href="#VkSubpassDescriptionFlagBits">VkSubpassDescriptionFlagBits</a>
specifying usage of the subpass.</p>
</li>
<li>
<p><code>pipelineBindPoint</code> is a <a href="#VkPipelineBindPoint">VkPipelineBindPoint</a> value specifying
the pipeline type supported for this subpass.</p>
</li>
<li>
<p><code>inputAttachmentCount</code> is the number of input attachments.</p>
</li>
<li>
<p><code>pInputAttachments</code> is an array of <a href="#VkAttachmentReference">VkAttachmentReference</a>
structures defining the input attachments for this subpass and their
layouts.</p>
</li>
<li>
<p><code>colorAttachmentCount</code> is the number of color attachments.</p>
</li>
<li>
<p><code>pColorAttachments</code> is an array of <a href="#VkAttachmentReference">VkAttachmentReference</a>
structures defining the color attachments for this subpass and their
layouts.</p>
</li>
<li>
<p><code>pResolveAttachments</code> is an optional array of
<code>colorAttachmentCount</code> <a href="#VkAttachmentReference">VkAttachmentReference</a> structures
defining the resolve attachments for this subpass and their layouts.</p>
</li>
<li>
<p><code>pDepthStencilAttachment</code> is a pointer to a
<a href="#VkAttachmentReference">VkAttachmentReference</a> specifying the depth/stencil attachment for
this subpass and its layout.</p>
</li>
<li>
<p><code>preserveAttachmentCount</code> is the number of preserved attachments.</p>
</li>
<li>
<p><code>pPreserveAttachments</code> is an array of <code>preserveAttachmentCount</code>
render pass attachment indices identifying attachments that are not used
by this subpass, but whose contents <strong class="purple">must</strong> be preserved throughout the
subpass.</p>
</li>
</ul>
</div>
</div>
<div class="sect3">
<h4 id="_description_759">Description</h4>
<div class="paragraph">
<p>Each element of the <code>pInputAttachments</code> array corresponds to an input
attachment index in a fragment shader, i.e. if a shader declares an image
variable decorated with a <code>InputAttachmentIndex</code> value of <strong>X</strong>, then it
uses the attachment provided in <code>pInputAttachments</code>[<strong>X</strong>].
Input attachments <strong class="purple">must</strong> also be bound to the pipeline in a descriptor set.
If the <code>attachment</code> member of any element of <code>pInputAttachments</code> is
<code>VK_ATTACHMENT_UNUSED</code>, the application <strong class="purple">must</strong> not read from the
corresponding input attachment index.
Fragment shaders <strong class="purple">can</strong> use subpass input variables to access the contents of
an input attachment at the fragment&#8217;s (x, y, layer) framebuffer coordinates.</p>
</div>
<div class="paragraph">
<p>Each element of the <code>pColorAttachments</code> array corresponds to an output
location in the shader, i.e. if the shader declares an output variable
decorated with a <code>Location</code> value of <strong>X</strong>, then it uses the attachment
provided in <code>pColorAttachments</code>[<strong>X</strong>].
If the <code>attachment</code> member of any element of <code>pColorAttachments</code> is
<code>VK_ATTACHMENT_UNUSED</code>, writes to the corresponding location by a
fragment are discarded.</p>
</div>
<div class="paragraph">
<p>If <code>pResolveAttachments</code> is not <code>NULL</code>, each of its elements corresponds
to a color attachment (the element in <code>pColorAttachments</code> at the same
index), and a multisample resolve operation is defined for each attachment.
At the end of each subpass, multisample resolve operations read the
subpass&#8217;s color attachments, and resolve the samples for each pixel to the
same pixel location in the corresponding resolve attachments, unless the
resolve attachment index is <code>VK_ATTACHMENT_UNUSED</code>.</p>
</div>
<div class="paragraph">
<p>Similarly, if
<a href="#VkSubpassDescriptionDepthStencilResolveKHR">VkSubpassDescriptionDepthStencilResolveKHR</a>::<code>pDepthStencilResolveAttachment</code>
is not <code>NULL</code> and does not have the value <code>VK_ATTACHMENT_UNUSED</code>, it
corresponds to the depth/stencil attachment in
<code>pDepthStencilAttachment</code>, and multisample resolve operations for depth
and stencil are defined by
<a href="#VkSubpassDescriptionDepthStencilResolveKHR">VkSubpassDescriptionDepthStencilResolveKHR</a>::<code>depthResolveMode</code> and
<a href="#VkSubpassDescriptionDepthStencilResolveKHR">VkSubpassDescriptionDepthStencilResolveKHR</a>::<code>stencilResolveMode</code>,
respectively.
At the end of each subpass, multisample resolve operations read the
subpass&#8217;s depth/stencil attachment, and resolve the samples for each pixel
to the same pixel location in the corresponding resolve attachment.
If <a href="#VkSubpassDescriptionDepthStencilResolveKHR">VkSubpassDescriptionDepthStencilResolveKHR</a>::<code>depthResolveMode</code>
is <code>VK_RESOLVE_MODE_NONE_KHR</code>, then the depth component of the resolve
attachment is not written to and its contents are preserved.
Similarly, if
<a href="#VkSubpassDescriptionDepthStencilResolveKHR">VkSubpassDescriptionDepthStencilResolveKHR</a>::<code>stencilResolveMode</code>
is <code>VK_RESOLVE_MODE_NONE_KHR</code>, then the stencil component of the resolve
attachment is not written to and its contents are preserved.
<a href="#VkSubpassDescriptionDepthStencilResolveKHR">VkSubpassDescriptionDepthStencilResolveKHR</a>::<code>depthResolveMode</code> is
ignored if the <a href="#VkFormat">VkFormat</a> of the <code>pDepthStencilResolveAttachment</code>
does not have a depth component.
Similarly,
<a href="#VkSubpassDescriptionDepthStencilResolveKHR">VkSubpassDescriptionDepthStencilResolveKHR</a>::<code>stencilResolveMode</code>
is ignored if the <a href="#VkFormat">VkFormat</a> of the <code>pDepthStencilResolveAttachment</code>
does not have a stencil component.</p>
</div>
<div class="paragraph">
<p>If the image subresource range referenced by the depth/stencil attachment is
created with
<code>VK_IMAGE_CREATE_SAMPLE_LOCATIONS_COMPATIBLE_DEPTH_BIT_EXT</code>, then the
multisample resolve operation uses the sample locations state specified in
the <code>sampleLocationsInfo</code> member of the element of the
<code>VkRenderPassSampleLocationsBeginInfoEXT</code>::<code>pPostSubpassSampleLocations</code>
for the subpass.</p>
</div>
<div class="paragraph">
<p>If <code>pDepthStencilAttachment</code> is <code>NULL</code>, or if its attachment index is
<code>VK_ATTACHMENT_UNUSED</code>, it indicates that no depth/stencil attachment
will be used in the subpass.</p>
</div>
<div class="paragraph">
<p>The contents of an attachment within the render area become undefined at
the start of a subpass <strong>S</strong> if all of the following conditions are true:</p>
</div>
<div class="ulist">
<ul>
<li>
<p>The attachment is used as a color, depth/stencil, or resolve attachment
in any subpass in the render pass.</p>
</li>
<li>
<p>There is a subpass <strong>S<sub>1</sub></strong> that uses or preserves the attachment, and a
subpass dependency from <strong>S<sub>1</sub></strong> to <strong>S</strong>.</p>
</li>
<li>
<p>The attachment is not used or preserved in subpass <strong>S</strong>.</p>
</li>
</ul>
</div>
<div class="paragraph">
<p>Once the contents of an attachment become undefined in subpass <strong>S</strong>, they
remain undefined for subpasses in subpass dependency chains starting with
subpass <strong>S</strong> until they are written again.
However, they remain valid for subpasses in other subpass dependency chains
starting with subpass <strong>S<sub>1</sub></strong> if those subpasses use or preserve the
attachment.</p>
</div>
<div class="sidebarblock">
<div class="content">
<div class="title">Valid Usage</div>
<div class="ulist">
<ul>
<li>
<p><a id="VUID-VkSubpassDescription-pipelineBindPoint-00844"></a>
<code>pipelineBindPoint</code> <strong class="purple">must</strong> be <code>VK_PIPELINE_BIND_POINT_GRAPHICS</code></p>
</li>
<li>
<p><a id="VUID-VkSubpassDescription-colorAttachmentCount-00845"></a>
<code>colorAttachmentCount</code> <strong class="purple">must</strong> be less than or equal to
<code>VkPhysicalDeviceLimits</code>::<code>maxColorAttachments</code></p>
</li>
<li>
<p><a id="VUID-VkSubpassDescription-loadOp-00846"></a>
If the first use of an attachment in this render pass is as an input
attachment, and the attachment is not also used as a color or
depth/stencil attachment in the same subpass, then <code>loadOp</code> <strong class="purple">must</strong>
not be <code>VK_ATTACHMENT_LOAD_OP_CLEAR</code></p>
</li>
<li>
<p><a id="VUID-VkSubpassDescription-pResolveAttachments-00847"></a>
If <code>pResolveAttachments</code> is not <code>NULL</code>, for each resolve attachment
that is not <code>VK_ATTACHMENT_UNUSED</code>, the corresponding color
attachment <strong class="purple">must</strong> not be <code>VK_ATTACHMENT_UNUSED</code></p>
</li>
<li>
<p><a id="VUID-VkSubpassDescription-pResolveAttachments-00848"></a>
If <code>pResolveAttachments</code> is not <code>NULL</code>, for each resolve attachment
that is not <code>VK_ATTACHMENT_UNUSED</code>, the corresponding color
attachment <strong class="purple">must</strong> not have a sample count of <code>VK_SAMPLE_COUNT_1_BIT</code></p>
</li>
<li>
<p><a id="VUID-VkSubpassDescription-pResolveAttachments-00849"></a>
If <code>pResolveAttachments</code> is not <code>NULL</code>, each resolve attachment that
is not <code>VK_ATTACHMENT_UNUSED</code> <strong class="purple">must</strong> have a sample count of
<code>VK_SAMPLE_COUNT_1_BIT</code></p>
</li>
<li>
<p><a id="VUID-VkSubpassDescription-pResolveAttachments-00850"></a>
If <code>pResolveAttachments</code> is not <code>NULL</code>, each resolve attachment that
is not <code>VK_ATTACHMENT_UNUSED</code> <strong class="purple">must</strong> have the same <a href="#VkFormat">VkFormat</a> as
its corresponding color attachment</p>
</li>
<li>
<p><a id="VUID-VkSubpassDescription-pColorAttachments-01417"></a>
All attachments in <code>pColorAttachments</code> that are not
<code>VK_ATTACHMENT_UNUSED</code> <strong class="purple">must</strong> have the same sample count</p>
</li>
<li>
<p><a id="VUID-VkSubpassDescription-pInputAttachments-02647"></a>
All attachments in <code>pInputAttachments</code> that are not
<code>VK_ATTACHMENT_UNUSED</code> <strong class="purple">must</strong> have formats whose features contain at
least one of <code>VK_FORMAT_FEATURE_COLOR_ATTACHMENT_BIT</code> or
<code>VK_FORMAT_FEATURE_DEPTH_STENCIL_ATTACHMENT_BIT</code>.</p>
</li>
<li>
<p><a id="VUID-VkSubpassDescription-pColorAttachments-02648"></a>
All attachments in <code>pColorAttachments</code> that are not
<code>VK_ATTACHMENT_UNUSED</code> <strong class="purple">must</strong> have formats whose features contain
<code>VK_FORMAT_FEATURE_COLOR_ATTACHMENT_BIT</code></p>
</li>
<li>
<p><a id="VUID-VkSubpassDescription-pResolveAttachments-02649"></a>
All attachments in <code>pResolveAttachments</code> that are not
<code>VK_ATTACHMENT_UNUSED</code> <strong class="purple">must</strong> have formats whose features contain
<code>VK_FORMAT_FEATURE_COLOR_ATTACHMENT_BIT</code></p>
</li>
<li>
<p><a id="VUID-VkSubpassDescription-pDepthStencilAttachment-02650"></a>
If <code>pDepthStencilAttachment</code> is not <code>NULL</code> and the attachment is not
<code>VK_ATTACHMENT_UNUSED</code> then it <strong class="purple">must</strong> have a format whose features
contain <code>VK_FORMAT_FEATURE_DEPTH_STENCIL_ATTACHMENT_BIT</code></p>
</li>
<li>
<p><a id="VUID-VkSubpassDescription-pColorAttachments-01506"></a>
If the <code>VK_AMD_mixed_attachment_samples</code> extension is enabled, and all
attachments in <code>pColorAttachments</code> that are not
<code>VK_ATTACHMENT_UNUSED</code> <strong class="purple">must</strong> have a sample count that is smaller
than or equal to the sample count of <code>pDepthStencilAttachment</code> if it
is not <code>VK_ATTACHMENT_UNUSED</code></p>
</li>
<li>
<p><a id="VUID-VkSubpassDescription-pDepthStencilAttachment-01418"></a>
If neither the <code>VK_AMD_mixed_attachment_samples</code> nor the
<code>VK_NV_framebuffer_mixed_samples</code> extensions are enabled, and if
<code>pDepthStencilAttachment</code> is not <code>VK_ATTACHMENT_UNUSED</code> and any
attachments in <code>pColorAttachments</code> are not
<code>VK_ATTACHMENT_UNUSED</code>, they <strong class="purple">must</strong> have the same sample count</p>
</li>
<li>
<p><a id="VUID-VkSubpassDescription-attachment-00853"></a>
The <code>attachment</code> member of each element of
<code>pPreserveAttachments</code> <strong class="purple">must</strong> not be <code>VK_ATTACHMENT_UNUSED</code></p>
</li>
<li>
<p><a id="VUID-VkSubpassDescription-pPreserveAttachments-00854"></a>
Each element of <code>pPreserveAttachments</code> <strong class="purple">must</strong> not also be an element
of any other member of the subpass description</p>
</li>
<li>
<p><a id="VUID-VkSubpassDescription-layout-02519"></a>
If any attachment is used by more than one <a href="#VkAttachmentReference">VkAttachmentReference</a>
member, then each use <strong class="purple">must</strong> use the same <code>layout</code></p>
</li>
<li>
<p><a id="VUID-VkSubpassDescription-flags-00856"></a>
If <code>flags</code> includes
<code>VK_SUBPASS_DESCRIPTION_PER_VIEW_POSITION_X_ONLY_BIT_NVX</code>, it <strong class="purple">must</strong>
also include <code>VK_SUBPASS_DESCRIPTION_PER_VIEW_ATTRIBUTES_BIT_NVX</code>.</p>
</li>
</ul>
</div>
</div>
</div>
<div class="sidebarblock">
<div class="content">
<div class="title">Valid Usage (Implicit)</div>
<div class="ulist">
<ul>
<li>
<p><a id="VUID-VkSubpassDescription-flags-parameter"></a> <code>flags</code> <strong class="purple">must</strong> be a valid combination of <a href="#VkSubpassDescriptionFlagBits">VkSubpassDescriptionFlagBits</a> values</p>
</li>
<li>
<p><a id="VUID-VkSubpassDescription-pipelineBindPoint-parameter"></a> <code>pipelineBindPoint</code> <strong class="purple">must</strong> be a valid <a href="#VkPipelineBindPoint">VkPipelineBindPoint</a> value</p>
</li>
<li>
<p><a id="VUID-VkSubpassDescription-pInputAttachments-parameter"></a> If <code>inputAttachmentCount</code> is not <code>0</code>, <code>pInputAttachments</code> <strong class="purple">must</strong> be a valid pointer to an array of <code>inputAttachmentCount</code> valid <code>VkAttachmentReference</code> structures</p>
</li>
<li>
<p><a id="VUID-VkSubpassDescription-pColorAttachments-parameter"></a> If <code>colorAttachmentCount</code> is not <code>0</code>, <code>pColorAttachments</code> <strong class="purple">must</strong> be a valid pointer to an array of <code>colorAttachmentCount</code> valid <code>VkAttachmentReference</code> structures</p>
</li>
<li>
<p><a id="VUID-VkSubpassDescription-pResolveAttachments-parameter"></a> If <code>colorAttachmentCount</code> is not <code>0</code>, and <code>pResolveAttachments</code> is not <code>NULL</code>, <code>pResolveAttachments</code> <strong class="purple">must</strong> be a valid pointer to an array of <code>colorAttachmentCount</code> valid <code>VkAttachmentReference</code> structures</p>
</li>
<li>
<p><a id="VUID-VkSubpassDescription-pDepthStencilAttachment-parameter"></a> If <code>pDepthStencilAttachment</code> is not <code>NULL</code>, <code>pDepthStencilAttachment</code> <strong class="purple">must</strong> be a valid pointer to a valid <code>VkAttachmentReference</code> structure</p>
</li>
<li>
<p><a id="VUID-VkSubpassDescription-pPreserveAttachments-parameter"></a> If <code>preserveAttachmentCount</code> is not <code>0</code>, <code>pPreserveAttachments</code> <strong class="purple">must</strong> be a valid pointer to an array of <code>preserveAttachmentCount</code> <code>uint32_t</code> values</p>
</li>
</ul>
</div>
</div>
</div>
</div>
<div class="sect3">
<h4 id="_see_also_759">See Also</h4>
<div class="paragraph">
<p><a href="#VkAttachmentReference">VkAttachmentReference</a>, <a href="#VkPipelineBindPoint">VkPipelineBindPoint</a>, <a href="#VkRenderPassCreateInfo">VkRenderPassCreateInfo</a>, <a href="#VkSubpassDescriptionFlags">VkSubpassDescriptionFlags</a></p>
</div>
</div>
<div class="sect3">
<h4 id="_document_notes_759">Document Notes</h4>
<div class="paragraph">
<p>For more information, see the Vulkan Specification at URL</p>
</div>
<div class="paragraph">
<p><a href="https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VkSubpassDescription" class="bare">https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VkSubpassDescription</a></p>
</div>
<div class="paragraph">
<p>This page is extracted from the Vulkan Specification.
Fixes and changes should be made to the Specification, not directly.</p>
</div>
<div style="page-break-after: always;"></div>
</div>
</div>
<div class="sect2">
<h3 id="_vksubpassdescription2khr3">VkSubpassDescription2KHR(3)</h3>
<div class="sect3">
<h4 id="_name_760">Name</h4>
<div class="paragraph">
<p>VkSubpassDescription2KHR - Structure specifying a subpass description</p>
</div>
</div>
<div class="sect3">
<h4 id="_c_specification_760">C Specification</h4>
<div class="paragraph">
<p>The <code>VkSubpassDescription2KHR</code> structure is defined as:</p>
</div>
<div id="VkSubpassDescription2KHR" class="listingblock">
<div class="content">
<pre class="highlight"><code class="language-c++" data-lang="c++">typedef struct VkSubpassDescription2KHR {
    VkStructureType                     sType;
    const void*                         pNext;
    VkSubpassDescriptionFlags           flags;
    VkPipelineBindPoint                 pipelineBindPoint;
    uint32_t                            viewMask;
    uint32_t                            inputAttachmentCount;
    const VkAttachmentReference2KHR*    pInputAttachments;
    uint32_t                            colorAttachmentCount;
    const VkAttachmentReference2KHR*    pColorAttachments;
    const VkAttachmentReference2KHR*    pResolveAttachments;
    const VkAttachmentReference2KHR*    pDepthStencilAttachment;
    uint32_t                            preserveAttachmentCount;
    const uint32_t*                     pPreserveAttachments;
} VkSubpassDescription2KHR;</code></pre>
</div>
</div>
</div>
<div class="sect3">
<h4 id="_members_397">Members</h4>
<div class="ulist">
<ul>
<li>
<p><code>sType</code> is the type of this structure.</p>
</li>
<li>
<p><code>pNext</code> is <code>NULL</code> or a pointer to an extension-specific structure.</p>
</li>
<li>
<p><code>flags</code> is a bitmask of <a href="#VkSubpassDescriptionFlagBits">VkSubpassDescriptionFlagBits</a>
specifying usage of the subpass.</p>
</li>
<li>
<p><code>pipelineBindPoint</code> is a <a href="#VkPipelineBindPoint">VkPipelineBindPoint</a> value specifying
the pipeline type supported for this subpass.</p>
</li>
<li>
<p><code>viewMask</code> is a bitfield of view indices describing which views
rendering is broadcast to in this subpass, when multiview is enabled.</p>
</li>
<li>
<p><code>inputAttachmentCount</code> is the number of input attachments.</p>
</li>
<li>
<p><code>pInputAttachments</code> is an array of <a href="#VkAttachmentReference2KHR">VkAttachmentReference2KHR</a>
structures defining the input attachments for this subpass and their
layouts.</p>
</li>
<li>
<p><code>colorAttachmentCount</code> is the number of color attachments.</p>
</li>
<li>
<p><code>pColorAttachments</code> is an array of <a href="#VkAttachmentReference2KHR">VkAttachmentReference2KHR</a>
structures defining the color attachments for this subpass and their
layouts.</p>
</li>
<li>
<p><code>pResolveAttachments</code> is an optional array of
<code>colorAttachmentCount</code> <a href="#VkAttachmentReference2KHR">VkAttachmentReference2KHR</a> structures
defining the resolve attachments for this subpass and their layouts.</p>
</li>
<li>
<p><code>pDepthStencilAttachment</code> is a pointer to a
<a href="#VkAttachmentReference2KHR">VkAttachmentReference2KHR</a> specifying the depth/stencil attachment
for this subpass and its layout.</p>
</li>
<li>
<p><code>preserveAttachmentCount</code> is the number of preserved attachments.</p>
</li>
<li>
<p><code>pPreserveAttachments</code> is an array of <code>preserveAttachmentCount</code>
render pass attachment indices identifying attachments that are not used
by this subpass, but whose contents <strong class="purple">must</strong> be preserved throughout the
subpass.</p>
</li>
</ul>
</div>
</div>
<div class="sect3">
<h4 id="_description_760">Description</h4>
<div class="paragraph">
<p>Parameters defined by this structure with the same name as those in
<a href="#VkSubpassDescription">VkSubpassDescription</a> have the identical effect to those parameters.</p>
</div>
<div class="paragraph">
<p><code>viewMask</code> has the same effect for the described subpass as
<a href="#VkRenderPassMultiviewCreateInfo">VkRenderPassMultiviewCreateInfo</a>::<code>pViewMasks</code> has on each
corresponding subpass.</p>
</div>
<div class="sidebarblock">
<div class="content">
<div class="title">Valid Usage</div>
<div class="ulist">
<ul>
<li>
<p><a id="VUID-VkSubpassDescription2KHR-pipelineBindPoint-03062"></a>
<code>pipelineBindPoint</code> <strong class="purple">must</strong> be <code>VK_PIPELINE_BIND_POINT_GRAPHICS</code></p>
</li>
<li>
<p><a id="VUID-VkSubpassDescription2KHR-colorAttachmentCount-03063"></a>
<code>colorAttachmentCount</code> <strong class="purple">must</strong> be less than or equal to
<code>VkPhysicalDeviceLimits</code>::<code>maxColorAttachments</code></p>
</li>
<li>
<p><a id="VUID-VkSubpassDescription2KHR-loadOp-03064"></a>
If the first use of an attachment in this render pass is as an input
attachment, and the attachment is not also used as a color or
depth/stencil attachment in the same subpass, then <code>loadOp</code> <strong class="purple">must</strong>
not be <code>VK_ATTACHMENT_LOAD_OP_CLEAR</code></p>
</li>
<li>
<p><a id="VUID-VkSubpassDescription2KHR-pResolveAttachments-03065"></a>
If <code>pResolveAttachments</code> is not <code>NULL</code>, for each resolve attachment
that does not have the value <code>VK_ATTACHMENT_UNUSED</code>, the
corresponding color attachment <strong class="purple">must</strong> not have the value
<code>VK_ATTACHMENT_UNUSED</code></p>
</li>
<li>
<p><a id="VUID-VkSubpassDescription2KHR-pResolveAttachments-03066"></a>
If <code>pResolveAttachments</code> is not <code>NULL</code>, for each resolve attachment
that is not <code>VK_ATTACHMENT_UNUSED</code>, the corresponding color
attachment <strong class="purple">must</strong> not have a sample count of <code>VK_SAMPLE_COUNT_1_BIT</code></p>
</li>
<li>
<p><a id="VUID-VkSubpassDescription2KHR-pResolveAttachments-03067"></a>
If <code>pResolveAttachments</code> is not <code>NULL</code>, each resolve attachment that
is not <code>VK_ATTACHMENT_UNUSED</code> <strong class="purple">must</strong> have a sample count of
<code>VK_SAMPLE_COUNT_1_BIT</code></p>
</li>
<li>
<p><a id="VUID-VkSubpassDescription2KHR-pResolveAttachments-03068"></a>
Any given element of <code>pResolveAttachments</code> <strong class="purple">must</strong> have the same
<a href="#VkFormat">VkFormat</a> as its corresponding color attachment</p>
</li>
<li>
<p><a id="VUID-VkSubpassDescription2KHR-pColorAttachments-03069"></a>
All attachments in <code>pColorAttachments</code> that are not
<code>VK_ATTACHMENT_UNUSED</code> <strong class="purple">must</strong> have the same sample count</p>
</li>
<li>
<p><a id="VUID-VkSubpassDescription2KHR-pColorAttachments-03070"></a>
If the <code>VK_AMD_mixed_attachment_samples</code> extension is enabled, all
attachments in <code>pColorAttachments</code> that are not
<code>VK_ATTACHMENT_UNUSED</code> <strong class="purple">must</strong> have a sample count that is smaller
than or equal to the sample count of <code>pDepthStencilAttachment</code> if it
is not <code>VK_ATTACHMENT_UNUSED</code></p>
</li>
<li>
<p><a id="VUID-VkSubpassDescription2KHR-pDepthStencilAttachment-03071"></a>
If neither the <code>VK_AMD_mixed_attachment_samples</code> nor the
<code>VK_NV_framebuffer_mixed_samples</code> extensions are enabled, and if
<code>pDepthStencilAttachment</code> is not <code>VK_ATTACHMENT_UNUSED</code> and any
attachments in <code>pColorAttachments</code> are not
<code>VK_ATTACHMENT_UNUSED</code>, they <strong class="purple">must</strong> have the same sample count</p>
</li>
<li>
<p><a id="VUID-VkSubpassDescription2KHR-attachment-03073"></a>
The <code>attachment</code> member of any element of <code>pPreserveAttachments</code>
<strong class="purple">must</strong> not be <code>VK_ATTACHMENT_UNUSED</code></p>
</li>
<li>
<p><a id="VUID-VkSubpassDescription2KHR-pPreserveAttachments-03074"></a>
Any given element of <code>pPreserveAttachments</code> <strong class="purple">must</strong> not also be an
element of any other member of the subpass description</p>
</li>
<li>
<p><a id="VUID-VkSubpassDescription2KHR-layout-02528"></a>
If any attachment is used by more than one <a href="#VkAttachmentReference">VkAttachmentReference</a>
member, then each use <strong class="purple">must</strong> use the same <code>layout</code></p>
</li>
<li>
<p><a id="VUID-VkSubpassDescription2KHR-flags-03076"></a>
If <code>flags</code> includes
<code>VK_SUBPASS_DESCRIPTION_PER_VIEW_POSITION_X_ONLY_BIT_NVX</code>, it <strong class="purple">must</strong>
also include <code>VK_SUBPASS_DESCRIPTION_PER_VIEW_ATTRIBUTES_BIT_NVX</code>.</p>
</li>
<li>
<p><a id="VUID-VkSubpassDescription2KHR-aspectMask-03175"></a>
The <code>aspectMask</code> member of any element of <code>pInputAttachments</code>
<strong class="purple">must</strong> be a valid combination of <a href="#VkImageAspectFlagBits">VkImageAspectFlagBits</a></p>
</li>
<li>
<p><a id="VUID-VkSubpassDescription2KHR-aspectMask-03176"></a>
The <code>aspectMask</code> member of any element of <code>pInputAttachments</code>
<strong class="purple">must</strong> not be <code>0</code></p>
</li>
<li>
<p><a id="VUID-VkSubpassDescription2KHR-aspectMask-02529"></a>
The <code>aspectMask</code> member of each element of <code>pInputAttachments</code>
<strong class="purple">must</strong> not include <code>VK_IMAGE_ASPECT_METADATA_BIT</code></p>
</li>
</ul>
</div>
</div>
</div>
<div class="sidebarblock">
<div class="content">
<div class="title">Valid Usage (Implicit)</div>
<div class="ulist">
<ul>
<li>
<p><a id="VUID-VkSubpassDescription2KHR-sType-sType"></a> <code>sType</code> <strong class="purple">must</strong> be <code>VK_STRUCTURE_TYPE_SUBPASS_DESCRIPTION_2_KHR</code></p>
</li>
<li>
<p><a id="VUID-VkSubpassDescription2KHR-flags-parameter"></a> <code>flags</code> <strong class="purple">must</strong> be a valid combination of <a href="#VkSubpassDescriptionFlagBits">VkSubpassDescriptionFlagBits</a> values</p>
</li>
<li>
<p><a id="VUID-VkSubpassDescription2KHR-pipelineBindPoint-parameter"></a> <code>pipelineBindPoint</code> <strong class="purple">must</strong> be a valid <a href="#VkPipelineBindPoint">VkPipelineBindPoint</a> value</p>
</li>
<li>
<p><a id="VUID-VkSubpassDescription2KHR-pInputAttachments-parameter"></a> If <code>inputAttachmentCount</code> is not <code>0</code>, <code>pInputAttachments</code> <strong class="purple">must</strong> be a valid pointer to an array of <code>inputAttachmentCount</code> valid <code>VkAttachmentReference2KHR</code> structures</p>
</li>
<li>
<p><a id="VUID-VkSubpassDescription2KHR-pColorAttachments-parameter"></a> If <code>colorAttachmentCount</code> is not <code>0</code>, <code>pColorAttachments</code> <strong class="purple">must</strong> be a valid pointer to an array of <code>colorAttachmentCount</code> valid <code>VkAttachmentReference2KHR</code> structures</p>
</li>
<li>
<p><a id="VUID-VkSubpassDescription2KHR-pResolveAttachments-parameter"></a> If <code>colorAttachmentCount</code> is not <code>0</code>, and <code>pResolveAttachments</code> is not <code>NULL</code>, <code>pResolveAttachments</code> <strong class="purple">must</strong> be a valid pointer to an array of <code>colorAttachmentCount</code> valid <code>VkAttachmentReference2KHR</code> structures</p>
</li>
<li>
<p><a id="VUID-VkSubpassDescription2KHR-pDepthStencilAttachment-parameter"></a> If <code>pDepthStencilAttachment</code> is not <code>NULL</code>, <code>pDepthStencilAttachment</code> <strong class="purple">must</strong> be a valid pointer to a valid <code>VkAttachmentReference2KHR</code> structure</p>
</li>
<li>
<p><a id="VUID-VkSubpassDescription2KHR-pPreserveAttachments-parameter"></a> If <code>preserveAttachmentCount</code> is not <code>0</code>, <code>pPreserveAttachments</code> <strong class="purple">must</strong> be a valid pointer to an array of <code>preserveAttachmentCount</code> <code>uint32_t</code> values</p>
</li>
</ul>
</div>
</div>
</div>
</div>
<div class="sect3">
<h4 id="_see_also_760">See Also</h4>
<div class="paragraph">
<p><a href="#VkAttachmentReference2KHR">VkAttachmentReference2KHR</a>, <a href="#VkPipelineBindPoint">VkPipelineBindPoint</a>, <a href="#VkRenderPassCreateInfo2KHR">VkRenderPassCreateInfo2KHR</a>, <a href="#VkStructureType">VkStructureType</a>, <a href="#VkSubpassDescriptionFlags">VkSubpassDescriptionFlags</a></p>
</div>
</div>
<div class="sect3">
<h4 id="_document_notes_760">Document Notes</h4>
<div class="paragraph">
<p>For more information, see the Vulkan Specification at URL</p>
</div>
<div class="paragraph">
<p><a href="https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VkSubpassDescription2KHR" class="bare">https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VkSubpassDescription2KHR</a></p>
</div>
<div class="paragraph">
<p>This page is extracted from the Vulkan Specification.
Fixes and changes should be made to the Specification, not directly.</p>
</div>
<div style="page-break-after: always;"></div>
</div>
</div>
<div class="sect2">
<h3 id="_vksubpassdescriptiondepthstencilresolvekhr3">VkSubpassDescriptionDepthStencilResolveKHR(3)</h3>
<div class="sect3">
<h4 id="_name_761">Name</h4>
<div class="paragraph">
<p>VkSubpassDescriptionDepthStencilResolveKHR - Structure specifying depth/stencil resolve operations for a subpass</p>
</div>
</div>
<div class="sect3">
<h4 id="_c_specification_761">C Specification</h4>
<div class="paragraph">
<p>If the <code>pNext</code> list of <code>VkSubpassDescription2KHR</code> includes a
<code>VkSubpassDescriptionDepthStencilResolveKHR</code> structure, then that
structure describes multisample resolve operations for the depth/stencil
attachment in a subpass.</p>
</div>
<div class="paragraph">
<p>The <code>VkSubpassDescriptionDepthStencilResolveKHR</code> structure is defined
as:</p>
</div>
<div id="VkSubpassDescriptionDepthStencilResolveKHR" class="listingblock">
<div class="content">
<pre class="highlight"><code class="language-c++" data-lang="c++">typedef struct VkSubpassDescriptionDepthStencilResolveKHR {
    VkStructureType                     sType;
    const void*                         pNext;
    VkResolveModeFlagBitsKHR            depthResolveMode;
    VkResolveModeFlagBitsKHR            stencilResolveMode;
    const VkAttachmentReference2KHR*    pDepthStencilResolveAttachment;
} VkSubpassDescriptionDepthStencilResolveKHR;</code></pre>
</div>
</div>
</div>
<div class="sect3">
<h4 id="_members_398">Members</h4>
<div class="ulist">
<ul>
<li>
<p><code>sType</code> is the type of this structure.</p>
</li>
<li>
<p><code>pNext</code> is <code>NULL</code> or a pointer to an extension-specific structure.</p>
</li>
<li>
<p><code>depthResolveMode</code> is a bitmask of <a href="#VkResolveModeFlagBitsKHR">VkResolveModeFlagBitsKHR</a>
describing the depth resolve mode.</p>
</li>
<li>
<p><code>stencilResolveMode</code> is a bitmask of <a href="#VkResolveModeFlagBitsKHR">VkResolveModeFlagBitsKHR</a>
describing the stencil resolve mode.</p>
</li>
<li>
<p><code>pDepthStencilResolveAttachment</code> is an optional
<a href="#VkAttachmentReference">VkAttachmentReference</a> structure defining the depth/stencil resolve
attachment for this subpass and its layout.</p>
</li>
</ul>
</div>
</div>
<div class="sect3">
<h4 id="_description_761">Description</h4>
<div class="sidebarblock">
<div class="content">
<div class="title">Valid Usage</div>
<div class="ulist">
<ul>
<li>
<p><a id="VUID-VkSubpassDescriptionDepthStencilResolveKHR-pDepthStencilResolveAttachment-03177"></a>
If <code>pDepthStencilResolveAttachment</code> is not <code>NULL</code> and does not have
the value <code>VK_ATTACHMENT_UNUSED</code>, <code>pDepthStencilAttachment</code>
<strong class="purple">must</strong> not have the value <code>VK_ATTACHMENT_UNUSED</code></p>
</li>
<li>
<p><a id="VUID-VkSubpassDescriptionDepthStencilResolveKHR-pDepthStencilResolveAttachment-03178"></a>
If <code>pDepthStencilResolveAttachment</code> is not <code>NULL</code> and does not have
the value <code>VK_ATTACHMENT_UNUSED</code>, <code>depthResolveMode</code> and
<code>stencilResolveMode</code> <strong class="purple">must</strong> not both be
<code>VK_RESOLVE_MODE_NONE_KHR</code></p>
</li>
<li>
<p><a id="VUID-VkSubpassDescriptionDepthStencilResolveKHR-pDepthStencilResolveAttachment-03179"></a>
If <code>pDepthStencilResolveAttachment</code> is not <code>NULL</code> and does not have
the value <code>VK_ATTACHMENT_UNUSED</code>, <code>pDepthStencilAttachment</code>
<strong class="purple">must</strong> not have a sample count of <code>VK_SAMPLE_COUNT_1_BIT</code></p>
</li>
<li>
<p><a id="VUID-VkSubpassDescriptionDepthStencilResolveKHR-pDepthStencilResolveAttachment-03180"></a>
If <code>pDepthStencilResolveAttachment</code> is not <code>NULL</code> and does not have
the value <code>VK_ATTACHMENT_UNUSED</code>,
<code>pDepthStencilResolveAttachment</code> <strong class="purple">must</strong> have a sample count of
<code>VK_SAMPLE_COUNT_1_BIT</code></p>
</li>
<li>
<p><a id="VUID-VkSubpassDescriptionDepthStencilResolveKHR-pDepthStencilResolveAttachment-02651"></a>
If <code>pDepthStencilResolveAttachment</code> is not <code>NULL</code> and does not have
the value <code>VK_ATTACHMENT_UNUSED</code> then it <strong class="purple">must</strong> have a format whose
features contain <code>VK_FORMAT_FEATURE_DEPTH_STENCIL_ATTACHMENT_BIT</code></p>
</li>
<li>
<p><a id="VUID-VkSubpassDescriptionDepthStencilResolveKHR-pDepthStencilResolveAttachment-03181"></a>
If the <a href="#VkFormat">VkFormat</a> of <code>pDepthStencilResolveAttachment</code> has a
depth component, then the <a href="#VkFormat">VkFormat</a> of
<code>pDepthStencilAttachment</code> <strong class="purple">must</strong> have a depth component with the same
number of bits and numerical type</p>
</li>
<li>
<p><a id="VUID-VkSubpassDescriptionDepthStencilResolveKHR-pDepthStencilResolveAttachment-03182"></a>
If the <a href="#VkFormat">VkFormat</a> of <code>pDepthStencilResolveAttachment</code> has a
stencil component, then the <a href="#VkFormat">VkFormat</a> of
<code>pDepthStencilAttachment</code> <strong class="purple">must</strong> have a stencil component with the
same number of bits and numerical type</p>
</li>
<li>
<p><a id="VUID-VkSubpassDescriptionDepthStencilResolveKHR-depthResolveMode-03183"></a>
The value of <code>depthResolveMode</code> <strong class="purple">must</strong> be one of the bits set in
<a href="#VkPhysicalDeviceDepthStencilResolvePropertiesKHR">VkPhysicalDeviceDepthStencilResolvePropertiesKHR</a>::<code>supportedDepthResolveModes</code>
or <code>VK_RESOLVE_MODE_NONE_KHR</code></p>
</li>
<li>
<p><a id="VUID-VkSubpassDescriptionDepthStencilResolveKHR-stencilResolveMode-03184"></a>
The value of <code>stencilResolveMode</code> <strong class="purple">must</strong> be one of the bits set in
<a href="#VkPhysicalDeviceDepthStencilResolvePropertiesKHR">VkPhysicalDeviceDepthStencilResolvePropertiesKHR</a>::<code>supportedStencilResolveModes</code>
or <code>VK_RESOLVE_MODE_NONE_KHR</code></p>
</li>
<li>
<p><a id="VUID-VkSubpassDescriptionDepthStencilResolveKHR-pDepthStencilResolveAttachment-03185"></a>
If the <a href="#VkFormat">VkFormat</a> of <code>pDepthStencilResolveAttachment</code> has both
depth and stencil components,
<a href="#VkPhysicalDeviceDepthStencilResolvePropertiesKHR">VkPhysicalDeviceDepthStencilResolvePropertiesKHR</a>::<code>independentResolve</code>
is <code>VK_FALSE</code>, and
<a href="#VkPhysicalDeviceDepthStencilResolvePropertiesKHR">VkPhysicalDeviceDepthStencilResolvePropertiesKHR</a>::<code>independentResolveNone</code>
is <code>VK_FALSE</code>, then the values of <code>depthResolveMode</code> and
<code>stencilResolveMode</code> <strong class="purple">must</strong> be identical</p>
</li>
<li>
<p><a id="VUID-VkSubpassDescriptionDepthStencilResolveKHR-pDepthStencilResolveAttachment-03186"></a>
If the <a href="#VkFormat">VkFormat</a> of <code>pDepthStencilResolveAttachment</code> has both
depth and stencil components,
<a href="#VkPhysicalDeviceDepthStencilResolvePropertiesKHR">VkPhysicalDeviceDepthStencilResolvePropertiesKHR</a>::<code>independentResolve</code>
is <code>VK_FALSE</code> and
<a href="#VkPhysicalDeviceDepthStencilResolvePropertiesKHR">VkPhysicalDeviceDepthStencilResolvePropertiesKHR</a>::<code>independentResolveNone</code>
is <code>VK_TRUE</code>, then the values of <code>depthResolveMode</code> and
<code>stencilResolveMode</code> <strong class="purple">must</strong> be identical or one of them <strong class="purple">must</strong> be
<code>VK_RESOLVE_MODE_NONE_KHR</code></p>
</li>
</ul>
</div>
</div>
</div>
<div class="sidebarblock">
<div class="content">
<div class="title">Valid Usage (Implicit)</div>
<div class="ulist">
<ul>
<li>
<p><a id="VUID-VkSubpassDescriptionDepthStencilResolveKHR-sType-sType"></a> <code>sType</code> <strong class="purple">must</strong> be <code>VK_STRUCTURE_TYPE_SUBPASS_DESCRIPTION_DEPTH_STENCIL_RESOLVE_KHR</code></p>
</li>
<li>
<p><a id="VUID-VkSubpassDescriptionDepthStencilResolveKHR-depthResolveMode-parameter"></a> <code>depthResolveMode</code> <strong class="purple">must</strong> be a valid <a href="#VkResolveModeFlagBitsKHR">VkResolveModeFlagBitsKHR</a> value</p>
</li>
<li>
<p><a id="VUID-VkSubpassDescriptionDepthStencilResolveKHR-stencilResolveMode-parameter"></a> <code>stencilResolveMode</code> <strong class="purple">must</strong> be a valid <a href="#VkResolveModeFlagBitsKHR">VkResolveModeFlagBitsKHR</a> value</p>
</li>
<li>
<p><a id="VUID-VkSubpassDescriptionDepthStencilResolveKHR-pDepthStencilResolveAttachment-parameter"></a> If <code>pDepthStencilResolveAttachment</code> is not <code>NULL</code>, <code>pDepthStencilResolveAttachment</code> <strong class="purple">must</strong> be a valid pointer to a valid <code>VkAttachmentReference2KHR</code> structure</p>
</li>
</ul>
</div>
</div>
</div>
</div>
<div class="sect3">
<h4 id="_see_also_761">See Also</h4>
<div class="paragraph">
<p><a href="#VkAttachmentReference2KHR">VkAttachmentReference2KHR</a>, <a href="#VkResolveModeFlagBitsKHR">VkResolveModeFlagBitsKHR</a>, <a href="#VkStructureType">VkStructureType</a></p>
</div>
</div>
<div class="sect3">
<h4 id="_document_notes_761">Document Notes</h4>
<div class="paragraph">
<p>For more information, see the Vulkan Specification at URL</p>
</div>
<div class="paragraph">
<p><a href="https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VkSubpassDescriptionDepthStencilResolveKHR" class="bare">https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VkSubpassDescriptionDepthStencilResolveKHR</a></p>
</div>
<div class="paragraph">
<p>This page is extracted from the Vulkan Specification.
Fixes and changes should be made to the Specification, not directly.</p>
</div>
<div style="page-break-after: always;"></div>
</div>
</div>
<div class="sect2">
<h3 id="_vksubpassendinfokhr3">VkSubpassEndInfoKHR(3)</h3>
<div class="sect3">
<h4 id="_name_762">Name</h4>
<div class="paragraph">
<p>VkSubpassEndInfoKHR - Structure specifying subpass end info</p>
</div>
</div>
<div class="sect3">
<h4 id="_c_specification_762">C Specification</h4>
<div class="paragraph">
<p>The <code>VkSubpassEndInfoKHR</code> structure is defined as:</p>
</div>
<div id="VkSubpassEndInfoKHR" class="listingblock">
<div class="content">
<pre class="highlight"><code class="language-c++" data-lang="c++">typedef struct VkSubpassEndInfoKHR {
    VkStructureType    sType;
    const void*        pNext;
} VkSubpassEndInfoKHR;</code></pre>
</div>
</div>
</div>
<div class="sect3">
<h4 id="_members_399">Members</h4>
<div class="ulist">
<ul>
<li>
<p><code>sType</code> is the type of this structure.</p>
</li>
<li>
<p><code>pNext</code> is <code>NULL</code> or a pointer to an extension-specific structure.</p>
</li>
</ul>
</div>
</div>
<div class="sect3">
<h4 id="_description_762">Description</h4>
<div class="sidebarblock">
<div class="content">
<div class="title">Valid Usage (Implicit)</div>
<div class="ulist">
<ul>
<li>
<p><a id="VUID-VkSubpassEndInfoKHR-sType-sType"></a> <code>sType</code> <strong class="purple">must</strong> be <code>VK_STRUCTURE_TYPE_SUBPASS_END_INFO_KHR</code></p>
</li>
<li>
<p><a id="VUID-VkSubpassEndInfoKHR-pNext-pNext"></a> <code>pNext</code> <strong class="purple">must</strong> be <code>NULL</code></p>
</li>
</ul>
</div>
</div>
</div>
</div>
<div class="sect3">
<h4 id="_see_also_762">See Also</h4>
<div class="paragraph">
<p><a href="#VkStructureType">VkStructureType</a>, <a href="#vkCmdEndRenderPass2KHR">vkCmdEndRenderPass2KHR</a>, <a href="#vkCmdNextSubpass2KHR">vkCmdNextSubpass2KHR</a></p>
</div>
</div>
<div class="sect3">
<h4 id="_document_notes_762">Document Notes</h4>
<div class="paragraph">
<p>For more information, see the Vulkan Specification at URL</p>
</div>
<div class="paragraph">
<p><a href="https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VkSubpassEndInfoKHR" class="bare">https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VkSubpassEndInfoKHR</a></p>
</div>
<div class="paragraph">
<p>This page is extracted from the Vulkan Specification.
Fixes and changes should be made to the Specification, not directly.</p>
</div>
<div style="page-break-after: always;"></div>
</div>
</div>
<div class="sect2">
<h3 id="_vksubpasssamplelocationsext3">VkSubpassSampleLocationsEXT(3)</h3>
<div class="sect3">
<h4 id="_name_763">Name</h4>
<div class="paragraph">
<p>VkSubpassSampleLocationsEXT - Structure specifying the sample locations state to use for layout transitions of attachments performed after a given subpass</p>
</div>
</div>
<div class="sect3">
<h4 id="_c_specification_763">C Specification</h4>
<div class="paragraph">
<p>The <code>VkSubpassSampleLocationsEXT</code> structure is defined as:</p>
</div>
<div id="VkSubpassSampleLocationsEXT" class="listingblock">
<div class="content">
<pre class="highlight"><code class="language-c++" data-lang="c++">typedef struct VkSubpassSampleLocationsEXT {
    uint32_t                    subpassIndex;
    VkSampleLocationsInfoEXT    sampleLocationsInfo;
} VkSubpassSampleLocationsEXT;</code></pre>
</div>
</div>
</div>
<div class="sect3">
<h4 id="_members_400">Members</h4>
<div class="ulist">
<ul>
<li>
<p><code>subpassIndex</code> is the index of the subpass for which the sample
locations state is provided.</p>
</li>
<li>
<p><code>sampleLocationsInfo</code> is the sample locations state to use for the
layout transition of the depth/stencil attachment away from the image
layout the attachment is used with in the subpass specified in
<code>subpassIndex</code>.</p>
</li>
</ul>
</div>
</div>
<div class="sect3">
<h4 id="_description_763">Description</h4>
<div class="paragraph">
<p>If the image referenced by the depth/stencil attachment used in the subpass
identified by <code>subpassIndex</code> was not created with
<code>VK_IMAGE_CREATE_SAMPLE_LOCATIONS_COMPATIBLE_DEPTH_BIT_EXT</code> or if the
subpass does not use a depth/stencil attachment, and
<a href="#VkPhysicalDeviceSampleLocationsPropertiesEXT">VkPhysicalDeviceSampleLocationsPropertiesEXT</a>::<code>variableSampleLocations</code>
is <code>VK_TRUE</code> then the values specified in <code>sampleLocationsInfo</code> are
ignored.</p>
</div>
<div class="sidebarblock">
<div class="content">
<div class="title">Valid Usage</div>
<div class="ulist">
<ul>
<li>
<p><a id="VUID-VkSubpassSampleLocationsEXT-subpassIndex-01532"></a>
<code>subpassIndex</code> <strong class="purple">must</strong> be less than the <code>subpassCount</code> specified
in <a href="#VkRenderPassCreateInfo">VkRenderPassCreateInfo</a> the render pass specified by
<a href="#VkRenderPassBeginInfo">VkRenderPassBeginInfo</a>::<code>renderPass</code> was created with</p>
</li>
</ul>
</div>
</div>
</div>
<div class="sidebarblock">
<div class="content">
<div class="title">Valid Usage (Implicit)</div>
<div class="ulist">
<ul>
<li>
<p><a id="VUID-VkSubpassSampleLocationsEXT-sampleLocationsInfo-parameter"></a> <code>sampleLocationsInfo</code> <strong class="purple">must</strong> be a valid <code>VkSampleLocationsInfoEXT</code> structure</p>
</li>
</ul>
</div>
</div>
</div>
</div>
<div class="sect3">
<h4 id="_see_also_763">See Also</h4>
<div class="paragraph">
<p><a href="#VkRenderPassSampleLocationsBeginInfoEXT">VkRenderPassSampleLocationsBeginInfoEXT</a>, <a href="#VkSampleLocationsInfoEXT">VkSampleLocationsInfoEXT</a></p>
</div>
</div>
<div class="sect3">
<h4 id="_document_notes_763">Document Notes</h4>
<div class="paragraph">
<p>For more information, see the Vulkan Specification at URL</p>
</div>
<div class="paragraph">
<p><a href="https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VkSubpassSampleLocationsEXT" class="bare">https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VkSubpassSampleLocationsEXT</a></p>
</div>
<div class="paragraph">
<p>This page is extracted from the Vulkan Specification.
Fixes and changes should be made to the Specification, not directly.</p>
</div>
<div style="page-break-after: always;"></div>
</div>
</div>
<div class="sect2">
<h3 id="_vksubresourcelayout3">VkSubresourceLayout(3)</h3>
<div class="sect3">
<h4 id="_name_764">Name</h4>
<div class="paragraph">
<p>VkSubresourceLayout - Structure specifying subresource layout</p>
</div>
</div>
<div class="sect3">
<h4 id="_c_specification_764">C Specification</h4>
<div class="paragraph">
<p>Information about the layout of the image subresource is returned in a
<code>VkSubresourceLayout</code> structure:</p>
</div>
<div id="VkSubresourceLayout" class="listingblock">
<div class="content">
<pre class="highlight"><code class="language-c++" data-lang="c++">typedef struct VkSubresourceLayout {
    VkDeviceSize    offset;
    VkDeviceSize    size;
    VkDeviceSize    rowPitch;
    VkDeviceSize    arrayPitch;
    VkDeviceSize    depthPitch;
} VkSubresourceLayout;</code></pre>
</div>
</div>
</div>
<div class="sect3">
<h4 id="_members_401">Members</h4>
<div class="ulist">
<ul>
<li>
<p><code>offset</code> is the byte offset from the start of the image
or the plane
where the image subresource begins.</p>
</li>
<li>
<p><code>size</code> is the size in bytes of the image subresource.
<code>size</code> includes any extra memory that is required based on
<code>rowPitch</code>.</p>
</li>
<li>
<p><code>rowPitch</code> describes the number of bytes between each row of texels
in an image.</p>
</li>
<li>
<p><code>arrayPitch</code> describes the number of bytes between each array layer
of an image.</p>
</li>
<li>
<p><code>depthPitch</code> describes the number of bytes between each slice of 3D
image.</p>
</li>
</ul>
</div>
</div>
<div class="sect3">
<h4 id="_description_764">Description</h4>
<div class="paragraph">
<p>If the image is <a href="vkspec.html#glossary-linear-resource">linear</a>, then <code>rowPitch</code>,
<code>arrayPitch</code> and <code>depthPitch</code> describe the layout of the image
subresource in linear memory.
For uncompressed formats, <code>rowPitch</code> is the number of bytes between
texels with the same x coordinate in adjacent rows (y coordinates differ by
one).
<code>arrayPitch</code> is the number of bytes between texels with the same x and y
coordinate in adjacent array layers of the image (array layer values differ
by one).
<code>depthPitch</code> is the number of bytes between texels with the same x and y
coordinate in adjacent slices of a 3D image (z coordinates differ by one).
Expressed as an addressing formula, the starting byte of a texel in the
image subresource has address:</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="highlight"><code class="language-c" data-lang="c">// (x,y,z,layer) are in texel coordinates
address(x,y,z,layer) = layer*arrayPitch + z*depthPitch + y*rowPitch + x*elementSize + offset</code></pre>
</div>
</div>
<div class="paragraph">
<p>For compressed formats, the <code>rowPitch</code> is the number of bytes between
compressed texel blocks in adjacent rows.
<code>arrayPitch</code> is the number of bytes between compressed texel blocks in
adjacent array layers.
<code>depthPitch</code> is the number of bytes between compressed texel blocks in
adjacent slices of a 3D image.</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="highlight"><code class="language-c" data-lang="c">// (x,y,z,layer) are in compressed texel block coordinates
address(x,y,z,layer) = layer*arrayPitch + z*depthPitch + y*rowPitch + x*compressedTexelBlockByteSize + offset;</code></pre>
</div>
</div>
<div class="paragraph">
<p>The value of <code>arrayPitch</code> is undefined for images that were not created
as arrays.
<code>depthPitch</code> is defined only for 3D images.</p>
</div>
<div class="paragraph">
<p>If the image has a
<em>single-plane</em>
color format
and its tiling is <code>VK_IMAGE_TILING_LINEAR</code>
, then the <code>aspectMask</code> member of <code>VkImageSubresource</code> <strong class="purple">must</strong> be
<code>VK_IMAGE_ASPECT_COLOR_BIT</code>.</p>
</div>
<div class="paragraph">
<p>If the image has a depth/stencil format
and its tiling is <code>VK_IMAGE_TILING_LINEAR</code>
, then <code>aspectMask</code> <strong class="purple">must</strong> be either <code>VK_IMAGE_ASPECT_DEPTH_BIT</code> or
<code>VK_IMAGE_ASPECT_STENCIL_BIT</code>.
On implementations that store depth and stencil aspects separately, querying
each of these image subresource layouts will return a different <code>offset</code>
and <code>size</code> representing the region of memory used for that aspect.
On implementations that store depth and stencil aspects interleaved, the
same <code>offset</code> and <code>size</code> are returned and represent the interleaved
memory allocation.</p>
</div>
<div class="paragraph">
<p>If the image has a <a href="vkspec.html#formats-requiring-sampler-ycbcr-conversion">multi-planar
format</a>
and its tiling is <code>VK_IMAGE_TILING_LINEAR</code>
, then the <code>aspectMask</code> member of <code>VkImageSubresource</code> <strong class="purple">must</strong> be
<code>VK_IMAGE_ASPECT_PLANE_0_BIT</code>, <code>VK_IMAGE_ASPECT_PLANE_1_BIT</code>, or
(for 3-plane formats only) <code>VK_IMAGE_ASPECT_PLANE_2_BIT</code>.
Querying each of these image subresource layouts will return a different
<code>offset</code> and <code>size</code> representing the region of memory used for that
plane.
If the image is <em>disjoint</em>, then the <code>offset</code> is relative to the base
address of the plane.
If the image is <em>non-disjoint</em>, then the <code>offset</code> is relative to the
base address of the image.</p>
</div>
<div class="paragraph">
<p>If the image&#8217;s tiling is <code>VK_IMAGE_TILING_DRM_FORMAT_MODIFIER_EXT</code>, then
the <code>aspectMask</code> member of <code>VkImageSubresource</code> <strong class="purple">must</strong> be one of
<code>VK_IMAGE_ASPECT_MEMORY_PLANE_i_BIT_EXT</code>, where the maximum allowed
plane index <code>i</code> is defined by the
<a href="vkspec.html#VkDrmFormatModifierPropertiesEXT"><code>drmFormatModifierPlaneCount</code></a>
associated with the image&#8217;s <a href="vkspec.html#VkImageCreateInfo"><code>format</code></a> and
<a href="vkspec.html#glossary-drm-format-modifier">modifier</a>.
The memory range used by the subresource is described by <code>offset</code> and
<code>size</code>.
If the image is <em>disjoint</em>, then the <code>offset</code> is relative to the base
address of the <em>memory plane</em>.
If the image is <em>non-disjoint</em>, then the <code>offset</code> is relative to the
base address of the image.
If the image is <a href="vkspec.html#glossary-linear-resource">non-linear</a>, then
<code>rowPitch</code>, <code>arrayPitch</code>, and <code>depthPitch</code> have an
implementation-dependent meaning.</p>
</div>
</div>
<div class="sect3">
<h4 id="_see_also_764">See Also</h4>
<div class="paragraph">
<p><code>VkDeviceSize</code>, <a href="#VkImageDrmFormatModifierExplicitCreateInfoEXT">VkImageDrmFormatModifierExplicitCreateInfoEXT</a>, <a href="#vkGetImageSubresourceLayout">vkGetImageSubresourceLayout</a></p>
</div>
</div>
<div class="sect3">
<h4 id="_document_notes_764">Document Notes</h4>
<div class="paragraph">
<p>For more information, see the Vulkan Specification at URL</p>
</div>
<div class="paragraph">
<p><a href="https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VkSubresourceLayout" class="bare">https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VkSubresourceLayout</a></p>
</div>
<div class="paragraph">
<p>This page is extracted from the Vulkan Specification.
Fixes and changes should be made to the Specification, not directly.</p>
</div>
<div style="page-break-after: always;"></div>
</div>
</div>
<div class="sect2">
<h3 id="_vksurfacecapabilities2ext3">VkSurfaceCapabilities2EXT(3)</h3>
<div class="sect3">
<h4 id="_name_765">Name</h4>
<div class="paragraph">
<p>VkSurfaceCapabilities2EXT - Structure describing capabilities of a surface</p>
</div>
</div>
<div class="sect3">
<h4 id="_c_specification_765">C Specification</h4>
<div class="paragraph">
<p>The <code>VkSurfaceCapabilities2EXT</code> structure is defined as:</p>
</div>
<div id="VkSurfaceCapabilities2EXT" class="listingblock">
<div class="content">
<pre class="highlight"><code class="language-c++" data-lang="c++">typedef struct VkSurfaceCapabilities2EXT {
    VkStructureType                  sType;
    void*                            pNext;
    uint32_t                         minImageCount;
    uint32_t                         maxImageCount;
    VkExtent2D                       currentExtent;
    VkExtent2D                       minImageExtent;
    VkExtent2D                       maxImageExtent;
    uint32_t                         maxImageArrayLayers;
    VkSurfaceTransformFlagsKHR       supportedTransforms;
    VkSurfaceTransformFlagBitsKHR    currentTransform;
    VkCompositeAlphaFlagsKHR         supportedCompositeAlpha;
    VkImageUsageFlags                supportedUsageFlags;
    VkSurfaceCounterFlagsEXT         supportedSurfaceCounters;
} VkSurfaceCapabilities2EXT;</code></pre>
</div>
</div>
</div>
<div class="sect3">
<h4 id="_members_402">Members</h4>
<div class="paragraph">
<p>All members of <code>VkSurfaceCapabilities2EXT</code> are identical to the
corresponding members of <a href="#VkSurfaceCapabilitiesKHR">VkSurfaceCapabilitiesKHR</a> where one exists.
The remaining members are:</p>
</div>
</div>
<div class="sect3">
<h4 id="_description_765">Description</h4>
<div class="ulist">
<ul>
<li>
<p><code>sType</code> is the type of this structure.</p>
</li>
<li>
<p><code>pNext</code> is <code>NULL</code> or a pointer to an extension-specific structure.</p>
</li>
<li>
<p><code>supportedSurfaceCounters</code> is a bitmask of
<a href="#VkSurfaceCounterFlagBitsEXT">VkSurfaceCounterFlagBitsEXT</a> indicating the supported surface
counter types.</p>
</li>
</ul>
</div>
<div class="sidebarblock">
<div class="content">
<div class="title">Valid Usage</div>
<div class="ulist">
<ul>
<li>
<p><a id="VUID-VkSurfaceCapabilities2EXT-supportedSurfaceCounters-01246"></a>
<code>supportedSurfaceCounters</code> <strong class="purple">must</strong> not include
<code>VK_SURFACE_COUNTER_VBLANK_EXT</code> unless the surface queried is a
<a href="vkspec.html#wsi-display-surfaces">display surface</a>.</p>
</li>
</ul>
</div>
</div>
</div>
<div class="sidebarblock">
<div class="content">
<div class="title">Valid Usage (Implicit)</div>
<div class="ulist">
<ul>
<li>
<p><a id="VUID-VkSurfaceCapabilities2EXT-sType-sType"></a> <code>sType</code> <strong class="purple">must</strong> be <code>VK_STRUCTURE_TYPE_SURFACE_CAPABILITIES_2_EXT</code></p>
</li>
<li>
<p><a id="VUID-VkSurfaceCapabilities2EXT-pNext-pNext"></a> <code>pNext</code> <strong class="purple">must</strong> be <code>NULL</code></p>
</li>
</ul>
</div>
</div>
</div>
</div>
<div class="sect3">
<h4 id="_see_also_765">See Also</h4>
<div class="paragraph">
<p><a href="#VkCompositeAlphaFlagsKHR">VkCompositeAlphaFlagsKHR</a>, <a href="#VkExtent2D">VkExtent2D</a>, <a href="#VkImageUsageFlags">VkImageUsageFlags</a>, <a href="#VkStructureType">VkStructureType</a>, <a href="#VkSurfaceCounterFlagsEXT">VkSurfaceCounterFlagsEXT</a>, <a href="#VkSurfaceTransformFlagBitsKHR">VkSurfaceTransformFlagBitsKHR</a>, <a href="#VkSurfaceTransformFlagsKHR">VkSurfaceTransformFlagsKHR</a>, <a href="#vkGetPhysicalDeviceSurfaceCapabilities2EXT">vkGetPhysicalDeviceSurfaceCapabilities2EXT</a></p>
</div>
</div>
<div class="sect3">
<h4 id="_document_notes_765">Document Notes</h4>
<div class="paragraph">
<p>For more information, see the Vulkan Specification at URL</p>
</div>
<div class="paragraph">
<p><a href="https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VkSurfaceCapabilities2EXT" class="bare">https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VkSurfaceCapabilities2EXT</a></p>
</div>
<div class="paragraph">
<p>This page is extracted from the Vulkan Specification.
Fixes and changes should be made to the Specification, not directly.</p>
</div>
<div style="page-break-after: always;"></div>
</div>
</div>
<div class="sect2">
<h3 id="_vksurfacecapabilities2khr3">VkSurfaceCapabilities2KHR(3)</h3>
<div class="sect3">
<h4 id="_name_766">Name</h4>
<div class="paragraph">
<p>VkSurfaceCapabilities2KHR - Structure describing capabilities of a surface</p>
</div>
</div>
<div class="sect3">
<h4 id="_c_specification_766">C Specification</h4>
<div class="paragraph">
<p>The <code>VkSurfaceCapabilities2KHR</code> structure is defined as:</p>
</div>
<div id="VkSurfaceCapabilities2KHR" class="listingblock">
<div class="content">
<pre class="highlight"><code class="language-c++" data-lang="c++">typedef struct VkSurfaceCapabilities2KHR {
    VkStructureType             sType;
    void*                       pNext;
    VkSurfaceCapabilitiesKHR    surfaceCapabilities;
} VkSurfaceCapabilities2KHR;</code></pre>
</div>
</div>
</div>
<div class="sect3">
<h4 id="_members_403">Members</h4>
<div class="ulist">
<ul>
<li>
<p><code>sType</code> is the type of this structure.</p>
</li>
<li>
<p><code>pNext</code> is <code>NULL</code> or a pointer to an extension-specific structure.</p>
</li>
<li>
<p><code>surfaceCapabilities</code> is a structure of type
<a href="#VkSurfaceCapabilitiesKHR">VkSurfaceCapabilitiesKHR</a> describing the capabilities of the
specified surface.</p>
</li>
</ul>
</div>
</div>
<div class="sect3">
<h4 id="_description_766">Description</h4>
<div class="sidebarblock">
<div class="content">
<div class="title">Valid Usage (Implicit)</div>
<div class="ulist">
<ul>
<li>
<p><a id="VUID-VkSurfaceCapabilities2KHR-sType-sType"></a> <code>sType</code> <strong class="purple">must</strong> be <code>VK_STRUCTURE_TYPE_SURFACE_CAPABILITIES_2_KHR</code></p>
</li>
<li>
<p><a id="VUID-VkSurfaceCapabilities2KHR-pNext-pNext"></a> Each <code>pNext</code> member of any structure (including this one) in the <code>pNext</code> chain <strong class="purple">must</strong> be either <code>NULL</code> or a pointer to a valid instance of <a href="#VkDisplayNativeHdrSurfaceCapabilitiesAMD">VkDisplayNativeHdrSurfaceCapabilitiesAMD</a>, <a href="#VkSharedPresentSurfaceCapabilitiesKHR">VkSharedPresentSurfaceCapabilitiesKHR</a>, <a href="#VkSurfaceCapabilitiesFullScreenExclusiveEXT">VkSurfaceCapabilitiesFullScreenExclusiveEXT</a>, or <a href="#VkSurfaceProtectedCapabilitiesKHR">VkSurfaceProtectedCapabilitiesKHR</a></p>
</li>
<li>
<p><a id="VUID-VkSurfaceCapabilities2KHR-sType-unique"></a> Each <code>sType</code> member in the <code>pNext</code> chain <strong class="purple">must</strong> be unique</p>
</li>
</ul>
</div>
</div>
</div>
</div>
<div class="sect3">
<h4 id="_see_also_766">See Also</h4>
<div class="paragraph">
<p><a href="#VkStructureType">VkStructureType</a>, <a href="#VkSurfaceCapabilitiesKHR">VkSurfaceCapabilitiesKHR</a>, <a href="#vkGetPhysicalDeviceSurfaceCapabilities2KHR">vkGetPhysicalDeviceSurfaceCapabilities2KHR</a></p>
</div>
</div>
<div class="sect3">
<h4 id="_document_notes_766">Document Notes</h4>
<div class="paragraph">
<p>For more information, see the Vulkan Specification at URL</p>
</div>
<div class="paragraph">
<p><a href="https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VkSurfaceCapabilities2KHR" class="bare">https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VkSurfaceCapabilities2KHR</a></p>
</div>
<div class="paragraph">
<p>This page is extracted from the Vulkan Specification.
Fixes and changes should be made to the Specification, not directly.</p>
</div>
<div style="page-break-after: always;"></div>
</div>
</div>
<div class="sect2">
<h3 id="_vksurfacecapabilitiesfullscreenexclusiveext3">VkSurfaceCapabilitiesFullScreenExclusiveEXT(3)</h3>
<div class="sect3">
<h4 id="_name_767">Name</h4>
<div class="paragraph">
<p>VkSurfaceCapabilitiesFullScreenExclusiveEXT - Structure describing full screen exclusive capabilities of a surface</p>
</div>
</div>
<div class="sect3">
<h4 id="_c_specification_767">C Specification</h4>
<div class="paragraph">
<p>The <code>VkSurfaceCapabilitiesFullScreenExclusiveEXT</code> structure is defined
as:</p>
</div>
<div id="VkSurfaceCapabilitiesFullScreenExclusiveEXT" class="listingblock">
<div class="content">
<pre class="highlight"><code class="language-c++" data-lang="c++">typedef struct VkSurfaceCapabilitiesFullScreenExclusiveEXT {
    VkStructureType    sType;
    void*              pNext;
    VkBool32           fullScreenExclusiveSupported;
} VkSurfaceCapabilitiesFullScreenExclusiveEXT;</code></pre>
</div>
</div>
</div>
<div class="sect3">
<h4 id="_members_404">Members</h4>
<div class="ulist">
<ul>
<li>
<p><code>sType</code> is the type of this structure.</p>
</li>
<li>
<p><code>pNext</code> is <code>NULL</code> or a pointer to an extension-specific structure.</p>
</li>
<li>
<p><code>fullScreenExclusiveControlSupported</code> is a boolean describing
whether the surface is able to make use of exclusive full-screen access.</p>
</li>
</ul>
</div>
</div>
<div class="sect3">
<h4 id="_description_767">Description</h4>
<div class="paragraph">
<p>This structure <strong class="purple">can</strong> be included in the <code>pNext</code> chain of
<a href="#VkSurfaceCapabilities2KHR">VkSurfaceCapabilities2KHR</a> to determine support for exclusive
full-screen access.
If <code>fullScreenExclusiveSupported</code> is <code>VK_FALSE</code>, it indicates that
exclusive full-screen access is not obtainable for this surface.</p>
</div>
<div class="paragraph">
<p>Applications <strong class="purple">must</strong> not attempt to create swapchains with
<code>VK_FULL_SCREEN_EXCLUSIVE_APPLICATION_CONTROLLED_EXT</code> set if
<code>fullScreenExclusiveSupported</code> is <code>VK_FALSE</code>.</p>
</div>
<div class="sidebarblock">
<div class="content">
<div class="title">Valid Usage (Implicit)</div>
<div class="ulist">
<ul>
<li>
<p><a id="VUID-VkSurfaceCapabilitiesFullScreenExclusiveEXT-sType-sType"></a> <code>sType</code> <strong class="purple">must</strong> be <code>VK_STRUCTURE_TYPE_SURFACE_CAPABILITIES_FULL_SCREEN_EXCLUSIVE_EXT</code></p>
</li>
</ul>
</div>
</div>
</div>
</div>
<div class="sect3">
<h4 id="_see_also_767">See Also</h4>
<div class="paragraph">
<p><code>VkBool32</code>, <a href="#VkStructureType">VkStructureType</a></p>
</div>
</div>
<div class="sect3">
<h4 id="_document_notes_767">Document Notes</h4>
<div class="paragraph">
<p>For more information, see the Vulkan Specification at URL</p>
</div>
<div class="paragraph">
<p><a href="https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VkSurfaceCapabilitiesFullScreenExclusiveEXT" class="bare">https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VkSurfaceCapabilitiesFullScreenExclusiveEXT</a></p>
</div>
<div class="paragraph">
<p>This page is extracted from the Vulkan Specification.
Fixes and changes should be made to the Specification, not directly.</p>
</div>
<div style="page-break-after: always;"></div>
</div>
</div>
<div class="sect2">
<h3 id="_vksurfacecapabilitieskhr3">VkSurfaceCapabilitiesKHR(3)</h3>
<div class="sect3">
<h4 id="_name_768">Name</h4>
<div class="paragraph">
<p>VkSurfaceCapabilitiesKHR - Structure describing capabilities of a surface</p>
</div>
</div>
<div class="sect3">
<h4 id="_c_specification_768">C Specification</h4>
<div class="paragraph">
<p>The <code>VkSurfaceCapabilitiesKHR</code> structure is defined as:</p>
</div>
<div id="VkSurfaceCapabilitiesKHR" class="listingblock">
<div class="content">
<pre class="highlight"><code class="language-c++" data-lang="c++">typedef struct VkSurfaceCapabilitiesKHR {
    uint32_t                         minImageCount;
    uint32_t                         maxImageCount;
    VkExtent2D                       currentExtent;
    VkExtent2D                       minImageExtent;
    VkExtent2D                       maxImageExtent;
    uint32_t                         maxImageArrayLayers;
    VkSurfaceTransformFlagsKHR       supportedTransforms;
    VkSurfaceTransformFlagBitsKHR    currentTransform;
    VkCompositeAlphaFlagsKHR         supportedCompositeAlpha;
    VkImageUsageFlags                supportedUsageFlags;
} VkSurfaceCapabilitiesKHR;</code></pre>
</div>
</div>
</div>
<div class="sect3">
<h4 id="_members_405">Members</h4>
<div class="ulist">
<ul>
<li>
<p><code>minImageCount</code> is the minimum number of images the specified device
supports for a swapchain created for the surface, and will be at least
one.</p>
</li>
<li>
<p><code>maxImageCount</code> is the maximum number of images the specified device
supports for a swapchain created for the surface, and will be either 0,
or greater than or equal to <code>minImageCount</code>.
A value of 0 means that there is no limit on the number of images,
though there <strong class="purple">may</strong> be limits related to the total amount of memory used
by presentable images.</p>
</li>
<li>
<p><code>currentExtent</code> is the current width and height of the surface, or
the special value <span class="eq">(0xFFFFFFFF, 0xFFFFFFFF)</span> indicating that the
surface size will be determined by the extent of a swapchain targeting
the surface.</p>
</li>
<li>
<p><code>minImageExtent</code> contains the smallest valid swapchain extent for
the surface on the specified device.
The <code>width</code> and <code>height</code> of the extent will each be less than or
equal to the corresponding <code>width</code> and <code>height</code> of
<code>currentExtent</code>, unless <code>currentExtent</code> has the special value
described above.</p>
</li>
<li>
<p><code>maxImageExtent</code> contains the largest valid swapchain extent for the
surface on the specified device.
The <code>width</code> and <code>height</code> of the extent will each be greater than
or equal to the corresponding <code>width</code> and <code>height</code> of
<code>minImageExtent</code>.
The <code>width</code> and <code>height</code> of the extent will each be greater than
or equal to the corresponding <code>width</code> and <code>height</code> of
<code>currentExtent</code>, unless <code>currentExtent</code> has the special value
described above.</p>
</li>
<li>
<p><code>maxImageArrayLayers</code> is the maximum number of layers presentable
images <strong class="purple">can</strong> have for a swapchain created for this device and surface,
and will be at least one.</p>
</li>
<li>
<p><code>supportedTransforms</code> is a bitmask of
<a href="#VkSurfaceTransformFlagBitsKHR">VkSurfaceTransformFlagBitsKHR</a> indicating the presentation
transforms supported for the surface on the specified device.
At least one bit will be set.</p>
</li>
<li>
<p><code>currentTransform</code> is <a href="#VkSurfaceTransformFlagBitsKHR">VkSurfaceTransformFlagBitsKHR</a> value
indicating the surface&#8217;s current transform relative to the presentation
engine&#8217;s natural orientation.</p>
</li>
<li>
<p><code>supportedCompositeAlpha</code> is a bitmask of
<a href="#VkCompositeAlphaFlagBitsKHR">VkCompositeAlphaFlagBitsKHR</a>, representing the alpha compositing
modes supported by the presentation engine for the surface on the
specified device, and at least one bit will be set.
Opaque composition <strong class="purple">can</strong> be achieved in any alpha compositing mode by
either using an image format that has no alpha component, or by ensuring
that all pixels in the presentable images have an alpha value of 1.0.</p>
</li>
<li>
<p><code>supportedUsageFlags</code> is a bitmask of <a href="#VkImageUsageFlagBits">VkImageUsageFlagBits</a>
representing the ways the application <strong class="purple">can</strong> use the presentable images of
a swapchain created
with <a href="#VkPresentModeKHR">VkPresentModeKHR</a> set to <code>VK_PRESENT_MODE_IMMEDIATE_KHR</code>,
<code>VK_PRESENT_MODE_MAILBOX_KHR</code>, <code>VK_PRESENT_MODE_FIFO_KHR</code> or
<code>VK_PRESENT_MODE_FIFO_RELAXED_KHR</code>
for the surface on the specified device.
<code>VK_IMAGE_USAGE_COLOR_ATTACHMENT_BIT</code> <strong class="purple">must</strong> be included in the set
but implementations <strong class="purple">may</strong> support additional usages.</p>
</li>
</ul>
</div>
</div>
<div class="sect3">
<h4 id="_description_768">Description</h4>
<div class="admonitionblock note">
<table>
<tr>
<td class="icon">
<i class="fa icon-note" title="Note"></i>
</td>
<td class="content">
<div class="title">Note</div>
<div class="paragraph">
<p>Supported usage flags of a presentable image when using
<code>VK_PRESENT_MODE_SHARED_DEMAND_REFRESH_KHR</code> or
<code>VK_PRESENT_MODE_SHARED_CONTINUOUS_REFRESH_KHR</code> presentation mode are
provided by
<a href="#VkSharedPresentSurfaceCapabilitiesKHR">VkSharedPresentSurfaceCapabilitiesKHR</a>::<code>sharedPresentSupportedUsageFlags</code>.</p>
</div>
</td>
</tr>
</table>
</div>
<div class="admonitionblock note">
<table>
<tr>
<td class="icon">
<i class="fa icon-note" title="Note"></i>
</td>
<td class="content">
<div class="title">Note</div>
<div class="paragraph">
<p>Formulas such as <span class="eq">min(N, <code>maxImageCount</code>)</span> are not correct, since
<code>maxImageCount</code> <strong class="purple">may</strong> be zero.</p>
</div>
</td>
</tr>
</table>
</div>
</div>
<div class="sect3">
<h4 id="_see_also_768">See Also</h4>
<div class="paragraph">
<p><a href="#VkCompositeAlphaFlagsKHR">VkCompositeAlphaFlagsKHR</a>, <a href="#VkExtent2D">VkExtent2D</a>, <a href="#VkImageUsageFlags">VkImageUsageFlags</a>, <a href="#VkSurfaceCapabilities2KHR">VkSurfaceCapabilities2KHR</a>, <a href="#VkSurfaceTransformFlagBitsKHR">VkSurfaceTransformFlagBitsKHR</a>, <a href="#VkSurfaceTransformFlagsKHR">VkSurfaceTransformFlagsKHR</a>, <a href="#vkGetPhysicalDeviceSurfaceCapabilitiesKHR">vkGetPhysicalDeviceSurfaceCapabilitiesKHR</a></p>
</div>
</div>
<div class="sect3">
<h4 id="_document_notes_768">Document Notes</h4>
<div class="paragraph">
<p>For more information, see the Vulkan Specification at URL</p>
</div>
<div class="paragraph">
<p><a href="https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VkSurfaceCapabilitiesKHR" class="bare">https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VkSurfaceCapabilitiesKHR</a></p>
</div>
<div class="paragraph">
<p>This page is extracted from the Vulkan Specification.
Fixes and changes should be made to the Specification, not directly.</p>
</div>
<div style="page-break-after: always;"></div>
</div>
</div>
<div class="sect2">
<h3 id="_vksurfaceformat2khr3">VkSurfaceFormat2KHR(3)</h3>
<div class="sect3">
<h4 id="_name_769">Name</h4>
<div class="paragraph">
<p>VkSurfaceFormat2KHR - Structure describing a supported swapchain format tuple</p>
</div>
</div>
<div class="sect3">
<h4 id="_c_specification_769">C Specification</h4>
<div class="paragraph">
<p>The <code>VkSurfaceFormat2KHR</code> structure is defined as:</p>
</div>
<div id="VkSurfaceFormat2KHR" class="listingblock">
<div class="content">
<pre class="highlight"><code class="language-c++" data-lang="c++">typedef struct VkSurfaceFormat2KHR {
    VkStructureType       sType;
    void*                 pNext;
    VkSurfaceFormatKHR    surfaceFormat;
} VkSurfaceFormat2KHR;</code></pre>
</div>
</div>
</div>
<div class="sect3">
<h4 id="_members_406">Members</h4>
<div class="ulist">
<ul>
<li>
<p><code>sType</code> is the type of this structure.</p>
</li>
<li>
<p><code>pNext</code> is <code>NULL</code> or a pointer to an extension-specific structure.</p>
</li>
<li>
<p><code>surfaceFormat</code> is an instance of <a href="#VkSurfaceFormatKHR">VkSurfaceFormatKHR</a>
describing a format-color space pair that is compatible with the
specified surface.</p>
</li>
</ul>
</div>
</div>
<div class="sect3">
<h4 id="_description_769">Description</h4>
<div class="sidebarblock">
<div class="content">
<div class="title">Valid Usage (Implicit)</div>
<div class="ulist">
<ul>
<li>
<p><a id="VUID-VkSurfaceFormat2KHR-sType-sType"></a> <code>sType</code> <strong class="purple">must</strong> be <code>VK_STRUCTURE_TYPE_SURFACE_FORMAT_2_KHR</code></p>
</li>
<li>
<p><a id="VUID-VkSurfaceFormat2KHR-pNext-pNext"></a> <code>pNext</code> <strong class="purple">must</strong> be <code>NULL</code></p>
</li>
</ul>
</div>
</div>
</div>
</div>
<div class="sect3">
<h4 id="_see_also_769">See Also</h4>
<div class="paragraph">
<p><a href="#VkStructureType">VkStructureType</a>, <a href="#VkSurfaceFormatKHR">VkSurfaceFormatKHR</a>, <a href="#vkGetPhysicalDeviceSurfaceFormats2KHR">vkGetPhysicalDeviceSurfaceFormats2KHR</a></p>
</div>
</div>
<div class="sect3">
<h4 id="_document_notes_769">Document Notes</h4>
<div class="paragraph">
<p>For more information, see the Vulkan Specification at URL</p>
</div>
<div class="paragraph">
<p><a href="https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VkSurfaceFormat2KHR" class="bare">https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VkSurfaceFormat2KHR</a></p>
</div>
<div class="paragraph">
<p>This page is extracted from the Vulkan Specification.
Fixes and changes should be made to the Specification, not directly.</p>
</div>
<div style="page-break-after: always;"></div>
</div>
</div>
<div class="sect2">
<h3 id="_vksurfaceformatkhr3">VkSurfaceFormatKHR(3)</h3>
<div class="sect3">
<h4 id="_name_770">Name</h4>
<div class="paragraph">
<p>VkSurfaceFormatKHR - Structure describing a supported swapchain format-color space pair</p>
</div>
</div>
<div class="sect3">
<h4 id="_c_specification_770">C Specification</h4>
<div class="paragraph">
<p>The <code>VkSurfaceFormatKHR</code> structure is defined as:</p>
</div>
<div id="VkSurfaceFormatKHR" class="listingblock">
<div class="content">
<pre class="highlight"><code class="language-c++" data-lang="c++">typedef struct VkSurfaceFormatKHR {
    VkFormat           format;
    VkColorSpaceKHR    colorSpace;
} VkSurfaceFormatKHR;</code></pre>
</div>
</div>
</div>
<div class="sect3">
<h4 id="_members_407">Members</h4>
<div class="ulist">
<ul>
<li>
<p><code>format</code> is a <a href="#VkFormat">VkFormat</a> that is compatible with the specified
surface.</p>
</li>
<li>
<p><code>colorSpace</code> is a presentation <a href="#VkColorSpaceKHR">VkColorSpaceKHR</a> that is
compatible with the surface.</p>
</li>
</ul>
</div>
</div>
<div class="sect3">
<h4 id="_description_770">Description</h4>

</div>
<div class="sect3">
<h4 id="_see_also_770">See Also</h4>
<div class="paragraph">
<p><a href="#VkColorSpaceKHR">VkColorSpaceKHR</a>, <a href="#VkFormat">VkFormat</a>, <a href="#VkSurfaceFormat2KHR">VkSurfaceFormat2KHR</a>, <a href="#vkGetPhysicalDeviceSurfaceFormatsKHR">vkGetPhysicalDeviceSurfaceFormatsKHR</a></p>
</div>
</div>
<div class="sect3">
<h4 id="_document_notes_770">Document Notes</h4>
<div class="paragraph">
<p>For more information, see the Vulkan Specification at URL</p>
</div>
<div class="paragraph">
<p><a href="https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VkSurfaceFormatKHR" class="bare">https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VkSurfaceFormatKHR</a></p>
</div>
<div class="paragraph">
<p>This page is extracted from the Vulkan Specification.
Fixes and changes should be made to the Specification, not directly.</p>
</div>
<div style="page-break-after: always;"></div>
</div>
</div>
<div class="sect2">
<h3 id="_vksurfacefullscreenexclusiveinfoext3">VkSurfaceFullScreenExclusiveInfoEXT(3)</h3>
<div class="sect3">
<h4 id="_name_771">Name</h4>
<div class="paragraph">
<p>VkSurfaceFullScreenExclusiveInfoEXT - Structure specifying the preferred full-screen transition behavior</p>
</div>
</div>
<div class="sect3">
<h4 id="_c_specification_771">C Specification</h4>
<div class="paragraph">
<p>If the <code>pNext</code> chain of <a href="#VkSwapchainCreateInfoKHR">VkSwapchainCreateInfoKHR</a> includes a
<code>VkSurfaceFullScreenExclusiveInfoEXT</code> structure, then that structure
specifies the application&#8217;s preferred full-screen transition behavior.</p>
</div>
<div class="paragraph">
<p>The <code>VkSurfaceFullScreenExclusiveInfoEXT</code> structure is defined as:</p>
</div>
<div id="VkSurfaceFullScreenExclusiveInfoEXT" class="listingblock">
<div class="content">
<pre class="highlight"><code class="language-c++" data-lang="c++">typedef struct VkSurfaceFullScreenExclusiveInfoEXT {
    VkStructureType             sType;
    void*                       pNext;
    VkFullScreenExclusiveEXT    fullScreenExclusive;
} VkSurfaceFullScreenExclusiveInfoEXT;</code></pre>
</div>
</div>
</div>
<div class="sect3">
<h4 id="_members_408">Members</h4>
<div class="ulist">
<ul>
<li>
<p><code>sType</code> is the type of this structure.</p>
</li>
<li>
<p><code>pNext</code> is <code>NULL</code> or a pointer to an extension-specific structure.</p>
</li>
<li>
<p><code>fullScreenExclusive</code> is a <a href="#VkFullScreenExclusiveEXT">VkFullScreenExclusiveEXT</a> value
specifying the preferred full-screen transition behavior.</p>
</li>
</ul>
</div>
</div>
<div class="sect3">
<h4 id="_description_771">Description</h4>
<div class="paragraph">
<p>If this structure is not present, <code>fullScreenExclusive</code> is considered to
be <code>VK_FULL_SCREEN_EXCLUSIVE_DEFAULT_EXT</code>.</p>
</div>
<div class="sidebarblock">
<div class="content">
<div class="title">Valid Usage (Implicit)</div>
<div class="ulist">
<ul>
<li>
<p><a id="VUID-VkSurfaceFullScreenExclusiveInfoEXT-sType-sType"></a> <code>sType</code> <strong class="purple">must</strong> be <code>VK_STRUCTURE_TYPE_SURFACE_FULL_SCREEN_EXCLUSIVE_INFO_EXT</code></p>
</li>
<li>
<p><a id="VUID-VkSurfaceFullScreenExclusiveInfoEXT-fullScreenExclusive-parameter"></a> <code>fullScreenExclusive</code> <strong class="purple">must</strong> be a valid <a href="#VkFullScreenExclusiveEXT">VkFullScreenExclusiveEXT</a> value</p>
</li>
</ul>
</div>
</div>
</div>
</div>
<div class="sect3">
<h4 id="_see_also_771">See Also</h4>
<div class="paragraph">
<p><a href="#VkFullScreenExclusiveEXT">VkFullScreenExclusiveEXT</a>, <a href="#VkStructureType">VkStructureType</a></p>
</div>
</div>
<div class="sect3">
<h4 id="_document_notes_771">Document Notes</h4>
<div class="paragraph">
<p>For more information, see the Vulkan Specification at URL</p>
</div>
<div class="paragraph">
<p><a href="https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VkSurfaceFullScreenExclusiveInfoEXT" class="bare">https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VkSurfaceFullScreenExclusiveInfoEXT</a></p>
</div>
<div class="paragraph">
<p>This page is extracted from the Vulkan Specification.
Fixes and changes should be made to the Specification, not directly.</p>
</div>
<div style="page-break-after: always;"></div>
</div>
</div>
<div class="sect2">
<h3 id="_vksurfacefullscreenexclusivewin32infoext3">VkSurfaceFullScreenExclusiveWin32InfoEXT(3)</h3>
<div class="sect3">
<h4 id="_name_772">Name</h4>
<div class="paragraph">
<p>VkSurfaceFullScreenExclusiveWin32InfoEXT - Structure specifying additional creation parameters specific to Win32 fullscreen exclusive mode</p>
</div>
</div>
<div class="sect3">
<h4 id="_c_specification_772">C Specification</h4>
<div class="paragraph">
<p>The <code>VkSurfaceFullScreenExclusiveWin32InfoEXT</code> structure is defined as:</p>
</div>
<div id="VkSurfaceFullScreenExclusiveWin32InfoEXT" class="listingblock">
<div class="content">
<pre class="highlight"><code class="language-c++" data-lang="c++">typedef struct VkSurfaceFullScreenExclusiveWin32InfoEXT {
    VkStructureType    sType;
    const void*        pNext;
    HMONITOR           hmonitor;
} VkSurfaceFullScreenExclusiveWin32InfoEXT;</code></pre>
</div>
</div>
</div>
<div class="sect3">
<h4 id="_members_409">Members</h4>
<div class="ulist">
<ul>
<li>
<p><code>sType</code> is the type of this structure.</p>
</li>
<li>
<p><code>pNext</code> is <code>NULL</code> or a pointer to an extension-specific structure.</p>
</li>
<li>
<p><code>hmonitor</code> is the Win32 <code>HMONITOR</code> handle identifying the display
to create the surface with.</p>
</li>
</ul>
</div>
</div>
<div class="sect3">
<h4 id="_description_772">Description</h4>
<div class="admonitionblock note">
<table>
<tr>
<td class="icon">
<i class="fa icon-note" title="Note"></i>
</td>
<td class="content">
<div class="title">Note</div>
<div class="paragraph">
<p>If <code>hmonitor</code> is invalidated (e.g. the monitor is unplugged) during the
lifetime of a swapchain created with this structure, operations on that
swapchain will return <code>VK_ERROR_OUT_OF_DATE_KHR</code>.</p>
</div>
</td>
</tr>
</table>
</div>
<div class="admonitionblock note">
<table>
<tr>
<td class="icon">
<i class="fa icon-note" title="Note"></i>
</td>
<td class="content">
<div class="title">Note</div>
<div class="paragraph">
<p>It&#8217;s the responsibility of the application to change the display settings of
the targeted Win32 display using the appropriate platform APIs.
Such changes <strong class="purple">may</strong> alter the surface capabilities reported for the created
surface.</p>
</div>
</td>
</tr>
</table>
</div>
<div class="sidebarblock">
<div class="content">
<div class="title">Valid Usage</div>
<div class="ulist">
<ul>
<li>
<p><a id="VUID-VkSurfaceFullScreenExclusiveWin32InfoEXT-hmonitor-02673"></a>
<code>hmonitor</code> <strong class="purple">must</strong> be a valid <code>HMONITOR</code></p>
</li>
</ul>
</div>
</div>
</div>
<div class="sidebarblock">
<div class="content">
<div class="title">Valid Usage (Implicit)</div>
<div class="ulist">
<ul>
<li>
<p><a id="VUID-VkSurfaceFullScreenExclusiveWin32InfoEXT-sType-sType"></a> <code>sType</code> <strong class="purple">must</strong> be <code>VK_STRUCTURE_TYPE_SURFACE_FULL_SCREEN_EXCLUSIVE_WIN32_INFO_EXT</code></p>
</li>
</ul>
</div>
</div>
</div>
</div>
<div class="sect3">
<h4 id="_see_also_772">See Also</h4>
<div class="paragraph">
<p><a href="#VkStructureType">VkStructureType</a></p>
</div>
</div>
<div class="sect3">
<h4 id="_document_notes_772">Document Notes</h4>
<div class="paragraph">
<p>For more information, see the Vulkan Specification at URL</p>
</div>
<div class="paragraph">
<p><a href="https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VkSurfaceFullScreenExclusiveWin32InfoEXT" class="bare">https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VkSurfaceFullScreenExclusiveWin32InfoEXT</a></p>
</div>
<div class="paragraph">
<p>This page is extracted from the Vulkan Specification.
Fixes and changes should be made to the Specification, not directly.</p>
</div>
<div style="page-break-after: always;"></div>
</div>
</div>
<div class="sect2">
<h3 id="_vksurfaceprotectedcapabilitieskhr3">VkSurfaceProtectedCapabilitiesKHR(3)</h3>
<div class="sect3">
<h4 id="_name_773">Name</h4>
<div class="paragraph">
<p>VkSurfaceProtectedCapabilitiesKHR - Structure describing capability of a surface to be protected</p>
</div>
</div>
<div class="sect3">
<h4 id="_c_specification_773">C Specification</h4>
<div class="paragraph">
<p>An application queries if a protected VkSurface is displayable on a specific
windowing system using <code>VkSurfaceProtectedCapabilitiesKHR</code>, which <strong class="purple">can</strong>
be passed in <code>pNext</code> parameter of <code>VkSurfaceCapabilities2KHR</code>.</p>
</div>
<div class="paragraph">
<p>The <code>VkSurfaceProtectedCapabilitiesKHR</code> structure is defined as:</p>
</div>
<div id="VkSurfaceProtectedCapabilitiesKHR" class="listingblock">
<div class="content">
<pre class="highlight"><code class="language-c++" data-lang="c++">typedef struct VkSurfaceProtectedCapabilitiesKHR {
    VkStructureType    sType;
    const void*        pNext;
    VkBool32           supportsProtected;
} VkSurfaceProtectedCapabilitiesKHR;</code></pre>
</div>
</div>
</div>
<div class="sect3">
<h4 id="_members_410">Members</h4>
<div class="ulist">
<ul>
<li>
<p><code>sType</code> is the type of this structure.</p>
</li>
<li>
<p><code>pNext</code> is <code>NULL</code> or a pointer to an extension-specific structure.</p>
</li>
<li>
<p><code>supportsProtected</code> specifies whether a protected swapchain created
from <a href="#VkPhysicalDeviceSurfaceInfo2KHR">VkPhysicalDeviceSurfaceInfo2KHR</a>::<code>surface</code> for a
particular windowing system <strong class="purple">can</strong> be displayed on screen or not.
If <code>supportsProtected</code> is <code>VK_TRUE</code>, then creation of swapchains
with the <code>VK_SWAPCHAIN_CREATE_PROTECTED_BIT_KHR</code> flag set <strong class="purple">must</strong> be
supported for <code>surface</code>.</p>
</li>
</ul>
</div>
</div>
<div class="sect3">
<h4 id="_description_773">Description</h4>
<div class="sidebarblock">
<div class="content">
<div class="title">Valid Usage (Implicit)</div>
<div class="ulist">
<ul>
<li>
<p><a id="VUID-VkSurfaceProtectedCapabilitiesKHR-sType-sType"></a> <code>sType</code> <strong class="purple">must</strong> be <code>VK_STRUCTURE_TYPE_SURFACE_PROTECTED_CAPABILITIES_KHR</code></p>
</li>
</ul>
</div>
</div>
</div>
</div>
<div class="sect3">
<h4 id="_see_also_773">See Also</h4>
<div class="paragraph">
<p><code>VkBool32</code>, <a href="#VkStructureType">VkStructureType</a></p>
</div>
</div>
<div class="sect3">
<h4 id="_document_notes_773">Document Notes</h4>
<div class="paragraph">
<p>For more information, see the Vulkan Specification at URL</p>
</div>
<div class="paragraph">
<p><a href="https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VkSurfaceProtectedCapabilitiesKHR" class="bare">https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VkSurfaceProtectedCapabilitiesKHR</a></p>
</div>
<div class="paragraph">
<p>This page is extracted from the Vulkan Specification.
Fixes and changes should be made to the Specification, not directly.</p>
</div>
<div style="page-break-after: always;"></div>
</div>
</div>
<div class="sect2">
<h3 id="_vkswapchaincountercreateinfoext3">VkSwapchainCounterCreateInfoEXT(3)</h3>
<div class="sect3">
<h4 id="_name_774">Name</h4>
<div class="paragraph">
<p>VkSwapchainCounterCreateInfoEXT - Specify the surface counters desired</p>
</div>
</div>
<div class="sect3">
<h4 id="_c_specification_774">C Specification</h4>
<div class="paragraph">
<p>To enable surface counters when creating a swapchain, add
<code>VkSwapchainCounterCreateInfoEXT</code> to the <code>pNext</code> chain of
<a href="#VkSwapchainCreateInfoKHR">VkSwapchainCreateInfoKHR</a>.
<code>VkSwapchainCounterCreateInfoEXT</code> is defined as:</p>
</div>
<div id="VkSwapchainCounterCreateInfoEXT" class="listingblock">
<div class="content">
<pre class="highlight"><code class="language-c++" data-lang="c++">typedef struct VkSwapchainCounterCreateInfoEXT {
    VkStructureType             sType;
    const void*                 pNext;
    VkSurfaceCounterFlagsEXT    surfaceCounters;
} VkSwapchainCounterCreateInfoEXT;</code></pre>
</div>
</div>
</div>
<div class="sect3">
<h4 id="_members_411">Members</h4>
<div class="ulist">
<ul>
<li>
<p><code>sType</code> is the type of this structure.</p>
</li>
<li>
<p><code>pNext</code> is <code>NULL</code> or a pointer to an extension-specific structure.</p>
</li>
<li>
<p><code>surfaceCounters</code> is a bitmask of <a href="#VkSurfaceCounterFlagBitsEXT">VkSurfaceCounterFlagBitsEXT</a>
specifying surface counters to enable for the swapchain.</p>
</li>
</ul>
</div>
</div>
<div class="sect3">
<h4 id="_description_774">Description</h4>
<div class="sidebarblock">
<div class="content">
<div class="title">Valid Usage</div>
<div class="ulist">
<ul>
<li>
<p><a id="VUID-VkSwapchainCounterCreateInfoEXT-surfaceCounters-01244"></a>
The bits in <code>surfaceCounters</code> <strong class="purple">must</strong> be supported by
<a href="#VkSwapchainCreateInfoKHR">VkSwapchainCreateInfoKHR</a>::<code>surface</code>, as reported by
<a href="#vkGetPhysicalDeviceSurfaceCapabilities2EXT">vkGetPhysicalDeviceSurfaceCapabilities2EXT</a>.</p>
</li>
</ul>
</div>
</div>
</div>
<div class="sidebarblock">
<div class="content">
<div class="title">Valid Usage (Implicit)</div>
<div class="ulist">
<ul>
<li>
<p><a id="VUID-VkSwapchainCounterCreateInfoEXT-sType-sType"></a> <code>sType</code> <strong class="purple">must</strong> be <code>VK_STRUCTURE_TYPE_SWAPCHAIN_COUNTER_CREATE_INFO_EXT</code></p>
</li>
<li>
<p><a id="VUID-VkSwapchainCounterCreateInfoEXT-surfaceCounters-parameter"></a> <code>surfaceCounters</code> <strong class="purple">must</strong> be a valid combination of <a href="#VkSurfaceCounterFlagBitsEXT">VkSurfaceCounterFlagBitsEXT</a> values</p>
</li>
</ul>
</div>
</div>
</div>
</div>
<div class="sect3">
<h4 id="_see_also_774">See Also</h4>
<div class="paragraph">
<p><a href="#VkStructureType">VkStructureType</a>, <a href="#VkSurfaceCounterFlagsEXT">VkSurfaceCounterFlagsEXT</a></p>
</div>
</div>
<div class="sect3">
<h4 id="_document_notes_774">Document Notes</h4>
<div class="paragraph">
<p>For more information, see the Vulkan Specification at URL</p>
</div>
<div class="paragraph">
<p><a href="https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VkSwapchainCounterCreateInfoEXT" class="bare">https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VkSwapchainCounterCreateInfoEXT</a></p>
</div>
<div class="paragraph">
<p>This page is extracted from the Vulkan Specification.
Fixes and changes should be made to the Specification, not directly.</p>
</div>
<div style="page-break-after: always;"></div>
</div>
</div>
<div class="sect2">
<h3 id="_vkswapchaincreateinfokhr3">VkSwapchainCreateInfoKHR(3)</h3>
<div class="sect3">
<h4 id="_name_775">Name</h4>
<div class="paragraph">
<p>VkSwapchainCreateInfoKHR - Structure specifying parameters of a newly created swapchain object</p>
</div>
</div>
<div class="sect3">
<h4 id="_c_specification_775">C Specification</h4>
<div class="paragraph">
<p>The <code>VkSwapchainCreateInfoKHR</code> structure is defined as:</p>
</div>
<div id="VkSwapchainCreateInfoKHR" class="listingblock">
<div class="content">
<pre class="highlight"><code class="language-c++" data-lang="c++">typedef struct VkSwapchainCreateInfoKHR {
    VkStructureType                  sType;
    const void*                      pNext;
    VkSwapchainCreateFlagsKHR        flags;
    VkSurfaceKHR                     surface;
    uint32_t                         minImageCount;
    VkFormat                         imageFormat;
    VkColorSpaceKHR                  imageColorSpace;
    VkExtent2D                       imageExtent;
    uint32_t                         imageArrayLayers;
    VkImageUsageFlags                imageUsage;
    VkSharingMode                    imageSharingMode;
    uint32_t                         queueFamilyIndexCount;
    const uint32_t*                  pQueueFamilyIndices;
    VkSurfaceTransformFlagBitsKHR    preTransform;
    VkCompositeAlphaFlagBitsKHR      compositeAlpha;
    VkPresentModeKHR                 presentMode;
    VkBool32                         clipped;
    VkSwapchainKHR                   oldSwapchain;
} VkSwapchainCreateInfoKHR;</code></pre>
</div>
</div>
</div>
<div class="sect3">
<h4 id="_members_412">Members</h4>
<div class="ulist">
<ul>
<li>
<p><code>sType</code> is the type of this structure.</p>
</li>
<li>
<p><code>pNext</code> is <code>NULL</code> or a pointer to an extension-specific structure.</p>
</li>
<li>
<p><code>flags</code> is a bitmask of <a href="#VkSwapchainCreateFlagBitsKHR">VkSwapchainCreateFlagBitsKHR</a>
indicating parameters of the swapchain creation.</p>
</li>
<li>
<p><code>surface</code> is the surface onto which the swapchain will present
images.
If the creation succeeds, the swapchain becomes associated with
<code>surface</code>.</p>
</li>
<li>
<p><code>minImageCount</code> is the minimum number of presentable images that the
application needs.
The implementation will either create the swapchain with at least that
many images, or it will fail to create the swapchain.</p>
</li>
<li>
<p><code>imageFormat</code> is a <a href="#VkFormat">VkFormat</a> value specifying the format the
swapchain image(s) will be created with.</p>
</li>
<li>
<p><code>imageColorSpace</code> is a <a href="#VkColorSpaceKHR">VkColorSpaceKHR</a> value specifying the
way the swapchain interprets image data.</p>
</li>
<li>
<p><code>imageExtent</code> is the size (in pixels) of the swapchain image(s).
The behavior is platform-dependent if the image extent does not match
the surface&#8217;s <code>currentExtent</code> as returned by
<code>vkGetPhysicalDeviceSurfaceCapabilitiesKHR</code>.</p>
</li>
</ul>
</div>
</div>
<div class="sect3">
<h4 id="_description_775">Description</h4>
<div class="admonitionblock note">
<table>
<tr>
<td class="icon">
<i class="fa icon-note" title="Note"></i>
</td>
<td class="content">
<div class="title">Note</div>
<div class="paragraph">
<p>On some platforms, it is normal that <code>maxImageExtent</code> <strong class="purple">may</strong> become <code>(0,
0)</code>, for example when the window is minimized.
In such a case, it is not possible to create a swapchain due to the Valid
Usage requirements.</p>
</div>
</td>
</tr>
</table>
</div>
<div class="ulist">
<ul>
<li>
<p><code>imageArrayLayers</code> is the number of views in a multiview/stereo
surface.
For non-stereoscopic-3D applications, this value is 1.</p>
</li>
<li>
<p><code>imageUsage</code> is a bitmask of <a href="#VkImageUsageFlagBits">VkImageUsageFlagBits</a> describing
the intended usage of the (acquired) swapchain images.</p>
</li>
<li>
<p><code>imageSharingMode</code> is the sharing mode used for the image(s) of the
swapchain.</p>
</li>
<li>
<p><code>queueFamilyIndexCount</code> is the number of queue families having
access to the image(s) of the swapchain when <code>imageSharingMode</code> is
<code>VK_SHARING_MODE_CONCURRENT</code>.</p>
</li>
<li>
<p><code>pQueueFamilyIndices</code> is an array of queue family indices having
access to the images(s) of the swapchain when <code>imageSharingMode</code> is
<code>VK_SHARING_MODE_CONCURRENT</code>.</p>
</li>
<li>
<p><code>preTransform</code> is a <a href="#VkSurfaceTransformFlagBitsKHR">VkSurfaceTransformFlagBitsKHR</a> value
describing the transform, relative to the presentation engine&#8217;s natural
orientation, applied to the image content prior to presentation.
If it does not match the <code>currentTransform</code> value returned by
<code>vkGetPhysicalDeviceSurfaceCapabilitiesKHR</code>, the presentation engine
will transform the image content as part of the presentation operation.</p>
</li>
<li>
<p><code>compositeAlpha</code> is a <a href="#VkCompositeAlphaFlagBitsKHR">VkCompositeAlphaFlagBitsKHR</a> value
indicating the alpha compositing mode to use when this surface is
composited together with other surfaces on certain window systems.</p>
</li>
<li>
<p><code>presentMode</code> is the presentation mode the swapchain will use.
A swapchain&#8217;s present mode determines how incoming present requests will
be processed and queued internally.</p>
</li>
<li>
<p><code>clipped</code> specifies whether the Vulkan implementation is allowed to
discard rendering operations that affect regions of the surface that are
not visible.</p>
<div class="ulist">
<ul>
<li>
<p>If set to <code>VK_TRUE</code>, the presentable images associated with the
swapchain <strong class="purple">may</strong> not own all of their pixels.
Pixels in the presentable images that correspond to regions of the
target surface obscured by another window on the desktop, or subject to
some other clipping mechanism will have undefined content when read
back.
Pixel shaders <strong class="purple">may</strong> not execute for these pixels, and thus any side
effects they would have had will not occur.
<code>VK_TRUE</code> value does not guarantee any clipping will occur, but
allows more optimal presentation methods to be used on some platforms.</p>
</li>
<li>
<p>If set to <code>VK_FALSE</code>, presentable images associated with the
swapchain will own all of the pixels they contain.</p>
</li>
</ul>
</div>
</li>
</ul>
</div>
<div class="admonitionblock note">
<table>
<tr>
<td class="icon">
<i class="fa icon-note" title="Note"></i>
</td>
<td class="content">
<div class="title">Note</div>
<div class="paragraph">
<p>Applications <strong class="purple">should</strong> set this value to <code>VK_TRUE</code> if they do not expect
to read back the content of presentable images before presenting them or
after reacquiring them, and if their pixel shaders do not have any side
effects that require them to run for all pixels in the presentable image.</p>
</div>
</td>
</tr>
</table>
</div>
<div class="ulist">
<ul>
<li>
<p><code>oldSwapchain</code> is <a href="#VK_NULL_HANDLE">VK_NULL_HANDLE</a>, or the existing non-retired
swapchain currently associated with <code>surface</code>.
Providing a valid <code>oldSwapchain</code> <strong class="purple">may</strong> aid in the resource reuse, and
also allows the application to still present any images that are already
acquired from it.</p>
</li>
</ul>
</div>
<div class="paragraph">
<p>Upon calling <code>vkCreateSwapchainKHR</code> with an <code>oldSwapchain</code> that is
not <a href="#VK_NULL_HANDLE">VK_NULL_HANDLE</a>, <code>oldSwapchain</code> is retired&#8201;&#8212;&#8201;even if creation
of the new swapchain fails.
The new swapchain is created in the non-retired state whether or not
<code>oldSwapchain</code> is <a href="#VK_NULL_HANDLE">VK_NULL_HANDLE</a>.</p>
</div>
<div class="paragraph">
<p>Upon calling <code>vkCreateSwapchainKHR</code> with an <code>oldSwapchain</code> that is
not <a href="#VK_NULL_HANDLE">VK_NULL_HANDLE</a>, any images from <code>oldSwapchain</code> that are not
acquired by the application <strong class="purple">may</strong> be freed by the implementation, which <strong class="purple">may</strong>
occur even if creation of the new swapchain fails.
The application <strong class="purple">can</strong> destroy <code>oldSwapchain</code> to free all memory
associated with <code>oldSwapchain</code>.</p>
</div>
<div class="admonitionblock note">
<table>
<tr>
<td class="icon">
<i class="fa icon-note" title="Note"></i>
</td>
<td class="content">
<div class="title">Note</div>
<div class="paragraph">
<p>Multiple retired swapchains <strong class="purple">can</strong> be associated with the same
<code>VkSurfaceKHR</code> through multiple uses of <code>oldSwapchain</code> that
outnumber calls to <a href="#vkDestroySwapchainKHR">vkDestroySwapchainKHR</a>.</p>
</div>
<div class="paragraph">
<p>After <code>oldSwapchain</code> is retired, the application <strong class="purple">can</strong> pass to
<a href="#vkQueuePresentKHR">vkQueuePresentKHR</a> any images it had already acquired from
<code>oldSwapchain</code>.
E.g., an application may present an image from the old swapchain before an
image from the new swapchain is ready to be presented.
As usual, <a href="#vkQueuePresentKHR">vkQueuePresentKHR</a> <strong class="purple">may</strong> fail if <code>oldSwapchain</code> has
entered a state that causes <code>VK_ERROR_OUT_OF_DATE_KHR</code> to be returned.</p>
</div>
<div class="paragraph">
<p>The application <strong class="purple">can</strong> continue to use a shared presentable image obtained
from <code>oldSwapchain</code> until a presentable image is acquired from the new
swapchain, as long as it has not entered a state that causes it to return
<code>VK_ERROR_OUT_OF_DATE_KHR</code>.</p>
</div>
</td>
</tr>
</table>
</div>
<div class="sidebarblock">
<div class="content">
<div class="title">Valid Usage</div>
<div class="ulist">
<ul>
<li>
<p><a id="VUID-VkSwapchainCreateInfoKHR-surface-01270"></a>
<code>surface</code> <strong class="purple">must</strong> be a surface that is supported by the device as
determined using <a href="#vkGetPhysicalDeviceSurfaceSupportKHR">vkGetPhysicalDeviceSurfaceSupportKHR</a></p>
</li>
<li>
<p><a id="VUID-VkSwapchainCreateInfoKHR-minImageCount-01271"></a>
<code>minImageCount</code> <strong class="purple">must</strong> be greater than or equal to the value returned
in the <code>minImageCount</code> member of the <code>VkSurfaceCapabilitiesKHR</code>
structure returned by <a href="#vkGetPhysicalDeviceSurfaceCapabilitiesKHR">vkGetPhysicalDeviceSurfaceCapabilitiesKHR</a>
for the surface</p>
</li>
<li>
<p><a id="VUID-VkSwapchainCreateInfoKHR-minImageCount-01272"></a>
<code>minImageCount</code> <strong class="purple">must</strong> be less than or equal to the value returned in
the <code>maxImageCount</code> member of the <code>VkSurfaceCapabilitiesKHR</code>
structure returned by <code>vkGetPhysicalDeviceSurfaceCapabilitiesKHR</code>
for the surface if the returned <code>maxImageCount</code> is not zero</p>
</li>
<li>
<p><a id="VUID-VkSwapchainCreateInfoKHR-minImageCount-01383"></a>
<code>minImageCount</code> <strong class="purple">must</strong> be <code>1</code> if <code>presentMode</code> is either
<code>VK_PRESENT_MODE_SHARED_DEMAND_REFRESH_KHR</code> or
<code>VK_PRESENT_MODE_SHARED_CONTINUOUS_REFRESH_KHR</code></p>
</li>
<li>
<p><a id="VUID-VkSwapchainCreateInfoKHR-imageFormat-01273"></a>
<code>imageFormat</code> and <code>imageColorSpace</code> <strong class="purple">must</strong> match the <code>format</code>
and <code>colorSpace</code> members, respectively, of one of the
<code>VkSurfaceFormatKHR</code> structures returned by
<code>vkGetPhysicalDeviceSurfaceFormatsKHR</code> for the surface</p>
</li>
<li>
<p><a id="VUID-VkSwapchainCreateInfoKHR-imageExtent-01274"></a>
<code>imageExtent</code> <strong class="purple">must</strong> be between <code>minImageExtent</code> and
<code>maxImageExtent</code>, inclusive, where <code>minImageExtent</code> and
<code>maxImageExtent</code> are members of the <code>VkSurfaceCapabilitiesKHR</code>
structure returned by <code>vkGetPhysicalDeviceSurfaceCapabilitiesKHR</code>
for the surface</p>
</li>
<li>
<p><a id="VUID-VkSwapchainCreateInfoKHR-imageExtent-01689"></a>
<code>imageExtent</code> members <code>width</code> and <code>height</code> <strong class="purple">must</strong> both be
non-zero</p>
</li>
<li>
<p><a id="VUID-VkSwapchainCreateInfoKHR-imageArrayLayers-01275"></a>
<code>imageArrayLayers</code> <strong class="purple">must</strong> be greater than <code>0</code> and less than or equal
to the <code>maxImageArrayLayers</code> member of the
<code>VkSurfaceCapabilitiesKHR</code> structure returned by
<code>vkGetPhysicalDeviceSurfaceCapabilitiesKHR</code> for the surface</p>
</li>
<li>
<p><a id="VUID-VkSwapchainCreateInfoKHR-presentMode-01427"></a>
If <code>presentMode</code> is <code>VK_PRESENT_MODE_IMMEDIATE_KHR</code>,
<code>VK_PRESENT_MODE_MAILBOX_KHR</code>, <code>VK_PRESENT_MODE_FIFO_KHR</code> or
<code>VK_PRESENT_MODE_FIFO_RELAXED_KHR</code>, <code>imageUsage</code> <strong class="purple">must</strong> be a
subset of the supported usage flags present in the
<code>supportedUsageFlags</code> member of the <a href="#VkSurfaceCapabilitiesKHR">VkSurfaceCapabilitiesKHR</a>
structure returned by <a href="#vkGetPhysicalDeviceSurfaceCapabilitiesKHR">vkGetPhysicalDeviceSurfaceCapabilitiesKHR</a>
for <code>surface</code></p>
</li>
<li>
<p><a id="VUID-VkSwapchainCreateInfoKHR-imageUsage-01384"></a>
If <code>presentMode</code> is <code>VK_PRESENT_MODE_SHARED_DEMAND_REFRESH_KHR</code>
or <code>VK_PRESENT_MODE_SHARED_CONTINUOUS_REFRESH_KHR</code>, <code>imageUsage</code>
<strong class="purple">must</strong> be a subset of the supported usage flags present in the
<code>sharedPresentSupportedUsageFlags</code> member of the
<a href="#VkSharedPresentSurfaceCapabilitiesKHR">VkSharedPresentSurfaceCapabilitiesKHR</a> structure returned by
<a href="#vkGetPhysicalDeviceSurfaceCapabilities2KHR">vkGetPhysicalDeviceSurfaceCapabilities2KHR</a> for <code>surface</code></p>
</li>
<li>
<p><a id="VUID-VkSwapchainCreateInfoKHR-imageSharingMode-01277"></a>
If <code>imageSharingMode</code> is <code>VK_SHARING_MODE_CONCURRENT</code>,
<code>pQueueFamilyIndices</code> <strong class="purple">must</strong> be a valid pointer to an array of
<code>queueFamilyIndexCount</code> <code>uint32_t</code> values</p>
</li>
<li>
<p><a id="VUID-VkSwapchainCreateInfoKHR-imageSharingMode-01278"></a>
If <code>imageSharingMode</code> is <code>VK_SHARING_MODE_CONCURRENT</code>,
<code>queueFamilyIndexCount</code> <strong class="purple">must</strong> be greater than <code>1</code></p>
</li>
<li>
<p><a id="VUID-VkSwapchainCreateInfoKHR-imageSharingMode-01428"></a>
If <code>imageSharingMode</code> is <code>VK_SHARING_MODE_CONCURRENT</code>, each
element of <code>pQueueFamilyIndices</code> <strong class="purple">must</strong> be unique and <strong class="purple">must</strong> be less
than <code>pQueueFamilyPropertyCount</code> returned by either
<a href="#vkGetPhysicalDeviceQueueFamilyProperties">vkGetPhysicalDeviceQueueFamilyProperties</a> or
<a href="#vkGetPhysicalDeviceQueueFamilyProperties2">vkGetPhysicalDeviceQueueFamilyProperties2</a> for the
<code>physicalDevice</code> that was used to create <code>device</code></p>
</li>
<li>
<p><a id="VUID-VkSwapchainCreateInfoKHR-preTransform-01279"></a>
<code>preTransform</code> <strong class="purple">must</strong> be one of the bits present in the
<code>supportedTransforms</code> member of the <code>VkSurfaceCapabilitiesKHR</code>
structure returned by <code>vkGetPhysicalDeviceSurfaceCapabilitiesKHR</code>
for the surface</p>
</li>
<li>
<p><a id="VUID-VkSwapchainCreateInfoKHR-compositeAlpha-01280"></a>
<code>compositeAlpha</code> <strong class="purple">must</strong> be one of the bits present in the
<code>supportedCompositeAlpha</code> member of the
<code>VkSurfaceCapabilitiesKHR</code> structure returned by
<code>vkGetPhysicalDeviceSurfaceCapabilitiesKHR</code> for the surface</p>
</li>
<li>
<p><a id="VUID-VkSwapchainCreateInfoKHR-presentMode-01281"></a>
<code>presentMode</code> <strong class="purple">must</strong> be one of the <a href="#VkPresentModeKHR">VkPresentModeKHR</a> values
returned by <code>vkGetPhysicalDeviceSurfacePresentModesKHR</code> for the
surface</p>
</li>
<li>
<p><a id="VUID-VkSwapchainCreateInfoKHR-physicalDeviceCount-01429"></a>
If the logical device was created with
<a href="#VkDeviceGroupDeviceCreateInfo">VkDeviceGroupDeviceCreateInfo</a>::<code>physicalDeviceCount</code> equal to
1, <code>flags</code> <strong class="purple">must</strong> not contain
<code>VK_SWAPCHAIN_CREATE_SPLIT_INSTANCE_BIND_REGIONS_BIT_KHR</code></p>
</li>
<li>
<p><a id="VUID-VkSwapchainCreateInfoKHR-oldSwapchain-01933"></a>
If <code>oldSwapchain</code> is not <a href="#VK_NULL_HANDLE">VK_NULL_HANDLE</a>, <code>oldSwapchain</code>
<strong class="purple">must</strong> be a non-retired swapchain associated with native window referred
to by <code>surface</code></p>
</li>
<li>
<p><a id="VUID-VkSwapchainCreateInfoKHR-imageFormat-01778"></a>
The <a href="vkspec.html#swapchain-wsi-image-create-info">implied image creation
parameters</a> of the swapchain <strong class="purple">must</strong> be supported as reported by
<a href="#vkGetPhysicalDeviceImageFormatProperties">vkGetPhysicalDeviceImageFormatProperties</a></p>
</li>
<li>
<p><a id="VUID-VkSwapchainCreateInfoKHR-flags-03168"></a>
If <code>flags</code> contains <code>VK_SWAPCHAIN_CREATE_MUTABLE_FORMAT_BIT_KHR</code>
then the <code>pNext</code> chain <strong class="purple">must</strong> contain an instance of
<a href="#VkImageFormatListCreateInfoKHR">VkImageFormatListCreateInfoKHR</a> with a <code>viewFormatCount</code>
greater than zero and <code>pViewFormats</code> <strong class="purple">must</strong> have an element equal to
<code>imageFormat</code></p>
</li>
<li>
<p><a id="VUID-VkSwapchainCreateInfoKHR-flags-03187"></a>
If <code>flags</code> contains <code>VK_SWAPCHAIN_CREATE_PROTECTED_BIT_KHR</code>,
then <code>VkSurfaceProtectedCapabilitiesKHR</code>::<code>supportsProtected</code>
<strong class="purple">must</strong> be <code>VK_TRUE</code> in the <a href="#VkSurfaceProtectedCapabilitiesKHR">VkSurfaceProtectedCapabilitiesKHR</a>
structure returned by <a href="#vkGetPhysicalDeviceSurfaceCapabilities2KHR">vkGetPhysicalDeviceSurfaceCapabilities2KHR</a>
for <code>surface</code></p>
</li>
<li>
<p><a id="VUID-VkSwapchainCreateInfoKHR-pNext-02679"></a>
If the <code>pNext</code> chain includes an instance of
<a href="#VkSurfaceFullScreenExclusiveInfoEXT">VkSurfaceFullScreenExclusiveInfoEXT</a> with its
<code>fullScreenExclusive</code> member set to
<code>VK_FULL_SCREEN_EXCLUSIVE_APPLICATION_CONTROLLED_EXT</code>, and
<code>surface</code> was created using <a href="#vkCreateWin32SurfaceKHR">vkCreateWin32SurfaceKHR</a>, an
instance of <a href="#VkSurfaceFullScreenExclusiveWin32InfoEXT">VkSurfaceFullScreenExclusiveWin32InfoEXT</a> <strong class="purple">must</strong> be
present in the <code>pNext</code> chain</p>
</li>
</ul>
</div>
</div>
</div>
<div class="sidebarblock">
<div class="content">
<div class="title">Valid Usage (Implicit)</div>
<div class="ulist">
<ul>
<li>
<p><a id="VUID-VkSwapchainCreateInfoKHR-sType-sType"></a> <code>sType</code> <strong class="purple">must</strong> be <code>VK_STRUCTURE_TYPE_SWAPCHAIN_CREATE_INFO_KHR</code></p>
</li>
<li>
<p><a id="VUID-VkSwapchainCreateInfoKHR-pNext-pNext"></a> Each <code>pNext</code> member of any structure (including this one) in the <code>pNext</code> chain <strong class="purple">must</strong> be either <code>NULL</code> or a pointer to a valid instance of <a href="#VkDeviceGroupSwapchainCreateInfoKHR">VkDeviceGroupSwapchainCreateInfoKHR</a>, <a href="#VkImageFormatListCreateInfoKHR">VkImageFormatListCreateInfoKHR</a>, <a href="#VkSurfaceFullScreenExclusiveInfoEXT">VkSurfaceFullScreenExclusiveInfoEXT</a>, <a href="#VkSurfaceFullScreenExclusiveWin32InfoEXT">VkSurfaceFullScreenExclusiveWin32InfoEXT</a>, <a href="#VkSwapchainCounterCreateInfoEXT">VkSwapchainCounterCreateInfoEXT</a>, or <a href="#VkSwapchainDisplayNativeHdrCreateInfoAMD">VkSwapchainDisplayNativeHdrCreateInfoAMD</a></p>
</li>
<li>
<p><a id="VUID-VkSwapchainCreateInfoKHR-sType-unique"></a> Each <code>sType</code> member in the <code>pNext</code> chain <strong class="purple">must</strong> be unique</p>
</li>
<li>
<p><a id="VUID-VkSwapchainCreateInfoKHR-flags-parameter"></a> <code>flags</code> <strong class="purple">must</strong> be a valid combination of <a href="#VkSwapchainCreateFlagBitsKHR">VkSwapchainCreateFlagBitsKHR</a> values</p>
</li>
<li>
<p><a id="VUID-VkSwapchainCreateInfoKHR-surface-parameter"></a> <code>surface</code> <strong class="purple">must</strong> be a valid <code>VkSurfaceKHR</code> handle</p>
</li>
<li>
<p><a id="VUID-VkSwapchainCreateInfoKHR-imageFormat-parameter"></a> <code>imageFormat</code> <strong class="purple">must</strong> be a valid <a href="#VkFormat">VkFormat</a> value</p>
</li>
<li>
<p><a id="VUID-VkSwapchainCreateInfoKHR-imageColorSpace-parameter"></a> <code>imageColorSpace</code> <strong class="purple">must</strong> be a valid <a href="#VkColorSpaceKHR">VkColorSpaceKHR</a> value</p>
</li>
<li>
<p><a id="VUID-VkSwapchainCreateInfoKHR-imageUsage-parameter"></a> <code>imageUsage</code> <strong class="purple">must</strong> be a valid combination of <a href="#VkImageUsageFlagBits">VkImageUsageFlagBits</a> values</p>
</li>
<li>
<p><a id="VUID-VkSwapchainCreateInfoKHR-imageUsage-requiredbitmask"></a> <code>imageUsage</code> <strong class="purple">must</strong> not be <code>0</code></p>
</li>
<li>
<p><a id="VUID-VkSwapchainCreateInfoKHR-imageSharingMode-parameter"></a> <code>imageSharingMode</code> <strong class="purple">must</strong> be a valid <a href="#VkSharingMode">VkSharingMode</a> value</p>
</li>
<li>
<p><a id="VUID-VkSwapchainCreateInfoKHR-preTransform-parameter"></a> <code>preTransform</code> <strong class="purple">must</strong> be a valid <a href="#VkSurfaceTransformFlagBitsKHR">VkSurfaceTransformFlagBitsKHR</a> value</p>
</li>
<li>
<p><a id="VUID-VkSwapchainCreateInfoKHR-compositeAlpha-parameter"></a> <code>compositeAlpha</code> <strong class="purple">must</strong> be a valid <a href="#VkCompositeAlphaFlagBitsKHR">VkCompositeAlphaFlagBitsKHR</a> value</p>
</li>
<li>
<p><a id="VUID-VkSwapchainCreateInfoKHR-presentMode-parameter"></a> <code>presentMode</code> <strong class="purple">must</strong> be a valid <a href="#VkPresentModeKHR">VkPresentModeKHR</a> value</p>
</li>
<li>
<p><a id="VUID-VkSwapchainCreateInfoKHR-oldSwapchain-parameter"></a> If <code>oldSwapchain</code> is not <a href="#VK_NULL_HANDLE">VK_NULL_HANDLE</a>, <code>oldSwapchain</code> <strong class="purple">must</strong> be a valid <code>VkSwapchainKHR</code> handle</p>
</li>
<li>
<p><a id="VUID-VkSwapchainCreateInfoKHR-oldSwapchain-parent"></a> If <code>oldSwapchain</code> is a valid handle, it <strong class="purple">must</strong> have been created, allocated, or retrieved from <code>surface</code></p>
</li>
<li>
<p><a id="VUID-VkSwapchainCreateInfoKHR-commonparent"></a> Both of <code>oldSwapchain</code>, and <code>surface</code> that are valid handles <strong class="purple">must</strong> have been created, allocated, or retrieved from the same <code>VkInstance</code></p>
</li>
</ul>
</div>
</div>
</div>
</div>
<div class="sect3">
<h4 id="_see_also_775">See Also</h4>
<div class="paragraph">
<p><code>VkBool32</code>, <a href="#VkColorSpaceKHR">VkColorSpaceKHR</a>, <a href="#VkCompositeAlphaFlagBitsKHR">VkCompositeAlphaFlagBitsKHR</a>, <a href="#VkExtent2D">VkExtent2D</a>, <a href="#VkFormat">VkFormat</a>, <a href="#VkImageUsageFlags">VkImageUsageFlags</a>, <a href="#VkPresentModeKHR">VkPresentModeKHR</a>, <a href="#VkSharingMode">VkSharingMode</a>, <a href="#VkStructureType">VkStructureType</a>, <a href="#VkSurfaceKHR">VkSurfaceKHR</a>, <a href="#VkSurfaceTransformFlagBitsKHR">VkSurfaceTransformFlagBitsKHR</a>, <a href="#VkSwapchainCreateFlagsKHR">VkSwapchainCreateFlagsKHR</a>, <a href="#VkSwapchainKHR">VkSwapchainKHR</a>, <a href="#vkCreateSharedSwapchainsKHR">vkCreateSharedSwapchainsKHR</a>, <a href="#vkCreateSwapchainKHR">vkCreateSwapchainKHR</a></p>
</div>
</div>
<div class="sect3">
<h4 id="_document_notes_775">Document Notes</h4>
<div class="paragraph">
<p>For more information, see the Vulkan Specification at URL</p>
</div>
<div class="paragraph">
<p><a href="https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VkSwapchainCreateInfoKHR" class="bare">https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VkSwapchainCreateInfoKHR</a></p>
</div>
<div class="paragraph">
<p>This page is extracted from the Vulkan Specification.
Fixes and changes should be made to the Specification, not directly.</p>
</div>
<div style="page-break-after: always;"></div>
</div>
</div>
<div class="sect2">
<h3 id="_vkswapchaindisplaynativehdrcreateinfoamd3">VkSwapchainDisplayNativeHdrCreateInfoAMD(3)</h3>
<div class="sect3">
<h4 id="_name_776">Name</h4>
<div class="paragraph">
<p>VkSwapchainDisplayNativeHdrCreateInfoAMD - Structure specifying display native HDR parameters of a newly created swapchain object</p>
</div>
</div>
<div class="sect3">
<h4 id="_c_specification_776">C Specification</h4>
<div class="paragraph">
<p>If the <code>pNext</code> chain of <a href="#VkSwapchainCreateInfoKHR">VkSwapchainCreateInfoKHR</a> includes a
<code>VkSwapchainDisplayNativeHdrCreateInfoAMD</code> structure, then that
structure includes additional swapchain creation parameters specific to
display native HDR support.</p>
</div>
<div class="paragraph">
<p>The <code>VkSwapchainDisplayNativeHdrCreateInfoAMD</code> structure is defined as:</p>
</div>
<div id="VkSwapchainDisplayNativeHdrCreateInfoAMD" class="listingblock">
<div class="content">
<pre class="highlight"><code class="language-c++" data-lang="c++">typedef struct VkSwapchainDisplayNativeHdrCreateInfoAMD {
    VkStructureType    sType;
    const void*        pNext;
    VkBool32           localDimmingEnable;
} VkSwapchainDisplayNativeHdrCreateInfoAMD;</code></pre>
</div>
</div>
</div>
<div class="sect3">
<h4 id="_members_413">Members</h4>
<div class="ulist">
<ul>
<li>
<p><code>sType</code> is the type of this structure.</p>
</li>
<li>
<p><code>pNext</code> is <code>NULL</code> or a pointer to an extension-specific structure.</p>
</li>
<li>
<p><code>localDimmingEnable</code> specifies whether local dimming is enabled for
the swapchain.</p>
</li>
</ul>
</div>
</div>
<div class="sect3">
<h4 id="_description_776">Description</h4>
<div class="paragraph">
<p>If the <code>pNext</code> chain of <a href="#VkSwapchainCreateInfoKHR">VkSwapchainCreateInfoKHR</a> does not contain
this structure, the default value for <code>localDimmingEnable</code> is
<code>VK_TRUE</code>, meaning local dimming is initially enabled for the swapchain.</p>
</div>
<div class="sidebarblock">
<div class="content">
<div class="title">Valid Usage (Implicit)</div>
<div class="ulist">
<ul>
<li>
<p><a id="VUID-VkSwapchainDisplayNativeHdrCreateInfoAMD-sType-sType"></a> <code>sType</code> <strong class="purple">must</strong> be <code>VK_STRUCTURE_TYPE_SWAPCHAIN_DISPLAY_NATIVE_HDR_CREATE_INFO_AMD</code></p>
</li>
</ul>
</div>
</div>
</div>
<div class="sidebarblock">
<div class="content">
<div class="title">Valid Usage</div>
<div class="ulist">
<ul>
<li>
<p><a id="VUID-VkSwapchainDisplayNativeHdrCreateInfoAMD-localDimmingEnable-XXXXX"></a>
It is only valid to set <code>localDimmingEnable</code> to <code>VK_TRUE</code> if
<a href="#VkDisplayNativeHdrSurfaceCapabilitiesAMD">VkDisplayNativeHdrSurfaceCapabilitiesAMD</a>::<code>localDimmingSupport</code>
is supported.</p>
</li>
</ul>
</div>
</div>
</div>
</div>
<div class="sect3">
<h4 id="_see_also_776">See Also</h4>
<div class="paragraph">
<p><code>VkBool32</code>, <a href="#VkStructureType">VkStructureType</a></p>
</div>
</div>
<div class="sect3">
<h4 id="_document_notes_776">Document Notes</h4>
<div class="paragraph">
<p>For more information, see the Vulkan Specification at URL</p>
</div>
<div class="paragraph">
<p><a href="https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VkSwapchainDisplayNativeHdrCreateInfoAMD" class="bare">https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VkSwapchainDisplayNativeHdrCreateInfoAMD</a></p>
</div>
<div class="paragraph">
<p>This page is extracted from the Vulkan Specification.
Fixes and changes should be made to the Specification, not directly.</p>
</div>
<div style="page-break-after: always;"></div>
</div>
</div>
<div class="sect2">
<h3 id="_vktexturelodgatherformatpropertiesamd3">VkTextureLODGatherFormatPropertiesAMD(3)</h3>
<div class="sect3">
<h4 id="_name_777">Name</h4>
<div class="paragraph">
<p>VkTextureLODGatherFormatPropertiesAMD - Structure informing whether or not texture gather bias/LOD functionality is supported for a given image format and a given physical device.</p>
</div>
</div>
<div class="sect3">
<h4 id="_c_specification_777">C Specification</h4>
<div class="paragraph">
<p>To determine if texture gather functions that take explicit LOD and/or bias
argument values can be used with a given image format, add
<a href="#VkImageFormatProperties2">VkImageFormatProperties2</a> to the <code>pNext</code> chain of the
<a href="#VkPhysicalDeviceImageFormatInfo2">VkPhysicalDeviceImageFormatInfo2</a> structure and
<a href="#VkTextureLODGatherFormatPropertiesAMD">VkTextureLODGatherFormatPropertiesAMD</a> to the <code>pNext</code> chain of the
<a href="#VkImageFormatProperties2">VkImageFormatProperties2</a> structure.</p>
</div>
<div class="paragraph">
<p>The <code>VkTextureLODGatherFormatPropertiesAMD</code> structure is defined as:</p>
</div>
<div id="VkTextureLODGatherFormatPropertiesAMD" class="listingblock">
<div class="content">
<pre class="highlight"><code class="language-c++" data-lang="c++">typedef struct VkTextureLODGatherFormatPropertiesAMD {
    VkStructureType    sType;
    void*              pNext;
    VkBool32           supportsTextureGatherLODBiasAMD;
} VkTextureLODGatherFormatPropertiesAMD;</code></pre>
</div>
</div>
</div>
<div class="sect3">
<h4 id="_members_414">Members</h4>
<div class="ulist">
<ul>
<li>
<p><code>sType</code> is the type of this structure.</p>
</li>
<li>
<p><code>pNext</code> is <code>NULL</code>.</p>
</li>
<li>
<p><code>supportsTextureGatherLODBiasAMD</code> tells if the image format can be
used with texture gather bias/LOD functions, as introduced by the
<code><a href="vkspec.html#VK_AMD_texture_gather_bias_lod" class="bare">html/vkspec.html#VK_AMD_texture_gather_bias_lod</a></code> extension.
This field is set by the implementation.
User-specified value is ignored.</p>
</li>
</ul>
</div>
</div>
<div class="sect3">
<h4 id="_description_777">Description</h4>
<div class="sidebarblock">
<div class="content">
<div class="title">Valid Usage (Implicit)</div>
<div class="ulist">
<ul>
<li>
<p><a id="VUID-VkTextureLODGatherFormatPropertiesAMD-sType-sType"></a> <code>sType</code> <strong class="purple">must</strong> be <code>VK_STRUCTURE_TYPE_TEXTURE_LOD_GATHER_FORMAT_PROPERTIES_AMD</code></p>
</li>
</ul>
</div>
</div>
</div>
</div>
<div class="sect3">
<h4 id="_see_also_777">See Also</h4>
<div class="paragraph">
<p><code>VkBool32</code>, <a href="#VkStructureType">VkStructureType</a></p>
</div>
</div>
<div class="sect3">
<h4 id="_document_notes_777">Document Notes</h4>
<div class="paragraph">
<p>For more information, see the Vulkan Specification at URL</p>
</div>
<div class="paragraph">
<p><a href="https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VkTextureLODGatherFormatPropertiesAMD" class="bare">https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VkTextureLODGatherFormatPropertiesAMD</a></p>
</div>
<div class="paragraph">
<p>This page is extracted from the Vulkan Specification.
Fixes and changes should be made to the Specification, not directly.</p>
</div>
<div style="page-break-after: always;"></div>
</div>
</div>
<div class="sect2">
<h3 id="_vkvalidationcachecreateinfoext3">VkValidationCacheCreateInfoEXT(3)</h3>
<div class="sect3">
<h4 id="_name_778">Name</h4>
<div class="paragraph">
<p>VkValidationCacheCreateInfoEXT - Structure specifying parameters of a newly created validation cache</p>
</div>
</div>
<div class="sect3">
<h4 id="_c_specification_778">C Specification</h4>
<div class="paragraph">
<p>The <code>VkValidationCacheCreateInfoEXT</code> structure is defined as:</p>
</div>
<div id="VkValidationCacheCreateInfoEXT" class="listingblock">
<div class="content">
<pre class="highlight"><code class="language-c++" data-lang="c++">typedef struct VkValidationCacheCreateInfoEXT {
    VkStructureType                    sType;
    const void*                        pNext;
    VkValidationCacheCreateFlagsEXT    flags;
    size_t                             initialDataSize;
    const void*                        pInitialData;
} VkValidationCacheCreateInfoEXT;</code></pre>
</div>
</div>
</div>
<div class="sect3">
<h4 id="_members_415">Members</h4>
<div class="ulist">
<ul>
<li>
<p><code>sType</code> is the type of this structure.</p>
</li>
<li>
<p><code>pNext</code> is <code>NULL</code> or a pointer to an extension-specific structure.</p>
</li>
<li>
<p><code>flags</code> is reserved for future use.</p>
</li>
<li>
<p><code>initialDataSize</code> is the number of bytes in <code>pInitialData</code>.
If <code>initialDataSize</code> is zero, the validation cache will initially be
empty.</p>
</li>
<li>
<p><code>pInitialData</code> is a pointer to previously retrieved validation cache
data.
If the validation cache data is incompatible (as defined below) with the
device, the validation cache will be initially empty.
If <code>initialDataSize</code> is zero, <code>pInitialData</code> is ignored.</p>
</li>
</ul>
</div>
</div>
<div class="sect3">
<h4 id="_description_778">Description</h4>
<div class="sidebarblock">
<div class="content">
<div class="title">Valid Usage</div>
<div class="ulist">
<ul>
<li>
<p><a id="VUID-VkValidationCacheCreateInfoEXT-initialDataSize-01534"></a>
If <code>initialDataSize</code> is not <code>0</code>, it <strong class="purple">must</strong> be equal to the size of
<code>pInitialData</code>, as returned by <code>vkGetValidationCacheDataEXT</code>
when <code>pInitialData</code> was originally retrieved</p>
</li>
<li>
<p><a id="VUID-VkValidationCacheCreateInfoEXT-initialDataSize-01535"></a>
If <code>initialDataSize</code> is not <code>0</code>, <code>pInitialData</code> <strong class="purple">must</strong> have been
retrieved from a previous call to <code>vkGetValidationCacheDataEXT</code></p>
</li>
</ul>
</div>
</div>
</div>
<div class="sidebarblock">
<div class="content">
<div class="title">Valid Usage (Implicit)</div>
<div class="ulist">
<ul>
<li>
<p><a id="VUID-VkValidationCacheCreateInfoEXT-sType-sType"></a> <code>sType</code> <strong class="purple">must</strong> be <code>VK_STRUCTURE_TYPE_VALIDATION_CACHE_CREATE_INFO_EXT</code></p>
</li>
<li>
<p><a id="VUID-VkValidationCacheCreateInfoEXT-pNext-pNext"></a> <code>pNext</code> <strong class="purple">must</strong> be <code>NULL</code></p>
</li>
<li>
<p><a id="VUID-VkValidationCacheCreateInfoEXT-flags-zerobitmask"></a> <code>flags</code> <strong class="purple">must</strong> be <code>0</code></p>
</li>
<li>
<p><a id="VUID-VkValidationCacheCreateInfoEXT-pInitialData-parameter"></a> If <code>initialDataSize</code> is not <code>0</code>, <code>pInitialData</code> <strong class="purple">must</strong> be a valid pointer to an array of <code>initialDataSize</code> bytes</p>
</li>
</ul>
</div>
</div>
</div>
</div>
<div class="sect3">
<h4 id="_see_also_778">See Also</h4>
<div class="paragraph">
<p><a href="#VkStructureType">VkStructureType</a>, <a href="#VkValidationCacheCreateFlagsEXT">VkValidationCacheCreateFlagsEXT</a>, <a href="#vkCreateValidationCacheEXT">vkCreateValidationCacheEXT</a></p>
</div>
</div>
<div class="sect3">
<h4 id="_document_notes_778">Document Notes</h4>
<div class="paragraph">
<p>For more information, see the Vulkan Specification at URL</p>
</div>
<div class="paragraph">
<p><a href="https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VkValidationCacheCreateInfoEXT" class="bare">https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VkValidationCacheCreateInfoEXT</a></p>
</div>
<div class="paragraph">
<p>This page is extracted from the Vulkan Specification.
Fixes and changes should be made to the Specification, not directly.</p>
</div>
<div style="page-break-after: always;"></div>
</div>
</div>
<div class="sect2">
<h3 id="_vkvalidationfeaturesext3">VkValidationFeaturesEXT(3)</h3>
<div class="sect3">
<h4 id="_name_779">Name</h4>
<div class="paragraph">
<p>VkValidationFeaturesEXT - Specify validation features to enable or disable for a Vulkan instance</p>
</div>
</div>
<div class="sect3">
<h4 id="_c_specification_779">C Specification</h4>
<div class="paragraph">
<p>When creating a Vulkan instance for which you wish to enable or disable
specific validation features, add a <a href="#VkValidationFeaturesEXT">VkValidationFeaturesEXT</a> structure
to the <code>pNext</code> chain of the <a href="#VkInstanceCreateInfo">VkInstanceCreateInfo</a> structure,
specifying the features to be enabled or disabled.</p>
</div>
<div id="VkValidationFeaturesEXT" class="listingblock">
<div class="content">
<pre class="highlight"><code class="language-c++" data-lang="c++">typedef struct VkValidationFeaturesEXT {
    VkStructureType                         sType;
    const void*                             pNext;
    uint32_t                                enabledValidationFeatureCount;
    const VkValidationFeatureEnableEXT*     pEnabledValidationFeatures;
    uint32_t                                disabledValidationFeatureCount;
    const VkValidationFeatureDisableEXT*    pDisabledValidationFeatures;
} VkValidationFeaturesEXT;</code></pre>
</div>
</div>
</div>
<div class="sect3">
<h4 id="_members_416">Members</h4>
<div class="ulist">
<ul>
<li>
<p><code>sType</code> is the type of this structure.</p>
</li>
<li>
<p><code>pNext</code> is <code>NULL</code> or a pointer to an extension-specific structure.</p>
</li>
<li>
<p><code>enabledValidationFeatureCount</code> is the number of features to enable.</p>
</li>
<li>
<p><code>pEnabledValidationFeatures</code> is a pointer to an array of
<a href="#VkValidationFeatureEnableEXT">VkValidationFeatureEnableEXT</a> values specifying the validation
features to be enabled.</p>
</li>
<li>
<p><code>disabledValidationFeatureCount</code> is the number of features to
disable.</p>
</li>
<li>
<p><code>pDisabledValidationFeatures</code> is a pointer to an array of
<a href="#VkValidationFeatureDisableEXT">VkValidationFeatureDisableEXT</a> values specifying the validation
features to be disabled.</p>
</li>
</ul>
</div>
</div>
<div class="sect3">
<h4 id="_description_779">Description</h4>
<div class="sidebarblock">
<div class="content">
<div class="title">Valid Usage (Implicit)</div>
<div class="ulist">
<ul>
<li>
<p><a id="VUID-VkValidationFeaturesEXT-sType-sType"></a> <code>sType</code> <strong class="purple">must</strong> be <code>VK_STRUCTURE_TYPE_VALIDATION_FEATURES_EXT</code></p>
</li>
<li>
<p><a id="VUID-VkValidationFeaturesEXT-pEnabledValidationFeatures-parameter"></a> If <code>enabledValidationFeatureCount</code> is not <code>0</code>, <code>pEnabledValidationFeatures</code> <strong class="purple">must</strong> be a valid pointer to an array of <code>enabledValidationFeatureCount</code> valid <a href="#VkValidationFeatureEnableEXT">VkValidationFeatureEnableEXT</a> values</p>
</li>
<li>
<p><a id="VUID-VkValidationFeaturesEXT-pDisabledValidationFeatures-parameter"></a> If <code>disabledValidationFeatureCount</code> is not <code>0</code>, <code>pDisabledValidationFeatures</code> <strong class="purple">must</strong> be a valid pointer to an array of <code>disabledValidationFeatureCount</code> valid <a href="#VkValidationFeatureDisableEXT">VkValidationFeatureDisableEXT</a> values</p>
</li>
</ul>
</div>
</div>
</div>
</div>
<div class="sect3">
<h4 id="_see_also_779">See Also</h4>
<div class="paragraph">
<p><a href="#VkStructureType">VkStructureType</a>, <a href="#VkValidationFeatureDisableEXT">VkValidationFeatureDisableEXT</a>, <a href="#VkValidationFeatureEnableEXT">VkValidationFeatureEnableEXT</a></p>
</div>
</div>
<div class="sect3">
<h4 id="_document_notes_779">Document Notes</h4>
<div class="paragraph">
<p>For more information, see the Vulkan Specification at URL</p>
</div>
<div class="paragraph">
<p><a href="https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VkValidationFeaturesEXT" class="bare">https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VkValidationFeaturesEXT</a></p>
</div>
<div class="paragraph">
<p>This page is extracted from the Vulkan Specification.
Fixes and changes should be made to the Specification, not directly.</p>
</div>
<div style="page-break-after: always;"></div>
</div>
</div>
<div class="sect2">
<h3 id="_vkvalidationflagsext3">VkValidationFlagsEXT(3)</h3>
<div class="sect3">
<h4 id="_name_780">Name</h4>
<div class="paragraph">
<p>VkValidationFlagsEXT - Specify validation checks to disable for a Vulkan instance</p>
</div>
</div>
<div class="sect3">
<h4 id="_c_specification_780">C Specification</h4>
<div class="paragraph">
<p>When creating a Vulkan instance for which you wish to disable validation
checks, add a <a href="#VkValidationFlagsEXT">VkValidationFlagsEXT</a> structure to the <code>pNext</code> chain
of the <a href="#VkInstanceCreateInfo">VkInstanceCreateInfo</a> structure, specifying the checks to be
disabled.</p>
</div>
<div id="VkValidationFlagsEXT" class="listingblock">
<div class="content">
<pre class="highlight"><code class="language-c++" data-lang="c++">typedef struct VkValidationFlagsEXT {
    VkStructureType                sType;
    const void*                    pNext;
    uint32_t                       disabledValidationCheckCount;
    const VkValidationCheckEXT*    pDisabledValidationChecks;
} VkValidationFlagsEXT;</code></pre>
</div>
</div>
</div>
<div class="sect3">
<h4 id="_members_417">Members</h4>
<div class="ulist">
<ul>
<li>
<p><code>sType</code> is the type of this structure.</p>
</li>
<li>
<p><code>pNext</code> is <code>NULL</code> or a pointer to an extension-specific structure.</p>
</li>
<li>
<p><code>disabledValidationCheckCount</code> is the number of checks to disable.</p>
</li>
<li>
<p><code>pDisabledValidationChecks</code> is a pointer to an array of
<a href="#VkValidationCheckEXT">VkValidationCheckEXT</a> values specifying the validation checks to be
disabled.</p>
</li>
</ul>
</div>
</div>
<div class="sect3">
<h4 id="_description_780">Description</h4>
<div class="sidebarblock">
<div class="content">
<div class="title">Valid Usage (Implicit)</div>
<div class="ulist">
<ul>
<li>
<p><a id="VUID-VkValidationFlagsEXT-sType-sType"></a> <code>sType</code> <strong class="purple">must</strong> be <code>VK_STRUCTURE_TYPE_VALIDATION_FLAGS_EXT</code></p>
</li>
<li>
<p><a id="VUID-VkValidationFlagsEXT-pDisabledValidationChecks-parameter"></a> <code>pDisabledValidationChecks</code> <strong class="purple">must</strong> be a valid pointer to an array of <code>disabledValidationCheckCount</code> valid <a href="#VkValidationCheckEXT">VkValidationCheckEXT</a> values</p>
</li>
<li>
<p><a id="VUID-VkValidationFlagsEXT-disabledValidationCheckCount-arraylength"></a> <code>disabledValidationCheckCount</code> <strong class="purple">must</strong> be greater than <code>0</code></p>
</li>
</ul>
</div>
</div>
</div>
</div>
<div class="sect3">
<h4 id="_see_also_780">See Also</h4>
<div class="paragraph">
<p><a href="#VkStructureType">VkStructureType</a>, <a href="#VkValidationCheckEXT">VkValidationCheckEXT</a></p>
</div>
</div>
<div class="sect3">
<h4 id="_document_notes_780">Document Notes</h4>
<div class="paragraph">
<p>For more information, see the Vulkan Specification at URL</p>
</div>
<div class="paragraph">
<p><a href="https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VkValidationFlagsEXT" class="bare">https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VkValidationFlagsEXT</a></p>
</div>
<div class="paragraph">
<p>This page is extracted from the Vulkan Specification.
Fixes and changes should be made to the Specification, not directly.</p>
</div>
<div style="page-break-after: always;"></div>
</div>
</div>
<div class="sect2">
<h3 id="_vkvertexinputattributedescription3">VkVertexInputAttributeDescription(3)</h3>
<div class="sect3">
<h4 id="_name_781">Name</h4>
<div class="paragraph">
<p>VkVertexInputAttributeDescription - Structure specifying vertex input attribute description</p>
</div>
</div>
<div class="sect3">
<h4 id="_c_specification_781">C Specification</h4>
<div class="paragraph">
<p>Each vertex input attribute is specified by an instance of the
<code>VkVertexInputAttributeDescription</code> structure.</p>
</div>
<div class="paragraph">
<p>The <code>VkVertexInputAttributeDescription</code> structure is defined as:</p>
</div>
<div id="VkVertexInputAttributeDescription" class="listingblock">
<div class="content">
<pre class="highlight"><code class="language-c++" data-lang="c++">typedef struct VkVertexInputAttributeDescription {
    uint32_t    location;
    uint32_t    binding;
    VkFormat    format;
    uint32_t    offset;
} VkVertexInputAttributeDescription;</code></pre>
</div>
</div>
</div>
<div class="sect3">
<h4 id="_members_418">Members</h4>
<div class="ulist">
<ul>
<li>
<p><code>location</code> is the shader binding location number for this attribute.</p>
</li>
<li>
<p><code>binding</code> is the binding number which this attribute takes its data
from.</p>
</li>
<li>
<p><code>format</code> is the size and type of the vertex attribute data.</p>
</li>
<li>
<p><code>offset</code> is a byte offset of this attribute relative to the start of
an element in the vertex input binding.</p>
</li>
</ul>
</div>
</div>
<div class="sect3">
<h4 id="_description_781">Description</h4>
<div class="sidebarblock">
<div class="content">
<div class="title">Valid Usage</div>
<div class="ulist">
<ul>
<li>
<p><a id="VUID-VkVertexInputAttributeDescription-location-00620"></a>
<code>location</code> <strong class="purple">must</strong> be less than
<code>VkPhysicalDeviceLimits</code>::<code>maxVertexInputAttributes</code></p>
</li>
<li>
<p><a id="VUID-VkVertexInputAttributeDescription-binding-00621"></a>
<code>binding</code> <strong class="purple">must</strong> be less than
<code>VkPhysicalDeviceLimits</code>::<code>maxVertexInputBindings</code></p>
</li>
<li>
<p><a id="VUID-VkVertexInputAttributeDescription-offset-00622"></a>
<code>offset</code> <strong class="purple">must</strong> be less than or equal to
<code>VkPhysicalDeviceLimits</code>::<code>maxVertexInputAttributeOffset</code></p>
</li>
<li>
<p><a id="VUID-VkVertexInputAttributeDescription-format-00623"></a>
<code>format</code> <strong class="purple">must</strong> be allowed as a vertex buffer format, as specified by
the <code>VK_FORMAT_FEATURE_VERTEX_BUFFER_BIT</code> flag in
<code>VkFormatProperties</code>::<code>bufferFeatures</code> returned by
<code>vkGetPhysicalDeviceFormatProperties</code></p>
</li>
</ul>
</div>
</div>
</div>
<div class="sidebarblock">
<div class="content">
<div class="title">Valid Usage (Implicit)</div>
<div class="ulist">
<ul>
<li>
<p><a id="VUID-VkVertexInputAttributeDescription-format-parameter"></a> <code>format</code> <strong class="purple">must</strong> be a valid <a href="#VkFormat">VkFormat</a> value</p>
</li>
</ul>
</div>
</div>
</div>
</div>
<div class="sect3">
<h4 id="_see_also_781">See Also</h4>
<div class="paragraph">
<p><a href="#VkFormat">VkFormat</a>, <a href="#VkPipelineVertexInputStateCreateInfo">VkPipelineVertexInputStateCreateInfo</a></p>
</div>
</div>
<div class="sect3">
<h4 id="_document_notes_781">Document Notes</h4>
<div class="paragraph">
<p>For more information, see the Vulkan Specification at URL</p>
</div>
<div class="paragraph">
<p><a href="https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VkVertexInputAttributeDescription" class="bare">https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VkVertexInputAttributeDescription</a></p>
</div>
<div class="paragraph">
<p>This page is extracted from the Vulkan Specification.
Fixes and changes should be made to the Specification, not directly.</p>
</div>
<div style="page-break-after: always;"></div>
</div>
</div>
<div class="sect2">
<h3 id="_vkvertexinputbindingdescription3">VkVertexInputBindingDescription(3)</h3>
<div class="sect3">
<h4 id="_name_782">Name</h4>
<div class="paragraph">
<p>VkVertexInputBindingDescription - Structure specifying vertex input binding description</p>
</div>
</div>
<div class="sect3">
<h4 id="_c_specification_782">C Specification</h4>
<div class="paragraph">
<p>The <code>VkVertexInputBindingDescription</code> structure is defined as:</p>
</div>
<div id="VkVertexInputBindingDescription" class="listingblock">
<div class="content">
<pre class="highlight"><code class="language-c++" data-lang="c++">typedef struct VkVertexInputBindingDescription {
    uint32_t             binding;
    uint32_t             stride;
    VkVertexInputRate    inputRate;
} VkVertexInputBindingDescription;</code></pre>
</div>
</div>
</div>
<div class="sect3">
<h4 id="_members_419">Members</h4>
<div class="ulist">
<ul>
<li>
<p><code>binding</code> is the binding number that this structure describes.</p>
</li>
<li>
<p><code>stride</code> is the distance in bytes between two consecutive elements
within the buffer.</p>
</li>
<li>
<p><code>inputRate</code> is a <a href="#VkVertexInputRate">VkVertexInputRate</a> value specifying whether
vertex attribute addressing is a function of the vertex index or of the
instance index.</p>
</li>
</ul>
</div>
</div>
<div class="sect3">
<h4 id="_description_782">Description</h4>
<div class="sidebarblock">
<div class="content">
<div class="title">Valid Usage</div>
<div class="ulist">
<ul>
<li>
<p><a id="VUID-VkVertexInputBindingDescription-binding-00618"></a>
<code>binding</code> <strong class="purple">must</strong> be less than
<code>VkPhysicalDeviceLimits</code>::<code>maxVertexInputBindings</code></p>
</li>
<li>
<p><a id="VUID-VkVertexInputBindingDescription-stride-00619"></a>
<code>stride</code> <strong class="purple">must</strong> be less than or equal to
<code>VkPhysicalDeviceLimits</code>::<code>maxVertexInputBindingStride</code></p>
</li>
</ul>
</div>
</div>
</div>
<div class="sidebarblock">
<div class="content">
<div class="title">Valid Usage (Implicit)</div>
<div class="ulist">
<ul>
<li>
<p><a id="VUID-VkVertexInputBindingDescription-inputRate-parameter"></a> <code>inputRate</code> <strong class="purple">must</strong> be a valid <a href="#VkVertexInputRate">VkVertexInputRate</a> value</p>
</li>
</ul>
</div>
</div>
</div>
</div>
<div class="sect3">
<h4 id="_see_also_782">See Also</h4>
<div class="paragraph">
<p><a href="#VkPipelineVertexInputStateCreateInfo">VkPipelineVertexInputStateCreateInfo</a>, <a href="#VkVertexInputRate">VkVertexInputRate</a></p>
</div>
</div>
<div class="sect3">
<h4 id="_document_notes_782">Document Notes</h4>
<div class="paragraph">
<p>For more information, see the Vulkan Specification at URL</p>
</div>
<div class="paragraph">
<p><a href="https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VkVertexInputBindingDescription" class="bare">https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VkVertexInputBindingDescription</a></p>
</div>
<div class="paragraph">
<p>This page is extracted from the Vulkan Specification.
Fixes and changes should be made to the Specification, not directly.</p>
</div>
<div style="page-break-after: always;"></div>
</div>
</div>
<div class="sect2">
<h3 id="_vkvertexinputbindingdivisordescriptionext3">VkVertexInputBindingDivisorDescriptionEXT(3)</h3>
<div class="sect3">
<h4 id="_name_783">Name</h4>
<div class="paragraph">
<p>VkVertexInputBindingDivisorDescriptionEXT - Structure specifying a divisor used in instanced rendering</p>
</div>
</div>
<div class="sect3">
<h4 id="_c_specification_783">C Specification</h4>
<div class="paragraph">
<p>The individual divisor values per binding are specified using the
<code>VkVertexInputBindingDivisorDescriptionEXT</code> structure which is defined
as:</p>
</div>
<div id="VkVertexInputBindingDivisorDescriptionEXT" class="listingblock">
<div class="content">
<pre class="highlight"><code class="language-c++" data-lang="c++">typedef struct VkVertexInputBindingDivisorDescriptionEXT {
    uint32_t    binding;
    uint32_t    divisor;
} VkVertexInputBindingDivisorDescriptionEXT;</code></pre>
</div>
</div>
</div>
<div class="sect3">
<h4 id="_members_420">Members</h4>
<div class="ulist">
<ul>
<li>
<p><code>binding</code> is the binding number for which the divisor is specified.</p>
</li>
<li>
<p><code>divisor</code> is the number of successive instances that will use the
same value of the vertex attribute when instanced rendering is enabled.
For example, if the divisor is N, the same vertex attribute will applied
to N successive instances before moving on to the next vertex attribute.
The maximum value of divisor is implementation dependent and can be
queried using
<code>VkPhysicalDeviceVertexAttributeDivisorPropertiesEXT</code>::<code>maxVertexAttribDivisor</code>.
A value of <code>0</code> <strong class="purple">can</strong> be used for the divisor if the
<a href="vkspec.html#features-vertexAttributeInstanceRateZeroDivisor"><code>vertexAttributeInstanceRateZeroDivisor</code></a>
feature is enabled.
In this case, the same vertex attribute will be applied to all
instances.</p>
</li>
</ul>
</div>
</div>
<div class="sect3">
<h4 id="_description_783">Description</h4>
<div class="paragraph">
<p>If this structure is not used to define a divisor value for an attribute
then the divisor has a logical default value of 1.</p>
</div>
<div class="sidebarblock">
<div class="content">
<div class="title">Valid Usage</div>
<div class="ulist">
<ul>
<li>
<p><a id="VUID-VkVertexInputBindingDivisorDescriptionEXT-binding-01869"></a>
<code>binding</code> <strong class="purple">must</strong> be less than
<code>VkPhysicalDeviceLimits</code>::<code>maxVertexInputBindings</code></p>
</li>
<li>
<p><a id="VUID-VkVertexInputBindingDivisorDescriptionEXT-vertexAttributeInstanceRateZeroDivisor-02228"></a>
If the <code>vertexAttributeInstanceRateZeroDivisor</code> feature is not
enabled, <code>divisor</code> <strong class="purple">must</strong> not be <code>0</code></p>
</li>
<li>
<p><a id="VUID-VkVertexInputBindingDivisorDescriptionEXT-vertexAttributeInstanceRateDivisor-02229"></a>
If the <code>vertexAttributeInstanceRateDivisor</code> feature is not enabled,
<code>divisor</code> <strong class="purple">must</strong> be <code>1</code></p>
</li>
<li>
<p><a id="VUID-VkVertexInputBindingDivisorDescriptionEXT-divisor-01870"></a>
<code>divisor</code> <strong class="purple">must</strong> be a value between <code>0</code> and
<code>VkPhysicalDeviceVertexAttributeDivisorPropertiesEXT</code>::<code>maxVertexAttribDivisor</code>,
inclusive.</p>
</li>
<li>
<p><a id="VUID-VkVertexInputBindingDivisorDescriptionEXT-inputRate-01871"></a>
<a href="#VkVertexInputBindingDescription">VkVertexInputBindingDescription</a>::<code>inputRate</code> <strong class="purple">must</strong> be of type
<code>VK_VERTEX_INPUT_RATE_INSTANCE</code> for this <code>binding</code>.</p>
</li>
</ul>
</div>
</div>
</div>
</div>
<div class="sect3">
<h4 id="_see_also_783">See Also</h4>
<div class="paragraph">
<p><a href="#VkPipelineVertexInputDivisorStateCreateInfoEXT">VkPipelineVertexInputDivisorStateCreateInfoEXT</a></p>
</div>
</div>
<div class="sect3">
<h4 id="_document_notes_783">Document Notes</h4>
<div class="paragraph">
<p>For more information, see the Vulkan Specification at URL</p>
</div>
<div class="paragraph">
<p><a href="https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VkVertexInputBindingDivisorDescriptionEXT" class="bare">https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VkVertexInputBindingDivisorDescriptionEXT</a></p>
</div>
<div class="paragraph">
<p>This page is extracted from the Vulkan Specification.
Fixes and changes should be made to the Specification, not directly.</p>
</div>
<div style="page-break-after: always;"></div>
</div>
</div>
<div class="sect2">
<h3 id="_vkvisurfacecreateinfonn3">VkViSurfaceCreateInfoNN(3)</h3>
<div class="sect3">
<h4 id="_name_784">Name</h4>
<div class="paragraph">
<p>VkViSurfaceCreateInfoNN - Structure specifying parameters of a newly created VI surface object</p>
</div>
</div>
<div class="sect3">
<h4 id="_c_specification_784">C Specification</h4>
<div class="paragraph">
<p>The <code>VkViSurfaceCreateInfoNN</code> structure is defined as:</p>
</div>
<div id="VkViSurfaceCreateInfoNN" class="listingblock">
<div class="content">
<pre class="highlight"><code class="language-c++" data-lang="c++">typedef struct VkViSurfaceCreateInfoNN {
    VkStructureType             sType;
    const void*                 pNext;
    VkViSurfaceCreateFlagsNN    flags;
    void*                       window;
} VkViSurfaceCreateInfoNN;</code></pre>
</div>
</div>
</div>
<div class="sect3">
<h4 id="_members_421">Members</h4>
<div class="ulist">
<ul>
<li>
<p><code>sType</code> is the type of this structure.</p>
</li>
<li>
<p><code>pNext</code> is <code>NULL</code> or a pointer to an extension-specific structure.</p>
</li>
<li>
<p><code>flags</code> is reserved for future use.</p>
</li>
<li>
<p><code>window</code> is the <code>nn</code>::<code>vi</code>::<code>NativeWindowHandle</code> for the
<code>nn</code>::<code>vi</code>::<code>Layer</code> with which to associate the surface.</p>
</li>
</ul>
</div>
</div>
<div class="sect3">
<h4 id="_description_784">Description</h4>
<div class="sidebarblock">
<div class="content">
<div class="title">Valid Usage</div>
<div class="ulist">
<ul>
<li>
<p><a id="VUID-VkViSurfaceCreateInfoNN-window-01318"></a>
<code>window</code> <strong class="purple">must</strong> be a valid <code>nn</code>::<code>vi</code>::<code>NativeWindowHandle</code></p>
</li>
</ul>
</div>
</div>
</div>
<div class="sidebarblock">
<div class="content">
<div class="title">Valid Usage (Implicit)</div>
<div class="ulist">
<ul>
<li>
<p><a id="VUID-VkViSurfaceCreateInfoNN-sType-sType"></a> <code>sType</code> <strong class="purple">must</strong> be <code>VK_STRUCTURE_TYPE_VI_SURFACE_CREATE_INFO_NN</code></p>
</li>
<li>
<p><a id="VUID-VkViSurfaceCreateInfoNN-pNext-pNext"></a> <code>pNext</code> <strong class="purple">must</strong> be <code>NULL</code></p>
</li>
<li>
<p><a id="VUID-VkViSurfaceCreateInfoNN-flags-zerobitmask"></a> <code>flags</code> <strong class="purple">must</strong> be <code>0</code></p>
</li>
</ul>
</div>
</div>
</div>
</div>
<div class="sect3">
<h4 id="_see_also_784">See Also</h4>
<div class="paragraph">
<p><a href="#VkStructureType">VkStructureType</a>, <a href="#VkViSurfaceCreateFlagsNN">VkViSurfaceCreateFlagsNN</a>, <a href="#vkCreateViSurfaceNN">vkCreateViSurfaceNN</a></p>
</div>
</div>
<div class="sect3">
<h4 id="_document_notes_784">Document Notes</h4>
<div class="paragraph">
<p>For more information, see the Vulkan Specification at URL</p>
</div>
<div class="paragraph">
<p><a href="https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VkViSurfaceCreateInfoNN" class="bare">https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VkViSurfaceCreateInfoNN</a></p>
</div>
<div class="paragraph">
<p>This page is extracted from the Vulkan Specification.
Fixes and changes should be made to the Specification, not directly.</p>
</div>
<div style="page-break-after: always;"></div>
</div>
</div>
<div class="sect2">
<h3 id="_vkviewport3">VkViewport(3)</h3>
<div class="sect3">
<h4 id="_name_785">Name</h4>
<div class="paragraph">
<p>VkViewport - Structure specifying a viewport</p>
</div>
</div>
<div class="sect3">
<h4 id="_c_specification_785">C Specification</h4>
<div class="paragraph">
<p>The <code>VkViewport</code> structure is defined as:</p>
</div>
<div id="VkViewport" class="listingblock">
<div class="content">
<pre class="highlight"><code class="language-c++" data-lang="c++">typedef struct VkViewport {
    float    x;
    float    y;
    float    width;
    float    height;
    float    minDepth;
    float    maxDepth;
} VkViewport;</code></pre>
</div>
</div>
</div>
<div class="sect3">
<h4 id="_members_422">Members</h4>
<div class="ulist">
<ul>
<li>
<p><code>x</code> and <code>y</code> are the viewport&#8217;s upper left corner <span class="eq">(x,y)</span>.</p>
</li>
<li>
<p><code>width</code> and <code>height</code> are the viewport&#8217;s width and height,
respectively.</p>
</li>
<li>
<p><code>minDepth</code> and <code>maxDepth</code> are the depth range for the viewport.
It is valid for <code>minDepth</code> to be greater than or equal to
<code>maxDepth</code>.</p>
</li>
</ul>
</div>
</div>
<div class="sect3">
<h4 id="_description_785">Description</h4>
<div class="paragraph">
<p>The framebuffer depth coordinate <span class="eq"><code>z</code><sub>f</sub></span> <strong class="purple">may</strong> be represented using
either a fixed-point or floating-point representation.
However, a floating-point representation <strong class="purple">must</strong> be used if the depth/stencil
attachment has a floating-point depth component.
If an <span class="eq">m</span>-bit fixed-point representation is used, we assume that it
represents each value \(\frac{k}{2^m - 1}\), where <span class="eq">k ∈ {
0, 1, &#8230;&#8203;, 2<sup>m</sup>-1 }</span>, as <span class="eq">k</span> (e.g. 1.0 is represented in binary as a
string of all ones).</p>
</div>
<div class="paragraph">
<p>The viewport parameters shown in the above equations are found from these
values as</p>
</div>
<div class="literalblock">
<div class="content">
<pre>:: [eq]#o~x~ = pname:x {plus} pname:width / 2#
:: [eq]#o~y~ = pname:y {plus} pname:height / 2#
:: [eq]#o~z~ = pname:minDepth#
:: [eq]#p~x~ = pname:width#
:: [eq]#p~y~ = pname:height#
:: [eq]#p~z~ = pname:maxDepth - pname:minDepth#.</pre>
</div>
</div>
<div class="paragraph">
<p>The application <strong class="purple">can</strong> specify a negative term for <code>height</code>, which has the
effect of negating the y coordinate in clip space before performing the
transform.
When using a negative <code>height</code>, the application <strong class="purple">should</strong> also adjust the
<code>y</code> value to point to the lower left corner of the viewport instead of
the upper left corner.
Using the negative <code>height</code> allows the application to avoid having to
negate the y component of the <code>Position</code> output from the last vertex
processing stage in shaders that also target other graphics APIs.</p>
</div>
<div class="paragraph">
<p>The width and height of the <a href="vkspec.html#limits-maxViewportDimensions">implementation-dependent maximum viewport dimensions</a> <strong class="purple">must</strong> be greater than
or equal to the width and height of the largest image which <strong class="purple">can</strong> be created
and attached to a framebuffer.</p>
</div>
<div class="paragraph">
<p>The floating-point viewport bounds are represented with an
<a href="vkspec.html#limits-viewportSubPixelBits">implementation-dependent precision</a>.</p>
</div>
<div class="sidebarblock">
<div class="content">
<div class="title">Valid Usage</div>
<div class="ulist">
<ul>
<li>
<p><a id="VUID-VkViewport-width-01770"></a>
<code>width</code> <strong class="purple">must</strong> be greater than <code>0.0</code></p>
</li>
<li>
<p><a id="VUID-VkViewport-width-01771"></a>
<code>width</code> <strong class="purple">must</strong> be less than or equal to
<code>VkPhysicalDeviceLimits</code>::<code>maxViewportDimensions</code>[0]</p>
</li>
<li>
<p><a id="VUID-VkViewport-height-01773"></a>
The absolute value of <code>height</code> <strong class="purple">must</strong> be less than or equal to
<code>VkPhysicalDeviceLimits</code>::<code>maxViewportDimensions</code>[1]</p>
</li>
<li>
<p><a id="VUID-VkViewport-x-01774"></a>
<code>x</code> <strong class="purple">must</strong> be greater than or equal to <code>viewportBoundsRange</code>[0]</p>
</li>
<li>
<p><a id="VUID-VkViewport-x-01232"></a>
<span class="eq">(<code>x</code> +  <code>width</code>)</span> <strong class="purple">must</strong> be less than or equal to
<code>viewportBoundsRange</code>[1]</p>
</li>
<li>
<p><a id="VUID-VkViewport-y-01775"></a>
<code>y</code> <strong class="purple">must</strong> be greater than or equal to <code>viewportBoundsRange</code>[0]</p>
</li>
<li>
<p><a id="VUID-VkViewport-y-01776"></a>
<code>y</code> <strong class="purple">must</strong> be less than or equal to <code>viewportBoundsRange</code>[1]</p>
</li>
<li>
<p><a id="VUID-VkViewport-y-01777"></a>
<span class="eq">(<code>y</code> +  <code>height</code>)</span> <strong class="purple">must</strong> be greater than or equal to
<code>viewportBoundsRange</code>[0]</p>
</li>
<li>
<p><a id="VUID-VkViewport-y-01233"></a>
<span class="eq">(<code>y</code> +  <code>height</code>)</span> <strong class="purple">must</strong> be less than or equal to
<code>viewportBoundsRange</code>[1]</p>
</li>
<li>
<p><a id="VUID-VkViewport-minDepth-01234"></a>
Unless <code><a href="vkspec.html#VK_EXT_depth_range_unrestricted" class="bare">html/vkspec.html#VK_EXT_depth_range_unrestricted</a></code> extension is enabled
<code>minDepth</code> <strong class="purple">must</strong> be between <code>0.0</code> and <code>1.0</code>, inclusive</p>
</li>
<li>
<p><a id="VUID-VkViewport-maxDepth-01235"></a>
Unless <code><a href="vkspec.html#VK_EXT_depth_range_unrestricted" class="bare">html/vkspec.html#VK_EXT_depth_range_unrestricted</a></code> extension is enabled
<code>maxDepth</code> <strong class="purple">must</strong> be between <code>0.0</code> and <code>1.0</code>, inclusive</p>
</li>
</ul>
</div>
</div>
</div>
</div>
<div class="sect3">
<h4 id="_see_also_785">See Also</h4>
<div class="paragraph">
<p><a href="#VkPipelineViewportStateCreateInfo">VkPipelineViewportStateCreateInfo</a>, <a href="#vkCmdSetViewport">vkCmdSetViewport</a></p>
</div>
</div>
<div class="sect3">
<h4 id="_document_notes_785">Document Notes</h4>
<div class="paragraph">
<p>For more information, see the Vulkan Specification at URL</p>
</div>
<div class="paragraph">
<p><a href="https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VkViewport" class="bare">https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VkViewport</a></p>
</div>
<div class="paragraph">
<p>This page is extracted from the Vulkan Specification.
Fixes and changes should be made to the Specification, not directly.</p>
</div>
<div style="page-break-after: always;"></div>
</div>
</div>
<div class="sect2">
<h3 id="_vkviewportswizzlenv3">VkViewportSwizzleNV(3)</h3>
<div class="sect3">
<h4 id="_name_786">Name</h4>
<div class="paragraph">
<p>VkViewportSwizzleNV - Structure specifying a viewport swizzle</p>
</div>
</div>
<div class="sect3">
<h4 id="_c_specification_786">C Specification</h4>
<div class="paragraph">
<p>The <code>VkViewportSwizzleNV</code> structure is defined as:</p>
</div>
<div id="VkViewportSwizzleNV" class="listingblock">
<div class="content">
<pre class="highlight"><code class="language-c++" data-lang="c++">typedef struct VkViewportSwizzleNV {
    VkViewportCoordinateSwizzleNV    x;
    VkViewportCoordinateSwizzleNV    y;
    VkViewportCoordinateSwizzleNV    z;
    VkViewportCoordinateSwizzleNV    w;
} VkViewportSwizzleNV;</code></pre>
</div>
</div>
</div>
<div class="sect3">
<h4 id="_members_423">Members</h4>
<div class="ulist">
<ul>
<li>
<p><code>x</code> is a <a href="#VkViewportCoordinateSwizzleNV">VkViewportCoordinateSwizzleNV</a> value specifying the
swizzle operation to apply to the x component of the primitive</p>
</li>
<li>
<p><code>y</code> is a <a href="#VkViewportCoordinateSwizzleNV">VkViewportCoordinateSwizzleNV</a> value specifying the
swizzle operation to apply to the y component of the primitive</p>
</li>
<li>
<p><code>z</code> is a <a href="#VkViewportCoordinateSwizzleNV">VkViewportCoordinateSwizzleNV</a> value specifying the
swizzle operation to apply to the z component of the primitive</p>
</li>
<li>
<p><code>w</code> is a <a href="#VkViewportCoordinateSwizzleNV">VkViewportCoordinateSwizzleNV</a> value specifying the
swizzle operation to apply to the w component of the primitive</p>
</li>
</ul>
</div>
</div>
<div class="sect3">
<h4 id="_description_786">Description</h4>
<div class="sidebarblock">
<div class="content">
<div class="title">Valid Usage (Implicit)</div>
<div class="ulist">
<ul>
<li>
<p><a id="VUID-VkViewportSwizzleNV-x-parameter"></a> <code>x</code> <strong class="purple">must</strong> be a valid <a href="#VkViewportCoordinateSwizzleNV">VkViewportCoordinateSwizzleNV</a> value</p>
</li>
<li>
<p><a id="VUID-VkViewportSwizzleNV-y-parameter"></a> <code>y</code> <strong class="purple">must</strong> be a valid <a href="#VkViewportCoordinateSwizzleNV">VkViewportCoordinateSwizzleNV</a> value</p>
</li>
<li>
<p><a id="VUID-VkViewportSwizzleNV-z-parameter"></a> <code>z</code> <strong class="purple">must</strong> be a valid <a href="#VkViewportCoordinateSwizzleNV">VkViewportCoordinateSwizzleNV</a> value</p>
</li>
<li>
<p><a id="VUID-VkViewportSwizzleNV-w-parameter"></a> <code>w</code> <strong class="purple">must</strong> be a valid <a href="#VkViewportCoordinateSwizzleNV">VkViewportCoordinateSwizzleNV</a> value</p>
</li>
</ul>
</div>
</div>
</div>
</div>
<div class="sect3">
<h4 id="_see_also_786">See Also</h4>
<div class="paragraph">
<p><a href="#VkPipelineViewportSwizzleStateCreateInfoNV">VkPipelineViewportSwizzleStateCreateInfoNV</a>, <a href="#VkViewportCoordinateSwizzleNV">VkViewportCoordinateSwizzleNV</a></p>
</div>
</div>
<div class="sect3">
<h4 id="_document_notes_786">Document Notes</h4>
<div class="paragraph">
<p>For more information, see the Vulkan Specification at URL</p>
</div>
<div class="paragraph">
<p><a href="https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VkViewportSwizzleNV" class="bare">https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VkViewportSwizzleNV</a></p>
</div>
<div class="paragraph">
<p>This page is extracted from the Vulkan Specification.
Fixes and changes should be made to the Specification, not directly.</p>
</div>
<div style="page-break-after: always;"></div>
</div>
</div>
<div class="sect2">
<h3 id="_vkviewportwscalingnv3">VkViewportWScalingNV(3)</h3>
<div class="sect3">
<h4 id="_name_787">Name</h4>
<div class="paragraph">
<p>VkViewportWScalingNV - Structure specifying a viewport</p>
</div>
</div>
<div class="sect3">
<h4 id="_c_specification_787">C Specification</h4>
<div class="paragraph">
<p>The <code>VkViewportWScalingNV</code> structure is defined as:</p>
</div>
<div id="VkViewportWScalingNV" class="listingblock">
<div class="content">
<pre class="highlight"><code class="language-c++" data-lang="c++">typedef struct VkViewportWScalingNV {
    float    xcoeff;
    float    ycoeff;
} VkViewportWScalingNV;</code></pre>
</div>
</div>
</div>
<div class="sect3">
<h4 id="_members_424">Members</h4>
<div class="ulist">
<ul>
<li>
<p><code>xcoeff</code> and <code>ycoeff</code> are the viewport&#8217;s W scaling factor for x
and y respectively.</p>
</li>
</ul>
</div>
</div>
<div class="sect3">
<h4 id="_description_787">Description</h4>

</div>
<div class="sect3">
<h4 id="_see_also_787">See Also</h4>
<div class="paragraph">
<p><a href="#VkPipelineViewportWScalingStateCreateInfoNV">VkPipelineViewportWScalingStateCreateInfoNV</a>, <a href="#vkCmdSetViewportWScalingNV">vkCmdSetViewportWScalingNV</a></p>
</div>
</div>
<div class="sect3">
<h4 id="_document_notes_787">Document Notes</h4>
<div class="paragraph">
<p>For more information, see the Vulkan Specification at URL</p>
</div>
<div class="paragraph">
<p><a href="https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VkViewportWScalingNV" class="bare">https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VkViewportWScalingNV</a></p>
</div>
<div class="paragraph">
<p>This page is extracted from the Vulkan Specification.
Fixes and changes should be made to the Specification, not directly.</p>
</div>
<div style="page-break-after: always;"></div>
</div>
</div>
<div class="sect2">
<h3 id="_vkwaylandsurfacecreateinfokhr3">VkWaylandSurfaceCreateInfoKHR(3)</h3>
<div class="sect3">
<h4 id="_name_788">Name</h4>
<div class="paragraph">
<p>VkWaylandSurfaceCreateInfoKHR - Structure specifying parameters of a newly created Wayland surface object</p>
</div>
</div>
<div class="sect3">
<h4 id="_c_specification_788">C Specification</h4>
<div class="paragraph">
<p>The <code>VkWaylandSurfaceCreateInfoKHR</code> structure is defined as:</p>
</div>
<div id="VkWaylandSurfaceCreateInfoKHR" class="listingblock">
<div class="content">
<pre class="highlight"><code class="language-c++" data-lang="c++">typedef struct VkWaylandSurfaceCreateInfoKHR {
    VkStructureType                   sType;
    const void*                       pNext;
    VkWaylandSurfaceCreateFlagsKHR    flags;
    struct wl_display*                display;
    struct wl_surface*                surface;
} VkWaylandSurfaceCreateInfoKHR;</code></pre>
</div>
</div>
</div>
<div class="sect3">
<h4 id="_members_425">Members</h4>
<div class="ulist">
<ul>
<li>
<p><code>sType</code> is the type of this structure.</p>
</li>
<li>
<p><code>pNext</code> is <code>NULL</code> or a pointer to an extension-specific structure.</p>
</li>
<li>
<p><code>flags</code> is reserved for future use.</p>
</li>
<li>
<p><code>display</code> and <code>surface</code> are pointers to the Wayland
<code>wl_display</code> and <code>wl_surface</code> to associate the surface with.</p>
</li>
</ul>
</div>
</div>
<div class="sect3">
<h4 id="_description_788">Description</h4>
<div class="sidebarblock">
<div class="content">
<div class="title">Valid Usage</div>
<div class="ulist">
<ul>
<li>
<p><a id="VUID-VkWaylandSurfaceCreateInfoKHR-display-01304"></a>
<code>display</code> <strong class="purple">must</strong> point to a valid Wayland <code>wl_display</code>.</p>
</li>
<li>
<p><a id="VUID-VkWaylandSurfaceCreateInfoKHR-surface-01305"></a>
<code>surface</code> <strong class="purple">must</strong> point to a valid Wayland <code>wl_surface</code>.</p>
</li>
</ul>
</div>
</div>
</div>
<div class="sidebarblock">
<div class="content">
<div class="title">Valid Usage (Implicit)</div>
<div class="ulist">
<ul>
<li>
<p><a id="VUID-VkWaylandSurfaceCreateInfoKHR-sType-sType"></a> <code>sType</code> <strong class="purple">must</strong> be <code>VK_STRUCTURE_TYPE_WAYLAND_SURFACE_CREATE_INFO_KHR</code></p>
</li>
<li>
<p><a id="VUID-VkWaylandSurfaceCreateInfoKHR-pNext-pNext"></a> <code>pNext</code> <strong class="purple">must</strong> be <code>NULL</code></p>
</li>
<li>
<p><a id="VUID-VkWaylandSurfaceCreateInfoKHR-flags-zerobitmask"></a> <code>flags</code> <strong class="purple">must</strong> be <code>0</code></p>
</li>
</ul>
</div>
</div>
</div>
</div>
<div class="sect3">
<h4 id="_see_also_788">See Also</h4>
<div class="paragraph">
<p><a href="#VkStructureType">VkStructureType</a>, <a href="#VkWaylandSurfaceCreateFlagsKHR">VkWaylandSurfaceCreateFlagsKHR</a>, <a href="#vkCreateWaylandSurfaceKHR">vkCreateWaylandSurfaceKHR</a></p>
</div>
</div>
<div class="sect3">
<h4 id="_document_notes_788">Document Notes</h4>
<div class="paragraph">
<p>For more information, see the Vulkan Specification at URL</p>
</div>
<div class="paragraph">
<p><a href="https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VkWaylandSurfaceCreateInfoKHR" class="bare">https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VkWaylandSurfaceCreateInfoKHR</a></p>
</div>
<div class="paragraph">
<p>This page is extracted from the Vulkan Specification.
Fixes and changes should be made to the Specification, not directly.</p>
</div>
<div style="page-break-after: always;"></div>
</div>
</div>
<div class="sect2">
<h3 id="_vkwin32keyedmutexacquirereleaseinfokhr3">VkWin32KeyedMutexAcquireReleaseInfoKHR(3)</h3>
<div class="sect3">
<h4 id="_name_789">Name</h4>
<div class="paragraph">
<p>VkWin32KeyedMutexAcquireReleaseInfoKHR - Use the Windows keyed mutex mechanism to synchronize work</p>
</div>
</div>
<div class="sect3">
<h4 id="_c_specification_789">C Specification</h4>
<div class="paragraph">
<p>When submitting work that operates on memory imported from a Direct3D 11
resource to a queue, the keyed mutex mechanism <strong class="purple">may</strong> be used in addition to
Vulkan semaphores to synchronize the work.
Keyed mutexes are a property of a properly created shareable Direct3D 11
resource.
They <strong class="purple">can</strong> only be used if the imported resource was created with the
<code>D3D11_RESOURCE_MISC_SHARED_KEYEDMUTEX</code> flag.</p>
</div>
<div class="paragraph">
<p>To acquire keyed mutexes before submitted work and/or release them after,
add a <a href="#VkWin32KeyedMutexAcquireReleaseInfoKHR">VkWin32KeyedMutexAcquireReleaseInfoKHR</a> structure to the
<code>pNext</code> chain of the <a href="#VkSubmitInfo">VkSubmitInfo</a> structure.</p>
</div>
<div class="paragraph">
<p>The <code>VkWin32KeyedMutexAcquireReleaseInfoKHR</code> structure is defined as:</p>
</div>
<div id="VkWin32KeyedMutexAcquireReleaseInfoKHR" class="listingblock">
<div class="content">
<pre class="highlight"><code class="language-c++" data-lang="c++">typedef struct VkWin32KeyedMutexAcquireReleaseInfoKHR {
    VkStructureType          sType;
    const void*              pNext;
    uint32_t                 acquireCount;
    const VkDeviceMemory*    pAcquireSyncs;
    const uint64_t*          pAcquireKeys;
    const uint32_t*          pAcquireTimeouts;
    uint32_t                 releaseCount;
    const VkDeviceMemory*    pReleaseSyncs;
    const uint64_t*          pReleaseKeys;
} VkWin32KeyedMutexAcquireReleaseInfoKHR;</code></pre>
</div>
</div>
</div>
<div class="sect3">
<h4 id="_members_426">Members</h4>
<div class="ulist">
<ul>
<li>
<p><code>acquireCount</code> is the number of entries in the <code>pAcquireSyncs</code>,
<code>pAcquireKeys</code>, and <code>pAcquireTimeoutMilliseconds</code> arrays.</p>
</li>
<li>
<p><code>pAcquireSyncs</code> is a pointer to an array of <a href="#VkDeviceMemory">VkDeviceMemory</a>
objects which were imported from Direct3D 11 resources.</p>
</li>
<li>
<p><code>pAcquireKeys</code> is a pointer to an array of mutex key values to wait
for prior to beginning the submitted work.
Entries refer to the keyed mutex associated with the corresponding
entries in <code>pAcquireSyncs</code>.</p>
</li>
<li>
<p><code>pAcquireTimeoutMilliseconds</code> is an array of timeout values, in
millisecond units, for each acquire specified in <code>pAcquireKeys</code>.</p>
</li>
<li>
<p><code>releaseCount</code> is the number of entries in the <code>pReleaseSyncs</code>
and <code>pReleaseKeys</code> arrays.</p>
</li>
<li>
<p><code>pReleaseSyncs</code> is a pointer to an array of <a href="#VkDeviceMemory">VkDeviceMemory</a>
objects which were imported from Direct3D 11 resources.</p>
</li>
<li>
<p><code>pReleaseKeys</code> is a pointer to an array of mutex key values to set
when the submitted work has completed.
Entries refer to the keyed mutex associated with the corresponding
entries in <code>pReleaseSyncs</code>.</p>
</li>
</ul>
</div>
</div>
<div class="sect3">
<h4 id="_description_789">Description</h4>
<div class="sidebarblock">
<div class="content">
<div class="title">Valid Usage</div>
<div class="ulist">
<ul>
<li>
<p><a id="VUID-VkWin32KeyedMutexAcquireReleaseInfoKHR-pAcquireSyncs-00081"></a>
Each member of <code>pAcquireSyncs</code> and <code>pReleaseSyncs</code> <strong class="purple">must</strong> be a
device memory object imported by setting
<a href="#VkImportMemoryWin32HandleInfoKHR">VkImportMemoryWin32HandleInfoKHR</a>::<code>handleType</code> to
<code>VK_EXTERNAL_MEMORY_HANDLE_TYPE_D3D11_TEXTURE_BIT</code> or
<code>VK_EXTERNAL_MEMORY_HANDLE_TYPE_D3D11_TEXTURE_KMT_BIT</code>.</p>
</li>
</ul>
</div>
</div>
</div>
<div class="sidebarblock">
<div class="content">
<div class="title">Valid Usage (Implicit)</div>
<div class="ulist">
<ul>
<li>
<p><a id="VUID-VkWin32KeyedMutexAcquireReleaseInfoKHR-sType-sType"></a> <code>sType</code> <strong class="purple">must</strong> be <code>VK_STRUCTURE_TYPE_WIN32_KEYED_MUTEX_ACQUIRE_RELEASE_INFO_KHR</code></p>
</li>
<li>
<p><a id="VUID-VkWin32KeyedMutexAcquireReleaseInfoKHR-pAcquireSyncs-parameter"></a> If <code>acquireCount</code> is not <code>0</code>, <code>pAcquireSyncs</code> <strong class="purple">must</strong> be a valid pointer to an array of <code>acquireCount</code> valid <code>VkDeviceMemory</code> handles</p>
</li>
<li>
<p><a id="VUID-VkWin32KeyedMutexAcquireReleaseInfoKHR-pAcquireKeys-parameter"></a> If <code>acquireCount</code> is not <code>0</code>, <code>pAcquireKeys</code> <strong class="purple">must</strong> be a valid pointer to an array of <code>acquireCount</code> <code>uint64_t</code> values</p>
</li>
<li>
<p><a id="VUID-VkWin32KeyedMutexAcquireReleaseInfoKHR-pAcquireTimeouts-parameter"></a> If <code>acquireCount</code> is not <code>0</code>, <code>pAcquireTimeouts</code> <strong class="purple">must</strong> be a valid pointer to an array of <code>acquireCount</code> <code>uint32_t</code> values</p>
</li>
<li>
<p><a id="VUID-VkWin32KeyedMutexAcquireReleaseInfoKHR-pReleaseSyncs-parameter"></a> If <code>releaseCount</code> is not <code>0</code>, <code>pReleaseSyncs</code> <strong class="purple">must</strong> be a valid pointer to an array of <code>releaseCount</code> valid <code>VkDeviceMemory</code> handles</p>
</li>
<li>
<p><a id="VUID-VkWin32KeyedMutexAcquireReleaseInfoKHR-pReleaseKeys-parameter"></a> If <code>releaseCount</code> is not <code>0</code>, <code>pReleaseKeys</code> <strong class="purple">must</strong> be a valid pointer to an array of <code>releaseCount</code> <code>uint64_t</code> values</p>
</li>
<li>
<p><a id="VUID-VkWin32KeyedMutexAcquireReleaseInfoKHR-commonparent"></a> Both of the elements of <code>pAcquireSyncs</code>, and the elements of <code>pReleaseSyncs</code> that are valid handles <strong class="purple">must</strong> have been created, allocated, or retrieved from the same <code>VkDevice</code></p>
</li>
</ul>
</div>
</div>
</div>
</div>
<div class="sect3">
<h4 id="_see_also_789">See Also</h4>
<div class="paragraph">
<p><a href="#VkDeviceMemory">VkDeviceMemory</a>, <a href="#VkStructureType">VkStructureType</a></p>
</div>
</div>
<div class="sect3">
<h4 id="_document_notes_789">Document Notes</h4>
<div class="paragraph">
<p>For more information, see the Vulkan Specification at URL</p>
</div>
<div class="paragraph">
<p><a href="https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VkWin32KeyedMutexAcquireReleaseInfoKHR" class="bare">https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VkWin32KeyedMutexAcquireReleaseInfoKHR</a></p>
</div>
<div class="paragraph">
<p>This page is extracted from the Vulkan Specification.
Fixes and changes should be made to the Specification, not directly.</p>
</div>
<div style="page-break-after: always;"></div>
</div>
</div>
<div class="sect2">
<h3 id="_vkwin32keyedmutexacquirereleaseinfonv3">VkWin32KeyedMutexAcquireReleaseInfoNV(3)</h3>
<div class="sect3">
<h4 id="_name_790">Name</h4>
<div class="paragraph">
<p>VkWin32KeyedMutexAcquireReleaseInfoNV - use Windows keyex mutex mechanism to synchronize work</p>
</div>
</div>
<div class="sect3">
<h4 id="_c_specification_790">C Specification</h4>
<div class="paragraph">
<p>When submitting work that operates on memory imported from a Direct3D 11
resource to a queue, the keyed mutex mechanism <strong class="purple">may</strong> be used in addition to
Vulkan semaphores to synchronize the work.
Keyed mutexes are a property of a properly created shareable Direct3D 11
resource.
They <strong class="purple">can</strong> only be used if the imported resource was created with the
<code>D3D11_RESOURCE_MISC_SHARED_KEYEDMUTEX</code> flag.</p>
</div>
<div class="paragraph">
<p>To acquire keyed mutexes before submitted work and/or release them after,
add a <a href="#VkWin32KeyedMutexAcquireReleaseInfoNV">VkWin32KeyedMutexAcquireReleaseInfoNV</a> structure to the
<code>pNext</code> chain of the <a href="#VkSubmitInfo">VkSubmitInfo</a> structure.</p>
</div>
<div class="paragraph">
<p>The <code>VkWin32KeyedMutexAcquireReleaseInfoNV</code> structure is defined as:</p>
</div>
<div id="VkWin32KeyedMutexAcquireReleaseInfoNV" class="listingblock">
<div class="content">
<pre class="highlight"><code class="language-c++" data-lang="c++">typedef struct VkWin32KeyedMutexAcquireReleaseInfoNV {
    VkStructureType          sType;
    const void*              pNext;
    uint32_t                 acquireCount;
    const VkDeviceMemory*    pAcquireSyncs;
    const uint64_t*          pAcquireKeys;
    const uint32_t*          pAcquireTimeoutMilliseconds;
    uint32_t                 releaseCount;
    const VkDeviceMemory*    pReleaseSyncs;
    const uint64_t*          pReleaseKeys;
} VkWin32KeyedMutexAcquireReleaseInfoNV;</code></pre>
</div>
</div>
</div>
<div class="sect3">
<h4 id="_members_427">Members</h4>
<div class="ulist">
<ul>
<li>
<p><code>acquireCount</code> is the number of entries in the <code>pAcquireSyncs</code>,
<code>pAcquireKeys</code>, and <code>pAcquireTimeoutMilliseconds</code> arrays.</p>
</li>
<li>
<p><code>pAcquireSyncs</code> is a pointer to an array of <a href="#VkDeviceMemory">VkDeviceMemory</a>
objects which were imported from Direct3D 11 resources.</p>
</li>
<li>
<p><code>pAcquireKeys</code> is a pointer to an array of mutex key values to wait
for prior to beginning the submitted work.
Entries refer to the keyed mutex associated with the corresponding
entries in <code>pAcquireSyncs</code>.</p>
</li>
<li>
<p><code>pAcquireTimeoutMilliseconds</code> is an array of timeout values, in
millisecond units, for each acquire specified in <code>pAcquireKeys</code>.</p>
</li>
<li>
<p><code>releaseCount</code> is the number of entries in the <code>pReleaseSyncs</code>
and <code>pReleaseKeys</code> arrays.</p>
</li>
<li>
<p><code>pReleaseSyncs</code> is a pointer to an array of <a href="#VkDeviceMemory">VkDeviceMemory</a>
objects which were imported from Direct3D 11 resources.</p>
</li>
<li>
<p><code>pReleaseKeys</code> is a pointer to an array of mutex key values to set
when the submitted work has completed.
Entries refer to the keyed mutex associated with the corresponding
entries in <code>pReleaseSyncs</code>.</p>
</li>
</ul>
</div>
</div>
<div class="sect3">
<h4 id="_description_790">Description</h4>
<div class="sidebarblock">
<div class="content">
<div class="title">Valid Usage (Implicit)</div>
<div class="ulist">
<ul>
<li>
<p><a id="VUID-VkWin32KeyedMutexAcquireReleaseInfoNV-sType-sType"></a> <code>sType</code> <strong class="purple">must</strong> be <code>VK_STRUCTURE_TYPE_WIN32_KEYED_MUTEX_ACQUIRE_RELEASE_INFO_NV</code></p>
</li>
<li>
<p><a id="VUID-VkWin32KeyedMutexAcquireReleaseInfoNV-pAcquireSyncs-parameter"></a> If <code>acquireCount</code> is not <code>0</code>, <code>pAcquireSyncs</code> <strong class="purple">must</strong> be a valid pointer to an array of <code>acquireCount</code> valid <code>VkDeviceMemory</code> handles</p>
</li>
<li>
<p><a id="VUID-VkWin32KeyedMutexAcquireReleaseInfoNV-pAcquireKeys-parameter"></a> If <code>acquireCount</code> is not <code>0</code>, <code>pAcquireKeys</code> <strong class="purple">must</strong> be a valid pointer to an array of <code>acquireCount</code> <code>uint64_t</code> values</p>
</li>
<li>
<p><a id="VUID-VkWin32KeyedMutexAcquireReleaseInfoNV-pAcquireTimeoutMilliseconds-parameter"></a> If <code>acquireCount</code> is not <code>0</code>, <code>pAcquireTimeoutMilliseconds</code> <strong class="purple">must</strong> be a valid pointer to an array of <code>acquireCount</code> <code>uint32_t</code> values</p>
</li>
<li>
<p><a id="VUID-VkWin32KeyedMutexAcquireReleaseInfoNV-pReleaseSyncs-parameter"></a> If <code>releaseCount</code> is not <code>0</code>, <code>pReleaseSyncs</code> <strong class="purple">must</strong> be a valid pointer to an array of <code>releaseCount</code> valid <code>VkDeviceMemory</code> handles</p>
</li>
<li>
<p><a id="VUID-VkWin32KeyedMutexAcquireReleaseInfoNV-pReleaseKeys-parameter"></a> If <code>releaseCount</code> is not <code>0</code>, <code>pReleaseKeys</code> <strong class="purple">must</strong> be a valid pointer to an array of <code>releaseCount</code> <code>uint64_t</code> values</p>
</li>
<li>
<p><a id="VUID-VkWin32KeyedMutexAcquireReleaseInfoNV-commonparent"></a> Both of the elements of <code>pAcquireSyncs</code>, and the elements of <code>pReleaseSyncs</code> that are valid handles <strong class="purple">must</strong> have been created, allocated, or retrieved from the same <code>VkDevice</code></p>
</li>
</ul>
</div>
</div>
</div>
</div>
<div class="sect3">
<h4 id="_see_also_790">See Also</h4>
<div class="paragraph">
<p><a href="#VkDeviceMemory">VkDeviceMemory</a>, <a href="#VkStructureType">VkStructureType</a></p>
</div>
</div>
<div class="sect3">
<h4 id="_document_notes_790">Document Notes</h4>
<div class="paragraph">
<p>For more information, see the Vulkan Specification at URL</p>
</div>
<div class="paragraph">
<p><a href="https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VkWin32KeyedMutexAcquireReleaseInfoNV" class="bare">https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VkWin32KeyedMutexAcquireReleaseInfoNV</a></p>
</div>
<div class="paragraph">
<p>This page is extracted from the Vulkan Specification.
Fixes and changes should be made to the Specification, not directly.</p>
</div>
<div style="page-break-after: always;"></div>
</div>
</div>
<div class="sect2">
<h3 id="_vkwin32surfacecreateinfokhr3">VkWin32SurfaceCreateInfoKHR(3)</h3>
<div class="sect3">
<h4 id="_name_791">Name</h4>
<div class="paragraph">
<p>VkWin32SurfaceCreateInfoKHR - Structure specifying parameters of a newly created Win32 surface object</p>
</div>
</div>
<div class="sect3">
<h4 id="_c_specification_791">C Specification</h4>
<div class="paragraph">
<p>The <code>VkWin32SurfaceCreateInfoKHR</code> structure is defined as:</p>
</div>
<div id="VkWin32SurfaceCreateInfoKHR" class="listingblock">
<div class="content">
<pre class="highlight"><code class="language-c++" data-lang="c++">typedef struct VkWin32SurfaceCreateInfoKHR {
    VkStructureType                 sType;
    const void*                     pNext;
    VkWin32SurfaceCreateFlagsKHR    flags;
    HINSTANCE                       hinstance;
    HWND                            hwnd;
} VkWin32SurfaceCreateInfoKHR;</code></pre>
</div>
</div>
</div>
<div class="sect3">
<h4 id="_members_428">Members</h4>
<div class="ulist">
<ul>
<li>
<p><code>sType</code> is the type of this structure.</p>
</li>
<li>
<p><code>pNext</code> is <code>NULL</code> or a pointer to an extension-specific structure.</p>
</li>
<li>
<p><code>flags</code> is reserved for future use.</p>
</li>
<li>
<p><code>hinstance</code> and <code>hwnd</code> are the Win32 <code>HINSTANCE</code> and
<code>HWND</code> for the window to associate the surface with.</p>
</li>
</ul>
</div>
</div>
<div class="sect3">
<h4 id="_description_791">Description</h4>
<div class="sidebarblock">
<div class="content">
<div class="title">Valid Usage</div>
<div class="ulist">
<ul>
<li>
<p><a id="VUID-VkWin32SurfaceCreateInfoKHR-hinstance-01307"></a>
<code>hinstance</code> <strong class="purple">must</strong> be a valid Win32 <code>HINSTANCE</code>.</p>
</li>
<li>
<p><a id="VUID-VkWin32SurfaceCreateInfoKHR-hwnd-01308"></a>
<code>hwnd</code> <strong class="purple">must</strong> be a valid Win32 <code>HWND</code>.</p>
</li>
</ul>
</div>
</div>
</div>
<div class="sidebarblock">
<div class="content">
<div class="title">Valid Usage (Implicit)</div>
<div class="ulist">
<ul>
<li>
<p><a id="VUID-VkWin32SurfaceCreateInfoKHR-sType-sType"></a> <code>sType</code> <strong class="purple">must</strong> be <code>VK_STRUCTURE_TYPE_WIN32_SURFACE_CREATE_INFO_KHR</code></p>
</li>
<li>
<p><a id="VUID-VkWin32SurfaceCreateInfoKHR-pNext-pNext"></a> <code>pNext</code> <strong class="purple">must</strong> be <code>NULL</code></p>
</li>
<li>
<p><a id="VUID-VkWin32SurfaceCreateInfoKHR-flags-zerobitmask"></a> <code>flags</code> <strong class="purple">must</strong> be <code>0</code></p>
</li>
</ul>
</div>
</div>
</div>
</div>
<div class="sect3">
<h4 id="_see_also_791">See Also</h4>
<div class="paragraph">
<p><a href="#VkStructureType">VkStructureType</a>, <a href="#VkWin32SurfaceCreateFlagsKHR">VkWin32SurfaceCreateFlagsKHR</a>, <a href="#vkCreateWin32SurfaceKHR">vkCreateWin32SurfaceKHR</a></p>
</div>
</div>
<div class="sect3">
<h4 id="_document_notes_791">Document Notes</h4>
<div class="paragraph">
<p>For more information, see the Vulkan Specification at URL</p>
</div>
<div class="paragraph">
<p><a href="https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VkWin32SurfaceCreateInfoKHR" class="bare">https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VkWin32SurfaceCreateInfoKHR</a></p>
</div>
<div class="paragraph">
<p>This page is extracted from the Vulkan Specification.
Fixes and changes should be made to the Specification, not directly.</p>
</div>
<div style="page-break-after: always;"></div>
</div>
</div>
<div class="sect2">
<h3 id="_vkwritedescriptorset3">VkWriteDescriptorSet(3)</h3>
<div class="sect3">
<h4 id="_name_792">Name</h4>
<div class="paragraph">
<p>VkWriteDescriptorSet - Structure specifying the parameters of a descriptor set write operation</p>
</div>
</div>
<div class="sect3">
<h4 id="_c_specification_792">C Specification</h4>
<div class="paragraph">
<p>The <code>VkWriteDescriptorSet</code> structure is defined as:</p>
</div>
<div id="VkWriteDescriptorSet" class="listingblock">
<div class="content">
<pre class="highlight"><code class="language-c++" data-lang="c++">typedef struct VkWriteDescriptorSet {
    VkStructureType                  sType;
    const void*                      pNext;
    VkDescriptorSet                  dstSet;
    uint32_t                         dstBinding;
    uint32_t                         dstArrayElement;
    uint32_t                         descriptorCount;
    VkDescriptorType                 descriptorType;
    const VkDescriptorImageInfo*     pImageInfo;
    const VkDescriptorBufferInfo*    pBufferInfo;
    const VkBufferView*              pTexelBufferView;
} VkWriteDescriptorSet;</code></pre>
</div>
</div>
</div>
<div class="sect3">
<h4 id="_members_429">Members</h4>
<div class="ulist">
<ul>
<li>
<p><code>sType</code> is the type of this structure.</p>
</li>
<li>
<p><code>pNext</code> is <code>NULL</code> or a pointer to an extension-specific structure.</p>
</li>
<li>
<p><code>dstSet</code> is the destination descriptor set to update.</p>
</li>
<li>
<p><code>dstBinding</code> is the descriptor binding within that set.</p>
</li>
<li>
<p><code>dstArrayElement</code> is the starting element in that array.
If the descriptor binding identified by <code>dstSet</code> and
<code>dstBinding</code> has a descriptor type of
<code>VK_DESCRIPTOR_TYPE_INLINE_UNIFORM_BLOCK_EXT</code> then
<code>dstArrayElement</code> specifies the starting byte offset within the
binding.</p>
</li>
<li>
<p><code>descriptorCount</code> is the number of descriptors to update (the number
of elements in <code>pImageInfo</code>, <code>pBufferInfo</code>, or
<code>pTexelBufferView</code>
, or a value matching the <code>dataSize</code> member of an instance of
<a href="#VkWriteDescriptorSetInlineUniformBlockEXT">VkWriteDescriptorSetInlineUniformBlockEXT</a> in the <code>pNext</code> chain
, or a value matching the <code>accelerationStructureCount</code> of an
instance of <a href="#VkWriteDescriptorSetAccelerationStructureNV">VkWriteDescriptorSetAccelerationStructureNV</a> in the
<code>pNext</code> chain
).
If the descriptor binding identified by <code>dstSet</code> and
<code>dstBinding</code> has a descriptor type of
<code>VK_DESCRIPTOR_TYPE_INLINE_UNIFORM_BLOCK_EXT</code> then
<code>descriptorCount</code> specifies the number of bytes to update.</p>
</li>
<li>
<p><code>descriptorType</code> is a <a href="#VkDescriptorType">VkDescriptorType</a> specifying the type of
each descriptor in <code>pImageInfo</code>, <code>pBufferInfo</code>, or
<code>pTexelBufferView</code>, as described below.
It <strong class="purple">must</strong> be the same type as that specified in
<code>VkDescriptorSetLayoutBinding</code> for <code>dstSet</code> at <code>dstBinding</code>.
The type of the descriptor also controls which array the descriptors are
taken from.</p>
</li>
<li>
<p><code>pImageInfo</code> points to an array of <a href="#VkDescriptorImageInfo">VkDescriptorImageInfo</a>
structures or is ignored, as described below.</p>
</li>
<li>
<p><code>pBufferInfo</code> points to an array of <a href="#VkDescriptorBufferInfo">VkDescriptorBufferInfo</a>
structures or is ignored, as described below.</p>
</li>
<li>
<p><code>pTexelBufferView</code> points to an array of <a href="#VkBufferView">VkBufferView</a> handles
as described in the <a href="vkspec.html#resources-buffer-views">Buffer Views</a> section or
is ignored, as described below.</p>
</li>
</ul>
</div>
</div>
<div class="sect3">
<h4 id="_description_792">Description</h4>
<div class="paragraph">
<p>Only one of <code>pImageInfo</code>, <code>pBufferInfo</code>, or <code>pTexelBufferView</code>
members is used according to the descriptor type specified in the
<code>descriptorType</code> member of the containing <code>VkWriteDescriptorSet</code>
structure,
or none of them in case <code>descriptorType</code> is
<code>VK_DESCRIPTOR_TYPE_INLINE_UNIFORM_BLOCK_EXT</code>, in which case the source
data for the descriptor writes is taken from the instance of
<a href="#VkWriteDescriptorSetInlineUniformBlockEXT">VkWriteDescriptorSetInlineUniformBlockEXT</a> in the <code>pNext</code> chain of
<code>VkWriteDescriptorSet</code>,
or if <code>descriptorType</code> is
<code>VK_DESCRIPTOR_TYPE_ACCELERATION_STRUCTURE_NV</code>, in which case the source
data for the descriptor writes is taken from the instance of
<a href="#VkWriteDescriptorSetAccelerationStructureNV">VkWriteDescriptorSetAccelerationStructureNV</a> in the <code>pNext</code> chain
of <code>VkWriteDescriptorSet</code>,
as specified below.</p>
</div>
<div id="descriptorsets-updates-consecutive" class="paragraph">
<p>If the <code>dstBinding</code> has fewer than <code>descriptorCount</code> array elements
remaining starting from <code>dstArrayElement</code>, then the remainder will be
used to update the subsequent binding - <span class="eq"><code>dstBinding</code>+1</span> starting at
array element zero.
If a binding has a <code>descriptorCount</code> of zero, it is skipped.
This behavior applies recursively, with the update affecting consecutive
bindings as needed to update all <code>descriptorCount</code> descriptors.</p>
</div>
<div class="admonitionblock note">
<table>
<tr>
<td class="icon">
<i class="fa icon-note" title="Note"></i>
</td>
<td class="content">
<div class="title">Note</div>
<div class="paragraph">
<p>The same behavior applies to bindings with a descriptor type of
<code>VK_DESCRIPTOR_TYPE_INLINE_UNIFORM_BLOCK_EXT</code> where
<code>descriptorCount</code> specifies the number of bytes to update while
<code>dstArrayElement</code> specifies the starting byte offset, thus in this case
if the <code>dstBinding</code> has a smaller byte size than the sum of
<code>dstArrayElement</code> and <code>descriptorCount</code>, then the remainder will be
used to update the subsequent binding - <span class="eq"><code>dstBinding</code>+1</span> starting at
offset zero.
This falls out as a special case of the above rule.</p>
</div>
</td>
</tr>
</table>
</div>
<div class="sidebarblock">
<div class="content">
<div class="title">Valid Usage</div>
<div class="ulist">
<ul>
<li>
<p><a id="VUID-VkWriteDescriptorSet-dstBinding-00315"></a>
<code>dstBinding</code> <strong class="purple">must</strong> be less than or equal to the maximum value of
<code>binding</code> of all <a href="#VkDescriptorSetLayoutBinding">VkDescriptorSetLayoutBinding</a> structures
specified when <code>dstSet</code>&#8217;s descriptor set layout was created</p>
</li>
<li>
<p><a id="VUID-VkWriteDescriptorSet-dstBinding-00316"></a>
<code>dstBinding</code> <strong class="purple">must</strong> be a binding with a non-zero
<code>descriptorCount</code></p>
</li>
<li>
<p><a id="VUID-VkWriteDescriptorSet-descriptorCount-00317"></a>
All consecutive bindings updated via a single <code>VkWriteDescriptorSet</code>
structure, except those with a <code>descriptorCount</code> of zero, <strong class="purple">must</strong> have
identical <code>descriptorType</code> and <code>stageFlags</code>.</p>
</li>
<li>
<p><a id="VUID-VkWriteDescriptorSet-descriptorCount-00318"></a>
All consecutive bindings updated via a single <code>VkWriteDescriptorSet</code>
structure, except those with a <code>descriptorCount</code> of zero, <strong class="purple">must</strong> all
either use immutable samplers or <strong class="purple">must</strong> all not use immutable samplers.</p>
</li>
<li>
<p><a id="VUID-VkWriteDescriptorSet-descriptorType-00319"></a>
<code>descriptorType</code> <strong class="purple">must</strong> match the type of <code>dstBinding</code> within
<code>dstSet</code></p>
</li>
<li>
<p><a id="VUID-VkWriteDescriptorSet-dstSet-00320"></a>
<code>dstSet</code> <strong class="purple">must</strong> be a valid <a href="#VkDescriptorSet">VkDescriptorSet</a> handle</p>
</li>
<li>
<p><a id="VUID-VkWriteDescriptorSet-dstArrayElement-00321"></a>
The sum of <code>dstArrayElement</code> and <code>descriptorCount</code> <strong class="purple">must</strong> be less
than or equal to the number of array elements in the descriptor set
binding specified by <code>dstBinding</code>, and all applicable consecutive
bindings, as described by <a href="vkspec.html#descriptorsets-updates-consecutive" class="bare">html/vkspec.html#descriptorsets-updates-consecutive</a></p>
</li>
<li>
<p><a id="VUID-VkWriteDescriptorSet-descriptorType-02219"></a>
If <code>descriptorType</code> is
<code>VK_DESCRIPTOR_TYPE_INLINE_UNIFORM_BLOCK_EXT</code>, <code>dstArrayElement</code>
<strong class="purple">must</strong> be an integer multiple of <code>4</code></p>
</li>
<li>
<p><a id="VUID-VkWriteDescriptorSet-descriptorType-02220"></a>
If <code>descriptorType</code> is
<code>VK_DESCRIPTOR_TYPE_INLINE_UNIFORM_BLOCK_EXT</code>, <code>descriptorCount</code>
<strong class="purple">must</strong> be an integer multiple of <code>4</code></p>
</li>
<li>
<p><a id="VUID-VkWriteDescriptorSet-descriptorType-00322"></a>
If <code>descriptorType</code> is <code>VK_DESCRIPTOR_TYPE_SAMPLER</code>,
<code>VK_DESCRIPTOR_TYPE_COMBINED_IMAGE_SAMPLER</code>,
<code>VK_DESCRIPTOR_TYPE_SAMPLED_IMAGE</code>,
<code>VK_DESCRIPTOR_TYPE_STORAGE_IMAGE</code>, or
<code>VK_DESCRIPTOR_TYPE_INPUT_ATTACHMENT</code>, <code>pImageInfo</code> <strong class="purple">must</strong> be a
valid pointer to an array of <code>descriptorCount</code> valid
<code>VkDescriptorImageInfo</code> structures</p>
</li>
<li>
<p><a id="VUID-VkWriteDescriptorSet-descriptorType-00323"></a>
If <code>descriptorType</code> is <code>VK_DESCRIPTOR_TYPE_UNIFORM_TEXEL_BUFFER</code>
or <code>VK_DESCRIPTOR_TYPE_STORAGE_TEXEL_BUFFER</code>, <code>pTexelBufferView</code>
<strong class="purple">must</strong> be a valid pointer to an array of <code>descriptorCount</code> valid
<code>VkBufferView</code> handles</p>
</li>
<li>
<p><a id="VUID-VkWriteDescriptorSet-descriptorType-00324"></a>
If <code>descriptorType</code> is <code>VK_DESCRIPTOR_TYPE_UNIFORM_BUFFER</code>,
<code>VK_DESCRIPTOR_TYPE_STORAGE_BUFFER</code>,
<code>VK_DESCRIPTOR_TYPE_UNIFORM_BUFFER_DYNAMIC</code>, or
<code>VK_DESCRIPTOR_TYPE_STORAGE_BUFFER_DYNAMIC</code>, <code>pBufferInfo</code> <strong class="purple">must</strong>
be a valid pointer to an array of <code>descriptorCount</code> valid
<code>VkDescriptorBufferInfo</code> structures</p>
</li>
<li>
<p><a id="VUID-VkWriteDescriptorSet-descriptorType-00325"></a>
If <code>descriptorType</code> is <code>VK_DESCRIPTOR_TYPE_SAMPLER</code> or
<code>VK_DESCRIPTOR_TYPE_COMBINED_IMAGE_SAMPLER</code>, and <code>dstSet</code> was
not allocated with a layout that included immutable samplers for
<code>dstBinding</code> with <code>descriptorType</code>, the <code>sampler</code> member of
each element of <code>pImageInfo</code> <strong class="purple">must</strong> be a valid <code>VkSampler</code> object</p>
</li>
<li>
<p><a id="VUID-VkWriteDescriptorSet-descriptorType-00326"></a>
If <code>descriptorType</code> is
<code>VK_DESCRIPTOR_TYPE_COMBINED_IMAGE_SAMPLER</code>,
<code>VK_DESCRIPTOR_TYPE_SAMPLED_IMAGE</code>,
<code>VK_DESCRIPTOR_TYPE_STORAGE_IMAGE</code>, or
<code>VK_DESCRIPTOR_TYPE_INPUT_ATTACHMENT</code>, the <code>imageView</code> and
<code>imageLayout</code> members of each element of <code>pImageInfo</code> <strong class="purple">must</strong> be a
valid <code>VkImageView</code> and <a href="#VkImageLayout">VkImageLayout</a>, respectively</p>
</li>
<li>
<p><a id="VUID-VkWriteDescriptorSet-descriptorType-02221"></a>
If <code>descriptorType</code> is
<code>VK_DESCRIPTOR_TYPE_INLINE_UNIFORM_BLOCK_EXT</code>, the <code>pNext</code> chain
<strong class="purple">must</strong> include a <a href="#VkWriteDescriptorSetInlineUniformBlockEXT">VkWriteDescriptorSetInlineUniformBlockEXT</a>
structure whose <code>dataSize</code> member equals <code>descriptorCount</code></p>
</li>
<li>
<p><a id="VUID-VkWriteDescriptorSet-descriptorType-02382"></a>
If <code>descriptorType</code> is
<code>VK_DESCRIPTOR_TYPE_ACCELERATION_STRUCTURE_NV</code>, the <code>pNext</code>
chain <strong class="purple">must</strong> include a <a href="#VkWriteDescriptorSetAccelerationStructureNV">VkWriteDescriptorSetAccelerationStructureNV</a>
structure whose <code>accelerationStructureCount</code> member equals
<code>descriptorCount</code></p>
</li>
<li>
<p><a id="VUID-VkWriteDescriptorSet-descriptorType-01946"></a>
If <code>descriptorType</code> is <code>VK_DESCRIPTOR_TYPE_SAMPLED_IMAGE</code>, then
the <code>imageView</code> member of each <code>pImageInfo</code> element <strong class="purple">must</strong> have
been created without a <code>VkSamplerYcbcrConversionInfo</code> structure in
its <code>pNext</code> chain</p>
</li>
<li>
<p><a id="VUID-VkWriteDescriptorSet-descriptorType-01947"></a>
If <code>descriptorType</code> is
<code>VK_DESCRIPTOR_TYPE_COMBINED_IMAGE_SAMPLER</code>, and if any element of
<code>pImageInfo</code> has a <code>imageView</code> member that was created with a
<code>VkSamplerYcbcrConversionInfo</code> structure in its <code>pNext</code> chain,
then <code>dstSet</code> <strong class="purple">must</strong> have been allocated with a layout that included
immutable samplers for <code>dstBinding</code></p>
</li>
<li>
<p><a id="VUID-VkWriteDescriptorSet-descriptorType-01948"></a>
If <code>descriptorType</code> is
<code>VK_DESCRIPTOR_TYPE_COMBINED_IMAGE_SAMPLER</code>, and <code>dstSet</code> was
allocated with a layout that included immutable samplers for
<code>dstBinding</code>, then the <code>imageView</code> member of each element of
<code>pImageInfo</code> which corresponds to an immutable sampler that enables
<a href="vkspec.html#samplers-YCbCr-conversion">sampler Y&#8217;C<sub>B</sub>C<sub>R</sub> conversion</a> <strong class="purple">must</strong> have
been created with a <code>VkSamplerYcbcrConversionInfo</code> structure in its
<code>pNext</code> chain with an <em>identically defined</em>
<code>VkSamplerYcbcrConversionInfo</code> to the corresponding immutable
sampler</p>
</li>
<li>
<p><a id="VUID-VkWriteDescriptorSet-descriptorType-01402"></a>
If <code>descriptorType</code> is <code>VK_DESCRIPTOR_TYPE_STORAGE_IMAGE</code>, for
each descriptor that will be accessed via load or store operations the
<code>imageLayout</code> member for corresponding elements of <code>pImageInfo</code>
<strong class="purple">must</strong> be <code>VK_IMAGE_LAYOUT_GENERAL</code></p>
</li>
<li>
<p><a id="VUID-VkWriteDescriptorSet-descriptorType-00327"></a>
If <code>descriptorType</code> is <code>VK_DESCRIPTOR_TYPE_UNIFORM_BUFFER</code> or
<code>VK_DESCRIPTOR_TYPE_UNIFORM_BUFFER_DYNAMIC</code>, the <code>offset</code> member
of each element of <code>pBufferInfo</code> <strong class="purple">must</strong> be a multiple of
<code>VkPhysicalDeviceLimits</code>::<code>minUniformBufferOffsetAlignment</code></p>
</li>
<li>
<p><a id="VUID-VkWriteDescriptorSet-descriptorType-00328"></a>
If <code>descriptorType</code> is <code>VK_DESCRIPTOR_TYPE_STORAGE_BUFFER</code> or
<code>VK_DESCRIPTOR_TYPE_STORAGE_BUFFER_DYNAMIC</code>, the <code>offset</code> member
of each element of <code>pBufferInfo</code> <strong class="purple">must</strong> be a multiple of
<code>VkPhysicalDeviceLimits</code>::<code>minStorageBufferOffsetAlignment</code></p>
</li>
<li>
<p><a id="VUID-VkWriteDescriptorSet-descriptorType-00329"></a>
If <code>descriptorType</code> is <code>VK_DESCRIPTOR_TYPE_UNIFORM_BUFFER</code>,
<code>VK_DESCRIPTOR_TYPE_UNIFORM_BUFFER_DYNAMIC</code>,
<code>VK_DESCRIPTOR_TYPE_STORAGE_BUFFER</code>, or
<code>VK_DESCRIPTOR_TYPE_STORAGE_BUFFER_DYNAMIC</code>, and the <code>buffer</code>
member of any element of <code>pBufferInfo</code> is the handle of a non-sparse
buffer, then that buffer <strong class="purple">must</strong> be bound completely and contiguously to a
single <code>VkDeviceMemory</code> object</p>
</li>
<li>
<p><a id="VUID-VkWriteDescriptorSet-descriptorType-00330"></a>
If <code>descriptorType</code> is <code>VK_DESCRIPTOR_TYPE_UNIFORM_BUFFER</code> or
<code>VK_DESCRIPTOR_TYPE_UNIFORM_BUFFER_DYNAMIC</code>, the <code>buffer</code> member
of each element of <code>pBufferInfo</code> <strong class="purple">must</strong> have been created with
<code>VK_BUFFER_USAGE_UNIFORM_BUFFER_BIT</code> set</p>
</li>
<li>
<p><a id="VUID-VkWriteDescriptorSet-descriptorType-00331"></a>
If <code>descriptorType</code> is <code>VK_DESCRIPTOR_TYPE_STORAGE_BUFFER</code> or
<code>VK_DESCRIPTOR_TYPE_STORAGE_BUFFER_DYNAMIC</code>, the <code>buffer</code> member
of each element of <code>pBufferInfo</code> <strong class="purple">must</strong> have been created with
<code>VK_BUFFER_USAGE_STORAGE_BUFFER_BIT</code> set</p>
</li>
<li>
<p><a id="VUID-VkWriteDescriptorSet-descriptorType-00332"></a>
If <code>descriptorType</code> is <code>VK_DESCRIPTOR_TYPE_UNIFORM_BUFFER</code> or
<code>VK_DESCRIPTOR_TYPE_UNIFORM_BUFFER_DYNAMIC</code>, the <code>range</code> member
of each element of <code>pBufferInfo</code>, or the effective range if
<code>range</code> is <code>VK_WHOLE_SIZE</code>, <strong class="purple">must</strong> be less than or equal to
<code>VkPhysicalDeviceLimits</code>::<code>maxUniformBufferRange</code></p>
</li>
<li>
<p><a id="VUID-VkWriteDescriptorSet-descriptorType-00333"></a>
If <code>descriptorType</code> is <code>VK_DESCRIPTOR_TYPE_STORAGE_BUFFER</code> or
<code>VK_DESCRIPTOR_TYPE_STORAGE_BUFFER_DYNAMIC</code>, the <code>range</code> member
of each element of <code>pBufferInfo</code>, or the effective range if
<code>range</code> is <code>VK_WHOLE_SIZE</code>, <strong class="purple">must</strong> be less than or equal to
<code>VkPhysicalDeviceLimits</code>::<code>maxStorageBufferRange</code></p>
</li>
<li>
<p><a id="VUID-VkWriteDescriptorSet-descriptorType-00334"></a>
If <code>descriptorType</code> is
<code>VK_DESCRIPTOR_TYPE_UNIFORM_TEXEL_BUFFER</code>, the <code>VkBuffer</code> that
each element of <code>pTexelBufferView</code> was created from <strong class="purple">must</strong> have been
created with <code>VK_BUFFER_USAGE_UNIFORM_TEXEL_BUFFER_BIT</code> set</p>
</li>
<li>
<p><a id="VUID-VkWriteDescriptorSet-descriptorType-00335"></a>
If <code>descriptorType</code> is
<code>VK_DESCRIPTOR_TYPE_STORAGE_TEXEL_BUFFER</code>, the <code>VkBuffer</code> that
each element of <code>pTexelBufferView</code> was created from <strong class="purple">must</strong> have been
created with <code>VK_BUFFER_USAGE_STORAGE_TEXEL_BUFFER_BIT</code> set</p>
</li>
<li>
<p><a id="VUID-VkWriteDescriptorSet-descriptorType-00336"></a>
If <code>descriptorType</code> is <code>VK_DESCRIPTOR_TYPE_STORAGE_IMAGE</code> or
<code>VK_DESCRIPTOR_TYPE_INPUT_ATTACHMENT</code>, the <code>imageView</code> member of
each element of <code>pImageInfo</code> <strong class="purple">must</strong> have been created with the
identity swizzle</p>
</li>
<li>
<p><a id="VUID-VkWriteDescriptorSet-descriptorType-00337"></a>
If <code>descriptorType</code> is <code>VK_DESCRIPTOR_TYPE_SAMPLED_IMAGE</code> or
<code>VK_DESCRIPTOR_TYPE_COMBINED_IMAGE_SAMPLER</code>, the <code>imageView</code>
member of each element of <code>pImageInfo</code> <strong class="purple">must</strong> have been created with
<code>VK_IMAGE_USAGE_SAMPLED_BIT</code> set</p>
</li>
<li>
<p><a id="VUID-VkWriteDescriptorSet-descriptorType-01403"></a>
If <code>descriptorType</code> is <code>VK_DESCRIPTOR_TYPE_SAMPLED_IMAGE</code> or
<code>VK_DESCRIPTOR_TYPE_COMBINED_IMAGE_SAMPLER</code>, the <code>imageLayout</code>
member of each element of <code>pImageInfo</code> <strong class="purple">must</strong> be a member of the list
given in <a href="vkspec.html#descriptorsets-sampledimage">Sampled Image</a> or
<a href="vkspec.html#descriptorsets-combinedimagesampler">Combined Image Sampler</a>,
corresponding to its type</p>
</li>
<li>
<p><a id="VUID-VkWriteDescriptorSet-descriptorType-00338"></a>
If <code>descriptorType</code> is <code>VK_DESCRIPTOR_TYPE_INPUT_ATTACHMENT</code>,
the <code>imageView</code> member of each element of <code>pImageInfo</code> <strong class="purple">must</strong>
have been created with <code>VK_IMAGE_USAGE_INPUT_ATTACHMENT_BIT</code> set</p>
</li>
<li>
<p><a id="VUID-VkWriteDescriptorSet-descriptorType-00339"></a>
If <code>descriptorType</code> is <code>VK_DESCRIPTOR_TYPE_STORAGE_IMAGE</code>, the
<code>imageView</code> member of each element of <code>pImageInfo</code> <strong class="purple">must</strong> have
been created with <code>VK_IMAGE_USAGE_STORAGE_BIT</code> set</p>
</li>
<li>
<p><a id="VUID-VkWriteDescriptorSet-descriptorCount-03048"></a>
All consecutive bindings updated via a single <code>VkWriteDescriptorSet</code>
structure, except those with a <code>descriptorCount</code> of zero, <strong class="purple">must</strong> have
identical <a href="#VkDescriptorBindingFlagBitsEXT">VkDescriptorBindingFlagBitsEXT</a>.</p>
</li>
</ul>
</div>
</div>
</div>
<div class="sidebarblock">
<div class="content">
<div class="title">Valid Usage (Implicit)</div>
<div class="ulist">
<ul>
<li>
<p><a id="VUID-VkWriteDescriptorSet-sType-sType"></a> <code>sType</code> <strong class="purple">must</strong> be <code>VK_STRUCTURE_TYPE_WRITE_DESCRIPTOR_SET</code></p>
</li>
<li>
<p><a id="VUID-VkWriteDescriptorSet-pNext-pNext"></a> Each <code>pNext</code> member of any structure (including this one) in the <code>pNext</code> chain <strong class="purple">must</strong> be either <code>NULL</code> or a pointer to a valid instance of <a href="#VkWriteDescriptorSetAccelerationStructureNV">VkWriteDescriptorSetAccelerationStructureNV</a> or <a href="#VkWriteDescriptorSetInlineUniformBlockEXT">VkWriteDescriptorSetInlineUniformBlockEXT</a></p>
</li>
<li>
<p><a id="VUID-VkWriteDescriptorSet-sType-unique"></a> Each <code>sType</code> member in the <code>pNext</code> chain <strong class="purple">must</strong> be unique</p>
</li>
<li>
<p><a id="VUID-VkWriteDescriptorSet-descriptorType-parameter"></a> <code>descriptorType</code> <strong class="purple">must</strong> be a valid <a href="#VkDescriptorType">VkDescriptorType</a> value</p>
</li>
<li>
<p><a id="VUID-VkWriteDescriptorSet-descriptorCount-arraylength"></a> <code>descriptorCount</code> <strong class="purple">must</strong> be greater than <code>0</code></p>
</li>
<li>
<p><a id="VUID-VkWriteDescriptorSet-commonparent"></a> Both of <code>dstSet</code>, and the elements of <code>pTexelBufferView</code> that are valid handles <strong class="purple">must</strong> have been created, allocated, or retrieved from the same <code>VkDevice</code></p>
</li>
</ul>
</div>
</div>
</div>
</div>
<div class="sect3">
<h4 id="_see_also_792">See Also</h4>
<div class="paragraph">
<p><a href="#VkBufferView">VkBufferView</a>, <a href="#VkDescriptorBufferInfo">VkDescriptorBufferInfo</a>, <a href="#VkDescriptorImageInfo">VkDescriptorImageInfo</a>, <a href="#VkDescriptorSet">VkDescriptorSet</a>, <a href="#VkDescriptorType">VkDescriptorType</a>, <a href="#VkStructureType">VkStructureType</a>, <a href="#vkCmdPushDescriptorSetKHR">vkCmdPushDescriptorSetKHR</a>, <a href="#vkUpdateDescriptorSets">vkUpdateDescriptorSets</a></p>
</div>
</div>
<div class="sect3">
<h4 id="_document_notes_792">Document Notes</h4>
<div class="paragraph">
<p>For more information, see the Vulkan Specification at URL</p>
</div>
<div class="paragraph">
<p><a href="https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VkWriteDescriptorSet" class="bare">https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VkWriteDescriptorSet</a></p>
</div>
<div class="paragraph">
<p>This page is extracted from the Vulkan Specification.
Fixes and changes should be made to the Specification, not directly.</p>
</div>
<div style="page-break-after: always;"></div>
</div>
</div>
<div class="sect2">
<h3 id="_vkwritedescriptorsetaccelerationstructurenv3">VkWriteDescriptorSetAccelerationStructureNV(3)</h3>
<div class="sect3">
<h4 id="_name_793">Name</h4>
<div class="paragraph">
<p>VkWriteDescriptorSetAccelerationStructureNV - Structure specifying acceleration to query for memory requirements</p>
</div>
</div>
<div class="sect3">
<h4 id="_c_specification_793">C Specification</h4>
<div class="paragraph">
<p>The <code>VkWriteDescriptorSetAccelerationStructureNV</code> structure is defined
as:</p>
</div>
<div id="VkWriteDescriptorSetAccelerationStructureNV" class="listingblock">
<div class="content">
<pre class="highlight"><code class="language-c++" data-lang="c++">typedef struct VkWriteDescriptorSetAccelerationStructureNV {
    VkStructureType                     sType;
    const void*                         pNext;
    uint32_t                            accelerationStructureCount;
    const VkAccelerationStructureNV*    pAccelerationStructures;
} VkWriteDescriptorSetAccelerationStructureNV;</code></pre>
</div>
</div>
</div>
<div class="sect3">
<h4 id="_members_430">Members</h4>
<div class="ulist">
<ul>
<li>
<p><code>sType</code> is the type of this structure.</p>
</li>
<li>
<p><code>pNext</code> is <code>NULL</code> or a pointer to an extension-specific structure.</p>
</li>
<li>
<p><code>accelerationStructureCount</code> is the number of elements in
<code>pAccelerationStructures</code>.</p>
</li>
<li>
<p><code>pAccelerationStructures</code> are the acceleration structures to update.</p>
</li>
</ul>
</div>
</div>
<div class="sect3">
<h4 id="_description_793">Description</h4>
<div class="sidebarblock">
<div class="content">
<div class="title">Valid Usage</div>
<div class="ulist">
<ul>
<li>
<p><a id="VUID-VkWriteDescriptorSetAccelerationStructureNV-accelerationStructureCount-02236"></a>
<code>accelerationStructureCount</code> <strong class="purple">must</strong> be equal to <code>descriptorCount</code>
in the extended structure</p>
</li>
</ul>
</div>
</div>
</div>
<div class="sidebarblock">
<div class="content">
<div class="title">Valid Usage (Implicit)</div>
<div class="ulist">
<ul>
<li>
<p><a id="VUID-VkWriteDescriptorSetAccelerationStructureNV-sType-sType"></a> <code>sType</code> <strong class="purple">must</strong> be <code>VK_STRUCTURE_TYPE_WRITE_DESCRIPTOR_SET_ACCELERATION_STRUCTURE_NV</code></p>
</li>
<li>
<p><a id="VUID-VkWriteDescriptorSetAccelerationStructureNV-pAccelerationStructures-parameter"></a> <code>pAccelerationStructures</code> <strong class="purple">must</strong> be a valid pointer to an array of <code>accelerationStructureCount</code> valid <code>VkAccelerationStructureNV</code> handles</p>
</li>
<li>
<p><a id="VUID-VkWriteDescriptorSetAccelerationStructureNV-accelerationStructureCount-arraylength"></a> <code>accelerationStructureCount</code> <strong class="purple">must</strong> be greater than <code>0</code></p>
</li>
</ul>
</div>
</div>
</div>
</div>
<div class="sect3">
<h4 id="_see_also_793">See Also</h4>
<div class="paragraph">
<p><a href="#VkAccelerationStructureNV">VkAccelerationStructureNV</a>, <a href="#VkStructureType">VkStructureType</a></p>
</div>
</div>
<div class="sect3">
<h4 id="_document_notes_793">Document Notes</h4>
<div class="paragraph">
<p>For more information, see the Vulkan Specification at URL</p>
</div>
<div class="paragraph">
<p><a href="https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VkWriteDescriptorSetAccelerationStructureNV" class="bare">https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VkWriteDescriptorSetAccelerationStructureNV</a></p>
</div>
<div class="paragraph">
<p>This page is extracted from the Vulkan Specification.
Fixes and changes should be made to the Specification, not directly.</p>
</div>
<div style="page-break-after: always;"></div>
</div>
</div>
<div class="sect2">
<h3 id="_vkwritedescriptorsetinlineuniformblockext3">VkWriteDescriptorSetInlineUniformBlockEXT(3)</h3>
<div class="sect3">
<h4 id="_name_794">Name</h4>
<div class="paragraph">
<p>VkWriteDescriptorSetInlineUniformBlockEXT - Structure specifying inline uniform block data</p>
</div>
</div>
<div class="sect3">
<h4 id="_c_specification_794">C Specification</h4>
<div class="paragraph">
<p>If the <code>descriptorType</code> member of <a href="#VkWriteDescriptorSet">VkWriteDescriptorSet</a> is
<code>VK_DESCRIPTOR_TYPE_INLINE_UNIFORM_BLOCK_EXT</code> then the data to write to
the descriptor set is specified through an instance of
<code>VkWriteDescriptorSetInlineUniformBlockEXT</code> chained to the <code>pNext</code>
chain of <code>VkWriteDescriptorSet</code>.</p>
</div>
<div class="paragraph">
<p>The <code>VkWriteDescriptorSetInlineUniformBlockEXT</code> structure is defined as:</p>
</div>
<div id="VkWriteDescriptorSetInlineUniformBlockEXT" class="listingblock">
<div class="content">
<pre class="highlight"><code class="language-c++" data-lang="c++">typedef struct VkWriteDescriptorSetInlineUniformBlockEXT {
    VkStructureType    sType;
    const void*        pNext;
    uint32_t           dataSize;
    const void*        pData;
} VkWriteDescriptorSetInlineUniformBlockEXT;</code></pre>
</div>
</div>
</div>
<div class="sect3">
<h4 id="_members_431">Members</h4>
<div class="ulist">
<ul>
<li>
<p><code>sType</code> is the type of this structure.</p>
</li>
<li>
<p><code>pNext</code> is <code>NULL</code> or a pointer to an extension-specific structure.</p>
</li>
<li>
<p><code>dataSize</code> is the number of bytes of inline uniform block data
pointed to by <code>pData</code>.</p>
</li>
<li>
<p><code>pData</code> is a pointer to <code>dataSize</code> number of bytes of data to
write to the inline uniform block.</p>
</li>
</ul>
</div>
</div>
<div class="sect3">
<h4 id="_description_794">Description</h4>
<div class="sidebarblock">
<div class="content">
<div class="title">Valid Usage</div>
<div class="ulist">
<ul>
<li>
<p><a id="VUID-VkWriteDescriptorSetInlineUniformBlockEXT-dataSize-02222"></a>
<code>dataSize</code> <strong class="purple">must</strong> be an integer multiple of <code>4</code></p>
</li>
</ul>
</div>
</div>
</div>
<div class="sidebarblock">
<div class="content">
<div class="title">Valid Usage (Implicit)</div>
<div class="ulist">
<ul>
<li>
<p><a id="VUID-VkWriteDescriptorSetInlineUniformBlockEXT-sType-sType"></a> <code>sType</code> <strong class="purple">must</strong> be <code>VK_STRUCTURE_TYPE_WRITE_DESCRIPTOR_SET_INLINE_UNIFORM_BLOCK_EXT</code></p>
</li>
<li>
<p><a id="VUID-VkWriteDescriptorSetInlineUniformBlockEXT-pData-parameter"></a> <code>pData</code> <strong class="purple">must</strong> be a valid pointer to an array of <code>dataSize</code> bytes</p>
</li>
<li>
<p><a id="VUID-VkWriteDescriptorSetInlineUniformBlockEXT-dataSize-arraylength"></a> <code>dataSize</code> <strong class="purple">must</strong> be greater than <code>0</code></p>
</li>
</ul>
</div>
</div>
</div>
</div>
<div class="sect3">
<h4 id="_see_also_794">See Also</h4>
<div class="paragraph">
<p><a href="#VkStructureType">VkStructureType</a></p>
</div>
</div>
<div class="sect3">
<h4 id="_document_notes_794">Document Notes</h4>
<div class="paragraph">
<p>For more information, see the Vulkan Specification at URL</p>
</div>
<div class="paragraph">
<p><a href="https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VkWriteDescriptorSetInlineUniformBlockEXT" class="bare">https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VkWriteDescriptorSetInlineUniformBlockEXT</a></p>
</div>
<div class="paragraph">
<p>This page is extracted from the Vulkan Specification.
Fixes and changes should be made to the Specification, not directly.</p>
</div>
<div style="page-break-after: always;"></div>
</div>
</div>
<div class="sect2">
<h3 id="_vkxycolorext3">VkXYColorEXT(3)</h3>
<div class="sect3">
<h4 id="_name_795">Name</h4>
<div class="paragraph">
<p>VkXYColorEXT - structure to specify X,Y chromaticity coordinates</p>
</div>
</div>
<div class="sect3">
<h4 id="_c_specification_795">C Specification</h4>
<div id="VkXYColorEXT" class="listingblock">
<div class="content">
<pre class="highlight"><code class="language-c++" data-lang="c++">typedef struct VkXYColorEXT {
    float    x;
    float    y;
} VkXYColorEXT;</code></pre>
</div>
</div>
</div>
<div class="sect3">
<h4 id="_members_432">Members</h4>

</div>
<div class="sect3">
<h4 id="_description_795">Description</h4>

</div>
<div class="sect3">
<h4 id="_see_also_795">See Also</h4>
<div class="paragraph">
<p><a href="#VkHdrMetadataEXT">VkHdrMetadataEXT</a></p>
</div>
</div>
<div class="sect3">
<h4 id="_document_notes_795">Document Notes</h4>
<div class="paragraph">
<p>For more information, see the Vulkan Specification at URL</p>
</div>
<div class="paragraph">
<p><a href="https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VkXYColorEXT" class="bare">https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VkXYColorEXT</a></p>
</div>
<div class="paragraph">
<p>This page is extracted from the Vulkan Specification.
Fixes and changes should be made to the Specification, not directly.</p>
</div>
<div style="page-break-after: always;"></div>
</div>
</div>
<div class="sect2">
<h3 id="_vkxcbsurfacecreateinfokhr3">VkXcbSurfaceCreateInfoKHR(3)</h3>
<div class="sect3">
<h4 id="_name_796">Name</h4>
<div class="paragraph">
<p>VkXcbSurfaceCreateInfoKHR - Structure specifying parameters of a newly created Xcb surface object</p>
</div>
</div>
<div class="sect3">
<h4 id="_c_specification_796">C Specification</h4>
<div class="paragraph">
<p>The <code>VkXcbSurfaceCreateInfoKHR</code> structure is defined as:</p>
</div>
<div id="VkXcbSurfaceCreateInfoKHR" class="listingblock">
<div class="content">
<pre class="highlight"><code class="language-c++" data-lang="c++">typedef struct VkXcbSurfaceCreateInfoKHR {
    VkStructureType               sType;
    const void*                   pNext;
    VkXcbSurfaceCreateFlagsKHR    flags;
    xcb_connection_t*             connection;
    xcb_window_t                  window;
} VkXcbSurfaceCreateInfoKHR;</code></pre>
</div>
</div>
</div>
<div class="sect3">
<h4 id="_members_433">Members</h4>
<div class="ulist">
<ul>
<li>
<p><code>sType</code> is the type of this structure.</p>
</li>
<li>
<p><code>pNext</code> is <code>NULL</code> or a pointer to an extension-specific structure.</p>
</li>
<li>
<p><code>flags</code> is reserved for future use.</p>
</li>
<li>
<p><code>connection</code> is a pointer to an <code>xcb_connection_t</code> to the X
server.</p>
</li>
<li>
<p><code>window</code> is the <code>xcb_window_t</code> for the X11 window to associate
the surface with.</p>
</li>
</ul>
</div>
</div>
<div class="sect3">
<h4 id="_description_796">Description</h4>
<div class="sidebarblock">
<div class="content">
<div class="title">Valid Usage</div>
<div class="ulist">
<ul>
<li>
<p><a id="VUID-VkXcbSurfaceCreateInfoKHR-connection-01310"></a>
<code>connection</code> <strong class="purple">must</strong> point to a valid X11 <code>xcb_connection_t</code>.</p>
</li>
<li>
<p><a id="VUID-VkXcbSurfaceCreateInfoKHR-window-01311"></a>
<code>window</code> <strong class="purple">must</strong> be a valid X11 <code>xcb_window_t</code>.</p>
</li>
</ul>
</div>
</div>
</div>
<div class="sidebarblock">
<div class="content">
<div class="title">Valid Usage (Implicit)</div>
<div class="ulist">
<ul>
<li>
<p><a id="VUID-VkXcbSurfaceCreateInfoKHR-sType-sType"></a> <code>sType</code> <strong class="purple">must</strong> be <code>VK_STRUCTURE_TYPE_XCB_SURFACE_CREATE_INFO_KHR</code></p>
</li>
<li>
<p><a id="VUID-VkXcbSurfaceCreateInfoKHR-pNext-pNext"></a> <code>pNext</code> <strong class="purple">must</strong> be <code>NULL</code></p>
</li>
<li>
<p><a id="VUID-VkXcbSurfaceCreateInfoKHR-flags-zerobitmask"></a> <code>flags</code> <strong class="purple">must</strong> be <code>0</code></p>
</li>
</ul>
</div>
</div>
</div>
</div>
<div class="sect3">
<h4 id="_see_also_796">See Also</h4>
<div class="paragraph">
<p><a href="#VkStructureType">VkStructureType</a>, <a href="#VkXcbSurfaceCreateFlagsKHR">VkXcbSurfaceCreateFlagsKHR</a>, <a href="#vkCreateXcbSurfaceKHR">vkCreateXcbSurfaceKHR</a></p>
</div>
</div>
<div class="sect3">
<h4 id="_document_notes_796">Document Notes</h4>
<div class="paragraph">
<p>For more information, see the Vulkan Specification at URL</p>
</div>
<div class="paragraph">
<p><a href="https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VkXcbSurfaceCreateInfoKHR" class="bare">https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VkXcbSurfaceCreateInfoKHR</a></p>
</div>
<div class="paragraph">
<p>This page is extracted from the Vulkan Specification.
Fixes and changes should be made to the Specification, not directly.</p>
</div>
<div style="page-break-after: always;"></div>
</div>
</div>
<div class="sect2">
<h3 id="_vkxlibsurfacecreateinfokhr3">VkXlibSurfaceCreateInfoKHR(3)</h3>
<div class="sect3">
<h4 id="_name_797">Name</h4>
<div class="paragraph">
<p>VkXlibSurfaceCreateInfoKHR - Structure specifying parameters of a newly created Xlib surface object</p>
</div>
</div>
<div class="sect3">
<h4 id="_c_specification_797">C Specification</h4>
<div class="paragraph">
<p>The <code>VkXlibSurfaceCreateInfoKHR</code> structure is defined as:</p>
</div>
<div id="VkXlibSurfaceCreateInfoKHR" class="listingblock">
<div class="content">
<pre class="highlight"><code class="language-c++" data-lang="c++">typedef struct VkXlibSurfaceCreateInfoKHR {
    VkStructureType                sType;
    const void*                    pNext;
    VkXlibSurfaceCreateFlagsKHR    flags;
    Display*                       dpy;
    Window                         window;
} VkXlibSurfaceCreateInfoKHR;</code></pre>
</div>
</div>
</div>
<div class="sect3">
<h4 id="_members_434">Members</h4>
<div class="ulist">
<ul>
<li>
<p><code>sType</code> is the type of this structure.</p>
</li>
<li>
<p><code>pNext</code> is <code>NULL</code> or a pointer to an extension-specific structure.</p>
</li>
<li>
<p><code>flags</code> is reserved for future use.</p>
</li>
<li>
<p><code>dpy</code> is a pointer to an Xlib <code>Display</code> connection to the X
server.</p>
</li>
<li>
<p><code>window</code> is an Xlib <code>Window</code> to associate the surface with.</p>
</li>
</ul>
</div>
</div>
<div class="sect3">
<h4 id="_description_797">Description</h4>
<div class="sidebarblock">
<div class="content">
<div class="title">Valid Usage</div>
<div class="ulist">
<ul>
<li>
<p><a id="VUID-VkXlibSurfaceCreateInfoKHR-dpy-01313"></a>
<code>dpy</code> <strong class="purple">must</strong> point to a valid Xlib <code>Display</code>.</p>
</li>
<li>
<p><a id="VUID-VkXlibSurfaceCreateInfoKHR-window-01314"></a>
<code>window</code> <strong class="purple">must</strong> be a valid Xlib <code>Window</code>.</p>
</li>
</ul>
</div>
</div>
</div>
<div class="sidebarblock">
<div class="content">
<div class="title">Valid Usage (Implicit)</div>
<div class="ulist">
<ul>
<li>
<p><a id="VUID-VkXlibSurfaceCreateInfoKHR-sType-sType"></a> <code>sType</code> <strong class="purple">must</strong> be <code>VK_STRUCTURE_TYPE_XLIB_SURFACE_CREATE_INFO_KHR</code></p>
</li>
<li>
<p><a id="VUID-VkXlibSurfaceCreateInfoKHR-pNext-pNext"></a> <code>pNext</code> <strong class="purple">must</strong> be <code>NULL</code></p>
</li>
<li>
<p><a id="VUID-VkXlibSurfaceCreateInfoKHR-flags-zerobitmask"></a> <code>flags</code> <strong class="purple">must</strong> be <code>0</code></p>
</li>
</ul>
</div>
</div>
</div>
</div>
<div class="sect3">
<h4 id="_see_also_797">See Also</h4>
<div class="paragraph">
<p><a href="#VkStructureType">VkStructureType</a>, <a href="#VkXlibSurfaceCreateFlagsKHR">VkXlibSurfaceCreateFlagsKHR</a>, <a href="#vkCreateXlibSurfaceKHR">vkCreateXlibSurfaceKHR</a></p>
</div>
</div>
<div class="sect3">
<h4 id="_document_notes_797">Document Notes</h4>
<div class="paragraph">
<p>For more information, see the Vulkan Specification at URL</p>
</div>
<div class="paragraph">
<p><a href="https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VkXlibSurfaceCreateInfoKHR" class="bare">https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VkXlibSurfaceCreateInfoKHR</a></p>
</div>
<div class="paragraph">
<p>This page is extracted from the Vulkan Specification.
Fixes and changes should be made to the Specification, not directly.</p>
</div>
<div style="page-break-after: always;"></div>
</div>
</div>
</div>
</div>
</root>