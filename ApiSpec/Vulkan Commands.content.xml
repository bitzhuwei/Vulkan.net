<root>
<div class="sect1">
<h2 id="protos">Vulkan Commands</h2>
<div class="sectionbody">
<div class="sect2">
<h3 id="_vkacquirefullscreenexclusivemodeext3">vkAcquireFullScreenExclusiveModeEXT(3)</h3>
<div class="sect3">
<h4 id="_name">Name</h4>
<div class="paragraph">
<p>vkAcquireFullScreenExclusiveModeEXT - Acquire full-screen exclusive mode for a swapchain</p>
</div>
</div>
<div class="sect3">
<h4 id="_c_specification">C Specification</h4>
<div class="paragraph">
<p>To acquire exclusive full-screen access for a swapchain, call:</p>
</div>
<div id="vkAcquireFullScreenExclusiveModeEXT" class="listingblock">
<div class="content">
<pre class="highlight"><code class="language-c++" data-lang="c++">VkResult vkAcquireFullScreenExclusiveModeEXT(
    VkDevice                                    device,
    VkSwapchainKHR                              swapchain);</code></pre>
</div>
</div>
</div>
<div class="sect3">
<h4 id="_parameters">Parameters</h4>
<div class="ulist">
<ul>
<li>
<p><code>device</code> is the device associated with <code>swapchain</code>.</p>
</li>
<li>
<p><code>swapchain</code> is the swapchain to acquire exclusive full-screen access
for.</p>
</li>
</ul>
</div>
</div>
<div class="sect3">
<h4 id="_description">Description</h4>
<div class="sidebarblock">
<div class="content">
<div class="title">Valid Usage</div>
<div class="ulist">
<ul>
<li>
<p><a id="VUID-vkAcquireFullScreenExclusiveModeEXT-swapchain-02674"></a>
<code>swapchain</code> <strong class="purple">must</strong> not be in the retired state</p>
</li>
<li>
<p><a id="VUID-vkAcquireFullScreenExclusiveModeEXT-swapchain-02675"></a>
<code>swapchain</code> <strong class="purple">must</strong> be a swapchain created with an instance of
<a href="#VkSurfaceFullScreenExclusiveInfoEXT">VkSurfaceFullScreenExclusiveInfoEXT</a>, with
<code>fullScreenExclusive</code> set to
<code>VK_FULL_SCREEN_EXCLUSIVE_APPLICATION_CONTROLLED_EXT</code></p>
</li>
<li>
<p><a id="VUID-vkAcquireFullScreenExclusiveModeEXT-swapchain-02676"></a>
<code>swapchain</code> <strong class="purple">must</strong> not currently have exclusive full-screen access</p>
</li>
</ul>
</div>
</div>
</div>
<div class="paragraph">
<p>A return value of <code>VK_SUCCESS</code> indicates that the <code>swapchain</code>
successfully acquired exclusive full-screen access.
The swapchain will retain this exclusivity until either the application
releases exclusive full-screen access with
<a href="#vkReleaseFullScreenExclusiveModeEXT">vkReleaseFullScreenExclusiveModeEXT</a>, destroys the swapchain, or if any
of the swapchain commands return
<code>VK_ERROR_FULL_SCREEN_EXCLUSIVE_MODE_LOST_EXT</code> indicating that the mode
was lost because of platform-specific changes.</p>
</div>
<div class="paragraph">
<p>If the swapchain was unable to acquire exclusive full-screen access to the
display then <code>VK_ERROR_INITIALIZATION_FAILED</code> is returned.
An application <strong class="purple">can</strong> attempt to acquire exclusive full-screen access again
for the same swapchain even if this command fails, or if
<code>VK_ERROR_FULL_SCREEN_EXCLUSIVE_MODE_LOST_EXT</code> has been returned by a
swapchain command.</p>
</div>
<div class="sidebarblock">
<div class="content">
<div class="title">Valid Usage (Implicit)</div>
<div class="ulist">
<ul>
<li>
<p><a id="VUID-vkAcquireFullScreenExclusiveModeEXT-device-parameter"></a> <code>device</code> <strong class="purple">must</strong> be a valid <code>VkDevice</code> handle</p>
</li>
<li>
<p><a id="VUID-vkAcquireFullScreenExclusiveModeEXT-swapchain-parameter"></a> <code>swapchain</code> <strong class="purple">must</strong> be a valid <code>VkSwapchainKHR</code> handle</p>
</li>
<li>
<p><a id="VUID-vkAcquireFullScreenExclusiveModeEXT-commonparent"></a> Both of <code>device</code>, and <code>swapchain</code> <strong class="purple">must</strong> have been created, allocated, or retrieved from the same <code>VkInstance</code></p>
</li>
</ul>
</div>
</div>
</div>
<div class="sidebarblock">
<div class="content">
<div class="title">Return Codes</div>
<div class="dlist">
<dl>
<dt class="hdlist1"><a href="#fundamentals-successcodes">Success</a></dt>
<dd>
<div class="ulist">
<ul>
<li>
<p><code>VK_SUCCESS</code></p>
</li>
</ul>
</div>
</dd>
<dt class="hdlist1"><a href="#fundamentals-errorcodes">Failure</a></dt>
<dd>
<div class="ulist">
<ul>
<li>
<p><code>VK_ERROR_OUT_OF_HOST_MEMORY</code></p>
</li>
<li>
<p><code>VK_ERROR_OUT_OF_DEVICE_MEMORY</code></p>
</li>
<li>
<p><code>VK_ERROR_INITIALIZATION_FAILED</code></p>
</li>
<li>
<p><code>VK_ERROR_SURFACE_LOST_KHR</code></p>
</li>
</ul>
</div>
</dd>
</dl>
</div>
</div>
</div>
</div>
<div class="sect3">
<h4 id="_see_also">See Also</h4>
<div class="paragraph">
<p><a href="#VkDevice">VkDevice</a>, <a href="#VkSwapchainKHR">VkSwapchainKHR</a></p>
</div>
</div>
<div class="sect3">
<h4 id="_document_notes">Document Notes</h4>
<div class="paragraph">
<p>For more information, see the Vulkan Specification at URL</p>
</div>
<div class="paragraph">
<p><a href="https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#vkAcquireFullScreenExclusiveModeEXT" class="bare">https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#vkAcquireFullScreenExclusiveModeEXT</a></p>
</div>
<div class="paragraph">
<p>This page is extracted from the Vulkan Specification.
Fixes and changes should be made to the Specification, not directly.</p>
</div>
<div style="page-break-after: always;"></div>
</div>
</div>
<div class="sect2">
<h3 id="_vkacquirenextimage2khr3">vkAcquireNextImage2KHR(3)</h3>
<div class="sect3">
<h4 id="_name_2">Name</h4>
<div class="paragraph">
<p>vkAcquireNextImage2KHR - Retrieve the index of the next available presentable image</p>
</div>
</div>
<div class="sect3">
<h4 id="_c_specification_2">C Specification</h4>
<div class="paragraph">
<p>To acquire an available presentable image to use, and retrieve the index of
that image, call:</p>
</div>
<div id="vkAcquireNextImage2KHR" class="listingblock">
<div class="content">
<pre class="highlight"><code class="language-c++" data-lang="c++">VkResult vkAcquireNextImage2KHR(
    VkDevice                                    device,
    const VkAcquireNextImageInfoKHR*            pAcquireInfo,
    uint32_t*                                   pImageIndex);</code></pre>
</div>
</div>
</div>
<div class="sect3">
<h4 id="_parameters_2">Parameters</h4>
<div class="ulist">
<ul>
<li>
<p><code>device</code> is the device associated with <code>swapchain</code>.</p>
</li>
<li>
<p><code>pAcquireInfo</code> is a pointer to a structure of type
<a href="#VkAcquireNextImageInfoKHR">VkAcquireNextImageInfoKHR</a> containing parameters of the acquire.</p>
</li>
<li>
<p><code>pImageIndex</code> is a pointer to a <code>uint32_t</code> that is set to the
index of the next image to use.</p>
</li>
</ul>
</div>
</div>
<div class="sect3">
<h4 id="_description_2">Description</h4>
<div class="sidebarblock">
<div class="content">
<div class="title">Valid Usage</div>
<div class="ulist">
<ul>
<li>
<p><a id="VUID-vkAcquireNextImage2KHR-swapchain-01803"></a>
If the number of currently acquired images is greater than the
difference between the number of images in the <code>swapchain</code> member of
<code>pAcquireInfo</code> and the value of
<a href="#VkSurfaceCapabilitiesKHR">VkSurfaceCapabilitiesKHR</a>::<code>minImageCount</code> as returned by a
call to <a href="#vkGetPhysicalDeviceSurfaceCapabilities2KHR">vkGetPhysicalDeviceSurfaceCapabilities2KHR</a> with the
<code>surface</code> used to create <code>swapchain</code>, the <code>timeout</code> member
of <code>pAcquireInfo</code> <strong class="purple">must</strong> not be <code>UINT64_MAX</code></p>
</li>
</ul>
</div>
</div>
</div>
<div class="sidebarblock">
<div class="content">
<div class="title">Valid Usage (Implicit)</div>
<div class="ulist">
<ul>
<li>
<p><a id="VUID-vkAcquireNextImage2KHR-device-parameter"></a> <code>device</code> <strong class="purple">must</strong> be a valid <code>VkDevice</code> handle</p>
</li>
<li>
<p><a id="VUID-vkAcquireNextImage2KHR-pAcquireInfo-parameter"></a> <code>pAcquireInfo</code> <strong class="purple">must</strong> be a valid pointer to a valid <code>VkAcquireNextImageInfoKHR</code> structure</p>
</li>
<li>
<p><a id="VUID-vkAcquireNextImage2KHR-pImageIndex-parameter"></a> <code>pImageIndex</code> <strong class="purple">must</strong> be a valid pointer to a <code>uint32_t</code> value</p>
</li>
</ul>
</div>
</div>
</div>
<div class="sidebarblock">
<div class="content">
<div class="title">Return Codes</div>
<div class="dlist">
<dl>
<dt class="hdlist1"><a href="#fundamentals-successcodes">Success</a></dt>
<dd>
<div class="ulist">
<ul>
<li>
<p><code>VK_SUCCESS</code></p>
</li>
<li>
<p><code>VK_TIMEOUT</code></p>
</li>
<li>
<p><code>VK_NOT_READY</code></p>
</li>
<li>
<p><code>VK_SUBOPTIMAL_KHR</code></p>
</li>
</ul>
</div>
</dd>
<dt class="hdlist1"><a href="#fundamentals-errorcodes">Failure</a></dt>
<dd>
<div class="ulist">
<ul>
<li>
<p><code>VK_ERROR_OUT_OF_HOST_MEMORY</code></p>
</li>
<li>
<p><code>VK_ERROR_OUT_OF_DEVICE_MEMORY</code></p>
</li>
<li>
<p><code>VK_ERROR_DEVICE_LOST</code></p>
</li>
<li>
<p><code>VK_ERROR_OUT_OF_DATE_KHR</code></p>
</li>
<li>
<p><code>VK_ERROR_SURFACE_LOST_KHR</code></p>
</li>
<li>
<p><code>VK_ERROR_FULL_SCREEN_EXCLUSIVE_MODE_LOST_EXT</code></p>
</li>
</ul>
</div>
</dd>
</dl>
</div>
</div>
</div>
</div>
<div class="sect3">
<h4 id="_see_also_2">See Also</h4>
<div class="paragraph">
<p><a href="#VkAcquireNextImageInfoKHR">VkAcquireNextImageInfoKHR</a>, <a href="#VkDevice">VkDevice</a></p>
</div>
</div>
<div class="sect3">
<h4 id="_document_notes_2">Document Notes</h4>
<div class="paragraph">
<p>For more information, see the Vulkan Specification at URL</p>
</div>
<div class="paragraph">
<p><a href="https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#vkAcquireNextImage2KHR" class="bare">https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#vkAcquireNextImage2KHR</a></p>
</div>
<div class="paragraph">
<p>This page is extracted from the Vulkan Specification.
Fixes and changes should be made to the Specification, not directly.</p>
</div>
<div style="page-break-after: always;"></div>
</div>
</div>
<div class="sect2">
<h3 id="_vkacquirenextimagekhr3">vkAcquireNextImageKHR(3)</h3>
<div class="sect3">
<h4 id="_name_3">Name</h4>
<div class="paragraph">
<p>vkAcquireNextImageKHR - Retrieve the index of the next available presentable image</p>
</div>
</div>
<div class="sect3">
<h4 id="_c_specification_3">C Specification</h4>
<div class="paragraph">
<p>To acquire an available presentable image to use, and retrieve the index of
that image, call:</p>
</div>
<div id="vkAcquireNextImageKHR" class="listingblock">
<div class="content">
<pre class="highlight"><code class="language-c++" data-lang="c++">VkResult vkAcquireNextImageKHR(
    VkDevice                                    device,
    VkSwapchainKHR                              swapchain,
    uint64_t                                    timeout,
    VkSemaphore                                 semaphore,
    VkFence                                     fence,
    uint32_t*                                   pImageIndex);</code></pre>
</div>
</div>
</div>
<div class="sect3">
<h4 id="_parameters_3">Parameters</h4>
<div class="ulist">
<ul>
<li>
<p><code>device</code> is the device associated with <code>swapchain</code>.</p>
</li>
<li>
<p><code>swapchain</code> is the non-retired swapchain from which an image is
being acquired.</p>
</li>
<li>
<p><code>timeout</code> specifies how long the function waits, in nanoseconds, if
no image is available.</p>
</li>
<li>
<p><code>semaphore</code> is <a href="#VK_NULL_HANDLE">VK_NULL_HANDLE</a> or a semaphore to signal.</p>
</li>
<li>
<p><code>fence</code> is <a href="#VK_NULL_HANDLE">VK_NULL_HANDLE</a> or a fence to signal.</p>
</li>
<li>
<p><code>pImageIndex</code> is a pointer to a <code>uint32_t</code> that is set to the
index of the next image to use (i.e. an index into the array of images
returned by <code>vkGetSwapchainImagesKHR</code>).</p>
</li>
</ul>
</div>
</div>
<div class="sect3">
<h4 id="_description_3">Description</h4>
<div class="sidebarblock">
<div class="content">
<div class="title">Valid Usage</div>
<div class="ulist">
<ul>
<li>
<p><a id="VUID-vkAcquireNextImageKHR-swapchain-01285"></a>
<code>swapchain</code> <strong class="purple">must</strong> not be in the retired state</p>
</li>
<li>
<p><a id="VUID-vkAcquireNextImageKHR-semaphore-01286"></a>
If <code>semaphore</code> is not <a href="#VK_NULL_HANDLE">VK_NULL_HANDLE</a> it <strong class="purple">must</strong> be unsignaled</p>
</li>
<li>
<p><a id="VUID-vkAcquireNextImageKHR-semaphore-01779"></a>
If <code>semaphore</code> is not <a href="#VK_NULL_HANDLE">VK_NULL_HANDLE</a> it <strong class="purple">must</strong> not have any
uncompleted signal or wait operations pending</p>
</li>
<li>
<p><a id="VUID-vkAcquireNextImageKHR-fence-01287"></a>
If <code>fence</code> is not <a href="#VK_NULL_HANDLE">VK_NULL_HANDLE</a> it <strong class="purple">must</strong> be unsignaled and
<strong class="purple">must</strong> not be associated with any other queue command that has not yet
completed execution on that queue</p>
</li>
<li>
<p><a id="VUID-vkAcquireNextImageKHR-semaphore-01780"></a>
<code>semaphore</code> and <code>fence</code> <strong class="purple">must</strong> not both be equal to
<a href="#VK_NULL_HANDLE">VK_NULL_HANDLE</a></p>
</li>
<li>
<p><a id="VUID-vkAcquireNextImageKHR-swapchain-01802"></a>
If the number of currently acquired images is greater than the
difference between the number of images in <code>swapchain</code> and the value
of <a href="#VkSurfaceCapabilitiesKHR">VkSurfaceCapabilitiesKHR</a>::<code>minImageCount</code> as returned by a
call to <a href="#vkGetPhysicalDeviceSurfaceCapabilities2KHR">vkGetPhysicalDeviceSurfaceCapabilities2KHR</a> with the
<code>surface</code> used to create <code>swapchain</code>, <code>timeout</code> <strong class="purple">must</strong> not be
<code>UINT64_MAX</code></p>
</li>
</ul>
</div>
</div>
</div>
<div class="sidebarblock">
<div class="content">
<div class="title">Valid Usage (Implicit)</div>
<div class="ulist">
<ul>
<li>
<p><a id="VUID-vkAcquireNextImageKHR-device-parameter"></a> <code>device</code> <strong class="purple">must</strong> be a valid <code>VkDevice</code> handle</p>
</li>
<li>
<p><a id="VUID-vkAcquireNextImageKHR-swapchain-parameter"></a> <code>swapchain</code> <strong class="purple">must</strong> be a valid <code>VkSwapchainKHR</code> handle</p>
</li>
<li>
<p><a id="VUID-vkAcquireNextImageKHR-semaphore-parameter"></a> If <code>semaphore</code> is not <a href="#VK_NULL_HANDLE">VK_NULL_HANDLE</a>, <code>semaphore</code> <strong class="purple">must</strong> be a valid <code>VkSemaphore</code> handle</p>
</li>
<li>
<p><a id="VUID-vkAcquireNextImageKHR-fence-parameter"></a> If <code>fence</code> is not <a href="#VK_NULL_HANDLE">VK_NULL_HANDLE</a>, <code>fence</code> <strong class="purple">must</strong> be a valid <code>VkFence</code> handle</p>
</li>
<li>
<p><a id="VUID-vkAcquireNextImageKHR-pImageIndex-parameter"></a> <code>pImageIndex</code> <strong class="purple">must</strong> be a valid pointer to a <code>uint32_t</code> value</p>
</li>
<li>
<p><a id="VUID-vkAcquireNextImageKHR-semaphore-parent"></a> If <code>semaphore</code> is a valid handle, it <strong class="purple">must</strong> have been created, allocated, or retrieved from <code>device</code></p>
</li>
<li>
<p><a id="VUID-vkAcquireNextImageKHR-fence-parent"></a> If <code>fence</code> is a valid handle, it <strong class="purple">must</strong> have been created, allocated, or retrieved from <code>device</code></p>
</li>
<li>
<p><a id="VUID-vkAcquireNextImageKHR-commonparent"></a> Both of <code>device</code>, and <code>swapchain</code> that are valid handles <strong class="purple">must</strong> have been created, allocated, or retrieved from the same <code>VkInstance</code></p>
</li>
</ul>
</div>
</div>
</div>
<div class="sidebarblock">
<div class="content">
<div class="title">Host Synchronization</div>
<div class="ulist">
<ul>
<li>
<p>Host access to <code>swapchain</code> <strong class="purple">must</strong> be externally synchronized</p>
</li>
<li>
<p>Host access to <code>semaphore</code> <strong class="purple">must</strong> be externally synchronized</p>
</li>
<li>
<p>Host access to <code>fence</code> <strong class="purple">must</strong> be externally synchronized</p>
</li>
</ul>
</div>
</div>
</div>
<div class="sidebarblock">
<div class="content">
<div class="title">Return Codes</div>
<div class="dlist">
<dl>
<dt class="hdlist1"><a href="#fundamentals-successcodes">Success</a></dt>
<dd>
<div class="ulist">
<ul>
<li>
<p><code>VK_SUCCESS</code></p>
</li>
<li>
<p><code>VK_TIMEOUT</code></p>
</li>
<li>
<p><code>VK_NOT_READY</code></p>
</li>
<li>
<p><code>VK_SUBOPTIMAL_KHR</code></p>
</li>
</ul>
</div>
</dd>
<dt class="hdlist1"><a href="#fundamentals-errorcodes">Failure</a></dt>
<dd>
<div class="ulist">
<ul>
<li>
<p><code>VK_ERROR_OUT_OF_HOST_MEMORY</code></p>
</li>
<li>
<p><code>VK_ERROR_OUT_OF_DEVICE_MEMORY</code></p>
</li>
<li>
<p><code>VK_ERROR_DEVICE_LOST</code></p>
</li>
<li>
<p><code>VK_ERROR_OUT_OF_DATE_KHR</code></p>
</li>
<li>
<p><code>VK_ERROR_SURFACE_LOST_KHR</code></p>
</li>
<li>
<p><code>VK_ERROR_FULL_SCREEN_EXCLUSIVE_MODE_LOST_EXT</code></p>
</li>
</ul>
</div>
</dd>
</dl>
</div>
</div>
</div>
</div>
<div class="sect3">
<h4 id="_see_also_3">See Also</h4>
<div class="paragraph">
<p><a href="#VkDevice">VkDevice</a>, <a href="#VkFence">VkFence</a>, <a href="#VkSemaphore">VkSemaphore</a>, <a href="#VkSwapchainKHR">VkSwapchainKHR</a></p>
</div>
</div>
<div class="sect3">
<h4 id="_document_notes_3">Document Notes</h4>
<div class="paragraph">
<p>For more information, see the Vulkan Specification at URL</p>
</div>
<div class="paragraph">
<p><a href="https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#vkAcquireNextImageKHR" class="bare">https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#vkAcquireNextImageKHR</a></p>
</div>
<div class="paragraph">
<p>This page is extracted from the Vulkan Specification.
Fixes and changes should be made to the Specification, not directly.</p>
</div>
<div style="page-break-after: always;"></div>
</div>
</div>
<div class="sect2">
<h3 id="_vkacquirexlibdisplayext3">vkAcquireXlibDisplayEXT(3)</h3>
<div class="sect3">
<h4 id="_name_4">Name</h4>
<div class="paragraph">
<p>vkAcquireXlibDisplayEXT - Acquire access to a VkDisplayKHR using Xlib</p>
</div>
</div>
<div class="sect3">
<h4 id="_c_specification_4">C Specification</h4>
<div class="paragraph">
<p>To acquire permission to directly access a display in Vulkan from an X11
server, call:</p>
</div>
<div id="vkAcquireXlibDisplayEXT" class="listingblock">
<div class="content">
<pre class="highlight"><code class="language-c++" data-lang="c++">VkResult vkAcquireXlibDisplayEXT(
    VkPhysicalDevice                            physicalDevice,
    Display*                                    dpy,
    VkDisplayKHR                                display);</code></pre>
</div>
</div>
</div>
<div class="sect3">
<h4 id="_parameters_4">Parameters</h4>
<div class="ulist">
<ul>
<li>
<p><code>physicalDevice</code> The physical device the display is on.</p>
</li>
<li>
<p><code>dpy</code> A connection to the X11 server that currently owns
<code>display</code>.</p>
</li>
<li>
<p><code>display</code> The display the caller wishes to control in Vulkan.</p>
</li>
</ul>
</div>
</div>
<div class="sect3">
<h4 id="_description_4">Description</h4>
<div class="paragraph">
<p>All permissions necessary to control the display are granted to the Vulkan
instance associated with <code>physicalDevice</code> until the display is released
or the X11 connection specified by <code>dpy</code> is terminated.
Permission to access the display <strong class="purple">may</strong> be temporarily revoked during periods
when the X11 server from which control was acquired itself looses access to
<code>display</code>.
During such periods, operations which require access to the display <strong class="purple">must</strong>
fail with an approriate error code.
If the X11 server associated with <code>dpy</code> does not own <code>display</code>, or
if permission to access it has already been acquired by another entity, the
call <strong class="purple">must</strong> return the error code <code>VK_ERROR_INITIALIZATION_FAILED</code>.</p>
</div>
<div class="admonitionblock note">
<table>
<tr>
<td class="icon">
<i class="fa icon-note" title="Note"></i>
</td>
<td class="content">
<div class="title">Note</div>
<div class="paragraph">
<p>One example of when an X11 server loses access to a display is when it loses
ownership of its virtual terminal.</p>
</div>
</td>
</tr>
</table>
</div>
<div class="sidebarblock">
<div class="content">
<div class="title">Valid Usage (Implicit)</div>
<div class="ulist">
<ul>
<li>
<p><a id="VUID-vkAcquireXlibDisplayEXT-physicalDevice-parameter"></a> <code>physicalDevice</code> <strong class="purple">must</strong> be a valid <code>VkPhysicalDevice</code> handle</p>
</li>
<li>
<p><a id="VUID-vkAcquireXlibDisplayEXT-dpy-parameter"></a> <code>dpy</code> <strong class="purple">must</strong> be a valid pointer to a <code>Display</code> value</p>
</li>
<li>
<p><a id="VUID-vkAcquireXlibDisplayEXT-display-parameter"></a> <code>display</code> <strong class="purple">must</strong> be a valid <code>VkDisplayKHR</code> handle</p>
</li>
</ul>
</div>
</div>
</div>
<div class="sidebarblock">
<div class="content">
<div class="title">Return Codes</div>
<div class="dlist">
<dl>
<dt class="hdlist1"><a href="#fundamentals-successcodes">Success</a></dt>
<dd>
<div class="ulist">
<ul>
<li>
<p><code>VK_SUCCESS</code></p>
</li>
</ul>
</div>
</dd>
<dt class="hdlist1"><a href="#fundamentals-errorcodes">Failure</a></dt>
<dd>
<div class="ulist">
<ul>
<li>
<p><code>VK_ERROR_INITIALIZATION_FAILED</code></p>
</li>
</ul>
</div>
</dd>
</dl>
</div>
</div>
</div>
</div>
<div class="sect3">
<h4 id="_see_also_4">See Also</h4>
<div class="paragraph">
<p><a href="#VkDisplayKHR">VkDisplayKHR</a>, <a href="#VkPhysicalDevice">VkPhysicalDevice</a></p>
</div>
</div>
<div class="sect3">
<h4 id="_document_notes_4">Document Notes</h4>
<div class="paragraph">
<p>For more information, see the Vulkan Specification at URL</p>
</div>
<div class="paragraph">
<p><a href="https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#vkAcquireXlibDisplayEXT" class="bare">https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#vkAcquireXlibDisplayEXT</a></p>
</div>
<div class="paragraph">
<p>This page is extracted from the Vulkan Specification.
Fixes and changes should be made to the Specification, not directly.</p>
</div>
<div style="page-break-after: always;"></div>
</div>
</div>
<div class="sect2">
<h3 id="_vkallocatecommandbuffers3">vkAllocateCommandBuffers(3)</h3>
<div class="sect3">
<h4 id="_name_5">Name</h4>
<div class="paragraph">
<p>vkAllocateCommandBuffers - Allocate command buffers from an existing command pool</p>
</div>
</div>
<div class="sect3">
<h4 id="_c_specification_5">C Specification</h4>
<div class="paragraph">
<p>To allocate command buffers, call:</p>
</div>
<div id="vkAllocateCommandBuffers" class="listingblock">
<div class="content">
<pre class="highlight"><code class="language-c++" data-lang="c++">VkResult vkAllocateCommandBuffers(
    VkDevice                                    device,
    const VkCommandBufferAllocateInfo*          pAllocateInfo,
    VkCommandBuffer*                            pCommandBuffers);</code></pre>
</div>
</div>
</div>
<div class="sect3">
<h4 id="_parameters_5">Parameters</h4>
<div class="ulist">
<ul>
<li>
<p><code>device</code> is the logical device that owns the command pool.</p>
</li>
<li>
<p><code>pAllocateInfo</code> is a pointer to an instance of the
<code>VkCommandBufferAllocateInfo</code> structure describing parameters of the
allocation.</p>
</li>
<li>
<p><code>pCommandBuffers</code> is a pointer to an array of <a href="#VkCommandBuffer">VkCommandBuffer</a>
handles in which the resulting command buffer objects are returned.
The array <strong class="purple">must</strong> be at least the length specified by the
<code>commandBufferCount</code> member of <code>pAllocateInfo</code>.
Each allocated command buffer begins in the initial state.</p>
</li>
</ul>
</div>
</div>
<div class="sect3">
<h4 id="_description_5">Description</h4>
<div class="paragraph">
<p><code>vkAllocateCommandBuffers</code> <strong class="purple">can</strong> be used to create multiple command
buffers.
If the creation of any of those command buffers fails, the implementation
<strong class="purple">must</strong> destroy all successfully created command buffer objects from this
command, set all entries of the <code>pCommandBuffers</code> array to <code>NULL</code> and
return the error.</p>
</div>
<div class="paragraph">
<p>When command buffers are first allocated, they are in the
<a href="vkspec.html#commandbuffers-lifecycle">initial state</a>.</p>
</div>
<div class="sidebarblock">
<div class="content">
<div class="title">Valid Usage (Implicit)</div>
<div class="ulist">
<ul>
<li>
<p><a id="VUID-vkAllocateCommandBuffers-device-parameter"></a> <code>device</code> <strong class="purple">must</strong> be a valid <code>VkDevice</code> handle</p>
</li>
<li>
<p><a id="VUID-vkAllocateCommandBuffers-pAllocateInfo-parameter"></a> <code>pAllocateInfo</code> <strong class="purple">must</strong> be a valid pointer to a valid <code>VkCommandBufferAllocateInfo</code> structure</p>
</li>
<li>
<p><a id="VUID-vkAllocateCommandBuffers-pCommandBuffers-parameter"></a> <code>pCommandBuffers</code> <strong class="purple">must</strong> be a valid pointer to an array of <code>pAllocateInfo</code>::commandBufferCount <code>VkCommandBuffer</code> handles</p>
</li>
</ul>
</div>
</div>
</div>
<div class="sidebarblock">
<div class="content">
<div class="title">Host Synchronization</div>
<div class="ulist">
<ul>
<li>
<p>Host access to <code>pAllocateInfo</code>::commandPool <strong class="purple">must</strong> be externally synchronized</p>
</li>
</ul>
</div>
</div>
</div>
<div class="sidebarblock">
<div class="content">
<div class="title">Return Codes</div>
<div class="dlist">
<dl>
<dt class="hdlist1"><a href="#fundamentals-successcodes">Success</a></dt>
<dd>
<div class="ulist">
<ul>
<li>
<p><code>VK_SUCCESS</code></p>
</li>
</ul>
</div>
</dd>
<dt class="hdlist1"><a href="#fundamentals-errorcodes">Failure</a></dt>
<dd>
<div class="ulist">
<ul>
<li>
<p><code>VK_ERROR_OUT_OF_HOST_MEMORY</code></p>
</li>
<li>
<p><code>VK_ERROR_OUT_OF_DEVICE_MEMORY</code></p>
</li>
</ul>
</div>
</dd>
</dl>
</div>
</div>
</div>
</div>
<div class="sect3">
<h4 id="_see_also_5">See Also</h4>
<div class="paragraph">
<p><a href="#VkCommandBuffer">VkCommandBuffer</a>, <a href="#VkCommandBufferAllocateInfo">VkCommandBufferAllocateInfo</a>, <a href="#VkDevice">VkDevice</a></p>
</div>
</div>
<div class="sect3">
<h4 id="_document_notes_5">Document Notes</h4>
<div class="paragraph">
<p>For more information, see the Vulkan Specification at URL</p>
</div>
<div class="paragraph">
<p><a href="https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#vkAllocateCommandBuffers" class="bare">https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#vkAllocateCommandBuffers</a></p>
</div>
<div class="paragraph">
<p>This page is extracted from the Vulkan Specification.
Fixes and changes should be made to the Specification, not directly.</p>
</div>
<div style="page-break-after: always;"></div>
</div>
</div>
<div class="sect2">
<h3 id="_vkallocatedescriptorsets3">vkAllocateDescriptorSets(3)</h3>
<div class="sect3">
<h4 id="_name_6">Name</h4>
<div class="paragraph">
<p>vkAllocateDescriptorSets - Allocate one or more descriptor sets</p>
</div>
</div>
<div class="sect3">
<h4 id="_c_specification_6">C Specification</h4>
<div class="paragraph">
<p>To allocate descriptor sets from a descriptor pool, call:</p>
</div>
<div id="vkAllocateDescriptorSets" class="listingblock">
<div class="content">
<pre class="highlight"><code class="language-c++" data-lang="c++">VkResult vkAllocateDescriptorSets(
    VkDevice                                    device,
    const VkDescriptorSetAllocateInfo*          pAllocateInfo,
    VkDescriptorSet*                            pDescriptorSets);</code></pre>
</div>
</div>
</div>
<div class="sect3">
<h4 id="_parameters_6">Parameters</h4>
<div class="ulist">
<ul>
<li>
<p><code>device</code> is the logical device that owns the descriptor pool.</p>
</li>
<li>
<p><code>pAllocateInfo</code> is a pointer to an instance of the
<a href="#VkDescriptorSetAllocateInfo">VkDescriptorSetAllocateInfo</a> structure describing parameters of the
allocation.</p>
</li>
<li>
<p><code>pDescriptorSets</code> is a pointer to an array of <a href="#VkDescriptorSet">VkDescriptorSet</a>
handles in which the resulting descriptor set objects are returned.</p>
</li>
</ul>
</div>
</div>
<div class="sect3">
<h4 id="_description_6">Description</h4>
<div class="paragraph">
<p>The allocated descriptor sets are returned in <code>pDescriptorSets</code>.</p>
</div>
<div class="paragraph">
<p>When a descriptor set is allocated, the initial state is largely
uninitialized and all descriptors are undefined.
Descriptors also become undefined if the underlying resource is destroyed.
Descriptor sets containing undefined descriptors <strong class="purple">can</strong> still be bound and
used, subject to the following conditions:</p>
</div>
<div class="ulist">
<ul>
<li>
<p>For descriptor set bindings created with the
<code>VK_DESCRIPTOR_BINDING_PARTIALLY_BOUND_BIT_EXT</code> bit set, all
descriptors in that binding that are dynamically used <strong class="purple">must</strong> have been
populated before the descriptor set is
<a href="vkspec.html#descriptorsets-binding">consumed</a>.</p>
</li>
<li>
<p>For descriptor set bindings created without the
<code>VK_DESCRIPTOR_BINDING_PARTIALLY_BOUND_BIT_EXT</code> bit set, all
descriptors in that binding that are statically used <strong class="purple">must</strong> have been
populated before the descriptor set is
<a href="vkspec.html#descriptorsets-binding">consumed</a>.</p>
</li>
<li>
<p>Descriptor bindings with descriptor type of
<code>VK_DESCRIPTOR_TYPE_INLINE_UNIFORM_BLOCK_EXT</code> <strong class="purple">can</strong> be undefined
when the descriptor set is <a href="vkspec.html#descriptorsets-binding">consumed</a>; though
values in that block will be undefined.</p>
</li>
<li>
<p>Entries that are not used by a pipeline <strong class="purple">can</strong> have undefined
descriptors.</p>
</li>
</ul>
</div>
<div class="paragraph">
<p>If a call to <code>vkAllocateDescriptorSets</code> would cause the total number of
descriptor sets allocated from the pool to exceed the value of
<a href="#VkDescriptorPoolCreateInfo">VkDescriptorPoolCreateInfo</a>::<code>maxSets</code> used to create
<code>pAllocateInfo</code>-&gt;<code>descriptorPool</code>, then the allocation <strong class="purple">may</strong> fail
due to lack of space in the descriptor pool.
Similarly, the allocation <strong class="purple">may</strong> fail due to lack of space if the call to
<code>vkAllocateDescriptorSets</code> would cause the number of any given
descriptor type to exceed the sum of all the <code>descriptorCount</code> members
of each element of <a href="#VkDescriptorPoolCreateInfo">VkDescriptorPoolCreateInfo</a>::<code>pPoolSizes</code> with a
<code>member</code> equal to that type.</p>
</div>
<div class="paragraph">
<p>Additionally, the allocation <strong class="purple">may</strong> also fail if a call to
<code>vkAllocateDescriptorSets</code> would cause the total number of inline
uniform block bindings allocated from the pool to exceed the value of
<a href="#VkDescriptorPoolInlineUniformBlockCreateInfoEXT">VkDescriptorPoolInlineUniformBlockCreateInfoEXT</a>::<code>maxInlineUniformBlockBindings</code>
used to create the descriptor pool.</p>
</div>
<div class="paragraph">
<p>If the allocation fails due to no more space in the descriptor pool, and not
because of system or device memory exhaustion, then
<code>VK_ERROR_OUT_OF_POOL_MEMORY</code> <strong class="purple">must</strong> be returned.</p>
</div>
<div class="paragraph">
<p><code>vkAllocateDescriptorSets</code> <strong class="purple">can</strong> be used to create multiple descriptor
sets.
If the creation of any of those descriptor sets fails, then the
implementation <strong class="purple">must</strong> destroy all successfully created descriptor set objects
from this command, set all entries of the <code>pDescriptorSets</code> array to
<a href="#VK_NULL_HANDLE">VK_NULL_HANDLE</a> and return the error.</p>
</div>
<div class="sidebarblock">
<div class="content">
<div class="title">Valid Usage (Implicit)</div>
<div class="ulist">
<ul>
<li>
<p><a id="VUID-vkAllocateDescriptorSets-device-parameter"></a> <code>device</code> <strong class="purple">must</strong> be a valid <code>VkDevice</code> handle</p>
</li>
<li>
<p><a id="VUID-vkAllocateDescriptorSets-pAllocateInfo-parameter"></a> <code>pAllocateInfo</code> <strong class="purple">must</strong> be a valid pointer to a valid <code>VkDescriptorSetAllocateInfo</code> structure</p>
</li>
<li>
<p><a id="VUID-vkAllocateDescriptorSets-pDescriptorSets-parameter"></a> <code>pDescriptorSets</code> <strong class="purple">must</strong> be a valid pointer to an array of <code>pAllocateInfo</code>::descriptorSetCount <code>VkDescriptorSet</code> handles</p>
</li>
</ul>
</div>
</div>
</div>
<div class="sidebarblock">
<div class="content">
<div class="title">Host Synchronization</div>
<div class="ulist">
<ul>
<li>
<p>Host access to <code>pAllocateInfo</code>::descriptorPool <strong class="purple">must</strong> be externally synchronized</p>
</li>
</ul>
</div>
</div>
</div>
<div class="sidebarblock">
<div class="content">
<div class="title">Return Codes</div>
<div class="dlist">
<dl>
<dt class="hdlist1"><a href="#fundamentals-successcodes">Success</a></dt>
<dd>
<div class="ulist">
<ul>
<li>
<p><code>VK_SUCCESS</code></p>
</li>
</ul>
</div>
</dd>
<dt class="hdlist1"><a href="#fundamentals-errorcodes">Failure</a></dt>
<dd>
<div class="ulist">
<ul>
<li>
<p><code>VK_ERROR_OUT_OF_HOST_MEMORY</code></p>
</li>
<li>
<p><code>VK_ERROR_OUT_OF_DEVICE_MEMORY</code></p>
</li>
<li>
<p><code>VK_ERROR_FRAGMENTED_POOL</code></p>
</li>
<li>
<p><code>VK_ERROR_OUT_OF_POOL_MEMORY</code></p>
</li>
</ul>
</div>
</dd>
</dl>
</div>
</div>
</div>
</div>
<div class="sect3">
<h4 id="_see_also_6">See Also</h4>
<div class="paragraph">
<p><a href="#VkDescriptorSet">VkDescriptorSet</a>, <a href="#VkDescriptorSetAllocateInfo">VkDescriptorSetAllocateInfo</a>, <a href="#VkDevice">VkDevice</a></p>
</div>
</div>
<div class="sect3">
<h4 id="_document_notes_6">Document Notes</h4>
<div class="paragraph">
<p>For more information, see the Vulkan Specification at URL</p>
</div>
<div class="paragraph">
<p><a href="https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#vkAllocateDescriptorSets" class="bare">https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#vkAllocateDescriptorSets</a></p>
</div>
<div class="paragraph">
<p>This page is extracted from the Vulkan Specification.
Fixes and changes should be made to the Specification, not directly.</p>
</div>
<div style="page-break-after: always;"></div>
</div>
</div>
<div class="sect2">
<h3 id="_vkallocatememory3">vkAllocateMemory(3)</h3>
<div class="sect3">
<h4 id="_name_7">Name</h4>
<div class="paragraph">
<p>vkAllocateMemory - Allocate device memory</p>
</div>
</div>
<div class="sect3">
<h4 id="_c_specification_7">C Specification</h4>
<div class="paragraph">
<p>To allocate memory objects, call:</p>
</div>
<div id="vkAllocateMemory" class="listingblock">
<div class="content">
<pre class="highlight"><code class="language-c++" data-lang="c++">VkResult vkAllocateMemory(
    VkDevice                                    device,
    const VkMemoryAllocateInfo*                 pAllocateInfo,
    const VkAllocationCallbacks*                pAllocator,
    VkDeviceMemory*                             pMemory);</code></pre>
</div>
</div>
</div>
<div class="sect3">
<h4 id="_parameters_7">Parameters</h4>
<div class="ulist">
<ul>
<li>
<p><code>device</code> is the logical device that owns the memory.</p>
</li>
<li>
<p><code>pAllocateInfo</code> is a pointer to an instance of the
<a href="#VkMemoryAllocateInfo">VkMemoryAllocateInfo</a> structure describing parameters of the
allocation.
A successful returned allocation <strong class="purple">must</strong> use the requested parameters&#8201;&#8212;&#8201;no substitution is permitted by the implementation.</p>
</li>
<li>
<p><code>pAllocator</code> controls host memory allocation as described in the
<a href="vkspec.html#memory-allocation">Memory Allocation</a> chapter.</p>
</li>
<li>
<p><code>pMemory</code> is a pointer to a <a href="#VkDeviceMemory">VkDeviceMemory</a> handle in which
information about the allocated memory is returned.</p>
</li>
</ul>
</div>
</div>
<div class="sect3">
<h4 id="_description_7">Description</h4>
<div class="paragraph">
<p>Allocations returned by <code>vkAllocateMemory</code> are guaranteed to meet any
alignment requirement of the implementation.
For example, if an implementation requires 128 byte alignment for images and
64 byte alignment for buffers, the device memory returned through this
mechanism would be 128-byte aligned.
This ensures that applications <strong class="purple">can</strong> correctly suballocate objects of
different types (with potentially different alignment requirements) in the
same memory object.</p>
</div>
<div class="paragraph">
<p>When memory is allocated, its contents are undefined with the following
constraint:</p>
</div>
<div class="ulist">
<ul>
<li>
<p>The contents of unprotected memory <strong class="purple">must</strong> not be a function of data
protected memory objects, even if those memory objects were previously
freed.</p>
</li>
</ul>
</div>
<div class="admonitionblock note">
<table>
<tr>
<td class="icon">
<i class="fa icon-note" title="Note"></i>
</td>
<td class="content">
<div class="title">Note</div>
<div class="paragraph">
<p>The contents of memory allocated by one application <strong class="purple">should</strong> not be a
function of data from protected memory objects of another application, even
if those memory objects were previously freed.</p>
</div>
</td>
</tr>
</table>
</div>
<div class="paragraph">
<p>The maximum number of valid memory allocations that <strong class="purple">can</strong> exist
simultaneously within a <a href="#VkDevice">VkDevice</a> <strong class="purple">may</strong> be restricted by implementation-
or platform-dependent limits.
If a call to <a href="#vkAllocateMemory">vkAllocateMemory</a> would cause the total number of
allocations to exceed these limits, such a call will fail and <strong class="purple">must</strong> return
<code>VK_ERROR_TOO_MANY_OBJECTS</code>.
The <a href="vkspec.html#limits-maxMemoryAllocationCount"><code>maxMemoryAllocationCount</code></a>
feature describes the number of allocations that <strong class="purple">can</strong> exist simultaneously
before encountering these internal limits.</p>
</div>
<div class="paragraph">
<p>Some platforms <strong class="purple">may</strong> have a limit on the maximum size of a single allocation.
For example, certain systems <strong class="purple">may</strong> fail to create allocations with a size
greater than or equal to 4GB.
Such a limit is implementation-dependent, and if such a failure occurs then
the error <code>VK_ERROR_OUT_OF_DEVICE_MEMORY</code> <strong class="purple">must</strong> be returned.
This limit is advertised in
<a href="#VkPhysicalDeviceMaintenance3Properties">VkPhysicalDeviceMaintenance3Properties</a>::<code>maxMemoryAllocationSize</code>.</p>
</div>
<div class="paragraph">
<p>The cumulative memory size allocated to a heap <strong class="purple">can</strong> be limited by the size
of the specified heap.
In such cases, allocated memory is tracked on a per-device and per-heap
basis.
Some platforms allow overallocation into other heaps.
The overallocation behavior <strong class="purple">can</strong> be specified through the
<code><a href="vkspec.html#VK_AMD_memory_overallocation_behavior" class="bare">html/vkspec.html#VK_AMD_memory_overallocation_behavior</a></code> extension.</p>
</div>
<div class="sidebarblock">
<div class="content">
<div class="title">Valid Usage</div>
<div class="ulist">
<ul>
<li>
<p><a id="VUID-vkAllocateMemory-pAllocateInfo-01713"></a>
<code>pAllocateInfo</code>-&gt;<code>allocationSize</code> <strong class="purple">must</strong> be less than or equal
to
<a href="#VkPhysicalDeviceMemoryProperties">VkPhysicalDeviceMemoryProperties</a>::<code>memoryHeaps</code>[<code>pAllocateInfo</code>-&gt;<code>memoryTypeIndex</code>].<code>size</code>
as returned by <a href="#vkGetPhysicalDeviceMemoryProperties">vkGetPhysicalDeviceMemoryProperties</a> for the
<a href="#VkPhysicalDevice">VkPhysicalDevice</a> that <code>device</code> was created from.</p>
</li>
<li>
<p><a id="VUID-vkAllocateMemory-pAllocateInfo-01714"></a>
<code>pAllocateInfo</code>-&gt;<code>memoryTypeIndex</code> <strong class="purple">must</strong> be less than
<a href="#VkPhysicalDeviceMemoryProperties">VkPhysicalDeviceMemoryProperties</a>::<code>memoryTypeCount</code> as
returned by <a href="#vkGetPhysicalDeviceMemoryProperties">vkGetPhysicalDeviceMemoryProperties</a> for the
<a href="#VkPhysicalDevice">VkPhysicalDevice</a> that <code>device</code> was created from.</p>
</li>
</ul>
</div>
</div>
</div>
<div class="sidebarblock">
<div class="content">
<div class="title">Valid Usage (Implicit)</div>
<div class="ulist">
<ul>
<li>
<p><a id="VUID-vkAllocateMemory-device-parameter"></a> <code>device</code> <strong class="purple">must</strong> be a valid <code>VkDevice</code> handle</p>
</li>
<li>
<p><a id="VUID-vkAllocateMemory-pAllocateInfo-parameter"></a> <code>pAllocateInfo</code> <strong class="purple">must</strong> be a valid pointer to a valid <code>VkMemoryAllocateInfo</code> structure</p>
</li>
<li>
<p><a id="VUID-vkAllocateMemory-pAllocator-parameter"></a> If <code>pAllocator</code> is not <code>NULL</code>, <code>pAllocator</code> <strong class="purple">must</strong> be a valid pointer to a valid <code>VkAllocationCallbacks</code> structure</p>
</li>
<li>
<p><a id="VUID-vkAllocateMemory-pMemory-parameter"></a> <code>pMemory</code> <strong class="purple">must</strong> be a valid pointer to a <code>VkDeviceMemory</code> handle</p>
</li>
</ul>
</div>
</div>
</div>
<div class="sidebarblock">
<div class="content">
<div class="title">Return Codes</div>
<div class="dlist">
<dl>
<dt class="hdlist1"><a href="#fundamentals-successcodes">Success</a></dt>
<dd>
<div class="ulist">
<ul>
<li>
<p><code>VK_SUCCESS</code></p>
</li>
</ul>
</div>
</dd>
<dt class="hdlist1"><a href="#fundamentals-errorcodes">Failure</a></dt>
<dd>
<div class="ulist">
<ul>
<li>
<p><code>VK_ERROR_OUT_OF_HOST_MEMORY</code></p>
</li>
<li>
<p><code>VK_ERROR_OUT_OF_DEVICE_MEMORY</code></p>
</li>
<li>
<p><code>VK_ERROR_TOO_MANY_OBJECTS</code></p>
</li>
<li>
<p><code>VK_ERROR_INVALID_EXTERNAL_HANDLE</code></p>
</li>
</ul>
</div>
</dd>
</dl>
</div>
</div>
</div>
</div>
<div class="sect3">
<h4 id="_see_also_7">See Also</h4>
<div class="paragraph">
<p><a href="#VkAllocationCallbacks">VkAllocationCallbacks</a>, <a href="#VkDevice">VkDevice</a>, <a href="#VkDeviceMemory">VkDeviceMemory</a>, <a href="#VkMemoryAllocateInfo">VkMemoryAllocateInfo</a></p>
</div>
</div>
<div class="sect3">
<h4 id="_document_notes_7">Document Notes</h4>
<div class="paragraph">
<p>For more information, see the Vulkan Specification at URL</p>
</div>
<div class="paragraph">
<p><a href="https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#vkAllocateMemory" class="bare">https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#vkAllocateMemory</a></p>
</div>
<div class="paragraph">
<p>This page is extracted from the Vulkan Specification.
Fixes and changes should be made to the Specification, not directly.</p>
</div>
<div style="page-break-after: always;"></div>
</div>
</div>
<div class="sect2">
<h3 id="_vkbegincommandbuffer3">vkBeginCommandBuffer(3)</h3>
<div class="sect3">
<h4 id="_name_8">Name</h4>
<div class="paragraph">
<p>vkBeginCommandBuffer - Start recording a command buffer</p>
</div>
</div>
<div class="sect3">
<h4 id="_c_specification_8">C Specification</h4>
<div class="paragraph">
<p>To begin recording a command buffer, call:</p>
</div>
<div id="vkBeginCommandBuffer" class="listingblock">
<div class="content">
<pre class="highlight"><code class="language-c++" data-lang="c++">VkResult vkBeginCommandBuffer(
    VkCommandBuffer                             commandBuffer,
    const VkCommandBufferBeginInfo*             pBeginInfo);</code></pre>
</div>
</div>
</div>
<div class="sect3">
<h4 id="_parameters_8">Parameters</h4>
<div class="ulist">
<ul>
<li>
<p><code>commandBuffer</code> is the handle of the command buffer which is to be
put in the recording state.</p>
</li>
<li>
<p><code>pBeginInfo</code> is an instance of the <a href="#VkCommandBufferBeginInfo">VkCommandBufferBeginInfo</a>
structure, which defines additional information about how the command
buffer begins recording.</p>
</li>
</ul>
</div>
</div>
<div class="sect3">
<h4 id="_description_8">Description</h4>
<div class="sidebarblock">
<div class="content">
<div class="title">Valid Usage</div>
<div class="ulist">
<ul>
<li>
<p><a id="VUID-vkBeginCommandBuffer-commandBuffer-00049"></a>
<code>commandBuffer</code> <strong class="purple">must</strong> not be in the <a href="vkspec.html#commandbuffers-lifecycle">recording or pending state</a>.</p>
</li>
<li>
<p><a id="VUID-vkBeginCommandBuffer-commandBuffer-00050"></a>
If <code>commandBuffer</code> was allocated from a <a href="#VkCommandPool">VkCommandPool</a> which
did not have the <code>VK_COMMAND_POOL_CREATE_RESET_COMMAND_BUFFER_BIT</code>
flag set, <code>commandBuffer</code> <strong class="purple">must</strong> be in the
<a href="vkspec.html#commandbuffers-lifecycle">initial state</a>.</p>
</li>
<li>
<p><a id="VUID-vkBeginCommandBuffer-commandBuffer-00051"></a>
If <code>commandBuffer</code> is a secondary command buffer, the
<code>pInheritanceInfo</code> member of <code>pBeginInfo</code> <strong class="purple">must</strong> be a valid
<code>VkCommandBufferInheritanceInfo</code> structure</p>
</li>
<li>
<p><a id="VUID-vkBeginCommandBuffer-commandBuffer-00052"></a>
If <code>commandBuffer</code> is a secondary command buffer and either the
<code>occlusionQueryEnable</code> member of the <code>pInheritanceInfo</code> member
of <code>pBeginInfo</code> is <code>VK_FALSE</code>, or the precise occlusion queries
feature is not enabled, the <code>queryFlags</code> member of the
<code>pInheritanceInfo</code> member <code>pBeginInfo</code> <strong class="purple">must</strong> not contain
<code>VK_QUERY_CONTROL_PRECISE_BIT</code></p>
</li>
</ul>
</div>
</div>
</div>
<div class="sidebarblock">
<div class="content">
<div class="title">Valid Usage (Implicit)</div>
<div class="ulist">
<ul>
<li>
<p><a id="VUID-vkBeginCommandBuffer-commandBuffer-parameter"></a> <code>commandBuffer</code> <strong class="purple">must</strong> be a valid <code>VkCommandBuffer</code> handle</p>
</li>
<li>
<p><a id="VUID-vkBeginCommandBuffer-pBeginInfo-parameter"></a> <code>pBeginInfo</code> <strong class="purple">must</strong> be a valid pointer to a valid <code>VkCommandBufferBeginInfo</code> structure</p>
</li>
</ul>
</div>
</div>
</div>
<div class="sidebarblock">
<div class="content">
<div class="title">Host Synchronization</div>
<div class="ulist">
<ul>
<li>
<p>Host access to <code>commandBuffer</code> <strong class="purple">must</strong> be externally synchronized</p>
</li>
<li>
<p>Host access to the <code>VkCommandPool</code> that <code>commandBuffer</code> was allocated from <strong class="purple">must</strong> be externally synchronized</p>
</li>
</ul>
</div>
</div>
</div>
<div class="sidebarblock">
<div class="content">
<div class="title">Return Codes</div>
<div class="dlist">
<dl>
<dt class="hdlist1"><a href="#fundamentals-successcodes">Success</a></dt>
<dd>
<div class="ulist">
<ul>
<li>
<p><code>VK_SUCCESS</code></p>
</li>
</ul>
</div>
</dd>
<dt class="hdlist1"><a href="#fundamentals-errorcodes">Failure</a></dt>
<dd>
<div class="ulist">
<ul>
<li>
<p><code>VK_ERROR_OUT_OF_HOST_MEMORY</code></p>
</li>
<li>
<p><code>VK_ERROR_OUT_OF_DEVICE_MEMORY</code></p>
</li>
</ul>
</div>
</dd>
</dl>
</div>
</div>
</div>
</div>
<div class="sect3">
<h4 id="_see_also_8">See Also</h4>
<div class="paragraph">
<p><a href="#VkCommandBuffer">VkCommandBuffer</a>, <a href="#VkCommandBufferBeginInfo">VkCommandBufferBeginInfo</a></p>
</div>
</div>
<div class="sect3">
<h4 id="_document_notes_8">Document Notes</h4>
<div class="paragraph">
<p>For more information, see the Vulkan Specification at URL</p>
</div>
<div class="paragraph">
<p><a href="https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#vkBeginCommandBuffer" class="bare">https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#vkBeginCommandBuffer</a></p>
</div>
<div class="paragraph">
<p>This page is extracted from the Vulkan Specification.
Fixes and changes should be made to the Specification, not directly.</p>
</div>
<div style="page-break-after: always;"></div>
</div>
</div>
<div class="sect2">
<h3 id="_vkbindaccelerationstructurememorynv3">vkBindAccelerationStructureMemoryNV(3)</h3>
<div class="sect3">
<h4 id="_name_9">Name</h4>
<div class="paragraph">
<p>vkBindAccelerationStructureMemoryNV - Bind acceleration structure memory</p>
</div>
</div>
<div class="sect3">
<h4 id="_c_specification_9">C Specification</h4>
<div class="paragraph">
<p>To attach memory to one or more acceleration structures at a time, call:</p>
</div>
<div id="vkBindAccelerationStructureMemoryNV" class="listingblock">
<div class="content">
<pre class="highlight"><code class="language-c++" data-lang="c++">VkResult vkBindAccelerationStructureMemoryNV(
    VkDevice                                    device,
    uint32_t                                    bindInfoCount,
    const VkBindAccelerationStructureMemoryInfoNV* pBindInfos);</code></pre>
</div>
</div>
</div>
<div class="sect3">
<h4 id="_parameters_9">Parameters</h4>
<div class="ulist">
<ul>
<li>
<p><code>device</code> is the logical device that owns the acceleration structures
and memory.</p>
</li>
<li>
<p><code>bindInfoCount</code> is the number of elements in <code>pBindInfos</code>.</p>
</li>
<li>
<p><code>pBindInfos</code> is a pointer to an array of structures of type
<a href="#VkBindAccelerationStructureMemoryInfoNV">VkBindAccelerationStructureMemoryInfoNV</a>, describing images and
memory to bind.</p>
</li>
</ul>
</div>
</div>
<div class="sect3">
<h4 id="_description_9">Description</h4>
<div class="sidebarblock">
<div class="content">
<div class="title">Valid Usage (Implicit)</div>
<div class="ulist">
<ul>
<li>
<p><a id="VUID-vkBindAccelerationStructureMemoryNV-device-parameter"></a> <code>device</code> <strong class="purple">must</strong> be a valid <code>VkDevice</code> handle</p>
</li>
<li>
<p><a id="VUID-vkBindAccelerationStructureMemoryNV-pBindInfos-parameter"></a> <code>pBindInfos</code> <strong class="purple">must</strong> be a valid pointer to an array of <code>bindInfoCount</code> valid <code>VkBindAccelerationStructureMemoryInfoNV</code> structures</p>
</li>
<li>
<p><a id="VUID-vkBindAccelerationStructureMemoryNV-bindInfoCount-arraylength"></a> <code>bindInfoCount</code> <strong class="purple">must</strong> be greater than <code>0</code></p>
</li>
</ul>
</div>
</div>
</div>
<div class="sidebarblock">
<div class="content">
<div class="title">Return Codes</div>
<div class="dlist">
<dl>
<dt class="hdlist1"><a href="#fundamentals-successcodes">Success</a></dt>
<dd>
<div class="ulist">
<ul>
<li>
<p><code>VK_SUCCESS</code></p>
</li>
</ul>
</div>
</dd>
<dt class="hdlist1"><a href="#fundamentals-errorcodes">Failure</a></dt>
<dd>
<div class="ulist">
<ul>
<li>
<p><code>VK_ERROR_OUT_OF_HOST_MEMORY</code></p>
</li>
<li>
<p><code>VK_ERROR_OUT_OF_DEVICE_MEMORY</code></p>
</li>
</ul>
</div>
</dd>
</dl>
</div>
</div>
</div>
</div>
<div class="sect3">
<h4 id="_see_also_9">See Also</h4>
<div class="paragraph">
<p><a href="#VkBindAccelerationStructureMemoryInfoNV">VkBindAccelerationStructureMemoryInfoNV</a>, <a href="#VkDevice">VkDevice</a></p>
</div>
</div>
<div class="sect3">
<h4 id="_document_notes_9">Document Notes</h4>
<div class="paragraph">
<p>For more information, see the Vulkan Specification at URL</p>
</div>
<div class="paragraph">
<p><a href="https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#vkBindAccelerationStructureMemoryNV" class="bare">https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#vkBindAccelerationStructureMemoryNV</a></p>
</div>
<div class="paragraph">
<p>This page is extracted from the Vulkan Specification.
Fixes and changes should be made to the Specification, not directly.</p>
</div>
<div style="page-break-after: always;"></div>
</div>
</div>
<div class="sect2">
<h3 id="_vkbindbuffermemory3">vkBindBufferMemory(3)</h3>
<div class="sect3">
<h4 id="_name_10">Name</h4>
<div class="paragraph">
<p>vkBindBufferMemory - Bind device memory to a buffer object</p>
</div>
</div>
<div class="sect3">
<h4 id="_c_specification_10">C Specification</h4>
<div class="paragraph">
<p>To attach memory to a buffer object, call:</p>
</div>
<div id="vkBindBufferMemory" class="listingblock">
<div class="content">
<pre class="highlight"><code class="language-c++" data-lang="c++">VkResult vkBindBufferMemory(
    VkDevice                                    device,
    VkBuffer                                    buffer,
    VkDeviceMemory                              memory,
    VkDeviceSize                                memoryOffset);</code></pre>
</div>
</div>
</div>
<div class="sect3">
<h4 id="_parameters_10">Parameters</h4>
<div class="ulist">
<ul>
<li>
<p><code>device</code> is the logical device that owns the buffer and memory.</p>
</li>
<li>
<p><code>buffer</code> is the buffer to be attached to memory.</p>
</li>
<li>
<p><code>memory</code> is a <a href="#VkDeviceMemory">VkDeviceMemory</a> object describing the device
memory to attach.</p>
</li>
<li>
<p><code>memoryOffset</code> is the start offset of the region of <code>memory</code>
which is to be bound to the buffer.
The number of bytes returned in the
<code>VkMemoryRequirements</code>::<code>size</code> member in <code>memory</code>, starting
from <code>memoryOffset</code> bytes, will be bound to the specified buffer.</p>
</li>
</ul>
</div>
</div>
<div class="sect3">
<h4 id="_description_10">Description</h4>
<div class="paragraph">
<p><code>vkBindBufferMemory</code> is equivalent to passing the same parameters
through <a href="#VkBindBufferMemoryInfo">VkBindBufferMemoryInfo</a> to <a href="#vkBindBufferMemory2">vkBindBufferMemory2</a>.</p>
</div>
<div class="sidebarblock">
<div class="content">
<div class="title">Valid Usage</div>
<div class="ulist">
<ul>
<li>
<p><a id="VUID-vkBindBufferMemory-buffer-01029"></a>
<code>buffer</code> <strong class="purple">must</strong> not already be backed by a memory object</p>
</li>
<li>
<p><a id="VUID-vkBindBufferMemory-buffer-01030"></a>
<code>buffer</code> <strong class="purple">must</strong> not have been created with any sparse memory binding
flags</p>
</li>
<li>
<p><a id="VUID-vkBindBufferMemory-memoryOffset-01031"></a>
<code>memoryOffset</code> <strong class="purple">must</strong> be less than the size of <code>memory</code></p>
</li>
<li>
<p><a id="VUID-vkBindBufferMemory-memory-01035"></a>
<code>memory</code> <strong class="purple">must</strong> have been allocated using one of the memory types
allowed in the <code>memoryTypeBits</code> member of the
<code>VkMemoryRequirements</code> structure returned from a call to
<code>vkGetBufferMemoryRequirements</code> with <code>buffer</code></p>
</li>
<li>
<p><a id="VUID-vkBindBufferMemory-memoryOffset-01036"></a>
<code>memoryOffset</code> <strong class="purple">must</strong> be an integer multiple of the <code>alignment</code>
member of the <code>VkMemoryRequirements</code> structure returned from a call
to <code>vkGetBufferMemoryRequirements</code> with <code>buffer</code></p>
</li>
<li>
<p><a id="VUID-vkBindBufferMemory-size-01037"></a>
The <code>size</code> member of the <code>VkMemoryRequirements</code> structure
returned from a call to <code>vkGetBufferMemoryRequirements</code> with
<code>buffer</code> <strong class="purple">must</strong> be less than or equal to the size of <code>memory</code>
minus <code>memoryOffset</code></p>
</li>
<li>
<p><a id="VUID-vkBindBufferMemory-buffer-01444"></a>
If <code>buffer</code> requires a dedicated allocation(as reported by
<a href="#vkGetBufferMemoryRequirements2">vkGetBufferMemoryRequirements2</a> in
<a href="#VkMemoryDedicatedRequirements">VkMemoryDedicatedRequirements</a>::requiresDedicatedAllocation for
<code>buffer</code>), <code>memory</code> <strong class="purple">must</strong> have been created with
<a href="#VkMemoryDedicatedAllocateInfo">VkMemoryDedicatedAllocateInfo</a>::<code>buffer</code> equal to <code>buffer</code></p>
</li>
<li>
<p><a id="VUID-vkBindBufferMemory-memory-01508"></a>
If the <code>VkMemoryAllocateInfo</code> provided when <code>memory</code> was
allocated included an instance of <a href="#VkMemoryDedicatedAllocateInfo">VkMemoryDedicatedAllocateInfo</a> in
its <code>pNext</code> chain, and
<a href="#VkMemoryDedicatedAllocateInfo">VkMemoryDedicatedAllocateInfo</a>::<code>buffer</code> was not
<a href="#VK_NULL_HANDLE">VK_NULL_HANDLE</a>, then <code>buffer</code> <strong class="purple">must</strong> equal
<a href="#VkMemoryDedicatedAllocateInfo">VkMemoryDedicatedAllocateInfo</a>::<code>buffer</code>, and
<code>memoryOffset</code> <strong class="purple">must</strong> be zero.</p>
</li>
<li>
<p><a id="VUID-vkBindBufferMemory-None-01898"></a>
If buffer was created with the <code>VK_BUFFER_CREATE_PROTECTED_BIT</code> bit
set, the buffer <strong class="purple">must</strong> be bound to a memory object allocated with a
memory type that reports <code>VK_MEMORY_PROPERTY_PROTECTED_BIT</code></p>
</li>
<li>
<p><a id="VUID-vkBindBufferMemory-None-01899"></a>
If buffer was created with the <code>VK_BUFFER_CREATE_PROTECTED_BIT</code> bit
not set, the buffer <strong class="purple">must</strong> not be bound to a memory object created with a
memory type that reports <code>VK_MEMORY_PROPERTY_PROTECTED_BIT</code></p>
</li>
<li>
<p><a id="VUID-vkBindBufferMemory-buffer-01038"></a>
If <code>buffer</code> was created with
<a href="#VkDedicatedAllocationBufferCreateInfoNV">VkDedicatedAllocationBufferCreateInfoNV</a>::<code>dedicatedAllocation</code>
equal to <code>VK_TRUE</code>, <code>memory</code> <strong class="purple">must</strong> have been created with
<a href="#VkDedicatedAllocationMemoryAllocateInfoNV">VkDedicatedAllocationMemoryAllocateInfoNV</a>::<code>buffer</code> equal to a
buffer handle created with identical creation parameters to <code>buffer</code>
and <code>memoryOffset</code> <strong class="purple">must</strong> be zero</p>
</li>
</ul>
</div>
</div>
</div>
<div class="sidebarblock">
<div class="content">
<div class="title">Valid Usage (Implicit)</div>
<div class="ulist">
<ul>
<li>
<p><a id="VUID-vkBindBufferMemory-device-parameter"></a> <code>device</code> <strong class="purple">must</strong> be a valid <code>VkDevice</code> handle</p>
</li>
<li>
<p><a id="VUID-vkBindBufferMemory-buffer-parameter"></a> <code>buffer</code> <strong class="purple">must</strong> be a valid <code>VkBuffer</code> handle</p>
</li>
<li>
<p><a id="VUID-vkBindBufferMemory-memory-parameter"></a> <code>memory</code> <strong class="purple">must</strong> be a valid <code>VkDeviceMemory</code> handle</p>
</li>
<li>
<p><a id="VUID-vkBindBufferMemory-buffer-parent"></a> <code>buffer</code> <strong class="purple">must</strong> have been created, allocated, or retrieved from <code>device</code></p>
</li>
<li>
<p><a id="VUID-vkBindBufferMemory-memory-parent"></a> <code>memory</code> <strong class="purple">must</strong> have been created, allocated, or retrieved from <code>device</code></p>
</li>
</ul>
</div>
</div>
</div>
<div class="sidebarblock">
<div class="content">
<div class="title">Host Synchronization</div>
<div class="ulist">
<ul>
<li>
<p>Host access to <code>buffer</code> <strong class="purple">must</strong> be externally synchronized</p>
</li>
</ul>
</div>
</div>
</div>
<div class="sidebarblock">
<div class="content">
<div class="title">Return Codes</div>
<div class="dlist">
<dl>
<dt class="hdlist1"><a href="#fundamentals-successcodes">Success</a></dt>
<dd>
<div class="ulist">
<ul>
<li>
<p><code>VK_SUCCESS</code></p>
</li>
</ul>
</div>
</dd>
<dt class="hdlist1"><a href="#fundamentals-errorcodes">Failure</a></dt>
<dd>
<div class="ulist">
<ul>
<li>
<p><code>VK_ERROR_OUT_OF_HOST_MEMORY</code></p>
</li>
<li>
<p><code>VK_ERROR_OUT_OF_DEVICE_MEMORY</code></p>
</li>
</ul>
</div>
</dd>
</dl>
</div>
</div>
</div>
</div>
<div class="sect3">
<h4 id="_see_also_10">See Also</h4>
<div class="paragraph">
<p><a href="#VkBuffer">VkBuffer</a>, <a href="#VkDevice">VkDevice</a>, <a href="#VkDeviceMemory">VkDeviceMemory</a>, <code>VkDeviceSize</code></p>
</div>
</div>
<div class="sect3">
<h4 id="_document_notes_10">Document Notes</h4>
<div class="paragraph">
<p>For more information, see the Vulkan Specification at URL</p>
</div>
<div class="paragraph">
<p><a href="https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#vkBindBufferMemory" class="bare">https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#vkBindBufferMemory</a></p>
</div>
<div class="paragraph">
<p>This page is extracted from the Vulkan Specification.
Fixes and changes should be made to the Specification, not directly.</p>
</div>
<div style="page-break-after: always;"></div>
</div>
</div>
<div class="sect2">
<h3 id="_vkbindbuffermemory23">vkBindBufferMemory2(3)</h3>
<div class="sect3">
<h4 id="_name_11">Name</h4>
<div class="paragraph">
<p>vkBindBufferMemory2 - Bind device memory to buffer objects</p>
</div>
</div>
<div class="sect3">
<h4 id="_c_specification_11">C Specification</h4>
<div class="paragraph">
<p>To attach memory to buffer objects for one or more buffers at a time, call:</p>
</div>
<div id="vkBindBufferMemory2" class="listingblock">
<div class="content">
<pre class="highlight"><code class="language-c++" data-lang="c++">VkResult vkBindBufferMemory2(
    VkDevice                                    device,
    uint32_t                                    bindInfoCount,
    const VkBindBufferMemoryInfo*               pBindInfos);</code></pre>
</div>
</div>
<div class="paragraph">
<p>or the equivalent command</p>
</div>
<div id="vkBindBufferMemory2KHR" class="listingblock">
<div class="content">
<pre class="highlight"><code class="language-c++" data-lang="c++">VkResult vkBindBufferMemory2KHR(
    VkDevice                                    device,
    uint32_t                                    bindInfoCount,
    const VkBindBufferMemoryInfo*               pBindInfos);</code></pre>
</div>
</div>
</div>
<div class="sect3">
<h4 id="_parameters_11">Parameters</h4>
<div class="ulist">
<ul>
<li>
<p><code>device</code> is the logical device that owns the buffers and memory.</p>
</li>
<li>
<p><code>bindInfoCount</code> is the number of elements in <code>pBindInfos</code>.</p>
</li>
<li>
<p><code>pBindInfos</code> is a pointer to an array of structures of type
<a href="#VkBindBufferMemoryInfo">VkBindBufferMemoryInfo</a>, describing buffers and memory to bind.</p>
</li>
</ul>
</div>
</div>
<div class="sect3">
<h4 id="_description_11">Description</h4>
<div class="paragraph">
<p>On some implementations, it <strong class="purple">may</strong> be more efficient to batch memory bindings
into a single command.</p>
</div>
<div class="sidebarblock">
<div class="content">
<div class="title">Valid Usage (Implicit)</div>
<div class="ulist">
<ul>
<li>
<p><a id="VUID-vkBindBufferMemory2-device-parameter"></a> <code>device</code> <strong class="purple">must</strong> be a valid <code>VkDevice</code> handle</p>
</li>
<li>
<p><a id="VUID-vkBindBufferMemory2-pBindInfos-parameter"></a> <code>pBindInfos</code> <strong class="purple">must</strong> be a valid pointer to an array of <code>bindInfoCount</code> valid <code>VkBindBufferMemoryInfo</code> structures</p>
</li>
<li>
<p><a id="VUID-vkBindBufferMemory2-bindInfoCount-arraylength"></a> <code>bindInfoCount</code> <strong class="purple">must</strong> be greater than <code>0</code></p>
</li>
</ul>
</div>
</div>
</div>
<div class="sidebarblock">
<div class="content">
<div class="title">Return Codes</div>
<div class="dlist">
<dl>
<dt class="hdlist1"><a href="#fundamentals-successcodes">Success</a></dt>
<dd>
<div class="ulist">
<ul>
<li>
<p><code>VK_SUCCESS</code></p>
</li>
</ul>
</div>
</dd>
<dt class="hdlist1"><a href="#fundamentals-errorcodes">Failure</a></dt>
<dd>
<div class="ulist">
<ul>
<li>
<p><code>VK_ERROR_OUT_OF_HOST_MEMORY</code></p>
</li>
<li>
<p><code>VK_ERROR_OUT_OF_DEVICE_MEMORY</code></p>
</li>
</ul>
</div>
</dd>
</dl>
</div>
</div>
</div>
</div>
<div class="sect3">
<h4 id="_see_also_11">See Also</h4>
<div class="paragraph">
<p><a href="#VkBindBufferMemoryInfo">VkBindBufferMemoryInfo</a>, <a href="#VkDevice">VkDevice</a></p>
</div>
</div>
<div class="sect3">
<h4 id="_document_notes_11">Document Notes</h4>
<div class="paragraph">
<p>For more information, see the Vulkan Specification at URL</p>
</div>
<div class="paragraph">
<p><a href="https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#vkBindBufferMemory2" class="bare">https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#vkBindBufferMemory2</a></p>
</div>
<div class="paragraph">
<p>This page is extracted from the Vulkan Specification.
Fixes and changes should be made to the Specification, not directly.</p>
</div>
<div style="page-break-after: always;"></div>
</div>
</div>
<div class="sect2">
<h3 id="_vkbindimagememory3">vkBindImageMemory(3)</h3>
<div class="sect3">
<h4 id="_name_12">Name</h4>
<div class="paragraph">
<p>vkBindImageMemory - Bind device memory to an image object</p>
</div>
</div>
<div class="sect3">
<h4 id="_c_specification_12">C Specification</h4>
<div class="paragraph">
<p>To attach memory to a <code>VkImage</code> object created without the
<code>VK_IMAGE_CREATE_DISJOINT_BIT</code> set, call:</p>
</div>
<div id="vkBindImageMemory" class="listingblock">
<div class="content">
<pre class="highlight"><code class="language-c++" data-lang="c++">VkResult vkBindImageMemory(
    VkDevice                                    device,
    VkImage                                     image,
    VkDeviceMemory                              memory,
    VkDeviceSize                                memoryOffset);</code></pre>
</div>
</div>
</div>
<div class="sect3">
<h4 id="_parameters_12">Parameters</h4>
<div class="ulist">
<ul>
<li>
<p><code>device</code> is the logical device that owns the image and memory.</p>
</li>
<li>
<p><code>image</code> is the image.</p>
</li>
<li>
<p><code>memory</code> is the <a href="#VkDeviceMemory">VkDeviceMemory</a> object describing the device
memory to attach.</p>
</li>
<li>
<p><code>memoryOffset</code> is the start offset of the region of <code>memory</code>
which is to be bound to the image.
The number of bytes returned in the
<code>VkMemoryRequirements</code>::<code>size</code> member in <code>memory</code>, starting
from <code>memoryOffset</code> bytes, will be bound to the specified image.</p>
</li>
</ul>
</div>
</div>
<div class="sect3">
<h4 id="_description_12">Description</h4>
<div class="paragraph">
<p><code>vkBindImageMemory</code> is equivalent to passing the same parameters through
<a href="#VkBindImageMemoryInfo">VkBindImageMemoryInfo</a> to <a href="#vkBindImageMemory2">vkBindImageMemory2</a>.</p>
</div>
<div class="sidebarblock">
<div class="content">
<div class="title">Valid Usage</div>
<div class="ulist">
<ul>
<li>
<p><a id="VUID-vkBindImageMemory-image-01608"></a>
<code>image</code> <strong class="purple">must</strong> not have been created with the
<code>VK_IMAGE_CREATE_DISJOINT_BIT</code> set.</p>
</li>
<li>
<p><a id="VUID-vkBindImageMemory-image-01044"></a>
<code>image</code> <strong class="purple">must</strong> not already be backed by a memory object</p>
</li>
<li>
<p><a id="VUID-vkBindImageMemory-image-01045"></a>
<code>image</code> <strong class="purple">must</strong> not have been created with any sparse memory binding
flags</p>
</li>
<li>
<p><a id="VUID-vkBindImageMemory-memoryOffset-01046"></a>
<code>memoryOffset</code> <strong class="purple">must</strong> be less than the size of <code>memory</code></p>
</li>
<li>
<p><a id="VUID-vkBindImageMemory-memory-01047"></a>
<code>memory</code> <strong class="purple">must</strong> have been allocated using one of the memory types
allowed in the <code>memoryTypeBits</code> member of the
<code>VkMemoryRequirements</code> structure returned from a call to
<code>vkGetImageMemoryRequirements</code> with <code>image</code></p>
</li>
<li>
<p><a id="VUID-vkBindImageMemory-memoryOffset-01048"></a>
<code>memoryOffset</code> <strong class="purple">must</strong> be an integer multiple of the <code>alignment</code>
member of the <code>VkMemoryRequirements</code> structure returned from a call
to <code>vkGetImageMemoryRequirements</code> with <code>image</code></p>
</li>
<li>
<p><a id="VUID-vkBindImageMemory-size-01049"></a>
The <code>size</code> member of the <code>VkMemoryRequirements</code> structure
returned from a call to <code>vkGetImageMemoryRequirements</code> with
<code>image</code> <strong class="purple">must</strong> be less than or equal to the size of <code>memory</code>
minus <code>memoryOffset</code></p>
</li>
<li>
<p><a id="VUID-vkBindImageMemory-image-01445"></a>
If <code>image</code> requires a dedicated allocation (as reported by
<a href="#vkGetImageMemoryRequirements2">vkGetImageMemoryRequirements2</a> in
<a href="#VkMemoryDedicatedRequirements">VkMemoryDedicatedRequirements</a>::requiresDedicatedAllocation for
<code>image</code>), <code>memory</code> <strong class="purple">must</strong> have been created with
<a href="#VkMemoryDedicatedAllocateInfo">VkMemoryDedicatedAllocateInfo</a>::<code>image</code> equal to <code>image</code></p>
</li>
<li>
<p><a id="VUID-vkBindImageMemory-memory-02628"></a>
If the <a href="vkspec.html#features-dedicatedAllocationImageAliasing">dedicated allocation
image aliasing</a> feature is not enabled, and the
<code>VkMemoryAllocateInfo</code> provided when <code>memory</code> was allocated
included an instance of <a href="#VkMemoryDedicatedAllocateInfo">VkMemoryDedicatedAllocateInfo</a> in its
<code>pNext</code> chain, and <a href="#VkMemoryDedicatedAllocateInfo">VkMemoryDedicatedAllocateInfo</a>::<code>image</code>
was not <a href="#VK_NULL_HANDLE">VK_NULL_HANDLE</a>, then <code>image</code> <strong class="purple">must</strong> equal
<a href="#VkMemoryDedicatedAllocateInfo">VkMemoryDedicatedAllocateInfo</a>::<code>image</code> and <code>memoryOffset</code>
<strong class="purple">must</strong> be zero.</p>
</li>
<li>
<p><a id="VUID-vkBindImageMemory-memory-02629"></a>
If the <a href="vkspec.html#features-dedicatedAllocationImageAliasing">dedicated allocation
image aliasing</a> feature is enabled, and the <code>VkMemoryAllocateInfo</code>
provided when <code>memory</code> was allocated included an instance of
<a href="#VkMemoryDedicatedAllocateInfo">VkMemoryDedicatedAllocateInfo</a> in its <code>pNext</code> chain, and
<a href="#VkMemoryDedicatedAllocateInfo">VkMemoryDedicatedAllocateInfo</a>::<code>image</code> was not
<a href="#VK_NULL_HANDLE">VK_NULL_HANDLE</a>, then <code>memoryOffset</code> <strong class="purple">must</strong> be zero, and
<code>image</code> <strong class="purple">must</strong> be either equal to
<a href="#VkMemoryDedicatedAllocateInfo">VkMemoryDedicatedAllocateInfo</a>::<code>image</code> or an image that was
created using the same parameters in <code>VkImageCreateInfo</code>, with the
exception that <code>extent</code> and <code>arrayLayers</code> <strong class="purple">may</strong> differ subject to
the following restrictions: every dimension in the <code>extent</code>
parameter of the image being bound <strong class="purple">must</strong> be equal to or smaller than the
original image for which the allocation was created; and the
<code>arrayLayers</code> parameter of the image being bound <strong class="purple">must</strong> be equal to
or smaller than the original image for which the allocation was created.</p>
</li>
<li>
<p><a id="VUID-vkBindImageMemory-None-01901"></a>
If image was created with the <code>VK_IMAGE_CREATE_PROTECTED_BIT</code> bit
set, the image <strong class="purple">must</strong> be bound to a memory object allocated with a memory
type that reports <code>VK_MEMORY_PROPERTY_PROTECTED_BIT</code></p>
</li>
<li>
<p><a id="VUID-vkBindImageMemory-None-01902"></a>
If image was created with the <code>VK_IMAGE_CREATE_PROTECTED_BIT</code> bit
not set, the image <strong class="purple">must</strong> not be bound to a memory object created with a
memory type that reports <code>VK_MEMORY_PROPERTY_PROTECTED_BIT</code></p>
</li>
<li>
<p><a id="VUID-vkBindImageMemory-image-01050"></a>
If <code>image</code> was created with
<a href="#VkDedicatedAllocationImageCreateInfoNV">VkDedicatedAllocationImageCreateInfoNV</a>::<code>dedicatedAllocation</code>
equal to <code>VK_TRUE</code>, <code>memory</code> <strong class="purple">must</strong> have been created with
<a href="#VkDedicatedAllocationMemoryAllocateInfoNV">VkDedicatedAllocationMemoryAllocateInfoNV</a>::<code>image</code> equal to an
image handle created with identical creation parameters to <code>image</code>
and <code>memoryOffset</code> <strong class="purple">must</strong> be zero</p>
</li>
</ul>
</div>
</div>
</div>
<div class="sidebarblock">
<div class="content">
<div class="title">Valid Usage (Implicit)</div>
<div class="ulist">
<ul>
<li>
<p><a id="VUID-vkBindImageMemory-device-parameter"></a> <code>device</code> <strong class="purple">must</strong> be a valid <code>VkDevice</code> handle</p>
</li>
<li>
<p><a id="VUID-vkBindImageMemory-image-parameter"></a> <code>image</code> <strong class="purple">must</strong> be a valid <code>VkImage</code> handle</p>
</li>
<li>
<p><a id="VUID-vkBindImageMemory-memory-parameter"></a> <code>memory</code> <strong class="purple">must</strong> be a valid <code>VkDeviceMemory</code> handle</p>
</li>
<li>
<p><a id="VUID-vkBindImageMemory-image-parent"></a> <code>image</code> <strong class="purple">must</strong> have been created, allocated, or retrieved from <code>device</code></p>
</li>
<li>
<p><a id="VUID-vkBindImageMemory-memory-parent"></a> <code>memory</code> <strong class="purple">must</strong> have been created, allocated, or retrieved from <code>device</code></p>
</li>
</ul>
</div>
</div>
</div>
<div class="sidebarblock">
<div class="content">
<div class="title">Host Synchronization</div>
<div class="ulist">
<ul>
<li>
<p>Host access to <code>image</code> <strong class="purple">must</strong> be externally synchronized</p>
</li>
</ul>
</div>
</div>
</div>
<div class="sidebarblock">
<div class="content">
<div class="title">Return Codes</div>
<div class="dlist">
<dl>
<dt class="hdlist1"><a href="#fundamentals-successcodes">Success</a></dt>
<dd>
<div class="ulist">
<ul>
<li>
<p><code>VK_SUCCESS</code></p>
</li>
</ul>
</div>
</dd>
<dt class="hdlist1"><a href="#fundamentals-errorcodes">Failure</a></dt>
<dd>
<div class="ulist">
<ul>
<li>
<p><code>VK_ERROR_OUT_OF_HOST_MEMORY</code></p>
</li>
<li>
<p><code>VK_ERROR_OUT_OF_DEVICE_MEMORY</code></p>
</li>
</ul>
</div>
</dd>
</dl>
</div>
</div>
</div>
</div>
<div class="sect3">
<h4 id="_see_also_12">See Also</h4>
<div class="paragraph">
<p><a href="#VkDevice">VkDevice</a>, <a href="#VkDeviceMemory">VkDeviceMemory</a>, <code>VkDeviceSize</code>, <a href="#VkImage">VkImage</a></p>
</div>
</div>
<div class="sect3">
<h4 id="_document_notes_12">Document Notes</h4>
<div class="paragraph">
<p>For more information, see the Vulkan Specification at URL</p>
</div>
<div class="paragraph">
<p><a href="https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#vkBindImageMemory" class="bare">https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#vkBindImageMemory</a></p>
</div>
<div class="paragraph">
<p>This page is extracted from the Vulkan Specification.
Fixes and changes should be made to the Specification, not directly.</p>
</div>
<div style="page-break-after: always;"></div>
</div>
</div>
<div class="sect2">
<h3 id="_vkbindimagememory23">vkBindImageMemory2(3)</h3>
<div class="sect3">
<h4 id="_name_13">Name</h4>
<div class="paragraph">
<p>vkBindImageMemory2 - Bind device memory to image objects</p>
</div>
</div>
<div class="sect3">
<h4 id="_c_specification_13">C Specification</h4>
<div class="paragraph">
<p>To attach memory to image objects for one or more images at a time, call:</p>
</div>
<div id="vkBindImageMemory2" class="listingblock">
<div class="content">
<pre class="highlight"><code class="language-c++" data-lang="c++">VkResult vkBindImageMemory2(
    VkDevice                                    device,
    uint32_t                                    bindInfoCount,
    const VkBindImageMemoryInfo*                pBindInfos);</code></pre>
</div>
</div>
<div class="paragraph">
<p>or the equivalent command</p>
</div>
<div id="vkBindImageMemory2KHR" class="listingblock">
<div class="content">
<pre class="highlight"><code class="language-c++" data-lang="c++">VkResult vkBindImageMemory2KHR(
    VkDevice                                    device,
    uint32_t                                    bindInfoCount,
    const VkBindImageMemoryInfo*                pBindInfos);</code></pre>
</div>
</div>
</div>
<div class="sect3">
<h4 id="_parameters_13">Parameters</h4>
<div class="ulist">
<ul>
<li>
<p><code>device</code> is the logical device that owns the images and memory.</p>
</li>
<li>
<p><code>bindInfoCount</code> is the number of elements in <code>pBindInfos</code>.</p>
</li>
<li>
<p><code>pBindInfos</code> is a pointer to an array of structures of type
<a href="#VkBindImageMemoryInfo">VkBindImageMemoryInfo</a>, describing images and memory to bind.</p>
</li>
</ul>
</div>
</div>
<div class="sect3">
<h4 id="_description_13">Description</h4>
<div class="paragraph">
<p>On some implementations, it <strong class="purple">may</strong> be more efficient to batch memory bindings
into a single command.</p>
</div>
<div class="sidebarblock">
<div class="content">
<div class="title">Valid Usage (Implicit)</div>
<div class="ulist">
<ul>
<li>
<p><a id="VUID-vkBindImageMemory2-device-parameter"></a> <code>device</code> <strong class="purple">must</strong> be a valid <code>VkDevice</code> handle</p>
</li>
<li>
<p><a id="VUID-vkBindImageMemory2-pBindInfos-parameter"></a> <code>pBindInfos</code> <strong class="purple">must</strong> be a valid pointer to an array of <code>bindInfoCount</code> valid <code>VkBindImageMemoryInfo</code> structures</p>
</li>
<li>
<p><a id="VUID-vkBindImageMemory2-bindInfoCount-arraylength"></a> <code>bindInfoCount</code> <strong class="purple">must</strong> be greater than <code>0</code></p>
</li>
</ul>
</div>
</div>
</div>
<div class="sidebarblock">
<div class="content">
<div class="title">Return Codes</div>
<div class="dlist">
<dl>
<dt class="hdlist1"><a href="#fundamentals-successcodes">Success</a></dt>
<dd>
<div class="ulist">
<ul>
<li>
<p><code>VK_SUCCESS</code></p>
</li>
</ul>
</div>
</dd>
<dt class="hdlist1"><a href="#fundamentals-errorcodes">Failure</a></dt>
<dd>
<div class="ulist">
<ul>
<li>
<p><code>VK_ERROR_OUT_OF_HOST_MEMORY</code></p>
</li>
<li>
<p><code>VK_ERROR_OUT_OF_DEVICE_MEMORY</code></p>
</li>
</ul>
</div>
</dd>
</dl>
</div>
</div>
</div>
</div>
<div class="sect3">
<h4 id="_see_also_13">See Also</h4>
<div class="paragraph">
<p><a href="#VkBindImageMemoryInfo">VkBindImageMemoryInfo</a>, <a href="#VkDevice">VkDevice</a></p>
</div>
</div>
<div class="sect3">
<h4 id="_document_notes_13">Document Notes</h4>
<div class="paragraph">
<p>For more information, see the Vulkan Specification at URL</p>
</div>
<div class="paragraph">
<p><a href="https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#vkBindImageMemory2" class="bare">https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#vkBindImageMemory2</a></p>
</div>
<div class="paragraph">
<p>This page is extracted from the Vulkan Specification.
Fixes and changes should be made to the Specification, not directly.</p>
</div>
<div style="page-break-after: always;"></div>
</div>
</div>
<div class="sect2">
<h3 id="_vkcmdbeginconditionalrenderingext3">vkCmdBeginConditionalRenderingEXT(3)</h3>
<div class="sect3">
<h4 id="_name_14">Name</h4>
<div class="paragraph">
<p>vkCmdBeginConditionalRenderingEXT - Define the beginning of a conditional rendering block</p>
</div>
</div>
<div class="sect3">
<h4 id="_c_specification_14">C Specification</h4>
<div class="paragraph">
<p>To begin conditional rendering, call:</p>
</div>
<div id="vkCmdBeginConditionalRenderingEXT" class="listingblock">
<div class="content">
<pre class="highlight"><code class="language-c++" data-lang="c++">void vkCmdBeginConditionalRenderingEXT(
    VkCommandBuffer                             commandBuffer,
    const VkConditionalRenderingBeginInfoEXT*   pConditionalRenderingBegin);</code></pre>
</div>
</div>
</div>
<div class="sect3">
<h4 id="_parameters_14">Parameters</h4>
<div class="ulist">
<ul>
<li>
<p><code>commandBuffer</code> is the command buffer into which this command will
be recorded.</p>
</li>
<li>
<p><code>pConditionalRenderingBegin</code> is a pointer to an instance of the
<a href="#VkConditionalRenderingBeginInfoEXT">VkConditionalRenderingBeginInfoEXT</a> structure specifying the
parameters of conditional rendering.</p>
</li>
</ul>
</div>
</div>
<div class="sect3">
<h4 id="_description_14">Description</h4>
<div class="sidebarblock">
<div class="content">
<div class="title">Valid Usage</div>
<div class="ulist">
<ul>
<li>
<p><a id="VUID-vkCmdBeginConditionalRenderingEXT-None-01980"></a>
Conditional rendering <strong class="purple">must</strong> not already be
<a href="vkspec.html#active-conditional-rendering">active</a></p>
</li>
</ul>
</div>
</div>
</div>
<div class="sidebarblock">
<div class="content">
<div class="title">Valid Usage (Implicit)</div>
<div class="ulist">
<ul>
<li>
<p><a id="VUID-vkCmdBeginConditionalRenderingEXT-commandBuffer-parameter"></a> <code>commandBuffer</code> <strong class="purple">must</strong> be a valid <code>VkCommandBuffer</code> handle</p>
</li>
<li>
<p><a id="VUID-vkCmdBeginConditionalRenderingEXT-pConditionalRenderingBegin-parameter"></a> <code>pConditionalRenderingBegin</code> <strong class="purple">must</strong> be a valid pointer to a valid <code>VkConditionalRenderingBeginInfoEXT</code> structure</p>
</li>
<li>
<p><a id="VUID-vkCmdBeginConditionalRenderingEXT-commandBuffer-recording"></a> <code>commandBuffer</code> <strong class="purple">must</strong> be in the <a href="#commandbuffers-lifecycle">recording state</a></p>
</li>
<li>
<p><a id="VUID-vkCmdBeginConditionalRenderingEXT-commandBuffer-cmdpool"></a> The <code>VkCommandPool</code> that <code>commandBuffer</code> was allocated from <strong class="purple">must</strong> support graphics, or compute operations</p>
</li>
</ul>
</div>
</div>
</div>
<div class="sidebarblock">
<div class="content">
<div class="title">Host Synchronization</div>
<div class="ulist">
<ul>
<li>
<p>Host access to <code>commandBuffer</code> <strong class="purple">must</strong> be externally synchronized</p>
</li>
<li>
<p>Host access to the <code>VkCommandPool</code> that <code>commandBuffer</code> was allocated from <strong class="purple">must</strong> be externally synchronized</p>
</li>
</ul>
</div>
</div>
</div>
<div class="sidebarblock">
<div class="content">
<div class="title">Command Properties</div>
<table class="tableblock frame-all grid-all stretch">
<colgroup>
<col style="width: 25%;">
<col style="width: 25%;">
<col style="width: 25%;">
<col style="width: 25%;">
</colgroup>
<thead>
<tr>
<th class="tableblock halign-left valign-top"><a href="#VkCommandBufferLevel">Command Buffer Levels</a></th>
<th class="tableblock halign-left valign-top"><a href="#vkCmdBeginRenderPass">Render Pass Scope</a></th>
<th class="tableblock halign-left valign-top"><a href="#VkQueueFlagBits">Supported Queue Types</a></th>
<th class="tableblock halign-left valign-top"><a href="#synchronization-pipeline-stages-types">Pipeline Type</a></th>
</tr>
</thead>
<tbody>
<tr>
<td class="tableblock halign-left valign-top"><p class="tableblock">Primary<br>
Secondary</p></td>
<td class="tableblock halign-left valign-top"><p class="tableblock">Both</p></td>
<td class="tableblock halign-left valign-top"><p class="tableblock">Graphics<br>
Compute</p></td>
<td class="tableblock halign-left valign-top"></td>
</tr>
</tbody>
</table>
</div>
</div>
</div>
<div class="sect3">
<h4 id="_see_also_14">See Also</h4>
<div class="paragraph">
<p><a href="#VkCommandBuffer">VkCommandBuffer</a>, <a href="#VkConditionalRenderingBeginInfoEXT">VkConditionalRenderingBeginInfoEXT</a></p>
</div>
</div>
<div class="sect3">
<h4 id="_document_notes_14">Document Notes</h4>
<div class="paragraph">
<p>For more information, see the Vulkan Specification at URL</p>
</div>
<div class="paragraph">
<p><a href="https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#vkCmdBeginConditionalRenderingEXT" class="bare">https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#vkCmdBeginConditionalRenderingEXT</a></p>
</div>
<div class="paragraph">
<p>This page is extracted from the Vulkan Specification.
Fixes and changes should be made to the Specification, not directly.</p>
</div>
<div style="page-break-after: always;"></div>
</div>
</div>
<div class="sect2">
<h3 id="_vkcmdbegindebugutilslabelext3">vkCmdBeginDebugUtilsLabelEXT(3)</h3>
<div class="sect3">
<h4 id="_name_15">Name</h4>
<div class="paragraph">
<p>vkCmdBeginDebugUtilsLabelEXT - Open a command buffer debug label region</p>
</div>
</div>
<div class="sect3">
<h4 id="_c_specification_15">C Specification</h4>
<div class="paragraph">
<p>A command buffer debug label region can be opened by calling:</p>
</div>
<div id="vkCmdBeginDebugUtilsLabelEXT" class="listingblock">
<div class="content">
<pre class="highlight"><code class="language-c++" data-lang="c++">void vkCmdBeginDebugUtilsLabelEXT(
    VkCommandBuffer                             commandBuffer,
    const VkDebugUtilsLabelEXT*                 pLabelInfo);</code></pre>
</div>
</div>
</div>
<div class="sect3">
<h4 id="_parameters_15">Parameters</h4>
<div class="ulist">
<ul>
<li>
<p><code>commandBuffer</code> is the command buffer into which the command is
recorded.</p>
</li>
<li>
<p><code>pLabelInfo</code> is a pointer to an instance of the
<a href="#VkDebugUtilsLabelEXT">VkDebugUtilsLabelEXT</a> structure specifying the parameters of the
label region to open.</p>
</li>
</ul>
</div>
</div>
<div class="sect3">
<h4 id="_description_15">Description</h4>
<div class="sidebarblock">
<div class="content">
<div class="title">Valid Usage (Implicit)</div>
<div class="ulist">
<ul>
<li>
<p><a id="VUID-vkCmdBeginDebugUtilsLabelEXT-commandBuffer-parameter"></a> <code>commandBuffer</code> <strong class="purple">must</strong> be a valid <code>VkCommandBuffer</code> handle</p>
</li>
<li>
<p><a id="VUID-vkCmdBeginDebugUtilsLabelEXT-pLabelInfo-parameter"></a> <code>pLabelInfo</code> <strong class="purple">must</strong> be a valid pointer to a valid <code>VkDebugUtilsLabelEXT</code> structure</p>
</li>
<li>
<p><a id="VUID-vkCmdBeginDebugUtilsLabelEXT-commandBuffer-recording"></a> <code>commandBuffer</code> <strong class="purple">must</strong> be in the <a href="#commandbuffers-lifecycle">recording state</a></p>
</li>
<li>
<p><a id="VUID-vkCmdBeginDebugUtilsLabelEXT-commandBuffer-cmdpool"></a> The <code>VkCommandPool</code> that <code>commandBuffer</code> was allocated from <strong class="purple">must</strong> support graphics, or compute operations</p>
</li>
</ul>
</div>
</div>
</div>
<div class="sidebarblock">
<div class="content">
<div class="title">Host Synchronization</div>
<div class="ulist">
<ul>
<li>
<p>Host access to the <code>VkCommandPool</code> that <code>commandBuffer</code> was allocated from <strong class="purple">must</strong> be externally synchronized</p>
</li>
</ul>
</div>
</div>
</div>
<div class="sidebarblock">
<div class="content">
<div class="title">Command Properties</div>
<table class="tableblock frame-all grid-all stretch">
<colgroup>
<col style="width: 25%;">
<col style="width: 25%;">
<col style="width: 25%;">
<col style="width: 25%;">
</colgroup>
<thead>
<tr>
<th class="tableblock halign-left valign-top"><a href="#VkCommandBufferLevel">Command Buffer Levels</a></th>
<th class="tableblock halign-left valign-top"><a href="#vkCmdBeginRenderPass">Render Pass Scope</a></th>
<th class="tableblock halign-left valign-top"><a href="#VkQueueFlagBits">Supported Queue Types</a></th>
<th class="tableblock halign-left valign-top"><a href="#synchronization-pipeline-stages-types">Pipeline Type</a></th>
</tr>
</thead>
<tbody>
<tr>
<td class="tableblock halign-left valign-top"><p class="tableblock">Primary<br>
Secondary</p></td>
<td class="tableblock halign-left valign-top"><p class="tableblock">Both</p></td>
<td class="tableblock halign-left valign-top"><p class="tableblock">Graphics<br>
Compute</p></td>
<td class="tableblock halign-left valign-top"></td>
</tr>
</tbody>
</table>
</div>
</div>
</div>
<div class="sect3">
<h4 id="_see_also_15">See Also</h4>
<div class="paragraph">
<p><a href="#VkCommandBuffer">VkCommandBuffer</a>, <a href="#VkDebugUtilsLabelEXT">VkDebugUtilsLabelEXT</a></p>
</div>
</div>
<div class="sect3">
<h4 id="_document_notes_15">Document Notes</h4>
<div class="paragraph">
<p>For more information, see the Vulkan Specification at URL</p>
</div>
<div class="paragraph">
<p><a href="https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#vkCmdBeginDebugUtilsLabelEXT" class="bare">https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#vkCmdBeginDebugUtilsLabelEXT</a></p>
</div>
<div class="paragraph">
<p>This page is extracted from the Vulkan Specification.
Fixes and changes should be made to the Specification, not directly.</p>
</div>
<div style="page-break-after: always;"></div>
</div>
</div>
<div class="sect2">
<h3 id="_vkcmdbeginquery3">vkCmdBeginQuery(3)</h3>
<div class="sect3">
<h4 id="_name_16">Name</h4>
<div class="paragraph">
<p>vkCmdBeginQuery - Begin a query</p>
</div>
</div>
<div class="sect3">
<h4 id="_c_specification_16">C Specification</h4>
<div class="paragraph">
<p>To begin a query, call:</p>
</div>
<div id="vkCmdBeginQuery" class="listingblock">
<div class="content">
<pre class="highlight"><code class="language-c++" data-lang="c++">void vkCmdBeginQuery(
    VkCommandBuffer                             commandBuffer,
    VkQueryPool                                 queryPool,
    uint32_t                                    query,
    VkQueryControlFlags                         flags);</code></pre>
</div>
</div>
</div>
<div class="sect3">
<h4 id="_parameters_16">Parameters</h4>
<div class="ulist">
<ul>
<li>
<p><code>commandBuffer</code> is the command buffer into which this command will
be recorded.</p>
</li>
<li>
<p><code>queryPool</code> is the query pool that will manage the results of the
query.</p>
</li>
<li>
<p><code>query</code> is the query index within the query pool that will contain
the results.</p>
</li>
<li>
<p><code>flags</code> is a bitmask of <a href="#VkQueryControlFlagBits">VkQueryControlFlagBits</a> specifying
constraints on the types of queries that <strong class="purple">can</strong> be performed.</p>
</li>
</ul>
</div>
</div>
<div class="sect3">
<h4 id="_description_16">Description</h4>
<div class="paragraph">
<p>If the <code>queryType</code> of the pool is <code>VK_QUERY_TYPE_OCCLUSION</code> and
<code>flags</code> contains <code>VK_QUERY_CONTROL_PRECISE_BIT</code>, an implementation
<strong class="purple">must</strong> return a result that matches the actual number of samples passed.
This is described in more detail in <a href="vkspec.html#queries-occlusion">Occlusion Queries</a>.</p>
</div>
<div id="queries-operation-active" class="paragraph">
<p>After beginning a query, that query is considered <em>active</em> within the
command buffer it was called in until that same query is ended.
Queries active in a primary command buffer when secondary command buffers
are executed are considered active for those secondary command buffers.</p>
</div>
<div class="sidebarblock">
<div class="content">
<div class="title">Valid Usage</div>
<div class="ulist">
<ul>
<li>
<p><a id="VUID-vkCmdBeginQuery-queryPool-01922"></a>
<code>queryPool</code> <strong class="purple">must</strong> have been created with a <code>queryType</code> that
differs from that of any queries that are
<a href="vkspec.html#queries-operation-active">active</a> within <code>commandBuffer</code></p>
</li>
<li>
<p><a id="VUID-vkCmdBeginQuery-None-00807"></a>
All queries used by the command <strong class="purple">must</strong> be unavailable</p>
</li>
<li>
<p><a id="VUID-vkCmdBeginQuery-queryType-00800"></a>
If the <a href="vkspec.html#features-occlusionQueryPrecise">precise occlusion queries</a>
feature is not enabled, or the <code>queryType</code> used to create
<code>queryPool</code> was not <code>VK_QUERY_TYPE_OCCLUSION</code>, <code>flags</code> <strong class="purple">must</strong>
not contain <code>VK_QUERY_CONTROL_PRECISE_BIT</code></p>
</li>
<li>
<p><a id="VUID-vkCmdBeginQuery-query-00802"></a>
<code>query</code> <strong class="purple">must</strong> be less than the number of queries in <code>queryPool</code></p>
</li>
<li>
<p><a id="VUID-vkCmdBeginQuery-queryType-00803"></a>
If the <code>queryType</code> used to create <code>queryPool</code> was
<code>VK_QUERY_TYPE_OCCLUSION</code>, the <code>VkCommandPool</code> that
<code>commandBuffer</code> was allocated from <strong class="purple">must</strong> support graphics operations</p>
</li>
<li>
<p><a id="VUID-vkCmdBeginQuery-queryType-00804"></a>
If the <code>queryType</code> used to create <code>queryPool</code> was
<code>VK_QUERY_TYPE_PIPELINE_STATISTICS</code> and any of the
<code>pipelineStatistics</code> indicate graphics operations, the
<code>VkCommandPool</code> that <code>commandBuffer</code> was allocated from <strong class="purple">must</strong>
support graphics operations</p>
</li>
<li>
<p><a id="VUID-vkCmdBeginQuery-queryType-00805"></a>
If the <code>queryType</code> used to create <code>queryPool</code> was
<code>VK_QUERY_TYPE_PIPELINE_STATISTICS</code> and any of the
<code>pipelineStatistics</code> indicate compute operations, the
<code>VkCommandPool</code> that <code>commandBuffer</code> was allocated from <strong class="purple">must</strong>
support compute operations</p>
</li>
<li>
<p><a id="VUID-vkCmdBeginQuery-commandBuffer-01885"></a>
<code>commandBuffer</code> <strong class="purple">must</strong> not be a protected command buffer</p>
</li>
<li>
<p><a id="VUID-vkCmdBeginQuery-query-00808"></a>
If <code>vkCmdBeginQuery</code> is called within a render pass instance, the
sum of <code>query</code> and the number of bits set in the current subpass&#8217;s
view mask <strong class="purple">must</strong> be less than or equal to the number of queries in
<code>queryPool</code></p>
</li>
<li>
<p><a id="VUID-vkCmdBeginQuery-queryType-02327"></a>
If the <code>queryType</code> used to create <code>queryPool</code> was
<code>VK_QUERY_TYPE_TRANSFORM_FEEDBACK_STREAM_EXT</code> the
<code>VkCommandPool</code> that <code>commandBuffer</code> was allocated from <strong class="purple">must</strong>
support graphics operations</p>
</li>
<li>
<p><a id="VUID-vkCmdBeginQuery-queryType-02328"></a>
If the <code>queryType</code> used to create <code>queryPool</code> was
<code>VK_QUERY_TYPE_TRANSFORM_FEEDBACK_STREAM_EXT</code> then
<code>VkPhysicalDeviceTransformFeedbackPropertiesEXT</code>::<code>transformFeedbackQueries</code>
<strong class="purple">must</strong> be supported</p>
</li>
</ul>
</div>
</div>
</div>
<div class="sidebarblock">
<div class="content">
<div class="title">Valid Usage (Implicit)</div>
<div class="ulist">
<ul>
<li>
<p><a id="VUID-vkCmdBeginQuery-commandBuffer-parameter"></a> <code>commandBuffer</code> <strong class="purple">must</strong> be a valid <code>VkCommandBuffer</code> handle</p>
</li>
<li>
<p><a id="VUID-vkCmdBeginQuery-queryPool-parameter"></a> <code>queryPool</code> <strong class="purple">must</strong> be a valid <code>VkQueryPool</code> handle</p>
</li>
<li>
<p><a id="VUID-vkCmdBeginQuery-flags-parameter"></a> <code>flags</code> <strong class="purple">must</strong> be a valid combination of <a href="#VkQueryControlFlagBits">VkQueryControlFlagBits</a> values</p>
</li>
<li>
<p><a id="VUID-vkCmdBeginQuery-commandBuffer-recording"></a> <code>commandBuffer</code> <strong class="purple">must</strong> be in the <a href="#commandbuffers-lifecycle">recording state</a></p>
</li>
<li>
<p><a id="VUID-vkCmdBeginQuery-commandBuffer-cmdpool"></a> The <code>VkCommandPool</code> that <code>commandBuffer</code> was allocated from <strong class="purple">must</strong> support graphics, or compute operations</p>
</li>
<li>
<p><a id="VUID-vkCmdBeginQuery-commonparent"></a> Both of <code>commandBuffer</code>, and <code>queryPool</code> <strong class="purple">must</strong> have been created, allocated, or retrieved from the same <code>VkDevice</code></p>
</li>
</ul>
</div>
</div>
</div>
<div class="sidebarblock">
<div class="content">
<div class="title">Host Synchronization</div>
<div class="ulist">
<ul>
<li>
<p>Host access to <code>commandBuffer</code> <strong class="purple">must</strong> be externally synchronized</p>
</li>
<li>
<p>Host access to the <code>VkCommandPool</code> that <code>commandBuffer</code> was allocated from <strong class="purple">must</strong> be externally synchronized</p>
</li>
</ul>
</div>
</div>
</div>
<div class="sidebarblock">
<div class="content">
<div class="title">Command Properties</div>
<table class="tableblock frame-all grid-all stretch">
<colgroup>
<col style="width: 25%;">
<col style="width: 25%;">
<col style="width: 25%;">
<col style="width: 25%;">
</colgroup>
<thead>
<tr>
<th class="tableblock halign-left valign-top"><a href="#VkCommandBufferLevel">Command Buffer Levels</a></th>
<th class="tableblock halign-left valign-top"><a href="#vkCmdBeginRenderPass">Render Pass Scope</a></th>
<th class="tableblock halign-left valign-top"><a href="#VkQueueFlagBits">Supported Queue Types</a></th>
<th class="tableblock halign-left valign-top"><a href="#synchronization-pipeline-stages-types">Pipeline Type</a></th>
</tr>
</thead>
<tbody>
<tr>
<td class="tableblock halign-left valign-top"><p class="tableblock">Primary<br>
Secondary</p></td>
<td class="tableblock halign-left valign-top"><p class="tableblock">Both</p></td>
<td class="tableblock halign-left valign-top"><p class="tableblock">Graphics<br>
Compute</p></td>
<td class="tableblock halign-left valign-top"></td>
</tr>
</tbody>
</table>
</div>
</div>
</div>
<div class="sect3">
<h4 id="_see_also_16">See Also</h4>
<div class="paragraph">
<p><a href="#VkCommandBuffer">VkCommandBuffer</a>, <a href="#VkQueryControlFlags">VkQueryControlFlags</a>, <a href="#VkQueryPool">VkQueryPool</a></p>
</div>
</div>
<div class="sect3">
<h4 id="_document_notes_16">Document Notes</h4>
<div class="paragraph">
<p>For more information, see the Vulkan Specification at URL</p>
</div>
<div class="paragraph">
<p><a href="https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#vkCmdBeginQuery" class="bare">https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#vkCmdBeginQuery</a></p>
</div>
<div class="paragraph">
<p>This page is extracted from the Vulkan Specification.
Fixes and changes should be made to the Specification, not directly.</p>
</div>
<div style="page-break-after: always;"></div>
</div>
</div>
<div class="sect2">
<h3 id="_vkcmdbeginqueryindexedext3">vkCmdBeginQueryIndexedEXT(3)</h3>
<div class="sect3">
<h4 id="_name_17">Name</h4>
<div class="paragraph">
<p>vkCmdBeginQueryIndexedEXT - Begin an indexed query</p>
</div>
</div>
<div class="sect3">
<h4 id="_c_specification_17">C Specification</h4>
<div class="paragraph">
<p>To begin an indexed query, call:</p>
</div>
<div id="vkCmdBeginQueryIndexedEXT" class="listingblock">
<div class="content">
<pre class="highlight"><code class="language-c++" data-lang="c++">void vkCmdBeginQueryIndexedEXT(
    VkCommandBuffer                             commandBuffer,
    VkQueryPool                                 queryPool,
    uint32_t                                    query,
    VkQueryControlFlags                         flags,
    uint32_t                                    index);</code></pre>
</div>
</div>
</div>
<div class="sect3">
<h4 id="_parameters_17">Parameters</h4>
<div class="ulist">
<ul>
<li>
<p><code>commandBuffer</code> is the command buffer into which this command will
be recorded.</p>
</li>
<li>
<p><code>queryPool</code> is the query pool that will manage the results of the
query.</p>
</li>
<li>
<p><code>query</code> is the query index within the query pool that will contain
the results.</p>
</li>
<li>
<p><code>flags</code> is a bitmask of <a href="#VkQueryControlFlagBits">VkQueryControlFlagBits</a> specifying
constraints on the types of queries that <strong class="purple">can</strong> be performed.</p>
</li>
<li>
<p><code>index</code> is the query type specific index.
When the query type is <code>VK_QUERY_TYPE_TRANSFORM_FEEDBACK_STREAM_EXT</code>
the index represents the vertex stream.</p>
</li>
</ul>
</div>
</div>
<div class="sect3">
<h4 id="_description_17">Description</h4>
<div class="paragraph">
<p>The <code>vkCmdBeginQueryIndexedEXT</code> command operates the same as the
<a href="#vkCmdBeginQuery">vkCmdBeginQuery</a> command, except that it also accepts a query type
specific <code>index</code> parameter.</p>
</div>
<div class="sidebarblock">
<div class="content">
<div class="title">Valid Usage</div>
<div class="ulist">
<ul>
<li>
<p><a id="VUID-vkCmdBeginQueryIndexedEXT-queryPool-02329"></a>
<code>queryPool</code> <strong class="purple">must</strong> have been created with a <code>queryType</code> that
differs from that of any queries that are
<a href="vkspec.html#queries-operation-active">active</a> within <code>commandBuffer</code></p>
</li>
<li>
<p><a id="VUID-vkCmdBeginQueryIndexedEXT-None-02330"></a>
All queries used by the command <strong class="purple">must</strong> be unavailable</p>
</li>
<li>
<p><a id="VUID-vkCmdBeginQueryIndexedEXT-queryType-02331"></a>
If the <a href="vkspec.html#features-occlusionQueryPrecise">precise occlusion queries</a>
feature is not enabled, or the <code>queryType</code> used to create
<code>queryPool</code> was not <code>VK_QUERY_TYPE_OCCLUSION</code>, <code>flags</code> <strong class="purple">must</strong>
not contain <code>VK_QUERY_CONTROL_PRECISE_BIT</code></p>
</li>
<li>
<p><a id="VUID-vkCmdBeginQueryIndexedEXT-query-02332"></a>
<code>query</code> <strong class="purple">must</strong> be less than the number of queries in <code>queryPool</code></p>
</li>
<li>
<p><a id="VUID-vkCmdBeginQueryIndexedEXT-queryType-02333"></a>
If the <code>queryType</code> used to create <code>queryPool</code> was
<code>VK_QUERY_TYPE_OCCLUSION</code>, the <code>VkCommandPool</code> that
<code>commandBuffer</code> was allocated from <strong class="purple">must</strong> support graphics operations</p>
</li>
<li>
<p><a id="VUID-vkCmdBeginQueryIndexedEXT-queryType-02334"></a>
If the <code>queryType</code> used to create <code>queryPool</code> was
<code>VK_QUERY_TYPE_PIPELINE_STATISTICS</code> and any of the
<code>pipelineStatistics</code> indicate graphics operations, the
<code>VkCommandPool</code> that <code>commandBuffer</code> was allocated from <strong class="purple">must</strong>
support graphics operations</p>
</li>
<li>
<p><a id="VUID-vkCmdBeginQueryIndexedEXT-queryType-02335"></a>
If the <code>queryType</code> used to create <code>queryPool</code> was
<code>VK_QUERY_TYPE_PIPELINE_STATISTICS</code> and any of the
<code>pipelineStatistics</code> indicate compute operations, the
<code>VkCommandPool</code> that <code>commandBuffer</code> was allocated from <strong class="purple">must</strong>
support compute operations</p>
</li>
<li>
<p><a id="VUID-vkCmdBeginQueryIndexedEXT-commandBuffer-02336"></a>
<code>commandBuffer</code> <strong class="purple">must</strong> not be a protected command buffer</p>
</li>
<li>
<p><a id="VUID-vkCmdBeginQueryIndexedEXT-query-02337"></a>
If <code>vkCmdBeginQuery</code> is called within a render pass instance, the
sum of <code>query</code> and the number of bits set in the current subpass&#8217;s
view mask <strong class="purple">must</strong> be less than or equal to the number of queries in
<code>queryPool</code></p>
</li>
<li>
<p><a id="VUID-vkCmdBeginQueryIndexedEXT-queryType-02338"></a>
If the <code>queryType</code> used to create <code>queryPool</code> was
<code>VK_QUERY_TYPE_TRANSFORM_FEEDBACK_STREAM_EXT</code> the
<code>VkCommandPool</code> that <code>commandBuffer</code> was allocated from <strong class="purple">must</strong>
support graphics operations</p>
</li>
<li>
<p><a id="VUID-vkCmdBeginQueryIndexedEXT-queryType-02339"></a>
If the <code>queryType</code> used to create <code>queryPool</code> was
<code>VK_QUERY_TYPE_TRANSFORM_FEEDBACK_STREAM_EXT</code> the <code>index</code>
parameter <strong class="purple">must</strong> be less than
<code>VkPhysicalDeviceTransformFeedbackPropertiesEXT</code>::<code>maxTransformFeedbackStreams</code></p>
</li>
<li>
<p><a id="VUID-vkCmdBeginQueryIndexedEXT-queryType-02340"></a>
If the <code>queryType</code> used to create <code>queryPool</code> was not
<code>VK_QUERY_TYPE_TRANSFORM_FEEDBACK_STREAM_EXT</code> the <code>index</code> <strong class="purple">must</strong>
be zero</p>
</li>
<li>
<p><a id="VUID-vkCmdBeginQueryIndexedEXT-queryType-02341"></a>
If the <code>queryType</code> used to create <code>queryPool</code> was
<code>VK_QUERY_TYPE_TRANSFORM_FEEDBACK_STREAM_EXT</code> then
<code>VkPhysicalDeviceTransformFeedbackPropertiesEXT</code>::<code>transformFeedbackQueries</code>
<strong class="purple">must</strong> be supported</p>
</li>
</ul>
</div>
</div>
</div>
<div class="sidebarblock">
<div class="content">
<div class="title">Valid Usage (Implicit)</div>
<div class="ulist">
<ul>
<li>
<p><a id="VUID-vkCmdBeginQueryIndexedEXT-commandBuffer-parameter"></a> <code>commandBuffer</code> <strong class="purple">must</strong> be a valid <code>VkCommandBuffer</code> handle</p>
</li>
<li>
<p><a id="VUID-vkCmdBeginQueryIndexedEXT-queryPool-parameter"></a> <code>queryPool</code> <strong class="purple">must</strong> be a valid <code>VkQueryPool</code> handle</p>
</li>
<li>
<p><a id="VUID-vkCmdBeginQueryIndexedEXT-flags-parameter"></a> <code>flags</code> <strong class="purple">must</strong> be a valid combination of <a href="#VkQueryControlFlagBits">VkQueryControlFlagBits</a> values</p>
</li>
<li>
<p><a id="VUID-vkCmdBeginQueryIndexedEXT-commandBuffer-recording"></a> <code>commandBuffer</code> <strong class="purple">must</strong> be in the <a href="#commandbuffers-lifecycle">recording state</a></p>
</li>
<li>
<p><a id="VUID-vkCmdBeginQueryIndexedEXT-commandBuffer-cmdpool"></a> The <code>VkCommandPool</code> that <code>commandBuffer</code> was allocated from <strong class="purple">must</strong> support graphics, or compute operations</p>
</li>
<li>
<p><a id="VUID-vkCmdBeginQueryIndexedEXT-commonparent"></a> Both of <code>commandBuffer</code>, and <code>queryPool</code> <strong class="purple">must</strong> have been created, allocated, or retrieved from the same <code>VkDevice</code></p>
</li>
</ul>
</div>
</div>
</div>
<div class="sidebarblock">
<div class="content">
<div class="title">Host Synchronization</div>
<div class="ulist">
<ul>
<li>
<p>Host access to <code>commandBuffer</code> <strong class="purple">must</strong> be externally synchronized</p>
</li>
<li>
<p>Host access to the <code>VkCommandPool</code> that <code>commandBuffer</code> was allocated from <strong class="purple">must</strong> be externally synchronized</p>
</li>
</ul>
</div>
</div>
</div>
<div class="sidebarblock">
<div class="content">
<div class="title">Command Properties</div>
<table class="tableblock frame-all grid-all stretch">
<colgroup>
<col style="width: 25%;">
<col style="width: 25%;">
<col style="width: 25%;">
<col style="width: 25%;">
</colgroup>
<thead>
<tr>
<th class="tableblock halign-left valign-top"><a href="#VkCommandBufferLevel">Command Buffer Levels</a></th>
<th class="tableblock halign-left valign-top"><a href="#vkCmdBeginRenderPass">Render Pass Scope</a></th>
<th class="tableblock halign-left valign-top"><a href="#VkQueueFlagBits">Supported Queue Types</a></th>
<th class="tableblock halign-left valign-top"><a href="#synchronization-pipeline-stages-types">Pipeline Type</a></th>
</tr>
</thead>
<tbody>
<tr>
<td class="tableblock halign-left valign-top"><p class="tableblock">Primary<br>
Secondary</p></td>
<td class="tableblock halign-left valign-top"><p class="tableblock">Both</p></td>
<td class="tableblock halign-left valign-top"><p class="tableblock">Graphics<br>
Compute</p></td>
<td class="tableblock halign-left valign-top"></td>
</tr>
</tbody>
</table>
</div>
</div>
</div>
<div class="sect3">
<h4 id="_see_also_17">See Also</h4>
<div class="paragraph">
<p><a href="#VkCommandBuffer">VkCommandBuffer</a>, <a href="#VkQueryControlFlags">VkQueryControlFlags</a>, <a href="#VkQueryPool">VkQueryPool</a></p>
</div>
</div>
<div class="sect3">
<h4 id="_document_notes_17">Document Notes</h4>
<div class="paragraph">
<p>For more information, see the Vulkan Specification at URL</p>
</div>
<div class="paragraph">
<p><a href="https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#vkCmdBeginQueryIndexedEXT" class="bare">https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#vkCmdBeginQueryIndexedEXT</a></p>
</div>
<div class="paragraph">
<p>This page is extracted from the Vulkan Specification.
Fixes and changes should be made to the Specification, not directly.</p>
</div>
<div style="page-break-after: always;"></div>
</div>
</div>
<div class="sect2">
<h3 id="_vkcmdbeginrenderpass3">vkCmdBeginRenderPass(3)</h3>
<div class="sect3">
<h4 id="_name_18">Name</h4>
<div class="paragraph">
<p>vkCmdBeginRenderPass - Begin a new render pass</p>
</div>
</div>
<div class="sect3">
<h4 id="_c_specification_18">C Specification</h4>
<div class="paragraph">
<p>To begin a render pass instance, call:</p>
</div>
<div id="vkCmdBeginRenderPass" class="listingblock">
<div class="content">
<pre class="highlight"><code class="language-c++" data-lang="c++">void vkCmdBeginRenderPass(
    VkCommandBuffer                             commandBuffer,
    const VkRenderPassBeginInfo*                pRenderPassBegin,
    VkSubpassContents                           contents);</code></pre>
</div>
</div>
</div>
<div class="sect3">
<h4 id="_parameters_18">Parameters</h4>
<div class="ulist">
<ul>
<li>
<p><code>commandBuffer</code> is the command buffer in which to record the
command.</p>
</li>
<li>
<p><code>pRenderPassBegin</code> is a pointer to a <a href="#VkRenderPassBeginInfo">VkRenderPassBeginInfo</a>
structure (defined below) which specifies the render pass to begin an
instance of, and the framebuffer the instance uses.</p>
</li>
<li>
<p><code>contents</code> is a <a href="#VkSubpassContents">VkSubpassContents</a> value specifying how the
commands in the first subpass will be provided.</p>
</li>
</ul>
</div>
</div>
<div class="sect3">
<h4 id="_description_18">Description</h4>
<div class="paragraph">
<p>After beginning a render pass instance, the command buffer is ready to
record the commands for the first subpass of that render pass.</p>
</div>
<div class="sidebarblock">
<div class="content">
<div class="title">Valid Usage</div>
<div class="ulist">
<ul>
<li>
<p><a id="VUID-vkCmdBeginRenderPass-initialLayout-00895"></a>
If any of the <code>initialLayout</code> or <code>finalLayout</code> member of the
<code>VkAttachmentDescription</code> structures or the <code>layout</code> member of
the <code>VkAttachmentReference</code> structures specified when creating the
render pass specified in the <code>renderPass</code> member of
<code>pRenderPassBegin</code> is <code>VK_IMAGE_LAYOUT_COLOR_ATTACHMENT_OPTIMAL</code>
then the corresponding attachment image view of the framebuffer
specified in the <code>framebuffer</code> member of <code>pRenderPassBegin</code>
<strong class="purple">must</strong> have been created with a <code>usage</code> value including
<code>VK_IMAGE_USAGE_COLOR_ATTACHMENT_BIT</code></p>
</li>
<li>
<p><a id="VUID-vkCmdBeginRenderPass-initialLayout-01758"></a>
If any of the <code>initialLayout</code> or <code>finalLayout</code> member of the
<code>VkAttachmentDescription</code> structures or the <code>layout</code> member of
the <code>VkAttachmentReference</code> structures specified when creating the
render pass specified in the <code>renderPass</code> member of
<code>pRenderPassBegin</code> is
<code>VK_IMAGE_LAYOUT_DEPTH_READ_ONLY_STENCIL_ATTACHMENT_OPTIMAL</code>,
<code>VK_IMAGE_LAYOUT_DEPTH_ATTACHMENT_STENCIL_READ_ONLY_OPTIMAL</code>,
<code>VK_IMAGE_LAYOUT_DEPTH_STENCIL_ATTACHMENT_OPTIMAL</code>, or
<code>VK_IMAGE_LAYOUT_DEPTH_STENCIL_READ_ONLY_OPTIMAL</code> then the
corresponding attachment image view of the framebuffer specified in the
<code>framebuffer</code> member of <code>pRenderPassBegin</code> <strong class="purple">must</strong> have been
created with a <code>usage</code> value including
<code>VK_IMAGE_USAGE_DEPTH_STENCIL_ATTACHMENT_BIT</code></p>
</li>
<li>
<p><a id="VUID-vkCmdBeginRenderPass-initialLayout-00897"></a>
If any of the <code>initialLayout</code> or <code>finalLayout</code> member of the
<code>VkAttachmentDescription</code> structures or the <code>layout</code> member of
the <code>VkAttachmentReference</code> structures specified when creating the
render pass specified in the <code>renderPass</code> member of
<code>pRenderPassBegin</code> is <code>VK_IMAGE_LAYOUT_SHADER_READ_ONLY_OPTIMAL</code>
then the corresponding attachment image view of the framebuffer
specified in the <code>framebuffer</code> member of <code>pRenderPassBegin</code>
<strong class="purple">must</strong> have been created with a <code>usage</code> value including
<code>VK_IMAGE_USAGE_SAMPLED_BIT</code> or
<code>VK_IMAGE_USAGE_INPUT_ATTACHMENT_BIT</code></p>
</li>
<li>
<p><a id="VUID-vkCmdBeginRenderPass-initialLayout-00898"></a>
If any of the <code>initialLayout</code> or <code>finalLayout</code> member of the
<code>VkAttachmentDescription</code> structures or the <code>layout</code> member of
the <code>VkAttachmentReference</code> structures specified when creating the
render pass specified in the <code>renderPass</code> member of
<code>pRenderPassBegin</code> is <code>VK_IMAGE_LAYOUT_TRANSFER_SRC_OPTIMAL</code>
then the corresponding attachment image view of the framebuffer
specified in the <code>framebuffer</code> member of <code>pRenderPassBegin</code>
<strong class="purple">must</strong> have been created with a <code>usage</code> value including
<code>VK_IMAGE_USAGE_TRANSFER_SRC_BIT</code></p>
</li>
<li>
<p><a id="VUID-vkCmdBeginRenderPass-initialLayout-00899"></a>
If any of the <code>initialLayout</code> or <code>finalLayout</code> member of the
<code>VkAttachmentDescription</code> structures or the <code>layout</code> member of
the <code>VkAttachmentReference</code> structures specified when creating the
render pass specified in the <code>renderPass</code> member of
<code>pRenderPassBegin</code> is <code>VK_IMAGE_LAYOUT_TRANSFER_DST_OPTIMAL</code>
then the corresponding attachment image view of the framebuffer
specified in the <code>framebuffer</code> member of <code>pRenderPassBegin</code>
<strong class="purple">must</strong> have been created with a <code>usage</code> value including
<code>VK_IMAGE_USAGE_TRANSFER_DST_BIT</code></p>
</li>
<li>
<p><a id="VUID-vkCmdBeginRenderPass-initialLayout-00900"></a>
If any of the <code>initialLayout</code> members of the
<code>VkAttachmentDescription</code> structures specified when creating the
render pass specified in the <code>renderPass</code> member of
<code>pRenderPassBegin</code> is not <code>VK_IMAGE_LAYOUT_UNDEFINED</code>, then each
such <code>initialLayout</code> <strong class="purple">must</strong> be equal to the current layout of the
corresponding attachment image subresource of the framebuffer specified
in the <code>framebuffer</code> member of <code>pRenderPassBegin</code></p>
</li>
<li>
<p><a id="VUID-vkCmdBeginRenderPass-srcStageMask-00901"></a>
The <code>srcStageMask</code> and <code>dstStageMask</code> members of any element of
the <code>pDependencies</code> member of <a href="#VkRenderPassCreateInfo">VkRenderPassCreateInfo</a> used to
create <code>renderPass</code> <strong class="purple">must</strong> be supported by the capabilities of the
queue family identified by the <code>queueFamilyIndex</code> member of the
<a href="#VkCommandPoolCreateInfo">VkCommandPoolCreateInfo</a> used to create the command pool which
<code>commandBuffer</code> was allocated from</p>
</li>
<li>
<p><a id="VUID-vkCmdBeginRenderPass-framebuffer-02532"></a>
For any attachment in <code>framebuffer</code> that is used by <code>renderPass</code>
and is bound to memory locations that are also bound to another
attachment used by <code>renderPass</code>, and if at least one of those uses
causes either attachment to be written to, both attachments <strong class="purple">must</strong> have
had the <code>VK_ATTACHMENT_DESCRIPTION_MAY_ALIAS_BIT</code> set</p>
</li>
</ul>
</div>
</div>
</div>
<div class="sidebarblock">
<div class="content">
<div class="title">Valid Usage (Implicit)</div>
<div class="ulist">
<ul>
<li>
<p><a id="VUID-vkCmdBeginRenderPass-commandBuffer-parameter"></a> <code>commandBuffer</code> <strong class="purple">must</strong> be a valid <code>VkCommandBuffer</code> handle</p>
</li>
<li>
<p><a id="VUID-vkCmdBeginRenderPass-pRenderPassBegin-parameter"></a> <code>pRenderPassBegin</code> <strong class="purple">must</strong> be a valid pointer to a valid <code>VkRenderPassBeginInfo</code> structure</p>
</li>
<li>
<p><a id="VUID-vkCmdBeginRenderPass-contents-parameter"></a> <code>contents</code> <strong class="purple">must</strong> be a valid <a href="#VkSubpassContents">VkSubpassContents</a> value</p>
</li>
<li>
<p><a id="VUID-vkCmdBeginRenderPass-commandBuffer-recording"></a> <code>commandBuffer</code> <strong class="purple">must</strong> be in the <a href="#commandbuffers-lifecycle">recording state</a></p>
</li>
<li>
<p><a id="VUID-vkCmdBeginRenderPass-commandBuffer-cmdpool"></a> The <code>VkCommandPool</code> that <code>commandBuffer</code> was allocated from <strong class="purple">must</strong> support graphics operations</p>
</li>
<li>
<p><a id="VUID-vkCmdBeginRenderPass-renderpass"></a> This command <strong class="purple">must</strong> only be called outside of a render pass instance</p>
</li>
<li>
<p><a id="VUID-vkCmdBeginRenderPass-bufferlevel"></a> <code>commandBuffer</code> <strong class="purple">must</strong> be a primary <code>VkCommandBuffer</code></p>
</li>
</ul>
</div>
</div>
</div>
<div class="sidebarblock">
<div class="content">
<div class="title">Host Synchronization</div>
<div class="ulist">
<ul>
<li>
<p>Host access to <code>commandBuffer</code> <strong class="purple">must</strong> be externally synchronized</p>
</li>
<li>
<p>Host access to the <code>VkCommandPool</code> that <code>commandBuffer</code> was allocated from <strong class="purple">must</strong> be externally synchronized</p>
</li>
</ul>
</div>
</div>
</div>
<div class="sidebarblock">
<div class="content">
<div class="title">Command Properties</div>
<table class="tableblock frame-all grid-all stretch">
<colgroup>
<col style="width: 25%;">
<col style="width: 25%;">
<col style="width: 25%;">
<col style="width: 25%;">
</colgroup>
<thead>
<tr>
<th class="tableblock halign-left valign-top"><a href="#VkCommandBufferLevel">Command Buffer Levels</a></th>
<th class="tableblock halign-left valign-top"><a href="#vkCmdBeginRenderPass">Render Pass Scope</a></th>
<th class="tableblock halign-left valign-top"><a href="#VkQueueFlagBits">Supported Queue Types</a></th>
<th class="tableblock halign-left valign-top"><a href="#synchronization-pipeline-stages-types">Pipeline Type</a></th>
</tr>
</thead>
<tbody>
<tr>
<td class="tableblock halign-left valign-top"><p class="tableblock">Primary</p></td>
<td class="tableblock halign-left valign-top"><p class="tableblock">Outside</p></td>
<td class="tableblock halign-left valign-top"><p class="tableblock">Graphics</p></td>
<td class="tableblock halign-left valign-top"><p class="tableblock">Graphics</p></td>
</tr>
</tbody>
</table>
</div>
</div>
</div>
<div class="sect3">
<h4 id="_see_also_18">See Also</h4>
<div class="paragraph">
<p><a href="#VkCommandBuffer">VkCommandBuffer</a>, <a href="#VkRenderPassBeginInfo">VkRenderPassBeginInfo</a>, <a href="#VkSubpassContents">VkSubpassContents</a></p>
</div>
</div>
<div class="sect3">
<h4 id="_document_notes_18">Document Notes</h4>
<div class="paragraph">
<p>For more information, see the Vulkan Specification at URL</p>
</div>
<div class="paragraph">
<p><a href="https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#vkCmdBeginRenderPass" class="bare">https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#vkCmdBeginRenderPass</a></p>
</div>
<div class="paragraph">
<p>This page is extracted from the Vulkan Specification.
Fixes and changes should be made to the Specification, not directly.</p>
</div>
<div style="page-break-after: always;"></div>
</div>
</div>
<div class="sect2">
<h3 id="_vkcmdbeginrenderpass2khr3">vkCmdBeginRenderPass2KHR(3)</h3>
<div class="sect3">
<h4 id="_name_19">Name</h4>
<div class="paragraph">
<p>vkCmdBeginRenderPass2KHR - Begin a new render pass</p>
</div>
</div>
<div class="sect3">
<h4 id="_c_specification_19">C Specification</h4>
<div class="paragraph">
<p>Alternatively to begin a render pass, call:</p>
</div>
<div id="vkCmdBeginRenderPass2KHR" class="listingblock">
<div class="content">
<pre class="highlight"><code class="language-c++" data-lang="c++">void vkCmdBeginRenderPass2KHR(
    VkCommandBuffer                             commandBuffer,
    const VkRenderPassBeginInfo*                pRenderPassBegin,
    const VkSubpassBeginInfoKHR*                pSubpassBeginInfo);</code></pre>
</div>
</div>
</div>
<div class="sect3">
<h4 id="_parameters_19">Parameters</h4>
<div class="ulist">
<ul>
<li>
<p><code>commandBuffer</code> is the command buffer in which to record the
command.</p>
</li>
<li>
<p><code>pRenderPassBegin</code> is a pointer to a <a href="#VkRenderPassBeginInfo">VkRenderPassBeginInfo</a>
structure (defined below) which indicates the render pass to begin an
instance of, and the framebuffer the instance uses.</p>
</li>
<li>
<p><code>pSubpassBeginInfo</code> is a pointer to a <a href="#VkSubpassBeginInfoKHR">VkSubpassBeginInfoKHR</a>
structure which contains information about the subpass which is about to
begin rendering.</p>
</li>
</ul>
</div>
</div>
<div class="sect3">
<h4 id="_description_19">Description</h4>
<div class="paragraph">
<p>After beginning a render pass instance, the command buffer is ready to
record the commands for the first subpass of that render pass.</p>
</div>
<div class="sidebarblock">
<div class="content">
<div class="title">Valid Usage</div>
<div class="ulist">
<ul>
<li>
<p><a id="VUID-vkCmdBeginRenderPass2KHR-initialLayout-03094"></a>
If any of the <code>initialLayout</code> or <code>finalLayout</code> member of the
<code>VkAttachmentDescription</code> structures or the <code>layout</code> member of
the <code>VkAttachmentReference</code> structures specified when creating the
render pass specified in the <code>renderPass</code> member of
<code>pRenderPassBegin</code> is <code>VK_IMAGE_LAYOUT_COLOR_ATTACHMENT_OPTIMAL</code>
then the corresponding attachment image view of the framebuffer
specified in the <code>framebuffer</code> member of <code>pRenderPassBegin</code>
<strong class="purple">must</strong> have been created with a <code>usage</code> value including
<code>VK_IMAGE_USAGE_COLOR_ATTACHMENT_BIT</code></p>
</li>
<li>
<p><a id="VUID-vkCmdBeginRenderPass2KHR-initialLayout-03096"></a>
If any of the <code>initialLayout</code> or <code>finalLayout</code> member of the
<code>VkAttachmentDescription</code> structures or the <code>layout</code> member of
the <code>VkAttachmentReference</code> structures specified when creating the
render pass specified in the <code>renderPass</code> member of
<code>pRenderPassBegin</code> is
<code>VK_IMAGE_LAYOUT_DEPTH_READ_ONLY_STENCIL_ATTACHMENT_OPTIMAL</code>,
<code>VK_IMAGE_LAYOUT_DEPTH_ATTACHMENT_STENCIL_READ_ONLY_OPTIMAL</code>,
<code>VK_IMAGE_LAYOUT_DEPTH_STENCIL_ATTACHMENT_OPTIMAL</code>, or
<code>VK_IMAGE_LAYOUT_DEPTH_STENCIL_READ_ONLY_OPTIMAL</code> then the
corresponding attachment image view of the framebuffer specified in the
<code>framebuffer</code> member of <code>pRenderPassBegin</code> <strong class="purple">must</strong> have been
created with a <code>usage</code> value including
<code>VK_IMAGE_USAGE_DEPTH_STENCIL_ATTACHMENT_BIT</code></p>
</li>
<li>
<p><a id="VUID-vkCmdBeginRenderPass2KHR-initialLayout-03097"></a>
If any of the <code>initialLayout</code> or <code>finalLayout</code> member of the
<code>VkAttachmentDescription</code> structures or the <code>layout</code> member of
the <code>VkAttachmentReference</code> structures specified when creating the
render pass specified in the <code>renderPass</code> member of
<code>pRenderPassBegin</code> is <code>VK_IMAGE_LAYOUT_SHADER_READ_ONLY_OPTIMAL</code>
then the corresponding attachment image view of the framebuffer
specified in the <code>framebuffer</code> member of <code>pRenderPassBegin</code>
<strong class="purple">must</strong> have been created with a <code>usage</code> value including
<code>VK_IMAGE_USAGE_SAMPLED_BIT</code> or
<code>VK_IMAGE_USAGE_INPUT_ATTACHMENT_BIT</code></p>
</li>
<li>
<p><a id="VUID-vkCmdBeginRenderPass2KHR-initialLayout-03098"></a>
If any of the <code>initialLayout</code> or <code>finalLayout</code> member of the
<code>VkAttachmentDescription</code> structures or the <code>layout</code> member of
the <code>VkAttachmentReference</code> structures specified when creating the
render pass specified in the <code>renderPass</code> member of
<code>pRenderPassBegin</code> is <code>VK_IMAGE_LAYOUT_TRANSFER_SRC_OPTIMAL</code>
then the corresponding attachment image view of the framebuffer
specified in the <code>framebuffer</code> member of <code>pRenderPassBegin</code>
<strong class="purple">must</strong> have been created with a <code>usage</code> value including
<code>VK_IMAGE_USAGE_TRANSFER_SRC_BIT</code></p>
</li>
<li>
<p><a id="VUID-vkCmdBeginRenderPass2KHR-initialLayout-03099"></a>
If any of the <code>initialLayout</code> or <code>finalLayout</code> member of the
<code>VkAttachmentDescription</code> structures or the <code>layout</code> member of
the <code>VkAttachmentReference</code> structures specified when creating the
render pass specified in the <code>renderPass</code> member of
<code>pRenderPassBegin</code> is <code>VK_IMAGE_LAYOUT_TRANSFER_DST_OPTIMAL</code>
then the corresponding attachment image view of the framebuffer
specified in the <code>framebuffer</code> member of <code>pRenderPassBegin</code>
<strong class="purple">must</strong> have been created with a <code>usage</code> value including
<code>VK_IMAGE_USAGE_TRANSFER_DST_BIT</code></p>
</li>
<li>
<p><a id="VUID-vkCmdBeginRenderPass2KHR-initialLayout-03100"></a>
If any of the <code>initialLayout</code> members of the
<code>VkAttachmentDescription</code> structures specified when creating the
render pass specified in the <code>renderPass</code> member of
<code>pRenderPassBegin</code> is not <code>VK_IMAGE_LAYOUT_UNDEFINED</code>, then each
such <code>initialLayout</code> <strong class="purple">must</strong> be equal to the current layout of the
corresponding attachment image subresource of the framebuffer specified
in the <code>framebuffer</code> member of <code>pRenderPassBegin</code></p>
</li>
<li>
<p><a id="VUID-vkCmdBeginRenderPass2KHR-srcStageMask-03101"></a>
The <code>srcStageMask</code> and <code>dstStageMask</code> members of any element of
the <code>pDependencies</code> member of <a href="#VkRenderPassCreateInfo">VkRenderPassCreateInfo</a> used to
create <code>renderPass</code> <strong class="purple">must</strong> be supported by the capabilities of the
queue family identified by the <code>queueFamilyIndex</code> member of the
<a href="#VkCommandPoolCreateInfo">VkCommandPoolCreateInfo</a> used to create the command pool which
<code>commandBuffer</code> was allocated from</p>
</li>
<li>
<p><a id="VUID-vkCmdBeginRenderPass2KHR-framebuffer-02533"></a>
For any attachment in <code>framebuffer</code> that is used by <code>renderPass</code>
and is bound to memory locations that are also bound to another
attachment used by <code>renderPass</code>, and if at least one of those uses
causes either attachment to be written to, both attachments <strong class="purple">must</strong> have
had the <code>VK_ATTACHMENT_DESCRIPTION_MAY_ALIAS_BIT</code> set</p>
</li>
</ul>
</div>
</div>
</div>
<div class="sidebarblock">
<div class="content">
<div class="title">Valid Usage (Implicit)</div>
<div class="ulist">
<ul>
<li>
<p><a id="VUID-vkCmdBeginRenderPass2KHR-commandBuffer-parameter"></a> <code>commandBuffer</code> <strong class="purple">must</strong> be a valid <code>VkCommandBuffer</code> handle</p>
</li>
<li>
<p><a id="VUID-vkCmdBeginRenderPass2KHR-pRenderPassBegin-parameter"></a> <code>pRenderPassBegin</code> <strong class="purple">must</strong> be a valid pointer to a valid <code>VkRenderPassBeginInfo</code> structure</p>
</li>
<li>
<p><a id="VUID-vkCmdBeginRenderPass2KHR-pSubpassBeginInfo-parameter"></a> <code>pSubpassBeginInfo</code> <strong class="purple">must</strong> be a valid pointer to a valid <code>VkSubpassBeginInfoKHR</code> structure</p>
</li>
<li>
<p><a id="VUID-vkCmdBeginRenderPass2KHR-commandBuffer-recording"></a> <code>commandBuffer</code> <strong class="purple">must</strong> be in the <a href="#commandbuffers-lifecycle">recording state</a></p>
</li>
<li>
<p><a id="VUID-vkCmdBeginRenderPass2KHR-commandBuffer-cmdpool"></a> The <code>VkCommandPool</code> that <code>commandBuffer</code> was allocated from <strong class="purple">must</strong> support graphics operations</p>
</li>
<li>
<p><a id="VUID-vkCmdBeginRenderPass2KHR-renderpass"></a> This command <strong class="purple">must</strong> only be called outside of a render pass instance</p>
</li>
<li>
<p><a id="VUID-vkCmdBeginRenderPass2KHR-bufferlevel"></a> <code>commandBuffer</code> <strong class="purple">must</strong> be a primary <code>VkCommandBuffer</code></p>
</li>
</ul>
</div>
</div>
</div>
<div class="sidebarblock">
<div class="content">
<div class="title">Host Synchronization</div>
<div class="ulist">
<ul>
<li>
<p>Host access to <code>commandBuffer</code> <strong class="purple">must</strong> be externally synchronized</p>
</li>
<li>
<p>Host access to the <code>VkCommandPool</code> that <code>commandBuffer</code> was allocated from <strong class="purple">must</strong> be externally synchronized</p>
</li>
</ul>
</div>
</div>
</div>
<div class="sidebarblock">
<div class="content">
<div class="title">Command Properties</div>
<table class="tableblock frame-all grid-all stretch">
<colgroup>
<col style="width: 25%;">
<col style="width: 25%;">
<col style="width: 25%;">
<col style="width: 25%;">
</colgroup>
<thead>
<tr>
<th class="tableblock halign-left valign-top"><a href="#VkCommandBufferLevel">Command Buffer Levels</a></th>
<th class="tableblock halign-left valign-top"><a href="#vkCmdBeginRenderPass">Render Pass Scope</a></th>
<th class="tableblock halign-left valign-top"><a href="#VkQueueFlagBits">Supported Queue Types</a></th>
<th class="tableblock halign-left valign-top"><a href="#synchronization-pipeline-stages-types">Pipeline Type</a></th>
</tr>
</thead>
<tbody>
<tr>
<td class="tableblock halign-left valign-top"><p class="tableblock">Primary</p></td>
<td class="tableblock halign-left valign-top"><p class="tableblock">Outside</p></td>
<td class="tableblock halign-left valign-top"><p class="tableblock">Graphics</p></td>
<td class="tableblock halign-left valign-top"><p class="tableblock">Graphics</p></td>
</tr>
</tbody>
</table>
</div>
</div>
</div>
<div class="sect3">
<h4 id="_see_also_19">See Also</h4>
<div class="paragraph">
<p><a href="#VkCommandBuffer">VkCommandBuffer</a>, <a href="#VkRenderPassBeginInfo">VkRenderPassBeginInfo</a>, <a href="#VkSubpassBeginInfoKHR">VkSubpassBeginInfoKHR</a></p>
</div>
</div>
<div class="sect3">
<h4 id="_document_notes_19">Document Notes</h4>
<div class="paragraph">
<p>For more information, see the Vulkan Specification at URL</p>
</div>
<div class="paragraph">
<p><a href="https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#vkCmdBeginRenderPass2KHR" class="bare">https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#vkCmdBeginRenderPass2KHR</a></p>
</div>
<div class="paragraph">
<p>This page is extracted from the Vulkan Specification.
Fixes and changes should be made to the Specification, not directly.</p>
</div>
<div style="page-break-after: always;"></div>
</div>
</div>
<div class="sect2">
<h3 id="_vkcmdbegintransformfeedbackext3">vkCmdBeginTransformFeedbackEXT(3)</h3>
<div class="sect3">
<h4 id="_name_20">Name</h4>
<div class="paragraph">
<p>vkCmdBeginTransformFeedbackEXT - Make transform feedback active in the command buffer</p>
</div>
</div>
<div class="sect3">
<h4 id="_c_specification_20">C Specification</h4>
<div class="paragraph">
<p>Transform feedback for specific transform feedback buffers is made active by
calling:</p>
</div>
<div id="vkCmdBeginTransformFeedbackEXT" class="listingblock">
<div class="content">
<pre class="highlight"><code class="language-c++" data-lang="c++">void vkCmdBeginTransformFeedbackEXT(
    VkCommandBuffer                             commandBuffer,
    uint32_t                                    firstCounterBuffer,
    uint32_t                                    counterBufferCount,
    const VkBuffer*                             pCounterBuffers,
    const VkDeviceSize*                         pCounterBufferOffsets);</code></pre>
</div>
</div>
</div>
<div class="sect3">
<h4 id="_parameters_20">Parameters</h4>
<div class="ulist">
<ul>
<li>
<p><code>commandBuffer</code> is the command buffer into which the command is
recorded.</p>
</li>
<li>
<p><code>firstCounterBuffer</code> is the index of the first transform feedback
buffer corresponding to <code>pCounterBuffers</code>[0] and
<code>pCounterBufferOffsets</code>[0].</p>
</li>
<li>
<p><code>counterBufferCount</code> is the size of the <code>pCounterBuffers</code> and
<code>pCounterBufferOffsets</code> arrays.</p>
</li>
<li>
<p><code>pCounterBuffers</code> is an optional array of buffer handles to the
counter buffers which contain a 4 byte integer value representing the
byte offset from the start of the corresponding transform feedback
buffer from where to start capturing vertex data.
If the byte offset stored to the counter buffer location was done using
<a href="#vkCmdEndTransformFeedbackEXT">vkCmdEndTransformFeedbackEXT</a> it can be used to resume transform
feedback from the previous location.
If <code>pCounterBuffers</code> is <code>NULL</code>, then transform feedback will start
capturing vertex data to byte offset zero in all bound transform
feedback buffers.
For each element of <code>pCounterBuffers</code> that is <a href="#VK_NULL_HANDLE">VK_NULL_HANDLE</a>,
transform feedback will start capturing vertex data to byte zero in the
corresponding bound transform feedback buffer.</p>
</li>
<li>
<p><code>pCounterBufferOffsets</code> is an optional array of offsets within each
of the <code>pCounterBuffers</code> where the counter values were previously
written.
The location in each counter buffer at these offsets <strong class="purple">must</strong> be large
enough to contain 4 bytes of data.
This data is the number of bytes captured by the previous transform
feedback to this buffer.
If <code>pCounterBufferOffsets</code> is <code>NULL</code>, then it is assumed the offsets
are zero.</p>
</li>
</ul>
</div>
</div>
<div class="sect3">
<h4 id="_description_20">Description</h4>
<div class="paragraph">
<p>The active transform feedback buffers will capture primitives emitted from
the corresponding <code>XfbBuffer</code> in the bound graphics pipeline.
Any <code>XfbBuffer</code> emitted that does not output to an active transform
feedback buffer will not be captured.</p>
</div>
<div class="sidebarblock">
<div class="content">
<div class="title">Valid Usage</div>
<div class="ulist">
<ul>
<li>
<p><a id="VUID-vkCmdBeginTransformFeedbackEXT-transformFeedback-02366"></a>
<code>VkPhysicalDeviceTransformFeedbackFeaturesEXT</code>::<code>transformFeedback</code>
<strong class="purple">must</strong> be enabled</p>
</li>
<li>
<p><a id="VUID-vkCmdBeginTransformFeedbackEXT-None-02367"></a>
Transform feedback <strong class="purple">must</strong> not be active</p>
</li>
<li>
<p><a id="VUID-vkCmdBeginTransformFeedbackEXT-firstCounterBuffer-02368"></a>
<code>firstCounterBuffer</code> <strong class="purple">must</strong> be less than
<code>VkPhysicalDeviceTransformFeedbackPropertiesEXT</code>::<code>maxTransformFeedbackBuffers</code></p>
</li>
<li>
<p><a id="VUID-vkCmdBeginTransformFeedbackEXT-firstCounterBuffer-02369"></a>
The sum of <code>firstCounterBuffer</code> and <code>counterBufferCount</code> <strong class="purple">must</strong>
be less than or equal to
<code>VkPhysicalDeviceTransformFeedbackPropertiesEXT</code>::<code>maxTransformFeedbackBuffers</code></p>
</li>
<li>
<p><a id="VUID-vkCmdBeginTransformFeedbackEXT-counterBufferCount-02607"></a>
If <code>counterBufferCount</code> is not <code>0</code>, and <code>pCounterBuffers</code> is not
<code>NULL</code>, <code>pCounterBuffers</code> <strong class="purple">must</strong> be a valid pointer to an array of
<code>counterBufferCount</code> <code>VkBuffer</code> handles that are either valid or
<a href="#VK_NULL_HANDLE">VK_NULL_HANDLE</a></p>
</li>
<li>
<p><a id="VUID-vkCmdBeginTransformFeedbackEXT-pCounterBufferOffsets-02370"></a>
For each buffer handle in the array, if it is not <a href="#VK_NULL_HANDLE">VK_NULL_HANDLE</a>
it <strong class="purple">must</strong> reference a buffer large enough to hold 4 bytes at the
corresponding offset from the <code>pCounterBufferOffsets</code> array</p>
</li>
<li>
<p><a id="VUID-vkCmdBeginTransformFeedbackEXT-pCounterBuffer-02371"></a>
If <code>pCounterBuffer</code> is <code>NULL</code>, then <code>pCounterBufferOffsets</code>
<strong class="purple">must</strong> also be <code>NULL</code></p>
</li>
<li>
<p><a id="VUID-vkCmdBeginTransformFeedbackEXT-pCounterBuffers-02372"></a>
For each buffer handle in the <code>pCounterBuffers</code> array that is not
<a href="#VK_NULL_HANDLE">VK_NULL_HANDLE</a> it <strong class="purple">must</strong> have been created with a <code>usage</code> value
containing
<code>VK_BUFFER_USAGE_TRANSFORM_FEEDBACK_COUNTER_BUFFER_BIT_EXT</code></p>
</li>
<li>
<p><a id="VUID-vkCmdBeginTransformFeedbackEXT-None-02373"></a>
Transform feedback <strong class="purple">must</strong> not be made active in a render pass instance
with multiview enabled</p>
</li>
</ul>
</div>
</div>
</div>
<div class="sidebarblock">
<div class="content">
<div class="title">Valid Usage (Implicit)</div>
<div class="ulist">
<ul>
<li>
<p><a id="VUID-vkCmdBeginTransformFeedbackEXT-commandBuffer-parameter"></a> <code>commandBuffer</code> <strong class="purple">must</strong> be a valid <code>VkCommandBuffer</code> handle</p>
</li>
<li>
<p><a id="VUID-vkCmdBeginTransformFeedbackEXT-pCounterBufferOffsets-parameter"></a> If <code>counterBufferCount</code> is not <code>0</code>, and <code>pCounterBufferOffsets</code> is not <code>NULL</code>, <code>pCounterBufferOffsets</code> <strong class="purple">must</strong> be a valid pointer to an array of <code>counterBufferCount</code> <code>VkDeviceSize</code> values</p>
</li>
<li>
<p><a id="VUID-vkCmdBeginTransformFeedbackEXT-commandBuffer-recording"></a> <code>commandBuffer</code> <strong class="purple">must</strong> be in the <a href="#commandbuffers-lifecycle">recording state</a></p>
</li>
<li>
<p><a id="VUID-vkCmdBeginTransformFeedbackEXT-commandBuffer-cmdpool"></a> The <code>VkCommandPool</code> that <code>commandBuffer</code> was allocated from <strong class="purple">must</strong> support graphics operations</p>
</li>
<li>
<p><a id="VUID-vkCmdBeginTransformFeedbackEXT-renderpass"></a> This command <strong class="purple">must</strong> only be called inside of a render pass instance</p>
</li>
<li>
<p><a id="VUID-vkCmdBeginTransformFeedbackEXT-commonparent"></a> Both of <code>commandBuffer</code>, and the elements of <code>pCounterBuffers</code> that are valid handles <strong class="purple">must</strong> have been created, allocated, or retrieved from the same <code>VkDevice</code></p>
</li>
</ul>
</div>
</div>
</div>
<div class="sidebarblock">
<div class="content">
<div class="title">Host Synchronization</div>
<div class="ulist">
<ul>
<li>
<p>Host access to <code>commandBuffer</code> <strong class="purple">must</strong> be externally synchronized</p>
</li>
<li>
<p>Host access to the <code>VkCommandPool</code> that <code>commandBuffer</code> was allocated from <strong class="purple">must</strong> be externally synchronized</p>
</li>
</ul>
</div>
</div>
</div>
<div class="sidebarblock">
<div class="content">
<div class="title">Command Properties</div>
<table class="tableblock frame-all grid-all stretch">
<colgroup>
<col style="width: 25%;">
<col style="width: 25%;">
<col style="width: 25%;">
<col style="width: 25%;">
</colgroup>
<thead>
<tr>
<th class="tableblock halign-left valign-top"><a href="#VkCommandBufferLevel">Command Buffer Levels</a></th>
<th class="tableblock halign-left valign-top"><a href="#vkCmdBeginRenderPass">Render Pass Scope</a></th>
<th class="tableblock halign-left valign-top"><a href="#VkQueueFlagBits">Supported Queue Types</a></th>
<th class="tableblock halign-left valign-top"><a href="#synchronization-pipeline-stages-types">Pipeline Type</a></th>
</tr>
</thead>
<tbody>
<tr>
<td class="tableblock halign-left valign-top"><p class="tableblock">Primary<br>
Secondary</p></td>
<td class="tableblock halign-left valign-top"><p class="tableblock">Inside</p></td>
<td class="tableblock halign-left valign-top"><p class="tableblock">Graphics</p></td>
<td class="tableblock halign-left valign-top"></td>
</tr>
</tbody>
</table>
</div>
</div>
</div>
<div class="sect3">
<h4 id="_see_also_20">See Also</h4>
<div class="paragraph">
<p><a href="#VkBuffer">VkBuffer</a>, <a href="#VkCommandBuffer">VkCommandBuffer</a>, <code>VkDeviceSize</code></p>
</div>
</div>
<div class="sect3">
<h4 id="_document_notes_20">Document Notes</h4>
<div class="paragraph">
<p>For more information, see the Vulkan Specification at URL</p>
</div>
<div class="paragraph">
<p><a href="https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#vkCmdBeginTransformFeedbackEXT" class="bare">https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#vkCmdBeginTransformFeedbackEXT</a></p>
</div>
<div class="paragraph">
<p>This page is extracted from the Vulkan Specification.
Fixes and changes should be made to the Specification, not directly.</p>
</div>
<div style="page-break-after: always;"></div>
</div>
</div>
<div class="sect2">
<h3 id="_vkcmdbinddescriptorsets3">vkCmdBindDescriptorSets(3)</h3>
<div class="sect3">
<h4 id="_name_21">Name</h4>
<div class="paragraph">
<p>vkCmdBindDescriptorSets - Binds descriptor sets to a command buffer</p>
</div>
</div>
<div class="sect3">
<h4 id="_c_specification_21">C Specification</h4>
<div class="paragraph">
<p>To bind one or more descriptor sets to a command buffer, call:</p>
</div>
<div id="vkCmdBindDescriptorSets" class="listingblock">
<div class="content">
<pre class="highlight"><code class="language-c++" data-lang="c++">void vkCmdBindDescriptorSets(
    VkCommandBuffer                             commandBuffer,
    VkPipelineBindPoint                         pipelineBindPoint,
    VkPipelineLayout                            layout,
    uint32_t                                    firstSet,
    uint32_t                                    descriptorSetCount,
    const VkDescriptorSet*                      pDescriptorSets,
    uint32_t                                    dynamicOffsetCount,
    const uint32_t*                             pDynamicOffsets);</code></pre>
</div>
</div>
</div>
<div class="sect3">
<h4 id="_parameters_21">Parameters</h4>
<div class="ulist">
<ul>
<li>
<p><code>commandBuffer</code> is the command buffer that the descriptor sets will
be bound to.</p>
</li>
<li>
<p><code>pipelineBindPoint</code> is a <a href="#VkPipelineBindPoint">VkPipelineBindPoint</a> indicating
whether the descriptors will be used by graphics pipelines or compute
pipelines.
There is a separate set of bind points for each of graphics and compute,
so binding one does not disturb the other.</p>
</li>
<li>
<p><code>layout</code> is a <a href="#VkPipelineLayout">VkPipelineLayout</a> object used to program the
bindings.</p>
</li>
<li>
<p><code>firstSet</code> is the set number of the first descriptor set to be
bound.</p>
</li>
<li>
<p><code>descriptorSetCount</code> is the number of elements in the
<code>pDescriptorSets</code> array.</p>
</li>
<li>
<p><code>pDescriptorSets</code> is an array of handles to <a href="#VkDescriptorSet">VkDescriptorSet</a>
objects describing the descriptor sets to write to.</p>
</li>
<li>
<p><code>dynamicOffsetCount</code> is the number of dynamic offsets in the
<code>pDynamicOffsets</code> array.</p>
</li>
<li>
<p><code>pDynamicOffsets</code> is a pointer to an array of <code>uint32_t</code> values
specifying dynamic offsets.</p>
</li>
</ul>
</div>
</div>
<div class="sect3">
<h4 id="_description_21">Description</h4>
<div class="paragraph">
<p><code>vkCmdBindDescriptorSets</code> causes the sets numbered [<code>firstSet</code>..
<code>firstSet</code>+<code>descriptorSetCount</code>-1] to use the bindings stored in
<code>pDescriptorSets</code>[0..<code>descriptorSetCount</code>-1] for subsequent
rendering commands (either compute or graphics, according to the
<code>pipelineBindPoint</code>).
Any bindings that were previously applied via these sets are no longer
valid.</p>
</div>
<div class="paragraph">
<p>Once bound, a descriptor set affects rendering of subsequent graphics or
compute commands in the command buffer until a different set is bound to the
same set number, or else until the set is disturbed as described in
<a href="vkspec.html#descriptorsets-compatibility">Pipeline Layout Compatibility</a>.</p>
</div>
<div class="paragraph">
<p>A compatible descriptor set <strong class="purple">must</strong> be bound for all set numbers that any
shaders in a pipeline access, at the time that a draw or dispatch command is
recorded to execute using that pipeline.
However, if none of the shaders in a pipeline statically use any bindings
with a particular set number, then no descriptor set need be bound for that
set number, even if the pipeline layout includes a non-trivial descriptor
set layout for that set number.</p>
</div>
<div id="descriptorsets-binding-dynamicoffsets" class="paragraph">
<p>If any of the sets being bound include dynamic uniform or storage buffers,
then <code>pDynamicOffsets</code> includes one element for each array element in
each dynamic descriptor type binding in each set.
Values are taken from <code>pDynamicOffsets</code> in an order such that all
entries for set N come before set N+1; within a set, entries are ordered by
the binding numbers in the descriptor set layouts; and within a binding
array, elements are in order.
<code>dynamicOffsetCount</code> <strong class="purple">must</strong> equal the total number of dynamic descriptors
in the sets being bound.</p>
</div>
<div class="paragraph">
<p>The effective offset used for dynamic uniform and storage buffer bindings is
the sum of the relative offset taken from <code>pDynamicOffsets</code>, and the
base address of the buffer plus base offset in the descriptor set.
The range of the dynamic uniform and storage buffer bindings is the buffer
range as specified in the descriptor set.</p>
</div>
<div class="paragraph">
<p>Each of the <code>pDescriptorSets</code> <strong class="purple">must</strong> be compatible with the pipeline
layout specified by <code>layout</code>.
The layout used to program the bindings <strong class="purple">must</strong> also be compatible with the
pipeline used in subsequent graphics or compute commands, as defined in the
<a href="vkspec.html#descriptorsets-compatibility">Pipeline Layout Compatibility</a> section.</p>
</div>
<div class="paragraph">
<p>The descriptor set contents bound by a call to <code>vkCmdBindDescriptorSets</code>
<strong class="purple">may</strong> be consumed at the following times:</p>
</div>
<div class="ulist">
<ul>
<li>
<p>For descriptor bindings created with the
<code>VK_DESCRIPTOR_BINDING_UPDATE_AFTER_BIND_BIT_EXT</code> bit set, the
contents <strong class="purple">may</strong> be consumed when the command buffer is submitted to a
queue, or during shader execution of the resulting draws and dispatches,
or any time in between.
Otherwise,</p>
</li>
<li>
<p>during host execution of the command, or during shader execution of the
resulting draws and dispatches, or any time in between.</p>
</li>
</ul>
</div>
<div class="paragraph">
<p>Thus, the contents of a descriptor set binding <strong class="purple">must</strong> not be altered
(overwritten by an update command, or freed) between the first point in time
that it <strong class="purple">may</strong> be consumed, and when the command completes executing on the
queue.</p>
</div>
<div class="paragraph">
<p>The contents of <code>pDynamicOffsets</code> are consumed immediately during
execution of <code>vkCmdBindDescriptorSets</code>.
Once all pending uses have completed, it is legal to update and reuse a
descriptor set.</p>
</div>
<div class="sidebarblock">
<div class="content">
<div class="title">Valid Usage</div>
<div class="ulist">
<ul>
<li>
<p><a id="VUID-vkCmdBindDescriptorSets-pDescriptorSets-00358"></a>
Each element of <code>pDescriptorSets</code> <strong class="purple">must</strong> have been allocated with a
<code>VkDescriptorSetLayout</code> that matches (is the same as, or identically
defined as) the <code>VkDescriptorSetLayout</code> at set <em>n</em> in <code>layout</code>,
where <em>n</em> is the sum of <code>firstSet</code> and the index into
<code>pDescriptorSets</code></p>
</li>
<li>
<p><a id="VUID-vkCmdBindDescriptorSets-dynamicOffsetCount-00359"></a>
<code>dynamicOffsetCount</code> <strong class="purple">must</strong> be equal to the total number of dynamic
descriptors in <code>pDescriptorSets</code></p>
</li>
<li>
<p><a id="VUID-vkCmdBindDescriptorSets-firstSet-00360"></a>
The sum of <code>firstSet</code> and <code>descriptorSetCount</code> <strong class="purple">must</strong> be less
than or equal to <code>VkPipelineLayoutCreateInfo</code>::<code>setLayoutCount</code>
provided when <code>layout</code> was created</p>
</li>
<li>
<p><a id="VUID-vkCmdBindDescriptorSets-pipelineBindPoint-00361"></a>
<code>pipelineBindPoint</code> <strong class="purple">must</strong> be supported by the <code>commandBuffer</code>&#8217;s
parent <code>VkCommandPool</code>&#8217;s queue family</p>
</li>
<li>
<p><a id="VUID-vkCmdBindDescriptorSets-pDynamicOffsets-01971"></a>
Each element of <code>pDynamicOffsets</code> which corresponds to a descriptor
binding with type <code>VK_DESCRIPTOR_TYPE_UNIFORM_BUFFER_DYNAMIC</code> <strong class="purple">must</strong>
be a multiple of
<code>VkPhysicalDeviceLimits</code>::<code>minUniformBufferOffsetAlignment</code></p>
</li>
<li>
<p><a id="VUID-vkCmdBindDescriptorSets-pDynamicOffsets-01972"></a>
Each element of <code>pDynamicOffsets</code> which corresponds to a descriptor
binding with type <code>VK_DESCRIPTOR_TYPE_STORAGE_BUFFER_DYNAMIC</code> <strong class="purple">must</strong>
be a multiple of
<code>VkPhysicalDeviceLimits</code>::<code>minStorageBufferOffsetAlignment</code></p>
</li>
<li>
<p><a id="VUID-vkCmdBindDescriptorSets-pDescriptorSets-01979"></a>
For each dynamic uniform or storage buffer binding in
<code>pDescriptorSets</code>, the sum of the effective offset, as defined
above, and the range of the binding <strong class="purple">must</strong> be less than or equal to the
size of the buffer</p>
</li>
</ul>
</div>
</div>
</div>
<div class="sidebarblock">
<div class="content">
<div class="title">Valid Usage (Implicit)</div>
<div class="ulist">
<ul>
<li>
<p><a id="VUID-vkCmdBindDescriptorSets-commandBuffer-parameter"></a> <code>commandBuffer</code> <strong class="purple">must</strong> be a valid <code>VkCommandBuffer</code> handle</p>
</li>
<li>
<p><a id="VUID-vkCmdBindDescriptorSets-pipelineBindPoint-parameter"></a> <code>pipelineBindPoint</code> <strong class="purple">must</strong> be a valid <a href="#VkPipelineBindPoint">VkPipelineBindPoint</a> value</p>
</li>
<li>
<p><a id="VUID-vkCmdBindDescriptorSets-layout-parameter"></a> <code>layout</code> <strong class="purple">must</strong> be a valid <code>VkPipelineLayout</code> handle</p>
</li>
<li>
<p><a id="VUID-vkCmdBindDescriptorSets-pDescriptorSets-parameter"></a> <code>pDescriptorSets</code> <strong class="purple">must</strong> be a valid pointer to an array of <code>descriptorSetCount</code> valid <code>VkDescriptorSet</code> handles</p>
</li>
<li>
<p><a id="VUID-vkCmdBindDescriptorSets-pDynamicOffsets-parameter"></a> If <code>dynamicOffsetCount</code> is not <code>0</code>, <code>pDynamicOffsets</code> <strong class="purple">must</strong> be a valid pointer to an array of <code>dynamicOffsetCount</code> <code>uint32_t</code> values</p>
</li>
<li>
<p><a id="VUID-vkCmdBindDescriptorSets-commandBuffer-recording"></a> <code>commandBuffer</code> <strong class="purple">must</strong> be in the <a href="#commandbuffers-lifecycle">recording state</a></p>
</li>
<li>
<p><a id="VUID-vkCmdBindDescriptorSets-commandBuffer-cmdpool"></a> The <code>VkCommandPool</code> that <code>commandBuffer</code> was allocated from <strong class="purple">must</strong> support graphics, or compute operations</p>
</li>
<li>
<p><a id="VUID-vkCmdBindDescriptorSets-descriptorSetCount-arraylength"></a> <code>descriptorSetCount</code> <strong class="purple">must</strong> be greater than <code>0</code></p>
</li>
<li>
<p><a id="VUID-vkCmdBindDescriptorSets-commonparent"></a> Each of <code>commandBuffer</code>, <code>layout</code>, and the elements of <code>pDescriptorSets</code> <strong class="purple">must</strong> have been created, allocated, or retrieved from the same <code>VkDevice</code></p>
</li>
</ul>
</div>
</div>
</div>
<div class="sidebarblock">
<div class="content">
<div class="title">Host Synchronization</div>
<div class="ulist">
<ul>
<li>
<p>Host access to <code>commandBuffer</code> <strong class="purple">must</strong> be externally synchronized</p>
</li>
<li>
<p>Host access to the <code>VkCommandPool</code> that <code>commandBuffer</code> was allocated from <strong class="purple">must</strong> be externally synchronized</p>
</li>
</ul>
</div>
</div>
</div>
<div class="sidebarblock">
<div class="content">
<div class="title">Command Properties</div>
<table class="tableblock frame-all grid-all stretch">
<colgroup>
<col style="width: 25%;">
<col style="width: 25%;">
<col style="width: 25%;">
<col style="width: 25%;">
</colgroup>
<thead>
<tr>
<th class="tableblock halign-left valign-top"><a href="#VkCommandBufferLevel">Command Buffer Levels</a></th>
<th class="tableblock halign-left valign-top"><a href="#vkCmdBeginRenderPass">Render Pass Scope</a></th>
<th class="tableblock halign-left valign-top"><a href="#VkQueueFlagBits">Supported Queue Types</a></th>
<th class="tableblock halign-left valign-top"><a href="#synchronization-pipeline-stages-types">Pipeline Type</a></th>
</tr>
</thead>
<tbody>
<tr>
<td class="tableblock halign-left valign-top"><p class="tableblock">Primary<br>
Secondary</p></td>
<td class="tableblock halign-left valign-top"><p class="tableblock">Both</p></td>
<td class="tableblock halign-left valign-top"><p class="tableblock">Graphics<br>
Compute</p></td>
<td class="tableblock halign-left valign-top"></td>
</tr>
</tbody>
</table>
</div>
</div>
</div>
<div class="sect3">
<h4 id="_see_also_21">See Also</h4>
<div class="paragraph">
<p><a href="#VkCommandBuffer">VkCommandBuffer</a>, <a href="#VkDescriptorSet">VkDescriptorSet</a>, <a href="#VkPipelineBindPoint">VkPipelineBindPoint</a>, <a href="#VkPipelineLayout">VkPipelineLayout</a></p>
</div>
</div>
<div class="sect3">
<h4 id="_document_notes_21">Document Notes</h4>
<div class="paragraph">
<p>For more information, see the Vulkan Specification at URL</p>
</div>
<div class="paragraph">
<p><a href="https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#vkCmdBindDescriptorSets" class="bare">https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#vkCmdBindDescriptorSets</a></p>
</div>
<div class="paragraph">
<p>This page is extracted from the Vulkan Specification.
Fixes and changes should be made to the Specification, not directly.</p>
</div>
<div style="page-break-after: always;"></div>
</div>
</div>
<div class="sect2">
<h3 id="_vkcmdbindindexbuffer3">vkCmdBindIndexBuffer(3)</h3>
<div class="sect3">
<h4 id="_name_22">Name</h4>
<div class="paragraph">
<p>vkCmdBindIndexBuffer - Bind an index buffer to a command buffer</p>
</div>
</div>
<div class="sect3">
<h4 id="_c_specification_22">C Specification</h4>
<div class="paragraph">
<p>To bind an index buffer to a command buffer, call:</p>
</div>
<div id="vkCmdBindIndexBuffer" class="listingblock">
<div class="content">
<pre class="highlight"><code class="language-c++" data-lang="c++">void vkCmdBindIndexBuffer(
    VkCommandBuffer                             commandBuffer,
    VkBuffer                                    buffer,
    VkDeviceSize                                offset,
    VkIndexType                                 indexType);</code></pre>
</div>
</div>
</div>
<div class="sect3">
<h4 id="_parameters_22">Parameters</h4>
<div class="ulist">
<ul>
<li>
<p><code>commandBuffer</code> is the command buffer into which the command is
recorded.</p>
</li>
<li>
<p><code>buffer</code> is the buffer being bound.</p>
</li>
<li>
<p><code>offset</code> is the starting offset in bytes within <code>buffer</code> used in
index buffer address calculations.</p>
</li>
<li>
<p><code>indexType</code> is a <a href="#VkIndexType">VkIndexType</a> value specifying whether indices
are treated as 16 bits or 32 bits.</p>
</li>
</ul>
</div>
</div>
<div class="sect3">
<h4 id="_description_22">Description</h4>
<div class="sidebarblock">
<div class="content">
<div class="title">Valid Usage</div>
<div class="ulist">
<ul>
<li>
<p><a id="VUID-vkCmdBindIndexBuffer-offset-00431"></a>
<code>offset</code> <strong class="purple">must</strong> be less than the size of <code>buffer</code></p>
</li>
<li>
<p><a id="VUID-vkCmdBindIndexBuffer-offset-00432"></a>
The sum of <code>offset</code> and the address of the range of
<code>VkDeviceMemory</code> object that is backing <code>buffer</code>, <strong class="purple">must</strong> be a
multiple of the type indicated by <code>indexType</code></p>
</li>
<li>
<p><a id="VUID-vkCmdBindIndexBuffer-buffer-00433"></a>
<code>buffer</code> <strong class="purple">must</strong> have been created with the
<code>VK_BUFFER_USAGE_INDEX_BUFFER_BIT</code> flag</p>
</li>
<li>
<p><a id="VUID-vkCmdBindIndexBuffer-buffer-00434"></a>
If <code>buffer</code> is non-sparse then it <strong class="purple">must</strong> be bound completely and
contiguously to a single <code>VkDeviceMemory</code> object</p>
</li>
<li>
<p><a id="VUID-vkCmdBindIndexBuffer-indexType-02507"></a>
<code>indexType</code> <strong class="purple">must</strong> not be <code>VK_INDEX_TYPE_NONE_NV</code>.</p>
</li>
</ul>
</div>
</div>
</div>
<div class="sidebarblock">
<div class="content">
<div class="title">Valid Usage (Implicit)</div>
<div class="ulist">
<ul>
<li>
<p><a id="VUID-vkCmdBindIndexBuffer-commandBuffer-parameter"></a> <code>commandBuffer</code> <strong class="purple">must</strong> be a valid <code>VkCommandBuffer</code> handle</p>
</li>
<li>
<p><a id="VUID-vkCmdBindIndexBuffer-buffer-parameter"></a> <code>buffer</code> <strong class="purple">must</strong> be a valid <code>VkBuffer</code> handle</p>
</li>
<li>
<p><a id="VUID-vkCmdBindIndexBuffer-indexType-parameter"></a> <code>indexType</code> <strong class="purple">must</strong> be a valid <a href="#VkIndexType">VkIndexType</a> value</p>
</li>
<li>
<p><a id="VUID-vkCmdBindIndexBuffer-commandBuffer-recording"></a> <code>commandBuffer</code> <strong class="purple">must</strong> be in the <a href="#commandbuffers-lifecycle">recording state</a></p>
</li>
<li>
<p><a id="VUID-vkCmdBindIndexBuffer-commandBuffer-cmdpool"></a> The <code>VkCommandPool</code> that <code>commandBuffer</code> was allocated from <strong class="purple">must</strong> support graphics operations</p>
</li>
<li>
<p><a id="VUID-vkCmdBindIndexBuffer-commonparent"></a> Both of <code>buffer</code>, and <code>commandBuffer</code> <strong class="purple">must</strong> have been created, allocated, or retrieved from the same <code>VkDevice</code></p>
</li>
</ul>
</div>
</div>
</div>
<div class="sidebarblock">
<div class="content">
<div class="title">Host Synchronization</div>
<div class="ulist">
<ul>
<li>
<p>Host access to <code>commandBuffer</code> <strong class="purple">must</strong> be externally synchronized</p>
</li>
<li>
<p>Host access to the <code>VkCommandPool</code> that <code>commandBuffer</code> was allocated from <strong class="purple">must</strong> be externally synchronized</p>
</li>
</ul>
</div>
</div>
</div>
<div class="sidebarblock">
<div class="content">
<div class="title">Command Properties</div>
<table class="tableblock frame-all grid-all stretch">
<colgroup>
<col style="width: 25%;">
<col style="width: 25%;">
<col style="width: 25%;">
<col style="width: 25%;">
</colgroup>
<thead>
<tr>
<th class="tableblock halign-left valign-top"><a href="#VkCommandBufferLevel">Command Buffer Levels</a></th>
<th class="tableblock halign-left valign-top"><a href="#vkCmdBeginRenderPass">Render Pass Scope</a></th>
<th class="tableblock halign-left valign-top"><a href="#VkQueueFlagBits">Supported Queue Types</a></th>
<th class="tableblock halign-left valign-top"><a href="#synchronization-pipeline-stages-types">Pipeline Type</a></th>
</tr>
</thead>
<tbody>
<tr>
<td class="tableblock halign-left valign-top"><p class="tableblock">Primary<br>
Secondary</p></td>
<td class="tableblock halign-left valign-top"><p class="tableblock">Both</p></td>
<td class="tableblock halign-left valign-top"><p class="tableblock">Graphics</p></td>
<td class="tableblock halign-left valign-top"></td>
</tr>
</tbody>
</table>
</div>
</div>
</div>
<div class="sect3">
<h4 id="_see_also_22">See Also</h4>
<div class="paragraph">
<p><a href="#VkBuffer">VkBuffer</a>, <a href="#VkCommandBuffer">VkCommandBuffer</a>, <code>VkDeviceSize</code>, <a href="#VkIndexType">VkIndexType</a></p>
</div>
</div>
<div class="sect3">
<h4 id="_document_notes_22">Document Notes</h4>
<div class="paragraph">
<p>For more information, see the Vulkan Specification at URL</p>
</div>
<div class="paragraph">
<p><a href="https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#vkCmdBindIndexBuffer" class="bare">https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#vkCmdBindIndexBuffer</a></p>
</div>
<div class="paragraph">
<p>This page is extracted from the Vulkan Specification.
Fixes and changes should be made to the Specification, not directly.</p>
</div>
<div style="page-break-after: always;"></div>
</div>
</div>
<div class="sect2">
<h3 id="_vkcmdbindpipeline3">vkCmdBindPipeline(3)</h3>
<div class="sect3">
<h4 id="_name_23">Name</h4>
<div class="paragraph">
<p>vkCmdBindPipeline - Bind a pipeline object to a command buffer</p>
</div>
</div>
<div class="sect3">
<h4 id="_c_specification_23">C Specification</h4>
<div class="paragraph">
<p>Once a pipeline has been created, it <strong class="purple">can</strong> be bound to the command buffer
using the command:</p>
</div>
<div id="vkCmdBindPipeline" class="listingblock">
<div class="content">
<pre class="highlight"><code class="language-c++" data-lang="c++">void vkCmdBindPipeline(
    VkCommandBuffer                             commandBuffer,
    VkPipelineBindPoint                         pipelineBindPoint,
    VkPipeline                                  pipeline);</code></pre>
</div>
</div>
</div>
<div class="sect3">
<h4 id="_parameters_23">Parameters</h4>
<div class="ulist">
<ul>
<li>
<p><code>commandBuffer</code> is the command buffer that the pipeline will be
bound to.</p>
</li>
<li>
<p><code>pipelineBindPoint</code> is a <a href="#VkPipelineBindPoint">VkPipelineBindPoint</a> value specifying
whether to bind to the compute or graphics bind point.
Binding one does not disturb the other.</p>
</li>
<li>
<p><code>pipeline</code> is the pipeline to be bound.</p>
</li>
</ul>
</div>
</div>
<div class="sect3">
<h4 id="_description_23">Description</h4>
<div class="paragraph">
<p>Once bound, a pipeline binding affects subsequent graphics or compute
commands in the command buffer until a different pipeline is bound to the
bind point.
The pipeline bound to <code>VK_PIPELINE_BIND_POINT_COMPUTE</code> controls the
behavior of <a href="#vkCmdDispatch">vkCmdDispatch</a> and <a href="#vkCmdDispatchIndirect">vkCmdDispatchIndirect</a>.
The pipeline bound to <code>VK_PIPELINE_BIND_POINT_GRAPHICS</code> controls the
behavior of all <a href="vkspec.html#drawing">drawing commands</a>.
The pipeline bound to <code>VK_PIPELINE_BIND_POINT_RAY_TRACING_NV</code> controls
the behavior of <a href="#vkCmdTraceRaysNV">vkCmdTraceRaysNV</a>.
No other commands are affected by the pipeline state.</p>
</div>
<div class="sidebarblock">
<div class="content">
<div class="title">Valid Usage</div>
<div class="ulist">
<ul>
<li>
<p><a id="VUID-vkCmdBindPipeline-pipelineBindPoint-00777"></a>
If <code>pipelineBindPoint</code> is <code>VK_PIPELINE_BIND_POINT_COMPUTE</code>, the
<code>VkCommandPool</code> that <code>commandBuffer</code> was allocated from <strong class="purple">must</strong>
support compute operations</p>
</li>
<li>
<p><a id="VUID-vkCmdBindPipeline-pipelineBindPoint-00778"></a>
If <code>pipelineBindPoint</code> is <code>VK_PIPELINE_BIND_POINT_GRAPHICS</code>, the
<code>VkCommandPool</code> that <code>commandBuffer</code> was allocated from <strong class="purple">must</strong>
support graphics operations</p>
</li>
<li>
<p><a id="VUID-vkCmdBindPipeline-pipelineBindPoint-00779"></a>
If <code>pipelineBindPoint</code> is <code>VK_PIPELINE_BIND_POINT_COMPUTE</code>,
<code>pipeline</code> <strong class="purple">must</strong> be a compute pipeline</p>
</li>
<li>
<p><a id="VUID-vkCmdBindPipeline-pipelineBindPoint-00780"></a>
If <code>pipelineBindPoint</code> is <code>VK_PIPELINE_BIND_POINT_GRAPHICS</code>,
<code>pipeline</code> <strong class="purple">must</strong> be a graphics pipeline</p>
</li>
<li>
<p><a id="VUID-vkCmdBindPipeline-pipeline-00781"></a>
If the <a href="vkspec.html#features-variableMultisampleRate">variable multisample rate</a>
feature is not supported, <code>pipeline</code> is a graphics pipeline, the
current subpass has no attachments, and this is not the first call to
this function with a graphics pipeline after transitioning to the
current subpass, then the sample count specified by this pipeline <strong class="purple">must</strong>
match that set in the previous pipeline</p>
</li>
<li>
<p><a id="VUID-vkCmdBindPipeline-variableSampleLocations-01525"></a>
If
<a href="#VkPhysicalDeviceSampleLocationsPropertiesEXT">VkPhysicalDeviceSampleLocationsPropertiesEXT</a>::<code>variableSampleLocations</code>
is <code>VK_FALSE</code>, and <code>pipeline</code> is a graphics pipeline created
with a <a href="#VkPipelineSampleLocationsStateCreateInfoEXT">VkPipelineSampleLocationsStateCreateInfoEXT</a> structure
having its <code>sampleLocationsEnable</code> member set to <code>VK_TRUE</code> but
without <code>VK_DYNAMIC_STATE_SAMPLE_LOCATIONS_EXT</code> enabled then the
current render pass instance <strong class="purple">must</strong> have been begun by specifying a
<a href="#VkRenderPassSampleLocationsBeginInfoEXT">VkRenderPassSampleLocationsBeginInfoEXT</a> structure whose
<code>pPostSubpassSampleLocations</code> member contains an element with a
<code>subpassIndex</code> matching the current subpass index and the
<code>sampleLocationsInfo</code> member of that element <strong class="purple">must</strong> match the
<code>sampleLocationsInfo</code> specified in
<a href="#VkPipelineSampleLocationsStateCreateInfoEXT">VkPipelineSampleLocationsStateCreateInfoEXT</a> when the pipeline was
created</p>
</li>
<li>
<p><a id="VUID-vkCmdBindPipeline-None-02323"></a>
This command <strong class="purple">must</strong> not be recorded when transform feedback is active</p>
</li>
<li>
<p><a id="VUID-vkCmdBindPipeline-pipelineBindPoint-02391"></a>
If <code>pipelineBindPoint</code> is
<code>VK_PIPELINE_BIND_POINT_RAY_TRACING_NV</code>, the <code>VkCommandPool</code>
that <code>commandBuffer</code> was allocated from <strong class="purple">must</strong> support compute
operations</p>
</li>
<li>
<p><a id="VUID-vkCmdBindPipeline-pipelineBindPoint-02392"></a>
If <code>pipelineBindPoint</code> is
<code>VK_PIPELINE_BIND_POINT_RAY_TRACING_NV</code>, the <code>pipeline</code> <strong class="purple">must</strong> be
a ray tracing pipeline</p>
</li>
</ul>
</div>
</div>
</div>
<div class="sidebarblock">
<div class="content">
<div class="title">Valid Usage (Implicit)</div>
<div class="ulist">
<ul>
<li>
<p><a id="VUID-vkCmdBindPipeline-commandBuffer-parameter"></a> <code>commandBuffer</code> <strong class="purple">must</strong> be a valid <code>VkCommandBuffer</code> handle</p>
</li>
<li>
<p><a id="VUID-vkCmdBindPipeline-pipelineBindPoint-parameter"></a> <code>pipelineBindPoint</code> <strong class="purple">must</strong> be a valid <a href="#VkPipelineBindPoint">VkPipelineBindPoint</a> value</p>
</li>
<li>
<p><a id="VUID-vkCmdBindPipeline-pipeline-parameter"></a> <code>pipeline</code> <strong class="purple">must</strong> be a valid <code>VkPipeline</code> handle</p>
</li>
<li>
<p><a id="VUID-vkCmdBindPipeline-commandBuffer-recording"></a> <code>commandBuffer</code> <strong class="purple">must</strong> be in the <a href="#commandbuffers-lifecycle">recording state</a></p>
</li>
<li>
<p><a id="VUID-vkCmdBindPipeline-commandBuffer-cmdpool"></a> The <code>VkCommandPool</code> that <code>commandBuffer</code> was allocated from <strong class="purple">must</strong> support graphics, or compute operations</p>
</li>
<li>
<p><a id="VUID-vkCmdBindPipeline-commonparent"></a> Both of <code>commandBuffer</code>, and <code>pipeline</code> <strong class="purple">must</strong> have been created, allocated, or retrieved from the same <code>VkDevice</code></p>
</li>
</ul>
</div>
</div>
</div>
<div class="sidebarblock">
<div class="content">
<div class="title">Host Synchronization</div>
<div class="ulist">
<ul>
<li>
<p>Host access to <code>commandBuffer</code> <strong class="purple">must</strong> be externally synchronized</p>
</li>
<li>
<p>Host access to the <code>VkCommandPool</code> that <code>commandBuffer</code> was allocated from <strong class="purple">must</strong> be externally synchronized</p>
</li>
</ul>
</div>
</div>
</div>
<div class="sidebarblock">
<div class="content">
<div class="title">Command Properties</div>
<table class="tableblock frame-all grid-all stretch">
<colgroup>
<col style="width: 25%;">
<col style="width: 25%;">
<col style="width: 25%;">
<col style="width: 25%;">
</colgroup>
<thead>
<tr>
<th class="tableblock halign-left valign-top"><a href="#VkCommandBufferLevel">Command Buffer Levels</a></th>
<th class="tableblock halign-left valign-top"><a href="#vkCmdBeginRenderPass">Render Pass Scope</a></th>
<th class="tableblock halign-left valign-top"><a href="#VkQueueFlagBits">Supported Queue Types</a></th>
<th class="tableblock halign-left valign-top"><a href="#synchronization-pipeline-stages-types">Pipeline Type</a></th>
</tr>
</thead>
<tbody>
<tr>
<td class="tableblock halign-left valign-top"><p class="tableblock">Primary<br>
Secondary</p></td>
<td class="tableblock halign-left valign-top"><p class="tableblock">Both</p></td>
<td class="tableblock halign-left valign-top"><p class="tableblock">Graphics<br>
Compute</p></td>
<td class="tableblock halign-left valign-top"></td>
</tr>
</tbody>
</table>
</div>
</div>
</div>
<div class="sect3">
<h4 id="_see_also_23">See Also</h4>
<div class="paragraph">
<p><a href="#VkCommandBuffer">VkCommandBuffer</a>, <a href="#VkPipeline">VkPipeline</a>, <a href="#VkPipelineBindPoint">VkPipelineBindPoint</a></p>
</div>
</div>
<div class="sect3">
<h4 id="_document_notes_23">Document Notes</h4>
<div class="paragraph">
<p>For more information, see the Vulkan Specification at URL</p>
</div>
<div class="paragraph">
<p><a href="https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#vkCmdBindPipeline" class="bare">https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#vkCmdBindPipeline</a></p>
</div>
<div class="paragraph">
<p>This page is extracted from the Vulkan Specification.
Fixes and changes should be made to the Specification, not directly.</p>
</div>
<div style="page-break-after: always;"></div>
</div>
</div>
<div class="sect2">
<h3 id="_vkcmdbindshadingrateimagenv3">vkCmdBindShadingRateImageNV(3)</h3>
<div class="sect3">
<h4 id="_name_24">Name</h4>
<div class="paragraph">
<p>vkCmdBindShadingRateImageNV - Bind a shading rate image on a command buffer</p>
</div>
</div>
<div class="sect3">
<h4 id="_c_specification_24">C Specification</h4>
<div class="paragraph">
<p>When shading rate image usage is enabled in the bound pipeline, the pipeline
uses a shading rate image specified by the command:</p>
</div>
<div id="vkCmdBindShadingRateImageNV" class="listingblock">
<div class="content">
<pre class="highlight"><code class="language-c++" data-lang="c++">void vkCmdBindShadingRateImageNV(
    VkCommandBuffer                             commandBuffer,
    VkImageView                                 imageView,
    VkImageLayout                               imageLayout);</code></pre>
</div>
</div>
</div>
<div class="sect3">
<h4 id="_parameters_24">Parameters</h4>
<div class="ulist">
<ul>
<li>
<p><code>commandBuffer</code> is the command buffer into which the command will be
recorded.</p>
</li>
<li>
<p><code>imageView</code> is an image view handle that specifies the shading rate
image.
<code>imageView</code> <strong class="purple">may</strong> be set to <a href="#VK_NULL_HANDLE">VK_NULL_HANDLE</a>, which is equivalent
to specifying a view of an image filled with zero values.</p>
</li>
<li>
<p><code>imageLayout</code> is the layout that the image subresources accessible
from <code>imageView</code> will be in when the shading rate image is accessed.</p>
</li>
</ul>
</div>
</div>
<div class="sect3">
<h4 id="_description_24">Description</h4>
<div class="sidebarblock">
<div class="content">
<div class="title">Valid Usage</div>
<div class="ulist">
<ul>
<li>
<p><a id="VUID-vkCmdBindShadingRateImageNV-None-02058"></a>
The <a href="vkspec.html#features-shadingRateImage">shading rate image</a> feature <strong class="purple">must</strong> be
enabled.</p>
</li>
<li>
<p><a id="VUID-vkCmdBindShadingRateImageNV-imageView-02059"></a>
If <code>imageView</code> is not <a href="#VK_NULL_HANDLE">VK_NULL_HANDLE</a>, it <strong class="purple">must</strong> be a valid
<a href="#VkImageView">VkImageView</a> handle of type <code>VK_IMAGE_VIEW_TYPE_2D</code> or
<code>VK_IMAGE_VIEW_TYPE_2D_ARRAY</code>.</p>
</li>
<li>
<p><a id="VUID-vkCmdBindShadingRateImageNV-imageView-02060"></a>
If <code>imageView</code> is not <a href="#VK_NULL_HANDLE">VK_NULL_HANDLE</a>, it <strong class="purple">must</strong> have a format
of <code>VK_FORMAT_R8_UINT</code>.</p>
</li>
<li>
<p><a id="VUID-vkCmdBindShadingRateImageNV-imageView-02061"></a>
If <code>imageView</code> is not <a href="#VK_NULL_HANDLE">VK_NULL_HANDLE</a>, it <strong class="purple">must</strong> have been
created with a <code>usage</code> value including
<code>VK_IMAGE_USAGE_SHADING_RATE_IMAGE_BIT_NV</code></p>
</li>
<li>
<p><a id="VUID-vkCmdBindShadingRateImageNV-imageView-02062"></a>
If <code>imageView</code> is not <a href="#VK_NULL_HANDLE">VK_NULL_HANDLE</a>, <code>imageLayout</code> <strong class="purple">must</strong>
match the actual <a href="#VkImageLayout">VkImageLayout</a> of each subresource accessible from
<code>imageView</code> at the time the subresource is accessed.</p>
</li>
<li>
<p><a id="VUID-vkCmdBindShadingRateImageNV-imageLayout-02063"></a>
If <code>imageView</code> is not <a href="#VK_NULL_HANDLE">VK_NULL_HANDLE</a>, <code>imageLayout</code> <strong class="purple">must</strong>
be <code>VK_IMAGE_LAYOUT_SHADING_RATE_OPTIMAL_NV</code> or
<code>VK_IMAGE_LAYOUT_GENERAL</code>.</p>
</li>
</ul>
</div>
</div>
</div>
<div class="sidebarblock">
<div class="content">
<div class="title">Valid Usage (Implicit)</div>
<div class="ulist">
<ul>
<li>
<p><a id="VUID-vkCmdBindShadingRateImageNV-commandBuffer-parameter"></a> <code>commandBuffer</code> <strong class="purple">must</strong> be a valid <code>VkCommandBuffer</code> handle</p>
</li>
<li>
<p><a id="VUID-vkCmdBindShadingRateImageNV-imageView-parameter"></a> <code>imageView</code> <strong class="purple">must</strong> be a valid <code>VkImageView</code> handle</p>
</li>
<li>
<p><a id="VUID-vkCmdBindShadingRateImageNV-imageLayout-parameter"></a> <code>imageLayout</code> <strong class="purple">must</strong> be a valid <a href="#VkImageLayout">VkImageLayout</a> value</p>
</li>
<li>
<p><a id="VUID-vkCmdBindShadingRateImageNV-commandBuffer-recording"></a> <code>commandBuffer</code> <strong class="purple">must</strong> be in the <a href="#commandbuffers-lifecycle">recording state</a></p>
</li>
<li>
<p><a id="VUID-vkCmdBindShadingRateImageNV-commandBuffer-cmdpool"></a> The <code>VkCommandPool</code> that <code>commandBuffer</code> was allocated from <strong class="purple">must</strong> support graphics operations</p>
</li>
<li>
<p><a id="VUID-vkCmdBindShadingRateImageNV-commonparent"></a> Both of <code>commandBuffer</code>, and <code>imageView</code> <strong class="purple">must</strong> have been created, allocated, or retrieved from the same <code>VkDevice</code></p>
</li>
</ul>
</div>
</div>
</div>
<div class="sidebarblock">
<div class="content">
<div class="title">Host Synchronization</div>
<div class="ulist">
<ul>
<li>
<p>Host access to <code>commandBuffer</code> <strong class="purple">must</strong> be externally synchronized</p>
</li>
<li>
<p>Host access to the <code>VkCommandPool</code> that <code>commandBuffer</code> was allocated from <strong class="purple">must</strong> be externally synchronized</p>
</li>
</ul>
</div>
</div>
</div>
<div class="sidebarblock">
<div class="content">
<div class="title">Command Properties</div>
<table class="tableblock frame-all grid-all stretch">
<colgroup>
<col style="width: 25%;">
<col style="width: 25%;">
<col style="width: 25%;">
<col style="width: 25%;">
</colgroup>
<thead>
<tr>
<th class="tableblock halign-left valign-top"><a href="#VkCommandBufferLevel">Command Buffer Levels</a></th>
<th class="tableblock halign-left valign-top"><a href="#vkCmdBeginRenderPass">Render Pass Scope</a></th>
<th class="tableblock halign-left valign-top"><a href="#VkQueueFlagBits">Supported Queue Types</a></th>
<th class="tableblock halign-left valign-top"><a href="#synchronization-pipeline-stages-types">Pipeline Type</a></th>
</tr>
</thead>
<tbody>
<tr>
<td class="tableblock halign-left valign-top"><p class="tableblock">Primary<br>
Secondary</p></td>
<td class="tableblock halign-left valign-top"><p class="tableblock">Both</p></td>
<td class="tableblock halign-left valign-top"><p class="tableblock">Graphics</p></td>
<td class="tableblock halign-left valign-top"></td>
</tr>
</tbody>
</table>
</div>
</div>
</div>
<div class="sect3">
<h4 id="_see_also_24">See Also</h4>
<div class="paragraph">
<p><a href="#VkCommandBuffer">VkCommandBuffer</a>, <a href="#VkImageLayout">VkImageLayout</a>, <a href="#VkImageView">VkImageView</a></p>
</div>
</div>
<div class="sect3">
<h4 id="_document_notes_24">Document Notes</h4>
<div class="paragraph">
<p>For more information, see the Vulkan Specification at URL</p>
</div>
<div class="paragraph">
<p><a href="https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#vkCmdBindShadingRateImageNV" class="bare">https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#vkCmdBindShadingRateImageNV</a></p>
</div>
<div class="paragraph">
<p>This page is extracted from the Vulkan Specification.
Fixes and changes should be made to the Specification, not directly.</p>
</div>
<div style="page-break-after: always;"></div>
</div>
</div>
<div class="sect2">
<h3 id="_vkcmdbindtransformfeedbackbuffersext3">vkCmdBindTransformFeedbackBuffersEXT(3)</h3>
<div class="sect3">
<h4 id="_name_25">Name</h4>
<div class="paragraph">
<p>vkCmdBindTransformFeedbackBuffersEXT - Bind transform feedback buffers to a command buffer</p>
</div>
</div>
<div class="sect3">
<h4 id="_c_specification_25">C Specification</h4>
<div class="paragraph">
<p>To bind transform feedback buffers to a command buffer for use in subsequent
draw commands, call:</p>
</div>
<div id="vkCmdBindTransformFeedbackBuffersEXT" class="listingblock">
<div class="content">
<pre class="highlight"><code class="language-c++" data-lang="c++">void vkCmdBindTransformFeedbackBuffersEXT(
    VkCommandBuffer                             commandBuffer,
    uint32_t                                    firstBinding,
    uint32_t                                    bindingCount,
    const VkBuffer*                             pBuffers,
    const VkDeviceSize*                         pOffsets,
    const VkDeviceSize*                         pSizes);</code></pre>
</div>
</div>
</div>
<div class="sect3">
<h4 id="_parameters_25">Parameters</h4>
<div class="ulist">
<ul>
<li>
<p><code>commandBuffer</code> is the command buffer into which the command is
recorded.</p>
</li>
<li>
<p><code>firstBinding</code> is the index of the first transform feedback binding
whose state is updated by the command.</p>
</li>
<li>
<p><code>bindingCount</code> is the number of transform feedback bindings whose
state is updated by the command.</p>
</li>
<li>
<p><code>pBuffers</code> is a pointer to an array of buffer handles.</p>
</li>
<li>
<p><code>pOffsets</code> is a pointer to an array of buffer offsets.</p>
</li>
<li>
<p><code>pSizes</code> is an optional array of buffer sizes, which specifies the
maximum number of bytes to capture to the corresponding transform
feedback buffer.
If <code>pSizes</code> is <code>NULL</code>, or the value of the <code>pSizes</code> array
element is <code>VK_WHOLE_SIZE</code>, then the maximum bytes captured will be
the size of the corresponding buffer minus the buffer offset.</p>
</li>
</ul>
</div>
</div>
<div class="sect3">
<h4 id="_description_25">Description</h4>
<div class="paragraph">
<p>The values taken from elements <span class="eq">i</span> of <code>pBuffers</code>, <code>pOffsets</code> and
<code>pSizes</code> replace the current state for the transform feedback binding
<span class="eq"><code>firstBinding</code> +  i</span>, for <span class="eq">i</span> in <span class="eq">[0,
<code>bindingCount</code>)</span>.
The transform feedback binding is updated to start at the offset indicated
by <code>pOffsets</code>[i] from the start of the buffer <code>pBuffers</code>[i].</p>
</div>
<div class="sidebarblock">
<div class="content">
<div class="title">Valid Usage</div>
<div class="ulist">
<ul>
<li>
<p><a id="VUID-vkCmdBindTransformFeedbackBuffersEXT-transformFeedback-02355"></a>
<code>VkPhysicalDeviceTransformFeedbackFeaturesEXT</code>::<code>transformFeedback</code>
<strong class="purple">must</strong> be enabled</p>
</li>
<li>
<p><a id="VUID-vkCmdBindTransformFeedbackBuffersEXT-firstBinding-02356"></a>
<code>firstBinding</code> <strong class="purple">must</strong> be less than
<code>VkPhysicalDeviceTransformFeedbackPropertiesEXT</code>::<code>maxTransformFeedbackBuffers</code></p>
</li>
<li>
<p><a id="VUID-vkCmdBindTransformFeedbackBuffersEXT-firstBinding-02357"></a>
The sum of <code>firstBinding</code> and <code>bindingCount</code> <strong class="purple">must</strong> be less than
or equal to
<code>VkPhysicalDeviceTransformFeedbackPropertiesEXT</code>::<code>maxTransformFeedbackBuffers</code></p>
</li>
<li>
<p><a id="VUID-vkCmdBindTransformFeedbackBuffersEXT-pOffsets-02358"></a>
All elements of <code>pOffsets</code> <strong class="purple">must</strong> be less than the size of the
corresponding element in <code>pBuffers</code></p>
</li>
<li>
<p><a id="VUID-vkCmdBindTransformFeedbackBuffersEXT-pOffsets-02359"></a>
All elements of <code>pOffsets</code> <strong class="purple">must</strong> be a multiple of 4</p>
</li>
<li>
<p><a id="VUID-vkCmdBindTransformFeedbackBuffersEXT-pBuffers-02360"></a>
All elements of <code>pBuffers</code> <strong class="purple">must</strong> have been created with the
<code>VK_BUFFER_USAGE_TRANSFORM_FEEDBACK_BUFFER_BIT_EXT</code> flag</p>
</li>
<li>
<p><a id="VUID-vkCmdBindTransformFeedbackBuffersEXT-pSize-02361"></a>
If the optional <code>pSize</code> array is specified, each element of
<code>pSizes</code> <strong class="purple">must</strong> either be <code>VK_WHOLE_SIZE</code>, or be less than or
equal to
<code>VkPhysicalDeviceTransformFeedbackPropertiesEXT</code>::<code>maxTransformFeedbackBufferSize</code></p>
</li>
<li>
<p><a id="VUID-vkCmdBindTransformFeedbackBuffersEXT-pSizes-02362"></a>
All elements of <code>pSizes</code> <strong class="purple">must</strong> be less than or equal to the size of
the corresponding buffer in <code>pBuffers</code></p>
</li>
<li>
<p><a id="VUID-vkCmdBindTransformFeedbackBuffersEXT-pOffsets-02363"></a>
All elements of <code>pOffsets</code> plus <code>pSizes</code>, where the
<code>pSizes</code>, element is not <code>VK_WHOLE_SIZE</code>, <strong class="purple">must</strong> be less than or
equal to the size of the corresponding element in <code>pBuffers</code></p>
</li>
<li>
<p><a id="VUID-vkCmdBindTransformFeedbackBuffersEXT-pBuffers-02364"></a>
Each element of <code>pBuffers</code> that is non-sparse <strong class="purple">must</strong> be bound
completely and contiguously to a single <code>VkDeviceMemory</code> object</p>
</li>
<li>
<p><a id="VUID-vkCmdBindTransformFeedbackBuffersEXT-None-02365"></a>
Transform feedback <strong class="purple">must</strong> not be active when the
<code>vkCmdBindTransformFeedbackBuffersEXT</code> command is recorded</p>
</li>
</ul>
</div>
</div>
</div>
<div class="sidebarblock">
<div class="content">
<div class="title">Valid Usage (Implicit)</div>
<div class="ulist">
<ul>
<li>
<p><a id="VUID-vkCmdBindTransformFeedbackBuffersEXT-commandBuffer-parameter"></a> <code>commandBuffer</code> <strong class="purple">must</strong> be a valid <code>VkCommandBuffer</code> handle</p>
</li>
<li>
<p><a id="VUID-vkCmdBindTransformFeedbackBuffersEXT-pBuffers-parameter"></a> <code>pBuffers</code> <strong class="purple">must</strong> be a valid pointer to an array of <code>bindingCount</code> valid <code>VkBuffer</code> handles</p>
</li>
<li>
<p><a id="VUID-vkCmdBindTransformFeedbackBuffersEXT-pOffsets-parameter"></a> <code>pOffsets</code> <strong class="purple">must</strong> be a valid pointer to an array of <code>bindingCount</code> <code>VkDeviceSize</code> values</p>
</li>
<li>
<p><a id="VUID-vkCmdBindTransformFeedbackBuffersEXT-pSizes-parameter"></a> If <code>pSizes</code> is not <code>NULL</code>, <code>pSizes</code> <strong class="purple">must</strong> be a valid pointer to an array of <code>bindingCount</code> <code>VkDeviceSize</code> values</p>
</li>
<li>
<p><a id="VUID-vkCmdBindTransformFeedbackBuffersEXT-commandBuffer-recording"></a> <code>commandBuffer</code> <strong class="purple">must</strong> be in the <a href="#commandbuffers-lifecycle">recording state</a></p>
</li>
<li>
<p><a id="VUID-vkCmdBindTransformFeedbackBuffersEXT-commandBuffer-cmdpool"></a> The <code>VkCommandPool</code> that <code>commandBuffer</code> was allocated from <strong class="purple">must</strong> support graphics operations</p>
</li>
<li>
<p><a id="VUID-vkCmdBindTransformFeedbackBuffersEXT-bindingCount-arraylength"></a> If <code>pSizes</code> is not <code>NULL</code>, <code>bindingCount</code> <strong class="purple">must</strong> be greater than <code>0</code></p>
</li>
<li>
<p><a id="VUID-vkCmdBindTransformFeedbackBuffersEXT-commonparent"></a> Both of <code>commandBuffer</code>, and the elements of <code>pBuffers</code> <strong class="purple">must</strong> have been created, allocated, or retrieved from the same <code>VkDevice</code></p>
</li>
</ul>
</div>
</div>
</div>
<div class="sidebarblock">
<div class="content">
<div class="title">Host Synchronization</div>
<div class="ulist">
<ul>
<li>
<p>Host access to <code>commandBuffer</code> <strong class="purple">must</strong> be externally synchronized</p>
</li>
<li>
<p>Host access to the <code>VkCommandPool</code> that <code>commandBuffer</code> was allocated from <strong class="purple">must</strong> be externally synchronized</p>
</li>
</ul>
</div>
</div>
</div>
<div class="sidebarblock">
<div class="content">
<div class="title">Command Properties</div>
<table class="tableblock frame-all grid-all stretch">
<colgroup>
<col style="width: 25%;">
<col style="width: 25%;">
<col style="width: 25%;">
<col style="width: 25%;">
</colgroup>
<thead>
<tr>
<th class="tableblock halign-left valign-top"><a href="#VkCommandBufferLevel">Command Buffer Levels</a></th>
<th class="tableblock halign-left valign-top"><a href="#vkCmdBeginRenderPass">Render Pass Scope</a></th>
<th class="tableblock halign-left valign-top"><a href="#VkQueueFlagBits">Supported Queue Types</a></th>
<th class="tableblock halign-left valign-top"><a href="#synchronization-pipeline-stages-types">Pipeline Type</a></th>
</tr>
</thead>
<tbody>
<tr>
<td class="tableblock halign-left valign-top"><p class="tableblock">Primary<br>
Secondary</p></td>
<td class="tableblock halign-left valign-top"><p class="tableblock">Both</p></td>
<td class="tableblock halign-left valign-top"><p class="tableblock">Graphics</p></td>
<td class="tableblock halign-left valign-top"></td>
</tr>
</tbody>
</table>
</div>
</div>
</div>
<div class="sect3">
<h4 id="_see_also_25">See Also</h4>
<div class="paragraph">
<p><a href="#VkBuffer">VkBuffer</a>, <a href="#VkCommandBuffer">VkCommandBuffer</a>, <code>VkDeviceSize</code></p>
</div>
</div>
<div class="sect3">
<h4 id="_document_notes_25">Document Notes</h4>
<div class="paragraph">
<p>For more information, see the Vulkan Specification at URL</p>
</div>
<div class="paragraph">
<p><a href="https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#vkCmdBindTransformFeedbackBuffersEXT" class="bare">https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#vkCmdBindTransformFeedbackBuffersEXT</a></p>
</div>
<div class="paragraph">
<p>This page is extracted from the Vulkan Specification.
Fixes and changes should be made to the Specification, not directly.</p>
</div>
<div style="page-break-after: always;"></div>
</div>
</div>
<div class="sect2">
<h3 id="_vkcmdbindvertexbuffers3">vkCmdBindVertexBuffers(3)</h3>
<div class="sect3">
<h4 id="_name_26">Name</h4>
<div class="paragraph">
<p>vkCmdBindVertexBuffers - Bind vertex buffers to a command buffer</p>
</div>
</div>
<div class="sect3">
<h4 id="_c_specification_26">C Specification</h4>
<div class="paragraph">
<p>To bind vertex buffers to a command buffer for use in subsequent draw
commands, call:</p>
</div>
<div id="vkCmdBindVertexBuffers" class="listingblock">
<div class="content">
<pre class="highlight"><code class="language-c++" data-lang="c++">void vkCmdBindVertexBuffers(
    VkCommandBuffer                             commandBuffer,
    uint32_t                                    firstBinding,
    uint32_t                                    bindingCount,
    const VkBuffer*                             pBuffers,
    const VkDeviceSize*                         pOffsets);</code></pre>
</div>
</div>
</div>
<div class="sect3">
<h4 id="_parameters_26">Parameters</h4>
<div class="ulist">
<ul>
<li>
<p><code>commandBuffer</code> is the command buffer into which the command is
recorded.</p>
</li>
<li>
<p><code>firstBinding</code> is the index of the first vertex input binding whose
state is updated by the command.</p>
</li>
<li>
<p><code>bindingCount</code> is the number of vertex input bindings whose state is
updated by the command.</p>
</li>
<li>
<p><code>pBuffers</code> is a pointer to an array of buffer handles.</p>
</li>
<li>
<p><code>pOffsets</code> is a pointer to an array of buffer offsets.</p>
</li>
</ul>
</div>
</div>
<div class="sect3">
<h4 id="_description_26">Description</h4>
<div class="paragraph">
<p>The values taken from elements <span class="eq">i</span> of <code>pBuffers</code> and <code>pOffsets</code>
replace the current state for the vertex input binding
<span class="eq"><code>firstBinding</code> +  i</span>, for <span class="eq">i</span> in <span class="eq">[0,
<code>bindingCount</code>)</span>.
The vertex input binding is updated to start at the offset indicated by
<code>pOffsets</code>[i] from the start of the buffer <code>pBuffers</code>[i].
All vertex input attributes that use each of these bindings will use these
updated addresses in their address calculations for subsequent draw
commands.</p>
</div>
<div class="sidebarblock">
<div class="content">
<div class="title">Valid Usage</div>
<div class="ulist">
<ul>
<li>
<p><a id="VUID-vkCmdBindVertexBuffers-firstBinding-00624"></a>
<code>firstBinding</code> <strong class="purple">must</strong> be less than
<code>VkPhysicalDeviceLimits</code>::<code>maxVertexInputBindings</code></p>
</li>
<li>
<p><a id="VUID-vkCmdBindVertexBuffers-firstBinding-00625"></a>
The sum of <code>firstBinding</code> and <code>bindingCount</code> <strong class="purple">must</strong> be less than
or equal to <code>VkPhysicalDeviceLimits</code>::<code>maxVertexInputBindings</code></p>
</li>
<li>
<p><a id="VUID-vkCmdBindVertexBuffers-pOffsets-00626"></a>
All elements of <code>pOffsets</code> <strong class="purple">must</strong> be less than the size of the
corresponding element in <code>pBuffers</code></p>
</li>
<li>
<p><a id="VUID-vkCmdBindVertexBuffers-pBuffers-00627"></a>
All elements of <code>pBuffers</code> <strong class="purple">must</strong> have been created with the
<code>VK_BUFFER_USAGE_VERTEX_BUFFER_BIT</code> flag</p>
</li>
<li>
<p><a id="VUID-vkCmdBindVertexBuffers-pBuffers-00628"></a>
Each element of <code>pBuffers</code> that is non-sparse <strong class="purple">must</strong> be bound
completely and contiguously to a single <code>VkDeviceMemory</code> object</p>
</li>
</ul>
</div>
</div>
</div>
<div class="sidebarblock">
<div class="content">
<div class="title">Valid Usage (Implicit)</div>
<div class="ulist">
<ul>
<li>
<p><a id="VUID-vkCmdBindVertexBuffers-commandBuffer-parameter"></a> <code>commandBuffer</code> <strong class="purple">must</strong> be a valid <code>VkCommandBuffer</code> handle</p>
</li>
<li>
<p><a id="VUID-vkCmdBindVertexBuffers-pBuffers-parameter"></a> <code>pBuffers</code> <strong class="purple">must</strong> be a valid pointer to an array of <code>bindingCount</code> valid <code>VkBuffer</code> handles</p>
</li>
<li>
<p><a id="VUID-vkCmdBindVertexBuffers-pOffsets-parameter"></a> <code>pOffsets</code> <strong class="purple">must</strong> be a valid pointer to an array of <code>bindingCount</code> <code>VkDeviceSize</code> values</p>
</li>
<li>
<p><a id="VUID-vkCmdBindVertexBuffers-commandBuffer-recording"></a> <code>commandBuffer</code> <strong class="purple">must</strong> be in the <a href="#commandbuffers-lifecycle">recording state</a></p>
</li>
<li>
<p><a id="VUID-vkCmdBindVertexBuffers-commandBuffer-cmdpool"></a> The <code>VkCommandPool</code> that <code>commandBuffer</code> was allocated from <strong class="purple">must</strong> support graphics operations</p>
</li>
<li>
<p><a id="VUID-vkCmdBindVertexBuffers-bindingCount-arraylength"></a> <code>bindingCount</code> <strong class="purple">must</strong> be greater than <code>0</code></p>
</li>
<li>
<p><a id="VUID-vkCmdBindVertexBuffers-commonparent"></a> Both of <code>commandBuffer</code>, and the elements of <code>pBuffers</code> <strong class="purple">must</strong> have been created, allocated, or retrieved from the same <code>VkDevice</code></p>
</li>
</ul>
</div>
</div>
</div>
<div class="sidebarblock">
<div class="content">
<div class="title">Host Synchronization</div>
<div class="ulist">
<ul>
<li>
<p>Host access to <code>commandBuffer</code> <strong class="purple">must</strong> be externally synchronized</p>
</li>
<li>
<p>Host access to the <code>VkCommandPool</code> that <code>commandBuffer</code> was allocated from <strong class="purple">must</strong> be externally synchronized</p>
</li>
</ul>
</div>
</div>
</div>
<div class="sidebarblock">
<div class="content">
<div class="title">Command Properties</div>
<table class="tableblock frame-all grid-all stretch">
<colgroup>
<col style="width: 25%;">
<col style="width: 25%;">
<col style="width: 25%;">
<col style="width: 25%;">
</colgroup>
<thead>
<tr>
<th class="tableblock halign-left valign-top"><a href="#VkCommandBufferLevel">Command Buffer Levels</a></th>
<th class="tableblock halign-left valign-top"><a href="#vkCmdBeginRenderPass">Render Pass Scope</a></th>
<th class="tableblock halign-left valign-top"><a href="#VkQueueFlagBits">Supported Queue Types</a></th>
<th class="tableblock halign-left valign-top"><a href="#synchronization-pipeline-stages-types">Pipeline Type</a></th>
</tr>
</thead>
<tbody>
<tr>
<td class="tableblock halign-left valign-top"><p class="tableblock">Primary<br>
Secondary</p></td>
<td class="tableblock halign-left valign-top"><p class="tableblock">Both</p></td>
<td class="tableblock halign-left valign-top"><p class="tableblock">Graphics</p></td>
<td class="tableblock halign-left valign-top"></td>
</tr>
</tbody>
</table>
</div>
</div>
</div>
<div class="sect3">
<h4 id="_see_also_26">See Also</h4>
<div class="paragraph">
<p><a href="#VkBuffer">VkBuffer</a>, <a href="#VkCommandBuffer">VkCommandBuffer</a>, <code>VkDeviceSize</code></p>
</div>
</div>
<div class="sect3">
<h4 id="_document_notes_26">Document Notes</h4>
<div class="paragraph">
<p>For more information, see the Vulkan Specification at URL</p>
</div>
<div class="paragraph">
<p><a href="https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#vkCmdBindVertexBuffers" class="bare">https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#vkCmdBindVertexBuffers</a></p>
</div>
<div class="paragraph">
<p>This page is extracted from the Vulkan Specification.
Fixes and changes should be made to the Specification, not directly.</p>
</div>
<div style="page-break-after: always;"></div>
</div>
</div>
<div class="sect2">
<h3 id="_vkcmdblitimage3">vkCmdBlitImage(3)</h3>
<div class="sect3">
<h4 id="_name_27">Name</h4>
<div class="paragraph">
<p>vkCmdBlitImage - Copy regions of an image, potentially performing format conversion,</p>
</div>
</div>
<div class="sect3">
<h4 id="_c_specification_27">C Specification</h4>
<div class="paragraph">
<p>To copy regions of a source image into a destination image, potentially
performing format conversion, arbitrary scaling, and filtering, call:</p>
</div>
<div id="vkCmdBlitImage" class="listingblock">
<div class="content">
<pre class="highlight"><code class="language-c++" data-lang="c++">void vkCmdBlitImage(
    VkCommandBuffer                             commandBuffer,
    VkImage                                     srcImage,
    VkImageLayout                               srcImageLayout,
    VkImage                                     dstImage,
    VkImageLayout                               dstImageLayout,
    uint32_t                                    regionCount,
    const VkImageBlit*                          pRegions,
    VkFilter                                    filter);</code></pre>
</div>
</div>
</div>
<div class="sect3">
<h4 id="_parameters_27">Parameters</h4>
<div class="ulist">
<ul>
<li>
<p><code>commandBuffer</code> is the command buffer into which the command will be
recorded.</p>
</li>
<li>
<p><code>srcImage</code> is the source image.</p>
</li>
<li>
<p><code>srcImageLayout</code> is the layout of the source image subresources for
the blit.</p>
</li>
<li>
<p><code>dstImage</code> is the destination image.</p>
</li>
<li>
<p><code>dstImageLayout</code> is the layout of the destination image subresources
for the blit.</p>
</li>
<li>
<p><code>regionCount</code> is the number of regions to blit.</p>
</li>
<li>
<p><code>pRegions</code> is a pointer to an array of <a href="#VkImageBlit">VkImageBlit</a> structures
specifying the regions to blit.</p>
</li>
<li>
<p><code>filter</code> is a <a href="#VkFilter">VkFilter</a> specifying the filter to apply if the
blits require scaling.</p>
</li>
</ul>
</div>
</div>
<div class="sect3">
<h4 id="_description_27">Description</h4>
<div class="paragraph">
<p><code>vkCmdBlitImage</code> <strong class="purple">must</strong> not be used for multisampled source or
destination images.
Use <a href="#vkCmdResolveImage">vkCmdResolveImage</a> for this purpose.</p>
</div>
<div class="paragraph">
<p>As the sizes of the source and destination extents <strong class="purple">can</strong> differ in any
dimension, texels in the source extent are scaled and filtered to the
destination extent.
Scaling occurs via the following operations:</p>
</div>
<div class="ulist">
<ul>
<li>
<p>For each destination texel, the integer coordinate of that texel is
  converted to an unnormalized texture coordinate, using the effective
  inverse of the equations described in
  <a href="vkspec.html#textures-unnormalized-to-integer">unnormalized to integer
  conversion</a>:
:: <span class="eq">u<sub>base</sub> = i +  ½</span>
:: <span class="eq">v<sub>base</sub> = j +  ½</span>
:: <span class="eq">w<sub>base</sub> = k +  ½</span></p>
</li>
<li>
<p>These base coordinates are then offset by the first destination offset:
:: <span class="eq">u<sub>offset</sub> = u<sub>base</sub> - x<sub>dst0</sub></span>
:: <span class="eq">v<sub>offset</sub> = v<sub>base</sub> - y<sub>dst0</sub></span>
:: <span class="eq">w<sub>offset</sub> = w<sub>base</sub> - z<sub>dst0</sub></span>
:: <span class="eq">a<sub>offset</sub> = a - <code>baseArrayCount</code><sub>dst</sub></span></p>
</li>
<li>
<p>The scale is determined from the source and destination regions, and
  applied to the offset coordinates:
:: <span class="eq">scale_u = (x<sub>src1</sub> - x<sub>src0</sub>) / (x<sub>dst1</sub> - x<sub>dst0</sub>)</span>
:: <span class="eq">scale_v = (y<sub>src1</sub> - y<sub>src0</sub>) / (y<sub>dst1</sub> - y<sub>dst0</sub>)</span>
:: <span class="eq">scale_w = (z<sub>src1</sub> - z<sub>src0</sub>) / (z<sub>dst1</sub> - z<sub>dst0</sub>)</span>
:: <span class="eq">u<sub>scaled</sub> = u<sub>offset</sub> * scale<sub>u</sub></span>
:: <span class="eq">v<sub>scaled</sub> = v<sub>offset</sub> * scale<sub>v</sub></span>
:: <span class="eq">w<sub>scaled</sub> = w<sub>offset</sub> * scale<sub>w</sub></span></p>
</li>
<li>
<p>Finally the source offset is added to the scaled coordinates, to
  determine the final unnormalized coordinates used to sample from
  <code>srcImage</code>:
:: <span class="eq">u = u<sub>scaled</sub> +  x<sub>src0</sub></span>
:: <span class="eq">v = v<sub>scaled</sub> +  y<sub>src0</sub></span>
:: <span class="eq">w = w<sub>scaled</sub> +  z<sub>src0</sub></span>
:: <span class="eq">q = <code>mipLevel</code></span>
:: <span class="eq">a = a<sub>offset</sub> +  <code>baseArrayCount</code><sub>src</sub></span></p>
</li>
</ul>
</div>
<div class="paragraph">
<p>These coordinates are used to sample from the source image, as described in
<a href="vkspec.html#textures">Image Operations chapter</a>, with the filter mode equal to that
of <code>filter</code>, a mipmap mode of <code>VK_SAMPLER_MIPMAP_MODE_NEAREST</code> and
an address mode of <code>VK_SAMPLER_ADDRESS_MODE_CLAMP_TO_EDGE</code>.
Implementations <strong class="purple">must</strong> clamp at the edge of the source image, and <strong class="purple">may</strong>
additionally clamp to the edge of the source region.</p>
</div>
<div class="admonitionblock note">
<table>
<tr>
<td class="icon">
<i class="fa icon-note" title="Note"></i>
</td>
<td class="content">
<div class="title">Note</div>
<div class="paragraph">
<p>Due to allowable rounding errors in the generation of the source texture
coordinates, it is not always possible to guarantee exactly which source
texels will be sampled for a given blit.
As rounding errors are implementation dependent, the exact results of a
blitting operation are also implementation dependent.</p>
</div>
</td>
</tr>
</table>
</div>
<div class="paragraph">
<p>Blits are done layer by layer starting with the <code>baseArrayLayer</code> member
of <code>srcSubresource</code> for the source and <code>dstSubresource</code> for the
destination.
<code>layerCount</code> layers are blitted to the destination image.</p>
</div>
<div class="paragraph">
<p>3D textures are blitted slice by slice.
Slices in the source region bounded by <code>srcOffsets</code>[0].<code>z</code> and
<code>srcOffsets</code>[1].<code>z</code> are copied to slices in the destination region
bounded by <code>dstOffsets</code>[0].<code>z</code> and <code>dstOffsets</code>[1].<code>z</code>.
For each destination slice, a source <strong>z</strong> coordinate is linearly interpolated
between <code>srcOffsets</code>[0].<code>z</code> and <code>srcOffsets</code>[1].<code>z</code>.
If the <code>filter</code> parameter is <code>VK_FILTER_LINEAR</code> then the value
sampled from the source image is taken by doing linear filtering using the
interpolated <strong>z</strong> coordinate.
If <code>filter</code> parameter is <code>VK_FILTER_NEAREST</code> then the value sampled
from the source image is taken from the single nearest slice, with an
implementation-dependent arithmetic rounding mode.</p>
</div>
<div class="paragraph">
<p>The following filtering and conversion rules apply:</p>
</div>
<div class="ulist">
<ul>
<li>
<p>Integer formats <strong class="purple">can</strong> only be converted to other integer formats with the
same signedness.</p>
</li>
<li>
<p>No format conversion is supported between depth/stencil images.
The formats <strong class="purple">must</strong> match.</p>
</li>
<li>
<p>Format conversions on unorm, snorm, unscaled and packed float formats of
the copied aspect of the image are performed by first converting the
pixels to float values.</p>
</li>
<li>
<p>For sRGB source formats, nonlinear RGB values are converted to linear
representation prior to filtering.</p>
</li>
<li>
<p>After filtering, the float values are first clamped and then cast to the
destination image format.
In case of sRGB destination format, linear RGB values are converted to
nonlinear representation before writing the pixel to the image.</p>
</li>
</ul>
</div>
<div class="paragraph">
<p>Signed and unsigned integers are converted by first clamping to the
representable range of the destination format, then casting the value.</p>
</div>
<div class="sidebarblock">
<div class="content">
<div class="title">Valid Usage</div>
<div class="ulist">
<ul>
<li>
<p><a id="VUID-vkCmdBlitImage-pRegions-00215"></a>
The source region specified by each element of <code>pRegions</code> <strong class="purple">must</strong> be a
region that is contained within <code>srcImage</code></p>
</li>
<li>
<p><a id="VUID-vkCmdBlitImage-pRegions-00216"></a>
The destination region specified by each element of <code>pRegions</code> <strong class="purple">must</strong>
be a region that is contained within <code>dstImage</code></p>
</li>
<li>
<p><a id="VUID-vkCmdBlitImage-pRegions-00217"></a>
The union of all destination regions, specified by the elements of
<code>pRegions</code>, <strong class="purple">must</strong> not overlap in memory with any texel that <strong class="purple">may</strong> be
sampled during the blit operation</p>
</li>
<li>
<p><a id="VUID-vkCmdBlitImage-srcImage-01999"></a>
The <a href="vkspec.html#resources-image-format-features">format features</a> of
<code>srcImage</code> <strong class="purple">must</strong> contain <code>VK_FORMAT_FEATURE_BLIT_SRC_BIT</code>.</p>
</li>
<li>
<p><a id="VUID-vkCmdBlitImage-srcImage-01561"></a>
<code>srcImage</code> <strong class="purple">must</strong> not use a format listed in
<a href="vkspec.html#formats-requiring-sampler-ycbcr-conversion" class="bare">html/vkspec.html#formats-requiring-sampler-ycbcr-conversion</a></p>
</li>
<li>
<p><a id="VUID-vkCmdBlitImage-srcImage-00219"></a>
<code>srcImage</code> <strong class="purple">must</strong> have been created with
<code>VK_IMAGE_USAGE_TRANSFER_SRC_BIT</code> usage flag</p>
</li>
<li>
<p><a id="VUID-vkCmdBlitImage-srcImage-00220"></a>
If <code>srcImage</code> is non-sparse then it <strong class="purple">must</strong> be bound completely and
contiguously to a single <code>VkDeviceMemory</code> object</p>
</li>
<li>
<p><a id="VUID-vkCmdBlitImage-srcImageLayout-00221"></a>
<code>srcImageLayout</code> <strong class="purple">must</strong> specify the layout of the image subresources
of <code>srcImage</code> specified in <code>pRegions</code> at the time this command
is executed on a <code>VkDevice</code></p>
</li>
<li>
<p><a id="VUID-vkCmdBlitImage-srcImageLayout-01398"></a>
<code>srcImageLayout</code> <strong class="purple">must</strong> be <code>VK_IMAGE_LAYOUT_SHARED_PRESENT_KHR</code>,
<code>VK_IMAGE_LAYOUT_TRANSFER_SRC_OPTIMAL</code> or
<code>VK_IMAGE_LAYOUT_GENERAL</code></p>
</li>
<li>
<p><a id="VUID-vkCmdBlitImage-dstImage-02000"></a>
The <a href="vkspec.html#resources-image-format-features">format features</a> of
<code>dstImage</code> <strong class="purple">must</strong> contain <code>VK_FORMAT_FEATURE_BLIT_DST_BIT</code>.</p>
</li>
<li>
<p><a id="VUID-vkCmdBlitImage-dstImage-01562"></a>
<code>dstImage</code> <strong class="purple">must</strong> not use a format listed in
<a href="vkspec.html#formats-requiring-sampler-ycbcr-conversion" class="bare">html/vkspec.html#formats-requiring-sampler-ycbcr-conversion</a></p>
</li>
<li>
<p><a id="VUID-vkCmdBlitImage-dstImage-00224"></a>
<code>dstImage</code> <strong class="purple">must</strong> have been created with
<code>VK_IMAGE_USAGE_TRANSFER_DST_BIT</code> usage flag</p>
</li>
<li>
<p><a id="VUID-vkCmdBlitImage-dstImage-00225"></a>
If <code>dstImage</code> is non-sparse then it <strong class="purple">must</strong> be bound completely and
contiguously to a single <code>VkDeviceMemory</code> object</p>
</li>
<li>
<p><a id="VUID-vkCmdBlitImage-dstImageLayout-00226"></a>
<code>dstImageLayout</code> <strong class="purple">must</strong> specify the layout of the image subresources
of <code>dstImage</code> specified in <code>pRegions</code> at the time this command
is executed on a <code>VkDevice</code></p>
</li>
<li>
<p><a id="VUID-vkCmdBlitImage-dstImageLayout-01399"></a>
<code>dstImageLayout</code> <strong class="purple">must</strong> be <code>VK_IMAGE_LAYOUT_SHARED_PRESENT_KHR</code>,
<code>VK_IMAGE_LAYOUT_TRANSFER_DST_OPTIMAL</code> or
<code>VK_IMAGE_LAYOUT_GENERAL</code></p>
</li>
<li>
<p><a id="VUID-vkCmdBlitImage-srcImage-00228"></a>
The sample count of <code>srcImage</code> and <code>dstImage</code> <strong class="purple">must</strong> both be
equal to <code>VK_SAMPLE_COUNT_1_BIT</code></p>
</li>
<li>
<p><a id="VUID-vkCmdBlitImage-srcImage-00229"></a>
If either of <code>srcImage</code> or <code>dstImage</code> was created with a signed
integer <a href="#VkFormat">VkFormat</a>, the other <strong class="purple">must</strong> also have been created with a
signed integer <a href="#VkFormat">VkFormat</a></p>
</li>
<li>
<p><a id="VUID-vkCmdBlitImage-srcImage-00230"></a>
If either of <code>srcImage</code> or <code>dstImage</code> was created with an
unsigned integer <a href="#VkFormat">VkFormat</a>, the other <strong class="purple">must</strong> also have been created
with an unsigned integer <a href="#VkFormat">VkFormat</a></p>
</li>
<li>
<p><a id="VUID-vkCmdBlitImage-srcImage-00231"></a>
If either of <code>srcImage</code> or <code>dstImage</code> was created with a
depth/stencil format, the other <strong class="purple">must</strong> have exactly the same format</p>
</li>
<li>
<p><a id="VUID-vkCmdBlitImage-srcImage-00232"></a>
If <code>srcImage</code> was created with a depth/stencil format, <code>filter</code>
<strong class="purple">must</strong> be <code>VK_FILTER_NEAREST</code></p>
</li>
<li>
<p><a id="VUID-vkCmdBlitImage-srcImage-00233"></a>
<code>srcImage</code> <strong class="purple">must</strong> have been created with a <code>samples</code> value of
<code>VK_SAMPLE_COUNT_1_BIT</code></p>
</li>
<li>
<p><a id="VUID-vkCmdBlitImage-dstImage-00234"></a>
<code>dstImage</code> <strong class="purple">must</strong> have been created with a <code>samples</code> value of
<code>VK_SAMPLE_COUNT_1_BIT</code></p>
</li>
<li>
<p><a id="VUID-vkCmdBlitImage-filter-02001"></a>
If <code>filter</code> is <code>VK_FILTER_LINEAR</code>, then the
<a href="vkspec.html#resources-image-format-features">format features</a> of <code>srcImage</code>
<strong class="purple">must</strong> contain <code>VK_FORMAT_FEATURE_SAMPLED_IMAGE_FILTER_LINEAR_BIT</code>.</p>
</li>
<li>
<p><a id="VUID-vkCmdBlitImage-filter-02002"></a>
If <code>filter</code> is <code>VK_FILTER_CUBIC_EXT</code>, then the
<a href="vkspec.html#resources-image-format-features">format features</a> of <code>srcImage</code>
<strong class="purple">must</strong> contain
<code>VK_FORMAT_FEATURE_SAMPLED_IMAGE_FILTER_CUBIC_BIT_EXT</code>.</p>
</li>
<li>
<p><a id="VUID-vkCmdBlitImage-filter-00237"></a>
If <code>filter</code> is <code>VK_FILTER_CUBIC_EXT</code>, <code>srcImage</code> <strong class="purple">must</strong> have
a <a href="#VkImageType">VkImageType</a> of <code>VK_IMAGE_TYPE_2D</code></p>
</li>
<li>
<p><a id="VUID-vkCmdBlitImage-commandBuffer-01834"></a>
If <code>commandBuffer</code> is an unprotected command buffer, then
<code>srcImage</code> <strong class="purple">must</strong> not be a protected image</p>
</li>
<li>
<p><a id="VUID-vkCmdBlitImage-commandBuffer-01835"></a>
If <code>commandBuffer</code> is an unprotected command buffer, then
<code>dstImage</code> <strong class="purple">must</strong> not be a protected image</p>
</li>
<li>
<p><a id="VUID-vkCmdBlitImage-commandBuffer-01836"></a>
If <code>commandBuffer</code> is a protected command buffer, then
<code>dstImage</code> <strong class="purple">must</strong> not be an unprotected image</p>
</li>
<li>
<p><a id="VUID-vkCmdBlitImage-srcSubresource-01705"></a>
The <code>srcSubresource.mipLevel</code> member of each element of
<code>pRegions</code> <strong class="purple">must</strong> be less than the <code>mipLevels</code> specified in
<a href="#VkImageCreateInfo">VkImageCreateInfo</a> when <code>srcImage</code> was created</p>
</li>
<li>
<p><a id="VUID-vkCmdBlitImage-dstSubresource-01706"></a>
The <code>dstSubresource.mipLevel</code> member of each element of
<code>pRegions</code> <strong class="purple">must</strong> be less than the <code>mipLevels</code> specified in
<a href="#VkImageCreateInfo">VkImageCreateInfo</a> when <code>dstImage</code> was created</p>
</li>
<li>
<p><a id="VUID-vkCmdBlitImage-srcSubresource-01707"></a>
The <span class="eq"><code>srcSubresource.baseArrayLayer</code> + 
<code>srcSubresource.layerCount</code></span> of each element of <code>pRegions</code> <strong class="purple">must</strong>
be less than or equal to the <code>arrayLayers</code> specified in
<a href="#VkImageCreateInfo">VkImageCreateInfo</a> when <code>srcImage</code> was created</p>
</li>
<li>
<p><a id="VUID-vkCmdBlitImage-dstSubresource-01708"></a>
The <span class="eq"><code>dstSubresource.baseArrayLayer</code> + 
<code>dstSubresource.layerCount</code></span> of each element of <code>pRegions</code> <strong class="purple">must</strong>
be less than or equal to the <code>arrayLayers</code> specified in
<a href="#VkImageCreateInfo">VkImageCreateInfo</a> when <code>dstImage</code> was created</p>
</li>
<li>
<p><a id="VUID-vkCmdBlitImage-dstImage-02545"></a>
<code>dstImage</code> and <code>srcImage</code> <strong class="purple">must</strong> not have been created with
<code>flags</code> containing <code>VK_IMAGE_CREATE_SUBSAMPLED_BIT_EXT</code></p>
</li>
</ul>
</div>
</div>
</div>
<div class="sidebarblock">
<div class="content">
<div class="title">Valid Usage (Implicit)</div>
<div class="ulist">
<ul>
<li>
<p><a id="VUID-vkCmdBlitImage-commandBuffer-parameter"></a> <code>commandBuffer</code> <strong class="purple">must</strong> be a valid <code>VkCommandBuffer</code> handle</p>
</li>
<li>
<p><a id="VUID-vkCmdBlitImage-srcImage-parameter"></a> <code>srcImage</code> <strong class="purple">must</strong> be a valid <code>VkImage</code> handle</p>
</li>
<li>
<p><a id="VUID-vkCmdBlitImage-srcImageLayout-parameter"></a> <code>srcImageLayout</code> <strong class="purple">must</strong> be a valid <a href="#VkImageLayout">VkImageLayout</a> value</p>
</li>
<li>
<p><a id="VUID-vkCmdBlitImage-dstImage-parameter"></a> <code>dstImage</code> <strong class="purple">must</strong> be a valid <code>VkImage</code> handle</p>
</li>
<li>
<p><a id="VUID-vkCmdBlitImage-dstImageLayout-parameter"></a> <code>dstImageLayout</code> <strong class="purple">must</strong> be a valid <a href="#VkImageLayout">VkImageLayout</a> value</p>
</li>
<li>
<p><a id="VUID-vkCmdBlitImage-pRegions-parameter"></a> <code>pRegions</code> <strong class="purple">must</strong> be a valid pointer to an array of <code>regionCount</code> valid <code>VkImageBlit</code> structures</p>
</li>
<li>
<p><a id="VUID-vkCmdBlitImage-filter-parameter"></a> <code>filter</code> <strong class="purple">must</strong> be a valid <a href="#VkFilter">VkFilter</a> value</p>
</li>
<li>
<p><a id="VUID-vkCmdBlitImage-commandBuffer-recording"></a> <code>commandBuffer</code> <strong class="purple">must</strong> be in the <a href="#commandbuffers-lifecycle">recording state</a></p>
</li>
<li>
<p><a id="VUID-vkCmdBlitImage-commandBuffer-cmdpool"></a> The <code>VkCommandPool</code> that <code>commandBuffer</code> was allocated from <strong class="purple">must</strong> support graphics operations</p>
</li>
<li>
<p><a id="VUID-vkCmdBlitImage-renderpass"></a> This command <strong class="purple">must</strong> only be called outside of a render pass instance</p>
</li>
<li>
<p><a id="VUID-vkCmdBlitImage-regionCount-arraylength"></a> <code>regionCount</code> <strong class="purple">must</strong> be greater than <code>0</code></p>
</li>
<li>
<p><a id="VUID-vkCmdBlitImage-commonparent"></a> Each of <code>commandBuffer</code>, <code>dstImage</code>, and <code>srcImage</code> <strong class="purple">must</strong> have been created, allocated, or retrieved from the same <code>VkDevice</code></p>
</li>
</ul>
</div>
</div>
</div>
<div class="sidebarblock">
<div class="content">
<div class="title">Host Synchronization</div>
<div class="ulist">
<ul>
<li>
<p>Host access to <code>commandBuffer</code> <strong class="purple">must</strong> be externally synchronized</p>
</li>
<li>
<p>Host access to the <code>VkCommandPool</code> that <code>commandBuffer</code> was allocated from <strong class="purple">must</strong> be externally synchronized</p>
</li>
</ul>
</div>
</div>
</div>
<div class="sidebarblock">
<div class="content">
<div class="title">Command Properties</div>
<table class="tableblock frame-all grid-all stretch">
<colgroup>
<col style="width: 25%;">
<col style="width: 25%;">
<col style="width: 25%;">
<col style="width: 25%;">
</colgroup>
<thead>
<tr>
<th class="tableblock halign-left valign-top"><a href="#VkCommandBufferLevel">Command Buffer Levels</a></th>
<th class="tableblock halign-left valign-top"><a href="#vkCmdBeginRenderPass">Render Pass Scope</a></th>
<th class="tableblock halign-left valign-top"><a href="#VkQueueFlagBits">Supported Queue Types</a></th>
<th class="tableblock halign-left valign-top"><a href="#synchronization-pipeline-stages-types">Pipeline Type</a></th>
</tr>
</thead>
<tbody>
<tr>
<td class="tableblock halign-left valign-top"><p class="tableblock">Primary<br>
Secondary</p></td>
<td class="tableblock halign-left valign-top"><p class="tableblock">Outside</p></td>
<td class="tableblock halign-left valign-top"><p class="tableblock">Graphics</p></td>
<td class="tableblock halign-left valign-top"><p class="tableblock">Transfer</p></td>
</tr>
</tbody>
</table>
</div>
</div>
</div>
<div class="sect3">
<h4 id="_see_also_27">See Also</h4>
<div class="paragraph">
<p><a href="#VkCommandBuffer">VkCommandBuffer</a>, <a href="#VkFilter">VkFilter</a>, <a href="#VkImage">VkImage</a>, <a href="#VkImageBlit">VkImageBlit</a>, <a href="#VkImageLayout">VkImageLayout</a></p>
</div>
</div>
<div class="sect3">
<h4 id="_document_notes_27">Document Notes</h4>
<div class="paragraph">
<p>For more information, see the Vulkan Specification at URL</p>
</div>
<div class="paragraph">
<p><a href="https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#vkCmdBlitImage" class="bare">https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#vkCmdBlitImage</a></p>
</div>
<div class="paragraph">
<p>This page is extracted from the Vulkan Specification.
Fixes and changes should be made to the Specification, not directly.</p>
</div>
<div style="page-break-after: always;"></div>
</div>
</div>
<div class="sect2">
<h3 id="_vkcmdbuildaccelerationstructurenv3">vkCmdBuildAccelerationStructureNV(3)</h3>
<div class="sect3">
<h4 id="_name_28">Name</h4>
<div class="paragraph">
<p>vkCmdBuildAccelerationStructureNV - Build an acceleration structure</p>
</div>
</div>
<div class="sect3">
<h4 id="_c_specification_28">C Specification</h4>
<div class="paragraph">
<p>To build an acceleration structure call:</p>
</div>
<div id="vkCmdBuildAccelerationStructureNV" class="listingblock">
<div class="content">
<pre class="highlight"><code class="language-c++" data-lang="c++">void vkCmdBuildAccelerationStructureNV(
    VkCommandBuffer                             commandBuffer,
    const VkAccelerationStructureInfoNV*        pInfo,
    VkBuffer                                    instanceData,
    VkDeviceSize                                instanceOffset,
    VkBool32                                    update,
    VkAccelerationStructureNV                   dst,
    VkAccelerationStructureNV                   src,
    VkBuffer                                    scratch,
    VkDeviceSize                                scratchOffset);</code></pre>
</div>
</div>
</div>
<div class="sect3">
<h4 id="_parameters_28">Parameters</h4>
<div class="ulist">
<ul>
<li>
<p><code>commandBuffer</code> is the command buffer into which the command will be
recorded.</p>
</li>
<li>
<p><code>pInfo</code> contains the shared information for the acceleration
structure&#8217;s structure.</p>
</li>
<li>
<p><code>instanceData</code> is the buffer containing instance data that will be
used to build the acceleration structure as described in
<a href="vkspec.html#acceleration-structure-instance">Accelerator structure instances.</a>
This parameter <strong class="purple">must</strong> be <code>NULL</code> for bottom level acceleration structures.</p>
</li>
<li>
<p><code>instanceOffset</code> is the offset in bytes (relative to the start of
<code>instanceData</code>) at which the instance data is located.</p>
</li>
<li>
<p><code>update</code> specifies whether to update the <code>dst</code> acceleration
structure with the data in <code>src</code>.</p>
</li>
<li>
<p><code>dst</code> points to the target acceleration structure for the build.</p>
</li>
<li>
<p><code>src</code> points to an existing acceleration structure that is to be
used to update the <code>dst</code> acceleration structure.</p>
</li>
<li>
<p><code>scratch</code> is the <a href="#VkBuffer">VkBuffer</a> that will be used as scratch memory
for the build.</p>
</li>
<li>
<p><code>scratchOffset</code> is the offset in bytes relative to the start of
<code>scratch</code> that will be used as a scratch memory.</p>
</li>
</ul>
</div>
</div>
<div class="sect3">
<h4 id="_description_28">Description</h4>
<div class="sidebarblock">
<div class="content">
<div class="title">Valid Usage</div>
<div class="ulist">
<ul>
<li>
<p><a id="VUID-vkCmdBuildAccelerationStructureNV-geometryCount-02241"></a>
<code>geometryCount</code> <strong class="purple">must</strong> be less than or equal to
<a href="#VkPhysicalDeviceRayTracingPropertiesNV">VkPhysicalDeviceRayTracingPropertiesNV</a>::<code>maxGeometryCount</code></p>
</li>
<li>
<p><a id="VUID-vkCmdBuildAccelerationStructureNV-dst-02488"></a>
<code>dst</code> <strong class="purple">must</strong> have been created with compatible
<a href="#VkAccelerationStructureInfoNV">VkAccelerationStructureInfoNV</a> where
<a href="#VkAccelerationStructureInfoNV">VkAccelerationStructureInfoNV</a>::<code>type</code> and
<a href="#VkAccelerationStructureInfoNV">VkAccelerationStructureInfoNV</a>::<code>flags</code> are identical,
<a href="#VkAccelerationStructureInfoNV">VkAccelerationStructureInfoNV</a>::<code>instanceCount</code> and
<a href="#VkAccelerationStructureInfoNV">VkAccelerationStructureInfoNV</a>::<code>geometryCount</code> for <code>dst</code>
are greater than or equal to the build size and each geometry in
<a href="#VkAccelerationStructureInfoNV">VkAccelerationStructureInfoNV</a>::<code>pGeometries</code> for <code>dst</code> has
greater than or equal to the number of vertices, indices, and AABBs.</p>
</li>
<li>
<p><a id="VUID-vkCmdBuildAccelerationStructureNV-update-02489"></a>
If <code>update</code> is <code>VK_TRUE</code>, <code>src</code> <strong class="purple">must</strong> not be
<a href="#VK_NULL_HANDLE">VK_NULL_HANDLE</a></p>
</li>
<li>
<p><a id="VUID-vkCmdBuildAccelerationStructureNV-update-02490"></a>
If <code>update</code> is <code>VK_TRUE</code>, <code>src</code> <strong class="purple">must</strong> have been built before
with <code>VK_BUILD_ACCELERATION_STRUCTURE_ALLOW_UPDATE_BIT_NV</code> set in
<a href="#VkAccelerationStructureInfoNV">VkAccelerationStructureInfoNV</a>::<code>flags</code></p>
</li>
<li>
<p><a id="VUID-vkCmdBuildAccelerationStructureNV-update-02491"></a>
If <code>update</code> is <code>VK_FALSE</code>, The <code>size</code> member of the
<a href="#VkMemoryRequirements">VkMemoryRequirements</a> structure returned from a call to
<a href="#vkGetAccelerationStructureMemoryRequirementsNV">vkGetAccelerationStructureMemoryRequirementsNV</a> with
<a href="#VkAccelerationStructureMemoryRequirementsInfoNV">VkAccelerationStructureMemoryRequirementsInfoNV</a>::<code>accelerationStructure</code>
set to <code>dst</code> and
<a href="#VkAccelerationStructureMemoryRequirementsInfoNV">VkAccelerationStructureMemoryRequirementsInfoNV</a>::<code>type</code> set to
<code>VK_ACCELERATION_STRUCTURE_MEMORY_REQUIREMENTS_TYPE_BUILD_SCRATCH_NV</code>
<strong class="purple">must</strong> be less than or equal to the size of <code>scratch</code> minus
<code>scratchOffset</code></p>
</li>
<li>
<p><a id="VUID-vkCmdBuildAccelerationStructureNV-update-02492"></a>
If <code>update</code> is <code>VK_TRUE</code>, The <code>size</code> member of the
<a href="#VkMemoryRequirements">VkMemoryRequirements</a> structure returned from a call to
<a href="#vkGetAccelerationStructureMemoryRequirementsNV">vkGetAccelerationStructureMemoryRequirementsNV</a> with
<a href="#VkAccelerationStructureMemoryRequirementsInfoNV">VkAccelerationStructureMemoryRequirementsInfoNV</a>::<code>accelerationStructure</code>
set to <code>dst</code> and
<a href="#VkAccelerationStructureMemoryRequirementsInfoNV">VkAccelerationStructureMemoryRequirementsInfoNV</a>::<code>type</code> set to
<code>VK_ACCELERATION_STRUCTURE_MEMORY_REQUIREMENTS_TYPE_UPDATE_SCRATCH_NV</code>
<strong class="purple">must</strong> be less than or equal to the size of <code>scratch</code> minus
<code>scratchOffset</code></p>
</li>
</ul>
</div>
</div>
</div>
<div class="sidebarblock">
<div class="content">
<div class="title">Valid Usage (Implicit)</div>
<div class="ulist">
<ul>
<li>
<p><a id="VUID-vkCmdBuildAccelerationStructureNV-commandBuffer-parameter"></a> <code>commandBuffer</code> <strong class="purple">must</strong> be a valid <code>VkCommandBuffer</code> handle</p>
</li>
<li>
<p><a id="VUID-vkCmdBuildAccelerationStructureNV-pInfo-parameter"></a> <code>pInfo</code> <strong class="purple">must</strong> be a valid pointer to a valid <code>VkAccelerationStructureInfoNV</code> structure</p>
</li>
<li>
<p><a id="VUID-vkCmdBuildAccelerationStructureNV-instanceData-parameter"></a> If <code>instanceData</code> is not <a href="#VK_NULL_HANDLE">VK_NULL_HANDLE</a>, <code>instanceData</code> <strong class="purple">must</strong> be a valid <code>VkBuffer</code> handle</p>
</li>
<li>
<p><a id="VUID-vkCmdBuildAccelerationStructureNV-dst-parameter"></a> <code>dst</code> <strong class="purple">must</strong> be a valid <code>VkAccelerationStructureNV</code> handle</p>
</li>
<li>
<p><a id="VUID-vkCmdBuildAccelerationStructureNV-src-parameter"></a> If <code>src</code> is not <a href="#VK_NULL_HANDLE">VK_NULL_HANDLE</a>, <code>src</code> <strong class="purple">must</strong> be a valid <code>VkAccelerationStructureNV</code> handle</p>
</li>
<li>
<p><a id="VUID-vkCmdBuildAccelerationStructureNV-scratch-parameter"></a> <code>scratch</code> <strong class="purple">must</strong> be a valid <code>VkBuffer</code> handle</p>
</li>
<li>
<p><a id="VUID-vkCmdBuildAccelerationStructureNV-commandBuffer-recording"></a> <code>commandBuffer</code> <strong class="purple">must</strong> be in the <a href="#commandbuffers-lifecycle">recording state</a></p>
</li>
<li>
<p><a id="VUID-vkCmdBuildAccelerationStructureNV-commandBuffer-cmdpool"></a> The <code>VkCommandPool</code> that <code>commandBuffer</code> was allocated from <strong class="purple">must</strong> support compute operations</p>
</li>
<li>
<p><a id="VUID-vkCmdBuildAccelerationStructureNV-commonparent"></a> Each of <code>commandBuffer</code>, <code>dst</code>, <code>instanceData</code>, <code>scratch</code>, and <code>src</code> that are valid handles <strong class="purple">must</strong> have been created, allocated, or retrieved from the same <code>VkDevice</code></p>
</li>
</ul>
</div>
</div>
</div>
<div class="sidebarblock">
<div class="content">
<div class="title">Host Synchronization</div>
<div class="ulist">
<ul>
<li>
<p>Host access to the <code>VkCommandPool</code> that <code>commandBuffer</code> was allocated from <strong class="purple">must</strong> be externally synchronized</p>
</li>
</ul>
</div>
</div>
</div>
<div class="sidebarblock">
<div class="content">
<div class="title">Command Properties</div>
<table class="tableblock frame-all grid-all stretch">
<colgroup>
<col style="width: 25%;">
<col style="width: 25%;">
<col style="width: 25%;">
<col style="width: 25%;">
</colgroup>
<thead>
<tr>
<th class="tableblock halign-left valign-top"><a href="#VkCommandBufferLevel">Command Buffer Levels</a></th>
<th class="tableblock halign-left valign-top"><a href="#vkCmdBeginRenderPass">Render Pass Scope</a></th>
<th class="tableblock halign-left valign-top"><a href="#VkQueueFlagBits">Supported Queue Types</a></th>
<th class="tableblock halign-left valign-top"><a href="#synchronization-pipeline-stages-types">Pipeline Type</a></th>
</tr>
</thead>
<tbody>
<tr>
<td class="tableblock halign-left valign-top"><p class="tableblock">Primary<br>
Secondary</p></td>
<td class="tableblock halign-left valign-top"><p class="tableblock">Both</p></td>
<td class="tableblock halign-left valign-top"><p class="tableblock">Compute</p></td>
<td class="tableblock halign-left valign-top"></td>
</tr>
</tbody>
</table>
</div>
</div>
</div>
<div class="sect3">
<h4 id="_see_also_28">See Also</h4>
<div class="paragraph">
<p><a href="#VkAccelerationStructureInfoNV">VkAccelerationStructureInfoNV</a>, <a href="#VkAccelerationStructureNV">VkAccelerationStructureNV</a>, <code>VkBool32</code>, <a href="#VkBuffer">VkBuffer</a>, <a href="#VkCommandBuffer">VkCommandBuffer</a>, <code>VkDeviceSize</code></p>
</div>
</div>
<div class="sect3">
<h4 id="_document_notes_28">Document Notes</h4>
<div class="paragraph">
<p>For more information, see the Vulkan Specification at URL</p>
</div>
<div class="paragraph">
<p><a href="https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#vkCmdBuildAccelerationStructureNV" class="bare">https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#vkCmdBuildAccelerationStructureNV</a></p>
</div>
<div class="paragraph">
<p>This page is extracted from the Vulkan Specification.
Fixes and changes should be made to the Specification, not directly.</p>
</div>
<div style="page-break-after: always;"></div>
</div>
</div>
<div class="sect2">
<h3 id="_vkcmdclearattachments3">vkCmdClearAttachments(3)</h3>
<div class="sect3">
<h4 id="_name_29">Name</h4>
<div class="paragraph">
<p>vkCmdClearAttachments - Clear regions within bound framebuffer attachments</p>
</div>
</div>
<div class="sect3">
<h4 id="_c_specification_29">C Specification</h4>
<div class="paragraph">
<p>To clear one or more regions of color and depth/stencil attachments inside a
render pass instance, call:</p>
</div>
<div id="vkCmdClearAttachments" class="listingblock">
<div class="content">
<pre class="highlight"><code class="language-c++" data-lang="c++">void vkCmdClearAttachments(
    VkCommandBuffer                             commandBuffer,
    uint32_t                                    attachmentCount,
    const VkClearAttachment*                    pAttachments,
    uint32_t                                    rectCount,
    const VkClearRect*                          pRects);</code></pre>
</div>
</div>
</div>
<div class="sect3">
<h4 id="_parameters_29">Parameters</h4>
<div class="ulist">
<ul>
<li>
<p><code>commandBuffer</code> is the command buffer into which the command will be
recorded.</p>
</li>
<li>
<p><code>attachmentCount</code> is the number of entries in the <code>pAttachments</code>
array.</p>
</li>
<li>
<p><code>pAttachments</code> is a pointer to an array of <a href="#VkClearAttachment">VkClearAttachment</a>
structures defining the attachments to clear and the clear values to
use.
If any attachment to be cleared in the current subpass is
<code>VK_ATTACHMENT_UNUSED</code>, then the clear has no effect on that
attachment.</p>
</li>
<li>
<p><code>rectCount</code> is the number of entries in the <code>pRects</code> array.</p>
</li>
<li>
<p><code>pRects</code> points to an array of <a href="#VkClearRect">VkClearRect</a> structures defining
regions within each selected attachment to clear.</p>
</li>
</ul>
</div>
</div>
<div class="sect3">
<h4 id="_description_29">Description</h4>
<div class="paragraph">
<p><code>vkCmdClearAttachments</code> <strong class="purple">can</strong> clear multiple regions of each attachment
used in the current subpass of a render pass instance.
This command <strong class="purple">must</strong> be called only inside a render pass instance, and
implicitly selects the images to clear based on the current framebuffer
attachments and the command parameters.</p>
</div>
<div class="paragraph">
<p>If the render pass has a <a href="vkspec.html#renderpass-fragmentdensitymapattachment">fragment
density map attachment</a>, clears follow the
<a href="vkspec.html#fragmentdensitymapops">operations of fragment density maps</a> as if each
clear region was a primitive which generates fragments.
The clear color is applied to all pixels inside each fragment&#8217;s area
regardless if the pixels lie outside of the clear region.
Clears <strong class="purple">may</strong> have a different set of supported fragment areas than draws.</p>
</div>
<div class="paragraph">
<p>Unlike other <a href="vkspec.html#clears">clear commands</a>, <a href="#vkCmdClearAttachments">vkCmdClearAttachments</a> executes
as a drawing command, rather than a transfer command, with writes performed
by it executing in <a href="vkspec.html#primrast-order">rasterization order</a>.
Clears to color attachments are executed as color attachment writes, by the
<code>VK_PIPELINE_STAGE_COLOR_ATTACHMENT_OUTPUT_BIT</code> stage.
Clears to depth/stencil attachments are executed as <a href="vkspec.html#fragops-depth">depth
writes</a> and <a href="vkspec.html#fragops-stencil">writes</a> by the
<code>VK_PIPELINE_STAGE_EARLY_FRAGMENT_TESTS_BIT</code> and
<code>VK_PIPELINE_STAGE_LATE_FRAGMENT_TESTS_BIT</code> stages.</p>
</div>
<div class="sidebarblock">
<div class="content">
<div class="title">Valid Usage</div>
<div class="ulist">
<ul>
<li>
<p><a id="VUID-vkCmdClearAttachments-aspectMask-02501"></a>
If the <code>aspectMask</code> member of any element of <code>pAttachments</code>
contains <code>VK_IMAGE_ASPECT_COLOR_BIT</code>, then the <code>colorAttachment</code>
member of that element <strong class="purple">must</strong> either refer to a color attachment which is
<code>VK_ATTACHMENT_UNUSED</code>, or <strong class="purple">must</strong> be a valid color attachment.</p>
</li>
<li>
<p><a id="VUID-vkCmdClearAttachments-aspectMask-02502"></a>
If the <code>aspectMask</code> member of any element of <code>pAttachments</code>
contains <code>VK_IMAGE_ASPECT_DEPTH_BIT</code>, then the current subpass'
depth/stencil attachment <strong class="purple">must</strong> either be <code>VK_ATTACHMENT_UNUSED</code>, or
<strong class="purple">must</strong> have a depth component</p>
</li>
<li>
<p><a id="VUID-vkCmdClearAttachments-aspectMask-02503"></a>
If the <code>aspectMask</code> member of any element of <code>pAttachments</code>
contains <code>VK_IMAGE_ASPECT_STENCIL_BIT</code>, then the current subpass'
depth/stencil attachment <strong class="purple">must</strong> either be <code>VK_ATTACHMENT_UNUSED</code>, or
<strong class="purple">must</strong> have a stencil component</p>
</li>
<li>
<p><a id="VUID-vkCmdClearAttachments-rect-02682"></a>
The <code>rect</code> member of each element of <code>pRects</code> <strong class="purple">must</strong> have an
<code>extent.width</code> greater than <code>0</code></p>
</li>
<li>
<p><a id="VUID-vkCmdClearAttachments-rect-02683"></a>
The <code>rect</code> member of each element of <code>pRects</code> <strong class="purple">must</strong> have an
<code>extent.height</code> greater than <code>0</code></p>
</li>
<li>
<p><a id="VUID-vkCmdClearAttachments-pRects-00016"></a>
The rectangular region specified by each element of <code>pRects</code> <strong class="purple">must</strong>
be contained within the render area of the current render pass instance</p>
</li>
<li>
<p><a id="VUID-vkCmdClearAttachments-pRects-00017"></a>
The layers specified by each element of <code>pRects</code> <strong class="purple">must</strong> be contained
within every attachment that <code>pAttachments</code> refers to</p>
</li>
<li>
<p><a id="VUID-vkCmdClearAttachments-layerCount-01934"></a>
The <code>layerCount</code> member of each element of <code>pRects</code> <strong class="purple">must</strong> not be
<code>0</code></p>
</li>
<li>
<p><a id="VUID-vkCmdClearAttachments-commandBuffer-02504"></a>
If <code>commandBuffer</code> is an unprotected command buffer, then each
attachment to be cleared <strong class="purple">must</strong> not be a protected image.</p>
</li>
<li>
<p><a id="VUID-vkCmdClearAttachments-commandBuffer-02505"></a>
If <code>commandBuffer</code> is a protected command buffer, then each
attachment to be cleared <strong class="purple">must</strong> not be an unprotected image.</p>
</li>
<li>
<p><a id="VUID-vkCmdClearAttachments-baseArrayLayer-00018"></a>
If the render pass instance this is recorded in uses multiview, then
<code>baseArrayLayer</code> <strong class="purple">must</strong> be zero and <code>layerCount</code> <strong class="purple">must</strong> be one.</p>
</li>
</ul>
</div>
</div>
</div>
<div class="sidebarblock">
<div class="content">
<div class="title">Valid Usage (Implicit)</div>
<div class="ulist">
<ul>
<li>
<p><a id="VUID-vkCmdClearAttachments-commandBuffer-parameter"></a> <code>commandBuffer</code> <strong class="purple">must</strong> be a valid <code>VkCommandBuffer</code> handle</p>
</li>
<li>
<p><a id="VUID-vkCmdClearAttachments-pAttachments-parameter"></a> <code>pAttachments</code> <strong class="purple">must</strong> be a valid pointer to an array of <code>attachmentCount</code> valid <code>VkClearAttachment</code> structures</p>
</li>
<li>
<p><a id="VUID-vkCmdClearAttachments-pRects-parameter"></a> <code>pRects</code> <strong class="purple">must</strong> be a valid pointer to an array of <code>rectCount</code> <code>VkClearRect</code> structures</p>
</li>
<li>
<p><a id="VUID-vkCmdClearAttachments-commandBuffer-recording"></a> <code>commandBuffer</code> <strong class="purple">must</strong> be in the <a href="#commandbuffers-lifecycle">recording state</a></p>
</li>
<li>
<p><a id="VUID-vkCmdClearAttachments-commandBuffer-cmdpool"></a> The <code>VkCommandPool</code> that <code>commandBuffer</code> was allocated from <strong class="purple">must</strong> support graphics operations</p>
</li>
<li>
<p><a id="VUID-vkCmdClearAttachments-renderpass"></a> This command <strong class="purple">must</strong> only be called inside of a render pass instance</p>
</li>
<li>
<p><a id="VUID-vkCmdClearAttachments-attachmentCount-arraylength"></a> <code>attachmentCount</code> <strong class="purple">must</strong> be greater than <code>0</code></p>
</li>
<li>
<p><a id="VUID-vkCmdClearAttachments-rectCount-arraylength"></a> <code>rectCount</code> <strong class="purple">must</strong> be greater than <code>0</code></p>
</li>
</ul>
</div>
</div>
</div>
<div class="sidebarblock">
<div class="content">
<div class="title">Host Synchronization</div>
<div class="ulist">
<ul>
<li>
<p>Host access to <code>commandBuffer</code> <strong class="purple">must</strong> be externally synchronized</p>
</li>
<li>
<p>Host access to the <code>VkCommandPool</code> that <code>commandBuffer</code> was allocated from <strong class="purple">must</strong> be externally synchronized</p>
</li>
</ul>
</div>
</div>
</div>
<div class="sidebarblock">
<div class="content">
<div class="title">Command Properties</div>
<table class="tableblock frame-all grid-all stretch">
<colgroup>
<col style="width: 25%;">
<col style="width: 25%;">
<col style="width: 25%;">
<col style="width: 25%;">
</colgroup>
<thead>
<tr>
<th class="tableblock halign-left valign-top"><a href="#VkCommandBufferLevel">Command Buffer Levels</a></th>
<th class="tableblock halign-left valign-top"><a href="#vkCmdBeginRenderPass">Render Pass Scope</a></th>
<th class="tableblock halign-left valign-top"><a href="#VkQueueFlagBits">Supported Queue Types</a></th>
<th class="tableblock halign-left valign-top"><a href="#synchronization-pipeline-stages-types">Pipeline Type</a></th>
</tr>
</thead>
<tbody>
<tr>
<td class="tableblock halign-left valign-top"><p class="tableblock">Primary<br>
Secondary</p></td>
<td class="tableblock halign-left valign-top"><p class="tableblock">Inside</p></td>
<td class="tableblock halign-left valign-top"><p class="tableblock">Graphics</p></td>
<td class="tableblock halign-left valign-top"><p class="tableblock">Graphics</p></td>
</tr>
</tbody>
</table>
</div>
</div>
</div>
<div class="sect3">
<h4 id="_see_also_29">See Also</h4>
<div class="paragraph">
<p><a href="#VkClearAttachment">VkClearAttachment</a>, <a href="#VkClearRect">VkClearRect</a>, <a href="#VkCommandBuffer">VkCommandBuffer</a></p>
</div>
</div>
<div class="sect3">
<h4 id="_document_notes_29">Document Notes</h4>
<div class="paragraph">
<p>For more information, see the Vulkan Specification at URL</p>
</div>
<div class="paragraph">
<p><a href="https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#vkCmdClearAttachments" class="bare">https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#vkCmdClearAttachments</a></p>
</div>
<div class="paragraph">
<p>This page is extracted from the Vulkan Specification.
Fixes and changes should be made to the Specification, not directly.</p>
</div>
<div style="page-break-after: always;"></div>
</div>
</div>
<div class="sect2">
<h3 id="_vkcmdclearcolorimage3">vkCmdClearColorImage(3)</h3>
<div class="sect3">
<h4 id="_name_30">Name</h4>
<div class="paragraph">
<p>vkCmdClearColorImage - Clear regions of a color image</p>
</div>
</div>
<div class="sect3">
<h4 id="_c_specification_30">C Specification</h4>
<div class="paragraph">
<p>To clear one or more subranges of a color image, call:</p>
</div>
<div id="vkCmdClearColorImage" class="listingblock">
<div class="content">
<pre class="highlight"><code class="language-c++" data-lang="c++">void vkCmdClearColorImage(
    VkCommandBuffer                             commandBuffer,
    VkImage                                     image,
    VkImageLayout                               imageLayout,
    const VkClearColorValue*                    pColor,
    uint32_t                                    rangeCount,
    const VkImageSubresourceRange*              pRanges);</code></pre>
</div>
</div>
</div>
<div class="sect3">
<h4 id="_parameters_30">Parameters</h4>
<div class="ulist">
<ul>
<li>
<p><code>commandBuffer</code> is the command buffer into which the command will be
recorded.</p>
</li>
<li>
<p><code>image</code> is the image to be cleared.</p>
</li>
<li>
<p><code>imageLayout</code> specifies the current layout of the image subresource
ranges to be cleared, and <strong class="purple">must</strong> be
<code>VK_IMAGE_LAYOUT_SHARED_PRESENT_KHR</code>,
<code>VK_IMAGE_LAYOUT_GENERAL</code> or
<code>VK_IMAGE_LAYOUT_TRANSFER_DST_OPTIMAL</code>.</p>
</li>
<li>
<p><code>pColor</code> is a pointer to a <a href="#VkClearColorValue">VkClearColorValue</a> structure that
contains the values the image subresource ranges will be cleared to (see
<a href="vkspec.html#clears-values" class="bare">html/vkspec.html#clears-values</a> below).</p>
</li>
<li>
<p><code>rangeCount</code> is the number of image subresource range structures in
<code>pRanges</code>.</p>
</li>
<li>
<p><code>pRanges</code> points to an array of <a href="#VkImageSubresourceRange">VkImageSubresourceRange</a>
structures that describe a range of mipmap levels, array layers, and
aspects to be cleared, as described in <a href="vkspec.html#resources-image-views">Image
Views</a>.</p>
</li>
</ul>
</div>
</div>
<div class="sect3">
<h4 id="_description_30">Description</h4>
<div class="paragraph">
<p>Each specified range in <code>pRanges</code> is cleared to the value specified by
<code>pColor</code>.</p>
</div>
<div class="sidebarblock">
<div class="content">
<div class="title">Valid Usage</div>
<div class="ulist">
<ul>
<li>
<p><a id="VUID-vkCmdClearColorImage-image-01993"></a>
The <a href="vkspec.html#resources-image-format-features">format features</a> of <code>image</code>
<strong class="purple">must</strong> contain <code>VK_FORMAT_FEATURE_TRANSFER_DST_BIT</code>.</p>
</li>
<li>
<p><a id="VUID-vkCmdClearColorImage-image-00002"></a>
<code>image</code> <strong class="purple">must</strong> have been created with
<code>VK_IMAGE_USAGE_TRANSFER_DST_BIT</code> usage flag</p>
</li>
<li>
<p><a id="VUID-vkCmdClearColorImage-image-01545"></a>
<code>image</code> <strong class="purple">must</strong> not use a format listed in
<a href="vkspec.html#formats-requiring-sampler-ycbcr-conversion" class="bare">html/vkspec.html#formats-requiring-sampler-ycbcr-conversion</a></p>
</li>
<li>
<p><a id="VUID-vkCmdClearColorImage-image-00003"></a>
If <code>image</code> is non-sparse then it <strong class="purple">must</strong> be bound completely and
contiguously to a single <code>VkDeviceMemory</code> object</p>
</li>
<li>
<p><a id="VUID-vkCmdClearColorImage-imageLayout-00004"></a>
<code>imageLayout</code> <strong class="purple">must</strong> specify the layout of the image subresource
ranges of <code>image</code> specified in <code>pRanges</code> at the time this
command is executed on a <code>VkDevice</code></p>
</li>
<li>
<p><a id="VUID-vkCmdClearColorImage-imageLayout-01394"></a>
<code>imageLayout</code> <strong class="purple">must</strong> be <code>VK_IMAGE_LAYOUT_TRANSFER_DST_OPTIMAL</code>,
<code>VK_IMAGE_LAYOUT_GENERAL</code>, or
<code>VK_IMAGE_LAYOUT_SHARED_PRESENT_KHR</code></p>
</li>
<li>
<p><a id="VUID-vkCmdClearColorImage-aspectMask-02498"></a>
The <a href="#VkImageSubresourceRange">VkImageSubresourceRange</a>::<code>aspectMask</code> members of the
elements of the <code>pRanges</code> array <strong class="purple">must</strong> each only include
<code>VK_IMAGE_ASPECT_COLOR_BIT</code></p>
</li>
<li>
<p><a id="VUID-vkCmdClearColorImage-baseMipLevel-01470"></a>
The <a href="#VkImageSubresourceRange">VkImageSubresourceRange</a>::<code>baseMipLevel</code> members of the
elements of the <code>pRanges</code> array <strong class="purple">must</strong> each be less than the
<code>mipLevels</code> specified in <a href="#VkImageCreateInfo">VkImageCreateInfo</a> when <code>image</code>
was created</p>
</li>
<li>
<p><a id="VUID-vkCmdClearColorImage-pRanges-01692"></a>
For each <a href="#VkImageSubresourceRange">VkImageSubresourceRange</a> element of <code>pRanges</code>, if the
<code>levelCount</code> member is not <code>VK_REMAINING_MIP_LEVELS</code>, then
<span class="eq"><code>baseMipLevel</code> +  <code>levelCount</code></span> <strong class="purple">must</strong> be less than the
<code>mipLevels</code> specified in <a href="#VkImageCreateInfo">VkImageCreateInfo</a> when <code>image</code>
was created</p>
</li>
<li>
<p><a id="VUID-vkCmdClearColorImage-baseArrayLayer-01472"></a>
The <a href="#VkImageSubresourceRange">VkImageSubresourceRange</a>::<code>baseArrayLayer</code> members of the
elements of the <code>pRanges</code> array <strong class="purple">must</strong> each be less than the
<code>arrayLayers</code> specified in <a href="#VkImageCreateInfo">VkImageCreateInfo</a> when <code>image</code>
was created</p>
</li>
<li>
<p><a id="VUID-vkCmdClearColorImage-pRanges-01693"></a>
For each <a href="#VkImageSubresourceRange">VkImageSubresourceRange</a> element of <code>pRanges</code>, if the
<code>layerCount</code> member is not <code>VK_REMAINING_ARRAY_LAYERS</code>, then
<span class="eq"><code>baseArrayLayer</code> +  <code>layerCount</code></span> <strong class="purple">must</strong> be less than
the <code>arrayLayers</code> specified in <a href="#VkImageCreateInfo">VkImageCreateInfo</a> when
<code>image</code> was created</p>
</li>
<li>
<p><a id="VUID-vkCmdClearColorImage-image-00007"></a>
<code>image</code> <strong class="purple">must</strong> not have a compressed or depth/stencil format</p>
</li>
<li>
<p><a id="VUID-vkCmdClearColorImage-commandBuffer-01805"></a>
If <code>commandBuffer</code> is an unprotected command buffer, then
<code>image</code> <strong class="purple">must</strong> not be a protected image</p>
</li>
<li>
<p><a id="VUID-vkCmdClearColorImage-commandBuffer-01806"></a>
If <code>commandBuffer</code> is a protected command buffer, then <code>image</code>
<strong class="purple">must</strong> not be an unprotected image</p>
</li>
</ul>
</div>
</div>
</div>
<div class="sidebarblock">
<div class="content">
<div class="title">Valid Usage (Implicit)</div>
<div class="ulist">
<ul>
<li>
<p><a id="VUID-vkCmdClearColorImage-commandBuffer-parameter"></a> <code>commandBuffer</code> <strong class="purple">must</strong> be a valid <code>VkCommandBuffer</code> handle</p>
</li>
<li>
<p><a id="VUID-vkCmdClearColorImage-image-parameter"></a> <code>image</code> <strong class="purple">must</strong> be a valid <code>VkImage</code> handle</p>
</li>
<li>
<p><a id="VUID-vkCmdClearColorImage-imageLayout-parameter"></a> <code>imageLayout</code> <strong class="purple">must</strong> be a valid <a href="#VkImageLayout">VkImageLayout</a> value</p>
</li>
<li>
<p><a id="VUID-vkCmdClearColorImage-pColor-parameter"></a> <code>pColor</code> <strong class="purple">must</strong> be a valid pointer to a valid <code>VkClearColorValue</code> union</p>
</li>
<li>
<p><a id="VUID-vkCmdClearColorImage-pRanges-parameter"></a> <code>pRanges</code> <strong class="purple">must</strong> be a valid pointer to an array of <code>rangeCount</code> valid <code>VkImageSubresourceRange</code> structures</p>
</li>
<li>
<p><a id="VUID-vkCmdClearColorImage-commandBuffer-recording"></a> <code>commandBuffer</code> <strong class="purple">must</strong> be in the <a href="#commandbuffers-lifecycle">recording state</a></p>
</li>
<li>
<p><a id="VUID-vkCmdClearColorImage-commandBuffer-cmdpool"></a> The <code>VkCommandPool</code> that <code>commandBuffer</code> was allocated from <strong class="purple">must</strong> support graphics, or compute operations</p>
</li>
<li>
<p><a id="VUID-vkCmdClearColorImage-renderpass"></a> This command <strong class="purple">must</strong> only be called outside of a render pass instance</p>
</li>
<li>
<p><a id="VUID-vkCmdClearColorImage-rangeCount-arraylength"></a> <code>rangeCount</code> <strong class="purple">must</strong> be greater than <code>0</code></p>
</li>
<li>
<p><a id="VUID-vkCmdClearColorImage-commonparent"></a> Both of <code>commandBuffer</code>, and <code>image</code> <strong class="purple">must</strong> have been created, allocated, or retrieved from the same <code>VkDevice</code></p>
</li>
</ul>
</div>
</div>
</div>
<div class="sidebarblock">
<div class="content">
<div class="title">Host Synchronization</div>
<div class="ulist">
<ul>
<li>
<p>Host access to <code>commandBuffer</code> <strong class="purple">must</strong> be externally synchronized</p>
</li>
<li>
<p>Host access to the <code>VkCommandPool</code> that <code>commandBuffer</code> was allocated from <strong class="purple">must</strong> be externally synchronized</p>
</li>
</ul>
</div>
</div>
</div>
<div class="sidebarblock">
<div class="content">
<div class="title">Command Properties</div>
<table class="tableblock frame-all grid-all stretch">
<colgroup>
<col style="width: 25%;">
<col style="width: 25%;">
<col style="width: 25%;">
<col style="width: 25%;">
</colgroup>
<thead>
<tr>
<th class="tableblock halign-left valign-top"><a href="#VkCommandBufferLevel">Command Buffer Levels</a></th>
<th class="tableblock halign-left valign-top"><a href="#vkCmdBeginRenderPass">Render Pass Scope</a></th>
<th class="tableblock halign-left valign-top"><a href="#VkQueueFlagBits">Supported Queue Types</a></th>
<th class="tableblock halign-left valign-top"><a href="#synchronization-pipeline-stages-types">Pipeline Type</a></th>
</tr>
</thead>
<tbody>
<tr>
<td class="tableblock halign-left valign-top"><p class="tableblock">Primary<br>
Secondary</p></td>
<td class="tableblock halign-left valign-top"><p class="tableblock">Outside</p></td>
<td class="tableblock halign-left valign-top"><p class="tableblock">Graphics<br>
Compute</p></td>
<td class="tableblock halign-left valign-top"><p class="tableblock">Transfer</p></td>
</tr>
</tbody>
</table>
</div>
</div>
</div>
<div class="sect3">
<h4 id="_see_also_30">See Also</h4>
<div class="paragraph">
<p><a href="#VkClearColorValue">VkClearColorValue</a>, <a href="#VkCommandBuffer">VkCommandBuffer</a>, <a href="#VkImage">VkImage</a>, <a href="#VkImageLayout">VkImageLayout</a>, <a href="#VkImageSubresourceRange">VkImageSubresourceRange</a></p>
</div>
</div>
<div class="sect3">
<h4 id="_document_notes_30">Document Notes</h4>
<div class="paragraph">
<p>For more information, see the Vulkan Specification at URL</p>
</div>
<div class="paragraph">
<p><a href="https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#vkCmdClearColorImage" class="bare">https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#vkCmdClearColorImage</a></p>
</div>
<div class="paragraph">
<p>This page is extracted from the Vulkan Specification.
Fixes and changes should be made to the Specification, not directly.</p>
</div>
<div style="page-break-after: always;"></div>
</div>
</div>
<div class="sect2">
<h3 id="_vkcmdcleardepthstencilimage3">vkCmdClearDepthStencilImage(3)</h3>
<div class="sect3">
<h4 id="_name_31">Name</h4>
<div class="paragraph">
<p>vkCmdClearDepthStencilImage - Fill regions of a combined depth/stencil image</p>
</div>
</div>
<div class="sect3">
<h4 id="_c_specification_31">C Specification</h4>
<div class="paragraph">
<p>To clear one or more subranges of a depth/stencil image, call:</p>
</div>
<div id="vkCmdClearDepthStencilImage" class="listingblock">
<div class="content">
<pre class="highlight"><code class="language-c++" data-lang="c++">void vkCmdClearDepthStencilImage(
    VkCommandBuffer                             commandBuffer,
    VkImage                                     image,
    VkImageLayout                               imageLayout,
    const VkClearDepthStencilValue*             pDepthStencil,
    uint32_t                                    rangeCount,
    const VkImageSubresourceRange*              pRanges);</code></pre>
</div>
</div>
</div>
<div class="sect3">
<h4 id="_parameters_31">Parameters</h4>
<div class="ulist">
<ul>
<li>
<p><code>commandBuffer</code> is the command buffer into which the command will be
recorded.</p>
</li>
<li>
<p><code>image</code> is the image to be cleared.</p>
</li>
<li>
<p><code>imageLayout</code> specifies the current layout of the image subresource
ranges to be cleared, and <strong class="purple">must</strong> be <code>VK_IMAGE_LAYOUT_GENERAL</code> or
<code>VK_IMAGE_LAYOUT_TRANSFER_DST_OPTIMAL</code>.</p>
</li>
<li>
<p><code>pDepthStencil</code> is a pointer to a <a href="#VkClearDepthStencilValue">VkClearDepthStencilValue</a>
structure that contains the values the depth and stencil image
subresource ranges will be cleared to (see <a href="vkspec.html#clears-values" class="bare">html/vkspec.html#clears-values</a> below).</p>
</li>
<li>
<p><code>rangeCount</code> is the number of image subresource range structures in
<code>pRanges</code>.</p>
</li>
<li>
<p><code>pRanges</code> points to an array of <a href="#VkImageSubresourceRange">VkImageSubresourceRange</a>
structures that describe a range of mipmap levels, array layers, and
aspects to be cleared, as described in <a href="vkspec.html#resources-image-views">Image
Views</a>.</p>
</li>
</ul>
</div>
</div>
<div class="sect3">
<h4 id="_description_31">Description</h4>
<div class="sidebarblock">
<div class="content">
<div class="title">Valid Usage</div>
<div class="ulist">
<ul>
<li>
<p><a id="VUID-vkCmdClearDepthStencilImage-image-01994"></a>
The <a href="vkspec.html#resources-image-format-features">format features</a> of <code>image</code>
<strong class="purple">must</strong> contain <code>VK_FORMAT_FEATURE_TRANSFER_DST_BIT</code>.</p>
</li>
<li>
<p><a id="VUID-vkCmdClearDepthStencilImage-pRanges-02658"></a>
If any element of <code>pRanges.aspect</code> includes
<code>VK_IMAGE_ASPECT_STENCIL_BIT</code>, and <code>image</code> was created with
<a href="vkspec.html#VkImageStencilUsageCreateInfoEXT">separate stencil usage</a>,
<code>VK_IMAGE_USAGE_TRANSFER_DST_BIT</code> <strong class="purple">must</strong> have been included in the
<a href="#VkImageStencilUsageCreateInfoEXT">VkImageStencilUsageCreateInfoEXT</a>::<code>stencilUsage</code> used to
create <code>image</code></p>
</li>
<li>
<p><a id="VUID-vkCmdClearDepthStencilImage-pRanges-02659"></a>
If any element of <code>pRanges.aspect</code> includes
<code>VK_IMAGE_ASPECT_STENCIL_BIT</code>, and <code>image</code> was not created with
<a href="vkspec.html#VkImageStencilUsageCreateInfoEXT">separate stencil usage</a>,
<code>VK_IMAGE_USAGE_TRANSFER_DST_BIT</code> <strong class="purple">must</strong> have been included in the
<a href="#VkImageCreateInfo">VkImageCreateInfo</a>::<code>usage</code> used to create <code>image</code></p>
</li>
<li>
<p><a id="VUID-vkCmdClearDepthStencilImage-pRanges-02660"></a>
If any element of <code>pRanges.aspect</code> includes
<code>VK_IMAGE_ASPECT_DEPTH_BIT</code>, <code>VK_IMAGE_USAGE_TRANSFER_DST_BIT</code>
<strong class="purple">must</strong> have been included in the <a href="#VkImageCreateInfo">VkImageCreateInfo</a>::<code>usage</code>
used to create <code>image</code></p>
</li>
<li>
<p><a id="VUID-vkCmdClearDepthStencilImage-image-00010"></a>
If <code>image</code> is non-sparse then it <strong class="purple">must</strong> be bound completely and
contiguously to a single <code>VkDeviceMemory</code> object</p>
</li>
<li>
<p><a id="VUID-vkCmdClearDepthStencilImage-imageLayout-00011"></a>
<code>imageLayout</code> <strong class="purple">must</strong> specify the layout of the image subresource
ranges of <code>image</code> specified in <code>pRanges</code> at the time this
command is executed on a <code>VkDevice</code></p>
</li>
<li>
<p><a id="VUID-vkCmdClearDepthStencilImage-imageLayout-00012"></a>
<code>imageLayout</code> <strong class="purple">must</strong> be either of
<code>VK_IMAGE_LAYOUT_TRANSFER_DST_OPTIMAL</code> or
<code>VK_IMAGE_LAYOUT_GENERAL</code></p>
</li>
<li>
<p><a id="VUID-vkCmdClearDepthStencilImage-aspectMask-02499"></a>
The <a href="#VkImageSubresourceRange">VkImageSubresourceRange</a>::<code>aspectMask</code> members of the
elements of the <code>pRanges</code> array <strong class="purple">must</strong> each only include
<code>VK_IMAGE_ASPECT_DEPTH_BIT</code> if the image format has a depth
component</p>
</li>
<li>
<p><a id="VUID-vkCmdClearDepthStencilImage-aspectMask-02500"></a>
The <a href="#VkImageSubresourceRange">VkImageSubresourceRange</a>::<code>aspectMask</code> members of the
elements of the <code>pRanges</code> array <strong class="purple">must</strong> each only include
<code>VK_IMAGE_ASPECT_STENCIL_BIT</code> if the image format has a stencil
component</p>
</li>
<li>
<p><a id="VUID-vkCmdClearDepthStencilImage-baseMipLevel-01474"></a>
The <a href="#VkImageSubresourceRange">VkImageSubresourceRange</a>::<code>baseMipLevel</code> members of the
elements of the <code>pRanges</code> array <strong class="purple">must</strong> each be less than the
<code>mipLevels</code> specified in <a href="#VkImageCreateInfo">VkImageCreateInfo</a> when <code>image</code>
was created</p>
</li>
<li>
<p><a id="VUID-vkCmdClearDepthStencilImage-pRanges-01694"></a>
For each <a href="#VkImageSubresourceRange">VkImageSubresourceRange</a> element of <code>pRanges</code>, if the
<code>levelCount</code> member is not <code>VK_REMAINING_MIP_LEVELS</code>, then
<span class="eq"><code>baseMipLevel</code> +  <code>levelCount</code></span> <strong class="purple">must</strong> be less than the
<code>mipLevels</code> specified in <a href="#VkImageCreateInfo">VkImageCreateInfo</a> when <code>image</code>
was created</p>
</li>
<li>
<p><a id="VUID-vkCmdClearDepthStencilImage-baseArrayLayer-01476"></a>
The <a href="#VkImageSubresourceRange">VkImageSubresourceRange</a>::<code>baseArrayLayer</code> members of the
elements of the <code>pRanges</code> array <strong class="purple">must</strong> each be less than the
<code>arrayLayers</code> specified in <a href="#VkImageCreateInfo">VkImageCreateInfo</a> when <code>image</code>
was created</p>
</li>
<li>
<p><a id="VUID-vkCmdClearDepthStencilImage-pRanges-01695"></a>
For each <a href="#VkImageSubresourceRange">VkImageSubresourceRange</a> element of <code>pRanges</code>, if the
<code>layerCount</code> member is not <code>VK_REMAINING_ARRAY_LAYERS</code>, then
<span class="eq"><code>baseArrayLayer</code> +  <code>layerCount</code></span> <strong class="purple">must</strong> be less than
the <code>arrayLayers</code> specified in <a href="#VkImageCreateInfo">VkImageCreateInfo</a> when
<code>image</code> was created</p>
</li>
<li>
<p><a id="VUID-vkCmdClearDepthStencilImage-image-00014"></a>
<code>image</code> <strong class="purple">must</strong> have a depth/stencil format</p>
</li>
<li>
<p><a id="VUID-vkCmdClearDepthStencilImage-commandBuffer-01807"></a>
If <code>commandBuffer</code> is an unprotected command buffer, then
<code>image</code> <strong class="purple">must</strong> not be a protected image</p>
</li>
<li>
<p><a id="VUID-vkCmdClearDepthStencilImage-commandBuffer-01808"></a>
If <code>commandBuffer</code> is a protected command buffer, then <code>image</code>
<strong class="purple">must</strong> not be an unprotected image</p>
</li>
</ul>
</div>
</div>
</div>
<div class="sidebarblock">
<div class="content">
<div class="title">Valid Usage (Implicit)</div>
<div class="ulist">
<ul>
<li>
<p><a id="VUID-vkCmdClearDepthStencilImage-commandBuffer-parameter"></a> <code>commandBuffer</code> <strong class="purple">must</strong> be a valid <code>VkCommandBuffer</code> handle</p>
</li>
<li>
<p><a id="VUID-vkCmdClearDepthStencilImage-image-parameter"></a> <code>image</code> <strong class="purple">must</strong> be a valid <code>VkImage</code> handle</p>
</li>
<li>
<p><a id="VUID-vkCmdClearDepthStencilImage-imageLayout-parameter"></a> <code>imageLayout</code> <strong class="purple">must</strong> be a valid <a href="#VkImageLayout">VkImageLayout</a> value</p>
</li>
<li>
<p><a id="VUID-vkCmdClearDepthStencilImage-pDepthStencil-parameter"></a> <code>pDepthStencil</code> <strong class="purple">must</strong> be a valid pointer to a valid <code>VkClearDepthStencilValue</code> structure</p>
</li>
<li>
<p><a id="VUID-vkCmdClearDepthStencilImage-pRanges-parameter"></a> <code>pRanges</code> <strong class="purple">must</strong> be a valid pointer to an array of <code>rangeCount</code> valid <code>VkImageSubresourceRange</code> structures</p>
</li>
<li>
<p><a id="VUID-vkCmdClearDepthStencilImage-commandBuffer-recording"></a> <code>commandBuffer</code> <strong class="purple">must</strong> be in the <a href="#commandbuffers-lifecycle">recording state</a></p>
</li>
<li>
<p><a id="VUID-vkCmdClearDepthStencilImage-commandBuffer-cmdpool"></a> The <code>VkCommandPool</code> that <code>commandBuffer</code> was allocated from <strong class="purple">must</strong> support graphics operations</p>
</li>
<li>
<p><a id="VUID-vkCmdClearDepthStencilImage-renderpass"></a> This command <strong class="purple">must</strong> only be called outside of a render pass instance</p>
</li>
<li>
<p><a id="VUID-vkCmdClearDepthStencilImage-rangeCount-arraylength"></a> <code>rangeCount</code> <strong class="purple">must</strong> be greater than <code>0</code></p>
</li>
<li>
<p><a id="VUID-vkCmdClearDepthStencilImage-commonparent"></a> Both of <code>commandBuffer</code>, and <code>image</code> <strong class="purple">must</strong> have been created, allocated, or retrieved from the same <code>VkDevice</code></p>
</li>
</ul>
</div>
</div>
</div>
<div class="sidebarblock">
<div class="content">
<div class="title">Host Synchronization</div>
<div class="ulist">
<ul>
<li>
<p>Host access to <code>commandBuffer</code> <strong class="purple">must</strong> be externally synchronized</p>
</li>
<li>
<p>Host access to the <code>VkCommandPool</code> that <code>commandBuffer</code> was allocated from <strong class="purple">must</strong> be externally synchronized</p>
</li>
</ul>
</div>
</div>
</div>
<div class="sidebarblock">
<div class="content">
<div class="title">Command Properties</div>
<table class="tableblock frame-all grid-all stretch">
<colgroup>
<col style="width: 25%;">
<col style="width: 25%;">
<col style="width: 25%;">
<col style="width: 25%;">
</colgroup>
<thead>
<tr>
<th class="tableblock halign-left valign-top"><a href="#VkCommandBufferLevel">Command Buffer Levels</a></th>
<th class="tableblock halign-left valign-top"><a href="#vkCmdBeginRenderPass">Render Pass Scope</a></th>
<th class="tableblock halign-left valign-top"><a href="#VkQueueFlagBits">Supported Queue Types</a></th>
<th class="tableblock halign-left valign-top"><a href="#synchronization-pipeline-stages-types">Pipeline Type</a></th>
</tr>
</thead>
<tbody>
<tr>
<td class="tableblock halign-left valign-top"><p class="tableblock">Primary<br>
Secondary</p></td>
<td class="tableblock halign-left valign-top"><p class="tableblock">Outside</p></td>
<td class="tableblock halign-left valign-top"><p class="tableblock">Graphics</p></td>
<td class="tableblock halign-left valign-top"><p class="tableblock">Transfer</p></td>
</tr>
</tbody>
</table>
</div>
</div>
</div>
<div class="sect3">
<h4 id="_see_also_31">See Also</h4>
<div class="paragraph">
<p><a href="#VkClearDepthStencilValue">VkClearDepthStencilValue</a>, <a href="#VkCommandBuffer">VkCommandBuffer</a>, <a href="#VkImage">VkImage</a>, <a href="#VkImageLayout">VkImageLayout</a>, <a href="#VkImageSubresourceRange">VkImageSubresourceRange</a></p>
</div>
</div>
<div class="sect3">
<h4 id="_document_notes_31">Document Notes</h4>
<div class="paragraph">
<p>For more information, see the Vulkan Specification at URL</p>
</div>
<div class="paragraph">
<p><a href="https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#vkCmdClearDepthStencilImage" class="bare">https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#vkCmdClearDepthStencilImage</a></p>
</div>
<div class="paragraph">
<p>This page is extracted from the Vulkan Specification.
Fixes and changes should be made to the Specification, not directly.</p>
</div>
<div style="page-break-after: always;"></div>
</div>
</div>
<div class="sect2">
<h3 id="_vkcmdcopyaccelerationstructurenv3">vkCmdCopyAccelerationStructureNV(3)</h3>
<div class="sect3">
<h4 id="_name_32">Name</h4>
<div class="paragraph">
<p>vkCmdCopyAccelerationStructureNV - Copy an acceleration structure</p>
</div>
</div>
<div class="sect3">
<h4 id="_c_specification_32">C Specification</h4>
<div class="paragraph">
<p>To copy an acceleration structure call:</p>
</div>
<div id="vkCmdCopyAccelerationStructureNV" class="listingblock">
<div class="content">
<pre class="highlight"><code class="language-c++" data-lang="c++">void vkCmdCopyAccelerationStructureNV(
    VkCommandBuffer                             commandBuffer,
    VkAccelerationStructureNV                   dst,
    VkAccelerationStructureNV                   src,
    VkCopyAccelerationStructureModeNV           mode);</code></pre>
</div>
</div>
</div>
<div class="sect3">
<h4 id="_parameters_32">Parameters</h4>
<div class="ulist">
<ul>
<li>
<p><code>commandBuffer</code> is the command buffer into which the command will be
recorded.</p>
</li>
<li>
<p><code>dst</code> points to the target acceleration structure for the copy.</p>
</li>
<li>
<p><code>src</code> points to the source acceleration structure for the copy.</p>
</li>
<li>
<p><code>mode</code> is a <a href="#VkCopyAccelerationStructureModeNV">VkCopyAccelerationStructureModeNV</a> value that
specifies additional operations to perform during the copy.</p>
</li>
</ul>
</div>
</div>
<div class="sect3">
<h4 id="_description_32">Description</h4>
<div class="sidebarblock">
<div class="content">
<div class="title">Valid Usage</div>
<div class="ulist">
<ul>
<li>
<p><a id="VUID-vkCmdCopyAccelerationStructureNV-mode-02496"></a>
<code>mode</code> <strong class="purple">must</strong> be <code>VK_COPY_ACCELERATION_STRUCTURE_MODE_COMPACT_NV</code>
or <code>VK_COPY_ACCELERATION_STRUCTURE_MODE_CLONE_NV</code></p>
</li>
<li>
<p><a id="VUID-vkCmdCopyAccelerationStructureNV-src-02497"></a>
<code>src</code> <strong class="purple">must</strong> have been built with
<code>VK_BUILD_ACCELERATION_STRUCTURE_ALLOW_COMPACTION_BIT_NV</code> if
<code>mode</code> is <code>VK_COPY_ACCELERATION_STRUCTURE_MODE_COMPACT_NV</code></p>
</li>
</ul>
</div>
</div>
</div>
<div class="sidebarblock">
<div class="content">
<div class="title">Valid Usage (Implicit)</div>
<div class="ulist">
<ul>
<li>
<p><a id="VUID-vkCmdCopyAccelerationStructureNV-commandBuffer-parameter"></a> <code>commandBuffer</code> <strong class="purple">must</strong> be a valid <code>VkCommandBuffer</code> handle</p>
</li>
<li>
<p><a id="VUID-vkCmdCopyAccelerationStructureNV-dst-parameter"></a> <code>dst</code> <strong class="purple">must</strong> be a valid <code>VkAccelerationStructureNV</code> handle</p>
</li>
<li>
<p><a id="VUID-vkCmdCopyAccelerationStructureNV-src-parameter"></a> <code>src</code> <strong class="purple">must</strong> be a valid <code>VkAccelerationStructureNV</code> handle</p>
</li>
<li>
<p><a id="VUID-vkCmdCopyAccelerationStructureNV-mode-parameter"></a> <code>mode</code> <strong class="purple">must</strong> be a valid <a href="#VkCopyAccelerationStructureModeNV">VkCopyAccelerationStructureModeNV</a> value</p>
</li>
<li>
<p><a id="VUID-vkCmdCopyAccelerationStructureNV-commandBuffer-recording"></a> <code>commandBuffer</code> <strong class="purple">must</strong> be in the <a href="#commandbuffers-lifecycle">recording state</a></p>
</li>
<li>
<p><a id="VUID-vkCmdCopyAccelerationStructureNV-commandBuffer-cmdpool"></a> The <code>VkCommandPool</code> that <code>commandBuffer</code> was allocated from <strong class="purple">must</strong> support compute operations</p>
</li>
<li>
<p><a id="VUID-vkCmdCopyAccelerationStructureNV-commonparent"></a> Each of <code>commandBuffer</code>, <code>dst</code>, and <code>src</code> <strong class="purple">must</strong> have been created, allocated, or retrieved from the same <code>VkDevice</code></p>
</li>
</ul>
</div>
</div>
</div>
<div class="sidebarblock">
<div class="content">
<div class="title">Host Synchronization</div>
<div class="ulist">
<ul>
<li>
<p>Host access to the <code>VkCommandPool</code> that <code>commandBuffer</code> was allocated from <strong class="purple">must</strong> be externally synchronized</p>
</li>
</ul>
</div>
</div>
</div>
<div class="sidebarblock">
<div class="content">
<div class="title">Command Properties</div>
<table class="tableblock frame-all grid-all stretch">
<colgroup>
<col style="width: 25%;">
<col style="width: 25%;">
<col style="width: 25%;">
<col style="width: 25%;">
</colgroup>
<thead>
<tr>
<th class="tableblock halign-left valign-top"><a href="#VkCommandBufferLevel">Command Buffer Levels</a></th>
<th class="tableblock halign-left valign-top"><a href="#vkCmdBeginRenderPass">Render Pass Scope</a></th>
<th class="tableblock halign-left valign-top"><a href="#VkQueueFlagBits">Supported Queue Types</a></th>
<th class="tableblock halign-left valign-top"><a href="#synchronization-pipeline-stages-types">Pipeline Type</a></th>
</tr>
</thead>
<tbody>
<tr>
<td class="tableblock halign-left valign-top"><p class="tableblock">Primary<br>
Secondary</p></td>
<td class="tableblock halign-left valign-top"><p class="tableblock">Both</p></td>
<td class="tableblock halign-left valign-top"><p class="tableblock">Compute</p></td>
<td class="tableblock halign-left valign-top"></td>
</tr>
</tbody>
</table>
</div>
</div>
</div>
<div class="sect3">
<h4 id="_see_also_32">See Also</h4>
<div class="paragraph">
<p><a href="#VkAccelerationStructureNV">VkAccelerationStructureNV</a>, <a href="#VkCommandBuffer">VkCommandBuffer</a>, <a href="#VkCopyAccelerationStructureModeNV">VkCopyAccelerationStructureModeNV</a></p>
</div>
</div>
<div class="sect3">
<h4 id="_document_notes_32">Document Notes</h4>
<div class="paragraph">
<p>For more information, see the Vulkan Specification at URL</p>
</div>
<div class="paragraph">
<p><a href="https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#vkCmdCopyAccelerationStructureNV" class="bare">https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#vkCmdCopyAccelerationStructureNV</a></p>
</div>
<div class="paragraph">
<p>This page is extracted from the Vulkan Specification.
Fixes and changes should be made to the Specification, not directly.</p>
</div>
<div style="page-break-after: always;"></div>
</div>
</div>
<div class="sect2">
<h3 id="_vkcmdcopybuffer3">vkCmdCopyBuffer(3)</h3>
<div class="sect3">
<h4 id="_name_33">Name</h4>
<div class="paragraph">
<p>vkCmdCopyBuffer - Copy data between buffer regions</p>
</div>
</div>
<div class="sect3">
<h4 id="_c_specification_33">C Specification</h4>
<div class="paragraph">
<p>To copy data between buffer objects, call:</p>
</div>
<div id="vkCmdCopyBuffer" class="listingblock">
<div class="content">
<pre class="highlight"><code class="language-c++" data-lang="c++">void vkCmdCopyBuffer(
    VkCommandBuffer                             commandBuffer,
    VkBuffer                                    srcBuffer,
    VkBuffer                                    dstBuffer,
    uint32_t                                    regionCount,
    const VkBufferCopy*                         pRegions);</code></pre>
</div>
</div>
</div>
<div class="sect3">
<h4 id="_parameters_33">Parameters</h4>
<div class="ulist">
<ul>
<li>
<p><code>commandBuffer</code> is the command buffer into which the command will be
recorded.</p>
</li>
<li>
<p><code>srcBuffer</code> is the source buffer.</p>
</li>
<li>
<p><code>dstBuffer</code> is the destination buffer.</p>
</li>
<li>
<p><code>regionCount</code> is the number of regions to copy.</p>
</li>
<li>
<p><code>pRegions</code> is a pointer to an array of <a href="#VkBufferCopy">VkBufferCopy</a> structures
specifying the regions to copy.</p>
</li>
</ul>
</div>
</div>
<div class="sect3">
<h4 id="_description_33">Description</h4>
<div class="paragraph">
<p>Each region in <code>pRegions</code> is copied from the source buffer to the same
region of the destination buffer.
<code>srcBuffer</code> and <code>dstBuffer</code> <strong class="purple">can</strong> be the same buffer or alias the
same memory, but the resulting values are undefined if the copy regions
overlap in memory.</p>
</div>
<div class="sidebarblock">
<div class="content">
<div class="title">Valid Usage</div>
<div class="ulist">
<ul>
<li>
<p><a id="VUID-vkCmdCopyBuffer-srcOffset-00113"></a>
The <code>srcOffset</code> member of each element of <code>pRegions</code> <strong class="purple">must</strong> be
less than the size of <code>srcBuffer</code></p>
</li>
<li>
<p><a id="VUID-vkCmdCopyBuffer-dstOffset-00114"></a>
The <code>dstOffset</code> member of each element of <code>pRegions</code> <strong class="purple">must</strong> be
less than the size of <code>dstBuffer</code></p>
</li>
<li>
<p><a id="VUID-vkCmdCopyBuffer-size-00115"></a>
The <code>size</code> member of each element of <code>pRegions</code> <strong class="purple">must</strong> be less
than or equal to the size of <code>srcBuffer</code> minus <code>srcOffset</code></p>
</li>
<li>
<p><a id="VUID-vkCmdCopyBuffer-size-00116"></a>
The <code>size</code> member of each element of <code>pRegions</code> <strong class="purple">must</strong> be less
than or equal to the size of <code>dstBuffer</code> minus <code>dstOffset</code></p>
</li>
<li>
<p><a id="VUID-vkCmdCopyBuffer-pRegions-00117"></a>
The union of the source regions, and the union of the destination
regions, specified by the elements of <code>pRegions</code>, <strong class="purple">must</strong> not overlap
in memory</p>
</li>
<li>
<p><a id="VUID-vkCmdCopyBuffer-srcBuffer-00118"></a>
<code>srcBuffer</code> <strong class="purple">must</strong> have been created with
<code>VK_BUFFER_USAGE_TRANSFER_SRC_BIT</code> usage flag</p>
</li>
<li>
<p><a id="VUID-vkCmdCopyBuffer-srcBuffer-00119"></a>
If <code>srcBuffer</code> is non-sparse then it <strong class="purple">must</strong> be bound completely and
contiguously to a single <code>VkDeviceMemory</code> object</p>
</li>
<li>
<p><a id="VUID-vkCmdCopyBuffer-dstBuffer-00120"></a>
<code>dstBuffer</code> <strong class="purple">must</strong> have been created with
<code>VK_BUFFER_USAGE_TRANSFER_DST_BIT</code> usage flag</p>
</li>
<li>
<p><a id="VUID-vkCmdCopyBuffer-dstBuffer-00121"></a>
If <code>dstBuffer</code> is non-sparse then it <strong class="purple">must</strong> be bound completely and
contiguously to a single <code>VkDeviceMemory</code> object</p>
</li>
<li>
<p><a id="VUID-vkCmdCopyBuffer-commandBuffer-01822"></a>
If <code>commandBuffer</code> is an unprotected command buffer, then
<code>srcBuffer</code> <strong class="purple">must</strong> not be a protected buffer</p>
</li>
<li>
<p><a id="VUID-vkCmdCopyBuffer-commandBuffer-01823"></a>
If <code>commandBuffer</code> is an unprotected command buffer, then
<code>dstBuffer</code> <strong class="purple">must</strong> not be a protected buffer</p>
</li>
<li>
<p><a id="VUID-vkCmdCopyBuffer-commandBuffer-01824"></a>
If <code>commandBuffer</code> is a protected command buffer, then
<code>dstBuffer</code> <strong class="purple">must</strong> not be an unprotected buffer</p>
</li>
</ul>
</div>
</div>
</div>
<div class="sidebarblock">
<div class="content">
<div class="title">Valid Usage (Implicit)</div>
<div class="ulist">
<ul>
<li>
<p><a id="VUID-vkCmdCopyBuffer-commandBuffer-parameter"></a> <code>commandBuffer</code> <strong class="purple">must</strong> be a valid <code>VkCommandBuffer</code> handle</p>
</li>
<li>
<p><a id="VUID-vkCmdCopyBuffer-srcBuffer-parameter"></a> <code>srcBuffer</code> <strong class="purple">must</strong> be a valid <code>VkBuffer</code> handle</p>
</li>
<li>
<p><a id="VUID-vkCmdCopyBuffer-dstBuffer-parameter"></a> <code>dstBuffer</code> <strong class="purple">must</strong> be a valid <code>VkBuffer</code> handle</p>
</li>
<li>
<p><a id="VUID-vkCmdCopyBuffer-pRegions-parameter"></a> <code>pRegions</code> <strong class="purple">must</strong> be a valid pointer to an array of <code>regionCount</code> valid <code>VkBufferCopy</code> structures</p>
</li>
<li>
<p><a id="VUID-vkCmdCopyBuffer-commandBuffer-recording"></a> <code>commandBuffer</code> <strong class="purple">must</strong> be in the <a href="#commandbuffers-lifecycle">recording state</a></p>
</li>
<li>
<p><a id="VUID-vkCmdCopyBuffer-commandBuffer-cmdpool"></a> The <code>VkCommandPool</code> that <code>commandBuffer</code> was allocated from <strong class="purple">must</strong> support transfer, graphics, or compute operations</p>
</li>
<li>
<p><a id="VUID-vkCmdCopyBuffer-renderpass"></a> This command <strong class="purple">must</strong> only be called outside of a render pass instance</p>
</li>
<li>
<p><a id="VUID-vkCmdCopyBuffer-regionCount-arraylength"></a> <code>regionCount</code> <strong class="purple">must</strong> be greater than <code>0</code></p>
</li>
<li>
<p><a id="VUID-vkCmdCopyBuffer-commonparent"></a> Each of <code>commandBuffer</code>, <code>dstBuffer</code>, and <code>srcBuffer</code> <strong class="purple">must</strong> have been created, allocated, or retrieved from the same <code>VkDevice</code></p>
</li>
</ul>
</div>
</div>
</div>
<div class="sidebarblock">
<div class="content">
<div class="title">Host Synchronization</div>
<div class="ulist">
<ul>
<li>
<p>Host access to <code>commandBuffer</code> <strong class="purple">must</strong> be externally synchronized</p>
</li>
<li>
<p>Host access to the <code>VkCommandPool</code> that <code>commandBuffer</code> was allocated from <strong class="purple">must</strong> be externally synchronized</p>
</li>
</ul>
</div>
</div>
</div>
<div class="sidebarblock">
<div class="content">
<div class="title">Command Properties</div>
<table class="tableblock frame-all grid-all stretch">
<colgroup>
<col style="width: 25%;">
<col style="width: 25%;">
<col style="width: 25%;">
<col style="width: 25%;">
</colgroup>
<thead>
<tr>
<th class="tableblock halign-left valign-top"><a href="#VkCommandBufferLevel">Command Buffer Levels</a></th>
<th class="tableblock halign-left valign-top"><a href="#vkCmdBeginRenderPass">Render Pass Scope</a></th>
<th class="tableblock halign-left valign-top"><a href="#VkQueueFlagBits">Supported Queue Types</a></th>
<th class="tableblock halign-left valign-top"><a href="#synchronization-pipeline-stages-types">Pipeline Type</a></th>
</tr>
</thead>
<tbody>
<tr>
<td class="tableblock halign-left valign-top"><p class="tableblock">Primary<br>
Secondary</p></td>
<td class="tableblock halign-left valign-top"><p class="tableblock">Outside</p></td>
<td class="tableblock halign-left valign-top"><p class="tableblock">Transfer<br>
Graphics<br>
Compute</p></td>
<td class="tableblock halign-left valign-top"><p class="tableblock">Transfer</p></td>
</tr>
</tbody>
</table>
</div>
</div>
</div>
<div class="sect3">
<h4 id="_see_also_33">See Also</h4>
<div class="paragraph">
<p><a href="#VkBuffer">VkBuffer</a>, <a href="#VkBufferCopy">VkBufferCopy</a>, <a href="#VkCommandBuffer">VkCommandBuffer</a></p>
</div>
</div>
<div class="sect3">
<h4 id="_document_notes_33">Document Notes</h4>
<div class="paragraph">
<p>For more information, see the Vulkan Specification at URL</p>
</div>
<div class="paragraph">
<p><a href="https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#vkCmdCopyBuffer" class="bare">https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#vkCmdCopyBuffer</a></p>
</div>
<div class="paragraph">
<p>This page is extracted from the Vulkan Specification.
Fixes and changes should be made to the Specification, not directly.</p>
</div>
<div style="page-break-after: always;"></div>
</div>
</div>
<div class="sect2">
<h3 id="_vkcmdcopybuffertoimage3">vkCmdCopyBufferToImage(3)</h3>
<div class="sect3">
<h4 id="_name_34">Name</h4>
<div class="paragraph">
<p>vkCmdCopyBufferToImage - Copy data from a buffer into an image</p>
</div>
</div>
<div class="sect3">
<h4 id="_c_specification_34">C Specification</h4>
<div class="paragraph">
<p>To copy data from a buffer object to an image object, call:</p>
</div>
<div id="vkCmdCopyBufferToImage" class="listingblock">
<div class="content">
<pre class="highlight"><code class="language-c++" data-lang="c++">void vkCmdCopyBufferToImage(
    VkCommandBuffer                             commandBuffer,
    VkBuffer                                    srcBuffer,
    VkImage                                     dstImage,
    VkImageLayout                               dstImageLayout,
    uint32_t                                    regionCount,
    const VkBufferImageCopy*                    pRegions);</code></pre>
</div>
</div>
</div>
<div class="sect3">
<h4 id="_parameters_34">Parameters</h4>
<div class="ulist">
<ul>
<li>
<p><code>commandBuffer</code> is the command buffer into which the command will be
recorded.</p>
</li>
<li>
<p><code>srcBuffer</code> is the source buffer.</p>
</li>
<li>
<p><code>dstImage</code> is the destination image.</p>
</li>
<li>
<p><code>dstImageLayout</code> is the layout of the destination image subresources
for the copy.</p>
</li>
<li>
<p><code>regionCount</code> is the number of regions to copy.</p>
</li>
<li>
<p><code>pRegions</code> is a pointer to an array of <a href="#VkBufferImageCopy">VkBufferImageCopy</a>
structures specifying the regions to copy.</p>
</li>
</ul>
</div>
</div>
<div class="sect3">
<h4 id="_description_34">Description</h4>
<div class="paragraph">
<p>Each region in <code>pRegions</code> is copied from the specified region of the
source buffer to the specified region of the destination image.</p>
</div>
<div class="paragraph">
<p>If the format of <code>dstImage</code> is a
<a href="vkspec.html#formats-requiring-sampler-ycbcr-conversion">multi-planar image format</a>),
regions of each plane to be a target of a copy <strong class="purple">must</strong> be specified separately
using the <code>pRegions</code> member of the <a href="#VkBufferImageCopy">VkBufferImageCopy</a> structure.
In this case, the <code>aspectMask</code> of <code>imageSubresource</code> <strong class="purple">must</strong> be
<code>VK_IMAGE_ASPECT_PLANE_0_BIT</code>, <code>VK_IMAGE_ASPECT_PLANE_1_BIT</code>, or
<code>VK_IMAGE_ASPECT_PLANE_2_BIT</code>.
For the purposes of <code>vkCmdCopyBufferToImage</code>, each plane of a
multi-planar image is treated as having the format listed in
<a href="vkspec.html#formats-compatible-planes" class="bare">html/vkspec.html#formats-compatible-planes</a> for the plane identified by the
<code>aspectMask</code> of the corresponding subresource.
This applies both to <a href="#VkFormat">VkFormat</a> and to coordinates used in the copy,
which correspond to texels in the <em>plane</em> rather than how these texels map
to coordinates in the image as a whole.</p>
</div>
<div class="sidebarblock">
<div class="content">
<div class="title">Valid Usage</div>
<div class="ulist">
<ul>
<li>
<p><a id="VUID-vkCmdCopyBufferToImage-pRegions-00171"></a>
<code>srcBuffer</code> <strong class="purple">must</strong> be large enough to contain all buffer locations
that are accessed according to <a href="vkspec.html#copies-buffers-images-addressing">Buffer
and Image Addressing</a>, for each element of <code>pRegions</code></p>
</li>
<li>
<p><a id="VUID-vkCmdCopyBufferToImage-pRegions-00172"></a>
The image region specified by each element of <code>pRegions</code> <strong class="purple">must</strong> be a
region that is contained within <code>dstImage</code>
if the <code>dstImage</code>&#8217;s <a href="#VkFormat">VkFormat</a> is not a
<a href="vkspec.html#formats-requiring-sampler-ycbcr-conversion">multi-planar format</a>, and
<strong class="purple">must</strong> be a region that is contained within the plane being copied to if
the <code>dstImage</code>&#8217;s <a href="#VkFormat">VkFormat</a> is a multi-planar format</p>
</li>
<li>
<p><a id="VUID-vkCmdCopyBufferToImage-pRegions-00173"></a>
The union of all source regions, and the union of all destination
regions, specified by the elements of <code>pRegions</code>, <strong class="purple">must</strong> not overlap
in memory</p>
</li>
<li>
<p><a id="VUID-vkCmdCopyBufferToImage-srcBuffer-00174"></a>
<code>srcBuffer</code> <strong class="purple">must</strong> have been created with
<code>VK_BUFFER_USAGE_TRANSFER_SRC_BIT</code> usage flag</p>
</li>
<li>
<p><a id="VUID-vkCmdCopyBufferToImage-dstImage-01997"></a>
The <a href="vkspec.html#resources-image-format-features">format features</a> of
<code>dstImage</code> <strong class="purple">must</strong> contain <code>VK_FORMAT_FEATURE_TRANSFER_DST_BIT</code>.</p>
</li>
<li>
<p><a id="VUID-vkCmdCopyBufferToImage-srcBuffer-00176"></a>
If <code>srcBuffer</code> is non-sparse then it <strong class="purple">must</strong> be bound completely and
contiguously to a single <code>VkDeviceMemory</code> object</p>
</li>
<li>
<p><a id="VUID-vkCmdCopyBufferToImage-dstImage-00177"></a>
<code>dstImage</code> <strong class="purple">must</strong> have been created with
<code>VK_IMAGE_USAGE_TRANSFER_DST_BIT</code> usage flag</p>
</li>
<li>
<p><a id="VUID-vkCmdCopyBufferToImage-dstImage-00178"></a>
If <code>dstImage</code> is non-sparse then it <strong class="purple">must</strong> be bound completely and
contiguously to a single <code>VkDeviceMemory</code> object</p>
</li>
<li>
<p><a id="VUID-vkCmdCopyBufferToImage-dstImage-00179"></a>
<code>dstImage</code> <strong class="purple">must</strong> have a sample count equal to
<code>VK_SAMPLE_COUNT_1_BIT</code></p>
</li>
<li>
<p><a id="VUID-vkCmdCopyBufferToImage-dstImageLayout-00180"></a>
<code>dstImageLayout</code> <strong class="purple">must</strong> specify the layout of the image subresources
of <code>dstImage</code> specified in <code>pRegions</code> at the time this command
is executed on a <code>VkDevice</code></p>
</li>
<li>
<p><a id="VUID-vkCmdCopyBufferToImage-dstImageLayout-01396"></a>
<code>dstImageLayout</code> <strong class="purple">must</strong> be
<code>VK_IMAGE_LAYOUT_TRANSFER_DST_OPTIMAL</code>,
<code>VK_IMAGE_LAYOUT_GENERAL</code>, or
<code>VK_IMAGE_LAYOUT_SHARED_PRESENT_KHR</code></p>
</li>
<li>
<p><a id="VUID-vkCmdCopyBufferToImage-commandBuffer-01828"></a>
If <code>commandBuffer</code> is an unprotected command buffer, then
<code>srcBuffer</code> <strong class="purple">must</strong> not be a protected buffer</p>
</li>
<li>
<p><a id="VUID-vkCmdCopyBufferToImage-commandBuffer-01829"></a>
If <code>commandBuffer</code> is an unprotected command buffer, then
<code>dstImage</code> <strong class="purple">must</strong> not be a protected image</p>
</li>
<li>
<p><a id="VUID-vkCmdCopyBufferToImage-commandBuffer-01830"></a>
If <code>commandBuffer</code> is a protected command buffer, then
<code>dstImage</code> <strong class="purple">must</strong> not be an unprotected image</p>
</li>
<li>
<p><a id="VUID-vkCmdCopyBufferToImage-imageSubresource-01701"></a>
The <code>imageSubresource.mipLevel</code> member of each element of
<code>pRegions</code> <strong class="purple">must</strong> be less than the <code>mipLevels</code> specified in
<a href="#VkImageCreateInfo">VkImageCreateInfo</a> when <code>dstImage</code> was created</p>
</li>
<li>
<p><a id="VUID-vkCmdCopyBufferToImage-imageSubresource-01702"></a>
The <span class="eq"><code>imageSubresource.baseArrayLayer</code> + 
<code>imageSubresource.layerCount</code></span> of each element of <code>pRegions</code>
<strong class="purple">must</strong> be less than or equal to the <code>arrayLayers</code> specified in
<a href="#VkImageCreateInfo">VkImageCreateInfo</a> when <code>dstImage</code> was created</p>
</li>
<li>
<p><a id="VUID-vkCmdCopyBufferToImage-imageOffset-01793"></a>
The <code>imageOffset</code> and <code>imageExtent</code> members of each element of
<code>pRegions</code> <strong class="purple">must</strong> respect the image transfer granularity requirements
of <code>commandBuffer</code>&#8217;s command pool&#8217;s queue family, as described in
<a href="#VkQueueFamilyProperties">VkQueueFamilyProperties</a></p>
</li>
<li>
<p><a id="VUID-vkCmdCopyBufferToImage-dstImage-02543"></a>
<code>dstImage</code> <strong class="purple">must</strong> not have been created with <code>flags</code> containing
<code>VK_IMAGE_CREATE_SUBSAMPLED_BIT_EXT</code></p>
</li>
</ul>
</div>
</div>
</div>
<div class="sidebarblock">
<div class="content">
<div class="title">Valid Usage (Implicit)</div>
<div class="ulist">
<ul>
<li>
<p><a id="VUID-vkCmdCopyBufferToImage-commandBuffer-parameter"></a> <code>commandBuffer</code> <strong class="purple">must</strong> be a valid <code>VkCommandBuffer</code> handle</p>
</li>
<li>
<p><a id="VUID-vkCmdCopyBufferToImage-srcBuffer-parameter"></a> <code>srcBuffer</code> <strong class="purple">must</strong> be a valid <code>VkBuffer</code> handle</p>
</li>
<li>
<p><a id="VUID-vkCmdCopyBufferToImage-dstImage-parameter"></a> <code>dstImage</code> <strong class="purple">must</strong> be a valid <code>VkImage</code> handle</p>
</li>
<li>
<p><a id="VUID-vkCmdCopyBufferToImage-dstImageLayout-parameter"></a> <code>dstImageLayout</code> <strong class="purple">must</strong> be a valid <a href="#VkImageLayout">VkImageLayout</a> value</p>
</li>
<li>
<p><a id="VUID-vkCmdCopyBufferToImage-pRegions-parameter"></a> <code>pRegions</code> <strong class="purple">must</strong> be a valid pointer to an array of <code>regionCount</code> valid <code>VkBufferImageCopy</code> structures</p>
</li>
<li>
<p><a id="VUID-vkCmdCopyBufferToImage-commandBuffer-recording"></a> <code>commandBuffer</code> <strong class="purple">must</strong> be in the <a href="#commandbuffers-lifecycle">recording state</a></p>
</li>
<li>
<p><a id="VUID-vkCmdCopyBufferToImage-commandBuffer-cmdpool"></a> The <code>VkCommandPool</code> that <code>commandBuffer</code> was allocated from <strong class="purple">must</strong> support transfer, graphics, or compute operations</p>
</li>
<li>
<p><a id="VUID-vkCmdCopyBufferToImage-renderpass"></a> This command <strong class="purple">must</strong> only be called outside of a render pass instance</p>
</li>
<li>
<p><a id="VUID-vkCmdCopyBufferToImage-regionCount-arraylength"></a> <code>regionCount</code> <strong class="purple">must</strong> be greater than <code>0</code></p>
</li>
<li>
<p><a id="VUID-vkCmdCopyBufferToImage-commonparent"></a> Each of <code>commandBuffer</code>, <code>dstImage</code>, and <code>srcBuffer</code> <strong class="purple">must</strong> have been created, allocated, or retrieved from the same <code>VkDevice</code></p>
</li>
</ul>
</div>
</div>
</div>
<div class="sidebarblock">
<div class="content">
<div class="title">Host Synchronization</div>
<div class="ulist">
<ul>
<li>
<p>Host access to <code>commandBuffer</code> <strong class="purple">must</strong> be externally synchronized</p>
</li>
<li>
<p>Host access to the <code>VkCommandPool</code> that <code>commandBuffer</code> was allocated from <strong class="purple">must</strong> be externally synchronized</p>
</li>
</ul>
</div>
</div>
</div>
<div class="sidebarblock">
<div class="content">
<div class="title">Command Properties</div>
<table class="tableblock frame-all grid-all stretch">
<colgroup>
<col style="width: 25%;">
<col style="width: 25%;">
<col style="width: 25%;">
<col style="width: 25%;">
</colgroup>
<thead>
<tr>
<th class="tableblock halign-left valign-top"><a href="#VkCommandBufferLevel">Command Buffer Levels</a></th>
<th class="tableblock halign-left valign-top"><a href="#vkCmdBeginRenderPass">Render Pass Scope</a></th>
<th class="tableblock halign-left valign-top"><a href="#VkQueueFlagBits">Supported Queue Types</a></th>
<th class="tableblock halign-left valign-top"><a href="#synchronization-pipeline-stages-types">Pipeline Type</a></th>
</tr>
</thead>
<tbody>
<tr>
<td class="tableblock halign-left valign-top"><p class="tableblock">Primary<br>
Secondary</p></td>
<td class="tableblock halign-left valign-top"><p class="tableblock">Outside</p></td>
<td class="tableblock halign-left valign-top"><p class="tableblock">Transfer<br>
Graphics<br>
Compute</p></td>
<td class="tableblock halign-left valign-top"><p class="tableblock">Transfer</p></td>
</tr>
</tbody>
</table>
</div>
</div>
</div>
<div class="sect3">
<h4 id="_see_also_34">See Also</h4>
<div class="paragraph">
<p><a href="#VkBuffer">VkBuffer</a>, <a href="#VkBufferImageCopy">VkBufferImageCopy</a>, <a href="#VkCommandBuffer">VkCommandBuffer</a>, <a href="#VkImage">VkImage</a>, <a href="#VkImageLayout">VkImageLayout</a></p>
</div>
</div>
<div class="sect3">
<h4 id="_document_notes_34">Document Notes</h4>
<div class="paragraph">
<p>For more information, see the Vulkan Specification at URL</p>
</div>
<div class="paragraph">
<p><a href="https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#vkCmdCopyBufferToImage" class="bare">https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#vkCmdCopyBufferToImage</a></p>
</div>
<div class="paragraph">
<p>This page is extracted from the Vulkan Specification.
Fixes and changes should be made to the Specification, not directly.</p>
</div>
<div style="page-break-after: always;"></div>
</div>
</div>
<div class="sect2">
<h3 id="_vkcmdcopyimage3">vkCmdCopyImage(3)</h3>
<div class="sect3">
<h4 id="_name_35">Name</h4>
<div class="paragraph">
<p>vkCmdCopyImage - Copy data between images</p>
</div>
</div>
<div class="sect3">
<h4 id="_c_specification_35">C Specification</h4>
<div class="paragraph">
<p>To copy data between image objects, call:</p>
</div>
<div id="vkCmdCopyImage" class="listingblock">
<div class="content">
<pre class="highlight"><code class="language-c++" data-lang="c++">void vkCmdCopyImage(
    VkCommandBuffer                             commandBuffer,
    VkImage                                     srcImage,
    VkImageLayout                               srcImageLayout,
    VkImage                                     dstImage,
    VkImageLayout                               dstImageLayout,
    uint32_t                                    regionCount,
    const VkImageCopy*                          pRegions);</code></pre>
</div>
</div>
</div>
<div class="sect3">
<h4 id="_parameters_35">Parameters</h4>
<div class="ulist">
<ul>
<li>
<p><code>commandBuffer</code> is the command buffer into which the command will be
recorded.</p>
</li>
<li>
<p><code>srcImage</code> is the source image.</p>
</li>
<li>
<p><code>srcImageLayout</code> is the current layout of the source image
subresource.</p>
</li>
<li>
<p><code>dstImage</code> is the destination image.</p>
</li>
<li>
<p><code>dstImageLayout</code> is the current layout of the destination image
subresource.</p>
</li>
<li>
<p><code>regionCount</code> is the number of regions to copy.</p>
</li>
<li>
<p><code>pRegions</code> is a pointer to an array of <a href="#VkImageCopy">VkImageCopy</a> structures
specifying the regions to copy.</p>
</li>
</ul>
</div>
</div>
<div class="sect3">
<h4 id="_description_35">Description</h4>
<div class="paragraph">
<p>Each region in <code>pRegions</code> is copied from the source image to the same
region of the destination image.
<code>srcImage</code> and <code>dstImage</code> <strong class="purple">can</strong> be the same image or alias the same
memory.</p>
</div>
<div id="copies-images-format-compatibility" class="paragraph">
<p>The formats of <code>srcImage</code> and <code>dstImage</code> <strong class="purple">must</strong> be compatible.
Formats are compatible if they share the same class, as shown in the
<a href="vkspec.html#formats-compatibility">Compatible Formats</a> table.
Depth/stencil formats <strong class="purple">must</strong> match exactly.</p>
</div>
<div class="paragraph">
<p>If the format of <code>srcImage</code> or <code>dstImage</code> is a
<a href="vkspec.html#formats-requiring-sampler-ycbcr-conversion"><em>multi-planar</em> image format</a>,
regions of each plane to be copied <strong class="purple">must</strong> be specified separately using the
<code>srcSubresource</code> and <code>dstSubresource</code> members of the
<a href="#VkImageCopy">VkImageCopy</a> structure.
In this case, the <code>aspectMask</code> of the <code>srcSubresource</code> or
<code>dstSubresource</code> that refers to the multi-planar image <strong class="purple">must</strong> be
<code>VK_IMAGE_ASPECT_PLANE_0_BIT</code>, <code>VK_IMAGE_ASPECT_PLANE_1_BIT</code>, or
<code>VK_IMAGE_ASPECT_PLANE_2_BIT</code>.
For the purposes of <code>vkCmdCopyImage</code>, each plane of a multi-planar image
is treated as having the format listed in <a href="vkspec.html#formats-compatible-planes" class="bare">html/vkspec.html#formats-compatible-planes</a> for
the plane identified by the <code>aspectMask</code> of the corresponding
subresource.
This applies both to <a href="#VkFormat">VkFormat</a> and to coordinates used in the copy,
which correspond to texels in the <em>plane</em> rather than how these texels map
to coordinates in the image as a whole.</p>
</div>
<div class="admonitionblock note">
<table>
<tr>
<td class="icon">
<i class="fa icon-note" title="Note"></i>
</td>
<td class="content">
<div class="title">Note</div>
<div class="paragraph">
<p>For example, the <code>VK_IMAGE_ASPECT_PLANE_1_BIT</code> plane of a
<code>VK_FORMAT_G8_B8R8_2PLANE_420_UNORM</code> image is compatible with an image
of format <code>VK_FORMAT_R8G8_UNORM</code> and (less usefully) with the
<code>VK_IMAGE_ASPECT_PLANE_0_BIT</code> plane of an image of format
<code>VK_FORMAT_G10X6_B10X6_R10X6_3PLANE_420_UNORM_3PACK16</code>, as each texel is
2 bytes in size.</p>
</div>
</td>
</tr>
</table>
</div>
<div id="copies-images-format-size-compatibility" class="paragraph">
<p><code>vkCmdCopyImage</code> allows copying between <em>size-compatible</em> compressed and
uncompressed internal formats.
Formats are size-compatible if the texel block size of the uncompressed
format is equal to the texel block size of the compressed format.
Such a copy does not perform on-the-fly compression or decompression.
When copying from an uncompressed format to a compressed format, each texel
of uncompressed data of the source image is copied as a raw value to the
corresponding compressed texel block of the destination image.
When copying from a compressed format to an uncompressed format, each
compressed texel block of the source image is copied as a raw value to the
corresponding texel of uncompressed data in the destination image.
Thus, for example, it is legal to copy between a 128-bit uncompressed format
and a compressed format which has a 128-bit sized compressed texel block
representing 4×4 texels (using 8 bits per texel), or between a 64-bit
uncompressed format and a compressed format which has a 64-bit sized
compressed texel block representing 4×4 texels (using 4 bits per
texel).</p>
</div>
<div class="paragraph">
<p>When copying between compressed and uncompressed formats the <code>extent</code>
members represent the texel dimensions of the source image and not the
destination.
When copying from a compressed image to an uncompressed image the image
texel dimensions written to the uncompressed image will be source extent
divided by the compressed texel block dimensions.
When copying from an uncompressed image to a compressed image the image
texel dimensions written to the compressed image will be the source extent
multiplied by the compressed texel block dimensions.
In both cases the number of bytes read and the number of bytes written will
be identical.</p>
</div>
<div class="paragraph">
<p>Copying to or from block-compressed images is typically done in multiples of
the compressed texel block size.
For this reason the <code>extent</code> <strong class="purple">must</strong> be a multiple of the compressed texel
block dimension.
There is one exception to this rule which is <strong class="purple">required</strong> to handle compressed
images created with dimensions that are not a multiple of the compressed
texel block dimensions: if the <code>srcImage</code> is compressed, then:</p>
</div>
<div class="ulist">
<ul>
<li>
<p>If <code>extent.width</code> is not a multiple of the compressed texel block
width, then <span class="eq">(<code>extent.width</code> +  <code>srcOffset.x</code>)</span> <strong class="purple">must</strong>
equal the image subresource width.</p>
</li>
<li>
<p>If <code>extent.height</code> is not a multiple of the compressed texel block
height, then <span class="eq">(<code>extent.height</code> +  <code>srcOffset.y</code>)</span> <strong class="purple">must</strong>
equal the image subresource height.</p>
</li>
<li>
<p>If <code>extent.depth</code> is not a multiple of the compressed texel block
depth, then <span class="eq">(<code>extent.depth</code> +  <code>srcOffset.z</code>)</span> <strong class="purple">must</strong>
equal the image subresource depth.</p>
</li>
</ul>
</div>
<div class="paragraph">
<p>Similarly, if the <code>dstImage</code> is compressed, then:</p>
</div>
<div class="ulist">
<ul>
<li>
<p>If <code>extent.width</code> is not a multiple of the compressed texel block
width, then <span class="eq">(<code>extent.width</code> +  <code>dstOffset.x</code>)</span> <strong class="purple">must</strong>
equal the image subresource width.</p>
</li>
<li>
<p>If <code>extent.height</code> is not a multiple of the compressed texel block
height, then <span class="eq">(<code>extent.height</code> +  <code>dstOffset.y</code>)</span> <strong class="purple">must</strong>
equal the image subresource height.</p>
</li>
<li>
<p>If <code>extent.depth</code> is not a multiple of the compressed texel block
depth, then <span class="eq">(<code>extent.depth</code> +  <code>dstOffset.z</code>)</span> <strong class="purple">must</strong>
equal the image subresource depth.</p>
</li>
</ul>
</div>
<div class="paragraph">
<p>This allows the last compressed texel block of the image in each
non-multiple dimension to be included as a source or destination of the
copy.</p>
</div>
<div class="paragraph">
<p>&#8220;<code>_422</code>&#8221; image formats that are not
<a href="vkspec.html#formats-requiring-sampler-ycbcr-conversion"><em>multi-planar</em></a> are treated as
having a 2×1 compressed texel block for the purposes of these rules.</p>
</div>
<div class="paragraph">
<p><code>vkCmdCopyImage</code> <strong class="purple">can</strong> be used to copy image data between multisample
images, but both images <strong class="purple">must</strong> have the same number of samples.</p>
</div>
<div class="sidebarblock">
<div class="content">
<div class="title">Valid Usage</div>
<div class="ulist">
<ul>
<li>
<p><a id="VUID-vkCmdCopyImage-pRegions-00122"></a>
The source region specified by each element of <code>pRegions</code> <strong class="purple">must</strong> be a
region that is contained within <code>srcImage</code>
if the <code>srcImage</code>&#8217;s <a href="#VkFormat">VkFormat</a> is not a
<a href="vkspec.html#formats-requiring-sampler-ycbcr-conversion">multi-planar format</a>, and
<strong class="purple">must</strong> be a region that is contained within the plane being copied if the
<code>srcImage</code>&#8217;s <a href="#VkFormat">VkFormat</a> is a multi-planar format</p>
</li>
<li>
<p><a id="VUID-vkCmdCopyImage-pRegions-00123"></a>
The destination region specified by each element of <code>pRegions</code> <strong class="purple">must</strong>
be a region that is contained within <code>dstImage</code>
if the <code>dstImage</code>&#8217;s <a href="#VkFormat">VkFormat</a> is not a
<a href="vkspec.html#formats-requiring-sampler-ycbcr-conversion">multi-planar format</a>, and
<strong class="purple">must</strong> be a region that is contained within the plane being copied to if
the <code>dstImage</code>&#8217;s <a href="#VkFormat">VkFormat</a> is a multi-planar format</p>
</li>
<li>
<p><a id="VUID-vkCmdCopyImage-pRegions-00124"></a>
The union of all source regions, and the union of all destination
regions, specified by the elements of <code>pRegions</code>, <strong class="purple">must</strong> not overlap
in memory</p>
</li>
<li>
<p><a id="VUID-vkCmdCopyImage-srcImage-01995"></a>
The <a href="vkspec.html#resources-image-format-features">format features</a> of
<code>srcImage</code> <strong class="purple">must</strong> contain <code>VK_FORMAT_FEATURE_TRANSFER_SRC_BIT</code>.</p>
</li>
<li>
<p><a id="VUID-vkCmdCopyImage-srcImage-00126"></a>
<code>srcImage</code> <strong class="purple">must</strong> have been created with
<code>VK_IMAGE_USAGE_TRANSFER_SRC_BIT</code> usage flag</p>
</li>
<li>
<p><a id="VUID-vkCmdCopyImage-srcImage-01546"></a>
If <code>srcImage</code> is non-sparse then the image or <em>disjoint</em> plane to be
copied <strong class="purple">must</strong> be bound completely and contiguously to a single
<code>VkDeviceMemory</code> object</p>
</li>
<li>
<p><a id="VUID-vkCmdCopyImage-srcImageLayout-00128"></a>
<code>srcImageLayout</code> <strong class="purple">must</strong> specify the layout of the image subresources
of <code>srcImage</code> specified in <code>pRegions</code> at the time this command
is executed on a <code>VkDevice</code></p>
</li>
<li>
<p><a id="VUID-vkCmdCopyImage-srcImageLayout-01917"></a>
<code>srcImageLayout</code> <strong class="purple">must</strong> be
<code>VK_IMAGE_LAYOUT_TRANSFER_SRC_OPTIMAL</code>,
<code>VK_IMAGE_LAYOUT_GENERAL</code>, or
<code>VK_IMAGE_LAYOUT_SHARED_PRESENT_KHR</code></p>
</li>
<li>
<p><a id="VUID-vkCmdCopyImage-dstImage-01996"></a>
The <a href="vkspec.html#resources-image-format-features">format features</a> of
<code>dstImage</code> <strong class="purple">must</strong> contain <code>VK_FORMAT_FEATURE_TRANSFER_DST_BIT</code>.</p>
</li>
<li>
<p><a id="VUID-vkCmdCopyImage-dstImage-00131"></a>
<code>dstImage</code> <strong class="purple">must</strong> have been created with
<code>VK_IMAGE_USAGE_TRANSFER_DST_BIT</code> usage flag</p>
</li>
<li>
<p><a id="VUID-vkCmdCopyImage-dstImage-01547"></a>
If <code>dstImage</code> is non-sparse then the image or <em>disjoint</em> plane that
is the destination of the copy <strong class="purple">must</strong> be bound completely and
contiguously to a single <code>VkDeviceMemory</code> object</p>
</li>
<li>
<p><a id="VUID-vkCmdCopyImage-dstImageLayout-00133"></a>
<code>dstImageLayout</code> <strong class="purple">must</strong> specify the layout of the image subresources
of <code>dstImage</code> specified in <code>pRegions</code> at the time this command
is executed on a <code>VkDevice</code></p>
</li>
<li>
<p><a id="VUID-vkCmdCopyImage-dstImageLayout-01395"></a>
<code>dstImageLayout</code> <strong class="purple">must</strong> be
<code>VK_IMAGE_LAYOUT_TRANSFER_DST_OPTIMAL</code>,
<code>VK_IMAGE_LAYOUT_GENERAL</code>, or
<code>VK_IMAGE_LAYOUT_SHARED_PRESENT_KHR</code></p>
</li>
<li>
<p><a id="VUID-vkCmdCopyImage-srcImage-01548"></a>
If the <a href="#VkFormat">VkFormat</a> of each of <code>srcImage</code> and <code>dstImage</code> is
not a <a href="vkspec.html#formats-requiring-sampler-ycbcr-conversion"><em>multi-planar
format</em></a>, the <a href="#VkFormat">VkFormat</a> of each of <code>srcImage</code> and
<code>dstImage</code> <strong class="purple">must</strong> be compatible, as defined
<a href="vkspec.html#copies-images-format-compatibility">above</a></p>
</li>
<li>
<p><a id="VUID-vkCmdCopyImage-None-01549"></a>
In a copy to or from a plane of a
<a href="vkspec.html#formats-requiring-sampler-ycbcr-conversion">multi-planar image</a>, the
<a href="#VkFormat">VkFormat</a> of the image and plane <strong class="purple">must</strong> be compatible according to
<a href="vkspec.html#formats-compatible-planes">the description of compatible planes</a> for
the plane being copied</p>
</li>
<li>
<p><a id="VUID-vkCmdCopyImage-aspectMask-01550"></a>
When a copy is performed to or from an image with a
<a href="vkspec.html#formats-requiring-sampler-ycbcr-conversion">multi-planar format</a>, the
<code>aspectMask</code> of the <code>srcSubresource</code> and/or <code>dstSubresource</code>
that refers to the multi-planar image <strong class="purple">must</strong> be
<code>VK_IMAGE_ASPECT_PLANE_0_BIT</code>, <code>VK_IMAGE_ASPECT_PLANE_1_BIT</code>, or
<code>VK_IMAGE_ASPECT_PLANE_2_BIT</code> (with
<code>VK_IMAGE_ASPECT_PLANE_2_BIT</code> valid only for a <a href="#VkFormat">VkFormat</a> with
three planes)</p>
</li>
<li>
<p><a id="VUID-vkCmdCopyImage-srcImage-00136"></a>
The sample count of <code>srcImage</code> and <code>dstImage</code> <strong class="purple">must</strong> match</p>
</li>
<li>
<p><a id="VUID-vkCmdCopyImage-commandBuffer-01825"></a>
If <code>commandBuffer</code> is an unprotected command buffer, then
<code>srcImage</code> <strong class="purple">must</strong> not be a protected image</p>
</li>
<li>
<p><a id="VUID-vkCmdCopyImage-commandBuffer-01826"></a>
If <code>commandBuffer</code> is an unprotected command buffer, then
<code>dstImage</code> <strong class="purple">must</strong> not be a protected image</p>
</li>
<li>
<p><a id="VUID-vkCmdCopyImage-commandBuffer-01827"></a>
If <code>commandBuffer</code> is a protected command buffer, then
<code>dstImage</code> <strong class="purple">must</strong> not be an unprotected image</p>
</li>
<li>
<p><a id="VUID-vkCmdCopyImage-srcSubresource-01696"></a>
The <code>srcSubresource.mipLevel</code> member of each element of
<code>pRegions</code> <strong class="purple">must</strong> be less than the <code>mipLevels</code> specified in
<a href="#VkImageCreateInfo">VkImageCreateInfo</a> when <code>srcImage</code> was created</p>
</li>
<li>
<p><a id="VUID-vkCmdCopyImage-dstSubresource-01697"></a>
The <code>dstSubresource.mipLevel</code> member of each element of
<code>pRegions</code> <strong class="purple">must</strong> be less than the <code>mipLevels</code> specified in
<a href="#VkImageCreateInfo">VkImageCreateInfo</a> when <code>dstImage</code> was created</p>
</li>
<li>
<p><a id="VUID-vkCmdCopyImage-srcSubresource-01698"></a>
The <span class="eq"><code>srcSubresource.baseArrayLayer</code> + 
<code>srcSubresource.layerCount</code></span> of each element of <code>pRegions</code> <strong class="purple">must</strong>
be less than or equal to the <code>arrayLayers</code> specified in
<a href="#VkImageCreateInfo">VkImageCreateInfo</a> when <code>srcImage</code> was created</p>
</li>
<li>
<p><a id="VUID-vkCmdCopyImage-dstSubresource-01699"></a>
The <span class="eq"><code>dstSubresource.baseArrayLayer</code> + 
<code>dstSubresource.layerCount</code></span> of each element of <code>pRegions</code> <strong class="purple">must</strong>
be less than or equal to the <code>arrayLayers</code> specified in
<a href="#VkImageCreateInfo">VkImageCreateInfo</a> when <code>dstImage</code> was created</p>
</li>
<li>
<p><a id="VUID-vkCmdCopyImage-srcOffset-01783"></a>
The <code>srcOffset</code> and <code>extent</code> members of each element of
<code>pRegions</code> <strong class="purple">must</strong> respect the image transfer granularity requirements
of <code>commandBuffer</code>&#8217;s command pool&#8217;s queue family, as described in
<a href="#VkQueueFamilyProperties">VkQueueFamilyProperties</a></p>
</li>
<li>
<p><a id="VUID-vkCmdCopyImage-dstOffset-01784"></a>
The <code>dstOffset</code> and <code>extent</code> members of each element of
<code>pRegions</code> <strong class="purple">must</strong> respect the image transfer granularity requirements
of <code>commandBuffer</code>&#8217;s command pool&#8217;s queue family, as described in
<a href="#VkQueueFamilyProperties">VkQueueFamilyProperties</a></p>
</li>
<li>
<p><a id="VUID-vkCmdCopyImage-dstImage-02542"></a>
<code>dstImage</code> and <code>srcImage</code> <strong class="purple">must</strong> not have been created with
<code>flags</code> containing <code>VK_IMAGE_CREATE_SUBSAMPLED_BIT_EXT</code></p>
</li>
</ul>
</div>
</div>
</div>
<div class="sidebarblock">
<div class="content">
<div class="title">Valid Usage (Implicit)</div>
<div class="ulist">
<ul>
<li>
<p><a id="VUID-vkCmdCopyImage-commandBuffer-parameter"></a> <code>commandBuffer</code> <strong class="purple">must</strong> be a valid <code>VkCommandBuffer</code> handle</p>
</li>
<li>
<p><a id="VUID-vkCmdCopyImage-srcImage-parameter"></a> <code>srcImage</code> <strong class="purple">must</strong> be a valid <code>VkImage</code> handle</p>
</li>
<li>
<p><a id="VUID-vkCmdCopyImage-srcImageLayout-parameter"></a> <code>srcImageLayout</code> <strong class="purple">must</strong> be a valid <a href="#VkImageLayout">VkImageLayout</a> value</p>
</li>
<li>
<p><a id="VUID-vkCmdCopyImage-dstImage-parameter"></a> <code>dstImage</code> <strong class="purple">must</strong> be a valid <code>VkImage</code> handle</p>
</li>
<li>
<p><a id="VUID-vkCmdCopyImage-dstImageLayout-parameter"></a> <code>dstImageLayout</code> <strong class="purple">must</strong> be a valid <a href="#VkImageLayout">VkImageLayout</a> value</p>
</li>
<li>
<p><a id="VUID-vkCmdCopyImage-pRegions-parameter"></a> <code>pRegions</code> <strong class="purple">must</strong> be a valid pointer to an array of <code>regionCount</code> valid <code>VkImageCopy</code> structures</p>
</li>
<li>
<p><a id="VUID-vkCmdCopyImage-commandBuffer-recording"></a> <code>commandBuffer</code> <strong class="purple">must</strong> be in the <a href="#commandbuffers-lifecycle">recording state</a></p>
</li>
<li>
<p><a id="VUID-vkCmdCopyImage-commandBuffer-cmdpool"></a> The <code>VkCommandPool</code> that <code>commandBuffer</code> was allocated from <strong class="purple">must</strong> support transfer, graphics, or compute operations</p>
</li>
<li>
<p><a id="VUID-vkCmdCopyImage-renderpass"></a> This command <strong class="purple">must</strong> only be called outside of a render pass instance</p>
</li>
<li>
<p><a id="VUID-vkCmdCopyImage-regionCount-arraylength"></a> <code>regionCount</code> <strong class="purple">must</strong> be greater than <code>0</code></p>
</li>
<li>
<p><a id="VUID-vkCmdCopyImage-commonparent"></a> Each of <code>commandBuffer</code>, <code>dstImage</code>, and <code>srcImage</code> <strong class="purple">must</strong> have been created, allocated, or retrieved from the same <code>VkDevice</code></p>
</li>
</ul>
</div>
</div>
</div>
<div class="sidebarblock">
<div class="content">
<div class="title">Host Synchronization</div>
<div class="ulist">
<ul>
<li>
<p>Host access to <code>commandBuffer</code> <strong class="purple">must</strong> be externally synchronized</p>
</li>
<li>
<p>Host access to the <code>VkCommandPool</code> that <code>commandBuffer</code> was allocated from <strong class="purple">must</strong> be externally synchronized</p>
</li>
</ul>
</div>
</div>
</div>
<div class="sidebarblock">
<div class="content">
<div class="title">Command Properties</div>
<table class="tableblock frame-all grid-all stretch">
<colgroup>
<col style="width: 25%;">
<col style="width: 25%;">
<col style="width: 25%;">
<col style="width: 25%;">
</colgroup>
<thead>
<tr>
<th class="tableblock halign-left valign-top"><a href="#VkCommandBufferLevel">Command Buffer Levels</a></th>
<th class="tableblock halign-left valign-top"><a href="#vkCmdBeginRenderPass">Render Pass Scope</a></th>
<th class="tableblock halign-left valign-top"><a href="#VkQueueFlagBits">Supported Queue Types</a></th>
<th class="tableblock halign-left valign-top"><a href="#synchronization-pipeline-stages-types">Pipeline Type</a></th>
</tr>
</thead>
<tbody>
<tr>
<td class="tableblock halign-left valign-top"><p class="tableblock">Primary<br>
Secondary</p></td>
<td class="tableblock halign-left valign-top"><p class="tableblock">Outside</p></td>
<td class="tableblock halign-left valign-top"><p class="tableblock">Transfer<br>
Graphics<br>
Compute</p></td>
<td class="tableblock halign-left valign-top"><p class="tableblock">Transfer</p></td>
</tr>
</tbody>
</table>
</div>
</div>
</div>
<div class="sect3">
<h4 id="_see_also_35">See Also</h4>
<div class="paragraph">
<p><a href="#VkCommandBuffer">VkCommandBuffer</a>, <a href="#VkImage">VkImage</a>, <a href="#VkImageCopy">VkImageCopy</a>, <a href="#VkImageLayout">VkImageLayout</a></p>
</div>
</div>
<div class="sect3">
<h4 id="_document_notes_35">Document Notes</h4>
<div class="paragraph">
<p>For more information, see the Vulkan Specification at URL</p>
</div>
<div class="paragraph">
<p><a href="https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#vkCmdCopyImage" class="bare">https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#vkCmdCopyImage</a></p>
</div>
<div class="paragraph">
<p>This page is extracted from the Vulkan Specification.
Fixes and changes should be made to the Specification, not directly.</p>
</div>
<div style="page-break-after: always;"></div>
</div>
</div>
<div class="sect2">
<h3 id="_vkcmdcopyimagetobuffer3">vkCmdCopyImageToBuffer(3)</h3>
<div class="sect3">
<h4 id="_name_36">Name</h4>
<div class="paragraph">
<p>vkCmdCopyImageToBuffer - Copy image data into a buffer</p>
</div>
</div>
<div class="sect3">
<h4 id="_c_specification_36">C Specification</h4>
<div class="paragraph">
<p>To copy data from an image object to a buffer object, call:</p>
</div>
<div id="vkCmdCopyImageToBuffer" class="listingblock">
<div class="content">
<pre class="highlight"><code class="language-c++" data-lang="c++">void vkCmdCopyImageToBuffer(
    VkCommandBuffer                             commandBuffer,
    VkImage                                     srcImage,
    VkImageLayout                               srcImageLayout,
    VkBuffer                                    dstBuffer,
    uint32_t                                    regionCount,
    const VkBufferImageCopy*                    pRegions);</code></pre>
</div>
</div>
</div>
<div class="sect3">
<h4 id="_parameters_36">Parameters</h4>
<div class="ulist">
<ul>
<li>
<p><code>commandBuffer</code> is the command buffer into which the command will be
recorded.</p>
</li>
<li>
<p><code>srcImage</code> is the source image.</p>
</li>
<li>
<p><code>srcImageLayout</code> is the layout of the source image subresources for
the copy.</p>
</li>
<li>
<p><code>dstBuffer</code> is the destination buffer.</p>
</li>
<li>
<p><code>regionCount</code> is the number of regions to copy.</p>
</li>
<li>
<p><code>pRegions</code> is a pointer to an array of <a href="#VkBufferImageCopy">VkBufferImageCopy</a>
structures specifying the regions to copy.</p>
</li>
</ul>
</div>
</div>
<div class="sect3">
<h4 id="_description_36">Description</h4>
<div class="paragraph">
<p>Each region in <code>pRegions</code> is copied from the specified region of the
source image to the specified region of the destination buffer.</p>
</div>
<div class="paragraph">
<p>If the <a href="#VkFormat">VkFormat</a> of <code>srcImage</code> is a
<a href="vkspec.html#formats-requiring-sampler-ycbcr-conversion">multi-planar image format</a>,
regions of each plane to be a source of a copy <strong class="purple">must</strong> be specified separately
using the <code>pRegions</code> member of the <a href="#VkBufferImageCopy">VkBufferImageCopy</a> structure.
In this case, the <code>aspectMask</code> of <code>imageSubresource</code> <strong class="purple">must</strong> be
<code>VK_IMAGE_ASPECT_PLANE_0_BIT</code>, <code>VK_IMAGE_ASPECT_PLANE_1_BIT</code>, or
<code>VK_IMAGE_ASPECT_PLANE_2_BIT</code>.
For the purposes of <code>vkCmdCopyBufferToImage</code>, each plane of a
multi-planar image is treated as having the format listed in
<a href="vkspec.html#formats-compatible-planes" class="bare">html/vkspec.html#formats-compatible-planes</a> for the plane identified by the
<code>aspectMask</code> of the corresponding subresource.
This applies both to <a href="#VkFormat">VkFormat</a> and to coordinates used in the copy,
which correspond to texels in the <em>plane</em> rather than how these texels map
to coordinates in the image as a whole.</p>
</div>
<div class="sidebarblock">
<div class="content">
<div class="title">Valid Usage</div>
<div class="ulist">
<ul>
<li>
<p><a id="VUID-vkCmdCopyImageToBuffer-pRegions-00182"></a>
The image region specified by each element of <code>pRegions</code> <strong class="purple">must</strong> be a
region that is contained within <code>srcImage</code>
if the <code>srcImage</code>&#8217;s <a href="#VkFormat">VkFormat</a> is not a
<a href="vkspec.html#formats-requiring-sampler-ycbcr-conversion">multi-planar format</a>, and
<strong class="purple">must</strong> be a region that is contained within the plane being copied if the
<code>srcImage</code>&#8217;s <a href="#VkFormat">VkFormat</a> is a multi-planar format</p>
</li>
<li>
<p><a id="VUID-vkCmdCopyImageToBuffer-pRegions-00183"></a>
<code>dstBuffer</code> <strong class="purple">must</strong> be large enough to contain all buffer locations
that are accessed according to <a href="vkspec.html#copies-buffers-images-addressing">Buffer
and Image Addressing</a>, for each element of <code>pRegions</code></p>
</li>
<li>
<p><a id="VUID-vkCmdCopyImageToBuffer-pRegions-00184"></a>
The union of all source regions, and the union of all destination
regions, specified by the elements of <code>pRegions</code>, <strong class="purple">must</strong> not overlap
in memory</p>
</li>
<li>
<p><a id="VUID-vkCmdCopyImageToBuffer-srcImage-01998"></a>
The <a href="vkspec.html#resources-image-format-features">format features</a> of
<code>srcImage</code> <strong class="purple">must</strong> contain <code>VK_FORMAT_FEATURE_TRANSFER_SRC_BIT</code>.</p>
</li>
<li>
<p><a id="VUID-vkCmdCopyImageToBuffer-srcImage-00186"></a>
<code>srcImage</code> <strong class="purple">must</strong> have been created with
<code>VK_IMAGE_USAGE_TRANSFER_SRC_BIT</code> usage flag</p>
</li>
<li>
<p><a id="VUID-vkCmdCopyImageToBuffer-srcImage-00187"></a>
If <code>srcImage</code> is non-sparse then it <strong class="purple">must</strong> be bound completely and
contiguously to a single <code>VkDeviceMemory</code> object</p>
</li>
<li>
<p><a id="VUID-vkCmdCopyImageToBuffer-srcImage-00188"></a>
<code>srcImage</code> <strong class="purple">must</strong> have a sample count equal to
<code>VK_SAMPLE_COUNT_1_BIT</code></p>
</li>
<li>
<p><a id="VUID-vkCmdCopyImageToBuffer-srcImageLayout-00189"></a>
<code>srcImageLayout</code> <strong class="purple">must</strong> specify the layout of the image subresources
of <code>srcImage</code> specified in <code>pRegions</code> at the time this command
is executed on a <code>VkDevice</code></p>
</li>
<li>
<p><a id="VUID-vkCmdCopyImageToBuffer-srcImageLayout-01397"></a>
<code>srcImageLayout</code> <strong class="purple">must</strong> be <code>VK_IMAGE_LAYOUT_SHARED_PRESENT_KHR</code>,
<code>VK_IMAGE_LAYOUT_TRANSFER_SRC_OPTIMAL</code> or
<code>VK_IMAGE_LAYOUT_GENERAL</code></p>
</li>
<li>
<p><a id="VUID-vkCmdCopyImageToBuffer-dstBuffer-00191"></a>
<code>dstBuffer</code> <strong class="purple">must</strong> have been created with
<code>VK_BUFFER_USAGE_TRANSFER_DST_BIT</code> usage flag</p>
</li>
<li>
<p><a id="VUID-vkCmdCopyImageToBuffer-dstBuffer-00192"></a>
If <code>dstBuffer</code> is non-sparse then it <strong class="purple">must</strong> be bound completely and
contiguously to a single <code>VkDeviceMemory</code> object</p>
</li>
<li>
<p><a id="VUID-vkCmdCopyImageToBuffer-commandBuffer-01831"></a>
If <code>commandBuffer</code> is an unprotected command buffer, then
<code>srcImage</code> <strong class="purple">must</strong> not be a protected image</p>
</li>
<li>
<p><a id="VUID-vkCmdCopyImageToBuffer-commandBuffer-01832"></a>
If <code>commandBuffer</code> is an unprotected command buffer, then
<code>dstBuffer</code> <strong class="purple">must</strong> not be a protected buffer</p>
</li>
<li>
<p><a id="VUID-vkCmdCopyImageToBuffer-commandBuffer-01833"></a>
If <code>commandBuffer</code> is a protected command buffer, then
<code>dstBuffer</code> <strong class="purple">must</strong> not be an unprotected buffer</p>
</li>
<li>
<p><a id="VUID-vkCmdCopyImageToBuffer-imageSubresource-01703"></a>
The <code>imageSubresource.mipLevel</code> member of each element of
<code>pRegions</code> <strong class="purple">must</strong> be less than the <code>mipLevels</code> specified in
<a href="#VkImageCreateInfo">VkImageCreateInfo</a> when <code>srcImage</code> was created</p>
</li>
<li>
<p><a id="VUID-vkCmdCopyImageToBuffer-imageSubresource-01704"></a>
The <span class="eq"><code>imageSubresource.baseArrayLayer</code> + 
<code>imageSubresource.layerCount</code></span> of each element of <code>pRegions</code>
<strong class="purple">must</strong> be less than or equal to the <code>arrayLayers</code> specified in
<a href="#VkImageCreateInfo">VkImageCreateInfo</a> when <code>srcImage</code> was created</p>
</li>
<li>
<p><a id="VUID-vkCmdCopyImageToBuffer-imageOffset-01794"></a>
The <code>imageOffset</code> and <code>imageExtent</code> members of each element of
<code>pRegions</code> <strong class="purple">must</strong> respect the image transfer granularity requirements
of <code>commandBuffer</code>&#8217;s command pool&#8217;s queue family, as described in
<a href="#VkQueueFamilyProperties">VkQueueFamilyProperties</a></p>
</li>
<li>
<p><a id="VUID-vkCmdCopyImageToBuffer-srcImage-02544"></a>
<code>srcImage</code> <strong class="purple">must</strong> not have been created with <code>flags</code> containing
<code>VK_IMAGE_CREATE_SUBSAMPLED_BIT_EXT</code></p>
</li>
</ul>
</div>
</div>
</div>
<div class="sidebarblock">
<div class="content">
<div class="title">Valid Usage (Implicit)</div>
<div class="ulist">
<ul>
<li>
<p><a id="VUID-vkCmdCopyImageToBuffer-commandBuffer-parameter"></a> <code>commandBuffer</code> <strong class="purple">must</strong> be a valid <code>VkCommandBuffer</code> handle</p>
</li>
<li>
<p><a id="VUID-vkCmdCopyImageToBuffer-srcImage-parameter"></a> <code>srcImage</code> <strong class="purple">must</strong> be a valid <code>VkImage</code> handle</p>
</li>
<li>
<p><a id="VUID-vkCmdCopyImageToBuffer-srcImageLayout-parameter"></a> <code>srcImageLayout</code> <strong class="purple">must</strong> be a valid <a href="#VkImageLayout">VkImageLayout</a> value</p>
</li>
<li>
<p><a id="VUID-vkCmdCopyImageToBuffer-dstBuffer-parameter"></a> <code>dstBuffer</code> <strong class="purple">must</strong> be a valid <code>VkBuffer</code> handle</p>
</li>
<li>
<p><a id="VUID-vkCmdCopyImageToBuffer-pRegions-parameter"></a> <code>pRegions</code> <strong class="purple">must</strong> be a valid pointer to an array of <code>regionCount</code> valid <code>VkBufferImageCopy</code> structures</p>
</li>
<li>
<p><a id="VUID-vkCmdCopyImageToBuffer-commandBuffer-recording"></a> <code>commandBuffer</code> <strong class="purple">must</strong> be in the <a href="#commandbuffers-lifecycle">recording state</a></p>
</li>
<li>
<p><a id="VUID-vkCmdCopyImageToBuffer-commandBuffer-cmdpool"></a> The <code>VkCommandPool</code> that <code>commandBuffer</code> was allocated from <strong class="purple">must</strong> support transfer, graphics, or compute operations</p>
</li>
<li>
<p><a id="VUID-vkCmdCopyImageToBuffer-renderpass"></a> This command <strong class="purple">must</strong> only be called outside of a render pass instance</p>
</li>
<li>
<p><a id="VUID-vkCmdCopyImageToBuffer-regionCount-arraylength"></a> <code>regionCount</code> <strong class="purple">must</strong> be greater than <code>0</code></p>
</li>
<li>
<p><a id="VUID-vkCmdCopyImageToBuffer-commonparent"></a> Each of <code>commandBuffer</code>, <code>dstBuffer</code>, and <code>srcImage</code> <strong class="purple">must</strong> have been created, allocated, or retrieved from the same <code>VkDevice</code></p>
</li>
</ul>
</div>
</div>
</div>
<div class="sidebarblock">
<div class="content">
<div class="title">Host Synchronization</div>
<div class="ulist">
<ul>
<li>
<p>Host access to <code>commandBuffer</code> <strong class="purple">must</strong> be externally synchronized</p>
</li>
<li>
<p>Host access to the <code>VkCommandPool</code> that <code>commandBuffer</code> was allocated from <strong class="purple">must</strong> be externally synchronized</p>
</li>
</ul>
</div>
</div>
</div>
<div class="sidebarblock">
<div class="content">
<div class="title">Command Properties</div>
<table class="tableblock frame-all grid-all stretch">
<colgroup>
<col style="width: 25%;">
<col style="width: 25%;">
<col style="width: 25%;">
<col style="width: 25%;">
</colgroup>
<thead>
<tr>
<th class="tableblock halign-left valign-top"><a href="#VkCommandBufferLevel">Command Buffer Levels</a></th>
<th class="tableblock halign-left valign-top"><a href="#vkCmdBeginRenderPass">Render Pass Scope</a></th>
<th class="tableblock halign-left valign-top"><a href="#VkQueueFlagBits">Supported Queue Types</a></th>
<th class="tableblock halign-left valign-top"><a href="#synchronization-pipeline-stages-types">Pipeline Type</a></th>
</tr>
</thead>
<tbody>
<tr>
<td class="tableblock halign-left valign-top"><p class="tableblock">Primary<br>
Secondary</p></td>
<td class="tableblock halign-left valign-top"><p class="tableblock">Outside</p></td>
<td class="tableblock halign-left valign-top"><p class="tableblock">Transfer<br>
Graphics<br>
Compute</p></td>
<td class="tableblock halign-left valign-top"><p class="tableblock">Transfer</p></td>
</tr>
</tbody>
</table>
</div>
</div>
</div>
<div class="sect3">
<h4 id="_see_also_36">See Also</h4>
<div class="paragraph">
<p><a href="#VkBuffer">VkBuffer</a>, <a href="#VkBufferImageCopy">VkBufferImageCopy</a>, <a href="#VkCommandBuffer">VkCommandBuffer</a>, <a href="#VkImage">VkImage</a>, <a href="#VkImageLayout">VkImageLayout</a></p>
</div>
</div>
<div class="sect3">
<h4 id="_document_notes_36">Document Notes</h4>
<div class="paragraph">
<p>For more information, see the Vulkan Specification at URL</p>
</div>
<div class="paragraph">
<p><a href="https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#vkCmdCopyImageToBuffer" class="bare">https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#vkCmdCopyImageToBuffer</a></p>
</div>
<div class="paragraph">
<p>This page is extracted from the Vulkan Specification.
Fixes and changes should be made to the Specification, not directly.</p>
</div>
<div style="page-break-after: always;"></div>
</div>
</div>
<div class="sect2">
<h3 id="_vkcmdcopyquerypoolresults3">vkCmdCopyQueryPoolResults(3)</h3>
<div class="sect3">
<h4 id="_name_37">Name</h4>
<div class="paragraph">
<p>vkCmdCopyQueryPoolResults - Copy the results of queries in a query pool to a buffer object</p>
</div>
</div>
<div class="sect3">
<h4 id="_c_specification_37">C Specification</h4>
<div class="paragraph">
<p>To copy query statuses and numerical results directly to buffer memory,
call:</p>
</div>
<div id="vkCmdCopyQueryPoolResults" class="listingblock">
<div class="content">
<pre class="highlight"><code class="language-c++" data-lang="c++">void vkCmdCopyQueryPoolResults(
    VkCommandBuffer                             commandBuffer,
    VkQueryPool                                 queryPool,
    uint32_t                                    firstQuery,
    uint32_t                                    queryCount,
    VkBuffer                                    dstBuffer,
    VkDeviceSize                                dstOffset,
    VkDeviceSize                                stride,
    VkQueryResultFlags                          flags);</code></pre>
</div>
</div>
</div>
<div class="sect3">
<h4 id="_parameters_37">Parameters</h4>
<div class="ulist">
<ul>
<li>
<p><code>commandBuffer</code> is the command buffer into which this command will
be recorded.</p>
</li>
<li>
<p><code>queryPool</code> is the query pool managing the queries containing the
desired results.</p>
</li>
<li>
<p><code>firstQuery</code> is the initial query index.</p>
</li>
<li>
<p><code>queryCount</code> is the number of queries.
<code>firstQuery</code> and <code>queryCount</code> together define a range of
queries.</p>
</li>
<li>
<p><code>dstBuffer</code> is a <a href="#VkBuffer">VkBuffer</a> object that will receive the results
of the copy command.</p>
</li>
<li>
<p><code>dstOffset</code> is an offset into <code>dstBuffer</code>.</p>
</li>
<li>
<p><code>stride</code> is the stride in bytes between results for individual
queries within <code>dstBuffer</code>.
The required size of the backing memory for <code>dstBuffer</code> is
determined as described above for <a href="#vkGetQueryPoolResults">vkGetQueryPoolResults</a>.</p>
</li>
<li>
<p><code>flags</code> is a bitmask of <a href="#VkQueryResultFlagBits">VkQueryResultFlagBits</a> specifying how
and when results are returned.</p>
</li>
</ul>
</div>
</div>
<div class="sect3">
<h4 id="_description_37">Description</h4>
<div class="paragraph">
<p><code>vkCmdCopyQueryPoolResults</code> is guaranteed to see the effect of previous
uses of <code>vkCmdResetQueryPool</code> in the same queue, without any additional
synchronization.
Thus, the results will always reflect the most recent use of the query.</p>
</div>
<div class="paragraph">
<p><code>flags</code> has the same possible values described above for the <code>flags</code>
parameter of <a href="#vkGetQueryPoolResults">vkGetQueryPoolResults</a>, but the different style of
execution causes some subtle behavioral differences.
Because <code>vkCmdCopyQueryPoolResults</code> executes in order with respect to
other query commands, there is less ambiguity about which use of a query is
being requested.</p>
</div>
<div class="paragraph">
<p>If no bits are set in <code>flags</code>, results for all requested queries in the
available state are written as 32-bit unsigned integer values, and nothing
is written for queries in the unavailable state.</p>
</div>
<div class="paragraph">
<p>If <code>VK_QUERY_RESULT_64_BIT</code> is set, the results are written as an array
of 64-bit unsigned integer values as described for
<a href="#vkGetQueryPoolResults">vkGetQueryPoolResults</a>.</p>
</div>
<div class="paragraph">
<p>If <code>VK_QUERY_RESULT_WAIT_BIT</code> is set, the implementation will wait for
each query&#8217;s status to be in the available state before retrieving the
numerical results for that query.
This is guaranteed to reflect the most recent use of the query on the same
queue, assuming that the query is not being simultaneously used by other
queues.
If the query does not become available in a finite amount of time (e.g. due
to not issuing a query since the last reset), a <code>VK_ERROR_DEVICE_LOST</code>
error <strong class="purple">may</strong> occur.</p>
</div>
<div class="paragraph">
<p>Similarly, if <code>VK_QUERY_RESULT_WITH_AVAILABILITY_BIT</code> is set and
<code>VK_QUERY_RESULT_WAIT_BIT</code> is not set, the availability is guaranteed to
reflect the most recent use of the query on the same queue, assuming that
the query is not being simultaneously used by other queues.
As with <code>vkGetQueryPoolResults</code>, implementations <strong class="purple">must</strong> guarantee that if
they return a non-zero availability value, then the numerical results are
valid.</p>
</div>
<div class="paragraph">
<p>If <code>VK_QUERY_RESULT_PARTIAL_BIT</code> is set, <code>VK_QUERY_RESULT_WAIT_BIT</code>
is not set, and the query&#8217;s status is unavailable, an intermediate result
value between zero and the final result value is written for that query.</p>
</div>
<div class="paragraph">
<p><code>VK_QUERY_RESULT_PARTIAL_BIT</code> <strong class="purple">must</strong> not be used if the pool&#8217;s
<code>queryType</code> is <code>VK_QUERY_TYPE_TIMESTAMP</code>.</p>
</div>
<div class="paragraph">
<p><code>vkCmdCopyQueryPoolResults</code> is considered to be a transfer operation,
and its writes to buffer memory <strong class="purple">must</strong> be synchronized using
<code>VK_PIPELINE_STAGE_TRANSFER_BIT</code> and <code>VK_ACCESS_TRANSFER_WRITE_BIT</code>
before using the results.</p>
</div>
<div class="sidebarblock">
<div class="content">
<div class="title">Valid Usage</div>
<div class="ulist">
<ul>
<li>
<p><a id="VUID-vkCmdCopyQueryPoolResults-dstOffset-00819"></a>
<code>dstOffset</code> <strong class="purple">must</strong> be less than the size of <code>dstBuffer</code></p>
</li>
<li>
<p><a id="VUID-vkCmdCopyQueryPoolResults-firstQuery-00820"></a>
<code>firstQuery</code> <strong class="purple">must</strong> be less than the number of queries in
<code>queryPool</code></p>
</li>
<li>
<p><a id="VUID-vkCmdCopyQueryPoolResults-firstQuery-00821"></a>
The sum of <code>firstQuery</code> and <code>queryCount</code> <strong class="purple">must</strong> be less than or
equal to the number of queries in <code>queryPool</code></p>
</li>
<li>
<p><a id="VUID-vkCmdCopyQueryPoolResults-flags-00822"></a>
If <code>VK_QUERY_RESULT_64_BIT</code> is not set in <code>flags</code> then
<code>dstOffset</code> and <code>stride</code> <strong class="purple">must</strong> be multiples of <code>4</code></p>
</li>
<li>
<p><a id="VUID-vkCmdCopyQueryPoolResults-flags-00823"></a>
If <code>VK_QUERY_RESULT_64_BIT</code> is set in <code>flags</code> then
<code>dstOffset</code> and <code>stride</code> <strong class="purple">must</strong> be multiples of <code>8</code></p>
</li>
<li>
<p><a id="VUID-vkCmdCopyQueryPoolResults-dstBuffer-00824"></a>
<code>dstBuffer</code> <strong class="purple">must</strong> have enough storage, from <code>dstOffset</code>, to
contain the result of each query, as described
<a href="vkspec.html#queries-operation-memorylayout">here</a></p>
</li>
<li>
<p><a id="VUID-vkCmdCopyQueryPoolResults-dstBuffer-00825"></a>
<code>dstBuffer</code> <strong class="purple">must</strong> have been created with
<code>VK_BUFFER_USAGE_TRANSFER_DST_BIT</code> usage flag</p>
</li>
<li>
<p><a id="VUID-vkCmdCopyQueryPoolResults-dstBuffer-00826"></a>
If <code>dstBuffer</code> is non-sparse then it <strong class="purple">must</strong> be bound completely and
contiguously to a single <code>VkDeviceMemory</code> object</p>
</li>
<li>
<p><a id="VUID-vkCmdCopyQueryPoolResults-queryType-00827"></a>
If the <code>queryType</code> used to create <code>queryPool</code> was
<code>VK_QUERY_TYPE_TIMESTAMP</code>, <code>flags</code> <strong class="purple">must</strong> not contain
<code>VK_QUERY_RESULT_PARTIAL_BIT</code></p>
</li>
</ul>
</div>
</div>
</div>
<div class="sidebarblock">
<div class="content">
<div class="title">Valid Usage (Implicit)</div>
<div class="ulist">
<ul>
<li>
<p><a id="VUID-vkCmdCopyQueryPoolResults-commandBuffer-parameter"></a> <code>commandBuffer</code> <strong class="purple">must</strong> be a valid <code>VkCommandBuffer</code> handle</p>
</li>
<li>
<p><a id="VUID-vkCmdCopyQueryPoolResults-queryPool-parameter"></a> <code>queryPool</code> <strong class="purple">must</strong> be a valid <code>VkQueryPool</code> handle</p>
</li>
<li>
<p><a id="VUID-vkCmdCopyQueryPoolResults-dstBuffer-parameter"></a> <code>dstBuffer</code> <strong class="purple">must</strong> be a valid <code>VkBuffer</code> handle</p>
</li>
<li>
<p><a id="VUID-vkCmdCopyQueryPoolResults-flags-parameter"></a> <code>flags</code> <strong class="purple">must</strong> be a valid combination of <a href="#VkQueryResultFlagBits">VkQueryResultFlagBits</a> values</p>
</li>
<li>
<p><a id="VUID-vkCmdCopyQueryPoolResults-commandBuffer-recording"></a> <code>commandBuffer</code> <strong class="purple">must</strong> be in the <a href="#commandbuffers-lifecycle">recording state</a></p>
</li>
<li>
<p><a id="VUID-vkCmdCopyQueryPoolResults-commandBuffer-cmdpool"></a> The <code>VkCommandPool</code> that <code>commandBuffer</code> was allocated from <strong class="purple">must</strong> support graphics, or compute operations</p>
</li>
<li>
<p><a id="VUID-vkCmdCopyQueryPoolResults-renderpass"></a> This command <strong class="purple">must</strong> only be called outside of a render pass instance</p>
</li>
<li>
<p><a id="VUID-vkCmdCopyQueryPoolResults-commonparent"></a> Each of <code>commandBuffer</code>, <code>dstBuffer</code>, and <code>queryPool</code> <strong class="purple">must</strong> have been created, allocated, or retrieved from the same <code>VkDevice</code></p>
</li>
</ul>
</div>
</div>
</div>
<div class="sidebarblock">
<div class="content">
<div class="title">Host Synchronization</div>
<div class="ulist">
<ul>
<li>
<p>Host access to <code>commandBuffer</code> <strong class="purple">must</strong> be externally synchronized</p>
</li>
<li>
<p>Host access to the <code>VkCommandPool</code> that <code>commandBuffer</code> was allocated from <strong class="purple">must</strong> be externally synchronized</p>
</li>
</ul>
</div>
</div>
</div>
<div class="sidebarblock">
<div class="content">
<div class="title">Command Properties</div>
<table class="tableblock frame-all grid-all stretch">
<colgroup>
<col style="width: 25%;">
<col style="width: 25%;">
<col style="width: 25%;">
<col style="width: 25%;">
</colgroup>
<thead>
<tr>
<th class="tableblock halign-left valign-top"><a href="#VkCommandBufferLevel">Command Buffer Levels</a></th>
<th class="tableblock halign-left valign-top"><a href="#vkCmdBeginRenderPass">Render Pass Scope</a></th>
<th class="tableblock halign-left valign-top"><a href="#VkQueueFlagBits">Supported Queue Types</a></th>
<th class="tableblock halign-left valign-top"><a href="#synchronization-pipeline-stages-types">Pipeline Type</a></th>
</tr>
</thead>
<tbody>
<tr>
<td class="tableblock halign-left valign-top"><p class="tableblock">Primary<br>
Secondary</p></td>
<td class="tableblock halign-left valign-top"><p class="tableblock">Outside</p></td>
<td class="tableblock halign-left valign-top"><p class="tableblock">Graphics<br>
Compute</p></td>
<td class="tableblock halign-left valign-top"><p class="tableblock">Transfer</p></td>
</tr>
</tbody>
</table>
</div>
</div>
</div>
<div class="sect3">
<h4 id="_see_also_37">See Also</h4>
<div class="paragraph">
<p><a href="#VkBuffer">VkBuffer</a>, <a href="#VkCommandBuffer">VkCommandBuffer</a>, <code>VkDeviceSize</code>, <a href="#VkQueryPool">VkQueryPool</a>, <a href="#VkQueryResultFlags">VkQueryResultFlags</a></p>
</div>
</div>
<div class="sect3">
<h4 id="_document_notes_37">Document Notes</h4>
<div class="paragraph">
<p>For more information, see the Vulkan Specification at URL</p>
</div>
<div class="paragraph">
<p><a href="https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#vkCmdCopyQueryPoolResults" class="bare">https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#vkCmdCopyQueryPoolResults</a></p>
</div>
<div class="paragraph">
<p>This page is extracted from the Vulkan Specification.
Fixes and changes should be made to the Specification, not directly.</p>
</div>
<div style="page-break-after: always;"></div>
</div>
</div>
<div class="sect2">
<h3 id="_vkcmddebugmarkerbeginext3">vkCmdDebugMarkerBeginEXT(3)</h3>
<div class="sect3">
<h4 id="_name_38">Name</h4>
<div class="paragraph">
<p>vkCmdDebugMarkerBeginEXT - Open a command buffer marker region</p>
</div>
</div>
<div class="sect3">
<h4 id="_c_specification_38">C Specification</h4>
<div class="paragraph">
<p>A marker region can be opened by calling:</p>
</div>
<div id="vkCmdDebugMarkerBeginEXT" class="listingblock">
<div class="content">
<pre class="highlight"><code class="language-c++" data-lang="c++">void vkCmdDebugMarkerBeginEXT(
    VkCommandBuffer                             commandBuffer,
    const VkDebugMarkerMarkerInfoEXT*           pMarkerInfo);</code></pre>
</div>
</div>
</div>
<div class="sect3">
<h4 id="_parameters_38">Parameters</h4>
<div class="ulist">
<ul>
<li>
<p><code>commandBuffer</code> is the command buffer into which the command is
recorded.</p>
</li>
<li>
<p><code>pMarkerInfo</code> is a pointer to an instance of the
<a href="#VkDebugMarkerMarkerInfoEXT">VkDebugMarkerMarkerInfoEXT</a> structure specifying the parameters of
the marker region to open.</p>
</li>
</ul>
</div>
</div>
<div class="sect3">
<h4 id="_description_38">Description</h4>
<div class="sidebarblock">
<div class="content">
<div class="title">Valid Usage (Implicit)</div>
<div class="ulist">
<ul>
<li>
<p><a id="VUID-vkCmdDebugMarkerBeginEXT-commandBuffer-parameter"></a> <code>commandBuffer</code> <strong class="purple">must</strong> be a valid <code>VkCommandBuffer</code> handle</p>
</li>
<li>
<p><a id="VUID-vkCmdDebugMarkerBeginEXT-pMarkerInfo-parameter"></a> <code>pMarkerInfo</code> <strong class="purple">must</strong> be a valid pointer to a valid <code>VkDebugMarkerMarkerInfoEXT</code> structure</p>
</li>
<li>
<p><a id="VUID-vkCmdDebugMarkerBeginEXT-commandBuffer-recording"></a> <code>commandBuffer</code> <strong class="purple">must</strong> be in the <a href="#commandbuffers-lifecycle">recording state</a></p>
</li>
<li>
<p><a id="VUID-vkCmdDebugMarkerBeginEXT-commandBuffer-cmdpool"></a> The <code>VkCommandPool</code> that <code>commandBuffer</code> was allocated from <strong class="purple">must</strong> support graphics, or compute operations</p>
</li>
</ul>
</div>
</div>
</div>
<div class="sidebarblock">
<div class="content">
<div class="title">Host Synchronization</div>
<div class="ulist">
<ul>
<li>
<p>Host access to the <code>VkCommandPool</code> that <code>commandBuffer</code> was allocated from <strong class="purple">must</strong> be externally synchronized</p>
</li>
</ul>
</div>
</div>
</div>
<div class="sidebarblock">
<div class="content">
<div class="title">Command Properties</div>
<table class="tableblock frame-all grid-all stretch">
<colgroup>
<col style="width: 25%;">
<col style="width: 25%;">
<col style="width: 25%;">
<col style="width: 25%;">
</colgroup>
<thead>
<tr>
<th class="tableblock halign-left valign-top"><a href="#VkCommandBufferLevel">Command Buffer Levels</a></th>
<th class="tableblock halign-left valign-top"><a href="#vkCmdBeginRenderPass">Render Pass Scope</a></th>
<th class="tableblock halign-left valign-top"><a href="#VkQueueFlagBits">Supported Queue Types</a></th>
<th class="tableblock halign-left valign-top"><a href="#synchronization-pipeline-stages-types">Pipeline Type</a></th>
</tr>
</thead>
<tbody>
<tr>
<td class="tableblock halign-left valign-top"><p class="tableblock">Primary<br>
Secondary</p></td>
<td class="tableblock halign-left valign-top"><p class="tableblock">Both</p></td>
<td class="tableblock halign-left valign-top"><p class="tableblock">Graphics<br>
Compute</p></td>
<td class="tableblock halign-left valign-top"></td>
</tr>
</tbody>
</table>
</div>
</div>
</div>
<div class="sect3">
<h4 id="_see_also_38">See Also</h4>
<div class="paragraph">
<p><a href="#VkCommandBuffer">VkCommandBuffer</a>, <a href="#VkDebugMarkerMarkerInfoEXT">VkDebugMarkerMarkerInfoEXT</a></p>
</div>
</div>
<div class="sect3">
<h4 id="_document_notes_38">Document Notes</h4>
<div class="paragraph">
<p>For more information, see the Vulkan Specification at URL</p>
</div>
<div class="paragraph">
<p><a href="https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#vkCmdDebugMarkerBeginEXT" class="bare">https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#vkCmdDebugMarkerBeginEXT</a></p>
</div>
<div class="paragraph">
<p>This page is extracted from the Vulkan Specification.
Fixes and changes should be made to the Specification, not directly.</p>
</div>
<div style="page-break-after: always;"></div>
</div>
</div>
<div class="sect2">
<h3 id="_vkcmddebugmarkerendext3">vkCmdDebugMarkerEndEXT(3)</h3>
<div class="sect3">
<h4 id="_name_39">Name</h4>
<div class="paragraph">
<p>vkCmdDebugMarkerEndEXT - Close a command buffer marker region</p>
</div>
</div>
<div class="sect3">
<h4 id="_c_specification_39">C Specification</h4>
<div class="paragraph">
<p>A marker region can be closed by calling:</p>
</div>
<div id="vkCmdDebugMarkerEndEXT" class="listingblock">
<div class="content">
<pre class="highlight"><code class="language-c++" data-lang="c++">void vkCmdDebugMarkerEndEXT(
    VkCommandBuffer                             commandBuffer);</code></pre>
</div>
</div>
</div>
<div class="sect3">
<h4 id="_parameters_39">Parameters</h4>
<div class="ulist">
<ul>
<li>
<p><code>commandBuffer</code> is the command buffer into which the command is
recorded.</p>
</li>
</ul>
</div>
</div>
<div class="sect3">
<h4 id="_description_39">Description</h4>
<div class="paragraph">
<p>An application <strong class="purple">may</strong> open a marker region in one command buffer and close it
in another, or otherwise split marker regions across multiple command
buffers or multiple queue submissions.
When viewed from the linear series of submissions to a single queue, the
calls to <code>vkCmdDebugMarkerBeginEXT</code> and <code>vkCmdDebugMarkerEndEXT</code>
<strong class="purple">must</strong> be matched and balanced.</p>
</div>
<div class="sidebarblock">
<div class="content">
<div class="title">Valid Usage</div>
<div class="ulist">
<ul>
<li>
<p><a id="VUID-vkCmdDebugMarkerEndEXT-commandBuffer-01239"></a>
There <strong class="purple">must</strong> be an outstanding <a href="#vkCmdDebugMarkerBeginEXT">vkCmdDebugMarkerBeginEXT</a> command
prior to the <code>vkCmdDebugMarkerEndEXT</code> on the queue that
<code>commandBuffer</code> is submitted to</p>
</li>
<li>
<p><a id="VUID-vkCmdDebugMarkerEndEXT-commandBuffer-01240"></a>
If <code>commandBuffer</code> is a secondary command buffer, there <strong class="purple">must</strong> be an
outstanding <a href="#vkCmdDebugMarkerBeginEXT">vkCmdDebugMarkerBeginEXT</a> command recorded to
<code>commandBuffer</code> that has not previously been ended by a call to
<a href="#vkCmdDebugMarkerEndEXT">vkCmdDebugMarkerEndEXT</a>.</p>
</li>
</ul>
</div>
</div>
</div>
<div class="sidebarblock">
<div class="content">
<div class="title">Valid Usage (Implicit)</div>
<div class="ulist">
<ul>
<li>
<p><a id="VUID-vkCmdDebugMarkerEndEXT-commandBuffer-parameter"></a> <code>commandBuffer</code> <strong class="purple">must</strong> be a valid <code>VkCommandBuffer</code> handle</p>
</li>
<li>
<p><a id="VUID-vkCmdDebugMarkerEndEXT-commandBuffer-recording"></a> <code>commandBuffer</code> <strong class="purple">must</strong> be in the <a href="#commandbuffers-lifecycle">recording state</a></p>
</li>
<li>
<p><a id="VUID-vkCmdDebugMarkerEndEXT-commandBuffer-cmdpool"></a> The <code>VkCommandPool</code> that <code>commandBuffer</code> was allocated from <strong class="purple">must</strong> support graphics, or compute operations</p>
</li>
</ul>
</div>
</div>
</div>
<div class="sidebarblock">
<div class="content">
<div class="title">Host Synchronization</div>
<div class="ulist">
<ul>
<li>
<p>Host access to the <code>VkCommandPool</code> that <code>commandBuffer</code> was allocated from <strong class="purple">must</strong> be externally synchronized</p>
</li>
</ul>
</div>
</div>
</div>
<div class="sidebarblock">
<div class="content">
<div class="title">Command Properties</div>
<table class="tableblock frame-all grid-all stretch">
<colgroup>
<col style="width: 25%;">
<col style="width: 25%;">
<col style="width: 25%;">
<col style="width: 25%;">
</colgroup>
<thead>
<tr>
<th class="tableblock halign-left valign-top"><a href="#VkCommandBufferLevel">Command Buffer Levels</a></th>
<th class="tableblock halign-left valign-top"><a href="#vkCmdBeginRenderPass">Render Pass Scope</a></th>
<th class="tableblock halign-left valign-top"><a href="#VkQueueFlagBits">Supported Queue Types</a></th>
<th class="tableblock halign-left valign-top"><a href="#synchronization-pipeline-stages-types">Pipeline Type</a></th>
</tr>
</thead>
<tbody>
<tr>
<td class="tableblock halign-left valign-top"><p class="tableblock">Primary<br>
Secondary</p></td>
<td class="tableblock halign-left valign-top"><p class="tableblock">Both</p></td>
<td class="tableblock halign-left valign-top"><p class="tableblock">Graphics<br>
Compute</p></td>
<td class="tableblock halign-left valign-top"></td>
</tr>
</tbody>
</table>
</div>
</div>
</div>
<div class="sect3">
<h4 id="_see_also_39">See Also</h4>
<div class="paragraph">
<p><a href="#VkCommandBuffer">VkCommandBuffer</a></p>
</div>
</div>
<div class="sect3">
<h4 id="_document_notes_39">Document Notes</h4>
<div class="paragraph">
<p>For more information, see the Vulkan Specification at URL</p>
</div>
<div class="paragraph">
<p><a href="https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#vkCmdDebugMarkerEndEXT" class="bare">https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#vkCmdDebugMarkerEndEXT</a></p>
</div>
<div class="paragraph">
<p>This page is extracted from the Vulkan Specification.
Fixes and changes should be made to the Specification, not directly.</p>
</div>
<div style="page-break-after: always;"></div>
</div>
</div>
<div class="sect2">
<h3 id="_vkcmddebugmarkerinsertext3">vkCmdDebugMarkerInsertEXT(3)</h3>
<div class="sect3">
<h4 id="_name_40">Name</h4>
<div class="paragraph">
<p>vkCmdDebugMarkerInsertEXT - Insert a marker label into a command buffer</p>
</div>
</div>
<div class="sect3">
<h4 id="_c_specification_40">C Specification</h4>
<div class="paragraph">
<p>A single marker label can be inserted into a command buffer by calling:</p>
</div>
<div id="vkCmdDebugMarkerInsertEXT" class="listingblock">
<div class="content">
<pre class="highlight"><code class="language-c++" data-lang="c++">void vkCmdDebugMarkerInsertEXT(
    VkCommandBuffer                             commandBuffer,
    const VkDebugMarkerMarkerInfoEXT*           pMarkerInfo);</code></pre>
</div>
</div>
</div>
<div class="sect3">
<h4 id="_parameters_40">Parameters</h4>
<div class="ulist">
<ul>
<li>
<p><code>commandBuffer</code> is the command buffer into which the command is
recorded.</p>
</li>
<li>
<p><code>pMarkerInfo</code> is a pointer to an instance of the
<a href="#VkDebugMarkerMarkerInfoEXT">VkDebugMarkerMarkerInfoEXT</a> structure specifying the parameters of
the marker to insert.</p>
</li>
</ul>
</div>
</div>
<div class="sect3">
<h4 id="_description_40">Description</h4>
<div class="sidebarblock">
<div class="content">
<div class="title">Valid Usage (Implicit)</div>
<div class="ulist">
<ul>
<li>
<p><a id="VUID-vkCmdDebugMarkerInsertEXT-commandBuffer-parameter"></a> <code>commandBuffer</code> <strong class="purple">must</strong> be a valid <code>VkCommandBuffer</code> handle</p>
</li>
<li>
<p><a id="VUID-vkCmdDebugMarkerInsertEXT-pMarkerInfo-parameter"></a> <code>pMarkerInfo</code> <strong class="purple">must</strong> be a valid pointer to a valid <code>VkDebugMarkerMarkerInfoEXT</code> structure</p>
</li>
<li>
<p><a id="VUID-vkCmdDebugMarkerInsertEXT-commandBuffer-recording"></a> <code>commandBuffer</code> <strong class="purple">must</strong> be in the <a href="#commandbuffers-lifecycle">recording state</a></p>
</li>
<li>
<p><a id="VUID-vkCmdDebugMarkerInsertEXT-commandBuffer-cmdpool"></a> The <code>VkCommandPool</code> that <code>commandBuffer</code> was allocated from <strong class="purple">must</strong> support graphics, or compute operations</p>
</li>
</ul>
</div>
</div>
</div>
<div class="sidebarblock">
<div class="content">
<div class="title">Host Synchronization</div>
<div class="ulist">
<ul>
<li>
<p>Host access to the <code>VkCommandPool</code> that <code>commandBuffer</code> was allocated from <strong class="purple">must</strong> be externally synchronized</p>
</li>
</ul>
</div>
</div>
</div>
<div class="sidebarblock">
<div class="content">
<div class="title">Command Properties</div>
<table class="tableblock frame-all grid-all stretch">
<colgroup>
<col style="width: 25%;">
<col style="width: 25%;">
<col style="width: 25%;">
<col style="width: 25%;">
</colgroup>
<thead>
<tr>
<th class="tableblock halign-left valign-top"><a href="#VkCommandBufferLevel">Command Buffer Levels</a></th>
<th class="tableblock halign-left valign-top"><a href="#vkCmdBeginRenderPass">Render Pass Scope</a></th>
<th class="tableblock halign-left valign-top"><a href="#VkQueueFlagBits">Supported Queue Types</a></th>
<th class="tableblock halign-left valign-top"><a href="#synchronization-pipeline-stages-types">Pipeline Type</a></th>
</tr>
</thead>
<tbody>
<tr>
<td class="tableblock halign-left valign-top"><p class="tableblock">Primary<br>
Secondary</p></td>
<td class="tableblock halign-left valign-top"><p class="tableblock">Both</p></td>
<td class="tableblock halign-left valign-top"><p class="tableblock">Graphics<br>
Compute</p></td>
<td class="tableblock halign-left valign-top"></td>
</tr>
</tbody>
</table>
</div>
</div>
</div>
<div class="sect3">
<h4 id="_see_also_40">See Also</h4>
<div class="paragraph">
<p><a href="#VkCommandBuffer">VkCommandBuffer</a>, <a href="#VkDebugMarkerMarkerInfoEXT">VkDebugMarkerMarkerInfoEXT</a></p>
</div>
</div>
<div class="sect3">
<h4 id="_document_notes_40">Document Notes</h4>
<div class="paragraph">
<p>For more information, see the Vulkan Specification at URL</p>
</div>
<div class="paragraph">
<p><a href="https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#vkCmdDebugMarkerInsertEXT" class="bare">https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#vkCmdDebugMarkerInsertEXT</a></p>
</div>
<div class="paragraph">
<p>This page is extracted from the Vulkan Specification.
Fixes and changes should be made to the Specification, not directly.</p>
</div>
<div style="page-break-after: always;"></div>
</div>
</div>
<div class="sect2">
<h3 id="_vkcmddispatch3">vkCmdDispatch(3)</h3>
<div class="sect3">
<h4 id="_name_41">Name</h4>
<div class="paragraph">
<p>vkCmdDispatch - Dispatch compute work items</p>
</div>
</div>
<div class="sect3">
<h4 id="_c_specification_41">C Specification</h4>
<div class="paragraph">
<p>To record a dispatch, call:</p>
</div>
<div id="vkCmdDispatch" class="listingblock">
<div class="content">
<pre class="highlight"><code class="language-c++" data-lang="c++">void vkCmdDispatch(
    VkCommandBuffer                             commandBuffer,
    uint32_t                                    groupCountX,
    uint32_t                                    groupCountY,
    uint32_t                                    groupCountZ);</code></pre>
</div>
</div>
</div>
<div class="sect3">
<h4 id="_parameters_41">Parameters</h4>
<div class="ulist">
<ul>
<li>
<p><code>commandBuffer</code> is the command buffer into which the command will be
recorded.</p>
</li>
<li>
<p><code>groupCountX</code> is the number of local workgroups to dispatch in the X
dimension.</p>
</li>
<li>
<p><code>groupCountY</code> is the number of local workgroups to dispatch in the Y
dimension.</p>
</li>
<li>
<p><code>groupCountZ</code> is the number of local workgroups to dispatch in the Z
dimension.</p>
</li>
</ul>
</div>
</div>
<div class="sect3">
<h4 id="_description_41">Description</h4>
<div class="paragraph">
<p>When the command is executed, a global workgroup consisting of
<span class="eq"><code>groupCountX</code> × <code>groupCountY</code> × <code>groupCountZ</code></span>
local workgroups is assembled.</p>
</div>
<div class="sidebarblock">
<div class="content">
<div class="title">Valid Usage</div>
<div class="ulist">
<ul>
<li>
<p><a id="VUID-vkCmdDispatch-groupCountX-00386"></a>
<code>groupCountX</code> <strong class="purple">must</strong> be less than or equal to
<code>VkPhysicalDeviceLimits</code>::<code>maxComputeWorkGroupCount</code>[0]</p>
</li>
<li>
<p><a id="VUID-vkCmdDispatch-groupCountY-00387"></a>
<code>groupCountY</code> <strong class="purple">must</strong> be less than or equal to
<code>VkPhysicalDeviceLimits</code>::<code>maxComputeWorkGroupCount</code>[1]</p>
</li>
<li>
<p><a id="VUID-vkCmdDispatch-groupCountZ-00388"></a>
<code>groupCountZ</code> <strong class="purple">must</strong> be less than or equal to
<code>VkPhysicalDeviceLimits</code>::<code>maxComputeWorkGroupCount</code>[2]</p>
</li>
<li>
<p><a id="VUID-vkCmdDispatch-None-00389"></a>
For each set <em>n</em> that is statically used by the <code>VkPipeline</code> bound
to <code>VK_PIPELINE_BIND_POINT_COMPUTE</code>, a descriptor set <strong class="purple">must</strong> have
been bound to <em>n</em> at <code>VK_PIPELINE_BIND_POINT_COMPUTE</code>, with a
<code>VkPipelineLayout</code> that is compatible for set <em>n</em>, with the
<code>VkPipelineLayout</code> used to create the current <code>VkPipeline</code>, as
described in <a href="vkspec.html#descriptorsets-compatibility" class="bare">html/vkspec.html#descriptorsets-compatibility</a></p>
</li>
<li>
<p><a id="VUID-vkCmdDispatch-None-00390"></a>
Descriptors in each bound descriptor set, specified via
<code>vkCmdBindDescriptorSets</code>, <strong class="purple">must</strong> be valid if they are statically
used by the bound <code>VkPipeline</code> object, specified via
<code>vkCmdBindPipeline</code></p>
</li>
<li>
<p><a id="VUID-vkCmdDispatch-None-00391"></a>
A valid compute pipeline <strong class="purple">must</strong> be bound to the current command buffer
with <code>VK_PIPELINE_BIND_POINT_COMPUTE</code></p>
</li>
<li>
<p><a id="VUID-vkCmdDispatch-None-00392"></a>
For each push constant that is statically used by the <code>VkPipeline</code>
bound to <code>VK_PIPELINE_BIND_POINT_COMPUTE</code>, a push constant value
<strong class="purple">must</strong> have been set for <code>VK_PIPELINE_BIND_POINT_COMPUTE</code>, with a
<code>VkPipelineLayout</code> that is compatible for push constants with the
one used to create the current <code>VkPipeline</code>, as described in
<a href="vkspec.html#descriptorsets-compatibility" class="bare">html/vkspec.html#descriptorsets-compatibility</a></p>
</li>
<li>
<p><a id="VUID-vkCmdDispatch-None-00393"></a>
If any <code>VkSampler</code> object that is accessed from a shader by the
<code>VkPipeline</code> bound to <code>VK_PIPELINE_BIND_POINT_COMPUTE</code> uses
unnormalized coordinates, it <strong class="purple">must</strong> not be used to sample from any
<code>VkImage</code> with a <code>VkImageView</code> of the type
<code>VK_IMAGE_VIEW_TYPE_3D</code>, <code>VK_IMAGE_VIEW_TYPE_CUBE</code>,
<code>VK_IMAGE_VIEW_TYPE_1D_ARRAY</code>, <code>VK_IMAGE_VIEW_TYPE_2D_ARRAY</code> or
<code>VK_IMAGE_VIEW_TYPE_CUBE_ARRAY</code>, in any shader stage</p>
</li>
<li>
<p><a id="VUID-vkCmdDispatch-None-00394"></a>
If any <code>VkSampler</code> object that is accessed from a shader by the
<code>VkPipeline</code> bound to <code>VK_PIPELINE_BIND_POINT_COMPUTE</code> uses
unnormalized coordinates, it <strong class="purple">must</strong> not be used with any of the SPIR-V
<code>OpImageSample*</code> or <code>OpImageSparseSample*</code> instructions with
<code>ImplicitLod</code>, <code>Dref</code> or <code>Proj</code> in their name, in any shader
stage</p>
</li>
<li>
<p><a id="VUID-vkCmdDispatch-None-00395"></a>
If any <code>VkSampler</code> object that is accessed from a shader by the
<code>VkPipeline</code> bound to <code>VK_PIPELINE_BIND_POINT_COMPUTE</code> uses
unnormalized coordinates, it <strong class="purple">must</strong> not be used with any of the SPIR-V
<code>OpImageSample*</code> or <code>OpImageSparseSample*</code> instructions that includes a
LOD bias or any offset values, in any shader stage</p>
</li>
<li>
<p><a id="VUID-vkCmdDispatch-None-00396"></a>
If the <a href="vkspec.html#features-robustBufferAccess">robust buffer access</a> feature is
not enabled, and any shader stage in the <code>VkPipeline</code> object bound
to <code>VK_PIPELINE_BIND_POINT_COMPUTE</code> accesses a uniform buffer, it
<strong class="purple">must</strong> not access values outside of the range of that buffer specified in
the bound descriptor set</p>
</li>
<li>
<p><a id="VUID-vkCmdDispatch-None-00397"></a>
If the <a href="vkspec.html#features-robustBufferAccess">robust buffer access</a> feature is
not enabled, and any shader stage in the <code>VkPipeline</code> object bound
to <code>VK_PIPELINE_BIND_POINT_COMPUTE</code> accesses a storage buffer, it
<strong class="purple">must</strong> not access values outside of the range of that buffer specified in
the bound descriptor set</p>
</li>
<li>
<p><a id="VUID-vkCmdDispatch-None-02005"></a>
If a <code>VkImageView</code> is sampled with <code>VK_FILTER_LINEAR</code> as a
result of this command, then the image view&#8217;s
<a href="vkspec.html#resources-image-view-format-features">format features</a> <strong class="purple">must</strong> contain
<code>VK_FORMAT_FEATURE_SAMPLED_IMAGE_FILTER_LINEAR_BIT</code>.</p>
</li>
<li>
<p><a id="VUID-vkCmdDispatch-None-02006"></a>
If a <code>VkImageView</code> is sampled with <code>VK_FILTER_CUBIC_EXT</code> as a
result of this command, then the image view&#8217;s
<a href="vkspec.html#resources-image-view-format-features">format features</a> <strong class="purple">must</strong> contain
<code>VK_FORMAT_FEATURE_SAMPLED_IMAGE_FILTER_CUBIC_BIT_EXT</code>.</p>
</li>
<li>
<p><a id="VUID-vkCmdDispatch-filterCubic-02609"></a>
Any <a href="#VkImageView">VkImageView</a> being sampled with <code>VK_FILTER_CUBIC_EXT</code> as a
result of this command <strong class="purple">must</strong> have a <a href="#VkImageViewType">VkImageViewType</a> and format
that supports cubic filtering, as specified by
<code>VkFilterCubicImageViewImageFormatPropertiesEXT</code>::<code>filterCubic</code>
returned by <code>vkGetPhysicalDeviceImageFormatProperties2</code></p>
</li>
<li>
<p><a id="VUID-vkCmdDispatch-filterCubicMinmax-02610"></a>
Any <a href="#VkImageView">VkImageView</a> being sampled with <code>VK_FILTER_CUBIC_EXT</code> with
a reduction mode of either <code>VK_SAMPLER_REDUCTION_MODE_MIN_EXT</code> or
<code>VK_SAMPLER_REDUCTION_MODE_MAX_EXT</code> as a result of this command
<strong class="purple">must</strong> have a <a href="#VkImageViewType">VkImageViewType</a> and format that supports cubic
filtering together with minmax filtering, as specified by
<code>VkFilterCubicImageViewImageFormatPropertiesEXT</code>::<code>filterCubicMinmax</code>
returned by <code>vkGetPhysicalDeviceImageFormatProperties2</code></p>
</li>
<li>
<p><a id="VUID-vkCmdDispatch-commandBuffer-01844"></a>
If <code>commandBuffer</code> is an unprotected command buffer, and any
pipeline stage in the <code>VkPipeline</code> object bound to
<code>VK_PIPELINE_BIND_POINT_COMPUTE</code> reads from or writes to any image
or buffer, that image or buffer <strong class="purple">must</strong> not be a protected image or
protected buffer.</p>
</li>
<li>
<p><a id="VUID-vkCmdDispatch-commandBuffer-01845"></a>
If <code>commandBuffer</code> is a protected command buffer, and any pipeline
stage in the <code>VkPipeline</code> object bound to
<code>VK_PIPELINE_BIND_POINT_COMPUTE</code> writes to any image or buffer, that
image or buffer <strong class="purple">must</strong> not be an unprotected image or unprotected buffer.</p>
</li>
<li>
<p><a id="VUID-vkCmdDispatch-commandBuffer-01846"></a>
If <code>commandBuffer</code> is a protected command buffer, and any pipeline
stage other than the compute pipeline stage in the <code>VkPipeline</code>
object bound to <code>VK_PIPELINE_BIND_POINT_COMPUTE</code> reads from any
image or buffer, the image or buffer <strong class="purple">must</strong> not be a protected image or
protected buffer.</p>
</li>
<li>
<p><a id="VUID-vkCmdDispatch-flags-02040"></a>
Any <a href="#VkImage">VkImage</a> created with a <a href="#VkImageCreateInfo">VkImageCreateInfo</a>::<code>flags</code>
containing <code>VK_IMAGE_CREATE_CORNER_SAMPLED_BIT_NV</code> sampled as a
result of this command <strong class="purple">must</strong> only be sampled using a
<a href="#VkSamplerAddressMode">VkSamplerAddressMode</a> of
<code>VK_SAMPLER_ADDRESS_MODE_CLAMP_TO_EDGE</code>.</p>
</li>
</ul>
</div>
</div>
</div>
<div class="sidebarblock">
<div class="content">
<div class="title">Valid Usage (Implicit)</div>
<div class="ulist">
<ul>
<li>
<p><a id="VUID-vkCmdDispatch-commandBuffer-parameter"></a> <code>commandBuffer</code> <strong class="purple">must</strong> be a valid <code>VkCommandBuffer</code> handle</p>
</li>
<li>
<p><a id="VUID-vkCmdDispatch-commandBuffer-recording"></a> <code>commandBuffer</code> <strong class="purple">must</strong> be in the <a href="#commandbuffers-lifecycle">recording state</a></p>
</li>
<li>
<p><a id="VUID-vkCmdDispatch-commandBuffer-cmdpool"></a> The <code>VkCommandPool</code> that <code>commandBuffer</code> was allocated from <strong class="purple">must</strong> support compute operations</p>
</li>
<li>
<p><a id="VUID-vkCmdDispatch-renderpass"></a> This command <strong class="purple">must</strong> only be called outside of a render pass instance</p>
</li>
</ul>
</div>
</div>
</div>
<div class="sidebarblock">
<div class="content">
<div class="title">Host Synchronization</div>
<div class="ulist">
<ul>
<li>
<p>Host access to <code>commandBuffer</code> <strong class="purple">must</strong> be externally synchronized</p>
</li>
<li>
<p>Host access to the <code>VkCommandPool</code> that <code>commandBuffer</code> was allocated from <strong class="purple">must</strong> be externally synchronized</p>
</li>
</ul>
</div>
</div>
</div>
<div class="sidebarblock">
<div class="content">
<div class="title">Command Properties</div>
<table class="tableblock frame-all grid-all stretch">
<colgroup>
<col style="width: 25%;">
<col style="width: 25%;">
<col style="width: 25%;">
<col style="width: 25%;">
</colgroup>
<thead>
<tr>
<th class="tableblock halign-left valign-top"><a href="#VkCommandBufferLevel">Command Buffer Levels</a></th>
<th class="tableblock halign-left valign-top"><a href="#vkCmdBeginRenderPass">Render Pass Scope</a></th>
<th class="tableblock halign-left valign-top"><a href="#VkQueueFlagBits">Supported Queue Types</a></th>
<th class="tableblock halign-left valign-top"><a href="#synchronization-pipeline-stages-types">Pipeline Type</a></th>
</tr>
</thead>
<tbody>
<tr>
<td class="tableblock halign-left valign-top"><p class="tableblock">Primary<br>
Secondary</p></td>
<td class="tableblock halign-left valign-top"><p class="tableblock">Outside</p></td>
<td class="tableblock halign-left valign-top"><p class="tableblock">Compute</p></td>
<td class="tableblock halign-left valign-top"><p class="tableblock">Compute</p></td>
</tr>
</tbody>
</table>
</div>
</div>
</div>
<div class="sect3">
<h4 id="_see_also_41">See Also</h4>
<div class="paragraph">
<p><a href="#VkCommandBuffer">VkCommandBuffer</a></p>
</div>
</div>
<div class="sect3">
<h4 id="_document_notes_41">Document Notes</h4>
<div class="paragraph">
<p>For more information, see the Vulkan Specification at URL</p>
</div>
<div class="paragraph">
<p><a href="https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#vkCmdDispatch" class="bare">https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#vkCmdDispatch</a></p>
</div>
<div class="paragraph">
<p>This page is extracted from the Vulkan Specification.
Fixes and changes should be made to the Specification, not directly.</p>
</div>
<div style="page-break-after: always;"></div>
</div>
</div>
<div class="sect2">
<h3 id="_vkcmddispatchbase3">vkCmdDispatchBase(3)</h3>
<div class="sect3">
<h4 id="_name_42">Name</h4>
<div class="paragraph">
<p>vkCmdDispatchBase - Dispatch compute work items</p>
</div>
</div>
<div class="sect3">
<h4 id="_c_specification_42">C Specification</h4>
<div class="paragraph">
<p>To record a dispatch using non-zero base values for the components of
<code>WorkgroupId</code>, call:</p>
</div>
<div id="vkCmdDispatchBase" class="listingblock">
<div class="content">
<pre class="highlight"><code class="language-c++" data-lang="c++">void vkCmdDispatchBase(
    VkCommandBuffer                             commandBuffer,
    uint32_t                                    baseGroupX,
    uint32_t                                    baseGroupY,
    uint32_t                                    baseGroupZ,
    uint32_t                                    groupCountX,
    uint32_t                                    groupCountY,
    uint32_t                                    groupCountZ);</code></pre>
</div>
</div>
<div class="paragraph">
<p>or the equivalent command</p>
</div>
<div id="vkCmdDispatchBaseKHR" class="listingblock">
<div class="content">
<pre class="highlight"><code class="language-c++" data-lang="c++">void vkCmdDispatchBaseKHR(
    VkCommandBuffer                             commandBuffer,
    uint32_t                                    baseGroupX,
    uint32_t                                    baseGroupY,
    uint32_t                                    baseGroupZ,
    uint32_t                                    groupCountX,
    uint32_t                                    groupCountY,
    uint32_t                                    groupCountZ);</code></pre>
</div>
</div>
</div>
<div class="sect3">
<h4 id="_parameters_42">Parameters</h4>
<div class="ulist">
<ul>
<li>
<p><code>commandBuffer</code> is the command buffer into which the command will be
recorded.</p>
</li>
<li>
<p><code>baseGroupX</code> is the start value for the X component of
<code>WorkgroupId</code>.</p>
</li>
<li>
<p><code>baseGroupY</code> is the start value for the Y component of
<code>WorkgroupId</code>.</p>
</li>
<li>
<p><code>baseGroupZ</code> is the start value for the Z component of
<code>WorkgroupId</code>.</p>
</li>
<li>
<p><code>groupCountX</code> is the number of local workgroups to dispatch in the X
dimension.</p>
</li>
<li>
<p><code>groupCountY</code> is the number of local workgroups to dispatch in the Y
dimension.</p>
</li>
<li>
<p><code>groupCountZ</code> is the number of local workgroups to dispatch in the Z
dimension.</p>
</li>
</ul>
</div>
</div>
<div class="sect3">
<h4 id="_description_42">Description</h4>
<div class="paragraph">
<p>When the command is executed, a global workgroup consisting of
<span class="eq"><code>groupCountX</code> × <code>groupCountY</code> × <code>groupCountZ</code></span>
local workgroups is assembled, with <code>WorkgroupId</code> values ranging from
<span class="eq">[<code>baseGroup*</code>, <code>baseGroup*</code> +  <code>groupCount*</code>)</span> in each
component.
<a href="#vkCmdDispatch">vkCmdDispatch</a> is equivalent to
<code>vkCmdDispatchBase(0,0,0,groupCountX,groupCountY,groupCountZ)</code>.</p>
</div>
<div class="sidebarblock">
<div class="content">
<div class="title">Valid Usage</div>
<div class="ulist">
<ul>
<li>
<p><a id="VUID-vkCmdDispatchBase-None-00420"></a>
All valid usage rules from <a href="#vkCmdDispatch">vkCmdDispatch</a> apply</p>
</li>
<li>
<p><a id="VUID-vkCmdDispatchBase-baseGroupX-00421"></a>
<code>baseGroupX</code> <strong class="purple">must</strong> be less than
<code>VkPhysicalDeviceLimits</code>::<code>maxComputeWorkGroupCount</code>[0]</p>
</li>
<li>
<p><a id="VUID-vkCmdDispatchBase-baseGroupX-00422"></a>
<code>baseGroupX</code> <strong class="purple">must</strong> be less than
<code>VkPhysicalDeviceLimits</code>::<code>maxComputeWorkGroupCount</code>[1]</p>
</li>
<li>
<p><a id="VUID-vkCmdDispatchBase-baseGroupZ-00423"></a>
<code>baseGroupZ</code> <strong class="purple">must</strong> be less than
<code>VkPhysicalDeviceLimits</code>::<code>maxComputeWorkGroupCount</code>[2]</p>
</li>
<li>
<p><a id="VUID-vkCmdDispatchBase-groupCountX-00424"></a>
<code>groupCountX</code> <strong class="purple">must</strong> be less than or equal to
<code>VkPhysicalDeviceLimits</code>::<code>maxComputeWorkGroupCount</code>[0] minus
<code>baseGroupX</code></p>
</li>
<li>
<p><a id="VUID-vkCmdDispatchBase-groupCountY-00425"></a>
<code>groupCountY</code> <strong class="purple">must</strong> be less than or equal to
<code>VkPhysicalDeviceLimits</code>::<code>maxComputeWorkGroupCount</code>[1] minus
<code>baseGroupY</code></p>
</li>
<li>
<p><a id="VUID-vkCmdDispatchBase-groupCountZ-00426"></a>
<code>groupCountZ</code> <strong class="purple">must</strong> be less than or equal to
<code>VkPhysicalDeviceLimits</code>::<code>maxComputeWorkGroupCount</code>[2] minus
<code>baseGroupZ</code></p>
</li>
<li>
<p><a id="VUID-vkCmdDispatchBase-baseGroupX-00427"></a>
If any of <code>baseGroupX</code>, <code>baseGroupY</code>, or <code>baseGroupZ</code> are
not zero, then the bound compute pipeline <strong class="purple">must</strong> have been created with
the <code>VK_PIPELINE_CREATE_DISPATCH_BASE</code> flag.</p>
</li>
</ul>
</div>
</div>
</div>
<div class="sidebarblock">
<div class="content">
<div class="title">Valid Usage (Implicit)</div>
<div class="ulist">
<ul>
<li>
<p><a id="VUID-vkCmdDispatchBase-commandBuffer-parameter"></a> <code>commandBuffer</code> <strong class="purple">must</strong> be a valid <code>VkCommandBuffer</code> handle</p>
</li>
<li>
<p><a id="VUID-vkCmdDispatchBase-commandBuffer-recording"></a> <code>commandBuffer</code> <strong class="purple">must</strong> be in the <a href="#commandbuffers-lifecycle">recording state</a></p>
</li>
<li>
<p><a id="VUID-vkCmdDispatchBase-commandBuffer-cmdpool"></a> The <code>VkCommandPool</code> that <code>commandBuffer</code> was allocated from <strong class="purple">must</strong> support compute operations</p>
</li>
<li>
<p><a id="VUID-vkCmdDispatchBase-renderpass"></a> This command <strong class="purple">must</strong> only be called outside of a render pass instance</p>
</li>
</ul>
</div>
</div>
</div>
<div class="sidebarblock">
<div class="content">
<div class="title">Host Synchronization</div>
<div class="ulist">
<ul>
<li>
<p>Host access to <code>commandBuffer</code> <strong class="purple">must</strong> be externally synchronized</p>
</li>
<li>
<p>Host access to the <code>VkCommandPool</code> that <code>commandBuffer</code> was allocated from <strong class="purple">must</strong> be externally synchronized</p>
</li>
</ul>
</div>
</div>
</div>
<div class="sidebarblock">
<div class="content">
<div class="title">Command Properties</div>
<table class="tableblock frame-all grid-all stretch">
<colgroup>
<col style="width: 25%;">
<col style="width: 25%;">
<col style="width: 25%;">
<col style="width: 25%;">
</colgroup>
<thead>
<tr>
<th class="tableblock halign-left valign-top"><a href="#VkCommandBufferLevel">Command Buffer Levels</a></th>
<th class="tableblock halign-left valign-top"><a href="#vkCmdBeginRenderPass">Render Pass Scope</a></th>
<th class="tableblock halign-left valign-top"><a href="#VkQueueFlagBits">Supported Queue Types</a></th>
<th class="tableblock halign-left valign-top"><a href="#synchronization-pipeline-stages-types">Pipeline Type</a></th>
</tr>
</thead>
<tbody>
<tr>
<td class="tableblock halign-left valign-top"><p class="tableblock">Primary<br>
Secondary</p></td>
<td class="tableblock halign-left valign-top"><p class="tableblock">Outside</p></td>
<td class="tableblock halign-left valign-top"><p class="tableblock">Compute</p></td>
<td class="tableblock halign-left valign-top"></td>
</tr>
</tbody>
</table>
</div>
</div>
</div>
<div class="sect3">
<h4 id="_see_also_42">See Also</h4>
<div class="paragraph">
<p><a href="#VkCommandBuffer">VkCommandBuffer</a></p>
</div>
</div>
<div class="sect3">
<h4 id="_document_notes_42">Document Notes</h4>
<div class="paragraph">
<p>For more information, see the Vulkan Specification at URL</p>
</div>
<div class="paragraph">
<p><a href="https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#vkCmdDispatchBase" class="bare">https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#vkCmdDispatchBase</a></p>
</div>
<div class="paragraph">
<p>This page is extracted from the Vulkan Specification.
Fixes and changes should be made to the Specification, not directly.</p>
</div>
<div style="page-break-after: always;"></div>
</div>
</div>
<div class="sect2">
<h3 id="_vkcmddispatchindirect3">vkCmdDispatchIndirect(3)</h3>
<div class="sect3">
<h4 id="_name_43">Name</h4>
<div class="paragraph">
<p>vkCmdDispatchIndirect - Dispatch compute work items using indirect parameters</p>
</div>
</div>
<div class="sect3">
<h4 id="_c_specification_43">C Specification</h4>
<div class="paragraph">
<p>To record an indirect command dispatch, call:</p>
</div>
<div id="vkCmdDispatchIndirect" class="listingblock">
<div class="content">
<pre class="highlight"><code class="language-c++" data-lang="c++">void vkCmdDispatchIndirect(
    VkCommandBuffer                             commandBuffer,
    VkBuffer                                    buffer,
    VkDeviceSize                                offset);</code></pre>
</div>
</div>
</div>
<div class="sect3">
<h4 id="_parameters_43">Parameters</h4>
<div class="ulist">
<ul>
<li>
<p><code>commandBuffer</code> is the command buffer into which the command will be
recorded.</p>
</li>
<li>
<p><code>buffer</code> is the buffer containing dispatch parameters.</p>
</li>
<li>
<p><code>offset</code> is the byte offset into <code>buffer</code> where parameters
begin.</p>
</li>
</ul>
</div>
</div>
<div class="sect3">
<h4 id="_description_43">Description</h4>
<div class="paragraph">
<p><code>vkCmdDispatchIndirect</code> behaves similarly to <a href="#vkCmdDispatch">vkCmdDispatch</a> except
that the parameters are read by the device from a buffer during execution.
The parameters of the dispatch are encoded in a
<a href="#VkDispatchIndirectCommand">VkDispatchIndirectCommand</a> structure taken from <code>buffer</code> starting
at <code>offset</code>.</p>
</div>
<div class="sidebarblock">
<div class="content">
<div class="title">Valid Usage</div>
<div class="ulist">
<ul>
<li>
<p><a id="VUID-vkCmdDispatchIndirect-buffer-00401"></a>
If <code>buffer</code> is non-sparse then it <strong class="purple">must</strong> be bound completely and
contiguously to a single <code>VkDeviceMemory</code> object</p>
</li>
<li>
<p><a id="VUID-vkCmdDispatchIndirect-None-00402"></a>
For each set <em>n</em> that is statically used by the <code>VkPipeline</code> bound
to <code>VK_PIPELINE_BIND_POINT_COMPUTE</code>, a descriptor set <strong class="purple">must</strong> have
been bound to <em>n</em> at <code>VK_PIPELINE_BIND_POINT_COMPUTE</code>, with a
<code>VkPipelineLayout</code> that is compatible for set <em>n</em>, with the
<code>VkPipelineLayout</code> used to create the current <code>VkPipeline</code>, as
described in <a href="vkspec.html#descriptorsets-compatibility" class="bare">html/vkspec.html#descriptorsets-compatibility</a></p>
</li>
<li>
<p><a id="VUID-vkCmdDispatchIndirect-None-00403"></a>
Descriptors in each bound descriptor set, specified via
<code>vkCmdBindDescriptorSets</code>, <strong class="purple">must</strong> be valid if they are statically
used by the bound <code>VkPipeline</code> object, specified via
<code>vkCmdBindPipeline</code></p>
</li>
<li>
<p><a id="VUID-vkCmdDispatchIndirect-None-00404"></a>
A valid compute pipeline <strong class="purple">must</strong> be bound to the current command buffer
with <code>VK_PIPELINE_BIND_POINT_COMPUTE</code></p>
</li>
<li>
<p><a id="VUID-vkCmdDispatchIndirect-buffer-00405"></a>
<code>buffer</code> <strong class="purple">must</strong> have been created with the
<code>VK_BUFFER_USAGE_INDIRECT_BUFFER_BIT</code> bit set</p>
</li>
<li>
<p><a id="VUID-vkCmdDispatchIndirect-offset-00406"></a>
<code>offset</code> <strong class="purple">must</strong> be a multiple of <code>4</code></p>
</li>
<li>
<p><a id="VUID-vkCmdDispatchIndirect-offset-00407"></a>
The sum of <code>offset</code> and the size of <code>VkDispatchIndirectCommand</code>
<strong class="purple">must</strong> be less than or equal to the size of <code>buffer</code></p>
</li>
<li>
<p><a id="VUID-vkCmdDispatchIndirect-None-00408"></a>
For each push constant that is statically used by the <code>VkPipeline</code>
bound to <code>VK_PIPELINE_BIND_POINT_COMPUTE</code>, a push constant value
<strong class="purple">must</strong> have been set for <code>VK_PIPELINE_BIND_POINT_COMPUTE</code>, with a
<code>VkPipelineLayout</code> that is compatible for push constants with the
one used to create the current <code>VkPipeline</code>, as described in
<a href="vkspec.html#descriptorsets-compatibility" class="bare">html/vkspec.html#descriptorsets-compatibility</a></p>
</li>
<li>
<p><a id="VUID-vkCmdDispatchIndirect-None-00409"></a>
If any <code>VkSampler</code> object that is accessed from a shader by the
<code>VkPipeline</code> bound to <code>VK_PIPELINE_BIND_POINT_COMPUTE</code> uses
unnormalized coordinates, it <strong class="purple">must</strong> not be used to sample from any
<code>VkImage</code> with a <code>VkImageView</code> of the type
<code>VK_IMAGE_VIEW_TYPE_3D</code>, <code>VK_IMAGE_VIEW_TYPE_CUBE</code>,
<code>VK_IMAGE_VIEW_TYPE_1D_ARRAY</code>, <code>VK_IMAGE_VIEW_TYPE_2D_ARRAY</code> or
<code>VK_IMAGE_VIEW_TYPE_CUBE_ARRAY</code>, in any shader stage</p>
</li>
<li>
<p><a id="VUID-vkCmdDispatchIndirect-None-00410"></a>
If any <code>VkSampler</code> object that is accessed from a shader by the
<code>VkPipeline</code> bound to <code>VK_PIPELINE_BIND_POINT_COMPUTE</code> uses
unnormalized coordinates, it <strong class="purple">must</strong> not be used with any of the SPIR-V
<code>OpImageSample*</code> or <code>OpImageSparseSample*</code> instructions with
<code>ImplicitLod</code>, <code>Dref</code> or <code>Proj</code> in their name, in any shader
stage</p>
</li>
<li>
<p><a id="VUID-vkCmdDispatchIndirect-None-00411"></a>
If any <code>VkSampler</code> object that is accessed from a shader by the
<code>VkPipeline</code> bound to <code>VK_PIPELINE_BIND_POINT_COMPUTE</code> uses
unnormalized coordinates, it <strong class="purple">must</strong> not be used with any of the SPIR-V
<code>OpImageSample*</code> or <code>OpImageSparseSample*</code> instructions that includes a
LOD bias or any offset values, in any shader stage</p>
</li>
<li>
<p><a id="VUID-vkCmdDispatchIndirect-None-00412"></a>
If the <a href="vkspec.html#features-robustBufferAccess">robust buffer access</a> feature is
not enabled, and any shader stage in the <code>VkPipeline</code> object bound
to <code>VK_PIPELINE_BIND_POINT_COMPUTE</code> accesses a uniform buffer, it
<strong class="purple">must</strong> not access values outside of the range of that buffer specified in
the bound descriptor set</p>
</li>
<li>
<p><a id="VUID-vkCmdDispatchIndirect-None-00413"></a>
If the <a href="vkspec.html#features-robustBufferAccess">robust buffer access</a> feature is
not enabled, and any shader stage in the <code>VkPipeline</code> object bound
to <code>VK_PIPELINE_BIND_POINT_COMPUTE</code> accesses a storage buffer, it
<strong class="purple">must</strong> not access values outside of the range of that buffer specified in
the bound descriptor set</p>
</li>
<li>
<p><a id="VUID-vkCmdDispatchIndirect-None-02007"></a>
If a <code>VkImageView</code> is sampled with <code>VK_FILTER_LINEAR</code> as a
result of this command, then the image view&#8217;s
<a href="vkspec.html#resources-image-view-format-features">format features</a> <strong class="purple">must</strong> contain
<code>VK_FORMAT_FEATURE_SAMPLED_IMAGE_FILTER_LINEAR_BIT</code>.</p>
</li>
<li>
<p><a id="VUID-vkCmdDispatchIndirect-None-02008"></a>
If a <code>VkImageView</code> is sampled with <code>VK_FILTER_CUBIC_EXT</code> as a
result of this command, then the image view&#8217;s
<a href="vkspec.html#resources-image-view-format-features">format features</a> <strong class="purple">must</strong> contain
<code>VK_FORMAT_FEATURE_SAMPLED_IMAGE_FILTER_CUBIC_BIT_EXT</code>.</p>
</li>
<li>
<p><a id="VUID-vkCmdDispatchIndirect-filterCubic-02611"></a>
Any <a href="#VkImageView">VkImageView</a> being sampled with <code>VK_FILTER_CUBIC_EXT</code> as a
result of this command <strong class="purple">must</strong> have a <a href="#VkImageViewType">VkImageViewType</a> and format
that supports cubic filtering, as specified by
<code>VkFilterCubicImageViewImageFormatPropertiesEXT</code>::<code>filterCubic</code>
returned by <code>vkGetPhysicalDeviceImageFormatProperties2</code></p>
</li>
<li>
<p><a id="VUID-vkCmdDispatchIndirect-filterCubicMinmax-02612"></a>
Any <a href="#VkImageView">VkImageView</a> being sampled with <code>VK_FILTER_CUBIC_EXT</code> with
a reduction mode of either <code>VK_SAMPLER_REDUCTION_MODE_MIN_EXT</code> or
<code>VK_SAMPLER_REDUCTION_MODE_MAX_EXT</code> as a result of this command
<strong class="purple">must</strong> have a <a href="#VkImageViewType">VkImageViewType</a> and format that supports cubic
filtering together with minmax filtering, as specified by
<code>VkFilterCubicImageViewImageFormatPropertiesEXT</code>::<code>filterCubicMinmax</code>
returned by <code>vkGetPhysicalDeviceImageFormatProperties2</code></p>
</li>
<li>
<p><a id="VUID-vkCmdDispatchIndirect-commandBuffer-02639"></a>
<code>commandBuffer</code> <strong class="purple">must</strong> not be a protected command buffer</p>
</li>
<li>
<p><a id="VUID-vkCmdDispatchIndirect-commandBuffer-01847"></a>
If <code>commandBuffer</code> is an unprotected command buffer, and any
pipeline stage in the <code>VkPipeline</code> object bound to
<code>VK_PIPELINE_BIND_POINT_COMPUTE</code> reads from or writes to any image
or buffer, that image or buffer <strong class="purple">must</strong> not be a protected image or
protected buffer.</p>
</li>
<li>
<p><a id="VUID-vkCmdDispatchIndirect-flags-02041"></a>
Any <a href="#VkImage">VkImage</a> created with a <a href="#VkImageCreateInfo">VkImageCreateInfo</a>::<code>flags</code>
containing <code>VK_IMAGE_CREATE_CORNER_SAMPLED_BIT_NV</code> sampled as a
result of this command <strong class="purple">must</strong> only be sampled using a
<a href="#VkSamplerAddressMode">VkSamplerAddressMode</a> of
<code>VK_SAMPLER_ADDRESS_MODE_CLAMP_TO_EDGE</code>.</p>
</li>
</ul>
</div>
</div>
</div>
<div class="sidebarblock">
<div class="content">
<div class="title">Valid Usage (Implicit)</div>
<div class="ulist">
<ul>
<li>
<p><a id="VUID-vkCmdDispatchIndirect-commandBuffer-parameter"></a> <code>commandBuffer</code> <strong class="purple">must</strong> be a valid <code>VkCommandBuffer</code> handle</p>
</li>
<li>
<p><a id="VUID-vkCmdDispatchIndirect-buffer-parameter"></a> <code>buffer</code> <strong class="purple">must</strong> be a valid <code>VkBuffer</code> handle</p>
</li>
<li>
<p><a id="VUID-vkCmdDispatchIndirect-commandBuffer-recording"></a> <code>commandBuffer</code> <strong class="purple">must</strong> be in the <a href="#commandbuffers-lifecycle">recording state</a></p>
</li>
<li>
<p><a id="VUID-vkCmdDispatchIndirect-commandBuffer-cmdpool"></a> The <code>VkCommandPool</code> that <code>commandBuffer</code> was allocated from <strong class="purple">must</strong> support compute operations</p>
</li>
<li>
<p><a id="VUID-vkCmdDispatchIndirect-renderpass"></a> This command <strong class="purple">must</strong> only be called outside of a render pass instance</p>
</li>
<li>
<p><a id="VUID-vkCmdDispatchIndirect-commonparent"></a> Both of <code>buffer</code>, and <code>commandBuffer</code> <strong class="purple">must</strong> have been created, allocated, or retrieved from the same <code>VkDevice</code></p>
</li>
</ul>
</div>
</div>
</div>
<div class="sidebarblock">
<div class="content">
<div class="title">Host Synchronization</div>
<div class="ulist">
<ul>
<li>
<p>Host access to <code>commandBuffer</code> <strong class="purple">must</strong> be externally synchronized</p>
</li>
<li>
<p>Host access to the <code>VkCommandPool</code> that <code>commandBuffer</code> was allocated from <strong class="purple">must</strong> be externally synchronized</p>
</li>
</ul>
</div>
</div>
</div>
<div class="sidebarblock">
<div class="content">
<div class="title">Command Properties</div>
<table class="tableblock frame-all grid-all stretch">
<colgroup>
<col style="width: 25%;">
<col style="width: 25%;">
<col style="width: 25%;">
<col style="width: 25%;">
</colgroup>
<thead>
<tr>
<th class="tableblock halign-left valign-top"><a href="#VkCommandBufferLevel">Command Buffer Levels</a></th>
<th class="tableblock halign-left valign-top"><a href="#vkCmdBeginRenderPass">Render Pass Scope</a></th>
<th class="tableblock halign-left valign-top"><a href="#VkQueueFlagBits">Supported Queue Types</a></th>
<th class="tableblock halign-left valign-top"><a href="#synchronization-pipeline-stages-types">Pipeline Type</a></th>
</tr>
</thead>
<tbody>
<tr>
<td class="tableblock halign-left valign-top"><p class="tableblock">Primary<br>
Secondary</p></td>
<td class="tableblock halign-left valign-top"><p class="tableblock">Outside</p></td>
<td class="tableblock halign-left valign-top"><p class="tableblock">Compute</p></td>
<td class="tableblock halign-left valign-top"><p class="tableblock">Compute</p></td>
</tr>
</tbody>
</table>
</div>
</div>
</div>
<div class="sect3">
<h4 id="_see_also_43">See Also</h4>
<div class="paragraph">
<p><a href="#VkBuffer">VkBuffer</a>, <a href="#VkCommandBuffer">VkCommandBuffer</a>, <code>VkDeviceSize</code></p>
</div>
</div>
<div class="sect3">
<h4 id="_document_notes_43">Document Notes</h4>
<div class="paragraph">
<p>For more information, see the Vulkan Specification at URL</p>
</div>
<div class="paragraph">
<p><a href="https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#vkCmdDispatchIndirect" class="bare">https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#vkCmdDispatchIndirect</a></p>
</div>
<div class="paragraph">
<p>This page is extracted from the Vulkan Specification.
Fixes and changes should be made to the Specification, not directly.</p>
</div>
<div style="page-break-after: always;"></div>
</div>
</div>
<div class="sect2">
<h3 id="_vkcmddraw3">vkCmdDraw(3)</h3>
<div class="sect3">
<h4 id="_name_44">Name</h4>
<div class="paragraph">
<p>vkCmdDraw - Draw primitives</p>
</div>
</div>
<div class="sect3">
<h4 id="_c_specification_44">C Specification</h4>
<div class="paragraph">
<p>To record a non-indexed draw, call:</p>
</div>
<div id="vkCmdDraw" class="listingblock">
<div class="content">
<pre class="highlight"><code class="language-c++" data-lang="c++">void vkCmdDraw(
    VkCommandBuffer                             commandBuffer,
    uint32_t                                    vertexCount,
    uint32_t                                    instanceCount,
    uint32_t                                    firstVertex,
    uint32_t                                    firstInstance);</code></pre>
</div>
</div>
</div>
<div class="sect3">
<h4 id="_parameters_44">Parameters</h4>
<div class="ulist">
<ul>
<li>
<p><code>commandBuffer</code> is the command buffer into which the command is
recorded.</p>
</li>
<li>
<p><code>vertexCount</code> is the number of vertices to draw.</p>
</li>
<li>
<p><code>instanceCount</code> is the number of instances to draw.</p>
</li>
<li>
<p><code>firstVertex</code> is the index of the first vertex to draw.</p>
</li>
<li>
<p><code>firstInstance</code> is the instance ID of the first instance to draw.</p>
</li>
</ul>
</div>
</div>
<div class="sect3">
<h4 id="_description_44">Description</h4>
<div class="paragraph">
<p>When the command is executed, primitives are assembled using the current
primitive topology and <code>vertexCount</code> consecutive vertex indices with the
first <code>vertexIndex</code> value equal to <code>firstVertex</code>.
The primitives are drawn <code>instanceCount</code> times with <code>instanceIndex</code>
starting with <code>firstInstance</code> and increasing sequentially for each
instance.
The assembled primitives execute the bound graphics pipeline.</p>
</div>
<div class="sidebarblock">
<div class="content">
<div class="title">Valid Usage</div>
<div class="ulist">
<ul>
<li>
<p><a id="VUID-vkCmdDraw-renderPass-00435"></a>
The current render pass <strong class="purple">must</strong> be <a href="vkspec.html#renderpass-compatibility">compatible</a>
with the <code>renderPass</code> member of the
<code>VkGraphicsPipelineCreateInfo</code> structure specified when creating the
<code>VkPipeline</code> bound to <code>VK_PIPELINE_BIND_POINT_GRAPHICS</code>.</p>
</li>
<li>
<p><a id="VUID-vkCmdDraw-subpass-00436"></a>
The subpass index of the current render pass <strong class="purple">must</strong> be equal to the
<code>subpass</code> member of the <code>VkGraphicsPipelineCreateInfo</code> structure
specified when creating the <code>VkPipeline</code> bound to
<code>VK_PIPELINE_BIND_POINT_GRAPHICS</code>.</p>
</li>
<li>
<p><a id="VUID-vkCmdDraw-None-00437"></a>
For each set <em>n</em> that is statically used by the <code>VkPipeline</code> bound
to <code>VK_PIPELINE_BIND_POINT_GRAPHICS</code>, a descriptor set <strong class="purple">must</strong> have
been bound to <em>n</em> at <code>VK_PIPELINE_BIND_POINT_GRAPHICS</code>, with a
<code>VkPipelineLayout</code> that is compatible for set <em>n</em>, with the
<code>VkPipelineLayout</code> used to create the current <code>VkPipeline</code>, as
described in <a href="vkspec.html#descriptorsets-compatibility" class="bare">html/vkspec.html#descriptorsets-compatibility</a></p>
</li>
<li>
<p><a id="VUID-vkCmdDraw-None-00438"></a>
For each push constant that is statically used by the <code>VkPipeline</code>
bound to <code>VK_PIPELINE_BIND_POINT_GRAPHICS</code>, a push constant value
<strong class="purple">must</strong> have been set for <code>VK_PIPELINE_BIND_POINT_GRAPHICS</code>, with a
<code>VkPipelineLayout</code> that is compatible for push constants, with the
<code>VkPipelineLayout</code> used to create the current <code>VkPipeline</code>, as
described in <a href="vkspec.html#descriptorsets-compatibility" class="bare">html/vkspec.html#descriptorsets-compatibility</a></p>
</li>
<li>
<p><a id="VUID-vkCmdDraw-None-00439"></a>
Descriptors in each bound descriptor set, specified via
<code>vkCmdBindDescriptorSets</code>, <strong class="purple">must</strong> be valid if they are statically
used by the bound <code>VkPipeline</code> object, specified via
<code>vkCmdBindPipeline</code></p>
</li>
<li>
<p><a id="VUID-vkCmdDraw-None-00440"></a>
All vertex input bindings accessed via vertex input variables declared
in the vertex shader entry point&#8217;s interface <strong class="purple">must</strong> have valid buffers
bound</p>
</li>
<li>
<p><a id="VUID-vkCmdDraw-None-00441"></a>
For a given vertex buffer binding, any attribute data fetched <strong class="purple">must</strong> be
entirely contained within the corresponding vertex buffer binding, as
described in <a href="vkspec.html#fxvertex-input" class="bare">html/vkspec.html#fxvertex-input</a></p>
</li>
<li>
<p><a id="VUID-vkCmdDraw-None-00442"></a>
A valid graphics pipeline <strong class="purple">must</strong> be bound to the current command buffer
with <code>VK_PIPELINE_BIND_POINT_GRAPHICS</code></p>
</li>
<li>
<p><a id="VUID-vkCmdDraw-None-00443"></a>
If the <code>VkPipeline</code> object bound to
<code>VK_PIPELINE_BIND_POINT_GRAPHICS</code> requires any dynamic state, that
state <strong class="purple">must</strong> have been set on the current command buffer</p>
</li>
<li>
<p><a id="VUID-vkCmdDraw-None-00444"></a>
Every input attachment used by the current subpass <strong class="purple">must</strong> be bound to the
pipeline via a descriptor set</p>
</li>
<li>
<p><a id="VUID-vkCmdDraw-None-00445"></a>
If any <code>VkSampler</code> object that is accessed from a shader by the
<code>VkPipeline</code> bound to <code>VK_PIPELINE_BIND_POINT_GRAPHICS</code> uses
unnormalized coordinates, it <strong class="purple">must</strong> not be used to sample from any
<code>VkImage</code> with a <code>VkImageView</code> of the type
<code>VK_IMAGE_VIEW_TYPE_3D</code>, <code>VK_IMAGE_VIEW_TYPE_CUBE</code>,
<code>VK_IMAGE_VIEW_TYPE_1D_ARRAY</code>, <code>VK_IMAGE_VIEW_TYPE_2D_ARRAY</code> or
<code>VK_IMAGE_VIEW_TYPE_CUBE_ARRAY</code>, in any shader stage</p>
</li>
<li>
<p><a id="VUID-vkCmdDraw-None-00446"></a>
If any <code>VkSampler</code> object that is accessed from a shader by the
<code>VkPipeline</code> bound to <code>VK_PIPELINE_BIND_POINT_GRAPHICS</code> uses
unnormalized coordinates, it <strong class="purple">must</strong> not be used with any of the SPIR-V
<code>OpImageSample*</code> or <code>OpImageSparseSample*</code> instructions with
<code>ImplicitLod</code>, <code>Dref</code> or <code>Proj</code> in their name, in any shader
stage</p>
</li>
<li>
<p><a id="VUID-vkCmdDraw-None-00447"></a>
If any <code>VkSampler</code> object that is accessed from a shader by the
<code>VkPipeline</code> bound to <code>VK_PIPELINE_BIND_POINT_GRAPHICS</code> uses
unnormalized coordinates, it <strong class="purple">must</strong> not be used with any of the SPIR-V
<code>OpImageSample*</code> or <code>OpImageSparseSample*</code> instructions that includes a
LOD bias or any offset values, in any shader stage</p>
</li>
<li>
<p><a id="VUID-vkCmdDraw-None-00448"></a>
If the <a href="vkspec.html#features-robustBufferAccess">robust buffer access</a> feature is
not enabled, and any shader stage in the <code>VkPipeline</code> object bound
to <code>VK_PIPELINE_BIND_POINT_GRAPHICS</code> accesses a uniform buffer, it
<strong class="purple">must</strong> not access values outside of the range of that buffer specified in
the bound descriptor set</p>
</li>
<li>
<p><a id="VUID-vkCmdDraw-None-00449"></a>
If the <a href="vkspec.html#features-robustBufferAccess">robust buffer access</a> feature is
not enabled, and any shader stage in the <code>VkPipeline</code> object bound
to <code>VK_PIPELINE_BIND_POINT_GRAPHICS</code> accesses a storage buffer, it
<strong class="purple">must</strong> not access values outside of the range of that buffer specified in
the bound descriptor set</p>
</li>
<li>
<p><a id="VUID-vkCmdDraw-None-01499"></a>
Image subresources used as attachments in the current render pass <strong class="purple">must</strong>
not be accessed in any way other than as an attachment by this command.</p>
</li>
<li>
<p><a id="VUID-vkCmdDraw-None-02009"></a>
If a <code>VkImageView</code> is sampled with <code>VK_FILTER_LINEAR</code> as a
result of this command, then the image view&#8217;s
<a href="vkspec.html#resources-image-view-format-features">format features</a> <strong class="purple">must</strong> contain
<code>VK_FORMAT_FEATURE_SAMPLED_IMAGE_FILTER_LINEAR_BIT</code>.</p>
</li>
<li>
<p><a id="VUID-vkCmdDraw-None-02010"></a>
If a <code>VkImageView</code> is sampled with <code>VK_FILTER_CUBIC_EXT</code> as a
result of this command, then the image view&#8217;s
<a href="vkspec.html#resources-image-view-format-features">format features</a> <strong class="purple">must</strong> contain
<code>VK_FORMAT_FEATURE_SAMPLED_IMAGE_FILTER_CUBIC_BIT_EXT</code></p>
</li>
<li>
<p><a id="VUID-vkCmdDraw-filterCubic-02613"></a>
Any <a href="#VkImageView">VkImageView</a> being sampled with <code>VK_FILTER_CUBIC_EXT</code> as a
result of this command <strong class="purple">must</strong> have a <a href="#VkImageViewType">VkImageViewType</a> and format
that supports cubic filtering, as specified by
<code>VkFilterCubicImageViewImageFormatPropertiesEXT</code>::<code>filterCubic</code>
returned by <code>vkGetPhysicalDeviceImageFormatProperties2</code></p>
</li>
<li>
<p><a id="VUID-vkCmdDraw-filterCubicMinmax-02614"></a>
Any <a href="#VkImageView">VkImageView</a> being sampled with <code>VK_FILTER_CUBIC_EXT</code> with
a reduction mode of either <code>VK_SAMPLER_REDUCTION_MODE_MIN_EXT</code> or
<code>VK_SAMPLER_REDUCTION_MODE_MAX_EXT</code> as a result of this command
<strong class="purple">must</strong> have a <a href="#VkImageViewType">VkImageViewType</a> and format that supports cubic
filtering together with minmax filtering, as specified by
<code>VkFilterCubicImageViewImageFormatPropertiesEXT</code>::<code>filterCubicMinmax</code>
returned by <code>vkGetPhysicalDeviceImageFormatProperties2</code></p>
</li>
<li>
<p><a id="VUID-vkCmdDraw-maxMultiviewInstanceIndex-00453"></a>
If the draw is recorded in a render pass instance with multiview
enabled, the maximum instance index <strong class="purple">must</strong> be less than or equal to
<a href="#VkPhysicalDeviceMultiviewProperties">VkPhysicalDeviceMultiviewProperties</a>::<code>maxMultiviewInstanceIndex</code>.</p>
</li>
<li>
<p><a id="VUID-vkCmdDraw-commandBuffer-01850"></a>
If <code>commandBuffer</code> is an unprotected command buffer, and any
pipeline stage in the <code>VkPipeline</code> object bound to
<code>VK_PIPELINE_BIND_POINT_GRAPHICS</code> reads from or writes to any image
or buffer, that image or buffer <strong class="purple">must</strong> not be a protected image or
protected buffer.</p>
</li>
<li>
<p><a id="VUID-vkCmdDraw-commandBuffer-01851"></a>
If <code>commandBuffer</code> is a protected command buffer, and any pipeline
stage in the <code>VkPipeline</code> object bound to
<code>VK_PIPELINE_BIND_POINT_GRAPHICS</code> writes to any image or buffer,
that image or buffer <strong class="purple">must</strong> not be an unprotected image or unprotected
buffer.</p>
</li>
<li>
<p><a id="VUID-vkCmdDraw-commandBuffer-01852"></a>
If <code>commandBuffer</code> is a protected command buffer, and any pipeline
stage other than the framebuffer-space pipeline stages in the
<code>VkPipeline</code> object bound to <code>VK_PIPELINE_BIND_POINT_GRAPHICS</code>
reads from or writes to any image or buffer, the image or buffer <strong class="purple">must</strong>
not be a protected image or protected buffer.</p>
</li>
<li>
<p><a id="VUID-vkCmdDraw-sampleLocationsEnable-01512"></a>
If the bound graphics pipeline was created with
<a href="#VkPipelineSampleLocationsStateCreateInfoEXT">VkPipelineSampleLocationsStateCreateInfoEXT</a>::<code>sampleLocationsEnable</code>
set to <code>VK_TRUE</code> and the current subpass has a depth/stencil
attachment, then that attachment <strong class="purple">must</strong> have been created with the
<code>VK_IMAGE_CREATE_SAMPLE_LOCATIONS_COMPATIBLE_DEPTH_BIT_EXT</code> bit set</p>
</li>
<li>
<p><a id="VUID-vkCmdDraw-flags-02042"></a>
Any <a href="#VkImage">VkImage</a> created with a <a href="#VkImageCreateInfo">VkImageCreateInfo</a>::<code>flags</code>
containing <code>VK_IMAGE_CREATE_CORNER_SAMPLED_BIT_NV</code> sampled as a
result of this command <strong class="purple">must</strong> only be sampled using a
<a href="#VkSamplerAddressMode">VkSamplerAddressMode</a> of
<code>VK_SAMPLER_ADDRESS_MODE_CLAMP_TO_EDGE</code>.</p>
</li>
</ul>
</div>
</div>
</div>
<div class="sidebarblock">
<div class="content">
<div class="title">Valid Usage (Implicit)</div>
<div class="ulist">
<ul>
<li>
<p><a id="VUID-vkCmdDraw-commandBuffer-parameter"></a> <code>commandBuffer</code> <strong class="purple">must</strong> be a valid <code>VkCommandBuffer</code> handle</p>
</li>
<li>
<p><a id="VUID-vkCmdDraw-commandBuffer-recording"></a> <code>commandBuffer</code> <strong class="purple">must</strong> be in the <a href="#commandbuffers-lifecycle">recording state</a></p>
</li>
<li>
<p><a id="VUID-vkCmdDraw-commandBuffer-cmdpool"></a> The <code>VkCommandPool</code> that <code>commandBuffer</code> was allocated from <strong class="purple">must</strong> support graphics operations</p>
</li>
<li>
<p><a id="VUID-vkCmdDraw-renderpass"></a> This command <strong class="purple">must</strong> only be called inside of a render pass instance</p>
</li>
</ul>
</div>
</div>
</div>
<div class="sidebarblock">
<div class="content">
<div class="title">Host Synchronization</div>
<div class="ulist">
<ul>
<li>
<p>Host access to <code>commandBuffer</code> <strong class="purple">must</strong> be externally synchronized</p>
</li>
<li>
<p>Host access to the <code>VkCommandPool</code> that <code>commandBuffer</code> was allocated from <strong class="purple">must</strong> be externally synchronized</p>
</li>
</ul>
</div>
</div>
</div>
<div class="sidebarblock">
<div class="content">
<div class="title">Command Properties</div>
<table class="tableblock frame-all grid-all stretch">
<colgroup>
<col style="width: 25%;">
<col style="width: 25%;">
<col style="width: 25%;">
<col style="width: 25%;">
</colgroup>
<thead>
<tr>
<th class="tableblock halign-left valign-top"><a href="#VkCommandBufferLevel">Command Buffer Levels</a></th>
<th class="tableblock halign-left valign-top"><a href="#vkCmdBeginRenderPass">Render Pass Scope</a></th>
<th class="tableblock halign-left valign-top"><a href="#VkQueueFlagBits">Supported Queue Types</a></th>
<th class="tableblock halign-left valign-top"><a href="#synchronization-pipeline-stages-types">Pipeline Type</a></th>
</tr>
</thead>
<tbody>
<tr>
<td class="tableblock halign-left valign-top"><p class="tableblock">Primary<br>
Secondary</p></td>
<td class="tableblock halign-left valign-top"><p class="tableblock">Inside</p></td>
<td class="tableblock halign-left valign-top"><p class="tableblock">Graphics</p></td>
<td class="tableblock halign-left valign-top"><p class="tableblock">Graphics</p></td>
</tr>
</tbody>
</table>
</div>
</div>
</div>
<div class="sect3">
<h4 id="_see_also_44">See Also</h4>
<div class="paragraph">
<p><a href="#VkCommandBuffer">VkCommandBuffer</a></p>
</div>
</div>
<div class="sect3">
<h4 id="_document_notes_44">Document Notes</h4>
<div class="paragraph">
<p>For more information, see the Vulkan Specification at URL</p>
</div>
<div class="paragraph">
<p><a href="https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#vkCmdDraw" class="bare">https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#vkCmdDraw</a></p>
</div>
<div class="paragraph">
<p>This page is extracted from the Vulkan Specification.
Fixes and changes should be made to the Specification, not directly.</p>
</div>
<div style="page-break-after: always;"></div>
</div>
</div>
<div class="sect2">
<h3 id="_vkcmddrawindexed3">vkCmdDrawIndexed(3)</h3>
<div class="sect3">
<h4 id="_name_45">Name</h4>
<div class="paragraph">
<p>vkCmdDrawIndexed - Issue an indexed draw into a command buffer</p>
</div>
</div>
<div class="sect3">
<h4 id="_c_specification_45">C Specification</h4>
<div class="paragraph">
<p>To record an indexed draw, call:</p>
</div>
<div id="vkCmdDrawIndexed" class="listingblock">
<div class="content">
<pre class="highlight"><code class="language-c++" data-lang="c++">void vkCmdDrawIndexed(
    VkCommandBuffer                             commandBuffer,
    uint32_t                                    indexCount,
    uint32_t                                    instanceCount,
    uint32_t                                    firstIndex,
    int32_t                                     vertexOffset,
    uint32_t                                    firstInstance);</code></pre>
</div>
</div>
</div>
<div class="sect3">
<h4 id="_parameters_45">Parameters</h4>
<div class="ulist">
<ul>
<li>
<p><code>commandBuffer</code> is the command buffer into which the command is
recorded.</p>
</li>
<li>
<p><code>indexCount</code> is the number of vertices to draw.</p>
</li>
<li>
<p><code>instanceCount</code> is the number of instances to draw.</p>
</li>
<li>
<p><code>firstIndex</code> is the base index within the index buffer.</p>
</li>
<li>
<p><code>vertexOffset</code> is the value added to the vertex index before
indexing into the vertex buffer.</p>
</li>
<li>
<p><code>firstInstance</code> is the instance ID of the first instance to draw.</p>
</li>
</ul>
</div>
</div>
<div class="sect3">
<h4 id="_description_45">Description</h4>
<div class="paragraph">
<p>When the command is executed, primitives are assembled using the current
primitive topology and <code>indexCount</code> vertices whose indices are retrieved
from the index buffer.
The index buffer is treated as an array of tightly packed unsigned integers
of size defined by the <a href="#vkCmdBindIndexBuffer">vkCmdBindIndexBuffer</a>::<code>indexType</code> parameter
with which the buffer was bound.</p>
</div>
<div class="paragraph">
<p>The first vertex index is at an offset of <code>firstIndex</code> * <code>indexSize</code>
+ <code>offset</code> within the bound index buffer, where <code>offset</code> is the
offset specified by <code>vkCmdBindIndexBuffer</code> and <code>indexSize</code> is the
byte size of the type specified by <code>indexType</code>.
Subsequent index values are retrieved from consecutive locations in the
index buffer.
Indices are first compared to the primitive restart value, then zero
extended to 32 bits (if the <code>indexType</code> is <code>VK_INDEX_TYPE_UINT16</code>)
and have <code>vertexOffset</code> added to them, before being supplied as the
<code>vertexIndex</code> value.</p>
</div>
<div class="paragraph">
<p>The primitives are drawn <code>instanceCount</code> times with <code>instanceIndex</code>
starting with <code>firstInstance</code> and increasing sequentially for each
instance.
The assembled primitives execute the bound graphics pipeline.</p>
</div>
<div class="sidebarblock">
<div class="content">
<div class="title">Valid Usage</div>
<div class="ulist">
<ul>
<li>
<p><a id="VUID-vkCmdDrawIndexed-renderPass-00454"></a>
The current render pass <strong class="purple">must</strong> be <a href="vkspec.html#renderpass-compatibility">compatible</a>
with the <code>renderPass</code> member of the
<code>VkGraphicsPipelineCreateInfo</code> structure specified when creating the
<code>VkPipeline</code> bound to <code>VK_PIPELINE_BIND_POINT_GRAPHICS</code>.</p>
</li>
<li>
<p><a id="VUID-vkCmdDrawIndexed-subpass-00455"></a>
The subpass index of the current render pass <strong class="purple">must</strong> be equal to the
<code>subpass</code> member of the <code>VkGraphicsPipelineCreateInfo</code> structure
specified when creating the <code>VkPipeline</code> bound to
<code>VK_PIPELINE_BIND_POINT_GRAPHICS</code>.</p>
</li>
<li>
<p><a id="VUID-vkCmdDrawIndexed-None-00456"></a>
For each set <em>n</em> that is statically used by the <code>VkPipeline</code> bound
to <code>VK_PIPELINE_BIND_POINT_GRAPHICS</code>, a descriptor set <strong class="purple">must</strong> have
been bound to <em>n</em> at <code>VK_PIPELINE_BIND_POINT_GRAPHICS</code>, with a
<code>VkPipelineLayout</code> that is compatible for set <em>n</em>, with the
<code>VkPipelineLayout</code> used to create the current <code>VkPipeline</code>, as
described in <a href="vkspec.html#descriptorsets-compatibility" class="bare">html/vkspec.html#descriptorsets-compatibility</a></p>
</li>
<li>
<p><a id="VUID-vkCmdDrawIndexed-None-00457"></a>
For each push constant that is statically used by the <code>VkPipeline</code>
bound to <code>VK_PIPELINE_BIND_POINT_GRAPHICS</code>, a push constant value
<strong class="purple">must</strong> have been set for <code>VK_PIPELINE_BIND_POINT_GRAPHICS</code>, with a
<code>VkPipelineLayout</code> that is compatible for push constants, with the
<code>VkPipelineLayout</code> used to create the current <code>VkPipeline</code>, as
described in <a href="vkspec.html#descriptorsets-compatibility" class="bare">html/vkspec.html#descriptorsets-compatibility</a></p>
</li>
<li>
<p><a id="VUID-vkCmdDrawIndexed-None-00458"></a>
Descriptors in each bound descriptor set, specified via
<code>vkCmdBindDescriptorSets</code>, <strong class="purple">must</strong> be valid if they are statically
used by the bound <code>VkPipeline</code> object, specified via
<code>vkCmdBindPipeline</code></p>
</li>
<li>
<p><a id="VUID-vkCmdDrawIndexed-None-00459"></a>
All vertex input bindings accessed via vertex input variables declared
in the vertex shader entry point&#8217;s interface <strong class="purple">must</strong> have valid buffers
bound</p>
</li>
<li>
<p><a id="VUID-vkCmdDrawIndexed-None-00460"></a>
For a given vertex buffer binding, any attribute data fetched <strong class="purple">must</strong> be
entirely contained within the corresponding vertex buffer binding, as
described in <a href="vkspec.html#fxvertex-input" class="bare">html/vkspec.html#fxvertex-input</a></p>
</li>
<li>
<p><a id="VUID-vkCmdDrawIndexed-None-00461"></a>
A valid graphics pipeline <strong class="purple">must</strong> be bound to the current command buffer
with <code>VK_PIPELINE_BIND_POINT_GRAPHICS</code></p>
</li>
<li>
<p><a id="VUID-vkCmdDrawIndexed-None-00462"></a>
If the <code>VkPipeline</code> object bound to
<code>VK_PIPELINE_BIND_POINT_GRAPHICS</code> requires any dynamic state, that
state <strong class="purple">must</strong> have been set on the current command buffer</p>
</li>
<li>
<p><a id="VUID-vkCmdDrawIndexed-indexSize-00463"></a>
<span class="eq">(<code>indexSize</code> * (<code>firstIndex</code> +  <code>indexCount</code>) + 
<code>offset</code>)</span> <strong class="purple">must</strong> be less than or equal to the size of the bound
index buffer, with <code>indexSize</code> being based on the type specified by
<code>indexType</code>, where the index buffer, <code>indexType</code>, and
<code>offset</code> are specified via <code>vkCmdBindIndexBuffer</code></p>
</li>
<li>
<p><a id="VUID-vkCmdDrawIndexed-None-00464"></a>
Every input attachment used by the current subpass <strong class="purple">must</strong> be bound to the
pipeline via a descriptor set</p>
</li>
<li>
<p><a id="VUID-vkCmdDrawIndexed-None-00465"></a>
If any <code>VkSampler</code> object that is accessed from a shader by the
<code>VkPipeline</code> bound to <code>VK_PIPELINE_BIND_POINT_GRAPHICS</code> uses
unnormalized coordinates, it <strong class="purple">must</strong> not be used to sample from any
<code>VkImage</code> with a <code>VkImageView</code> of the type
<code>VK_IMAGE_VIEW_TYPE_3D</code>, <code>VK_IMAGE_VIEW_TYPE_CUBE</code>,
<code>VK_IMAGE_VIEW_TYPE_1D_ARRAY</code>, <code>VK_IMAGE_VIEW_TYPE_2D_ARRAY</code> or
<code>VK_IMAGE_VIEW_TYPE_CUBE_ARRAY</code>, in any shader stage</p>
</li>
<li>
<p><a id="VUID-vkCmdDrawIndexed-None-00466"></a>
If any <code>VkSampler</code> object that is accessed from a shader by the
<code>VkPipeline</code> bound to <code>VK_PIPELINE_BIND_POINT_GRAPHICS</code> uses
unnormalized coordinates, it <strong class="purple">must</strong> not be used with any of the SPIR-V
<code>OpImageSample*</code> or <code>OpImageSparseSample*</code> instructions with
<code>ImplicitLod</code>, <code>Dref</code> or <code>Proj</code> in their name, in any shader
stage</p>
</li>
<li>
<p><a id="VUID-vkCmdDrawIndexed-None-00467"></a>
If any <code>VkSampler</code> object that is accessed from a shader by the
<code>VkPipeline</code> bound to <code>VK_PIPELINE_BIND_POINT_GRAPHICS</code> uses
unnormalized coordinates, it <strong class="purple">must</strong> not be used with any of the SPIR-V
<code>OpImageSample*</code> or <code>OpImageSparseSample*</code> instructions that includes a
LOD bias or any offset values, in any shader stage</p>
</li>
<li>
<p><a id="VUID-vkCmdDrawIndexed-None-00468"></a>
If the <a href="vkspec.html#features-robustBufferAccess">robust buffer access</a> feature is
not enabled, and any shader stage in the <code>VkPipeline</code> object bound
to <code>VK_PIPELINE_BIND_POINT_GRAPHICS</code> accesses a uniform buffer, it
<strong class="purple">must</strong> not access values outside of the range of that buffer specified in
the bound descriptor set</p>
</li>
<li>
<p><a id="VUID-vkCmdDrawIndexed-None-00469"></a>
If the <a href="vkspec.html#features-robustBufferAccess">robust buffer access</a> feature is
not enabled, and any shader stage in the <code>VkPipeline</code> object bound
to <code>VK_PIPELINE_BIND_POINT_GRAPHICS</code> accesses a storage buffer, it
<strong class="purple">must</strong> not access values outside of the range of that buffer specified in
the bound descriptor set</p>
</li>
<li>
<p><a id="VUID-vkCmdDrawIndexed-None-02011"></a>
If a <code>VkImageView</code> is sampled with <code>VK_FILTER_LINEAR</code> as a
result of this command, then the image view&#8217;s
<a href="vkspec.html#resources-image-view-format-features">format features</a> <strong class="purple">must</strong> contain
<code>VK_FORMAT_FEATURE_SAMPLED_IMAGE_FILTER_LINEAR_BIT</code>.</p>
</li>
<li>
<p><a id="VUID-vkCmdDrawIndexed-None-01500"></a>
Image subresources used as attachments in the current render pass <strong class="purple">must</strong>
not be accessed in any way other than as an attachment by this command.</p>
</li>
<li>
<p><a id="VUID-vkCmdDrawIndexed-None-02012"></a>
If a <code>VkImageView</code> is sampled with <code>VK_FILTER_CUBIC_EXT</code> as a
result of this command, then the image view&#8217;s
<a href="vkspec.html#resources-image-view-format-features">format features</a> <strong class="purple">must</strong> contain
<code>VK_FORMAT_FEATURE_SAMPLED_IMAGE_FILTER_CUBIC_BIT_EXT</code></p>
</li>
<li>
<p><a id="VUID-vkCmdDrawIndexed-filterCubic-02615"></a>
Any <a href="#VkImageView">VkImageView</a> being sampled with <code>VK_FILTER_CUBIC_EXT</code> as a
result of this command <strong class="purple">must</strong> have a <a href="#VkImageViewType">VkImageViewType</a> and format
that supports cubic filtering, as specified by
<code>VkFilterCubicImageViewImageFormatPropertiesEXT</code>::<code>filterCubic</code>
returned by <code>vkGetPhysicalDeviceImageFormatProperties2</code></p>
</li>
<li>
<p><a id="VUID-vkCmdDrawIndexed-filterCubicMinmax-02616"></a>
Any <a href="#VkImageView">VkImageView</a> being sampled with <code>VK_FILTER_CUBIC_EXT</code> with
a reduction mode of either <code>VK_SAMPLER_REDUCTION_MODE_MIN_EXT</code> or
<code>VK_SAMPLER_REDUCTION_MODE_MAX_EXT</code> as a result of this command
<strong class="purple">must</strong> have a <a href="#VkImageViewType">VkImageViewType</a> and format that supports cubic
filtering together with minmax filtering, as specified by
<code>VkFilterCubicImageViewImageFormatPropertiesEXT</code>::<code>filterCubicMinmax</code>
returned by <code>vkGetPhysicalDeviceImageFormatProperties2</code></p>
</li>
<li>
<p><a id="VUID-vkCmdDrawIndexed-maxMultiviewInstanceIndex-00473"></a>
If the draw is recorded in a render pass instance with multiview
enabled, the maximum instance index <strong class="purple">must</strong> be less than or equal to
<a href="#VkPhysicalDeviceMultiviewProperties">VkPhysicalDeviceMultiviewProperties</a>::<code>maxMultiviewInstanceIndex</code>.</p>
</li>
<li>
<p><a id="VUID-vkCmdDrawIndexed-commandBuffer-01853"></a>
If <code>commandBuffer</code> is an unprotected command buffer, and any
pipeline stage in the <code>VkPipeline</code> object bound to
<code>VK_PIPELINE_BIND_POINT_GRAPHICS</code> reads from or writes to any image
or buffer, that image or buffer <strong class="purple">must</strong> not be a protected image or
protected buffer.</p>
</li>
<li>
<p><a id="VUID-vkCmdDrawIndexed-commandBuffer-01854"></a>
If <code>commandBuffer</code> is a protected command buffer, and any pipeline
stage in the <code>VkPipeline</code> object bound to
<code>VK_PIPELINE_BIND_POINT_GRAPHICS</code> writes to any image or buffer,
that image or buffer <strong class="purple">must</strong> not be an unprotected image or unprotected
buffer.</p>
</li>
<li>
<p><a id="VUID-vkCmdDrawIndexed-commandBuffer-01855"></a>
If <code>commandBuffer</code> is a protected command buffer, and any pipeline
stage other than the framebuffer-space pipeline stages in the
<code>VkPipeline</code> object bound to <code>VK_PIPELINE_BIND_POINT_GRAPHICS</code>
reads from or writes to any image or buffer, the image or buffer <strong class="purple">must</strong>
not be a protected image or protected buffer.</p>
</li>
<li>
<p><a id="VUID-vkCmdDrawIndexed-sampleLocationsEnable-01513"></a>
If the bound graphics pipeline was created with
<a href="#VkPipelineSampleLocationsStateCreateInfoEXT">VkPipelineSampleLocationsStateCreateInfoEXT</a>::<code>sampleLocationsEnable</code>
set to <code>VK_TRUE</code> and the current subpass has a depth/stencil
attachment, then that attachment <strong class="purple">must</strong> have been created with the
<code>VK_IMAGE_CREATE_SAMPLE_LOCATIONS_COMPATIBLE_DEPTH_BIT_EXT</code> bit set</p>
</li>
<li>
<p><a id="VUID-vkCmdDrawIndexed-flags-02043"></a>
Any <a href="#VkImage">VkImage</a> created with a <a href="#VkImageCreateInfo">VkImageCreateInfo</a>::<code>flags</code>
containing <code>VK_IMAGE_CREATE_CORNER_SAMPLED_BIT_NV</code> sampled as a
result of this command <strong class="purple">must</strong> only be sampled using a
<a href="#VkSamplerAddressMode">VkSamplerAddressMode</a> of
<code>VK_SAMPLER_ADDRESS_MODE_CLAMP_TO_EDGE</code>.</p>
</li>
</ul>
</div>
</div>
</div>
<div class="sidebarblock">
<div class="content">
<div class="title">Valid Usage (Implicit)</div>
<div class="ulist">
<ul>
<li>
<p><a id="VUID-vkCmdDrawIndexed-commandBuffer-parameter"></a> <code>commandBuffer</code> <strong class="purple">must</strong> be a valid <code>VkCommandBuffer</code> handle</p>
</li>
<li>
<p><a id="VUID-vkCmdDrawIndexed-commandBuffer-recording"></a> <code>commandBuffer</code> <strong class="purple">must</strong> be in the <a href="#commandbuffers-lifecycle">recording state</a></p>
</li>
<li>
<p><a id="VUID-vkCmdDrawIndexed-commandBuffer-cmdpool"></a> The <code>VkCommandPool</code> that <code>commandBuffer</code> was allocated from <strong class="purple">must</strong> support graphics operations</p>
</li>
<li>
<p><a id="VUID-vkCmdDrawIndexed-renderpass"></a> This command <strong class="purple">must</strong> only be called inside of a render pass instance</p>
</li>
</ul>
</div>
</div>
</div>
<div class="sidebarblock">
<div class="content">
<div class="title">Host Synchronization</div>
<div class="ulist">
<ul>
<li>
<p>Host access to <code>commandBuffer</code> <strong class="purple">must</strong> be externally synchronized</p>
</li>
<li>
<p>Host access to the <code>VkCommandPool</code> that <code>commandBuffer</code> was allocated from <strong class="purple">must</strong> be externally synchronized</p>
</li>
</ul>
</div>
</div>
</div>
<div class="sidebarblock">
<div class="content">
<div class="title">Command Properties</div>
<table class="tableblock frame-all grid-all stretch">
<colgroup>
<col style="width: 25%;">
<col style="width: 25%;">
<col style="width: 25%;">
<col style="width: 25%;">
</colgroup>
<thead>
<tr>
<th class="tableblock halign-left valign-top"><a href="#VkCommandBufferLevel">Command Buffer Levels</a></th>
<th class="tableblock halign-left valign-top"><a href="#vkCmdBeginRenderPass">Render Pass Scope</a></th>
<th class="tableblock halign-left valign-top"><a href="#VkQueueFlagBits">Supported Queue Types</a></th>
<th class="tableblock halign-left valign-top"><a href="#synchronization-pipeline-stages-types">Pipeline Type</a></th>
</tr>
</thead>
<tbody>
<tr>
<td class="tableblock halign-left valign-top"><p class="tableblock">Primary<br>
Secondary</p></td>
<td class="tableblock halign-left valign-top"><p class="tableblock">Inside</p></td>
<td class="tableblock halign-left valign-top"><p class="tableblock">Graphics</p></td>
<td class="tableblock halign-left valign-top"><p class="tableblock">Graphics</p></td>
</tr>
</tbody>
</table>
</div>
</div>
</div>
<div class="sect3">
<h4 id="_see_also_45">See Also</h4>
<div class="paragraph">
<p><a href="#VkCommandBuffer">VkCommandBuffer</a></p>
</div>
</div>
<div class="sect3">
<h4 id="_document_notes_45">Document Notes</h4>
<div class="paragraph">
<p>For more information, see the Vulkan Specification at URL</p>
</div>
<div class="paragraph">
<p><a href="https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#vkCmdDrawIndexed" class="bare">https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#vkCmdDrawIndexed</a></p>
</div>
<div class="paragraph">
<p>This page is extracted from the Vulkan Specification.
Fixes and changes should be made to the Specification, not directly.</p>
</div>
<div style="page-break-after: always;"></div>
</div>
</div>
<div class="sect2">
<h3 id="_vkcmddrawindexedindirect3">vkCmdDrawIndexedIndirect(3)</h3>
<div class="sect3">
<h4 id="_name_46">Name</h4>
<div class="paragraph">
<p>vkCmdDrawIndexedIndirect - Perform an indexed indirect draw</p>
</div>
</div>
<div class="sect3">
<h4 id="_c_specification_46">C Specification</h4>
<div class="paragraph">
<p>To record an indexed indirect draw, call:</p>
</div>
<div id="vkCmdDrawIndexedIndirect" class="listingblock">
<div class="content">
<pre class="highlight"><code class="language-c++" data-lang="c++">void vkCmdDrawIndexedIndirect(
    VkCommandBuffer                             commandBuffer,
    VkBuffer                                    buffer,
    VkDeviceSize                                offset,
    uint32_t                                    drawCount,
    uint32_t                                    stride);</code></pre>
</div>
</div>
</div>
<div class="sect3">
<h4 id="_parameters_46">Parameters</h4>
<div class="ulist">
<ul>
<li>
<p><code>commandBuffer</code> is the command buffer into which the command is
recorded.</p>
</li>
<li>
<p><code>buffer</code> is the buffer containing draw parameters.</p>
</li>
<li>
<p><code>offset</code> is the byte offset into <code>buffer</code> where parameters
begin.</p>
</li>
<li>
<p><code>drawCount</code> is the number of draws to execute, and <strong class="purple">can</strong> be zero.</p>
</li>
<li>
<p><code>stride</code> is the byte stride between successive sets of draw
parameters.</p>
</li>
</ul>
</div>
</div>
<div class="sect3">
<h4 id="_description_46">Description</h4>
<div class="paragraph">
<p><code>vkCmdDrawIndexedIndirect</code> behaves similarly to <a href="#vkCmdDrawIndexed">vkCmdDrawIndexed</a>
except that the parameters are read by the device from a buffer during
execution.
<code>drawCount</code> draws are executed by the command, with parameters taken
from <code>buffer</code> starting at <code>offset</code> and increasing by <code>stride</code>
bytes for each successive draw.
The parameters of each draw are encoded in an array of
<a href="#VkDrawIndexedIndirectCommand">VkDrawIndexedIndirectCommand</a> structures.
If <code>drawCount</code> is less than or equal to one, <code>stride</code> is ignored.</p>
</div>
<div class="sidebarblock">
<div class="content">
<div class="title">Valid Usage</div>
<div class="ulist">
<ul>
<li>
<p><a id="VUID-vkCmdDrawIndexedIndirect-buffer-00526"></a>
If <code>buffer</code> is non-sparse then it <strong class="purple">must</strong> be bound completely and
contiguously to a single <code>VkDeviceMemory</code> object</p>
</li>
<li>
<p><a id="VUID-vkCmdDrawIndexedIndirect-buffer-01665"></a>
<code>buffer</code> <strong class="purple">must</strong> have been created with the
<code>VK_BUFFER_USAGE_INDIRECT_BUFFER_BIT</code> bit set</p>
</li>
<li>
<p><a id="VUID-vkCmdDrawIndexedIndirect-offset-00527"></a>
<code>offset</code> <strong class="purple">must</strong> be a multiple of <code>4</code></p>
</li>
<li>
<p><a id="VUID-vkCmdDrawIndexedIndirect-drawCount-00528"></a>
If <code>drawCount</code> is greater than <code>1</code>, <code>stride</code> <strong class="purple">must</strong> be a multiple
of <code>4</code> and <strong class="purple">must</strong> be greater than or equal to
<code>sizeof</code>(<code>VkDrawIndexedIndirectCommand</code>)</p>
</li>
<li>
<p><a id="VUID-vkCmdDrawIndexedIndirect-drawCount-00529"></a>
If the <a href="vkspec.html#features-multiDrawIndirect">multi-draw indirect</a> feature is not
enabled, <code>drawCount</code> <strong class="purple">must</strong> be <code>0</code> or <code>1</code></p>
</li>
<li>
<p><a id="VUID-vkCmdDrawIndexedIndirect-firstInstance-00530"></a>
If the <a href="vkspec.html#features-drawIndirectFirstInstance">drawIndirectFirstInstance</a>
feature is not enabled, all the <code>firstInstance</code> members of the
<code>VkDrawIndexedIndirectCommand</code> structures accessed by this command
<strong class="purple">must</strong> be <code>0</code></p>
</li>
<li>
<p><a id="VUID-vkCmdDrawIndexedIndirect-renderPass-00531"></a>
The current render pass <strong class="purple">must</strong> be <a href="vkspec.html#renderpass-compatibility">compatible</a>
with the <code>renderPass</code> member of the
<code>VkGraphicsPipelineCreateInfo</code> structure specified when creating the
<code>VkPipeline</code> bound to <code>VK_PIPELINE_BIND_POINT_GRAPHICS</code>.</p>
</li>
<li>
<p><a id="VUID-vkCmdDrawIndexedIndirect-subpass-00532"></a>
The subpass index of the current render pass <strong class="purple">must</strong> be equal to the
<code>subpass</code> member of the <code>VkGraphicsPipelineCreateInfo</code> structure
specified when creating the <code>VkPipeline</code> bound to
<code>VK_PIPELINE_BIND_POINT_GRAPHICS</code>.</p>
</li>
<li>
<p><a id="VUID-vkCmdDrawIndexedIndirect-None-00533"></a>
For each set <em>n</em> that is statically used by the <code>VkPipeline</code> bound
to <code>VK_PIPELINE_BIND_POINT_GRAPHICS</code>, a descriptor set <strong class="purple">must</strong> have
been bound to <em>n</em> at <code>VK_PIPELINE_BIND_POINT_GRAPHICS</code>, with a
<code>VkPipelineLayout</code> that is compatible for set <em>n</em>, with the
<code>VkPipelineLayout</code> used to create the current <code>VkPipeline</code>, as
described in <a href="vkspec.html#descriptorsets-compatibility" class="bare">html/vkspec.html#descriptorsets-compatibility</a></p>
</li>
<li>
<p><a id="VUID-vkCmdDrawIndexedIndirect-None-00534"></a>
For each push constant that is statically used by the <code>VkPipeline</code>
bound to <code>VK_PIPELINE_BIND_POINT_GRAPHICS</code>, a push constant value
<strong class="purple">must</strong> have been set for <code>VK_PIPELINE_BIND_POINT_GRAPHICS</code>, with a
<code>VkPipelineLayout</code> that is compatible for push constants, with the
<code>VkPipelineLayout</code> used to create the current <code>VkPipeline</code>, as
described in <a href="vkspec.html#descriptorsets-compatibility" class="bare">html/vkspec.html#descriptorsets-compatibility</a></p>
</li>
<li>
<p><a id="VUID-vkCmdDrawIndexedIndirect-None-00535"></a>
Descriptors in each bound descriptor set, specified via
<code>vkCmdBindDescriptorSets</code>, <strong class="purple">must</strong> be valid if they are statically
used by the bound <code>VkPipeline</code> object, specified via
<code>vkCmdBindPipeline</code></p>
</li>
<li>
<p><a id="VUID-vkCmdDrawIndexedIndirect-None-00536"></a>
All vertex input bindings accessed via vertex input variables declared
in the vertex shader entry point&#8217;s interface <strong class="purple">must</strong> have valid buffers
bound</p>
</li>
<li>
<p><a id="VUID-vkCmdDrawIndexedIndirect-None-00537"></a>
A valid graphics pipeline <strong class="purple">must</strong> be bound to the current command buffer
with <code>VK_PIPELINE_BIND_POINT_GRAPHICS</code></p>
</li>
<li>
<p><a id="VUID-vkCmdDrawIndexedIndirect-None-00538"></a>
If the <code>VkPipeline</code> object bound to
<code>VK_PIPELINE_BIND_POINT_GRAPHICS</code> requires any dynamic state, that
state <strong class="purple">must</strong> have been set on the current command buffer</p>
</li>
<li>
<p><a id="VUID-vkCmdDrawIndexedIndirect-drawCount-00539"></a>
If <code>drawCount</code> is equal to <code>1</code>, <span class="eq">(<code>offset</code> + 
<code>sizeof</code>(<code>VkDrawIndexedIndirectCommand</code>))</span> <strong class="purple">must</strong> be less than or
equal to the size of <code>buffer</code></p>
</li>
<li>
<p><a id="VUID-vkCmdDrawIndexedIndirect-drawCount-00540"></a>
If <code>drawCount</code> is greater than <code>1</code>, <span class="eq">(<code>stride</code> ×
(<code>drawCount</code> - 1) +  <code>offset</code> + 
<code>sizeof</code>(<code>VkDrawIndexedIndirectCommand</code>))</span> <strong class="purple">must</strong> be less than or
equal to the size of <code>buffer</code></p>
</li>
<li>
<p><a id="VUID-vkCmdDrawIndexedIndirect-drawCount-00541"></a>
<code>drawCount</code> <strong class="purple">must</strong> be less than or equal to
<code>VkPhysicalDeviceLimits</code>::<code>maxDrawIndirectCount</code></p>
</li>
<li>
<p><a id="VUID-vkCmdDrawIndexedIndirect-None-00542"></a>
Every input attachment used by the current subpass <strong class="purple">must</strong> be bound to the
pipeline via a descriptor set</p>
</li>
<li>
<p><a id="VUID-vkCmdDrawIndexedIndirect-None-00543"></a>
If any <code>VkSampler</code> object that is accessed from a shader by the
<code>VkPipeline</code> bound to <code>VK_PIPELINE_BIND_POINT_GRAPHICS</code> uses
unnormalized coordinates, it <strong class="purple">must</strong> not be used to sample from any
<code>VkImage</code> with a <code>VkImageView</code> of the type
<code>VK_IMAGE_VIEW_TYPE_3D</code>, <code>VK_IMAGE_VIEW_TYPE_CUBE</code>,
<code>VK_IMAGE_VIEW_TYPE_1D_ARRAY</code>, <code>VK_IMAGE_VIEW_TYPE_2D_ARRAY</code> or
<code>VK_IMAGE_VIEW_TYPE_CUBE_ARRAY</code>, in any shader stage</p>
</li>
<li>
<p><a id="VUID-vkCmdDrawIndexedIndirect-None-00544"></a>
If any <code>VkSampler</code> object that is accessed from a shader by the
<code>VkPipeline</code> bound to <code>VK_PIPELINE_BIND_POINT_GRAPHICS</code> uses
unnormalized coordinates, it <strong class="purple">must</strong> not be used with any of the SPIR-V
<code>OpImageSample*</code> or <code>OpImageSparseSample*</code> instructions with
<code>ImplicitLod</code>, <code>Dref</code> or <code>Proj</code> in their name, in any shader
stage</p>
</li>
<li>
<p><a id="VUID-vkCmdDrawIndexedIndirect-None-00545"></a>
If any <code>VkSampler</code> object that is accessed from a shader by the
<code>VkPipeline</code> bound to <code>VK_PIPELINE_BIND_POINT_GRAPHICS</code> uses
unnormalized coordinates, it <strong class="purple">must</strong> not be used with any of the SPIR-V
<code>OpImageSample*</code> or <code>OpImageSparseSample*</code> instructions that includes a
LOD bias or any offset values, in any shader stage</p>
</li>
<li>
<p><a id="VUID-vkCmdDrawIndexedIndirect-None-00546"></a>
If the <a href="vkspec.html#features-robustBufferAccess">robust buffer access</a> feature is
not enabled, and any shader stage in the <code>VkPipeline</code> object bound
to <code>VK_PIPELINE_BIND_POINT_GRAPHICS</code> accesses a uniform buffer, it
<strong class="purple">must</strong> not access values outside of the range of that buffer specified in
the bound descriptor set</p>
</li>
<li>
<p><a id="VUID-vkCmdDrawIndexedIndirect-None-00547"></a>
If the <a href="vkspec.html#features-robustBufferAccess">robust buffer access</a> feature is
not enabled, and any shader stage in the <code>VkPipeline</code> object bound
to <code>VK_PIPELINE_BIND_POINT_GRAPHICS</code> accesses a storage buffer, it
<strong class="purple">must</strong> not access values outside of the range of that buffer specified in
the bound descriptor set</p>
</li>
<li>
<p><a id="VUID-vkCmdDrawIndexedIndirect-None-02018"></a>
If a <code>VkImageView</code> is sampled with <code>VK_FILTER_LINEAR</code> as a
result of this command, then the image view&#8217;s
<a href="vkspec.html#resources-image-view-format-features">format features</a> <strong class="purple">must</strong> contain
<code>VK_FORMAT_FEATURE_SAMPLED_IMAGE_FILTER_LINEAR_BIT</code>.</p>
</li>
<li>
<p><a id="VUID-vkCmdDrawIndexedIndirect-None-01503"></a>
Image subresources used as attachments in the current render pass <strong class="purple">must</strong>
not be accessed in any way other than as an attachment by this command.</p>
</li>
<li>
<p><a id="VUID-vkCmdDrawIndexedIndirect-None-02019"></a>
If a <code>VkImageView</code> is sampled with <code>VK_FILTER_CUBIC_EXT</code> as a
result of this command, then the image view&#8217;s
<a href="vkspec.html#resources-image-view-format-features">format features</a> <strong class="purple">must</strong> contain
<code>VK_FORMAT_FEATURE_SAMPLED_IMAGE_FILTER_CUBIC_BIT_EXT</code></p>
</li>
<li>
<p><a id="VUID-vkCmdDrawIndexedIndirect-filterCubic-02621"></a>
Any <a href="#VkImageView">VkImageView</a> being sampled with <code>VK_FILTER_CUBIC_EXT</code> as a
result of this command <strong class="purple">must</strong> have a <a href="#VkImageViewType">VkImageViewType</a> and format
that supports cubic filtering, as specified by
<code>VkFilterCubicImageViewImageFormatPropertiesEXT</code>::<code>filterCubic</code>
returned by <code>vkGetPhysicalDeviceImageFormatProperties2</code></p>
</li>
<li>
<p><a id="VUID-vkCmdDrawIndexedIndirect-filterCubicMinmax-02622"></a>
Any <a href="#VkImageView">VkImageView</a> being sampled with <code>VK_FILTER_CUBIC_EXT</code> with
a reduction mode of either <code>VK_SAMPLER_REDUCTION_MODE_MIN_EXT</code> or
<code>VK_SAMPLER_REDUCTION_MODE_MAX_EXT</code> as a result of this command
<strong class="purple">must</strong> have a <a href="#VkImageViewType">VkImageViewType</a> and format that supports cubic
filtering together with minmax filtering, as specified by
<code>VkFilterCubicImageViewImageFormatPropertiesEXT</code>::<code>filterCubicMinmax</code>
returned by <code>vkGetPhysicalDeviceImageFormatProperties2</code></p>
</li>
<li>
<p><a id="VUID-vkCmdDrawIndexedIndirect-maxMultiviewInstanceIndex-00551"></a>
If the draw is recorded in a render pass instance with multiview
enabled, the maximum instance index <strong class="purple">must</strong> be less than or equal to
<a href="#VkPhysicalDeviceMultiviewProperties">VkPhysicalDeviceMultiviewProperties</a>::<code>maxMultiviewInstanceIndex</code>.</p>
</li>
<li>
<p><a id="VUID-vkCmdDrawIndexedIndirect-commandBuffer-02643"></a>
<code>commandBuffer</code> <strong class="purple">must</strong> not be a protected command buffer</p>
</li>
<li>
<p><a id="VUID-vkCmdDrawIndexedIndirect-commandBuffer-01862"></a>
If <code>commandBuffer</code> is an unprotected command buffer, and any
pipeline stage in the <code>VkPipeline</code> object bound to
<code>VK_PIPELINE_BIND_POINT_GRAPHICS</code> reads from or writes to any image
or buffer, that image or buffer <strong class="purple">must</strong> not be a protected image or
protected buffer.</p>
</li>
<li>
<p><a id="VUID-vkCmdDrawIndexedIndirect-sampleLocationsEnable-01516"></a>
If the bound graphics pipeline was created with
<a href="#VkPipelineSampleLocationsStateCreateInfoEXT">VkPipelineSampleLocationsStateCreateInfoEXT</a>::<code>sampleLocationsEnable</code>
set to <code>VK_TRUE</code> and the current subpass has a depth/stencil
attachment, then that attachment <strong class="purple">must</strong> have been created with the
<code>VK_IMAGE_CREATE_SAMPLE_LOCATIONS_COMPATIBLE_DEPTH_BIT_EXT</code> bit set</p>
</li>
<li>
<p><a id="VUID-vkCmdDrawIndexedIndirect-flags-02047"></a>
Any <a href="#VkImage">VkImage</a> created with a <a href="#VkImageCreateInfo">VkImageCreateInfo</a>::<code>flags</code>
containing <code>VK_IMAGE_CREATE_CORNER_SAMPLED_BIT_NV</code> sampled as a
result of this command <strong class="purple">must</strong> only be sampled using a
<a href="#VkSamplerAddressMode">VkSamplerAddressMode</a> of
<code>VK_SAMPLER_ADDRESS_MODE_CLAMP_TO_EDGE</code>.</p>
</li>
</ul>
</div>
</div>
</div>
<div class="sidebarblock">
<div class="content">
<div class="title">Valid Usage (Implicit)</div>
<div class="ulist">
<ul>
<li>
<p><a id="VUID-vkCmdDrawIndexedIndirect-commandBuffer-parameter"></a> <code>commandBuffer</code> <strong class="purple">must</strong> be a valid <code>VkCommandBuffer</code> handle</p>
</li>
<li>
<p><a id="VUID-vkCmdDrawIndexedIndirect-buffer-parameter"></a> <code>buffer</code> <strong class="purple">must</strong> be a valid <code>VkBuffer</code> handle</p>
</li>
<li>
<p><a id="VUID-vkCmdDrawIndexedIndirect-commandBuffer-recording"></a> <code>commandBuffer</code> <strong class="purple">must</strong> be in the <a href="#commandbuffers-lifecycle">recording state</a></p>
</li>
<li>
<p><a id="VUID-vkCmdDrawIndexedIndirect-commandBuffer-cmdpool"></a> The <code>VkCommandPool</code> that <code>commandBuffer</code> was allocated from <strong class="purple">must</strong> support graphics operations</p>
</li>
<li>
<p><a id="VUID-vkCmdDrawIndexedIndirect-renderpass"></a> This command <strong class="purple">must</strong> only be called inside of a render pass instance</p>
</li>
<li>
<p><a id="VUID-vkCmdDrawIndexedIndirect-commonparent"></a> Both of <code>buffer</code>, and <code>commandBuffer</code> <strong class="purple">must</strong> have been created, allocated, or retrieved from the same <code>VkDevice</code></p>
</li>
</ul>
</div>
</div>
</div>
<div class="sidebarblock">
<div class="content">
<div class="title">Host Synchronization</div>
<div class="ulist">
<ul>
<li>
<p>Host access to <code>commandBuffer</code> <strong class="purple">must</strong> be externally synchronized</p>
</li>
<li>
<p>Host access to the <code>VkCommandPool</code> that <code>commandBuffer</code> was allocated from <strong class="purple">must</strong> be externally synchronized</p>
</li>
</ul>
</div>
</div>
</div>
<div class="sidebarblock">
<div class="content">
<div class="title">Command Properties</div>
<table class="tableblock frame-all grid-all stretch">
<colgroup>
<col style="width: 25%;">
<col style="width: 25%;">
<col style="width: 25%;">
<col style="width: 25%;">
</colgroup>
<thead>
<tr>
<th class="tableblock halign-left valign-top"><a href="#VkCommandBufferLevel">Command Buffer Levels</a></th>
<th class="tableblock halign-left valign-top"><a href="#vkCmdBeginRenderPass">Render Pass Scope</a></th>
<th class="tableblock halign-left valign-top"><a href="#VkQueueFlagBits">Supported Queue Types</a></th>
<th class="tableblock halign-left valign-top"><a href="#synchronization-pipeline-stages-types">Pipeline Type</a></th>
</tr>
</thead>
<tbody>
<tr>
<td class="tableblock halign-left valign-top"><p class="tableblock">Primary<br>
Secondary</p></td>
<td class="tableblock halign-left valign-top"><p class="tableblock">Inside</p></td>
<td class="tableblock halign-left valign-top"><p class="tableblock">Graphics</p></td>
<td class="tableblock halign-left valign-top"><p class="tableblock">Graphics</p></td>
</tr>
</tbody>
</table>
</div>
</div>
</div>
<div class="sect3">
<h4 id="_see_also_46">See Also</h4>
<div class="paragraph">
<p><a href="#VkBuffer">VkBuffer</a>, <a href="#VkCommandBuffer">VkCommandBuffer</a>, <code>VkDeviceSize</code></p>
</div>
</div>
<div class="sect3">
<h4 id="_document_notes_46">Document Notes</h4>
<div class="paragraph">
<p>For more information, see the Vulkan Specification at URL</p>
</div>
<div class="paragraph">
<p><a href="https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#vkCmdDrawIndexedIndirect" class="bare">https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#vkCmdDrawIndexedIndirect</a></p>
</div>
<div class="paragraph">
<p>This page is extracted from the Vulkan Specification.
Fixes and changes should be made to the Specification, not directly.</p>
</div>
<div style="page-break-after: always;"></div>
</div>
</div>
<div class="sect2">
<h3 id="_vkcmddrawindexedindirectcountamd3">vkCmdDrawIndexedIndirectCountAMD(3)</h3>
<div class="sect3">
<h4 id="_name_47">Name</h4>
<div class="paragraph">
<p>vkCmdDrawIndexedIndirectCountAMD - Perform an indexed indirect draw with the draw count sourced from a buffer</p>
</div>
</div>
<div class="sect3">
<h4 id="_c_specification_47">C Specification</h4>
<div class="paragraph">
<p>To record an indexed draw call with a draw call count sourced from a buffer,
call:</p>
</div>
<div id="vkCmdDrawIndexedIndirectCountAMD" class="listingblock">
<div class="content">
<pre class="highlight"><code class="language-c++" data-lang="c++">void vkCmdDrawIndexedIndirectCountAMD(
    VkCommandBuffer                             commandBuffer,
    VkBuffer                                    buffer,
    VkDeviceSize                                offset,
    VkBuffer                                    countBuffer,
    VkDeviceSize                                countBufferOffset,
    uint32_t                                    maxDrawCount,
    uint32_t                                    stride);</code></pre>
</div>
</div>
</div>
<div class="sect3">
<h4 id="_parameters_47">Parameters</h4>
<div class="ulist">
<ul>
<li>
<p><code>commandBuffer</code> is the command buffer into which the command is
recorded.</p>
</li>
<li>
<p><code>buffer</code> is the buffer containing draw parameters.</p>
</li>
<li>
<p><code>offset</code> is the byte offset into <code>buffer</code> where parameters
begin.</p>
</li>
<li>
<p><code>countBuffer</code> is the buffer containing the draw count.</p>
</li>
<li>
<p><code>countBufferOffset</code> is the byte offset into <code>countBuffer</code> where
the draw count begins.</p>
</li>
<li>
<p><code>maxDrawCount</code> specifies the maximum number of draws that will be
executed.
The actual number of executed draw calls is the minimum of the count
specified in <code>countBuffer</code> and <code>maxDrawCount</code>.</p>
</li>
<li>
<p><code>stride</code> is the byte stride between successive sets of draw
parameters.</p>
</li>
</ul>
</div>
</div>
<div class="sect3">
<h4 id="_description_47">Description</h4>
<div class="paragraph">
<p><code>vkCmdDrawIndexedIndirectCountAMD</code> behaves similarly to
<a href="#vkCmdDrawIndexedIndirect">vkCmdDrawIndexedIndirect</a> except that the draw count is read by the
device from a buffer during execution.
The command will read an unsigned 32-bit integer from <code>countBuffer</code>
located at <code>countBufferOffset</code> and use this as the draw count.</p>
</div>
<div class="sidebarblock">
<div class="content">
<div class="title">Valid Usage</div>
<div class="ulist">
<ul>
<li>
<p><a id="VUID-vkCmdDrawIndexedIndirectCountAMD-buffer-01666"></a>
If <code>buffer</code> is non-sparse then it <strong class="purple">must</strong> be bound completely and
contiguously to a single <code>VkDeviceMemory</code> object</p>
</li>
<li>
<p><a id="VUID-vkCmdDrawIndexedIndirectCountAMD-buffer-01667"></a>
<code>buffer</code> <strong class="purple">must</strong> have been created with the
<code>VK_BUFFER_USAGE_INDIRECT_BUFFER_BIT</code> bit set</p>
</li>
<li>
<p><a id="VUID-vkCmdDrawIndexedIndirectCountAMD-countBuffer-01668"></a>
If <code>countBuffer</code> is non-sparse then it <strong class="purple">must</strong> be bound completely and
contiguously to a single <code>VkDeviceMemory</code> object</p>
</li>
<li>
<p><a id="VUID-vkCmdDrawIndexedIndirectCountAMD-countBuffer-01669"></a>
<code>countBuffer</code> <strong class="purple">must</strong> have been created with the
<code>VK_BUFFER_USAGE_INDIRECT_BUFFER_BIT</code> bit set</p>
</li>
<li>
<p><a id="VUID-vkCmdDrawIndexedIndirectCountAMD-offset-00555"></a>
<code>offset</code> <strong class="purple">must</strong> be a multiple of <code>4</code></p>
</li>
<li>
<p><a id="VUID-vkCmdDrawIndexedIndirectCountAMD-countBufferOffset-00556"></a>
<code>countBufferOffset</code> <strong class="purple">must</strong> be a multiple of <code>4</code></p>
</li>
<li>
<p><a id="VUID-vkCmdDrawIndexedIndirectCountAMD-stride-00557"></a>
<code>stride</code> <strong class="purple">must</strong> be a multiple of <code>4</code> and <strong class="purple">must</strong> be greater than or
equal to <code>sizeof</code>(<code>VkDrawIndexedIndirectCommand</code>)</p>
</li>
<li>
<p><a id="VUID-vkCmdDrawIndexedIndirectCountAMD-maxDrawCount-00558"></a>
If <code>maxDrawCount</code> is greater than or equal to <code>1</code>,
<span class="eq">(<code>stride</code> × (<code>maxDrawCount</code> - 1) +  <code>offset</code>
+  <code>sizeof</code>(<code>VkDrawIndexedIndirectCommand</code>))</span> <strong class="purple">must</strong> be less
than or equal to the size of <code>buffer</code></p>
</li>
<li>
<p><a id="VUID-vkCmdDrawIndexedIndirectCountAMD-firstInstance-00559"></a>
If the <a href="vkspec.html#features-drawIndirectFirstInstance">drawIndirectFirstInstance</a>
feature is not enabled, all the <code>firstInstance</code> members of the
<code>VkDrawIndexedIndirectCommand</code> structures accessed by this command
<strong class="purple">must</strong> be <code>0</code></p>
</li>
<li>
<p><a id="VUID-vkCmdDrawIndexedIndirectCountAMD-renderPass-00560"></a>
The current render pass <strong class="purple">must</strong> be <a href="vkspec.html#renderpass-compatibility">compatible</a>
with the <code>renderPass</code> member of the
<code>VkGraphicsPipelineCreateInfo</code> structure specified when creating the
<code>VkPipeline</code> bound to <code>VK_PIPELINE_BIND_POINT_GRAPHICS</code>.</p>
</li>
<li>
<p><a id="VUID-vkCmdDrawIndexedIndirectCountAMD-subpass-00561"></a>
The subpass index of the current render pass <strong class="purple">must</strong> be equal to the
<code>subpass</code> member of the <code>VkGraphicsPipelineCreateInfo</code> structure
specified when creating the <code>VkPipeline</code> bound to
<code>VK_PIPELINE_BIND_POINT_GRAPHICS</code>.</p>
</li>
<li>
<p><a id="VUID-vkCmdDrawIndexedIndirectCountAMD-None-00562"></a>
For each set <em>n</em> that is statically used by the <code>VkPipeline</code> bound
to <code>VK_PIPELINE_BIND_POINT_GRAPHICS</code>, a descriptor set <strong class="purple">must</strong> have
been bound to <em>n</em> at <code>VK_PIPELINE_BIND_POINT_GRAPHICS</code>, with a
<code>VkPipelineLayout</code> that is compatible for set <em>n</em>, with the
<code>VkPipelineLayout</code> used to create the current <code>VkPipeline</code>, as
described in <a href="vkspec.html#descriptorsets-compatibility" class="bare">html/vkspec.html#descriptorsets-compatibility</a></p>
</li>
<li>
<p><a id="VUID-vkCmdDrawIndexedIndirectCountAMD-None-00563"></a>
For each push constant that is statically used by the <code>VkPipeline</code>
bound to <code>VK_PIPELINE_BIND_POINT_GRAPHICS</code>, a push constant value
<strong class="purple">must</strong> have been set for <code>VK_PIPELINE_BIND_POINT_GRAPHICS</code>, with a
<code>VkPipelineLayout</code> that is compatible for push constants, with the
<code>VkPipelineLayout</code> used to create the current <code>VkPipeline</code>, as
described in <a href="vkspec.html#descriptorsets-compatibility" class="bare">html/vkspec.html#descriptorsets-compatibility</a></p>
</li>
<li>
<p><a id="VUID-vkCmdDrawIndexedIndirectCountAMD-None-00564"></a>
Descriptors in each bound descriptor set, specified via
<code>vkCmdBindDescriptorSets</code>, <strong class="purple">must</strong> be valid if they are statically
used by the bound <code>VkPipeline</code> object, specified via
<code>vkCmdBindPipeline</code></p>
</li>
<li>
<p><a id="VUID-vkCmdDrawIndexedIndirectCountAMD-None-00565"></a>
All vertex input bindings accessed via vertex input variables declared
in the vertex shader entry point&#8217;s interface <strong class="purple">must</strong> have valid buffers
bound</p>
</li>
<li>
<p><a id="VUID-vkCmdDrawIndexedIndirectCountAMD-None-00566"></a>
A valid graphics pipeline <strong class="purple">must</strong> be bound to the current command buffer
with <code>VK_PIPELINE_BIND_POINT_GRAPHICS</code></p>
</li>
<li>
<p><a id="VUID-vkCmdDrawIndexedIndirectCountAMD-None-00567"></a>
If the <code>VkPipeline</code> object bound to
<code>VK_PIPELINE_BIND_POINT_GRAPHICS</code> requires any dynamic state, that
state <strong class="purple">must</strong> have been set on the current command buffer</p>
</li>
<li>
<p><a id="VUID-vkCmdDrawIndexedIndirectCountAMD-countBuffer-00568"></a>
If count stored in <code>countBuffer</code> is equal to <code>1</code>, <span class="eq">(<code>offset</code>
+  <code>sizeof</code>(<code>VkDrawIndexedIndirectCommand</code>))</span> <strong class="purple">must</strong> be less
than or equal to the size of <code>buffer</code></p>
</li>
<li>
<p><a id="VUID-vkCmdDrawIndexedIndirectCountAMD-countBuffer-00569"></a>
If count stored in <code>countBuffer</code> is greater than <code>1</code>,
<span class="eq">(<code>stride</code> × (<code>drawCount</code> - 1) +  <code>offset</code>
+  <code>sizeof</code>(<code>VkDrawIndexedIndirectCommand</code>))</span> <strong class="purple">must</strong> be less
than or equal to the size of <code>buffer</code></p>
</li>
<li>
<p><a id="VUID-vkCmdDrawIndexedIndirectCountAMD-drawCount-00570"></a>
<code>drawCount</code> <strong class="purple">must</strong> be less than or equal to
<code>VkPhysicalDeviceLimits</code>::<code>maxDrawIndirectCount</code></p>
</li>
<li>
<p><a id="VUID-vkCmdDrawIndexedIndirectCountAMD-None-00571"></a>
Every input attachment used by the current subpass <strong class="purple">must</strong> be bound to the
pipeline via a descriptor set</p>
</li>
<li>
<p><a id="VUID-vkCmdDrawIndexedIndirectCountAMD-None-00572"></a>
If any <code>VkSampler</code> object that is accessed from a shader by the
<code>VkPipeline</code> bound to <code>VK_PIPELINE_BIND_POINT_GRAPHICS</code> uses
unnormalized coordinates, it <strong class="purple">must</strong> not be used to sample from any
<code>VkImage</code> with a <code>VkImageView</code> of the type
<code>VK_IMAGE_VIEW_TYPE_3D</code>, <code>VK_IMAGE_VIEW_TYPE_CUBE</code>,
<code>VK_IMAGE_VIEW_TYPE_1D_ARRAY</code>, <code>VK_IMAGE_VIEW_TYPE_2D_ARRAY</code> or
<code>VK_IMAGE_VIEW_TYPE_CUBE_ARRAY</code>, in any shader stage</p>
</li>
<li>
<p><a id="VUID-vkCmdDrawIndexedIndirectCountAMD-None-00573"></a>
If any <code>VkSampler</code> object that is accessed from a shader by the
<code>VkPipeline</code> bound to <code>VK_PIPELINE_BIND_POINT_GRAPHICS</code> uses
unnormalized coordinates, it <strong class="purple">must</strong> not be used with any of the SPIR-V
<code>OpImageSample*</code> or <code>OpImageSparseSample*</code> instructions with
<code>ImplicitLod</code>, <code>Dref</code> or <code>Proj</code> in their name, in any shader
stage</p>
</li>
<li>
<p><a id="VUID-vkCmdDrawIndexedIndirectCountAMD-None-00574"></a>
If any <code>VkSampler</code> object that is accessed from a shader by the
<code>VkPipeline</code> bound to <code>VK_PIPELINE_BIND_POINT_GRAPHICS</code> uses
unnormalized coordinates, it <strong class="purple">must</strong> not be used with any of the SPIR-V
<code>OpImageSample*</code> or <code>OpImageSparseSample*</code> instructions that includes a
LOD bias or any offset values, in any shader stage</p>
</li>
<li>
<p><a id="VUID-vkCmdDrawIndexedIndirectCountAMD-None-00575"></a>
If the <a href="vkspec.html#features-robustBufferAccess">robust buffer access</a> feature is
not enabled, and any shader stage in the <code>VkPipeline</code> object bound
to <code>VK_PIPELINE_BIND_POINT_GRAPHICS</code> accesses a uniform buffer, it
<strong class="purple">must</strong> not access values outside of the range of that buffer specified in
the bound descriptor set</p>
</li>
<li>
<p><a id="VUID-vkCmdDrawIndexedIndirectCountAMD-None-00576"></a>
If the <a href="vkspec.html#features-robustBufferAccess">robust buffer access</a> feature is
not enabled, and any shader stage in the <code>VkPipeline</code> object bound
to <code>VK_PIPELINE_BIND_POINT_GRAPHICS</code> accesses a storage buffer, it
<strong class="purple">must</strong> not access values outside of the range of that buffer specified in
the bound descriptor set</p>
</li>
<li>
<p><a id="VUID-vkCmdDrawIndexedIndirectCountAMD-None-02022"></a>
If a <code>VkImageView</code> is sampled with <code>VK_FILTER_LINEAR</code> as a
result of this command, then the image view&#8217;s
<a href="vkspec.html#resources-image-view-format-features">format features</a> <strong class="purple">must</strong> contain
<code>VK_FORMAT_FEATURE_SAMPLED_IMAGE_FILTER_LINEAR_BIT</code>.</p>
</li>
<li>
<p><a id="VUID-vkCmdDrawIndexedIndirectCountAMD-None-01504"></a>
Image subresources used as attachments in the current render pass <strong class="purple">must</strong>
not be accessed in any way other than as an attachment by this command.</p>
</li>
<li>
<p><a id="VUID-vkCmdDrawIndexedIndirectCountAMD-maxMultiviewInstanceIndex-00578"></a>
If the draw is recorded in a render pass instance with multiview
enabled, the maximum instance index <strong class="purple">must</strong> be less than or equal to
<a href="#VkPhysicalDeviceMultiviewProperties">VkPhysicalDeviceMultiviewProperties</a>::<code>maxMultiviewInstanceIndex</code>.</p>
</li>
<li>
<p><a id="VUID-vkCmdDrawIndexedIndirectCountAMD-commandBuffer-02645"></a>
<code>commandBuffer</code> <strong class="purple">must</strong> not be a protected command buffer</p>
</li>
<li>
<p><a id="VUID-vkCmdDrawIndexedIndirectCountAMD-commandBuffer-01865"></a>
If <code>commandBuffer</code> is an unprotected command buffer, and any
pipeline stage in the <code>VkPipeline</code> object bound to
<code>VK_PIPELINE_BIND_POINT_GRAPHICS</code> reads from or writes to any image
or buffer, that image or buffer <strong class="purple">must</strong> not be a protected image or
protected buffer.</p>
</li>
<li>
<p><a id="VUID-vkCmdDrawIndexedIndirectCountAMD-sampleLocationsEnable-01517"></a>
If the bound graphics pipeline was created with
<a href="#VkPipelineSampleLocationsStateCreateInfoEXT">VkPipelineSampleLocationsStateCreateInfoEXT</a>::<code>sampleLocationsEnable</code>
set to <code>VK_TRUE</code> and the current subpass has a depth/stencil
attachment, then that attachment <strong class="purple">must</strong> have been created with the
<code>VK_IMAGE_CREATE_SAMPLE_LOCATIONS_COMPATIBLE_DEPTH_BIT_EXT</code> bit set</p>
</li>
<li>
<p><a id="VUID-vkCmdDrawIndexedIndirectCountAMD-flags-02049"></a>
Any <a href="#VkImage">VkImage</a> created with a <a href="#VkImageCreateInfo">VkImageCreateInfo</a>::<code>flags</code>
containing <code>VK_IMAGE_CREATE_CORNER_SAMPLED_BIT_NV</code> sampled as a
result of this command <strong class="purple">must</strong> only be sampled using a
<a href="#VkSamplerAddressMode">VkSamplerAddressMode</a> of
<code>VK_SAMPLER_ADDRESS_MODE_CLAMP_TO_EDGE</code>.</p>
</li>
</ul>
</div>
</div>
</div>
<div class="sidebarblock">
<div class="content">
<div class="title">Valid Usage (Implicit)</div>
<div class="ulist">
<ul>
<li>
<p><a id="VUID-vkCmdDrawIndexedIndirectCountAMD-commandBuffer-parameter"></a> <code>commandBuffer</code> <strong class="purple">must</strong> be a valid <code>VkCommandBuffer</code> handle</p>
</li>
<li>
<p><a id="VUID-vkCmdDrawIndexedIndirectCountAMD-buffer-parameter"></a> <code>buffer</code> <strong class="purple">must</strong> be a valid <code>VkBuffer</code> handle</p>
</li>
<li>
<p><a id="VUID-vkCmdDrawIndexedIndirectCountAMD-countBuffer-parameter"></a> <code>countBuffer</code> <strong class="purple">must</strong> be a valid <code>VkBuffer</code> handle</p>
</li>
<li>
<p><a id="VUID-vkCmdDrawIndexedIndirectCountAMD-commandBuffer-recording"></a> <code>commandBuffer</code> <strong class="purple">must</strong> be in the <a href="#commandbuffers-lifecycle">recording state</a></p>
</li>
<li>
<p><a id="VUID-vkCmdDrawIndexedIndirectCountAMD-commandBuffer-cmdpool"></a> The <code>VkCommandPool</code> that <code>commandBuffer</code> was allocated from <strong class="purple">must</strong> support graphics operations</p>
</li>
<li>
<p><a id="VUID-vkCmdDrawIndexedIndirectCountAMD-renderpass"></a> This command <strong class="purple">must</strong> only be called inside of a render pass instance</p>
</li>
<li>
<p><a id="VUID-vkCmdDrawIndexedIndirectCountAMD-commonparent"></a> Each of <code>buffer</code>, <code>commandBuffer</code>, and <code>countBuffer</code> <strong class="purple">must</strong> have been created, allocated, or retrieved from the same <code>VkDevice</code></p>
</li>
</ul>
</div>
</div>
</div>
<div class="sidebarblock">
<div class="content">
<div class="title">Host Synchronization</div>
<div class="ulist">
<ul>
<li>
<p>Host access to <code>commandBuffer</code> <strong class="purple">must</strong> be externally synchronized</p>
</li>
<li>
<p>Host access to the <code>VkCommandPool</code> that <code>commandBuffer</code> was allocated from <strong class="purple">must</strong> be externally synchronized</p>
</li>
</ul>
</div>
</div>
</div>
<div class="sidebarblock">
<div class="content">
<div class="title">Command Properties</div>
<table class="tableblock frame-all grid-all stretch">
<colgroup>
<col style="width: 25%;">
<col style="width: 25%;">
<col style="width: 25%;">
<col style="width: 25%;">
</colgroup>
<thead>
<tr>
<th class="tableblock halign-left valign-top"><a href="#VkCommandBufferLevel">Command Buffer Levels</a></th>
<th class="tableblock halign-left valign-top"><a href="#vkCmdBeginRenderPass">Render Pass Scope</a></th>
<th class="tableblock halign-left valign-top"><a href="#VkQueueFlagBits">Supported Queue Types</a></th>
<th class="tableblock halign-left valign-top"><a href="#synchronization-pipeline-stages-types">Pipeline Type</a></th>
</tr>
</thead>
<tbody>
<tr>
<td class="tableblock halign-left valign-top"><p class="tableblock">Primary<br>
Secondary</p></td>
<td class="tableblock halign-left valign-top"><p class="tableblock">Inside</p></td>
<td class="tableblock halign-left valign-top"><p class="tableblock">Graphics</p></td>
<td class="tableblock halign-left valign-top"><p class="tableblock">Graphics</p></td>
</tr>
</tbody>
</table>
</div>
</div>
</div>
<div class="sect3">
<h4 id="_see_also_47">See Also</h4>
<div class="paragraph">
<p><a href="#VkBuffer">VkBuffer</a>, <a href="#VkCommandBuffer">VkCommandBuffer</a>, <code>VkDeviceSize</code></p>
</div>
</div>
<div class="sect3">
<h4 id="_document_notes_47">Document Notes</h4>
<div class="paragraph">
<p>For more information, see the Vulkan Specification at URL</p>
</div>
<div class="paragraph">
<p><a href="https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#vkCmdDrawIndexedIndirectCountAMD" class="bare">https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#vkCmdDrawIndexedIndirectCountAMD</a></p>
</div>
<div class="paragraph">
<p>This page is extracted from the Vulkan Specification.
Fixes and changes should be made to the Specification, not directly.</p>
</div>
<div style="page-break-after: always;"></div>
</div>
</div>
<div class="sect2">
<h3 id="_vkcmddrawindexedindirectcountkhr3">vkCmdDrawIndexedIndirectCountKHR(3)</h3>
<div class="sect3">
<h4 id="_name_48">Name</h4>
<div class="paragraph">
<p>vkCmdDrawIndexedIndirectCountKHR - Perform an indexed indirect draw with the draw count sourced from a buffer</p>
</div>
</div>
<div class="sect3">
<h4 id="_c_specification_48">C Specification</h4>
<div class="paragraph">
<p>To record an indexed draw call with a draw call count sourced from a buffer,
call:</p>
</div>
<div id="vkCmdDrawIndexedIndirectCountKHR" class="listingblock">
<div class="content">
<pre class="highlight"><code class="language-c++" data-lang="c++">void vkCmdDrawIndexedIndirectCountKHR(
    VkCommandBuffer                             commandBuffer,
    VkBuffer                                    buffer,
    VkDeviceSize                                offset,
    VkBuffer                                    countBuffer,
    VkDeviceSize                                countBufferOffset,
    uint32_t                                    maxDrawCount,
    uint32_t                                    stride);</code></pre>
</div>
</div>
</div>
<div class="sect3">
<h4 id="_parameters_48">Parameters</h4>
<div class="ulist">
<ul>
<li>
<p><code>commandBuffer</code> is the command buffer into which the command is
recorded.</p>
</li>
<li>
<p><code>buffer</code> is the buffer containing draw parameters.</p>
</li>
<li>
<p><code>offset</code> is the byte offset into <code>buffer</code> where parameters
begin.</p>
</li>
<li>
<p><code>countBuffer</code> is the buffer containing the draw count.</p>
</li>
<li>
<p><code>countBufferOffset</code> is the byte offset into <code>countBuffer</code> where
the draw count begins.</p>
</li>
<li>
<p><code>maxDrawCount</code> specifies the maximum number of draws that will be
executed.
The actual number of executed draw calls is the minimum of the count
specified in <code>countBuffer</code> and <code>maxDrawCount</code>.</p>
</li>
<li>
<p><code>stride</code> is the byte stride between successive sets of draw
parameters.</p>
</li>
</ul>
</div>
</div>
<div class="sect3">
<h4 id="_description_48">Description</h4>
<div class="paragraph">
<p><code>vkCmdDrawIndexedIndirectCountKHR</code> behaves similarly to
<a href="#vkCmdDrawIndexedIndirect">vkCmdDrawIndexedIndirect</a> except that the draw count is read by the
device from a buffer during execution.
The command will read an unsigned 32-bit integer from <code>countBuffer</code>
located at <code>countBufferOffset</code> and use this as the draw count.</p>
</div>
<div class="sidebarblock">
<div class="content">
<div class="title">Valid Usage</div>
<div class="ulist">
<ul>
<li>
<p><a id="VUID-vkCmdDrawIndexedIndirectCountKHR-buffer-03136"></a>
If <code>buffer</code> is non-sparse then it <strong class="purple">must</strong> be bound completely and
contiguously to a single <code>VkDeviceMemory</code> object</p>
</li>
<li>
<p><a id="VUID-vkCmdDrawIndexedIndirectCountKHR-buffer-03137"></a>
<code>buffer</code> <strong class="purple">must</strong> have been created with the
<code>VK_BUFFER_USAGE_INDIRECT_BUFFER_BIT</code> bit set</p>
</li>
<li>
<p><a id="VUID-vkCmdDrawIndexedIndirectCountKHR-countBuffer-03138"></a>
If <code>countBuffer</code> is non-sparse then it <strong class="purple">must</strong> be bound completely and
contiguously to a single <code>VkDeviceMemory</code> object</p>
</li>
<li>
<p><a id="VUID-vkCmdDrawIndexedIndirectCountKHR-countBuffer-03139"></a>
<code>countBuffer</code> <strong class="purple">must</strong> have been created with the
<code>VK_BUFFER_USAGE_INDIRECT_BUFFER_BIT</code> bit set</p>
</li>
<li>
<p><a id="VUID-vkCmdDrawIndexedIndirectCountKHR-offset-03140"></a>
<code>offset</code> <strong class="purple">must</strong> be a multiple of <code>4</code></p>
</li>
<li>
<p><a id="VUID-vkCmdDrawIndexedIndirectCountKHR-countBufferOffset-03141"></a>
<code>countBufferOffset</code> <strong class="purple">must</strong> be a multiple of <code>4</code></p>
</li>
<li>
<p><a id="VUID-vkCmdDrawIndexedIndirectCountKHR-stride-03142"></a>
<code>stride</code> <strong class="purple">must</strong> be a multiple of <code>4</code> and <strong class="purple">must</strong> be greater than or
equal to sizeof(<code>VkDrawIndexedIndirectCommand</code>)</p>
</li>
<li>
<p><a id="VUID-vkCmdDrawIndexedIndirectCountKHR-maxDrawCount-03143"></a>
If <code>maxDrawCount</code> is greater than or equal to <code>1</code>,
<span class="eq">(<code>stride</code> × (<code>maxDrawCount</code> - 1) +  <code>offset</code>
+  sizeof(<code>VkDrawIndexedIndirectCommand</code>))</span> <strong class="purple">must</strong> be less than
or equal to the size of <code>buffer</code></p>
</li>
<li>
<p><a id="VUID-vkCmdDrawIndexedIndirectCountKHR-firstInstance-03144"></a>
If the <a href="vkspec.html#features-drawIndirectFirstInstance">drawIndirectFirstInstance</a>
feature is not enabled, all the <code>firstInstance</code> members of the
<code>VkDrawIndexedIndirectCommand</code> structures accessed by this command
<strong class="purple">must</strong> be <code>0</code></p>
</li>
<li>
<p><a id="VUID-vkCmdDrawIndexedIndirectCountKHR-renderPass-03145"></a>
The current render pass <strong class="purple">must</strong> be <a href="vkspec.html#renderpass-compatibility">compatible</a>
with the <code>renderPass</code> member of the
<code>VkGraphicsPipelineCreateInfo</code> structure specified when creating the
<code>VkPipeline</code> bound to <code>VK_PIPELINE_BIND_POINT_GRAPHICS</code>.</p>
</li>
<li>
<p><a id="VUID-vkCmdDrawIndexedIndirectCountKHR-subpass-03146"></a>
The subpass index of the current render pass <strong class="purple">must</strong> be equal to the
<code>subpass</code> member of the <code>VkGraphicsPipelineCreateInfo</code> structure
specified when creating the <code>VkPipeline</code> bound to
<code>VK_PIPELINE_BIND_POINT_GRAPHICS</code>.</p>
</li>
<li>
<p><a id="VUID-vkCmdDrawIndexedIndirectCountKHR-None-03147"></a>
For each set <em>n</em> that is statically used by the <code>VkPipeline</code> bound
to <code>VK_PIPELINE_BIND_POINT_GRAPHICS</code>, a descriptor set <strong class="purple">must</strong> have
been bound to <em>n</em> at <code>VK_PIPELINE_BIND_POINT_GRAPHICS</code>, with a
<code>VkPipelineLayout</code> that is compatible for set <em>n</em>, with the
<code>VkPipelineLayout</code> used to create the current <code>VkPipeline</code>, as
described in <a href="vkspec.html#descriptorsets-compatibility" class="bare">html/vkspec.html#descriptorsets-compatibility</a></p>
</li>
<li>
<p><a id="VUID-vkCmdDrawIndexedIndirectCountKHR-None-03148"></a>
For each push constant that is statically used by the <code>VkPipeline</code>
bound to <code>VK_PIPELINE_BIND_POINT_GRAPHICS</code>, a push constant value
<strong class="purple">must</strong> have been set for <code>VK_PIPELINE_BIND_POINT_GRAPHICS</code>, with a
<code>VkPipelineLayout</code> that is compatible for push constants, with the
<code>VkPipelineLayout</code> used to create the current <code>VkPipeline</code>, as
described in <a href="vkspec.html#descriptorsets-compatibility" class="bare">html/vkspec.html#descriptorsets-compatibility</a></p>
</li>
<li>
<p><a id="VUID-vkCmdDrawIndexedIndirectCountKHR-None-03149"></a>
Descriptors in each bound descriptor set, specified via
<code>vkCmdBindDescriptorSets</code>, <strong class="purple">must</strong> be valid if they are statically
used by the bound <code>VkPipeline</code> object, specified via
<code>vkCmdBindPipeline</code></p>
</li>
<li>
<p><a id="VUID-vkCmdDrawIndexedIndirectCountKHR-None-03150"></a>
All vertex input bindings accessed via vertex input variables declared
in the vertex shader entry point&#8217;s interface <strong class="purple">must</strong> have valid buffers
bound</p>
</li>
<li>
<p><a id="VUID-vkCmdDrawIndexedIndirectCountKHR-None-03151"></a>
A valid graphics pipeline <strong class="purple">must</strong> be bound to the current command buffer
with <code>VK_PIPELINE_BIND_POINT_GRAPHICS</code></p>
</li>
<li>
<p><a id="VUID-vkCmdDrawIndexedIndirectCountKHR-None-03152"></a>
If the <code>VkPipeline</code> object bound to
<code>VK_PIPELINE_BIND_POINT_GRAPHICS</code> requires any dynamic state, that
state <strong class="purple">must</strong> have been set on the current command buffer</p>
</li>
<li>
<p><a id="VUID-vkCmdDrawIndexedIndirectCountKHR-countBuffer-03153"></a>
If count stored in <code>countBuffer</code> is equal to <code>1</code>, <span class="eq">(<code>offset</code>
+  sizeof(<code>VkDrawIndexedIndirectCommand</code>))</span> <strong class="purple">must</strong> be less than
or equal to the size of <code>buffer</code></p>
</li>
<li>
<p><a id="VUID-vkCmdDrawIndexedIndirectCountKHR-countBuffer-03154"></a>
If count stored in <code>countBuffer</code> is greater than <code>1</code>,
<span class="eq">(<code>stride</code> × (<code>drawCount</code> - 1) +  <code>offset</code>
+  sizeof(<code>VkDrawIndexedIndirectCommand</code>))</span> <strong class="purple">must</strong> be less than
or equal to the size of <code>buffer</code></p>
</li>
<li>
<p><a id="VUID-vkCmdDrawIndexedIndirectCountKHR-drawCount-03155"></a>
<code>drawCount</code> <strong class="purple">must</strong> be less than or equal to
<code>VkPhysicalDeviceLimits</code>::<code>maxDrawIndirectCount</code></p>
</li>
<li>
<p><a id="VUID-vkCmdDrawIndexedIndirectCountKHR-None-03156"></a>
Every input attachment used by the current subpass <strong class="purple">must</strong> be bound to the
pipeline via a descriptor set</p>
</li>
<li>
<p><a id="VUID-vkCmdDrawIndexedIndirectCountKHR-None-03157"></a>
If any <code>VkSampler</code> object that is accessed from a shader by the
<code>VkPipeline</code> bound to <code>VK_PIPELINE_BIND_POINT_GRAPHICS</code> uses
unnormalized coordinates, it <strong class="purple">must</strong> not be used to sample from any
<code>VkImage</code> with a <code>VkImageView</code> of the type
<code>VK_IMAGE_VIEW_TYPE_3D</code>, <code>VK_IMAGE_VIEW_TYPE_CUBE</code>,
<code>VK_IMAGE_VIEW_TYPE_1D_ARRAY</code>, <code>VK_IMAGE_VIEW_TYPE_2D_ARRAY</code> or
<code>VK_IMAGE_VIEW_TYPE_CUBE_ARRAY</code>, in any shader stage</p>
</li>
<li>
<p><a id="VUID-vkCmdDrawIndexedIndirectCountKHR-None-03158"></a>
If any <code>VkSampler</code> object that is accessed from a shader by the
<code>VkPipeline</code> bound to <code>VK_PIPELINE_BIND_POINT_GRAPHICS</code> uses
unnormalized coordinates, it <strong class="purple">must</strong> not be used with any of the SPIR-V
<code>OpImageSample*</code> or <code>OpImageSparseSample*</code> instructions with
<code>ImplicitLod</code>, <code>Dref</code> or <code>Proj</code> in their name, in any shader
stage</p>
</li>
<li>
<p><a id="VUID-vkCmdDrawIndexedIndirectCountKHR-None-03159"></a>
If any <code>VkSampler</code> object that is accessed from a shader by the
<code>VkPipeline</code> bound to <code>VK_PIPELINE_BIND_POINT_GRAPHICS</code> uses
unnormalized coordinates, it <strong class="purple">must</strong> not be used with any of the SPIR-V
<code>OpImageSample*</code> or <code>OpImageSparseSample*</code> instructions that includes a
LOD bias or any offset values, in any shader stage</p>
</li>
<li>
<p><a id="VUID-vkCmdDrawIndexedIndirectCountKHR-None-03160"></a>
If the <a href="vkspec.html#features-robustBufferAccess">robust buffer access</a> feature is
not enabled, and any shader stage in the <code>VkPipeline</code> object bound
to <code>VK_PIPELINE_BIND_POINT_GRAPHICS</code> accesses a uniform buffer, it
<strong class="purple">must</strong> not access values outside of the range of that buffer specified in
the bound descriptor set</p>
</li>
<li>
<p><a id="VUID-vkCmdDrawIndexedIndirectCountKHR-None-03161"></a>
If the <a href="vkspec.html#features-robustBufferAccess">robust buffer access</a> feature is
not enabled, and any shader stage in the <code>VkPipeline</code> object bound
to <code>VK_PIPELINE_BIND_POINT_GRAPHICS</code> accesses a storage buffer, it
<strong class="purple">must</strong> not access values outside of the range of that buffer specified in
the bound descriptor set</p>
</li>
<li>
<p><a id="VUID-vkCmdDrawIndexedIndirectCountKHR-None-02020"></a>
If a <code>VkImageView</code> is sampled with <code>VK_FILTER_LINEAR</code> as a
result of this command, then the image view&#8217;s
<a href="vkspec.html#resources-image-view-format-features">format features</a> <strong class="purple">must</strong> contain
<code>VK_FORMAT_FEATURE_SAMPLED_IMAGE_FILTER_LINEAR_BIT</code>.</p>
</li>
<li>
<p><a id="VUID-vkCmdDrawIndexedIndirectCountKHR-None-03163"></a>
Image subresources used as attachments in the current render pass <strong class="purple">must</strong>
not be accessed in any way other than as an attachment by this command.</p>
</li>
<li>
<p><a id="VUID-vkCmdDrawIndexedIndirectCountKHR-None-02021"></a>
If a <code>VkImageView</code> is sampled with <code>VK_FILTER_CUBIC_EXT</code> as a
result of this command, then the image view&#8217;s
<a href="vkspec.html#resources-image-view-format-features">format features</a> <strong class="purple">must</strong> contain
<code>VK_FORMAT_FEATURE_SAMPLED_IMAGE_FILTER_CUBIC_BIT_EXT</code></p>
</li>
<li>
<p><a id="VUID-vkCmdDrawIndexedIndirectCountKHR-filterCubic-02623"></a>
Any <a href="#VkImageView">VkImageView</a> being sampled with <code>VK_FILTER_CUBIC_EXT</code> as a
result of this command <strong class="purple">must</strong> have a <a href="#VkImageViewType">VkImageViewType</a> and format
that supports cubic filtering, as specified by
<code>VkFilterCubicImageViewImageFormatPropertiesEXT</code>::<code>filterCubic</code>
returned by <code>vkGetPhysicalDeviceImageFormatProperties2</code></p>
</li>
<li>
<p><a id="VUID-vkCmdDrawIndexedIndirectCountKHR-filterCubicMinmax-02624"></a>
Any <a href="#VkImageView">VkImageView</a> being sampled with <code>VK_FILTER_CUBIC_EXT</code> with
a reduction mode of either <code>VK_SAMPLER_REDUCTION_MODE_MIN_EXT</code> or
<code>VK_SAMPLER_REDUCTION_MODE_MAX_EXT</code> as a result of this command
<strong class="purple">must</strong> have a <a href="#VkImageViewType">VkImageViewType</a> and format that supports cubic
filtering together with minmax filtering, as specified by
<code>VkFilterCubicImageViewImageFormatPropertiesEXT</code>::<code>filterCubicMinmax</code>
returned by <code>vkGetPhysicalDeviceImageFormatProperties2</code></p>
</li>
<li>
<p><a id="VUID-vkCmdDrawIndexedIndirectCountKHR-maxMultiviewInstanceIndex-03164"></a>
If the draw is recorded in a render pass instance with multiview
enabled, the maximum instance index <strong class="purple">must</strong> be less than or equal to
<a href="#VkPhysicalDeviceMultiviewProperties">VkPhysicalDeviceMultiviewProperties</a>::<code>maxMultiviewInstanceIndex</code>.</p>
</li>
<li>
<p><a id="VUID-vkCmdDrawIndexedIndirectCountKHR-commandBuffer-02644"></a>
<code>commandBuffer</code> <strong class="purple">must</strong> not be a protected command buffer</p>
</li>
<li>
<p><a id="VUID-vkCmdDrawIndexedIndirectCountKHR-commandBuffer-03165"></a>
If <code>commandBuffer</code> is an unprotected command buffer, and any
pipeline stage in the <code>VkPipeline</code> object bound to
<code>VK_PIPELINE_BIND_POINT_GRAPHICS</code> reads from or writes to any image
or buffer, that image or buffer <strong class="purple">must</strong> not be a protected image or
protected buffer.</p>
</li>
<li>
<p><a id="VUID-vkCmdDrawIndexedIndirectCountKHR-sampleLocationsEnable-03174"></a>
If the bound graphics pipeline was created with
<a href="#VkPipelineSampleLocationsStateCreateInfoEXT">VkPipelineSampleLocationsStateCreateInfoEXT</a>::<code>sampleLocationsEnable</code>
set to <code>VK_TRUE</code> and the current subpass has a depth/stencil
attachment, then that attachment <strong class="purple">must</strong> have been created with the
<code>VK_IMAGE_CREATE_SAMPLE_LOCATIONS_COMPATIBLE_DEPTH_BIT_EXT</code> bit set</p>
</li>
<li>
<p><a id="VUID-vkCmdDrawIndexedIndirectCountKHR-flags-02048"></a>
Any <a href="#VkImage">VkImage</a> created with a <a href="#VkImageCreateInfo">VkImageCreateInfo</a>::<code>flags</code>
containing <code>VK_IMAGE_CREATE_CORNER_SAMPLED_BIT_NV</code> sampled as a
result of this command <strong class="purple">must</strong> only be sampled using a
<a href="#VkSamplerAddressMode">VkSamplerAddressMode</a> of
<code>VK_SAMPLER_ADDRESS_MODE_CLAMP_TO_EDGE</code>.</p>
</li>
</ul>
</div>
</div>
</div>
<div class="sidebarblock">
<div class="content">
<div class="title">Valid Usage (Implicit)</div>
<div class="ulist">
<ul>
<li>
<p><a id="VUID-vkCmdDrawIndexedIndirectCountKHR-commandBuffer-parameter"></a> <code>commandBuffer</code> <strong class="purple">must</strong> be a valid <code>VkCommandBuffer</code> handle</p>
</li>
<li>
<p><a id="VUID-vkCmdDrawIndexedIndirectCountKHR-buffer-parameter"></a> <code>buffer</code> <strong class="purple">must</strong> be a valid <code>VkBuffer</code> handle</p>
</li>
<li>
<p><a id="VUID-vkCmdDrawIndexedIndirectCountKHR-countBuffer-parameter"></a> <code>countBuffer</code> <strong class="purple">must</strong> be a valid <code>VkBuffer</code> handle</p>
</li>
<li>
<p><a id="VUID-vkCmdDrawIndexedIndirectCountKHR-commandBuffer-recording"></a> <code>commandBuffer</code> <strong class="purple">must</strong> be in the <a href="#commandbuffers-lifecycle">recording state</a></p>
</li>
<li>
<p><a id="VUID-vkCmdDrawIndexedIndirectCountKHR-commandBuffer-cmdpool"></a> The <code>VkCommandPool</code> that <code>commandBuffer</code> was allocated from <strong class="purple">must</strong> support graphics operations</p>
</li>
<li>
<p><a id="VUID-vkCmdDrawIndexedIndirectCountKHR-renderpass"></a> This command <strong class="purple">must</strong> only be called inside of a render pass instance</p>
</li>
<li>
<p><a id="VUID-vkCmdDrawIndexedIndirectCountKHR-commonparent"></a> Each of <code>buffer</code>, <code>commandBuffer</code>, and <code>countBuffer</code> <strong class="purple">must</strong> have been created, allocated, or retrieved from the same <code>VkDevice</code></p>
</li>
</ul>
</div>
</div>
</div>
<div class="sidebarblock">
<div class="content">
<div class="title">Host Synchronization</div>
<div class="ulist">
<ul>
<li>
<p>Host access to <code>commandBuffer</code> <strong class="purple">must</strong> be externally synchronized</p>
</li>
<li>
<p>Host access to the <code>VkCommandPool</code> that <code>commandBuffer</code> was allocated from <strong class="purple">must</strong> be externally synchronized</p>
</li>
</ul>
</div>
</div>
</div>
<div class="sidebarblock">
<div class="content">
<div class="title">Command Properties</div>
<table class="tableblock frame-all grid-all stretch">
<colgroup>
<col style="width: 25%;">
<col style="width: 25%;">
<col style="width: 25%;">
<col style="width: 25%;">
</colgroup>
<thead>
<tr>
<th class="tableblock halign-left valign-top"><a href="#VkCommandBufferLevel">Command Buffer Levels</a></th>
<th class="tableblock halign-left valign-top"><a href="#vkCmdBeginRenderPass">Render Pass Scope</a></th>
<th class="tableblock halign-left valign-top"><a href="#VkQueueFlagBits">Supported Queue Types</a></th>
<th class="tableblock halign-left valign-top"><a href="#synchronization-pipeline-stages-types">Pipeline Type</a></th>
</tr>
</thead>
<tbody>
<tr>
<td class="tableblock halign-left valign-top"><p class="tableblock">Primary<br>
Secondary</p></td>
<td class="tableblock halign-left valign-top"><p class="tableblock">Inside</p></td>
<td class="tableblock halign-left valign-top"><p class="tableblock">Graphics</p></td>
<td class="tableblock halign-left valign-top"><p class="tableblock">Graphics</p></td>
</tr>
</tbody>
</table>
</div>
</div>
</div>
<div class="sect3">
<h4 id="_see_also_48">See Also</h4>
<div class="paragraph">
<p><a href="#VkBuffer">VkBuffer</a>, <a href="#VkCommandBuffer">VkCommandBuffer</a>, <code>VkDeviceSize</code></p>
</div>
</div>
<div class="sect3">
<h4 id="_document_notes_48">Document Notes</h4>
<div class="paragraph">
<p>For more information, see the Vulkan Specification at URL</p>
</div>
<div class="paragraph">
<p><a href="https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#vkCmdDrawIndexedIndirectCountKHR" class="bare">https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#vkCmdDrawIndexedIndirectCountKHR</a></p>
</div>
<div class="paragraph">
<p>This page is extracted from the Vulkan Specification.
Fixes and changes should be made to the Specification, not directly.</p>
</div>
<div style="page-break-after: always;"></div>
</div>
</div>
<div class="sect2">
<h3 id="_vkcmddrawindirect3">vkCmdDrawIndirect(3)</h3>
<div class="sect3">
<h4 id="_name_49">Name</h4>
<div class="paragraph">
<p>vkCmdDrawIndirect - Issue an indirect draw into a command buffer</p>
</div>
</div>
<div class="sect3">
<h4 id="_c_specification_49">C Specification</h4>
<div class="paragraph">
<p>To record a non-indexed indirect draw, call:</p>
</div>
<div id="vkCmdDrawIndirect" class="listingblock">
<div class="content">
<pre class="highlight"><code class="language-c++" data-lang="c++">void vkCmdDrawIndirect(
    VkCommandBuffer                             commandBuffer,
    VkBuffer                                    buffer,
    VkDeviceSize                                offset,
    uint32_t                                    drawCount,
    uint32_t                                    stride);</code></pre>
</div>
</div>
</div>
<div class="sect3">
<h4 id="_parameters_49">Parameters</h4>
<div class="ulist">
<ul>
<li>
<p><code>commandBuffer</code> is the command buffer into which the command is
recorded.</p>
</li>
<li>
<p><code>buffer</code> is the buffer containing draw parameters.</p>
</li>
<li>
<p><code>offset</code> is the byte offset into <code>buffer</code> where parameters
begin.</p>
</li>
<li>
<p><code>drawCount</code> is the number of draws to execute, and <strong class="purple">can</strong> be zero.</p>
</li>
<li>
<p><code>stride</code> is the byte stride between successive sets of draw
parameters.</p>
</li>
</ul>
</div>
</div>
<div class="sect3">
<h4 id="_description_49">Description</h4>
<div class="paragraph">
<p><code>vkCmdDrawIndirect</code> behaves similarly to <a href="#vkCmdDraw">vkCmdDraw</a> except that the
parameters are read by the device from a buffer during execution.
<code>drawCount</code> draws are executed by the command, with parameters taken
from <code>buffer</code> starting at <code>offset</code> and increasing by <code>stride</code>
bytes for each successive draw.
The parameters of each draw are encoded in an array of
<a href="#VkDrawIndirectCommand">VkDrawIndirectCommand</a> structures.
If <code>drawCount</code> is less than or equal to one, <code>stride</code> is ignored.</p>
</div>
<div class="sidebarblock">
<div class="content">
<div class="title">Valid Usage</div>
<div class="ulist">
<ul>
<li>
<p><a id="VUID-vkCmdDrawIndirect-buffer-00474"></a>
If <code>buffer</code> is non-sparse then it <strong class="purple">must</strong> be bound completely and
contiguously to a single <code>VkDeviceMemory</code> object</p>
</li>
<li>
<p><a id="VUID-vkCmdDrawIndirect-buffer-01660"></a>
<code>buffer</code> <strong class="purple">must</strong> have been created with the
<code>VK_BUFFER_USAGE_INDIRECT_BUFFER_BIT</code> bit set</p>
</li>
<li>
<p><a id="VUID-vkCmdDrawIndirect-offset-00475"></a>
<code>offset</code> <strong class="purple">must</strong> be a multiple of <code>4</code></p>
</li>
<li>
<p><a id="VUID-vkCmdDrawIndirect-drawCount-00476"></a>
If <code>drawCount</code> is greater than <code>1</code>, <code>stride</code> <strong class="purple">must</strong> be a multiple
of <code>4</code> and <strong class="purple">must</strong> be greater than or equal to
<code>sizeof</code>(<code>VkDrawIndirectCommand</code>)</p>
</li>
<li>
<p><a id="VUID-vkCmdDrawIndirect-drawCount-00477"></a>
If the <a href="vkspec.html#features-multiDrawIndirect">multi-draw indirect</a> feature is not
enabled, <code>drawCount</code> <strong class="purple">must</strong> be <code>0</code> or <code>1</code></p>
</li>
<li>
<p><a id="VUID-vkCmdDrawIndirect-firstInstance-00478"></a>
If the <a href="vkspec.html#features-drawIndirectFirstInstance">drawIndirectFirstInstance</a>
feature is not enabled, all the <code>firstInstance</code> members of the
<code>VkDrawIndirectCommand</code> structures accessed by this command <strong class="purple">must</strong> be
<code>0</code></p>
</li>
<li>
<p><a id="VUID-vkCmdDrawIndirect-renderPass-00479"></a>
The current render pass <strong class="purple">must</strong> be <a href="vkspec.html#renderpass-compatibility">compatible</a>
with the <code>renderPass</code> member of the
<code>VkGraphicsPipelineCreateInfo</code> structure specified when creating the
<code>VkPipeline</code> bound to <code>VK_PIPELINE_BIND_POINT_GRAPHICS</code>.</p>
</li>
<li>
<p><a id="VUID-vkCmdDrawIndirect-subpass-00480"></a>
The subpass index of the current render pass <strong class="purple">must</strong> be equal to the
<code>subpass</code> member of the <code>VkGraphicsPipelineCreateInfo</code> structure
specified when creating the <code>VkPipeline</code> bound to
<code>VK_PIPELINE_BIND_POINT_GRAPHICS</code>.</p>
</li>
<li>
<p><a id="VUID-vkCmdDrawIndirect-None-00481"></a>
For each set <em>n</em> that is statically used by the <code>VkPipeline</code> bound
to <code>VK_PIPELINE_BIND_POINT_GRAPHICS</code>, a descriptor set <strong class="purple">must</strong> have
been bound to <em>n</em> at <code>VK_PIPELINE_BIND_POINT_GRAPHICS</code>, with a
<code>VkPipelineLayout</code> that is compatible for set <em>n</em>, with the
<code>VkPipelineLayout</code> used to create the current <code>VkPipeline</code>, as
described in <a href="vkspec.html#descriptorsets-compatibility" class="bare">html/vkspec.html#descriptorsets-compatibility</a></p>
</li>
<li>
<p><a id="VUID-vkCmdDrawIndirect-None-00482"></a>
For each push constant that is statically used by the <code>VkPipeline</code>
bound to <code>VK_PIPELINE_BIND_POINT_GRAPHICS</code>, a push constant value
<strong class="purple">must</strong> have been set for <code>VK_PIPELINE_BIND_POINT_GRAPHICS</code>, with a
<code>VkPipelineLayout</code> that is compatible for push constants, with the
<code>VkPipelineLayout</code> used to create the current <code>VkPipeline</code>, as
described in <a href="vkspec.html#descriptorsets-compatibility" class="bare">html/vkspec.html#descriptorsets-compatibility</a></p>
</li>
<li>
<p><a id="VUID-vkCmdDrawIndirect-None-00483"></a>
Descriptors in each bound descriptor set, specified via
<code>vkCmdBindDescriptorSets</code>, <strong class="purple">must</strong> be valid if they are statically
used by the bound <code>VkPipeline</code> object, specified via
<code>vkCmdBindPipeline</code></p>
</li>
<li>
<p><a id="VUID-vkCmdDrawIndirect-None-00484"></a>
All vertex input bindings accessed via vertex input variables declared
in the vertex shader entry point&#8217;s interface <strong class="purple">must</strong> have valid buffers
bound</p>
</li>
<li>
<p><a id="VUID-vkCmdDrawIndirect-None-00485"></a>
A valid graphics pipeline <strong class="purple">must</strong> be bound to the current command buffer
with <code>VK_PIPELINE_BIND_POINT_GRAPHICS</code></p>
</li>
<li>
<p><a id="VUID-vkCmdDrawIndirect-None-00486"></a>
If the <code>VkPipeline</code> object bound to
<code>VK_PIPELINE_BIND_POINT_GRAPHICS</code> requires any dynamic state, that
state <strong class="purple">must</strong> have been set on the current command buffer</p>
</li>
<li>
<p><a id="VUID-vkCmdDrawIndirect-drawCount-00487"></a>
If <code>drawCount</code> is equal to <code>1</code>, <span class="eq">(<code>offset</code> + 
<code>sizeof</code>(<a href="#VkDrawIndirectCommand">VkDrawIndirectCommand</a>))</span> <strong class="purple">must</strong> be less than or equal
to the size of <code>buffer</code></p>
</li>
<li>
<p><a id="VUID-vkCmdDrawIndirect-drawCount-00488"></a>
If <code>drawCount</code> is greater than <code>1</code>, <span class="eq">(<code>stride</code> ×
(<code>drawCount</code> - 1) +  <code>offset</code> + 
<code>sizeof</code>(<a href="#VkDrawIndirectCommand">VkDrawIndirectCommand</a>))</span> <strong class="purple">must</strong> be less than or equal
to the size of <code>buffer</code></p>
</li>
<li>
<p><a id="VUID-vkCmdDrawIndirect-drawCount-00489"></a>
<code>drawCount</code> <strong class="purple">must</strong> be less than or equal to
<code>VkPhysicalDeviceLimits</code>::<code>maxDrawIndirectCount</code></p>
</li>
<li>
<p><a id="VUID-vkCmdDrawIndirect-None-00490"></a>
Every input attachment used by the current subpass <strong class="purple">must</strong> be bound to the
pipeline via a descriptor set</p>
</li>
<li>
<p><a id="VUID-vkCmdDrawIndirect-None-00491"></a>
If any <code>VkSampler</code> object that is accessed from a shader by the
<code>VkPipeline</code> bound to <code>VK_PIPELINE_BIND_POINT_GRAPHICS</code> uses
unnormalized coordinates, it <strong class="purple">must</strong> not be used to sample from any
<code>VkImage</code> with a <code>VkImageView</code> of the type
<code>VK_IMAGE_VIEW_TYPE_3D</code>, <code>VK_IMAGE_VIEW_TYPE_CUBE</code>,
<code>VK_IMAGE_VIEW_TYPE_1D_ARRAY</code>, <code>VK_IMAGE_VIEW_TYPE_2D_ARRAY</code> or
<code>VK_IMAGE_VIEW_TYPE_CUBE_ARRAY</code>, in any shader stage</p>
</li>
<li>
<p><a id="VUID-vkCmdDrawIndirect-None-00492"></a>
If any <code>VkSampler</code> object that is accessed from a shader by the
<code>VkPipeline</code> bound to <code>VK_PIPELINE_BIND_POINT_GRAPHICS</code> uses
unnormalized coordinates, it <strong class="purple">must</strong> not be used with any of the SPIR-V
<code>OpImageSample*</code> or <code>OpImageSparseSample*</code> instructions with
<code>ImplicitLod</code>, <code>Dref</code> or <code>Proj</code> in their name, in any shader
stage</p>
</li>
<li>
<p><a id="VUID-vkCmdDrawIndirect-None-00493"></a>
If any <code>VkSampler</code> object that is accessed from a shader by the
<code>VkPipeline</code> bound to <code>VK_PIPELINE_BIND_POINT_GRAPHICS</code> uses
unnormalized coordinates, it <strong class="purple">must</strong> not be used with any of the SPIR-V
<code>OpImageSample*</code> or <code>OpImageSparseSample*</code> instructions that includes a
LOD bias or any offset values, in any shader stage</p>
</li>
<li>
<p><a id="VUID-vkCmdDrawIndirect-None-00494"></a>
If the <a href="vkspec.html#features-robustBufferAccess">robust buffer access</a> feature is
not enabled, and any shader stage in the <code>VkPipeline</code> object bound
to <code>VK_PIPELINE_BIND_POINT_GRAPHICS</code> accesses a uniform buffer, it
<strong class="purple">must</strong> not access values outside of the range of that buffer specified in
the bound descriptor set</p>
</li>
<li>
<p><a id="VUID-vkCmdDrawIndirect-None-00495"></a>
If the <a href="vkspec.html#features-robustBufferAccess">robust buffer access</a> feature is
not enabled, and any shader stage in the <code>VkPipeline</code> object bound
to <code>VK_PIPELINE_BIND_POINT_GRAPHICS</code> accesses a storage buffer, it
<strong class="purple">must</strong> not access values outside of the range of that buffer specified in
the bound descriptor set</p>
</li>
<li>
<p><a id="VUID-vkCmdDrawIndirect-None-02013"></a>
If a <code>VkImageView</code> is sampled with <code>VK_FILTER_LINEAR</code> as a
result of this command, then the image view&#8217;s
<a href="vkspec.html#resources-image-view-format-features">format features</a> <strong class="purple">must</strong> contain
<code>VK_FORMAT_FEATURE_SAMPLED_IMAGE_FILTER_LINEAR_BIT</code>.</p>
</li>
<li>
<p><a id="VUID-vkCmdDrawIndirect-None-01501"></a>
Image subresources used as attachments in the current render pass <strong class="purple">must</strong>
not be accessed in any way other than as an attachment by this command.</p>
</li>
<li>
<p><a id="VUID-vkCmdDrawIndirect-None-02014"></a>
If a <code>VkImageView</code> is sampled with <code>VK_FILTER_CUBIC_EXT</code> as a
result of this command, then the image view&#8217;s
<a href="vkspec.html#resources-image-view-format-features">format features</a> <strong class="purple">must</strong> contain
<code>VK_FORMAT_FEATURE_SAMPLED_IMAGE_FILTER_CUBIC_BIT_EXT</code></p>
</li>
<li>
<p><a id="VUID-vkCmdDrawIndirect-filterCubic-02617"></a>
Any <a href="#VkImageView">VkImageView</a> being sampled with <code>VK_FILTER_CUBIC_EXT</code> as a
result of this command <strong class="purple">must</strong> have a <a href="#VkImageViewType">VkImageViewType</a> and format
that supports cubic filtering, as specified by
<code>VkFilterCubicImageViewImageFormatPropertiesEXT</code>::<code>filterCubic</code>
returned by <code>vkGetPhysicalDeviceImageFormatProperties2</code></p>
</li>
<li>
<p><a id="VUID-vkCmdDrawIndirect-filterCubicMinmax-02618"></a>
Any <a href="#VkImageView">VkImageView</a> being sampled with <code>VK_FILTER_CUBIC_EXT</code> with
a reduction mode of either <code>VK_SAMPLER_REDUCTION_MODE_MIN_EXT</code> or
<code>VK_SAMPLER_REDUCTION_MODE_MAX_EXT</code> as a result of this command
<strong class="purple">must</strong> have a <a href="#VkImageViewType">VkImageViewType</a> and format that supports cubic
filtering together with minmax filtering, as specified by
<code>VkFilterCubicImageViewImageFormatPropertiesEXT</code>::<code>filterCubicMinmax</code>
returned by <code>vkGetPhysicalDeviceImageFormatProperties2</code></p>
</li>
<li>
<p><a id="VUID-vkCmdDrawIndirect-maxMultiviewInstanceIndex-00499"></a>
If the draw is recorded in a render pass instance with multiview
enabled, the maximum instance index <strong class="purple">must</strong> be less than or equal to
<a href="#VkPhysicalDeviceMultiviewProperties">VkPhysicalDeviceMultiviewProperties</a>::<code>maxMultiviewInstanceIndex</code>.</p>
</li>
<li>
<p><a id="VUID-vkCmdDrawIndirect-commandBuffer-02640"></a>
<code>commandBuffer</code> <strong class="purple">must</strong> not be a protected command buffer</p>
</li>
<li>
<p><a id="VUID-vkCmdDrawIndirect-commandBuffer-01856"></a>
If <code>commandBuffer</code> is an unprotected command buffer, and any
pipeline stage in the <code>VkPipeline</code> object bound to
<code>VK_PIPELINE_BIND_POINT_GRAPHICS</code> reads from or writes to any image
or buffer, that image or buffer <strong class="purple">must</strong> not be a protected image or
protected buffer.</p>
</li>
<li>
<p><a id="VUID-vkCmdDrawIndirect-sampleLocationsEnable-01514"></a>
If the bound graphics pipeline was created with
<a href="#VkPipelineSampleLocationsStateCreateInfoEXT">VkPipelineSampleLocationsStateCreateInfoEXT</a>::<code>sampleLocationsEnable</code>
set to <code>VK_TRUE</code> and the current subpass has a depth/stencil
attachment, then that attachment <strong class="purple">must</strong> have been created with the
<code>VK_IMAGE_CREATE_SAMPLE_LOCATIONS_COMPATIBLE_DEPTH_BIT_EXT</code> bit set</p>
</li>
<li>
<p><a id="VUID-vkCmdDrawIndirect-flags-02044"></a>
Any <a href="#VkImage">VkImage</a> created with a <a href="#VkImageCreateInfo">VkImageCreateInfo</a>::<code>flags</code>
containing <code>VK_IMAGE_CREATE_CORNER_SAMPLED_BIT_NV</code> sampled as a
result of this command <strong class="purple">must</strong> only be sampled using a
<a href="#VkSamplerAddressMode">VkSamplerAddressMode</a> of
<code>VK_SAMPLER_ADDRESS_MODE_CLAMP_TO_EDGE</code>.</p>
</li>
</ul>
</div>
</div>
</div>
<div class="sidebarblock">
<div class="content">
<div class="title">Valid Usage (Implicit)</div>
<div class="ulist">
<ul>
<li>
<p><a id="VUID-vkCmdDrawIndirect-commandBuffer-parameter"></a> <code>commandBuffer</code> <strong class="purple">must</strong> be a valid <code>VkCommandBuffer</code> handle</p>
</li>
<li>
<p><a id="VUID-vkCmdDrawIndirect-buffer-parameter"></a> <code>buffer</code> <strong class="purple">must</strong> be a valid <code>VkBuffer</code> handle</p>
</li>
<li>
<p><a id="VUID-vkCmdDrawIndirect-commandBuffer-recording"></a> <code>commandBuffer</code> <strong class="purple">must</strong> be in the <a href="#commandbuffers-lifecycle">recording state</a></p>
</li>
<li>
<p><a id="VUID-vkCmdDrawIndirect-commandBuffer-cmdpool"></a> The <code>VkCommandPool</code> that <code>commandBuffer</code> was allocated from <strong class="purple">must</strong> support graphics operations</p>
</li>
<li>
<p><a id="VUID-vkCmdDrawIndirect-renderpass"></a> This command <strong class="purple">must</strong> only be called inside of a render pass instance</p>
</li>
<li>
<p><a id="VUID-vkCmdDrawIndirect-commonparent"></a> Both of <code>buffer</code>, and <code>commandBuffer</code> <strong class="purple">must</strong> have been created, allocated, or retrieved from the same <code>VkDevice</code></p>
</li>
</ul>
</div>
</div>
</div>
<div class="sidebarblock">
<div class="content">
<div class="title">Host Synchronization</div>
<div class="ulist">
<ul>
<li>
<p>Host access to <code>commandBuffer</code> <strong class="purple">must</strong> be externally synchronized</p>
</li>
<li>
<p>Host access to the <code>VkCommandPool</code> that <code>commandBuffer</code> was allocated from <strong class="purple">must</strong> be externally synchronized</p>
</li>
</ul>
</div>
</div>
</div>
<div class="sidebarblock">
<div class="content">
<div class="title">Command Properties</div>
<table class="tableblock frame-all grid-all stretch">
<colgroup>
<col style="width: 25%;">
<col style="width: 25%;">
<col style="width: 25%;">
<col style="width: 25%;">
</colgroup>
<thead>
<tr>
<th class="tableblock halign-left valign-top"><a href="#VkCommandBufferLevel">Command Buffer Levels</a></th>
<th class="tableblock halign-left valign-top"><a href="#vkCmdBeginRenderPass">Render Pass Scope</a></th>
<th class="tableblock halign-left valign-top"><a href="#VkQueueFlagBits">Supported Queue Types</a></th>
<th class="tableblock halign-left valign-top"><a href="#synchronization-pipeline-stages-types">Pipeline Type</a></th>
</tr>
</thead>
<tbody>
<tr>
<td class="tableblock halign-left valign-top"><p class="tableblock">Primary<br>
Secondary</p></td>
<td class="tableblock halign-left valign-top"><p class="tableblock">Inside</p></td>
<td class="tableblock halign-left valign-top"><p class="tableblock">Graphics</p></td>
<td class="tableblock halign-left valign-top"><p class="tableblock">Graphics</p></td>
</tr>
</tbody>
</table>
</div>
</div>
</div>
<div class="sect3">
<h4 id="_see_also_49">See Also</h4>
<div class="paragraph">
<p><a href="#VkBuffer">VkBuffer</a>, <a href="#VkCommandBuffer">VkCommandBuffer</a>, <code>VkDeviceSize</code></p>
</div>
</div>
<div class="sect3">
<h4 id="_document_notes_49">Document Notes</h4>
<div class="paragraph">
<p>For more information, see the Vulkan Specification at URL</p>
</div>
<div class="paragraph">
<p><a href="https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#vkCmdDrawIndirect" class="bare">https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#vkCmdDrawIndirect</a></p>
</div>
<div class="paragraph">
<p>This page is extracted from the Vulkan Specification.
Fixes and changes should be made to the Specification, not directly.</p>
</div>
<div style="page-break-after: always;"></div>
</div>
</div>
<div class="sect2">
<h3 id="_vkcmddrawindirectbytecountext3">vkCmdDrawIndirectByteCountEXT(3)</h3>
<div class="sect3">
<h4 id="_name_50">Name</h4>
<div class="paragraph">
<p>vkCmdDrawIndirectByteCountEXT - Draw primitives where the vertex count is derived from the counter byte value in the counter buffer</p>
</div>
</div>
<div class="sect3">
<h4 id="_c_specification_50">C Specification</h4>
<div class="paragraph">
<p>To record a non-indexed draw call, where the vertex count is based on a byte
count read from a buffer and the passed in vertex stride parameter, call:</p>
</div>
<div id="vkCmdDrawIndirectByteCountEXT" class="listingblock">
<div class="content">
<pre class="highlight"><code class="language-c++" data-lang="c++">void vkCmdDrawIndirectByteCountEXT(
    VkCommandBuffer                             commandBuffer,
    uint32_t                                    instanceCount,
    uint32_t                                    firstInstance,
    VkBuffer                                    counterBuffer,
    VkDeviceSize                                counterBufferOffset,
    uint32_t                                    counterOffset,
    uint32_t                                    vertexStride);</code></pre>
</div>
</div>
</div>
<div class="sect3">
<h4 id="_parameters_50">Parameters</h4>
<div class="ulist">
<ul>
<li>
<p><code>commandBuffer</code> is the command buffer into which the command is
recorded.</p>
</li>
<li>
<p><code>instanceCount</code> is the number of instances to draw.</p>
</li>
<li>
<p><code>firstInstance</code> is the instance ID of the first instance to draw.</p>
</li>
<li>
<p><code>counterBuffer</code> is the buffer handle from where the byte count is
read.</p>
</li>
<li>
<p><code>counterBufferOffset</code> is the offset into the buffer used to read the
byte count, which is used to calculate the vertex count for this draw
call.</p>
</li>
<li>
<p><code>counterOffset</code> is subtracted from the byte count read from the
<code>counterBuffer</code> at the <code>counterBufferOffset</code></p>
</li>
<li>
<p><code>vertexStride</code> is the stride in bytes between each element of the
vertex data that is used to calculate the vertex count from the counter
value.
This value is typically the same value that was used in the graphics
pipeline state when the transform feedback was captured as the
<code>XfbStride</code>.</p>
</li>
</ul>
</div>
</div>
<div class="sect3">
<h4 id="_description_50">Description</h4>
<div class="paragraph">
<p>When the command is executed, primitives are assembled in the same way as
done with <a href="#vkCmdDraw">vkCmdDraw</a> except the <code>vertexCount</code> is calculated based
on the byte count read from <code>counterBuffer</code> at offset
<code>counterBufferOffset</code>.
The assembled primitives execute the bound graphics pipeline.</p>
</div>
<div class="paragraph">
<p>The effective <code>vertexCount</code> is calculated as follows:</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="highlight"><code class="language-c" data-lang="c">const uint32_t * counterBufferPtr = (const uint8_t *)counterBuffer.address + counterBufferOffset;
vertexCount = floor(max(0, (*counterBufferPtr - counterOffset)) / vertexStride);</code></pre>
</div>
</div>
<div class="paragraph">
<p>The effective <code>firstVertex</code> is zero.</p>
</div>
<div class="sidebarblock">
<div class="content">
<div class="title">Valid Usage</div>
<div class="ulist">
<ul>
<li>
<p><a id="VUID-vkCmdDrawIndirectByteCountEXT-transformFeedback-02287"></a>
<code>VkPhysicalDeviceTransformFeedbackFeaturesEXT</code>::<code>transformFeedback</code>
<strong class="purple">must</strong> be enabled</p>
</li>
<li>
<p><a id="VUID-vkCmdDrawIndirectByteCountEXT-transformFeedbackDraw-02288"></a>
The implementation <strong class="purple">must</strong> support
<code>VkPhysicalDeviceTransformFeedbackPropertiesEXT</code>::<code>transformFeedbackDraw</code></p>
</li>
<li>
<p><a id="VUID-vkCmdDrawIndirectByteCountEXT-vertexStride-02289"></a>
<code>vertexStride</code> <strong class="purple">must</strong> be greater than 0 and less than or equal to
<a href="#VkPhysicalDeviceLimits">VkPhysicalDeviceLimits</a>::<code>maxTransformFeedbackBufferDataStride</code></p>
</li>
<li>
<p><a id="VUID-vkCmdDrawIndirectByteCountEXT-counterBuffer-02290"></a>
<code>counterBuffer</code> <strong class="purple">must</strong> have been created with the
<code>VK_BUFFER_USAGE_INDIRECT_BUFFER_BIT</code> bit set</p>
</li>
<li>
<p><a id="VUID-vkCmdDrawIndirectByteCountEXT-renderPass-02291"></a>
The current render pass <strong class="purple">must</strong> be <a href="vkspec.html#renderpass-compatibility">compatible</a>
with the <code>renderPass</code> member of the
<code>VkGraphicsPipelineCreateInfo</code> structure specified when creating the
<code>VkPipeline</code> bound to <code>VK_PIPELINE_BIND_POINT_GRAPHICS</code></p>
</li>
<li>
<p><a id="VUID-vkCmdDrawIndirectByteCountEXT-subpass-02292"></a>
The subpass index of the current render pass <strong class="purple">must</strong> be equal to the
<code>subpass</code> member of the <code>VkGraphicsPipelineCreateInfo</code> structure
specified when creating the <code>VkPipeline</code> bound to
<code>VK_PIPELINE_BIND_POINT_GRAPHICS</code></p>
</li>
<li>
<p><a id="VUID-vkCmdDrawIndirectByteCountEXT-None-02293"></a>
For each set <em>n</em> that is statically used by the <code>VkPipeline</code> bound
to <code>VK_PIPELINE_BIND_POINT_GRAPHICS</code>, a descriptor set <strong class="purple">must</strong> have
been bound to <em>n</em> at <code>VK_PIPELINE_BIND_POINT_GRAPHICS</code>, with a
<code>VkPipelineLayout</code> that is compatible for set <em>n</em>, with the
<code>VkPipelineLayout</code> used to create the current <code>VkPipeline</code>, as
described in <a href="vkspec.html#descriptorsets-compatibility" class="bare">html/vkspec.html#descriptorsets-compatibility</a></p>
</li>
<li>
<p><a id="VUID-vkCmdDrawIndirectByteCountEXT-None-02294"></a>
For each push constant that is statically used by the <code>VkPipeline</code>
bound to <code>VK_PIPELINE_BIND_POINT_GRAPHICS</code>, a push constant value
<strong class="purple">must</strong> have been set for <code>VK_PIPELINE_BIND_POINT_GRAPHICS</code>, with a
<code>VkPipelineLayout</code> that is compatible for push constants, with the
<code>VkPipelineLayout</code> used to create the current <code>VkPipeline</code>, as
described in <a href="vkspec.html#descriptorsets-compatibility" class="bare">html/vkspec.html#descriptorsets-compatibility</a></p>
</li>
<li>
<p><a id="VUID-vkCmdDrawIndirectByteCountEXT-None-02295"></a>
Descriptors in each bound descriptor set, specified via
<code>vkCmdBindDescriptorSets</code>, <strong class="purple">must</strong> be valid if they are statically
used by the bound <code>VkPipeline</code> object, specified via
<code>vkCmdBindPipeline</code></p>
</li>
<li>
<p><a id="VUID-vkCmdDrawIndirectByteCountEXT-None-02296"></a>
All vertex input bindings accessed via vertex input variables declared
in the vertex shader entry point&#8217;s interface <strong class="purple">must</strong> have valid buffers
bound</p>
</li>
<li>
<p><a id="VUID-vkCmdDrawIndirectByteCountEXT-None-02297"></a>
For a given vertex buffer binding, any attribute data fetched <strong class="purple">must</strong> be
entirely contained within the corresponding vertex buffer binding, as
described in <a href="vkspec.html#fxvertex-input" class="bare">html/vkspec.html#fxvertex-input</a></p>
</li>
<li>
<p><a id="VUID-vkCmdDrawIndirectByteCountEXT-None-02298"></a>
A valid graphics pipeline <strong class="purple">must</strong> be bound to the current command buffer
with <code>VK_PIPELINE_BIND_POINT_GRAPHICS</code></p>
</li>
<li>
<p><a id="VUID-vkCmdDrawIndirectByteCountEXT-None-02299"></a>
If the <code>VkPipeline</code> object bound to
<code>VK_PIPELINE_BIND_POINT_GRAPHICS</code> requires any dynamic state, that
state <strong class="purple">must</strong> have been set on the current command buffer</p>
</li>
<li>
<p><a id="VUID-vkCmdDrawIndirectByteCountEXT-None-02300"></a>
Every input attachment used by the current subpass <strong class="purple">must</strong> be bound to the
pipeline via a descriptor set</p>
</li>
<li>
<p><a id="VUID-vkCmdDrawIndirectByteCountEXT-None-02301"></a>
If any <code>VkSampler</code> object that is accessed from a shader by the
<code>VkPipeline</code> bound to <code>VK_PIPELINE_BIND_POINT_GRAPHICS</code> uses
unnormalized coordinates, it <strong class="purple">must</strong> not be used to sample from any
<code>VkImage</code> with a <code>VkImageView</code> of the type
<code>VK_IMAGE_VIEW_TYPE_3D</code>, <code>VK_IMAGE_VIEW_TYPE_CUBE</code>,
<code>VK_IMAGE_VIEW_TYPE_1D_ARRAY</code>, <code>VK_IMAGE_VIEW_TYPE_2D_ARRAY</code> or
<code>VK_IMAGE_VIEW_TYPE_CUBE_ARRAY</code>, in any shader stage</p>
</li>
<li>
<p><a id="VUID-vkCmdDrawIndirectByteCountEXT-None-02302"></a>
If any <code>VkSampler</code> object that is accessed from a shader by the
<code>VkPipeline</code> bound to <code>VK_PIPELINE_BIND_POINT_GRAPHICS</code> uses
unnormalized coordinates, it <strong class="purple">must</strong> not be used with any of the SPIR-V
<code>OpImageSample*</code> or <code>OpImageSparseSample*</code> instructions with
<code>ImplicitLod</code>, <code>Dref</code> or <code>Proj</code> in their name, in any shader
stage</p>
</li>
<li>
<p><a id="VUID-vkCmdDrawIndirectByteCountEXT-None-02303"></a>
If any <code>VkSampler</code> object that is accessed from a shader by the
<code>VkPipeline</code> bound to <code>VK_PIPELINE_BIND_POINT_GRAPHICS</code> uses
unnormalized coordinates, it <strong class="purple">must</strong> not be used with any of the SPIR-V
<code>OpImageSample*</code> or <code>OpImageSparseSample*</code> instructions that includes a
LOD bias or any offset values, in any shader stage</p>
</li>
<li>
<p><a id="VUID-vkCmdDrawIndirectByteCountEXT-None-02304"></a>
Image subresources used as attachments in the current render pass <strong class="purple">must</strong>
not be accessed in any way other than as an attachment by this command</p>
</li>
<li>
<p><a id="VUID-vkCmdDrawIndirectByteCountEXT-None-02305"></a>
If a <code>VkImageView</code> is sampled with <code>VK_FILTER_LINEAR</code> as a
result of this command, then the image view&#8217;s
<a href="vkspec.html#resources-image-view-format-features">format features</a> <strong class="purple">must</strong> contain
<code>VK_FORMAT_FEATURE_SAMPLED_IMAGE_FILTER_LINEAR_BIT</code></p>
</li>
<li>
<p><a id="VUID-vkCmdDrawIndirectByteCountEXT-None-02306"></a>
If a <code>VkImageView</code> is sampled with <code>VK_FILTER_CUBIC_EXT</code> as a
result of this command, then the image view&#8217;s
<a href="vkspec.html#resources-image-view-format-features">format features</a> <strong class="purple">must</strong> contain
<code>VK_FORMAT_FEATURE_SAMPLED_IMAGE_FILTER_CUBIC_BIT_EXT</code></p>
</li>
<li>
<p><a id="VUID-vkCmdDrawIndirectByteCountEXT-filterCubic-02625"></a>
Any <a href="#VkImageView">VkImageView</a> being sampled with <code>VK_FILTER_CUBIC_EXT</code> as a
result of this command <strong class="purple">must</strong> have a <a href="#VkImageViewType">VkImageViewType</a> and format
that supports cubic filtering, as specified by
<code>VkFilterCubicImageViewImageFormatPropertiesEXT</code>::<code>filterCubic</code>
returned by <code>vkGetPhysicalDeviceImageFormatProperties2</code></p>
</li>
<li>
<p><a id="VUID-vkCmdDrawIndirectByteCountEXT-filterCubicMinmax-02626"></a>
Any <a href="#VkImageView">VkImageView</a> being sampled with <code>VK_FILTER_CUBIC_EXT</code> with
a reduction mode of either <code>VK_SAMPLER_REDUCTION_MODE_MIN_EXT</code> or
<code>VK_SAMPLER_REDUCTION_MODE_MAX_EXT</code> as a result of this command
<strong class="purple">must</strong> have a <a href="#VkImageViewType">VkImageViewType</a> and format that supports cubic
filtering together with minmax filtering, as specified by
<code>VkFilterCubicImageViewImageFormatPropertiesEXT</code>::<code>filterCubicMinmax</code>
returned by <code>vkGetPhysicalDeviceImageFormatProperties2</code></p>
</li>
<li>
<p><a id="VUID-vkCmdDrawIndirectByteCountEXT-maxMultiviewInstanceIndex-02308"></a>
If the draw is recorded in a render pass instance with multiview
enabled, the maximum instance index <strong class="purple">must</strong> be less than or equal to
<a href="#VkPhysicalDeviceMultiviewProperties">VkPhysicalDeviceMultiviewProperties</a>::<code>maxMultiviewInstanceIndex</code></p>
</li>
<li>
<p><a id="VUID-vkCmdDrawIndirectByteCountEXT-commandBuffer-02646"></a>
<code>commandBuffer</code> <strong class="purple">must</strong> not be a protected command buffer</p>
</li>
<li>
<p><a id="VUID-vkCmdDrawIndirectByteCountEXT-commandBuffer-02309"></a>
If <code>commandBuffer</code> is an unprotected command buffer, and any
pipeline stage in the <code>VkPipeline</code> object bound to
<code>VK_PIPELINE_BIND_POINT_GRAPHICS</code> reads from or writes to any image
or buffer, that image or buffer <strong class="purple">must</strong> not be a protected image or
protected buffer</p>
</li>
<li>
<p><a id="VUID-vkCmdDrawIndirectByteCountEXT-sampleLocationsEnable-02312"></a>
If the bound graphics pipeline was created with
<a href="#VkPipelineSampleLocationsStateCreateInfoEXT">VkPipelineSampleLocationsStateCreateInfoEXT</a>::<code>sampleLocationsEnable</code>
set to <code>VK_TRUE</code> and the current subpass has a depth/stencil
attachment, then that attachment <strong class="purple">must</strong> have been created with the
<code>VK_IMAGE_CREATE_SAMPLE_LOCATIONS_COMPATIBLE_DEPTH_BIT_EXT</code> bit set</p>
</li>
</ul>
</div>
</div>
</div>
<div class="sidebarblock">
<div class="content">
<div class="title">Valid Usage (Implicit)</div>
<div class="ulist">
<ul>
<li>
<p><a id="VUID-vkCmdDrawIndirectByteCountEXT-commandBuffer-parameter"></a> <code>commandBuffer</code> <strong class="purple">must</strong> be a valid <code>VkCommandBuffer</code> handle</p>
</li>
<li>
<p><a id="VUID-vkCmdDrawIndirectByteCountEXT-counterBuffer-parameter"></a> <code>counterBuffer</code> <strong class="purple">must</strong> be a valid <code>VkBuffer</code> handle</p>
</li>
<li>
<p><a id="VUID-vkCmdDrawIndirectByteCountEXT-commandBuffer-recording"></a> <code>commandBuffer</code> <strong class="purple">must</strong> be in the <a href="#commandbuffers-lifecycle">recording state</a></p>
</li>
<li>
<p><a id="VUID-vkCmdDrawIndirectByteCountEXT-commandBuffer-cmdpool"></a> The <code>VkCommandPool</code> that <code>commandBuffer</code> was allocated from <strong class="purple">must</strong> support graphics operations</p>
</li>
<li>
<p><a id="VUID-vkCmdDrawIndirectByteCountEXT-renderpass"></a> This command <strong class="purple">must</strong> only be called inside of a render pass instance</p>
</li>
<li>
<p><a id="VUID-vkCmdDrawIndirectByteCountEXT-commonparent"></a> Both of <code>commandBuffer</code>, and <code>counterBuffer</code> <strong class="purple">must</strong> have been created, allocated, or retrieved from the same <code>VkDevice</code></p>
</li>
</ul>
</div>
</div>
</div>
<div class="sidebarblock">
<div class="content">
<div class="title">Host Synchronization</div>
<div class="ulist">
<ul>
<li>
<p>Host access to <code>commandBuffer</code> <strong class="purple">must</strong> be externally synchronized</p>
</li>
<li>
<p>Host access to the <code>VkCommandPool</code> that <code>commandBuffer</code> was allocated from <strong class="purple">must</strong> be externally synchronized</p>
</li>
</ul>
</div>
</div>
</div>
<div class="sidebarblock">
<div class="content">
<div class="title">Command Properties</div>
<table class="tableblock frame-all grid-all stretch">
<colgroup>
<col style="width: 25%;">
<col style="width: 25%;">
<col style="width: 25%;">
<col style="width: 25%;">
</colgroup>
<thead>
<tr>
<th class="tableblock halign-left valign-top"><a href="#VkCommandBufferLevel">Command Buffer Levels</a></th>
<th class="tableblock halign-left valign-top"><a href="#vkCmdBeginRenderPass">Render Pass Scope</a></th>
<th class="tableblock halign-left valign-top"><a href="#VkQueueFlagBits">Supported Queue Types</a></th>
<th class="tableblock halign-left valign-top"><a href="#synchronization-pipeline-stages-types">Pipeline Type</a></th>
</tr>
</thead>
<tbody>
<tr>
<td class="tableblock halign-left valign-top"><p class="tableblock">Primary<br>
Secondary</p></td>
<td class="tableblock halign-left valign-top"><p class="tableblock">Inside</p></td>
<td class="tableblock halign-left valign-top"><p class="tableblock">Graphics</p></td>
<td class="tableblock halign-left valign-top"><p class="tableblock">Graphics</p></td>
</tr>
</tbody>
</table>
</div>
</div>
</div>
<div class="sect3">
<h4 id="_see_also_50">See Also</h4>
<div class="paragraph">
<p><a href="#VkBuffer">VkBuffer</a>, <a href="#VkCommandBuffer">VkCommandBuffer</a>, <code>VkDeviceSize</code></p>
</div>
</div>
<div class="sect3">
<h4 id="_document_notes_50">Document Notes</h4>
<div class="paragraph">
<p>For more information, see the Vulkan Specification at URL</p>
</div>
<div class="paragraph">
<p><a href="https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#vkCmdDrawIndirectByteCountEXT" class="bare">https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#vkCmdDrawIndirectByteCountEXT</a></p>
</div>
<div class="paragraph">
<p>This page is extracted from the Vulkan Specification.
Fixes and changes should be made to the Specification, not directly.</p>
</div>
<div style="page-break-after: always;"></div>
</div>
</div>
<div class="sect2">
<h3 id="_vkcmddrawindirectcountamd3">vkCmdDrawIndirectCountAMD(3)</h3>
<div class="sect3">
<h4 id="_name_51">Name</h4>
<div class="paragraph">
<p>vkCmdDrawIndirectCountAMD - Perform an indirect draw with the draw count sourced from a buffer</p>
</div>
</div>
<div class="sect3">
<h4 id="_c_specification_51">C Specification</h4>
<div class="paragraph">
<p>To record a non-indexed draw call with a draw call count sourced from a
buffer, call:</p>
</div>
<div id="vkCmdDrawIndirectCountAMD" class="listingblock">
<div class="content">
<pre class="highlight"><code class="language-c++" data-lang="c++">void vkCmdDrawIndirectCountAMD(
    VkCommandBuffer                             commandBuffer,
    VkBuffer                                    buffer,
    VkDeviceSize                                offset,
    VkBuffer                                    countBuffer,
    VkDeviceSize                                countBufferOffset,
    uint32_t                                    maxDrawCount,
    uint32_t                                    stride);</code></pre>
</div>
</div>
</div>
<div class="sect3">
<h4 id="_parameters_51">Parameters</h4>
<div class="ulist">
<ul>
<li>
<p><code>commandBuffer</code> is the command buffer into which the command is
recorded.</p>
</li>
<li>
<p><code>buffer</code> is the buffer containing draw parameters.</p>
</li>
<li>
<p><code>offset</code> is the byte offset into <code>buffer</code> where parameters
begin.</p>
</li>
<li>
<p><code>countBuffer</code> is the buffer containing the draw count.</p>
</li>
<li>
<p><code>countBufferOffset</code> is the byte offset into <code>countBuffer</code> where
the draw count begins.</p>
</li>
<li>
<p><code>maxDrawCount</code> specifies the maximum number of draws that will be
executed.
The actual number of executed draw calls is the minimum of the count
specified in <code>countBuffer</code> and <code>maxDrawCount</code>.</p>
</li>
<li>
<p><code>stride</code> is the byte stride between successive sets of draw
parameters.</p>
</li>
</ul>
</div>
</div>
<div class="sect3">
<h4 id="_description_51">Description</h4>
<div class="paragraph">
<p><code>vkCmdDrawIndirectCountAMD</code> behaves similarly to <a href="#vkCmdDrawIndirect">vkCmdDrawIndirect</a>
except that the draw count is read by the device from a buffer during
execution.
The command will read an unsigned 32-bit integer from <code>countBuffer</code>
located at <code>countBufferOffset</code> and use this as the draw count.</p>
</div>
<div class="sidebarblock">
<div class="content">
<div class="title">Valid Usage</div>
<div class="ulist">
<ul>
<li>
<p><a id="VUID-vkCmdDrawIndirectCountAMD-buffer-01661"></a>
If <code>buffer</code> is non-sparse then it <strong class="purple">must</strong> be bound completely and
contiguously to a single <code>VkDeviceMemory</code> object</p>
</li>
<li>
<p><a id="VUID-vkCmdDrawIndirectCountAMD-buffer-01662"></a>
<code>buffer</code> <strong class="purple">must</strong> have been created with the
<code>VK_BUFFER_USAGE_INDIRECT_BUFFER_BIT</code> bit set</p>
</li>
<li>
<p><a id="VUID-vkCmdDrawIndirectCountAMD-countBuffer-01663"></a>
If <code>countBuffer</code> is non-sparse then it <strong class="purple">must</strong> be bound completely and
contiguously to a single <code>VkDeviceMemory</code> object</p>
</li>
<li>
<p><a id="VUID-vkCmdDrawIndirectCountAMD-countBuffer-01664"></a>
<code>countBuffer</code> <strong class="purple">must</strong> have been created with the
<code>VK_BUFFER_USAGE_INDIRECT_BUFFER_BIT</code> bit set</p>
</li>
<li>
<p><a id="VUID-vkCmdDrawIndirectCountAMD-offset-00502"></a>
<code>offset</code> <strong class="purple">must</strong> be a multiple of <code>4</code></p>
</li>
<li>
<p><a id="VUID-vkCmdDrawIndirectCountAMD-countBufferOffset-00503"></a>
<code>countBufferOffset</code> <strong class="purple">must</strong> be a multiple of <code>4</code></p>
</li>
<li>
<p><a id="VUID-vkCmdDrawIndirectCountAMD-stride-00504"></a>
<code>stride</code> <strong class="purple">must</strong> be a multiple of <code>4</code> and <strong class="purple">must</strong> be greater than or
equal to <code>sizeof</code>(<code>VkDrawIndirectCommand</code>)</p>
</li>
<li>
<p><a id="VUID-vkCmdDrawIndirectCountAMD-maxDrawCount-00505"></a>
If <code>maxDrawCount</code> is greater than or equal to <code>1</code>,
<span class="eq">(<code>stride</code> × (<code>maxDrawCount</code> - 1) +  <code>offset</code>
+  <code>sizeof</code>(<code>VkDrawIndirectCommand</code>))</span> <strong class="purple">must</strong> be less than or
equal to the size of <code>buffer</code></p>
</li>
<li>
<p><a id="VUID-vkCmdDrawIndirectCountAMD-firstInstance-00506"></a>
If the <a href="vkspec.html#features-drawIndirectFirstInstance">drawIndirectFirstInstance</a>
feature is not enabled, all the <code>firstInstance</code> members of the
<code>VkDrawIndirectCommand</code> structures accessed by this command <strong class="purple">must</strong> be
<code>0</code></p>
</li>
<li>
<p><a id="VUID-vkCmdDrawIndirectCountAMD-renderPass-00507"></a>
The current render pass <strong class="purple">must</strong> be <a href="vkspec.html#renderpass-compatibility">compatible</a>
with the <code>renderPass</code> member of the
<code>VkGraphicsPipelineCreateInfo</code> structure specified when creating the
<code>VkPipeline</code> bound to <code>VK_PIPELINE_BIND_POINT_GRAPHICS</code>.</p>
</li>
<li>
<p><a id="VUID-vkCmdDrawIndirectCountAMD-subpass-00508"></a>
The subpass index of the current render pass <strong class="purple">must</strong> be equal to the
<code>subpass</code> member of the <code>VkGraphicsPipelineCreateInfo</code> structure
specified when creating the <code>VkPipeline</code> bound to
<code>VK_PIPELINE_BIND_POINT_GRAPHICS</code>.</p>
</li>
<li>
<p><a id="VUID-vkCmdDrawIndirectCountAMD-None-00509"></a>
For each set <em>n</em> that is statically used by the <code>VkPipeline</code> bound
to <code>VK_PIPELINE_BIND_POINT_GRAPHICS</code>, a descriptor set <strong class="purple">must</strong> have
been bound to <em>n</em> at <code>VK_PIPELINE_BIND_POINT_GRAPHICS</code>, with a
<code>VkPipelineLayout</code> that is compatible for set <em>n</em>, with the
<code>VkPipelineLayout</code> used to create the current <code>VkPipeline</code>, as
described in <a href="vkspec.html#descriptorsets-compatibility" class="bare">html/vkspec.html#descriptorsets-compatibility</a></p>
</li>
<li>
<p><a id="VUID-vkCmdDrawIndirectCountAMD-None-00510"></a>
For each push constant that is statically used by the <code>VkPipeline</code>
bound to <code>VK_PIPELINE_BIND_POINT_GRAPHICS</code>, a push constant value
<strong class="purple">must</strong> have been set for <code>VK_PIPELINE_BIND_POINT_GRAPHICS</code>, with a
<code>VkPipelineLayout</code> that is compatible for push constants, with the
<code>VkPipelineLayout</code> used to create the current <code>VkPipeline</code>, as
described in <a href="vkspec.html#descriptorsets-compatibility" class="bare">html/vkspec.html#descriptorsets-compatibility</a></p>
</li>
<li>
<p><a id="VUID-vkCmdDrawIndirectCountAMD-None-00511"></a>
Descriptors in each bound descriptor set, specified via
<code>vkCmdBindDescriptorSets</code>, <strong class="purple">must</strong> be valid if they are statically
used by the bound <code>VkPipeline</code> object, specified via
<code>vkCmdBindPipeline</code></p>
</li>
<li>
<p><a id="VUID-vkCmdDrawIndirectCountAMD-None-00512"></a>
All vertex input bindings accessed via vertex input variables declared
in the vertex shader entry point&#8217;s interface <strong class="purple">must</strong> have valid buffers
bound</p>
</li>
<li>
<p><a id="VUID-vkCmdDrawIndirectCountAMD-None-00513"></a>
A valid graphics pipeline <strong class="purple">must</strong> be bound to the current command buffer
with <code>VK_PIPELINE_BIND_POINT_GRAPHICS</code></p>
</li>
<li>
<p><a id="VUID-vkCmdDrawIndirectCountAMD-None-00514"></a>
If the <code>VkPipeline</code> object bound to
<code>VK_PIPELINE_BIND_POINT_GRAPHICS</code> requires any dynamic state, that
state <strong class="purple">must</strong> have been set on the current command buffer</p>
</li>
<li>
<p><a id="VUID-vkCmdDrawIndirectCountAMD-countBuffer-00515"></a>
If the count stored in <code>countBuffer</code> is equal to <code>1</code>,
<span class="eq">(<code>offset</code> +  <code>sizeof</code>(<code>VkDrawIndirectCommand</code>))</span>
<strong class="purple">must</strong> be less than or equal to the size of <code>buffer</code></p>
</li>
<li>
<p><a id="VUID-vkCmdDrawIndirectCountAMD-countBuffer-00516"></a>
If the count stored in <code>countBuffer</code> is greater than <code>1</code>,
<span class="eq">(<code>stride</code> × (<code>drawCount</code> - 1) +  <code>offset</code>
+  <code>sizeof</code>(<code>VkDrawIndirectCommand</code>))</span> <strong class="purple">must</strong> be less than or
equal to the size of <code>buffer</code></p>
</li>
<li>
<p><a id="VUID-vkCmdDrawIndirectCountAMD-countBuffer-00517"></a>
The count stored in <code>countBuffer</code> <strong class="purple">must</strong> be less than or equal to
<code>VkPhysicalDeviceLimits</code>::<code>maxDrawIndirectCount</code></p>
</li>
<li>
<p><a id="VUID-vkCmdDrawIndirectCountAMD-None-00518"></a>
Every input attachment used by the current subpass <strong class="purple">must</strong> be bound to the
pipeline via a descriptor set</p>
</li>
<li>
<p><a id="VUID-vkCmdDrawIndirectCountAMD-None-00519"></a>
If any <code>VkSampler</code> object that is accessed from a shader by the
<code>VkPipeline</code> bound to <code>VK_PIPELINE_BIND_POINT_GRAPHICS</code> uses
unnormalized coordinates, it <strong class="purple">must</strong> not be used to sample from any
<code>VkImage</code> with a <code>VkImageView</code> of the type
<code>VK_IMAGE_VIEW_TYPE_3D</code>, <code>VK_IMAGE_VIEW_TYPE_CUBE</code>,
<code>VK_IMAGE_VIEW_TYPE_1D_ARRAY</code>, <code>VK_IMAGE_VIEW_TYPE_2D_ARRAY</code> or
<code>VK_IMAGE_VIEW_TYPE_CUBE_ARRAY</code>, in any shader stage</p>
</li>
<li>
<p><a id="VUID-vkCmdDrawIndirectCountAMD-None-00520"></a>
If any <code>VkSampler</code> object that is accessed from a shader by the
<code>VkPipeline</code> bound to <code>VK_PIPELINE_BIND_POINT_GRAPHICS</code> uses
unnormalized coordinates, it <strong class="purple">must</strong> not be used with any of the SPIR-V
<code>OpImageSample*</code> or <code>OpImageSparseSample*</code> instructions with
<code>ImplicitLod</code>, <code>Dref</code> or <code>Proj</code> in their name, in any shader
stage</p>
</li>
<li>
<p><a id="VUID-vkCmdDrawIndirectCountAMD-None-00521"></a>
If any <code>VkSampler</code> object that is accessed from a shader by the
<code>VkPipeline</code> bound to <code>VK_PIPELINE_BIND_POINT_GRAPHICS</code> uses
unnormalized coordinates, it <strong class="purple">must</strong> not be used with any of the SPIR-V
<code>OpImageSample*</code> or <code>OpImageSparseSample*</code> instructions that includes a
LOD bias or any offset values, in any shader stage</p>
</li>
<li>
<p><a id="VUID-vkCmdDrawIndirectCountAMD-None-00522"></a>
If the <a href="vkspec.html#features-robustBufferAccess">robust buffer access</a> feature is
not enabled, and any shader stage in the <code>VkPipeline</code> object bound
to <code>VK_PIPELINE_BIND_POINT_GRAPHICS</code> accesses a uniform buffer, it
<strong class="purple">must</strong> not access values outside of the range of that buffer specified in
the bound descriptor set</p>
</li>
<li>
<p><a id="VUID-vkCmdDrawIndirectCountAMD-None-00523"></a>
If the <a href="vkspec.html#features-robustBufferAccess">robust buffer access</a> feature is
not enabled, and any shader stage in the <code>VkPipeline</code> object bound
to <code>VK_PIPELINE_BIND_POINT_GRAPHICS</code> accesses a storage buffer, it
<strong class="purple">must</strong> not access values outside of the range of that buffer specified in
the bound descriptor set</p>
</li>
<li>
<p><a id="VUID-vkCmdDrawIndirectCountAMD-None-02017"></a>
If a <code>VkImageView</code> is sampled with <code>VK_FILTER_LINEAR</code> as a
result of this command, then the image view&#8217;s
<a href="vkspec.html#resources-image-view-format-features">format features</a> <strong class="purple">must</strong> contain
<code>VK_FORMAT_FEATURE_SAMPLED_IMAGE_FILTER_LINEAR_BIT</code>.</p>
</li>
<li>
<p><a id="VUID-vkCmdDrawIndirectCountAMD-None-01502"></a>
Image subresources used as attachments in the current render pass <strong class="purple">must</strong>
not be accessed in any way other than as an attachment by this command.</p>
</li>
<li>
<p><a id="VUID-vkCmdDrawIndirectCountAMD-maxMultiviewInstanceIndex-00525"></a>
If the draw is recorded in a render pass instance with multiview
enabled, the maximum instance index <strong class="purple">must</strong> be less than or equal to
<a href="#VkPhysicalDeviceMultiviewProperties">VkPhysicalDeviceMultiviewProperties</a>::<code>maxMultiviewInstanceIndex</code>.</p>
</li>
<li>
<p><a id="VUID-vkCmdDrawIndirectCountAMD-commandBuffer-02642"></a>
<code>commandBuffer</code> <strong class="purple">must</strong> not be a protected command buffer</p>
</li>
<li>
<p><a id="VUID-vkCmdDrawIndirectCountAMD-commandBuffer-01859"></a>
If <code>commandBuffer</code> is an unprotected command buffer, and any
pipeline stage in the <code>VkPipeline</code> object bound to
<code>VK_PIPELINE_BIND_POINT_GRAPHICS</code> reads from or writes to any image
or buffer, that image or buffer <strong class="purple">must</strong> not be a protected image or
protected buffer.</p>
</li>
<li>
<p><a id="VUID-vkCmdDrawIndirectCountAMD-sampleLocationsEnable-01515"></a>
If the bound graphics pipeline was created with
<a href="#VkPipelineSampleLocationsStateCreateInfoEXT">VkPipelineSampleLocationsStateCreateInfoEXT</a>::<code>sampleLocationsEnable</code>
set to <code>VK_TRUE</code> and the current subpass has a depth/stencil
attachment, then that attachment <strong class="purple">must</strong> have been created with the
<code>VK_IMAGE_CREATE_SAMPLE_LOCATIONS_COMPATIBLE_DEPTH_BIT_EXT</code> bit set</p>
</li>
<li>
<p><a id="VUID-vkCmdDrawIndirectCountAMD-flags-02046"></a>
Any <a href="#VkImage">VkImage</a> created with a <a href="#VkImageCreateInfo">VkImageCreateInfo</a>::<code>flags</code>
containing <code>VK_IMAGE_CREATE_CORNER_SAMPLED_BIT_NV</code> sampled as a
result of this command <strong class="purple">must</strong> only be sampled using a
<a href="#VkSamplerAddressMode">VkSamplerAddressMode</a> of
<code>VK_SAMPLER_ADDRESS_MODE_CLAMP_TO_EDGE</code>.</p>
</li>
</ul>
</div>
</div>
</div>
<div class="sidebarblock">
<div class="content">
<div class="title">Valid Usage (Implicit)</div>
<div class="ulist">
<ul>
<li>
<p><a id="VUID-vkCmdDrawIndirectCountAMD-commandBuffer-parameter"></a> <code>commandBuffer</code> <strong class="purple">must</strong> be a valid <code>VkCommandBuffer</code> handle</p>
</li>
<li>
<p><a id="VUID-vkCmdDrawIndirectCountAMD-buffer-parameter"></a> <code>buffer</code> <strong class="purple">must</strong> be a valid <code>VkBuffer</code> handle</p>
</li>
<li>
<p><a id="VUID-vkCmdDrawIndirectCountAMD-countBuffer-parameter"></a> <code>countBuffer</code> <strong class="purple">must</strong> be a valid <code>VkBuffer</code> handle</p>
</li>
<li>
<p><a id="VUID-vkCmdDrawIndirectCountAMD-commandBuffer-recording"></a> <code>commandBuffer</code> <strong class="purple">must</strong> be in the <a href="#commandbuffers-lifecycle">recording state</a></p>
</li>
<li>
<p><a id="VUID-vkCmdDrawIndirectCountAMD-commandBuffer-cmdpool"></a> The <code>VkCommandPool</code> that <code>commandBuffer</code> was allocated from <strong class="purple">must</strong> support graphics operations</p>
</li>
<li>
<p><a id="VUID-vkCmdDrawIndirectCountAMD-renderpass"></a> This command <strong class="purple">must</strong> only be called inside of a render pass instance</p>
</li>
<li>
<p><a id="VUID-vkCmdDrawIndirectCountAMD-commonparent"></a> Each of <code>buffer</code>, <code>commandBuffer</code>, and <code>countBuffer</code> <strong class="purple">must</strong> have been created, allocated, or retrieved from the same <code>VkDevice</code></p>
</li>
</ul>
</div>
</div>
</div>
<div class="sidebarblock">
<div class="content">
<div class="title">Host Synchronization</div>
<div class="ulist">
<ul>
<li>
<p>Host access to <code>commandBuffer</code> <strong class="purple">must</strong> be externally synchronized</p>
</li>
<li>
<p>Host access to the <code>VkCommandPool</code> that <code>commandBuffer</code> was allocated from <strong class="purple">must</strong> be externally synchronized</p>
</li>
</ul>
</div>
</div>
</div>
<div class="sidebarblock">
<div class="content">
<div class="title">Command Properties</div>
<table class="tableblock frame-all grid-all stretch">
<colgroup>
<col style="width: 25%;">
<col style="width: 25%;">
<col style="width: 25%;">
<col style="width: 25%;">
</colgroup>
<thead>
<tr>
<th class="tableblock halign-left valign-top"><a href="#VkCommandBufferLevel">Command Buffer Levels</a></th>
<th class="tableblock halign-left valign-top"><a href="#vkCmdBeginRenderPass">Render Pass Scope</a></th>
<th class="tableblock halign-left valign-top"><a href="#VkQueueFlagBits">Supported Queue Types</a></th>
<th class="tableblock halign-left valign-top"><a href="#synchronization-pipeline-stages-types">Pipeline Type</a></th>
</tr>
</thead>
<tbody>
<tr>
<td class="tableblock halign-left valign-top"><p class="tableblock">Primary<br>
Secondary</p></td>
<td class="tableblock halign-left valign-top"><p class="tableblock">Inside</p></td>
<td class="tableblock halign-left valign-top"><p class="tableblock">Graphics</p></td>
<td class="tableblock halign-left valign-top"><p class="tableblock">Graphics</p></td>
</tr>
</tbody>
</table>
</div>
</div>
</div>
<div class="sect3">
<h4 id="_see_also_51">See Also</h4>
<div class="paragraph">
<p><a href="#VkBuffer">VkBuffer</a>, <a href="#VkCommandBuffer">VkCommandBuffer</a>, <code>VkDeviceSize</code></p>
</div>
</div>
<div class="sect3">
<h4 id="_document_notes_51">Document Notes</h4>
<div class="paragraph">
<p>For more information, see the Vulkan Specification at URL</p>
</div>
<div class="paragraph">
<p><a href="https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#vkCmdDrawIndirectCountAMD" class="bare">https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#vkCmdDrawIndirectCountAMD</a></p>
</div>
<div class="paragraph">
<p>This page is extracted from the Vulkan Specification.
Fixes and changes should be made to the Specification, not directly.</p>
</div>
<div style="page-break-after: always;"></div>
</div>
</div>
<div class="sect2">
<h3 id="_vkcmddrawindirectcountkhr3">vkCmdDrawIndirectCountKHR(3)</h3>
<div class="sect3">
<h4 id="_name_52">Name</h4>
<div class="paragraph">
<p>vkCmdDrawIndirectCountKHR - Perform an indirect draw with the draw count sourced from a buffer</p>
</div>
</div>
<div class="sect3">
<h4 id="_c_specification_52">C Specification</h4>
<div class="paragraph">
<p>To record a non-indexed draw call with a draw call count sourced from a
buffer, call:</p>
</div>
<div id="vkCmdDrawIndirectCountKHR" class="listingblock">
<div class="content">
<pre class="highlight"><code class="language-c++" data-lang="c++">void vkCmdDrawIndirectCountKHR(
    VkCommandBuffer                             commandBuffer,
    VkBuffer                                    buffer,
    VkDeviceSize                                offset,
    VkBuffer                                    countBuffer,
    VkDeviceSize                                countBufferOffset,
    uint32_t                                    maxDrawCount,
    uint32_t                                    stride);</code></pre>
</div>
</div>
</div>
<div class="sect3">
<h4 id="_parameters_52">Parameters</h4>
<div class="ulist">
<ul>
<li>
<p><code>commandBuffer</code> is the command buffer into which the command is
recorded.</p>
</li>
<li>
<p><code>buffer</code> is the buffer containing draw parameters.</p>
</li>
<li>
<p><code>offset</code> is the byte offset into <code>buffer</code> where parameters
begin.</p>
</li>
<li>
<p><code>countBuffer</code> is the buffer containing the draw count.</p>
</li>
<li>
<p><code>countBufferOffset</code> is the byte offset into <code>countBuffer</code> where
the draw count begins.</p>
</li>
<li>
<p><code>maxDrawCount</code> specifies the maximum number of draws that will be
executed.
The actual number of executed draw calls is the minimum of the count
specified in <code>countBuffer</code> and <code>maxDrawCount</code>.</p>
</li>
<li>
<p><code>stride</code> is the byte stride between successive sets of draw
parameters.</p>
</li>
</ul>
</div>
</div>
<div class="sect3">
<h4 id="_description_52">Description</h4>
<div class="paragraph">
<p><code>vkCmdDrawIndirectCountKHR</code> behaves similarly to <a href="#vkCmdDrawIndirect">vkCmdDrawIndirect</a>
except that the draw count is read by the device from a buffer during
execution.
The command will read an unsigned 32-bit integer from <code>countBuffer</code>
located at <code>countBufferOffset</code> and use this as the draw count.</p>
</div>
<div class="sidebarblock">
<div class="content">
<div class="title">Valid Usage</div>
<div class="ulist">
<ul>
<li>
<p><a id="VUID-vkCmdDrawIndirectCountKHR-buffer-03104"></a>
If <code>buffer</code> is non-sparse then it <strong class="purple">must</strong> be bound completely and
contiguously to a single <code>VkDeviceMemory</code> object</p>
</li>
<li>
<p><a id="VUID-vkCmdDrawIndirectCountKHR-buffer-03105"></a>
<code>buffer</code> <strong class="purple">must</strong> have been created with the
<code>VK_BUFFER_USAGE_INDIRECT_BUFFER_BIT</code> bit set</p>
</li>
<li>
<p><a id="VUID-vkCmdDrawIndirectCountKHR-countBuffer-03106"></a>
If <code>countBuffer</code> is non-sparse then it <strong class="purple">must</strong> be bound completely and
contiguously to a single <code>VkDeviceMemory</code> object</p>
</li>
<li>
<p><a id="VUID-vkCmdDrawIndirectCountKHR-countBuffer-03107"></a>
<code>countBuffer</code> <strong class="purple">must</strong> have been created with the
<code>VK_BUFFER_USAGE_INDIRECT_BUFFER_BIT</code> bit set</p>
</li>
<li>
<p><a id="VUID-vkCmdDrawIndirectCountKHR-offset-03108"></a>
<code>offset</code> <strong class="purple">must</strong> be a multiple of <code>4</code></p>
</li>
<li>
<p><a id="VUID-vkCmdDrawIndirectCountKHR-countBufferOffset-03109"></a>
<code>countBufferOffset</code> <strong class="purple">must</strong> be a multiple of <code>4</code></p>
</li>
<li>
<p><a id="VUID-vkCmdDrawIndirectCountKHR-stride-03110"></a>
<code>stride</code> <strong class="purple">must</strong> be a multiple of <code>4</code> and <strong class="purple">must</strong> be greater than or
equal to sizeof(<code>VkDrawIndirectCommand</code>)</p>
</li>
<li>
<p><a id="VUID-vkCmdDrawIndirectCountKHR-maxDrawCount-03111"></a>
If <code>maxDrawCount</code> is greater than or equal to <code>1</code>,
<span class="eq">(<code>stride</code> × (<code>maxDrawCount</code> - 1) +  <code>offset</code>
+  sizeof(<code>VkDrawIndirectCommand</code>))</span> <strong class="purple">must</strong> be less than or equal
to the size of <code>buffer</code></p>
</li>
<li>
<p><a id="VUID-vkCmdDrawIndirectCountKHR-firstInstance-03112"></a>
If the <a href="vkspec.html#features-drawIndirectFirstInstance">drawIndirectFirstInstance</a>
feature is not enabled, all the <code>firstInstance</code> members of the
<code>VkDrawIndirectCommand</code> structures accessed by this command <strong class="purple">must</strong> be
<code>0</code></p>
</li>
<li>
<p><a id="VUID-vkCmdDrawIndirectCountKHR-renderPass-03113"></a>
The current render pass <strong class="purple">must</strong> be <a href="vkspec.html#renderpass-compatibility">compatible</a>
with the <code>renderPass</code> member of the
<code>VkGraphicsPipelineCreateInfo</code> structure specified when creating the
<code>VkPipeline</code> bound to <code>VK_PIPELINE_BIND_POINT_GRAPHICS</code>.</p>
</li>
<li>
<p><a id="VUID-vkCmdDrawIndirectCountKHR-subpass-03114"></a>
The subpass index of the current render pass <strong class="purple">must</strong> be equal to the
<code>subpass</code> member of the <code>VkGraphicsPipelineCreateInfo</code> structure
specified when creating the <code>VkPipeline</code> bound to
<code>VK_PIPELINE_BIND_POINT_GRAPHICS</code>.</p>
</li>
<li>
<p><a id="VUID-vkCmdDrawIndirectCountKHR-None-03115"></a>
For each set <em>n</em> that is statically used by the <code>VkPipeline</code> bound
to <code>VK_PIPELINE_BIND_POINT_GRAPHICS</code>, a descriptor set <strong class="purple">must</strong> have
been bound to <em>n</em> at <code>VK_PIPELINE_BIND_POINT_GRAPHICS</code>, with a
<code>VkPipelineLayout</code> that is compatible for set <em>n</em>, with the
<code>VkPipelineLayout</code> used to create the current <code>VkPipeline</code>, as
described in <a href="vkspec.html#descriptorsets-compatibility" class="bare">html/vkspec.html#descriptorsets-compatibility</a></p>
</li>
<li>
<p><a id="VUID-vkCmdDrawIndirectCountKHR-None-03116"></a>
For each push constant that is statically used by the <code>VkPipeline</code>
bound to <code>VK_PIPELINE_BIND_POINT_GRAPHICS</code>, a push constant value
<strong class="purple">must</strong> have been set for <code>VK_PIPELINE_BIND_POINT_GRAPHICS</code>, with a
<code>VkPipelineLayout</code> that is compatible for push constants, with the
<code>VkPipelineLayout</code> used to create the current <code>VkPipeline</code>, as
described in <a href="vkspec.html#descriptorsets-compatibility" class="bare">html/vkspec.html#descriptorsets-compatibility</a></p>
</li>
<li>
<p><a id="VUID-vkCmdDrawIndirectCountKHR-None-03117"></a>
Descriptors in each bound descriptor set, specified via
<code>vkCmdBindDescriptorSets</code>, <strong class="purple">must</strong> be valid if they are statically
used by the bound <code>VkPipeline</code> object, specified via
<code>vkCmdBindPipeline</code></p>
</li>
<li>
<p><a id="VUID-vkCmdDrawIndirectCountKHR-None-03118"></a>
All vertex input bindings accessed via vertex input variables declared
in the vertex shader entry point&#8217;s interface <strong class="purple">must</strong> have valid buffers
bound</p>
</li>
<li>
<p><a id="VUID-vkCmdDrawIndirectCountKHR-None-03119"></a>
A valid graphics pipeline <strong class="purple">must</strong> be bound to the current command buffer
with <code>VK_PIPELINE_BIND_POINT_GRAPHICS</code></p>
</li>
<li>
<p><a id="VUID-vkCmdDrawIndirectCountKHR-None-03120"></a>
If the <code>VkPipeline</code> object bound to
<code>VK_PIPELINE_BIND_POINT_GRAPHICS</code> requires any dynamic state, that
state <strong class="purple">must</strong> have been set on the current command buffer</p>
</li>
<li>
<p><a id="VUID-vkCmdDrawIndirectCountKHR-countBuffer-03121"></a>
If the count stored in <code>countBuffer</code> is equal to <code>1</code>,
<span class="eq">(<code>offset</code> +  sizeof(<code>VkDrawIndirectCommand</code>))</span> <strong class="purple">must</strong> be
less than or equal to the size of <code>buffer</code></p>
</li>
<li>
<p><a id="VUID-vkCmdDrawIndirectCountKHR-countBuffer-03122"></a>
If the count stored in <code>countBuffer</code> is greater than <code>1</code>,
<span class="eq">(<code>stride</code> × (<code>drawCount</code> - 1) +  <code>offset</code>
+  sizeof(<code>VkDrawIndirectCommand</code>))</span> <strong class="purple">must</strong> be less than or equal
to the size of <code>buffer</code></p>
</li>
<li>
<p><a id="VUID-vkCmdDrawIndirectCountKHR-countBuffer-03123"></a>
The count stored in <code>countBuffer</code> <strong class="purple">must</strong> be less than or equal to
<code>VkPhysicalDeviceLimits</code>::<code>maxDrawIndirectCount</code></p>
</li>
<li>
<p><a id="VUID-vkCmdDrawIndirectCountKHR-None-03124"></a>
Every input attachment used by the current subpass <strong class="purple">must</strong> be bound to the
pipeline via a descriptor set</p>
</li>
<li>
<p><a id="VUID-vkCmdDrawIndirectCountKHR-None-03125"></a>
If any <code>VkSampler</code> object that is accessed from a shader by the
<code>VkPipeline</code> bound to <code>VK_PIPELINE_BIND_POINT_GRAPHICS</code> uses
unnormalized coordinates, it <strong class="purple">must</strong> not be used to sample from any
<code>VkImage</code> with a <code>VkImageView</code> of the type
<code>VK_IMAGE_VIEW_TYPE_3D</code>, <code>VK_IMAGE_VIEW_TYPE_CUBE</code>,
<code>VK_IMAGE_VIEW_TYPE_1D_ARRAY</code>, <code>VK_IMAGE_VIEW_TYPE_2D_ARRAY</code> or
<code>VK_IMAGE_VIEW_TYPE_CUBE_ARRAY</code>, in any shader stage</p>
</li>
<li>
<p><a id="VUID-vkCmdDrawIndirectCountKHR-None-03126"></a>
If any <code>VkSampler</code> object that is accessed from a shader by the
<code>VkPipeline</code> bound to <code>VK_PIPELINE_BIND_POINT_GRAPHICS</code> uses
unnormalized coordinates, it <strong class="purple">must</strong> not be used with any of the SPIR-V
<code>OpImageSample*</code> or <code>OpImageSparseSample*</code> instructions with
<code>ImplicitLod</code>, <code>Dref</code> or <code>Proj</code> in their name, in any shader
stage</p>
</li>
<li>
<p><a id="VUID-vkCmdDrawIndirectCountKHR-None-03127"></a>
If any <code>VkSampler</code> object that is accessed from a shader by the
<code>VkPipeline</code> bound to <code>VK_PIPELINE_BIND_POINT_GRAPHICS</code> uses
unnormalized coordinates, it <strong class="purple">must</strong> not be used with any of the SPIR-V
<code>OpImageSample*</code> or <code>OpImageSparseSample*</code> instructions that includes a
LOD bias or any offset values, in any shader stage</p>
</li>
<li>
<p><a id="VUID-vkCmdDrawIndirectCountKHR-None-03128"></a>
If the <a href="vkspec.html#features-robustBufferAccess">robust buffer access</a> feature is
not enabled, and any shader stage in the <code>VkPipeline</code> object bound
to <code>VK_PIPELINE_BIND_POINT_GRAPHICS</code> accesses a uniform buffer, it
<strong class="purple">must</strong> not access values outside of the range of that buffer specified in
the bound descriptor set</p>
</li>
<li>
<p><a id="VUID-vkCmdDrawIndirectCountKHR-None-03129"></a>
If the <a href="vkspec.html#features-robustBufferAccess">robust buffer access</a> feature is
not enabled, and any shader stage in the <code>VkPipeline</code> object bound
to <code>VK_PIPELINE_BIND_POINT_GRAPHICS</code> accesses a storage buffer, it
<strong class="purple">must</strong> not access values outside of the range of that buffer specified in
the bound descriptor set</p>
</li>
<li>
<p><a id="VUID-vkCmdDrawIndirectCountKHR-None-02015"></a>
If a <code>VkImageView</code> is sampled with <code>VK_FILTER_LINEAR</code> as a
result of this command, then the image view&#8217;s
<a href="vkspec.html#resources-image-view-format-features">format features</a> <strong class="purple">must</strong> contain
<code>VK_FORMAT_FEATURE_SAMPLED_IMAGE_FILTER_LINEAR_BIT</code>.</p>
</li>
<li>
<p><a id="VUID-vkCmdDrawIndirectCountKHR-None-03131"></a>
Image subresources used as attachments in the current render pass <strong class="purple">must</strong>
not be accessed in any way other than as an attachment by this command.</p>
</li>
<li>
<p><a id="VUID-vkCmdDrawIndirectCountKHR-None-02016"></a>
If a <code>VkImageView</code> is sampled with <code>VK_FILTER_CUBIC_EXT</code> as a
result of this command, then the image view&#8217;s
<a href="vkspec.html#resources-image-view-format-features">format features</a> <strong class="purple">must</strong> contain
<code>VK_FORMAT_FEATURE_SAMPLED_IMAGE_FILTER_CUBIC_BIT_EXT</code></p>
</li>
<li>
<p><a id="VUID-vkCmdDrawIndirectCountKHR-filterCubic-02619"></a>
Any <a href="#VkImageView">VkImageView</a> being sampled with <code>VK_FILTER_CUBIC_EXT</code> as a
result of this command <strong class="purple">must</strong> have a <a href="#VkImageViewType">VkImageViewType</a> and format
that supports cubic filtering, as specified by
<code>VkFilterCubicImageViewImageFormatPropertiesEXT</code>::<code>filterCubic</code>
returned by <code>vkGetPhysicalDeviceImageFormatProperties2</code></p>
</li>
<li>
<p><a id="VUID-vkCmdDrawIndirectCountKHR-filterCubicMinmax-02620"></a>
Any <a href="#VkImageView">VkImageView</a> being sampled with <code>VK_FILTER_CUBIC_EXT</code> with
a reduction mode of either <code>VK_SAMPLER_REDUCTION_MODE_MIN_EXT</code> or
<code>VK_SAMPLER_REDUCTION_MODE_MAX_EXT</code> as a result of this command
<strong class="purple">must</strong> have a <a href="#VkImageViewType">VkImageViewType</a> and format that supports cubic
filtering together with minmax filtering, as specified by
<code>VkFilterCubicImageViewImageFormatPropertiesEXT</code>::<code>filterCubicMinmax</code>
returned by <code>vkGetPhysicalDeviceImageFormatProperties2</code></p>
</li>
<li>
<p><a id="VUID-vkCmdDrawIndirectCountKHR-maxMultiviewInstanceIndex-03132"></a>
If the draw is recorded in a render pass instance with multiview
enabled, the maximum instance index <strong class="purple">must</strong> be less than or equal to
<a href="#VkPhysicalDeviceMultiviewProperties">VkPhysicalDeviceMultiviewProperties</a>::<code>maxMultiviewInstanceIndex</code>.</p>
</li>
<li>
<p><a id="VUID-vkCmdDrawIndirectCountKHR-commandBuffer-02641"></a>
<code>commandBuffer</code> <strong class="purple">must</strong> not be a protected command buffer</p>
</li>
<li>
<p><a id="VUID-vkCmdDrawIndirectCountKHR-commandBuffer-03133"></a>
If <code>commandBuffer</code> is an unprotected command buffer, and any
pipeline stage in the <code>VkPipeline</code> object bound to
<code>VK_PIPELINE_BIND_POINT_GRAPHICS</code> reads from or writes to any image
or buffer, that image or buffer <strong class="purple">must</strong> not be a protected image or
protected buffer.</p>
</li>
<li>
<p><a id="VUID-vkCmdDrawIndirectCountKHR-sampleLocationsEnable-03171"></a>
If the bound graphics pipeline was created with
<a href="#VkPipelineSampleLocationsStateCreateInfoEXT">VkPipelineSampleLocationsStateCreateInfoEXT</a>::<code>sampleLocationsEnable</code>
set to <code>VK_TRUE</code> and the current subpass has a depth/stencil
attachment, then that attachment <strong class="purple">must</strong> have been created with the
<code>VK_IMAGE_CREATE_SAMPLE_LOCATIONS_COMPATIBLE_DEPTH_BIT_EXT</code> bit set</p>
</li>
<li>
<p><a id="VUID-vkCmdDrawIndirectCountKHR-flags-02045"></a>
Any <a href="#VkImage">VkImage</a> created with a <a href="#VkImageCreateInfo">VkImageCreateInfo</a>::<code>flags</code>
containing <code>VK_IMAGE_CREATE_CORNER_SAMPLED_BIT_NV</code> sampled as a
result of this command <strong class="purple">must</strong> only be sampled using a
<a href="#VkSamplerAddressMode">VkSamplerAddressMode</a> of
<code>VK_SAMPLER_ADDRESS_MODE_CLAMP_TO_EDGE</code>.</p>
</li>
</ul>
</div>
</div>
</div>
<div class="sidebarblock">
<div class="content">
<div class="title">Valid Usage (Implicit)</div>
<div class="ulist">
<ul>
<li>
<p><a id="VUID-vkCmdDrawIndirectCountKHR-commandBuffer-parameter"></a> <code>commandBuffer</code> <strong class="purple">must</strong> be a valid <code>VkCommandBuffer</code> handle</p>
</li>
<li>
<p><a id="VUID-vkCmdDrawIndirectCountKHR-buffer-parameter"></a> <code>buffer</code> <strong class="purple">must</strong> be a valid <code>VkBuffer</code> handle</p>
</li>
<li>
<p><a id="VUID-vkCmdDrawIndirectCountKHR-countBuffer-parameter"></a> <code>countBuffer</code> <strong class="purple">must</strong> be a valid <code>VkBuffer</code> handle</p>
</li>
<li>
<p><a id="VUID-vkCmdDrawIndirectCountKHR-commandBuffer-recording"></a> <code>commandBuffer</code> <strong class="purple">must</strong> be in the <a href="#commandbuffers-lifecycle">recording state</a></p>
</li>
<li>
<p><a id="VUID-vkCmdDrawIndirectCountKHR-commandBuffer-cmdpool"></a> The <code>VkCommandPool</code> that <code>commandBuffer</code> was allocated from <strong class="purple">must</strong> support graphics operations</p>
</li>
<li>
<p><a id="VUID-vkCmdDrawIndirectCountKHR-renderpass"></a> This command <strong class="purple">must</strong> only be called inside of a render pass instance</p>
</li>
<li>
<p><a id="VUID-vkCmdDrawIndirectCountKHR-commonparent"></a> Each of <code>buffer</code>, <code>commandBuffer</code>, and <code>countBuffer</code> <strong class="purple">must</strong> have been created, allocated, or retrieved from the same <code>VkDevice</code></p>
</li>
</ul>
</div>
</div>
</div>
<div class="sidebarblock">
<div class="content">
<div class="title">Host Synchronization</div>
<div class="ulist">
<ul>
<li>
<p>Host access to <code>commandBuffer</code> <strong class="purple">must</strong> be externally synchronized</p>
</li>
<li>
<p>Host access to the <code>VkCommandPool</code> that <code>commandBuffer</code> was allocated from <strong class="purple">must</strong> be externally synchronized</p>
</li>
</ul>
</div>
</div>
</div>
<div class="sidebarblock">
<div class="content">
<div class="title">Command Properties</div>
<table class="tableblock frame-all grid-all stretch">
<colgroup>
<col style="width: 25%;">
<col style="width: 25%;">
<col style="width: 25%;">
<col style="width: 25%;">
</colgroup>
<thead>
<tr>
<th class="tableblock halign-left valign-top"><a href="#VkCommandBufferLevel">Command Buffer Levels</a></th>
<th class="tableblock halign-left valign-top"><a href="#vkCmdBeginRenderPass">Render Pass Scope</a></th>
<th class="tableblock halign-left valign-top"><a href="#VkQueueFlagBits">Supported Queue Types</a></th>
<th class="tableblock halign-left valign-top"><a href="#synchronization-pipeline-stages-types">Pipeline Type</a></th>
</tr>
</thead>
<tbody>
<tr>
<td class="tableblock halign-left valign-top"><p class="tableblock">Primary<br>
Secondary</p></td>
<td class="tableblock halign-left valign-top"><p class="tableblock">Inside</p></td>
<td class="tableblock halign-left valign-top"><p class="tableblock">Graphics</p></td>
<td class="tableblock halign-left valign-top"><p class="tableblock">Graphics</p></td>
</tr>
</tbody>
</table>
</div>
</div>
</div>
<div class="sect3">
<h4 id="_see_also_52">See Also</h4>
<div class="paragraph">
<p><a href="#VkBuffer">VkBuffer</a>, <a href="#VkCommandBuffer">VkCommandBuffer</a>, <code>VkDeviceSize</code></p>
</div>
</div>
<div class="sect3">
<h4 id="_document_notes_52">Document Notes</h4>
<div class="paragraph">
<p>For more information, see the Vulkan Specification at URL</p>
</div>
<div class="paragraph">
<p><a href="https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#vkCmdDrawIndirectCountKHR" class="bare">https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#vkCmdDrawIndirectCountKHR</a></p>
</div>
<div class="paragraph">
<p>This page is extracted from the Vulkan Specification.
Fixes and changes should be made to the Specification, not directly.</p>
</div>
<div style="page-break-after: always;"></div>
</div>
</div>
<div class="sect2">
<h3 id="_vkcmddrawmeshtasksindirectcountnv3">vkCmdDrawMeshTasksIndirectCountNV(3)</h3>
<div class="sect3">
<h4 id="_name_53">Name</h4>
<div class="paragraph">
<p>vkCmdDrawMeshTasksIndirectCountNV - Perform an indirect mesh tasks draw with the draw count sourced from a buffer</p>
</div>
</div>
<div class="sect3">
<h4 id="_c_specification_53">C Specification</h4>
<div class="paragraph">
<p>To record an indirect mesh tasks draw with the draw count sourced from a
buffer, call:</p>
</div>
<div id="vkCmdDrawMeshTasksIndirectCountNV" class="listingblock">
<div class="content">
<pre class="highlight"><code class="language-c++" data-lang="c++">void vkCmdDrawMeshTasksIndirectCountNV(
    VkCommandBuffer                             commandBuffer,
    VkBuffer                                    buffer,
    VkDeviceSize                                offset,
    VkBuffer                                    countBuffer,
    VkDeviceSize                                countBufferOffset,
    uint32_t                                    maxDrawCount,
    uint32_t                                    stride);</code></pre>
</div>
</div>
</div>
<div class="sect3">
<h4 id="_parameters_53">Parameters</h4>
<div class="ulist">
<ul>
<li>
<p><code>commandBuffer</code> is the command buffer into which the command is
recorded.</p>
</li>
<li>
<p><code>buffer</code> is the buffer containing draw parameters.</p>
</li>
<li>
<p><code>offset</code> is the byte offset into <code>buffer</code> where parameters
begin.</p>
</li>
<li>
<p><code>countBuffer</code> is the buffer containing the draw count.</p>
</li>
<li>
<p><code>countBufferOffset</code> is the byte offset into <code>countBuffer</code> where
the draw count begins.</p>
</li>
<li>
<p><code>maxDrawCount</code> specifies the maximum number of draws that will be
executed.
The actual number of executed draw calls is the minimum of the count
specified in <code>countBuffer</code> and <code>maxDrawCount</code>.</p>
</li>
<li>
<p><code>stride</code> is the byte stride between successive sets of draw
parameters.</p>
</li>
</ul>
</div>
</div>
<div class="sect3">
<h4 id="_description_53">Description</h4>
<div class="paragraph">
<p><code>vkCmdDrawMeshTasksIndirectCountNV</code> behaves similarly to
<a href="#vkCmdDrawMeshTasksIndirectNV">vkCmdDrawMeshTasksIndirectNV</a> except that the draw count is read by the
device from a buffer during execution.
The command will read an unsigned 32-bit integer from <code>countBuffer</code>
located at <code>countBufferOffset</code> and use this as the draw count.</p>
</div>
<div class="sidebarblock">
<div class="content">
<div class="title">Valid Usage</div>
<div class="ulist">
<ul>
<li>
<p><a id="VUID-vkCmdDrawMeshTasksIndirectCountNV-buffer-02176"></a>
If <code>buffer</code> is non-sparse then it <strong class="purple">must</strong> be bound completely and
contiguously to a single <code>VkDeviceMemory</code> object</p>
</li>
<li>
<p><a id="VUID-vkCmdDrawMeshTasksIndirectCountNV-buffer-02177"></a>
<code>buffer</code> <strong class="purple">must</strong> have been created with the
<code>VK_BUFFER_USAGE_INDIRECT_BUFFER_BIT</code> bit set</p>
</li>
<li>
<p><a id="VUID-vkCmdDrawMeshTasksIndirectCountNV-countBuffer-02178"></a>
If <code>countBuffer</code> is non-sparse then it <strong class="purple">must</strong> be bound completely and
contiguously to a single <code>VkDeviceMemory</code> object</p>
</li>
<li>
<p><a id="VUID-vkCmdDrawMeshTasksIndirectCountNV-countBuffer-02179"></a>
<code>countBuffer</code> <strong class="purple">must</strong> have been created with the
<code>VK_BUFFER_USAGE_INDIRECT_BUFFER_BIT</code> bit set</p>
</li>
<li>
<p><a id="VUID-vkCmdDrawMeshTasksIndirectCountNV-offset-02180"></a>
<code>offset</code> <strong class="purple">must</strong> be a multiple of <code>4</code></p>
</li>
<li>
<p><a id="VUID-vkCmdDrawMeshTasksIndirectCountNV-countBufferOffset-02181"></a>
<code>countBufferOffset</code> <strong class="purple">must</strong> be a multiple of <code>4</code></p>
</li>
<li>
<p><a id="VUID-vkCmdDrawMeshTasksIndirectCountNV-stride-02182"></a>
<code>stride</code> <strong class="purple">must</strong> be a multiple of <code>4</code> and <strong class="purple">must</strong> be greater than or
equal to <code>sizeof</code>(<code>VkDrawMeshTasksIndirectCommandNV</code>)</p>
</li>
<li>
<p><a id="VUID-vkCmdDrawMeshTasksIndirectCountNV-maxDrawCount-02183"></a>
If <code>maxDrawCount</code> is greater than or equal to <code>1</code>,
<span class="eq">(<code>stride</code> × (<code>maxDrawCount</code> - 1) +  <code>offset</code>
+  <code>sizeof</code>(<code>VkDrawMeshTasksIndirectCommandNV</code>))</span> <strong class="purple">must</strong> be
less than or equal to the size of <code>buffer</code></p>
</li>
<li>
<p><a id="VUID-vkCmdDrawMeshTasksIndirectCountNV-renderPass-02184"></a>
The current render pass <strong class="purple">must</strong> be <a href="vkspec.html#renderpass-compatibility">compatible</a>
with the <code>renderPass</code> member of the
<code>VkGraphicsPipelineCreateInfo</code> structure specified when creating the
<code>VkPipeline</code> currently bound to
<code>VK_PIPELINE_BIND_POINT_GRAPHICS</code>.</p>
</li>
<li>
<p><a id="VUID-vkCmdDrawMeshTasksIndirectCountNV-subpass-02185"></a>
The subpass index of the current render pass <strong class="purple">must</strong> be equal to the
<code>subpass</code> member of the <code>VkGraphicsPipelineCreateInfo</code> structure
specified when creating the <code>VkPipeline</code> currently bound to
<code>VK_PIPELINE_BIND_POINT_GRAPHICS</code>.</p>
</li>
<li>
<p><a id="VUID-vkCmdDrawMeshTasksIndirectCountNV-None-02186"></a>
For each set <em>n</em> that is statically used by the <code>VkPipeline</code>
currently bound to <code>VK_PIPELINE_BIND_POINT_GRAPHICS</code>, a descriptor
set <strong class="purple">must</strong> have been bound to <em>n</em> at
<code>VK_PIPELINE_BIND_POINT_GRAPHICS</code>, with a <code>VkPipelineLayout</code>
that is compatible for set <em>n</em>, with the <code>VkPipelineLayout</code> used to
create the current <code>VkPipeline</code>, as described in
<a href="vkspec.html#descriptorsets-compatibility" class="bare">html/vkspec.html#descriptorsets-compatibility</a></p>
</li>
<li>
<p><a id="VUID-vkCmdDrawMeshTasksIndirectCountNV-None-02187"></a>
For each push constant that is statically used by the <code>VkPipeline</code>
currently bound to <code>VK_PIPELINE_BIND_POINT_GRAPHICS</code>, a push
constant value <strong class="purple">must</strong> have been set for
<code>VK_PIPELINE_BIND_POINT_GRAPHICS</code>, with a <code>VkPipelineLayout</code>
that is compatible for push constants, with the <code>VkPipelineLayout</code>
used to create the current <code>VkPipeline</code>, as described in
<a href="vkspec.html#descriptorsets-compatibility" class="bare">html/vkspec.html#descriptorsets-compatibility</a></p>
</li>
<li>
<p><a id="VUID-vkCmdDrawMeshTasksIndirectCountNV-None-02188"></a>
Descriptors in each bound descriptor set, specified via
<code>vkCmdBindDescriptorSets</code>, <strong class="purple">must</strong> be valid if they are statically
used by the currently bound <code>VkPipeline</code> object, specified via
<code>vkCmdBindPipeline</code></p>
</li>
<li>
<p><a id="VUID-vkCmdDrawMeshTasksIndirectCountNV-None-02189"></a>
A valid graphics pipeline <strong class="purple">must</strong> be bound to the current command buffer
with <code>VK_PIPELINE_BIND_POINT_GRAPHICS</code></p>
</li>
<li>
<p><a id="VUID-vkCmdDrawMeshTasksIndirectCountNV-None-02190"></a>
If the <code>VkPipeline</code> object currently bound to
<code>VK_PIPELINE_BIND_POINT_GRAPHICS</code> requires any dynamic state, that
state <strong class="purple">must</strong> have been set on the current command buffer</p>
</li>
<li>
<p><a id="VUID-vkCmdDrawMeshTasksIndirectCountNV-countBuffer-02191"></a>
If the count stored in <code>countBuffer</code> is equal to <code>1</code>,
<span class="eq">(<code>offset</code> + 
<code>sizeof</code>(<code>VkDrawMeshTasksIndirectCommandNV</code>))</span> <strong class="purple">must</strong> be less than
or equal to the size of <code>buffer</code></p>
</li>
<li>
<p><a id="VUID-vkCmdDrawMeshTasksIndirectCountNV-countBuffer-02192"></a>
If the count stored in <code>countBuffer</code> is greater than <code>1</code>,
<span class="eq">(<code>stride</code> × (<code>drawCount</code> - 1) +  <code>offset</code>
+  <code>sizeof</code>(<code>VkDrawMeshTasksIndirectCommandNV</code>))</span> <strong class="purple">must</strong> be
less than or equal to the size of <code>buffer</code></p>
</li>
<li>
<p><a id="VUID-vkCmdDrawMeshTasksIndirectCountNV-countBuffer-02193"></a>
The count stored in <code>countBuffer</code> <strong class="purple">must</strong> be less than or equal to
<code>VkPhysicalDeviceLimits</code>::<code>maxDrawIndirectCount</code></p>
</li>
<li>
<p><a id="VUID-vkCmdDrawMeshTasksIndirectCountNV-None-02194"></a>
Every input attachment used by the current subpass <strong class="purple">must</strong> be bound to the
pipeline via a descriptor set</p>
</li>
<li>
<p><a id="VUID-vkCmdDrawMeshTasksIndirectCountNV-None-02195"></a>
If any <code>VkSampler</code> object that is accessed from a shader by the
<code>VkPipeline</code> currently bound to
<code>VK_PIPELINE_BIND_POINT_GRAPHICS</code> uses unnormalized coordinates, it
<strong class="purple">must</strong> not be used to sample from any <code>VkImage</code> with a
<code>VkImageView</code> of the type <code>VK_IMAGE_VIEW_TYPE_3D</code>,
<code>VK_IMAGE_VIEW_TYPE_CUBE</code>, <code>VK_IMAGE_VIEW_TYPE_1D_ARRAY</code>,
<code>VK_IMAGE_VIEW_TYPE_2D_ARRAY</code> or
<code>VK_IMAGE_VIEW_TYPE_CUBE_ARRAY</code>, in any shader stage</p>
</li>
<li>
<p><a id="VUID-vkCmdDrawMeshTasksIndirectCountNV-None-02196"></a>
If any <code>VkSampler</code> object that is accessed from a shader by the
<code>VkPipeline</code> currently bound to
<code>VK_PIPELINE_BIND_POINT_GRAPHICS</code> uses unnormalized coordinates, it
<strong class="purple">must</strong> not be used with any of the SPIR-V <code>OpImageSample*</code> or
<code>OpImageSparseSample*</code> instructions with <code>ImplicitLod</code>, <code>Dref</code> or
<code>Proj</code> in their name, in any shader stage</p>
</li>
<li>
<p><a id="VUID-vkCmdDrawMeshTasksIndirectCountNV-None-02197"></a>
If any <code>VkSampler</code> object that is accessed from a shader by the
<code>VkPipeline</code> currently bound to
<code>VK_PIPELINE_BIND_POINT_GRAPHICS</code> uses unnormalized coordinates, it
<strong class="purple">must</strong> not be used with any of the SPIR-V <code>OpImageSample*</code> or
<code>OpImageSparseSample*</code> instructions that includes a LOD bias or any
offset values, in any shader stage</p>
</li>
<li>
<p><a id="VUID-vkCmdDrawMeshTasksIndirectCountNV-None-02198"></a>
If the <a href="vkspec.html#features-robustBufferAccess">robust buffer access</a> feature is
not enabled, and any shader stage in the <code>VkPipeline</code> object
currently bound to <code>VK_PIPELINE_BIND_POINT_GRAPHICS</code> accesses a
uniform buffer, it <strong class="purple">must</strong> not access values outside of the range of that
buffer specified in the currently bound descriptor set</p>
</li>
<li>
<p><a id="VUID-vkCmdDrawMeshTasksIndirectCountNV-None-02199"></a>
If the <a href="vkspec.html#features-robustBufferAccess">robust buffer access</a> feature is
not enabled, and any shader stage in the <code>VkPipeline</code> object
currently bound to <code>VK_PIPELINE_BIND_POINT_GRAPHICS</code> accesses a
storage buffer, it <strong class="purple">must</strong> not access values outside of the range of that
buffer specified in the currently bound descriptor set</p>
</li>
<li>
<p><a id="VUID-vkCmdDrawMeshTasksIndirectCountNV-linearTilingFeatures-02200"></a>
Any <code>VkImageView</code> being sampled with <code>VK_FILTER_LINEAR</code> as a
result of this command <strong class="purple">must</strong> be of a format which supports linear
filtering, as specified by the
<code>VK_FORMAT_FEATURE_SAMPLED_IMAGE_FILTER_LINEAR_BIT</code> flag in
<code>VkFormatProperties</code>::<code>linearTilingFeatures</code> (for a linear
image) or <code>VkFormatProperties</code>::<code>optimalTilingFeatures</code>(for an
optimally tiled image) returned by
<code>vkGetPhysicalDeviceFormatProperties</code></p>
</li>
<li>
<p><a id="VUID-vkCmdDrawMeshTasksIndirectCountNV-None-02201"></a>
Image subresources used as attachments in the current render pass <strong class="purple">must</strong>
not be accessed in any way other than as an attachment by this command.</p>
</li>
<li>
<p><a id="VUID-vkCmdDrawMeshTasksIndirectCountNV-maxMultiviewInstanceIndex-02202"></a>
If the draw is recorded in a render pass instance with multiview
enabled, the maximum instance index <strong class="purple">must</strong> be less than or equal to
<a href="#VkPhysicalDeviceMultiviewProperties">VkPhysicalDeviceMultiviewProperties</a>::<code>maxMultiviewInstanceIndex</code>.</p>
</li>
<li>
<p><a id="VUID-vkCmdDrawMeshTasksIndirectCountNV-commandBuffer-02203"></a>
If <code>commandBuffer</code> is an unprotected command buffer, and any
pipeline stage in the <code>VkPipeline</code> object currently bound to
<code>VK_PIPELINE_BIND_POINT_GRAPHICS</code> reads from or writes to any image
or buffer, that image or buffer <strong class="purple">must</strong> not be a protected image or
protected buffer.</p>
</li>
<li>
<p><a id="VUID-vkCmdDrawMeshTasksIndirectCountNV-commandBuffer-02204"></a>
If <code>commandBuffer</code> is a protected command buffer, and any pipeline
stage in the <code>VkPipeline</code> object currently bound to
<code>VK_PIPELINE_BIND_POINT_GRAPHICS</code> writes to any image or buffer,
that image or buffer <strong class="purple">must</strong> not be an unprotected image or unprotected
buffer.</p>
</li>
<li>
<p><a id="VUID-vkCmdDrawMeshTasksIndirectCountNV-commandBuffer-02205"></a>
If <code>commandBuffer</code> is a protected command buffer, and any pipeline
stage other than the framebuffer-space pipeline stages in the
<code>VkPipeline</code> object currently bound to
<code>VK_PIPELINE_BIND_POINT_GRAPHICS</code> reads from or writes to any image
or buffer, the image or buffer <strong class="purple">must</strong> not be a protected image or
protected buffer.</p>
</li>
<li>
<p><a id="VUID-vkCmdDrawMeshTasksIndirectCountNV-sampleLocationsEnable-02206"></a>
If the currently bound graphics pipeline was created with
<a href="#VkPipelineSampleLocationsStateCreateInfoEXT">VkPipelineSampleLocationsStateCreateInfoEXT</a>::<code>sampleLocationsEnable</code>
set to <code>VK_TRUE</code> and the current subpass has a depth/stencil
attachment, then that attachment <strong class="purple">must</strong> have been created with the
<code>VK_IMAGE_CREATE_SAMPLE_LOCATIONS_COMPATIBLE_DEPTH_BIT_EXT</code> bit set</p>
</li>
</ul>
</div>
</div>
</div>
<div class="sidebarblock">
<div class="content">
<div class="title">Valid Usage (Implicit)</div>
<div class="ulist">
<ul>
<li>
<p><a id="VUID-vkCmdDrawMeshTasksIndirectCountNV-commandBuffer-parameter"></a> <code>commandBuffer</code> <strong class="purple">must</strong> be a valid <code>VkCommandBuffer</code> handle</p>
</li>
<li>
<p><a id="VUID-vkCmdDrawMeshTasksIndirectCountNV-buffer-parameter"></a> <code>buffer</code> <strong class="purple">must</strong> be a valid <code>VkBuffer</code> handle</p>
</li>
<li>
<p><a id="VUID-vkCmdDrawMeshTasksIndirectCountNV-countBuffer-parameter"></a> <code>countBuffer</code> <strong class="purple">must</strong> be a valid <code>VkBuffer</code> handle</p>
</li>
<li>
<p><a id="VUID-vkCmdDrawMeshTasksIndirectCountNV-commandBuffer-recording"></a> <code>commandBuffer</code> <strong class="purple">must</strong> be in the <a href="#commandbuffers-lifecycle">recording state</a></p>
</li>
<li>
<p><a id="VUID-vkCmdDrawMeshTasksIndirectCountNV-commandBuffer-cmdpool"></a> The <code>VkCommandPool</code> that <code>commandBuffer</code> was allocated from <strong class="purple">must</strong> support graphics operations</p>
</li>
<li>
<p><a id="VUID-vkCmdDrawMeshTasksIndirectCountNV-renderpass"></a> This command <strong class="purple">must</strong> only be called inside of a render pass instance</p>
</li>
<li>
<p><a id="VUID-vkCmdDrawMeshTasksIndirectCountNV-commonparent"></a> Each of <code>buffer</code>, <code>commandBuffer</code>, and <code>countBuffer</code> <strong class="purple">must</strong> have been created, allocated, or retrieved from the same <code>VkDevice</code></p>
</li>
</ul>
</div>
</div>
</div>
<div class="sidebarblock">
<div class="content">
<div class="title">Host Synchronization</div>
<div class="ulist">
<ul>
<li>
<p>Host access to <code>commandBuffer</code> <strong class="purple">must</strong> be externally synchronized</p>
</li>
<li>
<p>Host access to the <code>VkCommandPool</code> that <code>commandBuffer</code> was allocated from <strong class="purple">must</strong> be externally synchronized</p>
</li>
</ul>
</div>
</div>
</div>
<div class="sidebarblock">
<div class="content">
<div class="title">Command Properties</div>
<table class="tableblock frame-all grid-all stretch">
<colgroup>
<col style="width: 25%;">
<col style="width: 25%;">
<col style="width: 25%;">
<col style="width: 25%;">
</colgroup>
<thead>
<tr>
<th class="tableblock halign-left valign-top"><a href="#VkCommandBufferLevel">Command Buffer Levels</a></th>
<th class="tableblock halign-left valign-top"><a href="#vkCmdBeginRenderPass">Render Pass Scope</a></th>
<th class="tableblock halign-left valign-top"><a href="#VkQueueFlagBits">Supported Queue Types</a></th>
<th class="tableblock halign-left valign-top"><a href="#synchronization-pipeline-stages-types">Pipeline Type</a></th>
</tr>
</thead>
<tbody>
<tr>
<td class="tableblock halign-left valign-top"><p class="tableblock">Primary<br>
Secondary</p></td>
<td class="tableblock halign-left valign-top"><p class="tableblock">Inside</p></td>
<td class="tableblock halign-left valign-top"><p class="tableblock">Graphics</p></td>
<td class="tableblock halign-left valign-top"><p class="tableblock">Graphics</p></td>
</tr>
</tbody>
</table>
</div>
</div>
</div>
<div class="sect3">
<h4 id="_see_also_53">See Also</h4>
<div class="paragraph">
<p><a href="#VkBuffer">VkBuffer</a>, <a href="#VkCommandBuffer">VkCommandBuffer</a>, <code>VkDeviceSize</code></p>
</div>
</div>
<div class="sect3">
<h4 id="_document_notes_53">Document Notes</h4>
<div class="paragraph">
<p>For more information, see the Vulkan Specification at URL</p>
</div>
<div class="paragraph">
<p><a href="https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#vkCmdDrawMeshTasksIndirectCountNV" class="bare">https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#vkCmdDrawMeshTasksIndirectCountNV</a></p>
</div>
<div class="paragraph">
<p>This page is extracted from the Vulkan Specification.
Fixes and changes should be made to the Specification, not directly.</p>
</div>
<div style="page-break-after: always;"></div>
</div>
</div>
<div class="sect2">
<h3 id="_vkcmddrawmeshtasksindirectnv3">vkCmdDrawMeshTasksIndirectNV(3)</h3>
<div class="sect3">
<h4 id="_name_54">Name</h4>
<div class="paragraph">
<p>vkCmdDrawMeshTasksIndirectNV - Issue an indirect mesh tasks draw into a command buffer</p>
</div>
</div>
<div class="sect3">
<h4 id="_c_specification_54">C Specification</h4>
<div class="paragraph">
<p>To record an indirect mesh tasks draw, call:</p>
</div>
<div id="vkCmdDrawMeshTasksIndirectNV" class="listingblock">
<div class="content">
<pre class="highlight"><code class="language-c++" data-lang="c++">void vkCmdDrawMeshTasksIndirectNV(
    VkCommandBuffer                             commandBuffer,
    VkBuffer                                    buffer,
    VkDeviceSize                                offset,
    uint32_t                                    drawCount,
    uint32_t                                    stride);</code></pre>
</div>
</div>
</div>
<div class="sect3">
<h4 id="_parameters_54">Parameters</h4>
<div class="ulist">
<ul>
<li>
<p><code>commandBuffer</code> is the command buffer into which the command is
recorded.</p>
</li>
<li>
<p><code>buffer</code> is the buffer containing draw parameters.</p>
</li>
<li>
<p><code>offset</code> is the byte offset into <code>buffer</code> where parameters
begin.</p>
</li>
<li>
<p><code>drawCount</code> is the number of draws to execute, and <strong class="purple">can</strong> be zero.</p>
</li>
<li>
<p><code>stride</code> is the byte stride between successive sets of draw
parameters.</p>
</li>
</ul>
</div>
</div>
<div class="sect3">
<h4 id="_description_54">Description</h4>
<div class="paragraph">
<p><code>vkCmdDrawMeshTasksIndirectNV</code> behaves similarly to
<a href="#vkCmdDrawMeshTasksNV">vkCmdDrawMeshTasksNV</a> except that the parameters are read by the device
from a buffer during execution.
<code>drawCount</code> draws are executed by the command, with parameters taken
from <code>buffer</code> starting at <code>offset</code> and increasing by <code>stride</code>
bytes for each successive draw.
The parameters of each draw are encoded in an array of
<a href="#VkDrawMeshTasksIndirectCommandNV">VkDrawMeshTasksIndirectCommandNV</a> structures.
If <code>drawCount</code> is less than or equal to one, <code>stride</code> is ignored.</p>
</div>
<div class="sidebarblock">
<div class="content">
<div class="title">Valid Usage</div>
<div class="ulist">
<ul>
<li>
<p><a id="VUID-vkCmdDrawMeshTasksIndirectNV-buffer-02143"></a>
If <code>buffer</code> is non-sparse then it <strong class="purple">must</strong> be bound completely and
contiguously to a single <code>VkDeviceMemory</code> object</p>
</li>
<li>
<p><a id="VUID-vkCmdDrawMeshTasksIndirectNV-buffer-02144"></a>
<code>buffer</code> <strong class="purple">must</strong> have been created with the
<code>VK_BUFFER_USAGE_INDIRECT_BUFFER_BIT</code> bit set</p>
</li>
<li>
<p><a id="VUID-vkCmdDrawMeshTasksIndirectNV-offset-02145"></a>
<code>offset</code> <strong class="purple">must</strong> be a multiple of <code>4</code></p>
</li>
<li>
<p><a id="VUID-vkCmdDrawMeshTasksIndirectNV-drawCount-02146"></a>
If <code>drawCount</code> is greater than <code>1</code>, <code>stride</code> <strong class="purple">must</strong> be a multiple
of <code>4</code> and <strong class="purple">must</strong> be greater than or equal to
<code>sizeof</code>(<code>VkDrawMeshTasksIndirectCommandNV</code>)</p>
</li>
<li>
<p><a id="VUID-vkCmdDrawMeshTasksIndirectNV-drawCount-02147"></a>
If the <a href="vkspec.html#features-multiDrawIndirect">multi-draw indirect</a> feature is not
enabled, <code>drawCount</code> <strong class="purple">must</strong> be <code>0</code> or <code>1</code></p>
</li>
<li>
<p><a id="VUID-vkCmdDrawMeshTasksIndirectNV-renderPass-02148"></a>
The current render pass <strong class="purple">must</strong> be <a href="vkspec.html#renderpass-compatibility">compatible</a>
with the <code>renderPass</code> member of the
<code>VkGraphicsPipelineCreateInfo</code> structure specified when creating the
<code>VkPipeline</code> currently bound to
<code>VK_PIPELINE_BIND_POINT_GRAPHICS</code>.</p>
</li>
<li>
<p><a id="VUID-vkCmdDrawMeshTasksIndirectNV-subpass-02149"></a>
The subpass index of the current render pass <strong class="purple">must</strong> be equal to the
<code>subpass</code> member of the <code>VkGraphicsPipelineCreateInfo</code> structure
specified when creating the <code>VkPipeline</code> currently bound to
<code>VK_PIPELINE_BIND_POINT_GRAPHICS</code>.</p>
</li>
<li>
<p><a id="VUID-vkCmdDrawMeshTasksIndirectNV-None-02150"></a>
For each set <em>n</em> that is statically used by the <code>VkPipeline</code>
currently bound to <code>VK_PIPELINE_BIND_POINT_GRAPHICS</code>, a descriptor
set <strong class="purple">must</strong> have been bound to <em>n</em> at
<code>VK_PIPELINE_BIND_POINT_GRAPHICS</code>, with a <code>VkPipelineLayout</code>
that is compatible for set <em>n</em>, with the <code>VkPipelineLayout</code> used to
create the current <code>VkPipeline</code>, as described in
<a href="vkspec.html#descriptorsets-compatibility" class="bare">html/vkspec.html#descriptorsets-compatibility</a></p>
</li>
<li>
<p><a id="VUID-vkCmdDrawMeshTasksIndirectNV-None-02151"></a>
For each push constant that is statically used by the <code>VkPipeline</code>
currently bound to <code>VK_PIPELINE_BIND_POINT_GRAPHICS</code>, a push
constant value <strong class="purple">must</strong> have been set for
<code>VK_PIPELINE_BIND_POINT_GRAPHICS</code>, with a <code>VkPipelineLayout</code>
that is compatible for push constants, with the <code>VkPipelineLayout</code>
used to create the current <code>VkPipeline</code>, as described in
<a href="vkspec.html#descriptorsets-compatibility" class="bare">html/vkspec.html#descriptorsets-compatibility</a></p>
</li>
<li>
<p><a id="VUID-vkCmdDrawMeshTasksIndirectNV-None-02152"></a>
Descriptors in each bound descriptor set, specified via
<code>vkCmdBindDescriptorSets</code>, <strong class="purple">must</strong> be valid if they are statically
used by the currently bound <code>VkPipeline</code> object, specified via
<code>vkCmdBindPipeline</code></p>
</li>
<li>
<p><a id="VUID-vkCmdDrawMeshTasksIndirectNV-None-02153"></a>
All vertex input bindings accessed via vertex input variables declared
in the vertex shader entry point&#8217;s interface <strong class="purple">must</strong> have valid buffers
bound</p>
</li>
<li>
<p><a id="VUID-vkCmdDrawMeshTasksIndirectNV-None-02154"></a>
A valid graphics pipeline <strong class="purple">must</strong> be bound to the current command buffer
with <code>VK_PIPELINE_BIND_POINT_GRAPHICS</code></p>
</li>
<li>
<p><a id="VUID-vkCmdDrawMeshTasksIndirectNV-None-02155"></a>
If the <code>VkPipeline</code> object currently bound to
<code>VK_PIPELINE_BIND_POINT_GRAPHICS</code> requires any dynamic state, that
state <strong class="purple">must</strong> have been set on the current command buffer</p>
</li>
<li>
<p><a id="VUID-vkCmdDrawMeshTasksIndirectNV-drawCount-02156"></a>
If <code>drawCount</code> is equal to <code>1</code>, <span class="eq">(<code>offset</code> + 
<code>sizeof</code>(<a href="#VkDrawMeshTasksIndirectCommandNV">VkDrawMeshTasksIndirectCommandNV</a>))</span> <strong class="purple">must</strong> be less than
or equal to the size of <code>buffer</code></p>
</li>
<li>
<p><a id="VUID-vkCmdDrawMeshTasksIndirectNV-drawCount-02157"></a>
If <code>drawCount</code> is greater than <code>1</code>, <span class="eq">(<code>stride</code> ×
(<code>drawCount</code> - 1) +  <code>offset</code> + 
<code>sizeof</code>(<a href="#VkDrawMeshTasksIndirectCommandNV">VkDrawMeshTasksIndirectCommandNV</a>))</span> <strong class="purple">must</strong> be less than
or equal to the size of <code>buffer</code></p>
</li>
<li>
<p><a id="VUID-vkCmdDrawMeshTasksIndirectNV-drawCount-02158"></a>
<code>drawCount</code> <strong class="purple">must</strong> be less than or equal to
<code>VkPhysicalDeviceLimits</code>::<code>maxDrawIndirectCount</code></p>
</li>
<li>
<p><a id="VUID-vkCmdDrawMeshTasksIndirectNV-None-02159"></a>
Every input attachment used by the current subpass <strong class="purple">must</strong> be bound to the
pipeline via a descriptor set</p>
</li>
<li>
<p><a id="VUID-vkCmdDrawMeshTasksIndirectNV-None-02160"></a>
If any <code>VkSampler</code> object that is accessed from a shader by the
<code>VkPipeline</code> currently bound to
<code>VK_PIPELINE_BIND_POINT_GRAPHICS</code> uses unnormalized coordinates, it
<strong class="purple">must</strong> not be used to sample from any <code>VkImage</code> with a
<code>VkImageView</code> of the type <code>VK_IMAGE_VIEW_TYPE_3D</code>,
<code>VK_IMAGE_VIEW_TYPE_CUBE</code>, <code>VK_IMAGE_VIEW_TYPE_1D_ARRAY</code>,
<code>VK_IMAGE_VIEW_TYPE_2D_ARRAY</code> or
<code>VK_IMAGE_VIEW_TYPE_CUBE_ARRAY</code>, in any shader stage</p>
</li>
<li>
<p><a id="VUID-vkCmdDrawMeshTasksIndirectNV-None-02161"></a>
If any <code>VkSampler</code> object that is accessed from a shader by the
<code>VkPipeline</code> currently bound to
<code>VK_PIPELINE_BIND_POINT_GRAPHICS</code> uses unnormalized coordinates, it
<strong class="purple">must</strong> not be used with any of the SPIR-V <code>OpImageSample*</code> or
<code>OpImageSparseSample*</code> instructions with <code>ImplicitLod</code>, <code>Dref</code> or
<code>Proj</code> in their name, in any shader stage</p>
</li>
<li>
<p><a id="VUID-vkCmdDrawMeshTasksIndirectNV-None-02162"></a>
If any <code>VkSampler</code> object that is accessed from a shader by the
<code>VkPipeline</code> currently bound to
<code>VK_PIPELINE_BIND_POINT_GRAPHICS</code> uses unnormalized coordinates, it
<strong class="purple">must</strong> not be used with any of the SPIR-V <code>OpImageSample*</code> or
<code>OpImageSparseSample*</code> instructions that includes a LOD bias or any
offset values, in any shader stage</p>
</li>
<li>
<p><a id="VUID-vkCmdDrawMeshTasksIndirectNV-None-02163"></a>
If the <a href="vkspec.html#features-robustBufferAccess">robust buffer access</a> feature is
not enabled, and any shader stage in the <code>VkPipeline</code> object
currently bound to <code>VK_PIPELINE_BIND_POINT_GRAPHICS</code> accesses a
uniform buffer, it <strong class="purple">must</strong> not access values outside of the range of that
buffer specified in the currently bound descriptor set</p>
</li>
<li>
<p><a id="VUID-vkCmdDrawMeshTasksIndirectNV-None-02164"></a>
If the <a href="vkspec.html#features-robustBufferAccess">robust buffer access</a> feature is
not enabled, and any shader stage in the <code>VkPipeline</code> object
currently bound to <code>VK_PIPELINE_BIND_POINT_GRAPHICS</code> accesses a
storage buffer, it <strong class="purple">must</strong> not access values outside of the range of that
buffer specified in the currently bound descriptor set</p>
</li>
<li>
<p><a id="VUID-vkCmdDrawMeshTasksIndirectNV-linearTilingFeatures-02165"></a>
Any <code>VkImageView</code> being sampled with <code>VK_FILTER_LINEAR</code> as a
result of this command <strong class="purple">must</strong> be of a format which supports linear
filtering, as specified by the
<code>VK_FORMAT_FEATURE_SAMPLED_IMAGE_FILTER_LINEAR_BIT</code> flag in
<code>VkFormatProperties</code>::<code>linearTilingFeatures</code> (for a linear
image) or <code>VkFormatProperties</code>::<code>optimalTilingFeatures</code>(for an
optimally tiled image) returned by
<code>vkGetPhysicalDeviceFormatProperties</code></p>
</li>
<li>
<p><a id="VUID-vkCmdDrawMeshTasksIndirectNV-None-02166"></a>
Image subresources used as attachments in the current render pass <strong class="purple">must</strong>
not be accessed in any way other than as an attachment by this command.</p>
</li>
<li>
<p><a id="VUID-vkCmdDrawMeshTasksIndirectNV-linearTilingFeatures-02167"></a>
Any <a href="#VkImageView">VkImageView</a> being sampled with <code>VK_FILTER_CUBIC_IMG</code> as a
result of this command <strong class="purple">must</strong> be of a format which supports cubic
filtering, as specified by the
<code>VK_FORMAT_FEATURE_SAMPLED_IMAGE_FILTER_CUBIC_BIT_IMG</code> flag in
<code>VkFormatProperties</code>::<code>linearTilingFeatures</code> (for a linear
image) or <code>VkFormatProperties</code>::<code>optimalTilingFeatures</code>(for an
optimally tiled image) returned by
<code>vkGetPhysicalDeviceFormatProperties</code></p>
</li>
<li>
<p><a id="VUID-vkCmdDrawMeshTasksIndirectNV-None-02168"></a>
Any <a href="#VkImageView">VkImageView</a> being sampled with <code>VK_FILTER_CUBIC_IMG</code> as a
result of this command <strong class="purple">must</strong> not have a <a href="#VkImageViewType">VkImageViewType</a> of
<code>VK_IMAGE_VIEW_TYPE_3D</code>, <code>VK_IMAGE_VIEW_TYPE_CUBE</code>, or
<code>VK_IMAGE_VIEW_TYPE_CUBE_ARRAY</code></p>
</li>
<li>
<p><a id="VUID-vkCmdDrawMeshTasksIndirectNV-maxMultiviewInstanceIndex-02169"></a>
If the draw is recorded in a render pass instance with multiview
enabled, the maximum instance index <strong class="purple">must</strong> be less than or equal to
<a href="#VkPhysicalDeviceMultiviewProperties">VkPhysicalDeviceMultiviewProperties</a>::<code>maxMultiviewInstanceIndex</code>.</p>
</li>
<li>
<p><a id="VUID-vkCmdDrawMeshTasksIndirectNV-commandBuffer-02170"></a>
If <code>commandBuffer</code> is an unprotected command buffer, and any
pipeline stage in the <code>VkPipeline</code> object currently bound to
<code>VK_PIPELINE_BIND_POINT_GRAPHICS</code> reads from or writes to any image
or buffer, that image or buffer <strong class="purple">must</strong> not be a protected image or
protected buffer.</p>
</li>
<li>
<p><a id="VUID-vkCmdDrawMeshTasksIndirectNV-commandBuffer-02171"></a>
If <code>commandBuffer</code> is a protected command buffer, and any pipeline
stage in the <code>VkPipeline</code> object currently bound to
<code>VK_PIPELINE_BIND_POINT_GRAPHICS</code> writes to any image or buffer,
that image or buffer <strong class="purple">must</strong> not be an unprotected image or unprotected
buffer.</p>
</li>
<li>
<p><a id="VUID-vkCmdDrawMeshTasksIndirectNV-commandBuffer-02172"></a>
If <code>commandBuffer</code> is a protected command buffer, and any pipeline
stage other than the framebuffer-space pipeline stages in the
<code>VkPipeline</code> object currently bound to
<code>VK_PIPELINE_BIND_POINT_GRAPHICS</code> reads from or writes to any image
or buffer, the image or buffer <strong class="purple">must</strong> not be a protected image or
protected buffer.</p>
</li>
<li>
<p><a id="VUID-vkCmdDrawMeshTasksIndirectNV-sampleLocationsEnable-02173"></a>
If the currently bound graphics pipeline was created with
<a href="#VkPipelineSampleLocationsStateCreateInfoEXT">VkPipelineSampleLocationsStateCreateInfoEXT</a>::<code>sampleLocationsEnable</code>
set to <code>VK_TRUE</code> and the current subpass has a depth/stencil
attachment, then that attachment <strong class="purple">must</strong> have been created with the
<code>VK_IMAGE_CREATE_SAMPLE_LOCATIONS_COMPATIBLE_DEPTH_BIT_EXT</code> bit set</p>
</li>
<li>
<p><a id="VUID-vkCmdDrawMeshTasksIndirectNV-flags-02174"></a>
Any <a href="#VkImage">VkImage</a> created with a <a href="#VkImageCreateInfo">VkImageCreateInfo</a>::<code>flags</code>
containing <code>VK_IMAGE_CREATE_CORNER_SAMPLED_BIT_NV</code> sampled as a
result of this command <strong class="purple">must</strong> only be sampled using a
<a href="#VkSamplerAddressMode">VkSamplerAddressMode</a> of
<code>VK_SAMPLER_ADDRESS_MODE_CLAMP_TO_EDGE</code>.</p>
</li>
</ul>
</div>
</div>
</div>
<div class="sidebarblock">
<div class="content">
<div class="title">Valid Usage (Implicit)</div>
<div class="ulist">
<ul>
<li>
<p><a id="VUID-vkCmdDrawMeshTasksIndirectNV-commandBuffer-parameter"></a> <code>commandBuffer</code> <strong class="purple">must</strong> be a valid <code>VkCommandBuffer</code> handle</p>
</li>
<li>
<p><a id="VUID-vkCmdDrawMeshTasksIndirectNV-buffer-parameter"></a> <code>buffer</code> <strong class="purple">must</strong> be a valid <code>VkBuffer</code> handle</p>
</li>
<li>
<p><a id="VUID-vkCmdDrawMeshTasksIndirectNV-commandBuffer-recording"></a> <code>commandBuffer</code> <strong class="purple">must</strong> be in the <a href="#commandbuffers-lifecycle">recording state</a></p>
</li>
<li>
<p><a id="VUID-vkCmdDrawMeshTasksIndirectNV-commandBuffer-cmdpool"></a> The <code>VkCommandPool</code> that <code>commandBuffer</code> was allocated from <strong class="purple">must</strong> support graphics operations</p>
</li>
<li>
<p><a id="VUID-vkCmdDrawMeshTasksIndirectNV-renderpass"></a> This command <strong class="purple">must</strong> only be called inside of a render pass instance</p>
</li>
<li>
<p><a id="VUID-vkCmdDrawMeshTasksIndirectNV-commonparent"></a> Both of <code>buffer</code>, and <code>commandBuffer</code> <strong class="purple">must</strong> have been created, allocated, or retrieved from the same <code>VkDevice</code></p>
</li>
</ul>
</div>
</div>
</div>
<div class="sidebarblock">
<div class="content">
<div class="title">Host Synchronization</div>
<div class="ulist">
<ul>
<li>
<p>Host access to <code>commandBuffer</code> <strong class="purple">must</strong> be externally synchronized</p>
</li>
<li>
<p>Host access to the <code>VkCommandPool</code> that <code>commandBuffer</code> was allocated from <strong class="purple">must</strong> be externally synchronized</p>
</li>
</ul>
</div>
</div>
</div>
<div class="sidebarblock">
<div class="content">
<div class="title">Command Properties</div>
<table class="tableblock frame-all grid-all stretch">
<colgroup>
<col style="width: 25%;">
<col style="width: 25%;">
<col style="width: 25%;">
<col style="width: 25%;">
</colgroup>
<thead>
<tr>
<th class="tableblock halign-left valign-top"><a href="#VkCommandBufferLevel">Command Buffer Levels</a></th>
<th class="tableblock halign-left valign-top"><a href="#vkCmdBeginRenderPass">Render Pass Scope</a></th>
<th class="tableblock halign-left valign-top"><a href="#VkQueueFlagBits">Supported Queue Types</a></th>
<th class="tableblock halign-left valign-top"><a href="#synchronization-pipeline-stages-types">Pipeline Type</a></th>
</tr>
</thead>
<tbody>
<tr>
<td class="tableblock halign-left valign-top"><p class="tableblock">Primary<br>
Secondary</p></td>
<td class="tableblock halign-left valign-top"><p class="tableblock">Inside</p></td>
<td class="tableblock halign-left valign-top"><p class="tableblock">Graphics</p></td>
<td class="tableblock halign-left valign-top"><p class="tableblock">Graphics</p></td>
</tr>
</tbody>
</table>
</div>
</div>
</div>
<div class="sect3">
<h4 id="_see_also_54">See Also</h4>
<div class="paragraph">
<p><a href="#VkBuffer">VkBuffer</a>, <a href="#VkCommandBuffer">VkCommandBuffer</a>, <code>VkDeviceSize</code></p>
</div>
</div>
<div class="sect3">
<h4 id="_document_notes_54">Document Notes</h4>
<div class="paragraph">
<p>For more information, see the Vulkan Specification at URL</p>
</div>
<div class="paragraph">
<p><a href="https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#vkCmdDrawMeshTasksIndirectNV" class="bare">https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#vkCmdDrawMeshTasksIndirectNV</a></p>
</div>
<div class="paragraph">
<p>This page is extracted from the Vulkan Specification.
Fixes and changes should be made to the Specification, not directly.</p>
</div>
<div style="page-break-after: always;"></div>
</div>
</div>
<div class="sect2">
<h3 id="_vkcmddrawmeshtasksnv3">vkCmdDrawMeshTasksNV(3)</h3>
<div class="sect3">
<h4 id="_name_55">Name</h4>
<div class="paragraph">
<p>vkCmdDrawMeshTasksNV - Draw mesh task work items</p>
</div>
</div>
<div class="sect3">
<h4 id="_c_specification_55">C Specification</h4>
<div class="paragraph">
<p>To record a draw that uses the mesh pipeline, call:</p>
</div>
<div id="vkCmdDrawMeshTasksNV" class="listingblock">
<div class="content">
<pre class="highlight"><code class="language-c++" data-lang="c++">void vkCmdDrawMeshTasksNV(
    VkCommandBuffer                             commandBuffer,
    uint32_t                                    taskCount,
    uint32_t                                    firstTask);</code></pre>
</div>
</div>
</div>
<div class="sect3">
<h4 id="_parameters_55">Parameters</h4>
<div class="ulist">
<ul>
<li>
<p><code>commandBuffer</code> is the command buffer into which the command will be
recorded.</p>
</li>
<li>
<p><code>taskCount</code> is the number of local workgroups to dispatch in the X
dimension.
Y and Z dimension are implicitly set to one.</p>
</li>
<li>
<p><code>firstTask</code> is the X component of the first workgroup ID.</p>
</li>
</ul>
</div>
</div>
<div class="sect3">
<h4 id="_description_55">Description</h4>
<div class="paragraph">
<p>When the command is executed, a global workgroup consisting of
<code>taskCount</code> local workgroups is assembled.</p>
</div>
<div class="sidebarblock">
<div class="content">
<div class="title">Valid Usage</div>
<div class="ulist">
<ul>
<li>
<p><a id="VUID-vkCmdDrawMeshTasksNV-taskCount-02119"></a>
<code>taskCount</code> <strong class="purple">must</strong> be less than or equal to
<code>VkPhysicalDeviceMeshShaderPropertiesNV</code>::<code>maxDrawMeshTasksCount</code></p>
</li>
<li>
<p><a id="VUID-vkCmdDrawMeshTasksNV-renderPass-02120"></a>
The current render pass <strong class="purple">must</strong> be <a href="vkspec.html#renderpass-compatibility">compatible</a>
with the <code>renderPass</code> member of the
<code>VkGraphicsPipelineCreateInfo</code> structure specified when creating the
<code>VkPipeline</code> currently bound to
<code>VK_PIPELINE_BIND_POINT_GRAPHICS</code>.</p>
</li>
<li>
<p><a id="VUID-vkCmdDrawMeshTasksNV-subpass-02121"></a>
The subpass index of the current render pass <strong class="purple">must</strong> be equal to the
<code>subpass</code> member of the <code>VkGraphicsPipelineCreateInfo</code> structure
specified when creating the <code>VkPipeline</code> currently bound to
<code>VK_PIPELINE_BIND_POINT_GRAPHICS</code>.</p>
</li>
<li>
<p><a id="VUID-vkCmdDrawMeshTasksNV-None-02122"></a>
For each set <em>n</em> that is statically used by the <code>VkPipeline</code>
currently bound to <code>VK_PIPELINE_BIND_POINT_GRAPHICS</code>, a descriptor
set <strong class="purple">must</strong> have been bound to <em>n</em> at
<code>VK_PIPELINE_BIND_POINT_GRAPHICS</code>, with a <code>VkPipelineLayout</code>
that is compatible for set <em>n</em>, with the <code>VkPipelineLayout</code> used to
create the current <code>VkPipeline</code>, as described in
<a href="vkspec.html#descriptorsets-compatibility" class="bare">html/vkspec.html#descriptorsets-compatibility</a></p>
</li>
<li>
<p><a id="VUID-vkCmdDrawMeshTasksNV-None-02123"></a>
For each push constant that is statically used by the <code>VkPipeline</code>
currently bound to <code>VK_PIPELINE_BIND_POINT_GRAPHICS</code>, a push
constant value <strong class="purple">must</strong> have been set for
<code>VK_PIPELINE_BIND_POINT_GRAPHICS</code>, with a <code>VkPipelineLayout</code>
that is compatible for push constants, with the <code>VkPipelineLayout</code>
used to create the current <code>VkPipeline</code>, as described in
<a href="vkspec.html#descriptorsets-compatibility" class="bare">html/vkspec.html#descriptorsets-compatibility</a></p>
</li>
<li>
<p><a id="VUID-vkCmdDrawMeshTasksNV-None-02124"></a>
Descriptors in each bound descriptor set, specified via
<code>vkCmdBindDescriptorSets</code>, <strong class="purple">must</strong> be valid if they are statically
used by the currently bound <code>VkPipeline</code> object, specified via
<code>vkCmdBindPipeline</code></p>
</li>
<li>
<p><a id="VUID-vkCmdDrawMeshTasksNV-None-02125"></a>
A valid graphics pipeline <strong class="purple">must</strong> be bound to the current command buffer
with <code>VK_PIPELINE_BIND_POINT_GRAPHICS</code></p>
</li>
<li>
<p><a id="VUID-vkCmdDrawMeshTasksNV-None-02126"></a>
If the <code>VkPipeline</code> object currently bound to
<code>VK_PIPELINE_BIND_POINT_GRAPHICS</code> requires any dynamic state, that
state <strong class="purple">must</strong> have been set on the current command buffer</p>
</li>
<li>
<p><a id="VUID-vkCmdDrawMeshTasksNV-None-02127"></a>
Every input attachment used by the current subpass <strong class="purple">must</strong> be bound to the
pipeline via a descriptor set</p>
</li>
<li>
<p><a id="VUID-vkCmdDrawMeshTasksNV-None-02128"></a>
If any <code>VkSampler</code> object that is accessed from a shader by the
<code>VkPipeline</code> currently bound to
<code>VK_PIPELINE_BIND_POINT_GRAPHICS</code> uses unnormalized coordinates, it
<strong class="purple">must</strong> not be used to sample from any <code>VkImage</code> with a
<code>VkImageView</code> of the type <code>VK_IMAGE_VIEW_TYPE_3D</code>,
<code>VK_IMAGE_VIEW_TYPE_CUBE</code>, <code>VK_IMAGE_VIEW_TYPE_1D_ARRAY</code>,
<code>VK_IMAGE_VIEW_TYPE_2D_ARRAY</code> or
<code>VK_IMAGE_VIEW_TYPE_CUBE_ARRAY</code>, in any shader stage</p>
</li>
<li>
<p><a id="VUID-vkCmdDrawMeshTasksNV-None-02129"></a>
If any <code>VkSampler</code> object that is accessed from a shader by the
<code>VkPipeline</code> currently bound to
<code>VK_PIPELINE_BIND_POINT_GRAPHICS</code> uses unnormalized coordinates, it
<strong class="purple">must</strong> not be used with any of the SPIR-V <code>OpImageSample*</code> or
<code>OpImageSparseSample*</code> instructions with <code>ImplicitLod</code>, <code>Dref</code> or
<code>Proj</code> in their name, in any shader stage</p>
</li>
<li>
<p><a id="VUID-vkCmdDrawMeshTasksNV-None-02130"></a>
If any <code>VkSampler</code> object that is accessed from a shader by the
<code>VkPipeline</code> currently bound to
<code>VK_PIPELINE_BIND_POINT_GRAPHICS</code> uses unnormalized coordinates, it
<strong class="purple">must</strong> not be used with any of the SPIR-V <code>OpImageSample*</code> or
<code>OpImageSparseSample*</code> instructions that includes a LOD bias or any
offset values, in any shader stage</p>
</li>
<li>
<p><a id="VUID-vkCmdDrawMeshTasksNV-None-02131"></a>
If the <a href="vkspec.html#features-robustBufferAccess">robust buffer access</a> feature is
not enabled, and any shader stage in the <code>VkPipeline</code> object
currently bound to <code>VK_PIPELINE_BIND_POINT_GRAPHICS</code> accesses a
uniform buffer, it <strong class="purple">must</strong> not access values outside of the range of that
buffer specified in the currently bound descriptor set</p>
</li>
<li>
<p><a id="VUID-vkCmdDrawMeshTasksNV-None-02132"></a>
If the <a href="vkspec.html#features-robustBufferAccess">robust buffer access</a> feature is
not enabled, and any shader stage in the <code>VkPipeline</code> object
currently bound to <code>VK_PIPELINE_BIND_POINT_GRAPHICS</code> accesses a
storage buffer, it <strong class="purple">must</strong> not access values outside of the range of that
buffer specified in the currently bound descriptor set</p>
</li>
<li>
<p><a id="VUID-vkCmdDrawMeshTasksNV-linearTilingFeatures-02133"></a>
Any <code>VkImageView</code> being sampled with <code>VK_FILTER_LINEAR</code> as a
result of this command <strong class="purple">must</strong> be of a format which supports linear
filtering, as specified by the
<code>VK_FORMAT_FEATURE_SAMPLED_IMAGE_FILTER_LINEAR_BIT</code> flag in
<code>VkFormatProperties</code>::<code>linearTilingFeatures</code> (for a linear
image) or <code>VkFormatProperties</code>::<code>optimalTilingFeatures</code>(for an
optimally tiled image) returned by
<code>vkGetPhysicalDeviceFormatProperties</code></p>
</li>
<li>
<p><a id="VUID-vkCmdDrawMeshTasksNV-None-02134"></a>
Image subresources used as attachments in the current render pass <strong class="purple">must</strong>
not be accessed in any way other than as an attachment by this command.</p>
</li>
<li>
<p><a id="VUID-vkCmdDrawMeshTasksNV-linearTilingFeatures-02135"></a>
Any <a href="#VkImageView">VkImageView</a> being sampled with <code>VK_FILTER_CUBIC_IMG</code> as a
result of this command <strong class="purple">must</strong> be of a format which supports cubic
filtering, as specified by the
<code>VK_FORMAT_FEATURE_SAMPLED_IMAGE_FILTER_CUBIC_BIT_IMG</code> flag in
<code>VkFormatProperties</code>::<code>linearTilingFeatures</code> (for a linear
image) or <code>VkFormatProperties</code>::<code>optimalTilingFeatures</code>(for an
optimally tiled image) returned by
<code>vkGetPhysicalDeviceFormatProperties</code></p>
</li>
<li>
<p><a id="VUID-vkCmdDrawMeshTasksNV-None-02136"></a>
Any <a href="#VkImageView">VkImageView</a> being sampled with <code>VK_FILTER_CUBIC_IMG</code> as a
result of this command <strong class="purple">must</strong> not have a <a href="#VkImageViewType">VkImageViewType</a> of
<code>VK_IMAGE_VIEW_TYPE_3D</code>, <code>VK_IMAGE_VIEW_TYPE_CUBE</code>, or
<code>VK_IMAGE_VIEW_TYPE_CUBE_ARRAY</code></p>
</li>
<li>
<p><a id="VUID-vkCmdDrawMeshTasksNV-maxMultiviewInstanceIndex-02137"></a>
If the draw is recorded in a render pass instance with multiview
enabled, the maximum instance index <strong class="purple">must</strong> be less than or equal to
<a href="#VkPhysicalDeviceMultiviewProperties">VkPhysicalDeviceMultiviewProperties</a>::<code>maxMultiviewInstanceIndex</code>.</p>
</li>
<li>
<p><a id="VUID-vkCmdDrawMeshTasksNV-commandBuffer-02138"></a>
If <code>commandBuffer</code> is an unprotected command buffer, and any
pipeline stage in the <code>VkPipeline</code> object currently bound to
<code>VK_PIPELINE_BIND_POINT_GRAPHICS</code> reads from or writes to any image
or buffer, that image or buffer <strong class="purple">must</strong> not be a protected image or
protected buffer.</p>
</li>
<li>
<p><a id="VUID-vkCmdDrawMeshTasksNV-commandBuffer-02139"></a>
If <code>commandBuffer</code> is a protected command buffer, and any pipeline
stage in the <code>VkPipeline</code> object currently bound to
<code>VK_PIPELINE_BIND_POINT_GRAPHICS</code> writes to any image or buffer,
that image or buffer <strong class="purple">must</strong> not be an unprotected image or unprotected
buffer.</p>
</li>
<li>
<p><a id="VUID-vkCmdDrawMeshTasksNV-commandBuffer-02140"></a>
If <code>commandBuffer</code> is a protected command buffer, and any pipeline
stage other than the framebuffer-space pipeline stages in the
<code>VkPipeline</code> object currently bound to
<code>VK_PIPELINE_BIND_POINT_GRAPHICS</code> reads from or writes to any image
or buffer, the image or buffer <strong class="purple">must</strong> not be a protected image or
protected buffer.</p>
</li>
<li>
<p><a id="VUID-vkCmdDrawMeshTasksNV-sampleLocationsEnable-02141"></a>
If the currently bound graphics pipeline was created with
<a href="#VkPipelineSampleLocationsStateCreateInfoEXT">VkPipelineSampleLocationsStateCreateInfoEXT</a>::<code>sampleLocationsEnable</code>
set to <code>VK_TRUE</code> and the current subpass has a depth/stencil
attachment, then that attachment <strong class="purple">must</strong> have been created with the
<code>VK_IMAGE_CREATE_SAMPLE_LOCATIONS_COMPATIBLE_DEPTH_BIT_EXT</code> bit set</p>
</li>
<li>
<p><a id="VUID-vkCmdDrawMeshTasksNV-flags-02142"></a>
Any <a href="#VkImage">VkImage</a> created with a <a href="#VkImageCreateInfo">VkImageCreateInfo</a>::<code>flags</code>
containing <code>VK_IMAGE_CREATE_CORNER_SAMPLED_BIT_NV</code> sampled as a
result of this command <strong class="purple">must</strong> only be sampled using a
<a href="#VkSamplerAddressMode">VkSamplerAddressMode</a> of
<code>VK_SAMPLER_ADDRESS_MODE_CLAMP_TO_EDGE</code>.</p>
</li>
</ul>
</div>
</div>
</div>
<div class="sidebarblock">
<div class="content">
<div class="title">Valid Usage (Implicit)</div>
<div class="ulist">
<ul>
<li>
<p><a id="VUID-vkCmdDrawMeshTasksNV-commandBuffer-parameter"></a> <code>commandBuffer</code> <strong class="purple">must</strong> be a valid <code>VkCommandBuffer</code> handle</p>
</li>
<li>
<p><a id="VUID-vkCmdDrawMeshTasksNV-commandBuffer-recording"></a> <code>commandBuffer</code> <strong class="purple">must</strong> be in the <a href="#commandbuffers-lifecycle">recording state</a></p>
</li>
<li>
<p><a id="VUID-vkCmdDrawMeshTasksNV-commandBuffer-cmdpool"></a> The <code>VkCommandPool</code> that <code>commandBuffer</code> was allocated from <strong class="purple">must</strong> support graphics operations</p>
</li>
<li>
<p><a id="VUID-vkCmdDrawMeshTasksNV-renderpass"></a> This command <strong class="purple">must</strong> only be called inside of a render pass instance</p>
</li>
</ul>
</div>
</div>
</div>
<div class="sidebarblock">
<div class="content">
<div class="title">Host Synchronization</div>
<div class="ulist">
<ul>
<li>
<p>Host access to <code>commandBuffer</code> <strong class="purple">must</strong> be externally synchronized</p>
</li>
<li>
<p>Host access to the <code>VkCommandPool</code> that <code>commandBuffer</code> was allocated from <strong class="purple">must</strong> be externally synchronized</p>
</li>
</ul>
</div>
</div>
</div>
<div class="sidebarblock">
<div class="content">
<div class="title">Command Properties</div>
<table class="tableblock frame-all grid-all stretch">
<colgroup>
<col style="width: 25%;">
<col style="width: 25%;">
<col style="width: 25%;">
<col style="width: 25%;">
</colgroup>
<thead>
<tr>
<th class="tableblock halign-left valign-top"><a href="#VkCommandBufferLevel">Command Buffer Levels</a></th>
<th class="tableblock halign-left valign-top"><a href="#vkCmdBeginRenderPass">Render Pass Scope</a></th>
<th class="tableblock halign-left valign-top"><a href="#VkQueueFlagBits">Supported Queue Types</a></th>
<th class="tableblock halign-left valign-top"><a href="#synchronization-pipeline-stages-types">Pipeline Type</a></th>
</tr>
</thead>
<tbody>
<tr>
<td class="tableblock halign-left valign-top"><p class="tableblock">Primary<br>
Secondary</p></td>
<td class="tableblock halign-left valign-top"><p class="tableblock">Inside</p></td>
<td class="tableblock halign-left valign-top"><p class="tableblock">Graphics</p></td>
<td class="tableblock halign-left valign-top"><p class="tableblock">Graphics</p></td>
</tr>
</tbody>
</table>
</div>
</div>
</div>
<div class="sect3">
<h4 id="_see_also_55">See Also</h4>
<div class="paragraph">
<p><a href="#VkCommandBuffer">VkCommandBuffer</a></p>
</div>
</div>
<div class="sect3">
<h4 id="_document_notes_55">Document Notes</h4>
<div class="paragraph">
<p>For more information, see the Vulkan Specification at URL</p>
</div>
<div class="paragraph">
<p><a href="https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#vkCmdDrawMeshTasksNV" class="bare">https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#vkCmdDrawMeshTasksNV</a></p>
</div>
<div class="paragraph">
<p>This page is extracted from the Vulkan Specification.
Fixes and changes should be made to the Specification, not directly.</p>
</div>
<div style="page-break-after: always;"></div>
</div>
</div>
<div class="sect2">
<h3 id="_vkcmdendconditionalrenderingext3">vkCmdEndConditionalRenderingEXT(3)</h3>
<div class="sect3">
<h4 id="_name_56">Name</h4>
<div class="paragraph">
<p>vkCmdEndConditionalRenderingEXT - Define the end of a conditional rendering block</p>
</div>
</div>
<div class="sect3">
<h4 id="_c_specification_56">C Specification</h4>
<div class="paragraph">
<p>To end conditional rendering, call:</p>
</div>
<div id="vkCmdEndConditionalRenderingEXT" class="listingblock">
<div class="content">
<pre class="highlight"><code class="language-c++" data-lang="c++">void vkCmdEndConditionalRenderingEXT(
    VkCommandBuffer                             commandBuffer);</code></pre>
</div>
</div>
</div>
<div class="sect3">
<h4 id="_parameters_56">Parameters</h4>
<div class="ulist">
<ul>
<li>
<p><code>commandBuffer</code> is the command buffer into which this command will
be recorded.</p>
</li>
</ul>
</div>
</div>
<div class="sect3">
<h4 id="_description_56">Description</h4>
<div class="paragraph">
<p>Once ended, conditional rendering becomes inactive.</p>
</div>
<div class="sidebarblock">
<div class="content">
<div class="title">Valid Usage</div>
<div class="ulist">
<ul>
<li>
<p><a id="VUID-vkCmdEndConditionalRenderingEXT-None-01985"></a>
Conditional rendering <strong class="purple">must</strong> be <a href="vkspec.html#active-conditional-rendering">active</a></p>
</li>
<li>
<p><a id="VUID-vkCmdEndConditionalRenderingEXT-None-01986"></a>
If conditional rendering was made
<a href="vkspec.html#active-conditional-rendering">active</a> outside of a render pass
instance, it must not be ended inside a render pass instance</p>
</li>
<li>
<p><a id="VUID-vkCmdEndConditionalRenderingEXT-None-01987"></a>
If conditional rendering was made
<a href="vkspec.html#active-conditional-rendering">active</a> within a subpass it must be
ended in the same subpass</p>
</li>
</ul>
</div>
</div>
</div>
<div class="sidebarblock">
<div class="content">
<div class="title">Valid Usage (Implicit)</div>
<div class="ulist">
<ul>
<li>
<p><a id="VUID-vkCmdEndConditionalRenderingEXT-commandBuffer-parameter"></a> <code>commandBuffer</code> <strong class="purple">must</strong> be a valid <code>VkCommandBuffer</code> handle</p>
</li>
<li>
<p><a id="VUID-vkCmdEndConditionalRenderingEXT-commandBuffer-recording"></a> <code>commandBuffer</code> <strong class="purple">must</strong> be in the <a href="#commandbuffers-lifecycle">recording state</a></p>
</li>
<li>
<p><a id="VUID-vkCmdEndConditionalRenderingEXT-commandBuffer-cmdpool"></a> The <code>VkCommandPool</code> that <code>commandBuffer</code> was allocated from <strong class="purple">must</strong> support graphics, or compute operations</p>
</li>
</ul>
</div>
</div>
</div>
<div class="sidebarblock">
<div class="content">
<div class="title">Host Synchronization</div>
<div class="ulist">
<ul>
<li>
<p>Host access to <code>commandBuffer</code> <strong class="purple">must</strong> be externally synchronized</p>
</li>
<li>
<p>Host access to the <code>VkCommandPool</code> that <code>commandBuffer</code> was allocated from <strong class="purple">must</strong> be externally synchronized</p>
</li>
</ul>
</div>
</div>
</div>
<div class="sidebarblock">
<div class="content">
<div class="title">Command Properties</div>
<table class="tableblock frame-all grid-all stretch">
<colgroup>
<col style="width: 25%;">
<col style="width: 25%;">
<col style="width: 25%;">
<col style="width: 25%;">
</colgroup>
<thead>
<tr>
<th class="tableblock halign-left valign-top"><a href="#VkCommandBufferLevel">Command Buffer Levels</a></th>
<th class="tableblock halign-left valign-top"><a href="#vkCmdBeginRenderPass">Render Pass Scope</a></th>
<th class="tableblock halign-left valign-top"><a href="#VkQueueFlagBits">Supported Queue Types</a></th>
<th class="tableblock halign-left valign-top"><a href="#synchronization-pipeline-stages-types">Pipeline Type</a></th>
</tr>
</thead>
<tbody>
<tr>
<td class="tableblock halign-left valign-top"><p class="tableblock">Primary<br>
Secondary</p></td>
<td class="tableblock halign-left valign-top"><p class="tableblock">Both</p></td>
<td class="tableblock halign-left valign-top"><p class="tableblock">Graphics<br>
Compute</p></td>
<td class="tableblock halign-left valign-top"></td>
</tr>
</tbody>
</table>
</div>
</div>
</div>
<div class="sect3">
<h4 id="_see_also_56">See Also</h4>
<div class="paragraph">
<p><a href="#VkCommandBuffer">VkCommandBuffer</a></p>
</div>
</div>
<div class="sect3">
<h4 id="_document_notes_56">Document Notes</h4>
<div class="paragraph">
<p>For more information, see the Vulkan Specification at URL</p>
</div>
<div class="paragraph">
<p><a href="https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#vkCmdEndConditionalRenderingEXT" class="bare">https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#vkCmdEndConditionalRenderingEXT</a></p>
</div>
<div class="paragraph">
<p>This page is extracted from the Vulkan Specification.
Fixes and changes should be made to the Specification, not directly.</p>
</div>
<div style="page-break-after: always;"></div>
</div>
</div>
<div class="sect2">
<h3 id="_vkcmdenddebugutilslabelext3">vkCmdEndDebugUtilsLabelEXT(3)</h3>
<div class="sect3">
<h4 id="_name_57">Name</h4>
<div class="paragraph">
<p>vkCmdEndDebugUtilsLabelEXT - Close a command buffer label region</p>
</div>
</div>
<div class="sect3">
<h4 id="_c_specification_57">C Specification</h4>
<div class="paragraph">
<p>A command buffer label region can be closed by calling:</p>
</div>
<div id="vkCmdEndDebugUtilsLabelEXT" class="listingblock">
<div class="content">
<pre class="highlight"><code class="language-c++" data-lang="c++">void vkCmdEndDebugUtilsLabelEXT(
    VkCommandBuffer                             commandBuffer);</code></pre>
</div>
</div>
</div>
<div class="sect3">
<h4 id="_parameters_57">Parameters</h4>
<div class="ulist">
<ul>
<li>
<p><code>commandBuffer</code> is the command buffer into which the command is
recorded.</p>
</li>
</ul>
</div>
</div>
<div class="sect3">
<h4 id="_description_57">Description</h4>
<div class="paragraph">
<p>An application <strong class="purple">may</strong> open a debug label region in one command buffer and
close it in another, or otherwise split debug label regions across multiple
command buffers or multiple queue submissions.
When viewed from the linear series of submissions to a single queue, the
calls to <a href="#vkCmdBeginDebugUtilsLabelEXT">vkCmdBeginDebugUtilsLabelEXT</a> and
<a href="#vkCmdEndDebugUtilsLabelEXT">vkCmdEndDebugUtilsLabelEXT</a> <strong class="purple">must</strong> be matched and balanced.</p>
</div>
<div class="sidebarblock">
<div class="content">
<div class="title">Valid Usage</div>
<div class="ulist">
<ul>
<li>
<p><a id="VUID-vkCmdEndDebugUtilsLabelEXT-commandBuffer-01912"></a>
There <strong class="purple">must</strong> be an outstanding <code>vkCmdBeginDebugUtilsLabelEXT</code> command
prior to the <code>vkCmdEndDebugUtilsLabelEXT</code> on the queue that
<code>commandBuffer</code> is submitted to</p>
</li>
<li>
<p><a id="VUID-vkCmdEndDebugUtilsLabelEXT-commandBuffer-01913"></a>
If <code>commandBuffer</code> is a secondary command buffer, there <strong class="purple">must</strong> be an
outstanding <code>vkCmdBeginDebugUtilsLabelEXT</code> command recorded to
<code>commandBuffer</code> that has not previously been ended by a call to
<code>vkCmdEndDebugUtilsLabelEXT</code>.</p>
</li>
</ul>
</div>
</div>
</div>
<div class="sidebarblock">
<div class="content">
<div class="title">Valid Usage (Implicit)</div>
<div class="ulist">
<ul>
<li>
<p><a id="VUID-vkCmdEndDebugUtilsLabelEXT-commandBuffer-parameter"></a> <code>commandBuffer</code> <strong class="purple">must</strong> be a valid <code>VkCommandBuffer</code> handle</p>
</li>
<li>
<p><a id="VUID-vkCmdEndDebugUtilsLabelEXT-commandBuffer-recording"></a> <code>commandBuffer</code> <strong class="purple">must</strong> be in the <a href="#commandbuffers-lifecycle">recording state</a></p>
</li>
<li>
<p><a id="VUID-vkCmdEndDebugUtilsLabelEXT-commandBuffer-cmdpool"></a> The <code>VkCommandPool</code> that <code>commandBuffer</code> was allocated from <strong class="purple">must</strong> support graphics, or compute operations</p>
</li>
</ul>
</div>
</div>
</div>
<div class="sidebarblock">
<div class="content">
<div class="title">Host Synchronization</div>
<div class="ulist">
<ul>
<li>
<p>Host access to the <code>VkCommandPool</code> that <code>commandBuffer</code> was allocated from <strong class="purple">must</strong> be externally synchronized</p>
</li>
</ul>
</div>
</div>
</div>
<div class="sidebarblock">
<div class="content">
<div class="title">Command Properties</div>
<table class="tableblock frame-all grid-all stretch">
<colgroup>
<col style="width: 25%;">
<col style="width: 25%;">
<col style="width: 25%;">
<col style="width: 25%;">
</colgroup>
<thead>
<tr>
<th class="tableblock halign-left valign-top"><a href="#VkCommandBufferLevel">Command Buffer Levels</a></th>
<th class="tableblock halign-left valign-top"><a href="#vkCmdBeginRenderPass">Render Pass Scope</a></th>
<th class="tableblock halign-left valign-top"><a href="#VkQueueFlagBits">Supported Queue Types</a></th>
<th class="tableblock halign-left valign-top"><a href="#synchronization-pipeline-stages-types">Pipeline Type</a></th>
</tr>
</thead>
<tbody>
<tr>
<td class="tableblock halign-left valign-top"><p class="tableblock">Primary<br>
Secondary</p></td>
<td class="tableblock halign-left valign-top"><p class="tableblock">Both</p></td>
<td class="tableblock halign-left valign-top"><p class="tableblock">Graphics<br>
Compute</p></td>
<td class="tableblock halign-left valign-top"></td>
</tr>
</tbody>
</table>
</div>
</div>
</div>
<div class="sect3">
<h4 id="_see_also_57">See Also</h4>
<div class="paragraph">
<p><a href="#VkCommandBuffer">VkCommandBuffer</a></p>
</div>
</div>
<div class="sect3">
<h4 id="_document_notes_57">Document Notes</h4>
<div class="paragraph">
<p>For more information, see the Vulkan Specification at URL</p>
</div>
<div class="paragraph">
<p><a href="https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#vkCmdEndDebugUtilsLabelEXT" class="bare">https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#vkCmdEndDebugUtilsLabelEXT</a></p>
</div>
<div class="paragraph">
<p>This page is extracted from the Vulkan Specification.
Fixes and changes should be made to the Specification, not directly.</p>
</div>
<div style="page-break-after: always;"></div>
</div>
</div>
<div class="sect2">
<h3 id="_vkcmdendquery3">vkCmdEndQuery(3)</h3>
<div class="sect3">
<h4 id="_name_58">Name</h4>
<div class="paragraph">
<p>vkCmdEndQuery - Ends a query</p>
</div>
</div>
<div class="sect3">
<h4 id="_c_specification_58">C Specification</h4>
<div class="paragraph">
<p>To end a query after the set of desired draw or dispatch commands is
executed, call:</p>
</div>
<div id="vkCmdEndQuery" class="listingblock">
<div class="content">
<pre class="highlight"><code class="language-c++" data-lang="c++">void vkCmdEndQuery(
    VkCommandBuffer                             commandBuffer,
    VkQueryPool                                 queryPool,
    uint32_t                                    query);</code></pre>
</div>
</div>
</div>
<div class="sect3">
<h4 id="_parameters_58">Parameters</h4>
<div class="ulist">
<ul>
<li>
<p><code>commandBuffer</code> is the command buffer into which this command will
be recorded.</p>
</li>
<li>
<p><code>queryPool</code> is the query pool that is managing the results of the
query.</p>
</li>
<li>
<p><code>query</code> is the query index within the query pool where the result is
stored.</p>
</li>
</ul>
</div>
</div>
<div class="sect3">
<h4 id="_description_58">Description</h4>
<div id="queries-operation-finished" class="paragraph">
<p>As queries operate asynchronously, ending a query does not immediately set
the query&#8217;s status to available.
A query is considered <em>finished</em> when the final results of the query are
ready to be retrieved by <a href="#vkGetQueryPoolResults">vkGetQueryPoolResults</a> and
<a href="#vkCmdCopyQueryPoolResults">vkCmdCopyQueryPoolResults</a>, and this is when the query&#8217;s status is set
to available.</p>
</div>
<div class="paragraph">
<p>Once a query is ended the query <strong class="purple">must</strong> finish in finite time, unless the
state of the query is changed using other commands, e.g. by issuing a reset
of the query.</p>
</div>
<div class="sidebarblock">
<div class="content">
<div class="title">Valid Usage</div>
<div class="ulist">
<ul>
<li>
<p><a id="VUID-vkCmdEndQuery-None-01923"></a>
All queries used by the command <strong class="purple">must</strong> be
<a href="vkspec.html#queries-operation-active">active</a></p>
</li>
<li>
<p><a id="VUID-vkCmdEndQuery-query-00810"></a>
<code>query</code> <strong class="purple">must</strong> be less than the number of queries in <code>queryPool</code></p>
</li>
<li>
<p><a id="VUID-vkCmdEndQuery-commandBuffer-01886"></a>
<code>commandBuffer</code> <strong class="purple">must</strong> not be a protected command buffer</p>
</li>
<li>
<p><a id="VUID-vkCmdEndQuery-query-00812"></a>
If <code>vkCmdEndQuery</code> is called within a render pass instance, the sum
of <code>query</code> and the number of bits set in the current subpass&#8217;s view
mask <strong class="purple">must</strong> be less than or equal to the number of queries in
<code>queryPool</code></p>
</li>
</ul>
</div>
</div>
</div>
<div class="sidebarblock">
<div class="content">
<div class="title">Valid Usage (Implicit)</div>
<div class="ulist">
<ul>
<li>
<p><a id="VUID-vkCmdEndQuery-commandBuffer-parameter"></a> <code>commandBuffer</code> <strong class="purple">must</strong> be a valid <code>VkCommandBuffer</code> handle</p>
</li>
<li>
<p><a id="VUID-vkCmdEndQuery-queryPool-parameter"></a> <code>queryPool</code> <strong class="purple">must</strong> be a valid <code>VkQueryPool</code> handle</p>
</li>
<li>
<p><a id="VUID-vkCmdEndQuery-commandBuffer-recording"></a> <code>commandBuffer</code> <strong class="purple">must</strong> be in the <a href="#commandbuffers-lifecycle">recording state</a></p>
</li>
<li>
<p><a id="VUID-vkCmdEndQuery-commandBuffer-cmdpool"></a> The <code>VkCommandPool</code> that <code>commandBuffer</code> was allocated from <strong class="purple">must</strong> support graphics, or compute operations</p>
</li>
<li>
<p><a id="VUID-vkCmdEndQuery-commonparent"></a> Both of <code>commandBuffer</code>, and <code>queryPool</code> <strong class="purple">must</strong> have been created, allocated, or retrieved from the same <code>VkDevice</code></p>
</li>
</ul>
</div>
</div>
</div>
<div class="sidebarblock">
<div class="content">
<div class="title">Host Synchronization</div>
<div class="ulist">
<ul>
<li>
<p>Host access to <code>commandBuffer</code> <strong class="purple">must</strong> be externally synchronized</p>
</li>
<li>
<p>Host access to the <code>VkCommandPool</code> that <code>commandBuffer</code> was allocated from <strong class="purple">must</strong> be externally synchronized</p>
</li>
</ul>
</div>
</div>
</div>
<div class="sidebarblock">
<div class="content">
<div class="title">Command Properties</div>
<table class="tableblock frame-all grid-all stretch">
<colgroup>
<col style="width: 25%;">
<col style="width: 25%;">
<col style="width: 25%;">
<col style="width: 25%;">
</colgroup>
<thead>
<tr>
<th class="tableblock halign-left valign-top"><a href="#VkCommandBufferLevel">Command Buffer Levels</a></th>
<th class="tableblock halign-left valign-top"><a href="#vkCmdBeginRenderPass">Render Pass Scope</a></th>
<th class="tableblock halign-left valign-top"><a href="#VkQueueFlagBits">Supported Queue Types</a></th>
<th class="tableblock halign-left valign-top"><a href="#synchronization-pipeline-stages-types">Pipeline Type</a></th>
</tr>
</thead>
<tbody>
<tr>
<td class="tableblock halign-left valign-top"><p class="tableblock">Primary<br>
Secondary</p></td>
<td class="tableblock halign-left valign-top"><p class="tableblock">Both</p></td>
<td class="tableblock halign-left valign-top"><p class="tableblock">Graphics<br>
Compute</p></td>
<td class="tableblock halign-left valign-top"></td>
</tr>
</tbody>
</table>
</div>
</div>
</div>
<div class="sect3">
<h4 id="_see_also_58">See Also</h4>
<div class="paragraph">
<p><a href="#VkCommandBuffer">VkCommandBuffer</a>, <a href="#VkQueryPool">VkQueryPool</a></p>
</div>
</div>
<div class="sect3">
<h4 id="_document_notes_58">Document Notes</h4>
<div class="paragraph">
<p>For more information, see the Vulkan Specification at URL</p>
</div>
<div class="paragraph">
<p><a href="https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#vkCmdEndQuery" class="bare">https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#vkCmdEndQuery</a></p>
</div>
<div class="paragraph">
<p>This page is extracted from the Vulkan Specification.
Fixes and changes should be made to the Specification, not directly.</p>
</div>
<div style="page-break-after: always;"></div>
</div>
</div>
<div class="sect2">
<h3 id="_vkcmdendqueryindexedext3">vkCmdEndQueryIndexedEXT(3)</h3>
<div class="sect3">
<h4 id="_name_59">Name</h4>
<div class="paragraph">
<p>vkCmdEndQueryIndexedEXT - Ends a query</p>
</div>
</div>
<div class="sect3">
<h4 id="_c_specification_59">C Specification</h4>
<div class="paragraph">
<p>To end an indexed query after the set of desired draw or dispatch commands
is recorded, call:</p>
</div>
<div id="vkCmdEndQueryIndexedEXT" class="listingblock">
<div class="content">
<pre class="highlight"><code class="language-c++" data-lang="c++">void vkCmdEndQueryIndexedEXT(
    VkCommandBuffer                             commandBuffer,
    VkQueryPool                                 queryPool,
    uint32_t                                    query,
    uint32_t                                    index);</code></pre>
</div>
</div>
</div>
<div class="sect3">
<h4 id="_parameters_59">Parameters</h4>
<div class="ulist">
<ul>
<li>
<p><code>commandBuffer</code> is the command buffer into which this command will
be recorded.</p>
</li>
<li>
<p><code>queryPool</code> is the query pool that is managing the results of the
query.</p>
</li>
<li>
<p><code>query</code> is the query index within the query pool where the result is
stored.</p>
</li>
<li>
<p><code>index</code> is the query type specific index.</p>
</li>
</ul>
</div>
</div>
<div class="sect3">
<h4 id="_description_59">Description</h4>
<div class="paragraph">
<p>The <code>vkCmdEndQueryIndexedEXT</code> command operates the same as the
<a href="#vkCmdEndQuery">vkCmdEndQuery</a> command, except that it also accepts a query type
specific <code>index</code> parameter.</p>
</div>
<div class="sidebarblock">
<div class="content">
<div class="title">Valid Usage</div>
<div class="ulist">
<ul>
<li>
<p><a id="VUID-vkCmdEndQueryIndexedEXT-None-02342"></a>
All queries used by the command <strong class="purple">must</strong> be
<a href="vkspec.html#queries-operation-active">active</a></p>
</li>
<li>
<p><a id="VUID-vkCmdEndQueryIndexedEXT-query-02343"></a>
<code>query</code> <strong class="purple">must</strong> be less than the number of queries in <code>queryPool</code></p>
</li>
<li>
<p><a id="VUID-vkCmdEndQueryIndexedEXT-commandBuffer-02344"></a>
<code>commandBuffer</code> <strong class="purple">must</strong> not be a protected command buffer</p>
</li>
<li>
<p><a id="VUID-vkCmdEndQueryIndexedEXT-query-02345"></a>
If <code>vkCmdEndQuery</code> is called within a render pass instance, the sum
of <code>query</code> and the number of bits set in the current subpass&#8217;s view
mask <strong class="purple">must</strong> be less than or equal to the number of queries in
<code>queryPool</code></p>
</li>
<li>
<p><a id="VUID-vkCmdEndQueryIndexedEXT-queryType-02346"></a>
If the <code>queryType</code> used to create <code>queryPool</code> was
<code>VK_QUERY_TYPE_TRANSFORM_FEEDBACK_STREAM_EXT</code> the <code>index</code>
parameter <strong class="purple">must</strong> be less than
<code>VkPhysicalDeviceTransformFeedbackPropertiesEXT</code>::<code>maxTransformFeedbackStreams</code></p>
</li>
<li>
<p><a id="VUID-vkCmdEndQueryIndexedEXT-queryType-02347"></a>
If the <code>queryType</code> used to create <code>queryPool</code> was not
<code>VK_QUERY_TYPE_TRANSFORM_FEEDBACK_STREAM_EXT</code> the <code>index</code> <strong class="purple">must</strong>
be zero</p>
</li>
</ul>
</div>
</div>
</div>
<div class="sidebarblock">
<div class="content">
<div class="title">Valid Usage (Implicit)</div>
<div class="ulist">
<ul>
<li>
<p><a id="VUID-vkCmdEndQueryIndexedEXT-commandBuffer-parameter"></a> <code>commandBuffer</code> <strong class="purple">must</strong> be a valid <code>VkCommandBuffer</code> handle</p>
</li>
<li>
<p><a id="VUID-vkCmdEndQueryIndexedEXT-queryPool-parameter"></a> <code>queryPool</code> <strong class="purple">must</strong> be a valid <code>VkQueryPool</code> handle</p>
</li>
<li>
<p><a id="VUID-vkCmdEndQueryIndexedEXT-commandBuffer-recording"></a> <code>commandBuffer</code> <strong class="purple">must</strong> be in the <a href="#commandbuffers-lifecycle">recording state</a></p>
</li>
<li>
<p><a id="VUID-vkCmdEndQueryIndexedEXT-commandBuffer-cmdpool"></a> The <code>VkCommandPool</code> that <code>commandBuffer</code> was allocated from <strong class="purple">must</strong> support graphics, or compute operations</p>
</li>
<li>
<p><a id="VUID-vkCmdEndQueryIndexedEXT-commonparent"></a> Both of <code>commandBuffer</code>, and <code>queryPool</code> <strong class="purple">must</strong> have been created, allocated, or retrieved from the same <code>VkDevice</code></p>
</li>
</ul>
</div>
</div>
</div>
<div class="sidebarblock">
<div class="content">
<div class="title">Host Synchronization</div>
<div class="ulist">
<ul>
<li>
<p>Host access to <code>commandBuffer</code> <strong class="purple">must</strong> be externally synchronized</p>
</li>
<li>
<p>Host access to the <code>VkCommandPool</code> that <code>commandBuffer</code> was allocated from <strong class="purple">must</strong> be externally synchronized</p>
</li>
</ul>
</div>
</div>
</div>
<div class="sidebarblock">
<div class="content">
<div class="title">Command Properties</div>
<table class="tableblock frame-all grid-all stretch">
<colgroup>
<col style="width: 25%;">
<col style="width: 25%;">
<col style="width: 25%;">
<col style="width: 25%;">
</colgroup>
<thead>
<tr>
<th class="tableblock halign-left valign-top"><a href="#VkCommandBufferLevel">Command Buffer Levels</a></th>
<th class="tableblock halign-left valign-top"><a href="#vkCmdBeginRenderPass">Render Pass Scope</a></th>
<th class="tableblock halign-left valign-top"><a href="#VkQueueFlagBits">Supported Queue Types</a></th>
<th class="tableblock halign-left valign-top"><a href="#synchronization-pipeline-stages-types">Pipeline Type</a></th>
</tr>
</thead>
<tbody>
<tr>
<td class="tableblock halign-left valign-top"><p class="tableblock">Primary<br>
Secondary</p></td>
<td class="tableblock halign-left valign-top"><p class="tableblock">Both</p></td>
<td class="tableblock halign-left valign-top"><p class="tableblock">Graphics<br>
Compute</p></td>
<td class="tableblock halign-left valign-top"></td>
</tr>
</tbody>
</table>
</div>
</div>
</div>
<div class="sect3">
<h4 id="_see_also_59">See Also</h4>
<div class="paragraph">
<p><a href="#VkCommandBuffer">VkCommandBuffer</a>, <a href="#VkQueryPool">VkQueryPool</a></p>
</div>
</div>
<div class="sect3">
<h4 id="_document_notes_59">Document Notes</h4>
<div class="paragraph">
<p>For more information, see the Vulkan Specification at URL</p>
</div>
<div class="paragraph">
<p><a href="https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#vkCmdEndQueryIndexedEXT" class="bare">https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#vkCmdEndQueryIndexedEXT</a></p>
</div>
<div class="paragraph">
<p>This page is extracted from the Vulkan Specification.
Fixes and changes should be made to the Specification, not directly.</p>
</div>
<div style="page-break-after: always;"></div>
</div>
</div>
<div class="sect2">
<h3 id="_vkcmdendrenderpass3">vkCmdEndRenderPass(3)</h3>
<div class="sect3">
<h4 id="_name_60">Name</h4>
<div class="paragraph">
<p>vkCmdEndRenderPass - End the current render pass</p>
</div>
</div>
<div class="sect3">
<h4 id="_c_specification_60">C Specification</h4>
<div class="paragraph">
<p>To record a command to end a render pass instance after recording the
commands for the last subpass, call:</p>
</div>
<div id="vkCmdEndRenderPass" class="listingblock">
<div class="content">
<pre class="highlight"><code class="language-c++" data-lang="c++">void vkCmdEndRenderPass(
    VkCommandBuffer                             commandBuffer);</code></pre>
</div>
</div>
</div>
<div class="sect3">
<h4 id="_parameters_60">Parameters</h4>
<div class="ulist">
<ul>
<li>
<p><code>commandBuffer</code> is the command buffer in which to end the current
render pass instance.</p>
</li>
</ul>
</div>
</div>
<div class="sect3">
<h4 id="_description_60">Description</h4>
<div class="paragraph">
<p>Ending a render pass instance performs any multisample resolve operations on
the final subpass.</p>
</div>
<div class="sidebarblock">
<div class="content">
<div class="title">Valid Usage</div>
<div class="ulist">
<ul>
<li>
<p><a id="VUID-vkCmdEndRenderPass-None-00910"></a>
The current subpass index <strong class="purple">must</strong> be equal to the number of subpasses in
the render pass minus one</p>
</li>
<li>
<p><a id="VUID-vkCmdEndRenderPass-None-02351"></a>
This command <strong class="purple">must</strong> not be recorded when transform feedback is active</p>
</li>
</ul>
</div>
</div>
</div>
<div class="sidebarblock">
<div class="content">
<div class="title">Valid Usage (Implicit)</div>
<div class="ulist">
<ul>
<li>
<p><a id="VUID-vkCmdEndRenderPass-commandBuffer-parameter"></a> <code>commandBuffer</code> <strong class="purple">must</strong> be a valid <code>VkCommandBuffer</code> handle</p>
</li>
<li>
<p><a id="VUID-vkCmdEndRenderPass-commandBuffer-recording"></a> <code>commandBuffer</code> <strong class="purple">must</strong> be in the <a href="#commandbuffers-lifecycle">recording state</a></p>
</li>
<li>
<p><a id="VUID-vkCmdEndRenderPass-commandBuffer-cmdpool"></a> The <code>VkCommandPool</code> that <code>commandBuffer</code> was allocated from <strong class="purple">must</strong> support graphics operations</p>
</li>
<li>
<p><a id="VUID-vkCmdEndRenderPass-renderpass"></a> This command <strong class="purple">must</strong> only be called inside of a render pass instance</p>
</li>
<li>
<p><a id="VUID-vkCmdEndRenderPass-bufferlevel"></a> <code>commandBuffer</code> <strong class="purple">must</strong> be a primary <code>VkCommandBuffer</code></p>
</li>
</ul>
</div>
</div>
</div>
<div class="sidebarblock">
<div class="content">
<div class="title">Host Synchronization</div>
<div class="ulist">
<ul>
<li>
<p>Host access to <code>commandBuffer</code> <strong class="purple">must</strong> be externally synchronized</p>
</li>
<li>
<p>Host access to the <code>VkCommandPool</code> that <code>commandBuffer</code> was allocated from <strong class="purple">must</strong> be externally synchronized</p>
</li>
</ul>
</div>
</div>
</div>
<div class="sidebarblock">
<div class="content">
<div class="title">Command Properties</div>
<table class="tableblock frame-all grid-all stretch">
<colgroup>
<col style="width: 25%;">
<col style="width: 25%;">
<col style="width: 25%;">
<col style="width: 25%;">
</colgroup>
<thead>
<tr>
<th class="tableblock halign-left valign-top"><a href="#VkCommandBufferLevel">Command Buffer Levels</a></th>
<th class="tableblock halign-left valign-top"><a href="#vkCmdBeginRenderPass">Render Pass Scope</a></th>
<th class="tableblock halign-left valign-top"><a href="#VkQueueFlagBits">Supported Queue Types</a></th>
<th class="tableblock halign-left valign-top"><a href="#synchronization-pipeline-stages-types">Pipeline Type</a></th>
</tr>
</thead>
<tbody>
<tr>
<td class="tableblock halign-left valign-top"><p class="tableblock">Primary</p></td>
<td class="tableblock halign-left valign-top"><p class="tableblock">Inside</p></td>
<td class="tableblock halign-left valign-top"><p class="tableblock">Graphics</p></td>
<td class="tableblock halign-left valign-top"><p class="tableblock">Graphics</p></td>
</tr>
</tbody>
</table>
</div>
</div>
</div>
<div class="sect3">
<h4 id="_see_also_60">See Also</h4>
<div class="paragraph">
<p><a href="#VkCommandBuffer">VkCommandBuffer</a></p>
</div>
</div>
<div class="sect3">
<h4 id="_document_notes_60">Document Notes</h4>
<div class="paragraph">
<p>For more information, see the Vulkan Specification at URL</p>
</div>
<div class="paragraph">
<p><a href="https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#vkCmdEndRenderPass" class="bare">https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#vkCmdEndRenderPass</a></p>
</div>
<div class="paragraph">
<p>This page is extracted from the Vulkan Specification.
Fixes and changes should be made to the Specification, not directly.</p>
</div>
<div style="page-break-after: always;"></div>
</div>
</div>
<div class="sect2">
<h3 id="_vkcmdendrenderpass2khr3">vkCmdEndRenderPass2KHR(3)</h3>
<div class="sect3">
<h4 id="_name_61">Name</h4>
<div class="paragraph">
<p>vkCmdEndRenderPass2KHR - End the current render pass</p>
</div>
</div>
<div class="sect3">
<h4 id="_c_specification_61">C Specification</h4>
<div class="paragraph">
<p>To record a command to end a render pass instance after recording the
commands for the last subpass, call:</p>
</div>
<div id="vkCmdEndRenderPass2KHR" class="listingblock">
<div class="content">
<pre class="highlight"><code class="language-c++" data-lang="c++">void vkCmdEndRenderPass2KHR(
    VkCommandBuffer                             commandBuffer,
    const VkSubpassEndInfoKHR*                  pSubpassEndInfo);</code></pre>
</div>
</div>
</div>
<div class="sect3">
<h4 id="_parameters_61">Parameters</h4>
<div class="ulist">
<ul>
<li>
<p><code>commandBuffer</code> is the command buffer in which to end the current
render pass instance.</p>
</li>
<li>
<p><code>pSubpassEndInfo</code> is a pointer to a <a href="#VkSubpassEndInfoKHR">VkSubpassEndInfoKHR</a>
structure which contains information about how the previous subpass will
be ended.</p>
</li>
</ul>
</div>
</div>
<div class="sect3">
<h4 id="_description_61">Description</h4>
<div class="paragraph">
<p><code>vkCmdEndRenderPass2KHR</code> is semantically identical to
<a href="#vkCmdEndRenderPass">vkCmdEndRenderPass</a>, except that it is extensible.</p>
</div>
<div class="sidebarblock">
<div class="content">
<div class="title">Valid Usage</div>
<div class="ulist">
<ul>
<li>
<p><a id="VUID-vkCmdEndRenderPass2KHR-None-03103"></a>
The current subpass index <strong class="purple">must</strong> be equal to the number of subpasses in
the render pass minus one</p>
</li>
<li>
<p><a id="VUID-vkCmdEndRenderPass2KHR-None-02352"></a>
This command <strong class="purple">must</strong> not be recorded when transform feedback is active</p>
</li>
</ul>
</div>
</div>
</div>
<div class="sidebarblock">
<div class="content">
<div class="title">Valid Usage (Implicit)</div>
<div class="ulist">
<ul>
<li>
<p><a id="VUID-vkCmdEndRenderPass2KHR-commandBuffer-parameter"></a> <code>commandBuffer</code> <strong class="purple">must</strong> be a valid <code>VkCommandBuffer</code> handle</p>
</li>
<li>
<p><a id="VUID-vkCmdEndRenderPass2KHR-pSubpassEndInfo-parameter"></a> <code>pSubpassEndInfo</code> <strong class="purple">must</strong> be a valid pointer to a valid <code>VkSubpassEndInfoKHR</code> structure</p>
</li>
<li>
<p><a id="VUID-vkCmdEndRenderPass2KHR-commandBuffer-recording"></a> <code>commandBuffer</code> <strong class="purple">must</strong> be in the <a href="#commandbuffers-lifecycle">recording state</a></p>
</li>
<li>
<p><a id="VUID-vkCmdEndRenderPass2KHR-commandBuffer-cmdpool"></a> The <code>VkCommandPool</code> that <code>commandBuffer</code> was allocated from <strong class="purple">must</strong> support graphics operations</p>
</li>
<li>
<p><a id="VUID-vkCmdEndRenderPass2KHR-renderpass"></a> This command <strong class="purple">must</strong> only be called inside of a render pass instance</p>
</li>
<li>
<p><a id="VUID-vkCmdEndRenderPass2KHR-bufferlevel"></a> <code>commandBuffer</code> <strong class="purple">must</strong> be a primary <code>VkCommandBuffer</code></p>
</li>
</ul>
</div>
</div>
</div>
<div class="sidebarblock">
<div class="content">
<div class="title">Host Synchronization</div>
<div class="ulist">
<ul>
<li>
<p>Host access to <code>commandBuffer</code> <strong class="purple">must</strong> be externally synchronized</p>
</li>
<li>
<p>Host access to the <code>VkCommandPool</code> that <code>commandBuffer</code> was allocated from <strong class="purple">must</strong> be externally synchronized</p>
</li>
</ul>
</div>
</div>
</div>
<div class="sidebarblock">
<div class="content">
<div class="title">Command Properties</div>
<table class="tableblock frame-all grid-all stretch">
<colgroup>
<col style="width: 25%;">
<col style="width: 25%;">
<col style="width: 25%;">
<col style="width: 25%;">
</colgroup>
<thead>
<tr>
<th class="tableblock halign-left valign-top"><a href="#VkCommandBufferLevel">Command Buffer Levels</a></th>
<th class="tableblock halign-left valign-top"><a href="#vkCmdBeginRenderPass">Render Pass Scope</a></th>
<th class="tableblock halign-left valign-top"><a href="#VkQueueFlagBits">Supported Queue Types</a></th>
<th class="tableblock halign-left valign-top"><a href="#synchronization-pipeline-stages-types">Pipeline Type</a></th>
</tr>
</thead>
<tbody>
<tr>
<td class="tableblock halign-left valign-top"><p class="tableblock">Primary</p></td>
<td class="tableblock halign-left valign-top"><p class="tableblock">Inside</p></td>
<td class="tableblock halign-left valign-top"><p class="tableblock">Graphics</p></td>
<td class="tableblock halign-left valign-top"><p class="tableblock">Graphics</p></td>
</tr>
</tbody>
</table>
</div>
</div>
</div>
<div class="sect3">
<h4 id="_see_also_61">See Also</h4>
<div class="paragraph">
<p><a href="#VkCommandBuffer">VkCommandBuffer</a>, <a href="#VkSubpassEndInfoKHR">VkSubpassEndInfoKHR</a></p>
</div>
</div>
<div class="sect3">
<h4 id="_document_notes_61">Document Notes</h4>
<div class="paragraph">
<p>For more information, see the Vulkan Specification at URL</p>
</div>
<div class="paragraph">
<p><a href="https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#vkCmdEndRenderPass2KHR" class="bare">https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#vkCmdEndRenderPass2KHR</a></p>
</div>
<div class="paragraph">
<p>This page is extracted from the Vulkan Specification.
Fixes and changes should be made to the Specification, not directly.</p>
</div>
<div style="page-break-after: always;"></div>
</div>
</div>
<div class="sect2">
<h3 id="_vkcmdendtransformfeedbackext3">vkCmdEndTransformFeedbackEXT(3)</h3>
<div class="sect3">
<h4 id="_name_62">Name</h4>
<div class="paragraph">
<p>vkCmdEndTransformFeedbackEXT - Make transform feedback inactive in the command buffer</p>
</div>
</div>
<div class="sect3">
<h4 id="_c_specification_62">C Specification</h4>
<div class="paragraph">
<p>Transform feedback for specific transform feedback buffers is made inactive
by calling:</p>
</div>
<div id="vkCmdEndTransformFeedbackEXT" class="listingblock">
<div class="content">
<pre class="highlight"><code class="language-c++" data-lang="c++">void vkCmdEndTransformFeedbackEXT(
    VkCommandBuffer                             commandBuffer,
    uint32_t                                    firstCounterBuffer,
    uint32_t                                    counterBufferCount,
    const VkBuffer*                             pCounterBuffers,
    const VkDeviceSize*                         pCounterBufferOffsets);</code></pre>
</div>
</div>
</div>
<div class="sect3">
<h4 id="_parameters_62">Parameters</h4>
<div class="ulist">
<ul>
<li>
<p><code>commandBuffer</code> is the command buffer into which the command is
recorded.</p>
</li>
<li>
<p><code>firstCounterBuffer</code> is the index of the first transform feedback
buffer corresponding to <code>pCounterBuffers</code>[0] and
<code>pCounterBufferOffsets</code>[0].</p>
</li>
<li>
<p><code>counterBufferCount</code> is the size of the <code>pCounterBuffers</code> and
<code>pCounterBufferOffsets</code> arrays.</p>
</li>
<li>
<p><code>pCounterBuffers</code> is an optional array of buffer handles to the
counter buffers used to record the current byte positions of each
transform feedback buffer where the next vertex output data would be
captured.
This <strong class="purple">can</strong> be used by a subsequent <a href="#vkCmdBeginTransformFeedbackEXT">vkCmdBeginTransformFeedbackEXT</a>
call to resume transform feedback capture from this position.
It can also be used by <a href="#vkCmdDrawIndirectByteCountEXT">vkCmdDrawIndirectByteCountEXT</a> to determine
the vertex count of the draw call.</p>
</li>
<li>
<p><code>pCounterBufferOffsets</code> is an optional array of offsets within each
of the <code>pCounterBuffers</code> where the counter values can be written.
The location in each counter buffer at these offsets <strong class="purple">must</strong> be large
enough to contain 4 bytes of data.
The data stored at this location is the byte offset from the start of
the transform feedback buffer binding where the next vertex data would
be written.
If <code>pCounterBufferOffsets</code> is <code>NULL</code>, then it is assumed the offsets
are zero.</p>
</li>
</ul>
</div>
</div>
<div class="sect3">
<h4 id="_description_62">Description</h4>
<div class="sidebarblock">
<div class="content">
<div class="title">Valid Usage</div>
<div class="ulist">
<ul>
<li>
<p><a id="VUID-vkCmdEndTransformFeedbackEXT-transformFeedback-02374"></a>
<code>VkPhysicalDeviceTransformFeedbackFeaturesEXT</code>::<code>transformFeedback</code>
<strong class="purple">must</strong> be enabled</p>
</li>
<li>
<p><a id="VUID-vkCmdEndTransformFeedbackEXT-None-02375"></a>
Transform feedback <strong class="purple">must</strong> be active</p>
</li>
<li>
<p><a id="VUID-vkCmdEndTransformFeedbackEXT-firstCounterBuffer-02376"></a>
<code>firstCounterBuffer</code> <strong class="purple">must</strong> be less than
<code>VkPhysicalDeviceTransformFeedbackPropertiesEXT</code>::<code>maxTransformFeedbackBuffers</code></p>
</li>
<li>
<p><a id="VUID-vkCmdEndTransformFeedbackEXT-firstCounterBuffer-02377"></a>
The sum of <code>firstCounterBuffer</code> and <code>counterBufferCount</code> <strong class="purple">must</strong>
be less than or equal to
<code>VkPhysicalDeviceTransformFeedbackPropertiesEXT</code>::<code>maxTransformFeedbackBuffers</code></p>
</li>
<li>
<p><a id="VUID-vkCmdEndTransformFeedbackEXT-counterBufferCount-02608"></a>
If <code>counterBufferCount</code> is not <code>0</code>, and <code>pCounterBuffers</code> is not
<code>NULL</code>, <code>pCounterBuffers</code> <strong class="purple">must</strong> be a valid pointer to an array of
<code>counterBufferCount</code> <code>VkBuffer</code> handles that are either valid or
<a href="#VK_NULL_HANDLE">VK_NULL_HANDLE</a></p>
</li>
<li>
<p><a id="VUID-vkCmdEndTransformFeedbackEXT-pCounterBufferOffsets-02378"></a>
For each buffer handle in the array, if it is not <a href="#VK_NULL_HANDLE">VK_NULL_HANDLE</a>
it <strong class="purple">must</strong> reference a buffer large enough to hold 4 bytes at the
corresponding offset from the <code>pCounterBufferOffsets</code> array</p>
</li>
<li>
<p><a id="VUID-vkCmdEndTransformFeedbackEXT-pCounterBuffer-02379"></a>
If <code>pCounterBuffer</code> is <code>NULL</code>, then <code>pCounterBufferOffsets</code>
<strong class="purple">must</strong> also be <code>NULL</code></p>
</li>
<li>
<p><a id="VUID-vkCmdEndTransformFeedbackEXT-pCounterBuffers-02380"></a>
For each buffer handle in the <code>pCounterBuffers</code> array that is not
<a href="#VK_NULL_HANDLE">VK_NULL_HANDLE</a> it <strong class="purple">must</strong> have been created with a <code>usage</code> value
containing
<code>VK_BUFFER_USAGE_TRANSFORM_FEEDBACK_COUNTER_BUFFER_BIT_EXT</code></p>
</li>
</ul>
</div>
</div>
</div>
<div class="sidebarblock">
<div class="content">
<div class="title">Valid Usage (Implicit)</div>
<div class="ulist">
<ul>
<li>
<p><a id="VUID-vkCmdEndTransformFeedbackEXT-commandBuffer-parameter"></a> <code>commandBuffer</code> <strong class="purple">must</strong> be a valid <code>VkCommandBuffer</code> handle</p>
</li>
<li>
<p><a id="VUID-vkCmdEndTransformFeedbackEXT-pCounterBufferOffsets-parameter"></a> If <code>counterBufferCount</code> is not <code>0</code>, and <code>pCounterBufferOffsets</code> is not <code>NULL</code>, <code>pCounterBufferOffsets</code> <strong class="purple">must</strong> be a valid pointer to an array of <code>counterBufferCount</code> <code>VkDeviceSize</code> values</p>
</li>
<li>
<p><a id="VUID-vkCmdEndTransformFeedbackEXT-commandBuffer-recording"></a> <code>commandBuffer</code> <strong class="purple">must</strong> be in the <a href="#commandbuffers-lifecycle">recording state</a></p>
</li>
<li>
<p><a id="VUID-vkCmdEndTransformFeedbackEXT-commandBuffer-cmdpool"></a> The <code>VkCommandPool</code> that <code>commandBuffer</code> was allocated from <strong class="purple">must</strong> support graphics operations</p>
</li>
<li>
<p><a id="VUID-vkCmdEndTransformFeedbackEXT-renderpass"></a> This command <strong class="purple">must</strong> only be called inside of a render pass instance</p>
</li>
<li>
<p><a id="VUID-vkCmdEndTransformFeedbackEXT-commonparent"></a> Both of <code>commandBuffer</code>, and the elements of <code>pCounterBuffers</code> that are valid handles <strong class="purple">must</strong> have been created, allocated, or retrieved from the same <code>VkDevice</code></p>
</li>
</ul>
</div>
</div>
</div>
<div class="sidebarblock">
<div class="content">
<div class="title">Host Synchronization</div>
<div class="ulist">
<ul>
<li>
<p>Host access to <code>commandBuffer</code> <strong class="purple">must</strong> be externally synchronized</p>
</li>
<li>
<p>Host access to the <code>VkCommandPool</code> that <code>commandBuffer</code> was allocated from <strong class="purple">must</strong> be externally synchronized</p>
</li>
</ul>
</div>
</div>
</div>
<div class="sidebarblock">
<div class="content">
<div class="title">Command Properties</div>
<table class="tableblock frame-all grid-all stretch">
<colgroup>
<col style="width: 25%;">
<col style="width: 25%;">
<col style="width: 25%;">
<col style="width: 25%;">
</colgroup>
<thead>
<tr>
<th class="tableblock halign-left valign-top"><a href="#VkCommandBufferLevel">Command Buffer Levels</a></th>
<th class="tableblock halign-left valign-top"><a href="#vkCmdBeginRenderPass">Render Pass Scope</a></th>
<th class="tableblock halign-left valign-top"><a href="#VkQueueFlagBits">Supported Queue Types</a></th>
<th class="tableblock halign-left valign-top"><a href="#synchronization-pipeline-stages-types">Pipeline Type</a></th>
</tr>
</thead>
<tbody>
<tr>
<td class="tableblock halign-left valign-top"><p class="tableblock">Primary<br>
Secondary</p></td>
<td class="tableblock halign-left valign-top"><p class="tableblock">Inside</p></td>
<td class="tableblock halign-left valign-top"><p class="tableblock">Graphics</p></td>
<td class="tableblock halign-left valign-top"></td>
</tr>
</tbody>
</table>
</div>
</div>
</div>
<div class="sect3">
<h4 id="_see_also_62">See Also</h4>
<div class="paragraph">
<p><a href="#VkBuffer">VkBuffer</a>, <a href="#VkCommandBuffer">VkCommandBuffer</a>, <code>VkDeviceSize</code></p>
</div>
</div>
<div class="sect3">
<h4 id="_document_notes_62">Document Notes</h4>
<div class="paragraph">
<p>For more information, see the Vulkan Specification at URL</p>
</div>
<div class="paragraph">
<p><a href="https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#vkCmdEndTransformFeedbackEXT" class="bare">https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#vkCmdEndTransformFeedbackEXT</a></p>
</div>
<div class="paragraph">
<p>This page is extracted from the Vulkan Specification.
Fixes and changes should be made to the Specification, not directly.</p>
</div>
<div style="page-break-after: always;"></div>
</div>
</div>
<div class="sect2">
<h3 id="_vkcmdexecutecommands3">vkCmdExecuteCommands(3)</h3>
<div class="sect3">
<h4 id="_name_63">Name</h4>
<div class="paragraph">
<p>vkCmdExecuteCommands - Execute a secondary command buffer from a primary command buffer</p>
</div>
</div>
<div class="sect3">
<h4 id="_c_specification_63">C Specification</h4>
<div class="paragraph">
<p>A secondary command buffer <strong class="purple">must</strong> not be directly submitted to a queue.
Instead, secondary command buffers are recorded to execute as part of a
primary command buffer with the command:</p>
</div>
<div id="vkCmdExecuteCommands" class="listingblock">
<div class="content">
<pre class="highlight"><code class="language-c++" data-lang="c++">void vkCmdExecuteCommands(
    VkCommandBuffer                             commandBuffer,
    uint32_t                                    commandBufferCount,
    const VkCommandBuffer*                      pCommandBuffers);</code></pre>
</div>
</div>
</div>
<div class="sect3">
<h4 id="_parameters_63">Parameters</h4>
<div class="ulist">
<ul>
<li>
<p><code>commandBuffer</code> is a handle to a primary command buffer that the
secondary command buffers are executed in.</p>
</li>
<li>
<p><code>commandBufferCount</code> is the length of the <code>pCommandBuffers</code>
array.</p>
</li>
<li>
<p><code>pCommandBuffers</code> is an array of secondary command buffer handles,
which are recorded to execute in the primary command buffer in the order
they are listed in the array.</p>
</li>
</ul>
</div>
</div>
<div class="sect3">
<h4 id="_description_63">Description</h4>
<div class="paragraph">
<p>If any element of <code>pCommandBuffers</code> was not recorded with the
<code>VK_COMMAND_BUFFER_USAGE_SIMULTANEOUS_USE_BIT</code> flag, and it was recorded
into any other primary command buffer which is currently in the
<a href="vkspec.html#commandbuffers-lifecycle">executable or recording state</a>, that primary
command buffer becomes <a href="vkspec.html#commandbuffers-lifecycle">invalid</a>.</p>
</div>
<div class="sidebarblock">
<div class="content">
<div class="title">Valid Usage</div>
<div class="ulist">
<ul>
<li>
<p><a id="VUID-vkCmdExecuteCommands-commandBuffer-00087"></a>
<code>commandBuffer</code> <strong class="purple">must</strong> have been allocated with a <code>level</code> of
<code>VK_COMMAND_BUFFER_LEVEL_PRIMARY</code></p>
</li>
<li>
<p><a id="VUID-vkCmdExecuteCommands-pCommandBuffers-00088"></a>
Each element of <code>pCommandBuffers</code> <strong class="purple">must</strong> have been allocated with a
<code>level</code> of <code>VK_COMMAND_BUFFER_LEVEL_SECONDARY</code></p>
</li>
<li>
<p><a id="VUID-vkCmdExecuteCommands-pCommandBuffers-00089"></a>
Each element of <code>pCommandBuffers</code> <strong class="purple">must</strong> be in the
<a href="vkspec.html#commandbuffers-lifecycle">pending or executable state</a>.</p>
</li>
<li>
<p><a id="VUID-vkCmdExecuteCommands-pCommandBuffers-00090"></a>
If any element of <code>pCommandBuffers</code> was not recorded with the
<code>VK_COMMAND_BUFFER_USAGE_SIMULTANEOUS_USE_BIT</code> flag, and it was
recorded into any other primary command buffer, that primary command
buffer <strong class="purple">must</strong> not be in the <a href="vkspec.html#commandbuffers-lifecycle">pending state</a></p>
</li>
<li>
<p><a id="VUID-vkCmdExecuteCommands-pCommandBuffers-00091"></a>
If any element of <code>pCommandBuffers</code> was not recorded with the
<code>VK_COMMAND_BUFFER_USAGE_SIMULTANEOUS_USE_BIT</code> flag, it <strong class="purple">must</strong> not be
in the <a href="vkspec.html#commandbuffers-lifecycle">pending state</a>.</p>
</li>
<li>
<p><a id="VUID-vkCmdExecuteCommands-pCommandBuffers-00092"></a>
If any element of <code>pCommandBuffers</code> was not recorded with the
<code>VK_COMMAND_BUFFER_USAGE_SIMULTANEOUS_USE_BIT</code> flag, it <strong class="purple">must</strong> not
have already been recorded to <code>commandBuffer</code>.</p>
</li>
<li>
<p><a id="VUID-vkCmdExecuteCommands-pCommandBuffers-00093"></a>
If any element of <code>pCommandBuffers</code> was not recorded with the
<code>VK_COMMAND_BUFFER_USAGE_SIMULTANEOUS_USE_BIT</code> flag, it <strong class="purple">must</strong> not
appear more than once in <code>pCommandBuffers</code>.</p>
</li>
<li>
<p><a id="VUID-vkCmdExecuteCommands-pCommandBuffers-00094"></a>
Each element of <code>pCommandBuffers</code> <strong class="purple">must</strong> have been allocated from a
<code>VkCommandPool</code> that was created for the same queue family as the
<code>VkCommandPool</code> from which <code>commandBuffer</code> was allocated</p>
</li>
<li>
<p><a id="VUID-vkCmdExecuteCommands-contents-00095"></a>
If <code>vkCmdExecuteCommands</code> is being called within a render pass
instance, that render pass instance <strong class="purple">must</strong> have been begun with the
<code>contents</code> parameter of <code>vkCmdBeginRenderPass</code> set to
<code>VK_SUBPASS_CONTENTS_SECONDARY_COMMAND_BUFFERS</code></p>
</li>
<li>
<p><a id="VUID-vkCmdExecuteCommands-pCommandBuffers-00096"></a>
If <code>vkCmdExecuteCommands</code> is being called within a render pass
instance, each element of <code>pCommandBuffers</code> <strong class="purple">must</strong> have been recorded
with the <code>VK_COMMAND_BUFFER_USAGE_RENDER_PASS_CONTINUE_BIT</code></p>
</li>
<li>
<p><a id="VUID-vkCmdExecuteCommands-pCommandBuffers-00097"></a>
If <code>vkCmdExecuteCommands</code> is being called within a render pass
instance, each element of <code>pCommandBuffers</code> <strong class="purple">must</strong> have been recorded
with <code>VkCommandBufferInheritanceInfo</code>::<code>subpass</code> set to the
index of the subpass which the given command buffer will be executed in</p>
</li>
<li>
<p><a id="VUID-vkCmdExecuteCommands-pInheritanceInfo-00098"></a>
If <code>vkCmdExecuteCommands</code> is being called within a render pass
instance, the render passes specified in the
<code>pBeginInfo</code>::<code>pInheritanceInfo</code>::<code>renderPass</code> members of
the <a href="#vkBeginCommandBuffer">vkBeginCommandBuffer</a> commands used to begin recording each
element of <code>pCommandBuffers</code> <strong class="purple">must</strong> be
<a href="vkspec.html#renderpass-compatibility">compatible</a> with the current render pass.</p>
</li>
<li>
<p><a id="VUID-vkCmdExecuteCommands-pCommandBuffers-00099"></a>
If <code>vkCmdExecuteCommands</code> is being called within a render pass
instance, and any element of <code>pCommandBuffers</code> was recorded with
<code>VkCommandBufferInheritanceInfo</code>::<code>framebuffer</code> not equal to
<a href="#VK_NULL_HANDLE">VK_NULL_HANDLE</a>, that <code>VkFramebuffer</code> <strong class="purple">must</strong> match the
<code>VkFramebuffer</code> used in the current render pass instance</p>
</li>
<li>
<p><a id="VUID-vkCmdExecuteCommands-pCommandBuffers-00100"></a>
If <code>vkCmdExecuteCommands</code> is not being called within a render pass
instance, each element of <code>pCommandBuffers</code> <strong class="purple">must</strong> not have been
recorded with the <code>VK_COMMAND_BUFFER_USAGE_RENDER_PASS_CONTINUE_BIT</code></p>
</li>
<li>
<p><a id="VUID-vkCmdExecuteCommands-commandBuffer-00101"></a>
If the <a href="vkspec.html#features-inheritedQueries">inherited queries</a> feature is not
enabled, <code>commandBuffer</code> <strong class="purple">must</strong> not have any queries
<a href="vkspec.html#queries-operation-active">active</a></p>
</li>
<li>
<p><a id="VUID-vkCmdExecuteCommands-commandBuffer-00102"></a>
If <code>commandBuffer</code> has a <code>VK_QUERY_TYPE_OCCLUSION</code> query
<a href="vkspec.html#queries-operation-active">active</a>, then each element of
<code>pCommandBuffers</code> <strong class="purple">must</strong> have been recorded with
<code>VkCommandBufferInheritanceInfo</code>::<code>occlusionQueryEnable</code> set to
<code>VK_TRUE</code></p>
</li>
<li>
<p><a id="VUID-vkCmdExecuteCommands-commandBuffer-00103"></a>
If <code>commandBuffer</code> has a <code>VK_QUERY_TYPE_OCCLUSION</code> query
<a href="vkspec.html#queries-operation-active">active</a>, then each element of
<code>pCommandBuffers</code> <strong class="purple">must</strong> have been recorded with
<code>VkCommandBufferInheritanceInfo</code>::<code>queryFlags</code> having all bits
set that are set for the query</p>
</li>
<li>
<p><a id="VUID-vkCmdExecuteCommands-commandBuffer-00104"></a>
If <code>commandBuffer</code> has a <code>VK_QUERY_TYPE_PIPELINE_STATISTICS</code>
query <a href="vkspec.html#queries-operation-active">active</a>, then each element of
<code>pCommandBuffers</code> <strong class="purple">must</strong> have been recorded with
<code>VkCommandBufferInheritanceInfo</code>::<code>pipelineStatistics</code> having
all bits set that are set in the <code>VkQueryPool</code> the query uses</p>
</li>
<li>
<p><a id="VUID-vkCmdExecuteCommands-pCommandBuffers-00105"></a>
Each element of <code>pCommandBuffers</code> <strong class="purple">must</strong> not begin any query types
that are <a href="vkspec.html#queries-operation-active">active</a> in <code>commandBuffer</code></p>
</li>
<li>
<p><a id="VUID-vkCmdExecuteCommands-commandBuffer-01820"></a>
If <code>commandBuffer</code> is a protected command buffer, then each element
of <code>pCommandBuffers</code> <strong class="purple">must</strong> be a protected command buffer.</p>
</li>
<li>
<p><a id="VUID-vkCmdExecuteCommands-commandBuffer-01821"></a>
If <code>commandBuffer</code> is an unprotected command buffer, then each
element of <code>pCommandBuffers</code> <strong class="purple">must</strong> be an unprotected command buffer.</p>
</li>
<li>
<p><a id="VUID-vkCmdExecuteCommands-None-02286"></a>
This command <strong class="purple">must</strong> not be recorded when transform feedback is active</p>
</li>
</ul>
</div>
</div>
</div>
<div class="sidebarblock">
<div class="content">
<div class="title">Valid Usage (Implicit)</div>
<div class="ulist">
<ul>
<li>
<p><a id="VUID-vkCmdExecuteCommands-commandBuffer-parameter"></a> <code>commandBuffer</code> <strong class="purple">must</strong> be a valid <code>VkCommandBuffer</code> handle</p>
</li>
<li>
<p><a id="VUID-vkCmdExecuteCommands-pCommandBuffers-parameter"></a> <code>pCommandBuffers</code> <strong class="purple">must</strong> be a valid pointer to an array of <code>commandBufferCount</code> valid <code>VkCommandBuffer</code> handles</p>
</li>
<li>
<p><a id="VUID-vkCmdExecuteCommands-commandBuffer-recording"></a> <code>commandBuffer</code> <strong class="purple">must</strong> be in the <a href="#commandbuffers-lifecycle">recording state</a></p>
</li>
<li>
<p><a id="VUID-vkCmdExecuteCommands-commandBuffer-cmdpool"></a> The <code>VkCommandPool</code> that <code>commandBuffer</code> was allocated from <strong class="purple">must</strong> support transfer, graphics, or compute operations</p>
</li>
<li>
<p><a id="VUID-vkCmdExecuteCommands-bufferlevel"></a> <code>commandBuffer</code> <strong class="purple">must</strong> be a primary <code>VkCommandBuffer</code></p>
</li>
<li>
<p><a id="VUID-vkCmdExecuteCommands-commandBufferCount-arraylength"></a> <code>commandBufferCount</code> <strong class="purple">must</strong> be greater than <code>0</code></p>
</li>
<li>
<p><a id="VUID-vkCmdExecuteCommands-commonparent"></a> Both of <code>commandBuffer</code>, and the elements of <code>pCommandBuffers</code> <strong class="purple">must</strong> have been created, allocated, or retrieved from the same <code>VkDevice</code></p>
</li>
</ul>
</div>
</div>
</div>
<div class="sidebarblock">
<div class="content">
<div class="title">Host Synchronization</div>
<div class="ulist">
<ul>
<li>
<p>Host access to <code>commandBuffer</code> <strong class="purple">must</strong> be externally synchronized</p>
</li>
<li>
<p>Host access to the <code>VkCommandPool</code> that <code>commandBuffer</code> was allocated from <strong class="purple">must</strong> be externally synchronized</p>
</li>
</ul>
</div>
</div>
</div>
<div class="sidebarblock">
<div class="content">
<div class="title">Command Properties</div>
<table class="tableblock frame-all grid-all stretch">
<colgroup>
<col style="width: 25%;">
<col style="width: 25%;">
<col style="width: 25%;">
<col style="width: 25%;">
</colgroup>
<thead>
<tr>
<th class="tableblock halign-left valign-top"><a href="#VkCommandBufferLevel">Command Buffer Levels</a></th>
<th class="tableblock halign-left valign-top"><a href="#vkCmdBeginRenderPass">Render Pass Scope</a></th>
<th class="tableblock halign-left valign-top"><a href="#VkQueueFlagBits">Supported Queue Types</a></th>
<th class="tableblock halign-left valign-top"><a href="#synchronization-pipeline-stages-types">Pipeline Type</a></th>
</tr>
</thead>
<tbody>
<tr>
<td class="tableblock halign-left valign-top"><p class="tableblock">Primary</p></td>
<td class="tableblock halign-left valign-top"><p class="tableblock">Both</p></td>
<td class="tableblock halign-left valign-top"><p class="tableblock">Transfer<br>
Graphics<br>
Compute</p></td>
<td class="tableblock halign-left valign-top"></td>
</tr>
</tbody>
</table>
</div>
</div>
</div>
<div class="sect3">
<h4 id="_see_also_63">See Also</h4>
<div class="paragraph">
<p><a href="#VkCommandBuffer">VkCommandBuffer</a></p>
</div>
</div>
<div class="sect3">
<h4 id="_document_notes_63">Document Notes</h4>
<div class="paragraph">
<p>For more information, see the Vulkan Specification at URL</p>
</div>
<div class="paragraph">
<p><a href="https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#vkCmdExecuteCommands" class="bare">https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#vkCmdExecuteCommands</a></p>
</div>
<div class="paragraph">
<p>This page is extracted from the Vulkan Specification.
Fixes and changes should be made to the Specification, not directly.</p>
</div>
<div style="page-break-after: always;"></div>
</div>
</div>
<div class="sect2">
<h3 id="_vkcmdfillbuffer3">vkCmdFillBuffer(3)</h3>
<div class="sect3">
<h4 id="_name_64">Name</h4>
<div class="paragraph">
<p>vkCmdFillBuffer - Fill a region of a buffer with a fixed value</p>
</div>
</div>
<div class="sect3">
<h4 id="_c_specification_64">C Specification</h4>
<div class="paragraph">
<p>To clear buffer data, call:</p>
</div>
<div id="vkCmdFillBuffer" class="listingblock">
<div class="content">
<pre class="highlight"><code class="language-c++" data-lang="c++">void vkCmdFillBuffer(
    VkCommandBuffer                             commandBuffer,
    VkBuffer                                    dstBuffer,
    VkDeviceSize                                dstOffset,
    VkDeviceSize                                size,
    uint32_t                                    data);</code></pre>
</div>
</div>
</div>
<div class="sect3">
<h4 id="_parameters_64">Parameters</h4>
<div class="ulist">
<ul>
<li>
<p><code>commandBuffer</code> is the command buffer into which the command will be
recorded.</p>
</li>
<li>
<p><code>dstBuffer</code> is the buffer to be filled.</p>
</li>
<li>
<p><code>dstOffset</code> is the byte offset into the buffer at which to start
filling, and <strong class="purple">must</strong> be a multiple of 4.</p>
</li>
<li>
<p><code>size</code> is the number of bytes to fill, and <strong class="purple">must</strong> be either a
multiple of 4, or <code>VK_WHOLE_SIZE</code> to fill the range from
<code>offset</code> to the end of the buffer.
If <code>VK_WHOLE_SIZE</code> is used and the remaining size of the buffer is
not a multiple of 4, then the nearest smaller multiple is used.</p>
</li>
<li>
<p><code>data</code> is the 4-byte word written repeatedly to the buffer to fill
<code>size</code> bytes of data.
The data word is written to memory according to the host endianness.</p>
</li>
</ul>
</div>
</div>
<div class="sect3">
<h4 id="_description_64">Description</h4>
<div class="paragraph">
<p><code>vkCmdFillBuffer</code> is treated as &#8220;transfer&#8221; operation for the purposes
of synchronization barriers.
The <code>VK_BUFFER_USAGE_TRANSFER_DST_BIT</code> <strong class="purple">must</strong> be specified in <code>usage</code>
of <code>VkBufferCreateInfo</code> in order for the buffer to be compatible with
<code>vkCmdFillBuffer</code>.</p>
</div>
<div class="sidebarblock">
<div class="content">
<div class="title">Valid Usage</div>
<div class="ulist">
<ul>
<li>
<p><a id="VUID-vkCmdFillBuffer-dstOffset-00024"></a>
<code>dstOffset</code> <strong class="purple">must</strong> be less than the size of <code>dstBuffer</code></p>
</li>
<li>
<p><a id="VUID-vkCmdFillBuffer-dstOffset-00025"></a>
<code>dstOffset</code> <strong class="purple">must</strong> be a multiple of <code>4</code></p>
</li>
<li>
<p><a id="VUID-vkCmdFillBuffer-size-00026"></a>
If <code>size</code> is not equal to <code>VK_WHOLE_SIZE</code>, <code>size</code> <strong class="purple">must</strong> be
greater than <code>0</code></p>
</li>
<li>
<p><a id="VUID-vkCmdFillBuffer-size-00027"></a>
If <code>size</code> is not equal to <code>VK_WHOLE_SIZE</code>, <code>size</code> <strong class="purple">must</strong> be
less than or equal to the size of <code>dstBuffer</code> minus <code>dstOffset</code></p>
</li>
<li>
<p><a id="VUID-vkCmdFillBuffer-size-00028"></a>
If <code>size</code> is not equal to <code>VK_WHOLE_SIZE</code>, <code>size</code> <strong class="purple">must</strong> be a
multiple of <code>4</code></p>
</li>
<li>
<p><a id="VUID-vkCmdFillBuffer-dstBuffer-00029"></a>
<code>dstBuffer</code> <strong class="purple">must</strong> have been created with
<code>VK_BUFFER_USAGE_TRANSFER_DST_BIT</code> usage flag</p>
</li>
<li>
<p><a id="VUID-vkCmdFillBuffer-dstBuffer-00031"></a>
If <code>dstBuffer</code> is non-sparse then it <strong class="purple">must</strong> be bound completely and
contiguously to a single <code>VkDeviceMemory</code> object</p>
</li>
<li>
<p><a id="VUID-vkCmdFillBuffer-commandBuffer-01811"></a>
If <code>commandBuffer</code> is an unprotected command buffer, then
<code>dstBuffer</code> <strong class="purple">must</strong> not be a protected buffer</p>
</li>
<li>
<p><a id="VUID-vkCmdFillBuffer-commandBuffer-01812"></a>
If <code>commandBuffer</code> is a protected command buffer, then
<code>dstBuffer</code> <strong class="purple">must</strong> not be an unprotected buffer</p>
</li>
</ul>
</div>
</div>
</div>
<div class="sidebarblock">
<div class="content">
<div class="title">Valid Usage (Implicit)</div>
<div class="ulist">
<ul>
<li>
<p><a id="VUID-vkCmdFillBuffer-commandBuffer-parameter"></a> <code>commandBuffer</code> <strong class="purple">must</strong> be a valid <code>VkCommandBuffer</code> handle</p>
</li>
<li>
<p><a id="VUID-vkCmdFillBuffer-dstBuffer-parameter"></a> <code>dstBuffer</code> <strong class="purple">must</strong> be a valid <code>VkBuffer</code> handle</p>
</li>
<li>
<p><a id="VUID-vkCmdFillBuffer-commandBuffer-recording"></a> <code>commandBuffer</code> <strong class="purple">must</strong> be in the <a href="#commandbuffers-lifecycle">recording state</a></p>
</li>
<li>
<p><a id="VUID-vkCmdFillBuffer-commandBuffer-cmdpool"></a> The <code>VkCommandPool</code> that <code>commandBuffer</code> was allocated from <strong class="purple">must</strong> support transfer, graphics or compute operations</p>
</li>
<li>
<p><a id="VUID-vkCmdFillBuffer-renderpass"></a> This command <strong class="purple">must</strong> only be called outside of a render pass instance</p>
</li>
<li>
<p><a id="VUID-vkCmdFillBuffer-commonparent"></a> Both of <code>commandBuffer</code>, and <code>dstBuffer</code> <strong class="purple">must</strong> have been created, allocated, or retrieved from the same <code>VkDevice</code></p>
</li>
</ul>
</div>
</div>
</div>
<div class="sidebarblock">
<div class="content">
<div class="title">Host Synchronization</div>
<div class="ulist">
<ul>
<li>
<p>Host access to <code>commandBuffer</code> <strong class="purple">must</strong> be externally synchronized</p>
</li>
<li>
<p>Host access to the <code>VkCommandPool</code> that <code>commandBuffer</code> was allocated from <strong class="purple">must</strong> be externally synchronized</p>
</li>
</ul>
</div>
</div>
</div>
<div class="sidebarblock">
<div class="content">
<div class="title">Command Properties</div>
<table class="tableblock frame-all grid-all stretch">
<colgroup>
<col style="width: 25%;">
<col style="width: 25%;">
<col style="width: 25%;">
<col style="width: 25%;">
</colgroup>
<thead>
<tr>
<th class="tableblock halign-left valign-top"><a href="#VkCommandBufferLevel">Command Buffer Levels</a></th>
<th class="tableblock halign-left valign-top"><a href="#vkCmdBeginRenderPass">Render Pass Scope</a></th>
<th class="tableblock halign-left valign-top"><a href="#VkQueueFlagBits">Supported Queue Types</a></th>
<th class="tableblock halign-left valign-top"><a href="#synchronization-pipeline-stages-types">Pipeline Type</a></th>
</tr>
</thead>
<tbody>
<tr>
<td class="tableblock halign-left valign-top"><p class="tableblock">Primary<br>
Secondary</p></td>
<td class="tableblock halign-left valign-top"><p class="tableblock">Outside</p></td>
<td class="tableblock halign-left valign-top"><p class="tableblock">Transfer<br>
Graphics<br>
Compute</p></td>
<td class="tableblock halign-left valign-top"><p class="tableblock">Transfer</p></td>
</tr>
</tbody>
</table>
</div>
</div>
</div>
<div class="sect3">
<h4 id="_see_also_64">See Also</h4>
<div class="paragraph">
<p><a href="#VkBuffer">VkBuffer</a>, <a href="#VkCommandBuffer">VkCommandBuffer</a>, <code>VkDeviceSize</code></p>
</div>
</div>
<div class="sect3">
<h4 id="_document_notes_64">Document Notes</h4>
<div class="paragraph">
<p>For more information, see the Vulkan Specification at URL</p>
</div>
<div class="paragraph">
<p><a href="https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#vkCmdFillBuffer" class="bare">https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#vkCmdFillBuffer</a></p>
</div>
<div class="paragraph">
<p>This page is extracted from the Vulkan Specification.
Fixes and changes should be made to the Specification, not directly.</p>
</div>
<div style="page-break-after: always;"></div>
</div>
</div>
<div class="sect2">
<h3 id="_vkcmdinsertdebugutilslabelext3">vkCmdInsertDebugUtilsLabelEXT(3)</h3>
<div class="sect3">
<h4 id="_name_65">Name</h4>
<div class="paragraph">
<p>vkCmdInsertDebugUtilsLabelEXT - Insert a label into a command buffer</p>
</div>
</div>
<div class="sect3">
<h4 id="_c_specification_65">C Specification</h4>
<div class="paragraph">
<p>A single debug label can be inserted into a command buffer by calling:</p>
</div>
<div id="vkCmdInsertDebugUtilsLabelEXT" class="listingblock">
<div class="content">
<pre class="highlight"><code class="language-c++" data-lang="c++">void vkCmdInsertDebugUtilsLabelEXT(
    VkCommandBuffer                             commandBuffer,
    const VkDebugUtilsLabelEXT*                 pLabelInfo);</code></pre>
</div>
</div>
</div>
<div class="sect3">
<h4 id="_parameters_65">Parameters</h4>
<div class="ulist">
<ul>
<li>
<p><code>commandBuffer</code> is the command buffer into which the command is
recorded.</p>
</li>
<li>
<p><code>pInfo</code> is a pointer to an instance of the
<a href="#VkDebugUtilsLabelEXT">VkDebugUtilsLabelEXT</a> structure specifying the parameters of the
label to insert.</p>
</li>
</ul>
</div>
</div>
<div class="sect3">
<h4 id="_description_65">Description</h4>
<div class="sidebarblock">
<div class="content">
<div class="title">Valid Usage (Implicit)</div>
<div class="ulist">
<ul>
<li>
<p><a id="VUID-vkCmdInsertDebugUtilsLabelEXT-commandBuffer-parameter"></a> <code>commandBuffer</code> <strong class="purple">must</strong> be a valid <code>VkCommandBuffer</code> handle</p>
</li>
<li>
<p><a id="VUID-vkCmdInsertDebugUtilsLabelEXT-pLabelInfo-parameter"></a> <code>pLabelInfo</code> <strong class="purple">must</strong> be a valid pointer to a valid <code>VkDebugUtilsLabelEXT</code> structure</p>
</li>
<li>
<p><a id="VUID-vkCmdInsertDebugUtilsLabelEXT-commandBuffer-recording"></a> <code>commandBuffer</code> <strong class="purple">must</strong> be in the <a href="#commandbuffers-lifecycle">recording state</a></p>
</li>
<li>
<p><a id="VUID-vkCmdInsertDebugUtilsLabelEXT-commandBuffer-cmdpool"></a> The <code>VkCommandPool</code> that <code>commandBuffer</code> was allocated from <strong class="purple">must</strong> support graphics, or compute operations</p>
</li>
</ul>
</div>
</div>
</div>
<div class="sidebarblock">
<div class="content">
<div class="title">Host Synchronization</div>
<div class="ulist">
<ul>
<li>
<p>Host access to the <code>VkCommandPool</code> that <code>commandBuffer</code> was allocated from <strong class="purple">must</strong> be externally synchronized</p>
</li>
</ul>
</div>
</div>
</div>
<div class="sidebarblock">
<div class="content">
<div class="title">Command Properties</div>
<table class="tableblock frame-all grid-all stretch">
<colgroup>
<col style="width: 25%;">
<col style="width: 25%;">
<col style="width: 25%;">
<col style="width: 25%;">
</colgroup>
<thead>
<tr>
<th class="tableblock halign-left valign-top"><a href="#VkCommandBufferLevel">Command Buffer Levels</a></th>
<th class="tableblock halign-left valign-top"><a href="#vkCmdBeginRenderPass">Render Pass Scope</a></th>
<th class="tableblock halign-left valign-top"><a href="#VkQueueFlagBits">Supported Queue Types</a></th>
<th class="tableblock halign-left valign-top"><a href="#synchronization-pipeline-stages-types">Pipeline Type</a></th>
</tr>
</thead>
<tbody>
<tr>
<td class="tableblock halign-left valign-top"><p class="tableblock">Primary<br>
Secondary</p></td>
<td class="tableblock halign-left valign-top"><p class="tableblock">Both</p></td>
<td class="tableblock halign-left valign-top"><p class="tableblock">Graphics<br>
Compute</p></td>
<td class="tableblock halign-left valign-top"></td>
</tr>
</tbody>
</table>
</div>
</div>
</div>
<div class="sect3">
<h4 id="_see_also_65">See Also</h4>
<div class="paragraph">
<p><a href="#VkCommandBuffer">VkCommandBuffer</a>, <a href="#VkDebugUtilsLabelEXT">VkDebugUtilsLabelEXT</a></p>
</div>
</div>
<div class="sect3">
<h4 id="_document_notes_65">Document Notes</h4>
<div class="paragraph">
<p>For more information, see the Vulkan Specification at URL</p>
</div>
<div class="paragraph">
<p><a href="https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#vkCmdInsertDebugUtilsLabelEXT" class="bare">https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#vkCmdInsertDebugUtilsLabelEXT</a></p>
</div>
<div class="paragraph">
<p>This page is extracted from the Vulkan Specification.
Fixes and changes should be made to the Specification, not directly.</p>
</div>
<div style="page-break-after: always;"></div>
</div>
</div>
<div class="sect2">
<h3 id="_vkcmdnextsubpass3">vkCmdNextSubpass(3)</h3>
<div class="sect3">
<h4 id="_name_66">Name</h4>
<div class="paragraph">
<p>vkCmdNextSubpass - Transition to the next subpass of a render pass</p>
</div>
</div>
<div class="sect3">
<h4 id="_c_specification_66">C Specification</h4>
<div class="paragraph">
<p>To transition to the next subpass in the render pass instance after
recording the commands for a subpass, call:</p>
</div>
<div id="vkCmdNextSubpass" class="listingblock">
<div class="content">
<pre class="highlight"><code class="language-c++" data-lang="c++">void vkCmdNextSubpass(
    VkCommandBuffer                             commandBuffer,
    VkSubpassContents                           contents);</code></pre>
</div>
</div>
</div>
<div class="sect3">
<h4 id="_parameters_66">Parameters</h4>
<div class="ulist">
<ul>
<li>
<p><code>commandBuffer</code> is the command buffer in which to record the
command.</p>
</li>
<li>
<p><code>contents</code> specifies how the commands in the next subpass will be
provided, in the same fashion as the corresponding parameter of
<a href="#vkCmdBeginRenderPass">vkCmdBeginRenderPass</a>.</p>
</li>
</ul>
</div>
</div>
<div class="sect3">
<h4 id="_description_66">Description</h4>
<div class="paragraph">
<p>The subpass index for a render pass begins at zero when
<code>vkCmdBeginRenderPass</code> is recorded, and increments each time
<code>vkCmdNextSubpass</code> is recorded.</p>
</div>
<div class="paragraph">
<p>Moving to the next subpass automatically performs any multisample resolve
operations in the subpass being ended.
End-of-subpass multisample resolves are treated as color attachment writes
for the purposes of synchronization.
This applies to resolve operations for both color and depth/stencil
attachments.
That is, they are considered to execute in the
<code>VK_PIPELINE_STAGE_COLOR_ATTACHMENT_OUTPUT_BIT</code> pipeline stage and their
writes are synchronized with <code>VK_ACCESS_COLOR_ATTACHMENT_WRITE_BIT</code>.
Synchronization between rendering within a subpass and any resolve
operations at the end of the subpass occurs automatically, without need for
explicit dependencies or pipeline barriers.
However, if the resolve attachment is also used in a different subpass, an
explicit dependency is needed.</p>
</div>
<div class="paragraph">
<p>After transitioning to the next subpass, the application <strong class="purple">can</strong> record the
commands for that subpass.</p>
</div>
<div class="sidebarblock">
<div class="content">
<div class="title">Valid Usage</div>
<div class="ulist">
<ul>
<li>
<p><a id="VUID-vkCmdNextSubpass-None-00909"></a>
The current subpass index <strong class="purple">must</strong> be less than the number of subpasses in
the render pass minus one</p>
</li>
<li>
<p><a id="VUID-vkCmdNextSubpass-None-02349"></a>
This command <strong class="purple">must</strong> not be recorded when transform feedback is active</p>
</li>
</ul>
</div>
</div>
</div>
<div class="sidebarblock">
<div class="content">
<div class="title">Valid Usage (Implicit)</div>
<div class="ulist">
<ul>
<li>
<p><a id="VUID-vkCmdNextSubpass-commandBuffer-parameter"></a> <code>commandBuffer</code> <strong class="purple">must</strong> be a valid <code>VkCommandBuffer</code> handle</p>
</li>
<li>
<p><a id="VUID-vkCmdNextSubpass-contents-parameter"></a> <code>contents</code> <strong class="purple">must</strong> be a valid <a href="#VkSubpassContents">VkSubpassContents</a> value</p>
</li>
<li>
<p><a id="VUID-vkCmdNextSubpass-commandBuffer-recording"></a> <code>commandBuffer</code> <strong class="purple">must</strong> be in the <a href="#commandbuffers-lifecycle">recording state</a></p>
</li>
<li>
<p><a id="VUID-vkCmdNextSubpass-commandBuffer-cmdpool"></a> The <code>VkCommandPool</code> that <code>commandBuffer</code> was allocated from <strong class="purple">must</strong> support graphics operations</p>
</li>
<li>
<p><a id="VUID-vkCmdNextSubpass-renderpass"></a> This command <strong class="purple">must</strong> only be called inside of a render pass instance</p>
</li>
<li>
<p><a id="VUID-vkCmdNextSubpass-bufferlevel"></a> <code>commandBuffer</code> <strong class="purple">must</strong> be a primary <code>VkCommandBuffer</code></p>
</li>
</ul>
</div>
</div>
</div>
<div class="sidebarblock">
<div class="content">
<div class="title">Host Synchronization</div>
<div class="ulist">
<ul>
<li>
<p>Host access to <code>commandBuffer</code> <strong class="purple">must</strong> be externally synchronized</p>
</li>
<li>
<p>Host access to the <code>VkCommandPool</code> that <code>commandBuffer</code> was allocated from <strong class="purple">must</strong> be externally synchronized</p>
</li>
</ul>
</div>
</div>
</div>
<div class="sidebarblock">
<div class="content">
<div class="title">Command Properties</div>
<table class="tableblock frame-all grid-all stretch">
<colgroup>
<col style="width: 25%;">
<col style="width: 25%;">
<col style="width: 25%;">
<col style="width: 25%;">
</colgroup>
<thead>
<tr>
<th class="tableblock halign-left valign-top"><a href="#VkCommandBufferLevel">Command Buffer Levels</a></th>
<th class="tableblock halign-left valign-top"><a href="#vkCmdBeginRenderPass">Render Pass Scope</a></th>
<th class="tableblock halign-left valign-top"><a href="#VkQueueFlagBits">Supported Queue Types</a></th>
<th class="tableblock halign-left valign-top"><a href="#synchronization-pipeline-stages-types">Pipeline Type</a></th>
</tr>
</thead>
<tbody>
<tr>
<td class="tableblock halign-left valign-top"><p class="tableblock">Primary</p></td>
<td class="tableblock halign-left valign-top"><p class="tableblock">Inside</p></td>
<td class="tableblock halign-left valign-top"><p class="tableblock">Graphics</p></td>
<td class="tableblock halign-left valign-top"><p class="tableblock">Graphics</p></td>
</tr>
</tbody>
</table>
</div>
</div>
</div>
<div class="sect3">
<h4 id="_see_also_66">See Also</h4>
<div class="paragraph">
<p><a href="#VkCommandBuffer">VkCommandBuffer</a>, <a href="#VkSubpassContents">VkSubpassContents</a></p>
</div>
</div>
<div class="sect3">
<h4 id="_document_notes_66">Document Notes</h4>
<div class="paragraph">
<p>For more information, see the Vulkan Specification at URL</p>
</div>
<div class="paragraph">
<p><a href="https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#vkCmdNextSubpass" class="bare">https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#vkCmdNextSubpass</a></p>
</div>
<div class="paragraph">
<p>This page is extracted from the Vulkan Specification.
Fixes and changes should be made to the Specification, not directly.</p>
</div>
<div style="page-break-after: always;"></div>
</div>
</div>
<div class="sect2">
<h3 id="_vkcmdnextsubpass2khr3">vkCmdNextSubpass2KHR(3)</h3>
<div class="sect3">
<h4 id="_name_67">Name</h4>
<div class="paragraph">
<p>vkCmdNextSubpass2KHR - Transition to the next subpass of a render pass</p>
</div>
</div>
<div class="sect3">
<h4 id="_c_specification_67">C Specification</h4>
<div class="paragraph">
<p>To transition to the next subpass in the render pass instance after
recording the commands for a subpass, call:</p>
</div>
<div id="vkCmdNextSubpass2KHR" class="listingblock">
<div class="content">
<pre class="highlight"><code class="language-c++" data-lang="c++">void vkCmdNextSubpass2KHR(
    VkCommandBuffer                             commandBuffer,
    const VkSubpassBeginInfoKHR*                pSubpassBeginInfo,
    const VkSubpassEndInfoKHR*                  pSubpassEndInfo);</code></pre>
</div>
</div>
</div>
<div class="sect3">
<h4 id="_parameters_67">Parameters</h4>
<div class="ulist">
<ul>
<li>
<p><code>commandBuffer</code> is the command buffer in which to record the
command.</p>
</li>
<li>
<p><code>pSubpassBeginInfo</code> is a pointer to a <a href="#VkSubpassBeginInfoKHR">VkSubpassBeginInfoKHR</a>
structure which contains information about the subpass which is about to
begin rendering.</p>
</li>
<li>
<p><code>pSubpassEndInfo</code> is a pointer to a <a href="#VkSubpassEndInfoKHR">VkSubpassEndInfoKHR</a>
structure which contains information about how the previous subpass will
be ended.</p>
</li>
</ul>
</div>
</div>
<div class="sect3">
<h4 id="_description_67">Description</h4>
<div class="paragraph">
<p><code>vkCmdNextSubpass2KHR</code> is semantically identical to
<a href="#vkCmdNextSubpass">vkCmdNextSubpass</a>, except that it is extensible, and that
<code>contents</code> is provided as part of an extensible structure instead of as
a flat parameter.</p>
</div>
<div class="sidebarblock">
<div class="content">
<div class="title">Valid Usage</div>
<div class="ulist">
<ul>
<li>
<p><a id="VUID-vkCmdNextSubpass2KHR-None-03102"></a>
The current subpass index <strong class="purple">must</strong> be less than the number of subpasses in
the render pass minus one</p>
</li>
<li>
<p><a id="VUID-vkCmdNextSubpass2KHR-None-02350"></a>
This command <strong class="purple">must</strong> not be recorded when transform feedback is active</p>
</li>
</ul>
</div>
</div>
</div>
<div class="sidebarblock">
<div class="content">
<div class="title">Valid Usage (Implicit)</div>
<div class="ulist">
<ul>
<li>
<p><a id="VUID-vkCmdNextSubpass2KHR-commandBuffer-parameter"></a> <code>commandBuffer</code> <strong class="purple">must</strong> be a valid <code>VkCommandBuffer</code> handle</p>
</li>
<li>
<p><a id="VUID-vkCmdNextSubpass2KHR-pSubpassBeginInfo-parameter"></a> <code>pSubpassBeginInfo</code> <strong class="purple">must</strong> be a valid pointer to a valid <code>VkSubpassBeginInfoKHR</code> structure</p>
</li>
<li>
<p><a id="VUID-vkCmdNextSubpass2KHR-pSubpassEndInfo-parameter"></a> <code>pSubpassEndInfo</code> <strong class="purple">must</strong> be a valid pointer to a valid <code>VkSubpassEndInfoKHR</code> structure</p>
</li>
<li>
<p><a id="VUID-vkCmdNextSubpass2KHR-commandBuffer-recording"></a> <code>commandBuffer</code> <strong class="purple">must</strong> be in the <a href="#commandbuffers-lifecycle">recording state</a></p>
</li>
<li>
<p><a id="VUID-vkCmdNextSubpass2KHR-commandBuffer-cmdpool"></a> The <code>VkCommandPool</code> that <code>commandBuffer</code> was allocated from <strong class="purple">must</strong> support graphics operations</p>
</li>
<li>
<p><a id="VUID-vkCmdNextSubpass2KHR-renderpass"></a> This command <strong class="purple">must</strong> only be called inside of a render pass instance</p>
</li>
<li>
<p><a id="VUID-vkCmdNextSubpass2KHR-bufferlevel"></a> <code>commandBuffer</code> <strong class="purple">must</strong> be a primary <code>VkCommandBuffer</code></p>
</li>
</ul>
</div>
</div>
</div>
<div class="sidebarblock">
<div class="content">
<div class="title">Host Synchronization</div>
<div class="ulist">
<ul>
<li>
<p>Host access to <code>commandBuffer</code> <strong class="purple">must</strong> be externally synchronized</p>
</li>
<li>
<p>Host access to the <code>VkCommandPool</code> that <code>commandBuffer</code> was allocated from <strong class="purple">must</strong> be externally synchronized</p>
</li>
</ul>
</div>
</div>
</div>
<div class="sidebarblock">
<div class="content">
<div class="title">Command Properties</div>
<table class="tableblock frame-all grid-all stretch">
<colgroup>
<col style="width: 25%;">
<col style="width: 25%;">
<col style="width: 25%;">
<col style="width: 25%;">
</colgroup>
<thead>
<tr>
<th class="tableblock halign-left valign-top"><a href="#VkCommandBufferLevel">Command Buffer Levels</a></th>
<th class="tableblock halign-left valign-top"><a href="#vkCmdBeginRenderPass">Render Pass Scope</a></th>
<th class="tableblock halign-left valign-top"><a href="#VkQueueFlagBits">Supported Queue Types</a></th>
<th class="tableblock halign-left valign-top"><a href="#synchronization-pipeline-stages-types">Pipeline Type</a></th>
</tr>
</thead>
<tbody>
<tr>
<td class="tableblock halign-left valign-top"><p class="tableblock">Primary</p></td>
<td class="tableblock halign-left valign-top"><p class="tableblock">Inside</p></td>
<td class="tableblock halign-left valign-top"><p class="tableblock">Graphics</p></td>
<td class="tableblock halign-left valign-top"><p class="tableblock">Graphics</p></td>
</tr>
</tbody>
</table>
</div>
</div>
</div>
<div class="sect3">
<h4 id="_see_also_67">See Also</h4>
<div class="paragraph">
<p><a href="#VkCommandBuffer">VkCommandBuffer</a>, <a href="#VkSubpassBeginInfoKHR">VkSubpassBeginInfoKHR</a>, <a href="#VkSubpassEndInfoKHR">VkSubpassEndInfoKHR</a></p>
</div>
</div>
<div class="sect3">
<h4 id="_document_notes_67">Document Notes</h4>
<div class="paragraph">
<p>For more information, see the Vulkan Specification at URL</p>
</div>
<div class="paragraph">
<p><a href="https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#vkCmdNextSubpass2KHR" class="bare">https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#vkCmdNextSubpass2KHR</a></p>
</div>
<div class="paragraph">
<p>This page is extracted from the Vulkan Specification.
Fixes and changes should be made to the Specification, not directly.</p>
</div>
<div style="page-break-after: always;"></div>
</div>
</div>
<div class="sect2">
<h3 id="_vkcmdpipelinebarrier3">vkCmdPipelineBarrier(3)</h3>
<div class="sect3">
<h4 id="_name_68">Name</h4>
<div class="paragraph">
<p>vkCmdPipelineBarrier - Insert a memory dependency</p>
</div>
</div>
<div class="sect3">
<h4 id="_c_specification_68">C Specification</h4>
<div class="paragraph">
<p>To record a pipeline barrier, call:</p>
</div>
<div id="vkCmdPipelineBarrier" class="listingblock">
<div class="content">
<pre class="highlight"><code class="language-c++" data-lang="c++">void vkCmdPipelineBarrier(
    VkCommandBuffer                             commandBuffer,
    VkPipelineStageFlags                        srcStageMask,
    VkPipelineStageFlags                        dstStageMask,
    VkDependencyFlags                           dependencyFlags,
    uint32_t                                    memoryBarrierCount,
    const VkMemoryBarrier*                      pMemoryBarriers,
    uint32_t                                    bufferMemoryBarrierCount,
    const VkBufferMemoryBarrier*                pBufferMemoryBarriers,
    uint32_t                                    imageMemoryBarrierCount,
    const VkImageMemoryBarrier*                 pImageMemoryBarriers);</code></pre>
</div>
</div>
</div>
<div class="sect3">
<h4 id="_parameters_68">Parameters</h4>
<div class="ulist">
<ul>
<li>
<p><code>commandBuffer</code> is the command buffer into which the command is
recorded.</p>
</li>
<li>
<p><code>srcStageMask</code> is a bitmask of <a href="#VkPipelineStageFlagBits">VkPipelineStageFlagBits</a>
specifying the <a href="vkspec.html#synchronization-pipeline-stages-masks">source stage
mask</a>.</p>
</li>
<li>
<p><code>dstStageMask</code> is a bitmask of <a href="#VkPipelineStageFlagBits">VkPipelineStageFlagBits</a>
specifying the <a href="vkspec.html#synchronization-pipeline-stages-masks">destination
stage mask</a>.</p>
</li>
<li>
<p><code>dependencyFlags</code> is a bitmask of <a href="#VkDependencyFlagBits">VkDependencyFlagBits</a>
specifying how execution and memory dependencies are formed.</p>
</li>
<li>
<p><code>memoryBarrierCount</code> is the length of the <code>pMemoryBarriers</code>
array.</p>
</li>
<li>
<p><code>pMemoryBarriers</code> is a pointer to an array of <a href="#VkMemoryBarrier">VkMemoryBarrier</a>
structures.</p>
</li>
<li>
<p><code>bufferMemoryBarrierCount</code> is the length of the
<code>pBufferMemoryBarriers</code> array.</p>
</li>
<li>
<p><code>pBufferMemoryBarriers</code> is a pointer to an array of
<a href="#VkBufferMemoryBarrier">VkBufferMemoryBarrier</a> structures.</p>
</li>
<li>
<p><code>imageMemoryBarrierCount</code> is the length of the
<code>pImageMemoryBarriers</code> array.</p>
</li>
<li>
<p><code>pImageMemoryBarriers</code> is a pointer to an array of
<a href="#VkImageMemoryBarrier">VkImageMemoryBarrier</a> structures.</p>
</li>
</ul>
</div>
</div>
<div class="sect3">
<h4 id="_description_68">Description</h4>
<div class="paragraph">
<p>When <a href="#vkCmdPipelineBarrier">vkCmdPipelineBarrier</a> is submitted to a queue, it defines a memory
dependency between commands that were submitted before it, and those
submitted after it.</p>
</div>
<div class="paragraph">
<p>If <a href="#vkCmdPipelineBarrier">vkCmdPipelineBarrier</a> was recorded outside a render pass instance,
the first <a href="vkspec.html#synchronization-dependencies-scopes">synchronization scope</a>
includes all commands that occur earlier in
<a href="vkspec.html#synchronization-submission-order">submission order</a>.
If <a href="#vkCmdPipelineBarrier">vkCmdPipelineBarrier</a> was recorded inside a render pass instance,
the first synchronization scope includes only commands that occur earlier in
<a href="vkspec.html#synchronization-submission-order">submission order</a> within the same
subpass.
In either case, the first synchronization scope is limited to operations on
the pipeline stages determined by the
<a href="vkspec.html#synchronization-pipeline-stages-masks">source stage mask</a> specified by
<code>srcStageMask</code>.</p>
</div>
<div class="paragraph">
<p>If <a href="#vkCmdPipelineBarrier">vkCmdPipelineBarrier</a> was recorded outside a render pass instance,
the second <a href="vkspec.html#synchronization-dependencies-scopes">synchronization scope</a>
includes all commands that occur later in
<a href="vkspec.html#synchronization-submission-order">submission order</a>.
If <a href="#vkCmdPipelineBarrier">vkCmdPipelineBarrier</a> was recorded inside a render pass instance,
the second synchronization scope includes only commands that occur later in
<a href="vkspec.html#synchronization-submission-order">submission order</a> within the same
subpass.
In either case, the second synchronization scope is limited to operations on
the pipeline stages determined by the
<a href="vkspec.html#synchronization-pipeline-stages-masks">destination stage mask</a> specified
by <code>dstStageMask</code>.</p>
</div>
<div class="paragraph">
<p>The first <a href="vkspec.html#synchronization-dependencies-access-scopes">access scope</a> is
limited to access in the pipeline stages determined by the
<a href="vkspec.html#synchronization-pipeline-stages-masks">source stage mask</a> specified by
<code>srcStageMask</code>.
Within that, the first access scope only includes the first access scopes
defined by elements of the <code>pMemoryBarriers</code>,
<code>pBufferMemoryBarriers</code> and <code>pImageMemoryBarriers</code> arrays, which
each define a set of <a href="vkspec.html#synchronization-memory-barriers">memory barriers</a>.
If no memory barriers are specified, then the first access scope includes no
accesses.</p>
</div>
<div class="paragraph">
<p>The second <a href="vkspec.html#synchronization-dependencies-access-scopes">access scope</a> is
limited to access in the pipeline stages determined by the
<a href="vkspec.html#synchronization-pipeline-stages-masks">destination stage mask</a> specified
by <code>dstStageMask</code>.
Within that, the second access scope only includes the second access scopes
defined by elements of the <code>pMemoryBarriers</code>,
<code>pBufferMemoryBarriers</code> and <code>pImageMemoryBarriers</code> arrays, which
each define a set of <a href="vkspec.html#synchronization-memory-barriers">memory barriers</a>.
If no memory barriers are specified, then the second access scope includes
no accesses.</p>
</div>
<div class="paragraph">
<p>If <code>dependencyFlags</code> includes <code>VK_DEPENDENCY_BY_REGION_BIT</code>, then
any dependency between <a href="vkspec.html#synchronization-framebuffer-regions">framebuffer-space</a> pipeline stages is
<a href="vkspec.html#synchronization-framebuffer-regions">framebuffer-local</a> - otherwise it is
<a href="vkspec.html#synchronization-framebuffer-regions">framebuffer-global</a>.</p>
</div>
<div class="sidebarblock">
<div class="content">
<div class="title">Valid Usage</div>
<div class="ulist">
<ul>
<li>
<p><a id="VUID-vkCmdPipelineBarrier-srcStageMask-01168"></a>
If the <a href="vkspec.html#features-geometryShader">geometry shaders</a> feature is not
enabled, <code>srcStageMask</code> <strong class="purple">must</strong> not contain
<code>VK_PIPELINE_STAGE_GEOMETRY_SHADER_BIT</code></p>
</li>
<li>
<p><a id="VUID-vkCmdPipelineBarrier-dstStageMask-01169"></a>
If the <a href="vkspec.html#features-geometryShader">geometry shaders</a> feature is not
enabled, <code>dstStageMask</code> <strong class="purple">must</strong> not contain
<code>VK_PIPELINE_STAGE_GEOMETRY_SHADER_BIT</code></p>
</li>
<li>
<p><a id="VUID-vkCmdPipelineBarrier-srcStageMask-01170"></a>
If the <a href="vkspec.html#features-tessellationShader">tessellation shaders</a> feature is
not enabled, <code>srcStageMask</code> <strong class="purple">must</strong> not contain
<code>VK_PIPELINE_STAGE_TESSELLATION_CONTROL_SHADER_BIT</code> or
<code>VK_PIPELINE_STAGE_TESSELLATION_EVALUATION_SHADER_BIT</code></p>
</li>
<li>
<p><a id="VUID-vkCmdPipelineBarrier-dstStageMask-01171"></a>
If the <a href="vkspec.html#features-tessellationShader">tessellation shaders</a> feature is
not enabled, <code>dstStageMask</code> <strong class="purple">must</strong> not contain
<code>VK_PIPELINE_STAGE_TESSELLATION_CONTROL_SHADER_BIT</code> or
<code>VK_PIPELINE_STAGE_TESSELLATION_EVALUATION_SHADER_BIT</code></p>
</li>
<li>
<p><a id="VUID-vkCmdPipelineBarrier-pDependencies-02285"></a>
If <code>vkCmdPipelineBarrier</code> is called within a render pass instance,
the render pass <strong class="purple">must</strong> have been created with at least one
<code>VkSubpassDependency</code> instance in
<code>VkRenderPassCreateInfo</code>::<code>pDependencies</code> that expresses a
dependency from the current subpass to itself, and for which
<code>srcStageMask</code> contains a subset of the bit values in
<code>VkSubpassDependency</code>::<code>srcStageMask</code>, <code>dstStageMask</code>
contains a subset of the bit values in
<code>VkSubpassDependency</code>::<code>dstStageMask</code>, <code>dependencyFlags</code> is
equal to <code>VkSubpassDependency</code>::<code>dependencyFlags</code>,
<code>srcAccessMask</code> member of each element of <code>pMemoryBarriers</code> and
<code>pImageMemoryBarriers</code> contains a subset of the bit values in
<code>VkSubpassDependency</code>::<code>srcAccessMask</code>, and <code>dstAccessMask</code>
member of each element of <code>pMemoryBarriers</code> and
<code>pImageMemoryBarriers</code> contains a subset of the bit values in
<code>VkSubpassDependency</code>::<code>dstAccessMask</code></p>
</li>
<li>
<p><a id="VUID-vkCmdPipelineBarrier-bufferMemoryBarrierCount-01178"></a>
If <code>vkCmdPipelineBarrier</code> is called within a render pass instance,
<code>bufferMemoryBarrierCount</code> <strong class="purple">must</strong> be <code>0</code></p>
</li>
<li>
<p><a id="VUID-vkCmdPipelineBarrier-image-02635"></a>
If <code>vkCmdPipelineBarrier</code> is called within a render pass instance,
the <code>image</code> member of any element of <code>pImageMemoryBarriers</code>
<strong class="purple">must</strong> be equal to one of the elements of <code>pAttachments</code> that the
current <code>framebuffer</code> was created with, that is also referred to by
one of the elements of the <code>pColorAttachments</code>,
<code>pResolveAttachments</code> or <code>pDepthStencilAttachment</code> members of
the <code>VkSubpassDescription</code> instance or by the
<code>pDepthStencilResolveAttachment</code> member of the
<code>VkSubpassDescriptionDepthStencilResolveKHR</code> structure that the
current subpass was created with</p>
</li>
<li>
<p><a id="VUID-vkCmdPipelineBarrier-oldLayout-02636"></a>
If <code>vkCmdPipelineBarrier</code> is called within a render pass instance,
the <code>oldLayout</code> and <code>newLayout</code> members of any element of
<code>pImageMemoryBarriers</code> <strong class="purple">must</strong> be equal to the <code>layout</code> member of
an element of the <code>pColorAttachments</code>, <code>pResolveAttachments</code> or
<code>pDepthStencilAttachment</code> members of the <code>VkSubpassDescription</code>
instance or by the <code>pDepthStencilResolveAttachment</code> member of the
<code>VkSubpassDescriptionDepthStencilResolveKHR</code> structure that the
current subpass was created with, that refers to the same <code>image</code></p>
</li>
<li>
<p><a id="VUID-vkCmdPipelineBarrier-oldLayout-01181"></a>
If <code>vkCmdPipelineBarrier</code> is called within a render pass instance,
the <code>oldLayout</code> and <code>newLayout</code> members of an element of
<code>pImageMemoryBarriers</code> <strong class="purple">must</strong> be equal</p>
</li>
<li>
<p><a id="VUID-vkCmdPipelineBarrier-srcQueueFamilyIndex-01182"></a>
If <code>vkCmdPipelineBarrier</code> is called within a render pass instance,
the <code>srcQueueFamilyIndex</code> and <code>dstQueueFamilyIndex</code> members of
any element of <code>pImageMemoryBarriers</code> <strong class="purple">must</strong> be
<code>VK_QUEUE_FAMILY_IGNORED</code></p>
</li>
<li>
<p><a id="VUID-vkCmdPipelineBarrier-srcStageMask-01183"></a>
Any pipeline stage included in <code>srcStageMask</code> or <code>dstStageMask</code>
<strong class="purple">must</strong> be supported by the capabilities of the queue family specified by
the <code>queueFamilyIndex</code> member of the <a href="#VkCommandPoolCreateInfo">VkCommandPoolCreateInfo</a>
structure that was used to create the <code>VkCommandPool</code> that
<code>commandBuffer</code> was allocated from, as specified in the
<a href="vkspec.html#synchronization-pipeline-stages-supported">table of supported pipeline
stages</a>.</p>
</li>
<li>
<p><a id="VUID-vkCmdPipelineBarrier-pMemoryBarriers-01184"></a>
Each element of <code>pMemoryBarriers</code>, <code>pBufferMemoryBarriers</code> and
<code>pImageMemoryBarriers</code> <strong class="purple">must</strong> not have any access flag included in
its <code>srcAccessMask</code> member if that bit is not supported by any of
the pipeline stages in <code>srcStageMask</code>, as specified in the
<a href="vkspec.html#synchronization-access-types-supported">table of supported access
types</a>.</p>
</li>
<li>
<p><a id="VUID-vkCmdPipelineBarrier-pMemoryBarriers-01185"></a>
Each element of <code>pMemoryBarriers</code>, <code>pBufferMemoryBarriers</code> and
<code>pImageMemoryBarriers</code> <strong class="purple">must</strong> not have any access flag included in
its <code>dstAccessMask</code> member if that bit is not supported by any of
the pipeline stages in <code>dstStageMask</code>, as specified in the
<a href="vkspec.html#synchronization-access-types-supported">table of supported access
types</a>.</p>
</li>
<li>
<p><a id="VUID-vkCmdPipelineBarrier-dependencyFlags-01186"></a>
If <code>vkCmdPipelineBarrier</code> is called outside of a render pass
instance, <code>dependencyFlags</code> <strong class="purple">must</strong> not include
<code>VK_DEPENDENCY_VIEW_LOCAL_BIT</code></p>
</li>
<li>
<p><a id="VUID-vkCmdPipelineBarrier-srcStageMask-02115"></a>
If the <a href="vkspec.html#features-meshShader">mesh shaders</a> feature is not enabled,
<code>srcStageMask</code> <strong class="purple">must</strong> not contain
<code>VK_PIPELINE_STAGE_MESH_SHADER_BIT_NV</code></p>
</li>
<li>
<p><a id="VUID-vkCmdPipelineBarrier-srcStageMask-02116"></a>
If the <a href="vkspec.html#features-taskShader">task shaders</a> feature is not enabled,
<code>srcStageMask</code> <strong class="purple">must</strong> not contain
<code>VK_PIPELINE_STAGE_TASK_SHADER_BIT_NV</code></p>
</li>
<li>
<p><a id="VUID-vkCmdPipelineBarrier-dstStageMask-02117"></a>
If the <a href="vkspec.html#features-meshShader">mesh shaders</a> feature is not enabled,
<code>dstStageMask</code> <strong class="purple">must</strong> not contain
<code>VK_PIPELINE_STAGE_MESH_SHADER_BIT_NV</code></p>
</li>
<li>
<p><a id="VUID-vkCmdPipelineBarrier-dstStageMask-02118"></a>
If the <a href="vkspec.html#features-taskShader">task shaders</a> feature is not enabled,
<code>dstStageMask</code> <strong class="purple">must</strong> not contain
<code>VK_PIPELINE_STAGE_TASK_SHADER_BIT_NV</code></p>
</li>
</ul>
</div>
</div>
</div>
<div class="sidebarblock">
<div class="content">
<div class="title">Valid Usage (Implicit)</div>
<div class="ulist">
<ul>
<li>
<p><a id="VUID-vkCmdPipelineBarrier-commandBuffer-parameter"></a> <code>commandBuffer</code> <strong class="purple">must</strong> be a valid <code>VkCommandBuffer</code> handle</p>
</li>
<li>
<p><a id="VUID-vkCmdPipelineBarrier-srcStageMask-parameter"></a> <code>srcStageMask</code> <strong class="purple">must</strong> be a valid combination of <a href="#VkPipelineStageFlagBits">VkPipelineStageFlagBits</a> values</p>
</li>
<li>
<p><a id="VUID-vkCmdPipelineBarrier-srcStageMask-requiredbitmask"></a> <code>srcStageMask</code> <strong class="purple">must</strong> not be <code>0</code></p>
</li>
<li>
<p><a id="VUID-vkCmdPipelineBarrier-dstStageMask-parameter"></a> <code>dstStageMask</code> <strong class="purple">must</strong> be a valid combination of <a href="#VkPipelineStageFlagBits">VkPipelineStageFlagBits</a> values</p>
</li>
<li>
<p><a id="VUID-vkCmdPipelineBarrier-dstStageMask-requiredbitmask"></a> <code>dstStageMask</code> <strong class="purple">must</strong> not be <code>0</code></p>
</li>
<li>
<p><a id="VUID-vkCmdPipelineBarrier-dependencyFlags-parameter"></a> <code>dependencyFlags</code> <strong class="purple">must</strong> be a valid combination of <a href="#VkDependencyFlagBits">VkDependencyFlagBits</a> values</p>
</li>
<li>
<p><a id="VUID-vkCmdPipelineBarrier-pMemoryBarriers-parameter"></a> If <code>memoryBarrierCount</code> is not <code>0</code>, <code>pMemoryBarriers</code> <strong class="purple">must</strong> be a valid pointer to an array of <code>memoryBarrierCount</code> valid <code>VkMemoryBarrier</code> structures</p>
</li>
<li>
<p><a id="VUID-vkCmdPipelineBarrier-pBufferMemoryBarriers-parameter"></a> If <code>bufferMemoryBarrierCount</code> is not <code>0</code>, <code>pBufferMemoryBarriers</code> <strong class="purple">must</strong> be a valid pointer to an array of <code>bufferMemoryBarrierCount</code> valid <code>VkBufferMemoryBarrier</code> structures</p>
</li>
<li>
<p><a id="VUID-vkCmdPipelineBarrier-pImageMemoryBarriers-parameter"></a> If <code>imageMemoryBarrierCount</code> is not <code>0</code>, <code>pImageMemoryBarriers</code> <strong class="purple">must</strong> be a valid pointer to an array of <code>imageMemoryBarrierCount</code> valid <code>VkImageMemoryBarrier</code> structures</p>
</li>
<li>
<p><a id="VUID-vkCmdPipelineBarrier-commandBuffer-recording"></a> <code>commandBuffer</code> <strong class="purple">must</strong> be in the <a href="#commandbuffers-lifecycle">recording state</a></p>
</li>
<li>
<p><a id="VUID-vkCmdPipelineBarrier-commandBuffer-cmdpool"></a> The <code>VkCommandPool</code> that <code>commandBuffer</code> was allocated from <strong class="purple">must</strong> support transfer, graphics, or compute operations</p>
</li>
</ul>
</div>
</div>
</div>
<div class="sidebarblock">
<div class="content">
<div class="title">Host Synchronization</div>
<div class="ulist">
<ul>
<li>
<p>Host access to <code>commandBuffer</code> <strong class="purple">must</strong> be externally synchronized</p>
</li>
<li>
<p>Host access to the <code>VkCommandPool</code> that <code>commandBuffer</code> was allocated from <strong class="purple">must</strong> be externally synchronized</p>
</li>
</ul>
</div>
</div>
</div>
<div class="sidebarblock">
<div class="content">
<div class="title">Command Properties</div>
<table class="tableblock frame-all grid-all stretch">
<colgroup>
<col style="width: 25%;">
<col style="width: 25%;">
<col style="width: 25%;">
<col style="width: 25%;">
</colgroup>
<thead>
<tr>
<th class="tableblock halign-left valign-top"><a href="#VkCommandBufferLevel">Command Buffer Levels</a></th>
<th class="tableblock halign-left valign-top"><a href="#vkCmdBeginRenderPass">Render Pass Scope</a></th>
<th class="tableblock halign-left valign-top"><a href="#VkQueueFlagBits">Supported Queue Types</a></th>
<th class="tableblock halign-left valign-top"><a href="#synchronization-pipeline-stages-types">Pipeline Type</a></th>
</tr>
</thead>
<tbody>
<tr>
<td class="tableblock halign-left valign-top"><p class="tableblock">Primary<br>
Secondary</p></td>
<td class="tableblock halign-left valign-top"><p class="tableblock">Both</p></td>
<td class="tableblock halign-left valign-top"><p class="tableblock">Transfer<br>
Graphics<br>
Compute</p></td>
<td class="tableblock halign-left valign-top"></td>
</tr>
</tbody>
</table>
</div>
</div>
</div>
<div class="sect3">
<h4 id="_see_also_68">See Also</h4>
<div class="paragraph">
<p><a href="#VkBufferMemoryBarrier">VkBufferMemoryBarrier</a>, <a href="#VkCommandBuffer">VkCommandBuffer</a>, <a href="#VkDependencyFlags">VkDependencyFlags</a>, <a href="#VkImageMemoryBarrier">VkImageMemoryBarrier</a>, <a href="#VkMemoryBarrier">VkMemoryBarrier</a>, <a href="#VkPipelineStageFlags">VkPipelineStageFlags</a></p>
</div>
</div>
<div class="sect3">
<h4 id="_document_notes_68">Document Notes</h4>
<div class="paragraph">
<p>For more information, see the Vulkan Specification at URL</p>
</div>
<div class="paragraph">
<p><a href="https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#vkCmdPipelineBarrier" class="bare">https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#vkCmdPipelineBarrier</a></p>
</div>
<div class="paragraph">
<p>This page is extracted from the Vulkan Specification.
Fixes and changes should be made to the Specification, not directly.</p>
</div>
<div style="page-break-after: always;"></div>
</div>
</div>
<div class="sect2">
<h3 id="_vkcmdprocesscommandsnvx3">vkCmdProcessCommandsNVX(3)</h3>
<div class="sect3">
<h4 id="_name_69">Name</h4>
<div class="paragraph">
<p>vkCmdProcessCommandsNVX - Performs the generation of commands on the device</p>
</div>
</div>
<div class="sect3">
<h4 id="_c_specification_69">C Specification</h4>
<div class="paragraph">
<p>The actual generation on the device is handled with:</p>
</div>
<div id="vkCmdProcessCommandsNVX" class="listingblock">
<div class="content">
<pre class="highlight"><code class="language-c++" data-lang="c++">void vkCmdProcessCommandsNVX(
    VkCommandBuffer                             commandBuffer,
    const VkCmdProcessCommandsInfoNVX*          pProcessCommandsInfo);</code></pre>
</div>
</div>
</div>
<div class="sect3">
<h4 id="_parameters_69">Parameters</h4>
<div class="ulist">
<ul>
<li>
<p><code>commandBuffer</code> is the primary command buffer in which the
generation process takes space.</p>
</li>
<li>
<p><code>pProcessCommandsInfo</code> is a pointer to an instance of the
<a href="#VkCmdProcessCommandsInfoNVX">VkCmdProcessCommandsInfoNVX</a> structure containing parameters
affecting the processing of commands.</p>
</li>
</ul>
</div>
</div>
<div class="sect3">
<h4 id="_description_69">Description</h4>
<div class="sidebarblock">
<div class="content">
<div class="title">Valid Usage (Implicit)</div>
<div class="ulist">
<ul>
<li>
<p><a id="VUID-vkCmdProcessCommandsNVX-commandBuffer-parameter"></a> <code>commandBuffer</code> <strong class="purple">must</strong> be a valid <code>VkCommandBuffer</code> handle</p>
</li>
<li>
<p><a id="VUID-vkCmdProcessCommandsNVX-pProcessCommandsInfo-parameter"></a> <code>pProcessCommandsInfo</code> <strong class="purple">must</strong> be a valid pointer to a valid <code>VkCmdProcessCommandsInfoNVX</code> structure</p>
</li>
<li>
<p><a id="VUID-vkCmdProcessCommandsNVX-commandBuffer-recording"></a> <code>commandBuffer</code> <strong class="purple">must</strong> be in the <a href="#commandbuffers-lifecycle">recording state</a></p>
</li>
<li>
<p><a id="VUID-vkCmdProcessCommandsNVX-commandBuffer-cmdpool"></a> The <code>VkCommandPool</code> that <code>commandBuffer</code> was allocated from <strong class="purple">must</strong> support graphics, or compute operations</p>
</li>
<li>
<p><a id="VUID-vkCmdProcessCommandsNVX-renderpass"></a> This command <strong class="purple">must</strong> only be called inside of a render pass instance</p>
</li>
</ul>
</div>
</div>
</div>
<div class="sidebarblock">
<div class="content">
<div class="title">Host Synchronization</div>
<div class="ulist">
<ul>
<li>
<p>Host access to <code>commandBuffer</code> <strong class="purple">must</strong> be externally synchronized</p>
</li>
<li>
<p>Host access to the <code>VkCommandPool</code> that <code>commandBuffer</code> was allocated from <strong class="purple">must</strong> be externally synchronized</p>
</li>
</ul>
</div>
</div>
</div>
<div class="sidebarblock">
<div class="content">
<div class="title">Command Properties</div>
<table class="tableblock frame-all grid-all stretch">
<colgroup>
<col style="width: 25%;">
<col style="width: 25%;">
<col style="width: 25%;">
<col style="width: 25%;">
</colgroup>
<thead>
<tr>
<th class="tableblock halign-left valign-top"><a href="#VkCommandBufferLevel">Command Buffer Levels</a></th>
<th class="tableblock halign-left valign-top"><a href="#vkCmdBeginRenderPass">Render Pass Scope</a></th>
<th class="tableblock halign-left valign-top"><a href="#VkQueueFlagBits">Supported Queue Types</a></th>
<th class="tableblock halign-left valign-top"><a href="#synchronization-pipeline-stages-types">Pipeline Type</a></th>
</tr>
</thead>
<tbody>
<tr>
<td class="tableblock halign-left valign-top"><p class="tableblock">Primary<br>
Secondary</p></td>
<td class="tableblock halign-left valign-top"><p class="tableblock">Inside</p></td>
<td class="tableblock halign-left valign-top"><p class="tableblock">Graphics<br>
Compute</p></td>
<td class="tableblock halign-left valign-top"></td>
</tr>
</tbody>
</table>
</div>
</div>
</div>
<div class="sect3">
<h4 id="_see_also_69">See Also</h4>
<div class="paragraph">
<p><a href="#VkCmdProcessCommandsInfoNVX">VkCmdProcessCommandsInfoNVX</a>, <a href="#VkCommandBuffer">VkCommandBuffer</a></p>
</div>
</div>
<div class="sect3">
<h4 id="_document_notes_69">Document Notes</h4>
<div class="paragraph">
<p>For more information, see the Vulkan Specification at URL</p>
</div>
<div class="paragraph">
<p><a href="https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#vkCmdProcessCommandsNVX" class="bare">https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#vkCmdProcessCommandsNVX</a></p>
</div>
<div class="paragraph">
<p>This page is extracted from the Vulkan Specification.
Fixes and changes should be made to the Specification, not directly.</p>
</div>
<div style="page-break-after: always;"></div>
</div>
</div>
<div class="sect2">
<h3 id="_vkcmdpushconstants3">vkCmdPushConstants(3)</h3>
<div class="sect3">
<h4 id="_name_70">Name</h4>
<div class="paragraph">
<p>vkCmdPushConstants - Update the values of push constants</p>
</div>
</div>
<div class="sect3">
<h4 id="_c_specification_70">C Specification</h4>
<div class="paragraph">
<p>To update push constants, call:</p>
</div>
<div id="vkCmdPushConstants" class="listingblock">
<div class="content">
<pre class="highlight"><code class="language-c++" data-lang="c++">void vkCmdPushConstants(
    VkCommandBuffer                             commandBuffer,
    VkPipelineLayout                            layout,
    VkShaderStageFlags                          stageFlags,
    uint32_t                                    offset,
    uint32_t                                    size,
    const void*                                 pValues);</code></pre>
</div>
</div>
</div>
<div class="sect3">
<h4 id="_parameters_70">Parameters</h4>
<div class="ulist">
<ul>
<li>
<p><code>commandBuffer</code> is the command buffer in which the push constant
update will be recorded.</p>
</li>
<li>
<p><code>layout</code> is the pipeline layout used to program the push constant
updates.</p>
</li>
<li>
<p><code>stageFlags</code> is a bitmask of <a href="#VkShaderStageFlagBits">VkShaderStageFlagBits</a> specifying
the shader stages that will use the push constants in the updated range.</p>
</li>
<li>
<p><code>offset</code> is the start offset of the push constant range to update,
in units of bytes.</p>
</li>
<li>
<p><code>size</code> is the size of the push constant range to update, in units of
bytes.</p>
</li>
<li>
<p><code>pValues</code> is an array of <code>size</code> bytes containing the new push
constant values.</p>
</li>
</ul>
</div>
</div>
<div class="sect3">
<h4 id="_description_70">Description</h4>
<div class="admonitionblock note">
<table>
<tr>
<td class="icon">
<i class="fa icon-note" title="Note"></i>
</td>
<td class="content">
<div class="title">Note</div>
<div class="paragraph">
<p>As <code>stageFlags</code> needs to include all flags the relevant push constant
ranges were created with, any flags that are not supported by the queue
family that the <a href="#VkCommandPool">VkCommandPool</a> used to allocate <code>commandBuffer</code> was
created on are ignored.</p>
</div>
</td>
</tr>
</table>
</div>
<div class="sidebarblock">
<div class="content">
<div class="title">Valid Usage</div>
<div class="ulist">
<ul>
<li>
<p><a id="VUID-vkCmdPushConstants-offset-01795"></a>
For each byte in the range specified by <code>offset</code> and <code>size</code> and
for each shader stage in <code>stageFlags</code>, there <strong class="purple">must</strong> be a push
constant range in <code>layout</code> that includes that byte and that stage</p>
</li>
<li>
<p><a id="VUID-vkCmdPushConstants-offset-01796"></a>
For each byte in the range specified by <code>offset</code> and <code>size</code> and
for each push constant range that overlaps that byte, <code>stageFlags</code>
<strong class="purple">must</strong> include all stages in that push constant range&#8217;s
<a href="#VkPushConstantRange">VkPushConstantRange</a>::<code>stageFlags</code></p>
</li>
<li>
<p><a id="VUID-vkCmdPushConstants-offset-00368"></a>
<code>offset</code> <strong class="purple">must</strong> be a multiple of <code>4</code></p>
</li>
<li>
<p><a id="VUID-vkCmdPushConstants-size-00369"></a>
<code>size</code> <strong class="purple">must</strong> be a multiple of <code>4</code></p>
</li>
<li>
<p><a id="VUID-vkCmdPushConstants-offset-00370"></a>
<code>offset</code> <strong class="purple">must</strong> be less than
<code>VkPhysicalDeviceLimits</code>::<code>maxPushConstantsSize</code></p>
</li>
<li>
<p><a id="VUID-vkCmdPushConstants-size-00371"></a>
<code>size</code> <strong class="purple">must</strong> be less than or equal to
<code>VkPhysicalDeviceLimits</code>::<code>maxPushConstantsSize</code> minus
<code>offset</code></p>
</li>
</ul>
</div>
</div>
</div>
<div class="sidebarblock">
<div class="content">
<div class="title">Valid Usage (Implicit)</div>
<div class="ulist">
<ul>
<li>
<p><a id="VUID-vkCmdPushConstants-commandBuffer-parameter"></a> <code>commandBuffer</code> <strong class="purple">must</strong> be a valid <code>VkCommandBuffer</code> handle</p>
</li>
<li>
<p><a id="VUID-vkCmdPushConstants-layout-parameter"></a> <code>layout</code> <strong class="purple">must</strong> be a valid <code>VkPipelineLayout</code> handle</p>
</li>
<li>
<p><a id="VUID-vkCmdPushConstants-stageFlags-parameter"></a> <code>stageFlags</code> <strong class="purple">must</strong> be a valid combination of <a href="#VkShaderStageFlagBits">VkShaderStageFlagBits</a> values</p>
</li>
<li>
<p><a id="VUID-vkCmdPushConstants-stageFlags-requiredbitmask"></a> <code>stageFlags</code> <strong class="purple">must</strong> not be <code>0</code></p>
</li>
<li>
<p><a id="VUID-vkCmdPushConstants-pValues-parameter"></a> <code>pValues</code> <strong class="purple">must</strong> be a valid pointer to an array of <code>size</code> bytes</p>
</li>
<li>
<p><a id="VUID-vkCmdPushConstants-commandBuffer-recording"></a> <code>commandBuffer</code> <strong class="purple">must</strong> be in the <a href="#commandbuffers-lifecycle">recording state</a></p>
</li>
<li>
<p><a id="VUID-vkCmdPushConstants-commandBuffer-cmdpool"></a> The <code>VkCommandPool</code> that <code>commandBuffer</code> was allocated from <strong class="purple">must</strong> support graphics, or compute operations</p>
</li>
<li>
<p><a id="VUID-vkCmdPushConstants-size-arraylength"></a> <code>size</code> <strong class="purple">must</strong> be greater than <code>0</code></p>
</li>
<li>
<p><a id="VUID-vkCmdPushConstants-commonparent"></a> Both of <code>commandBuffer</code>, and <code>layout</code> <strong class="purple">must</strong> have been created, allocated, or retrieved from the same <code>VkDevice</code></p>
</li>
</ul>
</div>
</div>
</div>
<div class="sidebarblock">
<div class="content">
<div class="title">Host Synchronization</div>
<div class="ulist">
<ul>
<li>
<p>Host access to <code>commandBuffer</code> <strong class="purple">must</strong> be externally synchronized</p>
</li>
<li>
<p>Host access to the <code>VkCommandPool</code> that <code>commandBuffer</code> was allocated from <strong class="purple">must</strong> be externally synchronized</p>
</li>
</ul>
</div>
</div>
</div>
<div class="sidebarblock">
<div class="content">
<div class="title">Command Properties</div>
<table class="tableblock frame-all grid-all stretch">
<colgroup>
<col style="width: 25%;">
<col style="width: 25%;">
<col style="width: 25%;">
<col style="width: 25%;">
</colgroup>
<thead>
<tr>
<th class="tableblock halign-left valign-top"><a href="#VkCommandBufferLevel">Command Buffer Levels</a></th>
<th class="tableblock halign-left valign-top"><a href="#vkCmdBeginRenderPass">Render Pass Scope</a></th>
<th class="tableblock halign-left valign-top"><a href="#VkQueueFlagBits">Supported Queue Types</a></th>
<th class="tableblock halign-left valign-top"><a href="#synchronization-pipeline-stages-types">Pipeline Type</a></th>
</tr>
</thead>
<tbody>
<tr>
<td class="tableblock halign-left valign-top"><p class="tableblock">Primary<br>
Secondary</p></td>
<td class="tableblock halign-left valign-top"><p class="tableblock">Both</p></td>
<td class="tableblock halign-left valign-top"><p class="tableblock">Graphics<br>
Compute</p></td>
<td class="tableblock halign-left valign-top"></td>
</tr>
</tbody>
</table>
</div>
</div>
</div>
<div class="sect3">
<h4 id="_see_also_70">See Also</h4>
<div class="paragraph">
<p><a href="#VkCommandBuffer">VkCommandBuffer</a>, <a href="#VkPipelineLayout">VkPipelineLayout</a>, <a href="#VkShaderStageFlags">VkShaderStageFlags</a></p>
</div>
</div>
<div class="sect3">
<h4 id="_document_notes_70">Document Notes</h4>
<div class="paragraph">
<p>For more information, see the Vulkan Specification at URL</p>
</div>
<div class="paragraph">
<p><a href="https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#vkCmdPushConstants" class="bare">https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#vkCmdPushConstants</a></p>
</div>
<div class="paragraph">
<p>This page is extracted from the Vulkan Specification.
Fixes and changes should be made to the Specification, not directly.</p>
</div>
<div style="page-break-after: always;"></div>
</div>
</div>
<div class="sect2">
<h3 id="_vkcmdpushdescriptorsetkhr3">vkCmdPushDescriptorSetKHR(3)</h3>
<div class="sect3">
<h4 id="_name_71">Name</h4>
<div class="paragraph">
<p>vkCmdPushDescriptorSetKHR - Pushes descriptor updates into a command buffer</p>
</div>
</div>
<div class="sect3">
<h4 id="_c_specification_71">C Specification</h4>
<div class="paragraph">
<p>In addition to allocating descriptor sets and binding them to a command
buffer, an application <strong class="purple">can</strong> record descriptor updates into the command
buffer.</p>
</div>
<div class="paragraph">
<p>To push descriptor updates into a command buffer, call:</p>
</div>
<div id="vkCmdPushDescriptorSetKHR" class="listingblock">
<div class="content">
<pre class="highlight"><code class="language-c++" data-lang="c++">void vkCmdPushDescriptorSetKHR(
    VkCommandBuffer                             commandBuffer,
    VkPipelineBindPoint                         pipelineBindPoint,
    VkPipelineLayout                            layout,
    uint32_t                                    set,
    uint32_t                                    descriptorWriteCount,
    const VkWriteDescriptorSet*                 pDescriptorWrites);</code></pre>
</div>
</div>
</div>
<div class="sect3">
<h4 id="_parameters_71">Parameters</h4>
<div class="ulist">
<ul>
<li>
<p><code>commandBuffer</code> is the command buffer that the descriptors will be
recorded in.</p>
</li>
<li>
<p><code>pipelineBindPoint</code> is a <a href="#VkPipelineBindPoint">VkPipelineBindPoint</a> indicating
whether the descriptors will be used by graphics pipelines or compute
pipelines.
There is a separate set of push descriptor bindings for each of graphics
and compute, so binding one does not disturb the other.</p>
</li>
<li>
<p><code>layout</code> is a <a href="#VkPipelineLayout">VkPipelineLayout</a> object used to program the
bindings.</p>
</li>
<li>
<p><code>set</code> is the set number of the descriptor set in the pipeline layout
that will be updated.</p>
</li>
<li>
<p><code>descriptorWriteCount</code> is the number of elements in the
<code>pDescriptorWrites</code> array.</p>
</li>
<li>
<p><code>pDescriptorWrites</code> is a pointer to an array of
<a href="#VkWriteDescriptorSet">VkWriteDescriptorSet</a> structures describing the descriptors to be
updated.</p>
</li>
</ul>
</div>
</div>
<div class="sect3">
<h4 id="_description_71">Description</h4>
<div class="paragraph">
<p><em>Push descriptors</em> are a small bank of descriptors whose storage is
internally managed by the command buffer rather than being written into a
descriptor set and later bound to a command buffer.
Push descriptors allow for incremental updates of descriptors without
managing the lifetime of descriptor sets.</p>
</div>
<div class="paragraph">
<p>When a command buffer begins recording, all push descriptors are undefined.
Push descriptors <strong class="purple">can</strong> be updated incrementally and cause shaders to use the
updated descriptors for subsequent rendering commands (either compute or
graphics, according to the <code>pipelineBindPoint</code>) until the descriptor is
overwritten, or else until the set is disturbed as described in
<a href="vkspec.html#descriptorsets-compatibility">Pipeline Layout Compatibility</a>.
When the set is disturbed or push descriptors with a different descriptor
set layout are set, all push descriptors are undefined.</p>
</div>
<div class="paragraph">
<p>Push descriptors that are <a href="vkspec.html#shaders-staticuse">statically used</a> by a
pipeline <strong class="purple">must</strong> not be undefined at the time that a draw or dispatch command
is recorded to execute using that pipeline.
This includes immutable sampler descriptors, which <strong class="purple">must</strong> be pushed before
they are accessed by a pipeline.
Push descriptors that are not statically used <strong class="purple">can</strong> remain undefined.</p>
</div>
<div class="paragraph">
<p>Push descriptors do not use dynamic offsets.
Instead, the corresponding non-dynamic descriptor types <strong class="purple">can</strong> be used and the
<code>offset</code> member of <a href="#VkDescriptorBufferInfo">VkDescriptorBufferInfo</a> <strong class="purple">can</strong> be changed each
time the descriptor is written.</p>
</div>
<div class="paragraph">
<p>Each element of <code>pDescriptorWrites</code> is interpreted as in
<a href="#VkWriteDescriptorSet">VkWriteDescriptorSet</a>, except the <code>dstSet</code> member is ignored.</p>
</div>
<div class="paragraph">
<p>To push an immutable sampler, use a <a href="#VkWriteDescriptorSet">VkWriteDescriptorSet</a> with
<code>dstBinding</code> and <code>dstArrayElement</code> selecting the immutable sampler&#8217;s
binding.
If the descriptor type is <code>VK_DESCRIPTOR_TYPE_SAMPLER</code>, the
<code>pImageInfo</code> parameter is ignored and the immutable sampler is taken
from the push descriptor set layout in the pipeline layout.
If the descriptor type is <code>VK_DESCRIPTOR_TYPE_COMBINED_IMAGE_SAMPLER</code>,
the <code>sampler</code> member of the <code>pImageInfo</code> parameter is ignored and
the immutable sampler is taken from the push descriptor set layout in the
pipeline layout.</p>
</div>
<div class="sidebarblock">
<div class="content">
<div class="title">Valid Usage</div>
<div class="ulist">
<ul>
<li>
<p><a id="VUID-vkCmdPushDescriptorSetKHR-pipelineBindPoint-00363"></a>
<code>pipelineBindPoint</code> <strong class="purple">must</strong> be supported by the <code>commandBuffer</code>&#8217;s
parent <code>VkCommandPool</code>&#8217;s queue family</p>
</li>
<li>
<p><a id="VUID-vkCmdPushDescriptorSetKHR-set-00364"></a>
<code>set</code> <strong class="purple">must</strong> be less than
<code>VkPipelineLayoutCreateInfo</code>::<code>setLayoutCount</code> provided when
<code>layout</code> was created</p>
</li>
<li>
<p><a id="VUID-vkCmdPushDescriptorSetKHR-set-00365"></a>
<code>set</code> <strong class="purple">must</strong> be the unique set number in the pipeline layout that
uses a descriptor set layout that was created with
<code>VK_DESCRIPTOR_SET_LAYOUT_CREATE_PUSH_DESCRIPTOR_BIT_KHR</code></p>
</li>
</ul>
</div>
</div>
</div>
<div class="sidebarblock">
<div class="content">
<div class="title">Valid Usage (Implicit)</div>
<div class="ulist">
<ul>
<li>
<p><a id="VUID-vkCmdPushDescriptorSetKHR-commandBuffer-parameter"></a> <code>commandBuffer</code> <strong class="purple">must</strong> be a valid <code>VkCommandBuffer</code> handle</p>
</li>
<li>
<p><a id="VUID-vkCmdPushDescriptorSetKHR-pipelineBindPoint-parameter"></a> <code>pipelineBindPoint</code> <strong class="purple">must</strong> be a valid <a href="#VkPipelineBindPoint">VkPipelineBindPoint</a> value</p>
</li>
<li>
<p><a id="VUID-vkCmdPushDescriptorSetKHR-layout-parameter"></a> <code>layout</code> <strong class="purple">must</strong> be a valid <code>VkPipelineLayout</code> handle</p>
</li>
<li>
<p><a id="VUID-vkCmdPushDescriptorSetKHR-pDescriptorWrites-parameter"></a> <code>pDescriptorWrites</code> <strong class="purple">must</strong> be a valid pointer to an array of <code>descriptorWriteCount</code> valid <code>VkWriteDescriptorSet</code> structures</p>
</li>
<li>
<p><a id="VUID-vkCmdPushDescriptorSetKHR-commandBuffer-recording"></a> <code>commandBuffer</code> <strong class="purple">must</strong> be in the <a href="#commandbuffers-lifecycle">recording state</a></p>
</li>
<li>
<p><a id="VUID-vkCmdPushDescriptorSetKHR-commandBuffer-cmdpool"></a> The <code>VkCommandPool</code> that <code>commandBuffer</code> was allocated from <strong class="purple">must</strong> support graphics, or compute operations</p>
</li>
<li>
<p><a id="VUID-vkCmdPushDescriptorSetKHR-descriptorWriteCount-arraylength"></a> <code>descriptorWriteCount</code> <strong class="purple">must</strong> be greater than <code>0</code></p>
</li>
<li>
<p><a id="VUID-vkCmdPushDescriptorSetKHR-commonparent"></a> Both of <code>commandBuffer</code>, and <code>layout</code> <strong class="purple">must</strong> have been created, allocated, or retrieved from the same <code>VkDevice</code></p>
</li>
</ul>
</div>
</div>
</div>
<div class="sidebarblock">
<div class="content">
<div class="title">Host Synchronization</div>
<div class="ulist">
<ul>
<li>
<p>Host access to <code>commandBuffer</code> <strong class="purple">must</strong> be externally synchronized</p>
</li>
<li>
<p>Host access to the <code>VkCommandPool</code> that <code>commandBuffer</code> was allocated from <strong class="purple">must</strong> be externally synchronized</p>
</li>
</ul>
</div>
</div>
</div>
<div class="sidebarblock">
<div class="content">
<div class="title">Command Properties</div>
<table class="tableblock frame-all grid-all stretch">
<colgroup>
<col style="width: 25%;">
<col style="width: 25%;">
<col style="width: 25%;">
<col style="width: 25%;">
</colgroup>
<thead>
<tr>
<th class="tableblock halign-left valign-top"><a href="#VkCommandBufferLevel">Command Buffer Levels</a></th>
<th class="tableblock halign-left valign-top"><a href="#vkCmdBeginRenderPass">Render Pass Scope</a></th>
<th class="tableblock halign-left valign-top"><a href="#VkQueueFlagBits">Supported Queue Types</a></th>
<th class="tableblock halign-left valign-top"><a href="#synchronization-pipeline-stages-types">Pipeline Type</a></th>
</tr>
</thead>
<tbody>
<tr>
<td class="tableblock halign-left valign-top"><p class="tableblock">Primary<br>
Secondary</p></td>
<td class="tableblock halign-left valign-top"><p class="tableblock">Both</p></td>
<td class="tableblock halign-left valign-top"><p class="tableblock">Graphics<br>
Compute</p></td>
<td class="tableblock halign-left valign-top"></td>
</tr>
</tbody>
</table>
</div>
</div>
</div>
<div class="sect3">
<h4 id="_see_also_71">See Also</h4>
<div class="paragraph">
<p><a href="#VkCommandBuffer">VkCommandBuffer</a>, <a href="#VkPipelineBindPoint">VkPipelineBindPoint</a>, <a href="#VkPipelineLayout">VkPipelineLayout</a>, <a href="#VkWriteDescriptorSet">VkWriteDescriptorSet</a></p>
</div>
</div>
<div class="sect3">
<h4 id="_document_notes_71">Document Notes</h4>
<div class="paragraph">
<p>For more information, see the Vulkan Specification at URL</p>
</div>
<div class="paragraph">
<p><a href="https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#vkCmdPushDescriptorSetKHR" class="bare">https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#vkCmdPushDescriptorSetKHR</a></p>
</div>
<div class="paragraph">
<p>This page is extracted from the Vulkan Specification.
Fixes and changes should be made to the Specification, not directly.</p>
</div>
<div style="page-break-after: always;"></div>
</div>
</div>
<div class="sect2">
<h3 id="_vkcmdpushdescriptorsetwithtemplatekhr3">vkCmdPushDescriptorSetWithTemplateKHR(3)</h3>
<div class="sect3">
<h4 id="_name_72">Name</h4>
<div class="paragraph">
<p>vkCmdPushDescriptorSetWithTemplateKHR - Pushes descriptor updates into a command buffer using a descriptor update template</p>
</div>
</div>
<div class="sect3">
<h4 id="_c_specification_72">C Specification</h4>
<div class="paragraph">
<p>It is also possible to use a descriptor update template to specify the push
descriptors to update.
To do so, call:</p>
</div>
<div id="vkCmdPushDescriptorSetWithTemplateKHR" class="listingblock">
<div class="content">
<pre class="highlight"><code class="language-c++" data-lang="c++">void vkCmdPushDescriptorSetWithTemplateKHR(
    VkCommandBuffer                             commandBuffer,
    VkDescriptorUpdateTemplate                  descriptorUpdateTemplate,
    VkPipelineLayout                            layout,
    uint32_t                                    set,
    const void*                                 pData);</code></pre>
</div>
</div>
</div>
<div class="sect3">
<h4 id="_parameters_72">Parameters</h4>
<div class="ulist">
<ul>
<li>
<p><code>commandBuffer</code> is the command buffer that the descriptors will be
recorded in.</p>
</li>
<li>
<p><code>descriptorUpdateTemplate</code> is a descriptor update template that
defines how to interpret the descriptor information in <code>pData</code>.</p>
</li>
<li>
<p><code>layout</code> is a <a href="#VkPipelineLayout">VkPipelineLayout</a> object used to program the
bindings.
It <strong class="purple">must</strong> be compatible with the layout used to create the
<code>descriptorUpdateTemplate</code> handle.</p>
</li>
<li>
<p><code>set</code> is the set number of the descriptor set in the pipeline layout
that will be updated.
This <strong class="purple">must</strong> be the same number used to create the
<code>descriptorUpdateTemplate</code> handle.</p>
</li>
<li>
<p><code>pData</code> points to memory which contains the descriptors for the
templated update.</p>
</li>
</ul>
</div>
</div>
<div class="sect3">
<h4 id="_description_72">Description</h4>
<div class="sidebarblock">
<div class="content">
<div class="title">Valid Usage</div>
<div class="ulist">
<ul>
<li>
<p><a id="VUID-vkCmdPushDescriptorSetWithTemplateKHR-commandBuffer-00366"></a>
The <code>pipelineBindPoint</code> specified during the creation of the
descriptor update template <strong class="purple">must</strong> be supported by the
<code>commandBuffer</code>&#8217;s parent <code>VkCommandPool</code>&#8217;s queue family</p>
</li>
<li>
<p><a id="VUID-vkCmdPushDescriptorSetWithTemplateKHR-pData-01686"></a>
<code>pData</code> <strong class="purple">must</strong> be a valid pointer to a memory that contains one or
more valid instances of <a href="#VkDescriptorImageInfo">VkDescriptorImageInfo</a>,
<a href="#VkDescriptorBufferInfo">VkDescriptorBufferInfo</a>, or <a href="#VkBufferView">VkBufferView</a> in a layout defined
by <code>descriptorUpdateTemplate</code> when it was created with
<a href="#vkCreateDescriptorUpdateTemplateKHR">vkCreateDescriptorUpdateTemplateKHR</a></p>
</li>
</ul>
</div>
</div>
</div>
<div class="sidebarblock">
<div class="content">
<div class="title">Valid Usage (Implicit)</div>
<div class="ulist">
<ul>
<li>
<p><a id="VUID-vkCmdPushDescriptorSetWithTemplateKHR-commandBuffer-parameter"></a> <code>commandBuffer</code> <strong class="purple">must</strong> be a valid <code>VkCommandBuffer</code> handle</p>
</li>
<li>
<p><a id="VUID-vkCmdPushDescriptorSetWithTemplateKHR-descriptorUpdateTemplate-parameter"></a> <code>descriptorUpdateTemplate</code> <strong class="purple">must</strong> be a valid <code>VkDescriptorUpdateTemplate</code> handle</p>
</li>
<li>
<p><a id="VUID-vkCmdPushDescriptorSetWithTemplateKHR-layout-parameter"></a> <code>layout</code> <strong class="purple">must</strong> be a valid <code>VkPipelineLayout</code> handle</p>
</li>
<li>
<p><a id="VUID-vkCmdPushDescriptorSetWithTemplateKHR-commandBuffer-recording"></a> <code>commandBuffer</code> <strong class="purple">must</strong> be in the <a href="#commandbuffers-lifecycle">recording state</a></p>
</li>
<li>
<p><a id="VUID-vkCmdPushDescriptorSetWithTemplateKHR-commandBuffer-cmdpool"></a> The <code>VkCommandPool</code> that <code>commandBuffer</code> was allocated from <strong class="purple">must</strong> support graphics, or compute operations</p>
</li>
<li>
<p><a id="VUID-vkCmdPushDescriptorSetWithTemplateKHR-commonparent"></a> Each of <code>commandBuffer</code>, <code>descriptorUpdateTemplate</code>, and <code>layout</code> <strong class="purple">must</strong> have been created, allocated, or retrieved from the same <code>VkDevice</code></p>
</li>
</ul>
</div>
</div>
</div>
<div class="sidebarblock">
<div class="content">
<div class="title">Host Synchronization</div>
<div class="ulist">
<ul>
<li>
<p>Host access to <code>commandBuffer</code> <strong class="purple">must</strong> be externally synchronized</p>
</li>
<li>
<p>Host access to the <code>VkCommandPool</code> that <code>commandBuffer</code> was allocated from <strong class="purple">must</strong> be externally synchronized</p>
</li>
</ul>
</div>
</div>
</div>
<div class="sidebarblock">
<div class="content">
<div class="title">Command Properties</div>
<table class="tableblock frame-all grid-all stretch">
<colgroup>
<col style="width: 25%;">
<col style="width: 25%;">
<col style="width: 25%;">
<col style="width: 25%;">
</colgroup>
<thead>
<tr>
<th class="tableblock halign-left valign-top"><a href="#VkCommandBufferLevel">Command Buffer Levels</a></th>
<th class="tableblock halign-left valign-top"><a href="#vkCmdBeginRenderPass">Render Pass Scope</a></th>
<th class="tableblock halign-left valign-top"><a href="#VkQueueFlagBits">Supported Queue Types</a></th>
<th class="tableblock halign-left valign-top"><a href="#synchronization-pipeline-stages-types">Pipeline Type</a></th>
</tr>
</thead>
<tbody>
<tr>
<td class="tableblock halign-left valign-top"><p class="tableblock">Primary<br>
Secondary</p></td>
<td class="tableblock halign-left valign-top"><p class="tableblock">Both</p></td>
<td class="tableblock halign-left valign-top"><p class="tableblock">Graphics<br>
Compute</p></td>
<td class="tableblock halign-left valign-top"></td>
</tr>
</tbody>
</table>
</div>
</div>
<div class="listingblock">
<div class="title">API example</div>
<div class="content">
<pre class="highlight"><code class="language-c++" data-lang="c++">struct AppDataStructure
{
    VkDescriptorImageInfo  imageInfo;          // a single image info
    // ... some more application related data
};

const VkDescriptorUpdateTemplateEntry descriptorUpdateTemplateEntries[] =
{
    // binding to a single image descriptor
    {
        0,                                           // binding
        0,                                           // dstArrayElement
        1,                                           // descriptorCount
        VK_DESCRIPTOR_TYPE_COMBINED_IMAGE_SAMPLER,   // descriptorType
        offsetof(AppDataStructure, imageInfo),       // offset
        0                                            // stride is not required if descriptorCount is 1
    }
};

// create a descriptor update template for descriptor set updates
const VkDescriptorUpdateTemplateCreateInfo createInfo =
{
    VK_STRUCTURE_TYPE_DESCRIPTOR_UPDATE_TEMPLATE_CREATE_INFO,  // sType
    NULL,                                                      // pNext
    0,                                                         // flags
    1,                                                         // descriptorUpdateEntryCount
    descriptorUpdateTemplateEntries,                           // pDescriptorUpdateEntries
    VK_DESCRIPTOR_UPDATE_TEMPLATE_TYPE_PUSH_DESCRIPTORS_KHR,   // templateType
    0,                                                         // descriptorSetLayout, ignored by given templateType
    VK_PIPELINE_BIND_POINT_GRAPHICS,                           // pipelineBindPoint
    myPipelineLayout,                                          // pipelineLayout
    0,                                                         // set
};

VkDescriptorUpdateTemplate myDescriptorUpdateTemplate;
myResult = vkCreateDescriptorUpdateTemplate(
    myDevice,
    &amp;createInfo,
    NULL,
    &amp;myDescriptorUpdateTemplate);
}

AppDataStructure appData;
// fill appData here or cache it in your engine
vkCmdPushDescriptorSetWithTemplateKHR(myCmdBuffer, myDescriptorUpdateTemplate, myPipelineLayout, 0,&amp;appData);</code></pre>
</div>
</div>
</div>
<div class="sect3">
<h4 id="_see_also_72">See Also</h4>
<div class="paragraph">
<p><a href="#VkCommandBuffer">VkCommandBuffer</a>, <a href="#VkDescriptorUpdateTemplate">VkDescriptorUpdateTemplate</a>, <a href="#VkPipelineLayout">VkPipelineLayout</a></p>
</div>
</div>
<div class="sect3">
<h4 id="_document_notes_72">Document Notes</h4>
<div class="paragraph">
<p>For more information, see the Vulkan Specification at URL</p>
</div>
<div class="paragraph">
<p><a href="https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#vkCmdPushDescriptorSetWithTemplateKHR" class="bare">https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#vkCmdPushDescriptorSetWithTemplateKHR</a></p>
</div>
<div class="paragraph">
<p>This page is extracted from the Vulkan Specification.
Fixes and changes should be made to the Specification, not directly.</p>
</div>
<div style="page-break-after: always;"></div>
</div>
</div>
<div class="sect2">
<h3 id="_vkcmdreservespaceforcommandsnvx3">vkCmdReserveSpaceForCommandsNVX(3)</h3>
<div class="sect3">
<h4 id="_name_73">Name</h4>
<div class="paragraph">
<p>vkCmdReserveSpaceForCommandsNVX - Perform a reservation of command buffer space</p>
</div>
</div>
<div class="sect3">
<h4 id="_c_specification_73">C Specification</h4>
<div class="paragraph">
<p>Command space for generated commands recorded into a secondary command
buffer <strong class="purple">must</strong> be reserved by calling:</p>
</div>
<div id="vkCmdReserveSpaceForCommandsNVX" class="listingblock">
<div class="content">
<pre class="highlight"><code class="language-c++" data-lang="c++">void vkCmdReserveSpaceForCommandsNVX(
    VkCommandBuffer                             commandBuffer,
    const VkCmdReserveSpaceForCommandsInfoNVX*  pReserveSpaceInfo);</code></pre>
</div>
</div>
</div>
<div class="sect3">
<h4 id="_parameters_73">Parameters</h4>
<div class="ulist">
<ul>
<li>
<p><code>commandBuffer</code> is the secondary command buffer in which the space
for device-generated commands is reserved.</p>
</li>
<li>
<p><code>pProcessCommandsInfo</code> is a pointer to an instance of the
<a href="#VkCmdReserveSpaceForCommandsInfoNVX">VkCmdReserveSpaceForCommandsInfoNVX</a> structure containing
parameters affecting the reservation of command buffer space.</p>
</li>
</ul>
</div>
</div>
<div class="sect3">
<h4 id="_description_73">Description</h4>
<div class="sidebarblock">
<div class="content">
<div class="title">Valid Usage</div>
<div class="ulist">
<ul>
<li>
<p><a id="VUID-vkCmdReserveSpaceForCommandsNVX-commandBuffer-01329"></a>
The provided <code>commandBuffer</code> <strong class="purple">must</strong> not have had a prior space
reservation since its creation or the last reset.</p>
</li>
<li>
<p><a id="VUID-vkCmdReserveSpaceForCommandsNVX-commandBuffer-01330"></a>
The state of the <code>commandBuffer</code> <strong class="purple">must</strong> be legal to execute all
commands within the sequence provided by the
<code>indirectCommandsLayout</code> member of <code>pProcessCommandsInfo</code>.</p>
</li>
</ul>
</div>
</div>
</div>
<div class="sidebarblock">
<div class="content">
<div class="title">Valid Usage (Implicit)</div>
<div class="ulist">
<ul>
<li>
<p><a id="VUID-vkCmdReserveSpaceForCommandsNVX-commandBuffer-parameter"></a> <code>commandBuffer</code> <strong class="purple">must</strong> be a valid <code>VkCommandBuffer</code> handle</p>
</li>
<li>
<p><a id="VUID-vkCmdReserveSpaceForCommandsNVX-pReserveSpaceInfo-parameter"></a> <code>pReserveSpaceInfo</code> <strong class="purple">must</strong> be a valid pointer to a valid <code>VkCmdReserveSpaceForCommandsInfoNVX</code> structure</p>
</li>
<li>
<p><a id="VUID-vkCmdReserveSpaceForCommandsNVX-commandBuffer-recording"></a> <code>commandBuffer</code> <strong class="purple">must</strong> be in the <a href="#commandbuffers-lifecycle">recording state</a></p>
</li>
<li>
<p><a id="VUID-vkCmdReserveSpaceForCommandsNVX-commandBuffer-cmdpool"></a> The <code>VkCommandPool</code> that <code>commandBuffer</code> was allocated from <strong class="purple">must</strong> support graphics, or compute operations</p>
</li>
<li>
<p><a id="VUID-vkCmdReserveSpaceForCommandsNVX-renderpass"></a> This command <strong class="purple">must</strong> only be called inside of a render pass instance</p>
</li>
<li>
<p><a id="VUID-vkCmdReserveSpaceForCommandsNVX-bufferlevel"></a> <code>commandBuffer</code> <strong class="purple">must</strong> be a secondary <code>VkCommandBuffer</code></p>
</li>
</ul>
</div>
</div>
</div>
<div class="sidebarblock">
<div class="content">
<div class="title">Host Synchronization</div>
<div class="ulist">
<ul>
<li>
<p>Host access to <code>commandBuffer</code> <strong class="purple">must</strong> be externally synchronized</p>
</li>
<li>
<p>Host access to the <code>VkCommandPool</code> that <code>commandBuffer</code> was allocated from <strong class="purple">must</strong> be externally synchronized</p>
</li>
</ul>
</div>
</div>
</div>
<div class="sidebarblock">
<div class="content">
<div class="title">Command Properties</div>
<table class="tableblock frame-all grid-all stretch">
<colgroup>
<col style="width: 25%;">
<col style="width: 25%;">
<col style="width: 25%;">
<col style="width: 25%;">
</colgroup>
<thead>
<tr>
<th class="tableblock halign-left valign-top"><a href="#VkCommandBufferLevel">Command Buffer Levels</a></th>
<th class="tableblock halign-left valign-top"><a href="#vkCmdBeginRenderPass">Render Pass Scope</a></th>
<th class="tableblock halign-left valign-top"><a href="#VkQueueFlagBits">Supported Queue Types</a></th>
<th class="tableblock halign-left valign-top"><a href="#synchronization-pipeline-stages-types">Pipeline Type</a></th>
</tr>
</thead>
<tbody>
<tr>
<td class="tableblock halign-left valign-top"><p class="tableblock">Secondary</p></td>
<td class="tableblock halign-left valign-top"><p class="tableblock">Inside</p></td>
<td class="tableblock halign-left valign-top"><p class="tableblock">Graphics<br>
Compute</p></td>
<td class="tableblock halign-left valign-top"></td>
</tr>
</tbody>
</table>
</div>
</div>
</div>
<div class="sect3">
<h4 id="_see_also_73">See Also</h4>
<div class="paragraph">
<p><a href="#VkCmdReserveSpaceForCommandsInfoNVX">VkCmdReserveSpaceForCommandsInfoNVX</a>, <a href="#VkCommandBuffer">VkCommandBuffer</a></p>
</div>
</div>
<div class="sect3">
<h4 id="_document_notes_73">Document Notes</h4>
<div class="paragraph">
<p>For more information, see the Vulkan Specification at URL</p>
</div>
<div class="paragraph">
<p><a href="https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#vkCmdReserveSpaceForCommandsNVX" class="bare">https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#vkCmdReserveSpaceForCommandsNVX</a></p>
</div>
<div class="paragraph">
<p>This page is extracted from the Vulkan Specification.
Fixes and changes should be made to the Specification, not directly.</p>
</div>
<div style="page-break-after: always;"></div>
</div>
</div>
<div class="sect2">
<h3 id="_vkcmdresetevent3">vkCmdResetEvent(3)</h3>
<div class="sect3">
<h4 id="_name_74">Name</h4>
<div class="paragraph">
<p>vkCmdResetEvent - Reset an event object to non-signaled state</p>
</div>
</div>
<div class="sect3">
<h4 id="_c_specification_74">C Specification</h4>
<div class="paragraph">
<p>To set the state of an event to unsignaled from a device, call:</p>
</div>
<div id="vkCmdResetEvent" class="listingblock">
<div class="content">
<pre class="highlight"><code class="language-c++" data-lang="c++">void vkCmdResetEvent(
    VkCommandBuffer                             commandBuffer,
    VkEvent                                     event,
    VkPipelineStageFlags                        stageMask);</code></pre>
</div>
</div>
</div>
<div class="sect3">
<h4 id="_parameters_74">Parameters</h4>
<div class="ulist">
<ul>
<li>
<p><code>commandBuffer</code> is the command buffer into which the command is
recorded.</p>
</li>
<li>
<p><code>event</code> is the event that will be unsignaled.</p>
</li>
<li>
<p><code>stageMask</code> is a bitmask of <a href="#VkPipelineStageFlagBits">VkPipelineStageFlagBits</a> specifying
the <a href="vkspec.html#synchronization-pipeline-stages">source stage mask</a> used to
determine when the <code>event</code> is unsignaled.</p>
</li>
</ul>
</div>
</div>
<div class="sect3">
<h4 id="_description_74">Description</h4>
<div class="paragraph">
<p>When <a href="#vkCmdResetEvent">vkCmdResetEvent</a> is submitted to a queue, it defines an execution
dependency on commands that were submitted before it, and defines an event
unsignal operation which resets the event to the unsignaled state.</p>
</div>
<div class="paragraph">
<p>The first <a href="vkspec.html#synchronization-dependencies-scopes">synchronization scope</a>
includes all commands that occur earlier in
<a href="vkspec.html#synchronization-submission-order">submission order</a>.
The synchronization scope is limited to operations on the pipeline stages
determined by the <a href="vkspec.html#synchronization-pipeline-stages-masks">source stage
mask</a> specified by <code>stageMask</code>.</p>
</div>
<div class="paragraph">
<p>The second <a href="vkspec.html#synchronization-dependencies-scopes">synchronization scope</a>
includes only the event unsignal operation.</p>
</div>
<div class="paragraph">
<p>If <code>event</code> is already in the unsignaled state when <a href="#vkCmdResetEvent">vkCmdResetEvent</a>
is executed on the device, then <a href="#vkCmdResetEvent">vkCmdResetEvent</a> has no effect, no
event unsignal operation occurs, and no execution dependency is generated.</p>
</div>
<div class="sidebarblock">
<div class="content">
<div class="title">Valid Usage</div>
<div class="ulist">
<ul>
<li>
<p><a id="VUID-vkCmdResetEvent-stageMask-01153"></a>
<code>stageMask</code> <strong class="purple">must</strong> not include <code>VK_PIPELINE_STAGE_HOST_BIT</code></p>
</li>
<li>
<p><a id="VUID-vkCmdResetEvent-stageMask-01154"></a>
If the <a href="vkspec.html#features-geometryShader">geometry shaders</a> feature is not
enabled, <code>stageMask</code> <strong class="purple">must</strong> not contain
<code>VK_PIPELINE_STAGE_GEOMETRY_SHADER_BIT</code></p>
</li>
<li>
<p><a id="VUID-vkCmdResetEvent-stageMask-01155"></a>
If the <a href="vkspec.html#features-tessellationShader">tessellation shaders</a> feature is
not enabled, <code>stageMask</code> <strong class="purple">must</strong> not contain
<code>VK_PIPELINE_STAGE_TESSELLATION_CONTROL_SHADER_BIT</code> or
<code>VK_PIPELINE_STAGE_TESSELLATION_EVALUATION_SHADER_BIT</code></p>
</li>
<li>
<p><a id="VUID-vkCmdResetEvent-event-01156"></a>
When this command executes, <code>event</code> <strong class="purple">must</strong> not be waited on by a
<code>vkCmdWaitEvents</code> command that is currently executing</p>
</li>
<li>
<p><a id="VUID-vkCmdResetEvent-commandBuffer-01157"></a>
<code>commandBuffer</code>&#8217;s current device mask <strong class="purple">must</strong> include exactly one
physical device.</p>
</li>
<li>
<p><a id="VUID-vkCmdResetEvent-stageMask-02109"></a>
If the <a href="vkspec.html#features-meshShader">mesh shaders</a> feature is not enabled,
<code>stageMask</code> <strong class="purple">must</strong> not contain
<code>VK_PIPELINE_STAGE_MESH_SHADER_BIT_NV</code></p>
</li>
<li>
<p><a id="VUID-vkCmdResetEvent-stageMask-02110"></a>
If the <a href="vkspec.html#features-taskShader">task shaders</a> feature is not enabled,
<code>stageMask</code> <strong class="purple">must</strong> not contain
<code>VK_PIPELINE_STAGE_TASK_SHADER_BIT_NV</code></p>
</li>
</ul>
</div>
</div>
</div>
<div class="sidebarblock">
<div class="content">
<div class="title">Valid Usage (Implicit)</div>
<div class="ulist">
<ul>
<li>
<p><a id="VUID-vkCmdResetEvent-commandBuffer-parameter"></a> <code>commandBuffer</code> <strong class="purple">must</strong> be a valid <code>VkCommandBuffer</code> handle</p>
</li>
<li>
<p><a id="VUID-vkCmdResetEvent-event-parameter"></a> <code>event</code> <strong class="purple">must</strong> be a valid <code>VkEvent</code> handle</p>
</li>
<li>
<p><a id="VUID-vkCmdResetEvent-stageMask-parameter"></a> <code>stageMask</code> <strong class="purple">must</strong> be a valid combination of <a href="#VkPipelineStageFlagBits">VkPipelineStageFlagBits</a> values</p>
</li>
<li>
<p><a id="VUID-vkCmdResetEvent-stageMask-requiredbitmask"></a> <code>stageMask</code> <strong class="purple">must</strong> not be <code>0</code></p>
</li>
<li>
<p><a id="VUID-vkCmdResetEvent-commandBuffer-recording"></a> <code>commandBuffer</code> <strong class="purple">must</strong> be in the <a href="#commandbuffers-lifecycle">recording state</a></p>
</li>
<li>
<p><a id="VUID-vkCmdResetEvent-commandBuffer-cmdpool"></a> The <code>VkCommandPool</code> that <code>commandBuffer</code> was allocated from <strong class="purple">must</strong> support graphics, or compute operations</p>
</li>
<li>
<p><a id="VUID-vkCmdResetEvent-renderpass"></a> This command <strong class="purple">must</strong> only be called outside of a render pass instance</p>
</li>
<li>
<p><a id="VUID-vkCmdResetEvent-commonparent"></a> Both of <code>commandBuffer</code>, and <code>event</code> <strong class="purple">must</strong> have been created, allocated, or retrieved from the same <code>VkDevice</code></p>
</li>
</ul>
</div>
</div>
</div>
<div class="sidebarblock">
<div class="content">
<div class="title">Host Synchronization</div>
<div class="ulist">
<ul>
<li>
<p>Host access to <code>commandBuffer</code> <strong class="purple">must</strong> be externally synchronized</p>
</li>
<li>
<p>Host access to the <code>VkCommandPool</code> that <code>commandBuffer</code> was allocated from <strong class="purple">must</strong> be externally synchronized</p>
</li>
</ul>
</div>
</div>
</div>
<div class="sidebarblock">
<div class="content">
<div class="title">Command Properties</div>
<table class="tableblock frame-all grid-all stretch">
<colgroup>
<col style="width: 25%;">
<col style="width: 25%;">
<col style="width: 25%;">
<col style="width: 25%;">
</colgroup>
<thead>
<tr>
<th class="tableblock halign-left valign-top"><a href="#VkCommandBufferLevel">Command Buffer Levels</a></th>
<th class="tableblock halign-left valign-top"><a href="#vkCmdBeginRenderPass">Render Pass Scope</a></th>
<th class="tableblock halign-left valign-top"><a href="#VkQueueFlagBits">Supported Queue Types</a></th>
<th class="tableblock halign-left valign-top"><a href="#synchronization-pipeline-stages-types">Pipeline Type</a></th>
</tr>
</thead>
<tbody>
<tr>
<td class="tableblock halign-left valign-top"><p class="tableblock">Primary<br>
Secondary</p></td>
<td class="tableblock halign-left valign-top"><p class="tableblock">Outside</p></td>
<td class="tableblock halign-left valign-top"><p class="tableblock">Graphics<br>
Compute</p></td>
<td class="tableblock halign-left valign-top"></td>
</tr>
</tbody>
</table>
</div>
</div>
</div>
<div class="sect3">
<h4 id="_see_also_74">See Also</h4>
<div class="paragraph">
<p><a href="#VkCommandBuffer">VkCommandBuffer</a>, <a href="#VkEvent">VkEvent</a>, <a href="#VkPipelineStageFlags">VkPipelineStageFlags</a></p>
</div>
</div>
<div class="sect3">
<h4 id="_document_notes_74">Document Notes</h4>
<div class="paragraph">
<p>For more information, see the Vulkan Specification at URL</p>
</div>
<div class="paragraph">
<p><a href="https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#vkCmdResetEvent" class="bare">https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#vkCmdResetEvent</a></p>
</div>
<div class="paragraph">
<p>This page is extracted from the Vulkan Specification.
Fixes and changes should be made to the Specification, not directly.</p>
</div>
<div style="page-break-after: always;"></div>
</div>
</div>
<div class="sect2">
<h3 id="_vkcmdresetquerypool3">vkCmdResetQueryPool(3)</h3>
<div class="sect3">
<h4 id="_name_75">Name</h4>
<div class="paragraph">
<p>vkCmdResetQueryPool - Reset queries in a query pool</p>
</div>
</div>
<div class="sect3">
<h4 id="_c_specification_75">C Specification</h4>
<div class="paragraph">
<p>To reset a range of queries in a query pool on a queue, call:</p>
</div>
<div id="vkCmdResetQueryPool" class="listingblock">
<div class="content">
<pre class="highlight"><code class="language-c++" data-lang="c++">void vkCmdResetQueryPool(
    VkCommandBuffer                             commandBuffer,
    VkQueryPool                                 queryPool,
    uint32_t                                    firstQuery,
    uint32_t                                    queryCount);</code></pre>
</div>
</div>
</div>
<div class="sect3">
<h4 id="_parameters_75">Parameters</h4>
<div class="ulist">
<ul>
<li>
<p><code>commandBuffer</code> is the command buffer into which this command will
be recorded.</p>
</li>
<li>
<p><code>queryPool</code> is the handle of the query pool managing the queries
being reset.</p>
</li>
<li>
<p><code>firstQuery</code> is the initial query index to reset.</p>
</li>
<li>
<p><code>queryCount</code> is the number of queries to reset.</p>
</li>
</ul>
</div>
</div>
<div class="sect3">
<h4 id="_description_75">Description</h4>
<div class="paragraph">
<p>When executed on a queue, this command sets the status of query indices
<span class="eq">[<code>firstQuery</code>, <code>firstQuery</code> +  <code>queryCount</code> - 1]</span> to
unavailable.</p>
</div>
<div class="sidebarblock">
<div class="content">
<div class="title">Valid Usage</div>
<div class="ulist">
<ul>
<li>
<p><a id="VUID-vkCmdResetQueryPool-firstQuery-00796"></a>
<code>firstQuery</code> <strong class="purple">must</strong> be less than the number of queries in
<code>queryPool</code></p>
</li>
<li>
<p><a id="VUID-vkCmdResetQueryPool-firstQuery-00797"></a>
The sum of <code>firstQuery</code> and <code>queryCount</code> <strong class="purple">must</strong> be less than or
equal to the number of queries in <code>queryPool</code></p>
</li>
</ul>
</div>
</div>
</div>
<div class="sidebarblock">
<div class="content">
<div class="title">Valid Usage (Implicit)</div>
<div class="ulist">
<ul>
<li>
<p><a id="VUID-vkCmdResetQueryPool-commandBuffer-parameter"></a> <code>commandBuffer</code> <strong class="purple">must</strong> be a valid <code>VkCommandBuffer</code> handle</p>
</li>
<li>
<p><a id="VUID-vkCmdResetQueryPool-queryPool-parameter"></a> <code>queryPool</code> <strong class="purple">must</strong> be a valid <code>VkQueryPool</code> handle</p>
</li>
<li>
<p><a id="VUID-vkCmdResetQueryPool-commandBuffer-recording"></a> <code>commandBuffer</code> <strong class="purple">must</strong> be in the <a href="#commandbuffers-lifecycle">recording state</a></p>
</li>
<li>
<p><a id="VUID-vkCmdResetQueryPool-commandBuffer-cmdpool"></a> The <code>VkCommandPool</code> that <code>commandBuffer</code> was allocated from <strong class="purple">must</strong> support graphics, or compute operations</p>
</li>
<li>
<p><a id="VUID-vkCmdResetQueryPool-renderpass"></a> This command <strong class="purple">must</strong> only be called outside of a render pass instance</p>
</li>
<li>
<p><a id="VUID-vkCmdResetQueryPool-commonparent"></a> Both of <code>commandBuffer</code>, and <code>queryPool</code> <strong class="purple">must</strong> have been created, allocated, or retrieved from the same <code>VkDevice</code></p>
</li>
</ul>
</div>
</div>
</div>
<div class="sidebarblock">
<div class="content">
<div class="title">Host Synchronization</div>
<div class="ulist">
<ul>
<li>
<p>Host access to <code>commandBuffer</code> <strong class="purple">must</strong> be externally synchronized</p>
</li>
<li>
<p>Host access to the <code>VkCommandPool</code> that <code>commandBuffer</code> was allocated from <strong class="purple">must</strong> be externally synchronized</p>
</li>
</ul>
</div>
</div>
</div>
<div class="sidebarblock">
<div class="content">
<div class="title">Command Properties</div>
<table class="tableblock frame-all grid-all stretch">
<colgroup>
<col style="width: 25%;">
<col style="width: 25%;">
<col style="width: 25%;">
<col style="width: 25%;">
</colgroup>
<thead>
<tr>
<th class="tableblock halign-left valign-top"><a href="#VkCommandBufferLevel">Command Buffer Levels</a></th>
<th class="tableblock halign-left valign-top"><a href="#vkCmdBeginRenderPass">Render Pass Scope</a></th>
<th class="tableblock halign-left valign-top"><a href="#VkQueueFlagBits">Supported Queue Types</a></th>
<th class="tableblock halign-left valign-top"><a href="#synchronization-pipeline-stages-types">Pipeline Type</a></th>
</tr>
</thead>
<tbody>
<tr>
<td class="tableblock halign-left valign-top"><p class="tableblock">Primary<br>
Secondary</p></td>
<td class="tableblock halign-left valign-top"><p class="tableblock">Outside</p></td>
<td class="tableblock halign-left valign-top"><p class="tableblock">Graphics<br>
Compute</p></td>
<td class="tableblock halign-left valign-top"></td>
</tr>
</tbody>
</table>
</div>
</div>
</div>
<div class="sect3">
<h4 id="_see_also_75">See Also</h4>
<div class="paragraph">
<p><a href="#VkCommandBuffer">VkCommandBuffer</a>, <a href="#VkQueryPool">VkQueryPool</a></p>
</div>
</div>
<div class="sect3">
<h4 id="_document_notes_75">Document Notes</h4>
<div class="paragraph">
<p>For more information, see the Vulkan Specification at URL</p>
</div>
<div class="paragraph">
<p><a href="https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#vkCmdResetQueryPool" class="bare">https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#vkCmdResetQueryPool</a></p>
</div>
<div class="paragraph">
<p>This page is extracted from the Vulkan Specification.
Fixes and changes should be made to the Specification, not directly.</p>
</div>
<div style="page-break-after: always;"></div>
</div>
</div>
<div class="sect2">
<h3 id="_vkcmdresolveimage3">vkCmdResolveImage(3)</h3>
<div class="sect3">
<h4 id="_name_76">Name</h4>
<div class="paragraph">
<p>vkCmdResolveImage - Resolve regions of an image</p>
</div>
</div>
<div class="sect3">
<h4 id="_c_specification_76">C Specification</h4>
<div class="paragraph">
<p>To resolve a multisample image to a non-multisample image, call:</p>
</div>
<div id="vkCmdResolveImage" class="listingblock">
<div class="content">
<pre class="highlight"><code class="language-c++" data-lang="c++">void vkCmdResolveImage(
    VkCommandBuffer                             commandBuffer,
    VkImage                                     srcImage,
    VkImageLayout                               srcImageLayout,
    VkImage                                     dstImage,
    VkImageLayout                               dstImageLayout,
    uint32_t                                    regionCount,
    const VkImageResolve*                       pRegions);</code></pre>
</div>
</div>
</div>
<div class="sect3">
<h4 id="_parameters_76">Parameters</h4>
<div class="ulist">
<ul>
<li>
<p><code>commandBuffer</code> is the command buffer into which the command will be
recorded.</p>
</li>
<li>
<p><code>srcImage</code> is the source image.</p>
</li>
<li>
<p><code>srcImageLayout</code> is the layout of the source image subresources for
the resolve.</p>
</li>
<li>
<p><code>dstImage</code> is the destination image.</p>
</li>
<li>
<p><code>dstImageLayout</code> is the layout of the destination image subresources
for the resolve.</p>
</li>
<li>
<p><code>regionCount</code> is the number of regions to resolve.</p>
</li>
<li>
<p><code>pRegions</code> is a pointer to an array of <a href="#VkImageResolve">VkImageResolve</a>
structures specifying the regions to resolve.</p>
</li>
</ul>
</div>
</div>
<div class="sect3">
<h4 id="_description_76">Description</h4>
<div class="paragraph">
<p>During the resolve the samples corresponding to each pixel location in the
source are converted to a single sample before being written to the
destination.
If the source formats are floating-point or normalized types, the sample
values for each pixel are resolved in an implementation-dependent manner.
If the source formats are integer types, a single sample&#8217;s value is selected
for each pixel.</p>
</div>
<div class="paragraph">
<p><code>srcOffset</code> and <code>dstOffset</code> select the initial <code>x</code>, <code>y</code>, and
<code>z</code> offsets in texels of the sub-regions of the source and destination
image data.
<code>extent</code> is the size in texels of the source image to resolve in
<code>width</code>, <code>height</code> and <code>depth</code>.</p>
</div>
<div class="paragraph">
<p>Resolves are done layer by layer starting with <code>baseArrayLayer</code> member
of <code>srcSubresource</code> for the source and <code>dstSubresource</code> for the
destination.
<code>layerCount</code> layers are resolved to the destination image.</p>
</div>
<div class="sidebarblock">
<div class="content">
<div class="title">Valid Usage</div>
<div class="ulist">
<ul>
<li>
<p><a id="VUID-vkCmdResolveImage-pRegions-00253"></a>
The source region specified by each element of <code>pRegions</code> <strong class="purple">must</strong> be a
region that is contained within <code>srcImage</code></p>
</li>
<li>
<p><a id="VUID-vkCmdResolveImage-pRegions-00254"></a>
The destination region specified by each element of <code>pRegions</code> <strong class="purple">must</strong>
be a region that is contained within <code>dstImage</code></p>
</li>
<li>
<p><a id="VUID-vkCmdResolveImage-pRegions-00255"></a>
The union of all source regions, and the union of all destination
regions, specified by the elements of <code>pRegions</code>, <strong class="purple">must</strong> not overlap
in memory</p>
</li>
<li>
<p><a id="VUID-vkCmdResolveImage-srcImage-00256"></a>
If <code>srcImage</code> is non-sparse then it <strong class="purple">must</strong> be bound completely and
contiguously to a single <code>VkDeviceMemory</code> object</p>
</li>
<li>
<p><a id="VUID-vkCmdResolveImage-srcImage-00257"></a>
<code>srcImage</code> <strong class="purple">must</strong> have a sample count equal to any valid sample count
value other than <code>VK_SAMPLE_COUNT_1_BIT</code></p>
</li>
<li>
<p><a id="VUID-vkCmdResolveImage-dstImage-00258"></a>
If <code>dstImage</code> is non-sparse then it <strong class="purple">must</strong> be bound completely and
contiguously to a single <code>VkDeviceMemory</code> object</p>
</li>
<li>
<p><a id="VUID-vkCmdResolveImage-dstImage-00259"></a>
<code>dstImage</code> <strong class="purple">must</strong> have a sample count equal to
<code>VK_SAMPLE_COUNT_1_BIT</code></p>
</li>
<li>
<p><a id="VUID-vkCmdResolveImage-srcImageLayout-00260"></a>
<code>srcImageLayout</code> <strong class="purple">must</strong> specify the layout of the image subresources
of <code>srcImage</code> specified in <code>pRegions</code> at the time this command
is executed on a <code>VkDevice</code></p>
</li>
<li>
<p><a id="VUID-vkCmdResolveImage-srcImageLayout-01400"></a>
<code>srcImageLayout</code> <strong class="purple">must</strong> be <code>VK_IMAGE_LAYOUT_SHARED_PRESENT_KHR</code>,
<code>VK_IMAGE_LAYOUT_TRANSFER_SRC_OPTIMAL</code> or
<code>VK_IMAGE_LAYOUT_GENERAL</code></p>
</li>
<li>
<p><a id="VUID-vkCmdResolveImage-dstImageLayout-00262"></a>
<code>dstImageLayout</code> <strong class="purple">must</strong> specify the layout of the image subresources
of <code>dstImage</code> specified in <code>pRegions</code> at the time this command
is executed on a <code>VkDevice</code></p>
</li>
<li>
<p><a id="VUID-vkCmdResolveImage-dstImageLayout-01401"></a>
<code>dstImageLayout</code> <strong class="purple">must</strong> be <code>VK_IMAGE_LAYOUT_SHARED_PRESENT_KHR</code>,
<code>VK_IMAGE_LAYOUT_TRANSFER_DST_OPTIMAL</code> or
<code>VK_IMAGE_LAYOUT_GENERAL</code></p>
</li>
<li>
<p><a id="VUID-vkCmdResolveImage-dstImage-02003"></a>
The <a href="vkspec.html#resources-image-format-features">format features</a> of
<code>dstImage</code> <strong class="purple">must</strong> contain
<code>VK_FORMAT_FEATURE_COLOR_ATTACHMENT_BIT</code>.</p>
</li>
<li>
<p><a id="VUID-vkCmdResolveImage-srcImage-01386"></a>
<code>srcImage</code> and <code>dstImage</code> <strong class="purple">must</strong> have been created with the same
image format</p>
</li>
<li>
<p><a id="VUID-vkCmdResolveImage-commandBuffer-01837"></a>
If <code>commandBuffer</code> is an unprotected command buffer, then
<code>srcImage</code> <strong class="purple">must</strong> not be a protected image</p>
</li>
<li>
<p><a id="VUID-vkCmdResolveImage-commandBuffer-01838"></a>
If <code>commandBuffer</code> is an unprotected command buffer, then
<code>dstImage</code> <strong class="purple">must</strong> not be a protected image</p>
</li>
<li>
<p><a id="VUID-vkCmdResolveImage-commandBuffer-01839"></a>
If <code>commandBuffer</code> is a protected command buffer, then
<code>dstImage</code> <strong class="purple">must</strong> not be an unprotected image</p>
</li>
<li>
<p><a id="VUID-vkCmdResolveImage-srcSubresource-01709"></a>
The <code>srcSubresource.mipLevel</code> member of each element of
<code>pRegions</code> <strong class="purple">must</strong> be less than the <code>mipLevels</code> specified in
<a href="#VkImageCreateInfo">VkImageCreateInfo</a> when <code>srcImage</code> was created</p>
</li>
<li>
<p><a id="VUID-vkCmdResolveImage-dstSubresource-01710"></a>
The <code>dstSubresource.mipLevel</code> member of each element of
<code>pRegions</code> <strong class="purple">must</strong> be less than the <code>mipLevels</code> specified in
<a href="#VkImageCreateInfo">VkImageCreateInfo</a> when <code>dstImage</code> was created</p>
</li>
<li>
<p><a id="VUID-vkCmdResolveImage-srcSubresource-01711"></a>
The <span class="eq"><code>srcSubresource.baseArrayLayer</code> + 
<code>srcSubresource.layerCount</code></span> of each element of <code>pRegions</code> <strong class="purple">must</strong>
be less than or equal to the <code>arrayLayers</code> specified in
<a href="#VkImageCreateInfo">VkImageCreateInfo</a> when <code>srcImage</code> was created</p>
</li>
<li>
<p><a id="VUID-vkCmdResolveImage-dstSubresource-01712"></a>
The <span class="eq"><code>dstSubresource.baseArrayLayer</code> + 
<code>dstSubresource.layerCount</code></span> of each element of <code>pRegions</code> <strong class="purple">must</strong>
be less than or equal to the <code>arrayLayers</code> specified in
<a href="#VkImageCreateInfo">VkImageCreateInfo</a> when <code>dstImage</code> was created</p>
</li>
<li>
<p><a id="VUID-vkCmdResolveImage-dstImage-02546"></a>
<code>dstImage</code> and <code>srcImage</code> <strong class="purple">must</strong> not have been created with
<code>flags</code> containing <code>VK_IMAGE_CREATE_SUBSAMPLED_BIT_EXT</code></p>
</li>
</ul>
</div>
</div>
</div>
<div class="sidebarblock">
<div class="content">
<div class="title">Valid Usage (Implicit)</div>
<div class="ulist">
<ul>
<li>
<p><a id="VUID-vkCmdResolveImage-commandBuffer-parameter"></a> <code>commandBuffer</code> <strong class="purple">must</strong> be a valid <code>VkCommandBuffer</code> handle</p>
</li>
<li>
<p><a id="VUID-vkCmdResolveImage-srcImage-parameter"></a> <code>srcImage</code> <strong class="purple">must</strong> be a valid <code>VkImage</code> handle</p>
</li>
<li>
<p><a id="VUID-vkCmdResolveImage-srcImageLayout-parameter"></a> <code>srcImageLayout</code> <strong class="purple">must</strong> be a valid <a href="#VkImageLayout">VkImageLayout</a> value</p>
</li>
<li>
<p><a id="VUID-vkCmdResolveImage-dstImage-parameter"></a> <code>dstImage</code> <strong class="purple">must</strong> be a valid <code>VkImage</code> handle</p>
</li>
<li>
<p><a id="VUID-vkCmdResolveImage-dstImageLayout-parameter"></a> <code>dstImageLayout</code> <strong class="purple">must</strong> be a valid <a href="#VkImageLayout">VkImageLayout</a> value</p>
</li>
<li>
<p><a id="VUID-vkCmdResolveImage-pRegions-parameter"></a> <code>pRegions</code> <strong class="purple">must</strong> be a valid pointer to an array of <code>regionCount</code> valid <code>VkImageResolve</code> structures</p>
</li>
<li>
<p><a id="VUID-vkCmdResolveImage-commandBuffer-recording"></a> <code>commandBuffer</code> <strong class="purple">must</strong> be in the <a href="#commandbuffers-lifecycle">recording state</a></p>
</li>
<li>
<p><a id="VUID-vkCmdResolveImage-commandBuffer-cmdpool"></a> The <code>VkCommandPool</code> that <code>commandBuffer</code> was allocated from <strong class="purple">must</strong> support graphics operations</p>
</li>
<li>
<p><a id="VUID-vkCmdResolveImage-renderpass"></a> This command <strong class="purple">must</strong> only be called outside of a render pass instance</p>
</li>
<li>
<p><a id="VUID-vkCmdResolveImage-regionCount-arraylength"></a> <code>regionCount</code> <strong class="purple">must</strong> be greater than <code>0</code></p>
</li>
<li>
<p><a id="VUID-vkCmdResolveImage-commonparent"></a> Each of <code>commandBuffer</code>, <code>dstImage</code>, and <code>srcImage</code> <strong class="purple">must</strong> have been created, allocated, or retrieved from the same <code>VkDevice</code></p>
</li>
</ul>
</div>
</div>
</div>
<div class="sidebarblock">
<div class="content">
<div class="title">Host Synchronization</div>
<div class="ulist">
<ul>
<li>
<p>Host access to <code>commandBuffer</code> <strong class="purple">must</strong> be externally synchronized</p>
</li>
<li>
<p>Host access to the <code>VkCommandPool</code> that <code>commandBuffer</code> was allocated from <strong class="purple">must</strong> be externally synchronized</p>
</li>
</ul>
</div>
</div>
</div>
<div class="sidebarblock">
<div class="content">
<div class="title">Command Properties</div>
<table class="tableblock frame-all grid-all stretch">
<colgroup>
<col style="width: 25%;">
<col style="width: 25%;">
<col style="width: 25%;">
<col style="width: 25%;">
</colgroup>
<thead>
<tr>
<th class="tableblock halign-left valign-top"><a href="#VkCommandBufferLevel">Command Buffer Levels</a></th>
<th class="tableblock halign-left valign-top"><a href="#vkCmdBeginRenderPass">Render Pass Scope</a></th>
<th class="tableblock halign-left valign-top"><a href="#VkQueueFlagBits">Supported Queue Types</a></th>
<th class="tableblock halign-left valign-top"><a href="#synchronization-pipeline-stages-types">Pipeline Type</a></th>
</tr>
</thead>
<tbody>
<tr>
<td class="tableblock halign-left valign-top"><p class="tableblock">Primary<br>
Secondary</p></td>
<td class="tableblock halign-left valign-top"><p class="tableblock">Outside</p></td>
<td class="tableblock halign-left valign-top"><p class="tableblock">Graphics</p></td>
<td class="tableblock halign-left valign-top"><p class="tableblock">Transfer</p></td>
</tr>
</tbody>
</table>
</div>
</div>
</div>
<div class="sect3">
<h4 id="_see_also_76">See Also</h4>
<div class="paragraph">
<p><a href="#VkCommandBuffer">VkCommandBuffer</a>, <a href="#VkImage">VkImage</a>, <a href="#VkImageLayout">VkImageLayout</a>, <a href="#VkImageResolve">VkImageResolve</a></p>
</div>
</div>
<div class="sect3">
<h4 id="_document_notes_76">Document Notes</h4>
<div class="paragraph">
<p>For more information, see the Vulkan Specification at URL</p>
</div>
<div class="paragraph">
<p><a href="https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#vkCmdResolveImage" class="bare">https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#vkCmdResolveImage</a></p>
</div>
<div class="paragraph">
<p>This page is extracted from the Vulkan Specification.
Fixes and changes should be made to the Specification, not directly.</p>
</div>
<div style="page-break-after: always;"></div>
</div>
</div>
<div class="sect2">
<h3 id="_vkcmdsetblendconstants3">vkCmdSetBlendConstants(3)</h3>
<div class="sect3">
<h4 id="_name_77">Name</h4>
<div class="paragraph">
<p>vkCmdSetBlendConstants - Set the values of blend constants</p>
</div>
</div>
<div class="sect3">
<h4 id="_c_specification_77">C Specification</h4>
<div class="paragraph">
<p>Otherwise, to dynamically set and change the blend constant, call:</p>
</div>
<div id="vkCmdSetBlendConstants" class="listingblock">
<div class="content">
<pre class="highlight"><code class="language-c++" data-lang="c++">void vkCmdSetBlendConstants(
    VkCommandBuffer                             commandBuffer,
    const float                                 blendConstants[4]);</code></pre>
</div>
</div>
</div>
<div class="sect3">
<h4 id="_parameters_77">Parameters</h4>
<div class="ulist">
<ul>
<li>
<p><code>commandBuffer</code> is the command buffer into which the command will be
recorded.</p>
</li>
<li>
<p><code>blendConstants</code> is an array of four values specifying the R, G, B,
and A components of the blend constant color used in blending, depending
on the <a href="vkspec.html#framebuffer-blendfactors">blend factor</a>.</p>
</li>
</ul>
</div>
</div>
<div class="sect3">
<h4 id="_description_77">Description</h4>
<div class="sidebarblock">
<div class="content">
<div class="title">Valid Usage</div>
<div class="ulist">
<ul>
<li>
<p><a id="VUID-vkCmdSetBlendConstants-None-00612"></a>
The bound graphics pipeline <strong class="purple">must</strong> have been created with the
<code>VK_DYNAMIC_STATE_BLEND_CONSTANTS</code> dynamic state enabled</p>
</li>
</ul>
</div>
</div>
</div>
<div class="sidebarblock">
<div class="content">
<div class="title">Valid Usage (Implicit)</div>
<div class="ulist">
<ul>
<li>
<p><a id="VUID-vkCmdSetBlendConstants-commandBuffer-parameter"></a> <code>commandBuffer</code> <strong class="purple">must</strong> be a valid <code>VkCommandBuffer</code> handle</p>
</li>
<li>
<p><a id="VUID-vkCmdSetBlendConstants-commandBuffer-recording"></a> <code>commandBuffer</code> <strong class="purple">must</strong> be in the <a href="#commandbuffers-lifecycle">recording state</a></p>
</li>
<li>
<p><a id="VUID-vkCmdSetBlendConstants-commandBuffer-cmdpool"></a> The <code>VkCommandPool</code> that <code>commandBuffer</code> was allocated from <strong class="purple">must</strong> support graphics operations</p>
</li>
</ul>
</div>
</div>
</div>
<div class="sidebarblock">
<div class="content">
<div class="title">Host Synchronization</div>
<div class="ulist">
<ul>
<li>
<p>Host access to <code>commandBuffer</code> <strong class="purple">must</strong> be externally synchronized</p>
</li>
<li>
<p>Host access to the <code>VkCommandPool</code> that <code>commandBuffer</code> was allocated from <strong class="purple">must</strong> be externally synchronized</p>
</li>
</ul>
</div>
</div>
</div>
<div class="sidebarblock">
<div class="content">
<div class="title">Command Properties</div>
<table class="tableblock frame-all grid-all stretch">
<colgroup>
<col style="width: 25%;">
<col style="width: 25%;">
<col style="width: 25%;">
<col style="width: 25%;">
</colgroup>
<thead>
<tr>
<th class="tableblock halign-left valign-top"><a href="#VkCommandBufferLevel">Command Buffer Levels</a></th>
<th class="tableblock halign-left valign-top"><a href="#vkCmdBeginRenderPass">Render Pass Scope</a></th>
<th class="tableblock halign-left valign-top"><a href="#VkQueueFlagBits">Supported Queue Types</a></th>
<th class="tableblock halign-left valign-top"><a href="#synchronization-pipeline-stages-types">Pipeline Type</a></th>
</tr>
</thead>
<tbody>
<tr>
<td class="tableblock halign-left valign-top"><p class="tableblock">Primary<br>
Secondary</p></td>
<td class="tableblock halign-left valign-top"><p class="tableblock">Both</p></td>
<td class="tableblock halign-left valign-top"><p class="tableblock">Graphics</p></td>
<td class="tableblock halign-left valign-top"></td>
</tr>
</tbody>
</table>
</div>
</div>
</div>
<div class="sect3">
<h4 id="_see_also_77">See Also</h4>
<div class="paragraph">
<p><a href="#VkCommandBuffer">VkCommandBuffer</a></p>
</div>
</div>
<div class="sect3">
<h4 id="_document_notes_77">Document Notes</h4>
<div class="paragraph">
<p>For more information, see the Vulkan Specification at URL</p>
</div>
<div class="paragraph">
<p><a href="https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#vkCmdSetBlendConstants" class="bare">https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#vkCmdSetBlendConstants</a></p>
</div>
<div class="paragraph">
<p>This page is extracted from the Vulkan Specification.
Fixes and changes should be made to the Specification, not directly.</p>
</div>
<div style="page-break-after: always;"></div>
</div>
</div>
<div class="sect2">
<h3 id="_vkcmdsetcheckpointnv3">vkCmdSetCheckpointNV(3)</h3>
<div class="sect3">
<h4 id="_name_78">Name</h4>
<div class="paragraph">
<p>vkCmdSetCheckpointNV - insert diagnostic checkpoint in command stream</p>
</div>
</div>
<div class="sect3">
<h4 id="_c_specification_78">C Specification</h4>
<div class="paragraph">
<p>Device diagnostic checkpoints are inserted into the command stream by
calling <a href="#vkCmdSetCheckpointNV">vkCmdSetCheckpointNV</a>.</p>
</div>
<div id="vkCmdSetCheckpointNV" class="listingblock">
<div class="content">
<pre class="highlight"><code class="language-c++" data-lang="c++">void vkCmdSetCheckpointNV(
    VkCommandBuffer                             commandBuffer,
    const void*                                 pCheckpointMarker);</code></pre>
</div>
</div>
</div>
<div class="sect3">
<h4 id="_parameters_78">Parameters</h4>
<div class="ulist">
<ul>
<li>
<p><code>commandBuffer</code> is the command buffer that will receive the marker</p>
</li>
<li>
<p><code>pCheckpointMarker</code> is an opaque application-provided value that
will be associated with the checkpoint.</p>
</li>
</ul>
</div>
</div>
<div class="sect3">
<h4 id="_description_78">Description</h4>
<div class="sidebarblock">
<div class="content">
<div class="title">Valid Usage (Implicit)</div>
<div class="ulist">
<ul>
<li>
<p><a id="VUID-vkCmdSetCheckpointNV-commandBuffer-parameter"></a> <code>commandBuffer</code> <strong class="purple">must</strong> be a valid <code>VkCommandBuffer</code> handle</p>
</li>
<li>
<p><a id="VUID-vkCmdSetCheckpointNV-commandBuffer-recording"></a> <code>commandBuffer</code> <strong class="purple">must</strong> be in the <a href="#commandbuffers-lifecycle">recording state</a></p>
</li>
<li>
<p><a id="VUID-vkCmdSetCheckpointNV-commandBuffer-cmdpool"></a> The <code>VkCommandPool</code> that <code>commandBuffer</code> was allocated from <strong class="purple">must</strong> support graphics, compute, or transfer operations</p>
</li>
</ul>
</div>
</div>
</div>
<div class="sidebarblock">
<div class="content">
<div class="title">Host Synchronization</div>
<div class="ulist">
<ul>
<li>
<p>Host access to the <code>VkCommandPool</code> that <code>commandBuffer</code> was allocated from <strong class="purple">must</strong> be externally synchronized</p>
</li>
</ul>
</div>
</div>
</div>
<div class="sidebarblock">
<div class="content">
<div class="title">Command Properties</div>
<table class="tableblock frame-all grid-all stretch">
<colgroup>
<col style="width: 25%;">
<col style="width: 25%;">
<col style="width: 25%;">
<col style="width: 25%;">
</colgroup>
<thead>
<tr>
<th class="tableblock halign-left valign-top"><a href="#VkCommandBufferLevel">Command Buffer Levels</a></th>
<th class="tableblock halign-left valign-top"><a href="#vkCmdBeginRenderPass">Render Pass Scope</a></th>
<th class="tableblock halign-left valign-top"><a href="#VkQueueFlagBits">Supported Queue Types</a></th>
<th class="tableblock halign-left valign-top"><a href="#synchronization-pipeline-stages-types">Pipeline Type</a></th>
</tr>
</thead>
<tbody>
<tr>
<td class="tableblock halign-left valign-top"><p class="tableblock">Primary<br>
Secondary</p></td>
<td class="tableblock halign-left valign-top"><p class="tableblock">Both</p></td>
<td class="tableblock halign-left valign-top"><p class="tableblock">Graphics<br>
Compute<br>
Transfer</p></td>
<td class="tableblock halign-left valign-top"></td>
</tr>
</tbody>
</table>
</div>
</div>
</div>
<div class="sect3">
<h4 id="_see_also_78">See Also</h4>
<div class="paragraph">
<p><a href="#VkCommandBuffer">VkCommandBuffer</a></p>
</div>
</div>
<div class="sect3">
<h4 id="_document_notes_78">Document Notes</h4>
<div class="paragraph">
<p>For more information, see the Vulkan Specification at URL</p>
</div>
<div class="paragraph">
<p><a href="https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#vkCmdSetCheckpointNV" class="bare">https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#vkCmdSetCheckpointNV</a></p>
</div>
<div class="paragraph">
<p>This page is extracted from the Vulkan Specification.
Fixes and changes should be made to the Specification, not directly.</p>
</div>
<div style="page-break-after: always;"></div>
</div>
</div>
<div class="sect2">
<h3 id="_vkcmdsetcoarsesampleordernv3">vkCmdSetCoarseSampleOrderNV(3)</h3>
<div class="sect3">
<h4 id="_name_79">Name</h4>
<div class="paragraph">
<p>vkCmdSetCoarseSampleOrderNV - Set sample order for coarse fragments on a command buffer</p>
</div>
</div>
<div class="sect3">
<h4 id="_c_specification_79">C Specification</h4>
<div class="paragraph">
<p>If a pipeline state object is created with
<code>VK_DYNAMIC_STATE_VIEWPORT_COARSE_SAMPLE_ORDER_NV</code> enabled, the order of
coverage samples in fragments larger than one pixel is set by the command:</p>
</div>
<div id="vkCmdSetCoarseSampleOrderNV" class="listingblock">
<div class="content">
<pre class="highlight"><code class="language-c++" data-lang="c++">void vkCmdSetCoarseSampleOrderNV(
    VkCommandBuffer                             commandBuffer,
    VkCoarseSampleOrderTypeNV                   sampleOrderType,
    uint32_t                                    customSampleOrderCount,
    const VkCoarseSampleOrderCustomNV*          pCustomSampleOrders);</code></pre>
</div>
</div>
</div>
<div class="sect3">
<h4 id="_parameters_79">Parameters</h4>
<div class="ulist">
<ul>
<li>
<p><code>commandBuffer</code> is the command buffer into which the command will be
recorded.</p>
</li>
<li>
<p><code>sampleOrderType</code> specifies the mechanism used to order coverage
samples in fragments larger than one pixel.</p>
</li>
<li>
<p><code>customSampleOrderCount</code> specifies the number of custom sample
orderings to use when ordering coverage samples.</p>
</li>
<li>
<p><code>pCustomSampleOrders</code> is a pointer to an array of
<a href="#VkCoarseSampleOrderCustomNV">VkCoarseSampleOrderCustomNV</a> structures, each of which specifies
the coverage sample order for a single combination of fragment area and
coverage sample count.</p>
</li>
</ul>
</div>
</div>
<div class="sect3">
<h4 id="_description_79">Description</h4>
<div class="paragraph">
<p>If <code>sampleOrderType</code> is <code>VK_COARSE_SAMPLE_ORDER_TYPE_CUSTOM_NV</code>, the
coverage sample order used for any combination of fragment area and coverage
sample count not enumerated in <code>pCustomSampleOrders</code> will be identical
to that used for <code>VK_COARSE_SAMPLE_ORDER_TYPE_DEFAULT_NV</code>.</p>
</div>
<div class="sidebarblock">
<div class="content">
<div class="title">Valid Usage</div>
<div class="ulist">
<ul>
<li>
<p><a id="VUID-vkCmdSetCoarseSampleOrderNV-sampleOrderType-02081"></a>
If <code>sampleOrderType</code> is not
<code>VK_COARSE_SAMPLE_ORDER_TYPE_CUSTOM_NV</code>,
<code>customSamplerOrderCount</code> <strong class="purple">must</strong> be <code>0</code></p>
</li>
<li>
<p><a id="VUID-vkCmdSetCoarseSampleOrderNV-pCustomSampleOrders-02235"></a>
The array <code>pCustomSampleOrders</code> <strong class="purple">must</strong> not contain two structures
with matching values for both the <code>shadingRate</code> and
<code>sampleCount</code> members.</p>
</li>
</ul>
</div>
</div>
</div>
<div class="sidebarblock">
<div class="content">
<div class="title">Valid Usage (Implicit)</div>
<div class="ulist">
<ul>
<li>
<p><a id="VUID-vkCmdSetCoarseSampleOrderNV-commandBuffer-parameter"></a> <code>commandBuffer</code> <strong class="purple">must</strong> be a valid <code>VkCommandBuffer</code> handle</p>
</li>
<li>
<p><a id="VUID-vkCmdSetCoarseSampleOrderNV-sampleOrderType-parameter"></a> <code>sampleOrderType</code> <strong class="purple">must</strong> be a valid <a href="#VkCoarseSampleOrderTypeNV">VkCoarseSampleOrderTypeNV</a> value</p>
</li>
<li>
<p><a id="VUID-vkCmdSetCoarseSampleOrderNV-pCustomSampleOrders-parameter"></a> If <code>customSampleOrderCount</code> is not <code>0</code>, <code>pCustomSampleOrders</code> <strong class="purple">must</strong> be a valid pointer to an array of <code>customSampleOrderCount</code> valid <code>VkCoarseSampleOrderCustomNV</code> structures</p>
</li>
<li>
<p><a id="VUID-vkCmdSetCoarseSampleOrderNV-commandBuffer-recording"></a> <code>commandBuffer</code> <strong class="purple">must</strong> be in the <a href="#commandbuffers-lifecycle">recording state</a></p>
</li>
<li>
<p><a id="VUID-vkCmdSetCoarseSampleOrderNV-commandBuffer-cmdpool"></a> The <code>VkCommandPool</code> that <code>commandBuffer</code> was allocated from <strong class="purple">must</strong> support graphics operations</p>
</li>
</ul>
</div>
</div>
</div>
<div class="sidebarblock">
<div class="content">
<div class="title">Host Synchronization</div>
<div class="ulist">
<ul>
<li>
<p>Host access to <code>commandBuffer</code> <strong class="purple">must</strong> be externally synchronized</p>
</li>
<li>
<p>Host access to the <code>VkCommandPool</code> that <code>commandBuffer</code> was allocated from <strong class="purple">must</strong> be externally synchronized</p>
</li>
</ul>
</div>
</div>
</div>
<div class="sidebarblock">
<div class="content">
<div class="title">Command Properties</div>
<table class="tableblock frame-all grid-all stretch">
<colgroup>
<col style="width: 25%;">
<col style="width: 25%;">
<col style="width: 25%;">
<col style="width: 25%;">
</colgroup>
<thead>
<tr>
<th class="tableblock halign-left valign-top"><a href="#VkCommandBufferLevel">Command Buffer Levels</a></th>
<th class="tableblock halign-left valign-top"><a href="#vkCmdBeginRenderPass">Render Pass Scope</a></th>
<th class="tableblock halign-left valign-top"><a href="#VkQueueFlagBits">Supported Queue Types</a></th>
<th class="tableblock halign-left valign-top"><a href="#synchronization-pipeline-stages-types">Pipeline Type</a></th>
</tr>
</thead>
<tbody>
<tr>
<td class="tableblock halign-left valign-top"><p class="tableblock">Primary<br>
Secondary</p></td>
<td class="tableblock halign-left valign-top"><p class="tableblock">Both</p></td>
<td class="tableblock halign-left valign-top"><p class="tableblock">Graphics</p></td>
<td class="tableblock halign-left valign-top"></td>
</tr>
</tbody>
</table>
</div>
</div>
</div>
<div class="sect3">
<h4 id="_see_also_79">See Also</h4>
<div class="paragraph">
<p><a href="#VkCoarseSampleOrderCustomNV">VkCoarseSampleOrderCustomNV</a>, <a href="#VkCoarseSampleOrderTypeNV">VkCoarseSampleOrderTypeNV</a>, <a href="#VkCommandBuffer">VkCommandBuffer</a></p>
</div>
</div>
<div class="sect3">
<h4 id="_document_notes_79">Document Notes</h4>
<div class="paragraph">
<p>For more information, see the Vulkan Specification at URL</p>
</div>
<div class="paragraph">
<p><a href="https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#vkCmdSetCoarseSampleOrderNV" class="bare">https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#vkCmdSetCoarseSampleOrderNV</a></p>
</div>
<div class="paragraph">
<p>This page is extracted from the Vulkan Specification.
Fixes and changes should be made to the Specification, not directly.</p>
</div>
<div style="page-break-after: always;"></div>
</div>
</div>
<div class="sect2">
<h3 id="_vkcmdsetdepthbias3">vkCmdSetDepthBias(3)</h3>
<div class="sect3">
<h4 id="_name_80">Name</h4>
<div class="paragraph">
<p>vkCmdSetDepthBias - Set the depth bias dynamic state</p>
</div>
</div>
<div class="sect3">
<h4 id="_c_specification_80">C Specification</h4>
<div class="paragraph">
<p>The depth values of all fragments generated by the rasterization of a
polygon <strong class="purple">can</strong> be offset by a single value that is computed for that polygon.
This behavior is controlled by the <code>depthBiasEnable</code>,
<code>depthBiasConstantFactor</code>, <code>depthBiasClamp</code>, and
<code>depthBiasSlopeFactor</code> members of
<a href="#VkPipelineRasterizationStateCreateInfo">VkPipelineRasterizationStateCreateInfo</a>, or by the corresponding
parameters to the <code>vkCmdSetDepthBias</code> command if depth bias state is
dynamic.</p>
</div>
<div id="vkCmdSetDepthBias" class="listingblock">
<div class="content">
<pre class="highlight"><code class="language-c++" data-lang="c++">void vkCmdSetDepthBias(
    VkCommandBuffer                             commandBuffer,
    float                                       depthBiasConstantFactor,
    float                                       depthBiasClamp,
    float                                       depthBiasSlopeFactor);</code></pre>
</div>
</div>
</div>
<div class="sect3">
<h4 id="_parameters_80">Parameters</h4>
<div class="ulist">
<ul>
<li>
<p><code>commandBuffer</code> is the command buffer into which the command will be
recorded.</p>
</li>
<li>
<p><code>depthBiasConstantFactor</code> is a scalar factor controlling the
constant depth value added to each fragment.</p>
</li>
<li>
<p><code>depthBiasClamp</code> is the maximum (or minimum) depth bias of a
fragment.</p>
</li>
<li>
<p><code>depthBiasSlopeFactor</code> is a scalar factor applied to a fragment&#8217;s
slope in depth bias calculations.</p>
</li>
</ul>
</div>
</div>
<div class="sect3">
<h4 id="_description_80">Description</h4>
<div class="paragraph">
<p>If <code>depthBiasEnable</code> is <code>VK_FALSE</code>, no depth bias is applied and the
fragment&#8217;s depth values are unchanged.</p>
</div>
<div class="paragraph">
<p><code>depthBiasSlopeFactor</code> scales the maximum depth slope of the polygon,
and <code>depthBiasConstantFactor</code> scales an implementation-dependent
constant that relates to the usable resolution of the depth buffer.
The resulting values are summed to produce the depth bias value which is
then clamped to a minimum or maximum value specified by
<code>depthBiasClamp</code>.
<code>depthBiasSlopeFactor</code>, <code>depthBiasConstantFactor</code>, and
<code>depthBiasClamp</code> <strong class="purple">can</strong> each be positive, negative, or zero.</p>
</div>
<div class="paragraph">
<p>The maximum depth slope <span class="eq">m</span> of a triangle is</p>
</div>
<div class="stemblock">
<div class="content">
\[m = \sqrt{ \left({{\partial z_f} \over {\partial x_f}}\right)^2
        +  \left({{\partial z_f} \over {\partial y_f}}\right)^2}\]
</div>
</div>
<div class="paragraph">
<p>where <span class="eq">(x<sub>f</sub>, y<sub>f</sub>, z<sub>f</sub>)</span> is a point on the triangle.
<span class="eq">m</span> <strong class="purple">may</strong> be approximated as</p>
</div>
<div class="stemblock">
<div class="content">
\[m = \max\left( \left| { {\partial z_f} \over {\partial x_f} } \right|,
               \left| { {\partial z_f} \over {\partial y_f} } \right|
       \right).\]
</div>
</div>
<div class="paragraph">
<p>The minimum resolvable difference <span class="eq">r</span> is an implementation-dependent
parameter that depends on the depth buffer representation.
It is the smallest difference in framebuffer coordinate <span class="eq">z</span> values that
is guaranteed to remain distinct throughout polygon rasterization and in the
depth buffer.
All pairs of fragments generated by the rasterization of two polygons with
otherwise identical vertices, but <span class="eq"><code>z</code><sub>f</sub></span> values that differ by
<span class="eq">r</span>, will have distinct depth values.</p>
</div>
<div class="paragraph">
<p>For fixed-point depth buffer representations, <span class="eq">r</span> is constant throughout
the range of the entire depth buffer.
For floating-point depth buffers, there is no single minimum resolvable
difference.
In this case, the minimum resolvable difference for a given polygon is
dependent on the maximum exponent, <span class="eq">e</span>, in the range of <span class="eq">z</span> values
spanned by the primitive.
If <span class="eq">n</span> is the number of bits in the floating-point mantissa, the minimum
resolvable difference, <span class="eq">r</span>, for the given primitive is defined as</p>
</div>
<div class="literalblock">
<div class="content">
<pre>:: [eq]#r = 2^e-n^#</pre>
</div>
</div>
<div class="paragraph">
<p>If a triangle is rasterized using the
<code>VK_POLYGON_MODE_FILL_RECTANGLE_NV</code> polygon mode, then this minimum
resolvable difference <strong class="purple">may</strong> not be resolvable for samples outside of the
triangle, where the depth is extrapolated.</p>
</div>
<div class="paragraph">
<p>If no depth buffer is present, <span class="eq">r</span> is undefined.</p>
</div>
<div class="paragraph">
<p>The bias value <span class="eq">o</span> for a polygon is</p>
</div>
<div class="stemblock">
<div class="content">
\[\begin{aligned}
o &amp;= \mathrm{dbclamp}( m \times \mathtt{depthBiasSlopeFactor} + r \times \mathtt{depthBiasConstantFactor} ) \\
\text{where} &amp;\quad \mathrm{dbclamp}(x) =
\begin{cases}
    x                                 &amp; \mathtt{depthBiasClamp} = 0 \ \text{or}\ \texttt{NaN} \\
    \min(x, \mathtt{depthBiasClamp})  &amp; \mathtt{depthBiasClamp} &gt; 0 \\
    \max(x, \mathtt{depthBiasClamp})  &amp; \mathtt{depthBiasClamp} &lt; 0 \\
\end{cases}
\end{aligned}\]
</div>
</div>
<div class="paragraph">
<p><span class="eq">m</span> is computed as described above.
If the depth buffer uses a fixed-point representation, <span class="eq">m</span> is a function
of depth values in the range <span class="eq">[0,1]</span>, and <span class="eq">o</span> is applied to depth
values in the same range.</p>
</div>
<div class="paragraph">
<p>For fixed-point depth buffers, fragment depth values are always limited to
the range <span class="eq">[0,1]</span> by clamping after depth bias addition is performed.
Unless the <code><a href="vkspec.html#VK_EXT_depth_range_unrestricted" class="bare">html/vkspec.html#VK_EXT_depth_range_unrestricted</a></code> extension is enabled,
fragment depth values are clamped even when the depth buffer uses a
floating-point representation.</p>
</div>
<div class="sidebarblock">
<div class="content">
<div class="title">Valid Usage</div>
<div class="ulist">
<ul>
<li>
<p><a id="VUID-vkCmdSetDepthBias-None-00789"></a>
The bound graphics pipeline <strong class="purple">must</strong> have been created with the
<code>VK_DYNAMIC_STATE_DEPTH_BIAS</code> dynamic state enabled</p>
</li>
<li>
<p><a id="VUID-vkCmdSetDepthBias-depthBiasClamp-00790"></a>
If the <a href="vkspec.html#features-depthBiasClamp">depth bias clamping</a> feature is not
enabled, <code>depthBiasClamp</code> <strong class="purple">must</strong> be <code>0.0</code></p>
</li>
</ul>
</div>
</div>
</div>
<div class="sidebarblock">
<div class="content">
<div class="title">Valid Usage (Implicit)</div>
<div class="ulist">
<ul>
<li>
<p><a id="VUID-vkCmdSetDepthBias-commandBuffer-parameter"></a> <code>commandBuffer</code> <strong class="purple">must</strong> be a valid <code>VkCommandBuffer</code> handle</p>
</li>
<li>
<p><a id="VUID-vkCmdSetDepthBias-commandBuffer-recording"></a> <code>commandBuffer</code> <strong class="purple">must</strong> be in the <a href="#commandbuffers-lifecycle">recording state</a></p>
</li>
<li>
<p><a id="VUID-vkCmdSetDepthBias-commandBuffer-cmdpool"></a> The <code>VkCommandPool</code> that <code>commandBuffer</code> was allocated from <strong class="purple">must</strong> support graphics operations</p>
</li>
</ul>
</div>
</div>
</div>
<div class="sidebarblock">
<div class="content">
<div class="title">Host Synchronization</div>
<div class="ulist">
<ul>
<li>
<p>Host access to <code>commandBuffer</code> <strong class="purple">must</strong> be externally synchronized</p>
</li>
<li>
<p>Host access to the <code>VkCommandPool</code> that <code>commandBuffer</code> was allocated from <strong class="purple">must</strong> be externally synchronized</p>
</li>
</ul>
</div>
</div>
</div>
<div class="sidebarblock">
<div class="content">
<div class="title">Command Properties</div>
<table class="tableblock frame-all grid-all stretch">
<colgroup>
<col style="width: 25%;">
<col style="width: 25%;">
<col style="width: 25%;">
<col style="width: 25%;">
</colgroup>
<thead>
<tr>
<th class="tableblock halign-left valign-top"><a href="#VkCommandBufferLevel">Command Buffer Levels</a></th>
<th class="tableblock halign-left valign-top"><a href="#vkCmdBeginRenderPass">Render Pass Scope</a></th>
<th class="tableblock halign-left valign-top"><a href="#VkQueueFlagBits">Supported Queue Types</a></th>
<th class="tableblock halign-left valign-top"><a href="#synchronization-pipeline-stages-types">Pipeline Type</a></th>
</tr>
</thead>
<tbody>
<tr>
<td class="tableblock halign-left valign-top"><p class="tableblock">Primary<br>
Secondary</p></td>
<td class="tableblock halign-left valign-top"><p class="tableblock">Both</p></td>
<td class="tableblock halign-left valign-top"><p class="tableblock">Graphics</p></td>
<td class="tableblock halign-left valign-top"></td>
</tr>
</tbody>
</table>
</div>
</div>
</div>
<div class="sect3">
<h4 id="_see_also_80">See Also</h4>
<div class="paragraph">
<p><a href="#VkCommandBuffer">VkCommandBuffer</a></p>
</div>
</div>
<div class="sect3">
<h4 id="_document_notes_80">Document Notes</h4>
<div class="paragraph">
<p>For more information, see the Vulkan Specification at URL</p>
</div>
<div class="paragraph">
<p><a href="https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#vkCmdSetDepthBias" class="bare">https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#vkCmdSetDepthBias</a></p>
</div>
<div class="paragraph">
<p>This page is extracted from the Vulkan Specification.
Fixes and changes should be made to the Specification, not directly.</p>
</div>
<div style="page-break-after: always;"></div>
</div>
</div>
<div class="sect2">
<h3 id="_vkcmdsetdepthbounds3">vkCmdSetDepthBounds(3)</h3>
<div class="sect3">
<h4 id="_name_81">Name</h4>
<div class="paragraph">
<p>vkCmdSetDepthBounds - Set the depth bounds test values for a command buffer</p>
</div>
</div>
<div class="sect3">
<h4 id="_c_specification_81">C Specification</h4>
<div class="paragraph">
<p>The depth bounds test conditionally disables coverage of a sample based on
the outcome of a comparison between the value <span class="eq">z<sub>a</sub></span> in the depth
attachment at location <span class="eq">(x<sub>f</sub>,y<sub>f</sub>)</span> (for the appropriate sample) and a
range of values.
The test is enabled or disabled by the <code>depthBoundsTestEnable</code> member of
<a href="#VkPipelineDepthStencilStateCreateInfo">VkPipelineDepthStencilStateCreateInfo</a>: If the pipeline state object is
created without the <code>VK_DYNAMIC_STATE_DEPTH_BOUNDS</code> dynamic state
enabled then the range of values used in the depth bounds test are defined
by the <code>minDepthBounds</code> and <code>maxDepthBounds</code> members of the
<a href="#VkPipelineDepthStencilStateCreateInfo">VkPipelineDepthStencilStateCreateInfo</a> structure.
Otherwise, to dynamically set the depth bounds range values call:</p>
</div>
<div id="vkCmdSetDepthBounds" class="listingblock">
<div class="content">
<pre class="highlight"><code class="language-c++" data-lang="c++">void vkCmdSetDepthBounds(
    VkCommandBuffer                             commandBuffer,
    float                                       minDepthBounds,
    float                                       maxDepthBounds);</code></pre>
</div>
</div>
</div>
<div class="sect3">
<h4 id="_parameters_81">Parameters</h4>
<div class="ulist">
<ul>
<li>
<p><code>commandBuffer</code> is the command buffer into which the command will be
recorded.</p>
</li>
<li>
<p><code>minDepthBounds</code> is the lower bound of the range of depth values
used in the depth bounds test.</p>
</li>
<li>
<p><code>maxDepthBounds</code> is the upper bound of the range.</p>
</li>
</ul>
</div>
</div>
<div class="sect3">
<h4 id="_description_81">Description</h4>
<div class="sidebarblock">
<div class="content">
<div class="title">Valid Usage</div>
<div class="ulist">
<ul>
<li>
<p><a id="VUID-vkCmdSetDepthBounds-None-00599"></a>
The bound graphics pipeline <strong class="purple">must</strong> have been created with the
<code>VK_DYNAMIC_STATE_DEPTH_BOUNDS</code> dynamic state enabled</p>
</li>
<li>
<p><a id="VUID-vkCmdSetDepthBounds-minDepthBounds-00600"></a>
Unless the <code><a href="vkspec.html#VK_EXT_depth_range_unrestricted" class="bare">html/vkspec.html#VK_EXT_depth_range_unrestricted</a></code> extension is enabled
<code>minDepthBounds</code> <strong class="purple">must</strong> be between <code>0.0</code> and <code>1.0</code>, inclusive</p>
</li>
<li>
<p><a id="VUID-vkCmdSetDepthBounds-maxDepthBounds-00601"></a>
Unless the <code><a href="vkspec.html#VK_EXT_depth_range_unrestricted" class="bare">html/vkspec.html#VK_EXT_depth_range_unrestricted</a></code> extension is enabled
<code>maxDepthBounds</code> <strong class="purple">must</strong> be between <code>0.0</code> and <code>1.0</code>, inclusive</p>
</li>
</ul>
</div>
</div>
</div>
<div class="sidebarblock">
<div class="content">
<div class="title">Valid Usage (Implicit)</div>
<div class="ulist">
<ul>
<li>
<p><a id="VUID-vkCmdSetDepthBounds-commandBuffer-parameter"></a> <code>commandBuffer</code> <strong class="purple">must</strong> be a valid <code>VkCommandBuffer</code> handle</p>
</li>
<li>
<p><a id="VUID-vkCmdSetDepthBounds-commandBuffer-recording"></a> <code>commandBuffer</code> <strong class="purple">must</strong> be in the <a href="#commandbuffers-lifecycle">recording state</a></p>
</li>
<li>
<p><a id="VUID-vkCmdSetDepthBounds-commandBuffer-cmdpool"></a> The <code>VkCommandPool</code> that <code>commandBuffer</code> was allocated from <strong class="purple">must</strong> support graphics operations</p>
</li>
</ul>
</div>
</div>
</div>
<div class="sidebarblock">
<div class="content">
<div class="title">Host Synchronization</div>
<div class="ulist">
<ul>
<li>
<p>Host access to <code>commandBuffer</code> <strong class="purple">must</strong> be externally synchronized</p>
</li>
<li>
<p>Host access to the <code>VkCommandPool</code> that <code>commandBuffer</code> was allocated from <strong class="purple">must</strong> be externally synchronized</p>
</li>
</ul>
</div>
</div>
</div>
<div class="sidebarblock">
<div class="content">
<div class="title">Command Properties</div>
<table class="tableblock frame-all grid-all stretch">
<colgroup>
<col style="width: 25%;">
<col style="width: 25%;">
<col style="width: 25%;">
<col style="width: 25%;">
</colgroup>
<thead>
<tr>
<th class="tableblock halign-left valign-top"><a href="#VkCommandBufferLevel">Command Buffer Levels</a></th>
<th class="tableblock halign-left valign-top"><a href="#vkCmdBeginRenderPass">Render Pass Scope</a></th>
<th class="tableblock halign-left valign-top"><a href="#VkQueueFlagBits">Supported Queue Types</a></th>
<th class="tableblock halign-left valign-top"><a href="#synchronization-pipeline-stages-types">Pipeline Type</a></th>
</tr>
</thead>
<tbody>
<tr>
<td class="tableblock halign-left valign-top"><p class="tableblock">Primary<br>
Secondary</p></td>
<td class="tableblock halign-left valign-top"><p class="tableblock">Both</p></td>
<td class="tableblock halign-left valign-top"><p class="tableblock">Graphics</p></td>
<td class="tableblock halign-left valign-top"></td>
</tr>
</tbody>
</table>
</div>
</div>
</div>
<div class="sect3">
<h4 id="_see_also_81">See Also</h4>
<div class="paragraph">
<p><a href="#VkCommandBuffer">VkCommandBuffer</a></p>
</div>
</div>
<div class="sect3">
<h4 id="_document_notes_81">Document Notes</h4>
<div class="paragraph">
<p>For more information, see the Vulkan Specification at URL</p>
</div>
<div class="paragraph">
<p><a href="https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#vkCmdSetDepthBounds" class="bare">https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#vkCmdSetDepthBounds</a></p>
</div>
<div class="paragraph">
<p>This page is extracted from the Vulkan Specification.
Fixes and changes should be made to the Specification, not directly.</p>
</div>
<div style="page-break-after: always;"></div>
</div>
</div>
<div class="sect2">
<h3 id="_vkcmdsetdevicemask3">vkCmdSetDeviceMask(3)</h3>
<div class="sect3">
<h4 id="_name_82">Name</h4>
<div class="paragraph">
<p>vkCmdSetDeviceMask - Modify device mask of a command buffer</p>
</div>
</div>
<div class="sect3">
<h4 id="_c_specification_82">C Specification</h4>
<div class="paragraph">
<p>To update the current device mask of a command buffer, call:</p>
</div>
<div id="vkCmdSetDeviceMask" class="listingblock">
<div class="content">
<pre class="highlight"><code class="language-c++" data-lang="c++">void vkCmdSetDeviceMask(
    VkCommandBuffer                             commandBuffer,
    uint32_t                                    deviceMask);</code></pre>
</div>
</div>
<div class="paragraph">
<p>or the equivalent command</p>
</div>
<div id="vkCmdSetDeviceMaskKHR" class="listingblock">
<div class="content">
<pre class="highlight"><code class="language-c++" data-lang="c++">void vkCmdSetDeviceMaskKHR(
    VkCommandBuffer                             commandBuffer,
    uint32_t                                    deviceMask);</code></pre>
</div>
</div>
</div>
<div class="sect3">
<h4 id="_parameters_82">Parameters</h4>
<div class="ulist">
<ul>
<li>
<p><code>commandBuffer</code> is command buffer whose current device mask is
modified.</p>
</li>
<li>
<p><code>deviceMask</code> is the new value of the current device mask.</p>
</li>
</ul>
</div>
</div>
<div class="sect3">
<h4 id="_description_82">Description</h4>
<div class="paragraph">
<p><code>deviceMask</code> is used to filter out subsequent commands from executing on
all physical devices whose bit indices are not set in the mask, except
commands beginning a render pass instance, commands transitioning to the
next subpass in the render pass instance, and commands ending a render pass
instance, which always execute on the set of physical devices whose bit
indices are included in the <code>deviceMask</code> member of the instance of the
<a href="#VkDeviceGroupRenderPassBeginInfoKHR">VkDeviceGroupRenderPassBeginInfoKHR</a> structure passed to the command
beginning the corresponding render pass instance.</p>
</div>
<div class="sidebarblock">
<div class="content">
<div class="title">Valid Usage</div>
<div class="ulist">
<ul>
<li>
<p><a id="VUID-vkCmdSetDeviceMask-deviceMask-00108"></a>
<code>deviceMask</code> <strong class="purple">must</strong> be a valid device mask value</p>
</li>
<li>
<p><a id="VUID-vkCmdSetDeviceMask-deviceMask-00109"></a>
<code>deviceMask</code> <strong class="purple">must</strong> not be zero</p>
</li>
<li>
<p><a id="VUID-vkCmdSetDeviceMask-deviceMask-00110"></a>
<code>deviceMask</code> <strong class="purple">must</strong> not include any set bits that were not in the
<a href="#VkDeviceGroupCommandBufferBeginInfo">VkDeviceGroupCommandBufferBeginInfo</a>::<code>deviceMask</code> value when
the command buffer began recording.</p>
</li>
<li>
<p><a id="VUID-vkCmdSetDeviceMask-deviceMask-00111"></a>
If <code>vkCmdSetDeviceMask</code> is called inside a render pass instance,
<code>deviceMask</code> <strong class="purple">must</strong> not include any set bits that were not in the
<a href="#VkDeviceGroupRenderPassBeginInfo">VkDeviceGroupRenderPassBeginInfo</a>::<code>deviceMask</code> value when the
render pass instance began recording.</p>
</li>
</ul>
</div>
</div>
</div>
<div class="sidebarblock">
<div class="content">
<div class="title">Valid Usage (Implicit)</div>
<div class="ulist">
<ul>
<li>
<p><a id="VUID-vkCmdSetDeviceMask-commandBuffer-parameter"></a> <code>commandBuffer</code> <strong class="purple">must</strong> be a valid <code>VkCommandBuffer</code> handle</p>
</li>
<li>
<p><a id="VUID-vkCmdSetDeviceMask-commandBuffer-recording"></a> <code>commandBuffer</code> <strong class="purple">must</strong> be in the <a href="#commandbuffers-lifecycle">recording state</a></p>
</li>
<li>
<p><a id="VUID-vkCmdSetDeviceMask-commandBuffer-cmdpool"></a> The <code>VkCommandPool</code> that <code>commandBuffer</code> was allocated from <strong class="purple">must</strong> support graphics, compute, or transfer operations</p>
</li>
</ul>
</div>
</div>
</div>
<div class="sidebarblock">
<div class="content">
<div class="title">Host Synchronization</div>
<div class="ulist">
<ul>
<li>
<p>Host access to <code>commandBuffer</code> <strong class="purple">must</strong> be externally synchronized</p>
</li>
<li>
<p>Host access to the <code>VkCommandPool</code> that <code>commandBuffer</code> was allocated from <strong class="purple">must</strong> be externally synchronized</p>
</li>
</ul>
</div>
</div>
</div>
<div class="sidebarblock">
<div class="content">
<div class="title">Command Properties</div>
<table class="tableblock frame-all grid-all stretch">
<colgroup>
<col style="width: 25%;">
<col style="width: 25%;">
<col style="width: 25%;">
<col style="width: 25%;">
</colgroup>
<thead>
<tr>
<th class="tableblock halign-left valign-top"><a href="#VkCommandBufferLevel">Command Buffer Levels</a></th>
<th class="tableblock halign-left valign-top"><a href="#vkCmdBeginRenderPass">Render Pass Scope</a></th>
<th class="tableblock halign-left valign-top"><a href="#VkQueueFlagBits">Supported Queue Types</a></th>
<th class="tableblock halign-left valign-top"><a href="#synchronization-pipeline-stages-types">Pipeline Type</a></th>
</tr>
</thead>
<tbody>
<tr>
<td class="tableblock halign-left valign-top"><p class="tableblock">Primary<br>
Secondary</p></td>
<td class="tableblock halign-left valign-top"><p class="tableblock">Both</p></td>
<td class="tableblock halign-left valign-top"><p class="tableblock">Graphics<br>
Compute<br>
Transfer</p></td>
<td class="tableblock halign-left valign-top"></td>
</tr>
</tbody>
</table>
</div>
</div>
</div>
<div class="sect3">
<h4 id="_see_also_82">See Also</h4>
<div class="paragraph">
<p><a href="#VkCommandBuffer">VkCommandBuffer</a></p>
</div>
</div>
<div class="sect3">
<h4 id="_document_notes_82">Document Notes</h4>
<div class="paragraph">
<p>For more information, see the Vulkan Specification at URL</p>
</div>
<div class="paragraph">
<p><a href="https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#vkCmdSetDeviceMask" class="bare">https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#vkCmdSetDeviceMask</a></p>
</div>
<div class="paragraph">
<p>This page is extracted from the Vulkan Specification.
Fixes and changes should be made to the Specification, not directly.</p>
</div>
<div style="page-break-after: always;"></div>
</div>
</div>
<div class="sect2">
<h3 id="_vkcmdsetdiscardrectangleext3">vkCmdSetDiscardRectangleEXT(3)</h3>
<div class="sect3">
<h4 id="_name_83">Name</h4>
<div class="paragraph">
<p>vkCmdSetDiscardRectangleEXT - Set discard rectangles dynamically</p>
</div>
</div>
<div class="sect3">
<h4 id="_c_specification_83">C Specification</h4>
<div class="paragraph">
<p>If the pipeline state object was created with the
<code>VK_DYNAMIC_STATE_DISCARD_RECTANGLE_EXT</code> dynamic state enabled, the
discard rectangles are dynamically set and changed with the command:</p>
</div>
<div id="vkCmdSetDiscardRectangleEXT" class="listingblock">
<div class="content">
<pre class="highlight"><code class="language-c++" data-lang="c++">void vkCmdSetDiscardRectangleEXT(
    VkCommandBuffer                             commandBuffer,
    uint32_t                                    firstDiscardRectangle,
    uint32_t                                    discardRectangleCount,
    const VkRect2D*                             pDiscardRectangles);</code></pre>
</div>
</div>
</div>
<div class="sect3">
<h4 id="_parameters_83">Parameters</h4>
<div class="ulist">
<ul>
<li>
<p><code>commandBuffer</code> is the command buffer into which the command will be
recorded.</p>
</li>
<li>
<p><code>firstDiscardRectangle</code> is the index of the first discard rectangle
whose state is updated by the command.</p>
</li>
<li>
<p><code>discardRectangleCount</code> is the number of discard rectangles whose
state are updated by the command.</p>
</li>
<li>
<p><code>pDiscardRectangles</code> is a pointer to an array of <a href="#VkRect2D">VkRect2D</a>
structures specifying discard rectangles.</p>
</li>
</ul>
</div>
</div>
<div class="sect3">
<h4 id="_description_83">Description</h4>
<div class="paragraph">
<p>The discard rectangle taken from element <span class="eq">i</span> of <code>pDiscardRectangles</code>
replace the current state for the discard rectangle index
<span class="eq"><code>firstDiscardRectangle</code> +  i</span>, for <span class="eq">i</span> in <span class="eq">[0,
<code>discardRectangleCount</code>)</span>.</p>
</div>
<div class="sidebarblock">
<div class="content">
<div class="title">Valid Usage</div>
<div class="ulist">
<ul>
<li>
<p><a id="VUID-vkCmdSetDiscardRectangleEXT-None-00583"></a>
The bound graphics pipeline <strong class="purple">must</strong> have been created with the
<code>VK_DYNAMIC_STATE_DISCARD_RECTANGLE_EXT</code> dynamic state enabled</p>
</li>
<li>
<p><a id="VUID-vkCmdSetDiscardRectangleEXT-firstDiscardRectangle-00585"></a>
The sum of <code>firstDiscardRectangle</code> and <code>discardRectangleCount</code>
<strong class="purple">must</strong> be less than or equal to
<a href="#VkPhysicalDeviceDiscardRectanglePropertiesEXT">VkPhysicalDeviceDiscardRectanglePropertiesEXT</a>::<code>maxDiscardRectangles</code></p>
</li>
<li>
<p><a id="VUID-vkCmdSetDiscardRectangleEXT-x-00587"></a>
The <code>x</code> and <code>y</code> member of <code>offset</code> in each <a href="#VkRect2D">VkRect2D</a>
element of <code>pDiscardRectangles</code> <strong class="purple">must</strong> be greater than or equal to
<code>0</code></p>
</li>
<li>
<p><a id="VUID-vkCmdSetDiscardRectangleEXT-offset-00588"></a>
Evaluation of <span class="eq">(<code>offset.x</code> +  <code>extent.width</code>)</span> in each
<a href="#VkRect2D">VkRect2D</a> element of <code>pDiscardRectangles</code> <strong class="purple">must</strong> not cause a
signed integer addition overflow</p>
</li>
<li>
<p><a id="VUID-vkCmdSetDiscardRectangleEXT-offset-00589"></a>
Evaluation of <span class="eq">(<code>offset.y</code> +  <code>extent.height</code>)</span> in each
<a href="#VkRect2D">VkRect2D</a> element of <code>pDiscardRectangles</code> <strong class="purple">must</strong> not cause a
signed integer addition overflow</p>
</li>
</ul>
</div>
</div>
</div>
<div class="sidebarblock">
<div class="content">
<div class="title">Valid Usage (Implicit)</div>
<div class="ulist">
<ul>
<li>
<p><a id="VUID-vkCmdSetDiscardRectangleEXT-commandBuffer-parameter"></a> <code>commandBuffer</code> <strong class="purple">must</strong> be a valid <code>VkCommandBuffer</code> handle</p>
</li>
<li>
<p><a id="VUID-vkCmdSetDiscardRectangleEXT-pDiscardRectangles-parameter"></a> <code>pDiscardRectangles</code> <strong class="purple">must</strong> be a valid pointer to an array of <code>discardRectangleCount</code> <code>VkRect2D</code> structures</p>
</li>
<li>
<p><a id="VUID-vkCmdSetDiscardRectangleEXT-commandBuffer-recording"></a> <code>commandBuffer</code> <strong class="purple">must</strong> be in the <a href="#commandbuffers-lifecycle">recording state</a></p>
</li>
<li>
<p><a id="VUID-vkCmdSetDiscardRectangleEXT-commandBuffer-cmdpool"></a> The <code>VkCommandPool</code> that <code>commandBuffer</code> was allocated from <strong class="purple">must</strong> support graphics operations</p>
</li>
<li>
<p><a id="VUID-vkCmdSetDiscardRectangleEXT-discardRectangleCount-arraylength"></a> <code>discardRectangleCount</code> <strong class="purple">must</strong> be greater than <code>0</code></p>
</li>
</ul>
</div>
</div>
</div>
<div class="sidebarblock">
<div class="content">
<div class="title">Host Synchronization</div>
<div class="ulist">
<ul>
<li>
<p>Host access to <code>commandBuffer</code> <strong class="purple">must</strong> be externally synchronized</p>
</li>
<li>
<p>Host access to the <code>VkCommandPool</code> that <code>commandBuffer</code> was allocated from <strong class="purple">must</strong> be externally synchronized</p>
</li>
</ul>
</div>
</div>
</div>
<div class="sidebarblock">
<div class="content">
<div class="title">Command Properties</div>
<table class="tableblock frame-all grid-all stretch">
<colgroup>
<col style="width: 25%;">
<col style="width: 25%;">
<col style="width: 25%;">
<col style="width: 25%;">
</colgroup>
<thead>
<tr>
<th class="tableblock halign-left valign-top"><a href="#VkCommandBufferLevel">Command Buffer Levels</a></th>
<th class="tableblock halign-left valign-top"><a href="#vkCmdBeginRenderPass">Render Pass Scope</a></th>
<th class="tableblock halign-left valign-top"><a href="#VkQueueFlagBits">Supported Queue Types</a></th>
<th class="tableblock halign-left valign-top"><a href="#synchronization-pipeline-stages-types">Pipeline Type</a></th>
</tr>
</thead>
<tbody>
<tr>
<td class="tableblock halign-left valign-top"><p class="tableblock">Primary<br>
Secondary</p></td>
<td class="tableblock halign-left valign-top"><p class="tableblock">Both</p></td>
<td class="tableblock halign-left valign-top"><p class="tableblock">Graphics</p></td>
<td class="tableblock halign-left valign-top"></td>
</tr>
</tbody>
</table>
</div>
</div>
</div>
<div class="sect3">
<h4 id="_see_also_83">See Also</h4>
<div class="paragraph">
<p><a href="#VkCommandBuffer">VkCommandBuffer</a>, <a href="#VkRect2D">VkRect2D</a></p>
</div>
</div>
<div class="sect3">
<h4 id="_document_notes_83">Document Notes</h4>
<div class="paragraph">
<p>For more information, see the Vulkan Specification at URL</p>
</div>
<div class="paragraph">
<p><a href="https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#vkCmdSetDiscardRectangleEXT" class="bare">https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#vkCmdSetDiscardRectangleEXT</a></p>
</div>
<div class="paragraph">
<p>This page is extracted from the Vulkan Specification.
Fixes and changes should be made to the Specification, not directly.</p>
</div>
<div style="page-break-after: always;"></div>
</div>
</div>
<div class="sect2">
<h3 id="_vkcmdsetevent3">vkCmdSetEvent(3)</h3>
<div class="sect3">
<h4 id="_name_84">Name</h4>
<div class="paragraph">
<p>vkCmdSetEvent - Set an event object to signaled state</p>
</div>
</div>
<div class="sect3">
<h4 id="_c_specification_84">C Specification</h4>
<div class="paragraph">
<p>To set the state of an event to signaled from a device, call:</p>
</div>
<div id="vkCmdSetEvent" class="listingblock">
<div class="content">
<pre class="highlight"><code class="language-c++" data-lang="c++">void vkCmdSetEvent(
    VkCommandBuffer                             commandBuffer,
    VkEvent                                     event,
    VkPipelineStageFlags                        stageMask);</code></pre>
</div>
</div>
</div>
<div class="sect3">
<h4 id="_parameters_84">Parameters</h4>
<div class="ulist">
<ul>
<li>
<p><code>commandBuffer</code> is the command buffer into which the command is
recorded.</p>
</li>
<li>
<p><code>event</code> is the event that will be signaled.</p>
</li>
<li>
<p><code>stageMask</code> specifies the <a href="vkspec.html#synchronization-pipeline-stages">source
stage mask</a> used to determine when the <code>event</code> is signaled.</p>
</li>
</ul>
</div>
</div>
<div class="sect3">
<h4 id="_description_84">Description</h4>
<div class="paragraph">
<p>When <a href="#vkCmdSetEvent">vkCmdSetEvent</a> is submitted to a queue, it defines an execution
dependency on commands that were submitted before it, and defines an event
signal operation which sets the event to the signaled state.</p>
</div>
<div class="paragraph">
<p>The first <a href="vkspec.html#synchronization-dependencies-scopes">synchronization scope</a>
includes all commands that occur earlier in
<a href="vkspec.html#synchronization-submission-order">submission order</a>.
The synchronization scope is limited to operations on the pipeline stages
determined by the <a href="vkspec.html#synchronization-pipeline-stages-masks">source stage
mask</a> specified by <code>stageMask</code>.</p>
</div>
<div class="paragraph">
<p>The second <a href="vkspec.html#synchronization-dependencies-scopes">synchronization scope</a>
includes only the event signal operation.</p>
</div>
<div class="paragraph">
<p>If <code>event</code> is already in the signaled state when <a href="#vkCmdSetEvent">vkCmdSetEvent</a> is
executed on the device, then <a href="#vkCmdSetEvent">vkCmdSetEvent</a> has no effect, no event
signal operation occurs, and no execution dependency is generated.</p>
</div>
<div class="sidebarblock">
<div class="content">
<div class="title">Valid Usage</div>
<div class="ulist">
<ul>
<li>
<p><a id="VUID-vkCmdSetEvent-stageMask-01149"></a>
<code>stageMask</code> <strong class="purple">must</strong> not include <code>VK_PIPELINE_STAGE_HOST_BIT</code></p>
</li>
<li>
<p><a id="VUID-vkCmdSetEvent-stageMask-01150"></a>
If the <a href="vkspec.html#features-geometryShader">geometry shaders</a> feature is not
enabled, <code>stageMask</code> <strong class="purple">must</strong> not contain
<code>VK_PIPELINE_STAGE_GEOMETRY_SHADER_BIT</code></p>
</li>
<li>
<p><a id="VUID-vkCmdSetEvent-stageMask-01151"></a>
If the <a href="vkspec.html#features-tessellationShader">tessellation shaders</a> feature is
not enabled, <code>stageMask</code> <strong class="purple">must</strong> not contain
<code>VK_PIPELINE_STAGE_TESSELLATION_CONTROL_SHADER_BIT</code> or
<code>VK_PIPELINE_STAGE_TESSELLATION_EVALUATION_SHADER_BIT</code></p>
</li>
<li>
<p><a id="VUID-vkCmdSetEvent-commandBuffer-01152"></a>
<code>commandBuffer</code>&#8217;s current device mask <strong class="purple">must</strong> include exactly one
physical device.</p>
</li>
<li>
<p><a id="VUID-vkCmdSetEvent-stageMask-02107"></a>
If the <a href="vkspec.html#features-meshShader">mesh shaders</a> feature is not enabled,
<code>stageMask</code> <strong class="purple">must</strong> not contain
<code>VK_PIPELINE_STAGE_MESH_SHADER_BIT_NV</code></p>
</li>
<li>
<p><a id="VUID-vkCmdSetEvent-stageMask-02108"></a>
If the <a href="vkspec.html#features-taskShader">task shaders</a> feature is not enabled,
<code>stageMask</code> <strong class="purple">must</strong> not contain
<code>VK_PIPELINE_STAGE_TASK_SHADER_BIT_NV</code></p>
</li>
</ul>
</div>
</div>
</div>
<div class="sidebarblock">
<div class="content">
<div class="title">Valid Usage (Implicit)</div>
<div class="ulist">
<ul>
<li>
<p><a id="VUID-vkCmdSetEvent-commandBuffer-parameter"></a> <code>commandBuffer</code> <strong class="purple">must</strong> be a valid <code>VkCommandBuffer</code> handle</p>
</li>
<li>
<p><a id="VUID-vkCmdSetEvent-event-parameter"></a> <code>event</code> <strong class="purple">must</strong> be a valid <code>VkEvent</code> handle</p>
</li>
<li>
<p><a id="VUID-vkCmdSetEvent-stageMask-parameter"></a> <code>stageMask</code> <strong class="purple">must</strong> be a valid combination of <a href="#VkPipelineStageFlagBits">VkPipelineStageFlagBits</a> values</p>
</li>
<li>
<p><a id="VUID-vkCmdSetEvent-stageMask-requiredbitmask"></a> <code>stageMask</code> <strong class="purple">must</strong> not be <code>0</code></p>
</li>
<li>
<p><a id="VUID-vkCmdSetEvent-commandBuffer-recording"></a> <code>commandBuffer</code> <strong class="purple">must</strong> be in the <a href="#commandbuffers-lifecycle">recording state</a></p>
</li>
<li>
<p><a id="VUID-vkCmdSetEvent-commandBuffer-cmdpool"></a> The <code>VkCommandPool</code> that <code>commandBuffer</code> was allocated from <strong class="purple">must</strong> support graphics, or compute operations</p>
</li>
<li>
<p><a id="VUID-vkCmdSetEvent-renderpass"></a> This command <strong class="purple">must</strong> only be called outside of a render pass instance</p>
</li>
<li>
<p><a id="VUID-vkCmdSetEvent-commonparent"></a> Both of <code>commandBuffer</code>, and <code>event</code> <strong class="purple">must</strong> have been created, allocated, or retrieved from the same <code>VkDevice</code></p>
</li>
</ul>
</div>
</div>
</div>
<div class="sidebarblock">
<div class="content">
<div class="title">Host Synchronization</div>
<div class="ulist">
<ul>
<li>
<p>Host access to <code>commandBuffer</code> <strong class="purple">must</strong> be externally synchronized</p>
</li>
<li>
<p>Host access to the <code>VkCommandPool</code> that <code>commandBuffer</code> was allocated from <strong class="purple">must</strong> be externally synchronized</p>
</li>
</ul>
</div>
</div>
</div>
<div class="sidebarblock">
<div class="content">
<div class="title">Command Properties</div>
<table class="tableblock frame-all grid-all stretch">
<colgroup>
<col style="width: 25%;">
<col style="width: 25%;">
<col style="width: 25%;">
<col style="width: 25%;">
</colgroup>
<thead>
<tr>
<th class="tableblock halign-left valign-top"><a href="#VkCommandBufferLevel">Command Buffer Levels</a></th>
<th class="tableblock halign-left valign-top"><a href="#vkCmdBeginRenderPass">Render Pass Scope</a></th>
<th class="tableblock halign-left valign-top"><a href="#VkQueueFlagBits">Supported Queue Types</a></th>
<th class="tableblock halign-left valign-top"><a href="#synchronization-pipeline-stages-types">Pipeline Type</a></th>
</tr>
</thead>
<tbody>
<tr>
<td class="tableblock halign-left valign-top"><p class="tableblock">Primary<br>
Secondary</p></td>
<td class="tableblock halign-left valign-top"><p class="tableblock">Outside</p></td>
<td class="tableblock halign-left valign-top"><p class="tableblock">Graphics<br>
Compute</p></td>
<td class="tableblock halign-left valign-top"></td>
</tr>
</tbody>
</table>
</div>
</div>
</div>
<div class="sect3">
<h4 id="_see_also_84">See Also</h4>
<div class="paragraph">
<p><a href="#VkCommandBuffer">VkCommandBuffer</a>, <a href="#VkEvent">VkEvent</a>, <a href="#VkPipelineStageFlags">VkPipelineStageFlags</a></p>
</div>
</div>
<div class="sect3">
<h4 id="_document_notes_84">Document Notes</h4>
<div class="paragraph">
<p>For more information, see the Vulkan Specification at URL</p>
</div>
<div class="paragraph">
<p><a href="https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#vkCmdSetEvent" class="bare">https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#vkCmdSetEvent</a></p>
</div>
<div class="paragraph">
<p>This page is extracted from the Vulkan Specification.
Fixes and changes should be made to the Specification, not directly.</p>
</div>
<div style="page-break-after: always;"></div>
</div>
</div>
<div class="sect2">
<h3 id="_vkcmdsetexclusivescissornv3">vkCmdSetExclusiveScissorNV(3)</h3>
<div class="sect3">
<h4 id="_name_85">Name</h4>
<div class="paragraph">
<p>vkCmdSetExclusiveScissorNV - Set the dynamic exclusive scissor rectangles on a command buffer</p>
</div>
</div>
<div class="sect3">
<h4 id="_c_specification_85">C Specification</h4>
<div class="paragraph">
<p>If the pipeline state object is created with
<code>VK_DYNAMIC_STATE_EXCLUSIVE_SCISSOR_NV</code> enabled, then the exclusive
scissor rectangles are set by:</p>
</div>
<div id="vkCmdSetExclusiveScissorNV" class="listingblock">
<div class="content">
<pre class="highlight"><code class="language-c++" data-lang="c++">void vkCmdSetExclusiveScissorNV(
    VkCommandBuffer                             commandBuffer,
    uint32_t                                    firstExclusiveScissor,
    uint32_t                                    exclusiveScissorCount,
    const VkRect2D*                             pExclusiveScissors);</code></pre>
</div>
</div>
</div>
<div class="sect3">
<h4 id="_parameters_85">Parameters</h4>
<div class="ulist">
<ul>
<li>
<p><code>commandBuffer</code> is the command buffer into which the command will be
recorded.</p>
</li>
<li>
<p><code>firstExclusiveScissor</code> is the index of the first exclusive scissor
rectangle whose state is updated by the command.</p>
</li>
<li>
<p><code>exclusiveScissorCount</code> is the number of exclusive scissor
rectangles updated by the command.</p>
</li>
<li>
<p><code>pExclusiveScissors</code> is a pointer to an array of <a href="#VkRect2D">VkRect2D</a>
structures defining exclusive scissor rectangles.</p>
</li>
</ul>
</div>
</div>
<div class="sect3">
<h4 id="_description_85">Description</h4>
<div class="paragraph">
<p>The scissor rectangles taken from element <span class="eq">i</span> of
<code>pExclusiveScissors</code> replace the current state for the scissor index
<span class="eq"><code>firstExclusiveScissor</code> +  i</span>, for <span class="eq">i</span> in <span class="eq">[0,
<code>exclusiveScissorCount</code>)</span>.</p>
</div>
<div class="paragraph">
<p>Each scissor rectangle is described by a <a href="#VkRect2D">VkRect2D</a> structure, with the
<code>offset.x</code> and <code>offset.y</code> values determining the upper left corner
of the scissor rectangle, and the <code>extent.width</code> and <code>extent.height</code>
values determining the size in pixels.</p>
</div>
<div class="sidebarblock">
<div class="content">
<div class="title">Valid Usage</div>
<div class="ulist">
<ul>
<li>
<p><a id="VUID-vkCmdSetExclusiveScissorNV-None-02031"></a>
The <a href="vkspec.html#features-exclusiveScissor">exclusive scissor</a> feature <strong class="purple">must</strong> be
enabled.</p>
</li>
<li>
<p><a id="VUID-vkCmdSetExclusiveScissorNV-None-02032"></a>
The bound graphics pipeline <strong class="purple">must</strong> have been created with the
<code>VK_DYNAMIC_STATE_EXCLUSIVE_SCISSOR_NV</code> dynamic state enabled</p>
</li>
<li>
<p><a id="VUID-vkCmdSetExclusiveScissorNV-firstExclusiveScissor-02033"></a>
<code>firstExclusiveScissor</code> <strong class="purple">must</strong> be less than
<code>VkPhysicalDeviceLimits</code>::<code>maxViewports</code></p>
</li>
<li>
<p><a id="VUID-vkCmdSetExclusiveScissorNV-firstExclusiveScissor-02034"></a>
The sum of <code>firstExclusiveScissor</code> and <code>exclusiveScissorCount</code>
<strong class="purple">must</strong> be between <code>1</code> and
<code>VkPhysicalDeviceLimits</code>::<code>maxViewports</code>, inclusive</p>
</li>
<li>
<p><a id="VUID-vkCmdSetExclusiveScissorNV-firstExclusiveScissor-02035"></a>
If the <a href="vkspec.html#features-multiViewport">multiple viewports</a> feature is not
enabled, <code>firstExclusiveScissor</code> <strong class="purple">must</strong> be <code>0</code></p>
</li>
<li>
<p><a id="VUID-vkCmdSetExclusiveScissorNV-exclusiveScissorCount-02036"></a>
If the <a href="vkspec.html#features-multiViewport">multiple viewports</a> feature is not
enabled, <code>exclusiveScissorCount</code> <strong class="purple">must</strong> be <code>1</code></p>
</li>
<li>
<p><a id="VUID-vkCmdSetExclusiveScissorNV-x-02037"></a>
The <code>x</code> and <code>y</code> members of <code>offset</code> in each member of
<code>pExclusiveScissors</code> <strong class="purple">must</strong> be greater than or equal to <code>0</code></p>
</li>
<li>
<p><a id="VUID-vkCmdSetExclusiveScissorNV-offset-02038"></a>
Evaluation of <span class="eq">(<code>offset.x</code> +  <code>extent.width</code>)</span> for each
member of <code>pExclusiveScissors</code> <strong class="purple">must</strong> not cause a signed integer
addition overflow</p>
</li>
<li>
<p><a id="VUID-vkCmdSetExclusiveScissorNV-offset-02039"></a>
Evaluation of <span class="eq">(<code>offset.y</code> +  <code>extent.height</code>)</span> for each
member of <code>pExclusiveScissors</code> <strong class="purple">must</strong> not cause a signed integer
addition overflow</p>
</li>
</ul>
</div>
</div>
</div>
<div class="sidebarblock">
<div class="content">
<div class="title">Valid Usage (Implicit)</div>
<div class="ulist">
<ul>
<li>
<p><a id="VUID-vkCmdSetExclusiveScissorNV-commandBuffer-parameter"></a> <code>commandBuffer</code> <strong class="purple">must</strong> be a valid <code>VkCommandBuffer</code> handle</p>
</li>
<li>
<p><a id="VUID-vkCmdSetExclusiveScissorNV-pExclusiveScissors-parameter"></a> <code>pExclusiveScissors</code> <strong class="purple">must</strong> be a valid pointer to an array of <code>exclusiveScissorCount</code> <code>VkRect2D</code> structures</p>
</li>
<li>
<p><a id="VUID-vkCmdSetExclusiveScissorNV-commandBuffer-recording"></a> <code>commandBuffer</code> <strong class="purple">must</strong> be in the <a href="#commandbuffers-lifecycle">recording state</a></p>
</li>
<li>
<p><a id="VUID-vkCmdSetExclusiveScissorNV-commandBuffer-cmdpool"></a> The <code>VkCommandPool</code> that <code>commandBuffer</code> was allocated from <strong class="purple">must</strong> support graphics operations</p>
</li>
<li>
<p><a id="VUID-vkCmdSetExclusiveScissorNV-exclusiveScissorCount-arraylength"></a> <code>exclusiveScissorCount</code> <strong class="purple">must</strong> be greater than <code>0</code></p>
</li>
</ul>
</div>
</div>
</div>
<div class="sidebarblock">
<div class="content">
<div class="title">Host Synchronization</div>
<div class="ulist">
<ul>
<li>
<p>Host access to <code>commandBuffer</code> <strong class="purple">must</strong> be externally synchronized</p>
</li>
<li>
<p>Host access to the <code>VkCommandPool</code> that <code>commandBuffer</code> was allocated from <strong class="purple">must</strong> be externally synchronized</p>
</li>
</ul>
</div>
</div>
</div>
<div class="sidebarblock">
<div class="content">
<div class="title">Command Properties</div>
<table class="tableblock frame-all grid-all stretch">
<colgroup>
<col style="width: 25%;">
<col style="width: 25%;">
<col style="width: 25%;">
<col style="width: 25%;">
</colgroup>
<thead>
<tr>
<th class="tableblock halign-left valign-top"><a href="#VkCommandBufferLevel">Command Buffer Levels</a></th>
<th class="tableblock halign-left valign-top"><a href="#vkCmdBeginRenderPass">Render Pass Scope</a></th>
<th class="tableblock halign-left valign-top"><a href="#VkQueueFlagBits">Supported Queue Types</a></th>
<th class="tableblock halign-left valign-top"><a href="#synchronization-pipeline-stages-types">Pipeline Type</a></th>
</tr>
</thead>
<tbody>
<tr>
<td class="tableblock halign-left valign-top"><p class="tableblock">Primary<br>
Secondary</p></td>
<td class="tableblock halign-left valign-top"><p class="tableblock">Both</p></td>
<td class="tableblock halign-left valign-top"><p class="tableblock">Graphics</p></td>
<td class="tableblock halign-left valign-top"></td>
</tr>
</tbody>
</table>
</div>
</div>
</div>
<div class="sect3">
<h4 id="_see_also_85">See Also</h4>
<div class="paragraph">
<p><a href="#VkCommandBuffer">VkCommandBuffer</a>, <a href="#VkRect2D">VkRect2D</a></p>
</div>
</div>
<div class="sect3">
<h4 id="_document_notes_85">Document Notes</h4>
<div class="paragraph">
<p>For more information, see the Vulkan Specification at URL</p>
</div>
<div class="paragraph">
<p><a href="https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#vkCmdSetExclusiveScissorNV" class="bare">https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#vkCmdSetExclusiveScissorNV</a></p>
</div>
<div class="paragraph">
<p>This page is extracted from the Vulkan Specification.
Fixes and changes should be made to the Specification, not directly.</p>
</div>
<div style="page-break-after: always;"></div>
</div>
</div>
<div class="sect2">
<h3 id="_vkcmdsetlinewidth3">vkCmdSetLineWidth(3)</h3>
<div class="sect3">
<h4 id="_name_86">Name</h4>
<div class="paragraph">
<p>vkCmdSetLineWidth - Set the dynamic line width state</p>
</div>
</div>
<div class="sect3">
<h4 id="_c_specification_86">C Specification</h4>
<div class="paragraph">
<p>The line width is specified by the
<a href="#VkPipelineRasterizationStateCreateInfo">VkPipelineRasterizationStateCreateInfo</a>::<code>lineWidth</code> property of
the currently active pipeline, if the pipeline was not created with
<code>VK_DYNAMIC_STATE_LINE_WIDTH</code> enabled.</p>
</div>
<div class="paragraph">
<p>Otherwise, the line width is set by calling <code>vkCmdSetLineWidth</code>:</p>
</div>
<div id="vkCmdSetLineWidth" class="listingblock">
<div class="content">
<pre class="highlight"><code class="language-c++" data-lang="c++">void vkCmdSetLineWidth(
    VkCommandBuffer                             commandBuffer,
    float                                       lineWidth);</code></pre>
</div>
</div>
</div>
<div class="sect3">
<h4 id="_parameters_86">Parameters</h4>
<div class="ulist">
<ul>
<li>
<p><code>commandBuffer</code> is the command buffer into which the command will be
recorded.</p>
</li>
<li>
<p><code>lineWidth</code> is the width of rasterized line segments.</p>
</li>
</ul>
</div>
</div>
<div class="sect3">
<h4 id="_description_86">Description</h4>
<div class="sidebarblock">
<div class="content">
<div class="title">Valid Usage</div>
<div class="ulist">
<ul>
<li>
<p><a id="VUID-vkCmdSetLineWidth-None-00787"></a>
The bound graphics pipeline <strong class="purple">must</strong> have been created with the
<code>VK_DYNAMIC_STATE_LINE_WIDTH</code> dynamic state enabled</p>
</li>
<li>
<p><a id="VUID-vkCmdSetLineWidth-lineWidth-00788"></a>
If the <a href="vkspec.html#features-wideLines">wide lines</a> feature is not enabled,
<code>lineWidth</code> <strong class="purple">must</strong> be <code>1.0</code></p>
</li>
</ul>
</div>
</div>
</div>
<div class="sidebarblock">
<div class="content">
<div class="title">Valid Usage (Implicit)</div>
<div class="ulist">
<ul>
<li>
<p><a id="VUID-vkCmdSetLineWidth-commandBuffer-parameter"></a> <code>commandBuffer</code> <strong class="purple">must</strong> be a valid <code>VkCommandBuffer</code> handle</p>
</li>
<li>
<p><a id="VUID-vkCmdSetLineWidth-commandBuffer-recording"></a> <code>commandBuffer</code> <strong class="purple">must</strong> be in the <a href="#commandbuffers-lifecycle">recording state</a></p>
</li>
<li>
<p><a id="VUID-vkCmdSetLineWidth-commandBuffer-cmdpool"></a> The <code>VkCommandPool</code> that <code>commandBuffer</code> was allocated from <strong class="purple">must</strong> support graphics operations</p>
</li>
</ul>
</div>
</div>
</div>
<div class="sidebarblock">
<div class="content">
<div class="title">Host Synchronization</div>
<div class="ulist">
<ul>
<li>
<p>Host access to <code>commandBuffer</code> <strong class="purple">must</strong> be externally synchronized</p>
</li>
<li>
<p>Host access to the <code>VkCommandPool</code> that <code>commandBuffer</code> was allocated from <strong class="purple">must</strong> be externally synchronized</p>
</li>
</ul>
</div>
</div>
</div>
<div class="sidebarblock">
<div class="content">
<div class="title">Command Properties</div>
<table class="tableblock frame-all grid-all stretch">
<colgroup>
<col style="width: 25%;">
<col style="width: 25%;">
<col style="width: 25%;">
<col style="width: 25%;">
</colgroup>
<thead>
<tr>
<th class="tableblock halign-left valign-top"><a href="#VkCommandBufferLevel">Command Buffer Levels</a></th>
<th class="tableblock halign-left valign-top"><a href="#vkCmdBeginRenderPass">Render Pass Scope</a></th>
<th class="tableblock halign-left valign-top"><a href="#VkQueueFlagBits">Supported Queue Types</a></th>
<th class="tableblock halign-left valign-top"><a href="#synchronization-pipeline-stages-types">Pipeline Type</a></th>
</tr>
</thead>
<tbody>
<tr>
<td class="tableblock halign-left valign-top"><p class="tableblock">Primary<br>
Secondary</p></td>
<td class="tableblock halign-left valign-top"><p class="tableblock">Both</p></td>
<td class="tableblock halign-left valign-top"><p class="tableblock">Graphics</p></td>
<td class="tableblock halign-left valign-top"></td>
</tr>
</tbody>
</table>
</div>
</div>
</div>
<div class="sect3">
<h4 id="_see_also_86">See Also</h4>
<div class="paragraph">
<p><a href="#VkCommandBuffer">VkCommandBuffer</a></p>
</div>
</div>
<div class="sect3">
<h4 id="_document_notes_86">Document Notes</h4>
<div class="paragraph">
<p>For more information, see the Vulkan Specification at URL</p>
</div>
<div class="paragraph">
<p><a href="https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#vkCmdSetLineWidth" class="bare">https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#vkCmdSetLineWidth</a></p>
</div>
<div class="paragraph">
<p>This page is extracted from the Vulkan Specification.
Fixes and changes should be made to the Specification, not directly.</p>
</div>
<div style="page-break-after: always;"></div>
</div>
</div>
<div class="sect2">
<h3 id="_vkcmdsetsamplelocationsext3">vkCmdSetSampleLocationsEXT(3)</h3>
<div class="sect3">
<h4 id="_name_87">Name</h4>
<div class="paragraph">
<p>vkCmdSetSampleLocationsEXT - Set the dynamic sample locations state</p>
</div>
</div>
<div class="sect3">
<h4 id="_c_specification_87">C Specification</h4>
<div class="paragraph">
<p>The custom sample locations used for rasterization when
<code>VkPipelineSampleLocationsStateCreateInfoEXT</code>::<code>sampleLocationsEnable</code>
is <code>VK_TRUE</code> are specified by the
<code>VkPipelineSampleLocationsStateCreateInfoEXT</code>::<code>sampleLocationsInfo</code>
property of the bound graphics pipeline, if the pipeline was not created
with <code>VK_DYNAMIC_STATE_SAMPLE_LOCATIONS_EXT</code> enabled.</p>
</div>
<div class="paragraph">
<p>Otherwise, the sample locations used for rasterization are set by calling
<code>vkCmdSetSampleLocationsEXT</code>:</p>
</div>
<div id="vkCmdSetSampleLocationsEXT" class="listingblock">
<div class="content">
<pre class="highlight"><code class="language-c++" data-lang="c++">void vkCmdSetSampleLocationsEXT(
    VkCommandBuffer                             commandBuffer,
    const VkSampleLocationsInfoEXT*             pSampleLocationsInfo);</code></pre>
</div>
</div>
</div>
<div class="sect3">
<h4 id="_parameters_87">Parameters</h4>
<div class="ulist">
<ul>
<li>
<p><code>commandBuffer</code> is the command buffer into which the command will be
recorded.</p>
</li>
<li>
<p><code>pSampleLocationsInfo</code> is the sample locations state to set.</p>
</li>
</ul>
</div>
</div>
<div class="sect3">
<h4 id="_description_87">Description</h4>
<div class="sidebarblock">
<div class="content">
<div class="title">Valid Usage</div>
<div class="ulist">
<ul>
<li>
<p><a id="VUID-vkCmdSetSampleLocationsEXT-None-01528"></a>
The bound graphics pipeline <strong class="purple">must</strong> have been created with the
<code>VK_DYNAMIC_STATE_SAMPLE_LOCATIONS_EXT</code> dynamic state enabled</p>
</li>
<li>
<p><a id="VUID-vkCmdSetSampleLocationsEXT-sampleLocationsPerPixel-01529"></a>
The <code>sampleLocationsPerPixel</code> member of <code>pSampleLocationsInfo</code>
<strong class="purple">must</strong> equal the <code>rasterizationSamples</code> member of the
<a href="#VkPipelineMultisampleStateCreateInfo">VkPipelineMultisampleStateCreateInfo</a> structure the bound graphics
pipeline has been created with</p>
</li>
<li>
<p><a id="VUID-vkCmdSetSampleLocationsEXT-variableSampleLocations-01530"></a>
If
<a href="#VkPhysicalDeviceSampleLocationsPropertiesEXT">VkPhysicalDeviceSampleLocationsPropertiesEXT</a>::<code>variableSampleLocations</code>
is <code>VK_FALSE</code> then the current render pass <strong class="purple">must</strong> have been begun by
specifying a <a href="#VkRenderPassSampleLocationsBeginInfoEXT">VkRenderPassSampleLocationsBeginInfoEXT</a> structure
whose <code>pPostSubpassSampleLocations</code> member contains an element with
a <code>subpassIndex</code> matching the current subpass index and the
<code>sampleLocationsInfo</code> member of that element <strong class="purple">must</strong> match the sample
locations state pointed to by <code>pSampleLocationsInfo</code></p>
</li>
</ul>
</div>
</div>
</div>
<div class="sidebarblock">
<div class="content">
<div class="title">Valid Usage (Implicit)</div>
<div class="ulist">
<ul>
<li>
<p><a id="VUID-vkCmdSetSampleLocationsEXT-commandBuffer-parameter"></a> <code>commandBuffer</code> <strong class="purple">must</strong> be a valid <code>VkCommandBuffer</code> handle</p>
</li>
<li>
<p><a id="VUID-vkCmdSetSampleLocationsEXT-pSampleLocationsInfo-parameter"></a> <code>pSampleLocationsInfo</code> <strong class="purple">must</strong> be a valid pointer to a valid <code>VkSampleLocationsInfoEXT</code> structure</p>
</li>
<li>
<p><a id="VUID-vkCmdSetSampleLocationsEXT-commandBuffer-recording"></a> <code>commandBuffer</code> <strong class="purple">must</strong> be in the <a href="#commandbuffers-lifecycle">recording state</a></p>
</li>
<li>
<p><a id="VUID-vkCmdSetSampleLocationsEXT-commandBuffer-cmdpool"></a> The <code>VkCommandPool</code> that <code>commandBuffer</code> was allocated from <strong class="purple">must</strong> support graphics operations</p>
</li>
</ul>
</div>
</div>
</div>
<div class="sidebarblock">
<div class="content">
<div class="title">Host Synchronization</div>
<div class="ulist">
<ul>
<li>
<p>Host access to <code>commandBuffer</code> <strong class="purple">must</strong> be externally synchronized</p>
</li>
<li>
<p>Host access to the <code>VkCommandPool</code> that <code>commandBuffer</code> was allocated from <strong class="purple">must</strong> be externally synchronized</p>
</li>
</ul>
</div>
</div>
</div>
<div class="sidebarblock">
<div class="content">
<div class="title">Command Properties</div>
<table class="tableblock frame-all grid-all stretch">
<colgroup>
<col style="width: 25%;">
<col style="width: 25%;">
<col style="width: 25%;">
<col style="width: 25%;">
</colgroup>
<thead>
<tr>
<th class="tableblock halign-left valign-top"><a href="#VkCommandBufferLevel">Command Buffer Levels</a></th>
<th class="tableblock halign-left valign-top"><a href="#vkCmdBeginRenderPass">Render Pass Scope</a></th>
<th class="tableblock halign-left valign-top"><a href="#VkQueueFlagBits">Supported Queue Types</a></th>
<th class="tableblock halign-left valign-top"><a href="#synchronization-pipeline-stages-types">Pipeline Type</a></th>
</tr>
</thead>
<tbody>
<tr>
<td class="tableblock halign-left valign-top"><p class="tableblock">Primary<br>
Secondary</p></td>
<td class="tableblock halign-left valign-top"><p class="tableblock">Both</p></td>
<td class="tableblock halign-left valign-top"><p class="tableblock">Graphics</p></td>
<td class="tableblock halign-left valign-top"></td>
</tr>
</tbody>
</table>
</div>
</div>
</div>
<div class="sect3">
<h4 id="_see_also_87">See Also</h4>
<div class="paragraph">
<p><a href="#VkCommandBuffer">VkCommandBuffer</a>, <a href="#VkSampleLocationsInfoEXT">VkSampleLocationsInfoEXT</a></p>
</div>
</div>
<div class="sect3">
<h4 id="_document_notes_87">Document Notes</h4>
<div class="paragraph">
<p>For more information, see the Vulkan Specification at URL</p>
</div>
<div class="paragraph">
<p><a href="https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#vkCmdSetSampleLocationsEXT" class="bare">https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#vkCmdSetSampleLocationsEXT</a></p>
</div>
<div class="paragraph">
<p>This page is extracted from the Vulkan Specification.
Fixes and changes should be made to the Specification, not directly.</p>
</div>
<div style="page-break-after: always;"></div>
</div>
</div>
<div class="sect2">
<h3 id="_vkcmdsetscissor3">vkCmdSetScissor(3)</h3>
<div class="sect3">
<h4 id="_name_88">Name</h4>
<div class="paragraph">
<p>vkCmdSetScissor - Set the dynamic scissor rectangles on a command buffer</p>
</div>
</div>
<div class="sect3">
<h4 id="_c_specification_88">C Specification</h4>
<div class="paragraph">
<p>The scissor test determines if a fragment&#8217;s framebuffer coordinates
<span class="eq">(x<sub>f</sub>,y<sub>f</sub>)</span> lie within the scissor rectangle corresponding to the
viewport index (see <a href="vkspec.html#vertexpostproc-viewport">Controlling the Viewport</a>)
used by the primitive that generated the fragment.
If the pipeline state object is created without
<code>VK_DYNAMIC_STATE_SCISSOR</code> enabled then the scissor rectangles are set
by the <a href="#VkPipelineViewportStateCreateInfo">VkPipelineViewportStateCreateInfo</a> state of the pipeline state
object.
Otherwise, to dynamically set the scissor rectangles call:</p>
</div>
<div id="vkCmdSetScissor" class="listingblock">
<div class="content">
<pre class="highlight"><code class="language-c++" data-lang="c++">void vkCmdSetScissor(
    VkCommandBuffer                             commandBuffer,
    uint32_t                                    firstScissor,
    uint32_t                                    scissorCount,
    const VkRect2D*                             pScissors);</code></pre>
</div>
</div>
</div>
<div class="sect3">
<h4 id="_parameters_88">Parameters</h4>
<div class="ulist">
<ul>
<li>
<p><code>commandBuffer</code> is the command buffer into which the command will be
recorded.</p>
</li>
<li>
<p><code>firstScissor</code> is the index of the first scissor whose state is
updated by the command.</p>
</li>
<li>
<p><code>scissorCount</code> is the number of scissors whose rectangles are
updated by the command.</p>
</li>
<li>
<p><code>pScissors</code> is a pointer to an array of <a href="#VkRect2D">VkRect2D</a> structures
defining scissor rectangles.</p>
</li>
</ul>
</div>
</div>
<div class="sect3">
<h4 id="_description_88">Description</h4>
<div class="paragraph">
<p>The scissor rectangles taken from element <span class="eq">i</span> of <code>pScissors</code> replace
the current state for the scissor index <span class="eq"><code>firstScissor</code> +  i</span>,
for <span class="eq">i</span> in <span class="eq">[0, <code>scissorCount</code>)</span>.</p>
</div>
<div class="paragraph">
<p>Each scissor rectangle is described by a <a href="#VkRect2D">VkRect2D</a> structure, with the
<code>offset.x</code> and <code>offset.y</code> values determining the upper left corner
of the scissor rectangle, and the <code>extent.width</code> and <code>extent.height</code>
values determining the size in pixels.</p>
</div>
<div class="sidebarblock">
<div class="content">
<div class="title">Valid Usage</div>
<div class="ulist">
<ul>
<li>
<p><a id="VUID-vkCmdSetScissor-None-00590"></a>
The bound graphics pipeline <strong class="purple">must</strong> have been created with the
<code>VK_DYNAMIC_STATE_SCISSOR</code> dynamic state enabled</p>
</li>
<li>
<p><a id="VUID-vkCmdSetScissor-firstScissor-00591"></a>
<code>firstScissor</code> <strong class="purple">must</strong> be less than
<code>VkPhysicalDeviceLimits</code>::<code>maxViewports</code></p>
</li>
<li>
<p><a id="VUID-vkCmdSetScissor-firstScissor-00592"></a>
The sum of <code>firstScissor</code> and <code>scissorCount</code> <strong class="purple">must</strong> be between
<code>1</code> and <code>VkPhysicalDeviceLimits</code>::<code>maxViewports</code>, inclusive</p>
</li>
<li>
<p><a id="VUID-vkCmdSetScissor-firstScissor-00593"></a>
If the <a href="vkspec.html#features-multiViewport">multiple viewports</a> feature is not
enabled, <code>firstScissor</code> <strong class="purple">must</strong> be <code>0</code></p>
</li>
<li>
<p><a id="VUID-vkCmdSetScissor-scissorCount-00594"></a>
If the <a href="vkspec.html#features-multiViewport">multiple viewports</a> feature is not
enabled, <code>scissorCount</code> <strong class="purple">must</strong> be <code>1</code></p>
</li>
<li>
<p><a id="VUID-vkCmdSetScissor-x-00595"></a>
The <code>x</code> and <code>y</code> members of <code>offset</code> <strong class="purple">must</strong> be greater than or
equal to <code>0</code></p>
</li>
<li>
<p><a id="VUID-vkCmdSetScissor-offset-00596"></a>
Evaluation of <span class="eq">(<code>offset.x</code> +  <code>extent.width</code>)</span> <strong class="purple">must</strong> not
cause a signed integer addition overflow</p>
</li>
<li>
<p><a id="VUID-vkCmdSetScissor-offset-00597"></a>
Evaluation of <span class="eq">(<code>offset.y</code> +  <code>extent.height</code>)</span> <strong class="purple">must</strong>
not cause a signed integer addition overflow</p>
</li>
</ul>
</div>
</div>
</div>
<div class="sidebarblock">
<div class="content">
<div class="title">Valid Usage (Implicit)</div>
<div class="ulist">
<ul>
<li>
<p><a id="VUID-vkCmdSetScissor-commandBuffer-parameter"></a> <code>commandBuffer</code> <strong class="purple">must</strong> be a valid <code>VkCommandBuffer</code> handle</p>
</li>
<li>
<p><a id="VUID-vkCmdSetScissor-pScissors-parameter"></a> <code>pScissors</code> <strong class="purple">must</strong> be a valid pointer to an array of <code>scissorCount</code> <code>VkRect2D</code> structures</p>
</li>
<li>
<p><a id="VUID-vkCmdSetScissor-commandBuffer-recording"></a> <code>commandBuffer</code> <strong class="purple">must</strong> be in the <a href="#commandbuffers-lifecycle">recording state</a></p>
</li>
<li>
<p><a id="VUID-vkCmdSetScissor-commandBuffer-cmdpool"></a> The <code>VkCommandPool</code> that <code>commandBuffer</code> was allocated from <strong class="purple">must</strong> support graphics operations</p>
</li>
<li>
<p><a id="VUID-vkCmdSetScissor-scissorCount-arraylength"></a> <code>scissorCount</code> <strong class="purple">must</strong> be greater than <code>0</code></p>
</li>
</ul>
</div>
</div>
</div>
<div class="sidebarblock">
<div class="content">
<div class="title">Host Synchronization</div>
<div class="ulist">
<ul>
<li>
<p>Host access to <code>commandBuffer</code> <strong class="purple">must</strong> be externally synchronized</p>
</li>
<li>
<p>Host access to the <code>VkCommandPool</code> that <code>commandBuffer</code> was allocated from <strong class="purple">must</strong> be externally synchronized</p>
</li>
</ul>
</div>
</div>
</div>
<div class="sidebarblock">
<div class="content">
<div class="title">Command Properties</div>
<table class="tableblock frame-all grid-all stretch">
<colgroup>
<col style="width: 25%;">
<col style="width: 25%;">
<col style="width: 25%;">
<col style="width: 25%;">
</colgroup>
<thead>
<tr>
<th class="tableblock halign-left valign-top"><a href="#VkCommandBufferLevel">Command Buffer Levels</a></th>
<th class="tableblock halign-left valign-top"><a href="#vkCmdBeginRenderPass">Render Pass Scope</a></th>
<th class="tableblock halign-left valign-top"><a href="#VkQueueFlagBits">Supported Queue Types</a></th>
<th class="tableblock halign-left valign-top"><a href="#synchronization-pipeline-stages-types">Pipeline Type</a></th>
</tr>
</thead>
<tbody>
<tr>
<td class="tableblock halign-left valign-top"><p class="tableblock">Primary<br>
Secondary</p></td>
<td class="tableblock halign-left valign-top"><p class="tableblock">Both</p></td>
<td class="tableblock halign-left valign-top"><p class="tableblock">Graphics</p></td>
<td class="tableblock halign-left valign-top"></td>
</tr>
</tbody>
</table>
</div>
</div>
</div>
<div class="sect3">
<h4 id="_see_also_88">See Also</h4>
<div class="paragraph">
<p><a href="#VkCommandBuffer">VkCommandBuffer</a>, <a href="#VkRect2D">VkRect2D</a></p>
</div>
</div>
<div class="sect3">
<h4 id="_document_notes_88">Document Notes</h4>
<div class="paragraph">
<p>For more information, see the Vulkan Specification at URL</p>
</div>
<div class="paragraph">
<p><a href="https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#vkCmdSetScissor" class="bare">https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#vkCmdSetScissor</a></p>
</div>
<div class="paragraph">
<p>This page is extracted from the Vulkan Specification.
Fixes and changes should be made to the Specification, not directly.</p>
</div>
<div style="page-break-after: always;"></div>
</div>
</div>
<div class="sect2">
<h3 id="_vkcmdsetstencilcomparemask3">vkCmdSetStencilCompareMask(3)</h3>
<div class="sect3">
<h4 id="_name_89">Name</h4>
<div class="paragraph">
<p>vkCmdSetStencilCompareMask - Set the stencil compare mask dynamic state</p>
</div>
</div>
<div class="sect3">
<h4 id="_c_specification_89">C Specification</h4>
<div class="paragraph">
<p>If the pipeline state object is created with the
<code>VK_DYNAMIC_STATE_STENCIL_COMPARE_MASK</code> dynamic state enabled, then to
dynamically set the stencil compare mask call:</p>
</div>
<div id="vkCmdSetStencilCompareMask" class="listingblock">
<div class="content">
<pre class="highlight"><code class="language-c++" data-lang="c++">void vkCmdSetStencilCompareMask(
    VkCommandBuffer                             commandBuffer,
    VkStencilFaceFlags                          faceMask,
    uint32_t                                    compareMask);</code></pre>
</div>
</div>
</div>
<div class="sect3">
<h4 id="_parameters_89">Parameters</h4>
<div class="ulist">
<ul>
<li>
<p><code>commandBuffer</code> is the command buffer into which the command will be
recorded.</p>
</li>
<li>
<p><code>faceMask</code> is a bitmask of <a href="#VkStencilFaceFlagBits">VkStencilFaceFlagBits</a> specifying
the set of stencil state for which to update the compare mask.</p>
</li>
<li>
<p><code>compareMask</code> is the new value to use as the stencil compare mask.</p>
</li>
</ul>
</div>
</div>
<div class="sect3">
<h4 id="_description_89">Description</h4>
<div class="sidebarblock">
<div class="content">
<div class="title">Valid Usage</div>
<div class="ulist">
<ul>
<li>
<p><a id="VUID-vkCmdSetStencilCompareMask-None-00602"></a>
The bound graphics pipeline <strong class="purple">must</strong> have been created with the
<code>VK_DYNAMIC_STATE_STENCIL_COMPARE_MASK</code> dynamic state enabled</p>
</li>
</ul>
</div>
</div>
</div>
<div class="sidebarblock">
<div class="content">
<div class="title">Valid Usage (Implicit)</div>
<div class="ulist">
<ul>
<li>
<p><a id="VUID-vkCmdSetStencilCompareMask-commandBuffer-parameter"></a> <code>commandBuffer</code> <strong class="purple">must</strong> be a valid <code>VkCommandBuffer</code> handle</p>
</li>
<li>
<p><a id="VUID-vkCmdSetStencilCompareMask-faceMask-parameter"></a> <code>faceMask</code> <strong class="purple">must</strong> be a valid combination of <a href="#VkStencilFaceFlagBits">VkStencilFaceFlagBits</a> values</p>
</li>
<li>
<p><a id="VUID-vkCmdSetStencilCompareMask-faceMask-requiredbitmask"></a> <code>faceMask</code> <strong class="purple">must</strong> not be <code>0</code></p>
</li>
<li>
<p><a id="VUID-vkCmdSetStencilCompareMask-commandBuffer-recording"></a> <code>commandBuffer</code> <strong class="purple">must</strong> be in the <a href="#commandbuffers-lifecycle">recording state</a></p>
</li>
<li>
<p><a id="VUID-vkCmdSetStencilCompareMask-commandBuffer-cmdpool"></a> The <code>VkCommandPool</code> that <code>commandBuffer</code> was allocated from <strong class="purple">must</strong> support graphics operations</p>
</li>
</ul>
</div>
</div>
</div>
<div class="sidebarblock">
<div class="content">
<div class="title">Host Synchronization</div>
<div class="ulist">
<ul>
<li>
<p>Host access to <code>commandBuffer</code> <strong class="purple">must</strong> be externally synchronized</p>
</li>
<li>
<p>Host access to the <code>VkCommandPool</code> that <code>commandBuffer</code> was allocated from <strong class="purple">must</strong> be externally synchronized</p>
</li>
</ul>
</div>
</div>
</div>
<div class="sidebarblock">
<div class="content">
<div class="title">Command Properties</div>
<table class="tableblock frame-all grid-all stretch">
<colgroup>
<col style="width: 25%;">
<col style="width: 25%;">
<col style="width: 25%;">
<col style="width: 25%;">
</colgroup>
<thead>
<tr>
<th class="tableblock halign-left valign-top"><a href="#VkCommandBufferLevel">Command Buffer Levels</a></th>
<th class="tableblock halign-left valign-top"><a href="#vkCmdBeginRenderPass">Render Pass Scope</a></th>
<th class="tableblock halign-left valign-top"><a href="#VkQueueFlagBits">Supported Queue Types</a></th>
<th class="tableblock halign-left valign-top"><a href="#synchronization-pipeline-stages-types">Pipeline Type</a></th>
</tr>
</thead>
<tbody>
<tr>
<td class="tableblock halign-left valign-top"><p class="tableblock">Primary<br>
Secondary</p></td>
<td class="tableblock halign-left valign-top"><p class="tableblock">Both</p></td>
<td class="tableblock halign-left valign-top"><p class="tableblock">Graphics</p></td>
<td class="tableblock halign-left valign-top"></td>
</tr>
</tbody>
</table>
</div>
</div>
</div>
<div class="sect3">
<h4 id="_see_also_89">See Also</h4>
<div class="paragraph">
<p><a href="#VkCommandBuffer">VkCommandBuffer</a>, <a href="#VkStencilFaceFlags">VkStencilFaceFlags</a></p>
</div>
</div>
<div class="sect3">
<h4 id="_document_notes_89">Document Notes</h4>
<div class="paragraph">
<p>For more information, see the Vulkan Specification at URL</p>
</div>
<div class="paragraph">
<p><a href="https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#vkCmdSetStencilCompareMask" class="bare">https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#vkCmdSetStencilCompareMask</a></p>
</div>
<div class="paragraph">
<p>This page is extracted from the Vulkan Specification.
Fixes and changes should be made to the Specification, not directly.</p>
</div>
<div style="page-break-after: always;"></div>
</div>
</div>
<div class="sect2">
<h3 id="_vkcmdsetstencilreference3">vkCmdSetStencilReference(3)</h3>
<div class="sect3">
<h4 id="_name_90">Name</h4>
<div class="paragraph">
<p>vkCmdSetStencilReference - Set the stencil reference dynamic state</p>
</div>
</div>
<div class="sect3">
<h4 id="_c_specification_90">C Specification</h4>
<div class="paragraph">
<p>If the pipeline state object is created with the
<code>VK_DYNAMIC_STATE_STENCIL_REFERENCE</code> dynamic state enabled, then to
dynamically set the stencil reference value call:</p>
</div>
<div id="vkCmdSetStencilReference" class="listingblock">
<div class="content">
<pre class="highlight"><code class="language-c++" data-lang="c++">void vkCmdSetStencilReference(
    VkCommandBuffer                             commandBuffer,
    VkStencilFaceFlags                          faceMask,
    uint32_t                                    reference);</code></pre>
</div>
</div>
</div>
<div class="sect3">
<h4 id="_parameters_90">Parameters</h4>
<div class="ulist">
<ul>
<li>
<p><code>commandBuffer</code> is the command buffer into which the command will be
recorded.</p>
</li>
<li>
<p><code>faceMask</code> is a bitmask of <a href="#VkStencilFaceFlagBits">VkStencilFaceFlagBits</a> specifying
the set of stencil state for which to update the reference value, as
described above for <a href="#vkCmdSetStencilCompareMask">vkCmdSetStencilCompareMask</a>.</p>
</li>
<li>
<p><code>reference</code> is the new value to use as the stencil reference value.</p>
</li>
</ul>
</div>
</div>
<div class="sect3">
<h4 id="_description_90">Description</h4>
<div class="sidebarblock">
<div class="content">
<div class="title">Valid Usage</div>
<div class="ulist">
<ul>
<li>
<p><a id="VUID-vkCmdSetStencilReference-None-00604"></a>
The bound graphics pipeline <strong class="purple">must</strong> have been created with the
<code>VK_DYNAMIC_STATE_STENCIL_REFERENCE</code> dynamic state enabled</p>
</li>
</ul>
</div>
</div>
</div>
<div class="sidebarblock">
<div class="content">
<div class="title">Valid Usage (Implicit)</div>
<div class="ulist">
<ul>
<li>
<p><a id="VUID-vkCmdSetStencilReference-commandBuffer-parameter"></a> <code>commandBuffer</code> <strong class="purple">must</strong> be a valid <code>VkCommandBuffer</code> handle</p>
</li>
<li>
<p><a id="VUID-vkCmdSetStencilReference-faceMask-parameter"></a> <code>faceMask</code> <strong class="purple">must</strong> be a valid combination of <a href="#VkStencilFaceFlagBits">VkStencilFaceFlagBits</a> values</p>
</li>
<li>
<p><a id="VUID-vkCmdSetStencilReference-faceMask-requiredbitmask"></a> <code>faceMask</code> <strong class="purple">must</strong> not be <code>0</code></p>
</li>
<li>
<p><a id="VUID-vkCmdSetStencilReference-commandBuffer-recording"></a> <code>commandBuffer</code> <strong class="purple">must</strong> be in the <a href="#commandbuffers-lifecycle">recording state</a></p>
</li>
<li>
<p><a id="VUID-vkCmdSetStencilReference-commandBuffer-cmdpool"></a> The <code>VkCommandPool</code> that <code>commandBuffer</code> was allocated from <strong class="purple">must</strong> support graphics operations</p>
</li>
</ul>
</div>
</div>
</div>
<div class="sidebarblock">
<div class="content">
<div class="title">Host Synchronization</div>
<div class="ulist">
<ul>
<li>
<p>Host access to <code>commandBuffer</code> <strong class="purple">must</strong> be externally synchronized</p>
</li>
<li>
<p>Host access to the <code>VkCommandPool</code> that <code>commandBuffer</code> was allocated from <strong class="purple">must</strong> be externally synchronized</p>
</li>
</ul>
</div>
</div>
</div>
<div class="sidebarblock">
<div class="content">
<div class="title">Command Properties</div>
<table class="tableblock frame-all grid-all stretch">
<colgroup>
<col style="width: 25%;">
<col style="width: 25%;">
<col style="width: 25%;">
<col style="width: 25%;">
</colgroup>
<thead>
<tr>
<th class="tableblock halign-left valign-top"><a href="#VkCommandBufferLevel">Command Buffer Levels</a></th>
<th class="tableblock halign-left valign-top"><a href="#vkCmdBeginRenderPass">Render Pass Scope</a></th>
<th class="tableblock halign-left valign-top"><a href="#VkQueueFlagBits">Supported Queue Types</a></th>
<th class="tableblock halign-left valign-top"><a href="#synchronization-pipeline-stages-types">Pipeline Type</a></th>
</tr>
</thead>
<tbody>
<tr>
<td class="tableblock halign-left valign-top"><p class="tableblock">Primary<br>
Secondary</p></td>
<td class="tableblock halign-left valign-top"><p class="tableblock">Both</p></td>
<td class="tableblock halign-left valign-top"><p class="tableblock">Graphics</p></td>
<td class="tableblock halign-left valign-top"></td>
</tr>
</tbody>
</table>
</div>
</div>
</div>
<div class="sect3">
<h4 id="_see_also_90">See Also</h4>
<div class="paragraph">
<p><a href="#VkCommandBuffer">VkCommandBuffer</a>, <a href="#VkStencilFaceFlags">VkStencilFaceFlags</a></p>
</div>
</div>
<div class="sect3">
<h4 id="_document_notes_90">Document Notes</h4>
<div class="paragraph">
<p>For more information, see the Vulkan Specification at URL</p>
</div>
<div class="paragraph">
<p><a href="https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#vkCmdSetStencilReference" class="bare">https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#vkCmdSetStencilReference</a></p>
</div>
<div class="paragraph">
<p>This page is extracted from the Vulkan Specification.
Fixes and changes should be made to the Specification, not directly.</p>
</div>
<div style="page-break-after: always;"></div>
</div>
</div>
<div class="sect2">
<h3 id="_vkcmdsetstencilwritemask3">vkCmdSetStencilWriteMask(3)</h3>
<div class="sect3">
<h4 id="_name_91">Name</h4>
<div class="paragraph">
<p>vkCmdSetStencilWriteMask - Set the stencil write mask dynamic state</p>
</div>
</div>
<div class="sect3">
<h4 id="_c_specification_91">C Specification</h4>
<div class="paragraph">
<p>If the pipeline state object is created with the
<code>VK_DYNAMIC_STATE_STENCIL_WRITE_MASK</code> dynamic state enabled, then to
dynamically set the stencil write mask call:</p>
</div>
<div id="vkCmdSetStencilWriteMask" class="listingblock">
<div class="content">
<pre class="highlight"><code class="language-c++" data-lang="c++">void vkCmdSetStencilWriteMask(
    VkCommandBuffer                             commandBuffer,
    VkStencilFaceFlags                          faceMask,
    uint32_t                                    writeMask);</code></pre>
</div>
</div>
</div>
<div class="sect3">
<h4 id="_parameters_91">Parameters</h4>
<div class="ulist">
<ul>
<li>
<p><code>commandBuffer</code> is the command buffer into which the command will be
recorded.</p>
</li>
<li>
<p><code>faceMask</code> is a bitmask of <a href="#VkStencilFaceFlagBits">VkStencilFaceFlagBits</a> specifying
the set of stencil state for which to update the write mask, as
described above for <a href="#vkCmdSetStencilCompareMask">vkCmdSetStencilCompareMask</a>.</p>
</li>
<li>
<p><code>writeMask</code> is the new value to use as the stencil write mask.</p>
</li>
</ul>
</div>
</div>
<div class="sect3">
<h4 id="_description_91">Description</h4>
<div class="sidebarblock">
<div class="content">
<div class="title">Valid Usage</div>
<div class="ulist">
<ul>
<li>
<p><a id="VUID-vkCmdSetStencilWriteMask-None-00603"></a>
The bound graphics pipeline <strong class="purple">must</strong> have been created with the
<code>VK_DYNAMIC_STATE_STENCIL_WRITE_MASK</code> dynamic state enabled</p>
</li>
</ul>
</div>
</div>
</div>
<div class="sidebarblock">
<div class="content">
<div class="title">Valid Usage (Implicit)</div>
<div class="ulist">
<ul>
<li>
<p><a id="VUID-vkCmdSetStencilWriteMask-commandBuffer-parameter"></a> <code>commandBuffer</code> <strong class="purple">must</strong> be a valid <code>VkCommandBuffer</code> handle</p>
</li>
<li>
<p><a id="VUID-vkCmdSetStencilWriteMask-faceMask-parameter"></a> <code>faceMask</code> <strong class="purple">must</strong> be a valid combination of <a href="#VkStencilFaceFlagBits">VkStencilFaceFlagBits</a> values</p>
</li>
<li>
<p><a id="VUID-vkCmdSetStencilWriteMask-faceMask-requiredbitmask"></a> <code>faceMask</code> <strong class="purple">must</strong> not be <code>0</code></p>
</li>
<li>
<p><a id="VUID-vkCmdSetStencilWriteMask-commandBuffer-recording"></a> <code>commandBuffer</code> <strong class="purple">must</strong> be in the <a href="#commandbuffers-lifecycle">recording state</a></p>
</li>
<li>
<p><a id="VUID-vkCmdSetStencilWriteMask-commandBuffer-cmdpool"></a> The <code>VkCommandPool</code> that <code>commandBuffer</code> was allocated from <strong class="purple">must</strong> support graphics operations</p>
</li>
</ul>
</div>
</div>
</div>
<div class="sidebarblock">
<div class="content">
<div class="title">Host Synchronization</div>
<div class="ulist">
<ul>
<li>
<p>Host access to <code>commandBuffer</code> <strong class="purple">must</strong> be externally synchronized</p>
</li>
<li>
<p>Host access to the <code>VkCommandPool</code> that <code>commandBuffer</code> was allocated from <strong class="purple">must</strong> be externally synchronized</p>
</li>
</ul>
</div>
</div>
</div>
<div class="sidebarblock">
<div class="content">
<div class="title">Command Properties</div>
<table class="tableblock frame-all grid-all stretch">
<colgroup>
<col style="width: 25%;">
<col style="width: 25%;">
<col style="width: 25%;">
<col style="width: 25%;">
</colgroup>
<thead>
<tr>
<th class="tableblock halign-left valign-top"><a href="#VkCommandBufferLevel">Command Buffer Levels</a></th>
<th class="tableblock halign-left valign-top"><a href="#vkCmdBeginRenderPass">Render Pass Scope</a></th>
<th class="tableblock halign-left valign-top"><a href="#VkQueueFlagBits">Supported Queue Types</a></th>
<th class="tableblock halign-left valign-top"><a href="#synchronization-pipeline-stages-types">Pipeline Type</a></th>
</tr>
</thead>
<tbody>
<tr>
<td class="tableblock halign-left valign-top"><p class="tableblock">Primary<br>
Secondary</p></td>
<td class="tableblock halign-left valign-top"><p class="tableblock">Both</p></td>
<td class="tableblock halign-left valign-top"><p class="tableblock">Graphics</p></td>
<td class="tableblock halign-left valign-top"></td>
</tr>
</tbody>
</table>
</div>
</div>
</div>
<div class="sect3">
<h4 id="_see_also_91">See Also</h4>
<div class="paragraph">
<p><a href="#VkCommandBuffer">VkCommandBuffer</a>, <a href="#VkStencilFaceFlags">VkStencilFaceFlags</a></p>
</div>
</div>
<div class="sect3">
<h4 id="_document_notes_91">Document Notes</h4>
<div class="paragraph">
<p>For more information, see the Vulkan Specification at URL</p>
</div>
<div class="paragraph">
<p><a href="https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#vkCmdSetStencilWriteMask" class="bare">https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#vkCmdSetStencilWriteMask</a></p>
</div>
<div class="paragraph">
<p>This page is extracted from the Vulkan Specification.
Fixes and changes should be made to the Specification, not directly.</p>
</div>
<div style="page-break-after: always;"></div>
</div>
</div>
<div class="sect2">
<h3 id="_vkcmdsetviewport3">vkCmdSetViewport(3)</h3>
<div class="sect3">
<h4 id="_name_92">Name</h4>
<div class="paragraph">
<p>vkCmdSetViewport - Set the viewport on a command buffer</p>
</div>
</div>
<div class="sect3">
<h4 id="_c_specification_92">C Specification</h4>
<div class="paragraph">
<p>If the bound pipeline state object was not created with the
<code>VK_DYNAMIC_STATE_VIEWPORT</code> dynamic state enabled, viewport
transformation parameters are specified using the <code>pViewports</code> member of
<code>VkPipelineViewportStateCreateInfo</code> in the pipeline state object.
If the pipeline state object was created with the
<code>VK_DYNAMIC_STATE_VIEWPORT</code> dynamic state enabled, the viewport
transformation parameters are dynamically set and changed with the command:</p>
</div>
<div id="vkCmdSetViewport" class="listingblock">
<div class="content">
<pre class="highlight"><code class="language-c++" data-lang="c++">void vkCmdSetViewport(
    VkCommandBuffer                             commandBuffer,
    uint32_t                                    firstViewport,
    uint32_t                                    viewportCount,
    const VkViewport*                           pViewports);</code></pre>
</div>
</div>
</div>
<div class="sect3">
<h4 id="_parameters_92">Parameters</h4>
<div class="ulist">
<ul>
<li>
<p><code>commandBuffer</code> is the command buffer into which the command will be
recorded.</p>
</li>
<li>
<p><code>firstViewport</code> is the index of the first viewport whose parameters
are updated by the command.</p>
</li>
<li>
<p><code>viewportCount</code> is the number of viewports whose parameters are
updated by the command.</p>
</li>
<li>
<p><code>pViewports</code> is a pointer to an array of <a href="#VkViewport">VkViewport</a> structures
specifying viewport parameters.</p>
</li>
</ul>
</div>
</div>
<div class="sect3">
<h4 id="_description_92">Description</h4>
<div class="paragraph">
<p>The viewport parameters taken from element <span class="eq">i</span> of <code>pViewports</code>
replace the current state for the viewport index <span class="eq"><code>firstViewport</code>
+  i</span>, for <span class="eq">i</span> in <span class="eq">[0, <code>viewportCount</code>)</span>.</p>
</div>
<div class="sidebarblock">
<div class="content">
<div class="title">Valid Usage</div>
<div class="ulist">
<ul>
<li>
<p><a id="VUID-vkCmdSetViewport-None-01221"></a>
The bound graphics pipeline <strong class="purple">must</strong> have been created with the
<code>VK_DYNAMIC_STATE_VIEWPORT</code> dynamic state enabled</p>
</li>
<li>
<p><a id="VUID-vkCmdSetViewport-firstViewport-01222"></a>
<code>firstViewport</code> <strong class="purple">must</strong> be less than
<code>VkPhysicalDeviceLimits</code>::<code>maxViewports</code></p>
</li>
<li>
<p><a id="VUID-vkCmdSetViewport-firstViewport-01223"></a>
The sum of <code>firstViewport</code> and <code>viewportCount</code> <strong class="purple">must</strong> be between
<code>1</code> and <code>VkPhysicalDeviceLimits</code>::<code>maxViewports</code>, inclusive</p>
</li>
<li>
<p><a id="VUID-vkCmdSetViewport-firstViewport-01224"></a>
If the <a href="vkspec.html#features-multiViewport">multiple viewports</a> feature is not
enabled, <code>firstViewport</code> <strong class="purple">must</strong> be <code>0</code></p>
</li>
<li>
<p><a id="VUID-vkCmdSetViewport-viewportCount-01225"></a>
If the <a href="vkspec.html#features-multiViewport">multiple viewports</a> feature is not
enabled, <code>viewportCount</code> <strong class="purple">must</strong> be <code>1</code></p>
</li>
</ul>
</div>
</div>
</div>
<div class="sidebarblock">
<div class="content">
<div class="title">Valid Usage (Implicit)</div>
<div class="ulist">
<ul>
<li>
<p><a id="VUID-vkCmdSetViewport-commandBuffer-parameter"></a> <code>commandBuffer</code> <strong class="purple">must</strong> be a valid <code>VkCommandBuffer</code> handle</p>
</li>
<li>
<p><a id="VUID-vkCmdSetViewport-pViewports-parameter"></a> <code>pViewports</code> <strong class="purple">must</strong> be a valid pointer to an array of <code>viewportCount</code> valid <code>VkViewport</code> structures</p>
</li>
<li>
<p><a id="VUID-vkCmdSetViewport-commandBuffer-recording"></a> <code>commandBuffer</code> <strong class="purple">must</strong> be in the <a href="#commandbuffers-lifecycle">recording state</a></p>
</li>
<li>
<p><a id="VUID-vkCmdSetViewport-commandBuffer-cmdpool"></a> The <code>VkCommandPool</code> that <code>commandBuffer</code> was allocated from <strong class="purple">must</strong> support graphics operations</p>
</li>
<li>
<p><a id="VUID-vkCmdSetViewport-viewportCount-arraylength"></a> <code>viewportCount</code> <strong class="purple">must</strong> be greater than <code>0</code></p>
</li>
</ul>
</div>
</div>
</div>
<div class="sidebarblock">
<div class="content">
<div class="title">Host Synchronization</div>
<div class="ulist">
<ul>
<li>
<p>Host access to <code>commandBuffer</code> <strong class="purple">must</strong> be externally synchronized</p>
</li>
<li>
<p>Host access to the <code>VkCommandPool</code> that <code>commandBuffer</code> was allocated from <strong class="purple">must</strong> be externally synchronized</p>
</li>
</ul>
</div>
</div>
</div>
<div class="sidebarblock">
<div class="content">
<div class="title">Command Properties</div>
<table class="tableblock frame-all grid-all stretch">
<colgroup>
<col style="width: 25%;">
<col style="width: 25%;">
<col style="width: 25%;">
<col style="width: 25%;">
</colgroup>
<thead>
<tr>
<th class="tableblock halign-left valign-top"><a href="#VkCommandBufferLevel">Command Buffer Levels</a></th>
<th class="tableblock halign-left valign-top"><a href="#vkCmdBeginRenderPass">Render Pass Scope</a></th>
<th class="tableblock halign-left valign-top"><a href="#VkQueueFlagBits">Supported Queue Types</a></th>
<th class="tableblock halign-left valign-top"><a href="#synchronization-pipeline-stages-types">Pipeline Type</a></th>
</tr>
</thead>
<tbody>
<tr>
<td class="tableblock halign-left valign-top"><p class="tableblock">Primary<br>
Secondary</p></td>
<td class="tableblock halign-left valign-top"><p class="tableblock">Both</p></td>
<td class="tableblock halign-left valign-top"><p class="tableblock">Graphics</p></td>
<td class="tableblock halign-left valign-top"></td>
</tr>
</tbody>
</table>
</div>
</div>
</div>
<div class="sect3">
<h4 id="_see_also_92">See Also</h4>
<div class="paragraph">
<p><a href="#VkCommandBuffer">VkCommandBuffer</a>, <a href="#VkViewport">VkViewport</a></p>
</div>
</div>
<div class="sect3">
<h4 id="_document_notes_92">Document Notes</h4>
<div class="paragraph">
<p>For more information, see the Vulkan Specification at URL</p>
</div>
<div class="paragraph">
<p><a href="https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#vkCmdSetViewport" class="bare">https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#vkCmdSetViewport</a></p>
</div>
<div class="paragraph">
<p>This page is extracted from the Vulkan Specification.
Fixes and changes should be made to the Specification, not directly.</p>
</div>
<div style="page-break-after: always;"></div>
</div>
</div>
<div class="sect2">
<h3 id="_vkcmdsetviewportshadingratepalettenv3">vkCmdSetViewportShadingRatePaletteNV(3)</h3>
<div class="sect3">
<h4 id="_name_93">Name</h4>
<div class="paragraph">
<p>vkCmdSetViewportShadingRatePaletteNV - Set shading rate image palettes on a command buffer</p>
</div>
</div>
<div class="sect3">
<h4 id="_c_specification_93">C Specification</h4>
<div class="paragraph">
<p>If a pipeline state object is created with
<code>VK_DYNAMIC_STATE_VIEWPORT_SHADING_RATE_PALETTE_NV</code> enabled, the
per-viewport shading rate image palettes are set by the command:</p>
</div>
<div id="vkCmdSetViewportShadingRatePaletteNV" class="listingblock">
<div class="content">
<pre class="highlight"><code class="language-c++" data-lang="c++">void vkCmdSetViewportShadingRatePaletteNV(
    VkCommandBuffer                             commandBuffer,
    uint32_t                                    firstViewport,
    uint32_t                                    viewportCount,
    const VkShadingRatePaletteNV*               pShadingRatePalettes);</code></pre>
</div>
</div>
</div>
<div class="sect3">
<h4 id="_parameters_93">Parameters</h4>
<div class="ulist">
<ul>
<li>
<p><code>commandBuffer</code> is the command buffer into which the command will be
recorded.</p>
</li>
<li>
<p><code>firstViewport</code> is the index of the first viewport whose shading
rate palette is updated by the command.</p>
</li>
<li>
<p><code>viewportCount</code> is the number of viewports whose shading rate
palettes are updated by the command.</p>
</li>
<li>
<p><code>pShadingRatePalettes</code> is a pointer to an array of
<a href="#VkShadingRatePaletteNV">VkShadingRatePaletteNV</a> structures defining the palette for each
viewport.</p>
</li>
</ul>
</div>
</div>
<div class="sect3">
<h4 id="_description_93">Description</h4>
<div class="sidebarblock">
<div class="content">
<div class="title">Valid Usage</div>
<div class="ulist">
<ul>
<li>
<p><a id="VUID-vkCmdSetViewportShadingRatePaletteNV-None-02064"></a>
The <a href="vkspec.html#features-shadingRateImage">shading rate image</a> feature <strong class="purple">must</strong> be
enabled.</p>
</li>
<li>
<p><a id="VUID-vkCmdSetViewportShadingRatePaletteNV-None-02065"></a>
The bound graphics pipeline <strong class="purple">must</strong> have been created with the
<code>VK_DYNAMIC_STATE_VIEWPORT_SHADING_RATE_PALETTE_NV</code> dynamic state
enabled</p>
</li>
<li>
<p><a id="VUID-vkCmdSetViewportShadingRatePaletteNV-firstViewport-02066"></a>
<code>firstViewport</code> <strong class="purple">must</strong> be less than
<code>VkPhysicalDeviceLimits</code>::<code>maxViewports</code></p>
</li>
<li>
<p><a id="VUID-vkCmdSetViewportShadingRatePaletteNV-firstViewport-02067"></a>
The sum of <code>firstViewport</code> and <code>viewportCount</code> <strong class="purple">must</strong> be between
<code>1</code> and <code>VkPhysicalDeviceLimits</code>::<code>maxViewports</code>, inclusive</p>
</li>
<li>
<p><a id="VUID-vkCmdSetViewportShadingRatePaletteNV-firstViewport-02068"></a>
If the <a href="vkspec.html#features-multiViewport">multiple viewports</a> feature is not
enabled, <code>firstViewport</code> <strong class="purple">must</strong> be <code>0</code></p>
</li>
<li>
<p><a id="VUID-vkCmdSetViewportShadingRatePaletteNV-viewportCount-02069"></a>
If the <a href="vkspec.html#features-multiViewport">multiple viewports</a> feature is not
enabled, <code>viewportCount</code> <strong class="purple">must</strong> be <code>1</code></p>
</li>
</ul>
</div>
</div>
</div>
<div class="sidebarblock">
<div class="content">
<div class="title">Valid Usage (Implicit)</div>
<div class="ulist">
<ul>
<li>
<p><a id="VUID-vkCmdSetViewportShadingRatePaletteNV-commandBuffer-parameter"></a> <code>commandBuffer</code> <strong class="purple">must</strong> be a valid <code>VkCommandBuffer</code> handle</p>
</li>
<li>
<p><a id="VUID-vkCmdSetViewportShadingRatePaletteNV-pShadingRatePalettes-parameter"></a> <code>pShadingRatePalettes</code> <strong class="purple">must</strong> be a valid pointer to an array of <code>viewportCount</code> valid <code>VkShadingRatePaletteNV</code> structures</p>
</li>
<li>
<p><a id="VUID-vkCmdSetViewportShadingRatePaletteNV-commandBuffer-recording"></a> <code>commandBuffer</code> <strong class="purple">must</strong> be in the <a href="#commandbuffers-lifecycle">recording state</a></p>
</li>
<li>
<p><a id="VUID-vkCmdSetViewportShadingRatePaletteNV-commandBuffer-cmdpool"></a> The <code>VkCommandPool</code> that <code>commandBuffer</code> was allocated from <strong class="purple">must</strong> support graphics operations</p>
</li>
<li>
<p><a id="VUID-vkCmdSetViewportShadingRatePaletteNV-viewportCount-arraylength"></a> <code>viewportCount</code> <strong class="purple">must</strong> be greater than <code>0</code></p>
</li>
</ul>
</div>
</div>
</div>
<div class="sidebarblock">
<div class="content">
<div class="title">Host Synchronization</div>
<div class="ulist">
<ul>
<li>
<p>Host access to <code>commandBuffer</code> <strong class="purple">must</strong> be externally synchronized</p>
</li>
<li>
<p>Host access to the <code>VkCommandPool</code> that <code>commandBuffer</code> was allocated from <strong class="purple">must</strong> be externally synchronized</p>
</li>
</ul>
</div>
</div>
</div>
<div class="sidebarblock">
<div class="content">
<div class="title">Command Properties</div>
<table class="tableblock frame-all grid-all stretch">
<colgroup>
<col style="width: 25%;">
<col style="width: 25%;">
<col style="width: 25%;">
<col style="width: 25%;">
</colgroup>
<thead>
<tr>
<th class="tableblock halign-left valign-top"><a href="#VkCommandBufferLevel">Command Buffer Levels</a></th>
<th class="tableblock halign-left valign-top"><a href="#vkCmdBeginRenderPass">Render Pass Scope</a></th>
<th class="tableblock halign-left valign-top"><a href="#VkQueueFlagBits">Supported Queue Types</a></th>
<th class="tableblock halign-left valign-top"><a href="#synchronization-pipeline-stages-types">Pipeline Type</a></th>
</tr>
</thead>
<tbody>
<tr>
<td class="tableblock halign-left valign-top"><p class="tableblock">Primary<br>
Secondary</p></td>
<td class="tableblock halign-left valign-top"><p class="tableblock">Both</p></td>
<td class="tableblock halign-left valign-top"><p class="tableblock">Graphics</p></td>
<td class="tableblock halign-left valign-top"></td>
</tr>
</tbody>
</table>
</div>
</div>
</div>
<div class="sect3">
<h4 id="_see_also_93">See Also</h4>
<div class="paragraph">
<p><a href="#VkCommandBuffer">VkCommandBuffer</a>, <a href="#VkShadingRatePaletteNV">VkShadingRatePaletteNV</a></p>
</div>
</div>
<div class="sect3">
<h4 id="_document_notes_93">Document Notes</h4>
<div class="paragraph">
<p>For more information, see the Vulkan Specification at URL</p>
</div>
<div class="paragraph">
<p><a href="https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#vkCmdSetViewportShadingRatePaletteNV" class="bare">https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#vkCmdSetViewportShadingRatePaletteNV</a></p>
</div>
<div class="paragraph">
<p>This page is extracted from the Vulkan Specification.
Fixes and changes should be made to the Specification, not directly.</p>
</div>
<div style="page-break-after: always;"></div>
</div>
</div>
<div class="sect2">
<h3 id="_vkcmdsetviewportwscalingnv3">vkCmdSetViewportWScalingNV(3)</h3>
<div class="sect3">
<h4 id="_name_94">Name</h4>
<div class="paragraph">
<p>vkCmdSetViewportWScalingNV - Set the viewport W scaling on a command buffer</p>
</div>
</div>
<div class="sect3">
<h4 id="_c_specification_94">C Specification</h4>
<div class="paragraph">
<p>If the bound pipeline state object was not created with the
<code>VK_DYNAMIC_STATE_VIEWPORT_W_SCALING_NV</code> dynamic state enabled, viewport
<strong>W</strong> scaling parameters are specified using the <code>pViewportWScalings</code>
member of <a href="#VkPipelineViewportWScalingStateCreateInfoNV">VkPipelineViewportWScalingStateCreateInfoNV</a> in the pipeline
state object.
If the pipeline state object was created with the
<code>VK_DYNAMIC_STATE_VIEWPORT_W_SCALING_NV</code> dynamic state enabled, the
viewport transformation parameters are dynamically set and changed with the
command:</p>
</div>
<div id="vkCmdSetViewportWScalingNV" class="listingblock">
<div class="content">
<pre class="highlight"><code class="language-c++" data-lang="c++">void vkCmdSetViewportWScalingNV(
    VkCommandBuffer                             commandBuffer,
    uint32_t                                    firstViewport,
    uint32_t                                    viewportCount,
    const VkViewportWScalingNV*                 pViewportWScalings);</code></pre>
</div>
</div>
</div>
<div class="sect3">
<h4 id="_parameters_94">Parameters</h4>
<div class="ulist">
<ul>
<li>
<p><code>commandBuffer</code> is the command buffer into which the command will be
recorded.</p>
</li>
<li>
<p><code>firstViewport</code> is the index of the first viewport whose parameters
are updated by the command.</p>
</li>
<li>
<p><code>viewportCount</code> is the number of viewports whose parameters are
updated by the command.</p>
</li>
<li>
<p><code>pViewportWScalings</code> is a pointer to an array of
<a href="#VkViewportWScalingNV">VkViewportWScalingNV</a> structures specifying viewport parameters.</p>
</li>
</ul>
</div>
</div>
<div class="sect3">
<h4 id="_description_94">Description</h4>
<div class="paragraph">
<p>The viewport parameters taken from element <span class="eq">i</span> of
<code>pViewportWScalings</code> replace the current state for the viewport index
<span class="eq"><code>firstViewport</code> +  i</span>, for <span class="eq">i</span> in <span class="eq">[0,
<code>viewportCount</code>)</span>.</p>
</div>
<div class="sidebarblock">
<div class="content">
<div class="title">Valid Usage</div>
<div class="ulist">
<ul>
<li>
<p><a id="VUID-vkCmdSetViewportWScalingNV-None-01322"></a>
The bound graphics pipeline <strong class="purple">must</strong> have been created with the
<code>VK_DYNAMIC_STATE_VIEWPORT_W_SCALING_NV</code> dynamic state enabled</p>
</li>
<li>
<p><a id="VUID-vkCmdSetViewportWScalingNV-firstViewport-01323"></a>
<code>firstViewport</code> <strong class="purple">must</strong> be less than
<a href="#VkPhysicalDeviceLimits">VkPhysicalDeviceLimits</a>::<code>maxViewports</code></p>
</li>
<li>
<p><a id="VUID-vkCmdSetViewportWScalingNV-firstViewport-01324"></a>
The sum of <code>firstViewport</code> and <code>viewportCount</code> <strong class="purple">must</strong> be between
<code>1</code> and <a href="#VkPhysicalDeviceLimits">VkPhysicalDeviceLimits</a>::<code>maxViewports</code>, inclusive</p>
</li>
</ul>
</div>
</div>
</div>
<div class="sidebarblock">
<div class="content">
<div class="title">Valid Usage (Implicit)</div>
<div class="ulist">
<ul>
<li>
<p><a id="VUID-vkCmdSetViewportWScalingNV-commandBuffer-parameter"></a> <code>commandBuffer</code> <strong class="purple">must</strong> be a valid <code>VkCommandBuffer</code> handle</p>
</li>
<li>
<p><a id="VUID-vkCmdSetViewportWScalingNV-pViewportWScalings-parameter"></a> <code>pViewportWScalings</code> <strong class="purple">must</strong> be a valid pointer to an array of <code>viewportCount</code> <code>VkViewportWScalingNV</code> structures</p>
</li>
<li>
<p><a id="VUID-vkCmdSetViewportWScalingNV-commandBuffer-recording"></a> <code>commandBuffer</code> <strong class="purple">must</strong> be in the <a href="#commandbuffers-lifecycle">recording state</a></p>
</li>
<li>
<p><a id="VUID-vkCmdSetViewportWScalingNV-commandBuffer-cmdpool"></a> The <code>VkCommandPool</code> that <code>commandBuffer</code> was allocated from <strong class="purple">must</strong> support graphics operations</p>
</li>
<li>
<p><a id="VUID-vkCmdSetViewportWScalingNV-viewportCount-arraylength"></a> <code>viewportCount</code> <strong class="purple">must</strong> be greater than <code>0</code></p>
</li>
</ul>
</div>
</div>
</div>
<div class="sidebarblock">
<div class="content">
<div class="title">Host Synchronization</div>
<div class="ulist">
<ul>
<li>
<p>Host access to <code>commandBuffer</code> <strong class="purple">must</strong> be externally synchronized</p>
</li>
<li>
<p>Host access to the <code>VkCommandPool</code> that <code>commandBuffer</code> was allocated from <strong class="purple">must</strong> be externally synchronized</p>
</li>
</ul>
</div>
</div>
</div>
<div class="sidebarblock">
<div class="content">
<div class="title">Command Properties</div>
<table class="tableblock frame-all grid-all stretch">
<colgroup>
<col style="width: 25%;">
<col style="width: 25%;">
<col style="width: 25%;">
<col style="width: 25%;">
</colgroup>
<thead>
<tr>
<th class="tableblock halign-left valign-top"><a href="#VkCommandBufferLevel">Command Buffer Levels</a></th>
<th class="tableblock halign-left valign-top"><a href="#vkCmdBeginRenderPass">Render Pass Scope</a></th>
<th class="tableblock halign-left valign-top"><a href="#VkQueueFlagBits">Supported Queue Types</a></th>
<th class="tableblock halign-left valign-top"><a href="#synchronization-pipeline-stages-types">Pipeline Type</a></th>
</tr>
</thead>
<tbody>
<tr>
<td class="tableblock halign-left valign-top"><p class="tableblock">Primary<br>
Secondary</p></td>
<td class="tableblock halign-left valign-top"><p class="tableblock">Both</p></td>
<td class="tableblock halign-left valign-top"><p class="tableblock">Graphics</p></td>
<td class="tableblock halign-left valign-top"></td>
</tr>
</tbody>
</table>
</div>
</div>
</div>
<div class="sect3">
<h4 id="_see_also_94">See Also</h4>
<div class="paragraph">
<p><a href="#VkCommandBuffer">VkCommandBuffer</a>, <a href="#VkViewportWScalingNV">VkViewportWScalingNV</a></p>
</div>
</div>
<div class="sect3">
<h4 id="_document_notes_94">Document Notes</h4>
<div class="paragraph">
<p>For more information, see the Vulkan Specification at URL</p>
</div>
<div class="paragraph">
<p><a href="https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#vkCmdSetViewportWScalingNV" class="bare">https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#vkCmdSetViewportWScalingNV</a></p>
</div>
<div class="paragraph">
<p>This page is extracted from the Vulkan Specification.
Fixes and changes should be made to the Specification, not directly.</p>
</div>
<div style="page-break-after: always;"></div>
</div>
</div>
<div class="sect2">
<h3 id="_vkcmdtraceraysnv3">vkCmdTraceRaysNV(3)</h3>
<div class="sect3">
<h4 id="_name_95">Name</h4>
<div class="paragraph">
<p>vkCmdTraceRaysNV - Initialize a ray tracing dispatch</p>
</div>
</div>
<div class="sect3">
<h4 id="_c_specification_95">C Specification</h4>
<div class="paragraph">
<p>To dispatch a ray tracing call use:</p>
</div>
<div id="vkCmdTraceRaysNV" class="listingblock">
<div class="content">
<pre class="highlight"><code class="language-c++" data-lang="c++">void vkCmdTraceRaysNV(
    VkCommandBuffer                             commandBuffer,
    VkBuffer                                    raygenShaderBindingTableBuffer,
    VkDeviceSize                                raygenShaderBindingOffset,
    VkBuffer                                    missShaderBindingTableBuffer,
    VkDeviceSize                                missShaderBindingOffset,
    VkDeviceSize                                missShaderBindingStride,
    VkBuffer                                    hitShaderBindingTableBuffer,
    VkDeviceSize                                hitShaderBindingOffset,
    VkDeviceSize                                hitShaderBindingStride,
    VkBuffer                                    callableShaderBindingTableBuffer,
    VkDeviceSize                                callableShaderBindingOffset,
    VkDeviceSize                                callableShaderBindingStride,
    uint32_t                                    width,
    uint32_t                                    height,
    uint32_t                                    depth);</code></pre>
</div>
</div>
</div>
<div class="sect3">
<h4 id="_parameters_95">Parameters</h4>
<div class="ulist">
<ul>
<li>
<p><code>commandBuffer</code> is the command buffer into which the command will be
recorded.</p>
</li>
<li>
<p><code>raygenShaderBindingTableBuffer</code> is the buffer object that holds the
shader binding table data for the ray generation shader stage.</p>
</li>
<li>
<p><code>raygenShaderBindingOffset</code> is the offset in bytes (relative to
<code>raygenShaderBindingTableBuffer</code>) of the ray generation shader being
used for the trace.</p>
</li>
<li>
<p><code>missShaderBindingTableBuffer</code> is the buffer object that holds the
shader binding table data for the miss shader stage.</p>
</li>
<li>
<p><code>missShaderBindingOffset</code> is the offset in bytes (relative to
<code>missShaderBindingTableBuffer</code>) of the miss shader being used for
the trace.</p>
</li>
<li>
<p><code>missShaderBindingStride</code> is the size in bytes of each shader
binding table record in <code>missShaderBindingTableBuffer</code>.</p>
</li>
<li>
<p><code>hitShaderBindingTableBuffer</code> is the buffer object that holds the
shader binding table data for the hit shader stages.</p>
</li>
<li>
<p><code>hitShaderBindingOffset</code> is the offset in bytes (relative to
<code>hitShaderBindingTableBuffer</code>) of the hit shader group being used
for the trace.</p>
</li>
<li>
<p><code>hitShaderBindingStride</code> is the size in bytes of each shader binding
table record in <code>hitShaderBindingTableBuffer</code>.</p>
</li>
<li>
<p><code>callableShaderBindingTableBuffer</code> is the buffer object that holds
the shader binding table data for the callable shader stage.</p>
</li>
<li>
<p><code>callableShaderBindingOffset</code> is the offset in bytes (relative to
<code>callableShaderBindingTableBuffer</code>) of the callable shader being
used for the trace.</p>
</li>
<li>
<p><code>callableShaderBindingStride</code> is the size in bytes of each shader
binding table record in <code>callableShaderBindingTableBuffer</code>.</p>
</li>
<li>
<p><code>width</code> is the width of the ray trace query dimensions.</p>
</li>
<li>
<p><code>height</code> is height of the ray trace query dimensions.</p>
</li>
<li>
<p><code>depth</code> is depth of the ray trace query dimensions.</p>
</li>
</ul>
</div>
</div>
<div class="sect3">
<h4 id="_description_95">Description</h4>
<div class="paragraph">
<p>When the command is executed, a ray generation group of <span class="eq"><code>width</code>
× <code>height</code> × <code>depth</code></span> rays is assembled.</p>
</div>
<div class="sidebarblock">
<div class="content">
<div class="title">Valid Usage</div>
<div class="ulist">
<ul>
<li>
<p><a id="VUID-vkCmdTraceRaysNV-raygenShaderBindingOffset-02455"></a>
<code>raygenShaderBindingOffset</code> <strong class="purple">must</strong> be less than the size of
<code>raygenShaderBindingTableBuffer</code></p>
</li>
<li>
<p><a id="VUID-vkCmdTraceRaysNV-raygenShaderBindingOffset-02456"></a>
<code>raygenShaderBindingOffset</code> <strong class="purple">must</strong> be a multiple of
<code>VkPhysicalDeviceRayTracingPropertiesNV</code>::<code>shaderGroupBaseAlignment</code></p>
</li>
<li>
<p><a id="VUID-vkCmdTraceRaysNV-missShaderBindingOffset-02457"></a>
<code>missShaderBindingOffset</code> <strong class="purple">must</strong> be less than the size of
<code>missShaderBindingTableBuffer</code></p>
</li>
<li>
<p><a id="VUID-vkCmdTraceRaysNV-missShaderBindingOffset-02458"></a>
<code>missShaderBindingOffset</code> <strong class="purple">must</strong> be a multiple of
<code>VkPhysicalDeviceRayTracingPropertiesNV</code>::<code>shaderGroupBaseAlignment</code></p>
</li>
<li>
<p><a id="VUID-vkCmdTraceRaysNV-hitShaderBindingOffset-02459"></a>
<code>hitShaderBindingOffset</code> <strong class="purple">must</strong> be less than the size of
<code>hitShaderBindingTableBuffer</code></p>
</li>
<li>
<p><a id="VUID-vkCmdTraceRaysNV-hitShaderBindingOffset-02460"></a>
<code>hitShaderBindingOffset</code> <strong class="purple">must</strong> be a multiple of
<code>VkPhysicalDeviceRayTracingPropertiesNV</code>::<code>shaderGroupBaseAlignment</code></p>
</li>
<li>
<p><a id="VUID-vkCmdTraceRaysNV-callableShaderBindingOffset-02461"></a>
<code>callableShaderBindingOffset</code> <strong class="purple">must</strong> be less than the size of
<code>callableShaderBindingTableBuffer</code></p>
</li>
<li>
<p><a id="VUID-vkCmdTraceRaysNV-callableShaderBindingOffset-02462"></a>
<code>callableShaderBindingOffset</code> <strong class="purple">must</strong> be a multiple of
<code>VkPhysicalDeviceRayTracingPropertiesNV</code>::<code>shaderGroupBaseAlignment</code></p>
</li>
<li>
<p><a id="VUID-vkCmdTraceRaysNV-missShaderBindingStride-02463"></a>
<code>missShaderBindingStride</code> <strong class="purple">must</strong> be a multiple of
<code>VkPhysicalDeviceRayTracingPropertiesNV</code>::<code>shaderGroupHandleSize</code></p>
</li>
<li>
<p><a id="VUID-vkCmdTraceRaysNV-hitShaderBindingStride-02464"></a>
<code>hitShaderBindingStride</code> <strong class="purple">must</strong> be a multiple of
<code>VkPhysicalDeviceRayTracingPropertiesNV</code>::<code>shaderGroupHandleSize</code></p>
</li>
<li>
<p><a id="VUID-vkCmdTraceRaysNV-callableShaderBindingStride-02465"></a>
<code>callableShaderBindingStride</code> <strong class="purple">must</strong> be a multiple of
<code>VkPhysicalDeviceRayTracingPropertiesNV</code>::<code>shaderGroupHandleSize</code></p>
</li>
<li>
<p><a id="VUID-vkCmdTraceRaysNV-missShaderBindingStride-02466"></a>
<code>missShaderBindingStride</code> <strong class="purple">must</strong> be a less than or equal to
<code>VkPhysicalDeviceRayTracingPropertiesNV</code>::<code>maxShaderGroupStride</code></p>
</li>
<li>
<p><a id="VUID-vkCmdTraceRaysNV-hitShaderBindingStride-02467"></a>
<code>hitShaderBindingStride</code> <strong class="purple">must</strong> be a less than or equal to
<code>VkPhysicalDeviceRayTracingPropertiesNV</code>::<code>maxShaderGroupStride</code></p>
</li>
<li>
<p><a id="VUID-vkCmdTraceRaysNV-callableShaderBindingStride-02468"></a>
<code>callableShaderBindingStride</code> <strong class="purple">must</strong> be a less than or equal to
<code>VkPhysicalDeviceRayTracingPropertiesNV</code>::<code>maxShaderGroupStride</code></p>
</li>
<li>
<p><a id="VUID-vkCmdTraceRaysNV-width-02469"></a>
<code>width</code> <strong class="purple">must</strong> be less than or equal to
<code>VkPhysicalDeviceLimits</code>::<code>maxComputeWorkGroupCount</code>[0]</p>
</li>
<li>
<p><a id="VUID-vkCmdTraceRaysNV-height-02470"></a>
<code>height</code> <strong class="purple">must</strong> be less than or equal to
<code>VkPhysicalDeviceLimits</code>::<code>maxComputeWorkGroupCount</code>[1]</p>
</li>
<li>
<p><a id="VUID-vkCmdTraceRaysNV-depth-02471"></a>
<code>depth</code> <strong class="purple">must</strong> be less than or equal to
<code>VkPhysicalDeviceLimits</code>::<code>maxComputeWorkGroupCount</code>[2]</p>
</li>
<li>
<p><a id="VUID-vkCmdTraceRaysNV-None-02472"></a>
For each set <em>n</em> that is statically used by the <code>VkPipeline</code> bound
to <code>VK_PIPELINE_BIND_POINT_RAY_TRACING_NV</code>, a descriptor set <strong class="purple">must</strong>
have been bound to <em>n</em> at <code>VK_PIPELINE_BIND_POINT_RAY_TRACING_NV</code>,
with a <code>VkPipelineLayout</code> that is compatible for set <em>n</em>, with the
<code>VkPipelineLayout</code> used to create the current <code>VkPipeline</code>, as
described in <a href="vkspec.html#descriptorsets-compatibility" class="bare">html/vkspec.html#descriptorsets-compatibility</a></p>
</li>
<li>
<p><a id="VUID-vkCmdTraceRaysNV-None-02473"></a>
Descriptors in each bound descriptor set, specified via
<code>vkCmdBindDescriptorSets</code>, <strong class="purple">must</strong> be valid if they are statically
used by the bound <code>VkPipeline</code> object, specified via
<code>vkCmdBindPipeline</code></p>
</li>
<li>
<p><a id="VUID-vkCmdTraceRaysNV-None-02474"></a>
A valid ray tracing pipeline <strong class="purple">must</strong> be bound to the current command
buffer with <code>VK_PIPELINE_BIND_POINT_RAY_TRACING_NV</code></p>
</li>
<li>
<p><a id="VUID-vkCmdTraceRaysNV-None-02475"></a>
For each push constant that is statically used by the <code>VkPipeline</code>
bound to <code>VK_PIPELINE_BIND_POINT_RAY_TRACING_NV</code>, a push constant
value <strong class="purple">must</strong> have been set for
<code>VK_PIPELINE_BIND_POINT_RAY_TRACING_NV</code>, with a
<code>VkPipelineLayout</code> that is compatible for push constants with the
one used to create the current <code>VkPipeline</code>, as described in
<a href="vkspec.html#descriptorsets-compatibility" class="bare">html/vkspec.html#descriptorsets-compatibility</a></p>
</li>
<li>
<p><a id="VUID-vkCmdTraceRaysNV-None-02476"></a>
If any <code>VkSampler</code> object that is accessed from a shader by the
<code>VkPipeline</code> bound to <code>VK_PIPELINE_BIND_POINT_RAY_TRACING_NV</code>
uses unnormalized coordinates, it <strong class="purple">must</strong> not be used to sample from any
<code>VkImage</code> with a <code>VkImageView</code> of the type
<code>VK_IMAGE_VIEW_TYPE_3D</code>, <code>VK_IMAGE_VIEW_TYPE_CUBE</code>,
<code>VK_IMAGE_VIEW_TYPE_1D_ARRAY</code>, <code>VK_IMAGE_VIEW_TYPE_2D_ARRAY</code> or
<code>VK_IMAGE_VIEW_TYPE_CUBE_ARRAY</code>, in any shader stage</p>
</li>
<li>
<p><a id="VUID-vkCmdTraceRaysNV-None-02477"></a>
If any <code>VkSampler</code> object that is accessed from a shader by the
<code>VkPipeline</code> bound to <code>VK_PIPELINE_BIND_POINT_RAY_TRACING_NV</code>
uses unnormalized coordinates, it <strong class="purple">must</strong> not be used with any of the
SPIR-V <code>OpImageSample*</code> or <code>OpImageSparseSample*</code> instructions with
<code>ImplicitLod</code>, <code>Dref</code> or <code>Proj</code> in their name, in any shader
stage</p>
</li>
<li>
<p><a id="VUID-vkCmdTraceRaysNV-None-02478"></a>
If any <code>VkSampler</code> object that is accessed from a shader by the
<code>VkPipeline</code> bound to <code>VK_PIPELINE_BIND_POINT_RAY_TRACING_NV</code>
uses unnormalized coordinates, it <strong class="purple">must</strong> not be used with any of the
SPIR-V <code>OpImageSample*</code> or <code>OpImageSparseSample*</code> instructions that
includes a LOD bias or any offset values, in any shader stage</p>
</li>
<li>
<p><a id="VUID-vkCmdTraceRaysNV-None-02479"></a>
If the <a href="vkspec.html#features-robustBufferAccess">robust buffer access</a> feature is
not enabled, and any shader stage in the <code>VkPipeline</code> object bound
to <code>VK_PIPELINE_BIND_POINT_RAY_TRACING_NV</code> accesses a uniform
buffer, it <strong class="purple">must</strong> not access values outside of the range of that buffer
specified in the bound descriptor set</p>
</li>
<li>
<p><a id="VUID-vkCmdTraceRaysNV-None-02480"></a>
If the <a href="vkspec.html#features-robustBufferAccess">robust buffer access</a> feature is
not enabled, and any shader stage in the <code>VkPipeline</code> object bound
to <code>VK_PIPELINE_BIND_POINT_RAY_TRACING_NV</code> accesses a storage
buffer, it <strong class="purple">must</strong> not access values outside of the range of that buffer
specified in the bound descriptor set</p>
</li>
<li>
<p><a id="VUID-vkCmdTraceRaysNV-None-02481"></a>
If a <code>VkImageView</code> is sampled with <code>VK_FILTER_LINEAR</code> as a
result of this command, then the image view&#8217;s
<a href="vkspec.html#resources-image-view-format-features">format features</a> <strong class="purple">must</strong> contain
<code>VK_FORMAT_FEATURE_SAMPLED_IMAGE_FILTER_LINEAR_BIT</code></p>
</li>
<li>
<p><a id="VUID-vkCmdTraceRaysNV-None-02482"></a>
If a <code>VkImageView</code> is sampled with <code>VK_FILTER_CUBIC_IMG</code> as a
result of this command, then the image view&#8217;s
<a href="vkspec.html#resources-image-view-format-features">format features</a> <strong class="purple">must</strong> contain
<code>VK_FORMAT_FEATURE_SAMPLED_IMAGE_FILTER_CUBIC_BIT_IMG</code></p>
</li>
<li>
<p><a id="VUID-vkCmdTraceRaysNV-None-02483"></a>
Any <a href="#VkImageView">VkImageView</a> being sampled with <code>VK_FILTER_CUBIC_IMG</code> as a
result of this command <strong class="purple">must</strong> not have a <a href="#VkImageViewType">VkImageViewType</a> of
<code>VK_IMAGE_VIEW_TYPE_3D</code>, <code>VK_IMAGE_VIEW_TYPE_CUBE</code>, or
<code>VK_IMAGE_VIEW_TYPE_CUBE_ARRAY</code></p>
</li>
<li>
<p><a id="VUID-vkCmdTraceRaysNV-commandBuffer-02484"></a>
If <code>commandBuffer</code> is an unprotected command buffer, and any
pipeline stage in the <code>VkPipeline</code> object bound to
<code>VK_PIPELINE_BIND_POINT_RAY_TRACING_NV</code> reads from or writes to any
image or buffer, that image or buffer <strong class="purple">must</strong> not be a protected image or
protected buffer</p>
</li>
<li>
<p><a id="VUID-vkCmdTraceRaysNV-commandBuffer-02485"></a>
If <code>commandBuffer</code> is a protected command buffer, and any pipeline
stage in the <code>VkPipeline</code> object bound to
<code>VK_PIPELINE_BIND_POINT_RAY_TRACING_NV</code> writes to any image or
buffer, that image or buffer <strong class="purple">must</strong> not be an unprotected image or
unprotected buffer</p>
</li>
<li>
<p><a id="VUID-vkCmdTraceRaysNV-commandBuffer-02486"></a>
If <code>commandBuffer</code> is a protected command buffer, and any pipeline
stage other than the ray tracing pipeline stage in the <code>VkPipeline</code>
object bound to <code>VK_PIPELINE_BIND_POINT_RAY_TRACING_NV</code> reads from
any image or buffer, the image or buffer <strong class="purple">must</strong> not be a protected image
or protected buffer</p>
</li>
<li>
<p><a id="VUID-vkCmdTraceRaysNV-flags-02487"></a>
Any <a href="#VkImage">VkImage</a> created with a <a href="#VkImageCreateInfo">VkImageCreateInfo</a>::<code>flags</code>
containing <code>VK_IMAGE_CREATE_CORNER_SAMPLED_BIT_NV</code> sampled as a
result of this command <strong class="purple">must</strong> only be sampled using a
<a href="#VkSamplerAddressMode">VkSamplerAddressMode</a> of
<code>VK_SAMPLER_ADDRESS_MODE_CLAMP_TO_EDGE</code></p>
</li>
</ul>
</div>
</div>
</div>
<div class="sidebarblock">
<div class="content">
<div class="title">Valid Usage (Implicit)</div>
<div class="ulist">
<ul>
<li>
<p><a id="VUID-vkCmdTraceRaysNV-commandBuffer-parameter"></a> <code>commandBuffer</code> <strong class="purple">must</strong> be a valid <code>VkCommandBuffer</code> handle</p>
</li>
<li>
<p><a id="VUID-vkCmdTraceRaysNV-raygenShaderBindingTableBuffer-parameter"></a> <code>raygenShaderBindingTableBuffer</code> <strong class="purple">must</strong> be a valid <code>VkBuffer</code> handle</p>
</li>
<li>
<p><a id="VUID-vkCmdTraceRaysNV-missShaderBindingTableBuffer-parameter"></a> If <code>missShaderBindingTableBuffer</code> is not <a href="#VK_NULL_HANDLE">VK_NULL_HANDLE</a>, <code>missShaderBindingTableBuffer</code> <strong class="purple">must</strong> be a valid <code>VkBuffer</code> handle</p>
</li>
<li>
<p><a id="VUID-vkCmdTraceRaysNV-hitShaderBindingTableBuffer-parameter"></a> If <code>hitShaderBindingTableBuffer</code> is not <a href="#VK_NULL_HANDLE">VK_NULL_HANDLE</a>, <code>hitShaderBindingTableBuffer</code> <strong class="purple">must</strong> be a valid <code>VkBuffer</code> handle</p>
</li>
<li>
<p><a id="VUID-vkCmdTraceRaysNV-callableShaderBindingTableBuffer-parameter"></a> If <code>callableShaderBindingTableBuffer</code> is not <a href="#VK_NULL_HANDLE">VK_NULL_HANDLE</a>, <code>callableShaderBindingTableBuffer</code> <strong class="purple">must</strong> be a valid <code>VkBuffer</code> handle</p>
</li>
<li>
<p><a id="VUID-vkCmdTraceRaysNV-commandBuffer-recording"></a> <code>commandBuffer</code> <strong class="purple">must</strong> be in the <a href="#commandbuffers-lifecycle">recording state</a></p>
</li>
<li>
<p><a id="VUID-vkCmdTraceRaysNV-commandBuffer-cmdpool"></a> The <code>VkCommandPool</code> that <code>commandBuffer</code> was allocated from <strong class="purple">must</strong> support compute operations</p>
</li>
<li>
<p><a id="VUID-vkCmdTraceRaysNV-commonparent"></a> Each of <code>callableShaderBindingTableBuffer</code>, <code>commandBuffer</code>, <code>hitShaderBindingTableBuffer</code>, <code>missShaderBindingTableBuffer</code>, and <code>raygenShaderBindingTableBuffer</code> that are valid handles <strong class="purple">must</strong> have been created, allocated, or retrieved from the same <code>VkDevice</code></p>
</li>
</ul>
</div>
</div>
</div>
<div class="sidebarblock">
<div class="content">
<div class="title">Host Synchronization</div>
<div class="ulist">
<ul>
<li>
<p>Host access to the <code>VkCommandPool</code> that <code>commandBuffer</code> was allocated from <strong class="purple">must</strong> be externally synchronized</p>
</li>
</ul>
</div>
</div>
</div>
<div class="sidebarblock">
<div class="content">
<div class="title">Command Properties</div>
<table class="tableblock frame-all grid-all stretch">
<colgroup>
<col style="width: 25%;">
<col style="width: 25%;">
<col style="width: 25%;">
<col style="width: 25%;">
</colgroup>
<thead>
<tr>
<th class="tableblock halign-left valign-top"><a href="#VkCommandBufferLevel">Command Buffer Levels</a></th>
<th class="tableblock halign-left valign-top"><a href="#vkCmdBeginRenderPass">Render Pass Scope</a></th>
<th class="tableblock halign-left valign-top"><a href="#VkQueueFlagBits">Supported Queue Types</a></th>
<th class="tableblock halign-left valign-top"><a href="#synchronization-pipeline-stages-types">Pipeline Type</a></th>
</tr>
</thead>
<tbody>
<tr>
<td class="tableblock halign-left valign-top"><p class="tableblock">Primary<br>
Secondary</p></td>
<td class="tableblock halign-left valign-top"><p class="tableblock">Both</p></td>
<td class="tableblock halign-left valign-top"><p class="tableblock">Compute</p></td>
<td class="tableblock halign-left valign-top"></td>
</tr>
</tbody>
</table>
</div>
</div>
</div>
<div class="sect3">
<h4 id="_see_also_95">See Also</h4>
<div class="paragraph">
<p><a href="#VkBuffer">VkBuffer</a>, <a href="#VkCommandBuffer">VkCommandBuffer</a>, <code>VkDeviceSize</code></p>
</div>
</div>
<div class="sect3">
<h4 id="_document_notes_95">Document Notes</h4>
<div class="paragraph">
<p>For more information, see the Vulkan Specification at URL</p>
</div>
<div class="paragraph">
<p><a href="https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#vkCmdTraceRaysNV" class="bare">https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#vkCmdTraceRaysNV</a></p>
</div>
<div class="paragraph">
<p>This page is extracted from the Vulkan Specification.
Fixes and changes should be made to the Specification, not directly.</p>
</div>
<div style="page-break-after: always;"></div>
</div>
</div>
<div class="sect2">
<h3 id="_vkcmdupdatebuffer3">vkCmdUpdateBuffer(3)</h3>
<div class="sect3">
<h4 id="_name_96">Name</h4>
<div class="paragraph">
<p>vkCmdUpdateBuffer - Update a buffer&#8217;s contents from host memory</p>
</div>
</div>
<div class="sect3">
<h4 id="_c_specification_96">C Specification</h4>
<div class="paragraph">
<p>To update buffer data inline in a command buffer, call:</p>
</div>
<div id="vkCmdUpdateBuffer" class="listingblock">
<div class="content">
<pre class="highlight"><code class="language-c++" data-lang="c++">void vkCmdUpdateBuffer(
    VkCommandBuffer                             commandBuffer,
    VkBuffer                                    dstBuffer,
    VkDeviceSize                                dstOffset,
    VkDeviceSize                                dataSize,
    const void*                                 pData);</code></pre>
</div>
</div>
</div>
<div class="sect3">
<h4 id="_parameters_96">Parameters</h4>
<div class="ulist">
<ul>
<li>
<p><code>commandBuffer</code> is the command buffer into which the command will be
recorded.</p>
</li>
<li>
<p><code>dstBuffer</code> is a handle to the buffer to be updated.</p>
</li>
<li>
<p><code>dstOffset</code> is the byte offset into the buffer to start updating,
and <strong class="purple">must</strong> be a multiple of 4.</p>
</li>
<li>
<p><code>dataSize</code> is the number of bytes to update, and <strong class="purple">must</strong> be a multiple
of 4.</p>
</li>
<li>
<p><code>pData</code> is a pointer to the source data for the buffer update, and
<strong class="purple">must</strong> be at least <code>dataSize</code> bytes in size.</p>
</li>
</ul>
</div>
</div>
<div class="sect3">
<h4 id="_description_96">Description</h4>
<div class="paragraph">
<p><code>dataSize</code> <strong class="purple">must</strong> be less than or equal to 65536 bytes.
For larger updates, applications <strong class="purple">can</strong> use buffer to buffer
<a href="vkspec.html#copies-buffers">copies</a>.</p>
</div>
<div class="admonitionblock note">
<table>
<tr>
<td class="icon">
<i class="fa icon-note" title="Note"></i>
</td>
<td class="content">
<div class="title">Note</div>
<div class="paragraph">
<p>Buffer updates performed with <code>vkCmdUpdateBuffer</code> first copy the data
into command buffer memory when the command is recorded (which requires
additional storage and may incur an additional allocation), and then copy
the data from the command buffer into <code>dstBuffer</code> when the command is
executed on a device.</p>
</div>
<div class="paragraph">
<p>The additional cost of this functionality compared to <a href="vkspec.html#copies-buffers">buffer to buffer copies</a> means it is only recommended for very small
amounts of data, and is why it is limited to only 65536 bytes.</p>
</div>
<div class="paragraph">
<p>Applications <strong class="purple">can</strong> work around this by issuing multiple
<code>vkCmdUpdateBuffer</code> commands to different ranges of the same buffer, but
it is strongly recommended that they <strong class="purple">should</strong> not.</p>
</div>
</td>
</tr>
</table>
</div>
<div class="paragraph">
<p>The source data is copied from the user pointer to the command buffer when
the command is called.</p>
</div>
<div class="paragraph">
<p><code>vkCmdUpdateBuffer</code> is only allowed outside of a render pass.
This command is treated as &#8220;transfer&#8221; operation, for the purposes of
synchronization barriers.
The <code>VK_BUFFER_USAGE_TRANSFER_DST_BIT</code> <strong class="purple">must</strong> be specified in <code>usage</code>
of <a href="#VkBufferCreateInfo">VkBufferCreateInfo</a> in order for the buffer to be compatible with
<code>vkCmdUpdateBuffer</code>.</p>
</div>
<div class="sidebarblock">
<div class="content">
<div class="title">Valid Usage</div>
<div class="ulist">
<ul>
<li>
<p><a id="VUID-vkCmdUpdateBuffer-dstOffset-00032"></a>
<code>dstOffset</code> <strong class="purple">must</strong> be less than the size of <code>dstBuffer</code></p>
</li>
<li>
<p><a id="VUID-vkCmdUpdateBuffer-dataSize-00033"></a>
<code>dataSize</code> <strong class="purple">must</strong> be less than or equal to the size of
<code>dstBuffer</code> minus <code>dstOffset</code></p>
</li>
<li>
<p><a id="VUID-vkCmdUpdateBuffer-dstBuffer-00034"></a>
<code>dstBuffer</code> <strong class="purple">must</strong> have been created with
<code>VK_BUFFER_USAGE_TRANSFER_DST_BIT</code> usage flag</p>
</li>
<li>
<p><a id="VUID-vkCmdUpdateBuffer-dstBuffer-00035"></a>
If <code>dstBuffer</code> is non-sparse then it <strong class="purple">must</strong> be bound completely and
contiguously to a single <code>VkDeviceMemory</code> object</p>
</li>
<li>
<p><a id="VUID-vkCmdUpdateBuffer-dstOffset-00036"></a>
<code>dstOffset</code> <strong class="purple">must</strong> be a multiple of <code>4</code></p>
</li>
<li>
<p><a id="VUID-vkCmdUpdateBuffer-dataSize-00037"></a>
<code>dataSize</code> <strong class="purple">must</strong> be less than or equal to <code>65536</code></p>
</li>
<li>
<p><a id="VUID-vkCmdUpdateBuffer-dataSize-00038"></a>
<code>dataSize</code> <strong class="purple">must</strong> be a multiple of <code>4</code></p>
</li>
<li>
<p><a id="VUID-vkCmdUpdateBuffer-commandBuffer-01813"></a>
If <code>commandBuffer</code> is an unprotected command buffer, then
<code>dstBuffer</code> <strong class="purple">must</strong> not be a protected buffer</p>
</li>
<li>
<p><a id="VUID-vkCmdUpdateBuffer-commandBuffer-01814"></a>
If <code>commandBuffer</code> is a protected command buffer, then
<code>dstBuffer</code> <strong class="purple">must</strong> not be an unprotected buffer</p>
</li>
</ul>
</div>
</div>
</div>
<div class="sidebarblock">
<div class="content">
<div class="title">Valid Usage (Implicit)</div>
<div class="ulist">
<ul>
<li>
<p><a id="VUID-vkCmdUpdateBuffer-commandBuffer-parameter"></a> <code>commandBuffer</code> <strong class="purple">must</strong> be a valid <code>VkCommandBuffer</code> handle</p>
</li>
<li>
<p><a id="VUID-vkCmdUpdateBuffer-dstBuffer-parameter"></a> <code>dstBuffer</code> <strong class="purple">must</strong> be a valid <code>VkBuffer</code> handle</p>
</li>
<li>
<p><a id="VUID-vkCmdUpdateBuffer-pData-parameter"></a> <code>pData</code> <strong class="purple">must</strong> be a valid pointer to an array of <code>dataSize</code> bytes</p>
</li>
<li>
<p><a id="VUID-vkCmdUpdateBuffer-commandBuffer-recording"></a> <code>commandBuffer</code> <strong class="purple">must</strong> be in the <a href="#commandbuffers-lifecycle">recording state</a></p>
</li>
<li>
<p><a id="VUID-vkCmdUpdateBuffer-commandBuffer-cmdpool"></a> The <code>VkCommandPool</code> that <code>commandBuffer</code> was allocated from <strong class="purple">must</strong> support transfer, graphics, or compute operations</p>
</li>
<li>
<p><a id="VUID-vkCmdUpdateBuffer-renderpass"></a> This command <strong class="purple">must</strong> only be called outside of a render pass instance</p>
</li>
<li>
<p><a id="VUID-vkCmdUpdateBuffer-dataSize-arraylength"></a> <code>dataSize</code> <strong class="purple">must</strong> be greater than <code>0</code></p>
</li>
<li>
<p><a id="VUID-vkCmdUpdateBuffer-commonparent"></a> Both of <code>commandBuffer</code>, and <code>dstBuffer</code> <strong class="purple">must</strong> have been created, allocated, or retrieved from the same <code>VkDevice</code></p>
</li>
</ul>
</div>
</div>
</div>
<div class="sidebarblock">
<div class="content">
<div class="title">Host Synchronization</div>
<div class="ulist">
<ul>
<li>
<p>Host access to <code>commandBuffer</code> <strong class="purple">must</strong> be externally synchronized</p>
</li>
<li>
<p>Host access to the <code>VkCommandPool</code> that <code>commandBuffer</code> was allocated from <strong class="purple">must</strong> be externally synchronized</p>
</li>
</ul>
</div>
</div>
</div>
<div class="sidebarblock">
<div class="content">
<div class="title">Command Properties</div>
<table class="tableblock frame-all grid-all stretch">
<colgroup>
<col style="width: 25%;">
<col style="width: 25%;">
<col style="width: 25%;">
<col style="width: 25%;">
</colgroup>
<thead>
<tr>
<th class="tableblock halign-left valign-top"><a href="#VkCommandBufferLevel">Command Buffer Levels</a></th>
<th class="tableblock halign-left valign-top"><a href="#vkCmdBeginRenderPass">Render Pass Scope</a></th>
<th class="tableblock halign-left valign-top"><a href="#VkQueueFlagBits">Supported Queue Types</a></th>
<th class="tableblock halign-left valign-top"><a href="#synchronization-pipeline-stages-types">Pipeline Type</a></th>
</tr>
</thead>
<tbody>
<tr>
<td class="tableblock halign-left valign-top"><p class="tableblock">Primary<br>
Secondary</p></td>
<td class="tableblock halign-left valign-top"><p class="tableblock">Outside</p></td>
<td class="tableblock halign-left valign-top"><p class="tableblock">Transfer<br>
Graphics<br>
Compute</p></td>
<td class="tableblock halign-left valign-top"><p class="tableblock">Transfer</p></td>
</tr>
</tbody>
</table>
</div>
</div>
</div>
<div class="sect3">
<h4 id="_see_also_96">See Also</h4>
<div class="paragraph">
<p><a href="#VkBuffer">VkBuffer</a>, <a href="#VkCommandBuffer">VkCommandBuffer</a>, <code>VkDeviceSize</code></p>
</div>
</div>
<div class="sect3">
<h4 id="_document_notes_96">Document Notes</h4>
<div class="paragraph">
<p>For more information, see the Vulkan Specification at URL</p>
</div>
<div class="paragraph">
<p><a href="https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#vkCmdUpdateBuffer" class="bare">https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#vkCmdUpdateBuffer</a></p>
</div>
<div class="paragraph">
<p>This page is extracted from the Vulkan Specification.
Fixes and changes should be made to the Specification, not directly.</p>
</div>
<div style="page-break-after: always;"></div>
</div>
</div>
<div class="sect2">
<h3 id="_vkcmdwaitevents3">vkCmdWaitEvents(3)</h3>
<div class="sect3">
<h4 id="_name_97">Name</h4>
<div class="paragraph">
<p>vkCmdWaitEvents - Wait for one or more events and insert a set of memory</p>
</div>
</div>
<div class="sect3">
<h4 id="_c_specification_97">C Specification</h4>
<div class="paragraph">
<p>To wait for one or more events to enter the signaled state on a device,
call:</p>
</div>
<div id="vkCmdWaitEvents" class="listingblock">
<div class="content">
<pre class="highlight"><code class="language-c++" data-lang="c++">void vkCmdWaitEvents(
    VkCommandBuffer                             commandBuffer,
    uint32_t                                    eventCount,
    const VkEvent*                              pEvents,
    VkPipelineStageFlags                        srcStageMask,
    VkPipelineStageFlags                        dstStageMask,
    uint32_t                                    memoryBarrierCount,
    const VkMemoryBarrier*                      pMemoryBarriers,
    uint32_t                                    bufferMemoryBarrierCount,
    const VkBufferMemoryBarrier*                pBufferMemoryBarriers,
    uint32_t                                    imageMemoryBarrierCount,
    const VkImageMemoryBarrier*                 pImageMemoryBarriers);</code></pre>
</div>
</div>
</div>
<div class="sect3">
<h4 id="_parameters_97">Parameters</h4>
<div class="ulist">
<ul>
<li>
<p><code>commandBuffer</code> is the command buffer into which the command is
recorded.</p>
</li>
<li>
<p><code>eventCount</code> is the length of the <code>pEvents</code> array.</p>
</li>
<li>
<p><code>pEvents</code> is an array of event object handles to wait on.</p>
</li>
<li>
<p><code>srcStageMask</code> is a bitmask of <a href="#VkPipelineStageFlagBits">VkPipelineStageFlagBits</a>
specifying the <a href="vkspec.html#synchronization-pipeline-stages">source stage mask</a>.</p>
</li>
<li>
<p><code>dstStageMask</code> is a bitmask of <a href="#VkPipelineStageFlagBits">VkPipelineStageFlagBits</a>
specifying the <a href="vkspec.html#synchronization-pipeline-stages">destination stage
mask</a>.</p>
</li>
<li>
<p><code>memoryBarrierCount</code> is the length of the <code>pMemoryBarriers</code>
array.</p>
</li>
<li>
<p><code>pMemoryBarriers</code> is a pointer to an array of <a href="#VkMemoryBarrier">VkMemoryBarrier</a>
structures.</p>
</li>
<li>
<p><code>bufferMemoryBarrierCount</code> is the length of the
<code>pBufferMemoryBarriers</code> array.</p>
</li>
<li>
<p><code>pBufferMemoryBarriers</code> is a pointer to an array of
<a href="#VkBufferMemoryBarrier">VkBufferMemoryBarrier</a> structures.</p>
</li>
<li>
<p><code>imageMemoryBarrierCount</code> is the length of the
<code>pImageMemoryBarriers</code> array.</p>
</li>
<li>
<p><code>pImageMemoryBarriers</code> is a pointer to an array of
<a href="#VkImageMemoryBarrier">VkImageMemoryBarrier</a> structures.</p>
</li>
</ul>
</div>
</div>
<div class="sect3">
<h4 id="_description_97">Description</h4>
<div class="paragraph">
<p>When <code>vkCmdWaitEvents</code> is submitted to a queue, it defines a memory
dependency between prior event signal operations on the same queue or the
host, and subsequent commands.
<code>vkCmdWaitEvents</code> <strong class="purple">must</strong> not be used to wait on event signal operations
occurring on other queues.</p>
</div>
<div class="paragraph">
<p>The first synchronization scope only includes event signal operations that
operate on members of <code>pEvents</code>, and the operations that happened-before
the event signal operations.
Event signal operations performed by <a href="#vkCmdSetEvent">vkCmdSetEvent</a> that occur earlier
in <a href="vkspec.html#synchronization-submission-order">submission order</a> are included in the
first synchronization scope, if the <a href="vkspec.html#synchronization-pipeline-stages-order">logically latest</a> pipeline stage in their <code>stageMask</code> parameter is
<a href="vkspec.html#synchronization-pipeline-stages-order">logically earlier</a> than or equal
to the <a href="vkspec.html#synchronization-pipeline-stages-order">logically latest</a> pipeline
stage in <code>srcStageMask</code>.
Event signal operations performed by <a href="#vkSetEvent">vkSetEvent</a> are only included in
the first synchronization scope if <code>VK_PIPELINE_STAGE_HOST_BIT</code> is
included in <code>srcStageMask</code>.</p>
</div>
<div class="paragraph">
<p>The second <a href="vkspec.html#synchronization-dependencies-scopes">synchronization scope</a>
includes all commands that occur later in
<a href="vkspec.html#synchronization-submission-order">submission order</a>.
The second synchronization scope is limited to operations on the pipeline
stages determined by the <a href="vkspec.html#synchronization-pipeline-stages-masks">destination stage mask</a> specified by <code>dstStageMask</code>.</p>
</div>
<div class="paragraph">
<p>The first <a href="vkspec.html#synchronization-dependencies-access-scopes">access scope</a> is
limited to access in the pipeline stages determined by the
<a href="vkspec.html#synchronization-pipeline-stages-masks">source stage mask</a> specified by
<code>srcStageMask</code>.
Within that, the first access scope only includes the first access scopes
defined by elements of the <code>pMemoryBarriers</code>,
<code>pBufferMemoryBarriers</code> and <code>pImageMemoryBarriers</code> arrays, which
each define a set of <a href="vkspec.html#synchronization-memory-barriers">memory barriers</a>.
If no memory barriers are specified, then the first access scope includes no
accesses.</p>
</div>
<div class="paragraph">
<p>The second <a href="vkspec.html#synchronization-dependencies-access-scopes">access scope</a> is
limited to access in the pipeline stages determined by the
<a href="vkspec.html#synchronization-pipeline-stages-masks">destination stage mask</a> specified
by <code>dstStageMask</code>.
Within that, the second access scope only includes the second access scopes
defined by elements of the <code>pMemoryBarriers</code>,
<code>pBufferMemoryBarriers</code> and <code>pImageMemoryBarriers</code> arrays, which
each define a set of <a href="vkspec.html#synchronization-memory-barriers">memory barriers</a>.
If no memory barriers are specified, then the second access scope includes
no accesses.</p>
</div>
<div class="admonitionblock note">
<table>
<tr>
<td class="icon">
<i class="fa icon-note" title="Note"></i>
</td>
<td class="content">
<div class="title">Note</div>
<div class="paragraph">
<p><a href="#vkCmdWaitEvents">vkCmdWaitEvents</a> is used with <a href="#vkCmdSetEvent">vkCmdSetEvent</a> to define a memory
dependency between two sets of action commands, roughly in the same way as
pipeline barriers, but split into two commands such that work between the
two <strong class="purple">may</strong> execute unhindered.</p>
</div>
</td>
</tr>
</table>
</div>
<div class="admonitionblock note">
<table>
<tr>
<td class="icon">
<i class="fa icon-note" title="Note"></i>
</td>
<td class="content">
<div class="title">Note</div>
<div class="paragraph">
<p>Applications <strong class="purple">should</strong> be careful to avoid race conditions when using events.
There is no direct ordering guarantee between a <a href="#vkCmdResetEvent">vkCmdResetEvent</a>
command and a <a href="#vkCmdWaitEvents">vkCmdWaitEvents</a> command submitted after it, so some
other execution dependency <strong class="purple">must</strong> be included between these commands (e.g. a
semaphore).</p>
</div>
</td>
</tr>
</table>
</div>
<div class="sidebarblock">
<div class="content">
<div class="title">Valid Usage</div>
<div class="ulist">
<ul>
<li>
<p><a id="VUID-vkCmdWaitEvents-srcStageMask-01158"></a>
<code>srcStageMask</code> <strong class="purple">must</strong> be the bitwise OR of the <code>stageMask</code>
parameter used in previous calls to <code>vkCmdSetEvent</code> with any of the
members of <code>pEvents</code> and <code>VK_PIPELINE_STAGE_HOST_BIT</code> if any of
the members of <code>pEvents</code> was set using <code>vkSetEvent</code></p>
</li>
<li>
<p><a id="VUID-vkCmdWaitEvents-srcStageMask-01159"></a>
If the <a href="vkspec.html#features-geometryShader">geometry shaders</a> feature is not
enabled, <code>srcStageMask</code> <strong class="purple">must</strong> not contain
<code>VK_PIPELINE_STAGE_GEOMETRY_SHADER_BIT</code></p>
</li>
<li>
<p><a id="VUID-vkCmdWaitEvents-dstStageMask-01160"></a>
If the <a href="vkspec.html#features-geometryShader">geometry shaders</a> feature is not
enabled, <code>dstStageMask</code> <strong class="purple">must</strong> not contain
<code>VK_PIPELINE_STAGE_GEOMETRY_SHADER_BIT</code></p>
</li>
<li>
<p><a id="VUID-vkCmdWaitEvents-srcStageMask-01161"></a>
If the <a href="vkspec.html#features-tessellationShader">tessellation shaders</a> feature is
not enabled, <code>srcStageMask</code> <strong class="purple">must</strong> not contain
<code>VK_PIPELINE_STAGE_TESSELLATION_CONTROL_SHADER_BIT</code> or
<code>VK_PIPELINE_STAGE_TESSELLATION_EVALUATION_SHADER_BIT</code></p>
</li>
<li>
<p><a id="VUID-vkCmdWaitEvents-dstStageMask-01162"></a>
If the <a href="vkspec.html#features-tessellationShader">tessellation shaders</a> feature is
not enabled, <code>dstStageMask</code> <strong class="purple">must</strong> not contain
<code>VK_PIPELINE_STAGE_TESSELLATION_CONTROL_SHADER_BIT</code> or
<code>VK_PIPELINE_STAGE_TESSELLATION_EVALUATION_SHADER_BIT</code></p>
</li>
<li>
<p><a id="VUID-vkCmdWaitEvents-pEvents-01163"></a>
If <code>pEvents</code> includes one or more events that will be signaled by
<code>vkSetEvent</code> after <code>commandBuffer</code> has been submitted to a
queue, then <code>vkCmdWaitEvents</code> <strong class="purple">must</strong> not be called inside a render
pass instance</p>
</li>
<li>
<p><a id="VUID-vkCmdWaitEvents-srcStageMask-01164"></a>
Any pipeline stage included in <code>srcStageMask</code> or <code>dstStageMask</code>
<strong class="purple">must</strong> be supported by the capabilities of the queue family specified by
the <code>queueFamilyIndex</code> member of the <a href="#VkCommandPoolCreateInfo">VkCommandPoolCreateInfo</a>
structure that was used to create the <code>VkCommandPool</code> that
<code>commandBuffer</code> was allocated from, as specified in the
<a href="vkspec.html#synchronization-pipeline-stages-supported">table of supported pipeline
stages</a>.</p>
</li>
<li>
<p><a id="VUID-vkCmdWaitEvents-pMemoryBarriers-01165"></a>
Each element of <code>pMemoryBarriers</code>, <code>pBufferMemoryBarriers</code> or
<code>pImageMemoryBarriers</code> <strong class="purple">must</strong> not have any access flag included in
its <code>srcAccessMask</code> member if that bit is not supported by any of
the pipeline stages in <code>srcStageMask</code>, as specified in the
<a href="vkspec.html#synchronization-access-types-supported">table of supported access
types</a>.</p>
</li>
<li>
<p><a id="VUID-vkCmdWaitEvents-pMemoryBarriers-01166"></a>
Each element of <code>pMemoryBarriers</code>, <code>pBufferMemoryBarriers</code> or
<code>pImageMemoryBarriers</code> <strong class="purple">must</strong> not have any access flag included in
its <code>dstAccessMask</code> member if that bit is not supported by any of
the pipeline stages in <code>dstStageMask</code>, as specified in the
<a href="vkspec.html#synchronization-access-types-supported">table of supported access
types</a>.</p>
</li>
<li>
<p><a id="VUID-vkCmdWaitEvents-commandBuffer-01167"></a>
<code>commandBuffer</code>&#8217;s current device mask <strong class="purple">must</strong> include exactly one
physical device.</p>
</li>
<li>
<p><a id="VUID-vkCmdWaitEvents-srcStageMask-02111"></a>
If the <a href="vkspec.html#features-meshShader">mesh shaders</a> feature is not enabled,
<code>srcStageMask</code> <strong class="purple">must</strong> not contain
<code>VK_PIPELINE_STAGE_MESH_SHADER_BIT_NV</code></p>
</li>
<li>
<p><a id="VUID-vkCmdWaitEvents-srcStageMask-02112"></a>
If the <a href="vkspec.html#features-taskShader">task shaders</a> feature is not enabled,
<code>srcStageMask</code> <strong class="purple">must</strong> not contain
<code>VK_PIPELINE_STAGE_TASK_SHADER_BIT_NV</code></p>
</li>
<li>
<p><a id="VUID-vkCmdWaitEvents-dstStageMask-02113"></a>
If the <a href="vkspec.html#features-meshShader">mesh shaders</a> feature is not enabled,
<code>dstStageMask</code> <strong class="purple">must</strong> not contain
<code>VK_PIPELINE_STAGE_MESH_SHADER_BIT_NV</code></p>
</li>
<li>
<p><a id="VUID-vkCmdWaitEvents-dstStageMask-02114"></a>
If the <a href="vkspec.html#features-taskShader">task shaders</a> feature is not enabled,
<code>dstStageMask</code> <strong class="purple">must</strong> not contain
<code>VK_PIPELINE_STAGE_TASK_SHADER_BIT_NV</code></p>
</li>
</ul>
</div>
</div>
</div>
<div class="sidebarblock">
<div class="content">
<div class="title">Valid Usage (Implicit)</div>
<div class="ulist">
<ul>
<li>
<p><a id="VUID-vkCmdWaitEvents-commandBuffer-parameter"></a> <code>commandBuffer</code> <strong class="purple">must</strong> be a valid <code>VkCommandBuffer</code> handle</p>
</li>
<li>
<p><a id="VUID-vkCmdWaitEvents-pEvents-parameter"></a> <code>pEvents</code> <strong class="purple">must</strong> be a valid pointer to an array of <code>eventCount</code> valid <code>VkEvent</code> handles</p>
</li>
<li>
<p><a id="VUID-vkCmdWaitEvents-srcStageMask-parameter"></a> <code>srcStageMask</code> <strong class="purple">must</strong> be a valid combination of <a href="#VkPipelineStageFlagBits">VkPipelineStageFlagBits</a> values</p>
</li>
<li>
<p><a id="VUID-vkCmdWaitEvents-srcStageMask-requiredbitmask"></a> <code>srcStageMask</code> <strong class="purple">must</strong> not be <code>0</code></p>
</li>
<li>
<p><a id="VUID-vkCmdWaitEvents-dstStageMask-parameter"></a> <code>dstStageMask</code> <strong class="purple">must</strong> be a valid combination of <a href="#VkPipelineStageFlagBits">VkPipelineStageFlagBits</a> values</p>
</li>
<li>
<p><a id="VUID-vkCmdWaitEvents-dstStageMask-requiredbitmask"></a> <code>dstStageMask</code> <strong class="purple">must</strong> not be <code>0</code></p>
</li>
<li>
<p><a id="VUID-vkCmdWaitEvents-pMemoryBarriers-parameter"></a> If <code>memoryBarrierCount</code> is not <code>0</code>, <code>pMemoryBarriers</code> <strong class="purple">must</strong> be a valid pointer to an array of <code>memoryBarrierCount</code> valid <code>VkMemoryBarrier</code> structures</p>
</li>
<li>
<p><a id="VUID-vkCmdWaitEvents-pBufferMemoryBarriers-parameter"></a> If <code>bufferMemoryBarrierCount</code> is not <code>0</code>, <code>pBufferMemoryBarriers</code> <strong class="purple">must</strong> be a valid pointer to an array of <code>bufferMemoryBarrierCount</code> valid <code>VkBufferMemoryBarrier</code> structures</p>
</li>
<li>
<p><a id="VUID-vkCmdWaitEvents-pImageMemoryBarriers-parameter"></a> If <code>imageMemoryBarrierCount</code> is not <code>0</code>, <code>pImageMemoryBarriers</code> <strong class="purple">must</strong> be a valid pointer to an array of <code>imageMemoryBarrierCount</code> valid <code>VkImageMemoryBarrier</code> structures</p>
</li>
<li>
<p><a id="VUID-vkCmdWaitEvents-commandBuffer-recording"></a> <code>commandBuffer</code> <strong class="purple">must</strong> be in the <a href="#commandbuffers-lifecycle">recording state</a></p>
</li>
<li>
<p><a id="VUID-vkCmdWaitEvents-commandBuffer-cmdpool"></a> The <code>VkCommandPool</code> that <code>commandBuffer</code> was allocated from <strong class="purple">must</strong> support graphics, or compute operations</p>
</li>
<li>
<p><a id="VUID-vkCmdWaitEvents-eventCount-arraylength"></a> <code>eventCount</code> <strong class="purple">must</strong> be greater than <code>0</code></p>
</li>
<li>
<p><a id="VUID-vkCmdWaitEvents-commonparent"></a> Both of <code>commandBuffer</code>, and the elements of <code>pEvents</code> <strong class="purple">must</strong> have been created, allocated, or retrieved from the same <code>VkDevice</code></p>
</li>
</ul>
</div>
</div>
</div>
<div class="sidebarblock">
<div class="content">
<div class="title">Host Synchronization</div>
<div class="ulist">
<ul>
<li>
<p>Host access to <code>commandBuffer</code> <strong class="purple">must</strong> be externally synchronized</p>
</li>
<li>
<p>Host access to the <code>VkCommandPool</code> that <code>commandBuffer</code> was allocated from <strong class="purple">must</strong> be externally synchronized</p>
</li>
</ul>
</div>
</div>
</div>
<div class="sidebarblock">
<div class="content">
<div class="title">Command Properties</div>
<table class="tableblock frame-all grid-all stretch">
<colgroup>
<col style="width: 25%;">
<col style="width: 25%;">
<col style="width: 25%;">
<col style="width: 25%;">
</colgroup>
<thead>
<tr>
<th class="tableblock halign-left valign-top"><a href="#VkCommandBufferLevel">Command Buffer Levels</a></th>
<th class="tableblock halign-left valign-top"><a href="#vkCmdBeginRenderPass">Render Pass Scope</a></th>
<th class="tableblock halign-left valign-top"><a href="#VkQueueFlagBits">Supported Queue Types</a></th>
<th class="tableblock halign-left valign-top"><a href="#synchronization-pipeline-stages-types">Pipeline Type</a></th>
</tr>
</thead>
<tbody>
<tr>
<td class="tableblock halign-left valign-top"><p class="tableblock">Primary<br>
Secondary</p></td>
<td class="tableblock halign-left valign-top"><p class="tableblock">Both</p></td>
<td class="tableblock halign-left valign-top"><p class="tableblock">Graphics<br>
Compute</p></td>
<td class="tableblock halign-left valign-top"></td>
</tr>
</tbody>
</table>
</div>
</div>
</div>
<div class="sect3">
<h4 id="_see_also_97">See Also</h4>
<div class="paragraph">
<p><a href="#VkBufferMemoryBarrier">VkBufferMemoryBarrier</a>, <a href="#VkCommandBuffer">VkCommandBuffer</a>, <a href="#VkEvent">VkEvent</a>, <a href="#VkImageMemoryBarrier">VkImageMemoryBarrier</a>, <a href="#VkMemoryBarrier">VkMemoryBarrier</a>, <a href="#VkPipelineStageFlags">VkPipelineStageFlags</a></p>
</div>
</div>
<div class="sect3">
<h4 id="_document_notes_97">Document Notes</h4>
<div class="paragraph">
<p>For more information, see the Vulkan Specification at URL</p>
</div>
<div class="paragraph">
<p><a href="https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#vkCmdWaitEvents" class="bare">https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#vkCmdWaitEvents</a></p>
</div>
<div class="paragraph">
<p>This page is extracted from the Vulkan Specification.
Fixes and changes should be made to the Specification, not directly.</p>
</div>
<div style="page-break-after: always;"></div>
</div>
</div>
<div class="sect2">
<h3 id="_vkcmdwriteaccelerationstructurespropertiesnv3">vkCmdWriteAccelerationStructuresPropertiesNV(3)</h3>
<div class="sect3">
<h4 id="_name_98">Name</h4>
<div class="paragraph">
<p>vkCmdWriteAccelerationStructuresPropertiesNV - Write acceleration structure result parameters to query results.</p>
</div>
</div>
<div class="sect3">
<h4 id="_c_specification_98">C Specification</h4>
<div class="paragraph">
<p>To query acceleration structure size parameters call:</p>
</div>
<div id="vkCmdWriteAccelerationStructuresPropertiesNV" class="listingblock">
<div class="content">
<pre class="highlight"><code class="language-c++" data-lang="c++">void vkCmdWriteAccelerationStructuresPropertiesNV(
    VkCommandBuffer                             commandBuffer,
    uint32_t                                    accelerationStructureCount,
    const VkAccelerationStructureNV*            pAccelerationStructures,
    VkQueryType                                 queryType,
    VkQueryPool                                 queryPool,
    uint32_t                                    firstQuery);</code></pre>
</div>
</div>
</div>
<div class="sect3">
<h4 id="_parameters_98">Parameters</h4>
<div class="ulist">
<ul>
<li>
<p><code>commandBuffer</code> is the command buffer into which the command will be
recorded.</p>
</li>
<li>
<p><code>accelerationStructureCount</code> is the count of acceleration structures
for which to query the property.</p>
</li>
<li>
<p><code>pAccelerationStructures</code> points to an array of existing previously
built acceleration structures.</p>
</li>
<li>
<p><code>queryType</code> is a <a href="#VkQueryType">VkQueryType</a> value specifying the type of
queries managed by the pool.</p>
</li>
<li>
<p><code>queryPool</code> is the query pool that will manage the results of the
query.</p>
</li>
<li>
<p><code>firstQuery</code> is the first query index within the query pool that
will contain the <code>accelerationStructureCount</code> number of results.</p>
</li>
</ul>
</div>
</div>
<div class="sect3">
<h4 id="_description_98">Description</h4>
<div class="sidebarblock">
<div class="content">
<div class="title">Valid Usage</div>
<div class="ulist">
<ul>
<li>
<p><a id="VUID-vkCmdWriteAccelerationStructuresPropertiesNV-queryType-02242"></a>
<code>queryType</code> <strong class="purple">must</strong> be
<code>VK_QUERY_TYPE_ACCELERATION_STRUCTURE_COMPACTED_SIZE_NV</code></p>
</li>
<li>
<p><a id="VUID-vkCmdWriteAccelerationStructuresPropertiesNV-queryPool-02493"></a>
<code>queryPool</code> <strong class="purple">must</strong> have been created with a <code>queryType</code> matching
<code>queryType</code></p>
</li>
<li>
<p><a id="VUID-vkCmdWriteAccelerationStructuresPropertiesNV-queryPool-02494"></a>
The queries identified by <code>queryPool</code> and <code>firstQuery</code> <strong class="purple">must</strong> be
<em>unavailable</em></p>
</li>
<li>
<p><a id="VUID-vkCmdWriteAccelerationStructuresPropertiesNV-accelerationStructures-02495"></a>
All acceleration structures in <code>accelerationStructures</code> <strong class="purple">must</strong> have
been built with
<code>VK_BUILD_ACCELERATION_STRUCTURE_ALLOW_COMPACTION_BIT_NV</code> if
<code>queryType</code> is
<code>VK_QUERY_TYPE_ACCELERATION_STRUCTURE_COMPACTED_SIZE_NV</code></p>
</li>
</ul>
</div>
</div>
</div>
<div class="sidebarblock">
<div class="content">
<div class="title">Valid Usage (Implicit)</div>
<div class="ulist">
<ul>
<li>
<p><a id="VUID-vkCmdWriteAccelerationStructuresPropertiesNV-commandBuffer-parameter"></a> <code>commandBuffer</code> <strong class="purple">must</strong> be a valid <code>VkCommandBuffer</code> handle</p>
</li>
<li>
<p><a id="VUID-vkCmdWriteAccelerationStructuresPropertiesNV-pAccelerationStructures-parameter"></a> <code>pAccelerationStructures</code> <strong class="purple">must</strong> be a valid pointer to an array of <code>accelerationStructureCount</code> valid <code>VkAccelerationStructureNV</code> handles</p>
</li>
<li>
<p><a id="VUID-vkCmdWriteAccelerationStructuresPropertiesNV-queryType-parameter"></a> <code>queryType</code> <strong class="purple">must</strong> be a valid <a href="#VkQueryType">VkQueryType</a> value</p>
</li>
<li>
<p><a id="VUID-vkCmdWriteAccelerationStructuresPropertiesNV-queryPool-parameter"></a> <code>queryPool</code> <strong class="purple">must</strong> be a valid <code>VkQueryPool</code> handle</p>
</li>
<li>
<p><a id="VUID-vkCmdWriteAccelerationStructuresPropertiesNV-commandBuffer-recording"></a> <code>commandBuffer</code> <strong class="purple">must</strong> be in the <a href="#commandbuffers-lifecycle">recording state</a></p>
</li>
<li>
<p><a id="VUID-vkCmdWriteAccelerationStructuresPropertiesNV-commandBuffer-cmdpool"></a> The <code>VkCommandPool</code> that <code>commandBuffer</code> was allocated from <strong class="purple">must</strong> support compute operations</p>
</li>
<li>
<p><a id="VUID-vkCmdWriteAccelerationStructuresPropertiesNV-accelerationStructureCount-arraylength"></a> <code>accelerationStructureCount</code> <strong class="purple">must</strong> be greater than <code>0</code></p>
</li>
<li>
<p><a id="VUID-vkCmdWriteAccelerationStructuresPropertiesNV-commonparent"></a> Each of <code>commandBuffer</code>, <code>queryPool</code>, and the elements of <code>pAccelerationStructures</code> <strong class="purple">must</strong> have been created, allocated, or retrieved from the same <code>VkDevice</code></p>
</li>
</ul>
</div>
</div>
</div>
<div class="sidebarblock">
<div class="content">
<div class="title">Host Synchronization</div>
<div class="ulist">
<ul>
<li>
<p>Host access to the <code>VkCommandPool</code> that <code>commandBuffer</code> was allocated from <strong class="purple">must</strong> be externally synchronized</p>
</li>
</ul>
</div>
</div>
</div>
<div class="sidebarblock">
<div class="content">
<div class="title">Command Properties</div>
<table class="tableblock frame-all grid-all stretch">
<colgroup>
<col style="width: 25%;">
<col style="width: 25%;">
<col style="width: 25%;">
<col style="width: 25%;">
</colgroup>
<thead>
<tr>
<th class="tableblock halign-left valign-top"><a href="#VkCommandBufferLevel">Command Buffer Levels</a></th>
<th class="tableblock halign-left valign-top"><a href="#vkCmdBeginRenderPass">Render Pass Scope</a></th>
<th class="tableblock halign-left valign-top"><a href="#VkQueueFlagBits">Supported Queue Types</a></th>
<th class="tableblock halign-left valign-top"><a href="#synchronization-pipeline-stages-types">Pipeline Type</a></th>
</tr>
</thead>
<tbody>
<tr>
<td class="tableblock halign-left valign-top"><p class="tableblock">Primary<br>
Secondary</p></td>
<td class="tableblock halign-left valign-top"><p class="tableblock">Both</p></td>
<td class="tableblock halign-left valign-top"><p class="tableblock">Compute</p></td>
<td class="tableblock halign-left valign-top"></td>
</tr>
</tbody>
</table>
</div>
</div>
</div>
<div class="sect3">
<h4 id="_see_also_98">See Also</h4>
<div class="paragraph">
<p><a href="#VkAccelerationStructureNV">VkAccelerationStructureNV</a>, <a href="#VkCommandBuffer">VkCommandBuffer</a>, <a href="#VkQueryPool">VkQueryPool</a>, <a href="#VkQueryType">VkQueryType</a></p>
</div>
</div>
<div class="sect3">
<h4 id="_document_notes_98">Document Notes</h4>
<div class="paragraph">
<p>For more information, see the Vulkan Specification at URL</p>
</div>
<div class="paragraph">
<p><a href="https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#vkCmdWriteAccelerationStructuresPropertiesNV" class="bare">https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#vkCmdWriteAccelerationStructuresPropertiesNV</a></p>
</div>
<div class="paragraph">
<p>This page is extracted from the Vulkan Specification.
Fixes and changes should be made to the Specification, not directly.</p>
</div>
<div style="page-break-after: always;"></div>
</div>
</div>
<div class="sect2">
<h3 id="_vkcmdwritebuffermarkeramd3">vkCmdWriteBufferMarkerAMD(3)</h3>
<div class="sect3">
<h4 id="_name_99">Name</h4>
<div class="paragraph">
<p>vkCmdWriteBufferMarkerAMD - Execute a pipelined write of a marker value into a buffer</p>
</div>
</div>
<div class="sect3">
<h4 id="_c_specification_99">C Specification</h4>
<div class="paragraph">
<p>To write a 32-bit marker value into a buffer as a pipelined operation, call:</p>
</div>
<div id="vkCmdWriteBufferMarkerAMD" class="listingblock">
<div class="content">
<pre class="highlight"><code class="language-c++" data-lang="c++">void vkCmdWriteBufferMarkerAMD(
    VkCommandBuffer                             commandBuffer,
    VkPipelineStageFlagBits                     pipelineStage,
    VkBuffer                                    dstBuffer,
    VkDeviceSize                                dstOffset,
    uint32_t                                    marker);</code></pre>
</div>
</div>
</div>
<div class="sect3">
<h4 id="_parameters_99">Parameters</h4>
<div class="ulist">
<ul>
<li>
<p><code>commandBuffer</code> is the command buffer into which the command will be
recorded.</p>
</li>
<li>
<p><code>pipelineStage</code> is one of the <a href="#VkPipelineStageFlagBits">VkPipelineStageFlagBits</a> values,
specifying the pipeline stage whose completion triggers the marker
write.</p>
</li>
<li>
<p><code>dstBuffer</code> is the buffer where the marker will be written to.</p>
</li>
<li>
<p><code>dstOffset</code> is the byte offset into the buffer where the marker will
be written to.</p>
</li>
<li>
<p><code>marker</code> is the 32-bit value of the marker.</p>
</li>
</ul>
</div>
</div>
<div class="sect3">
<h4 id="_description_99">Description</h4>
<div class="paragraph">
<p>The command will write the 32-bit marker value into the buffer only after
all preceding commands have finished executing up to at least the specified
pipeline stage.
This includes the completion of other preceding
<code>vkCmdWriteBufferMarkerAMD</code> commands so long as their specified pipeline
stages occur either at the same time or earlier than this command&#8217;s
specified <code>pipelineStage</code>.</p>
</div>
<div class="paragraph">
<p>While consecutive buffer marker writes with the same <code>pipelineStage</code>
parameter are implicitly complete in submission order, memory and execution
dependencies between buffer marker writes and other operations must still be
explicitly ordered using synchronization commands.
The access scope for buffer marker writes falls under the
<code>VK_ACCESS_TRANSFER_WRITE_BIT</code>, and the pipeline stages for identifying
the synchronization scope <strong class="purple">must</strong> include both <code>pipelineStage</code> and
<code>VK_PIPELINE_STAGE_TRANSFER_BIT</code>.</p>
</div>
<div class="admonitionblock note">
<table>
<tr>
<td class="icon">
<i class="fa icon-note" title="Note"></i>
</td>
<td class="content">
<div class="title">Note</div>
<div class="paragraph">
<p>Similar to <code>vkCmdWriteTimestamp</code>, if an implementation is unable to
write a marker at any specific pipeline stage, it <strong class="purple">may</strong> instead do so at any
logically later stage.</p>
</div>
</td>
</tr>
</table>
</div>
<div class="admonitionblock note">
<table>
<tr>
<td class="icon">
<i class="fa icon-note" title="Note"></i>
</td>
<td class="content">
<div class="title">Note</div>
<div class="paragraph">
<p>Implementations <strong class="purple">may</strong> only support a limited number of pipelined marker write
operations in flight at a given time, thus excessive number of marker write
operations <strong class="purple">may</strong> degrade command execution performance.</p>
</div>
</td>
</tr>
</table>
</div>
<div class="sidebarblock">
<div class="content">
<div class="title">Valid Usage</div>
<div class="ulist">
<ul>
<li>
<p><a id="VUID-vkCmdWriteBufferMarkerAMD-dstOffset-01798"></a>
<code>dstOffset</code> <strong class="purple">must</strong> be less than or equal to the size of
<code>dstBuffer</code> minus <code>4</code>.</p>
</li>
<li>
<p><a id="VUID-vkCmdWriteBufferMarkerAMD-dstBuffer-01799"></a>
<code>dstBuffer</code> <strong class="purple">must</strong> have been created with
<code>VK_BUFFER_USAGE_TRANSFER_DST_BIT</code> usage flag</p>
</li>
<li>
<p><a id="VUID-vkCmdWriteBufferMarkerAMD-dstBuffer-01800"></a>
If <code>dstBuffer</code> is non-sparse then it <strong class="purple">must</strong> be bound completely and
contiguously to a single <code>VkDeviceMemory</code> object</p>
</li>
<li>
<p><a id="VUID-vkCmdWriteBufferMarkerAMD-dstOffset-01801"></a>
<code>dstOffset</code> <strong class="purple">must</strong> be a multiple of <code>4</code></p>
</li>
</ul>
</div>
</div>
</div>
<div class="sidebarblock">
<div class="content">
<div class="title">Valid Usage (Implicit)</div>
<div class="ulist">
<ul>
<li>
<p><a id="VUID-vkCmdWriteBufferMarkerAMD-commandBuffer-parameter"></a> <code>commandBuffer</code> <strong class="purple">must</strong> be a valid <code>VkCommandBuffer</code> handle</p>
</li>
<li>
<p><a id="VUID-vkCmdWriteBufferMarkerAMD-pipelineStage-parameter"></a> <code>pipelineStage</code> <strong class="purple">must</strong> be a valid <a href="#VkPipelineStageFlagBits">VkPipelineStageFlagBits</a> value</p>
</li>
<li>
<p><a id="VUID-vkCmdWriteBufferMarkerAMD-dstBuffer-parameter"></a> <code>dstBuffer</code> <strong class="purple">must</strong> be a valid <code>VkBuffer</code> handle</p>
</li>
<li>
<p><a id="VUID-vkCmdWriteBufferMarkerAMD-commandBuffer-recording"></a> <code>commandBuffer</code> <strong class="purple">must</strong> be in the <a href="#commandbuffers-lifecycle">recording state</a></p>
</li>
<li>
<p><a id="VUID-vkCmdWriteBufferMarkerAMD-commandBuffer-cmdpool"></a> The <code>VkCommandPool</code> that <code>commandBuffer</code> was allocated from <strong class="purple">must</strong> support transfer, graphics, or compute operations</p>
</li>
<li>
<p><a id="VUID-vkCmdWriteBufferMarkerAMD-commonparent"></a> Both of <code>commandBuffer</code>, and <code>dstBuffer</code> <strong class="purple">must</strong> have been created, allocated, or retrieved from the same <code>VkDevice</code></p>
</li>
</ul>
</div>
</div>
</div>
<div class="sidebarblock">
<div class="content">
<div class="title">Host Synchronization</div>
<div class="ulist">
<ul>
<li>
<p>Host access to <code>commandBuffer</code> <strong class="purple">must</strong> be externally synchronized</p>
</li>
<li>
<p>Host access to the <code>VkCommandPool</code> that <code>commandBuffer</code> was allocated from <strong class="purple">must</strong> be externally synchronized</p>
</li>
</ul>
</div>
</div>
</div>
<div class="sidebarblock">
<div class="content">
<div class="title">Command Properties</div>
<table class="tableblock frame-all grid-all stretch">
<colgroup>
<col style="width: 25%;">
<col style="width: 25%;">
<col style="width: 25%;">
<col style="width: 25%;">
</colgroup>
<thead>
<tr>
<th class="tableblock halign-left valign-top"><a href="#VkCommandBufferLevel">Command Buffer Levels</a></th>
<th class="tableblock halign-left valign-top"><a href="#vkCmdBeginRenderPass">Render Pass Scope</a></th>
<th class="tableblock halign-left valign-top"><a href="#VkQueueFlagBits">Supported Queue Types</a></th>
<th class="tableblock halign-left valign-top"><a href="#synchronization-pipeline-stages-types">Pipeline Type</a></th>
</tr>
</thead>
<tbody>
<tr>
<td class="tableblock halign-left valign-top"><p class="tableblock">Primary<br>
Secondary</p></td>
<td class="tableblock halign-left valign-top"><p class="tableblock">Both</p></td>
<td class="tableblock halign-left valign-top"><p class="tableblock">Transfer<br>
Graphics<br>
Compute</p></td>
<td class="tableblock halign-left valign-top"><p class="tableblock">Transfer</p></td>
</tr>
</tbody>
</table>
</div>
</div>
</div>
<div class="sect3">
<h4 id="_see_also_99">See Also</h4>
<div class="paragraph">
<p><a href="#VkBuffer">VkBuffer</a>, <a href="#VkCommandBuffer">VkCommandBuffer</a>, <code>VkDeviceSize</code>, <a href="#VkPipelineStageFlagBits">VkPipelineStageFlagBits</a></p>
</div>
</div>
<div class="sect3">
<h4 id="_document_notes_99">Document Notes</h4>
<div class="paragraph">
<p>For more information, see the Vulkan Specification at URL</p>
</div>
<div class="paragraph">
<p><a href="https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#vkCmdWriteBufferMarkerAMD" class="bare">https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#vkCmdWriteBufferMarkerAMD</a></p>
</div>
<div class="paragraph">
<p>This page is extracted from the Vulkan Specification.
Fixes and changes should be made to the Specification, not directly.</p>
</div>
<div style="page-break-after: always;"></div>
</div>
</div>
<div class="sect2">
<h3 id="_vkcmdwritetimestamp3">vkCmdWriteTimestamp(3)</h3>
<div class="sect3">
<h4 id="_name_100">Name</h4>
<div class="paragraph">
<p>vkCmdWriteTimestamp - Write a device timestamp into a query object</p>
</div>
</div>
<div class="sect3">
<h4 id="_c_specification_100">C Specification</h4>
<div class="paragraph">
<p>To request a timestamp, call:</p>
</div>
<div id="vkCmdWriteTimestamp" class="listingblock">
<div class="content">
<pre class="highlight"><code class="language-c++" data-lang="c++">void vkCmdWriteTimestamp(
    VkCommandBuffer                             commandBuffer,
    VkPipelineStageFlagBits                     pipelineStage,
    VkQueryPool                                 queryPool,
    uint32_t                                    query);</code></pre>
</div>
</div>
</div>
<div class="sect3">
<h4 id="_parameters_100">Parameters</h4>
<div class="ulist">
<ul>
<li>
<p><code>commandBuffer</code> is the command buffer into which the command will be
recorded.</p>
</li>
<li>
<p><code>pipelineStage</code> is one of the <a href="#VkPipelineStageFlagBits">VkPipelineStageFlagBits</a>,
specifying a stage of the pipeline.</p>
</li>
<li>
<p><code>queryPool</code> is the query pool that will manage the timestamp.</p>
</li>
<li>
<p><code>query</code> is the query within the query pool that will contain the
timestamp.</p>
</li>
</ul>
</div>
</div>
<div class="sect3">
<h4 id="_description_100">Description</h4>
<div class="paragraph">
<p><code>vkCmdWriteTimestamp</code> latches the value of the timer when all previous
commands have completed executing as far as the specified pipeline stage,
and writes the timestamp value to memory.
When the timestamp value is written, the availability status of the query is
set to available.</p>
</div>
<div class="admonitionblock note">
<table>
<tr>
<td class="icon">
<i class="fa icon-note" title="Note"></i>
</td>
<td class="content">
<div class="title">Note</div>
<div class="paragraph">
<p>If an implementation is unable to detect completion and latch the timer at
any specific stage of the pipeline, it <strong class="purple">may</strong> instead do so at any logically
later stage.</p>
</div>
</td>
</tr>
</table>
</div>
<div class="paragraph">
<p><a href="#vkCmdCopyQueryPoolResults">vkCmdCopyQueryPoolResults</a> <strong class="purple">can</strong> then be called to copy the timestamp
value from the query pool into buffer memory, with ordering and
synchronization behavior equivalent to how other queries operate.
Timestamp values <strong class="purple">can</strong> also be retrieved from the query pool using
<a href="#vkGetQueryPoolResults">vkGetQueryPoolResults</a>.
As with other queries, the query <strong class="purple">must</strong> be reset using
<a href="#vkCmdResetQueryPool">vkCmdResetQueryPool</a> before requesting the timestamp value be written
to it.</p>
</div>
<div class="paragraph">
<p>While <code>vkCmdWriteTimestamp</code> <strong class="purple">can</strong> be called inside or outside of a render
pass instance, <a href="#vkCmdCopyQueryPoolResults">vkCmdCopyQueryPoolResults</a> <strong class="purple">must</strong> only be called outside
of a render pass instance.</p>
</div>
<div class="paragraph">
<p>Timestamps <strong class="purple">may</strong> only be meaningfully compared if they are written by
commands submitted to the same queue.</p>
</div>
<div class="admonitionblock note">
<table>
<tr>
<td class="icon">
<i class="fa icon-note" title="Note"></i>
</td>
<td class="content">
<div class="title">Note</div>
<div class="paragraph">
<p>An example of such a comparison is determining the execution time of a
sequence of commands.</p>
</div>
</td>
</tr>
</table>
</div>
<div class="paragraph">
<p>If <code>vkCmdWriteTimestamp</code> is called while executing a render pass
instance that has multiview enabled, the timestamp uses <span class="eq">N</span> consecutive
query indices in the query pool (starting at <code>query</code>) where <span class="eq">N</span> is
the number of bits set in the view mask of the subpass the command is
executed in.
The resulting query values are determined by an implementation-dependent
choice of one of the following behaviors:</p>
</div>
<div class="ulist">
<ul>
<li>
<p>The first query is a timestamp value and (if more than one bit is set in
the view mask) zero is written to the remaining queries.
If two timestamps are written in the same subpass, the sum of the
execution time of all views between those commands is the difference
between the first query written by each command.</p>
</li>
<li>
<p>All <span class="eq">N</span> queries are timestamp values.
If two timestamps are written in the same subpass, the sum of the
execution time of all views between those commands is the sum of the
difference between corresponding queries written by each command.
The difference between corresponding queries <strong class="purple">may</strong> be the execution time
of a single view.</p>
</li>
</ul>
</div>
<div class="paragraph">
<p>In either case, the application <strong class="purple">can</strong> sum the differences between all <span class="eq">N</span>
queries to determine the total execution time.</p>
</div>
<div class="sidebarblock">
<div class="content">
<div class="title">Valid Usage</div>
<div class="ulist">
<ul>
<li>
<p><a id="VUID-vkCmdWriteTimestamp-queryPool-01416"></a>
<code>queryPool</code> <strong class="purple">must</strong> have been created with a <code>queryType</code> of
<code>VK_QUERY_TYPE_TIMESTAMP</code></p>
</li>
<li>
<p><a id="VUID-vkCmdWriteTimestamp-queryPool-00828"></a>
The query identified by <code>queryPool</code> and <code>query</code> <strong class="purple">must</strong> be
<em>unavailable</em></p>
</li>
<li>
<p><a id="VUID-vkCmdWriteTimestamp-timestampValidBits-00829"></a>
The command pool&#8217;s queue family <strong class="purple">must</strong> support a non-zero
<code>timestampValidBits</code></p>
</li>
<li>
<p><a id="VUID-vkCmdWriteTimestamp-None-00830"></a>
All queries used by the command <strong class="purple">must</strong> be unavailable</p>
</li>
<li>
<p><a id="VUID-vkCmdWriteTimestamp-query-00831"></a>
If <code>vkCmdWriteTimestamp</code> is called within a render pass instance,
the sum of <code>query</code> and the number of bits set in the current
subpass&#8217;s view mask <strong class="purple">must</strong> be less than or equal to the number of queries
in <code>queryPool</code></p>
</li>
</ul>
</div>
</div>
</div>
<div class="sidebarblock">
<div class="content">
<div class="title">Valid Usage (Implicit)</div>
<div class="ulist">
<ul>
<li>
<p><a id="VUID-vkCmdWriteTimestamp-commandBuffer-parameter"></a> <code>commandBuffer</code> <strong class="purple">must</strong> be a valid <code>VkCommandBuffer</code> handle</p>
</li>
<li>
<p><a id="VUID-vkCmdWriteTimestamp-pipelineStage-parameter"></a> <code>pipelineStage</code> <strong class="purple">must</strong> be a valid <a href="#VkPipelineStageFlagBits">VkPipelineStageFlagBits</a> value</p>
</li>
<li>
<p><a id="VUID-vkCmdWriteTimestamp-queryPool-parameter"></a> <code>queryPool</code> <strong class="purple">must</strong> be a valid <code>VkQueryPool</code> handle</p>
</li>
<li>
<p><a id="VUID-vkCmdWriteTimestamp-commandBuffer-recording"></a> <code>commandBuffer</code> <strong class="purple">must</strong> be in the <a href="#commandbuffers-lifecycle">recording state</a></p>
</li>
<li>
<p><a id="VUID-vkCmdWriteTimestamp-commandBuffer-cmdpool"></a> The <code>VkCommandPool</code> that <code>commandBuffer</code> was allocated from <strong class="purple">must</strong> support transfer, graphics, or compute operations</p>
</li>
<li>
<p><a id="VUID-vkCmdWriteTimestamp-commonparent"></a> Both of <code>commandBuffer</code>, and <code>queryPool</code> <strong class="purple">must</strong> have been created, allocated, or retrieved from the same <code>VkDevice</code></p>
</li>
</ul>
</div>
</div>
</div>
<div class="sidebarblock">
<div class="content">
<div class="title">Host Synchronization</div>
<div class="ulist">
<ul>
<li>
<p>Host access to <code>commandBuffer</code> <strong class="purple">must</strong> be externally synchronized</p>
</li>
<li>
<p>Host access to the <code>VkCommandPool</code> that <code>commandBuffer</code> was allocated from <strong class="purple">must</strong> be externally synchronized</p>
</li>
</ul>
</div>
</div>
</div>
<div class="sidebarblock">
<div class="content">
<div class="title">Command Properties</div>
<table class="tableblock frame-all grid-all stretch">
<colgroup>
<col style="width: 25%;">
<col style="width: 25%;">
<col style="width: 25%;">
<col style="width: 25%;">
</colgroup>
<thead>
<tr>
<th class="tableblock halign-left valign-top"><a href="#VkCommandBufferLevel">Command Buffer Levels</a></th>
<th class="tableblock halign-left valign-top"><a href="#vkCmdBeginRenderPass">Render Pass Scope</a></th>
<th class="tableblock halign-left valign-top"><a href="#VkQueueFlagBits">Supported Queue Types</a></th>
<th class="tableblock halign-left valign-top"><a href="#synchronization-pipeline-stages-types">Pipeline Type</a></th>
</tr>
</thead>
<tbody>
<tr>
<td class="tableblock halign-left valign-top"><p class="tableblock">Primary<br>
Secondary</p></td>
<td class="tableblock halign-left valign-top"><p class="tableblock">Both</p></td>
<td class="tableblock halign-left valign-top"><p class="tableblock">Transfer<br>
Graphics<br>
Compute</p></td>
<td class="tableblock halign-left valign-top"><p class="tableblock">Transfer</p></td>
</tr>
</tbody>
</table>
</div>
</div>
</div>
<div class="sect3">
<h4 id="_see_also_100">See Also</h4>
<div class="paragraph">
<p><a href="#VkCommandBuffer">VkCommandBuffer</a>, <a href="#VkPipelineStageFlagBits">VkPipelineStageFlagBits</a>, <a href="#VkQueryPool">VkQueryPool</a></p>
</div>
</div>
<div class="sect3">
<h4 id="_document_notes_100">Document Notes</h4>
<div class="paragraph">
<p>For more information, see the Vulkan Specification at URL</p>
</div>
<div class="paragraph">
<p><a href="https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#vkCmdWriteTimestamp" class="bare">https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#vkCmdWriteTimestamp</a></p>
</div>
<div class="paragraph">
<p>This page is extracted from the Vulkan Specification.
Fixes and changes should be made to the Specification, not directly.</p>
</div>
<div style="page-break-after: always;"></div>
</div>
</div>
<div class="sect2">
<h3 id="_vkcompiledeferrednv3">vkCompileDeferredNV(3)</h3>
<div class="sect3">
<h4 id="_name_101">Name</h4>
<div class="paragraph">
<p>vkCompileDeferredNV - Deferred compilation of shaders</p>
</div>
</div>
<div class="sect3">
<h4 id="_c_specification_101">C Specification</h4>
<div class="paragraph">
<p>To compile a deferred shader in a pipeline call:</p>
</div>
<div id="vkCompileDeferredNV" class="listingblock">
<div class="content">
<pre class="highlight"><code class="language-c++" data-lang="c++">VkResult vkCompileDeferredNV(
    VkDevice                                    device,
    VkPipeline                                  pipeline,
    uint32_t                                    shader);</code></pre>
</div>
</div>
</div>
<div class="sect3">
<h4 id="_parameters_101">Parameters</h4>
<div class="ulist">
<ul>
<li>
<p><code>device</code> is the logical device that contains the ray tracing
pipeline.</p>
</li>
<li>
<p><code>pipeline</code> is the ray tracing pipeline object that contains the
shaders.</p>
</li>
<li>
<p><code>shader</code> is the index of the shader to compile.</p>
</li>
</ul>
</div>
</div>
<div class="sect3">
<h4 id="_description_101">Description</h4>
<div class="sidebarblock">
<div class="content">
<div class="title">Valid Usage</div>
<div class="ulist">
<ul>
<li>
<p><a id="VUID-vkCompileDeferredNV-pipeline-02237"></a>
<code>pipeline</code> <strong class="purple">must</strong> have been created with
<code>VK_PIPELINE_CREATE_DEFER_COMPILE_BIT_NV</code></p>
</li>
<li>
<p><a id="VUID-vkCompileDeferredNV-shader-02238"></a>
<code>shader</code> <strong class="purple">must</strong> not have been called as a deferred compile before</p>
</li>
</ul>
</div>
</div>
</div>
<div class="sidebarblock">
<div class="content">
<div class="title">Valid Usage (Implicit)</div>
<div class="ulist">
<ul>
<li>
<p><a id="VUID-vkCompileDeferredNV-device-parameter"></a> <code>device</code> <strong class="purple">must</strong> be a valid <code>VkDevice</code> handle</p>
</li>
<li>
<p><a id="VUID-vkCompileDeferredNV-pipeline-parameter"></a> <code>pipeline</code> <strong class="purple">must</strong> be a valid <code>VkPipeline</code> handle</p>
</li>
<li>
<p><a id="VUID-vkCompileDeferredNV-pipeline-parent"></a> <code>pipeline</code> <strong class="purple">must</strong> have been created, allocated, or retrieved from <code>device</code></p>
</li>
</ul>
</div>
</div>
</div>
<div class="sidebarblock">
<div class="content">
<div class="title">Return Codes</div>
<div class="dlist">
<dl>
<dt class="hdlist1"><a href="#fundamentals-successcodes">Success</a></dt>
<dd>
<div class="ulist">
<ul>
<li>
<p><code>VK_SUCCESS</code></p>
</li>
</ul>
</div>
</dd>
<dt class="hdlist1"><a href="#fundamentals-errorcodes">Failure</a></dt>
<dd>
<div class="ulist">
<ul>
<li>
<p><code>VK_ERROR_OUT_OF_HOST_MEMORY</code></p>
</li>
<li>
<p><code>VK_ERROR_OUT_OF_DEVICE_MEMORY</code></p>
</li>
</ul>
</div>
</dd>
</dl>
</div>
</div>
</div>
</div>
<div class="sect3">
<h4 id="_see_also_101">See Also</h4>
<div class="paragraph">
<p><a href="#VkDevice">VkDevice</a>, <a href="#VkPipeline">VkPipeline</a></p>
</div>
</div>
<div class="sect3">
<h4 id="_document_notes_101">Document Notes</h4>
<div class="paragraph">
<p>For more information, see the Vulkan Specification at URL</p>
</div>
<div class="paragraph">
<p><a href="https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#vkCompileDeferredNV" class="bare">https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#vkCompileDeferredNV</a></p>
</div>
<div class="paragraph">
<p>This page is extracted from the Vulkan Specification.
Fixes and changes should be made to the Specification, not directly.</p>
</div>
<div style="page-break-after: always;"></div>
</div>
</div>
<div class="sect2">
<h3 id="_vkcreateaccelerationstructurenv3">vkCreateAccelerationStructureNV(3)</h3>
<div class="sect3">
<h4 id="_name_102">Name</h4>
<div class="paragraph">
<p>vkCreateAccelerationStructureNV - Create a new acceleration structure object</p>
</div>
</div>
<div class="sect3">
<h4 id="_c_specification_102">C Specification</h4>
<div class="paragraph">
<p>To create acceleration structures, call:</p>
</div>
<div id="vkCreateAccelerationStructureNV" class="listingblock">
<div class="content">
<pre class="highlight"><code class="language-c++" data-lang="c++">VkResult vkCreateAccelerationStructureNV(
    VkDevice                                    device,
    const VkAccelerationStructureCreateInfoNV*  pCreateInfo,
    const VkAllocationCallbacks*                pAllocator,
    VkAccelerationStructureNV*                  pAccelerationStructure);</code></pre>
</div>
</div>
</div>
<div class="sect3">
<h4 id="_parameters_102">Parameters</h4>
<div class="ulist">
<ul>
<li>
<p><code>device</code> is the logical device that creates the buffer object.</p>
</li>
<li>
<p><code>pCreateInfo</code> is a pointer to an instance of the
<code>VkAccelerationStructureCreateInfoNV</code> structure containing
parameters affecting creation of the acceleration structure.</p>
</li>
<li>
<p><code>pAllocator</code> controls host memory allocation as described in the
<a href="vkspec.html#memory-allocation">Memory Allocation</a> chapter.</p>
</li>
<li>
<p><code>pAccelerationStructure</code> points to a <code>VkAccelerationStructureNV</code>
handle in which the resulting acceleration structure object is returned.</p>
</li>
</ul>
</div>
</div>
<div class="sect3">
<h4 id="_description_102">Description</h4>
<div class="paragraph">
<p>Similar to other objects in Vulkan, the acceleration structure creation
merely creates an object with a specific &#8220;shape&#8221; as specified by the
information in <a href="#VkAccelerationStructureInfoNV">VkAccelerationStructureInfoNV</a> and <code>compactedSize</code>
in <code>pCreateInfo</code>.
Populating the data in the object after allocating and binding memory is
done with <a href="#vkCmdBuildAccelerationStructureNV">vkCmdBuildAccelerationStructureNV</a> and
<a href="#vkCmdCopyAccelerationStructureNV">vkCmdCopyAccelerationStructureNV</a>.</p>
</div>
<div class="paragraph">
<p>Acceleration structure creation uses the count and type information from the
geometries, but does not use the data references in the structures.</p>
</div>
<div class="sidebarblock">
<div class="content">
<div class="title">Valid Usage (Implicit)</div>
<div class="ulist">
<ul>
<li>
<p><a id="VUID-vkCreateAccelerationStructureNV-device-parameter"></a> <code>device</code> <strong class="purple">must</strong> be a valid <code>VkDevice</code> handle</p>
</li>
<li>
<p><a id="VUID-vkCreateAccelerationStructureNV-pCreateInfo-parameter"></a> <code>pCreateInfo</code> <strong class="purple">must</strong> be a valid pointer to a valid <code>VkAccelerationStructureCreateInfoNV</code> structure</p>
</li>
<li>
<p><a id="VUID-vkCreateAccelerationStructureNV-pAllocator-parameter"></a> If <code>pAllocator</code> is not <code>NULL</code>, <code>pAllocator</code> <strong class="purple">must</strong> be a valid pointer to a valid <code>VkAllocationCallbacks</code> structure</p>
</li>
<li>
<p><a id="VUID-vkCreateAccelerationStructureNV-pAccelerationStructure-parameter"></a> <code>pAccelerationStructure</code> <strong class="purple">must</strong> be a valid pointer to a <code>VkAccelerationStructureNV</code> handle</p>
</li>
</ul>
</div>
</div>
</div>
<div class="sidebarblock">
<div class="content">
<div class="title">Return Codes</div>
<div class="dlist">
<dl>
<dt class="hdlist1"><a href="#fundamentals-successcodes">Success</a></dt>
<dd>
<div class="ulist">
<ul>
<li>
<p><code>VK_SUCCESS</code></p>
</li>
</ul>
</div>
</dd>
<dt class="hdlist1"><a href="#fundamentals-errorcodes">Failure</a></dt>
<dd>
<div class="ulist">
<ul>
<li>
<p><code>VK_ERROR_OUT_OF_HOST_MEMORY</code></p>
</li>
</ul>
</div>
</dd>
</dl>
</div>
</div>
</div>
</div>
<div class="sect3">
<h4 id="_see_also_102">See Also</h4>
<div class="paragraph">
<p><a href="#VkAccelerationStructureCreateInfoNV">VkAccelerationStructureCreateInfoNV</a>, <a href="#VkAccelerationStructureNV">VkAccelerationStructureNV</a>, <a href="#VkAllocationCallbacks">VkAllocationCallbacks</a>, <a href="#VkDevice">VkDevice</a></p>
</div>
</div>
<div class="sect3">
<h4 id="_document_notes_102">Document Notes</h4>
<div class="paragraph">
<p>For more information, see the Vulkan Specification at URL</p>
</div>
<div class="paragraph">
<p><a href="https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#vkCreateAccelerationStructureNV" class="bare">https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#vkCreateAccelerationStructureNV</a></p>
</div>
<div class="paragraph">
<p>This page is extracted from the Vulkan Specification.
Fixes and changes should be made to the Specification, not directly.</p>
</div>
<div style="page-break-after: always;"></div>
</div>
</div>
<div class="sect2">
<h3 id="_vkcreateandroidsurfacekhr3">vkCreateAndroidSurfaceKHR(3)</h3>
<div class="sect3">
<h4 id="_name_103">Name</h4>
<div class="paragraph">
<p>vkCreateAndroidSurfaceKHR - Create a <a href="#VkSurfaceKHR">VkSurfaceKHR</a> object for an Android native window</p>
</div>
</div>
<div class="sect3">
<h4 id="_c_specification_103">C Specification</h4>
<div class="paragraph">
<p>To create a <code>VkSurfaceKHR</code> object for an Android native window, call:</p>
</div>
<div id="vkCreateAndroidSurfaceKHR" class="listingblock">
<div class="content">
<pre class="highlight"><code class="language-c++" data-lang="c++">VkResult vkCreateAndroidSurfaceKHR(
    VkInstance                                  instance,
    const VkAndroidSurfaceCreateInfoKHR*        pCreateInfo,
    const VkAllocationCallbacks*                pAllocator,
    VkSurfaceKHR*                               pSurface);</code></pre>
</div>
</div>
</div>
<div class="sect3">
<h4 id="_parameters_103">Parameters</h4>
<div class="ulist">
<ul>
<li>
<p><code>instance</code> is the instance to associate the surface with.</p>
</li>
<li>
<p><code>pCreateInfo</code> is a pointer to an instance of the
<code>VkAndroidSurfaceCreateInfoKHR</code> structure containing parameters
affecting the creation of the surface object.</p>
</li>
<li>
<p><code>pAllocator</code> is the allocator used for host memory allocated for the
surface object when there is no more specific allocator available (see
<a href="vkspec.html#memory-allocation">Memory Allocation</a>).</p>
</li>
<li>
<p><code>pSurface</code> points to a <a href="#VkSurfaceKHR">VkSurfaceKHR</a> handle in which the
created surface object is returned.</p>
</li>
</ul>
</div>
</div>
<div class="sect3">
<h4 id="_description_103">Description</h4>
<div class="paragraph">
<p>During the lifetime of a surface created using a particular
<a href="#ANativeWindow">ANativeWindow</a> handle any attempts to create another surface for the
same <a href="#ANativeWindow">ANativeWindow</a> and any attempts to connect to the same
<a href="#ANativeWindow">ANativeWindow</a> through other platform mechanisms will fail.</p>
</div>
<div class="admonitionblock note">
<table>
<tr>
<td class="icon">
<i class="fa icon-note" title="Note"></i>
</td>
<td class="content">
<div class="title">Note</div>
<div class="paragraph">
<p>In particular, only one <code>VkSurfaceKHR</code> <strong class="purple">can</strong> exist at a time for a given
window.
Similarly, a native window <strong class="purple">cannot</strong> be used by both a <code>VkSurfaceKHR</code> and
<code>EGLSurface</code> simultaneously.</p>
</div>
</td>
</tr>
</table>
</div>
<div class="paragraph">
<p>If successful, <code>vkCreateAndroidSurfaceKHR</code> increments the
<a href="#ANativeWindow">ANativeWindow</a>&#8217;s reference count, and <code>vkDestroySurfaceKHR</code> will
decrement it.</p>
</div>
<div class="paragraph">
<p>On Android, when a swapchain&#8217;s <code>imageExtent</code> does not match the
surface&#8217;s <code>currentExtent</code>, the presentable images will be scaled to the
surface&#8217;s dimensions during presentation.
<code>minImageExtent</code> is <span class="eq">(1,1)</span>, and <code>maxImageExtent</code> is the maximum
image size supported by the consumer.
For the system compositor, <code>currentExtent</code> is the window size (i.e. the
consumer&#8217;s preferred size).</p>
</div>
<div class="sidebarblock">
<div class="content">
<div class="title">Valid Usage (Implicit)</div>
<div class="ulist">
<ul>
<li>
<p><a id="VUID-vkCreateAndroidSurfaceKHR-instance-parameter"></a> <code>instance</code> <strong class="purple">must</strong> be a valid <code>VkInstance</code> handle</p>
</li>
<li>
<p><a id="VUID-vkCreateAndroidSurfaceKHR-pCreateInfo-parameter"></a> <code>pCreateInfo</code> <strong class="purple">must</strong> be a valid pointer to a valid <code>VkAndroidSurfaceCreateInfoKHR</code> structure</p>
</li>
<li>
<p><a id="VUID-vkCreateAndroidSurfaceKHR-pAllocator-parameter"></a> If <code>pAllocator</code> is not <code>NULL</code>, <code>pAllocator</code> <strong class="purple">must</strong> be a valid pointer to a valid <code>VkAllocationCallbacks</code> structure</p>
</li>
<li>
<p><a id="VUID-vkCreateAndroidSurfaceKHR-pSurface-parameter"></a> <code>pSurface</code> <strong class="purple">must</strong> be a valid pointer to a <code>VkSurfaceKHR</code> handle</p>
</li>
</ul>
</div>
</div>
</div>
<div class="sidebarblock">
<div class="content">
<div class="title">Return Codes</div>
<div class="dlist">
<dl>
<dt class="hdlist1"><a href="#fundamentals-successcodes">Success</a></dt>
<dd>
<div class="ulist">
<ul>
<li>
<p><code>VK_SUCCESS</code></p>
</li>
</ul>
</div>
</dd>
<dt class="hdlist1"><a href="#fundamentals-errorcodes">Failure</a></dt>
<dd>
<div class="ulist">
<ul>
<li>
<p><code>VK_ERROR_OUT_OF_HOST_MEMORY</code></p>
</li>
<li>
<p><code>VK_ERROR_OUT_OF_DEVICE_MEMORY</code></p>
</li>
<li>
<p><code>VK_ERROR_NATIVE_WINDOW_IN_USE_KHR</code></p>
</li>
</ul>
</div>
</dd>
</dl>
</div>
</div>
</div>
</div>
<div class="sect3">
<h4 id="_see_also_103">See Also</h4>
<div class="paragraph">
<p><a href="#VkAllocationCallbacks">VkAllocationCallbacks</a>, <a href="#VkAndroidSurfaceCreateInfoKHR">VkAndroidSurfaceCreateInfoKHR</a>, <a href="#VkInstance">VkInstance</a>, <a href="#VkSurfaceKHR">VkSurfaceKHR</a></p>
</div>
</div>
<div class="sect3">
<h4 id="_document_notes_103">Document Notes</h4>
<div class="paragraph">
<p>For more information, see the Vulkan Specification at URL</p>
</div>
<div class="paragraph">
<p><a href="https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#vkCreateAndroidSurfaceKHR" class="bare">https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#vkCreateAndroidSurfaceKHR</a></p>
</div>
<div class="paragraph">
<p>This page is extracted from the Vulkan Specification.
Fixes and changes should be made to the Specification, not directly.</p>
</div>
<div style="page-break-after: always;"></div>
</div>
</div>
<div class="sect2">
<h3 id="_vkcreatebuffer3">vkCreateBuffer(3)</h3>
<div class="sect3">
<h4 id="_name_104">Name</h4>
<div class="paragraph">
<p>vkCreateBuffer - Create a new buffer object</p>
</div>
</div>
<div class="sect3">
<h4 id="_c_specification_104">C Specification</h4>
<div class="paragraph">
<p>To create buffers, call:</p>
</div>
<div id="vkCreateBuffer" class="listingblock">
<div class="content">
<pre class="highlight"><code class="language-c++" data-lang="c++">VkResult vkCreateBuffer(
    VkDevice                                    device,
    const VkBufferCreateInfo*                   pCreateInfo,
    const VkAllocationCallbacks*                pAllocator,
    VkBuffer*                                   pBuffer);</code></pre>
</div>
</div>
</div>
<div class="sect3">
<h4 id="_parameters_104">Parameters</h4>
<div class="ulist">
<ul>
<li>
<p><code>device</code> is the logical device that creates the buffer object.</p>
</li>
<li>
<p><code>pCreateInfo</code> is a pointer to an instance of the
<code>VkBufferCreateInfo</code> structure containing parameters affecting
creation of the buffer.</p>
</li>
<li>
<p><code>pAllocator</code> controls host memory allocation as described in the
<a href="vkspec.html#memory-allocation">Memory Allocation</a> chapter.</p>
</li>
<li>
<p><code>pBuffer</code> points to a <a href="#VkBuffer">VkBuffer</a> handle in which the resulting
buffer object is returned.</p>
</li>
</ul>
</div>
</div>
<div class="sect3">
<h4 id="_description_104">Description</h4>
<div class="sidebarblock">
<div class="content">
<div class="title">Valid Usage</div>
<div class="ulist">
<ul>
<li>
<p><a id="VUID-vkCreateBuffer-flags-00911"></a>
If the <code>flags</code> member of <code>pCreateInfo</code> includes
<code>VK_BUFFER_CREATE_SPARSE_BINDING_BIT</code>, creating this <code>VkBuffer</code>
<strong class="purple">must</strong> not cause the total required sparse memory for all currently valid
sparse resources on the device to exceed
<code>VkPhysicalDeviceLimits</code>::<code>sparseAddressSpaceSize</code></p>
</li>
</ul>
</div>
</div>
</div>
<div class="sidebarblock">
<div class="content">
<div class="title">Valid Usage (Implicit)</div>
<div class="ulist">
<ul>
<li>
<p><a id="VUID-vkCreateBuffer-device-parameter"></a> <code>device</code> <strong class="purple">must</strong> be a valid <code>VkDevice</code> handle</p>
</li>
<li>
<p><a id="VUID-vkCreateBuffer-pCreateInfo-parameter"></a> <code>pCreateInfo</code> <strong class="purple">must</strong> be a valid pointer to a valid <code>VkBufferCreateInfo</code> structure</p>
</li>
<li>
<p><a id="VUID-vkCreateBuffer-pAllocator-parameter"></a> If <code>pAllocator</code> is not <code>NULL</code>, <code>pAllocator</code> <strong class="purple">must</strong> be a valid pointer to a valid <code>VkAllocationCallbacks</code> structure</p>
</li>
<li>
<p><a id="VUID-vkCreateBuffer-pBuffer-parameter"></a> <code>pBuffer</code> <strong class="purple">must</strong> be a valid pointer to a <code>VkBuffer</code> handle</p>
</li>
</ul>
</div>
</div>
</div>
<div class="sidebarblock">
<div class="content">
<div class="title">Return Codes</div>
<div class="dlist">
<dl>
<dt class="hdlist1"><a href="#fundamentals-successcodes">Success</a></dt>
<dd>
<div class="ulist">
<ul>
<li>
<p><code>VK_SUCCESS</code></p>
</li>
</ul>
</div>
</dd>
<dt class="hdlist1"><a href="#fundamentals-errorcodes">Failure</a></dt>
<dd>
<div class="ulist">
<ul>
<li>
<p><code>VK_ERROR_OUT_OF_HOST_MEMORY</code></p>
</li>
<li>
<p><code>VK_ERROR_OUT_OF_DEVICE_MEMORY</code></p>
</li>
<li>
<p><code>VK_ERROR_INVALID_DEVICE_ADDRESS_EXT</code></p>
</li>
</ul>
</div>
</dd>
</dl>
</div>
</div>
</div>
</div>
<div class="sect3">
<h4 id="_see_also_104">See Also</h4>
<div class="paragraph">
<p><a href="#VkAllocationCallbacks">VkAllocationCallbacks</a>, <a href="#VkBuffer">VkBuffer</a>, <a href="#VkBufferCreateInfo">VkBufferCreateInfo</a>, <a href="#VkDevice">VkDevice</a></p>
</div>
</div>
<div class="sect3">
<h4 id="_document_notes_104">Document Notes</h4>
<div class="paragraph">
<p>For more information, see the Vulkan Specification at URL</p>
</div>
<div class="paragraph">
<p><a href="https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#vkCreateBuffer" class="bare">https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#vkCreateBuffer</a></p>
</div>
<div class="paragraph">
<p>This page is extracted from the Vulkan Specification.
Fixes and changes should be made to the Specification, not directly.</p>
</div>
<div style="page-break-after: always;"></div>
</div>
</div>
<div class="sect2">
<h3 id="_vkcreatebufferview3">vkCreateBufferView(3)</h3>
<div class="sect3">
<h4 id="_name_105">Name</h4>
<div class="paragraph">
<p>vkCreateBufferView - Create a new buffer view object</p>
</div>
</div>
<div class="sect3">
<h4 id="_c_specification_105">C Specification</h4>
<div class="paragraph">
<p>To create a buffer view, call:</p>
</div>
<div id="vkCreateBufferView" class="listingblock">
<div class="content">
<pre class="highlight"><code class="language-c++" data-lang="c++">VkResult vkCreateBufferView(
    VkDevice                                    device,
    const VkBufferViewCreateInfo*               pCreateInfo,
    const VkAllocationCallbacks*                pAllocator,
    VkBufferView*                               pView);</code></pre>
</div>
</div>
</div>
<div class="sect3">
<h4 id="_parameters_105">Parameters</h4>
<div class="ulist">
<ul>
<li>
<p><code>device</code> is the logical device that creates the buffer view.</p>
</li>
<li>
<p><code>pCreateInfo</code> is a pointer to an instance of the
<code>VkBufferViewCreateInfo</code> structure containing parameters to be used
to create the buffer.</p>
</li>
<li>
<p><code>pAllocator</code> controls host memory allocation as described in the
<a href="vkspec.html#memory-allocation">Memory Allocation</a> chapter.</p>
</li>
<li>
<p><code>pView</code> points to a <a href="#VkBufferView">VkBufferView</a> handle in which the resulting
buffer view object is returned.</p>
</li>
</ul>
</div>
</div>
<div class="sect3">
<h4 id="_description_105">Description</h4>
<div class="sidebarblock">
<div class="content">
<div class="title">Valid Usage (Implicit)</div>
<div class="ulist">
<ul>
<li>
<p><a id="VUID-vkCreateBufferView-device-parameter"></a> <code>device</code> <strong class="purple">must</strong> be a valid <code>VkDevice</code> handle</p>
</li>
<li>
<p><a id="VUID-vkCreateBufferView-pCreateInfo-parameter"></a> <code>pCreateInfo</code> <strong class="purple">must</strong> be a valid pointer to a valid <code>VkBufferViewCreateInfo</code> structure</p>
</li>
<li>
<p><a id="VUID-vkCreateBufferView-pAllocator-parameter"></a> If <code>pAllocator</code> is not <code>NULL</code>, <code>pAllocator</code> <strong class="purple">must</strong> be a valid pointer to a valid <code>VkAllocationCallbacks</code> structure</p>
</li>
<li>
<p><a id="VUID-vkCreateBufferView-pView-parameter"></a> <code>pView</code> <strong class="purple">must</strong> be a valid pointer to a <code>VkBufferView</code> handle</p>
</li>
</ul>
</div>
</div>
</div>
<div class="sidebarblock">
<div class="content">
<div class="title">Return Codes</div>
<div class="dlist">
<dl>
<dt class="hdlist1"><a href="#fundamentals-successcodes">Success</a></dt>
<dd>
<div class="ulist">
<ul>
<li>
<p><code>VK_SUCCESS</code></p>
</li>
</ul>
</div>
</dd>
<dt class="hdlist1"><a href="#fundamentals-errorcodes">Failure</a></dt>
<dd>
<div class="ulist">
<ul>
<li>
<p><code>VK_ERROR_OUT_OF_HOST_MEMORY</code></p>
</li>
<li>
<p><code>VK_ERROR_OUT_OF_DEVICE_MEMORY</code></p>
</li>
</ul>
</div>
</dd>
</dl>
</div>
</div>
</div>
</div>
<div class="sect3">
<h4 id="_see_also_105">See Also</h4>
<div class="paragraph">
<p><a href="#VkAllocationCallbacks">VkAllocationCallbacks</a>, <a href="#VkBufferView">VkBufferView</a>, <a href="#VkBufferViewCreateInfo">VkBufferViewCreateInfo</a>, <a href="#VkDevice">VkDevice</a></p>
</div>
</div>
<div class="sect3">
<h4 id="_document_notes_105">Document Notes</h4>
<div class="paragraph">
<p>For more information, see the Vulkan Specification at URL</p>
</div>
<div class="paragraph">
<p><a href="https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#vkCreateBufferView" class="bare">https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#vkCreateBufferView</a></p>
</div>
<div class="paragraph">
<p>This page is extracted from the Vulkan Specification.
Fixes and changes should be made to the Specification, not directly.</p>
</div>
<div style="page-break-after: always;"></div>
</div>
</div>
<div class="sect2">
<h3 id="_vkcreatecommandpool3">vkCreateCommandPool(3)</h3>
<div class="sect3">
<h4 id="_name_106">Name</h4>
<div class="paragraph">
<p>vkCreateCommandPool - Create a new command pool object</p>
</div>
</div>
<div class="sect3">
<h4 id="_c_specification_106">C Specification</h4>
<div class="paragraph">
<p>To create a command pool, call:</p>
</div>
<div id="vkCreateCommandPool" class="listingblock">
<div class="content">
<pre class="highlight"><code class="language-c++" data-lang="c++">VkResult vkCreateCommandPool(
    VkDevice                                    device,
    const VkCommandPoolCreateInfo*              pCreateInfo,
    const VkAllocationCallbacks*                pAllocator,
    VkCommandPool*                              pCommandPool);</code></pre>
</div>
</div>
</div>
<div class="sect3">
<h4 id="_parameters_106">Parameters</h4>
<div class="ulist">
<ul>
<li>
<p><code>device</code> is the logical device that creates the command pool.</p>
</li>
<li>
<p><code>pCreateInfo</code> is a pointer to an instance of the
<a href="#VkCommandPoolCreateInfo">VkCommandPoolCreateInfo</a> structure specifying the state of the
command pool object.</p>
</li>
<li>
<p><code>pAllocator</code> controls host memory allocation as described in the
<a href="vkspec.html#memory-allocation">Memory Allocation</a> chapter.</p>
</li>
<li>
<p><code>pCommandPool</code> points to a <a href="#VkCommandPool">VkCommandPool</a> handle in which the
created pool is returned.</p>
</li>
</ul>
</div>
</div>
<div class="sect3">
<h4 id="_description_106">Description</h4>
<div class="sidebarblock">
<div class="content">
<div class="title">Valid Usage</div>
<div class="ulist">
<ul>
<li>
<p><a id="VUID-vkCreateCommandPool-queueFamilyIndex-01937"></a>
<code>pCreateInfo</code>::<code>queueFamilyIndex</code> <strong class="purple">must</strong> be the index of a queue
family available in the logical device <code>device</code>.</p>
</li>
</ul>
</div>
</div>
</div>
<div class="sidebarblock">
<div class="content">
<div class="title">Valid Usage (Implicit)</div>
<div class="ulist">
<ul>
<li>
<p><a id="VUID-vkCreateCommandPool-device-parameter"></a> <code>device</code> <strong class="purple">must</strong> be a valid <code>VkDevice</code> handle</p>
</li>
<li>
<p><a id="VUID-vkCreateCommandPool-pCreateInfo-parameter"></a> <code>pCreateInfo</code> <strong class="purple">must</strong> be a valid pointer to a valid <code>VkCommandPoolCreateInfo</code> structure</p>
</li>
<li>
<p><a id="VUID-vkCreateCommandPool-pAllocator-parameter"></a> If <code>pAllocator</code> is not <code>NULL</code>, <code>pAllocator</code> <strong class="purple">must</strong> be a valid pointer to a valid <code>VkAllocationCallbacks</code> structure</p>
</li>
<li>
<p><a id="VUID-vkCreateCommandPool-pCommandPool-parameter"></a> <code>pCommandPool</code> <strong class="purple">must</strong> be a valid pointer to a <code>VkCommandPool</code> handle</p>
</li>
</ul>
</div>
</div>
</div>
<div class="sidebarblock">
<div class="content">
<div class="title">Return Codes</div>
<div class="dlist">
<dl>
<dt class="hdlist1"><a href="#fundamentals-successcodes">Success</a></dt>
<dd>
<div class="ulist">
<ul>
<li>
<p><code>VK_SUCCESS</code></p>
</li>
</ul>
</div>
</dd>
<dt class="hdlist1"><a href="#fundamentals-errorcodes">Failure</a></dt>
<dd>
<div class="ulist">
<ul>
<li>
<p><code>VK_ERROR_OUT_OF_HOST_MEMORY</code></p>
</li>
<li>
<p><code>VK_ERROR_OUT_OF_DEVICE_MEMORY</code></p>
</li>
</ul>
</div>
</dd>
</dl>
</div>
</div>
</div>
</div>
<div class="sect3">
<h4 id="_see_also_106">See Also</h4>
<div class="paragraph">
<p><a href="#VkAllocationCallbacks">VkAllocationCallbacks</a>, <a href="#VkCommandPool">VkCommandPool</a>, <a href="#VkCommandPoolCreateInfo">VkCommandPoolCreateInfo</a>, <a href="#VkDevice">VkDevice</a></p>
</div>
</div>
<div class="sect3">
<h4 id="_document_notes_106">Document Notes</h4>
<div class="paragraph">
<p>For more information, see the Vulkan Specification at URL</p>
</div>
<div class="paragraph">
<p><a href="https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#vkCreateCommandPool" class="bare">https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#vkCreateCommandPool</a></p>
</div>
<div class="paragraph">
<p>This page is extracted from the Vulkan Specification.
Fixes and changes should be made to the Specification, not directly.</p>
</div>
<div style="page-break-after: always;"></div>
</div>
</div>
<div class="sect2">
<h3 id="_vkcreatecomputepipelines3">vkCreateComputePipelines(3)</h3>
<div class="sect3">
<h4 id="_name_107">Name</h4>
<div class="paragraph">
<p>vkCreateComputePipelines - Creates a new compute pipeline object</p>
</div>
</div>
<div class="sect3">
<h4 id="_c_specification_107">C Specification</h4>
<div class="paragraph">
<p>To create compute pipelines, call:</p>
</div>
<div id="vkCreateComputePipelines" class="listingblock">
<div class="content">
<pre class="highlight"><code class="language-c++" data-lang="c++">VkResult vkCreateComputePipelines(
    VkDevice                                    device,
    VkPipelineCache                             pipelineCache,
    uint32_t                                    createInfoCount,
    const VkComputePipelineCreateInfo*          pCreateInfos,
    const VkAllocationCallbacks*                pAllocator,
    VkPipeline*                                 pPipelines);</code></pre>
</div>
</div>
</div>
<div class="sect3">
<h4 id="_parameters_107">Parameters</h4>
<div class="ulist">
<ul>
<li>
<p><code>device</code> is the logical device that creates the compute pipelines.</p>
</li>
<li>
<p><code>pipelineCache</code> is either <a href="#VK_NULL_HANDLE">VK_NULL_HANDLE</a>, indicating that
pipeline caching is disabled; or the handle of a valid
<a href="vkspec.html#pipelines-cache">pipeline cache</a> object, in which case use of that
cache is enabled for the duration of the command.</p>
</li>
<li>
<p><code>createInfoCount</code> is the length of the <code>pCreateInfos</code> and
<code>pPipelines</code> arrays.</p>
</li>
<li>
<p><code>pCreateInfos</code> is an array of <a href="#VkComputePipelineCreateInfo">VkComputePipelineCreateInfo</a>
structures.</p>
</li>
<li>
<p><code>pAllocator</code> controls host memory allocation as described in the
<a href="vkspec.html#memory-allocation">Memory Allocation</a> chapter.</p>
</li>
<li>
<p><code>pPipelines</code> is a pointer to an array in which the resulting compute
pipeline objects are returned.</p>
<div class="admonitionblock note">
<table>
<tr>
<td class="icon">
<i class="fa icon-note" title="Note"></i>
</td>
<td class="content">
<div class="title">editing-note</div>
<div class="paragraph">
<p>TODO (Jon) - Should we say something like &#8220;the i&#8217;th element of the
<code>pPipelines</code> array is created based on the corresponding element of the
<code>pCreateInfos</code> array&#8221;? Also for <a href="#vkCreateGraphicsPipelines">vkCreateGraphicsPipelines</a> below.</p>
</div>
</td>
</tr>
</table>
</div>
</li>
</ul>
</div>
</div>
<div class="sect3">
<h4 id="_description_107">Description</h4>
<div class="sidebarblock">
<div class="content">
<div class="title">Valid Usage</div>
<div class="ulist">
<ul>
<li>
<p><a id="VUID-vkCreateComputePipelines-flags-00695"></a>
If the <code>flags</code> member of any element of <code>pCreateInfos</code> contains
the <code>VK_PIPELINE_CREATE_DERIVATIVE_BIT</code> flag, and the
<code>basePipelineIndex</code> member of that same element is not <code>-1</code>,
<code>basePipelineIndex</code> <strong class="purple">must</strong> be less than the index into
<code>pCreateInfos</code> that corresponds to that element</p>
</li>
<li>
<p><a id="VUID-vkCreateComputePipelines-flags-00696"></a>
If the <code>flags</code> member of any element of <code>pCreateInfos</code> contains
the <code>VK_PIPELINE_CREATE_DERIVATIVE_BIT</code> flag, the base pipeline
<strong class="purple">must</strong> have been created with the
<code>VK_PIPELINE_CREATE_ALLOW_DERIVATIVES_BIT</code> flag set</p>
</li>
</ul>
</div>
</div>
</div>
<div class="sidebarblock">
<div class="content">
<div class="title">Valid Usage (Implicit)</div>
<div class="ulist">
<ul>
<li>
<p><a id="VUID-vkCreateComputePipelines-device-parameter"></a> <code>device</code> <strong class="purple">must</strong> be a valid <code>VkDevice</code> handle</p>
</li>
<li>
<p><a id="VUID-vkCreateComputePipelines-pipelineCache-parameter"></a> If <code>pipelineCache</code> is not <a href="#VK_NULL_HANDLE">VK_NULL_HANDLE</a>, <code>pipelineCache</code> <strong class="purple">must</strong> be a valid <code>VkPipelineCache</code> handle</p>
</li>
<li>
<p><a id="VUID-vkCreateComputePipelines-pCreateInfos-parameter"></a> <code>pCreateInfos</code> <strong class="purple">must</strong> be a valid pointer to an array of <code>createInfoCount</code> valid <code>VkComputePipelineCreateInfo</code> structures</p>
</li>
<li>
<p><a id="VUID-vkCreateComputePipelines-pAllocator-parameter"></a> If <code>pAllocator</code> is not <code>NULL</code>, <code>pAllocator</code> <strong class="purple">must</strong> be a valid pointer to a valid <code>VkAllocationCallbacks</code> structure</p>
</li>
<li>
<p><a id="VUID-vkCreateComputePipelines-pPipelines-parameter"></a> <code>pPipelines</code> <strong class="purple">must</strong> be a valid pointer to an array of <code>createInfoCount</code> <code>VkPipeline</code> handles</p>
</li>
<li>
<p><a id="VUID-vkCreateComputePipelines-createInfoCount-arraylength"></a> <code>createInfoCount</code> <strong class="purple">must</strong> be greater than <code>0</code></p>
</li>
<li>
<p><a id="VUID-vkCreateComputePipelines-pipelineCache-parent"></a> If <code>pipelineCache</code> is a valid handle, it <strong class="purple">must</strong> have been created, allocated, or retrieved from <code>device</code></p>
</li>
</ul>
</div>
</div>
</div>
<div class="sidebarblock">
<div class="content">
<div class="title">Return Codes</div>
<div class="dlist">
<dl>
<dt class="hdlist1"><a href="#fundamentals-successcodes">Success</a></dt>
<dd>
<div class="ulist">
<ul>
<li>
<p><code>VK_SUCCESS</code></p>
</li>
</ul>
</div>
</dd>
<dt class="hdlist1"><a href="#fundamentals-errorcodes">Failure</a></dt>
<dd>
<div class="ulist">
<ul>
<li>
<p><code>VK_ERROR_OUT_OF_HOST_MEMORY</code></p>
</li>
<li>
<p><code>VK_ERROR_OUT_OF_DEVICE_MEMORY</code></p>
</li>
<li>
<p><code>VK_ERROR_INVALID_SHADER_NV</code></p>
</li>
</ul>
</div>
</dd>
</dl>
</div>
</div>
</div>
</div>
<div class="sect3">
<h4 id="_see_also_107">See Also</h4>
<div class="paragraph">
<p><a href="#VkAllocationCallbacks">VkAllocationCallbacks</a>, <a href="#VkComputePipelineCreateInfo">VkComputePipelineCreateInfo</a>, <a href="#VkDevice">VkDevice</a>, <a href="#VkPipeline">VkPipeline</a>, <a href="#VkPipelineCache">VkPipelineCache</a></p>
</div>
</div>
<div class="sect3">
<h4 id="_document_notes_107">Document Notes</h4>
<div class="paragraph">
<p>For more information, see the Vulkan Specification at URL</p>
</div>
<div class="paragraph">
<p><a href="https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#vkCreateComputePipelines" class="bare">https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#vkCreateComputePipelines</a></p>
</div>
<div class="paragraph">
<p>This page is extracted from the Vulkan Specification.
Fixes and changes should be made to the Specification, not directly.</p>
</div>
<div style="page-break-after: always;"></div>
</div>
</div>
<div class="sect2">
<h3 id="_vkcreatedebugreportcallbackext3">vkCreateDebugReportCallbackEXT(3)</h3>
<div class="sect3">
<h4 id="_name_108">Name</h4>
<div class="paragraph">
<p>vkCreateDebugReportCallbackEXT - Create a debug report callback object</p>
</div>
</div>
<div class="sect3">
<h4 id="_c_specification_108">C Specification</h4>
<div class="paragraph">
<p>Debug report callbacks give more detailed feedback on the application&#8217;s use
of Vulkan when events of interest occur.</p>
</div>
<div class="paragraph">
<p>To register a debug report callback, an application uses
<a href="#vkCreateDebugReportCallbackEXT">vkCreateDebugReportCallbackEXT</a>.</p>
</div>
<div id="vkCreateDebugReportCallbackEXT" class="listingblock">
<div class="content">
<pre class="highlight"><code class="language-c++" data-lang="c++">VkResult vkCreateDebugReportCallbackEXT(
    VkInstance                                  instance,
    const VkDebugReportCallbackCreateInfoEXT*   pCreateInfo,
    const VkAllocationCallbacks*                pAllocator,
    VkDebugReportCallbackEXT*                   pCallback);</code></pre>
</div>
</div>
</div>
<div class="sect3">
<h4 id="_parameters_108">Parameters</h4>
<div class="ulist">
<ul>
<li>
<p><code>instance</code> the instance the callback will be logged on.</p>
</li>
<li>
<p><code>pCreateInfo</code> points to a <a href="#VkDebugReportCallbackCreateInfoEXT">VkDebugReportCallbackCreateInfoEXT</a>
structure which defines the conditions under which this callback will be
called.</p>
</li>
<li>
<p><code>pAllocator</code> controls host memory allocation as described in the
<a href="vkspec.html#memory-allocation">Memory Allocation</a> chapter.</p>
</li>
<li>
<p><code>pCallback</code> is a pointer to record the
<code>VkDebugReportCallbackEXT</code> object created.</p>
</li>
</ul>
</div>
</div>
<div class="sect3">
<h4 id="_description_108">Description</h4>
<div class="sidebarblock">
<div class="content">
<div class="title">Valid Usage (Implicit)</div>
<div class="ulist">
<ul>
<li>
<p><a id="VUID-vkCreateDebugReportCallbackEXT-instance-parameter"></a> <code>instance</code> <strong class="purple">must</strong> be a valid <code>VkInstance</code> handle</p>
</li>
<li>
<p><a id="VUID-vkCreateDebugReportCallbackEXT-pCreateInfo-parameter"></a> <code>pCreateInfo</code> <strong class="purple">must</strong> be a valid pointer to a valid <code>VkDebugReportCallbackCreateInfoEXT</code> structure</p>
</li>
<li>
<p><a id="VUID-vkCreateDebugReportCallbackEXT-pAllocator-parameter"></a> If <code>pAllocator</code> is not <code>NULL</code>, <code>pAllocator</code> <strong class="purple">must</strong> be a valid pointer to a valid <code>VkAllocationCallbacks</code> structure</p>
</li>
<li>
<p><a id="VUID-vkCreateDebugReportCallbackEXT-pCallback-parameter"></a> <code>pCallback</code> <strong class="purple">must</strong> be a valid pointer to a <code>VkDebugReportCallbackEXT</code> handle</p>
</li>
</ul>
</div>
</div>
</div>
<div class="sidebarblock">
<div class="content">
<div class="title">Return Codes</div>
<div class="dlist">
<dl>
<dt class="hdlist1"><a href="#fundamentals-successcodes">Success</a></dt>
<dd>
<div class="ulist">
<ul>
<li>
<p><code>VK_SUCCESS</code></p>
</li>
</ul>
</div>
</dd>
<dt class="hdlist1"><a href="#fundamentals-errorcodes">Failure</a></dt>
<dd>
<div class="ulist">
<ul>
<li>
<p><code>VK_ERROR_OUT_OF_HOST_MEMORY</code></p>
</li>
</ul>
</div>
</dd>
</dl>
</div>
</div>
</div>
</div>
<div class="sect3">
<h4 id="_see_also_108">See Also</h4>
<div class="paragraph">
<p><a href="#VkAllocationCallbacks">VkAllocationCallbacks</a>, <a href="#VkDebugReportCallbackCreateInfoEXT">VkDebugReportCallbackCreateInfoEXT</a>, <a href="#VkDebugReportCallbackEXT">VkDebugReportCallbackEXT</a>, <a href="#VkInstance">VkInstance</a></p>
</div>
</div>
<div class="sect3">
<h4 id="_document_notes_108">Document Notes</h4>
<div class="paragraph">
<p>For more information, see the Vulkan Specification at URL</p>
</div>
<div class="paragraph">
<p><a href="https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#vkCreateDebugReportCallbackEXT" class="bare">https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#vkCreateDebugReportCallbackEXT</a></p>
</div>
<div class="paragraph">
<p>This page is extracted from the Vulkan Specification.
Fixes and changes should be made to the Specification, not directly.</p>
</div>
<div style="page-break-after: always;"></div>
</div>
</div>
<div class="sect2">
<h3 id="_vkcreatedebugutilsmessengerext3">vkCreateDebugUtilsMessengerEXT(3)</h3>
<div class="sect3">
<h4 id="_name_109">Name</h4>
<div class="paragraph">
<p>vkCreateDebugUtilsMessengerEXT - Create a debug messenger object</p>
</div>
</div>
<div class="sect3">
<h4 id="_c_specification_109">C Specification</h4>
<div class="paragraph">
<p>A debug messenger triggers a debug callback with a debug message when an
event of interest occurs.
To create a debug messenger which will trigger a debug callback, call:</p>
</div>
<div id="vkCreateDebugUtilsMessengerEXT" class="listingblock">
<div class="content">
<pre class="highlight"><code class="language-c++" data-lang="c++">VkResult vkCreateDebugUtilsMessengerEXT(
    VkInstance                                  instance,
    const VkDebugUtilsMessengerCreateInfoEXT*   pCreateInfo,
    const VkAllocationCallbacks*                pAllocator,
    VkDebugUtilsMessengerEXT*                   pMessenger);</code></pre>
</div>
</div>
</div>
<div class="sect3">
<h4 id="_parameters_109">Parameters</h4>
<div class="ulist">
<ul>
<li>
<p><code>instance</code> the instance the messenger will be used with.</p>
</li>
<li>
<p><code>pCreateInfo</code> points to a <a href="#VkDebugUtilsMessengerCreateInfoEXT">VkDebugUtilsMessengerCreateInfoEXT</a>
structure which contains the callback pointer as well as defines the
conditions under which this messenger will trigger the callback.</p>
</li>
<li>
<p><code>pAllocator</code> controls host memory allocation as described in the
<a href="vkspec.html#memory-allocation">Memory Allocation</a> chapter.</p>
</li>
<li>
<p><code>pMessenger</code> is a pointer to record the
<code>VkDebugUtilsMessengerEXT</code> object created.</p>
</li>
</ul>
</div>
</div>
<div class="sect3">
<h4 id="_description_109">Description</h4>
<div class="sidebarblock">
<div class="content">
<div class="title">Valid Usage (Implicit)</div>
<div class="ulist">
<ul>
<li>
<p><a id="VUID-vkCreateDebugUtilsMessengerEXT-instance-parameter"></a> <code>instance</code> <strong class="purple">must</strong> be a valid <code>VkInstance</code> handle</p>
</li>
<li>
<p><a id="VUID-vkCreateDebugUtilsMessengerEXT-pCreateInfo-parameter"></a> <code>pCreateInfo</code> <strong class="purple">must</strong> be a valid pointer to a valid <code>VkDebugUtilsMessengerCreateInfoEXT</code> structure</p>
</li>
<li>
<p><a id="VUID-vkCreateDebugUtilsMessengerEXT-pAllocator-parameter"></a> If <code>pAllocator</code> is not <code>NULL</code>, <code>pAllocator</code> <strong class="purple">must</strong> be a valid pointer to a valid <code>VkAllocationCallbacks</code> structure</p>
</li>
<li>
<p><a id="VUID-vkCreateDebugUtilsMessengerEXT-pMessenger-parameter"></a> <code>pMessenger</code> <strong class="purple">must</strong> be a valid pointer to a <code>VkDebugUtilsMessengerEXT</code> handle</p>
</li>
</ul>
</div>
</div>
</div>
<div class="sidebarblock">
<div class="content">
<div class="title">Return Codes</div>
<div class="dlist">
<dl>
<dt class="hdlist1"><a href="#fundamentals-successcodes">Success</a></dt>
<dd>
<div class="ulist">
<ul>
<li>
<p><code>VK_SUCCESS</code></p>
</li>
</ul>
</div>
</dd>
<dt class="hdlist1"><a href="#fundamentals-errorcodes">Failure</a></dt>
<dd>
<div class="ulist">
<ul>
<li>
<p><code>VK_ERROR_OUT_OF_HOST_MEMORY</code></p>
</li>
</ul>
</div>
</dd>
</dl>
</div>
</div>
</div>
<div class="paragraph">
<p>The application <strong class="purple">must</strong> ensure that <a href="#vkCreateDebugUtilsMessengerEXT">vkCreateDebugUtilsMessengerEXT</a> is
not executed in parallel with any Vulkan command that is also called with
<code>instance</code> or child of <code>instance</code> as the dispatchable argument.</p>
</div>
</div>
<div class="sect3">
<h4 id="_see_also_109">See Also</h4>
<div class="paragraph">
<p><a href="#VkAllocationCallbacks">VkAllocationCallbacks</a>, <a href="#VkDebugUtilsMessengerCreateInfoEXT">VkDebugUtilsMessengerCreateInfoEXT</a>, <a href="#VkDebugUtilsMessengerEXT">VkDebugUtilsMessengerEXT</a>, <a href="#VkInstance">VkInstance</a></p>
</div>
</div>
<div class="sect3">
<h4 id="_document_notes_109">Document Notes</h4>
<div class="paragraph">
<p>For more information, see the Vulkan Specification at URL</p>
</div>
<div class="paragraph">
<p><a href="https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#vkCreateDebugUtilsMessengerEXT" class="bare">https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#vkCreateDebugUtilsMessengerEXT</a></p>
</div>
<div class="paragraph">
<p>This page is extracted from the Vulkan Specification.
Fixes and changes should be made to the Specification, not directly.</p>
</div>
<div style="page-break-after: always;"></div>
</div>
</div>
<div class="sect2">
<h3 id="_vkcreatedescriptorpool3">vkCreateDescriptorPool(3)</h3>
<div class="sect3">
<h4 id="_name_110">Name</h4>
<div class="paragraph">
<p>vkCreateDescriptorPool - Creates a descriptor pool object</p>
</div>
</div>
<div class="sect3">
<h4 id="_c_specification_110">C Specification</h4>
<div class="paragraph">
<p>To create a descriptor pool object, call:</p>
</div>
<div id="vkCreateDescriptorPool" class="listingblock">
<div class="content">
<pre class="highlight"><code class="language-c++" data-lang="c++">VkResult vkCreateDescriptorPool(
    VkDevice                                    device,
    const VkDescriptorPoolCreateInfo*           pCreateInfo,
    const VkAllocationCallbacks*                pAllocator,
    VkDescriptorPool*                           pDescriptorPool);</code></pre>
</div>
</div>
</div>
<div class="sect3">
<h4 id="_parameters_110">Parameters</h4>
<div class="ulist">
<ul>
<li>
<p><code>device</code> is the logical device that creates the descriptor pool.</p>
</li>
<li>
<p><code>pCreateInfo</code> is a pointer to an instance of the
<a href="#VkDescriptorPoolCreateInfo">VkDescriptorPoolCreateInfo</a> structure specifying the state of the
descriptor pool object.</p>
</li>
<li>
<p><code>pAllocator</code> controls host memory allocation as described in the
<a href="vkspec.html#memory-allocation">Memory Allocation</a> chapter.</p>
</li>
<li>
<p><code>pDescriptorPool</code> points to a <a href="#VkDescriptorPool">VkDescriptorPool</a> handle in which
the resulting descriptor pool object is returned.</p>
</li>
</ul>
</div>
</div>
<div class="sect3">
<h4 id="_description_110">Description</h4>
<div class="paragraph">
<p><code>pAllocator</code> controls host memory allocation as described in the
<a href="vkspec.html#memory-allocation">Memory Allocation</a> chapter.</p>
</div>
<div class="paragraph">
<p>The created descriptor pool is returned in <code>pDescriptorPool</code>.</p>
</div>
<div class="sidebarblock">
<div class="content">
<div class="title">Valid Usage (Implicit)</div>
<div class="ulist">
<ul>
<li>
<p><a id="VUID-vkCreateDescriptorPool-device-parameter"></a> <code>device</code> <strong class="purple">must</strong> be a valid <code>VkDevice</code> handle</p>
</li>
<li>
<p><a id="VUID-vkCreateDescriptorPool-pCreateInfo-parameter"></a> <code>pCreateInfo</code> <strong class="purple">must</strong> be a valid pointer to a valid <code>VkDescriptorPoolCreateInfo</code> structure</p>
</li>
<li>
<p><a id="VUID-vkCreateDescriptorPool-pAllocator-parameter"></a> If <code>pAllocator</code> is not <code>NULL</code>, <code>pAllocator</code> <strong class="purple">must</strong> be a valid pointer to a valid <code>VkAllocationCallbacks</code> structure</p>
</li>
<li>
<p><a id="VUID-vkCreateDescriptorPool-pDescriptorPool-parameter"></a> <code>pDescriptorPool</code> <strong class="purple">must</strong> be a valid pointer to a <code>VkDescriptorPool</code> handle</p>
</li>
</ul>
</div>
</div>
</div>
<div class="sidebarblock">
<div class="content">
<div class="title">Return Codes</div>
<div class="dlist">
<dl>
<dt class="hdlist1"><a href="#fundamentals-successcodes">Success</a></dt>
<dd>
<div class="ulist">
<ul>
<li>
<p><code>VK_SUCCESS</code></p>
</li>
</ul>
</div>
</dd>
<dt class="hdlist1"><a href="#fundamentals-errorcodes">Failure</a></dt>
<dd>
<div class="ulist">
<ul>
<li>
<p><code>VK_ERROR_OUT_OF_HOST_MEMORY</code></p>
</li>
<li>
<p><code>VK_ERROR_OUT_OF_DEVICE_MEMORY</code></p>
</li>
<li>
<p><code>VK_ERROR_FRAGMENTATION_EXT</code></p>
</li>
</ul>
</div>
</dd>
</dl>
</div>
</div>
</div>
</div>
<div class="sect3">
<h4 id="_see_also_110">See Also</h4>
<div class="paragraph">
<p><a href="#VkAllocationCallbacks">VkAllocationCallbacks</a>, <a href="#VkDescriptorPool">VkDescriptorPool</a>, <a href="#VkDescriptorPoolCreateInfo">VkDescriptorPoolCreateInfo</a>, <a href="#VkDevice">VkDevice</a></p>
</div>
</div>
<div class="sect3">
<h4 id="_document_notes_110">Document Notes</h4>
<div class="paragraph">
<p>For more information, see the Vulkan Specification at URL</p>
</div>
<div class="paragraph">
<p><a href="https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#vkCreateDescriptorPool" class="bare">https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#vkCreateDescriptorPool</a></p>
</div>
<div class="paragraph">
<p>This page is extracted from the Vulkan Specification.
Fixes and changes should be made to the Specification, not directly.</p>
</div>
<div style="page-break-after: always;"></div>
</div>
</div>
<div class="sect2">
<h3 id="_vkcreatedescriptorsetlayout3">vkCreateDescriptorSetLayout(3)</h3>
<div class="sect3">
<h4 id="_name_111">Name</h4>
<div class="paragraph">
<p>vkCreateDescriptorSetLayout - Create a new descriptor set layout</p>
</div>
</div>
<div class="sect3">
<h4 id="_c_specification_111">C Specification</h4>
<div class="paragraph">
<p>To create descriptor set layout objects, call:</p>
</div>
<div id="vkCreateDescriptorSetLayout" class="listingblock">
<div class="content">
<pre class="highlight"><code class="language-c++" data-lang="c++">VkResult vkCreateDescriptorSetLayout(
    VkDevice                                    device,
    const VkDescriptorSetLayoutCreateInfo*      pCreateInfo,
    const VkAllocationCallbacks*                pAllocator,
    VkDescriptorSetLayout*                      pSetLayout);</code></pre>
</div>
</div>
</div>
<div class="sect3">
<h4 id="_parameters_111">Parameters</h4>
<div class="ulist">
<ul>
<li>
<p><code>device</code> is the logical device that creates the descriptor set
layout.</p>
</li>
<li>
<p><code>pCreateInfo</code> is a pointer to an instance of the
<a href="#VkDescriptorSetLayoutCreateInfo">VkDescriptorSetLayoutCreateInfo</a> structure specifying the state of
the descriptor set layout object.</p>
</li>
<li>
<p><code>pAllocator</code> controls host memory allocation as described in the
<a href="vkspec.html#memory-allocation">Memory Allocation</a> chapter.</p>
</li>
<li>
<p><code>pSetLayout</code> points to a <a href="#VkDescriptorSetLayout">VkDescriptorSetLayout</a> handle in which
the resulting descriptor set layout object is returned.</p>
</li>
</ul>
</div>
</div>
<div class="sect3">
<h4 id="_description_111">Description</h4>
<div class="sidebarblock">
<div class="content">
<div class="title">Valid Usage (Implicit)</div>
<div class="ulist">
<ul>
<li>
<p><a id="VUID-vkCreateDescriptorSetLayout-device-parameter"></a> <code>device</code> <strong class="purple">must</strong> be a valid <code>VkDevice</code> handle</p>
</li>
<li>
<p><a id="VUID-vkCreateDescriptorSetLayout-pCreateInfo-parameter"></a> <code>pCreateInfo</code> <strong class="purple">must</strong> be a valid pointer to a valid <code>VkDescriptorSetLayoutCreateInfo</code> structure</p>
</li>
<li>
<p><a id="VUID-vkCreateDescriptorSetLayout-pAllocator-parameter"></a> If <code>pAllocator</code> is not <code>NULL</code>, <code>pAllocator</code> <strong class="purple">must</strong> be a valid pointer to a valid <code>VkAllocationCallbacks</code> structure</p>
</li>
<li>
<p><a id="VUID-vkCreateDescriptorSetLayout-pSetLayout-parameter"></a> <code>pSetLayout</code> <strong class="purple">must</strong> be a valid pointer to a <code>VkDescriptorSetLayout</code> handle</p>
</li>
</ul>
</div>
</div>
</div>
<div class="sidebarblock">
<div class="content">
<div class="title">Return Codes</div>
<div class="dlist">
<dl>
<dt class="hdlist1"><a href="#fundamentals-successcodes">Success</a></dt>
<dd>
<div class="ulist">
<ul>
<li>
<p><code>VK_SUCCESS</code></p>
</li>
</ul>
</div>
</dd>
<dt class="hdlist1"><a href="#fundamentals-errorcodes">Failure</a></dt>
<dd>
<div class="ulist">
<ul>
<li>
<p><code>VK_ERROR_OUT_OF_HOST_MEMORY</code></p>
</li>
<li>
<p><code>VK_ERROR_OUT_OF_DEVICE_MEMORY</code></p>
</li>
</ul>
</div>
</dd>
</dl>
</div>
</div>
</div>
</div>
<div class="sect3">
<h4 id="_see_also_111">See Also</h4>
<div class="paragraph">
<p><a href="#VkAllocationCallbacks">VkAllocationCallbacks</a>, <a href="#VkDescriptorSetLayout">VkDescriptorSetLayout</a>, <a href="#VkDescriptorSetLayoutCreateInfo">VkDescriptorSetLayoutCreateInfo</a>, <a href="#VkDevice">VkDevice</a></p>
</div>
</div>
<div class="sect3">
<h4 id="_document_notes_111">Document Notes</h4>
<div class="paragraph">
<p>For more information, see the Vulkan Specification at URL</p>
</div>
<div class="paragraph">
<p><a href="https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#vkCreateDescriptorSetLayout" class="bare">https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#vkCreateDescriptorSetLayout</a></p>
</div>
<div class="paragraph">
<p>This page is extracted from the Vulkan Specification.
Fixes and changes should be made to the Specification, not directly.</p>
</div>
<div style="page-break-after: always;"></div>
</div>
</div>
<div class="sect2">
<h3 id="_vkcreatedescriptorupdatetemplate3">vkCreateDescriptorUpdateTemplate(3)</h3>
<div class="sect3">
<h4 id="_name_112">Name</h4>
<div class="paragraph">
<p>vkCreateDescriptorUpdateTemplate - Create a new descriptor update template</p>
</div>
</div>
<div class="sect3">
<h4 id="_c_specification_112">C Specification</h4>
<div class="paragraph">
<p>Updating a large <code>VkDescriptorSet</code> array <strong class="purple">can</strong> be an expensive operation
since an application <strong class="purple">must</strong> specify one <a href="#VkWriteDescriptorSet">VkWriteDescriptorSet</a> structure
for each descriptor or descriptor array to update, each of which
re-specifies the same state when updating the same descriptor in multiple
descriptor sets.
For cases when an application wishes to update the same set of descriptors
in multiple descriptor sets allocated using the same
<code>VkDescriptorSetLayout</code>, <a href="#vkUpdateDescriptorSetWithTemplate">vkUpdateDescriptorSetWithTemplate</a> <strong class="purple">can</strong> be
used as a replacement for <a href="#vkUpdateDescriptorSets">vkUpdateDescriptorSets</a>.</p>
</div>
<div class="paragraph">
<p><code>VkDescriptorUpdateTemplate</code> allows implementations to convert a set of
descriptor update operations on a single descriptor set to an internal
format that, in conjunction with <a href="#vkUpdateDescriptorSetWithTemplate">vkUpdateDescriptorSetWithTemplate</a>
or <a href="#vkCmdPushDescriptorSetWithTemplateKHR">vkCmdPushDescriptorSetWithTemplateKHR</a>
, <strong class="purple">can</strong> be more efficient compared to calling <a href="#vkUpdateDescriptorSets">vkUpdateDescriptorSets</a>
or <a href="#vkCmdPushDescriptorSetKHR">vkCmdPushDescriptorSetKHR</a>
.
The descriptors themselves are not specified in the
<code>VkDescriptorUpdateTemplate</code>, rather, offsets into an application
provided pointer to host memory are specified, which are combined with a
pointer passed to <a href="#vkUpdateDescriptorSetWithTemplate">vkUpdateDescriptorSetWithTemplate</a>
or <a href="#vkCmdPushDescriptorSetWithTemplateKHR">vkCmdPushDescriptorSetWithTemplateKHR</a>
.
This allows large batches of updates to be executed without having to
convert application data structures into a strictly-defined Vulkan data
structure.</p>
</div>
<div class="paragraph">
<p>To create a descriptor update template, call:</p>
</div>
<div id="vkCreateDescriptorUpdateTemplate" class="listingblock">
<div class="content">
<pre class="highlight"><code class="language-c++" data-lang="c++">VkResult vkCreateDescriptorUpdateTemplate(
    VkDevice                                    device,
    const VkDescriptorUpdateTemplateCreateInfo* pCreateInfo,
    const VkAllocationCallbacks*                pAllocator,
    VkDescriptorUpdateTemplate*                 pDescriptorUpdateTemplate);</code></pre>
</div>
</div>
<div class="paragraph">
<p>or the equivalent command</p>
</div>
<div id="vkCreateDescriptorUpdateTemplateKHR" class="listingblock">
<div class="content">
<pre class="highlight"><code class="language-c++" data-lang="c++">VkResult vkCreateDescriptorUpdateTemplateKHR(
    VkDevice                                    device,
    const VkDescriptorUpdateTemplateCreateInfo* pCreateInfo,
    const VkAllocationCallbacks*                pAllocator,
    VkDescriptorUpdateTemplate*                 pDescriptorUpdateTemplate);</code></pre>
</div>
</div>
</div>
<div class="sect3">
<h4 id="_parameters_112">Parameters</h4>
<div class="ulist">
<ul>
<li>
<p><code>device</code> is the logical device that creates the descriptor update
template.</p>
</li>
<li>
<p><code>pCreateInfo</code> is a pointer to an instance of the
<a href="#VkDescriptorUpdateTemplateCreateInfo">VkDescriptorUpdateTemplateCreateInfo</a> structure specifying the set
of descriptors to update with a single call to
<a href="#vkCmdPushDescriptorSetWithTemplateKHR">vkCmdPushDescriptorSetWithTemplateKHR</a> or
<a href="#vkUpdateDescriptorSetWithTemplate">vkUpdateDescriptorSetWithTemplate</a>.</p>
</li>
<li>
<p><code>pAllocator</code> controls host memory allocation as described in the
<a href="vkspec.html#memory-allocation">Memory Allocation</a> chapter.</p>
</li>
<li>
<p><code>pDescriptorUpdateTemplate</code> points to a
<code>VkDescriptorUpdateTemplate</code> handle in which the resulting
descriptor update template object is returned.</p>
</li>
</ul>
</div>
</div>
<div class="sect3">
<h4 id="_description_112">Description</h4>
<div class="sidebarblock">
<div class="content">
<div class="title">Valid Usage (Implicit)</div>
<div class="ulist">
<ul>
<li>
<p><a id="VUID-vkCreateDescriptorUpdateTemplate-device-parameter"></a> <code>device</code> <strong class="purple">must</strong> be a valid <code>VkDevice</code> handle</p>
</li>
<li>
<p><a id="VUID-vkCreateDescriptorUpdateTemplate-pCreateInfo-parameter"></a> <code>pCreateInfo</code> <strong class="purple">must</strong> be a valid pointer to a valid <code>VkDescriptorUpdateTemplateCreateInfo</code> structure</p>
</li>
<li>
<p><a id="VUID-vkCreateDescriptorUpdateTemplate-pAllocator-parameter"></a> If <code>pAllocator</code> is not <code>NULL</code>, <code>pAllocator</code> <strong class="purple">must</strong> be a valid pointer to a valid <code>VkAllocationCallbacks</code> structure</p>
</li>
<li>
<p><a id="VUID-vkCreateDescriptorUpdateTemplate-pDescriptorUpdateTemplate-parameter"></a> <code>pDescriptorUpdateTemplate</code> <strong class="purple">must</strong> be a valid pointer to a <code>VkDescriptorUpdateTemplate</code> handle</p>
</li>
</ul>
</div>
</div>
</div>
<div class="sidebarblock">
<div class="content">
<div class="title">Return Codes</div>
<div class="dlist">
<dl>
<dt class="hdlist1"><a href="#fundamentals-successcodes">Success</a></dt>
<dd>
<div class="ulist">
<ul>
<li>
<p><code>VK_SUCCESS</code></p>
</li>
</ul>
</div>
</dd>
<dt class="hdlist1"><a href="#fundamentals-errorcodes">Failure</a></dt>
<dd>
<div class="ulist">
<ul>
<li>
<p><code>VK_ERROR_OUT_OF_HOST_MEMORY</code></p>
</li>
<li>
<p><code>VK_ERROR_OUT_OF_DEVICE_MEMORY</code></p>
</li>
</ul>
</div>
</dd>
</dl>
</div>
</div>
</div>
</div>
<div class="sect3">
<h4 id="_see_also_112">See Also</h4>
<div class="paragraph">
<p><a href="#VkAllocationCallbacks">VkAllocationCallbacks</a>, <a href="#VkDescriptorUpdateTemplate">VkDescriptorUpdateTemplate</a>, <a href="#VkDescriptorUpdateTemplateCreateInfo">VkDescriptorUpdateTemplateCreateInfo</a>, <a href="#VkDevice">VkDevice</a></p>
</div>
</div>
<div class="sect3">
<h4 id="_document_notes_112">Document Notes</h4>
<div class="paragraph">
<p>For more information, see the Vulkan Specification at URL</p>
</div>
<div class="paragraph">
<p><a href="https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#vkCreateDescriptorUpdateTemplate" class="bare">https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#vkCreateDescriptorUpdateTemplate</a></p>
</div>
<div class="paragraph">
<p>This page is extracted from the Vulkan Specification.
Fixes and changes should be made to the Specification, not directly.</p>
</div>
<div style="page-break-after: always;"></div>
</div>
</div>
<div class="sect2">
<h3 id="_vkcreatedevice3">vkCreateDevice(3)</h3>
<div class="sect3">
<h4 id="_name_113">Name</h4>
<div class="paragraph">
<p>vkCreateDevice - Create a new device instance</p>
</div>
</div>
<div class="sect3">
<h4 id="_c_specification_113">C Specification</h4>
<div class="paragraph">
<p>A logical device is created as a <em>connection</em> to a physical device.
To create a logical device, call:</p>
</div>
<div id="vkCreateDevice" class="listingblock">
<div class="content">
<pre class="highlight"><code class="language-c++" data-lang="c++">VkResult vkCreateDevice(
    VkPhysicalDevice                            physicalDevice,
    const VkDeviceCreateInfo*                   pCreateInfo,
    const VkAllocationCallbacks*                pAllocator,
    VkDevice*                                   pDevice);</code></pre>
</div>
</div>
</div>
<div class="sect3">
<h4 id="_parameters_113">Parameters</h4>
<div class="ulist">
<ul>
<li>
<p><code>physicalDevice</code> <strong class="purple">must</strong> be one of the device handles returned from a
call to <code>vkEnumeratePhysicalDevices</code> (see
<a href="vkspec.html#devsandqueues-physical-device-enumeration">Physical Device
Enumeration</a>).</p>
</li>
<li>
<p><code>pCreateInfo</code> is a pointer to a <a href="#VkDeviceCreateInfo">VkDeviceCreateInfo</a> structure
containing information about how to create the device.</p>
</li>
<li>
<p><code>pAllocator</code> controls host memory allocation as described in the
<a href="vkspec.html#memory-allocation">Memory Allocation</a> chapter.</p>
</li>
<li>
<p><code>pDevice</code> points to a handle in which the created <a href="#VkDevice">VkDevice</a> is
returned.</p>
</li>
</ul>
</div>
</div>
<div class="sect3">
<h4 id="_description_113">Description</h4>
<div class="paragraph">
<p><code>vkCreateDevice</code> verifies that extensions and features requested in the
<code>ppEnabledExtensionNames</code> and <code>pEnabledFeatures</code> members of
<code>pCreateInfo</code>, respectively, are supported by the implementation.
If any requested extension is not supported, <code>vkCreateDevice</code> <strong class="purple">must</strong>
return <code>VK_ERROR_EXTENSION_NOT_PRESENT</code>.
If any requested feature is not supported, <code>vkCreateDevice</code> <strong class="purple">must</strong> return
<code>VK_ERROR_FEATURE_NOT_PRESENT</code>.
Support for extensions <strong class="purple">can</strong> be checked before creating a device by querying
<a href="#vkEnumerateDeviceExtensionProperties">vkEnumerateDeviceExtensionProperties</a>.
Support for features <strong class="purple">can</strong> similarly be checked by querying
<a href="#vkGetPhysicalDeviceFeatures">vkGetPhysicalDeviceFeatures</a>.</p>
</div>
<div class="paragraph">
<p>After verifying and enabling the extensions the <code>VkDevice</code> object is
created and returned to the application.
If a requested extension is only supported by a layer, both the layer and
the extension need to be specified at <code>vkCreateInstance</code> time for the
creation to succeed.</p>
</div>
<div class="paragraph">
<p>Multiple logical devices <strong class="purple">can</strong> be created from the same physical device.
Logical device creation <strong class="purple">may</strong> fail due to lack of device-specific resources
(in addition to the other errors).
If that occurs, <code>vkCreateDevice</code> will return
<code>VK_ERROR_TOO_MANY_OBJECTS</code>.</p>
</div>
<div class="sidebarblock">
<div class="content">
<div class="title">Valid Usage</div>
<div class="ulist">
<ul>
<li>
<p><a id="VUID-vkCreateDevice-ppEnabledExtensionNames-01387"></a>
All <a href="vkspec.html#extendingvulkan-extensions-extensiondependencies">required
extensions</a> for each extension in the
<a href="#VkDeviceCreateInfo">VkDeviceCreateInfo</a>::<code>ppEnabledExtensionNames</code> list <strong class="purple">must</strong> also
be present in that list.</p>
</li>
</ul>
</div>
</div>
</div>
<div class="sidebarblock">
<div class="content">
<div class="title">Valid Usage (Implicit)</div>
<div class="ulist">
<ul>
<li>
<p><a id="VUID-vkCreateDevice-physicalDevice-parameter"></a> <code>physicalDevice</code> <strong class="purple">must</strong> be a valid <code>VkPhysicalDevice</code> handle</p>
</li>
<li>
<p><a id="VUID-vkCreateDevice-pCreateInfo-parameter"></a> <code>pCreateInfo</code> <strong class="purple">must</strong> be a valid pointer to a valid <code>VkDeviceCreateInfo</code> structure</p>
</li>
<li>
<p><a id="VUID-vkCreateDevice-pAllocator-parameter"></a> If <code>pAllocator</code> is not <code>NULL</code>, <code>pAllocator</code> <strong class="purple">must</strong> be a valid pointer to a valid <code>VkAllocationCallbacks</code> structure</p>
</li>
<li>
<p><a id="VUID-vkCreateDevice-pDevice-parameter"></a> <code>pDevice</code> <strong class="purple">must</strong> be a valid pointer to a <code>VkDevice</code> handle</p>
</li>
</ul>
</div>
</div>
</div>
<div class="sidebarblock">
<div class="content">
<div class="title">Return Codes</div>
<div class="dlist">
<dl>
<dt class="hdlist1"><a href="#fundamentals-successcodes">Success</a></dt>
<dd>
<div class="ulist">
<ul>
<li>
<p><code>VK_SUCCESS</code></p>
</li>
</ul>
</div>
</dd>
<dt class="hdlist1"><a href="#fundamentals-errorcodes">Failure</a></dt>
<dd>
<div class="ulist">
<ul>
<li>
<p><code>VK_ERROR_OUT_OF_HOST_MEMORY</code></p>
</li>
<li>
<p><code>VK_ERROR_OUT_OF_DEVICE_MEMORY</code></p>
</li>
<li>
<p><code>VK_ERROR_INITIALIZATION_FAILED</code></p>
</li>
<li>
<p><code>VK_ERROR_EXTENSION_NOT_PRESENT</code></p>
</li>
<li>
<p><code>VK_ERROR_FEATURE_NOT_PRESENT</code></p>
</li>
<li>
<p><code>VK_ERROR_TOO_MANY_OBJECTS</code></p>
</li>
<li>
<p><code>VK_ERROR_DEVICE_LOST</code></p>
</li>
</ul>
</div>
</dd>
</dl>
</div>
</div>
</div>
</div>
<div class="sect3">
<h4 id="_see_also_113">See Also</h4>
<div class="paragraph">
<p><a href="#VkAllocationCallbacks">VkAllocationCallbacks</a>, <a href="#VkDevice">VkDevice</a>, <a href="#VkDeviceCreateInfo">VkDeviceCreateInfo</a>, <a href="#VkPhysicalDevice">VkPhysicalDevice</a></p>
</div>
</div>
<div class="sect3">
<h4 id="_document_notes_113">Document Notes</h4>
<div class="paragraph">
<p>For more information, see the Vulkan Specification at URL</p>
</div>
<div class="paragraph">
<p><a href="https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#vkCreateDevice" class="bare">https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#vkCreateDevice</a></p>
</div>
<div class="paragraph">
<p>This page is extracted from the Vulkan Specification.
Fixes and changes should be made to the Specification, not directly.</p>
</div>
<div style="page-break-after: always;"></div>
</div>
</div>
<div class="sect2">
<h3 id="_vkcreatedisplaymodekhr3">vkCreateDisplayModeKHR(3)</h3>
<div class="sect3">
<h4 id="_name_114">Name</h4>
<div class="paragraph">
<p>vkCreateDisplayModeKHR - Create a display mode</p>
</div>
</div>
<div class="sect3">
<h4 id="_c_specification_114">C Specification</h4>
<div class="paragraph">
<p>Additional modes <strong class="purple">may</strong> also be created by calling:</p>
</div>
<div id="vkCreateDisplayModeKHR" class="listingblock">
<div class="content">
<pre class="highlight"><code class="language-c++" data-lang="c++">VkResult vkCreateDisplayModeKHR(
    VkPhysicalDevice                            physicalDevice,
    VkDisplayKHR                                display,
    const VkDisplayModeCreateInfoKHR*           pCreateInfo,
    const VkAllocationCallbacks*                pAllocator,
    VkDisplayModeKHR*                           pMode);</code></pre>
</div>
</div>
</div>
<div class="sect3">
<h4 id="_parameters_114">Parameters</h4>
<div class="ulist">
<ul>
<li>
<p><code>physicalDevice</code> is the physical device associated with
<code>display</code>.</p>
</li>
<li>
<p><code>display</code> is the display to create an additional mode for.</p>
</li>
<li>
<p><code>pCreateInfo</code> is a <a href="#VkDisplayModeCreateInfoKHR">VkDisplayModeCreateInfoKHR</a> structure
describing the new mode to create.</p>
</li>
<li>
<p><code>pAllocator</code> is the allocator used for host memory allocated for the
display mode object when there is no more specific allocator available
(see <a href="vkspec.html#memory-allocation">Memory Allocation</a>).</p>
</li>
<li>
<p><code>pMode</code> returns the handle of the mode created.</p>
</li>
</ul>
</div>
</div>
<div class="sect3">
<h4 id="_description_114">Description</h4>
<div class="sidebarblock">
<div class="content">
<div class="title">Valid Usage (Implicit)</div>
<div class="ulist">
<ul>
<li>
<p><a id="VUID-vkCreateDisplayModeKHR-physicalDevice-parameter"></a> <code>physicalDevice</code> <strong class="purple">must</strong> be a valid <code>VkPhysicalDevice</code> handle</p>
</li>
<li>
<p><a id="VUID-vkCreateDisplayModeKHR-display-parameter"></a> <code>display</code> <strong class="purple">must</strong> be a valid <code>VkDisplayKHR</code> handle</p>
</li>
<li>
<p><a id="VUID-vkCreateDisplayModeKHR-pCreateInfo-parameter"></a> <code>pCreateInfo</code> <strong class="purple">must</strong> be a valid pointer to a valid <code>VkDisplayModeCreateInfoKHR</code> structure</p>
</li>
<li>
<p><a id="VUID-vkCreateDisplayModeKHR-pAllocator-parameter"></a> If <code>pAllocator</code> is not <code>NULL</code>, <code>pAllocator</code> <strong class="purple">must</strong> be a valid pointer to a valid <code>VkAllocationCallbacks</code> structure</p>
</li>
<li>
<p><a id="VUID-vkCreateDisplayModeKHR-pMode-parameter"></a> <code>pMode</code> <strong class="purple">must</strong> be a valid pointer to a <code>VkDisplayModeKHR</code> handle</p>
</li>
</ul>
</div>
</div>
</div>
<div class="sidebarblock">
<div class="content">
<div class="title">Host Synchronization</div>
<div class="ulist">
<ul>
<li>
<p>Host access to <code>display</code> <strong class="purple">must</strong> be externally synchronized</p>
</li>
</ul>
</div>
</div>
</div>
<div class="sidebarblock">
<div class="content">
<div class="title">Return Codes</div>
<div class="dlist">
<dl>
<dt class="hdlist1"><a href="#fundamentals-successcodes">Success</a></dt>
<dd>
<div class="ulist">
<ul>
<li>
<p><code>VK_SUCCESS</code></p>
</li>
</ul>
</div>
</dd>
<dt class="hdlist1"><a href="#fundamentals-errorcodes">Failure</a></dt>
<dd>
<div class="ulist">
<ul>
<li>
<p><code>VK_ERROR_OUT_OF_HOST_MEMORY</code></p>
</li>
<li>
<p><code>VK_ERROR_OUT_OF_DEVICE_MEMORY</code></p>
</li>
<li>
<p><code>VK_ERROR_INITIALIZATION_FAILED</code></p>
</li>
</ul>
</div>
</dd>
</dl>
</div>
</div>
</div>
</div>
<div class="sect3">
<h4 id="_see_also_114">See Also</h4>
<div class="paragraph">
<p><a href="#VkAllocationCallbacks">VkAllocationCallbacks</a>, <a href="#VkDisplayKHR">VkDisplayKHR</a>, <a href="#VkDisplayModeCreateInfoKHR">VkDisplayModeCreateInfoKHR</a>, <a href="#VkDisplayModeKHR">VkDisplayModeKHR</a>, <a href="#VkPhysicalDevice">VkPhysicalDevice</a></p>
</div>
</div>
<div class="sect3">
<h4 id="_document_notes_114">Document Notes</h4>
<div class="paragraph">
<p>For more information, see the Vulkan Specification at URL</p>
</div>
<div class="paragraph">
<p><a href="https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#vkCreateDisplayModeKHR" class="bare">https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#vkCreateDisplayModeKHR</a></p>
</div>
<div class="paragraph">
<p>This page is extracted from the Vulkan Specification.
Fixes and changes should be made to the Specification, not directly.</p>
</div>
<div style="page-break-after: always;"></div>
</div>
</div>
<div class="sect2">
<h3 id="_vkcreatedisplayplanesurfacekhr3">vkCreateDisplayPlaneSurfaceKHR(3)</h3>
<div class="sect3">
<h4 id="_name_115">Name</h4>
<div class="paragraph">
<p>vkCreateDisplayPlaneSurfaceKHR - Create a <a href="#VkSurfaceKHR">VkSurfaceKHR</a> structure representing a display plane and mode</p>
</div>
</div>
<div class="sect3">
<h4 id="_c_specification_115">C Specification</h4>
<div class="paragraph">
<p>A complete display configuration includes a mode, one or more display planes
and any parameters describing their behavior, and parameters describing some
aspects of the images associated with those planes.
Display surfaces describe the configuration of a single plane within a
complete display configuration.
To create a <code>VkSurfaceKHR</code> structure for a display surface, call:</p>
</div>
<div id="vkCreateDisplayPlaneSurfaceKHR" class="listingblock">
<div class="content">
<pre class="highlight"><code class="language-c++" data-lang="c++">VkResult vkCreateDisplayPlaneSurfaceKHR(
    VkInstance                                  instance,
    const VkDisplaySurfaceCreateInfoKHR*        pCreateInfo,
    const VkAllocationCallbacks*                pAllocator,
    VkSurfaceKHR*                               pSurface);</code></pre>
</div>
</div>
</div>
<div class="sect3">
<h4 id="_parameters_115">Parameters</h4>
<div class="ulist">
<ul>
<li>
<p><code>instance</code> is the instance corresponding to the physical device the
targeted display is on.</p>
</li>
<li>
<p><code>pCreateInfo</code> is a pointer to an instance of the
<a href="#VkDisplaySurfaceCreateInfoKHR">VkDisplaySurfaceCreateInfoKHR</a> structure specifying which mode,
plane, and other parameters to use, as described below.</p>
</li>
<li>
<p><code>pAllocator</code> is the allocator used for host memory allocated for the
surface object when there is no more specific allocator available (see
<a href="vkspec.html#memory-allocation">Memory Allocation</a>).</p>
</li>
<li>
<p><code>pSurface</code> points to a <a href="#VkSurfaceKHR">VkSurfaceKHR</a> handle in which the
created surface is returned.</p>
</li>
</ul>
</div>
</div>
<div class="sect3">
<h4 id="_description_115">Description</h4>
<div class="sidebarblock">
<div class="content">
<div class="title">Valid Usage (Implicit)</div>
<div class="ulist">
<ul>
<li>
<p><a id="VUID-vkCreateDisplayPlaneSurfaceKHR-instance-parameter"></a> <code>instance</code> <strong class="purple">must</strong> be a valid <code>VkInstance</code> handle</p>
</li>
<li>
<p><a id="VUID-vkCreateDisplayPlaneSurfaceKHR-pCreateInfo-parameter"></a> <code>pCreateInfo</code> <strong class="purple">must</strong> be a valid pointer to a valid <code>VkDisplaySurfaceCreateInfoKHR</code> structure</p>
</li>
<li>
<p><a id="VUID-vkCreateDisplayPlaneSurfaceKHR-pAllocator-parameter"></a> If <code>pAllocator</code> is not <code>NULL</code>, <code>pAllocator</code> <strong class="purple">must</strong> be a valid pointer to a valid <code>VkAllocationCallbacks</code> structure</p>
</li>
<li>
<p><a id="VUID-vkCreateDisplayPlaneSurfaceKHR-pSurface-parameter"></a> <code>pSurface</code> <strong class="purple">must</strong> be a valid pointer to a <code>VkSurfaceKHR</code> handle</p>
</li>
</ul>
</div>
</div>
</div>
<div class="sidebarblock">
<div class="content">
<div class="title">Return Codes</div>
<div class="dlist">
<dl>
<dt class="hdlist1"><a href="#fundamentals-successcodes">Success</a></dt>
<dd>
<div class="ulist">
<ul>
<li>
<p><code>VK_SUCCESS</code></p>
</li>
</ul>
</div>
</dd>
<dt class="hdlist1"><a href="#fundamentals-errorcodes">Failure</a></dt>
<dd>
<div class="ulist">
<ul>
<li>
<p><code>VK_ERROR_OUT_OF_HOST_MEMORY</code></p>
</li>
<li>
<p><code>VK_ERROR_OUT_OF_DEVICE_MEMORY</code></p>
</li>
</ul>
</div>
</dd>
</dl>
</div>
</div>
</div>
</div>
<div class="sect3">
<h4 id="_see_also_115">See Also</h4>
<div class="paragraph">
<p><a href="#VkAllocationCallbacks">VkAllocationCallbacks</a>, <a href="#VkDisplaySurfaceCreateInfoKHR">VkDisplaySurfaceCreateInfoKHR</a>, <a href="#VkInstance">VkInstance</a>, <a href="#VkSurfaceKHR">VkSurfaceKHR</a></p>
</div>
</div>
<div class="sect3">
<h4 id="_document_notes_115">Document Notes</h4>
<div class="paragraph">
<p>For more information, see the Vulkan Specification at URL</p>
</div>
<div class="paragraph">
<p><a href="https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#vkCreateDisplayPlaneSurfaceKHR" class="bare">https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#vkCreateDisplayPlaneSurfaceKHR</a></p>
</div>
<div class="paragraph">
<p>This page is extracted from the Vulkan Specification.
Fixes and changes should be made to the Specification, not directly.</p>
</div>
<div style="page-break-after: always;"></div>
</div>
</div>
<div class="sect2">
<h3 id="_vkcreateevent3">vkCreateEvent(3)</h3>
<div class="sect3">
<h4 id="_name_116">Name</h4>
<div class="paragraph">
<p>vkCreateEvent - Create a new event object</p>
</div>
</div>
<div class="sect3">
<h4 id="_c_specification_116">C Specification</h4>
<div class="paragraph">
<p>To create an event, call:</p>
</div>
<div id="vkCreateEvent" class="listingblock">
<div class="content">
<pre class="highlight"><code class="language-c++" data-lang="c++">VkResult vkCreateEvent(
    VkDevice                                    device,
    const VkEventCreateInfo*                    pCreateInfo,
    const VkAllocationCallbacks*                pAllocator,
    VkEvent*                                    pEvent);</code></pre>
</div>
</div>
</div>
<div class="sect3">
<h4 id="_parameters_116">Parameters</h4>
<div class="ulist">
<ul>
<li>
<p><code>device</code> is the logical device that creates the event.</p>
</li>
<li>
<p><code>pCreateInfo</code> is a pointer to an instance of the
<code>VkEventCreateInfo</code> structure which contains information about how
the event is to be created.</p>
</li>
<li>
<p><code>pAllocator</code> controls host memory allocation as described in the
<a href="vkspec.html#memory-allocation">Memory Allocation</a> chapter.</p>
</li>
<li>
<p><code>pEvent</code> points to a handle in which the resulting event object is
returned.</p>
</li>
</ul>
</div>
</div>
<div class="sect3">
<h4 id="_description_116">Description</h4>
<div class="paragraph">
<p>When created, the event object is in the unsignaled state.</p>
</div>
<div class="sidebarblock">
<div class="content">
<div class="title">Valid Usage (Implicit)</div>
<div class="ulist">
<ul>
<li>
<p><a id="VUID-vkCreateEvent-device-parameter"></a> <code>device</code> <strong class="purple">must</strong> be a valid <code>VkDevice</code> handle</p>
</li>
<li>
<p><a id="VUID-vkCreateEvent-pCreateInfo-parameter"></a> <code>pCreateInfo</code> <strong class="purple">must</strong> be a valid pointer to a valid <code>VkEventCreateInfo</code> structure</p>
</li>
<li>
<p><a id="VUID-vkCreateEvent-pAllocator-parameter"></a> If <code>pAllocator</code> is not <code>NULL</code>, <code>pAllocator</code> <strong class="purple">must</strong> be a valid pointer to a valid <code>VkAllocationCallbacks</code> structure</p>
</li>
<li>
<p><a id="VUID-vkCreateEvent-pEvent-parameter"></a> <code>pEvent</code> <strong class="purple">must</strong> be a valid pointer to a <code>VkEvent</code> handle</p>
</li>
</ul>
</div>
</div>
</div>
<div class="sidebarblock">
<div class="content">
<div class="title">Return Codes</div>
<div class="dlist">
<dl>
<dt class="hdlist1"><a href="#fundamentals-successcodes">Success</a></dt>
<dd>
<div class="ulist">
<ul>
<li>
<p><code>VK_SUCCESS</code></p>
</li>
</ul>
</div>
</dd>
<dt class="hdlist1"><a href="#fundamentals-errorcodes">Failure</a></dt>
<dd>
<div class="ulist">
<ul>
<li>
<p><code>VK_ERROR_OUT_OF_HOST_MEMORY</code></p>
</li>
<li>
<p><code>VK_ERROR_OUT_OF_DEVICE_MEMORY</code></p>
</li>
</ul>
</div>
</dd>
</dl>
</div>
</div>
</div>
</div>
<div class="sect3">
<h4 id="_see_also_116">See Also</h4>
<div class="paragraph">
<p><a href="#VkAllocationCallbacks">VkAllocationCallbacks</a>, <a href="#VkDevice">VkDevice</a>, <a href="#VkEvent">VkEvent</a>, <a href="#VkEventCreateInfo">VkEventCreateInfo</a></p>
</div>
</div>
<div class="sect3">
<h4 id="_document_notes_116">Document Notes</h4>
<div class="paragraph">
<p>For more information, see the Vulkan Specification at URL</p>
</div>
<div class="paragraph">
<p><a href="https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#vkCreateEvent" class="bare">https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#vkCreateEvent</a></p>
</div>
<div class="paragraph">
<p>This page is extracted from the Vulkan Specification.
Fixes and changes should be made to the Specification, not directly.</p>
</div>
<div style="page-break-after: always;"></div>
</div>
</div>
<div class="sect2">
<h3 id="_vkcreatefence3">vkCreateFence(3)</h3>
<div class="sect3">
<h4 id="_name_117">Name</h4>
<div class="paragraph">
<p>vkCreateFence - Create a new fence object</p>
</div>
</div>
<div class="sect3">
<h4 id="_c_specification_117">C Specification</h4>
<div class="paragraph">
<p>To create a fence, call:</p>
</div>
<div id="vkCreateFence" class="listingblock">
<div class="content">
<pre class="highlight"><code class="language-c++" data-lang="c++">VkResult vkCreateFence(
    VkDevice                                    device,
    const VkFenceCreateInfo*                    pCreateInfo,
    const VkAllocationCallbacks*                pAllocator,
    VkFence*                                    pFence);</code></pre>
</div>
</div>
</div>
<div class="sect3">
<h4 id="_parameters_117">Parameters</h4>
<div class="ulist">
<ul>
<li>
<p><code>device</code> is the logical device that creates the fence.</p>
</li>
<li>
<p><code>pCreateInfo</code> is a pointer to an instance of the
<code>VkFenceCreateInfo</code> structure which contains information about how
the fence is to be created.</p>
</li>
<li>
<p><code>pAllocator</code> controls host memory allocation as described in the
<a href="vkspec.html#memory-allocation">Memory Allocation</a> chapter.</p>
</li>
<li>
<p><code>pFence</code> points to a handle in which the resulting fence object is
returned.</p>
</li>
</ul>
</div>
</div>
<div class="sect3">
<h4 id="_description_117">Description</h4>
<div class="sidebarblock">
<div class="content">
<div class="title">Valid Usage (Implicit)</div>
<div class="ulist">
<ul>
<li>
<p><a id="VUID-vkCreateFence-device-parameter"></a> <code>device</code> <strong class="purple">must</strong> be a valid <code>VkDevice</code> handle</p>
</li>
<li>
<p><a id="VUID-vkCreateFence-pCreateInfo-parameter"></a> <code>pCreateInfo</code> <strong class="purple">must</strong> be a valid pointer to a valid <code>VkFenceCreateInfo</code> structure</p>
</li>
<li>
<p><a id="VUID-vkCreateFence-pAllocator-parameter"></a> If <code>pAllocator</code> is not <code>NULL</code>, <code>pAllocator</code> <strong class="purple">must</strong> be a valid pointer to a valid <code>VkAllocationCallbacks</code> structure</p>
</li>
<li>
<p><a id="VUID-vkCreateFence-pFence-parameter"></a> <code>pFence</code> <strong class="purple">must</strong> be a valid pointer to a <code>VkFence</code> handle</p>
</li>
</ul>
</div>
</div>
</div>
<div class="sidebarblock">
<div class="content">
<div class="title">Return Codes</div>
<div class="dlist">
<dl>
<dt class="hdlist1"><a href="#fundamentals-successcodes">Success</a></dt>
<dd>
<div class="ulist">
<ul>
<li>
<p><code>VK_SUCCESS</code></p>
</li>
</ul>
</div>
</dd>
<dt class="hdlist1"><a href="#fundamentals-errorcodes">Failure</a></dt>
<dd>
<div class="ulist">
<ul>
<li>
<p><code>VK_ERROR_OUT_OF_HOST_MEMORY</code></p>
</li>
<li>
<p><code>VK_ERROR_OUT_OF_DEVICE_MEMORY</code></p>
</li>
</ul>
</div>
</dd>
</dl>
</div>
</div>
</div>
</div>
<div class="sect3">
<h4 id="_see_also_117">See Also</h4>
<div class="paragraph">
<p><a href="#VkAllocationCallbacks">VkAllocationCallbacks</a>, <a href="#VkDevice">VkDevice</a>, <a href="#VkFence">VkFence</a>, <a href="#VkFenceCreateInfo">VkFenceCreateInfo</a></p>
</div>
</div>
<div class="sect3">
<h4 id="_document_notes_117">Document Notes</h4>
<div class="paragraph">
<p>For more information, see the Vulkan Specification at URL</p>
</div>
<div class="paragraph">
<p><a href="https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#vkCreateFence" class="bare">https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#vkCreateFence</a></p>
</div>
<div class="paragraph">
<p>This page is extracted from the Vulkan Specification.
Fixes and changes should be made to the Specification, not directly.</p>
</div>
<div style="page-break-after: always;"></div>
</div>
</div>
<div class="sect2">
<h3 id="_vkcreateframebuffer3">vkCreateFramebuffer(3)</h3>
<div class="sect3">
<h4 id="_name_118">Name</h4>
<div class="paragraph">
<p>vkCreateFramebuffer - Create a new framebuffer object</p>
</div>
</div>
<div class="sect3">
<h4 id="_c_specification_118">C Specification</h4>
<div class="paragraph">
<p>To create a framebuffer, call:</p>
</div>
<div id="vkCreateFramebuffer" class="listingblock">
<div class="content">
<pre class="highlight"><code class="language-c++" data-lang="c++">VkResult vkCreateFramebuffer(
    VkDevice                                    device,
    const VkFramebufferCreateInfo*              pCreateInfo,
    const VkAllocationCallbacks*                pAllocator,
    VkFramebuffer*                              pFramebuffer);</code></pre>
</div>
</div>
</div>
<div class="sect3">
<h4 id="_parameters_118">Parameters</h4>
<div class="ulist">
<ul>
<li>
<p><code>device</code> is the logical device that creates the framebuffer.</p>
</li>
<li>
<p><code>pCreateInfo</code> points to a <a href="#VkFramebufferCreateInfo">VkFramebufferCreateInfo</a> structure
which describes additional information about framebuffer creation.</p>
</li>
<li>
<p><code>pAllocator</code> controls host memory allocation as described in the
<a href="vkspec.html#memory-allocation">Memory Allocation</a> chapter.</p>
</li>
<li>
<p><code>pFramebuffer</code> points to a <a href="#VkFramebuffer">VkFramebuffer</a> handle in which the
resulting framebuffer object is returned.</p>
</li>
</ul>
</div>
</div>
<div class="sect3">
<h4 id="_description_118">Description</h4>
<div class="sidebarblock">
<div class="content">
<div class="title">Valid Usage (Implicit)</div>
<div class="ulist">
<ul>
<li>
<p><a id="VUID-vkCreateFramebuffer-device-parameter"></a> <code>device</code> <strong class="purple">must</strong> be a valid <code>VkDevice</code> handle</p>
</li>
<li>
<p><a id="VUID-vkCreateFramebuffer-pCreateInfo-parameter"></a> <code>pCreateInfo</code> <strong class="purple">must</strong> be a valid pointer to a valid <code>VkFramebufferCreateInfo</code> structure</p>
</li>
<li>
<p><a id="VUID-vkCreateFramebuffer-pAllocator-parameter"></a> If <code>pAllocator</code> is not <code>NULL</code>, <code>pAllocator</code> <strong class="purple">must</strong> be a valid pointer to a valid <code>VkAllocationCallbacks</code> structure</p>
</li>
<li>
<p><a id="VUID-vkCreateFramebuffer-pFramebuffer-parameter"></a> <code>pFramebuffer</code> <strong class="purple">must</strong> be a valid pointer to a <code>VkFramebuffer</code> handle</p>
</li>
</ul>
</div>
</div>
</div>
<div class="sidebarblock">
<div class="content">
<div class="title">Return Codes</div>
<div class="dlist">
<dl>
<dt class="hdlist1"><a href="#fundamentals-successcodes">Success</a></dt>
<dd>
<div class="ulist">
<ul>
<li>
<p><code>VK_SUCCESS</code></p>
</li>
</ul>
</div>
</dd>
<dt class="hdlist1"><a href="#fundamentals-errorcodes">Failure</a></dt>
<dd>
<div class="ulist">
<ul>
<li>
<p><code>VK_ERROR_OUT_OF_HOST_MEMORY</code></p>
</li>
<li>
<p><code>VK_ERROR_OUT_OF_DEVICE_MEMORY</code></p>
</li>
</ul>
</div>
</dd>
</dl>
</div>
</div>
</div>
</div>
<div class="sect3">
<h4 id="_see_also_118">See Also</h4>
<div class="paragraph">
<p><a href="#VkAllocationCallbacks">VkAllocationCallbacks</a>, <a href="#VkDevice">VkDevice</a>, <a href="#VkFramebuffer">VkFramebuffer</a>, <a href="#VkFramebufferCreateInfo">VkFramebufferCreateInfo</a></p>
</div>
</div>
<div class="sect3">
<h4 id="_document_notes_118">Document Notes</h4>
<div class="paragraph">
<p>For more information, see the Vulkan Specification at URL</p>
</div>
<div class="paragraph">
<p><a href="https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#vkCreateFramebuffer" class="bare">https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#vkCreateFramebuffer</a></p>
</div>
<div class="paragraph">
<p>This page is extracted from the Vulkan Specification.
Fixes and changes should be made to the Specification, not directly.</p>
</div>
<div style="page-break-after: always;"></div>
</div>
</div>
<div class="sect2">
<h3 id="_vkcreategraphicspipelines3">vkCreateGraphicsPipelines(3)</h3>
<div class="sect3">
<h4 id="_name_119">Name</h4>
<div class="paragraph">
<p>vkCreateGraphicsPipelines - Create graphics pipelines</p>
</div>
</div>
<div class="sect3">
<h4 id="_c_specification_119">C Specification</h4>
<div class="paragraph">
<p>To create graphics pipelines, call:</p>
</div>
<div id="vkCreateGraphicsPipelines" class="listingblock">
<div class="content">
<pre class="highlight"><code class="language-c++" data-lang="c++">VkResult vkCreateGraphicsPipelines(
    VkDevice                                    device,
    VkPipelineCache                             pipelineCache,
    uint32_t                                    createInfoCount,
    const VkGraphicsPipelineCreateInfo*         pCreateInfos,
    const VkAllocationCallbacks*                pAllocator,
    VkPipeline*                                 pPipelines);</code></pre>
</div>
</div>
</div>
<div class="sect3">
<h4 id="_parameters_119">Parameters</h4>
<div class="ulist">
<ul>
<li>
<p><code>device</code> is the logical device that creates the graphics pipelines.</p>
</li>
<li>
<p><code>pipelineCache</code> is either <a href="#VK_NULL_HANDLE">VK_NULL_HANDLE</a>, indicating that
pipeline caching is disabled; or the handle of a valid
<a href="vkspec.html#pipelines-cache">pipeline cache</a> object, in which case use of that
cache is enabled for the duration of the command.</p>
</li>
<li>
<p><code>createInfoCount</code> is the length of the <code>pCreateInfos</code> and
<code>pPipelines</code> arrays.</p>
</li>
<li>
<p><code>pCreateInfos</code> is an array of <a href="#VkGraphicsPipelineCreateInfo">VkGraphicsPipelineCreateInfo</a>
structures.</p>
</li>
<li>
<p><code>pAllocator</code> controls host memory allocation as described in the
<a href="vkspec.html#memory-allocation">Memory Allocation</a> chapter.</p>
</li>
<li>
<p><code>pPipelines</code> is a pointer to an array in which the resulting
graphics pipeline objects are returned.</p>
</li>
</ul>
</div>
</div>
<div class="sect3">
<h4 id="_description_119">Description</h4>
<div class="paragraph">
<p>The <a href="#VkGraphicsPipelineCreateInfo">VkGraphicsPipelineCreateInfo</a> structure includes an array of shader
create info structures containing all the desired active shader stages, as
well as creation info to define all relevant fixed-function stages, and a
pipeline layout.</p>
</div>
<div class="sidebarblock">
<div class="content">
<div class="title">Valid Usage</div>
<div class="ulist">
<ul>
<li>
<p><a id="VUID-vkCreateGraphicsPipelines-flags-00720"></a>
If the <code>flags</code> member of any element of <code>pCreateInfos</code> contains
the <code>VK_PIPELINE_CREATE_DERIVATIVE_BIT</code> flag, and the
<code>basePipelineIndex</code> member of that same element is not <code>-1</code>,
<code>basePipelineIndex</code> <strong class="purple">must</strong> be less than the index into
<code>pCreateInfos</code> that corresponds to that element</p>
</li>
<li>
<p><a id="VUID-vkCreateGraphicsPipelines-flags-00721"></a>
If the <code>flags</code> member of any element of <code>pCreateInfos</code> contains
the <code>VK_PIPELINE_CREATE_DERIVATIVE_BIT</code> flag, the base pipeline
<strong class="purple">must</strong> have been created with the
<code>VK_PIPELINE_CREATE_ALLOW_DERIVATIVES_BIT</code> flag set</p>
</li>
</ul>
</div>
</div>
</div>
<div class="sidebarblock">
<div class="content">
<div class="title">Valid Usage (Implicit)</div>
<div class="ulist">
<ul>
<li>
<p><a id="VUID-vkCreateGraphicsPipelines-device-parameter"></a> <code>device</code> <strong class="purple">must</strong> be a valid <code>VkDevice</code> handle</p>
</li>
<li>
<p><a id="VUID-vkCreateGraphicsPipelines-pipelineCache-parameter"></a> If <code>pipelineCache</code> is not <a href="#VK_NULL_HANDLE">VK_NULL_HANDLE</a>, <code>pipelineCache</code> <strong class="purple">must</strong> be a valid <code>VkPipelineCache</code> handle</p>
</li>
<li>
<p><a id="VUID-vkCreateGraphicsPipelines-pCreateInfos-parameter"></a> <code>pCreateInfos</code> <strong class="purple">must</strong> be a valid pointer to an array of <code>createInfoCount</code> valid <code>VkGraphicsPipelineCreateInfo</code> structures</p>
</li>
<li>
<p><a id="VUID-vkCreateGraphicsPipelines-pAllocator-parameter"></a> If <code>pAllocator</code> is not <code>NULL</code>, <code>pAllocator</code> <strong class="purple">must</strong> be a valid pointer to a valid <code>VkAllocationCallbacks</code> structure</p>
</li>
<li>
<p><a id="VUID-vkCreateGraphicsPipelines-pPipelines-parameter"></a> <code>pPipelines</code> <strong class="purple">must</strong> be a valid pointer to an array of <code>createInfoCount</code> <code>VkPipeline</code> handles</p>
</li>
<li>
<p><a id="VUID-vkCreateGraphicsPipelines-createInfoCount-arraylength"></a> <code>createInfoCount</code> <strong class="purple">must</strong> be greater than <code>0</code></p>
</li>
<li>
<p><a id="VUID-vkCreateGraphicsPipelines-pipelineCache-parent"></a> If <code>pipelineCache</code> is a valid handle, it <strong class="purple">must</strong> have been created, allocated, or retrieved from <code>device</code></p>
</li>
</ul>
</div>
</div>
</div>
<div class="sidebarblock">
<div class="content">
<div class="title">Return Codes</div>
<div class="dlist">
<dl>
<dt class="hdlist1"><a href="#fundamentals-successcodes">Success</a></dt>
<dd>
<div class="ulist">
<ul>
<li>
<p><code>VK_SUCCESS</code></p>
</li>
</ul>
</div>
</dd>
<dt class="hdlist1"><a href="#fundamentals-errorcodes">Failure</a></dt>
<dd>
<div class="ulist">
<ul>
<li>
<p><code>VK_ERROR_OUT_OF_HOST_MEMORY</code></p>
</li>
<li>
<p><code>VK_ERROR_OUT_OF_DEVICE_MEMORY</code></p>
</li>
<li>
<p><code>VK_ERROR_INVALID_SHADER_NV</code></p>
</li>
</ul>
</div>
</dd>
</dl>
</div>
</div>
</div>
</div>
<div class="sect3">
<h4 id="_see_also_119">See Also</h4>
<div class="paragraph">
<p><a href="#VkAllocationCallbacks">VkAllocationCallbacks</a>, <a href="#VkDevice">VkDevice</a>, <a href="#VkGraphicsPipelineCreateInfo">VkGraphicsPipelineCreateInfo</a>, <a href="#VkPipeline">VkPipeline</a>, <a href="#VkPipelineCache">VkPipelineCache</a></p>
</div>
</div>
<div class="sect3">
<h4 id="_document_notes_119">Document Notes</h4>
<div class="paragraph">
<p>For more information, see the Vulkan Specification at URL</p>
</div>
<div class="paragraph">
<p><a href="https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#vkCreateGraphicsPipelines" class="bare">https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#vkCreateGraphicsPipelines</a></p>
</div>
<div class="paragraph">
<p>This page is extracted from the Vulkan Specification.
Fixes and changes should be made to the Specification, not directly.</p>
</div>
<div style="page-break-after: always;"></div>
</div>
</div>
<div class="sect2">
<h3 id="_vkcreateiossurfacemvk3">vkCreateIOSSurfaceMVK(3)</h3>
<div class="sect3">
<h4 id="_name_120">Name</h4>
<div class="paragraph">
<p>vkCreateIOSSurfaceMVK - Create a VkSurfaceKHR object for an iOS UIView</p>
</div>
</div>
<div class="sect3">
<h4 id="_c_specification_120">C Specification</h4>
<div class="paragraph">
<p>To create a <code>VkSurfaceKHR</code> object for an iOS <code>UIView</code>, call:</p>
</div>
<div id="vkCreateIOSSurfaceMVK" class="listingblock">
<div class="content">
<pre class="highlight"><code class="language-c++" data-lang="c++">VkResult vkCreateIOSSurfaceMVK(
    VkInstance                                  instance,
    const VkIOSSurfaceCreateInfoMVK*            pCreateInfo,
    const VkAllocationCallbacks*                pAllocator,
    VkSurfaceKHR*                               pSurface);</code></pre>
</div>
</div>
</div>
<div class="sect3">
<h4 id="_parameters_120">Parameters</h4>
<div class="ulist">
<ul>
<li>
<p><code>instance</code> is the instance with which to associate the surface.</p>
</li>
<li>
<p><code>pCreateInfo</code> is a pointer to an instance of the
<a href="#VkIOSSurfaceCreateInfoMVK">VkIOSSurfaceCreateInfoMVK</a> structure containing parameters
affecting the creation of the surface object.</p>
</li>
<li>
<p><code>pAllocator</code> is the allocator used for host memory allocated for the
surface object when there is no more specific allocator available (see
<a href="vkspec.html#memory-allocation">Memory Allocation</a>).</p>
</li>
<li>
<p><code>pSurface</code> points to a <a href="#VkSurfaceKHR">VkSurfaceKHR</a> handle in which the
created surface object is returned.</p>
</li>
</ul>
</div>
</div>
<div class="sect3">
<h4 id="_description_120">Description</h4>
<div class="sidebarblock">
<div class="content">
<div class="title">Valid Usage (Implicit)</div>
<div class="ulist">
<ul>
<li>
<p><a id="VUID-vkCreateIOSSurfaceMVK-instance-parameter"></a> <code>instance</code> <strong class="purple">must</strong> be a valid <code>VkInstance</code> handle</p>
</li>
<li>
<p><a id="VUID-vkCreateIOSSurfaceMVK-pCreateInfo-parameter"></a> <code>pCreateInfo</code> <strong class="purple">must</strong> be a valid pointer to a valid <code>VkIOSSurfaceCreateInfoMVK</code> structure</p>
</li>
<li>
<p><a id="VUID-vkCreateIOSSurfaceMVK-pAllocator-parameter"></a> If <code>pAllocator</code> is not <code>NULL</code>, <code>pAllocator</code> <strong class="purple">must</strong> be a valid pointer to a valid <code>VkAllocationCallbacks</code> structure</p>
</li>
<li>
<p><a id="VUID-vkCreateIOSSurfaceMVK-pSurface-parameter"></a> <code>pSurface</code> <strong class="purple">must</strong> be a valid pointer to a <code>VkSurfaceKHR</code> handle</p>
</li>
</ul>
</div>
</div>
</div>
<div class="sidebarblock">
<div class="content">
<div class="title">Return Codes</div>
<div class="dlist">
<dl>
<dt class="hdlist1"><a href="#fundamentals-successcodes">Success</a></dt>
<dd>
<div class="ulist">
<ul>
<li>
<p><code>VK_SUCCESS</code></p>
</li>
</ul>
</div>
</dd>
<dt class="hdlist1"><a href="#fundamentals-errorcodes">Failure</a></dt>
<dd>
<div class="ulist">
<ul>
<li>
<p><code>VK_ERROR_OUT_OF_HOST_MEMORY</code></p>
</li>
<li>
<p><code>VK_ERROR_OUT_OF_DEVICE_MEMORY</code></p>
</li>
<li>
<p><code>VK_ERROR_NATIVE_WINDOW_IN_USE_KHR</code></p>
</li>
</ul>
</div>
</dd>
</dl>
</div>
</div>
</div>
</div>
<div class="sect3">
<h4 id="_see_also_120">See Also</h4>
<div class="paragraph">
<p><a href="#VkAllocationCallbacks">VkAllocationCallbacks</a>, <a href="#VkIOSSurfaceCreateInfoMVK">VkIOSSurfaceCreateInfoMVK</a>, <a href="#VkInstance">VkInstance</a>, <a href="#VkSurfaceKHR">VkSurfaceKHR</a></p>
</div>
</div>
<div class="sect3">
<h4 id="_document_notes_120">Document Notes</h4>
<div class="paragraph">
<p>For more information, see the Vulkan Specification at URL</p>
</div>
<div class="paragraph">
<p><a href="https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#vkCreateIOSSurfaceMVK" class="bare">https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#vkCreateIOSSurfaceMVK</a></p>
</div>
<div class="paragraph">
<p>This page is extracted from the Vulkan Specification.
Fixes and changes should be made to the Specification, not directly.</p>
</div>
<div style="page-break-after: always;"></div>
</div>
</div>
<div class="sect2">
<h3 id="_vkcreateimage3">vkCreateImage(3)</h3>
<div class="sect3">
<h4 id="_name_121">Name</h4>
<div class="paragraph">
<p>vkCreateImage - Create a new image object</p>
</div>
</div>
<div class="sect3">
<h4 id="_c_specification_121">C Specification</h4>
<div class="paragraph">
<p>To create images, call:</p>
</div>
<div id="vkCreateImage" class="listingblock">
<div class="content">
<pre class="highlight"><code class="language-c++" data-lang="c++">VkResult vkCreateImage(
    VkDevice                                    device,
    const VkImageCreateInfo*                    pCreateInfo,
    const VkAllocationCallbacks*                pAllocator,
    VkImage*                                    pImage);</code></pre>
</div>
</div>
</div>
<div class="sect3">
<h4 id="_parameters_121">Parameters</h4>
<div class="ulist">
<ul>
<li>
<p><code>device</code> is the logical device that creates the image.</p>
</li>
<li>
<p><code>pCreateInfo</code> is a pointer to an instance of the
<code>VkImageCreateInfo</code> structure containing parameters to be used to
create the image.</p>
</li>
<li>
<p><code>pAllocator</code> controls host memory allocation as described in the
<a href="vkspec.html#memory-allocation">Memory Allocation</a> chapter.</p>
</li>
<li>
<p><code>pImage</code> points to a <a href="#VkImage">VkImage</a> handle in which the resulting
image object is returned.</p>
</li>
</ul>
</div>
</div>
<div class="sect3">
<h4 id="_description_121">Description</h4>
<div class="sidebarblock">
<div class="content">
<div class="title">Valid Usage</div>
<div class="ulist">
<ul>
<li>
<p><a id="VUID-vkCreateImage-flags-00939"></a>
If the <code>flags</code> member of <code>pCreateInfo</code> includes
<code>VK_IMAGE_CREATE_SPARSE_BINDING_BIT</code>, creating this <code>VkImage</code>
<strong class="purple">must</strong> not cause the total required sparse memory for all currently valid
sparse resources on the device to exceed
<code>VkPhysicalDeviceLimits</code>::<code>sparseAddressSpaceSize</code></p>
</li>
</ul>
</div>
</div>
</div>
<div class="sidebarblock">
<div class="content">
<div class="title">Valid Usage (Implicit)</div>
<div class="ulist">
<ul>
<li>
<p><a id="VUID-vkCreateImage-device-parameter"></a> <code>device</code> <strong class="purple">must</strong> be a valid <code>VkDevice</code> handle</p>
</li>
<li>
<p><a id="VUID-vkCreateImage-pCreateInfo-parameter"></a> <code>pCreateInfo</code> <strong class="purple">must</strong> be a valid pointer to a valid <code>VkImageCreateInfo</code> structure</p>
</li>
<li>
<p><a id="VUID-vkCreateImage-pAllocator-parameter"></a> If <code>pAllocator</code> is not <code>NULL</code>, <code>pAllocator</code> <strong class="purple">must</strong> be a valid pointer to a valid <code>VkAllocationCallbacks</code> structure</p>
</li>
<li>
<p><a id="VUID-vkCreateImage-pImage-parameter"></a> <code>pImage</code> <strong class="purple">must</strong> be a valid pointer to a <code>VkImage</code> handle</p>
</li>
</ul>
</div>
</div>
</div>
<div class="sidebarblock">
<div class="content">
<div class="title">Return Codes</div>
<div class="dlist">
<dl>
<dt class="hdlist1"><a href="#fundamentals-successcodes">Success</a></dt>
<dd>
<div class="ulist">
<ul>
<li>
<p><code>VK_SUCCESS</code></p>
</li>
</ul>
</div>
</dd>
<dt class="hdlist1"><a href="#fundamentals-errorcodes">Failure</a></dt>
<dd>
<div class="ulist">
<ul>
<li>
<p><code>VK_ERROR_OUT_OF_HOST_MEMORY</code></p>
</li>
<li>
<p><code>VK_ERROR_OUT_OF_DEVICE_MEMORY</code></p>
</li>
</ul>
</div>
</dd>
</dl>
</div>
</div>
</div>
</div>
<div class="sect3">
<h4 id="_see_also_121">See Also</h4>
<div class="paragraph">
<p><a href="#VkAllocationCallbacks">VkAllocationCallbacks</a>, <a href="#VkDevice">VkDevice</a>, <a href="#VkImage">VkImage</a>, <a href="#VkImageCreateInfo">VkImageCreateInfo</a></p>
</div>
</div>
<div class="sect3">
<h4 id="_document_notes_121">Document Notes</h4>
<div class="paragraph">
<p>For more information, see the Vulkan Specification at URL</p>
</div>
<div class="paragraph">
<p><a href="https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#vkCreateImage" class="bare">https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#vkCreateImage</a></p>
</div>
<div class="paragraph">
<p>This page is extracted from the Vulkan Specification.
Fixes and changes should be made to the Specification, not directly.</p>
</div>
<div style="page-break-after: always;"></div>
</div>
</div>
<div class="sect2">
<h3 id="_vkcreateimagepipesurfacefuchsia3">vkCreateImagePipeSurfaceFUCHSIA(3)</h3>
<div class="sect3">
<h4 id="_name_122">Name</h4>
<div class="paragraph">
<p>vkCreateImagePipeSurfaceFUCHSIA - Create a <a href="#VkSurfaceKHR">VkSurfaceKHR</a> object for a Fuchsia ImagePipe</p>
</div>
</div>
<div class="sect3">
<h4 id="_c_specification_122">C Specification</h4>
<div class="paragraph">
<p>To create a <code>VkSurfaceKHR</code> object for a Fuchsia ImagePipe, call:</p>
</div>
<div id="vkCreateImagePipeSurfaceFUCHSIA" class="listingblock">
<div class="content">
<pre class="highlight"><code class="language-c++" data-lang="c++">VkResult vkCreateImagePipeSurfaceFUCHSIA(
    VkInstance                                  instance,
    const VkImagePipeSurfaceCreateInfoFUCHSIA*  pCreateInfo,
    const VkAllocationCallbacks*                pAllocator,
    VkSurfaceKHR*                               pSurface);</code></pre>
</div>
</div>
</div>
<div class="sect3">
<h4 id="_parameters_122">Parameters</h4>
<div class="ulist">
<ul>
<li>
<p><code>instance</code> is the instance to associate with the surface.</p>
</li>
<li>
<p><code>pCreateInfo</code> is a pointer to an instance of the
<a href="#VkImagePipeSurfaceCreateInfoFUCHSIA">VkImagePipeSurfaceCreateInfoFUCHSIA</a> structure containing
parameters affecting the creation of the surface object.</p>
</li>
<li>
<p><code>pAllocator</code> is the allocator used for host memory allocated for the
surface object when there is no more specific allocator available (see
<a href="vkspec.html#memory-allocation">Memory Allocation</a>).</p>
</li>
<li>
<p><code>pSurface</code> points to a <a href="#VkSurfaceKHR">VkSurfaceKHR</a> handle in which the
created surface object is returned.</p>
</li>
</ul>
</div>
</div>
<div class="sect3">
<h4 id="_description_122">Description</h4>
<div class="sidebarblock">
<div class="content">
<div class="title">Valid Usage (Implicit)</div>
<div class="ulist">
<ul>
<li>
<p><a id="VUID-vkCreateImagePipeSurfaceFUCHSIA-instance-parameter"></a> <code>instance</code> <strong class="purple">must</strong> be a valid <code>VkInstance</code> handle</p>
</li>
<li>
<p><a id="VUID-vkCreateImagePipeSurfaceFUCHSIA-pCreateInfo-parameter"></a> <code>pCreateInfo</code> <strong class="purple">must</strong> be a valid pointer to a valid <code>VkImagePipeSurfaceCreateInfoFUCHSIA</code> structure</p>
</li>
<li>
<p><a id="VUID-vkCreateImagePipeSurfaceFUCHSIA-pAllocator-parameter"></a> If <code>pAllocator</code> is not <code>NULL</code>, <code>pAllocator</code> <strong class="purple">must</strong> be a valid pointer to a valid <code>VkAllocationCallbacks</code> structure</p>
</li>
<li>
<p><a id="VUID-vkCreateImagePipeSurfaceFUCHSIA-pSurface-parameter"></a> <code>pSurface</code> <strong class="purple">must</strong> be a valid pointer to a <code>VkSurfaceKHR</code> handle</p>
</li>
</ul>
</div>
</div>
</div>
<div class="sidebarblock">
<div class="content">
<div class="title">Return Codes</div>
<div class="dlist">
<dl>
<dt class="hdlist1"><a href="#fundamentals-successcodes">Success</a></dt>
<dd>
<div class="ulist">
<ul>
<li>
<p><code>VK_SUCCESS</code></p>
</li>
</ul>
</div>
</dd>
<dt class="hdlist1"><a href="#fundamentals-errorcodes">Failure</a></dt>
<dd>
<div class="ulist">
<ul>
<li>
<p><code>VK_ERROR_OUT_OF_HOST_MEMORY</code></p>
</li>
<li>
<p><code>VK_ERROR_OUT_OF_DEVICE_MEMORY</code></p>
</li>
</ul>
</div>
</dd>
</dl>
</div>
</div>
</div>
</div>
<div class="sect3">
<h4 id="_see_also_122">See Also</h4>
<div class="paragraph">
<p><a href="#VkAllocationCallbacks">VkAllocationCallbacks</a>, <a href="#VkImagePipeSurfaceCreateInfoFUCHSIA">VkImagePipeSurfaceCreateInfoFUCHSIA</a>, <a href="#VkInstance">VkInstance</a>, <a href="#VkSurfaceKHR">VkSurfaceKHR</a></p>
</div>
</div>
<div class="sect3">
<h4 id="_document_notes_122">Document Notes</h4>
<div class="paragraph">
<p>For more information, see the Vulkan Specification at URL</p>
</div>
<div class="paragraph">
<p><a href="https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#vkCreateImagePipeSurfaceFUCHSIA" class="bare">https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#vkCreateImagePipeSurfaceFUCHSIA</a></p>
</div>
<div class="paragraph">
<p>This page is extracted from the Vulkan Specification.
Fixes and changes should be made to the Specification, not directly.</p>
</div>
<div style="page-break-after: always;"></div>
</div>
</div>
<div class="sect2">
<h3 id="_vkcreateimageview3">vkCreateImageView(3)</h3>
<div class="sect3">
<h4 id="_name_123">Name</h4>
<div class="paragraph">
<p>vkCreateImageView - Create an image view from an existing image</p>
</div>
</div>
<div class="sect3">
<h4 id="_c_specification_123">C Specification</h4>
<div class="paragraph">
<p>To create an image view, call:</p>
</div>
<div id="vkCreateImageView" class="listingblock">
<div class="content">
<pre class="highlight"><code class="language-c++" data-lang="c++">VkResult vkCreateImageView(
    VkDevice                                    device,
    const VkImageViewCreateInfo*                pCreateInfo,
    const VkAllocationCallbacks*                pAllocator,
    VkImageView*                                pView);</code></pre>
</div>
</div>
</div>
<div class="sect3">
<h4 id="_parameters_123">Parameters</h4>
<div class="ulist">
<ul>
<li>
<p><code>device</code> is the logical device that creates the image view.</p>
</li>
<li>
<p><code>pCreateInfo</code> is a pointer to an instance of the
<code>VkImageViewCreateInfo</code> structure containing parameters to be used
to create the image view.</p>
</li>
<li>
<p><code>pAllocator</code> controls host memory allocation as described in the
<a href="vkspec.html#memory-allocation">Memory Allocation</a> chapter.</p>
</li>
<li>
<p><code>pView</code> points to a <a href="#VkImageView">VkImageView</a> handle in which the resulting
image view object is returned.</p>
</li>
</ul>
</div>
</div>
<div class="sect3">
<h4 id="_description_123">Description</h4>
<div class="sidebarblock">
<div class="content">
<div class="title">Valid Usage (Implicit)</div>
<div class="ulist">
<ul>
<li>
<p><a id="VUID-vkCreateImageView-device-parameter"></a> <code>device</code> <strong class="purple">must</strong> be a valid <code>VkDevice</code> handle</p>
</li>
<li>
<p><a id="VUID-vkCreateImageView-pCreateInfo-parameter"></a> <code>pCreateInfo</code> <strong class="purple">must</strong> be a valid pointer to a valid <code>VkImageViewCreateInfo</code> structure</p>
</li>
<li>
<p><a id="VUID-vkCreateImageView-pAllocator-parameter"></a> If <code>pAllocator</code> is not <code>NULL</code>, <code>pAllocator</code> <strong class="purple">must</strong> be a valid pointer to a valid <code>VkAllocationCallbacks</code> structure</p>
</li>
<li>
<p><a id="VUID-vkCreateImageView-pView-parameter"></a> <code>pView</code> <strong class="purple">must</strong> be a valid pointer to a <code>VkImageView</code> handle</p>
</li>
</ul>
</div>
</div>
</div>
<div class="sidebarblock">
<div class="content">
<div class="title">Return Codes</div>
<div class="dlist">
<dl>
<dt class="hdlist1"><a href="#fundamentals-successcodes">Success</a></dt>
<dd>
<div class="ulist">
<ul>
<li>
<p><code>VK_SUCCESS</code></p>
</li>
</ul>
</div>
</dd>
<dt class="hdlist1"><a href="#fundamentals-errorcodes">Failure</a></dt>
<dd>
<div class="ulist">
<ul>
<li>
<p><code>VK_ERROR_OUT_OF_HOST_MEMORY</code></p>
</li>
<li>
<p><code>VK_ERROR_OUT_OF_DEVICE_MEMORY</code></p>
</li>
</ul>
</div>
</dd>
</dl>
</div>
</div>
</div>
</div>
<div class="sect3">
<h4 id="_see_also_123">See Also</h4>
<div class="paragraph">
<p><a href="#VkAllocationCallbacks">VkAllocationCallbacks</a>, <a href="#VkDevice">VkDevice</a>, <a href="#VkImageView">VkImageView</a>, <a href="#VkImageViewCreateInfo">VkImageViewCreateInfo</a></p>
</div>
</div>
<div class="sect3">
<h4 id="_document_notes_123">Document Notes</h4>
<div class="paragraph">
<p>For more information, see the Vulkan Specification at URL</p>
</div>
<div class="paragraph">
<p><a href="https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#vkCreateImageView" class="bare">https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#vkCreateImageView</a></p>
</div>
<div class="paragraph">
<p>This page is extracted from the Vulkan Specification.
Fixes and changes should be made to the Specification, not directly.</p>
</div>
<div style="page-break-after: always;"></div>
</div>
</div>
<div class="sect2">
<h3 id="_vkcreateindirectcommandslayoutnvx3">vkCreateIndirectCommandsLayoutNVX(3)</h3>
<div class="sect3">
<h4 id="_name_124">Name</h4>
<div class="paragraph">
<p>vkCreateIndirectCommandsLayoutNVX - Create an indirect command layout object</p>
</div>
</div>
<div class="sect3">
<h4 id="_c_specification_124">C Specification</h4>
<div class="paragraph">
<p>Indirect command layouts are created by:</p>
</div>
<div id="vkCreateIndirectCommandsLayoutNVX" class="listingblock">
<div class="content">
<pre class="highlight"><code class="language-c++" data-lang="c++">VkResult vkCreateIndirectCommandsLayoutNVX(
    VkDevice                                    device,
    const VkIndirectCommandsLayoutCreateInfoNVX* pCreateInfo,
    const VkAllocationCallbacks*                pAllocator,
    VkIndirectCommandsLayoutNVX*                pIndirectCommandsLayout);</code></pre>
</div>
</div>
</div>
<div class="sect3">
<h4 id="_parameters_124">Parameters</h4>
<div class="ulist">
<ul>
<li>
<p><code>device</code> is the logical device that creates the indirect command
layout.</p>
</li>
<li>
<p><code>pCreateInfo</code> is a pointer to an instance of the
<code>VkIndirectCommandsLayoutCreateInfoNVX</code> structure containing
parameters affecting creation of the indirect command layout.</p>
</li>
<li>
<p><code>pAllocator</code> controls host memory allocation as described in the
<a href="vkspec.html#memory-allocation">Memory Allocation</a> chapter.</p>
</li>
<li>
<p><code>pIndirectCommandsLayout</code> points to a
<code>VkIndirectCommandsLayoutNVX</code> handle in which the resulting indirect
command layout is returned.</p>
</li>
</ul>
</div>
</div>
<div class="sect3">
<h4 id="_description_124">Description</h4>
<div class="sidebarblock">
<div class="content">
<div class="title">Valid Usage (Implicit)</div>
<div class="ulist">
<ul>
<li>
<p><a id="VUID-vkCreateIndirectCommandsLayoutNVX-device-parameter"></a> <code>device</code> <strong class="purple">must</strong> be a valid <code>VkDevice</code> handle</p>
</li>
<li>
<p><a id="VUID-vkCreateIndirectCommandsLayoutNVX-pCreateInfo-parameter"></a> <code>pCreateInfo</code> <strong class="purple">must</strong> be a valid pointer to a valid <code>VkIndirectCommandsLayoutCreateInfoNVX</code> structure</p>
</li>
<li>
<p><a id="VUID-vkCreateIndirectCommandsLayoutNVX-pAllocator-parameter"></a> If <code>pAllocator</code> is not <code>NULL</code>, <code>pAllocator</code> <strong class="purple">must</strong> be a valid pointer to a valid <code>VkAllocationCallbacks</code> structure</p>
</li>
<li>
<p><a id="VUID-vkCreateIndirectCommandsLayoutNVX-pIndirectCommandsLayout-parameter"></a> <code>pIndirectCommandsLayout</code> <strong class="purple">must</strong> be a valid pointer to a <code>VkIndirectCommandsLayoutNVX</code> handle</p>
</li>
</ul>
</div>
</div>
</div>
<div class="sidebarblock">
<div class="content">
<div class="title">Return Codes</div>
<div class="dlist">
<dl>
<dt class="hdlist1"><a href="#fundamentals-successcodes">Success</a></dt>
<dd>
<div class="ulist">
<ul>
<li>
<p><code>VK_SUCCESS</code></p>
</li>
</ul>
</div>
</dd>
<dt class="hdlist1"><a href="#fundamentals-errorcodes">Failure</a></dt>
<dd>
<div class="ulist">
<ul>
<li>
<p><code>VK_ERROR_OUT_OF_HOST_MEMORY</code></p>
</li>
<li>
<p><code>VK_ERROR_OUT_OF_DEVICE_MEMORY</code></p>
</li>
</ul>
</div>
</dd>
</dl>
</div>
</div>
</div>
</div>
<div class="sect3">
<h4 id="_see_also_124">See Also</h4>
<div class="paragraph">
<p><a href="#VkAllocationCallbacks">VkAllocationCallbacks</a>, <a href="#VkDevice">VkDevice</a>, <a href="#VkIndirectCommandsLayoutCreateInfoNVX">VkIndirectCommandsLayoutCreateInfoNVX</a>, <a href="#VkIndirectCommandsLayoutNVX">VkIndirectCommandsLayoutNVX</a></p>
</div>
</div>
<div class="sect3">
<h4 id="_document_notes_124">Document Notes</h4>
<div class="paragraph">
<p>For more information, see the Vulkan Specification at URL</p>
</div>
<div class="paragraph">
<p><a href="https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#vkCreateIndirectCommandsLayoutNVX" class="bare">https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#vkCreateIndirectCommandsLayoutNVX</a></p>
</div>
<div class="paragraph">
<p>This page is extracted from the Vulkan Specification.
Fixes and changes should be made to the Specification, not directly.</p>
</div>
<div style="page-break-after: always;"></div>
</div>
</div>
<div class="sect2">
<h3 id="_vkcreateinstance3">vkCreateInstance(3)</h3>
<div class="sect3">
<h4 id="_name_125">Name</h4>
<div class="paragraph">
<p>vkCreateInstance - Create a new Vulkan instance</p>
</div>
</div>
<div class="sect3">
<h4 id="_c_specification_125">C Specification</h4>
<div class="paragraph">
<p>To create an instance object, call:</p>
</div>
<div id="vkCreateInstance" class="listingblock">
<div class="content">
<pre class="highlight"><code class="language-c++" data-lang="c++">VkResult vkCreateInstance(
    const VkInstanceCreateInfo*                 pCreateInfo,
    const VkAllocationCallbacks*                pAllocator,
    VkInstance*                                 pInstance);</code></pre>
</div>
</div>
</div>
<div class="sect3">
<h4 id="_parameters_125">Parameters</h4>
<div class="ulist">
<ul>
<li>
<p><code>pCreateInfo</code> points to an instance of <a href="#VkInstanceCreateInfo">VkInstanceCreateInfo</a>
controlling creation of the instance.</p>
</li>
<li>
<p><code>pAllocator</code> controls host memory allocation as described in the
<a href="vkspec.html#memory-allocation">Memory Allocation</a> chapter.</p>
</li>
<li>
<p><code>pInstance</code> points a <a href="#VkInstance">VkInstance</a> handle in which the resulting
instance is returned.</p>
</li>
</ul>
</div>
</div>
<div class="sect3">
<h4 id="_description_125">Description</h4>
<div class="paragraph">
<p><code>vkCreateInstance</code> verifies that the requested layers exist.
If not, <code>vkCreateInstance</code> will return <code>VK_ERROR_LAYER_NOT_PRESENT</code>.
Next <code>vkCreateInstance</code> verifies that the requested extensions are
supported (e.g. in the implementation or in any enabled instance layer) and
if any requested extension is not supported, <code>vkCreateInstance</code> <strong class="purple">must</strong>
return <code>VK_ERROR_EXTENSION_NOT_PRESENT</code>.
After verifying and enabling the instance layers and extensions the
<code>VkInstance</code> object is created and returned to the application.
If a requested extension is only supported by a layer, both the layer and
the extension need to be specified at <code>vkCreateInstance</code> time for the
creation to succeed.</p>
</div>
<div class="sidebarblock">
<div class="content">
<div class="title">Valid Usage</div>
<div class="ulist">
<ul>
<li>
<p><a id="VUID-vkCreateInstance-ppEnabledExtensionNames-01388"></a>
All <a href="vkspec.html#extendingvulkan-extensions-extensiondependencies">required
extensions</a> for each extension in the
<a href="#VkInstanceCreateInfo">VkInstanceCreateInfo</a>::<code>ppEnabledExtensionNames</code> list <strong class="purple">must</strong>
also be present in that list.</p>
</li>
</ul>
</div>
</div>
</div>
<div class="sidebarblock">
<div class="content">
<div class="title">Valid Usage (Implicit)</div>
<div class="ulist">
<ul>
<li>
<p><a id="VUID-vkCreateInstance-pCreateInfo-parameter"></a> <code>pCreateInfo</code> <strong class="purple">must</strong> be a valid pointer to a valid <code>VkInstanceCreateInfo</code> structure</p>
</li>
<li>
<p><a id="VUID-vkCreateInstance-pAllocator-parameter"></a> If <code>pAllocator</code> is not <code>NULL</code>, <code>pAllocator</code> <strong class="purple">must</strong> be a valid pointer to a valid <code>VkAllocationCallbacks</code> structure</p>
</li>
<li>
<p><a id="VUID-vkCreateInstance-pInstance-parameter"></a> <code>pInstance</code> <strong class="purple">must</strong> be a valid pointer to a <code>VkInstance</code> handle</p>
</li>
</ul>
</div>
</div>
</div>
<div class="sidebarblock">
<div class="content">
<div class="title">Return Codes</div>
<div class="dlist">
<dl>
<dt class="hdlist1"><a href="#fundamentals-successcodes">Success</a></dt>
<dd>
<div class="ulist">
<ul>
<li>
<p><code>VK_SUCCESS</code></p>
</li>
</ul>
</div>
</dd>
<dt class="hdlist1"><a href="#fundamentals-errorcodes">Failure</a></dt>
<dd>
<div class="ulist">
<ul>
<li>
<p><code>VK_ERROR_OUT_OF_HOST_MEMORY</code></p>
</li>
<li>
<p><code>VK_ERROR_OUT_OF_DEVICE_MEMORY</code></p>
</li>
<li>
<p><code>VK_ERROR_INITIALIZATION_FAILED</code></p>
</li>
<li>
<p><code>VK_ERROR_LAYER_NOT_PRESENT</code></p>
</li>
<li>
<p><code>VK_ERROR_EXTENSION_NOT_PRESENT</code></p>
</li>
<li>
<p><code>VK_ERROR_INCOMPATIBLE_DRIVER</code></p>
</li>
</ul>
</div>
</dd>
</dl>
</div>
</div>
</div>
</div>
<div class="sect3">
<h4 id="_see_also_125">See Also</h4>
<div class="paragraph">
<p><a href="#VkAllocationCallbacks">VkAllocationCallbacks</a>, <a href="#VkInstance">VkInstance</a>, <a href="#VkInstanceCreateInfo">VkInstanceCreateInfo</a></p>
</div>
</div>
<div class="sect3">
<h4 id="_document_notes_125">Document Notes</h4>
<div class="paragraph">
<p>For more information, see the Vulkan Specification at URL</p>
</div>
<div class="paragraph">
<p><a href="https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#vkCreateInstance" class="bare">https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#vkCreateInstance</a></p>
</div>
<div class="paragraph">
<p>This page is extracted from the Vulkan Specification.
Fixes and changes should be made to the Specification, not directly.</p>
</div>
<div style="page-break-after: always;"></div>
</div>
</div>
<div class="sect2">
<h3 id="_vkcreatemacossurfacemvk3">vkCreateMacOSSurfaceMVK(3)</h3>
<div class="sect3">
<h4 id="_name_126">Name</h4>
<div class="paragraph">
<p>vkCreateMacOSSurfaceMVK - Create a VkSurfaceKHR object for a macOS NSView</p>
</div>
</div>
<div class="sect3">
<h4 id="_c_specification_126">C Specification</h4>
<div class="paragraph">
<p>To create a <code>VkSurfaceKHR</code> object for a macOS <code>NSView</code>, call:</p>
</div>
<div id="vkCreateMacOSSurfaceMVK" class="listingblock">
<div class="content">
<pre class="highlight"><code class="language-c++" data-lang="c++">VkResult vkCreateMacOSSurfaceMVK(
    VkInstance                                  instance,
    const VkMacOSSurfaceCreateInfoMVK*          pCreateInfo,
    const VkAllocationCallbacks*                pAllocator,
    VkSurfaceKHR*                               pSurface);</code></pre>
</div>
</div>
</div>
<div class="sect3">
<h4 id="_parameters_126">Parameters</h4>
<div class="ulist">
<ul>
<li>
<p><code>instance</code> is the instance with which to associate the surface.</p>
</li>
<li>
<p><code>pCreateInfo</code> is a pointer to an instance of the
<a href="#VkMacOSSurfaceCreateInfoMVK">VkMacOSSurfaceCreateInfoMVK</a> structure containing parameters
affecting the creation of the surface object.</p>
</li>
<li>
<p><code>pAllocator</code> is the allocator used for host memory allocated for the
surface object when there is no more specific allocator available (see
<a href="vkspec.html#memory-allocation">Memory Allocation</a>).</p>
</li>
<li>
<p><code>pSurface</code> points to a <a href="#VkSurfaceKHR">VkSurfaceKHR</a> handle in which the
created surface object is returned.</p>
</li>
</ul>
</div>
</div>
<div class="sect3">
<h4 id="_description_126">Description</h4>
<div class="sidebarblock">
<div class="content">
<div class="title">Valid Usage (Implicit)</div>
<div class="ulist">
<ul>
<li>
<p><a id="VUID-vkCreateMacOSSurfaceMVK-instance-parameter"></a> <code>instance</code> <strong class="purple">must</strong> be a valid <code>VkInstance</code> handle</p>
</li>
<li>
<p><a id="VUID-vkCreateMacOSSurfaceMVK-pCreateInfo-parameter"></a> <code>pCreateInfo</code> <strong class="purple">must</strong> be a valid pointer to a valid <code>VkMacOSSurfaceCreateInfoMVK</code> structure</p>
</li>
<li>
<p><a id="VUID-vkCreateMacOSSurfaceMVK-pAllocator-parameter"></a> If <code>pAllocator</code> is not <code>NULL</code>, <code>pAllocator</code> <strong class="purple">must</strong> be a valid pointer to a valid <code>VkAllocationCallbacks</code> structure</p>
</li>
<li>
<p><a id="VUID-vkCreateMacOSSurfaceMVK-pSurface-parameter"></a> <code>pSurface</code> <strong class="purple">must</strong> be a valid pointer to a <code>VkSurfaceKHR</code> handle</p>
</li>
</ul>
</div>
</div>
</div>
<div class="sidebarblock">
<div class="content">
<div class="title">Return Codes</div>
<div class="dlist">
<dl>
<dt class="hdlist1"><a href="#fundamentals-successcodes">Success</a></dt>
<dd>
<div class="ulist">
<ul>
<li>
<p><code>VK_SUCCESS</code></p>
</li>
</ul>
</div>
</dd>
<dt class="hdlist1"><a href="#fundamentals-errorcodes">Failure</a></dt>
<dd>
<div class="ulist">
<ul>
<li>
<p><code>VK_ERROR_OUT_OF_HOST_MEMORY</code></p>
</li>
<li>
<p><code>VK_ERROR_OUT_OF_DEVICE_MEMORY</code></p>
</li>
<li>
<p><code>VK_ERROR_NATIVE_WINDOW_IN_USE_KHR</code></p>
</li>
</ul>
</div>
</dd>
</dl>
</div>
</div>
</div>
</div>
<div class="sect3">
<h4 id="_see_also_126">See Also</h4>
<div class="paragraph">
<p><a href="#VkAllocationCallbacks">VkAllocationCallbacks</a>, <a href="#VkInstance">VkInstance</a>, <a href="#VkMacOSSurfaceCreateInfoMVK">VkMacOSSurfaceCreateInfoMVK</a>, <a href="#VkSurfaceKHR">VkSurfaceKHR</a></p>
</div>
</div>
<div class="sect3">
<h4 id="_document_notes_126">Document Notes</h4>
<div class="paragraph">
<p>For more information, see the Vulkan Specification at URL</p>
</div>
<div class="paragraph">
<p><a href="https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#vkCreateMacOSSurfaceMVK" class="bare">https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#vkCreateMacOSSurfaceMVK</a></p>
</div>
<div class="paragraph">
<p>This page is extracted from the Vulkan Specification.
Fixes and changes should be made to the Specification, not directly.</p>
</div>
<div style="page-break-after: always;"></div>
</div>
</div>
<div class="sect2">
<h3 id="_vkcreatemetalsurfaceext3">vkCreateMetalSurfaceEXT(3)</h3>
<div class="sect3">
<h4 id="_name_127">Name</h4>
<div class="paragraph">
<p>vkCreateMetalSurfaceEXT - Create a VkSurfaceKHR object for CAMetalLayer</p>
</div>
</div>
<div class="sect3">
<h4 id="_c_specification_127">C Specification</h4>
<div class="paragraph">
<p>To create a <code>VkSurfaceKHR</code> object for a <a href="#CAMetalLayer">CAMetalLayer</a>, call:</p>
</div>
<div id="vkCreateMetalSurfaceEXT" class="listingblock">
<div class="content">
<pre class="highlight"><code class="language-c++" data-lang="c++">VkResult vkCreateMetalSurfaceEXT(
    VkInstance                                  instance,
    const VkMetalSurfaceCreateInfoEXT*          pCreateInfo,
    const VkAllocationCallbacks*                pAllocator,
    VkSurfaceKHR*                               pSurface);</code></pre>
</div>
</div>
</div>
<div class="sect3">
<h4 id="_parameters_127">Parameters</h4>
<div class="ulist">
<ul>
<li>
<p><code>instance</code> is the instance with which to associate the surface.</p>
</li>
<li>
<p><code>pCreateInfo</code> is a pointer to an instance of the
<a href="#VkMetalSurfaceCreateInfoEXT">VkMetalSurfaceCreateInfoEXT</a> structure containing the parameters
affecting the creation of the surface object.</p>
</li>
<li>
<p><code>pAllocator</code> is the allocator used for host memory allocated for the
surface object when there is no more specific allocator available (see
<a href="vkspec.html#memory-allocation">Memory Allocation</a>).</p>
</li>
<li>
<p><code>pSurface</code> points to a <code>VkSurfaceKHR</code> handle in which the
created surface object is returned.</p>
</li>
</ul>
</div>
</div>
<div class="sect3">
<h4 id="_description_127">Description</h4>
<div class="sidebarblock">
<div class="content">
<div class="title">Valid Usage (Implicit)</div>
<div class="ulist">
<ul>
<li>
<p><a id="VUID-vkCreateMetalSurfaceEXT-instance-parameter"></a> <code>instance</code> <strong class="purple">must</strong> be a valid <code>VkInstance</code> handle</p>
</li>
<li>
<p><a id="VUID-vkCreateMetalSurfaceEXT-pCreateInfo-parameter"></a> <code>pCreateInfo</code> <strong class="purple">must</strong> be a valid pointer to a valid <code>VkMetalSurfaceCreateInfoEXT</code> structure</p>
</li>
<li>
<p><a id="VUID-vkCreateMetalSurfaceEXT-pAllocator-parameter"></a> If <code>pAllocator</code> is not <code>NULL</code>, <code>pAllocator</code> <strong class="purple">must</strong> be a valid pointer to a valid <code>VkAllocationCallbacks</code> structure</p>
</li>
<li>
<p><a id="VUID-vkCreateMetalSurfaceEXT-pSurface-parameter"></a> <code>pSurface</code> <strong class="purple">must</strong> be a valid pointer to a <code>VkSurfaceKHR</code> handle</p>
</li>
</ul>
</div>
</div>
</div>
<div class="sidebarblock">
<div class="content">
<div class="title">Return Codes</div>
<div class="dlist">
<dl>
<dt class="hdlist1"><a href="#fundamentals-successcodes">Success</a></dt>
<dd>
<div class="ulist">
<ul>
<li>
<p><code>VK_SUCCESS</code></p>
</li>
</ul>
</div>
</dd>
<dt class="hdlist1"><a href="#fundamentals-errorcodes">Failure</a></dt>
<dd>
<div class="ulist">
<ul>
<li>
<p><code>VK_ERROR_OUT_OF_HOST_MEMORY</code></p>
</li>
<li>
<p><code>VK_ERROR_OUT_OF_DEVICE_MEMORY</code></p>
</li>
<li>
<p><code>VK_ERROR_NATIVE_WINDOW_IN_USE_KHR</code></p>
</li>
</ul>
</div>
</dd>
</dl>
</div>
</div>
</div>
</div>
<div class="sect3">
<h4 id="_see_also_127">See Also</h4>
<div class="paragraph">
<p><a href="#VkAllocationCallbacks">VkAllocationCallbacks</a>, <a href="#VkInstance">VkInstance</a>, <a href="#VkMetalSurfaceCreateInfoEXT">VkMetalSurfaceCreateInfoEXT</a>, <a href="#VkSurfaceKHR">VkSurfaceKHR</a></p>
</div>
</div>
<div class="sect3">
<h4 id="_document_notes_127">Document Notes</h4>
<div class="paragraph">
<p>For more information, see the Vulkan Specification at URL</p>
</div>
<div class="paragraph">
<p><a href="https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#vkCreateMetalSurfaceEXT" class="bare">https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#vkCreateMetalSurfaceEXT</a></p>
</div>
<div class="paragraph">
<p>This page is extracted from the Vulkan Specification.
Fixes and changes should be made to the Specification, not directly.</p>
</div>
<div style="page-break-after: always;"></div>
</div>
</div>
<div class="sect2">
<h3 id="_vkcreateobjecttablenvx3">vkCreateObjectTableNVX(3)</h3>
<div class="sect3">
<h4 id="_name_128">Name</h4>
<div class="paragraph">
<p>vkCreateObjectTableNVX - Create an object table</p>
</div>
</div>
<div class="sect3">
<h4 id="_c_specification_128">C Specification</h4>
<div class="paragraph">
<p>To create object tables, call:</p>
</div>
<div id="vkCreateObjectTableNVX" class="listingblock">
<div class="content">
<pre class="highlight"><code class="language-c++" data-lang="c++">VkResult vkCreateObjectTableNVX(
    VkDevice                                    device,
    const VkObjectTableCreateInfoNVX*           pCreateInfo,
    const VkAllocationCallbacks*                pAllocator,
    VkObjectTableNVX*                           pObjectTable);</code></pre>
</div>
</div>
</div>
<div class="sect3">
<h4 id="_parameters_128">Parameters</h4>
<div class="ulist">
<ul>
<li>
<p><code>device</code> is the logical device that creates the object table.</p>
</li>
<li>
<p><code>pCreateInfo</code> is a pointer to an instance of the
<code>VkObjectTableCreateInfoNVX</code> structure containing parameters
affecting creation of the table.</p>
</li>
<li>
<p><code>pAllocator</code> controls host memory allocation as described in the
<a href="vkspec.html#memory-allocation">Memory Allocation</a> chapter.</p>
</li>
<li>
<p><code>pObjectTable</code> points to a <a href="#VkObjectTableNVX">VkObjectTableNVX</a> handle in which
the resulting object table is returned.</p>
</li>
</ul>
</div>
</div>
<div class="sect3">
<h4 id="_description_128">Description</h4>
<div class="sidebarblock">
<div class="content">
<div class="title">Valid Usage (Implicit)</div>
<div class="ulist">
<ul>
<li>
<p><a id="VUID-vkCreateObjectTableNVX-device-parameter"></a> <code>device</code> <strong class="purple">must</strong> be a valid <code>VkDevice</code> handle</p>
</li>
<li>
<p><a id="VUID-vkCreateObjectTableNVX-pCreateInfo-parameter"></a> <code>pCreateInfo</code> <strong class="purple">must</strong> be a valid pointer to a valid <code>VkObjectTableCreateInfoNVX</code> structure</p>
</li>
<li>
<p><a id="VUID-vkCreateObjectTableNVX-pAllocator-parameter"></a> If <code>pAllocator</code> is not <code>NULL</code>, <code>pAllocator</code> <strong class="purple">must</strong> be a valid pointer to a valid <code>VkAllocationCallbacks</code> structure</p>
</li>
<li>
<p><a id="VUID-vkCreateObjectTableNVX-pObjectTable-parameter"></a> <code>pObjectTable</code> <strong class="purple">must</strong> be a valid pointer to a <code>VkObjectTableNVX</code> handle</p>
</li>
</ul>
</div>
</div>
</div>
<div class="sidebarblock">
<div class="content">
<div class="title">Return Codes</div>
<div class="dlist">
<dl>
<dt class="hdlist1"><a href="#fundamentals-successcodes">Success</a></dt>
<dd>
<div class="ulist">
<ul>
<li>
<p><code>VK_SUCCESS</code></p>
</li>
</ul>
</div>
</dd>
<dt class="hdlist1"><a href="#fundamentals-errorcodes">Failure</a></dt>
<dd>
<div class="ulist">
<ul>
<li>
<p><code>VK_ERROR_OUT_OF_HOST_MEMORY</code></p>
</li>
<li>
<p><code>VK_ERROR_OUT_OF_DEVICE_MEMORY</code></p>
</li>
</ul>
</div>
</dd>
</dl>
</div>
</div>
</div>
</div>
<div class="sect3">
<h4 id="_see_also_128">See Also</h4>
<div class="paragraph">
<p><a href="#VkAllocationCallbacks">VkAllocationCallbacks</a>, <a href="#VkDevice">VkDevice</a>, <a href="#VkObjectTableCreateInfoNVX">VkObjectTableCreateInfoNVX</a>, <a href="#VkObjectTableNVX">VkObjectTableNVX</a></p>
</div>
</div>
<div class="sect3">
<h4 id="_document_notes_128">Document Notes</h4>
<div class="paragraph">
<p>For more information, see the Vulkan Specification at URL</p>
</div>
<div class="paragraph">
<p><a href="https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#vkCreateObjectTableNVX" class="bare">https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#vkCreateObjectTableNVX</a></p>
</div>
<div class="paragraph">
<p>This page is extracted from the Vulkan Specification.
Fixes and changes should be made to the Specification, not directly.</p>
</div>
<div style="page-break-after: always;"></div>
</div>
</div>
<div class="sect2">
<h3 id="_vkcreatepipelinecache3">vkCreatePipelineCache(3)</h3>
<div class="sect3">
<h4 id="_name_129">Name</h4>
<div class="paragraph">
<p>vkCreatePipelineCache - Creates a new pipeline cache</p>
</div>
</div>
<div class="sect3">
<h4 id="_c_specification_129">C Specification</h4>
<div class="paragraph">
<p>To create pipeline cache objects, call:</p>
</div>
<div id="vkCreatePipelineCache" class="listingblock">
<div class="content">
<pre class="highlight"><code class="language-c++" data-lang="c++">VkResult vkCreatePipelineCache(
    VkDevice                                    device,
    const VkPipelineCacheCreateInfo*            pCreateInfo,
    const VkAllocationCallbacks*                pAllocator,
    VkPipelineCache*                            pPipelineCache);</code></pre>
</div>
</div>
</div>
<div class="sect3">
<h4 id="_parameters_129">Parameters</h4>
<div class="ulist">
<ul>
<li>
<p><code>device</code> is the logical device that creates the pipeline cache
object.</p>
</li>
<li>
<p><code>pCreateInfo</code> is a pointer to a <a href="#VkPipelineCacheCreateInfo">VkPipelineCacheCreateInfo</a>
structure that contains the initial parameters for the pipeline cache
object.</p>
</li>
<li>
<p><code>pAllocator</code> controls host memory allocation as described in the
<a href="vkspec.html#memory-allocation">Memory Allocation</a> chapter.</p>
</li>
<li>
<p><code>pPipelineCache</code> is a pointer to a <a href="#VkPipelineCache">VkPipelineCache</a> handle in
which the resulting pipeline cache object is returned.</p>
</li>
</ul>
</div>
</div>
<div class="sect3">
<h4 id="_description_129">Description</h4>
<div class="admonitionblock note">
<table>
<tr>
<td class="icon">
<i class="fa icon-note" title="Note"></i>
</td>
<td class="content">
<div class="title">Note</div>
<div class="paragraph">
<p>Applications <strong class="purple">can</strong> track and manage the total host memory size of a pipeline
cache object using the <code>pAllocator</code>.
Applications <strong class="purple">can</strong> limit the amount of data retrieved from a pipeline cache
object in <code>vkGetPipelineCacheData</code>.
Implementations <strong class="purple">should</strong> not internally limit the total number of entries
added to a pipeline cache object or the total host memory consumed.</p>
</div>
</td>
</tr>
</table>
</div>
<div class="paragraph">
<p>Once created, a pipeline cache <strong class="purple">can</strong> be passed to the
<code>vkCreateGraphicsPipelines</code> and <code>vkCreateComputePipelines</code> commands.
If the pipeline cache passed into these commands is not
<a href="#VK_NULL_HANDLE">VK_NULL_HANDLE</a>, the implementation will query it for possible reuse
opportunities and update it with new content.
The use of the pipeline cache object in these commands is internally
synchronized, and the same pipeline cache object <strong class="purple">can</strong> be used in multiple
threads simultaneously.</p>
</div>
<div class="admonitionblock note">
<table>
<tr>
<td class="icon">
<i class="fa icon-note" title="Note"></i>
</td>
<td class="content">
<div class="title">Note</div>
<div class="paragraph">
<p>Implementations <strong class="purple">should</strong> make every effort to limit any critical sections to
the actual accesses to the cache, which is expected to be significantly
shorter than the duration of the <code>vkCreateGraphicsPipelines</code> and
<code>vkCreateComputePipelines</code> commands.</p>
</div>
</td>
</tr>
</table>
</div>
<div class="sidebarblock">
<div class="content">
<div class="title">Valid Usage (Implicit)</div>
<div class="ulist">
<ul>
<li>
<p><a id="VUID-vkCreatePipelineCache-device-parameter"></a> <code>device</code> <strong class="purple">must</strong> be a valid <code>VkDevice</code> handle</p>
</li>
<li>
<p><a id="VUID-vkCreatePipelineCache-pCreateInfo-parameter"></a> <code>pCreateInfo</code> <strong class="purple">must</strong> be a valid pointer to a valid <code>VkPipelineCacheCreateInfo</code> structure</p>
</li>
<li>
<p><a id="VUID-vkCreatePipelineCache-pAllocator-parameter"></a> If <code>pAllocator</code> is not <code>NULL</code>, <code>pAllocator</code> <strong class="purple">must</strong> be a valid pointer to a valid <code>VkAllocationCallbacks</code> structure</p>
</li>
<li>
<p><a id="VUID-vkCreatePipelineCache-pPipelineCache-parameter"></a> <code>pPipelineCache</code> <strong class="purple">must</strong> be a valid pointer to a <code>VkPipelineCache</code> handle</p>
</li>
</ul>
</div>
</div>
</div>
<div class="sidebarblock">
<div class="content">
<div class="title">Return Codes</div>
<div class="dlist">
<dl>
<dt class="hdlist1"><a href="#fundamentals-successcodes">Success</a></dt>
<dd>
<div class="ulist">
<ul>
<li>
<p><code>VK_SUCCESS</code></p>
</li>
</ul>
</div>
</dd>
<dt class="hdlist1"><a href="#fundamentals-errorcodes">Failure</a></dt>
<dd>
<div class="ulist">
<ul>
<li>
<p><code>VK_ERROR_OUT_OF_HOST_MEMORY</code></p>
</li>
<li>
<p><code>VK_ERROR_OUT_OF_DEVICE_MEMORY</code></p>
</li>
</ul>
</div>
</dd>
</dl>
</div>
</div>
</div>
</div>
<div class="sect3">
<h4 id="_see_also_129">See Also</h4>
<div class="paragraph">
<p><a href="#VkAllocationCallbacks">VkAllocationCallbacks</a>, <a href="#VkDevice">VkDevice</a>, <a href="#VkPipelineCache">VkPipelineCache</a>, <a href="#VkPipelineCacheCreateInfo">VkPipelineCacheCreateInfo</a></p>
</div>
</div>
<div class="sect3">
<h4 id="_document_notes_129">Document Notes</h4>
<div class="paragraph">
<p>For more information, see the Vulkan Specification at URL</p>
</div>
<div class="paragraph">
<p><a href="https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#vkCreatePipelineCache" class="bare">https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#vkCreatePipelineCache</a></p>
</div>
<div class="paragraph">
<p>This page is extracted from the Vulkan Specification.
Fixes and changes should be made to the Specification, not directly.</p>
</div>
<div style="page-break-after: always;"></div>
</div>
</div>
<div class="sect2">
<h3 id="_vkcreatepipelinelayout3">vkCreatePipelineLayout(3)</h3>
<div class="sect3">
<h4 id="_name_130">Name</h4>
<div class="paragraph">
<p>vkCreatePipelineLayout - Creates a new pipeline layout object</p>
</div>
</div>
<div class="sect3">
<h4 id="_c_specification_130">C Specification</h4>
<div class="paragraph">
<p>To create a pipeline layout, call:</p>
</div>
<div id="vkCreatePipelineLayout" class="listingblock">
<div class="content">
<pre class="highlight"><code class="language-c++" data-lang="c++">VkResult vkCreatePipelineLayout(
    VkDevice                                    device,
    const VkPipelineLayoutCreateInfo*           pCreateInfo,
    const VkAllocationCallbacks*                pAllocator,
    VkPipelineLayout*                           pPipelineLayout);</code></pre>
</div>
</div>
</div>
<div class="sect3">
<h4 id="_parameters_130">Parameters</h4>
<div class="ulist">
<ul>
<li>
<p><code>device</code> is the logical device that creates the pipeline layout.</p>
</li>
<li>
<p><code>pCreateInfo</code> is a pointer to an instance of the
<a href="#VkPipelineLayoutCreateInfo">VkPipelineLayoutCreateInfo</a> structure specifying the state of the
pipeline layout object.</p>
</li>
<li>
<p><code>pAllocator</code> controls host memory allocation as described in the
<a href="vkspec.html#memory-allocation">Memory Allocation</a> chapter.</p>
</li>
<li>
<p><code>pPipelineLayout</code> points to a <a href="#VkPipelineLayout">VkPipelineLayout</a> handle in which
the resulting pipeline layout object is returned.</p>
</li>
</ul>
</div>
</div>
<div class="sect3">
<h4 id="_description_130">Description</h4>
<div class="sidebarblock">
<div class="content">
<div class="title">Valid Usage (Implicit)</div>
<div class="ulist">
<ul>
<li>
<p><a id="VUID-vkCreatePipelineLayout-device-parameter"></a> <code>device</code> <strong class="purple">must</strong> be a valid <code>VkDevice</code> handle</p>
</li>
<li>
<p><a id="VUID-vkCreatePipelineLayout-pCreateInfo-parameter"></a> <code>pCreateInfo</code> <strong class="purple">must</strong> be a valid pointer to a valid <code>VkPipelineLayoutCreateInfo</code> structure</p>
</li>
<li>
<p><a id="VUID-vkCreatePipelineLayout-pAllocator-parameter"></a> If <code>pAllocator</code> is not <code>NULL</code>, <code>pAllocator</code> <strong class="purple">must</strong> be a valid pointer to a valid <code>VkAllocationCallbacks</code> structure</p>
</li>
<li>
<p><a id="VUID-vkCreatePipelineLayout-pPipelineLayout-parameter"></a> <code>pPipelineLayout</code> <strong class="purple">must</strong> be a valid pointer to a <code>VkPipelineLayout</code> handle</p>
</li>
</ul>
</div>
</div>
</div>
<div class="sidebarblock">
<div class="content">
<div class="title">Return Codes</div>
<div class="dlist">
<dl>
<dt class="hdlist1"><a href="#fundamentals-successcodes">Success</a></dt>
<dd>
<div class="ulist">
<ul>
<li>
<p><code>VK_SUCCESS</code></p>
</li>
</ul>
</div>
</dd>
<dt class="hdlist1"><a href="#fundamentals-errorcodes">Failure</a></dt>
<dd>
<div class="ulist">
<ul>
<li>
<p><code>VK_ERROR_OUT_OF_HOST_MEMORY</code></p>
</li>
<li>
<p><code>VK_ERROR_OUT_OF_DEVICE_MEMORY</code></p>
</li>
</ul>
</div>
</dd>
</dl>
</div>
</div>
</div>
</div>
<div class="sect3">
<h4 id="_see_also_130">See Also</h4>
<div class="paragraph">
<p><a href="#VkAllocationCallbacks">VkAllocationCallbacks</a>, <a href="#VkDevice">VkDevice</a>, <a href="#VkPipelineLayout">VkPipelineLayout</a>, <a href="#VkPipelineLayoutCreateInfo">VkPipelineLayoutCreateInfo</a></p>
</div>
</div>
<div class="sect3">
<h4 id="_document_notes_130">Document Notes</h4>
<div class="paragraph">
<p>For more information, see the Vulkan Specification at URL</p>
</div>
<div class="paragraph">
<p><a href="https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#vkCreatePipelineLayout" class="bare">https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#vkCreatePipelineLayout</a></p>
</div>
<div class="paragraph">
<p>This page is extracted from the Vulkan Specification.
Fixes and changes should be made to the Specification, not directly.</p>
</div>
<div style="page-break-after: always;"></div>
</div>
</div>
<div class="sect2">
<h3 id="_vkcreatequerypool3">vkCreateQueryPool(3)</h3>
<div class="sect3">
<h4 id="_name_131">Name</h4>
<div class="paragraph">
<p>vkCreateQueryPool - Create a new query pool object</p>
</div>
</div>
<div class="sect3">
<h4 id="_c_specification_131">C Specification</h4>
<div class="paragraph">
<p>To create a query pool, call:</p>
</div>
<div id="vkCreateQueryPool" class="listingblock">
<div class="content">
<pre class="highlight"><code class="language-c++" data-lang="c++">VkResult vkCreateQueryPool(
    VkDevice                                    device,
    const VkQueryPoolCreateInfo*                pCreateInfo,
    const VkAllocationCallbacks*                pAllocator,
    VkQueryPool*                                pQueryPool);</code></pre>
</div>
</div>
</div>
<div class="sect3">
<h4 id="_parameters_131">Parameters</h4>
<div class="ulist">
<ul>
<li>
<p><code>device</code> is the logical device that creates the query pool.</p>
</li>
<li>
<p><code>pCreateInfo</code> is a pointer to an instance of the
<code>VkQueryPoolCreateInfo</code> structure containing the number and type of
queries to be managed by the pool.</p>
</li>
<li>
<p><code>pAllocator</code> controls host memory allocation as described in the
<a href="vkspec.html#memory-allocation">Memory Allocation</a> chapter.</p>
</li>
<li>
<p><code>pQueryPool</code> is a pointer to a <a href="#VkQueryPool">VkQueryPool</a> handle in which the
resulting query pool object is returned.</p>
</li>
</ul>
</div>
</div>
<div class="sect3">
<h4 id="_description_131">Description</h4>
<div class="sidebarblock">
<div class="content">
<div class="title">Valid Usage (Implicit)</div>
<div class="ulist">
<ul>
<li>
<p><a id="VUID-vkCreateQueryPool-device-parameter"></a> <code>device</code> <strong class="purple">must</strong> be a valid <code>VkDevice</code> handle</p>
</li>
<li>
<p><a id="VUID-vkCreateQueryPool-pCreateInfo-parameter"></a> <code>pCreateInfo</code> <strong class="purple">must</strong> be a valid pointer to a valid <code>VkQueryPoolCreateInfo</code> structure</p>
</li>
<li>
<p><a id="VUID-vkCreateQueryPool-pAllocator-parameter"></a> If <code>pAllocator</code> is not <code>NULL</code>, <code>pAllocator</code> <strong class="purple">must</strong> be a valid pointer to a valid <code>VkAllocationCallbacks</code> structure</p>
</li>
<li>
<p><a id="VUID-vkCreateQueryPool-pQueryPool-parameter"></a> <code>pQueryPool</code> <strong class="purple">must</strong> be a valid pointer to a <code>VkQueryPool</code> handle</p>
</li>
</ul>
</div>
</div>
</div>
<div class="sidebarblock">
<div class="content">
<div class="title">Return Codes</div>
<div class="dlist">
<dl>
<dt class="hdlist1"><a href="#fundamentals-successcodes">Success</a></dt>
<dd>
<div class="ulist">
<ul>
<li>
<p><code>VK_SUCCESS</code></p>
</li>
</ul>
</div>
</dd>
<dt class="hdlist1"><a href="#fundamentals-errorcodes">Failure</a></dt>
<dd>
<div class="ulist">
<ul>
<li>
<p><code>VK_ERROR_OUT_OF_HOST_MEMORY</code></p>
</li>
<li>
<p><code>VK_ERROR_OUT_OF_DEVICE_MEMORY</code></p>
</li>
</ul>
</div>
</dd>
</dl>
</div>
</div>
</div>
</div>
<div class="sect3">
<h4 id="_see_also_131">See Also</h4>
<div class="paragraph">
<p><a href="#VkAllocationCallbacks">VkAllocationCallbacks</a>, <a href="#VkDevice">VkDevice</a>, <a href="#VkQueryPool">VkQueryPool</a>, <a href="#VkQueryPoolCreateInfo">VkQueryPoolCreateInfo</a></p>
</div>
</div>
<div class="sect3">
<h4 id="_document_notes_131">Document Notes</h4>
<div class="paragraph">
<p>For more information, see the Vulkan Specification at URL</p>
</div>
<div class="paragraph">
<p><a href="https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#vkCreateQueryPool" class="bare">https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#vkCreateQueryPool</a></p>
</div>
<div class="paragraph">
<p>This page is extracted from the Vulkan Specification.
Fixes and changes should be made to the Specification, not directly.</p>
</div>
<div style="page-break-after: always;"></div>
</div>
</div>
<div class="sect2">
<h3 id="_vkcreateraytracingpipelinesnv3">vkCreateRayTracingPipelinesNV(3)</h3>
<div class="sect3">
<h4 id="_name_132">Name</h4>
<div class="paragraph">
<p>vkCreateRayTracingPipelinesNV - Creates a new ray tracing pipeline object</p>
</div>
</div>
<div class="sect3">
<h4 id="_c_specification_132">C Specification</h4>
<div class="paragraph">
<p>To create ray tracing pipelines, call:</p>
</div>
<div id="vkCreateRayTracingPipelinesNV" class="listingblock">
<div class="content">
<pre class="highlight"><code class="language-c++" data-lang="c++">VkResult vkCreateRayTracingPipelinesNV(
    VkDevice                                    device,
    VkPipelineCache                             pipelineCache,
    uint32_t                                    createInfoCount,
    const VkRayTracingPipelineCreateInfoNV*     pCreateInfos,
    const VkAllocationCallbacks*                pAllocator,
    VkPipeline*                                 pPipelines);</code></pre>
</div>
</div>
</div>
<div class="sect3">
<h4 id="_parameters_132">Parameters</h4>
<div class="ulist">
<ul>
<li>
<p><code>device</code> is the logical device that creates the ray tracing
pipelines.</p>
</li>
<li>
<p><code>pipelineCache</code> is either <a href="#VK_NULL_HANDLE">VK_NULL_HANDLE</a>, indicating that
pipeline caching is disabled, or the handle of a valid
<a href="vkspec.html#pipelines-cache">pipeline cache</a> object, in which case use of that
cache is enabled for the duration of the command.</p>
</li>
<li>
<p><code>createInfoCount</code> is the length of the <code>pCreateInfos</code> and
<code>pPipelines</code> arrays.</p>
</li>
<li>
<p><code>pCreateInfos</code> is an array of <code>VkRayTracingPipelineCreateInfoNV</code>
structures.</p>
</li>
<li>
<p><code>pAllocator</code> controls host memory allocation as described in the
<a href="vkspec.html#memory-allocation">Memory Allocation</a> chapter.</p>
</li>
<li>
<p><code>pPipelines</code> is a pointer to an array in which the resulting ray
tracing pipeline objects are returned.</p>
</li>
</ul>
</div>
</div>
<div class="sect3">
<h4 id="_description_132">Description</h4>
<div class="sidebarblock">
<div class="content">
<div class="title">Valid Usage</div>
<div class="ulist">
<ul>
<li>
<p><a id="VUID-vkCreateRayTracingPipelinesNV-flags-02402"></a>
If the <code>flags</code> member of any element of <code>pCreateInfos</code> contains
the <code>VK_PIPELINE_CREATE_DERIVATIVE_BIT</code> flag, and the
<code>basePipelineIndex</code> member of that same element is not <code>-1</code>,
<code>basePipelineIndex</code> <strong class="purple">must</strong> be less than the index into
<code>pCreateInfos</code> that corresponds to that element</p>
</li>
<li>
<p><a id="VUID-vkCreateRayTracingPipelinesNV-flags-02403"></a>
If the <code>flags</code> member of any element of <code>pCreateInfos</code> contains
the <code>VK_PIPELINE_CREATE_DERIVATIVE_BIT</code> flag, the base pipeline
<strong class="purple">must</strong> have been created with the
<code>VK_PIPELINE_CREATE_ALLOW_DERIVATIVES_BIT</code> flag set</p>
</li>
</ul>
</div>
</div>
</div>
<div class="sidebarblock">
<div class="content">
<div class="title">Valid Usage (Implicit)</div>
<div class="ulist">
<ul>
<li>
<p><a id="VUID-vkCreateRayTracingPipelinesNV-device-parameter"></a> <code>device</code> <strong class="purple">must</strong> be a valid <code>VkDevice</code> handle</p>
</li>
<li>
<p><a id="VUID-vkCreateRayTracingPipelinesNV-pipelineCache-parameter"></a> If <code>pipelineCache</code> is not <a href="#VK_NULL_HANDLE">VK_NULL_HANDLE</a>, <code>pipelineCache</code> <strong class="purple">must</strong> be a valid <code>VkPipelineCache</code> handle</p>
</li>
<li>
<p><a id="VUID-vkCreateRayTracingPipelinesNV-pCreateInfos-parameter"></a> <code>pCreateInfos</code> <strong class="purple">must</strong> be a valid pointer to an array of <code>createInfoCount</code> valid <code>VkRayTracingPipelineCreateInfoNV</code> structures</p>
</li>
<li>
<p><a id="VUID-vkCreateRayTracingPipelinesNV-pAllocator-parameter"></a> If <code>pAllocator</code> is not <code>NULL</code>, <code>pAllocator</code> <strong class="purple">must</strong> be a valid pointer to a valid <code>VkAllocationCallbacks</code> structure</p>
</li>
<li>
<p><a id="VUID-vkCreateRayTracingPipelinesNV-pPipelines-parameter"></a> <code>pPipelines</code> <strong class="purple">must</strong> be a valid pointer to an array of <code>createInfoCount</code> <code>VkPipeline</code> handles</p>
</li>
<li>
<p><a id="VUID-vkCreateRayTracingPipelinesNV-createInfoCount-arraylength"></a> <code>createInfoCount</code> <strong class="purple">must</strong> be greater than <code>0</code></p>
</li>
<li>
<p><a id="VUID-vkCreateRayTracingPipelinesNV-pipelineCache-parent"></a> If <code>pipelineCache</code> is a valid handle, it <strong class="purple">must</strong> have been created, allocated, or retrieved from <code>device</code></p>
</li>
</ul>
</div>
</div>
</div>
<div class="sidebarblock">
<div class="content">
<div class="title">Return Codes</div>
<div class="dlist">
<dl>
<dt class="hdlist1"><a href="#fundamentals-successcodes">Success</a></dt>
<dd>
<div class="ulist">
<ul>
<li>
<p><code>VK_SUCCESS</code></p>
</li>
</ul>
</div>
</dd>
<dt class="hdlist1"><a href="#fundamentals-errorcodes">Failure</a></dt>
<dd>
<div class="ulist">
<ul>
<li>
<p><code>VK_ERROR_OUT_OF_HOST_MEMORY</code></p>
</li>
<li>
<p><code>VK_ERROR_OUT_OF_DEVICE_MEMORY</code></p>
</li>
<li>
<p><code>VK_ERROR_INVALID_SHADER_NV</code></p>
</li>
</ul>
</div>
</dd>
</dl>
</div>
</div>
</div>
</div>
<div class="sect3">
<h4 id="_see_also_132">See Also</h4>
<div class="paragraph">
<p><a href="#VkAllocationCallbacks">VkAllocationCallbacks</a>, <a href="#VkDevice">VkDevice</a>, <a href="#VkPipeline">VkPipeline</a>, <a href="#VkPipelineCache">VkPipelineCache</a>, <a href="#VkRayTracingPipelineCreateInfoNV">VkRayTracingPipelineCreateInfoNV</a></p>
</div>
</div>
<div class="sect3">
<h4 id="_document_notes_132">Document Notes</h4>
<div class="paragraph">
<p>For more information, see the Vulkan Specification at URL</p>
</div>
<div class="paragraph">
<p><a href="https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#vkCreateRayTracingPipelinesNV" class="bare">https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#vkCreateRayTracingPipelinesNV</a></p>
</div>
<div class="paragraph">
<p>This page is extracted from the Vulkan Specification.
Fixes and changes should be made to the Specification, not directly.</p>
</div>
<div style="page-break-after: always;"></div>
</div>
</div>
<div class="sect2">
<h3 id="_vkcreaterenderpass3">vkCreateRenderPass(3)</h3>
<div class="sect3">
<h4 id="_name_133">Name</h4>
<div class="paragraph">
<p>vkCreateRenderPass - Create a new render pass object</p>
</div>
</div>
<div class="sect3">
<h4 id="_c_specification_133">C Specification</h4>
<div class="paragraph">
<p>To create a render pass, call:</p>
</div>
<div id="vkCreateRenderPass" class="listingblock">
<div class="content">
<pre class="highlight"><code class="language-c++" data-lang="c++">VkResult vkCreateRenderPass(
    VkDevice                                    device,
    const VkRenderPassCreateInfo*               pCreateInfo,
    const VkAllocationCallbacks*                pAllocator,
    VkRenderPass*                               pRenderPass);</code></pre>
</div>
</div>
</div>
<div class="sect3">
<h4 id="_parameters_133">Parameters</h4>
<div class="ulist">
<ul>
<li>
<p><code>device</code> is the logical device that creates the render pass.</p>
</li>
<li>
<p><code>pCreateInfo</code> is a pointer to an instance of the
<a href="#VkRenderPassCreateInfo">VkRenderPassCreateInfo</a> structure that describes the parameters of
the render pass.</p>
</li>
<li>
<p><code>pAllocator</code> controls host memory allocation as described in the
<a href="vkspec.html#memory-allocation">Memory Allocation</a> chapter.</p>
</li>
<li>
<p><code>pRenderPass</code> points to a <a href="#VkRenderPass">VkRenderPass</a> handle in which the
resulting render pass object is returned.</p>
</li>
</ul>
</div>
</div>
<div class="sect3">
<h4 id="_description_133">Description</h4>
<div class="sidebarblock">
<div class="content">
<div class="title">Valid Usage (Implicit)</div>
<div class="ulist">
<ul>
<li>
<p><a id="VUID-vkCreateRenderPass-device-parameter"></a> <code>device</code> <strong class="purple">must</strong> be a valid <code>VkDevice</code> handle</p>
</li>
<li>
<p><a id="VUID-vkCreateRenderPass-pCreateInfo-parameter"></a> <code>pCreateInfo</code> <strong class="purple">must</strong> be a valid pointer to a valid <code>VkRenderPassCreateInfo</code> structure</p>
</li>
<li>
<p><a id="VUID-vkCreateRenderPass-pAllocator-parameter"></a> If <code>pAllocator</code> is not <code>NULL</code>, <code>pAllocator</code> <strong class="purple">must</strong> be a valid pointer to a valid <code>VkAllocationCallbacks</code> structure</p>
</li>
<li>
<p><a id="VUID-vkCreateRenderPass-pRenderPass-parameter"></a> <code>pRenderPass</code> <strong class="purple">must</strong> be a valid pointer to a <code>VkRenderPass</code> handle</p>
</li>
</ul>
</div>
</div>
</div>
<div class="sidebarblock">
<div class="content">
<div class="title">Return Codes</div>
<div class="dlist">
<dl>
<dt class="hdlist1"><a href="#fundamentals-successcodes">Success</a></dt>
<dd>
<div class="ulist">
<ul>
<li>
<p><code>VK_SUCCESS</code></p>
</li>
</ul>
</div>
</dd>
<dt class="hdlist1"><a href="#fundamentals-errorcodes">Failure</a></dt>
<dd>
<div class="ulist">
<ul>
<li>
<p><code>VK_ERROR_OUT_OF_HOST_MEMORY</code></p>
</li>
<li>
<p><code>VK_ERROR_OUT_OF_DEVICE_MEMORY</code></p>
</li>
</ul>
</div>
</dd>
</dl>
</div>
</div>
</div>
</div>
<div class="sect3">
<h4 id="_see_also_133">See Also</h4>
<div class="paragraph">
<p><a href="#VkAllocationCallbacks">VkAllocationCallbacks</a>, <a href="#VkDevice">VkDevice</a>, <a href="#VkRenderPass">VkRenderPass</a>, <a href="#VkRenderPassCreateInfo">VkRenderPassCreateInfo</a></p>
</div>
</div>
<div class="sect3">
<h4 id="_document_notes_133">Document Notes</h4>
<div class="paragraph">
<p>For more information, see the Vulkan Specification at URL</p>
</div>
<div class="paragraph">
<p><a href="https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#vkCreateRenderPass" class="bare">https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#vkCreateRenderPass</a></p>
</div>
<div class="paragraph">
<p>This page is extracted from the Vulkan Specification.
Fixes and changes should be made to the Specification, not directly.</p>
</div>
<div style="page-break-after: always;"></div>
</div>
</div>
<div class="sect2">
<h3 id="_vkcreaterenderpass2khr3">vkCreateRenderPass2KHR(3)</h3>
<div class="sect3">
<h4 id="_name_134">Name</h4>
<div class="paragraph">
<p>vkCreateRenderPass2KHR - Create a new render pass object</p>
</div>
</div>
<div class="sect3">
<h4 id="_c_specification_134">C Specification</h4>
<div class="paragraph">
<p>To create a render pass, call:</p>
</div>
<div id="vkCreateRenderPass2KHR" class="listingblock">
<div class="content">
<pre class="highlight"><code class="language-c++" data-lang="c++">VkResult vkCreateRenderPass2KHR(
    VkDevice                                    device,
    const VkRenderPassCreateInfo2KHR*           pCreateInfo,
    const VkAllocationCallbacks*                pAllocator,
    VkRenderPass*                               pRenderPass);</code></pre>
</div>
</div>
</div>
<div class="sect3">
<h4 id="_parameters_134">Parameters</h4>
<div class="ulist">
<ul>
<li>
<p><code>device</code> is the logical device that creates the render pass.</p>
</li>
<li>
<p><code>pCreateInfo</code> is a pointer to an instance of the
<a href="#VkRenderPassCreateInfo2KHR">VkRenderPassCreateInfo2KHR</a> structure that describes the parameters
of the render pass.</p>
</li>
<li>
<p><code>pAllocator</code> controls host memory allocation as described in the
<a href="vkspec.html#memory-allocation">Memory Allocation</a> chapter.</p>
</li>
<li>
<p><code>pRenderPass</code> points to a <code>VkRenderPass</code> handle in which the
resulting render pass object is returned.</p>
</li>
</ul>
</div>
</div>
<div class="sect3">
<h4 id="_description_134">Description</h4>
<div class="paragraph">
<p>This command is functionally identical to <a href="#vkCreateRenderPass">vkCreateRenderPass</a>, but
includes extensible sub-structures that include <code>sType</code> and <code>pNext</code>
parameters, allowing them to be more easily extended.</p>
</div>
<div class="sidebarblock">
<div class="content">
<div class="title">Valid Usage (Implicit)</div>
<div class="ulist">
<ul>
<li>
<p><a id="VUID-vkCreateRenderPass2KHR-device-parameter"></a> <code>device</code> <strong class="purple">must</strong> be a valid <code>VkDevice</code> handle</p>
</li>
<li>
<p><a id="VUID-vkCreateRenderPass2KHR-pCreateInfo-parameter"></a> <code>pCreateInfo</code> <strong class="purple">must</strong> be a valid pointer to a valid <code>VkRenderPassCreateInfo2KHR</code> structure</p>
</li>
<li>
<p><a id="VUID-vkCreateRenderPass2KHR-pAllocator-parameter"></a> If <code>pAllocator</code> is not <code>NULL</code>, <code>pAllocator</code> <strong class="purple">must</strong> be a valid pointer to a valid <code>VkAllocationCallbacks</code> structure</p>
</li>
<li>
<p><a id="VUID-vkCreateRenderPass2KHR-pRenderPass-parameter"></a> <code>pRenderPass</code> <strong class="purple">must</strong> be a valid pointer to a <code>VkRenderPass</code> handle</p>
</li>
</ul>
</div>
</div>
</div>
<div class="sidebarblock">
<div class="content">
<div class="title">Return Codes</div>
<div class="dlist">
<dl>
<dt class="hdlist1"><a href="#fundamentals-successcodes">Success</a></dt>
<dd>
<div class="ulist">
<ul>
<li>
<p><code>VK_SUCCESS</code></p>
</li>
</ul>
</div>
</dd>
<dt class="hdlist1"><a href="#fundamentals-errorcodes">Failure</a></dt>
<dd>
<div class="ulist">
<ul>
<li>
<p><code>VK_ERROR_OUT_OF_HOST_MEMORY</code></p>
</li>
<li>
<p><code>VK_ERROR_OUT_OF_DEVICE_MEMORY</code></p>
</li>
</ul>
</div>
</dd>
</dl>
</div>
</div>
</div>
</div>
<div class="sect3">
<h4 id="_see_also_134">See Also</h4>
<div class="paragraph">
<p><a href="#VkAllocationCallbacks">VkAllocationCallbacks</a>, <a href="#VkDevice">VkDevice</a>, <a href="#VkRenderPass">VkRenderPass</a>, <a href="#VkRenderPassCreateInfo2KHR">VkRenderPassCreateInfo2KHR</a></p>
</div>
</div>
<div class="sect3">
<h4 id="_document_notes_134">Document Notes</h4>
<div class="paragraph">
<p>For more information, see the Vulkan Specification at URL</p>
</div>
<div class="paragraph">
<p><a href="https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#vkCreateRenderPass2KHR" class="bare">https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#vkCreateRenderPass2KHR</a></p>
</div>
<div class="paragraph">
<p>This page is extracted from the Vulkan Specification.
Fixes and changes should be made to the Specification, not directly.</p>
</div>
<div style="page-break-after: always;"></div>
</div>
</div>
<div class="sect2">
<h3 id="_vkcreatesampler3">vkCreateSampler(3)</h3>
<div class="sect3">
<h4 id="_name_135">Name</h4>
<div class="paragraph">
<p>vkCreateSampler - Create a new sampler object</p>
</div>
</div>
<div class="sect3">
<h4 id="_c_specification_135">C Specification</h4>
<div class="paragraph">
<p>To create a sampler object, call:</p>
</div>
<div id="vkCreateSampler" class="listingblock">
<div class="content">
<pre class="highlight"><code class="language-c++" data-lang="c++">VkResult vkCreateSampler(
    VkDevice                                    device,
    const VkSamplerCreateInfo*                  pCreateInfo,
    const VkAllocationCallbacks*                pAllocator,
    VkSampler*                                  pSampler);</code></pre>
</div>
</div>
</div>
<div class="sect3">
<h4 id="_parameters_135">Parameters</h4>
<div class="ulist">
<ul>
<li>
<p><code>device</code> is the logical device that creates the sampler.</p>
</li>
<li>
<p><code>pCreateInfo</code> is a pointer to an instance of the
<a href="#VkSamplerCreateInfo">VkSamplerCreateInfo</a> structure specifying the state of the sampler
object.</p>
</li>
<li>
<p><code>pAllocator</code> controls host memory allocation as described in the
<a href="vkspec.html#memory-allocation">Memory Allocation</a> chapter.</p>
</li>
<li>
<p><code>pSampler</code> points to a <a href="#VkSampler">VkSampler</a> handle in which the resulting
sampler object is returned.</p>
</li>
</ul>
</div>
</div>
<div class="sect3">
<h4 id="_description_135">Description</h4>
<div class="sidebarblock">
<div class="content">
<div class="title">Valid Usage (Implicit)</div>
<div class="ulist">
<ul>
<li>
<p><a id="VUID-vkCreateSampler-device-parameter"></a> <code>device</code> <strong class="purple">must</strong> be a valid <code>VkDevice</code> handle</p>
</li>
<li>
<p><a id="VUID-vkCreateSampler-pCreateInfo-parameter"></a> <code>pCreateInfo</code> <strong class="purple">must</strong> be a valid pointer to a valid <code>VkSamplerCreateInfo</code> structure</p>
</li>
<li>
<p><a id="VUID-vkCreateSampler-pAllocator-parameter"></a> If <code>pAllocator</code> is not <code>NULL</code>, <code>pAllocator</code> <strong class="purple">must</strong> be a valid pointer to a valid <code>VkAllocationCallbacks</code> structure</p>
</li>
<li>
<p><a id="VUID-vkCreateSampler-pSampler-parameter"></a> <code>pSampler</code> <strong class="purple">must</strong> be a valid pointer to a <code>VkSampler</code> handle</p>
</li>
</ul>
</div>
</div>
</div>
<div class="sidebarblock">
<div class="content">
<div class="title">Return Codes</div>
<div class="dlist">
<dl>
<dt class="hdlist1"><a href="#fundamentals-successcodes">Success</a></dt>
<dd>
<div class="ulist">
<ul>
<li>
<p><code>VK_SUCCESS</code></p>
</li>
</ul>
</div>
</dd>
<dt class="hdlist1"><a href="#fundamentals-errorcodes">Failure</a></dt>
<dd>
<div class="ulist">
<ul>
<li>
<p><code>VK_ERROR_OUT_OF_HOST_MEMORY</code></p>
</li>
<li>
<p><code>VK_ERROR_OUT_OF_DEVICE_MEMORY</code></p>
</li>
<li>
<p><code>VK_ERROR_TOO_MANY_OBJECTS</code></p>
</li>
</ul>
</div>
</dd>
</dl>
</div>
</div>
</div>
</div>
<div class="sect3">
<h4 id="_see_also_135">See Also</h4>
<div class="paragraph">
<p><a href="#VkAllocationCallbacks">VkAllocationCallbacks</a>, <a href="#VkDevice">VkDevice</a>, <a href="#VkSampler">VkSampler</a>, <a href="#VkSamplerCreateInfo">VkSamplerCreateInfo</a></p>
</div>
</div>
<div class="sect3">
<h4 id="_document_notes_135">Document Notes</h4>
<div class="paragraph">
<p>For more information, see the Vulkan Specification at URL</p>
</div>
<div class="paragraph">
<p><a href="https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#vkCreateSampler" class="bare">https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#vkCreateSampler</a></p>
</div>
<div class="paragraph">
<p>This page is extracted from the Vulkan Specification.
Fixes and changes should be made to the Specification, not directly.</p>
</div>
<div style="page-break-after: always;"></div>
</div>
</div>
<div class="sect2">
<h3 id="_vkcreatesamplerycbcrconversion3">vkCreateSamplerYcbcrConversion(3)</h3>
<div class="sect3">
<h4 id="_name_136">Name</h4>
<div class="paragraph">
<p>vkCreateSamplerYcbcrConversion - Create a new Ycbcr conversion</p>
</div>
</div>
<div class="sect3">
<h4 id="_c_specification_136">C Specification</h4>
<div class="paragraph">
<p>To create a <a href="#VkSamplerYcbcrConversion">VkSamplerYcbcrConversion</a>, call:</p>
</div>
<div id="vkCreateSamplerYcbcrConversion" class="listingblock">
<div class="content">
<pre class="highlight"><code class="language-c++" data-lang="c++">VkResult vkCreateSamplerYcbcrConversion(
    VkDevice                                    device,
    const VkSamplerYcbcrConversionCreateInfo*   pCreateInfo,
    const VkAllocationCallbacks*                pAllocator,
    VkSamplerYcbcrConversion*                   pYcbcrConversion);</code></pre>
</div>
</div>
<div class="paragraph">
<p>or the equivalent command</p>
</div>
<div id="vkCreateSamplerYcbcrConversionKHR" class="listingblock">
<div class="content">
<pre class="highlight"><code class="language-c++" data-lang="c++">VkResult vkCreateSamplerYcbcrConversionKHR(
    VkDevice                                    device,
    const VkSamplerYcbcrConversionCreateInfo*   pCreateInfo,
    const VkAllocationCallbacks*                pAllocator,
    VkSamplerYcbcrConversion*                   pYcbcrConversion);</code></pre>
</div>
</div>
</div>
<div class="sect3">
<h4 id="_parameters_136">Parameters</h4>
<div class="ulist">
<ul>
<li>
<p><code>device</code> is the logical device that creates the sampler Y&#8217;C<sub>B</sub>C<sub>R</sub>
conversion.</p>
</li>
<li>
<p><code>pCreateInfo</code> is a pointer to an instance of the
<a href="#VkSamplerYcbcrConversionCreateInfo">VkSamplerYcbcrConversionCreateInfo</a> specifying the requested
sampler Y&#8217;C<sub>B</sub>C<sub>R</sub> conversion.</p>
</li>
<li>
<p><code>pAllocator</code> controls host memory allocation as described in the
<a href="vkspec.html#memory-allocation">Memory Allocation</a> chapter.</p>
</li>
<li>
<p><code>pYcbcrConversion</code> points to a <a href="#VkSamplerYcbcrConversion">VkSamplerYcbcrConversion</a> handle
in which the resulting sampler Y&#8217;C<sub>B</sub>C<sub>R</sub> conversion is returned.</p>
</li>
</ul>
</div>
</div>
<div class="sect3">
<h4 id="_description_136">Description</h4>
<div class="paragraph">
<p>The interpretation of the configured sampler Y&#8217;C<sub>B</sub>C<sub>R</sub> conversion is
described in more detail in <a href="vkspec.html#textures-sampler-YCbCr-conversion">the
description of sampler Y&#8217;C<sub>B</sub>C<sub>R</sub> conversion</a> in the <a href="vkspec.html#textures">Image
Operations</a> chapter.</p>
</div>
<div class="sidebarblock">
<div class="content">
<div class="title">Valid Usage</div>
<div class="ulist">
<ul>
<li>
<p><a id="VUID-vkCreateSamplerYcbcrConversion-None-01648"></a>
The <a href="vkspec.html#features-sampler-YCbCr-conversion">sampler Y&#8217;C<sub>B</sub>C<sub>R</sub> conversion
feature</a> <strong class="purple">must</strong> be enabled</p>
</li>
</ul>
</div>
</div>
</div>
<div class="sidebarblock">
<div class="content">
<div class="title">Valid Usage (Implicit)</div>
<div class="ulist">
<ul>
<li>
<p><a id="VUID-vkCreateSamplerYcbcrConversion-device-parameter"></a> <code>device</code> <strong class="purple">must</strong> be a valid <code>VkDevice</code> handle</p>
</li>
<li>
<p><a id="VUID-vkCreateSamplerYcbcrConversion-pCreateInfo-parameter"></a> <code>pCreateInfo</code> <strong class="purple">must</strong> be a valid pointer to a valid <code>VkSamplerYcbcrConversionCreateInfo</code> structure</p>
</li>
<li>
<p><a id="VUID-vkCreateSamplerYcbcrConversion-pAllocator-parameter"></a> If <code>pAllocator</code> is not <code>NULL</code>, <code>pAllocator</code> <strong class="purple">must</strong> be a valid pointer to a valid <code>VkAllocationCallbacks</code> structure</p>
</li>
<li>
<p><a id="VUID-vkCreateSamplerYcbcrConversion-pYcbcrConversion-parameter"></a> <code>pYcbcrConversion</code> <strong class="purple">must</strong> be a valid pointer to a <code>VkSamplerYcbcrConversion</code> handle</p>
</li>
</ul>
</div>
</div>
</div>
<div class="sidebarblock">
<div class="content">
<div class="title">Return Codes</div>
<div class="dlist">
<dl>
<dt class="hdlist1"><a href="#fundamentals-successcodes">Success</a></dt>
<dd>
<div class="ulist">
<ul>
<li>
<p><code>VK_SUCCESS</code></p>
</li>
</ul>
</div>
</dd>
<dt class="hdlist1"><a href="#fundamentals-errorcodes">Failure</a></dt>
<dd>
<div class="ulist">
<ul>
<li>
<p><code>VK_ERROR_OUT_OF_HOST_MEMORY</code></p>
</li>
<li>
<p><code>VK_ERROR_OUT_OF_DEVICE_MEMORY</code></p>
</li>
</ul>
</div>
</dd>
</dl>
</div>
</div>
</div>
</div>
<div class="sect3">
<h4 id="_see_also_136">See Also</h4>
<div class="paragraph">
<p><a href="#VkAllocationCallbacks">VkAllocationCallbacks</a>, <a href="#VkDevice">VkDevice</a>, <a href="#VkSamplerYcbcrConversion">VkSamplerYcbcrConversion</a>, <a href="#VkSamplerYcbcrConversionCreateInfo">VkSamplerYcbcrConversionCreateInfo</a></p>
</div>
</div>
<div class="sect3">
<h4 id="_document_notes_136">Document Notes</h4>
<div class="paragraph">
<p>For more information, see the Vulkan Specification at URL</p>
</div>
<div class="paragraph">
<p><a href="https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#vkCreateSamplerYcbcrConversion" class="bare">https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#vkCreateSamplerYcbcrConversion</a></p>
</div>
<div class="paragraph">
<p>This page is extracted from the Vulkan Specification.
Fixes and changes should be made to the Specification, not directly.</p>
</div>
<div style="page-break-after: always;"></div>
</div>
</div>
<div class="sect2">
<h3 id="_vkcreatesemaphore3">vkCreateSemaphore(3)</h3>
<div class="sect3">
<h4 id="_name_137">Name</h4>
<div class="paragraph">
<p>vkCreateSemaphore - Create a new queue semaphore object</p>
</div>
</div>
<div class="sect3">
<h4 id="_c_specification_137">C Specification</h4>
<div class="paragraph">
<p>To create a semaphore, call:</p>
</div>
<div id="vkCreateSemaphore" class="listingblock">
<div class="content">
<pre class="highlight"><code class="language-c++" data-lang="c++">VkResult vkCreateSemaphore(
    VkDevice                                    device,
    const VkSemaphoreCreateInfo*                pCreateInfo,
    const VkAllocationCallbacks*                pAllocator,
    VkSemaphore*                                pSemaphore);</code></pre>
</div>
</div>
</div>
<div class="sect3">
<h4 id="_parameters_137">Parameters</h4>
<div class="ulist">
<ul>
<li>
<p><code>device</code> is the logical device that creates the semaphore.</p>
</li>
<li>
<p><code>pCreateInfo</code> is a pointer to an instance of the
<code>VkSemaphoreCreateInfo</code> structure which contains information about
how the semaphore is to be created.</p>
</li>
<li>
<p><code>pAllocator</code> controls host memory allocation as described in the
<a href="vkspec.html#memory-allocation">Memory Allocation</a> chapter.</p>
</li>
<li>
<p><code>pSemaphore</code> points to a handle in which the resulting semaphore
object is returned.</p>
</li>
</ul>
</div>
</div>
<div class="sect3">
<h4 id="_description_137">Description</h4>
<div class="paragraph">
<p>When created, the semaphore is in the unsignaled state.</p>
</div>
<div class="sidebarblock">
<div class="content">
<div class="title">Valid Usage (Implicit)</div>
<div class="ulist">
<ul>
<li>
<p><a id="VUID-vkCreateSemaphore-device-parameter"></a> <code>device</code> <strong class="purple">must</strong> be a valid <code>VkDevice</code> handle</p>
</li>
<li>
<p><a id="VUID-vkCreateSemaphore-pCreateInfo-parameter"></a> <code>pCreateInfo</code> <strong class="purple">must</strong> be a valid pointer to a valid <code>VkSemaphoreCreateInfo</code> structure</p>
</li>
<li>
<p><a id="VUID-vkCreateSemaphore-pAllocator-parameter"></a> If <code>pAllocator</code> is not <code>NULL</code>, <code>pAllocator</code> <strong class="purple">must</strong> be a valid pointer to a valid <code>VkAllocationCallbacks</code> structure</p>
</li>
<li>
<p><a id="VUID-vkCreateSemaphore-pSemaphore-parameter"></a> <code>pSemaphore</code> <strong class="purple">must</strong> be a valid pointer to a <code>VkSemaphore</code> handle</p>
</li>
</ul>
</div>
</div>
</div>
<div class="sidebarblock">
<div class="content">
<div class="title">Return Codes</div>
<div class="dlist">
<dl>
<dt class="hdlist1"><a href="#fundamentals-successcodes">Success</a></dt>
<dd>
<div class="ulist">
<ul>
<li>
<p><code>VK_SUCCESS</code></p>
</li>
</ul>
</div>
</dd>
<dt class="hdlist1"><a href="#fundamentals-errorcodes">Failure</a></dt>
<dd>
<div class="ulist">
<ul>
<li>
<p><code>VK_ERROR_OUT_OF_HOST_MEMORY</code></p>
</li>
<li>
<p><code>VK_ERROR_OUT_OF_DEVICE_MEMORY</code></p>
</li>
</ul>
</div>
</dd>
</dl>
</div>
</div>
</div>
</div>
<div class="sect3">
<h4 id="_see_also_137">See Also</h4>
<div class="paragraph">
<p><a href="#VkAllocationCallbacks">VkAllocationCallbacks</a>, <a href="#VkDevice">VkDevice</a>, <a href="#VkSemaphore">VkSemaphore</a>, <a href="#VkSemaphoreCreateInfo">VkSemaphoreCreateInfo</a></p>
</div>
</div>
<div class="sect3">
<h4 id="_document_notes_137">Document Notes</h4>
<div class="paragraph">
<p>For more information, see the Vulkan Specification at URL</p>
</div>
<div class="paragraph">
<p><a href="https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#vkCreateSemaphore" class="bare">https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#vkCreateSemaphore</a></p>
</div>
<div class="paragraph">
<p>This page is extracted from the Vulkan Specification.
Fixes and changes should be made to the Specification, not directly.</p>
</div>
<div style="page-break-after: always;"></div>
</div>
</div>
<div class="sect2">
<h3 id="_vkcreateshadermodule3">vkCreateShaderModule(3)</h3>
<div class="sect3">
<h4 id="_name_138">Name</h4>
<div class="paragraph">
<p>vkCreateShaderModule - Creates a new shader module object</p>
</div>
</div>
<div class="sect3">
<h4 id="_c_specification_138">C Specification</h4>
<div class="paragraph">
<p>To create a shader module, call:</p>
</div>
<div id="vkCreateShaderModule" class="listingblock">
<div class="content">
<pre class="highlight"><code class="language-c++" data-lang="c++">VkResult vkCreateShaderModule(
    VkDevice                                    device,
    const VkShaderModuleCreateInfo*             pCreateInfo,
    const VkAllocationCallbacks*                pAllocator,
    VkShaderModule*                             pShaderModule);</code></pre>
</div>
</div>
</div>
<div class="sect3">
<h4 id="_parameters_138">Parameters</h4>
<div class="ulist">
<ul>
<li>
<p><code>device</code> is the logical device that creates the shader module.</p>
</li>
<li>
<p><code>pCreateInfo</code> is a pointer to an instance of the
<code>VkShaderModuleCreateInfo</code> structure.</p>
</li>
<li>
<p><code>pAllocator</code> controls host memory allocation as described in the
<a href="vkspec.html#memory-allocation">Memory Allocation</a> chapter.</p>
</li>
<li>
<p><code>pShaderModule</code> points to a <a href="#VkShaderModule">VkShaderModule</a> handle in which the
resulting shader module object is returned.</p>
</li>
</ul>
</div>
</div>
<div class="sect3">
<h4 id="_description_138">Description</h4>
<div class="paragraph">
<p>Once a shader module has been created, any entry points it contains <strong class="purple">can</strong> be
used in pipeline shader stages as described in <a href="vkspec.html#pipelines-compute">Compute
Pipelines</a> and <a href="vkspec.html#pipelines-graphics">Graphics Pipelines</a>.</p>
</div>
<div class="paragraph">
<p>If the shader stage fails to compile <code>VK_ERROR_INVALID_SHADER_NV</code> will
be generated and the compile log will be reported back to the application by
<code><a href="vkspec.html#VK_EXT_debug_report" class="bare">html/vkspec.html#VK_EXT_debug_report</a></code> if enabled.</p>
</div>
<div class="sidebarblock">
<div class="content">
<div class="title">Valid Usage (Implicit)</div>
<div class="ulist">
<ul>
<li>
<p><a id="VUID-vkCreateShaderModule-device-parameter"></a> <code>device</code> <strong class="purple">must</strong> be a valid <code>VkDevice</code> handle</p>
</li>
<li>
<p><a id="VUID-vkCreateShaderModule-pCreateInfo-parameter"></a> <code>pCreateInfo</code> <strong class="purple">must</strong> be a valid pointer to a valid <code>VkShaderModuleCreateInfo</code> structure</p>
</li>
<li>
<p><a id="VUID-vkCreateShaderModule-pAllocator-parameter"></a> If <code>pAllocator</code> is not <code>NULL</code>, <code>pAllocator</code> <strong class="purple">must</strong> be a valid pointer to a valid <code>VkAllocationCallbacks</code> structure</p>
</li>
<li>
<p><a id="VUID-vkCreateShaderModule-pShaderModule-parameter"></a> <code>pShaderModule</code> <strong class="purple">must</strong> be a valid pointer to a <code>VkShaderModule</code> handle</p>
</li>
</ul>
</div>
</div>
</div>
<div class="sidebarblock">
<div class="content">
<div class="title">Return Codes</div>
<div class="dlist">
<dl>
<dt class="hdlist1"><a href="#fundamentals-successcodes">Success</a></dt>
<dd>
<div class="ulist">
<ul>
<li>
<p><code>VK_SUCCESS</code></p>
</li>
</ul>
</div>
</dd>
<dt class="hdlist1"><a href="#fundamentals-errorcodes">Failure</a></dt>
<dd>
<div class="ulist">
<ul>
<li>
<p><code>VK_ERROR_OUT_OF_HOST_MEMORY</code></p>
</li>
<li>
<p><code>VK_ERROR_OUT_OF_DEVICE_MEMORY</code></p>
</li>
<li>
<p><code>VK_ERROR_INVALID_SHADER_NV</code></p>
</li>
</ul>
</div>
</dd>
</dl>
</div>
</div>
</div>
</div>
<div class="sect3">
<h4 id="_see_also_138">See Also</h4>
<div class="paragraph">
<p><a href="#VkAllocationCallbacks">VkAllocationCallbacks</a>, <a href="#VkDevice">VkDevice</a>, <a href="#VkShaderModule">VkShaderModule</a>, <a href="#VkShaderModuleCreateInfo">VkShaderModuleCreateInfo</a></p>
</div>
</div>
<div class="sect3">
<h4 id="_document_notes_138">Document Notes</h4>
<div class="paragraph">
<p>For more information, see the Vulkan Specification at URL</p>
</div>
<div class="paragraph">
<p><a href="https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#vkCreateShaderModule" class="bare">https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#vkCreateShaderModule</a></p>
</div>
<div class="paragraph">
<p>This page is extracted from the Vulkan Specification.
Fixes and changes should be made to the Specification, not directly.</p>
</div>
<div style="page-break-after: always;"></div>
</div>
</div>
<div class="sect2">
<h3 id="_vkcreatesharedswapchainskhr3">vkCreateSharedSwapchainsKHR(3)</h3>
<div class="sect3">
<h4 id="_name_139">Name</h4>
<div class="paragraph">
<p>vkCreateSharedSwapchainsKHR - Create multiple swapchains that share presentable images</p>
</div>
</div>
<div class="sect3">
<h4 id="_c_specification_139">C Specification</h4>
<div class="paragraph">
<p>When the <code>VK_KHR_display_swapchain</code> extension is enabled, multiple
swapchains that share presentable images are created by calling:</p>
</div>
<div id="vkCreateSharedSwapchainsKHR" class="listingblock">
<div class="content">
<pre class="highlight"><code class="language-c++" data-lang="c++">VkResult vkCreateSharedSwapchainsKHR(
    VkDevice                                    device,
    uint32_t                                    swapchainCount,
    const VkSwapchainCreateInfoKHR*             pCreateInfos,
    const VkAllocationCallbacks*                pAllocator,
    VkSwapchainKHR*                             pSwapchains);</code></pre>
</div>
</div>
</div>
<div class="sect3">
<h4 id="_parameters_139">Parameters</h4>
<div class="ulist">
<ul>
<li>
<p><code>device</code> is the device to create the swapchains for.</p>
</li>
<li>
<p><code>swapchainCount</code> is the number of swapchains to create.</p>
</li>
<li>
<p><code>pCreateInfos</code> is a pointer to an array of
<a href="#VkSwapchainCreateInfoKHR">VkSwapchainCreateInfoKHR</a> structures specifying the parameters of
the created swapchains.</p>
</li>
<li>
<p><code>pAllocator</code> is the allocator used for host memory allocated for the
swapchain objects when there is no more specific allocator available
(see <a href="vkspec.html#memory-allocation">Memory Allocation</a>).</p>
</li>
<li>
<p><code>pSwapchains</code> is a pointer to an array of <a href="#VkSwapchainKHR">VkSwapchainKHR</a>
handles in which the created swapchain objects will be returned.</p>
</li>
</ul>
</div>
</div>
<div class="sect3">
<h4 id="_description_139">Description</h4>
<div class="paragraph">
<p><code>vkCreateSharedSwapchainsKHR</code> is similar to <a href="#vkCreateSwapchainKHR">vkCreateSwapchainKHR</a>,
except that it takes an array of <a href="#VkSwapchainCreateInfoKHR">VkSwapchainCreateInfoKHR</a> structures,
and returns an array of swapchain objects.</p>
</div>
<div class="paragraph">
<p>The swapchain creation parameters that affect the properties and number of
presentable images <strong class="purple">must</strong> match between all the swapchains.
If the displays used by any of the swapchains do not use the same
presentable image layout or are incompatible in a way that prevents sharing
images, swapchain creation will fail with the result code
<code>VK_ERROR_INCOMPATIBLE_DISPLAY_KHR</code>.
If any error occurs, no swapchains will be created.
Images presented to multiple swapchains <strong class="purple">must</strong> be re-acquired from all of
them before transitioning away from <code>VK_IMAGE_LAYOUT_PRESENT_SRC_KHR</code>.
After destroying one or more of the swapchains, the remaining swapchains and
the presentable images <strong class="purple">can</strong> continue to be used.</p>
</div>
<div class="sidebarblock">
<div class="content">
<div class="title">Valid Usage (Implicit)</div>
<div class="ulist">
<ul>
<li>
<p><a id="VUID-vkCreateSharedSwapchainsKHR-device-parameter"></a> <code>device</code> <strong class="purple">must</strong> be a valid <code>VkDevice</code> handle</p>
</li>
<li>
<p><a id="VUID-vkCreateSharedSwapchainsKHR-pCreateInfos-parameter"></a> <code>pCreateInfos</code> <strong class="purple">must</strong> be a valid pointer to an array of <code>swapchainCount</code> valid <code>VkSwapchainCreateInfoKHR</code> structures</p>
</li>
<li>
<p><a id="VUID-vkCreateSharedSwapchainsKHR-pAllocator-parameter"></a> If <code>pAllocator</code> is not <code>NULL</code>, <code>pAllocator</code> <strong class="purple">must</strong> be a valid pointer to a valid <code>VkAllocationCallbacks</code> structure</p>
</li>
<li>
<p><a id="VUID-vkCreateSharedSwapchainsKHR-pSwapchains-parameter"></a> <code>pSwapchains</code> <strong class="purple">must</strong> be a valid pointer to an array of <code>swapchainCount</code> <code>VkSwapchainKHR</code> handles</p>
</li>
<li>
<p><a id="VUID-vkCreateSharedSwapchainsKHR-swapchainCount-arraylength"></a> <code>swapchainCount</code> <strong class="purple">must</strong> be greater than <code>0</code></p>
</li>
</ul>
</div>
</div>
</div>
<div class="sidebarblock">
<div class="content">
<div class="title">Host Synchronization</div>
<div class="ulist">
<ul>
<li>
<p>Host access to <code>pCreateInfos</code>[].surface <strong class="purple">must</strong> be externally synchronized</p>
</li>
<li>
<p>Host access to <code>pCreateInfos</code>[].oldSwapchain <strong class="purple">must</strong> be externally synchronized</p>
</li>
</ul>
</div>
</div>
</div>
<div class="sidebarblock">
<div class="content">
<div class="title">Return Codes</div>
<div class="dlist">
<dl>
<dt class="hdlist1"><a href="#fundamentals-successcodes">Success</a></dt>
<dd>
<div class="ulist">
<ul>
<li>
<p><code>VK_SUCCESS</code></p>
</li>
</ul>
</div>
</dd>
<dt class="hdlist1"><a href="#fundamentals-errorcodes">Failure</a></dt>
<dd>
<div class="ulist">
<ul>
<li>
<p><code>VK_ERROR_OUT_OF_HOST_MEMORY</code></p>
</li>
<li>
<p><code>VK_ERROR_OUT_OF_DEVICE_MEMORY</code></p>
</li>
<li>
<p><code>VK_ERROR_INCOMPATIBLE_DISPLAY_KHR</code></p>
</li>
<li>
<p><code>VK_ERROR_DEVICE_LOST</code></p>
</li>
<li>
<p><code>VK_ERROR_SURFACE_LOST_KHR</code></p>
</li>
</ul>
</div>
</dd>
</dl>
</div>
</div>
</div>
</div>
<div class="sect3">
<h4 id="_see_also_139">See Also</h4>
<div class="paragraph">
<p><a href="#VkAllocationCallbacks">VkAllocationCallbacks</a>, <a href="#VkDevice">VkDevice</a>, <a href="#VkSwapchainCreateInfoKHR">VkSwapchainCreateInfoKHR</a>, <a href="#VkSwapchainKHR">VkSwapchainKHR</a></p>
</div>
</div>
<div class="sect3">
<h4 id="_document_notes_139">Document Notes</h4>
<div class="paragraph">
<p>For more information, see the Vulkan Specification at URL</p>
</div>
<div class="paragraph">
<p><a href="https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#vkCreateSharedSwapchainsKHR" class="bare">https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#vkCreateSharedSwapchainsKHR</a></p>
</div>
<div class="paragraph">
<p>This page is extracted from the Vulkan Specification.
Fixes and changes should be made to the Specification, not directly.</p>
</div>
<div style="page-break-after: always;"></div>
</div>
</div>
<div class="sect2">
<h3 id="_vkcreatestreamdescriptorsurfaceggp3">vkCreateStreamDescriptorSurfaceGGP(3)</h3>
<div class="sect3">
<h4 id="_name_140">Name</h4>
<div class="paragraph">
<p>vkCreateStreamDescriptorSurfaceGGP - Create a <a href="#VkSurfaceKHR">VkSurfaceKHR</a> object for a Google Games Platform stream</p>
</div>
</div>
<div class="sect3">
<h4 id="_c_specification_140">C Specification</h4>
<div class="paragraph">
<p>To create a <code>VkSurfaceKHR</code> object for a Google Games Platform stream
descriptor, call:</p>
</div>
<div id="vkCreateStreamDescriptorSurfaceGGP" class="listingblock">
<div class="content">
<pre class="highlight"><code class="language-c++" data-lang="c++">VkResult vkCreateStreamDescriptorSurfaceGGP(
    VkInstance                                  instance,
    const VkStreamDescriptorSurfaceCreateInfoGGP* pCreateInfo,
    const VkAllocationCallbacks*                pAllocator,
    VkSurfaceKHR*                               pSurface);</code></pre>
</div>
</div>
</div>
<div class="sect3">
<h4 id="_parameters_140">Parameters</h4>
<div class="ulist">
<ul>
<li>
<p><code>instance</code> is the instance to associate with the surface.</p>
</li>
<li>
<p><code>pCreateInfo</code> is a pointer to an instance of the
<code>VkStreamDescriptorSurfaceCreateInfoGGP</code> structure containing
parameters that affect the creation of the surface object.</p>
</li>
<li>
<p><code>pAllocator</code> is the allocator used for host memory allocated for the
surface object when there is no more specific allocator available (see
<a href="vkspec.html#memory-allocation">Memory Allocation</a>).</p>
</li>
<li>
<p><code>pSurface</code> points to a <a href="#VkSurfaceKHR">VkSurfaceKHR</a> handle in which the
created surface object is returned.</p>
</li>
</ul>
</div>
</div>
<div class="sect3">
<h4 id="_description_140">Description</h4>
<div class="sidebarblock">
<div class="content">
<div class="title">Valid Usage (Implicit)</div>
<div class="ulist">
<ul>
<li>
<p><a id="VUID-vkCreateStreamDescriptorSurfaceGGP-instance-parameter"></a> <code>instance</code> <strong class="purple">must</strong> be a valid <code>VkInstance</code> handle</p>
</li>
<li>
<p><a id="VUID-vkCreateStreamDescriptorSurfaceGGP-pCreateInfo-parameter"></a> <code>pCreateInfo</code> <strong class="purple">must</strong> be a valid pointer to a valid <code>VkStreamDescriptorSurfaceCreateInfoGGP</code> structure</p>
</li>
<li>
<p><a id="VUID-vkCreateStreamDescriptorSurfaceGGP-pAllocator-parameter"></a> If <code>pAllocator</code> is not <code>NULL</code>, <code>pAllocator</code> <strong class="purple">must</strong> be a valid pointer to a valid <code>VkAllocationCallbacks</code> structure</p>
</li>
<li>
<p><a id="VUID-vkCreateStreamDescriptorSurfaceGGP-pSurface-parameter"></a> <code>pSurface</code> <strong class="purple">must</strong> be a valid pointer to a <code>VkSurfaceKHR</code> handle</p>
</li>
</ul>
</div>
</div>
</div>
<div class="sidebarblock">
<div class="content">
<div class="title">Return Codes</div>
<div class="dlist">
<dl>
<dt class="hdlist1"><a href="#fundamentals-successcodes">Success</a></dt>
<dd>
<div class="ulist">
<ul>
<li>
<p><code>VK_SUCCESS</code></p>
</li>
</ul>
</div>
</dd>
<dt class="hdlist1"><a href="#fundamentals-errorcodes">Failure</a></dt>
<dd>
<div class="ulist">
<ul>
<li>
<p><code>VK_ERROR_OUT_OF_HOST_MEMORY</code></p>
</li>
<li>
<p><code>VK_ERROR_OUT_OF_DEVICE_MEMORY</code></p>
</li>
<li>
<p><code>VK_ERROR_NATIVE_WINDOW_IN_USE_KHR</code></p>
</li>
</ul>
</div>
</dd>
</dl>
</div>
</div>
</div>
</div>
<div class="sect3">
<h4 id="_see_also_140">See Also</h4>
<div class="paragraph">
<p><a href="#VkAllocationCallbacks">VkAllocationCallbacks</a>, <a href="#VkInstance">VkInstance</a>, <a href="#VkStreamDescriptorSurfaceCreateInfoGGP">VkStreamDescriptorSurfaceCreateInfoGGP</a>, <a href="#VkSurfaceKHR">VkSurfaceKHR</a></p>
</div>
</div>
<div class="sect3">
<h4 id="_document_notes_140">Document Notes</h4>
<div class="paragraph">
<p>For more information, see the Vulkan Specification at URL</p>
</div>
<div class="paragraph">
<p><a href="https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#vkCreateStreamDescriptorSurfaceGGP" class="bare">https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#vkCreateStreamDescriptorSurfaceGGP</a></p>
</div>
<div class="paragraph">
<p>This page is extracted from the Vulkan Specification.
Fixes and changes should be made to the Specification, not directly.</p>
</div>
<div style="page-break-after: always;"></div>
</div>
</div>
<div class="sect2">
<h3 id="_vkcreateswapchainkhr3">vkCreateSwapchainKHR(3)</h3>
<div class="sect3">
<h4 id="_name_141">Name</h4>
<div class="paragraph">
<p>vkCreateSwapchainKHR - Create a swapchain</p>
</div>
</div>
<div class="sect3">
<h4 id="_c_specification_141">C Specification</h4>
<div class="paragraph">
<p>To create a swapchain, call:</p>
</div>
<div id="vkCreateSwapchainKHR" class="listingblock">
<div class="content">
<pre class="highlight"><code class="language-c++" data-lang="c++">VkResult vkCreateSwapchainKHR(
    VkDevice                                    device,
    const VkSwapchainCreateInfoKHR*             pCreateInfo,
    const VkAllocationCallbacks*                pAllocator,
    VkSwapchainKHR*                             pSwapchain);</code></pre>
</div>
</div>
</div>
<div class="sect3">
<h4 id="_parameters_141">Parameters</h4>
<div class="ulist">
<ul>
<li>
<p><code>device</code> is the device to create the swapchain for.</p>
</li>
<li>
<p><code>pCreateInfo</code> is a pointer to an instance of the
<a href="#VkSwapchainCreateInfoKHR">VkSwapchainCreateInfoKHR</a> structure specifying the parameters of
the created swapchain.</p>
</li>
<li>
<p><code>pAllocator</code> is the allocator used for host memory allocated for the
swapchain object when there is no more specific allocator available (see
<a href="vkspec.html#memory-allocation">Memory Allocation</a>).</p>
</li>
<li>
<p><code>pSwapchain</code> is a pointer to a <a href="#VkSwapchainKHR">VkSwapchainKHR</a> handle in which
the created swapchain object will be returned.</p>
</li>
</ul>
</div>
</div>
<div class="sect3">
<h4 id="_description_141">Description</h4>
<div class="paragraph">
<p>If the <code>oldSwapchain</code> parameter of <code>pCreateInfo</code> is a valid
swapchain, which has exclusive full-screen access, that access is released
from <code>oldSwapchain</code>.
If the command succeeds in this case, the newly created swapchain will
automatically acquire exclusive full-screen access from <code>oldSwapchain</code>.</p>
</div>
<div class="admonitionblock note">
<table>
<tr>
<td class="icon">
<i class="fa icon-note" title="Note"></i>
</td>
<td class="content">
<div class="title">Note</div>
<div class="paragraph">
<p>This implicit transfer is intended to avoid exiting and entering full-screen
exclusive mode, which may otherwise cause unwanted visual updates to the
display.</p>
</div>
</td>
</tr>
</table>
</div>
<div class="paragraph">
<p>In some cases, swapchain creation <strong class="purple">may</strong> fail if exclusive full-screen mode is
requested for application control, but for some implementation-specific
reason exclusive full-screen access is unavailable for the particular
combination of parameters provided.
If this occurs, <code>VK_ERROR_INITIALIZATION_FAILED</code> will be returned.</p>
</div>
<div class="admonitionblock note">
<table>
<tr>
<td class="icon">
<i class="fa icon-note" title="Note"></i>
</td>
<td class="content">
<div class="title">Note</div>
<div class="paragraph">
<p>In particular, it will fail if the <code>imageExtent</code> member of
<code>pCreateInfo</code> does not match the extents of the monitor.
Other reasons for failure may include the app not being set as high-dpi
aware, or if the physical device and monitor are not compatible in this
mode.</p>
</div>
</td>
</tr>
</table>
</div>
<div class="sidebarblock">
<div class="content">
<div class="title">Valid Usage (Implicit)</div>
<div class="ulist">
<ul>
<li>
<p><a id="VUID-vkCreateSwapchainKHR-device-parameter"></a> <code>device</code> <strong class="purple">must</strong> be a valid <code>VkDevice</code> handle</p>
</li>
<li>
<p><a id="VUID-vkCreateSwapchainKHR-pCreateInfo-parameter"></a> <code>pCreateInfo</code> <strong class="purple">must</strong> be a valid pointer to a valid <code>VkSwapchainCreateInfoKHR</code> structure</p>
</li>
<li>
<p><a id="VUID-vkCreateSwapchainKHR-pAllocator-parameter"></a> If <code>pAllocator</code> is not <code>NULL</code>, <code>pAllocator</code> <strong class="purple">must</strong> be a valid pointer to a valid <code>VkAllocationCallbacks</code> structure</p>
</li>
<li>
<p><a id="VUID-vkCreateSwapchainKHR-pSwapchain-parameter"></a> <code>pSwapchain</code> <strong class="purple">must</strong> be a valid pointer to a <code>VkSwapchainKHR</code> handle</p>
</li>
</ul>
</div>
</div>
</div>
<div class="sidebarblock">
<div class="content">
<div class="title">Host Synchronization</div>
<div class="ulist">
<ul>
<li>
<p>Host access to <code>pCreateInfo.surface</code> <strong class="purple">must</strong> be externally synchronized</p>
</li>
<li>
<p>Host access to <code>pCreateInfo.oldSwapchain</code> <strong class="purple">must</strong> be externally synchronized</p>
</li>
</ul>
</div>
</div>
</div>
<div class="sidebarblock">
<div class="content">
<div class="title">Return Codes</div>
<div class="dlist">
<dl>
<dt class="hdlist1"><a href="#fundamentals-successcodes">Success</a></dt>
<dd>
<div class="ulist">
<ul>
<li>
<p><code>VK_SUCCESS</code></p>
</li>
</ul>
</div>
</dd>
<dt class="hdlist1"><a href="#fundamentals-errorcodes">Failure</a></dt>
<dd>
<div class="ulist">
<ul>
<li>
<p><code>VK_ERROR_OUT_OF_HOST_MEMORY</code></p>
</li>
<li>
<p><code>VK_ERROR_OUT_OF_DEVICE_MEMORY</code></p>
</li>
<li>
<p><code>VK_ERROR_DEVICE_LOST</code></p>
</li>
<li>
<p><code>VK_ERROR_SURFACE_LOST_KHR</code></p>
</li>
<li>
<p><code>VK_ERROR_NATIVE_WINDOW_IN_USE_KHR</code></p>
</li>
<li>
<p><code>VK_ERROR_INITIALIZATION_FAILED</code></p>
</li>
</ul>
</div>
</dd>
</dl>
</div>
</div>
</div>
</div>
<div class="sect3">
<h4 id="_see_also_141">See Also</h4>
<div class="paragraph">
<p><a href="#VkAllocationCallbacks">VkAllocationCallbacks</a>, <a href="#VkDevice">VkDevice</a>, <a href="#VkSwapchainCreateInfoKHR">VkSwapchainCreateInfoKHR</a>, <a href="#VkSwapchainKHR">VkSwapchainKHR</a></p>
</div>
</div>
<div class="sect3">
<h4 id="_document_notes_141">Document Notes</h4>
<div class="paragraph">
<p>For more information, see the Vulkan Specification at URL</p>
</div>
<div class="paragraph">
<p><a href="https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#vkCreateSwapchainKHR" class="bare">https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#vkCreateSwapchainKHR</a></p>
</div>
<div class="paragraph">
<p>This page is extracted from the Vulkan Specification.
Fixes and changes should be made to the Specification, not directly.</p>
</div>
<div style="page-break-after: always;"></div>
</div>
</div>
<div class="sect2">
<h3 id="_vkcreatevalidationcacheext3">vkCreateValidationCacheEXT(3)</h3>
<div class="sect3">
<h4 id="_name_142">Name</h4>
<div class="paragraph">
<p>vkCreateValidationCacheEXT - Creates a new validation cache</p>
</div>
</div>
<div class="sect3">
<h4 id="_c_specification_142">C Specification</h4>
<div class="paragraph">
<p>To create validation cache objects, call:</p>
</div>
<div id="vkCreateValidationCacheEXT" class="listingblock">
<div class="content">
<pre class="highlight"><code class="language-c++" data-lang="c++">VkResult vkCreateValidationCacheEXT(
    VkDevice                                    device,
    const VkValidationCacheCreateInfoEXT*       pCreateInfo,
    const VkAllocationCallbacks*                pAllocator,
    VkValidationCacheEXT*                       pValidationCache);</code></pre>
</div>
</div>
</div>
<div class="sect3">
<h4 id="_parameters_142">Parameters</h4>
<div class="ulist">
<ul>
<li>
<p><code>device</code> is the logical device that creates the validation cache
object.</p>
</li>
<li>
<p><code>pCreateInfo</code> is a pointer to a <a href="#VkValidationCacheCreateInfoEXT">VkValidationCacheCreateInfoEXT</a>
structure that contains the initial parameters for the validation cache
object.</p>
</li>
<li>
<p><code>pAllocator</code> controls host memory allocation as described in the
<a href="vkspec.html#memory-allocation">Memory Allocation</a> chapter.</p>
</li>
<li>
<p><code>pValidationCache</code> is a pointer to a <a href="#VkValidationCacheEXT">VkValidationCacheEXT</a>
handle in which the resulting validation cache object is returned.</p>
</li>
</ul>
</div>
</div>
<div class="sect3">
<h4 id="_description_142">Description</h4>
<div class="admonitionblock note">
<table>
<tr>
<td class="icon">
<i class="fa icon-note" title="Note"></i>
</td>
<td class="content">
<div class="title">Note</div>
<div class="paragraph">
<p>Applications <strong class="purple">can</strong> track and manage the total host memory size of a
validation cache object using the <code>pAllocator</code>.
Applications <strong class="purple">can</strong> limit the amount of data retrieved from a validation cache
object in <code>vkGetValidationCacheDataEXT</code>.
Implementations <strong class="purple">should</strong> not internally limit the total number of entries
added to a validation cache object or the total host memory consumed.</p>
</div>
</td>
</tr>
</table>
</div>
<div class="paragraph">
<p>Once created, a validation cache <strong class="purple">can</strong> be passed to the
<code>vkCreateShaderModule</code> command as part of the
<code>VkShaderModuleCreateInfo</code> <code>pNext</code> chain.
If a <code>VkShaderModuleValidationCacheCreateInfoEXT</code> object is part of the
<code>VkShaderModuleCreateInfo</code>::<code>pNext</code> chain, and its
<code>validationCache</code> field is not <a href="#VK_NULL_HANDLE">VK_NULL_HANDLE</a>, the implementation
will query it for possible reuse opportunities and update it with new
content.
The use of the validation cache object in these commands is internally
synchronized, and the same validation cache object <strong class="purple">can</strong> be used in multiple
threads simultaneously.</p>
</div>
<div class="admonitionblock note">
<table>
<tr>
<td class="icon">
<i class="fa icon-note" title="Note"></i>
</td>
<td class="content">
<div class="title">Note</div>
<div class="paragraph">
<p>Implementations <strong class="purple">should</strong> make every effort to limit any critical sections to
the actual accesses to the cache, which is expected to be significantly
shorter than the duration of the <code>vkCreateShaderModule</code> command.</p>
</div>
</td>
</tr>
</table>
</div>
<div class="sidebarblock">
<div class="content">
<div class="title">Valid Usage (Implicit)</div>
<div class="ulist">
<ul>
<li>
<p><a id="VUID-vkCreateValidationCacheEXT-device-parameter"></a> <code>device</code> <strong class="purple">must</strong> be a valid <code>VkDevice</code> handle</p>
</li>
<li>
<p><a id="VUID-vkCreateValidationCacheEXT-pCreateInfo-parameter"></a> <code>pCreateInfo</code> <strong class="purple">must</strong> be a valid pointer to a valid <code>VkValidationCacheCreateInfoEXT</code> structure</p>
</li>
<li>
<p><a id="VUID-vkCreateValidationCacheEXT-pAllocator-parameter"></a> If <code>pAllocator</code> is not <code>NULL</code>, <code>pAllocator</code> <strong class="purple">must</strong> be a valid pointer to a valid <code>VkAllocationCallbacks</code> structure</p>
</li>
<li>
<p><a id="VUID-vkCreateValidationCacheEXT-pValidationCache-parameter"></a> <code>pValidationCache</code> <strong class="purple">must</strong> be a valid pointer to a <code>VkValidationCacheEXT</code> handle</p>
</li>
</ul>
</div>
</div>
</div>
<div class="sidebarblock">
<div class="content">
<div class="title">Return Codes</div>
<div class="dlist">
<dl>
<dt class="hdlist1"><a href="#fundamentals-successcodes">Success</a></dt>
<dd>
<div class="ulist">
<ul>
<li>
<p><code>VK_SUCCESS</code></p>
</li>
</ul>
</div>
</dd>
<dt class="hdlist1"><a href="#fundamentals-errorcodes">Failure</a></dt>
<dd>
<div class="ulist">
<ul>
<li>
<p><code>VK_ERROR_OUT_OF_HOST_MEMORY</code></p>
</li>
</ul>
</div>
</dd>
</dl>
</div>
</div>
</div>
</div>
<div class="sect3">
<h4 id="_see_also_142">See Also</h4>
<div class="paragraph">
<p><a href="#VkAllocationCallbacks">VkAllocationCallbacks</a>, <a href="#VkDevice">VkDevice</a>, <a href="#VkValidationCacheCreateInfoEXT">VkValidationCacheCreateInfoEXT</a>, <a href="#VkValidationCacheEXT">VkValidationCacheEXT</a></p>
</div>
</div>
<div class="sect3">
<h4 id="_document_notes_142">Document Notes</h4>
<div class="paragraph">
<p>For more information, see the Vulkan Specification at URL</p>
</div>
<div class="paragraph">
<p><a href="https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#vkCreateValidationCacheEXT" class="bare">https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#vkCreateValidationCacheEXT</a></p>
</div>
<div class="paragraph">
<p>This page is extracted from the Vulkan Specification.
Fixes and changes should be made to the Specification, not directly.</p>
</div>
<div style="page-break-after: always;"></div>
</div>
</div>
<div class="sect2">
<h3 id="_vkcreatevisurfacenn3">vkCreateViSurfaceNN(3)</h3>
<div class="sect3">
<h4 id="_name_143">Name</h4>
<div class="paragraph">
<p>vkCreateViSurfaceNN - Create a <a href="#VkSurfaceKHR">VkSurfaceKHR</a> object for a VI layer</p>
</div>
</div>
<div class="sect3">
<h4 id="_c_specification_143">C Specification</h4>
<div class="paragraph">
<p>To create a <code>VkSurfaceKHR</code> object for an <code>nn</code>::<code>vi</code>::<code>Layer</code>,
query the layer&#8217;s native handle using
<code>nn</code>::<code>vi</code>::<code>GetNativeWindow</code>, and then call:</p>
</div>
<div id="vkCreateViSurfaceNN" class="listingblock">
<div class="content">
<pre class="highlight"><code class="language-c++" data-lang="c++">VkResult vkCreateViSurfaceNN(
    VkInstance                                  instance,
    const VkViSurfaceCreateInfoNN*              pCreateInfo,
    const VkAllocationCallbacks*                pAllocator,
    VkSurfaceKHR*                               pSurface);</code></pre>
</div>
</div>
</div>
<div class="sect3">
<h4 id="_parameters_143">Parameters</h4>
<div class="ulist">
<ul>
<li>
<p><code>instance</code> is the instance with which to associate the surface.</p>
</li>
<li>
<p><code>pCreateInfo</code> is a pointer to an instance of the
<code>VkViSurfaceCreateInfoNN</code> structure containing parameters affecting
the creation of the surface object.</p>
</li>
<li>
<p><code>pAllocator</code> is the allocator used for host memory allocated for the
surface object when there is no more specific allocator available (see
<a href="vkspec.html#memory-allocation">Memory Allocation</a>).</p>
</li>
<li>
<p><code>pSurface</code> points to a <a href="#VkSurfaceKHR">VkSurfaceKHR</a> handle in which the
created surface object is returned.</p>
</li>
</ul>
</div>
</div>
<div class="sect3">
<h4 id="_description_143">Description</h4>
<div class="paragraph">
<p>During the lifetime of a surface created using a particular
<code>nn</code>::<code>vi</code>::<code>NativeWindowHandle</code>, applications <strong class="purple">must</strong> not attempt to
create another surface for the same <code>nn</code>::<code>vi</code>::<code>Layer</code> or attempt
to connect to the same <code>nn</code>::<code>vi</code>::<code>Layer</code> through other platform
mechanisms.</p>
</div>
<div class="paragraph">
<p>If the native window is created with a specified size, <code>currentExtent</code>
will reflect that size.
In this case, applications should use the same size for the swapchain&#8217;s
<code>imageExtent</code>.
Otherwise, the <code>currentExtent</code> will have the special value
<span class="eq">(0xFFFFFFFF, 0xFFFFFFFF)</span>, indicating that applications are expected to
choose an appropriate size for the swapchain&#8217;s <code>imageExtent</code> (e.g., by
matching the result of a call to
<code>nn</code>::<code>vi</code>::<code>GetDisplayResolution</code>).</p>
</div>
<div class="sidebarblock">
<div class="content">
<div class="title">Valid Usage (Implicit)</div>
<div class="ulist">
<ul>
<li>
<p><a id="VUID-vkCreateViSurfaceNN-instance-parameter"></a> <code>instance</code> <strong class="purple">must</strong> be a valid <code>VkInstance</code> handle</p>
</li>
<li>
<p><a id="VUID-vkCreateViSurfaceNN-pCreateInfo-parameter"></a> <code>pCreateInfo</code> <strong class="purple">must</strong> be a valid pointer to a valid <code>VkViSurfaceCreateInfoNN</code> structure</p>
</li>
<li>
<p><a id="VUID-vkCreateViSurfaceNN-pAllocator-parameter"></a> If <code>pAllocator</code> is not <code>NULL</code>, <code>pAllocator</code> <strong class="purple">must</strong> be a valid pointer to a valid <code>VkAllocationCallbacks</code> structure</p>
</li>
<li>
<p><a id="VUID-vkCreateViSurfaceNN-pSurface-parameter"></a> <code>pSurface</code> <strong class="purple">must</strong> be a valid pointer to a <code>VkSurfaceKHR</code> handle</p>
</li>
</ul>
</div>
</div>
</div>
<div class="sidebarblock">
<div class="content">
<div class="title">Return Codes</div>
<div class="dlist">
<dl>
<dt class="hdlist1"><a href="#fundamentals-successcodes">Success</a></dt>
<dd>
<div class="ulist">
<ul>
<li>
<p><code>VK_SUCCESS</code></p>
</li>
</ul>
</div>
</dd>
<dt class="hdlist1"><a href="#fundamentals-errorcodes">Failure</a></dt>
<dd>
<div class="ulist">
<ul>
<li>
<p><code>VK_ERROR_OUT_OF_HOST_MEMORY</code></p>
</li>
<li>
<p><code>VK_ERROR_OUT_OF_DEVICE_MEMORY</code></p>
</li>
<li>
<p><code>VK_ERROR_NATIVE_WINDOW_IN_USE_KHR</code></p>
</li>
</ul>
</div>
</dd>
</dl>
</div>
</div>
</div>
</div>
<div class="sect3">
<h4 id="_see_also_143">See Also</h4>
<div class="paragraph">
<p><a href="#VkAllocationCallbacks">VkAllocationCallbacks</a>, <a href="#VkInstance">VkInstance</a>, <a href="#VkSurfaceKHR">VkSurfaceKHR</a>, <a href="#VkViSurfaceCreateInfoNN">VkViSurfaceCreateInfoNN</a></p>
</div>
</div>
<div class="sect3">
<h4 id="_document_notes_143">Document Notes</h4>
<div class="paragraph">
<p>For more information, see the Vulkan Specification at URL</p>
</div>
<div class="paragraph">
<p><a href="https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#vkCreateViSurfaceNN" class="bare">https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#vkCreateViSurfaceNN</a></p>
</div>
<div class="paragraph">
<p>This page is extracted from the Vulkan Specification.
Fixes and changes should be made to the Specification, not directly.</p>
</div>
<div style="page-break-after: always;"></div>
</div>
</div>
<div class="sect2">
<h3 id="_vkcreatewaylandsurfacekhr3">vkCreateWaylandSurfaceKHR(3)</h3>
<div class="sect3">
<h4 id="_name_144">Name</h4>
<div class="paragraph">
<p>vkCreateWaylandSurfaceKHR - Create a <a href="#VkSurfaceKHR">VkSurfaceKHR</a> object for a Wayland window</p>
</div>
</div>
<div class="sect3">
<h4 id="_c_specification_144">C Specification</h4>
<div class="paragraph">
<p>To create a <code>VkSurfaceKHR</code> object for a Wayland surface, call:</p>
</div>
<div id="vkCreateWaylandSurfaceKHR" class="listingblock">
<div class="content">
<pre class="highlight"><code class="language-c++" data-lang="c++">VkResult vkCreateWaylandSurfaceKHR(
    VkInstance                                  instance,
    const VkWaylandSurfaceCreateInfoKHR*        pCreateInfo,
    const VkAllocationCallbacks*                pAllocator,
    VkSurfaceKHR*                               pSurface);</code></pre>
</div>
</div>
</div>
<div class="sect3">
<h4 id="_parameters_144">Parameters</h4>
<div class="ulist">
<ul>
<li>
<p><code>instance</code> is the instance to associate the surface with.</p>
</li>
<li>
<p><code>pCreateInfo</code> is a pointer to an instance of the
<a href="#VkWaylandSurfaceCreateInfoKHR">VkWaylandSurfaceCreateInfoKHR</a> structure containing parameters
affecting the creation of the surface object.</p>
</li>
<li>
<p><code>pAllocator</code> is the allocator used for host memory allocated for the
surface object when there is no more specific allocator available (see
<a href="vkspec.html#memory-allocation">Memory Allocation</a>).</p>
</li>
<li>
<p><code>pSurface</code> points to a <a href="#VkSurfaceKHR">VkSurfaceKHR</a> handle in which the
created surface object is returned.</p>
</li>
</ul>
</div>
</div>
<div class="sect3">
<h4 id="_description_144">Description</h4>
<div class="sidebarblock">
<div class="content">
<div class="title">Valid Usage (Implicit)</div>
<div class="ulist">
<ul>
<li>
<p><a id="VUID-vkCreateWaylandSurfaceKHR-instance-parameter"></a> <code>instance</code> <strong class="purple">must</strong> be a valid <code>VkInstance</code> handle</p>
</li>
<li>
<p><a id="VUID-vkCreateWaylandSurfaceKHR-pCreateInfo-parameter"></a> <code>pCreateInfo</code> <strong class="purple">must</strong> be a valid pointer to a valid <code>VkWaylandSurfaceCreateInfoKHR</code> structure</p>
</li>
<li>
<p><a id="VUID-vkCreateWaylandSurfaceKHR-pAllocator-parameter"></a> If <code>pAllocator</code> is not <code>NULL</code>, <code>pAllocator</code> <strong class="purple">must</strong> be a valid pointer to a valid <code>VkAllocationCallbacks</code> structure</p>
</li>
<li>
<p><a id="VUID-vkCreateWaylandSurfaceKHR-pSurface-parameter"></a> <code>pSurface</code> <strong class="purple">must</strong> be a valid pointer to a <code>VkSurfaceKHR</code> handle</p>
</li>
</ul>
</div>
</div>
</div>
<div class="sidebarblock">
<div class="content">
<div class="title">Return Codes</div>
<div class="dlist">
<dl>
<dt class="hdlist1"><a href="#fundamentals-successcodes">Success</a></dt>
<dd>
<div class="ulist">
<ul>
<li>
<p><code>VK_SUCCESS</code></p>
</li>
</ul>
</div>
</dd>
<dt class="hdlist1"><a href="#fundamentals-errorcodes">Failure</a></dt>
<dd>
<div class="ulist">
<ul>
<li>
<p><code>VK_ERROR_OUT_OF_HOST_MEMORY</code></p>
</li>
<li>
<p><code>VK_ERROR_OUT_OF_DEVICE_MEMORY</code></p>
</li>
</ul>
</div>
</dd>
</dl>
</div>
</div>
</div>
</div>
<div class="sect3">
<h4 id="_see_also_144">See Also</h4>
<div class="paragraph">
<p><a href="#VkAllocationCallbacks">VkAllocationCallbacks</a>, <a href="#VkInstance">VkInstance</a>, <a href="#VkSurfaceKHR">VkSurfaceKHR</a>, <a href="#VkWaylandSurfaceCreateInfoKHR">VkWaylandSurfaceCreateInfoKHR</a></p>
</div>
</div>
<div class="sect3">
<h4 id="_document_notes_144">Document Notes</h4>
<div class="paragraph">
<p>For more information, see the Vulkan Specification at URL</p>
</div>
<div class="paragraph">
<p><a href="https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#vkCreateWaylandSurfaceKHR" class="bare">https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#vkCreateWaylandSurfaceKHR</a></p>
</div>
<div class="paragraph">
<p>This page is extracted from the Vulkan Specification.
Fixes and changes should be made to the Specification, not directly.</p>
</div>
<div style="page-break-after: always;"></div>
</div>
</div>
<div class="sect2">
<h3 id="_vkcreatewin32surfacekhr3">vkCreateWin32SurfaceKHR(3)</h3>
<div class="sect3">
<h4 id="_name_145">Name</h4>
<div class="paragraph">
<p>vkCreateWin32SurfaceKHR - Create a <a href="#VkSurfaceKHR">VkSurfaceKHR</a> object for an Win32 native window</p>
</div>
</div>
<div class="sect3">
<h4 id="_c_specification_145">C Specification</h4>
<div class="paragraph">
<p>To create a <code>VkSurfaceKHR</code> object for a Win32 window, call:</p>
</div>
<div id="vkCreateWin32SurfaceKHR" class="listingblock">
<div class="content">
<pre class="highlight"><code class="language-c++" data-lang="c++">VkResult vkCreateWin32SurfaceKHR(
    VkInstance                                  instance,
    const VkWin32SurfaceCreateInfoKHR*          pCreateInfo,
    const VkAllocationCallbacks*                pAllocator,
    VkSurfaceKHR*                               pSurface);</code></pre>
</div>
</div>
</div>
<div class="sect3">
<h4 id="_parameters_145">Parameters</h4>
<div class="ulist">
<ul>
<li>
<p><code>instance</code> is the instance to associate the surface with.</p>
</li>
<li>
<p><code>pCreateInfo</code> is a pointer to an instance of the
<code>VkWin32SurfaceCreateInfoKHR</code> structure containing parameters
affecting the creation of the surface object.</p>
</li>
<li>
<p><code>pAllocator</code> is the allocator used for host memory allocated for the
surface object when there is no more specific allocator available (see
<a href="vkspec.html#memory-allocation">Memory Allocation</a>).</p>
</li>
<li>
<p><code>pSurface</code> points to a <a href="#VkSurfaceKHR">VkSurfaceKHR</a> handle in which the
created surface object is returned.</p>
</li>
</ul>
</div>
</div>
<div class="sect3">
<h4 id="_description_145">Description</h4>
<div class="sidebarblock">
<div class="content">
<div class="title">Valid Usage (Implicit)</div>
<div class="ulist">
<ul>
<li>
<p><a id="VUID-vkCreateWin32SurfaceKHR-instance-parameter"></a> <code>instance</code> <strong class="purple">must</strong> be a valid <code>VkInstance</code> handle</p>
</li>
<li>
<p><a id="VUID-vkCreateWin32SurfaceKHR-pCreateInfo-parameter"></a> <code>pCreateInfo</code> <strong class="purple">must</strong> be a valid pointer to a valid <code>VkWin32SurfaceCreateInfoKHR</code> structure</p>
</li>
<li>
<p><a id="VUID-vkCreateWin32SurfaceKHR-pAllocator-parameter"></a> If <code>pAllocator</code> is not <code>NULL</code>, <code>pAllocator</code> <strong class="purple">must</strong> be a valid pointer to a valid <code>VkAllocationCallbacks</code> structure</p>
</li>
<li>
<p><a id="VUID-vkCreateWin32SurfaceKHR-pSurface-parameter"></a> <code>pSurface</code> <strong class="purple">must</strong> be a valid pointer to a <code>VkSurfaceKHR</code> handle</p>
</li>
</ul>
</div>
</div>
</div>
<div class="sidebarblock">
<div class="content">
<div class="title">Return Codes</div>
<div class="dlist">
<dl>
<dt class="hdlist1"><a href="#fundamentals-successcodes">Success</a></dt>
<dd>
<div class="ulist">
<ul>
<li>
<p><code>VK_SUCCESS</code></p>
</li>
</ul>
</div>
</dd>
<dt class="hdlist1"><a href="#fundamentals-errorcodes">Failure</a></dt>
<dd>
<div class="ulist">
<ul>
<li>
<p><code>VK_ERROR_OUT_OF_HOST_MEMORY</code></p>
</li>
<li>
<p><code>VK_ERROR_OUT_OF_DEVICE_MEMORY</code></p>
</li>
</ul>
</div>
</dd>
</dl>
</div>
</div>
</div>
</div>
<div class="sect3">
<h4 id="_see_also_145">See Also</h4>
<div class="paragraph">
<p><a href="#VkAllocationCallbacks">VkAllocationCallbacks</a>, <a href="#VkInstance">VkInstance</a>, <a href="#VkSurfaceKHR">VkSurfaceKHR</a>, <a href="#VkWin32SurfaceCreateInfoKHR">VkWin32SurfaceCreateInfoKHR</a></p>
</div>
</div>
<div class="sect3">
<h4 id="_document_notes_145">Document Notes</h4>
<div class="paragraph">
<p>For more information, see the Vulkan Specification at URL</p>
</div>
<div class="paragraph">
<p><a href="https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#vkCreateWin32SurfaceKHR" class="bare">https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#vkCreateWin32SurfaceKHR</a></p>
</div>
<div class="paragraph">
<p>This page is extracted from the Vulkan Specification.
Fixes and changes should be made to the Specification, not directly.</p>
</div>
<div style="page-break-after: always;"></div>
</div>
</div>
<div class="sect2">
<h3 id="_vkcreatexcbsurfacekhr3">vkCreateXcbSurfaceKHR(3)</h3>
<div class="sect3">
<h4 id="_name_146">Name</h4>
<div class="paragraph">
<p>vkCreateXcbSurfaceKHR - Create a <a href="#VkSurfaceKHR">VkSurfaceKHR</a> object for a X11 window, using the XCB client-side library</p>
</div>
</div>
<div class="sect3">
<h4 id="_c_specification_146">C Specification</h4>
<div class="paragraph">
<p>To create a <code>VkSurfaceKHR</code> object for an X11 window, using the XCB
client-side library, call:</p>
</div>
<div id="vkCreateXcbSurfaceKHR" class="listingblock">
<div class="content">
<pre class="highlight"><code class="language-c++" data-lang="c++">VkResult vkCreateXcbSurfaceKHR(
    VkInstance                                  instance,
    const VkXcbSurfaceCreateInfoKHR*            pCreateInfo,
    const VkAllocationCallbacks*                pAllocator,
    VkSurfaceKHR*                               pSurface);</code></pre>
</div>
</div>
</div>
<div class="sect3">
<h4 id="_parameters_146">Parameters</h4>
<div class="ulist">
<ul>
<li>
<p><code>instance</code> is the instance to associate the surface with.</p>
</li>
<li>
<p><code>pCreateInfo</code> is a pointer to an instance of the
<code>VkXcbSurfaceCreateInfoKHR</code> structure containing parameters
affecting the creation of the surface object.</p>
</li>
<li>
<p><code>pAllocator</code> is the allocator used for host memory allocated for the
surface object when there is no more specific allocator available (see
<a href="vkspec.html#memory-allocation">Memory Allocation</a>).</p>
</li>
<li>
<p><code>pSurface</code> points to a <a href="#VkSurfaceKHR">VkSurfaceKHR</a> handle in which the
created surface object is returned.</p>
</li>
</ul>
</div>
</div>
<div class="sect3">
<h4 id="_description_146">Description</h4>
<div class="sidebarblock">
<div class="content">
<div class="title">Valid Usage (Implicit)</div>
<div class="ulist">
<ul>
<li>
<p><a id="VUID-vkCreateXcbSurfaceKHR-instance-parameter"></a> <code>instance</code> <strong class="purple">must</strong> be a valid <code>VkInstance</code> handle</p>
</li>
<li>
<p><a id="VUID-vkCreateXcbSurfaceKHR-pCreateInfo-parameter"></a> <code>pCreateInfo</code> <strong class="purple">must</strong> be a valid pointer to a valid <code>VkXcbSurfaceCreateInfoKHR</code> structure</p>
</li>
<li>
<p><a id="VUID-vkCreateXcbSurfaceKHR-pAllocator-parameter"></a> If <code>pAllocator</code> is not <code>NULL</code>, <code>pAllocator</code> <strong class="purple">must</strong> be a valid pointer to a valid <code>VkAllocationCallbacks</code> structure</p>
</li>
<li>
<p><a id="VUID-vkCreateXcbSurfaceKHR-pSurface-parameter"></a> <code>pSurface</code> <strong class="purple">must</strong> be a valid pointer to a <code>VkSurfaceKHR</code> handle</p>
</li>
</ul>
</div>
</div>
</div>
<div class="sidebarblock">
<div class="content">
<div class="title">Return Codes</div>
<div class="dlist">
<dl>
<dt class="hdlist1"><a href="#fundamentals-successcodes">Success</a></dt>
<dd>
<div class="ulist">
<ul>
<li>
<p><code>VK_SUCCESS</code></p>
</li>
</ul>
</div>
</dd>
<dt class="hdlist1"><a href="#fundamentals-errorcodes">Failure</a></dt>
<dd>
<div class="ulist">
<ul>
<li>
<p><code>VK_ERROR_OUT_OF_HOST_MEMORY</code></p>
</li>
<li>
<p><code>VK_ERROR_OUT_OF_DEVICE_MEMORY</code></p>
</li>
</ul>
</div>
</dd>
</dl>
</div>
</div>
</div>
</div>
<div class="sect3">
<h4 id="_see_also_146">See Also</h4>
<div class="paragraph">
<p><a href="#VkAllocationCallbacks">VkAllocationCallbacks</a>, <a href="#VkInstance">VkInstance</a>, <a href="#VkSurfaceKHR">VkSurfaceKHR</a>, <a href="#VkXcbSurfaceCreateInfoKHR">VkXcbSurfaceCreateInfoKHR</a></p>
</div>
</div>
<div class="sect3">
<h4 id="_document_notes_146">Document Notes</h4>
<div class="paragraph">
<p>For more information, see the Vulkan Specification at URL</p>
</div>
<div class="paragraph">
<p><a href="https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#vkCreateXcbSurfaceKHR" class="bare">https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#vkCreateXcbSurfaceKHR</a></p>
</div>
<div class="paragraph">
<p>This page is extracted from the Vulkan Specification.
Fixes and changes should be made to the Specification, not directly.</p>
</div>
<div style="page-break-after: always;"></div>
</div>
</div>
<div class="sect2">
<h3 id="_vkcreatexlibsurfacekhr3">vkCreateXlibSurfaceKHR(3)</h3>
<div class="sect3">
<h4 id="_name_147">Name</h4>
<div class="paragraph">
<p>vkCreateXlibSurfaceKHR - Create a <a href="#VkSurfaceKHR">VkSurfaceKHR</a> object for an X11 window, using the Xlib client-side library</p>
</div>
</div>
<div class="sect3">
<h4 id="_c_specification_147">C Specification</h4>
<div class="paragraph">
<p>To create a <code>VkSurfaceKHR</code> object for an X11 window, using the Xlib
client-side library, call:</p>
</div>
<div id="vkCreateXlibSurfaceKHR" class="listingblock">
<div class="content">
<pre class="highlight"><code class="language-c++" data-lang="c++">VkResult vkCreateXlibSurfaceKHR(
    VkInstance                                  instance,
    const VkXlibSurfaceCreateInfoKHR*           pCreateInfo,
    const VkAllocationCallbacks*                pAllocator,
    VkSurfaceKHR*                               pSurface);</code></pre>
</div>
</div>
</div>
<div class="sect3">
<h4 id="_parameters_147">Parameters</h4>
<div class="ulist">
<ul>
<li>
<p><code>instance</code> is the instance to associate the surface with.</p>
</li>
<li>
<p><code>pCreateInfo</code> is a pointer to an instance of the
<code>VkXlibSurfaceCreateInfoKHR</code> structure containing the parameters
affecting the creation of the surface object.</p>
</li>
<li>
<p><code>pAllocator</code> is the allocator used for host memory allocated for the
surface object when there is no more specific allocator available (see
<a href="vkspec.html#memory-allocation">Memory Allocation</a>).</p>
</li>
<li>
<p><code>pSurface</code> points to a <a href="#VkSurfaceKHR">VkSurfaceKHR</a> handle in which the
created surface object is returned.</p>
</li>
</ul>
</div>
</div>
<div class="sect3">
<h4 id="_description_147">Description</h4>
<div class="sidebarblock">
<div class="content">
<div class="title">Valid Usage (Implicit)</div>
<div class="ulist">
<ul>
<li>
<p><a id="VUID-vkCreateXlibSurfaceKHR-instance-parameter"></a> <code>instance</code> <strong class="purple">must</strong> be a valid <code>VkInstance</code> handle</p>
</li>
<li>
<p><a id="VUID-vkCreateXlibSurfaceKHR-pCreateInfo-parameter"></a> <code>pCreateInfo</code> <strong class="purple">must</strong> be a valid pointer to a valid <code>VkXlibSurfaceCreateInfoKHR</code> structure</p>
</li>
<li>
<p><a id="VUID-vkCreateXlibSurfaceKHR-pAllocator-parameter"></a> If <code>pAllocator</code> is not <code>NULL</code>, <code>pAllocator</code> <strong class="purple">must</strong> be a valid pointer to a valid <code>VkAllocationCallbacks</code> structure</p>
</li>
<li>
<p><a id="VUID-vkCreateXlibSurfaceKHR-pSurface-parameter"></a> <code>pSurface</code> <strong class="purple">must</strong> be a valid pointer to a <code>VkSurfaceKHR</code> handle</p>
</li>
</ul>
</div>
</div>
</div>
<div class="sidebarblock">
<div class="content">
<div class="title">Return Codes</div>
<div class="dlist">
<dl>
<dt class="hdlist1"><a href="#fundamentals-successcodes">Success</a></dt>
<dd>
<div class="ulist">
<ul>
<li>
<p><code>VK_SUCCESS</code></p>
</li>
</ul>
</div>
</dd>
<dt class="hdlist1"><a href="#fundamentals-errorcodes">Failure</a></dt>
<dd>
<div class="ulist">
<ul>
<li>
<p><code>VK_ERROR_OUT_OF_HOST_MEMORY</code></p>
</li>
<li>
<p><code>VK_ERROR_OUT_OF_DEVICE_MEMORY</code></p>
</li>
</ul>
</div>
</dd>
</dl>
</div>
</div>
</div>
</div>
<div class="sect3">
<h4 id="_see_also_147">See Also</h4>
<div class="paragraph">
<p><a href="#VkAllocationCallbacks">VkAllocationCallbacks</a>, <a href="#VkInstance">VkInstance</a>, <a href="#VkSurfaceKHR">VkSurfaceKHR</a>, <a href="#VkXlibSurfaceCreateInfoKHR">VkXlibSurfaceCreateInfoKHR</a></p>
</div>
</div>
<div class="sect3">
<h4 id="_document_notes_147">Document Notes</h4>
<div class="paragraph">
<p>For more information, see the Vulkan Specification at URL</p>
</div>
<div class="paragraph">
<p><a href="https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#vkCreateXlibSurfaceKHR" class="bare">https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#vkCreateXlibSurfaceKHR</a></p>
</div>
<div class="paragraph">
<p>This page is extracted from the Vulkan Specification.
Fixes and changes should be made to the Specification, not directly.</p>
</div>
<div style="page-break-after: always;"></div>
</div>
</div>
<div class="sect2">
<h3 id="_vkdebugmarkersetobjectnameext3">vkDebugMarkerSetObjectNameEXT(3)</h3>
<div class="sect3">
<h4 id="_name_148">Name</h4>
<div class="paragraph">
<p>vkDebugMarkerSetObjectNameEXT - Give a user-friendly name to an object</p>
</div>
</div>
<div class="sect3">
<h4 id="_c_specification_148">C Specification</h4>
<div class="paragraph">
<p>An object can be given a user-friendly name by calling:</p>
</div>
<div id="vkDebugMarkerSetObjectNameEXT" class="listingblock">
<div class="content">
<pre class="highlight"><code class="language-c++" data-lang="c++">VkResult vkDebugMarkerSetObjectNameEXT(
    VkDevice                                    device,
    const VkDebugMarkerObjectNameInfoEXT*       pNameInfo);</code></pre>
</div>
</div>
</div>
<div class="sect3">
<h4 id="_parameters_148">Parameters</h4>
<div class="ulist">
<ul>
<li>
<p><code>device</code> is the device that created the object.</p>
</li>
<li>
<p><code>pNameInfo</code> is a pointer to an instance of the
<a href="#VkDebugMarkerObjectNameInfoEXT">VkDebugMarkerObjectNameInfoEXT</a> structure specifying the parameters
of the name to set on the object.</p>
</li>
</ul>
</div>
</div>
<div class="sect3">
<h4 id="_description_148">Description</h4>
<div class="sidebarblock">
<div class="content">
<div class="title">Valid Usage (Implicit)</div>
<div class="ulist">
<ul>
<li>
<p><a id="VUID-vkDebugMarkerSetObjectNameEXT-device-parameter"></a> <code>device</code> <strong class="purple">must</strong> be a valid <code>VkDevice</code> handle</p>
</li>
<li>
<p><a id="VUID-vkDebugMarkerSetObjectNameEXT-pNameInfo-parameter"></a> <code>pNameInfo</code> <strong class="purple">must</strong> be a valid pointer to a valid <code>VkDebugMarkerObjectNameInfoEXT</code> structure</p>
</li>
</ul>
</div>
</div>
</div>
<div class="sidebarblock">
<div class="content">
<div class="title">Host Synchronization</div>
<div class="ulist">
<ul>
<li>
<p>Host access to <code>pNameInfo.object</code> <strong class="purple">must</strong> be externally synchronized</p>
</li>
</ul>
</div>
</div>
</div>
<div class="sidebarblock">
<div class="content">
<div class="title">Return Codes</div>
<div class="dlist">
<dl>
<dt class="hdlist1"><a href="#fundamentals-successcodes">Success</a></dt>
<dd>
<div class="ulist">
<ul>
<li>
<p><code>VK_SUCCESS</code></p>
</li>
</ul>
</div>
</dd>
<dt class="hdlist1"><a href="#fundamentals-errorcodes">Failure</a></dt>
<dd>
<div class="ulist">
<ul>
<li>
<p><code>VK_ERROR_OUT_OF_HOST_MEMORY</code></p>
</li>
<li>
<p><code>VK_ERROR_OUT_OF_DEVICE_MEMORY</code></p>
</li>
</ul>
</div>
</dd>
</dl>
</div>
</div>
</div>
</div>
<div class="sect3">
<h4 id="_see_also_148">See Also</h4>
<div class="paragraph">
<p><a href="#VkDebugMarkerObjectNameInfoEXT">VkDebugMarkerObjectNameInfoEXT</a>, <a href="#VkDevice">VkDevice</a></p>
</div>
</div>
<div class="sect3">
<h4 id="_document_notes_148">Document Notes</h4>
<div class="paragraph">
<p>For more information, see the Vulkan Specification at URL</p>
</div>
<div class="paragraph">
<p><a href="https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#vkDebugMarkerSetObjectNameEXT" class="bare">https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#vkDebugMarkerSetObjectNameEXT</a></p>
</div>
<div class="paragraph">
<p>This page is extracted from the Vulkan Specification.
Fixes and changes should be made to the Specification, not directly.</p>
</div>
<div style="page-break-after: always;"></div>
</div>
</div>
<div class="sect2">
<h3 id="_vkdebugmarkersetobjecttagext3">vkDebugMarkerSetObjectTagEXT(3)</h3>
<div class="sect3">
<h4 id="_name_149">Name</h4>
<div class="paragraph">
<p>vkDebugMarkerSetObjectTagEXT - Attach arbitrary data to an object</p>
</div>
</div>
<div class="sect3">
<h4 id="_c_specification_149">C Specification</h4>
<div class="paragraph">
<p>In addition to setting a name for an object, debugging and validation layers
may have uses for additional binary data on a per-object basis that has no
other place in the Vulkan API.
For example, a <code>VkShaderModule</code> could have additional debugging data
attached to it to aid in offline shader tracing.
To attach data to an object, call:</p>
</div>
<div id="vkDebugMarkerSetObjectTagEXT" class="listingblock">
<div class="content">
<pre class="highlight"><code class="language-c++" data-lang="c++">VkResult vkDebugMarkerSetObjectTagEXT(
    VkDevice                                    device,
    const VkDebugMarkerObjectTagInfoEXT*        pTagInfo);</code></pre>
</div>
</div>
</div>
<div class="sect3">
<h4 id="_parameters_149">Parameters</h4>
<div class="ulist">
<ul>
<li>
<p><code>device</code> is the device that created the object.</p>
</li>
<li>
<p><code>pTagInfo</code> is a pointer to an instance of the
<a href="#VkDebugMarkerObjectTagInfoEXT">VkDebugMarkerObjectTagInfoEXT</a> structure specifying the parameters
of the tag to attach to the object.</p>
</li>
</ul>
</div>
</div>
<div class="sect3">
<h4 id="_description_149">Description</h4>
<div class="sidebarblock">
<div class="content">
<div class="title">Valid Usage (Implicit)</div>
<div class="ulist">
<ul>
<li>
<p><a id="VUID-vkDebugMarkerSetObjectTagEXT-device-parameter"></a> <code>device</code> <strong class="purple">must</strong> be a valid <code>VkDevice</code> handle</p>
</li>
<li>
<p><a id="VUID-vkDebugMarkerSetObjectTagEXT-pTagInfo-parameter"></a> <code>pTagInfo</code> <strong class="purple">must</strong> be a valid pointer to a valid <code>VkDebugMarkerObjectTagInfoEXT</code> structure</p>
</li>
</ul>
</div>
</div>
</div>
<div class="sidebarblock">
<div class="content">
<div class="title">Host Synchronization</div>
<div class="ulist">
<ul>
<li>
<p>Host access to <code>pTagInfo.object</code> <strong class="purple">must</strong> be externally synchronized</p>
</li>
</ul>
</div>
</div>
</div>
<div class="sidebarblock">
<div class="content">
<div class="title">Return Codes</div>
<div class="dlist">
<dl>
<dt class="hdlist1"><a href="#fundamentals-successcodes">Success</a></dt>
<dd>
<div class="ulist">
<ul>
<li>
<p><code>VK_SUCCESS</code></p>
</li>
</ul>
</div>
</dd>
<dt class="hdlist1"><a href="#fundamentals-errorcodes">Failure</a></dt>
<dd>
<div class="ulist">
<ul>
<li>
<p><code>VK_ERROR_OUT_OF_HOST_MEMORY</code></p>
</li>
<li>
<p><code>VK_ERROR_OUT_OF_DEVICE_MEMORY</code></p>
</li>
</ul>
</div>
</dd>
</dl>
</div>
</div>
</div>
</div>
<div class="sect3">
<h4 id="_see_also_149">See Also</h4>
<div class="paragraph">
<p><a href="#VkDebugMarkerObjectTagInfoEXT">VkDebugMarkerObjectTagInfoEXT</a>, <a href="#VkDevice">VkDevice</a></p>
</div>
</div>
<div class="sect3">
<h4 id="_document_notes_149">Document Notes</h4>
<div class="paragraph">
<p>For more information, see the Vulkan Specification at URL</p>
</div>
<div class="paragraph">
<p><a href="https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#vkDebugMarkerSetObjectTagEXT" class="bare">https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#vkDebugMarkerSetObjectTagEXT</a></p>
</div>
<div class="paragraph">
<p>This page is extracted from the Vulkan Specification.
Fixes and changes should be made to the Specification, not directly.</p>
</div>
<div style="page-break-after: always;"></div>
</div>
</div>
<div class="sect2">
<h3 id="_vkdebugreportmessageext3">vkDebugReportMessageEXT(3)</h3>
<div class="sect3">
<h4 id="_name_150">Name</h4>
<div class="paragraph">
<p>vkDebugReportMessageEXT - Inject a message into a debug stream</p>
</div>
</div>
<div class="sect3">
<h4 id="_c_specification_150">C Specification</h4>
<div class="paragraph">
<p>To inject its own messages into the debug stream, call:</p>
</div>
<div id="vkDebugReportMessageEXT" class="listingblock">
<div class="content">
<pre class="highlight"><code class="language-c++" data-lang="c++">void vkDebugReportMessageEXT(
    VkInstance                                  instance,
    VkDebugReportFlagsEXT                       flags,
    VkDebugReportObjectTypeEXT                  objectType,
    uint64_t                                    object,
    size_t                                      location,
    int32_t                                     messageCode,
    const char*                                 pLayerPrefix,
    const char*                                 pMessage);</code></pre>
</div>
</div>
</div>
<div class="sect3">
<h4 id="_parameters_150">Parameters</h4>
<div class="ulist">
<ul>
<li>
<p><code>instance</code> is the debug stream&#8217;s <a href="#VkInstance">VkInstance</a>.</p>
</li>
<li>
<p><code>flags</code> specifies the <a href="#VkDebugReportFlagBitsEXT">VkDebugReportFlagBitsEXT</a> classification
of this event/message.</p>
</li>
<li>
<p><code>objectType</code> is a <a href="#VkDebugReportObjectTypeEXT">VkDebugReportObjectTypeEXT</a> specifying the
type of object being used or created at the time the event was
triggered.</p>
</li>
<li>
<p><code>object</code> this is the object where the issue was detected.
<code>object</code> <strong class="purple">can</strong> be <a href="#VK_NULL_HANDLE">VK_NULL_HANDLE</a> if there is no object
associated with the event.</p>
</li>
<li>
<p><code>location</code> is an application defined value.</p>
</li>
<li>
<p><code>messageCode</code> is an application defined value.</p>
</li>
<li>
<p><code>pLayerPrefix</code> is the abbreviation of the component making this
event/message.</p>
</li>
<li>
<p><code>pMessage</code> is a null-terminated string detailing the trigger
conditions.</p>
</li>
</ul>
</div>
</div>
<div class="sect3">
<h4 id="_description_150">Description</h4>
<div class="paragraph">
<p>The call will propagate through the layers and generate callback(s) as
indicated by the message&#8217;s flags.
The parameters are passed on to the callback in addition to the
<code>pUserData</code> value that was defined at the time the callback was
registered.</p>
</div>
<div class="sidebarblock">
<div class="content">
<div class="title">Valid Usage</div>
<div class="ulist">
<ul>
<li>
<p><a id="VUID-vkDebugReportMessageEXT-object-01241"></a>
<code>object</code> <strong class="purple">must</strong> be a Vulkan object or <a href="#VK_NULL_HANDLE">VK_NULL_HANDLE</a></p>
</li>
<li>
<p><a id="VUID-vkDebugReportMessageEXT-objectType-01498"></a>
If <code>objectType</code> is not <code>VK_DEBUG_REPORT_OBJECT_TYPE_UNKNOWN_EXT</code>
and <code>object</code> is not <a href="#VK_NULL_HANDLE">VK_NULL_HANDLE</a>, <code>object</code> <strong class="purple">must</strong> be a
Vulkan object of the corresponding type associated with <code>objectType</code>
as defined in <a href="vkspec.html#debug-report-object-types" class="bare">html/vkspec.html#debug-report-object-types</a>.</p>
</li>
</ul>
</div>
</div>
</div>
<div class="sidebarblock">
<div class="content">
<div class="title">Valid Usage (Implicit)</div>
<div class="ulist">
<ul>
<li>
<p><a id="VUID-vkDebugReportMessageEXT-instance-parameter"></a> <code>instance</code> <strong class="purple">must</strong> be a valid <code>VkInstance</code> handle</p>
</li>
<li>
<p><a id="VUID-vkDebugReportMessageEXT-flags-parameter"></a> <code>flags</code> <strong class="purple">must</strong> be a valid combination of <a href="#VkDebugReportFlagBitsEXT">VkDebugReportFlagBitsEXT</a> values</p>
</li>
<li>
<p><a id="VUID-vkDebugReportMessageEXT-flags-requiredbitmask"></a> <code>flags</code> <strong class="purple">must</strong> not be <code>0</code></p>
</li>
<li>
<p><a id="VUID-vkDebugReportMessageEXT-objectType-parameter"></a> <code>objectType</code> <strong class="purple">must</strong> be a valid <a href="#VkDebugReportObjectTypeEXT">VkDebugReportObjectTypeEXT</a> value</p>
</li>
<li>
<p><a id="VUID-vkDebugReportMessageEXT-pLayerPrefix-parameter"></a> <code>pLayerPrefix</code> <strong class="purple">must</strong> be a null-terminated UTF-8 string</p>
</li>
<li>
<p><a id="VUID-vkDebugReportMessageEXT-pMessage-parameter"></a> <code>pMessage</code> <strong class="purple">must</strong> be a null-terminated UTF-8 string</p>
</li>
</ul>
</div>
</div>
</div>
</div>
<div class="sect3">
<h4 id="_see_also_150">See Also</h4>
<div class="paragraph">
<p><a href="#VkDebugReportFlagsEXT">VkDebugReportFlagsEXT</a>, <a href="#VkDebugReportObjectTypeEXT">VkDebugReportObjectTypeEXT</a>, <a href="#VkInstance">VkInstance</a></p>
</div>
</div>
<div class="sect3">
<h4 id="_document_notes_150">Document Notes</h4>
<div class="paragraph">
<p>For more information, see the Vulkan Specification at URL</p>
</div>
<div class="paragraph">
<p><a href="https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#vkDebugReportMessageEXT" class="bare">https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#vkDebugReportMessageEXT</a></p>
</div>
<div class="paragraph">
<p>This page is extracted from the Vulkan Specification.
Fixes and changes should be made to the Specification, not directly.</p>
</div>
<div style="page-break-after: always;"></div>
</div>
</div>
<div class="sect2">
<h3 id="_vkdestroyaccelerationstructurenv3">vkDestroyAccelerationStructureNV(3)</h3>
<div class="sect3">
<h4 id="_name_151">Name</h4>
<div class="paragraph">
<p>vkDestroyAccelerationStructureNV - Destroy an acceleration structure object</p>
</div>
</div>
<div class="sect3">
<h4 id="_c_specification_151">C Specification</h4>
<div class="paragraph">
<p>To destroy an acceleration structure, call:</p>
</div>
<div id="vkDestroyAccelerationStructureNV" class="listingblock">
<div class="content">
<pre class="highlight"><code class="language-c++" data-lang="c++">void vkDestroyAccelerationStructureNV(
    VkDevice                                    device,
    VkAccelerationStructureNV                   accelerationStructure,
    const VkAllocationCallbacks*                pAllocator);</code></pre>
</div>
</div>
</div>
<div class="sect3">
<h4 id="_parameters_151">Parameters</h4>
<div class="ulist">
<ul>
<li>
<p><code>device</code> is the logical device that destroys the buffer.</p>
</li>
<li>
<p><code>accelerationStructure</code> is the acceleration structure to destroy.</p>
</li>
<li>
<p><code>pAllocator</code> controls host memory allocation as described in the
<a href="vkspec.html#memory-allocation">Memory Allocation</a> chapter.</p>
</li>
</ul>
</div>
</div>
<div class="sect3">
<h4 id="_description_151">Description</h4>
<div class="sidebarblock">
<div class="content">
<div class="title">Valid Usage</div>
<div class="ulist">
<ul>
<li>
<p><a id="VUID-vkDestroyAccelerationStructureNV-accelerationStructure-02442"></a>
All submitted commands that refer to <code>accelerationStructure</code> <strong class="purple">must</strong>
have completed execution</p>
</li>
<li>
<p><a id="VUID-vkDestroyAccelerationStructureNV-accelerationStructure-02443"></a>
If <code>VkAllocationCallbacks</code> were provided when
<code>accelerationStructure</code> was created, a compatible set of callbacks
<strong class="purple">must</strong> be provided here</p>
</li>
<li>
<p><a id="VUID-vkDestroyAccelerationStructureNV-accelerationStructure-02444"></a>
If no <code>VkAllocationCallbacks</code> were provided when
<code>accelerationStructure</code> was created, <code>pAllocator</code> <strong class="purple">must</strong> be
<code>NULL</code></p>
</li>
</ul>
</div>
</div>
</div>
<div class="sidebarblock">
<div class="content">
<div class="title">Valid Usage (Implicit)</div>
<div class="ulist">
<ul>
<li>
<p><a id="VUID-vkDestroyAccelerationStructureNV-device-parameter"></a> <code>device</code> <strong class="purple">must</strong> be a valid <code>VkDevice</code> handle</p>
</li>
<li>
<p><a id="VUID-vkDestroyAccelerationStructureNV-accelerationStructure-parameter"></a> <code>accelerationStructure</code> <strong class="purple">must</strong> be a valid <code>VkAccelerationStructureNV</code> handle</p>
</li>
<li>
<p><a id="VUID-vkDestroyAccelerationStructureNV-pAllocator-parameter"></a> If <code>pAllocator</code> is not <code>NULL</code>, <code>pAllocator</code> <strong class="purple">must</strong> be a valid pointer to a valid <code>VkAllocationCallbacks</code> structure</p>
</li>
<li>
<p><a id="VUID-vkDestroyAccelerationStructureNV-accelerationStructure-parent"></a> <code>accelerationStructure</code> <strong class="purple">must</strong> have been created, allocated, or retrieved from <code>device</code></p>
</li>
</ul>
</div>
</div>
</div>
</div>
<div class="sect3">
<h4 id="_see_also_151">See Also</h4>
<div class="paragraph">
<p><a href="#VkAccelerationStructureNV">VkAccelerationStructureNV</a>, <a href="#VkAllocationCallbacks">VkAllocationCallbacks</a>, <a href="#VkDevice">VkDevice</a></p>
</div>
</div>
<div class="sect3">
<h4 id="_document_notes_151">Document Notes</h4>
<div class="paragraph">
<p>For more information, see the Vulkan Specification at URL</p>
</div>
<div class="paragraph">
<p><a href="https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#vkDestroyAccelerationStructureNV" class="bare">https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#vkDestroyAccelerationStructureNV</a></p>
</div>
<div class="paragraph">
<p>This page is extracted from the Vulkan Specification.
Fixes and changes should be made to the Specification, not directly.</p>
</div>
<div style="page-break-after: always;"></div>
</div>
</div>
<div class="sect2">
<h3 id="_vkdestroybuffer3">vkDestroyBuffer(3)</h3>
<div class="sect3">
<h4 id="_name_152">Name</h4>
<div class="paragraph">
<p>vkDestroyBuffer - Destroy a buffer object</p>
</div>
</div>
<div class="sect3">
<h4 id="_c_specification_152">C Specification</h4>
<div class="paragraph">
<p>To destroy a buffer, call:</p>
</div>
<div id="vkDestroyBuffer" class="listingblock">
<div class="content">
<pre class="highlight"><code class="language-c++" data-lang="c++">void vkDestroyBuffer(
    VkDevice                                    device,
    VkBuffer                                    buffer,
    const VkAllocationCallbacks*                pAllocator);</code></pre>
</div>
</div>
</div>
<div class="sect3">
<h4 id="_parameters_152">Parameters</h4>
<div class="ulist">
<ul>
<li>
<p><code>device</code> is the logical device that destroys the buffer.</p>
</li>
<li>
<p><code>buffer</code> is the buffer to destroy.</p>
</li>
<li>
<p><code>pAllocator</code> controls host memory allocation as described in the
<a href="vkspec.html#memory-allocation">Memory Allocation</a> chapter.</p>
</li>
</ul>
</div>
</div>
<div class="sect3">
<h4 id="_description_152">Description</h4>
<div class="sidebarblock">
<div class="content">
<div class="title">Valid Usage</div>
<div class="ulist">
<ul>
<li>
<p><a id="VUID-vkDestroyBuffer-buffer-00922"></a>
All submitted commands that refer to <code>buffer</code>, either directly or
via a <code>VkBufferView</code>, <strong class="purple">must</strong> have completed execution</p>
</li>
<li>
<p><a id="VUID-vkDestroyBuffer-buffer-00923"></a>
If <code>VkAllocationCallbacks</code> were provided when <code>buffer</code> was
created, a compatible set of callbacks <strong class="purple">must</strong> be provided here</p>
</li>
<li>
<p><a id="VUID-vkDestroyBuffer-buffer-00924"></a>
If no <code>VkAllocationCallbacks</code> were provided when <code>buffer</code> was
created, <code>pAllocator</code> <strong class="purple">must</strong> be <code>NULL</code></p>
</li>
</ul>
</div>
</div>
</div>
<div class="sidebarblock">
<div class="content">
<div class="title">Valid Usage (Implicit)</div>
<div class="ulist">
<ul>
<li>
<p><a id="VUID-vkDestroyBuffer-device-parameter"></a> <code>device</code> <strong class="purple">must</strong> be a valid <code>VkDevice</code> handle</p>
</li>
<li>
<p><a id="VUID-vkDestroyBuffer-buffer-parameter"></a> If <code>buffer</code> is not <a href="#VK_NULL_HANDLE">VK_NULL_HANDLE</a>, <code>buffer</code> <strong class="purple">must</strong> be a valid <code>VkBuffer</code> handle</p>
</li>
<li>
<p><a id="VUID-vkDestroyBuffer-pAllocator-parameter"></a> If <code>pAllocator</code> is not <code>NULL</code>, <code>pAllocator</code> <strong class="purple">must</strong> be a valid pointer to a valid <code>VkAllocationCallbacks</code> structure</p>
</li>
<li>
<p><a id="VUID-vkDestroyBuffer-buffer-parent"></a> If <code>buffer</code> is a valid handle, it <strong class="purple">must</strong> have been created, allocated, or retrieved from <code>device</code></p>
</li>
</ul>
</div>
</div>
</div>
<div class="sidebarblock">
<div class="content">
<div class="title">Host Synchronization</div>
<div class="ulist">
<ul>
<li>
<p>Host access to <code>buffer</code> <strong class="purple">must</strong> be externally synchronized</p>
</li>
</ul>
</div>
</div>
</div>
</div>
<div class="sect3">
<h4 id="_see_also_152">See Also</h4>
<div class="paragraph">
<p><a href="#VkAllocationCallbacks">VkAllocationCallbacks</a>, <a href="#VkBuffer">VkBuffer</a>, <a href="#VkDevice">VkDevice</a></p>
</div>
</div>
<div class="sect3">
<h4 id="_document_notes_152">Document Notes</h4>
<div class="paragraph">
<p>For more information, see the Vulkan Specification at URL</p>
</div>
<div class="paragraph">
<p><a href="https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#vkDestroyBuffer" class="bare">https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#vkDestroyBuffer</a></p>
</div>
<div class="paragraph">
<p>This page is extracted from the Vulkan Specification.
Fixes and changes should be made to the Specification, not directly.</p>
</div>
<div style="page-break-after: always;"></div>
</div>
</div>
<div class="sect2">
<h3 id="_vkdestroybufferview3">vkDestroyBufferView(3)</h3>
<div class="sect3">
<h4 id="_name_153">Name</h4>
<div class="paragraph">
<p>vkDestroyBufferView - Destroy a buffer view object</p>
</div>
</div>
<div class="sect3">
<h4 id="_c_specification_153">C Specification</h4>
<div class="paragraph">
<p>To destroy a buffer view, call:</p>
</div>
<div id="vkDestroyBufferView" class="listingblock">
<div class="content">
<pre class="highlight"><code class="language-c++" data-lang="c++">void vkDestroyBufferView(
    VkDevice                                    device,
    VkBufferView                                bufferView,
    const VkAllocationCallbacks*                pAllocator);</code></pre>
</div>
</div>
</div>
<div class="sect3">
<h4 id="_parameters_153">Parameters</h4>
<div class="ulist">
<ul>
<li>
<p><code>device</code> is the logical device that destroys the buffer view.</p>
</li>
<li>
<p><code>bufferView</code> is the buffer view to destroy.</p>
</li>
<li>
<p><code>pAllocator</code> controls host memory allocation as described in the
<a href="vkspec.html#memory-allocation">Memory Allocation</a> chapter.</p>
</li>
</ul>
</div>
</div>
<div class="sect3">
<h4 id="_description_153">Description</h4>
<div class="sidebarblock">
<div class="content">
<div class="title">Valid Usage</div>
<div class="ulist">
<ul>
<li>
<p><a id="VUID-vkDestroyBufferView-bufferView-00936"></a>
All submitted commands that refer to <code>bufferView</code> <strong class="purple">must</strong> have
completed execution</p>
</li>
<li>
<p><a id="VUID-vkDestroyBufferView-bufferView-00937"></a>
If <code>VkAllocationCallbacks</code> were provided when <code>bufferView</code> was
created, a compatible set of callbacks <strong class="purple">must</strong> be provided here</p>
</li>
<li>
<p><a id="VUID-vkDestroyBufferView-bufferView-00938"></a>
If no <code>VkAllocationCallbacks</code> were provided when <code>bufferView</code>
was created, <code>pAllocator</code> <strong class="purple">must</strong> be <code>NULL</code></p>
</li>
</ul>
</div>
</div>
</div>
<div class="sidebarblock">
<div class="content">
<div class="title">Valid Usage (Implicit)</div>
<div class="ulist">
<ul>
<li>
<p><a id="VUID-vkDestroyBufferView-device-parameter"></a> <code>device</code> <strong class="purple">must</strong> be a valid <code>VkDevice</code> handle</p>
</li>
<li>
<p><a id="VUID-vkDestroyBufferView-bufferView-parameter"></a> If <code>bufferView</code> is not <a href="#VK_NULL_HANDLE">VK_NULL_HANDLE</a>, <code>bufferView</code> <strong class="purple">must</strong> be a valid <code>VkBufferView</code> handle</p>
</li>
<li>
<p><a id="VUID-vkDestroyBufferView-pAllocator-parameter"></a> If <code>pAllocator</code> is not <code>NULL</code>, <code>pAllocator</code> <strong class="purple">must</strong> be a valid pointer to a valid <code>VkAllocationCallbacks</code> structure</p>
</li>
<li>
<p><a id="VUID-vkDestroyBufferView-bufferView-parent"></a> If <code>bufferView</code> is a valid handle, it <strong class="purple">must</strong> have been created, allocated, or retrieved from <code>device</code></p>
</li>
</ul>
</div>
</div>
</div>
<div class="sidebarblock">
<div class="content">
<div class="title">Host Synchronization</div>
<div class="ulist">
<ul>
<li>
<p>Host access to <code>bufferView</code> <strong class="purple">must</strong> be externally synchronized</p>
</li>
</ul>
</div>
</div>
</div>
</div>
<div class="sect3">
<h4 id="_see_also_153">See Also</h4>
<div class="paragraph">
<p><a href="#VkAllocationCallbacks">VkAllocationCallbacks</a>, <a href="#VkBufferView">VkBufferView</a>, <a href="#VkDevice">VkDevice</a></p>
</div>
</div>
<div class="sect3">
<h4 id="_document_notes_153">Document Notes</h4>
<div class="paragraph">
<p>For more information, see the Vulkan Specification at URL</p>
</div>
<div class="paragraph">
<p><a href="https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#vkDestroyBufferView" class="bare">https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#vkDestroyBufferView</a></p>
</div>
<div class="paragraph">
<p>This page is extracted from the Vulkan Specification.
Fixes and changes should be made to the Specification, not directly.</p>
</div>
<div style="page-break-after: always;"></div>
</div>
</div>
<div class="sect2">
<h3 id="_vkdestroycommandpool3">vkDestroyCommandPool(3)</h3>
<div class="sect3">
<h4 id="_name_154">Name</h4>
<div class="paragraph">
<p>vkDestroyCommandPool - Destroy a command pool object</p>
</div>
</div>
<div class="sect3">
<h4 id="_c_specification_154">C Specification</h4>
<div class="paragraph">
<p>To destroy a command pool, call:</p>
</div>
<div id="vkDestroyCommandPool" class="listingblock">
<div class="content">
<pre class="highlight"><code class="language-c++" data-lang="c++">void vkDestroyCommandPool(
    VkDevice                                    device,
    VkCommandPool                               commandPool,
    const VkAllocationCallbacks*                pAllocator);</code></pre>
</div>
</div>
</div>
<div class="sect3">
<h4 id="_parameters_154">Parameters</h4>
<div class="ulist">
<ul>
<li>
<p><code>device</code> is the logical device that destroys the command pool.</p>
</li>
<li>
<p><code>commandPool</code> is the handle of the command pool to destroy.</p>
</li>
<li>
<p><code>pAllocator</code> controls host memory allocation as described in the
<a href="vkspec.html#memory-allocation">Memory Allocation</a> chapter.</p>
</li>
</ul>
</div>
</div>
<div class="sect3">
<h4 id="_description_154">Description</h4>
<div class="paragraph">
<p>When a pool is destroyed, all command buffers allocated from the pool are
<a href="vkspec.html#vkFreeCommandBuffers">freed</a>.</p>
</div>
<div class="paragraph">
<p>Any primary command buffer allocated from another <a href="#VkCommandPool">VkCommandPool</a> that
is in the <a href="vkspec.html#commandbuffers-lifecycle">recording or executable state</a> and
has a secondary command buffer allocated from <code>commandPool</code> recorded
into it, becomes <a href="vkspec.html#commandbuffers-lifecycle">invalid</a>.</p>
</div>
<div class="sidebarblock">
<div class="content">
<div class="title">Valid Usage</div>
<div class="ulist">
<ul>
<li>
<p><a id="VUID-vkDestroyCommandPool-commandPool-00041"></a>
All <code>VkCommandBuffer</code> objects allocated from <code>commandPool</code> <strong class="purple">must</strong>
not be in the <a href="vkspec.html#commandbuffers-lifecycle">pending state</a>.</p>
</li>
<li>
<p><a id="VUID-vkDestroyCommandPool-commandPool-00042"></a>
If <code>VkAllocationCallbacks</code> were provided when <code>commandPool</code> was
created, a compatible set of callbacks <strong class="purple">must</strong> be provided here</p>
</li>
<li>
<p><a id="VUID-vkDestroyCommandPool-commandPool-00043"></a>
If no <code>VkAllocationCallbacks</code> were provided when <code>commandPool</code>
was created, <code>pAllocator</code> <strong class="purple">must</strong> be <code>NULL</code></p>
</li>
</ul>
</div>
</div>
</div>
<div class="sidebarblock">
<div class="content">
<div class="title">Valid Usage (Implicit)</div>
<div class="ulist">
<ul>
<li>
<p><a id="VUID-vkDestroyCommandPool-device-parameter"></a> <code>device</code> <strong class="purple">must</strong> be a valid <code>VkDevice</code> handle</p>
</li>
<li>
<p><a id="VUID-vkDestroyCommandPool-commandPool-parameter"></a> If <code>commandPool</code> is not <a href="#VK_NULL_HANDLE">VK_NULL_HANDLE</a>, <code>commandPool</code> <strong class="purple">must</strong> be a valid <code>VkCommandPool</code> handle</p>
</li>
<li>
<p><a id="VUID-vkDestroyCommandPool-pAllocator-parameter"></a> If <code>pAllocator</code> is not <code>NULL</code>, <code>pAllocator</code> <strong class="purple">must</strong> be a valid pointer to a valid <code>VkAllocationCallbacks</code> structure</p>
</li>
<li>
<p><a id="VUID-vkDestroyCommandPool-commandPool-parent"></a> If <code>commandPool</code> is a valid handle, it <strong class="purple">must</strong> have been created, allocated, or retrieved from <code>device</code></p>
</li>
</ul>
</div>
</div>
</div>
<div class="sidebarblock">
<div class="content">
<div class="title">Host Synchronization</div>
<div class="ulist">
<ul>
<li>
<p>Host access to <code>commandPool</code> <strong class="purple">must</strong> be externally synchronized</p>
</li>
</ul>
</div>
</div>
</div>
</div>
<div class="sect3">
<h4 id="_see_also_154">See Also</h4>
<div class="paragraph">
<p><a href="#VkAllocationCallbacks">VkAllocationCallbacks</a>, <a href="#VkCommandPool">VkCommandPool</a>, <a href="#VkDevice">VkDevice</a></p>
</div>
</div>
<div class="sect3">
<h4 id="_document_notes_154">Document Notes</h4>
<div class="paragraph">
<p>For more information, see the Vulkan Specification at URL</p>
</div>
<div class="paragraph">
<p><a href="https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#vkDestroyCommandPool" class="bare">https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#vkDestroyCommandPool</a></p>
</div>
<div class="paragraph">
<p>This page is extracted from the Vulkan Specification.
Fixes and changes should be made to the Specification, not directly.</p>
</div>
<div style="page-break-after: always;"></div>
</div>
</div>
<div class="sect2">
<h3 id="_vkdestroydebugreportcallbackext3">vkDestroyDebugReportCallbackEXT(3)</h3>
<div class="sect3">
<h4 id="_name_155">Name</h4>
<div class="paragraph">
<p>vkDestroyDebugReportCallbackEXT - Destroy a debug report callback object</p>
</div>
</div>
<div class="sect3">
<h4 id="_c_specification_155">C Specification</h4>
<div class="paragraph">
<p>To destroy a <code>VkDebugReportCallbackEXT</code> object, call:</p>
</div>
<div id="vkDestroyDebugReportCallbackEXT" class="listingblock">
<div class="content">
<pre class="highlight"><code class="language-c++" data-lang="c++">void vkDestroyDebugReportCallbackEXT(
    VkInstance                                  instance,
    VkDebugReportCallbackEXT                    callback,
    const VkAllocationCallbacks*                pAllocator);</code></pre>
</div>
</div>
</div>
<div class="sect3">
<h4 id="_parameters_155">Parameters</h4>
<div class="ulist">
<ul>
<li>
<p><code>instance</code> the instance where the callback was created.</p>
</li>
<li>
<p><code>callback</code> the <a href="#VkDebugReportCallbackEXT">VkDebugReportCallbackEXT</a> object to destroy.
<code>callback</code> is an externally synchronized object and <strong class="purple">must</strong> not be
used on more than one thread at a time.
This means that <code>vkDestroyDebugReportCallbackEXT</code> <strong class="purple">must</strong> not be
called when a callback is active.</p>
</li>
<li>
<p><code>pAllocator</code> controls host memory allocation as described in the
<a href="vkspec.html#memory-allocation">Memory Allocation</a> chapter.</p>
</li>
</ul>
</div>
</div>
<div class="sect3">
<h4 id="_description_155">Description</h4>
<div class="sidebarblock">
<div class="content">
<div class="title">Valid Usage</div>
<div class="ulist">
<ul>
<li>
<p><a id="VUID-vkDestroyDebugReportCallbackEXT-instance-01242"></a>
If <code>VkAllocationCallbacks</code> were provided when <code>callback</code> was
created, a compatible set of callbacks <strong class="purple">must</strong> be provided here</p>
</li>
<li>
<p><a id="VUID-vkDestroyDebugReportCallbackEXT-instance-01243"></a>
If no <code>VkAllocationCallbacks</code> were provided when <code>callback</code> was
created, <code>pAllocator</code> <strong class="purple">must</strong> be <code>NULL</code></p>
</li>
</ul>
</div>
</div>
</div>
<div class="sidebarblock">
<div class="content">
<div class="title">Valid Usage (Implicit)</div>
<div class="ulist">
<ul>
<li>
<p><a id="VUID-vkDestroyDebugReportCallbackEXT-instance-parameter"></a> <code>instance</code> <strong class="purple">must</strong> be a valid <code>VkInstance</code> handle</p>
</li>
<li>
<p><a id="VUID-vkDestroyDebugReportCallbackEXT-callback-parameter"></a> <code>callback</code> <strong class="purple">must</strong> be a valid <code>VkDebugReportCallbackEXT</code> handle</p>
</li>
<li>
<p><a id="VUID-vkDestroyDebugReportCallbackEXT-pAllocator-parameter"></a> If <code>pAllocator</code> is not <code>NULL</code>, <code>pAllocator</code> <strong class="purple">must</strong> be a valid pointer to a valid <code>VkAllocationCallbacks</code> structure</p>
</li>
<li>
<p><a id="VUID-vkDestroyDebugReportCallbackEXT-callback-parent"></a> <code>callback</code> <strong class="purple">must</strong> have been created, allocated, or retrieved from <code>instance</code></p>
</li>
</ul>
</div>
</div>
</div>
<div class="sidebarblock">
<div class="content">
<div class="title">Host Synchronization</div>
<div class="ulist">
<ul>
<li>
<p>Host access to <code>callback</code> <strong class="purple">must</strong> be externally synchronized</p>
</li>
</ul>
</div>
</div>
</div>
</div>
<div class="sect3">
<h4 id="_see_also_155">See Also</h4>
<div class="paragraph">
<p><a href="#VkAllocationCallbacks">VkAllocationCallbacks</a>, <a href="#VkDebugReportCallbackEXT">VkDebugReportCallbackEXT</a>, <a href="#VkInstance">VkInstance</a></p>
</div>
</div>
<div class="sect3">
<h4 id="_document_notes_155">Document Notes</h4>
<div class="paragraph">
<p>For more information, see the Vulkan Specification at URL</p>
</div>
<div class="paragraph">
<p><a href="https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#vkDestroyDebugReportCallbackEXT" class="bare">https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#vkDestroyDebugReportCallbackEXT</a></p>
</div>
<div class="paragraph">
<p>This page is extracted from the Vulkan Specification.
Fixes and changes should be made to the Specification, not directly.</p>
</div>
<div style="page-break-after: always;"></div>
</div>
</div>
<div class="sect2">
<h3 id="_vkdestroydebugutilsmessengerext3">vkDestroyDebugUtilsMessengerEXT(3)</h3>
<div class="sect3">
<h4 id="_name_156">Name</h4>
<div class="paragraph">
<p>vkDestroyDebugUtilsMessengerEXT - Destroy a debug messenger object</p>
</div>
</div>
<div class="sect3">
<h4 id="_c_specification_156">C Specification</h4>
<div class="paragraph">
<p>To destroy a <code>VkDebugUtilsMessengerEXT</code> object, call:</p>
</div>
<div id="vkDestroyDebugUtilsMessengerEXT" class="listingblock">
<div class="content">
<pre class="highlight"><code class="language-c++" data-lang="c++">void vkDestroyDebugUtilsMessengerEXT(
    VkInstance                                  instance,
    VkDebugUtilsMessengerEXT                    messenger,
    const VkAllocationCallbacks*                pAllocator);</code></pre>
</div>
</div>
</div>
<div class="sect3">
<h4 id="_parameters_156">Parameters</h4>
<div class="ulist">
<ul>
<li>
<p><code>instance</code> the instance where the callback was created.</p>
</li>
<li>
<p><code>messenger</code> the <a href="#VkDebugUtilsMessengerEXT">VkDebugUtilsMessengerEXT</a> object to destroy.
<code>messenger</code> is an externally synchronized object and <strong class="purple">must</strong> not be
used on more than one thread at a time.
This means that <code>vkDestroyDebugUtilsMessengerEXT</code> <strong class="purple">must</strong> not be
called when a callback is active.</p>
</li>
<li>
<p><code>pAllocator</code> controls host memory allocation as described in the
<a href="vkspec.html#memory-allocation">Memory Allocation</a> chapter.</p>
</li>
</ul>
</div>
</div>
<div class="sect3">
<h4 id="_description_156">Description</h4>
<div class="sidebarblock">
<div class="content">
<div class="title">Valid Usage</div>
<div class="ulist">
<ul>
<li>
<p><a id="VUID-vkDestroyDebugUtilsMessengerEXT-messenger-01915"></a>
If <code>VkAllocationCallbacks</code> were provided when <code>messenger</code> was
created, a compatible set of callbacks <strong class="purple">must</strong> be provided here</p>
</li>
<li>
<p><a id="VUID-vkDestroyDebugUtilsMessengerEXT-messenger-01916"></a>
If no <code>VkAllocationCallbacks</code> were provided when <code>messenger</code> was
created, <code>pAllocator</code> <strong class="purple">must</strong> be <code>NULL</code></p>
</li>
</ul>
</div>
</div>
</div>
<div class="sidebarblock">
<div class="content">
<div class="title">Valid Usage (Implicit)</div>
<div class="ulist">
<ul>
<li>
<p><a id="VUID-vkDestroyDebugUtilsMessengerEXT-instance-parameter"></a> <code>instance</code> <strong class="purple">must</strong> be a valid <code>VkInstance</code> handle</p>
</li>
<li>
<p><a id="VUID-vkDestroyDebugUtilsMessengerEXT-messenger-parameter"></a> <code>messenger</code> <strong class="purple">must</strong> be a valid <code>VkDebugUtilsMessengerEXT</code> handle</p>
</li>
<li>
<p><a id="VUID-vkDestroyDebugUtilsMessengerEXT-pAllocator-parameter"></a> If <code>pAllocator</code> is not <code>NULL</code>, <code>pAllocator</code> <strong class="purple">must</strong> be a valid pointer to a valid <code>VkAllocationCallbacks</code> structure</p>
</li>
<li>
<p><a id="VUID-vkDestroyDebugUtilsMessengerEXT-messenger-parent"></a> <code>messenger</code> <strong class="purple">must</strong> have been created, allocated, or retrieved from <code>instance</code></p>
</li>
</ul>
</div>
</div>
</div>
<div class="sidebarblock">
<div class="content">
<div class="title">Host Synchronization</div>
<div class="ulist">
<ul>
<li>
<p>Host access to <code>messenger</code> <strong class="purple">must</strong> be externally synchronized</p>
</li>
</ul>
</div>
</div>
</div>
<div class="paragraph">
<p>The application <strong class="purple">must</strong> ensure that <a href="#vkDestroyDebugUtilsMessengerEXT">vkDestroyDebugUtilsMessengerEXT</a> is
not executed in parallel with any Vulkan command that is also called with
<code>instance</code> or child of <code>instance</code> as the dispatchable argument.</p>
</div>
</div>
<div class="sect3">
<h4 id="_see_also_156">See Also</h4>
<div class="paragraph">
<p><a href="#VkAllocationCallbacks">VkAllocationCallbacks</a>, <a href="#VkDebugUtilsMessengerEXT">VkDebugUtilsMessengerEXT</a>, <a href="#VkInstance">VkInstance</a></p>
</div>
</div>
<div class="sect3">
<h4 id="_document_notes_156">Document Notes</h4>
<div class="paragraph">
<p>For more information, see the Vulkan Specification at URL</p>
</div>
<div class="paragraph">
<p><a href="https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#vkDestroyDebugUtilsMessengerEXT" class="bare">https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#vkDestroyDebugUtilsMessengerEXT</a></p>
</div>
<div class="paragraph">
<p>This page is extracted from the Vulkan Specification.
Fixes and changes should be made to the Specification, not directly.</p>
</div>
<div style="page-break-after: always;"></div>
</div>
</div>
<div class="sect2">
<h3 id="_vkdestroydescriptorpool3">vkDestroyDescriptorPool(3)</h3>
<div class="sect3">
<h4 id="_name_157">Name</h4>
<div class="paragraph">
<p>vkDestroyDescriptorPool - Destroy a descriptor pool object</p>
</div>
</div>
<div class="sect3">
<h4 id="_c_specification_157">C Specification</h4>
<div class="paragraph">
<p>To destroy a descriptor pool, call:</p>
</div>
<div id="vkDestroyDescriptorPool" class="listingblock">
<div class="content">
<pre class="highlight"><code class="language-c++" data-lang="c++">void vkDestroyDescriptorPool(
    VkDevice                                    device,
    VkDescriptorPool                            descriptorPool,
    const VkAllocationCallbacks*                pAllocator);</code></pre>
</div>
</div>
</div>
<div class="sect3">
<h4 id="_parameters_157">Parameters</h4>
<div class="ulist">
<ul>
<li>
<p><code>device</code> is the logical device that destroys the descriptor pool.</p>
</li>
<li>
<p><code>descriptorPool</code> is the descriptor pool to destroy.</p>
</li>
<li>
<p><code>pAllocator</code> controls host memory allocation as described in the
<a href="vkspec.html#memory-allocation">Memory Allocation</a> chapter.</p>
</li>
</ul>
</div>
</div>
<div class="sect3">
<h4 id="_description_157">Description</h4>
<div class="paragraph">
<p>When a pool is destroyed, all descriptor sets allocated from the pool are
implicitly freed and become invalid.
Descriptor sets allocated from a given pool do not need to be freed before
destroying that descriptor pool.</p>
</div>
<div class="sidebarblock">
<div class="content">
<div class="title">Valid Usage</div>
<div class="ulist">
<ul>
<li>
<p><a id="VUID-vkDestroyDescriptorPool-descriptorPool-00303"></a>
All submitted commands that refer to <code>descriptorPool</code> (via any
allocated descriptor sets) <strong class="purple">must</strong> have completed execution</p>
</li>
<li>
<p><a id="VUID-vkDestroyDescriptorPool-descriptorPool-00304"></a>
If <code>VkAllocationCallbacks</code> were provided when <code>descriptorPool</code>
was created, a compatible set of callbacks <strong class="purple">must</strong> be provided here</p>
</li>
<li>
<p><a id="VUID-vkDestroyDescriptorPool-descriptorPool-00305"></a>
If no <code>VkAllocationCallbacks</code> were provided when
<code>descriptorPool</code> was created, <code>pAllocator</code> <strong class="purple">must</strong> be <code>NULL</code></p>
</li>
</ul>
</div>
</div>
</div>
<div class="sidebarblock">
<div class="content">
<div class="title">Valid Usage (Implicit)</div>
<div class="ulist">
<ul>
<li>
<p><a id="VUID-vkDestroyDescriptorPool-device-parameter"></a> <code>device</code> <strong class="purple">must</strong> be a valid <code>VkDevice</code> handle</p>
</li>
<li>
<p><a id="VUID-vkDestroyDescriptorPool-descriptorPool-parameter"></a> If <code>descriptorPool</code> is not <a href="#VK_NULL_HANDLE">VK_NULL_HANDLE</a>, <code>descriptorPool</code> <strong class="purple">must</strong> be a valid <code>VkDescriptorPool</code> handle</p>
</li>
<li>
<p><a id="VUID-vkDestroyDescriptorPool-pAllocator-parameter"></a> If <code>pAllocator</code> is not <code>NULL</code>, <code>pAllocator</code> <strong class="purple">must</strong> be a valid pointer to a valid <code>VkAllocationCallbacks</code> structure</p>
</li>
<li>
<p><a id="VUID-vkDestroyDescriptorPool-descriptorPool-parent"></a> If <code>descriptorPool</code> is a valid handle, it <strong class="purple">must</strong> have been created, allocated, or retrieved from <code>device</code></p>
</li>
</ul>
</div>
</div>
</div>
<div class="sidebarblock">
<div class="content">
<div class="title">Host Synchronization</div>
<div class="ulist">
<ul>
<li>
<p>Host access to <code>descriptorPool</code> <strong class="purple">must</strong> be externally synchronized</p>
</li>
</ul>
</div>
</div>
</div>
</div>
<div class="sect3">
<h4 id="_see_also_157">See Also</h4>
<div class="paragraph">
<p><a href="#VkAllocationCallbacks">VkAllocationCallbacks</a>, <a href="#VkDescriptorPool">VkDescriptorPool</a>, <a href="#VkDevice">VkDevice</a></p>
</div>
</div>
<div class="sect3">
<h4 id="_document_notes_157">Document Notes</h4>
<div class="paragraph">
<p>For more information, see the Vulkan Specification at URL</p>
</div>
<div class="paragraph">
<p><a href="https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#vkDestroyDescriptorPool" class="bare">https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#vkDestroyDescriptorPool</a></p>
</div>
<div class="paragraph">
<p>This page is extracted from the Vulkan Specification.
Fixes and changes should be made to the Specification, not directly.</p>
</div>
<div style="page-break-after: always;"></div>
</div>
</div>
<div class="sect2">
<h3 id="_vkdestroydescriptorsetlayout3">vkDestroyDescriptorSetLayout(3)</h3>
<div class="sect3">
<h4 id="_name_158">Name</h4>
<div class="paragraph">
<p>vkDestroyDescriptorSetLayout - Destroy a descriptor set layout object</p>
</div>
</div>
<div class="sect3">
<h4 id="_c_specification_158">C Specification</h4>
<div class="paragraph">
<p>To destroy a descriptor set layout, call:</p>
</div>
<div id="vkDestroyDescriptorSetLayout" class="listingblock">
<div class="content">
<pre class="highlight"><code class="language-c++" data-lang="c++">void vkDestroyDescriptorSetLayout(
    VkDevice                                    device,
    VkDescriptorSetLayout                       descriptorSetLayout,
    const VkAllocationCallbacks*                pAllocator);</code></pre>
</div>
</div>
</div>
<div class="sect3">
<h4 id="_parameters_158">Parameters</h4>
<div class="ulist">
<ul>
<li>
<p><code>device</code> is the logical device that destroys the descriptor set
layout.</p>
</li>
<li>
<p><code>descriptorSetLayout</code> is the descriptor set layout to destroy.</p>
</li>
<li>
<p><code>pAllocator</code> controls host memory allocation as described in the
<a href="vkspec.html#memory-allocation">Memory Allocation</a> chapter.</p>
</li>
</ul>
</div>
</div>
<div class="sect3">
<h4 id="_description_158">Description</h4>
<div class="sidebarblock">
<div class="content">
<div class="title">Valid Usage</div>
<div class="ulist">
<ul>
<li>
<p><a id="VUID-vkDestroyDescriptorSetLayout-descriptorSetLayout-00284"></a>
If <code>VkAllocationCallbacks</code> were provided when
<code>descriptorSetLayout</code> was created, a compatible set of callbacks
<strong class="purple">must</strong> be provided here</p>
</li>
<li>
<p><a id="VUID-vkDestroyDescriptorSetLayout-descriptorSetLayout-00285"></a>
If no <code>VkAllocationCallbacks</code> were provided when
<code>descriptorSetLayout</code> was created, <code>pAllocator</code> <strong class="purple">must</strong> be <code>NULL</code></p>
</li>
</ul>
</div>
</div>
</div>
<div class="sidebarblock">
<div class="content">
<div class="title">Valid Usage (Implicit)</div>
<div class="ulist">
<ul>
<li>
<p><a id="VUID-vkDestroyDescriptorSetLayout-device-parameter"></a> <code>device</code> <strong class="purple">must</strong> be a valid <code>VkDevice</code> handle</p>
</li>
<li>
<p><a id="VUID-vkDestroyDescriptorSetLayout-descriptorSetLayout-parameter"></a> If <code>descriptorSetLayout</code> is not <a href="#VK_NULL_HANDLE">VK_NULL_HANDLE</a>, <code>descriptorSetLayout</code> <strong class="purple">must</strong> be a valid <code>VkDescriptorSetLayout</code> handle</p>
</li>
<li>
<p><a id="VUID-vkDestroyDescriptorSetLayout-pAllocator-parameter"></a> If <code>pAllocator</code> is not <code>NULL</code>, <code>pAllocator</code> <strong class="purple">must</strong> be a valid pointer to a valid <code>VkAllocationCallbacks</code> structure</p>
</li>
<li>
<p><a id="VUID-vkDestroyDescriptorSetLayout-descriptorSetLayout-parent"></a> If <code>descriptorSetLayout</code> is a valid handle, it <strong class="purple">must</strong> have been created, allocated, or retrieved from <code>device</code></p>
</li>
</ul>
</div>
</div>
</div>
<div class="sidebarblock">
<div class="content">
<div class="title">Host Synchronization</div>
<div class="ulist">
<ul>
<li>
<p>Host access to <code>descriptorSetLayout</code> <strong class="purple">must</strong> be externally synchronized</p>
</li>
</ul>
</div>
</div>
</div>
</div>
<div class="sect3">
<h4 id="_see_also_158">See Also</h4>
<div class="paragraph">
<p><a href="#VkAllocationCallbacks">VkAllocationCallbacks</a>, <a href="#VkDescriptorSetLayout">VkDescriptorSetLayout</a>, <a href="#VkDevice">VkDevice</a></p>
</div>
</div>
<div class="sect3">
<h4 id="_document_notes_158">Document Notes</h4>
<div class="paragraph">
<p>For more information, see the Vulkan Specification at URL</p>
</div>
<div class="paragraph">
<p><a href="https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#vkDestroyDescriptorSetLayout" class="bare">https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#vkDestroyDescriptorSetLayout</a></p>
</div>
<div class="paragraph">
<p>This page is extracted from the Vulkan Specification.
Fixes and changes should be made to the Specification, not directly.</p>
</div>
<div style="page-break-after: always;"></div>
</div>
</div>
<div class="sect2">
<h3 id="_vkdestroydescriptorupdatetemplate3">vkDestroyDescriptorUpdateTemplate(3)</h3>
<div class="sect3">
<h4 id="_name_159">Name</h4>
<div class="paragraph">
<p>vkDestroyDescriptorUpdateTemplate - Destroy a descriptor update template object</p>
</div>
</div>
<div class="sect3">
<h4 id="_c_specification_159">C Specification</h4>
<div class="paragraph">
<p>To destroy a descriptor update template, call:</p>
</div>
<div id="vkDestroyDescriptorUpdateTemplate" class="listingblock">
<div class="content">
<pre class="highlight"><code class="language-c++" data-lang="c++">void vkDestroyDescriptorUpdateTemplate(
    VkDevice                                    device,
    VkDescriptorUpdateTemplate                  descriptorUpdateTemplate,
    const VkAllocationCallbacks*                pAllocator);</code></pre>
</div>
</div>
<div class="paragraph">
<p>or the equivalent command</p>
</div>
<div id="vkDestroyDescriptorUpdateTemplateKHR" class="listingblock">
<div class="content">
<pre class="highlight"><code class="language-c++" data-lang="c++">void vkDestroyDescriptorUpdateTemplateKHR(
    VkDevice                                    device,
    VkDescriptorUpdateTemplate                  descriptorUpdateTemplate,
    const VkAllocationCallbacks*                pAllocator);</code></pre>
</div>
</div>
</div>
<div class="sect3">
<h4 id="_parameters_159">Parameters</h4>
<div class="ulist">
<ul>
<li>
<p><code>device</code> is the logical device that has been used to create the
descriptor update template</p>
</li>
<li>
<p><code>descriptorUpdateTemplate</code> is the descriptor update template to
destroy.</p>
</li>
<li>
<p><code>pAllocator</code> controls host memory allocation as described in the
<a href="vkspec.html#memory-allocation">Memory Allocation</a> chapter.</p>
</li>
</ul>
</div>
</div>
<div class="sect3">
<h4 id="_description_159">Description</h4>
<div class="sidebarblock">
<div class="content">
<div class="title">Valid Usage</div>
<div class="ulist">
<ul>
<li>
<p><a id="VUID-vkDestroyDescriptorUpdateTemplate-descriptorSetLayout-00356"></a>
If <code>VkAllocationCallbacks</code> were provided when
<code>descriptorSetLayout</code> was created, a compatible set of callbacks
<strong class="purple">must</strong> be provided here</p>
</li>
<li>
<p><a id="VUID-vkDestroyDescriptorUpdateTemplate-descriptorSetLayout-00357"></a>
If no <code>VkAllocationCallbacks</code> were provided when
<code>descriptorSetLayout</code> was created, <code>pAllocator</code> <strong class="purple">must</strong> be <code>NULL</code></p>
</li>
</ul>
</div>
</div>
</div>
<div class="sidebarblock">
<div class="content">
<div class="title">Valid Usage (Implicit)</div>
<div class="ulist">
<ul>
<li>
<p><a id="VUID-vkDestroyDescriptorUpdateTemplate-device-parameter"></a> <code>device</code> <strong class="purple">must</strong> be a valid <code>VkDevice</code> handle</p>
</li>
<li>
<p><a id="VUID-vkDestroyDescriptorUpdateTemplate-descriptorUpdateTemplate-parameter"></a> If <code>descriptorUpdateTemplate</code> is not <a href="#VK_NULL_HANDLE">VK_NULL_HANDLE</a>, <code>descriptorUpdateTemplate</code> <strong class="purple">must</strong> be a valid <code>VkDescriptorUpdateTemplate</code> handle</p>
</li>
<li>
<p><a id="VUID-vkDestroyDescriptorUpdateTemplate-pAllocator-parameter"></a> If <code>pAllocator</code> is not <code>NULL</code>, <code>pAllocator</code> <strong class="purple">must</strong> be a valid pointer to a valid <code>VkAllocationCallbacks</code> structure</p>
</li>
<li>
<p><a id="VUID-vkDestroyDescriptorUpdateTemplate-descriptorUpdateTemplate-parent"></a> If <code>descriptorUpdateTemplate</code> is a valid handle, it <strong class="purple">must</strong> have been created, allocated, or retrieved from <code>device</code></p>
</li>
</ul>
</div>
</div>
</div>
<div class="sidebarblock">
<div class="content">
<div class="title">Host Synchronization</div>
<div class="ulist">
<ul>
<li>
<p>Host access to <code>descriptorUpdateTemplate</code> <strong class="purple">must</strong> be externally synchronized</p>
</li>
</ul>
</div>
</div>
</div>
</div>
<div class="sect3">
<h4 id="_see_also_159">See Also</h4>
<div class="paragraph">
<p><a href="#VkAllocationCallbacks">VkAllocationCallbacks</a>, <a href="#VkDescriptorUpdateTemplate">VkDescriptorUpdateTemplate</a>, <a href="#VkDevice">VkDevice</a></p>
</div>
</div>
<div class="sect3">
<h4 id="_document_notes_159">Document Notes</h4>
<div class="paragraph">
<p>For more information, see the Vulkan Specification at URL</p>
</div>
<div class="paragraph">
<p><a href="https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#vkDestroyDescriptorUpdateTemplate" class="bare">https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#vkDestroyDescriptorUpdateTemplate</a></p>
</div>
<div class="paragraph">
<p>This page is extracted from the Vulkan Specification.
Fixes and changes should be made to the Specification, not directly.</p>
</div>
<div style="page-break-after: always;"></div>
</div>
</div>
<div class="sect2">
<h3 id="_vkdestroydevice3">vkDestroyDevice(3)</h3>
<div class="sect3">
<h4 id="_name_160">Name</h4>
<div class="paragraph">
<p>vkDestroyDevice - Destroy a logical device</p>
</div>
</div>
<div class="sect3">
<h4 id="_c_specification_160">C Specification</h4>
<div class="paragraph">
<p>To destroy a device, call:</p>
</div>
<div id="vkDestroyDevice" class="listingblock">
<div class="content">
<pre class="highlight"><code class="language-c++" data-lang="c++">void vkDestroyDevice(
    VkDevice                                    device,
    const VkAllocationCallbacks*                pAllocator);</code></pre>
</div>
</div>
</div>
<div class="sect3">
<h4 id="_parameters_160">Parameters</h4>
<div class="ulist">
<ul>
<li>
<p><code>device</code> is the logical device to destroy.</p>
</li>
<li>
<p><code>pAllocator</code> controls host memory allocation as described in the
<a href="vkspec.html#memory-allocation">Memory Allocation</a> chapter.</p>
</li>
</ul>
</div>
</div>
<div class="sect3">
<h4 id="_description_160">Description</h4>
<div class="paragraph">
<p>To ensure that no work is active on the device, <a href="#vkDeviceWaitIdle">vkDeviceWaitIdle</a> <strong class="purple">can</strong>
be used to gate the destruction of the device.
Prior to destroying a device, an application is responsible for
destroying/freeing any Vulkan objects that were created using that device as
the first parameter of the corresponding <code>vkCreate*</code> or
<code>vkAllocate*</code> command.</p>
</div>
<div class="admonitionblock note">
<table>
<tr>
<td class="icon">
<i class="fa icon-note" title="Note"></i>
</td>
<td class="content">
<div class="title">Note</div>
<div class="paragraph">
<p>The lifetime of each of these objects is bound by the lifetime of the
<code>VkDevice</code> object.
Therefore, to avoid resource leaks, it is critical that an application
explicitly free all of these resources prior to calling
<code>vkDestroyDevice</code>.</p>
</div>
</td>
</tr>
</table>
</div>
<div class="sidebarblock">
<div class="content">
<div class="title">Valid Usage</div>
<div class="ulist">
<ul>
<li>
<p><a id="VUID-vkDestroyDevice-device-00378"></a>
All child objects created on <code>device</code> <strong class="purple">must</strong> have been destroyed
prior to destroying <code>device</code></p>
</li>
<li>
<p><a id="VUID-vkDestroyDevice-device-00379"></a>
If <code>VkAllocationCallbacks</code> were provided when <code>device</code> was
created, a compatible set of callbacks <strong class="purple">must</strong> be provided here</p>
</li>
<li>
<p><a id="VUID-vkDestroyDevice-device-00380"></a>
If no <code>VkAllocationCallbacks</code> were provided when <code>device</code> was
created, <code>pAllocator</code> <strong class="purple">must</strong> be <code>NULL</code></p>
</li>
</ul>
</div>
</div>
</div>
<div class="sidebarblock">
<div class="content">
<div class="title">Valid Usage (Implicit)</div>
<div class="ulist">
<ul>
<li>
<p><a id="VUID-vkDestroyDevice-device-parameter"></a> If <code>device</code> is not <code>NULL</code>, <code>device</code> <strong class="purple">must</strong> be a valid <code>VkDevice</code> handle</p>
</li>
<li>
<p><a id="VUID-vkDestroyDevice-pAllocator-parameter"></a> If <code>pAllocator</code> is not <code>NULL</code>, <code>pAllocator</code> <strong class="purple">must</strong> be a valid pointer to a valid <code>VkAllocationCallbacks</code> structure</p>
</li>
</ul>
</div>
</div>
</div>
<div class="sidebarblock">
<div class="content">
<div class="title">Host Synchronization</div>
<div class="ulist">
<ul>
<li>
<p>Host access to <code>device</code> <strong class="purple">must</strong> be externally synchronized</p>
</li>
</ul>
</div>
</div>
</div>
</div>
<div class="sect3">
<h4 id="_see_also_160">See Also</h4>
<div class="paragraph">
<p><a href="#VkAllocationCallbacks">VkAllocationCallbacks</a>, <a href="#VkDevice">VkDevice</a></p>
</div>
</div>
<div class="sect3">
<h4 id="_document_notes_160">Document Notes</h4>
<div class="paragraph">
<p>For more information, see the Vulkan Specification at URL</p>
</div>
<div class="paragraph">
<p><a href="https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#vkDestroyDevice" class="bare">https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#vkDestroyDevice</a></p>
</div>
<div class="paragraph">
<p>This page is extracted from the Vulkan Specification.
Fixes and changes should be made to the Specification, not directly.</p>
</div>
<div style="page-break-after: always;"></div>
</div>
</div>
<div class="sect2">
<h3 id="_vkdestroyevent3">vkDestroyEvent(3)</h3>
<div class="sect3">
<h4 id="_name_161">Name</h4>
<div class="paragraph">
<p>vkDestroyEvent - Destroy an event object</p>
</div>
</div>
<div class="sect3">
<h4 id="_c_specification_161">C Specification</h4>
<div class="paragraph">
<p>To destroy an event, call:</p>
</div>
<div id="vkDestroyEvent" class="listingblock">
<div class="content">
<pre class="highlight"><code class="language-c++" data-lang="c++">void vkDestroyEvent(
    VkDevice                                    device,
    VkEvent                                     event,
    const VkAllocationCallbacks*                pAllocator);</code></pre>
</div>
</div>
</div>
<div class="sect3">
<h4 id="_parameters_161">Parameters</h4>
<div class="ulist">
<ul>
<li>
<p><code>device</code> is the logical device that destroys the event.</p>
</li>
<li>
<p><code>event</code> is the handle of the event to destroy.</p>
</li>
<li>
<p><code>pAllocator</code> controls host memory allocation as described in the
<a href="vkspec.html#memory-allocation">Memory Allocation</a> chapter.</p>
</li>
</ul>
</div>
</div>
<div class="sect3">
<h4 id="_description_161">Description</h4>
<div class="sidebarblock">
<div class="content">
<div class="title">Valid Usage</div>
<div class="ulist">
<ul>
<li>
<p><a id="VUID-vkDestroyEvent-event-01145"></a>
All submitted commands that refer to <code>event</code> <strong class="purple">must</strong> have completed
execution</p>
</li>
<li>
<p><a id="VUID-vkDestroyEvent-event-01146"></a>
If <code>VkAllocationCallbacks</code> were provided when <code>event</code> was
created, a compatible set of callbacks <strong class="purple">must</strong> be provided here</p>
</li>
<li>
<p><a id="VUID-vkDestroyEvent-event-01147"></a>
If no <code>VkAllocationCallbacks</code> were provided when <code>event</code> was
created, <code>pAllocator</code> <strong class="purple">must</strong> be <code>NULL</code></p>
</li>
</ul>
</div>
</div>
</div>
<div class="sidebarblock">
<div class="content">
<div class="title">Valid Usage (Implicit)</div>
<div class="ulist">
<ul>
<li>
<p><a id="VUID-vkDestroyEvent-device-parameter"></a> <code>device</code> <strong class="purple">must</strong> be a valid <code>VkDevice</code> handle</p>
</li>
<li>
<p><a id="VUID-vkDestroyEvent-event-parameter"></a> If <code>event</code> is not <a href="#VK_NULL_HANDLE">VK_NULL_HANDLE</a>, <code>event</code> <strong class="purple">must</strong> be a valid <code>VkEvent</code> handle</p>
</li>
<li>
<p><a id="VUID-vkDestroyEvent-pAllocator-parameter"></a> If <code>pAllocator</code> is not <code>NULL</code>, <code>pAllocator</code> <strong class="purple">must</strong> be a valid pointer to a valid <code>VkAllocationCallbacks</code> structure</p>
</li>
<li>
<p><a id="VUID-vkDestroyEvent-event-parent"></a> If <code>event</code> is a valid handle, it <strong class="purple">must</strong> have been created, allocated, or retrieved from <code>device</code></p>
</li>
</ul>
</div>
</div>
</div>
<div class="sidebarblock">
<div class="content">
<div class="title">Host Synchronization</div>
<div class="ulist">
<ul>
<li>
<p>Host access to <code>event</code> <strong class="purple">must</strong> be externally synchronized</p>
</li>
</ul>
</div>
</div>
</div>
</div>
<div class="sect3">
<h4 id="_see_also_161">See Also</h4>
<div class="paragraph">
<p><a href="#VkAllocationCallbacks">VkAllocationCallbacks</a>, <a href="#VkDevice">VkDevice</a>, <a href="#VkEvent">VkEvent</a></p>
</div>
</div>
<div class="sect3">
<h4 id="_document_notes_161">Document Notes</h4>
<div class="paragraph">
<p>For more information, see the Vulkan Specification at URL</p>
</div>
<div class="paragraph">
<p><a href="https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#vkDestroyEvent" class="bare">https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#vkDestroyEvent</a></p>
</div>
<div class="paragraph">
<p>This page is extracted from the Vulkan Specification.
Fixes and changes should be made to the Specification, not directly.</p>
</div>
<div style="page-break-after: always;"></div>
</div>
</div>
<div class="sect2">
<h3 id="_vkdestroyfence3">vkDestroyFence(3)</h3>
<div class="sect3">
<h4 id="_name_162">Name</h4>
<div class="paragraph">
<p>vkDestroyFence - Destroy a fence object</p>
</div>
</div>
<div class="sect3">
<h4 id="_c_specification_162">C Specification</h4>
<div class="paragraph">
<p>To destroy a fence, call:</p>
</div>
<div id="vkDestroyFence" class="listingblock">
<div class="content">
<pre class="highlight"><code class="language-c++" data-lang="c++">void vkDestroyFence(
    VkDevice                                    device,
    VkFence                                     fence,
    const VkAllocationCallbacks*                pAllocator);</code></pre>
</div>
</div>
</div>
<div class="sect3">
<h4 id="_parameters_162">Parameters</h4>
<div class="ulist">
<ul>
<li>
<p><code>device</code> is the logical device that destroys the fence.</p>
</li>
<li>
<p><code>fence</code> is the handle of the fence to destroy.</p>
</li>
<li>
<p><code>pAllocator</code> controls host memory allocation as described in the
<a href="vkspec.html#memory-allocation">Memory Allocation</a> chapter.</p>
</li>
</ul>
</div>
</div>
<div class="sect3">
<h4 id="_description_162">Description</h4>
<div class="sidebarblock">
<div class="content">
<div class="title">Valid Usage</div>
<div class="ulist">
<ul>
<li>
<p><a id="VUID-vkDestroyFence-fence-01120"></a>
All <a href="vkspec.html#devsandqueues-submission">queue submission</a> commands that refer
to <code>fence</code> <strong class="purple">must</strong> have completed execution</p>
</li>
<li>
<p><a id="VUID-vkDestroyFence-fence-01121"></a>
If <code>VkAllocationCallbacks</code> were provided when <code>fence</code> was
created, a compatible set of callbacks <strong class="purple">must</strong> be provided here</p>
</li>
<li>
<p><a id="VUID-vkDestroyFence-fence-01122"></a>
If no <code>VkAllocationCallbacks</code> were provided when <code>fence</code> was
created, <code>pAllocator</code> <strong class="purple">must</strong> be <code>NULL</code></p>
</li>
</ul>
</div>
</div>
</div>
<div class="sidebarblock">
<div class="content">
<div class="title">Valid Usage (Implicit)</div>
<div class="ulist">
<ul>
<li>
<p><a id="VUID-vkDestroyFence-device-parameter"></a> <code>device</code> <strong class="purple">must</strong> be a valid <code>VkDevice</code> handle</p>
</li>
<li>
<p><a id="VUID-vkDestroyFence-fence-parameter"></a> If <code>fence</code> is not <a href="#VK_NULL_HANDLE">VK_NULL_HANDLE</a>, <code>fence</code> <strong class="purple">must</strong> be a valid <code>VkFence</code> handle</p>
</li>
<li>
<p><a id="VUID-vkDestroyFence-pAllocator-parameter"></a> If <code>pAllocator</code> is not <code>NULL</code>, <code>pAllocator</code> <strong class="purple">must</strong> be a valid pointer to a valid <code>VkAllocationCallbacks</code> structure</p>
</li>
<li>
<p><a id="VUID-vkDestroyFence-fence-parent"></a> If <code>fence</code> is a valid handle, it <strong class="purple">must</strong> have been created, allocated, or retrieved from <code>device</code></p>
</li>
</ul>
</div>
</div>
</div>
<div class="sidebarblock">
<div class="content">
<div class="title">Host Synchronization</div>
<div class="ulist">
<ul>
<li>
<p>Host access to <code>fence</code> <strong class="purple">must</strong> be externally synchronized</p>
</li>
</ul>
</div>
</div>
</div>
</div>
<div class="sect3">
<h4 id="_see_also_162">See Also</h4>
<div class="paragraph">
<p><a href="#VkAllocationCallbacks">VkAllocationCallbacks</a>, <a href="#VkDevice">VkDevice</a>, <a href="#VkFence">VkFence</a></p>
</div>
</div>
<div class="sect3">
<h4 id="_document_notes_162">Document Notes</h4>
<div class="paragraph">
<p>For more information, see the Vulkan Specification at URL</p>
</div>
<div class="paragraph">
<p><a href="https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#vkDestroyFence" class="bare">https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#vkDestroyFence</a></p>
</div>
<div class="paragraph">
<p>This page is extracted from the Vulkan Specification.
Fixes and changes should be made to the Specification, not directly.</p>
</div>
<div style="page-break-after: always;"></div>
</div>
</div>
<div class="sect2">
<h3 id="_vkdestroyframebuffer3">vkDestroyFramebuffer(3)</h3>
<div class="sect3">
<h4 id="_name_163">Name</h4>
<div class="paragraph">
<p>vkDestroyFramebuffer - Destroy a framebuffer object</p>
</div>
</div>
<div class="sect3">
<h4 id="_c_specification_163">C Specification</h4>
<div class="paragraph">
<p>To destroy a framebuffer, call:</p>
</div>
<div id="vkDestroyFramebuffer" class="listingblock">
<div class="content">
<pre class="highlight"><code class="language-c++" data-lang="c++">void vkDestroyFramebuffer(
    VkDevice                                    device,
    VkFramebuffer                               framebuffer,
    const VkAllocationCallbacks*                pAllocator);</code></pre>
</div>
</div>
</div>
<div class="sect3">
<h4 id="_parameters_163">Parameters</h4>
<div class="ulist">
<ul>
<li>
<p><code>device</code> is the logical device that destroys the framebuffer.</p>
</li>
<li>
<p><code>framebuffer</code> is the handle of the framebuffer to destroy.</p>
</li>
<li>
<p><code>pAllocator</code> controls host memory allocation as described in the
<a href="vkspec.html#memory-allocation">Memory Allocation</a> chapter.</p>
</li>
</ul>
</div>
</div>
<div class="sect3">
<h4 id="_description_163">Description</h4>
<div class="sidebarblock">
<div class="content">
<div class="title">Valid Usage</div>
<div class="ulist">
<ul>
<li>
<p><a id="VUID-vkDestroyFramebuffer-framebuffer-00892"></a>
All submitted commands that refer to <code>framebuffer</code> <strong class="purple">must</strong> have
completed execution</p>
</li>
<li>
<p><a id="VUID-vkDestroyFramebuffer-framebuffer-00893"></a>
If <code>VkAllocationCallbacks</code> were provided when <code>framebuffer</code> was
created, a compatible set of callbacks <strong class="purple">must</strong> be provided here</p>
</li>
<li>
<p><a id="VUID-vkDestroyFramebuffer-framebuffer-00894"></a>
If no <code>VkAllocationCallbacks</code> were provided when <code>framebuffer</code>
was created, <code>pAllocator</code> <strong class="purple">must</strong> be <code>NULL</code></p>
</li>
</ul>
</div>
</div>
</div>
<div class="sidebarblock">
<div class="content">
<div class="title">Valid Usage (Implicit)</div>
<div class="ulist">
<ul>
<li>
<p><a id="VUID-vkDestroyFramebuffer-device-parameter"></a> <code>device</code> <strong class="purple">must</strong> be a valid <code>VkDevice</code> handle</p>
</li>
<li>
<p><a id="VUID-vkDestroyFramebuffer-framebuffer-parameter"></a> If <code>framebuffer</code> is not <a href="#VK_NULL_HANDLE">VK_NULL_HANDLE</a>, <code>framebuffer</code> <strong class="purple">must</strong> be a valid <code>VkFramebuffer</code> handle</p>
</li>
<li>
<p><a id="VUID-vkDestroyFramebuffer-pAllocator-parameter"></a> If <code>pAllocator</code> is not <code>NULL</code>, <code>pAllocator</code> <strong class="purple">must</strong> be a valid pointer to a valid <code>VkAllocationCallbacks</code> structure</p>
</li>
<li>
<p><a id="VUID-vkDestroyFramebuffer-framebuffer-parent"></a> If <code>framebuffer</code> is a valid handle, it <strong class="purple">must</strong> have been created, allocated, or retrieved from <code>device</code></p>
</li>
</ul>
</div>
</div>
</div>
<div class="sidebarblock">
<div class="content">
<div class="title">Host Synchronization</div>
<div class="ulist">
<ul>
<li>
<p>Host access to <code>framebuffer</code> <strong class="purple">must</strong> be externally synchronized</p>
</li>
</ul>
</div>
</div>
</div>
</div>
<div class="sect3">
<h4 id="_see_also_163">See Also</h4>
<div class="paragraph">
<p><a href="#VkAllocationCallbacks">VkAllocationCallbacks</a>, <a href="#VkDevice">VkDevice</a>, <a href="#VkFramebuffer">VkFramebuffer</a></p>
</div>
</div>
<div class="sect3">
<h4 id="_document_notes_163">Document Notes</h4>
<div class="paragraph">
<p>For more information, see the Vulkan Specification at URL</p>
</div>
<div class="paragraph">
<p><a href="https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#vkDestroyFramebuffer" class="bare">https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#vkDestroyFramebuffer</a></p>
</div>
<div class="paragraph">
<p>This page is extracted from the Vulkan Specification.
Fixes and changes should be made to the Specification, not directly.</p>
</div>
<div style="page-break-after: always;"></div>
</div>
</div>
<div class="sect2">
<h3 id="_vkdestroyimage3">vkDestroyImage(3)</h3>
<div class="sect3">
<h4 id="_name_164">Name</h4>
<div class="paragraph">
<p>vkDestroyImage - Destroy an image object</p>
</div>
</div>
<div class="sect3">
<h4 id="_c_specification_164">C Specification</h4>
<div class="paragraph">
<p>To destroy an image, call:</p>
</div>
<div id="vkDestroyImage" class="listingblock">
<div class="content">
<pre class="highlight"><code class="language-c++" data-lang="c++">void vkDestroyImage(
    VkDevice                                    device,
    VkImage                                     image,
    const VkAllocationCallbacks*                pAllocator);</code></pre>
</div>
</div>
</div>
<div class="sect3">
<h4 id="_parameters_164">Parameters</h4>
<div class="ulist">
<ul>
<li>
<p><code>device</code> is the logical device that destroys the image.</p>
</li>
<li>
<p><code>image</code> is the image to destroy.</p>
</li>
<li>
<p><code>pAllocator</code> controls host memory allocation as described in the
<a href="vkspec.html#memory-allocation">Memory Allocation</a> chapter.</p>
</li>
</ul>
</div>
</div>
<div class="sect3">
<h4 id="_description_164">Description</h4>
<div class="sidebarblock">
<div class="content">
<div class="title">Valid Usage</div>
<div class="ulist">
<ul>
<li>
<p><a id="VUID-vkDestroyImage-image-01000"></a>
All submitted commands that refer to <code>image</code>, either directly or via
a <code>VkImageView</code>, <strong class="purple">must</strong> have completed execution</p>
</li>
<li>
<p><a id="VUID-vkDestroyImage-image-01001"></a>
If <code>VkAllocationCallbacks</code> were provided when <code>image</code> was
created, a compatible set of callbacks <strong class="purple">must</strong> be provided here</p>
</li>
<li>
<p><a id="VUID-vkDestroyImage-image-01002"></a>
If no <code>VkAllocationCallbacks</code> were provided when <code>image</code> was
created, <code>pAllocator</code> <strong class="purple">must</strong> be <code>NULL</code></p>
</li>
</ul>
</div>
</div>
</div>
<div class="sidebarblock">
<div class="content">
<div class="title">Valid Usage (Implicit)</div>
<div class="ulist">
<ul>
<li>
<p><a id="VUID-vkDestroyImage-device-parameter"></a> <code>device</code> <strong class="purple">must</strong> be a valid <code>VkDevice</code> handle</p>
</li>
<li>
<p><a id="VUID-vkDestroyImage-image-parameter"></a> If <code>image</code> is not <a href="#VK_NULL_HANDLE">VK_NULL_HANDLE</a>, <code>image</code> <strong class="purple">must</strong> be a valid <code>VkImage</code> handle</p>
</li>
<li>
<p><a id="VUID-vkDestroyImage-pAllocator-parameter"></a> If <code>pAllocator</code> is not <code>NULL</code>, <code>pAllocator</code> <strong class="purple">must</strong> be a valid pointer to a valid <code>VkAllocationCallbacks</code> structure</p>
</li>
<li>
<p><a id="VUID-vkDestroyImage-image-parent"></a> If <code>image</code> is a valid handle, it <strong class="purple">must</strong> have been created, allocated, or retrieved from <code>device</code></p>
</li>
</ul>
</div>
</div>
</div>
<div class="sidebarblock">
<div class="content">
<div class="title">Host Synchronization</div>
<div class="ulist">
<ul>
<li>
<p>Host access to <code>image</code> <strong class="purple">must</strong> be externally synchronized</p>
</li>
</ul>
</div>
</div>
</div>
</div>
<div class="sect3">
<h4 id="_see_also_164">See Also</h4>
<div class="paragraph">
<p><a href="#VkAllocationCallbacks">VkAllocationCallbacks</a>, <a href="#VkDevice">VkDevice</a>, <a href="#VkImage">VkImage</a></p>
</div>
</div>
<div class="sect3">
<h4 id="_document_notes_164">Document Notes</h4>
<div class="paragraph">
<p>For more information, see the Vulkan Specification at URL</p>
</div>
<div class="paragraph">
<p><a href="https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#vkDestroyImage" class="bare">https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#vkDestroyImage</a></p>
</div>
<div class="paragraph">
<p>This page is extracted from the Vulkan Specification.
Fixes and changes should be made to the Specification, not directly.</p>
</div>
<div style="page-break-after: always;"></div>
</div>
</div>
<div class="sect2">
<h3 id="_vkdestroyimageview3">vkDestroyImageView(3)</h3>
<div class="sect3">
<h4 id="_name_165">Name</h4>
<div class="paragraph">
<p>vkDestroyImageView - Destroy an image view object</p>
</div>
</div>
<div class="sect3">
<h4 id="_c_specification_165">C Specification</h4>
<div class="paragraph">
<p>To destroy an image view, call:</p>
</div>
<div id="vkDestroyImageView" class="listingblock">
<div class="content">
<pre class="highlight"><code class="language-c++" data-lang="c++">void vkDestroyImageView(
    VkDevice                                    device,
    VkImageView                                 imageView,
    const VkAllocationCallbacks*                pAllocator);</code></pre>
</div>
</div>
</div>
<div class="sect3">
<h4 id="_parameters_165">Parameters</h4>
<div class="ulist">
<ul>
<li>
<p><code>device</code> is the logical device that destroys the image view.</p>
</li>
<li>
<p><code>imageView</code> is the image view to destroy.</p>
</li>
<li>
<p><code>pAllocator</code> controls host memory allocation as described in the
<a href="vkspec.html#memory-allocation">Memory Allocation</a> chapter.</p>
</li>
</ul>
</div>
</div>
<div class="sect3">
<h4 id="_description_165">Description</h4>
<div class="sidebarblock">
<div class="content">
<div class="title">Valid Usage</div>
<div class="ulist">
<ul>
<li>
<p><a id="VUID-vkDestroyImageView-imageView-01026"></a>
All submitted commands that refer to <code>imageView</code> <strong class="purple">must</strong> have
completed execution</p>
</li>
<li>
<p><a id="VUID-vkDestroyImageView-imageView-01027"></a>
If <code>VkAllocationCallbacks</code> were provided when <code>imageView</code> was
created, a compatible set of callbacks <strong class="purple">must</strong> be provided here</p>
</li>
<li>
<p><a id="VUID-vkDestroyImageView-imageView-01028"></a>
If no <code>VkAllocationCallbacks</code> were provided when <code>imageView</code> was
created, <code>pAllocator</code> <strong class="purple">must</strong> be <code>NULL</code></p>
</li>
</ul>
</div>
</div>
</div>
<div class="sidebarblock">
<div class="content">
<div class="title">Valid Usage (Implicit)</div>
<div class="ulist">
<ul>
<li>
<p><a id="VUID-vkDestroyImageView-device-parameter"></a> <code>device</code> <strong class="purple">must</strong> be a valid <code>VkDevice</code> handle</p>
</li>
<li>
<p><a id="VUID-vkDestroyImageView-imageView-parameter"></a> If <code>imageView</code> is not <a href="#VK_NULL_HANDLE">VK_NULL_HANDLE</a>, <code>imageView</code> <strong class="purple">must</strong> be a valid <code>VkImageView</code> handle</p>
</li>
<li>
<p><a id="VUID-vkDestroyImageView-pAllocator-parameter"></a> If <code>pAllocator</code> is not <code>NULL</code>, <code>pAllocator</code> <strong class="purple">must</strong> be a valid pointer to a valid <code>VkAllocationCallbacks</code> structure</p>
</li>
<li>
<p><a id="VUID-vkDestroyImageView-imageView-parent"></a> If <code>imageView</code> is a valid handle, it <strong class="purple">must</strong> have been created, allocated, or retrieved from <code>device</code></p>
</li>
</ul>
</div>
</div>
</div>
<div class="sidebarblock">
<div class="content">
<div class="title">Host Synchronization</div>
<div class="ulist">
<ul>
<li>
<p>Host access to <code>imageView</code> <strong class="purple">must</strong> be externally synchronized</p>
</li>
</ul>
</div>
</div>
</div>
</div>
<div class="sect3">
<h4 id="_see_also_165">See Also</h4>
<div class="paragraph">
<p><a href="#VkAllocationCallbacks">VkAllocationCallbacks</a>, <a href="#VkDevice">VkDevice</a>, <a href="#VkImageView">VkImageView</a></p>
</div>
</div>
<div class="sect3">
<h4 id="_document_notes_165">Document Notes</h4>
<div class="paragraph">
<p>For more information, see the Vulkan Specification at URL</p>
</div>
<div class="paragraph">
<p><a href="https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#vkDestroyImageView" class="bare">https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#vkDestroyImageView</a></p>
</div>
<div class="paragraph">
<p>This page is extracted from the Vulkan Specification.
Fixes and changes should be made to the Specification, not directly.</p>
</div>
<div style="page-break-after: always;"></div>
</div>
</div>
<div class="sect2">
<h3 id="_vkdestroyindirectcommandslayoutnvx3">vkDestroyIndirectCommandsLayoutNVX(3)</h3>
<div class="sect3">
<h4 id="_name_166">Name</h4>
<div class="paragraph">
<p>vkDestroyIndirectCommandsLayoutNVX - Destroy an object table</p>
</div>
</div>
<div class="sect3">
<h4 id="_c_specification_166">C Specification</h4>
<div class="paragraph">
<p>Indirect command layouts are destroyed by:</p>
</div>
<div id="vkDestroyIndirectCommandsLayoutNVX" class="listingblock">
<div class="content">
<pre class="highlight"><code class="language-c++" data-lang="c++">void vkDestroyIndirectCommandsLayoutNVX(
    VkDevice                                    device,
    VkIndirectCommandsLayoutNVX                 indirectCommandsLayout,
    const VkAllocationCallbacks*                pAllocator);</code></pre>
</div>
</div>
</div>
<div class="sect3">
<h4 id="_parameters_166">Parameters</h4>
<div class="ulist">
<ul>
<li>
<p><code>device</code> is the logical device that destroys the layout.</p>
</li>
<li>
<p><code>indirectCommandsLayout</code> is the table to destroy.</p>
</li>
<li>
<p><code>pAllocator</code> controls host memory allocation as described in the
<a href="vkspec.html#memory-allocation">Memory Allocation</a> chapter.</p>
</li>
</ul>
</div>
</div>
<div class="sect3">
<h4 id="_description_166">Description</h4>
<div class="sidebarblock">
<div class="content">
<div class="title">Valid Usage</div>
<div class="ulist">
<ul>
<li>
<p><a id="VUID-vkDestroyIndirectCommandsLayoutNVX-indirectCommandsLayout-01352"></a>
All submitted commands that refer to <code>indirectCommandsLayout</code> <strong class="purple">must</strong>
have completed execution</p>
</li>
<li>
<p><a id="VUID-vkDestroyIndirectCommandsLayoutNVX-objectTable-01353"></a>
If <code>VkAllocationCallbacks</code> were provided when <code>objectTable</code> was
created, a compatible set of callbacks <strong class="purple">must</strong> be provided here</p>
</li>
<li>
<p><a id="VUID-vkDestroyIndirectCommandsLayoutNVX-objectTable-01354"></a>
If no <code>VkAllocationCallbacks</code> were provided when <code>objectTable</code>
was created, <code>pAllocator</code> <strong class="purple">must</strong> be <code>NULL</code></p>
</li>
</ul>
</div>
</div>
</div>
<div class="sidebarblock">
<div class="content">
<div class="title">Valid Usage (Implicit)</div>
<div class="ulist">
<ul>
<li>
<p><a id="VUID-vkDestroyIndirectCommandsLayoutNVX-device-parameter"></a> <code>device</code> <strong class="purple">must</strong> be a valid <code>VkDevice</code> handle</p>
</li>
<li>
<p><a id="VUID-vkDestroyIndirectCommandsLayoutNVX-indirectCommandsLayout-parameter"></a> <code>indirectCommandsLayout</code> <strong class="purple">must</strong> be a valid <code>VkIndirectCommandsLayoutNVX</code> handle</p>
</li>
<li>
<p><a id="VUID-vkDestroyIndirectCommandsLayoutNVX-pAllocator-parameter"></a> If <code>pAllocator</code> is not <code>NULL</code>, <code>pAllocator</code> <strong class="purple">must</strong> be a valid pointer to a valid <code>VkAllocationCallbacks</code> structure</p>
</li>
<li>
<p><a id="VUID-vkDestroyIndirectCommandsLayoutNVX-indirectCommandsLayout-parent"></a> <code>indirectCommandsLayout</code> <strong class="purple">must</strong> have been created, allocated, or retrieved from <code>device</code></p>
</li>
</ul>
</div>
</div>
</div>
</div>
<div class="sect3">
<h4 id="_see_also_166">See Also</h4>
<div class="paragraph">
<p><a href="#VkAllocationCallbacks">VkAllocationCallbacks</a>, <a href="#VkDevice">VkDevice</a>, <a href="#VkIndirectCommandsLayoutNVX">VkIndirectCommandsLayoutNVX</a></p>
</div>
</div>
<div class="sect3">
<h4 id="_document_notes_166">Document Notes</h4>
<div class="paragraph">
<p>For more information, see the Vulkan Specification at URL</p>
</div>
<div class="paragraph">
<p><a href="https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#vkDestroyIndirectCommandsLayoutNVX" class="bare">https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#vkDestroyIndirectCommandsLayoutNVX</a></p>
</div>
<div class="paragraph">
<p>This page is extracted from the Vulkan Specification.
Fixes and changes should be made to the Specification, not directly.</p>
</div>
<div style="page-break-after: always;"></div>
</div>
</div>
<div class="sect2">
<h3 id="_vkdestroyinstance3">vkDestroyInstance(3)</h3>
<div class="sect3">
<h4 id="_name_167">Name</h4>
<div class="paragraph">
<p>vkDestroyInstance - Destroy an instance of Vulkan</p>
</div>
</div>
<div class="sect3">
<h4 id="_c_specification_167">C Specification</h4>
<div class="paragraph">
<p>To destroy an instance, call:</p>
</div>
<div id="vkDestroyInstance" class="listingblock">
<div class="content">
<pre class="highlight"><code class="language-c++" data-lang="c++">void vkDestroyInstance(
    VkInstance                                  instance,
    const VkAllocationCallbacks*                pAllocator);</code></pre>
</div>
</div>
</div>
<div class="sect3">
<h4 id="_parameters_167">Parameters</h4>
<div class="ulist">
<ul>
<li>
<p><code>instance</code> is the handle of the instance to destroy.</p>
</li>
<li>
<p><code>pAllocator</code> controls host memory allocation as described in the
<a href="vkspec.html#memory-allocation">Memory Allocation</a> chapter.</p>
</li>
</ul>
</div>
</div>
<div class="sect3">
<h4 id="_description_167">Description</h4>
<div class="sidebarblock">
<div class="content">
<div class="title">Valid Usage</div>
<div class="ulist">
<ul>
<li>
<p><a id="VUID-vkDestroyInstance-instance-00629"></a>
All child objects created using <code>instance</code> <strong class="purple">must</strong> have been destroyed
prior to destroying <code>instance</code></p>
</li>
<li>
<p><a id="VUID-vkDestroyInstance-instance-00630"></a>
If <code>VkAllocationCallbacks</code> were provided when <code>instance</code> was
created, a compatible set of callbacks <strong class="purple">must</strong> be provided here</p>
</li>
<li>
<p><a id="VUID-vkDestroyInstance-instance-00631"></a>
If no <code>VkAllocationCallbacks</code> were provided when <code>instance</code> was
created, <code>pAllocator</code> <strong class="purple">must</strong> be <code>NULL</code></p>
</li>
</ul>
</div>
</div>
</div>
<div class="sidebarblock">
<div class="content">
<div class="title">Valid Usage (Implicit)</div>
<div class="ulist">
<ul>
<li>
<p><a id="VUID-vkDestroyInstance-instance-parameter"></a> If <code>instance</code> is not <code>NULL</code>, <code>instance</code> <strong class="purple">must</strong> be a valid <code>VkInstance</code> handle</p>
</li>
<li>
<p><a id="VUID-vkDestroyInstance-pAllocator-parameter"></a> If <code>pAllocator</code> is not <code>NULL</code>, <code>pAllocator</code> <strong class="purple">must</strong> be a valid pointer to a valid <code>VkAllocationCallbacks</code> structure</p>
</li>
</ul>
</div>
</div>
</div>
<div class="sidebarblock">
<div class="content">
<div class="title">Host Synchronization</div>
<div class="ulist">
<ul>
<li>
<p>Host access to <code>instance</code> <strong class="purple">must</strong> be externally synchronized</p>
</li>
</ul>
</div>
</div>
</div>
</div>
<div class="sect3">
<h4 id="_see_also_167">See Also</h4>
<div class="paragraph">
<p><a href="#VkAllocationCallbacks">VkAllocationCallbacks</a>, <a href="#VkInstance">VkInstance</a></p>
</div>
</div>
<div class="sect3">
<h4 id="_document_notes_167">Document Notes</h4>
<div class="paragraph">
<p>For more information, see the Vulkan Specification at URL</p>
</div>
<div class="paragraph">
<p><a href="https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#vkDestroyInstance" class="bare">https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#vkDestroyInstance</a></p>
</div>
<div class="paragraph">
<p>This page is extracted from the Vulkan Specification.
Fixes and changes should be made to the Specification, not directly.</p>
</div>
<div style="page-break-after: always;"></div>
</div>
</div>
<div class="sect2">
<h3 id="_vkdestroyobjecttablenvx3">vkDestroyObjectTableNVX(3)</h3>
<div class="sect3">
<h4 id="_name_168">Name</h4>
<div class="paragraph">
<p>vkDestroyObjectTableNVX - Destroy an object table</p>
</div>
</div>
<div class="sect3">
<h4 id="_c_specification_168">C Specification</h4>
<div class="paragraph">
<p>To destroy an object table, call:</p>
</div>
<div id="vkDestroyObjectTableNVX" class="listingblock">
<div class="content">
<pre class="highlight"><code class="language-c++" data-lang="c++">void vkDestroyObjectTableNVX(
    VkDevice                                    device,
    VkObjectTableNVX                            objectTable,
    const VkAllocationCallbacks*                pAllocator);</code></pre>
</div>
</div>
</div>
<div class="sect3">
<h4 id="_parameters_168">Parameters</h4>
<div class="ulist">
<ul>
<li>
<p><code>device</code> is the logical device that destroys the table.</p>
</li>
<li>
<p><code>objectTable</code> is the table to destroy.</p>
</li>
<li>
<p><code>pAllocator</code> controls host memory allocation as described in the
<a href="vkspec.html#memory-allocation">Memory Allocation</a> chapter.</p>
</li>
</ul>
</div>
</div>
<div class="sect3">
<h4 id="_description_168">Description</h4>
<div class="sidebarblock">
<div class="content">
<div class="title">Valid Usage</div>
<div class="ulist">
<ul>
<li>
<p><a id="VUID-vkDestroyObjectTableNVX-objectTable-01361"></a>
All submitted commands that refer to <code>objectTable</code> <strong class="purple">must</strong> have
completed execution.</p>
</li>
<li>
<p><a id="VUID-vkDestroyObjectTableNVX-objectTable-01362"></a>
If <code>VkAllocationCallbacks</code> were provided when <code>objectTable</code> was
created, a compatible set of callbacks <strong class="purple">must</strong> be provided here.</p>
</li>
<li>
<p><a id="VUID-vkDestroyObjectTableNVX-objectTable-01363"></a>
If no <code>VkAllocationCallbacks</code> were provided when <code>objectTable</code>
was created, <code>pAllocator</code> <strong class="purple">must</strong> be <code>NULL</code>.</p>
</li>
</ul>
</div>
</div>
</div>
<div class="sidebarblock">
<div class="content">
<div class="title">Valid Usage (Implicit)</div>
<div class="ulist">
<ul>
<li>
<p><a id="VUID-vkDestroyObjectTableNVX-device-parameter"></a> <code>device</code> <strong class="purple">must</strong> be a valid <code>VkDevice</code> handle</p>
</li>
<li>
<p><a id="VUID-vkDestroyObjectTableNVX-objectTable-parameter"></a> <code>objectTable</code> <strong class="purple">must</strong> be a valid <code>VkObjectTableNVX</code> handle</p>
</li>
<li>
<p><a id="VUID-vkDestroyObjectTableNVX-pAllocator-parameter"></a> If <code>pAllocator</code> is not <code>NULL</code>, <code>pAllocator</code> <strong class="purple">must</strong> be a valid pointer to a valid <code>VkAllocationCallbacks</code> structure</p>
</li>
<li>
<p><a id="VUID-vkDestroyObjectTableNVX-objectTable-parent"></a> <code>objectTable</code> <strong class="purple">must</strong> have been created, allocated, or retrieved from <code>device</code></p>
</li>
</ul>
</div>
</div>
</div>
<div class="sidebarblock">
<div class="content">
<div class="title">Host Synchronization</div>
<div class="ulist">
<ul>
<li>
<p>Host access to <code>objectTable</code> <strong class="purple">must</strong> be externally synchronized</p>
</li>
</ul>
</div>
</div>
</div>
</div>
<div class="sect3">
<h4 id="_see_also_168">See Also</h4>
<div class="paragraph">
<p><a href="#VkAllocationCallbacks">VkAllocationCallbacks</a>, <a href="#VkDevice">VkDevice</a>, <a href="#VkObjectTableNVX">VkObjectTableNVX</a></p>
</div>
</div>
<div class="sect3">
<h4 id="_document_notes_168">Document Notes</h4>
<div class="paragraph">
<p>For more information, see the Vulkan Specification at URL</p>
</div>
<div class="paragraph">
<p><a href="https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#vkDestroyObjectTableNVX" class="bare">https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#vkDestroyObjectTableNVX</a></p>
</div>
<div class="paragraph">
<p>This page is extracted from the Vulkan Specification.
Fixes and changes should be made to the Specification, not directly.</p>
</div>
<div style="page-break-after: always;"></div>
</div>
</div>
<div class="sect2">
<h3 id="_vkdestroypipeline3">vkDestroyPipeline(3)</h3>
<div class="sect3">
<h4 id="_name_169">Name</h4>
<div class="paragraph">
<p>vkDestroyPipeline - Destroy a pipeline object</p>
</div>
</div>
<div class="sect3">
<h4 id="_c_specification_169">C Specification</h4>
<div class="paragraph">
<p>To destroy a graphics or compute pipeline, call:</p>
</div>
<div id="vkDestroyPipeline" class="listingblock">
<div class="content">
<pre class="highlight"><code class="language-c++" data-lang="c++">void vkDestroyPipeline(
    VkDevice                                    device,
    VkPipeline                                  pipeline,
    const VkAllocationCallbacks*                pAllocator);</code></pre>
</div>
</div>
</div>
<div class="sect3">
<h4 id="_parameters_169">Parameters</h4>
<div class="ulist">
<ul>
<li>
<p><code>device</code> is the logical device that destroys the pipeline.</p>
</li>
<li>
<p><code>pipeline</code> is the handle of the pipeline to destroy.</p>
</li>
<li>
<p><code>pAllocator</code> controls host memory allocation as described in the
<a href="vkspec.html#memory-allocation">Memory Allocation</a> chapter.</p>
</li>
</ul>
</div>
</div>
<div class="sect3">
<h4 id="_description_169">Description</h4>
<div class="sidebarblock">
<div class="content">
<div class="title">Valid Usage</div>
<div class="ulist">
<ul>
<li>
<p><a id="VUID-vkDestroyPipeline-pipeline-00765"></a>
All submitted commands that refer to <code>pipeline</code> <strong class="purple">must</strong> have completed
execution</p>
</li>
<li>
<p><a id="VUID-vkDestroyPipeline-pipeline-00766"></a>
If <code>VkAllocationCallbacks</code> were provided when <code>pipeline</code> was
created, a compatible set of callbacks <strong class="purple">must</strong> be provided here</p>
</li>
<li>
<p><a id="VUID-vkDestroyPipeline-pipeline-00767"></a>
If no <code>VkAllocationCallbacks</code> were provided when <code>pipeline</code> was
created, <code>pAllocator</code> <strong class="purple">must</strong> be <code>NULL</code></p>
</li>
</ul>
</div>
</div>
</div>
<div class="sidebarblock">
<div class="content">
<div class="title">Valid Usage (Implicit)</div>
<div class="ulist">
<ul>
<li>
<p><a id="VUID-vkDestroyPipeline-device-parameter"></a> <code>device</code> <strong class="purple">must</strong> be a valid <code>VkDevice</code> handle</p>
</li>
<li>
<p><a id="VUID-vkDestroyPipeline-pipeline-parameter"></a> If <code>pipeline</code> is not <a href="#VK_NULL_HANDLE">VK_NULL_HANDLE</a>, <code>pipeline</code> <strong class="purple">must</strong> be a valid <code>VkPipeline</code> handle</p>
</li>
<li>
<p><a id="VUID-vkDestroyPipeline-pAllocator-parameter"></a> If <code>pAllocator</code> is not <code>NULL</code>, <code>pAllocator</code> <strong class="purple">must</strong> be a valid pointer to a valid <code>VkAllocationCallbacks</code> structure</p>
</li>
<li>
<p><a id="VUID-vkDestroyPipeline-pipeline-parent"></a> If <code>pipeline</code> is a valid handle, it <strong class="purple">must</strong> have been created, allocated, or retrieved from <code>device</code></p>
</li>
</ul>
</div>
</div>
</div>
<div class="sidebarblock">
<div class="content">
<div class="title">Host Synchronization</div>
<div class="ulist">
<ul>
<li>
<p>Host access to <code>pipeline</code> <strong class="purple">must</strong> be externally synchronized</p>
</li>
</ul>
</div>
</div>
</div>
</div>
<div class="sect3">
<h4 id="_see_also_169">See Also</h4>
<div class="paragraph">
<p><a href="#VkAllocationCallbacks">VkAllocationCallbacks</a>, <a href="#VkDevice">VkDevice</a>, <a href="#VkPipeline">VkPipeline</a></p>
</div>
</div>
<div class="sect3">
<h4 id="_document_notes_169">Document Notes</h4>
<div class="paragraph">
<p>For more information, see the Vulkan Specification at URL</p>
</div>
<div class="paragraph">
<p><a href="https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#vkDestroyPipeline" class="bare">https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#vkDestroyPipeline</a></p>
</div>
<div class="paragraph">
<p>This page is extracted from the Vulkan Specification.
Fixes and changes should be made to the Specification, not directly.</p>
</div>
<div style="page-break-after: always;"></div>
</div>
</div>
<div class="sect2">
<h3 id="_vkdestroypipelinecache3">vkDestroyPipelineCache(3)</h3>
<div class="sect3">
<h4 id="_name_170">Name</h4>
<div class="paragraph">
<p>vkDestroyPipelineCache - Destroy a pipeline cache object</p>
</div>
</div>
<div class="sect3">
<h4 id="_c_specification_170">C Specification</h4>
<div class="paragraph">
<p>To destroy a pipeline cache, call:</p>
</div>
<div id="vkDestroyPipelineCache" class="listingblock">
<div class="content">
<pre class="highlight"><code class="language-c++" data-lang="c++">void vkDestroyPipelineCache(
    VkDevice                                    device,
    VkPipelineCache                             pipelineCache,
    const VkAllocationCallbacks*                pAllocator);</code></pre>
</div>
</div>
</div>
<div class="sect3">
<h4 id="_parameters_170">Parameters</h4>
<div class="ulist">
<ul>
<li>
<p><code>device</code> is the logical device that destroys the pipeline cache
object.</p>
</li>
<li>
<p><code>pipelineCache</code> is the handle of the pipeline cache to destroy.</p>
</li>
<li>
<p><code>pAllocator</code> controls host memory allocation as described in the
<a href="vkspec.html#memory-allocation">Memory Allocation</a> chapter.</p>
</li>
</ul>
</div>
</div>
<div class="sect3">
<h4 id="_description_170">Description</h4>
<div class="sidebarblock">
<div class="content">
<div class="title">Valid Usage</div>
<div class="ulist">
<ul>
<li>
<p><a id="VUID-vkDestroyPipelineCache-pipelineCache-00771"></a>
If <code>VkAllocationCallbacks</code> were provided when <code>pipelineCache</code>
was created, a compatible set of callbacks <strong class="purple">must</strong> be provided here</p>
</li>
<li>
<p><a id="VUID-vkDestroyPipelineCache-pipelineCache-00772"></a>
If no <code>VkAllocationCallbacks</code> were provided when <code>pipelineCache</code>
was created, <code>pAllocator</code> <strong class="purple">must</strong> be <code>NULL</code></p>
</li>
</ul>
</div>
</div>
</div>
<div class="sidebarblock">
<div class="content">
<div class="title">Valid Usage (Implicit)</div>
<div class="ulist">
<ul>
<li>
<p><a id="VUID-vkDestroyPipelineCache-device-parameter"></a> <code>device</code> <strong class="purple">must</strong> be a valid <code>VkDevice</code> handle</p>
</li>
<li>
<p><a id="VUID-vkDestroyPipelineCache-pipelineCache-parameter"></a> If <code>pipelineCache</code> is not <a href="#VK_NULL_HANDLE">VK_NULL_HANDLE</a>, <code>pipelineCache</code> <strong class="purple">must</strong> be a valid <code>VkPipelineCache</code> handle</p>
</li>
<li>
<p><a id="VUID-vkDestroyPipelineCache-pAllocator-parameter"></a> If <code>pAllocator</code> is not <code>NULL</code>, <code>pAllocator</code> <strong class="purple">must</strong> be a valid pointer to a valid <code>VkAllocationCallbacks</code> structure</p>
</li>
<li>
<p><a id="VUID-vkDestroyPipelineCache-pipelineCache-parent"></a> If <code>pipelineCache</code> is a valid handle, it <strong class="purple">must</strong> have been created, allocated, or retrieved from <code>device</code></p>
</li>
</ul>
</div>
</div>
</div>
<div class="sidebarblock">
<div class="content">
<div class="title">Host Synchronization</div>
<div class="ulist">
<ul>
<li>
<p>Host access to <code>pipelineCache</code> <strong class="purple">must</strong> be externally synchronized</p>
</li>
</ul>
</div>
</div>
</div>
</div>
<div class="sect3">
<h4 id="_see_also_170">See Also</h4>
<div class="paragraph">
<p><a href="#VkAllocationCallbacks">VkAllocationCallbacks</a>, <a href="#VkDevice">VkDevice</a>, <a href="#VkPipelineCache">VkPipelineCache</a></p>
</div>
</div>
<div class="sect3">
<h4 id="_document_notes_170">Document Notes</h4>
<div class="paragraph">
<p>For more information, see the Vulkan Specification at URL</p>
</div>
<div class="paragraph">
<p><a href="https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#vkDestroyPipelineCache" class="bare">https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#vkDestroyPipelineCache</a></p>
</div>
<div class="paragraph">
<p>This page is extracted from the Vulkan Specification.
Fixes and changes should be made to the Specification, not directly.</p>
</div>
<div style="page-break-after: always;"></div>
</div>
</div>
<div class="sect2">
<h3 id="_vkdestroypipelinelayout3">vkDestroyPipelineLayout(3)</h3>
<div class="sect3">
<h4 id="_name_171">Name</h4>
<div class="paragraph">
<p>vkDestroyPipelineLayout - Destroy a pipeline layout object</p>
</div>
</div>
<div class="sect3">
<h4 id="_c_specification_171">C Specification</h4>
<div class="paragraph">
<p>To destroy a pipeline layout, call:</p>
</div>
<div id="vkDestroyPipelineLayout" class="listingblock">
<div class="content">
<pre class="highlight"><code class="language-c++" data-lang="c++">void vkDestroyPipelineLayout(
    VkDevice                                    device,
    VkPipelineLayout                            pipelineLayout,
    const VkAllocationCallbacks*                pAllocator);</code></pre>
</div>
</div>
</div>
<div class="sect3">
<h4 id="_parameters_171">Parameters</h4>
<div class="ulist">
<ul>
<li>
<p><code>device</code> is the logical device that destroys the pipeline layout.</p>
</li>
<li>
<p><code>pipelineLayout</code> is the pipeline layout to destroy.</p>
</li>
<li>
<p><code>pAllocator</code> controls host memory allocation as described in the
<a href="vkspec.html#memory-allocation">Memory Allocation</a> chapter.</p>
</li>
</ul>
</div>
</div>
<div class="sect3">
<h4 id="_description_171">Description</h4>
<div class="sidebarblock">
<div class="content">
<div class="title">Valid Usage</div>
<div class="ulist">
<ul>
<li>
<p><a id="VUID-vkDestroyPipelineLayout-pipelineLayout-00299"></a>
If <code>VkAllocationCallbacks</code> were provided when <code>pipelineLayout</code>
was created, a compatible set of callbacks <strong class="purple">must</strong> be provided here</p>
</li>
<li>
<p><a id="VUID-vkDestroyPipelineLayout-pipelineLayout-00300"></a>
If no <code>VkAllocationCallbacks</code> were provided when
<code>pipelineLayout</code> was created, <code>pAllocator</code> <strong class="purple">must</strong> be <code>NULL</code></p>
</li>
<li>
<p><a id="VUID-vkDestroyPipelineLayout-pipelineLayout-02004"></a>
<code>pipelineLayout</code> <strong class="purple">must</strong> not have been passed to any <code>vkCmd*</code>
command for any command buffers that are still in the
<a href="vkspec.html#commandbuffers-lifecycle">recording state</a> when
<code>vkDestroyPipelineLayout</code> is called</p>
</li>
</ul>
</div>
</div>
</div>
<div class="sidebarblock">
<div class="content">
<div class="title">Valid Usage (Implicit)</div>
<div class="ulist">
<ul>
<li>
<p><a id="VUID-vkDestroyPipelineLayout-device-parameter"></a> <code>device</code> <strong class="purple">must</strong> be a valid <code>VkDevice</code> handle</p>
</li>
<li>
<p><a id="VUID-vkDestroyPipelineLayout-pipelineLayout-parameter"></a> If <code>pipelineLayout</code> is not <a href="#VK_NULL_HANDLE">VK_NULL_HANDLE</a>, <code>pipelineLayout</code> <strong class="purple">must</strong> be a valid <code>VkPipelineLayout</code> handle</p>
</li>
<li>
<p><a id="VUID-vkDestroyPipelineLayout-pAllocator-parameter"></a> If <code>pAllocator</code> is not <code>NULL</code>, <code>pAllocator</code> <strong class="purple">must</strong> be a valid pointer to a valid <code>VkAllocationCallbacks</code> structure</p>
</li>
<li>
<p><a id="VUID-vkDestroyPipelineLayout-pipelineLayout-parent"></a> If <code>pipelineLayout</code> is a valid handle, it <strong class="purple">must</strong> have been created, allocated, or retrieved from <code>device</code></p>
</li>
</ul>
</div>
</div>
</div>
<div class="sidebarblock">
<div class="content">
<div class="title">Host Synchronization</div>
<div class="ulist">
<ul>
<li>
<p>Host access to <code>pipelineLayout</code> <strong class="purple">must</strong> be externally synchronized</p>
</li>
</ul>
</div>
</div>
</div>
</div>
<div class="sect3">
<h4 id="_see_also_171">See Also</h4>
<div class="paragraph">
<p><a href="#VkAllocationCallbacks">VkAllocationCallbacks</a>, <a href="#VkDevice">VkDevice</a>, <a href="#VkPipelineLayout">VkPipelineLayout</a></p>
</div>
</div>
<div class="sect3">
<h4 id="_document_notes_171">Document Notes</h4>
<div class="paragraph">
<p>For more information, see the Vulkan Specification at URL</p>
</div>
<div class="paragraph">
<p><a href="https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#vkDestroyPipelineLayout" class="bare">https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#vkDestroyPipelineLayout</a></p>
</div>
<div class="paragraph">
<p>This page is extracted from the Vulkan Specification.
Fixes and changes should be made to the Specification, not directly.</p>
</div>
<div style="page-break-after: always;"></div>
</div>
</div>
<div class="sect2">
<h3 id="_vkdestroyquerypool3">vkDestroyQueryPool(3)</h3>
<div class="sect3">
<h4 id="_name_172">Name</h4>
<div class="paragraph">
<p>vkDestroyQueryPool - Destroy a query pool object</p>
</div>
</div>
<div class="sect3">
<h4 id="_c_specification_172">C Specification</h4>
<div class="paragraph">
<p>To destroy a query pool, call:</p>
</div>
<div id="vkDestroyQueryPool" class="listingblock">
<div class="content">
<pre class="highlight"><code class="language-c++" data-lang="c++">void vkDestroyQueryPool(
    VkDevice                                    device,
    VkQueryPool                                 queryPool,
    const VkAllocationCallbacks*                pAllocator);</code></pre>
</div>
</div>
</div>
<div class="sect3">
<h4 id="_parameters_172">Parameters</h4>
<div class="ulist">
<ul>
<li>
<p><code>device</code> is the logical device that destroys the query pool.</p>
</li>
<li>
<p><code>queryPool</code> is the query pool to destroy.</p>
</li>
<li>
<p><code>pAllocator</code> controls host memory allocation as described in the
<a href="vkspec.html#memory-allocation">Memory Allocation</a> chapter.</p>
</li>
</ul>
</div>
</div>
<div class="sect3">
<h4 id="_description_172">Description</h4>
<div class="sidebarblock">
<div class="content">
<div class="title">Valid Usage</div>
<div class="ulist">
<ul>
<li>
<p><a id="VUID-vkDestroyQueryPool-queryPool-00793"></a>
All submitted commands that refer to <code>queryPool</code> <strong class="purple">must</strong> have
completed execution</p>
</li>
<li>
<p><a id="VUID-vkDestroyQueryPool-queryPool-00794"></a>
If <code>VkAllocationCallbacks</code> were provided when <code>queryPool</code> was
created, a compatible set of callbacks <strong class="purple">must</strong> be provided here</p>
</li>
<li>
<p><a id="VUID-vkDestroyQueryPool-queryPool-00795"></a>
If no <code>VkAllocationCallbacks</code> were provided when <code>queryPool</code> was
created, <code>pAllocator</code> <strong class="purple">must</strong> be <code>NULL</code></p>
</li>
</ul>
</div>
</div>
</div>
<div class="sidebarblock">
<div class="content">
<div class="title">Valid Usage (Implicit)</div>
<div class="ulist">
<ul>
<li>
<p><a id="VUID-vkDestroyQueryPool-device-parameter"></a> <code>device</code> <strong class="purple">must</strong> be a valid <code>VkDevice</code> handle</p>
</li>
<li>
<p><a id="VUID-vkDestroyQueryPool-queryPool-parameter"></a> If <code>queryPool</code> is not <a href="#VK_NULL_HANDLE">VK_NULL_HANDLE</a>, <code>queryPool</code> <strong class="purple">must</strong> be a valid <code>VkQueryPool</code> handle</p>
</li>
<li>
<p><a id="VUID-vkDestroyQueryPool-pAllocator-parameter"></a> If <code>pAllocator</code> is not <code>NULL</code>, <code>pAllocator</code> <strong class="purple">must</strong> be a valid pointer to a valid <code>VkAllocationCallbacks</code> structure</p>
</li>
<li>
<p><a id="VUID-vkDestroyQueryPool-queryPool-parent"></a> If <code>queryPool</code> is a valid handle, it <strong class="purple">must</strong> have been created, allocated, or retrieved from <code>device</code></p>
</li>
</ul>
</div>
</div>
</div>
<div class="sidebarblock">
<div class="content">
<div class="title">Host Synchronization</div>
<div class="ulist">
<ul>
<li>
<p>Host access to <code>queryPool</code> <strong class="purple">must</strong> be externally synchronized</p>
</li>
</ul>
</div>
</div>
</div>
</div>
<div class="sect3">
<h4 id="_see_also_172">See Also</h4>
<div class="paragraph">
<p><a href="#VkAllocationCallbacks">VkAllocationCallbacks</a>, <a href="#VkDevice">VkDevice</a>, <a href="#VkQueryPool">VkQueryPool</a></p>
</div>
</div>
<div class="sect3">
<h4 id="_document_notes_172">Document Notes</h4>
<div class="paragraph">
<p>For more information, see the Vulkan Specification at URL</p>
</div>
<div class="paragraph">
<p><a href="https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#vkDestroyQueryPool" class="bare">https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#vkDestroyQueryPool</a></p>
</div>
<div class="paragraph">
<p>This page is extracted from the Vulkan Specification.
Fixes and changes should be made to the Specification, not directly.</p>
</div>
<div style="page-break-after: always;"></div>
</div>
</div>
<div class="sect2">
<h3 id="_vkdestroyrenderpass3">vkDestroyRenderPass(3)</h3>
<div class="sect3">
<h4 id="_name_173">Name</h4>
<div class="paragraph">
<p>vkDestroyRenderPass - Destroy a render pass object</p>
</div>
</div>
<div class="sect3">
<h4 id="_c_specification_173">C Specification</h4>
<div class="paragraph">
<p>To destroy a render pass, call:</p>
</div>
<div id="vkDestroyRenderPass" class="listingblock">
<div class="content">
<pre class="highlight"><code class="language-c++" data-lang="c++">void vkDestroyRenderPass(
    VkDevice                                    device,
    VkRenderPass                                renderPass,
    const VkAllocationCallbacks*                pAllocator);</code></pre>
</div>
</div>
</div>
<div class="sect3">
<h4 id="_parameters_173">Parameters</h4>
<div class="ulist">
<ul>
<li>
<p><code>device</code> is the logical device that destroys the render pass.</p>
</li>
<li>
<p><code>renderPass</code> is the handle of the render pass to destroy.</p>
</li>
<li>
<p><code>pAllocator</code> controls host memory allocation as described in the
<a href="vkspec.html#memory-allocation">Memory Allocation</a> chapter.</p>
</li>
</ul>
</div>
</div>
<div class="sect3">
<h4 id="_description_173">Description</h4>
<div class="sidebarblock">
<div class="content">
<div class="title">Valid Usage</div>
<div class="ulist">
<ul>
<li>
<p><a id="VUID-vkDestroyRenderPass-renderPass-00873"></a>
All submitted commands that refer to <code>renderPass</code> <strong class="purple">must</strong> have
completed execution</p>
</li>
<li>
<p><a id="VUID-vkDestroyRenderPass-renderPass-00874"></a>
If <code>VkAllocationCallbacks</code> were provided when <code>renderPass</code> was
created, a compatible set of callbacks <strong class="purple">must</strong> be provided here</p>
</li>
<li>
<p><a id="VUID-vkDestroyRenderPass-renderPass-00875"></a>
If no <code>VkAllocationCallbacks</code> were provided when <code>renderPass</code>
was created, <code>pAllocator</code> <strong class="purple">must</strong> be <code>NULL</code></p>
</li>
</ul>
</div>
</div>
</div>
<div class="sidebarblock">
<div class="content">
<div class="title">Valid Usage (Implicit)</div>
<div class="ulist">
<ul>
<li>
<p><a id="VUID-vkDestroyRenderPass-device-parameter"></a> <code>device</code> <strong class="purple">must</strong> be a valid <code>VkDevice</code> handle</p>
</li>
<li>
<p><a id="VUID-vkDestroyRenderPass-renderPass-parameter"></a> If <code>renderPass</code> is not <a href="#VK_NULL_HANDLE">VK_NULL_HANDLE</a>, <code>renderPass</code> <strong class="purple">must</strong> be a valid <code>VkRenderPass</code> handle</p>
</li>
<li>
<p><a id="VUID-vkDestroyRenderPass-pAllocator-parameter"></a> If <code>pAllocator</code> is not <code>NULL</code>, <code>pAllocator</code> <strong class="purple">must</strong> be a valid pointer to a valid <code>VkAllocationCallbacks</code> structure</p>
</li>
<li>
<p><a id="VUID-vkDestroyRenderPass-renderPass-parent"></a> If <code>renderPass</code> is a valid handle, it <strong class="purple">must</strong> have been created, allocated, or retrieved from <code>device</code></p>
</li>
</ul>
</div>
</div>
</div>
<div class="sidebarblock">
<div class="content">
<div class="title">Host Synchronization</div>
<div class="ulist">
<ul>
<li>
<p>Host access to <code>renderPass</code> <strong class="purple">must</strong> be externally synchronized</p>
</li>
</ul>
</div>
</div>
</div>
</div>
<div class="sect3">
<h4 id="_see_also_173">See Also</h4>
<div class="paragraph">
<p><a href="#VkAllocationCallbacks">VkAllocationCallbacks</a>, <a href="#VkDevice">VkDevice</a>, <a href="#VkRenderPass">VkRenderPass</a></p>
</div>
</div>
<div class="sect3">
<h4 id="_document_notes_173">Document Notes</h4>
<div class="paragraph">
<p>For more information, see the Vulkan Specification at URL</p>
</div>
<div class="paragraph">
<p><a href="https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#vkDestroyRenderPass" class="bare">https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#vkDestroyRenderPass</a></p>
</div>
<div class="paragraph">
<p>This page is extracted from the Vulkan Specification.
Fixes and changes should be made to the Specification, not directly.</p>
</div>
<div style="page-break-after: always;"></div>
</div>
</div>
<div class="sect2">
<h3 id="_vkdestroysampler3">vkDestroySampler(3)</h3>
<div class="sect3">
<h4 id="_name_174">Name</h4>
<div class="paragraph">
<p>vkDestroySampler - Destroy a sampler object</p>
</div>
</div>
<div class="sect3">
<h4 id="_c_specification_174">C Specification</h4>
<div class="paragraph">
<p>To destroy a sampler, call:</p>
</div>
<div id="vkDestroySampler" class="listingblock">
<div class="content">
<pre class="highlight"><code class="language-c++" data-lang="c++">void vkDestroySampler(
    VkDevice                                    device,
    VkSampler                                   sampler,
    const VkAllocationCallbacks*                pAllocator);</code></pre>
</div>
</div>
</div>
<div class="sect3">
<h4 id="_parameters_174">Parameters</h4>
<div class="ulist">
<ul>
<li>
<p><code>device</code> is the logical device that destroys the sampler.</p>
</li>
<li>
<p><code>sampler</code> is the sampler to destroy.</p>
</li>
<li>
<p><code>pAllocator</code> controls host memory allocation as described in the
<a href="vkspec.html#memory-allocation">Memory Allocation</a> chapter.</p>
</li>
</ul>
</div>
</div>
<div class="sect3">
<h4 id="_description_174">Description</h4>
<div class="sidebarblock">
<div class="content">
<div class="title">Valid Usage</div>
<div class="ulist">
<ul>
<li>
<p><a id="VUID-vkDestroySampler-sampler-01082"></a>
All submitted commands that refer to <code>sampler</code> <strong class="purple">must</strong> have completed
execution</p>
</li>
<li>
<p><a id="VUID-vkDestroySampler-sampler-01083"></a>
If <code>VkAllocationCallbacks</code> were provided when <code>sampler</code> was
created, a compatible set of callbacks <strong class="purple">must</strong> be provided here</p>
</li>
<li>
<p><a id="VUID-vkDestroySampler-sampler-01084"></a>
If no <code>VkAllocationCallbacks</code> were provided when <code>sampler</code> was
created, <code>pAllocator</code> <strong class="purple">must</strong> be <code>NULL</code></p>
</li>
</ul>
</div>
</div>
</div>
<div class="sidebarblock">
<div class="content">
<div class="title">Valid Usage (Implicit)</div>
<div class="ulist">
<ul>
<li>
<p><a id="VUID-vkDestroySampler-device-parameter"></a> <code>device</code> <strong class="purple">must</strong> be a valid <code>VkDevice</code> handle</p>
</li>
<li>
<p><a id="VUID-vkDestroySampler-sampler-parameter"></a> If <code>sampler</code> is not <a href="#VK_NULL_HANDLE">VK_NULL_HANDLE</a>, <code>sampler</code> <strong class="purple">must</strong> be a valid <code>VkSampler</code> handle</p>
</li>
<li>
<p><a id="VUID-vkDestroySampler-pAllocator-parameter"></a> If <code>pAllocator</code> is not <code>NULL</code>, <code>pAllocator</code> <strong class="purple">must</strong> be a valid pointer to a valid <code>VkAllocationCallbacks</code> structure</p>
</li>
<li>
<p><a id="VUID-vkDestroySampler-sampler-parent"></a> If <code>sampler</code> is a valid handle, it <strong class="purple">must</strong> have been created, allocated, or retrieved from <code>device</code></p>
</li>
</ul>
</div>
</div>
</div>
<div class="sidebarblock">
<div class="content">
<div class="title">Host Synchronization</div>
<div class="ulist">
<ul>
<li>
<p>Host access to <code>sampler</code> <strong class="purple">must</strong> be externally synchronized</p>
</li>
</ul>
</div>
</div>
</div>
</div>
<div class="sect3">
<h4 id="_see_also_174">See Also</h4>
<div class="paragraph">
<p><a href="#VkAllocationCallbacks">VkAllocationCallbacks</a>, <a href="#VkDevice">VkDevice</a>, <a href="#VkSampler">VkSampler</a></p>
</div>
</div>
<div class="sect3">
<h4 id="_document_notes_174">Document Notes</h4>
<div class="paragraph">
<p>For more information, see the Vulkan Specification at URL</p>
</div>
<div class="paragraph">
<p><a href="https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#vkDestroySampler" class="bare">https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#vkDestroySampler</a></p>
</div>
<div class="paragraph">
<p>This page is extracted from the Vulkan Specification.
Fixes and changes should be made to the Specification, not directly.</p>
</div>
<div style="page-break-after: always;"></div>
</div>
</div>
<div class="sect2">
<h3 id="_vkdestroysamplerycbcrconversion3">vkDestroySamplerYcbcrConversion(3)</h3>
<div class="sect3">
<h4 id="_name_175">Name</h4>
<div class="paragraph">
<p>vkDestroySamplerYcbcrConversion - Destroy a created Y&#8217;CbCr conversion</p>
</div>
</div>
<div class="sect3">
<h4 id="_c_specification_175">C Specification</h4>
<div class="paragraph">
<p>To destroy a sampler Y&#8217;C<sub>B</sub>C<sub>R</sub> conversion, call:</p>
</div>
<div id="vkDestroySamplerYcbcrConversion" class="listingblock">
<div class="content">
<pre class="highlight"><code class="language-c++" data-lang="c++">void vkDestroySamplerYcbcrConversion(
    VkDevice                                    device,
    VkSamplerYcbcrConversion                    ycbcrConversion,
    const VkAllocationCallbacks*                pAllocator);</code></pre>
</div>
</div>
<div class="paragraph">
<p>or the equivalent command</p>
</div>
<div id="vkDestroySamplerYcbcrConversionKHR" class="listingblock">
<div class="content">
<pre class="highlight"><code class="language-c++" data-lang="c++">void vkDestroySamplerYcbcrConversionKHR(
    VkDevice                                    device,
    VkSamplerYcbcrConversion                    ycbcrConversion,
    const VkAllocationCallbacks*                pAllocator);</code></pre>
</div>
</div>
</div>
<div class="sect3">
<h4 id="_parameters_175">Parameters</h4>
<div class="ulist">
<ul>
<li>
<p><code>device</code> is the logical device that destroys the Y&#8217;C<sub>B</sub>C<sub>R</sub>
conversion.</p>
</li>
<li>
<p><code>ycbcrConversion</code> is the conversion to destroy.</p>
</li>
<li>
<p><code>pAllocator</code> controls host memory allocation as described in the
<a href="vkspec.html#memory-allocation">Memory Allocation</a> chapter.</p>
</li>
</ul>
</div>
</div>
<div class="sect3">
<h4 id="_description_175">Description</h4>
<div class="sidebarblock">
<div class="content">
<div class="title">Valid Usage (Implicit)</div>
<div class="ulist">
<ul>
<li>
<p><a id="VUID-vkDestroySamplerYcbcrConversion-device-parameter"></a> <code>device</code> <strong class="purple">must</strong> be a valid <code>VkDevice</code> handle</p>
</li>
<li>
<p><a id="VUID-vkDestroySamplerYcbcrConversion-ycbcrConversion-parameter"></a> If <code>ycbcrConversion</code> is not <a href="#VK_NULL_HANDLE">VK_NULL_HANDLE</a>, <code>ycbcrConversion</code> <strong class="purple">must</strong> be a valid <code>VkSamplerYcbcrConversion</code> handle</p>
</li>
<li>
<p><a id="VUID-vkDestroySamplerYcbcrConversion-pAllocator-parameter"></a> If <code>pAllocator</code> is not <code>NULL</code>, <code>pAllocator</code> <strong class="purple">must</strong> be a valid pointer to a valid <code>VkAllocationCallbacks</code> structure</p>
</li>
<li>
<p><a id="VUID-vkDestroySamplerYcbcrConversion-ycbcrConversion-parent"></a> If <code>ycbcrConversion</code> is a valid handle, it <strong class="purple">must</strong> have been created, allocated, or retrieved from <code>device</code></p>
</li>
</ul>
</div>
</div>
</div>
<div class="sidebarblock">
<div class="content">
<div class="title">Host Synchronization</div>
<div class="ulist">
<ul>
<li>
<p>Host access to <code>ycbcrConversion</code> <strong class="purple">must</strong> be externally synchronized</p>
</li>
</ul>
</div>
</div>
</div>
</div>
<div class="sect3">
<h4 id="_see_also_175">See Also</h4>
<div class="paragraph">
<p><a href="#VkAllocationCallbacks">VkAllocationCallbacks</a>, <a href="#VkDevice">VkDevice</a>, <a href="#VkSamplerYcbcrConversion">VkSamplerYcbcrConversion</a></p>
</div>
</div>
<div class="sect3">
<h4 id="_document_notes_175">Document Notes</h4>
<div class="paragraph">
<p>For more information, see the Vulkan Specification at URL</p>
</div>
<div class="paragraph">
<p><a href="https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#vkDestroySamplerYcbcrConversion" class="bare">https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#vkDestroySamplerYcbcrConversion</a></p>
</div>
<div class="paragraph">
<p>This page is extracted from the Vulkan Specification.
Fixes and changes should be made to the Specification, not directly.</p>
</div>
<div style="page-break-after: always;"></div>
</div>
</div>
<div class="sect2">
<h3 id="_vkdestroysemaphore3">vkDestroySemaphore(3)</h3>
<div class="sect3">
<h4 id="_name_176">Name</h4>
<div class="paragraph">
<p>vkDestroySemaphore - Destroy a semaphore object</p>
</div>
</div>
<div class="sect3">
<h4 id="_c_specification_176">C Specification</h4>
<div class="paragraph">
<p>To destroy a semaphore, call:</p>
</div>
<div id="vkDestroySemaphore" class="listingblock">
<div class="content">
<pre class="highlight"><code class="language-c++" data-lang="c++">void vkDestroySemaphore(
    VkDevice                                    device,
    VkSemaphore                                 semaphore,
    const VkAllocationCallbacks*                pAllocator);</code></pre>
</div>
</div>
</div>
<div class="sect3">
<h4 id="_parameters_176">Parameters</h4>
<div class="ulist">
<ul>
<li>
<p><code>device</code> is the logical device that destroys the semaphore.</p>
</li>
<li>
<p><code>semaphore</code> is the handle of the semaphore to destroy.</p>
</li>
<li>
<p><code>pAllocator</code> controls host memory allocation as described in the
<a href="vkspec.html#memory-allocation">Memory Allocation</a> chapter.</p>
</li>
</ul>
</div>
</div>
<div class="sect3">
<h4 id="_description_176">Description</h4>
<div class="sidebarblock">
<div class="content">
<div class="title">Valid Usage</div>
<div class="ulist">
<ul>
<li>
<p><a id="VUID-vkDestroySemaphore-semaphore-01137"></a>
All submitted batches that refer to <code>semaphore</code> <strong class="purple">must</strong> have completed
execution</p>
</li>
<li>
<p><a id="VUID-vkDestroySemaphore-semaphore-01138"></a>
If <code>VkAllocationCallbacks</code> were provided when <code>semaphore</code> was
created, a compatible set of callbacks <strong class="purple">must</strong> be provided here</p>
</li>
<li>
<p><a id="VUID-vkDestroySemaphore-semaphore-01139"></a>
If no <code>VkAllocationCallbacks</code> were provided when <code>semaphore</code> was
created, <code>pAllocator</code> <strong class="purple">must</strong> be <code>NULL</code></p>
</li>
</ul>
</div>
</div>
</div>
<div class="sidebarblock">
<div class="content">
<div class="title">Valid Usage (Implicit)</div>
<div class="ulist">
<ul>
<li>
<p><a id="VUID-vkDestroySemaphore-device-parameter"></a> <code>device</code> <strong class="purple">must</strong> be a valid <code>VkDevice</code> handle</p>
</li>
<li>
<p><a id="VUID-vkDestroySemaphore-semaphore-parameter"></a> If <code>semaphore</code> is not <a href="#VK_NULL_HANDLE">VK_NULL_HANDLE</a>, <code>semaphore</code> <strong class="purple">must</strong> be a valid <code>VkSemaphore</code> handle</p>
</li>
<li>
<p><a id="VUID-vkDestroySemaphore-pAllocator-parameter"></a> If <code>pAllocator</code> is not <code>NULL</code>, <code>pAllocator</code> <strong class="purple">must</strong> be a valid pointer to a valid <code>VkAllocationCallbacks</code> structure</p>
</li>
<li>
<p><a id="VUID-vkDestroySemaphore-semaphore-parent"></a> If <code>semaphore</code> is a valid handle, it <strong class="purple">must</strong> have been created, allocated, or retrieved from <code>device</code></p>
</li>
</ul>
</div>
</div>
</div>
<div class="sidebarblock">
<div class="content">
<div class="title">Host Synchronization</div>
<div class="ulist">
<ul>
<li>
<p>Host access to <code>semaphore</code> <strong class="purple">must</strong> be externally synchronized</p>
</li>
</ul>
</div>
</div>
</div>
</div>
<div class="sect3">
<h4 id="_see_also_176">See Also</h4>
<div class="paragraph">
<p><a href="#VkAllocationCallbacks">VkAllocationCallbacks</a>, <a href="#VkDevice">VkDevice</a>, <a href="#VkSemaphore">VkSemaphore</a></p>
</div>
</div>
<div class="sect3">
<h4 id="_document_notes_176">Document Notes</h4>
<div class="paragraph">
<p>For more information, see the Vulkan Specification at URL</p>
</div>
<div class="paragraph">
<p><a href="https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#vkDestroySemaphore" class="bare">https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#vkDestroySemaphore</a></p>
</div>
<div class="paragraph">
<p>This page is extracted from the Vulkan Specification.
Fixes and changes should be made to the Specification, not directly.</p>
</div>
<div style="page-break-after: always;"></div>
</div>
</div>
<div class="sect2">
<h3 id="_vkdestroyshadermodule3">vkDestroyShaderModule(3)</h3>
<div class="sect3">
<h4 id="_name_177">Name</h4>
<div class="paragraph">
<p>vkDestroyShaderModule - Destroy a shader module</p>
</div>
</div>
<div class="sect3">
<h4 id="_c_specification_177">C Specification</h4>
<div class="paragraph">
<p>To destroy a shader module, call:</p>
</div>
<div id="vkDestroyShaderModule" class="listingblock">
<div class="content">
<pre class="highlight"><code class="language-c++" data-lang="c++">void vkDestroyShaderModule(
    VkDevice                                    device,
    VkShaderModule                              shaderModule,
    const VkAllocationCallbacks*                pAllocator);</code></pre>
</div>
</div>
</div>
<div class="sect3">
<h4 id="_parameters_177">Parameters</h4>
<div class="ulist">
<ul>
<li>
<p><code>device</code> is the logical device that destroys the shader module.</p>
</li>
<li>
<p><code>shaderModule</code> is the handle of the shader module to destroy.</p>
</li>
<li>
<p><code>pAllocator</code> controls host memory allocation as described in the
<a href="vkspec.html#memory-allocation">Memory Allocation</a> chapter.</p>
</li>
</ul>
</div>
</div>
<div class="sect3">
<h4 id="_description_177">Description</h4>
<div class="paragraph">
<p>A shader module <strong class="purple">can</strong> be destroyed while pipelines created using its shaders
are still in use.</p>
</div>
<div class="sidebarblock">
<div class="content">
<div class="title">Valid Usage</div>
<div class="ulist">
<ul>
<li>
<p><a id="VUID-vkDestroyShaderModule-shaderModule-01092"></a>
If <code>VkAllocationCallbacks</code> were provided when <code>shaderModule</code> was
created, a compatible set of callbacks <strong class="purple">must</strong> be provided here</p>
</li>
<li>
<p><a id="VUID-vkDestroyShaderModule-shaderModule-01093"></a>
If no <code>VkAllocationCallbacks</code> were provided when <code>shaderModule</code>
was created, <code>pAllocator</code> <strong class="purple">must</strong> be <code>NULL</code></p>
</li>
</ul>
</div>
</div>
</div>
<div class="sidebarblock">
<div class="content">
<div class="title">Valid Usage (Implicit)</div>
<div class="ulist">
<ul>
<li>
<p><a id="VUID-vkDestroyShaderModule-device-parameter"></a> <code>device</code> <strong class="purple">must</strong> be a valid <code>VkDevice</code> handle</p>
</li>
<li>
<p><a id="VUID-vkDestroyShaderModule-shaderModule-parameter"></a> If <code>shaderModule</code> is not <a href="#VK_NULL_HANDLE">VK_NULL_HANDLE</a>, <code>shaderModule</code> <strong class="purple">must</strong> be a valid <code>VkShaderModule</code> handle</p>
</li>
<li>
<p><a id="VUID-vkDestroyShaderModule-pAllocator-parameter"></a> If <code>pAllocator</code> is not <code>NULL</code>, <code>pAllocator</code> <strong class="purple">must</strong> be a valid pointer to a valid <code>VkAllocationCallbacks</code> structure</p>
</li>
<li>
<p><a id="VUID-vkDestroyShaderModule-shaderModule-parent"></a> If <code>shaderModule</code> is a valid handle, it <strong class="purple">must</strong> have been created, allocated, or retrieved from <code>device</code></p>
</li>
</ul>
</div>
</div>
</div>
<div class="sidebarblock">
<div class="content">
<div class="title">Host Synchronization</div>
<div class="ulist">
<ul>
<li>
<p>Host access to <code>shaderModule</code> <strong class="purple">must</strong> be externally synchronized</p>
</li>
</ul>
</div>
</div>
</div>
</div>
<div class="sect3">
<h4 id="_see_also_177">See Also</h4>
<div class="paragraph">
<p><a href="#VkAllocationCallbacks">VkAllocationCallbacks</a>, <a href="#VkDevice">VkDevice</a>, <a href="#VkShaderModule">VkShaderModule</a></p>
</div>
</div>
<div class="sect3">
<h4 id="_document_notes_177">Document Notes</h4>
<div class="paragraph">
<p>For more information, see the Vulkan Specification at URL</p>
</div>
<div class="paragraph">
<p><a href="https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#vkDestroyShaderModule" class="bare">https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#vkDestroyShaderModule</a></p>
</div>
<div class="paragraph">
<p>This page is extracted from the Vulkan Specification.
Fixes and changes should be made to the Specification, not directly.</p>
</div>
<div style="page-break-after: always;"></div>
</div>
</div>
<div class="sect2">
<h3 id="_vkdestroysurfacekhr3">vkDestroySurfaceKHR(3)</h3>
<div class="sect3">
<h4 id="_name_178">Name</h4>
<div class="paragraph">
<p>vkDestroySurfaceKHR - Destroy a VkSurfaceKHR object</p>
</div>
</div>
<div class="sect3">
<h4 id="_c_specification_178">C Specification</h4>
<div class="paragraph">
<p>To destroy a <code>VkSurfaceKHR</code> object, call:</p>
</div>
<div id="vkDestroySurfaceKHR" class="listingblock">
<div class="content">
<pre class="highlight"><code class="language-c++" data-lang="c++">void vkDestroySurfaceKHR(
    VkInstance                                  instance,
    VkSurfaceKHR                                surface,
    const VkAllocationCallbacks*                pAllocator);</code></pre>
</div>
</div>
</div>
<div class="sect3">
<h4 id="_parameters_178">Parameters</h4>
<div class="ulist">
<ul>
<li>
<p><code>instance</code> is the instance used to create the surface.</p>
</li>
<li>
<p><code>surface</code> is the surface to destroy.</p>
</li>
<li>
<p><code>pAllocator</code> is the allocator used for host memory allocated for the
surface object when there is no more specific allocator available (see
<a href="vkspec.html#memory-allocation">Memory Allocation</a>).</p>
</li>
</ul>
</div>
</div>
<div class="sect3">
<h4 id="_description_178">Description</h4>
<div class="paragraph">
<p>Destroying a <code>VkSurfaceKHR</code> merely severs the connection between Vulkan
and the native surface, and does not imply destroying the native surface,
closing a window, or similar behavior.</p>
</div>
<div class="sidebarblock">
<div class="content">
<div class="title">Valid Usage</div>
<div class="ulist">
<ul>
<li>
<p><a id="VUID-vkDestroySurfaceKHR-surface-01266"></a>
All <code>VkSwapchainKHR</code> objects created for <code>surface</code> <strong class="purple">must</strong> have
been destroyed prior to destroying <code>surface</code></p>
</li>
<li>
<p><a id="VUID-vkDestroySurfaceKHR-surface-01267"></a>
If <code>VkAllocationCallbacks</code> were provided when <code>surface</code> was
created, a compatible set of callbacks <strong class="purple">must</strong> be provided here</p>
</li>
<li>
<p><a id="VUID-vkDestroySurfaceKHR-surface-01268"></a>
If no <code>VkAllocationCallbacks</code> were provided when <code>surface</code> was
created, <code>pAllocator</code> <strong class="purple">must</strong> be <code>NULL</code></p>
</li>
</ul>
</div>
</div>
</div>
<div class="sidebarblock">
<div class="content">
<div class="title">Valid Usage (Implicit)</div>
<div class="ulist">
<ul>
<li>
<p><a id="VUID-vkDestroySurfaceKHR-instance-parameter"></a> <code>instance</code> <strong class="purple">must</strong> be a valid <code>VkInstance</code> handle</p>
</li>
<li>
<p><a id="VUID-vkDestroySurfaceKHR-surface-parameter"></a> If <code>surface</code> is not <a href="#VK_NULL_HANDLE">VK_NULL_HANDLE</a>, <code>surface</code> <strong class="purple">must</strong> be a valid <code>VkSurfaceKHR</code> handle</p>
</li>
<li>
<p><a id="VUID-vkDestroySurfaceKHR-pAllocator-parameter"></a> If <code>pAllocator</code> is not <code>NULL</code>, <code>pAllocator</code> <strong class="purple">must</strong> be a valid pointer to a valid <code>VkAllocationCallbacks</code> structure</p>
</li>
<li>
<p><a id="VUID-vkDestroySurfaceKHR-surface-parent"></a> If <code>surface</code> is a valid handle, it <strong class="purple">must</strong> have been created, allocated, or retrieved from <code>instance</code></p>
</li>
</ul>
</div>
</div>
</div>
<div class="sidebarblock">
<div class="content">
<div class="title">Host Synchronization</div>
<div class="ulist">
<ul>
<li>
<p>Host access to <code>surface</code> <strong class="purple">must</strong> be externally synchronized</p>
</li>
</ul>
</div>
</div>
</div>
</div>
<div class="sect3">
<h4 id="_see_also_178">See Also</h4>
<div class="paragraph">
<p><a href="#VkAllocationCallbacks">VkAllocationCallbacks</a>, <a href="#VkInstance">VkInstance</a>, <a href="#VkSurfaceKHR">VkSurfaceKHR</a></p>
</div>
</div>
<div class="sect3">
<h4 id="_document_notes_178">Document Notes</h4>
<div class="paragraph">
<p>For more information, see the Vulkan Specification at URL</p>
</div>
<div class="paragraph">
<p><a href="https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#vkDestroySurfaceKHR" class="bare">https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#vkDestroySurfaceKHR</a></p>
</div>
<div class="paragraph">
<p>This page is extracted from the Vulkan Specification.
Fixes and changes should be made to the Specification, not directly.</p>
</div>
<div style="page-break-after: always;"></div>
</div>
</div>
<div class="sect2">
<h3 id="_vkdestroyswapchainkhr3">vkDestroySwapchainKHR(3)</h3>
<div class="sect3">
<h4 id="_name_179">Name</h4>
<div class="paragraph">
<p>vkDestroySwapchainKHR - Destroy a swapchain object</p>
</div>
</div>
<div class="sect3">
<h4 id="_c_specification_179">C Specification</h4>
<div class="paragraph">
<p>To destroy a swapchain object call:</p>
</div>
<div id="vkDestroySwapchainKHR" class="listingblock">
<div class="content">
<pre class="highlight"><code class="language-c++" data-lang="c++">void vkDestroySwapchainKHR(
    VkDevice                                    device,
    VkSwapchainKHR                              swapchain,
    const VkAllocationCallbacks*                pAllocator);</code></pre>
</div>
</div>
</div>
<div class="sect3">
<h4 id="_parameters_179">Parameters</h4>
<div class="ulist">
<ul>
<li>
<p><code>device</code> is the <a href="#VkDevice">VkDevice</a> associated with <code>swapchain</code>.</p>
</li>
<li>
<p><code>swapchain</code> is the swapchain to destroy.</p>
</li>
<li>
<p><code>pAllocator</code> is the allocator used for host memory allocated for the
swapchain object when there is no more specific allocator available (see
<a href="vkspec.html#memory-allocation">Memory Allocation</a>).</p>
</li>
</ul>
</div>
</div>
<div class="sect3">
<h4 id="_description_179">Description</h4>
<div class="paragraph">
<p>The application <strong class="purple">must</strong> not destroy a swapchain until after completion of all
outstanding operations on images that were acquired from the swapchain.
<code>swapchain</code> and all associated <code>VkImage</code> handles are destroyed, and
<strong class="purple">must</strong> not be acquired or used any more by the application.
The memory of each <code>VkImage</code> will only be freed after that image is no
longer used by the presentation engine.
For example, if one image of the swapchain is being displayed in a window,
the memory for that image <strong class="purple">may</strong> not be freed until the window is destroyed,
or another swapchain is created for the window.
Destroying the swapchain does not invalidate the parent <code>VkSurfaceKHR</code>,
and a new swapchain <strong class="purple">can</strong> be created with it.</p>
</div>
<div class="paragraph">
<p>When a swapchain associated with a display surface is destroyed, if the
image most recently presented to the display surface is from the swapchain
being destroyed, then either any display resources modified by presenting
images from any swapchain associated with the display surface <strong class="purple">must</strong> be
reverted by the implementation to their state prior to the first present
performed on one of these swapchains, or such resources <strong class="purple">must</strong> be left in
their current state.</p>
</div>
<div class="paragraph">
<p>If <code>swapchain</code> has exclusive full-screen access, it is released before
the swapchain is destroyed.</p>
</div>
<div class="sidebarblock">
<div class="content">
<div class="title">Valid Usage</div>
<div class="ulist">
<ul>
<li>
<p><a id="VUID-vkDestroySwapchainKHR-swapchain-01282"></a>
All uses of presentable images acquired from <code>swapchain</code> <strong class="purple">must</strong> have
completed execution</p>
</li>
<li>
<p><a id="VUID-vkDestroySwapchainKHR-swapchain-01283"></a>
If <code>VkAllocationCallbacks</code> were provided when <code>swapchain</code> was
created, a compatible set of callbacks <strong class="purple">must</strong> be provided here</p>
</li>
<li>
<p><a id="VUID-vkDestroySwapchainKHR-swapchain-01284"></a>
If no <code>VkAllocationCallbacks</code> were provided when <code>swapchain</code> was
created, <code>pAllocator</code> <strong class="purple">must</strong> be <code>NULL</code></p>
</li>
</ul>
</div>
</div>
</div>
<div class="sidebarblock">
<div class="content">
<div class="title">Valid Usage (Implicit)</div>
<div class="ulist">
<ul>
<li>
<p><a id="VUID-vkDestroySwapchainKHR-device-parameter"></a> <code>device</code> <strong class="purple">must</strong> be a valid <code>VkDevice</code> handle</p>
</li>
<li>
<p><a id="VUID-vkDestroySwapchainKHR-swapchain-parameter"></a> If <code>swapchain</code> is not <a href="#VK_NULL_HANDLE">VK_NULL_HANDLE</a>, <code>swapchain</code> <strong class="purple">must</strong> be a valid <code>VkSwapchainKHR</code> handle</p>
</li>
<li>
<p><a id="VUID-vkDestroySwapchainKHR-pAllocator-parameter"></a> If <code>pAllocator</code> is not <code>NULL</code>, <code>pAllocator</code> <strong class="purple">must</strong> be a valid pointer to a valid <code>VkAllocationCallbacks</code> structure</p>
</li>
<li>
<p><a id="VUID-vkDestroySwapchainKHR-commonparent"></a> Both of <code>device</code>, and <code>swapchain</code> that are valid handles <strong class="purple">must</strong> have been created, allocated, or retrieved from the same <code>VkInstance</code></p>
</li>
</ul>
</div>
</div>
</div>
<div class="sidebarblock">
<div class="content">
<div class="title">Host Synchronization</div>
<div class="ulist">
<ul>
<li>
<p>Host access to <code>swapchain</code> <strong class="purple">must</strong> be externally synchronized</p>
</li>
</ul>
</div>
</div>
</div>
</div>
<div class="sect3">
<h4 id="_see_also_179">See Also</h4>
<div class="paragraph">
<p><a href="#VkAllocationCallbacks">VkAllocationCallbacks</a>, <a href="#VkDevice">VkDevice</a>, <a href="#VkSwapchainKHR">VkSwapchainKHR</a></p>
</div>
</div>
<div class="sect3">
<h4 id="_document_notes_179">Document Notes</h4>
<div class="paragraph">
<p>For more information, see the Vulkan Specification at URL</p>
</div>
<div class="paragraph">
<p><a href="https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#vkDestroySwapchainKHR" class="bare">https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#vkDestroySwapchainKHR</a></p>
</div>
<div class="paragraph">
<p>This page is extracted from the Vulkan Specification.
Fixes and changes should be made to the Specification, not directly.</p>
</div>
<div style="page-break-after: always;"></div>
</div>
</div>
<div class="sect2">
<h3 id="_vkdestroyvalidationcacheext3">vkDestroyValidationCacheEXT(3)</h3>
<div class="sect3">
<h4 id="_name_180">Name</h4>
<div class="paragraph">
<p>vkDestroyValidationCacheEXT - Destroy a validation cache object</p>
</div>
</div>
<div class="sect3">
<h4 id="_c_specification_180">C Specification</h4>
<div class="paragraph">
<p>To destroy a validation cache, call:</p>
</div>
<div id="vkDestroyValidationCacheEXT" class="listingblock">
<div class="content">
<pre class="highlight"><code class="language-c++" data-lang="c++">void vkDestroyValidationCacheEXT(
    VkDevice                                    device,
    VkValidationCacheEXT                        validationCache,
    const VkAllocationCallbacks*                pAllocator);</code></pre>
</div>
</div>
</div>
<div class="sect3">
<h4 id="_parameters_180">Parameters</h4>
<div class="ulist">
<ul>
<li>
<p><code>device</code> is the logical device that destroys the validation cache
object.</p>
</li>
<li>
<p><code>validationCache</code> is the handle of the validation cache to destroy.</p>
</li>
<li>
<p><code>pAllocator</code> controls host memory allocation as described in the
<a href="vkspec.html#memory-allocation">Memory Allocation</a> chapter.</p>
</li>
</ul>
</div>
</div>
<div class="sect3">
<h4 id="_description_180">Description</h4>
<div class="sidebarblock">
<div class="content">
<div class="title">Valid Usage</div>
<div class="ulist">
<ul>
<li>
<p><a id="VUID-vkDestroyValidationCacheEXT-validationCache-01537"></a>
If <code>VkAllocationCallbacks</code> were provided when <code>validationCache</code>
was created, a compatible set of callbacks <strong class="purple">must</strong> be provided here</p>
</li>
<li>
<p><a id="VUID-vkDestroyValidationCacheEXT-validationCache-01538"></a>
If no <code>VkAllocationCallbacks</code> were provided when
<code>validationCache</code> was created, <code>pAllocator</code> <strong class="purple">must</strong> be <code>NULL</code></p>
</li>
</ul>
</div>
</div>
</div>
<div class="sidebarblock">
<div class="content">
<div class="title">Valid Usage (Implicit)</div>
<div class="ulist">
<ul>
<li>
<p><a id="VUID-vkDestroyValidationCacheEXT-device-parameter"></a> <code>device</code> <strong class="purple">must</strong> be a valid <code>VkDevice</code> handle</p>
</li>
<li>
<p><a id="VUID-vkDestroyValidationCacheEXT-validationCache-parameter"></a> If <code>validationCache</code> is not <a href="#VK_NULL_HANDLE">VK_NULL_HANDLE</a>, <code>validationCache</code> <strong class="purple">must</strong> be a valid <code>VkValidationCacheEXT</code> handle</p>
</li>
<li>
<p><a id="VUID-vkDestroyValidationCacheEXT-pAllocator-parameter"></a> If <code>pAllocator</code> is not <code>NULL</code>, <code>pAllocator</code> <strong class="purple">must</strong> be a valid pointer to a valid <code>VkAllocationCallbacks</code> structure</p>
</li>
<li>
<p><a id="VUID-vkDestroyValidationCacheEXT-validationCache-parent"></a> If <code>validationCache</code> is a valid handle, it <strong class="purple">must</strong> have been created, allocated, or retrieved from <code>device</code></p>
</li>
</ul>
</div>
</div>
</div>
<div class="sidebarblock">
<div class="content">
<div class="title">Host Synchronization</div>
<div class="ulist">
<ul>
<li>
<p>Host access to <code>validationCache</code> <strong class="purple">must</strong> be externally synchronized</p>
</li>
</ul>
</div>
</div>
</div>
</div>
<div class="sect3">
<h4 id="_see_also_180">See Also</h4>
<div class="paragraph">
<p><a href="#VkAllocationCallbacks">VkAllocationCallbacks</a>, <a href="#VkDevice">VkDevice</a>, <a href="#VkValidationCacheEXT">VkValidationCacheEXT</a></p>
</div>
</div>
<div class="sect3">
<h4 id="_document_notes_180">Document Notes</h4>
<div class="paragraph">
<p>For more information, see the Vulkan Specification at URL</p>
</div>
<div class="paragraph">
<p><a href="https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#vkDestroyValidationCacheEXT" class="bare">https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#vkDestroyValidationCacheEXT</a></p>
</div>
<div class="paragraph">
<p>This page is extracted from the Vulkan Specification.
Fixes and changes should be made to the Specification, not directly.</p>
</div>
<div style="page-break-after: always;"></div>
</div>
</div>
<div class="sect2">
<h3 id="_vkdevicewaitidle3">vkDeviceWaitIdle(3)</h3>
<div class="sect3">
<h4 id="_name_181">Name</h4>
<div class="paragraph">
<p>vkDeviceWaitIdle - Wait for a device to become idle</p>
</div>
</div>
<div class="sect3">
<h4 id="_c_specification_181">C Specification</h4>
<div class="paragraph">
<p>To wait on the host for the completion of outstanding queue operations for
all queues on a given logical device, call:</p>
</div>
<div id="vkDeviceWaitIdle" class="listingblock">
<div class="content">
<pre class="highlight"><code class="language-c++" data-lang="c++">VkResult vkDeviceWaitIdle(
    VkDevice                                    device);</code></pre>
</div>
</div>
</div>
<div class="sect3">
<h4 id="_parameters_181">Parameters</h4>
<div class="ulist">
<ul>
<li>
<p><code>device</code> is the logical device to idle.</p>
</li>
</ul>
</div>
</div>
<div class="sect3">
<h4 id="_description_181">Description</h4>
<div class="paragraph">
<p><code>vkDeviceWaitIdle</code> is equivalent to calling <code>vkQueueWaitIdle</code> for
all queues owned by <code>device</code>.</p>
</div>
<div class="sidebarblock">
<div class="content">
<div class="title">Valid Usage (Implicit)</div>
<div class="ulist">
<ul>
<li>
<p><a id="VUID-vkDeviceWaitIdle-device-parameter"></a> <code>device</code> <strong class="purple">must</strong> be a valid <code>VkDevice</code> handle</p>
</li>
</ul>
</div>
</div>
</div>
<div class="sidebarblock">
<div class="content">
<div class="title">Host Synchronization</div>
<div class="ulist">
<ul>
<li>
<p>Host access to all <code>VkQueue</code> objects created from <code>device</code> <strong class="purple">must</strong> be externally synchronized</p>
</li>
</ul>
</div>
</div>
</div>
<div class="sidebarblock">
<div class="content">
<div class="title">Return Codes</div>
<div class="dlist">
<dl>
<dt class="hdlist1"><a href="#fundamentals-successcodes">Success</a></dt>
<dd>
<div class="ulist">
<ul>
<li>
<p><code>VK_SUCCESS</code></p>
</li>
</ul>
</div>
</dd>
<dt class="hdlist1"><a href="#fundamentals-errorcodes">Failure</a></dt>
<dd>
<div class="ulist">
<ul>
<li>
<p><code>VK_ERROR_OUT_OF_HOST_MEMORY</code></p>
</li>
<li>
<p><code>VK_ERROR_OUT_OF_DEVICE_MEMORY</code></p>
</li>
<li>
<p><code>VK_ERROR_DEVICE_LOST</code></p>
</li>
</ul>
</div>
</dd>
</dl>
</div>
</div>
</div>
</div>
<div class="sect3">
<h4 id="_see_also_181">See Also</h4>
<div class="paragraph">
<p><a href="#VkDevice">VkDevice</a></p>
</div>
</div>
<div class="sect3">
<h4 id="_document_notes_181">Document Notes</h4>
<div class="paragraph">
<p>For more information, see the Vulkan Specification at URL</p>
</div>
<div class="paragraph">
<p><a href="https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#vkDeviceWaitIdle" class="bare">https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#vkDeviceWaitIdle</a></p>
</div>
<div class="paragraph">
<p>This page is extracted from the Vulkan Specification.
Fixes and changes should be made to the Specification, not directly.</p>
</div>
<div style="page-break-after: always;"></div>
</div>
</div>
<div class="sect2">
<h3 id="_vkdisplaypowercontrolext3">vkDisplayPowerControlEXT(3)</h3>
<div class="sect3">
<h4 id="_name_182">Name</h4>
<div class="paragraph">
<p>vkDisplayPowerControlEXT - Set the power state of a display</p>
</div>
</div>
<div class="sect3">
<h4 id="_c_specification_182">C Specification</h4>
<div class="paragraph">
<p>To set the power state of a display, call:</p>
</div>
<div id="vkDisplayPowerControlEXT" class="listingblock">
<div class="content">
<pre class="highlight"><code class="language-c++" data-lang="c++">VkResult vkDisplayPowerControlEXT(
    VkDevice                                    device,
    VkDisplayKHR                                display,
    const VkDisplayPowerInfoEXT*                pDisplayPowerInfo);</code></pre>
</div>
</div>
</div>
<div class="sect3">
<h4 id="_parameters_182">Parameters</h4>
<div class="ulist">
<ul>
<li>
<p><code>device</code> is a logical device associated with <code>display</code>.</p>
</li>
<li>
<p><code>display</code> is the display whose power state is modified.</p>
</li>
<li>
<p><code>pDisplayPowerInfo</code> is an instance of <a href="#VkDisplayPowerInfoEXT">VkDisplayPowerInfoEXT</a>
specifying the new power state of <code>display</code>.</p>
</li>
</ul>
</div>
</div>
<div class="sect3">
<h4 id="_description_182">Description</h4>
<div class="sidebarblock">
<div class="content">
<div class="title">Valid Usage (Implicit)</div>
<div class="ulist">
<ul>
<li>
<p><a id="VUID-vkDisplayPowerControlEXT-device-parameter"></a> <code>device</code> <strong class="purple">must</strong> be a valid <code>VkDevice</code> handle</p>
</li>
<li>
<p><a id="VUID-vkDisplayPowerControlEXT-display-parameter"></a> <code>display</code> <strong class="purple">must</strong> be a valid <code>VkDisplayKHR</code> handle</p>
</li>
<li>
<p><a id="VUID-vkDisplayPowerControlEXT-pDisplayPowerInfo-parameter"></a> <code>pDisplayPowerInfo</code> <strong class="purple">must</strong> be a valid pointer to a valid <code>VkDisplayPowerInfoEXT</code> structure</p>
</li>
</ul>
</div>
</div>
</div>
<div class="sidebarblock">
<div class="content">
<div class="title">Return Codes</div>
<div class="dlist">
<dl>
<dt class="hdlist1"><a href="#fundamentals-successcodes">Success</a></dt>
<dd>
<div class="ulist">
<ul>
<li>
<p><code>VK_SUCCESS</code></p>
</li>
</ul>
</div>
</dd>
</dl>
</div>
</div>
</div>
</div>
<div class="sect3">
<h4 id="_see_also_182">See Also</h4>
<div class="paragraph">
<p><a href="#VkDevice">VkDevice</a>, <a href="#VkDisplayKHR">VkDisplayKHR</a>, <a href="#VkDisplayPowerInfoEXT">VkDisplayPowerInfoEXT</a></p>
</div>
</div>
<div class="sect3">
<h4 id="_document_notes_182">Document Notes</h4>
<div class="paragraph">
<p>For more information, see the Vulkan Specification at URL</p>
</div>
<div class="paragraph">
<p><a href="https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#vkDisplayPowerControlEXT" class="bare">https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#vkDisplayPowerControlEXT</a></p>
</div>
<div class="paragraph">
<p>This page is extracted from the Vulkan Specification.
Fixes and changes should be made to the Specification, not directly.</p>
</div>
<div style="page-break-after: always;"></div>
</div>
</div>
<div class="sect2">
<h3 id="_vkendcommandbuffer3">vkEndCommandBuffer(3)</h3>
<div class="sect3">
<h4 id="_name_183">Name</h4>
<div class="paragraph">
<p>vkEndCommandBuffer - Finish recording a command buffer</p>
</div>
</div>
<div class="sect3">
<h4 id="_c_specification_183">C Specification</h4>
<div class="paragraph">
<p>To complete recording of a command buffer, call:</p>
</div>
<div id="vkEndCommandBuffer" class="listingblock">
<div class="content">
<pre class="highlight"><code class="language-c++" data-lang="c++">VkResult vkEndCommandBuffer(
    VkCommandBuffer                             commandBuffer);</code></pre>
</div>
</div>
</div>
<div class="sect3">
<h4 id="_parameters_183">Parameters</h4>
<div class="ulist">
<ul>
<li>
<p><code>commandBuffer</code> is the command buffer to complete recording.</p>
</li>
</ul>
</div>
</div>
<div class="sect3">
<h4 id="_description_183">Description</h4>
<div class="paragraph">
<p>If there was an error during recording, the application will be notified by
an unsuccessful return code returned by <code>vkEndCommandBuffer</code>.
If the application wishes to further use the command buffer, the command
buffer <strong class="purple">must</strong> be reset.
The command buffer <strong class="purple">must</strong> have been in the <a href="vkspec.html#commandbuffers-lifecycle">recording state</a>, and is moved to the <a href="vkspec.html#commandbuffers-lifecycle">executable state</a>.</p>
</div>
<div class="sidebarblock">
<div class="content">
<div class="title">Valid Usage</div>
<div class="ulist">
<ul>
<li>
<p><a id="VUID-vkEndCommandBuffer-commandBuffer-00059"></a>
<code>commandBuffer</code> <strong class="purple">must</strong> be in the <a href="vkspec.html#commandbuffers-lifecycle">recording state</a>.</p>
</li>
<li>
<p><a id="VUID-vkEndCommandBuffer-commandBuffer-00060"></a>
If <code>commandBuffer</code> is a primary command buffer, there <strong class="purple">must</strong> not be
an active render pass instance</p>
</li>
<li>
<p><a id="VUID-vkEndCommandBuffer-commandBuffer-00061"></a>
All queries made <a href="vkspec.html#queries-operation-active">active</a> during the
recording of <code>commandBuffer</code> <strong class="purple">must</strong> have been made inactive</p>
</li>
<li>
<p><a id="VUID-vkEndCommandBuffer-None-01978"></a>
Conditional rendering must not be
<a href="vkspec.html#active-conditional-rendering">active</a></p>
</li>
<li>
<p><a id="VUID-vkEndCommandBuffer-commandBuffer-01815"></a>
If <code>commandBuffer</code> is a secondary command buffer, there <strong class="purple">must</strong> not be
an outstanding <a href="#vkCmdBeginDebugUtilsLabelEXT">vkCmdBeginDebugUtilsLabelEXT</a> command recorded to
<code>commandBuffer</code> that has not previously been ended by a call to
<a href="#vkCmdEndDebugUtilsLabelEXT">vkCmdEndDebugUtilsLabelEXT</a>.</p>
</li>
<li>
<p><a id="VUID-vkEndCommandBuffer-commandBuffer-00062"></a>
If <code>commandBuffer</code> is a secondary command buffer, there <strong class="purple">must</strong> not be
an outstanding <a href="#vkCmdDebugMarkerBeginEXT">vkCmdDebugMarkerBeginEXT</a> command recorded to
<code>commandBuffer</code> that has not previously been ended by a call to
<a href="#vkCmdDebugMarkerEndEXT">vkCmdDebugMarkerEndEXT</a>.</p>
</li>
</ul>
</div>
</div>
</div>
<div class="sidebarblock">
<div class="content">
<div class="title">Valid Usage (Implicit)</div>
<div class="ulist">
<ul>
<li>
<p><a id="VUID-vkEndCommandBuffer-commandBuffer-parameter"></a> <code>commandBuffer</code> <strong class="purple">must</strong> be a valid <code>VkCommandBuffer</code> handle</p>
</li>
</ul>
</div>
</div>
</div>
<div class="sidebarblock">
<div class="content">
<div class="title">Host Synchronization</div>
<div class="ulist">
<ul>
<li>
<p>Host access to <code>commandBuffer</code> <strong class="purple">must</strong> be externally synchronized</p>
</li>
<li>
<p>Host access to the <code>VkCommandPool</code> that <code>commandBuffer</code> was allocated from <strong class="purple">must</strong> be externally synchronized</p>
</li>
</ul>
</div>
</div>
</div>
<div class="sidebarblock">
<div class="content">
<div class="title">Return Codes</div>
<div class="dlist">
<dl>
<dt class="hdlist1"><a href="#fundamentals-successcodes">Success</a></dt>
<dd>
<div class="ulist">
<ul>
<li>
<p><code>VK_SUCCESS</code></p>
</li>
</ul>
</div>
</dd>
<dt class="hdlist1"><a href="#fundamentals-errorcodes">Failure</a></dt>
<dd>
<div class="ulist">
<ul>
<li>
<p><code>VK_ERROR_OUT_OF_HOST_MEMORY</code></p>
</li>
<li>
<p><code>VK_ERROR_OUT_OF_DEVICE_MEMORY</code></p>
</li>
</ul>
</div>
</dd>
</dl>
</div>
</div>
</div>
</div>
<div class="sect3">
<h4 id="_see_also_183">See Also</h4>
<div class="paragraph">
<p><a href="#VkCommandBuffer">VkCommandBuffer</a></p>
</div>
</div>
<div class="sect3">
<h4 id="_document_notes_183">Document Notes</h4>
<div class="paragraph">
<p>For more information, see the Vulkan Specification at URL</p>
</div>
<div class="paragraph">
<p><a href="https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#vkEndCommandBuffer" class="bare">https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#vkEndCommandBuffer</a></p>
</div>
<div class="paragraph">
<p>This page is extracted from the Vulkan Specification.
Fixes and changes should be made to the Specification, not directly.</p>
</div>
<div style="page-break-after: always;"></div>
</div>
</div>
<div class="sect2">
<h3 id="_vkenumeratedeviceextensionproperties3">vkEnumerateDeviceExtensionProperties(3)</h3>
<div class="sect3">
<h4 id="_name_184">Name</h4>
<div class="paragraph">
<p>vkEnumerateDeviceExtensionProperties - Returns properties of available physical device extensions</p>
</div>
</div>
<div class="sect3">
<h4 id="_c_specification_184">C Specification</h4>
<div class="paragraph">
<p>To query the extensions available to a given physical device, call:</p>
</div>
<div id="vkEnumerateDeviceExtensionProperties" class="listingblock">
<div class="content">
<pre class="highlight"><code class="language-c++" data-lang="c++">VkResult vkEnumerateDeviceExtensionProperties(
    VkPhysicalDevice                            physicalDevice,
    const char*                                 pLayerName,
    uint32_t*                                   pPropertyCount,
    VkExtensionProperties*                      pProperties);</code></pre>
</div>
</div>
</div>
<div class="sect3">
<h4 id="_parameters_184">Parameters</h4>
<div class="ulist">
<ul>
<li>
<p><code>physicalDevice</code> is the physical device that will be queried.</p>
</li>
<li>
<p><code>pLayerName</code> is either <code>NULL</code> or a pointer to a null-terminated
UTF-8 string naming the layer to retrieve extensions from.</p>
</li>
<li>
<p><code>pPropertyCount</code> is a pointer to an integer related to the number of
extension properties available or queried, and is treated in the same
fashion as the
<a href="#vkEnumerateInstanceExtensionProperties">vkEnumerateInstanceExtensionProperties</a>::<code>pPropertyCount</code>
parameter.</p>
</li>
<li>
<p><code>pProperties</code> is either <code>NULL</code> or a pointer to an array of
<a href="#VkExtensionProperties">VkExtensionProperties</a> structures.</p>
</li>
</ul>
</div>
</div>
<div class="sect3">
<h4 id="_description_184">Description</h4>
<div class="paragraph">
<p>When <code>pLayerName</code> parameter is <code>NULL</code>, only extensions provided by the
Vulkan implementation or by implicitly enabled layers are returned.
When <code>pLayerName</code> is the name of a layer, the device extensions provided
by that layer are returned.</p>
</div>
<div class="paragraph">
<p>Implementations <strong class="purple">must</strong> not advertise any pair of extensions that cannot be
enabled together due to behavioral differences, or any extension that cannot
be enabled against the advertised version.</p>
</div>
<div class="sidebarblock">
<div class="content">
<div class="title">Valid Usage (Implicit)</div>
<div class="ulist">
<ul>
<li>
<p><a id="VUID-vkEnumerateDeviceExtensionProperties-physicalDevice-parameter"></a> <code>physicalDevice</code> <strong class="purple">must</strong> be a valid <code>VkPhysicalDevice</code> handle</p>
</li>
<li>
<p><a id="VUID-vkEnumerateDeviceExtensionProperties-pLayerName-parameter"></a> If <code>pLayerName</code> is not <code>NULL</code>, <code>pLayerName</code> <strong class="purple">must</strong> be a null-terminated UTF-8 string</p>
</li>
<li>
<p><a id="VUID-vkEnumerateDeviceExtensionProperties-pPropertyCount-parameter"></a> <code>pPropertyCount</code> <strong class="purple">must</strong> be a valid pointer to a <code>uint32_t</code> value</p>
</li>
<li>
<p><a id="VUID-vkEnumerateDeviceExtensionProperties-pProperties-parameter"></a> If the value referenced by <code>pPropertyCount</code> is not <code>0</code>, and <code>pProperties</code> is not <code>NULL</code>, <code>pProperties</code> <strong class="purple">must</strong> be a valid pointer to an array of <code>pPropertyCount</code> <code>VkExtensionProperties</code> structures</p>
</li>
</ul>
</div>
</div>
</div>
<div class="sidebarblock">
<div class="content">
<div class="title">Return Codes</div>
<div class="dlist">
<dl>
<dt class="hdlist1"><a href="#fundamentals-successcodes">Success</a></dt>
<dd>
<div class="ulist">
<ul>
<li>
<p><code>VK_SUCCESS</code></p>
</li>
<li>
<p><code>VK_INCOMPLETE</code></p>
</li>
</ul>
</div>
</dd>
<dt class="hdlist1"><a href="#fundamentals-errorcodes">Failure</a></dt>
<dd>
<div class="ulist">
<ul>
<li>
<p><code>VK_ERROR_OUT_OF_HOST_MEMORY</code></p>
</li>
<li>
<p><code>VK_ERROR_OUT_OF_DEVICE_MEMORY</code></p>
</li>
<li>
<p><code>VK_ERROR_LAYER_NOT_PRESENT</code></p>
</li>
</ul>
</div>
</dd>
</dl>
</div>
</div>
</div>
</div>
<div class="sect3">
<h4 id="_see_also_184">See Also</h4>
<div class="paragraph">
<p><a href="#VkExtensionProperties">VkExtensionProperties</a>, <a href="#VkPhysicalDevice">VkPhysicalDevice</a></p>
</div>
</div>
<div class="sect3">
<h4 id="_document_notes_184">Document Notes</h4>
<div class="paragraph">
<p>For more information, see the Vulkan Specification at URL</p>
</div>
<div class="paragraph">
<p><a href="https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#vkEnumerateDeviceExtensionProperties" class="bare">https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#vkEnumerateDeviceExtensionProperties</a></p>
</div>
<div class="paragraph">
<p>This page is extracted from the Vulkan Specification.
Fixes and changes should be made to the Specification, not directly.</p>
</div>
<div style="page-break-after: always;"></div>
</div>
</div>
<div class="sect2">
<h3 id="_vkenumeratedevicelayerproperties3">vkEnumerateDeviceLayerProperties(3)</h3>
<div class="sect3">
<h4 id="_name_185">Name</h4>
<div class="paragraph">
<p>vkEnumerateDeviceLayerProperties - Returns properties of available physical device layers</p>
</div>
</div>
<div class="sect3">
<h4 id="_c_specification_185">C Specification</h4>
<div class="paragraph">
<p>To enumerate device layers, call:</p>
</div>
<div id="vkEnumerateDeviceLayerProperties" class="listingblock">
<div class="content">
<pre class="highlight"><code class="language-c++" data-lang="c++">VkResult vkEnumerateDeviceLayerProperties(
    VkPhysicalDevice                            physicalDevice,
    uint32_t*                                   pPropertyCount,
    VkLayerProperties*                          pProperties);</code></pre>
</div>
</div>
</div>
<div class="sect3">
<h4 id="_parameters_185">Parameters</h4>
<div class="ulist">
<ul>
<li>
<p><code>pPropertyCount</code> is a pointer to an integer related to the number of
layer properties available or queried.</p>
</li>
<li>
<p><code>pProperties</code> is either <code>NULL</code> or a pointer to an array of
<a href="#VkLayerProperties">VkLayerProperties</a> structures.</p>
</li>
</ul>
</div>
</div>
<div class="sect3">
<h4 id="_description_185">Description</h4>
<div class="paragraph">
<p>If <code>pProperties</code> is <code>NULL</code>, then the number of layer properties
available is returned in <code>pPropertyCount</code>.
Otherwise, <code>pPropertyCount</code> <strong class="purple">must</strong> point to a variable set by the user to
the number of elements in the <code>pProperties</code> array, and on return the
variable is overwritten with the number of structures actually written to
<code>pProperties</code>.
If <code>pPropertyCount</code> is less than the number of layer properties
available, at most <code>pPropertyCount</code> structures will be written.
If <code>pPropertyCount</code> is smaller than the number of layers available,
<code>VK_INCOMPLETE</code> will be returned instead of <code>VK_SUCCESS</code>, to
indicate that not all the available layer properties were returned.</p>
</div>
<div class="paragraph">
<p>The list of layers enumerated by <code>vkEnumerateDeviceLayerProperties</code>
<strong class="purple">must</strong> be exactly the sequence of layers enabled for the instance.
The members of <code>VkLayerProperties</code> for each enumerated layer <strong class="purple">must</strong> be
the same as the properties when the layer was enumerated by
<code>vkEnumerateInstanceLayerProperties</code>.</p>
</div>
<div class="sidebarblock">
<div class="content">
<div class="title">Valid Usage (Implicit)</div>
<div class="ulist">
<ul>
<li>
<p><a id="VUID-vkEnumerateDeviceLayerProperties-physicalDevice-parameter"></a> <code>physicalDevice</code> <strong class="purple">must</strong> be a valid <code>VkPhysicalDevice</code> handle</p>
</li>
<li>
<p><a id="VUID-vkEnumerateDeviceLayerProperties-pPropertyCount-parameter"></a> <code>pPropertyCount</code> <strong class="purple">must</strong> be a valid pointer to a <code>uint32_t</code> value</p>
</li>
<li>
<p><a id="VUID-vkEnumerateDeviceLayerProperties-pProperties-parameter"></a> If the value referenced by <code>pPropertyCount</code> is not <code>0</code>, and <code>pProperties</code> is not <code>NULL</code>, <code>pProperties</code> <strong class="purple">must</strong> be a valid pointer to an array of <code>pPropertyCount</code> <code>VkLayerProperties</code> structures</p>
</li>
</ul>
</div>
</div>
</div>
<div class="sidebarblock">
<div class="content">
<div class="title">Return Codes</div>
<div class="dlist">
<dl>
<dt class="hdlist1"><a href="#fundamentals-successcodes">Success</a></dt>
<dd>
<div class="ulist">
<ul>
<li>
<p><code>VK_SUCCESS</code></p>
</li>
<li>
<p><code>VK_INCOMPLETE</code></p>
</li>
</ul>
</div>
</dd>
<dt class="hdlist1"><a href="#fundamentals-errorcodes">Failure</a></dt>
<dd>
<div class="ulist">
<ul>
<li>
<p><code>VK_ERROR_OUT_OF_HOST_MEMORY</code></p>
</li>
<li>
<p><code>VK_ERROR_OUT_OF_DEVICE_MEMORY</code></p>
</li>
</ul>
</div>
</dd>
</dl>
</div>
</div>
</div>
</div>
<div class="sect3">
<h4 id="_see_also_185">See Also</h4>
<div class="paragraph">
<p><a href="#VkLayerProperties">VkLayerProperties</a>, <a href="#VkPhysicalDevice">VkPhysicalDevice</a></p>
</div>
</div>
<div class="sect3">
<h4 id="_document_notes_185">Document Notes</h4>
<div class="paragraph">
<p>For more information, see the Vulkan Specification at URL</p>
</div>
<div class="paragraph">
<p><a href="https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#vkEnumerateDeviceLayerProperties" class="bare">https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#vkEnumerateDeviceLayerProperties</a></p>
</div>
<div class="paragraph">
<p>This page is extracted from the Vulkan Specification.
Fixes and changes should be made to the Specification, not directly.</p>
</div>
<div style="page-break-after: always;"></div>
</div>
</div>
<div class="sect2">
<h3 id="_vkenumerateinstanceextensionproperties3">vkEnumerateInstanceExtensionProperties(3)</h3>
<div class="sect3">
<h4 id="_name_186">Name</h4>
<div class="paragraph">
<p>vkEnumerateInstanceExtensionProperties - Returns up to requested number of global extension properties</p>
</div>
</div>
<div class="sect3">
<h4 id="_c_specification_186">C Specification</h4>
<div class="paragraph">
<p>To query the available instance extensions, call:</p>
</div>
<div id="vkEnumerateInstanceExtensionProperties" class="listingblock">
<div class="content">
<pre class="highlight"><code class="language-c++" data-lang="c++">VkResult vkEnumerateInstanceExtensionProperties(
    const char*                                 pLayerName,
    uint32_t*                                   pPropertyCount,
    VkExtensionProperties*                      pProperties);</code></pre>
</div>
</div>
</div>
<div class="sect3">
<h4 id="_parameters_186">Parameters</h4>
<div class="ulist">
<ul>
<li>
<p><code>pLayerName</code> is either <code>NULL</code> or a pointer to a null-terminated
UTF-8 string naming the layer to retrieve extensions from.</p>
</li>
<li>
<p><code>pPropertyCount</code> is a pointer to an integer related to the number of
extension properties available or queried, as described below.</p>
</li>
<li>
<p><code>pProperties</code> is either <code>NULL</code> or a pointer to an array of
<a href="#VkExtensionProperties">VkExtensionProperties</a> structures.</p>
</li>
</ul>
</div>
</div>
<div class="sect3">
<h4 id="_description_186">Description</h4>
<div class="paragraph">
<p>When <code>pLayerName</code> parameter is <code>NULL</code>, only extensions provided by the
Vulkan implementation or by implicitly enabled layers are returned.
When <code>pLayerName</code> is the name of a layer, the instance extensions
provided by that layer are returned.</p>
</div>
<div class="paragraph">
<p>If <code>pProperties</code> is <code>NULL</code>, then the number of extensions properties
available is returned in <code>pPropertyCount</code>.
Otherwise, <code>pPropertyCount</code> <strong class="purple">must</strong> point to a variable set by the user to
the number of elements in the <code>pProperties</code> array, and on return the
variable is overwritten with the number of structures actually written to
<code>pProperties</code>.
If <code>pPropertyCount</code> is less than the number of extension properties
available, at most <code>pPropertyCount</code> structures will be written.
If <code>pPropertyCount</code> is smaller than the number of extensions available,
<code>VK_INCOMPLETE</code> will be returned instead of <code>VK_SUCCESS</code>, to
indicate that not all the available properties were returned.</p>
</div>
<div class="paragraph">
<p>Because the list of available layers may change externally between calls to
<a href="#vkEnumerateInstanceExtensionProperties">vkEnumerateInstanceExtensionProperties</a>, two calls may retrieve
different results if a <code>pLayerName</code> is available in one call but not in
another.
The extensions supported by a layer may also change between two calls, e.g.
if the layer implementation is replaced by a different version between those
calls.</p>
</div>
<div class="paragraph">
<p>Implementations <strong class="purple">must</strong> not advertise any pair of extensions that cannot be
enabled together due to behavioral differences, or any extension that cannot
be enabled against the advertised version.</p>
</div>
<div class="sidebarblock">
<div class="content">
<div class="title">Valid Usage (Implicit)</div>
<div class="ulist">
<ul>
<li>
<p><a id="VUID-vkEnumerateInstanceExtensionProperties-pLayerName-parameter"></a> If <code>pLayerName</code> is not <code>NULL</code>, <code>pLayerName</code> <strong class="purple">must</strong> be a null-terminated UTF-8 string</p>
</li>
<li>
<p><a id="VUID-vkEnumerateInstanceExtensionProperties-pPropertyCount-parameter"></a> <code>pPropertyCount</code> <strong class="purple">must</strong> be a valid pointer to a <code>uint32_t</code> value</p>
</li>
<li>
<p><a id="VUID-vkEnumerateInstanceExtensionProperties-pProperties-parameter"></a> If the value referenced by <code>pPropertyCount</code> is not <code>0</code>, and <code>pProperties</code> is not <code>NULL</code>, <code>pProperties</code> <strong class="purple">must</strong> be a valid pointer to an array of <code>pPropertyCount</code> <code>VkExtensionProperties</code> structures</p>
</li>
</ul>
</div>
</div>
</div>
<div class="sidebarblock">
<div class="content">
<div class="title">Return Codes</div>
<div class="dlist">
<dl>
<dt class="hdlist1"><a href="#fundamentals-successcodes">Success</a></dt>
<dd>
<div class="ulist">
<ul>
<li>
<p><code>VK_SUCCESS</code></p>
</li>
<li>
<p><code>VK_INCOMPLETE</code></p>
</li>
</ul>
</div>
</dd>
<dt class="hdlist1"><a href="#fundamentals-errorcodes">Failure</a></dt>
<dd>
<div class="ulist">
<ul>
<li>
<p><code>VK_ERROR_OUT_OF_HOST_MEMORY</code></p>
</li>
<li>
<p><code>VK_ERROR_OUT_OF_DEVICE_MEMORY</code></p>
</li>
<li>
<p><code>VK_ERROR_LAYER_NOT_PRESENT</code></p>
</li>
</ul>
</div>
</dd>
</dl>
</div>
</div>
</div>
</div>
<div class="sect3">
<h4 id="_see_also_186">See Also</h4>
<div class="paragraph">
<p><a href="#VkExtensionProperties">VkExtensionProperties</a></p>
</div>
</div>
<div class="sect3">
<h4 id="_document_notes_186">Document Notes</h4>
<div class="paragraph">
<p>For more information, see the Vulkan Specification at URL</p>
</div>
<div class="paragraph">
<p><a href="https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#vkEnumerateInstanceExtensionProperties" class="bare">https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#vkEnumerateInstanceExtensionProperties</a></p>
</div>
<div class="paragraph">
<p>This page is extracted from the Vulkan Specification.
Fixes and changes should be made to the Specification, not directly.</p>
</div>
<div style="page-break-after: always;"></div>
</div>
</div>
<div class="sect2">
<h3 id="_vkenumerateinstancelayerproperties3">vkEnumerateInstanceLayerProperties(3)</h3>
<div class="sect3">
<h4 id="_name_187">Name</h4>
<div class="paragraph">
<p>vkEnumerateInstanceLayerProperties - Returns up to requested number of global layer properties</p>
</div>
</div>
<div class="sect3">
<h4 id="_c_specification_187">C Specification</h4>
<div class="paragraph">
<p>To query the available layers, call:</p>
</div>
<div id="vkEnumerateInstanceLayerProperties" class="listingblock">
<div class="content">
<pre class="highlight"><code class="language-c++" data-lang="c++">VkResult vkEnumerateInstanceLayerProperties(
    uint32_t*                                   pPropertyCount,
    VkLayerProperties*                          pProperties);</code></pre>
</div>
</div>
</div>
<div class="sect3">
<h4 id="_parameters_187">Parameters</h4>
<div class="ulist">
<ul>
<li>
<p><code>pPropertyCount</code> is a pointer to an integer related to the number of
layer properties available or queried, as described below.</p>
</li>
<li>
<p><code>pProperties</code> is either <code>NULL</code> or a pointer to an array of
<a href="#VkLayerProperties">VkLayerProperties</a> structures.</p>
</li>
</ul>
</div>
</div>
<div class="sect3">
<h4 id="_description_187">Description</h4>
<div class="paragraph">
<p>If <code>pProperties</code> is <code>NULL</code>, then the number of layer properties
available is returned in <code>pPropertyCount</code>.
Otherwise, <code>pPropertyCount</code> <strong class="purple">must</strong> point to a variable set by the user to
the number of elements in the <code>pProperties</code> array, and on return the
variable is overwritten with the number of structures actually written to
<code>pProperties</code>.
If <code>pPropertyCount</code> is less than the number of layer properties
available, at most <code>pPropertyCount</code> structures will be written.
If <code>pPropertyCount</code> is smaller than the number of layers available,
<code>VK_INCOMPLETE</code> will be returned instead of <code>VK_SUCCESS</code>, to
indicate that not all the available layer properties were returned.</p>
</div>
<div class="paragraph">
<p>The list of available layers may change at any time due to actions outside
of the Vulkan implementation, so two calls to
<code>vkEnumerateInstanceLayerProperties</code> with the same parameters <strong class="purple">may</strong>
return different results, or retrieve different <code>pPropertyCount</code> values
or <code>pProperties</code> contents.
Once an instance has been created, the layers enabled for that instance will
continue to be enabled and valid for the lifetime of that instance, even if
some of them become unavailable for future instances.</p>
</div>
<div class="sidebarblock">
<div class="content">
<div class="title">Valid Usage (Implicit)</div>
<div class="ulist">
<ul>
<li>
<p><a id="VUID-vkEnumerateInstanceLayerProperties-pPropertyCount-parameter"></a> <code>pPropertyCount</code> <strong class="purple">must</strong> be a valid pointer to a <code>uint32_t</code> value</p>
</li>
<li>
<p><a id="VUID-vkEnumerateInstanceLayerProperties-pProperties-parameter"></a> If the value referenced by <code>pPropertyCount</code> is not <code>0</code>, and <code>pProperties</code> is not <code>NULL</code>, <code>pProperties</code> <strong class="purple">must</strong> be a valid pointer to an array of <code>pPropertyCount</code> <code>VkLayerProperties</code> structures</p>
</li>
</ul>
</div>
</div>
</div>
<div class="sidebarblock">
<div class="content">
<div class="title">Return Codes</div>
<div class="dlist">
<dl>
<dt class="hdlist1"><a href="#fundamentals-successcodes">Success</a></dt>
<dd>
<div class="ulist">
<ul>
<li>
<p><code>VK_SUCCESS</code></p>
</li>
<li>
<p><code>VK_INCOMPLETE</code></p>
</li>
</ul>
</div>
</dd>
<dt class="hdlist1"><a href="#fundamentals-errorcodes">Failure</a></dt>
<dd>
<div class="ulist">
<ul>
<li>
<p><code>VK_ERROR_OUT_OF_HOST_MEMORY</code></p>
</li>
<li>
<p><code>VK_ERROR_OUT_OF_DEVICE_MEMORY</code></p>
</li>
</ul>
</div>
</dd>
</dl>
</div>
</div>
</div>
</div>
<div class="sect3">
<h4 id="_see_also_187">See Also</h4>
<div class="paragraph">
<p><a href="#VkLayerProperties">VkLayerProperties</a></p>
</div>
</div>
<div class="sect3">
<h4 id="_document_notes_187">Document Notes</h4>
<div class="paragraph">
<p>For more information, see the Vulkan Specification at URL</p>
</div>
<div class="paragraph">
<p><a href="https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#vkEnumerateInstanceLayerProperties" class="bare">https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#vkEnumerateInstanceLayerProperties</a></p>
</div>
<div class="paragraph">
<p>This page is extracted from the Vulkan Specification.
Fixes and changes should be made to the Specification, not directly.</p>
</div>
<div style="page-break-after: always;"></div>
</div>
</div>
<div class="sect2">
<h3 id="_vkenumerateinstanceversion3">vkEnumerateInstanceVersion(3)</h3>
<div class="sect3">
<h4 id="_name_188">Name</h4>
<div class="paragraph">
<p>vkEnumerateInstanceVersion - Query instance-level version before instance creation</p>
</div>
</div>
<div class="sect3">
<h4 id="_c_specification_188">C Specification</h4>
<div class="paragraph">
<p>To query the version of instance-level functionality supported by the
implementation, call:</p>
</div>
<div id="vkEnumerateInstanceVersion" class="listingblock">
<div class="content">
<pre class="highlight"><code class="language-c++" data-lang="c++">VkResult vkEnumerateInstanceVersion(
    uint32_t*                                   pApiVersion);</code></pre>
</div>
</div>
</div>
<div class="sect3">
<h4 id="_parameters_188">Parameters</h4>
<div class="ulist">
<ul>
<li>
<p><code>pApiVersion</code> points to a <code>uint32_t</code>, which is the version of
Vulkan supported by instance-level functionality, encoded as described
in <a href="vkspec.html#extendingvulkan-coreversions-versionnumbers" class="bare">html/vkspec.html#extendingvulkan-coreversions-versionnumbers</a>.</p>
</li>
</ul>
</div>
</div>
<div class="sect3">
<h4 id="_description_188">Description</h4>
<div class="sidebarblock">
<div class="content">
<div class="title">Valid Usage (Implicit)</div>
<div class="ulist">
<ul>
<li>
<p><a id="VUID-vkEnumerateInstanceVersion-pApiVersion-parameter"></a> <code>pApiVersion</code> <strong class="purple">must</strong> be a valid pointer to a <code>uint32_t</code> value</p>
</li>
</ul>
</div>
</div>
</div>
<div class="sidebarblock">
<div class="content">
<div class="title">Return Codes</div>
<div class="dlist">
<dl>
<dt class="hdlist1"><a href="#fundamentals-successcodes">Success</a></dt>
<dd>
<div class="ulist">
<ul>
<li>
<p><code>VK_SUCCESS</code></p>
</li>
</ul>
</div>
</dd>
</dl>
</div>
</div>
</div>
</div>
<div class="sect3">
<h4 id="_see_also_188">See Also</h4>
<div class="paragraph">
<p>No cross-references are available</p>
</div>
</div>
<div class="sect3">
<h4 id="_document_notes_188">Document Notes</h4>
<div class="paragraph">
<p>For more information, see the Vulkan Specification at URL</p>
</div>
<div class="paragraph">
<p><a href="https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#vkEnumerateInstanceVersion" class="bare">https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#vkEnumerateInstanceVersion</a></p>
</div>
<div class="paragraph">
<p>This page is extracted from the Vulkan Specification.
Fixes and changes should be made to the Specification, not directly.</p>
</div>
<div style="page-break-after: always;"></div>
</div>
</div>
<div class="sect2">
<h3 id="_vkenumeratephysicaldevicegroups3">vkEnumeratePhysicalDeviceGroups(3)</h3>
<div class="sect3">
<h4 id="_name_189">Name</h4>
<div class="paragraph">
<p>vkEnumeratePhysicalDeviceGroups - Enumerates groups of physical devices that can be used to create a single logical device</p>
</div>
</div>
<div class="sect3">
<h4 id="_c_specification_189">C Specification</h4>
<div class="paragraph">
<p>To retrieve a list of the device groups present in the system, call:</p>
</div>
<div id="vkEnumeratePhysicalDeviceGroups" class="listingblock">
<div class="content">
<pre class="highlight"><code class="language-c++" data-lang="c++">VkResult vkEnumeratePhysicalDeviceGroups(
    VkInstance                                  instance,
    uint32_t*                                   pPhysicalDeviceGroupCount,
    VkPhysicalDeviceGroupProperties*            pPhysicalDeviceGroupProperties);</code></pre>
</div>
</div>
<div class="paragraph">
<p>or the equivalent command</p>
</div>
<div id="vkEnumeratePhysicalDeviceGroupsKHR" class="listingblock">
<div class="content">
<pre class="highlight"><code class="language-c++" data-lang="c++">VkResult vkEnumeratePhysicalDeviceGroupsKHR(
    VkInstance                                  instance,
    uint32_t*                                   pPhysicalDeviceGroupCount,
    VkPhysicalDeviceGroupProperties*            pPhysicalDeviceGroupProperties);</code></pre>
</div>
</div>
</div>
<div class="sect3">
<h4 id="_parameters_189">Parameters</h4>
<div class="ulist">
<ul>
<li>
<p><code>instance</code> is a handle to a Vulkan instance previously created with
<a href="#vkCreateInstance">vkCreateInstance</a>.</p>
</li>
<li>
<p><code>pPhysicalDeviceGroupCount</code> is a pointer to an integer related to
the number of device groups available or queried, as described below.</p>
</li>
<li>
<p><code>pPhysicalDeviceGroupProperties</code> is either <code>NULL</code> or a pointer to an
array of <a href="#VkPhysicalDeviceGroupProperties">VkPhysicalDeviceGroupProperties</a> structures.</p>
</li>
</ul>
</div>
</div>
<div class="sect3">
<h4 id="_description_189">Description</h4>
<div class="paragraph">
<p>If <code>pPhysicalDeviceGroupProperties</code> is <code>NULL</code>, then the number of device
groups available is returned in <code>pPhysicalDeviceGroupCount</code>.
Otherwise, <code>pPhysicalDeviceGroupCount</code> <strong class="purple">must</strong> point to a variable set by
the user to the number of elements in the
<code>pPhysicalDeviceGroupProperties</code> array, and on return the variable is
overwritten with the number of structures actually written to
<code>pPhysicalDeviceGroupProperties</code>.
If <code>pPhysicalDeviceGroupCount</code> is less than the number of device groups
available, at most <code>pPhysicalDeviceGroupCount</code> structures will be
written.
If <code>pPhysicalDeviceGroupCount</code> is smaller than the number of device
groups available, <code>VK_INCOMPLETE</code> will be returned instead of
<code>VK_SUCCESS</code>, to indicate that not all the available device groups were
returned.</p>
</div>
<div class="paragraph">
<p>Every physical device <strong class="purple">must</strong> be in exactly one device group.</p>
</div>
<div class="sidebarblock">
<div class="content">
<div class="title">Valid Usage (Implicit)</div>
<div class="ulist">
<ul>
<li>
<p><a id="VUID-vkEnumeratePhysicalDeviceGroups-instance-parameter"></a> <code>instance</code> <strong class="purple">must</strong> be a valid <code>VkInstance</code> handle</p>
</li>
<li>
<p><a id="VUID-vkEnumeratePhysicalDeviceGroups-pPhysicalDeviceGroupCount-parameter"></a> <code>pPhysicalDeviceGroupCount</code> <strong class="purple">must</strong> be a valid pointer to a <code>uint32_t</code> value</p>
</li>
<li>
<p><a id="VUID-vkEnumeratePhysicalDeviceGroups-pPhysicalDeviceGroupProperties-parameter"></a> If the value referenced by <code>pPhysicalDeviceGroupCount</code> is not <code>0</code>, and <code>pPhysicalDeviceGroupProperties</code> is not <code>NULL</code>, <code>pPhysicalDeviceGroupProperties</code> <strong class="purple">must</strong> be a valid pointer to an array of <code>pPhysicalDeviceGroupCount</code> <code>VkPhysicalDeviceGroupProperties</code> structures</p>
</li>
</ul>
</div>
</div>
</div>
<div class="sidebarblock">
<div class="content">
<div class="title">Return Codes</div>
<div class="dlist">
<dl>
<dt class="hdlist1"><a href="#fundamentals-successcodes">Success</a></dt>
<dd>
<div class="ulist">
<ul>
<li>
<p><code>VK_SUCCESS</code></p>
</li>
<li>
<p><code>VK_INCOMPLETE</code></p>
</li>
</ul>
</div>
</dd>
<dt class="hdlist1"><a href="#fundamentals-errorcodes">Failure</a></dt>
<dd>
<div class="ulist">
<ul>
<li>
<p><code>VK_ERROR_OUT_OF_HOST_MEMORY</code></p>
</li>
<li>
<p><code>VK_ERROR_OUT_OF_DEVICE_MEMORY</code></p>
</li>
<li>
<p><code>VK_ERROR_INITIALIZATION_FAILED</code></p>
</li>
</ul>
</div>
</dd>
</dl>
</div>
</div>
</div>
</div>
<div class="sect3">
<h4 id="_see_also_189">See Also</h4>
<div class="paragraph">
<p><a href="#VkInstance">VkInstance</a>, <a href="#VkPhysicalDeviceGroupProperties">VkPhysicalDeviceGroupProperties</a></p>
</div>
</div>
<div class="sect3">
<h4 id="_document_notes_189">Document Notes</h4>
<div class="paragraph">
<p>For more information, see the Vulkan Specification at URL</p>
</div>
<div class="paragraph">
<p><a href="https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#vkEnumeratePhysicalDeviceGroups" class="bare">https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#vkEnumeratePhysicalDeviceGroups</a></p>
</div>
<div class="paragraph">
<p>This page is extracted from the Vulkan Specification.
Fixes and changes should be made to the Specification, not directly.</p>
</div>
<div style="page-break-after: always;"></div>
</div>
</div>
<div class="sect2">
<h3 id="_vkenumeratephysicaldevices3">vkEnumeratePhysicalDevices(3)</h3>
<div class="sect3">
<h4 id="_name_190">Name</h4>
<div class="paragraph">
<p>vkEnumeratePhysicalDevices - Enumerates the physical devices accessible to a Vulkan instance</p>
</div>
</div>
<div class="sect3">
<h4 id="_c_specification_190">C Specification</h4>
<div class="paragraph">
<p>To retrieve a list of physical device objects representing the physical
devices installed in the system, call:</p>
</div>
<div id="vkEnumeratePhysicalDevices" class="listingblock">
<div class="content">
<pre class="highlight"><code class="language-c++" data-lang="c++">VkResult vkEnumeratePhysicalDevices(
    VkInstance                                  instance,
    uint32_t*                                   pPhysicalDeviceCount,
    VkPhysicalDevice*                           pPhysicalDevices);</code></pre>
</div>
</div>
</div>
<div class="sect3">
<h4 id="_parameters_190">Parameters</h4>
<div class="ulist">
<ul>
<li>
<p><code>instance</code> is a handle to a Vulkan instance previously created with
<a href="#vkCreateInstance">vkCreateInstance</a>.</p>
</li>
<li>
<p><code>pPhysicalDeviceCount</code> is a pointer to an integer related to the
number of physical devices available or queried, as described below.</p>
</li>
<li>
<p><code>pPhysicalDevices</code> is either <code>NULL</code> or a pointer to an array of
<code>VkPhysicalDevice</code> handles.</p>
</li>
</ul>
</div>
</div>
<div class="sect3">
<h4 id="_description_190">Description</h4>
<div class="paragraph">
<p>If <code>pPhysicalDevices</code> is <code>NULL</code>, then the number of physical devices
available is returned in <code>pPhysicalDeviceCount</code>.
Otherwise, <code>pPhysicalDeviceCount</code> <strong class="purple">must</strong> point to a variable set by the
user to the number of elements in the <code>pPhysicalDevices</code> array, and on
return the variable is overwritten with the number of handles actually
written to <code>pPhysicalDevices</code>.
If <code>pPhysicalDeviceCount</code> is less than the number of physical devices
available, at most <code>pPhysicalDeviceCount</code> structures will be written.
If <code>pPhysicalDeviceCount</code> is smaller than the number of physical devices
available, <code>VK_INCOMPLETE</code> will be returned instead of <code>VK_SUCCESS</code>,
to indicate that not all the available physical devices were returned.</p>
</div>
<div class="sidebarblock">
<div class="content">
<div class="title">Valid Usage (Implicit)</div>
<div class="ulist">
<ul>
<li>
<p><a id="VUID-vkEnumeratePhysicalDevices-instance-parameter"></a> <code>instance</code> <strong class="purple">must</strong> be a valid <code>VkInstance</code> handle</p>
</li>
<li>
<p><a id="VUID-vkEnumeratePhysicalDevices-pPhysicalDeviceCount-parameter"></a> <code>pPhysicalDeviceCount</code> <strong class="purple">must</strong> be a valid pointer to a <code>uint32_t</code> value</p>
</li>
<li>
<p><a id="VUID-vkEnumeratePhysicalDevices-pPhysicalDevices-parameter"></a> If the value referenced by <code>pPhysicalDeviceCount</code> is not <code>0</code>, and <code>pPhysicalDevices</code> is not <code>NULL</code>, <code>pPhysicalDevices</code> <strong class="purple">must</strong> be a valid pointer to an array of <code>pPhysicalDeviceCount</code> <code>VkPhysicalDevice</code> handles</p>
</li>
</ul>
</div>
</div>
</div>
<div class="sidebarblock">
<div class="content">
<div class="title">Return Codes</div>
<div class="dlist">
<dl>
<dt class="hdlist1"><a href="#fundamentals-successcodes">Success</a></dt>
<dd>
<div class="ulist">
<ul>
<li>
<p><code>VK_SUCCESS</code></p>
</li>
<li>
<p><code>VK_INCOMPLETE</code></p>
</li>
</ul>
</div>
</dd>
<dt class="hdlist1"><a href="#fundamentals-errorcodes">Failure</a></dt>
<dd>
<div class="ulist">
<ul>
<li>
<p><code>VK_ERROR_OUT_OF_HOST_MEMORY</code></p>
</li>
<li>
<p><code>VK_ERROR_OUT_OF_DEVICE_MEMORY</code></p>
</li>
<li>
<p><code>VK_ERROR_INITIALIZATION_FAILED</code></p>
</li>
</ul>
</div>
</dd>
</dl>
</div>
</div>
</div>
</div>
<div class="sect3">
<h4 id="_see_also_190">See Also</h4>
<div class="paragraph">
<p><a href="#VkInstance">VkInstance</a>, <a href="#VkPhysicalDevice">VkPhysicalDevice</a></p>
</div>
</div>
<div class="sect3">
<h4 id="_document_notes_190">Document Notes</h4>
<div class="paragraph">
<p>For more information, see the Vulkan Specification at URL</p>
</div>
<div class="paragraph">
<p><a href="https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#vkEnumeratePhysicalDevices" class="bare">https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#vkEnumeratePhysicalDevices</a></p>
</div>
<div class="paragraph">
<p>This page is extracted from the Vulkan Specification.
Fixes and changes should be made to the Specification, not directly.</p>
</div>
<div style="page-break-after: always;"></div>
</div>
</div>
<div class="sect2">
<h3 id="_vkflushmappedmemoryranges3">vkFlushMappedMemoryRanges(3)</h3>
<div class="sect3">
<h4 id="_name_191">Name</h4>
<div class="paragraph">
<p>vkFlushMappedMemoryRanges - Flush mapped memory ranges</p>
</div>
</div>
<div class="sect3">
<h4 id="_c_specification_191">C Specification</h4>
<div class="paragraph">
<p>To flush ranges of non-coherent memory from the host caches, call:</p>
</div>
<div id="vkFlushMappedMemoryRanges" class="listingblock">
<div class="content">
<pre class="highlight"><code class="language-c++" data-lang="c++">VkResult vkFlushMappedMemoryRanges(
    VkDevice                                    device,
    uint32_t                                    memoryRangeCount,
    const VkMappedMemoryRange*                  pMemoryRanges);</code></pre>
</div>
</div>
</div>
<div class="sect3">
<h4 id="_parameters_191">Parameters</h4>
<div class="ulist">
<ul>
<li>
<p><code>device</code> is the logical device that owns the memory ranges.</p>
</li>
<li>
<p><code>memoryRangeCount</code> is the length of the <code>pMemoryRanges</code> array.</p>
</li>
<li>
<p><code>pMemoryRanges</code> is a pointer to an array of
<a href="#VkMappedMemoryRange">VkMappedMemoryRange</a> structures describing the memory ranges to
flush.</p>
</li>
</ul>
</div>
</div>
<div class="sect3">
<h4 id="_description_191">Description</h4>
<div class="paragraph">
<p><code>vkFlushMappedMemoryRanges</code> guarantees that host writes to the memory
ranges described by <code>pMemoryRanges</code> are made available to the host
memory domain, such that they <strong class="purple">can</strong> be made available to the device memory
domain via <a href="vkspec.html#synchronization-dependencies-available-and-visible">memory
domain operations</a> using the <code>VK_ACCESS_HOST_WRITE_BIT</code>
<a href="vkspec.html#synchronization-access-types">access type</a>.</p>
</div>
<div class="paragraph">
<p>Within each range described by <code>pMemoryRanges</code>, each set of
<code>nonCoherentAtomSize</code> bytes in that range is flushed if any byte in that
set has been written by the host since it was first host mapped, or the last
time it was flushed.
If <code>pMemoryRanges</code> includes sets of <code>nonCoherentAtomSize</code> bytes
where no bytes have been written by the host, those bytes <strong class="purple">must</strong> not be
flushed.</p>
</div>
<div id="memory-device-unmap-does-not-flush" class="paragraph">
<p>Unmapping non-coherent memory does not implicitly flush the host mapped
memory, and host writes that have not been flushed <strong class="purple">may</strong> not ever be visible
to the device.
However, implementations <strong class="purple">must</strong> ensure that writes that have not been flushed
do not become visible to any other memory.</p>
</div>
<div class="admonitionblock note">
<table>
<tr>
<td class="icon">
<i class="fa icon-note" title="Note"></i>
</td>
<td class="content">
<div class="title">Note</div>
<div class="paragraph">
<p>The above guarantee avoids a potential memory corruption in scenarios where
host writes to a mapped memory object have not been flushed before the
memory is unmapped (or freed), and the virtual address range is subsequently
reused for a different mapping (or memory allocation).</p>
</div>
</td>
</tr>
</table>
</div>
<div class="sidebarblock">
<div class="content">
<div class="title">Valid Usage (Implicit)</div>
<div class="ulist">
<ul>
<li>
<p><a id="VUID-vkFlushMappedMemoryRanges-device-parameter"></a> <code>device</code> <strong class="purple">must</strong> be a valid <code>VkDevice</code> handle</p>
</li>
<li>
<p><a id="VUID-vkFlushMappedMemoryRanges-pMemoryRanges-parameter"></a> <code>pMemoryRanges</code> <strong class="purple">must</strong> be a valid pointer to an array of <code>memoryRangeCount</code> valid <code>VkMappedMemoryRange</code> structures</p>
</li>
<li>
<p><a id="VUID-vkFlushMappedMemoryRanges-memoryRangeCount-arraylength"></a> <code>memoryRangeCount</code> <strong class="purple">must</strong> be greater than <code>0</code></p>
</li>
</ul>
</div>
</div>
</div>
<div class="sidebarblock">
<div class="content">
<div class="title">Return Codes</div>
<div class="dlist">
<dl>
<dt class="hdlist1"><a href="#fundamentals-successcodes">Success</a></dt>
<dd>
<div class="ulist">
<ul>
<li>
<p><code>VK_SUCCESS</code></p>
</li>
</ul>
</div>
</dd>
<dt class="hdlist1"><a href="#fundamentals-errorcodes">Failure</a></dt>
<dd>
<div class="ulist">
<ul>
<li>
<p><code>VK_ERROR_OUT_OF_HOST_MEMORY</code></p>
</li>
<li>
<p><code>VK_ERROR_OUT_OF_DEVICE_MEMORY</code></p>
</li>
</ul>
</div>
</dd>
</dl>
</div>
</div>
</div>
</div>
<div class="sect3">
<h4 id="_see_also_191">See Also</h4>
<div class="paragraph">
<p><a href="#VkDevice">VkDevice</a>, <a href="#VkMappedMemoryRange">VkMappedMemoryRange</a></p>
</div>
</div>
<div class="sect3">
<h4 id="_document_notes_191">Document Notes</h4>
<div class="paragraph">
<p>For more information, see the Vulkan Specification at URL</p>
</div>
<div class="paragraph">
<p><a href="https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#vkFlushMappedMemoryRanges" class="bare">https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#vkFlushMappedMemoryRanges</a></p>
</div>
<div class="paragraph">
<p>This page is extracted from the Vulkan Specification.
Fixes and changes should be made to the Specification, not directly.</p>
</div>
<div style="page-break-after: always;"></div>
</div>
</div>
<div class="sect2">
<h3 id="_vkfreecommandbuffers3">vkFreeCommandBuffers(3)</h3>
<div class="sect3">
<h4 id="_name_192">Name</h4>
<div class="paragraph">
<p>vkFreeCommandBuffers - Free command buffers</p>
</div>
</div>
<div class="sect3">
<h4 id="_c_specification_192">C Specification</h4>
<div class="paragraph">
<p>To free command buffers, call:</p>
</div>
<div id="vkFreeCommandBuffers" class="listingblock">
<div class="content">
<pre class="highlight"><code class="language-c++" data-lang="c++">void vkFreeCommandBuffers(
    VkDevice                                    device,
    VkCommandPool                               commandPool,
    uint32_t                                    commandBufferCount,
    const VkCommandBuffer*                      pCommandBuffers);</code></pre>
</div>
</div>
</div>
<div class="sect3">
<h4 id="_parameters_192">Parameters</h4>
<div class="ulist">
<ul>
<li>
<p><code>device</code> is the logical device that owns the command pool.</p>
</li>
<li>
<p><code>commandPool</code> is the command pool from which the command buffers
were allocated.</p>
</li>
<li>
<p><code>commandBufferCount</code> is the length of the <code>pCommandBuffers</code>
array.</p>
</li>
<li>
<p><code>pCommandBuffers</code> is an array of handles of command buffers to free.</p>
</li>
</ul>
</div>
</div>
<div class="sect3">
<h4 id="_description_192">Description</h4>
<div class="paragraph">
<p>Any primary command buffer that is in the <a href="vkspec.html#commandbuffers-lifecycle">recording or executable state</a> and has any element of <code>pCommandBuffers</code>
recorded into it, becomes <a href="vkspec.html#commandbuffers-lifecycle">invalid</a>.</p>
</div>
<div class="sidebarblock">
<div class="content">
<div class="title">Valid Usage</div>
<div class="ulist">
<ul>
<li>
<p><a id="VUID-vkFreeCommandBuffers-pCommandBuffers-00047"></a>
All elements of <code>pCommandBuffers</code> <strong class="purple">must</strong> not be in the
<a href="vkspec.html#commandbuffers-lifecycle">pending state</a></p>
</li>
<li>
<p><a id="VUID-vkFreeCommandBuffers-pCommandBuffers-00048"></a>
<code>pCommandBuffers</code> <strong class="purple">must</strong> be a valid pointer to an array of
<code>commandBufferCount</code> <code>VkCommandBuffer</code> handles, each element of
which <strong class="purple">must</strong> either be a valid handle or <code>NULL</code></p>
</li>
</ul>
</div>
</div>
</div>
<div class="sidebarblock">
<div class="content">
<div class="title">Valid Usage (Implicit)</div>
<div class="ulist">
<ul>
<li>
<p><a id="VUID-vkFreeCommandBuffers-device-parameter"></a> <code>device</code> <strong class="purple">must</strong> be a valid <code>VkDevice</code> handle</p>
</li>
<li>
<p><a id="VUID-vkFreeCommandBuffers-commandPool-parameter"></a> <code>commandPool</code> <strong class="purple">must</strong> be a valid <code>VkCommandPool</code> handle</p>
</li>
<li>
<p><a id="VUID-vkFreeCommandBuffers-commandBufferCount-arraylength"></a> <code>commandBufferCount</code> <strong class="purple">must</strong> be greater than <code>0</code></p>
</li>
<li>
<p><a id="VUID-vkFreeCommandBuffers-commandPool-parent"></a> <code>commandPool</code> <strong class="purple">must</strong> have been created, allocated, or retrieved from <code>device</code></p>
</li>
<li>
<p><a id="VUID-vkFreeCommandBuffers-pCommandBuffers-parent"></a> Each element of <code>pCommandBuffers</code> that is a valid handle <strong class="purple">must</strong> have been created, allocated, or retrieved from <code>commandPool</code></p>
</li>
</ul>
</div>
</div>
</div>
<div class="sidebarblock">
<div class="content">
<div class="title">Host Synchronization</div>
<div class="ulist">
<ul>
<li>
<p>Host access to <code>commandPool</code> <strong class="purple">must</strong> be externally synchronized</p>
</li>
<li>
<p>Host access to each member of <code>pCommandBuffers</code> <strong class="purple">must</strong> be externally synchronized</p>
</li>
</ul>
</div>
</div>
</div>
</div>
<div class="sect3">
<h4 id="_see_also_192">See Also</h4>
<div class="paragraph">
<p><a href="#VkCommandBuffer">VkCommandBuffer</a>, <a href="#VkCommandPool">VkCommandPool</a>, <a href="#VkDevice">VkDevice</a></p>
</div>
</div>
<div class="sect3">
<h4 id="_document_notes_192">Document Notes</h4>
<div class="paragraph">
<p>For more information, see the Vulkan Specification at URL</p>
</div>
<div class="paragraph">
<p><a href="https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#vkFreeCommandBuffers" class="bare">https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#vkFreeCommandBuffers</a></p>
</div>
<div class="paragraph">
<p>This page is extracted from the Vulkan Specification.
Fixes and changes should be made to the Specification, not directly.</p>
</div>
<div style="page-break-after: always;"></div>
</div>
</div>
<div class="sect2">
<h3 id="_vkfreedescriptorsets3">vkFreeDescriptorSets(3)</h3>
<div class="sect3">
<h4 id="_name_193">Name</h4>
<div class="paragraph">
<p>vkFreeDescriptorSets - Free one or more descriptor sets</p>
</div>
</div>
<div class="sect3">
<h4 id="_c_specification_193">C Specification</h4>
<div class="paragraph">
<p>To free allocated descriptor sets, call:</p>
</div>
<div id="vkFreeDescriptorSets" class="listingblock">
<div class="content">
<pre class="highlight"><code class="language-c++" data-lang="c++">VkResult vkFreeDescriptorSets(
    VkDevice                                    device,
    VkDescriptorPool                            descriptorPool,
    uint32_t                                    descriptorSetCount,
    const VkDescriptorSet*                      pDescriptorSets);</code></pre>
</div>
</div>
</div>
<div class="sect3">
<h4 id="_parameters_193">Parameters</h4>
<div class="ulist">
<ul>
<li>
<p><code>device</code> is the logical device that owns the descriptor pool.</p>
</li>
<li>
<p><code>descriptorPool</code> is the descriptor pool from which the descriptor
sets were allocated.</p>
</li>
<li>
<p><code>descriptorSetCount</code> is the number of elements in the
<code>pDescriptorSets</code> array.</p>
</li>
<li>
<p><code>pDescriptorSets</code> is an array of handles to <a href="#VkDescriptorSet">VkDescriptorSet</a>
objects.</p>
</li>
</ul>
</div>
</div>
<div class="sect3">
<h4 id="_description_193">Description</h4>
<div class="paragraph">
<p>After a successful call to <code>vkFreeDescriptorSets</code>, all descriptor sets
in <code>pDescriptorSets</code> are invalid.</p>
</div>
<div class="sidebarblock">
<div class="content">
<div class="title">Valid Usage</div>
<div class="ulist">
<ul>
<li>
<p><a id="VUID-vkFreeDescriptorSets-pDescriptorSets-00309"></a>
All submitted commands that refer to any element of
<code>pDescriptorSets</code> <strong class="purple">must</strong> have completed execution</p>
</li>
<li>
<p><a id="VUID-vkFreeDescriptorSets-pDescriptorSets-00310"></a>
<code>pDescriptorSets</code> <strong class="purple">must</strong> be a valid pointer to an array of
<code>descriptorSetCount</code> <code>VkDescriptorSet</code> handles, each element of
which <strong class="purple">must</strong> either be a valid handle or <a href="#VK_NULL_HANDLE">VK_NULL_HANDLE</a></p>
</li>
<li>
<p><a id="VUID-vkFreeDescriptorSets-pDescriptorSets-00311"></a>
Each valid handle in <code>pDescriptorSets</code> <strong class="purple">must</strong> have been allocated
from <code>descriptorPool</code></p>
</li>
<li>
<p><a id="VUID-vkFreeDescriptorSets-descriptorPool-00312"></a>
<code>descriptorPool</code> <strong class="purple">must</strong> have been created with the
<code>VK_DESCRIPTOR_POOL_CREATE_FREE_DESCRIPTOR_SET_BIT</code> flag</p>
</li>
</ul>
</div>
</div>
</div>
<div class="sidebarblock">
<div class="content">
<div class="title">Valid Usage (Implicit)</div>
<div class="ulist">
<ul>
<li>
<p><a id="VUID-vkFreeDescriptorSets-device-parameter"></a> <code>device</code> <strong class="purple">must</strong> be a valid <code>VkDevice</code> handle</p>
</li>
<li>
<p><a id="VUID-vkFreeDescriptorSets-descriptorPool-parameter"></a> <code>descriptorPool</code> <strong class="purple">must</strong> be a valid <code>VkDescriptorPool</code> handle</p>
</li>
<li>
<p><a id="VUID-vkFreeDescriptorSets-descriptorSetCount-arraylength"></a> <code>descriptorSetCount</code> <strong class="purple">must</strong> be greater than <code>0</code></p>
</li>
<li>
<p><a id="VUID-vkFreeDescriptorSets-descriptorPool-parent"></a> <code>descriptorPool</code> <strong class="purple">must</strong> have been created, allocated, or retrieved from <code>device</code></p>
</li>
<li>
<p><a id="VUID-vkFreeDescriptorSets-pDescriptorSets-parent"></a> Each element of <code>pDescriptorSets</code> that is a valid handle <strong class="purple">must</strong> have been created, allocated, or retrieved from <code>descriptorPool</code></p>
</li>
</ul>
</div>
</div>
</div>
<div class="sidebarblock">
<div class="content">
<div class="title">Host Synchronization</div>
<div class="ulist">
<ul>
<li>
<p>Host access to <code>descriptorPool</code> <strong class="purple">must</strong> be externally synchronized</p>
</li>
<li>
<p>Host access to each member of <code>pDescriptorSets</code> <strong class="purple">must</strong> be externally synchronized</p>
</li>
</ul>
</div>
</div>
</div>
<div class="sidebarblock">
<div class="content">
<div class="title">Return Codes</div>
<div class="dlist">
<dl>
<dt class="hdlist1"><a href="#fundamentals-successcodes">Success</a></dt>
<dd>
<div class="ulist">
<ul>
<li>
<p><code>VK_SUCCESS</code></p>
</li>
</ul>
</div>
</dd>
<dt class="hdlist1"><a href="#fundamentals-errorcodes">Failure</a></dt>
<dd>
<div class="ulist">
<ul>
<li>
<p><code>VK_ERROR_OUT_OF_HOST_MEMORY</code></p>
</li>
<li>
<p><code>VK_ERROR_OUT_OF_DEVICE_MEMORY</code></p>
</li>
</ul>
</div>
</dd>
</dl>
</div>
</div>
</div>
</div>
<div class="sect3">
<h4 id="_see_also_193">See Also</h4>
<div class="paragraph">
<p><a href="#VkDescriptorPool">VkDescriptorPool</a>, <a href="#VkDescriptorSet">VkDescriptorSet</a>, <a href="#VkDevice">VkDevice</a></p>
</div>
</div>
<div class="sect3">
<h4 id="_document_notes_193">Document Notes</h4>
<div class="paragraph">
<p>For more information, see the Vulkan Specification at URL</p>
</div>
<div class="paragraph">
<p><a href="https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#vkFreeDescriptorSets" class="bare">https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#vkFreeDescriptorSets</a></p>
</div>
<div class="paragraph">
<p>This page is extracted from the Vulkan Specification.
Fixes and changes should be made to the Specification, not directly.</p>
</div>
<div style="page-break-after: always;"></div>
</div>
</div>
<div class="sect2">
<h3 id="_vkfreememory3">vkFreeMemory(3)</h3>
<div class="sect3">
<h4 id="_name_194">Name</h4>
<div class="paragraph">
<p>vkFreeMemory - Free device memory</p>
</div>
</div>
<div class="sect3">
<h4 id="_c_specification_194">C Specification</h4>
<div class="paragraph">
<p>To free a memory object, call:</p>
</div>
<div id="vkFreeMemory" class="listingblock">
<div class="content">
<pre class="highlight"><code class="language-c++" data-lang="c++">void vkFreeMemory(
    VkDevice                                    device,
    VkDeviceMemory                              memory,
    const VkAllocationCallbacks*                pAllocator);</code></pre>
</div>
</div>
</div>
<div class="sect3">
<h4 id="_parameters_194">Parameters</h4>
<div class="ulist">
<ul>
<li>
<p><code>device</code> is the logical device that owns the memory.</p>
</li>
<li>
<p><code>memory</code> is the <a href="#VkDeviceMemory">VkDeviceMemory</a> object to be freed.</p>
</li>
<li>
<p><code>pAllocator</code> controls host memory allocation as described in the
<a href="vkspec.html#memory-allocation">Memory Allocation</a> chapter.</p>
</li>
</ul>
</div>
</div>
<div class="sect3">
<h4 id="_description_194">Description</h4>
<div class="paragraph">
<p>Before freeing a memory object, an application <strong class="purple">must</strong> ensure the memory
object is no longer in use by the device&#8212;&#8203;for example by command buffers in
the <em>pending state</em>.
Memory <strong class="purple">can</strong> be freed whilst still bound to resources, but those resources
<strong class="purple">must</strong> not be used afterwards.
If there are still any bound images or buffers, the memory <strong class="purple">may</strong> not be
immediately released by the implementation, but <strong class="purple">must</strong> be released by the
time all bound images and buffers have been destroyed.
Once memory is released, it is returned to the heap from which it was
allocated.</p>
</div>
<div class="paragraph">
<p>How memory objects are bound to Images and Buffers is described in detail in
the <a href="vkspec.html#resources-association">Resource Memory Association</a> section.</p>
</div>
<div class="paragraph">
<p>If a memory object is mapped at the time it is freed, it is implicitly
unmapped.</p>
</div>
<div class="admonitionblock note">
<table>
<tr>
<td class="icon">
<i class="fa icon-note" title="Note"></i>
</td>
<td class="content">
<div class="title">Note</div>
<div class="paragraph">
<p>As described <a href="vkspec.html#memory-device-unmap-does-not-flush">below</a>, host writes are
not implicitly flushed when the memory object is unmapped, but the
implementation <strong class="purple">must</strong> guarantee that writes that have not been flushed do not
affect any other memory.</p>
</div>
</td>
</tr>
</table>
</div>
<div class="sidebarblock">
<div class="content">
<div class="title">Valid Usage</div>
<div class="ulist">
<ul>
<li>
<p><a id="VUID-vkFreeMemory-memory-00677"></a>
All submitted commands that refer to <code>memory</code> (via images or
buffers) <strong class="purple">must</strong> have completed execution</p>
</li>
</ul>
</div>
</div>
</div>
<div class="sidebarblock">
<div class="content">
<div class="title">Valid Usage (Implicit)</div>
<div class="ulist">
<ul>
<li>
<p><a id="VUID-vkFreeMemory-device-parameter"></a> <code>device</code> <strong class="purple">must</strong> be a valid <code>VkDevice</code> handle</p>
</li>
<li>
<p><a id="VUID-vkFreeMemory-memory-parameter"></a> If <code>memory</code> is not <a href="#VK_NULL_HANDLE">VK_NULL_HANDLE</a>, <code>memory</code> <strong class="purple">must</strong> be a valid <code>VkDeviceMemory</code> handle</p>
</li>
<li>
<p><a id="VUID-vkFreeMemory-pAllocator-parameter"></a> If <code>pAllocator</code> is not <code>NULL</code>, <code>pAllocator</code> <strong class="purple">must</strong> be a valid pointer to a valid <code>VkAllocationCallbacks</code> structure</p>
</li>
<li>
<p><a id="VUID-vkFreeMemory-memory-parent"></a> If <code>memory</code> is a valid handle, it <strong class="purple">must</strong> have been created, allocated, or retrieved from <code>device</code></p>
</li>
</ul>
</div>
</div>
</div>
<div class="sidebarblock">
<div class="content">
<div class="title">Host Synchronization</div>
<div class="ulist">
<ul>
<li>
<p>Host access to <code>memory</code> <strong class="purple">must</strong> be externally synchronized</p>
</li>
</ul>
</div>
</div>
</div>
</div>
<div class="sect3">
<h4 id="_see_also_194">See Also</h4>
<div class="paragraph">
<p><a href="#VkAllocationCallbacks">VkAllocationCallbacks</a>, <a href="#VkDevice">VkDevice</a>, <a href="#VkDeviceMemory">VkDeviceMemory</a></p>
</div>
</div>
<div class="sect3">
<h4 id="_document_notes_194">Document Notes</h4>
<div class="paragraph">
<p>For more information, see the Vulkan Specification at URL</p>
</div>
<div class="paragraph">
<p><a href="https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#vkFreeMemory" class="bare">https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#vkFreeMemory</a></p>
</div>
<div class="paragraph">
<p>This page is extracted from the Vulkan Specification.
Fixes and changes should be made to the Specification, not directly.</p>
</div>
<div style="page-break-after: always;"></div>
</div>
</div>
<div class="sect2">
<h3 id="_vkgetaccelerationstructurehandlenv3">vkGetAccelerationStructureHandleNV(3)</h3>
<div class="sect3">
<h4 id="_name_195">Name</h4>
<div class="paragraph">
<p>vkGetAccelerationStructureHandleNV - Get opaque acceleration structure handle</p>
</div>
</div>
<div class="sect3">
<h4 id="_c_specification_195">C Specification</h4>
<div class="paragraph">
<p>To allow constructing geometry instances with device code if desired, we
need to be able to query a opaque handle for an acceleration structure.
This handle is a value of 8 bytes.
To get this handle, call:</p>
</div>
<div id="vkGetAccelerationStructureHandleNV" class="listingblock">
<div class="content">
<pre class="highlight"><code class="language-c++" data-lang="c++">VkResult vkGetAccelerationStructureHandleNV(
    VkDevice                                    device,
    VkAccelerationStructureNV                   accelerationStructure,
    size_t                                      dataSize,
    void*                                       pData);</code></pre>
</div>
</div>
</div>
<div class="sect3">
<h4 id="_parameters_195">Parameters</h4>
<div class="ulist">
<ul>
<li>
<p><code>device</code> is the logical device that owns the acceleration
structures.</p>
</li>
<li>
<p><code>accelerationStructure</code> is the acceleration structure.</p>
</li>
<li>
<p><code>dataSize</code> is the size in bytes of the buffer pointed to by
<code>pData</code>.</p>
</li>
<li>
<p><code>pData</code> is a pointer to a user-allocated buffer where the results
will be written.</p>
</li>
</ul>
</div>
</div>
<div class="sect3">
<h4 id="_description_195">Description</h4>
<div class="sidebarblock">
<div class="content">
<div class="title">Valid Usage</div>
<div class="ulist">
<ul>
<li>
<p><a id="VUID-vkGetAccelerationStructureHandleNV-dataSize-02240"></a>
<code>dataSize</code> <strong class="purple">must</strong> be large enough to contain the result of the query,
as described above</p>
</li>
</ul>
</div>
</div>
</div>
<div class="sidebarblock">
<div class="content">
<div class="title">Valid Usage (Implicit)</div>
<div class="ulist">
<ul>
<li>
<p><a id="VUID-vkGetAccelerationStructureHandleNV-device-parameter"></a> <code>device</code> <strong class="purple">must</strong> be a valid <code>VkDevice</code> handle</p>
</li>
<li>
<p><a id="VUID-vkGetAccelerationStructureHandleNV-accelerationStructure-parameter"></a> <code>accelerationStructure</code> <strong class="purple">must</strong> be a valid <code>VkAccelerationStructureNV</code> handle</p>
</li>
<li>
<p><a id="VUID-vkGetAccelerationStructureHandleNV-pData-parameter"></a> <code>pData</code> <strong class="purple">must</strong> be a valid pointer to an array of <code>dataSize</code> bytes</p>
</li>
<li>
<p><a id="VUID-vkGetAccelerationStructureHandleNV-dataSize-arraylength"></a> <code>dataSize</code> <strong class="purple">must</strong> be greater than <code>0</code></p>
</li>
<li>
<p><a id="VUID-vkGetAccelerationStructureHandleNV-accelerationStructure-parent"></a> <code>accelerationStructure</code> <strong class="purple">must</strong> have been created, allocated, or retrieved from <code>device</code></p>
</li>
</ul>
</div>
</div>
</div>
<div class="sidebarblock">
<div class="content">
<div class="title">Return Codes</div>
<div class="dlist">
<dl>
<dt class="hdlist1"><a href="#fundamentals-successcodes">Success</a></dt>
<dd>
<div class="ulist">
<ul>
<li>
<p><code>VK_SUCCESS</code></p>
</li>
</ul>
</div>
</dd>
<dt class="hdlist1"><a href="#fundamentals-errorcodes">Failure</a></dt>
<dd>
<div class="ulist">
<ul>
<li>
<p><code>VK_ERROR_OUT_OF_HOST_MEMORY</code></p>
</li>
<li>
<p><code>VK_ERROR_OUT_OF_DEVICE_MEMORY</code></p>
</li>
</ul>
</div>
</dd>
</dl>
</div>
</div>
</div>
</div>
<div class="sect3">
<h4 id="_see_also_195">See Also</h4>
<div class="paragraph">
<p><a href="#VkAccelerationStructureNV">VkAccelerationStructureNV</a>, <a href="#VkDevice">VkDevice</a></p>
</div>
</div>
<div class="sect3">
<h4 id="_document_notes_195">Document Notes</h4>
<div class="paragraph">
<p>For more information, see the Vulkan Specification at URL</p>
</div>
<div class="paragraph">
<p><a href="https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#vkGetAccelerationStructureHandleNV" class="bare">https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#vkGetAccelerationStructureHandleNV</a></p>
</div>
<div class="paragraph">
<p>This page is extracted from the Vulkan Specification.
Fixes and changes should be made to the Specification, not directly.</p>
</div>
<div style="page-break-after: always;"></div>
</div>
</div>
<div class="sect2">
<h3 id="_vkgetaccelerationstructurememoryrequirementsnv3">vkGetAccelerationStructureMemoryRequirementsNV(3)</h3>
<div class="sect3">
<h4 id="_name_196">Name</h4>
<div class="paragraph">
<p>vkGetAccelerationStructureMemoryRequirementsNV - Get acceleration structure memory requirements</p>
</div>
</div>
<div class="sect3">
<h4 id="_c_specification_196">C Specification</h4>
<div class="paragraph">
<p>An acceleration structure has memory requirements for the structure object
itself, scratch space for the build, and scratch space for the update.</p>
</div>
<div class="paragraph">
<p>To query the memory requirements call:</p>
</div>
<div id="vkGetAccelerationStructureMemoryRequirementsNV" class="listingblock">
<div class="content">
<pre class="highlight"><code class="language-c++" data-lang="c++">void vkGetAccelerationStructureMemoryRequirementsNV(
    VkDevice                                    device,
    const VkAccelerationStructureMemoryRequirementsInfoNV* pInfo,
    VkMemoryRequirements2KHR*                   pMemoryRequirements);</code></pre>
</div>
</div>
</div>
<div class="sect3">
<h4 id="_parameters_196">Parameters</h4>
<div class="ulist">
<ul>
<li>
<p><code>device</code> is the logical device on which the acceleration structure
was created.</p>
</li>
<li>
<p><code>pInfo</code> specifies the acceleration structure to get memory
requirements for.</p>
</li>
<li>
<p><code>pMemoryRequirements</code> returns the requested acceleration structure
memory requirements.</p>
</li>
</ul>
</div>
</div>
<div class="sect3">
<h4 id="_description_196">Description</h4>
<div class="sidebarblock">
<div class="content">
<div class="title">Valid Usage (Implicit)</div>
<div class="ulist">
<ul>
<li>
<p><a id="VUID-vkGetAccelerationStructureMemoryRequirementsNV-device-parameter"></a> <code>device</code> <strong class="purple">must</strong> be a valid <code>VkDevice</code> handle</p>
</li>
<li>
<p><a id="VUID-vkGetAccelerationStructureMemoryRequirementsNV-pInfo-parameter"></a> <code>pInfo</code> <strong class="purple">must</strong> be a valid pointer to a valid <code>VkAccelerationStructureMemoryRequirementsInfoNV</code> structure</p>
</li>
<li>
<p><a id="VUID-vkGetAccelerationStructureMemoryRequirementsNV-pMemoryRequirements-parameter"></a> <code>pMemoryRequirements</code> <strong class="purple">must</strong> be a valid pointer to a <code>VkMemoryRequirements2KHR</code> structure</p>
</li>
</ul>
</div>
</div>
</div>
</div>
<div class="sect3">
<h4 id="_see_also_196">See Also</h4>
<div class="paragraph">
<p><a href="#VkAccelerationStructureMemoryRequirementsInfoNV">VkAccelerationStructureMemoryRequirementsInfoNV</a>, <a href="#VkDevice">VkDevice</a>, <a href="#VkMemoryRequirements2KHR">VkMemoryRequirements2KHR</a></p>
</div>
</div>
<div class="sect3">
<h4 id="_document_notes_196">Document Notes</h4>
<div class="paragraph">
<p>For more information, see the Vulkan Specification at URL</p>
</div>
<div class="paragraph">
<p><a href="https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#vkGetAccelerationStructureMemoryRequirementsNV" class="bare">https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#vkGetAccelerationStructureMemoryRequirementsNV</a></p>
</div>
<div class="paragraph">
<p>This page is extracted from the Vulkan Specification.
Fixes and changes should be made to the Specification, not directly.</p>
</div>
<div style="page-break-after: always;"></div>
</div>
</div>
<div class="sect2">
<h3 id="_vkgetandroidhardwarebufferpropertiesandroid3">vkGetAndroidHardwareBufferPropertiesANDROID(3)</h3>
<div class="sect3">
<h4 id="_name_197">Name</h4>
<div class="paragraph">
<p>vkGetAndroidHardwareBufferPropertiesANDROID - Get Properties of External Memory Android Hardware Buffers</p>
</div>
</div>
<div class="sect3">
<h4 id="_c_specification_197">C Specification</h4>
<div class="paragraph">
<p>To determine the memory parameters to use when importing an Android hardware
buffer, call:</p>
</div>
<div id="vkGetAndroidHardwareBufferPropertiesANDROID" class="listingblock">
<div class="content">
<pre class="highlight"><code class="language-c++" data-lang="c++">VkResult vkGetAndroidHardwareBufferPropertiesANDROID(
    VkDevice                                    device,
    const struct AHardwareBuffer*               buffer,
    VkAndroidHardwareBufferPropertiesANDROID*   pProperties);</code></pre>
</div>
</div>
</div>
<div class="sect3">
<h4 id="_parameters_197">Parameters</h4>
<div class="ulist">
<ul>
<li>
<p><code>device</code> is the logical device that will be importing <code>buffer</code>.</p>
</li>
<li>
<p><code>buffer</code> is the Android hardware buffer which will be imported.</p>
</li>
<li>
<p><code>pProperties</code> is a pointer to a
<a href="#VkAndroidHardwareBufferPropertiesANDROID">VkAndroidHardwareBufferPropertiesANDROID</a> structure in which the
properties of <code>buffer</code> are returned.</p>
</li>
</ul>
</div>
</div>
<div class="sect3">
<h4 id="_description_197">Description</h4>
<div class="sidebarblock">
<div class="content">
<div class="title">Valid Usage</div>
<div class="ulist">
<ul>
<li>
<p><a id="VUID-vkGetAndroidHardwareBufferPropertiesANDROID-buffer-01884"></a>
<code>buffer</code> <strong class="purple">must</strong> be a valid Android hardware buffer object with at
least one of the <code>AHARDWAREBUFFER_USAGE_GPU_</code>* flags in its
<code>AHardwareBuffer_Desc</code>::<code>usage</code></p>
</li>
</ul>
</div>
</div>
</div>
<div class="sidebarblock">
<div class="content">
<div class="title">Valid Usage (Implicit)</div>
<div class="ulist">
<ul>
<li>
<p><a id="VUID-vkGetAndroidHardwareBufferPropertiesANDROID-device-parameter"></a> <code>device</code> <strong class="purple">must</strong> be a valid <code>VkDevice</code> handle</p>
</li>
<li>
<p><a id="VUID-vkGetAndroidHardwareBufferPropertiesANDROID-buffer-parameter"></a> <code>buffer</code> <strong class="purple">must</strong> be a valid pointer to a valid <code>AHardwareBuffer</code> value</p>
</li>
<li>
<p><a id="VUID-vkGetAndroidHardwareBufferPropertiesANDROID-pProperties-parameter"></a> <code>pProperties</code> <strong class="purple">must</strong> be a valid pointer to a <code>VkAndroidHardwareBufferPropertiesANDROID</code> structure</p>
</li>
</ul>
</div>
</div>
</div>
<div class="sidebarblock">
<div class="content">
<div class="title">Return Codes</div>
<div class="dlist">
<dl>
<dt class="hdlist1"><a href="#fundamentals-successcodes">Success</a></dt>
<dd>
<div class="ulist">
<ul>
<li>
<p><code>VK_SUCCESS</code></p>
</li>
</ul>
</div>
</dd>
<dt class="hdlist1"><a href="#fundamentals-errorcodes">Failure</a></dt>
<dd>
<div class="ulist">
<ul>
<li>
<p><code>VK_ERROR_INVALID_EXTERNAL_HANDLE_KHR</code></p>
</li>
</ul>
</div>
</dd>
</dl>
</div>
</div>
</div>
</div>
<div class="sect3">
<h4 id="_see_also_197">See Also</h4>
<div class="paragraph">
<p><a href="#VkAndroidHardwareBufferPropertiesANDROID">VkAndroidHardwareBufferPropertiesANDROID</a>, <a href="#VkDevice">VkDevice</a></p>
</div>
</div>
<div class="sect3">
<h4 id="_document_notes_197">Document Notes</h4>
<div class="paragraph">
<p>For more information, see the Vulkan Specification at URL</p>
</div>
<div class="paragraph">
<p><a href="https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#vkGetAndroidHardwareBufferPropertiesANDROID" class="bare">https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#vkGetAndroidHardwareBufferPropertiesANDROID</a></p>
</div>
<div class="paragraph">
<p>This page is extracted from the Vulkan Specification.
Fixes and changes should be made to the Specification, not directly.</p>
</div>
<div style="page-break-after: always;"></div>
</div>
</div>
<div class="sect2">
<h3 id="_vkgetbufferdeviceaddressext3">vkGetBufferDeviceAddressEXT(3)</h3>
<div class="sect3">
<h4 id="_name_198">Name</h4>
<div class="paragraph">
<p>vkGetBufferDeviceAddressEXT - Query an address of a buffer</p>
</div>
</div>
<div class="sect3">
<h4 id="_c_specification_198">C Specification</h4>
<div class="paragraph">
<p>To query a 64-bit buffer device address value through which buffer memory
<strong class="purple">can</strong> be accessed in a shader, call:</p>
</div>
<div id="vkGetBufferDeviceAddressEXT" class="listingblock">
<div class="content">
<pre class="highlight"><code class="language-c++" data-lang="c++">VkDeviceAddress vkGetBufferDeviceAddressEXT(
    VkDevice                                    device,
    const VkBufferDeviceAddressInfoEXT*         pInfo);</code></pre>
</div>
</div>
</div>
<div class="sect3">
<h4 id="_parameters_198">Parameters</h4>
<div class="ulist">
<ul>
<li>
<p><code>device</code> is the logical device that the buffer was created on.</p>
</li>
<li>
<p><code>pInfo</code> is a pointer to an instance of the
<a href="#VkBufferDeviceAddressInfoEXT">VkBufferDeviceAddressInfoEXT</a> structure specifying the buffer to
retrieve an address for.</p>
</li>
</ul>
</div>
</div>
<div class="sect3">
<h4 id="_description_198">Description</h4>
<div class="paragraph">
<p>The 64-bit return value is an address of the start of
<code>pInfo</code>::<code>buffer</code>.
The address range starting at this value and whose size is the size of the
buffer <strong class="purple">can</strong> be used in a shader to access the memory bound to that buffer,
using the <code>SPV_EXT_physical_storage_buffer</code> extension and the
<code>PhysicalStorageBufferEXT</code> storage class.
For example, this value <strong class="purple">can</strong> be stored in a uniform buffer, and the shader
<strong class="purple">can</strong> read the value from the uniform buffer and use it to do a dependent
read/write to this buffer.
A value of zero is reserved as a &#8220;null&#8221; pointer and <strong class="purple">must</strong> not be returned
as a valid buffer device address.
All loads, stores, and atomics in a shader through
<code>PhysicalStorageBufferEXT</code> pointers <strong class="purple">must</strong> access addresses in the address
range of some buffer.</p>
</div>
<div class="paragraph">
<p>If the buffer was created with a non-zero value of
<a href="#VkBufferDeviceAddressCreateInfoEXT">VkBufferDeviceAddressCreateInfoEXT</a>::<code>deviceAddress</code>, the return
value will be the same address.</p>
</div>
<div class="sidebarblock">
<div class="content">
<div class="title">Valid Usage</div>
<div class="ulist">
<ul>
<li>
<p><a id="VUID-vkGetBufferDeviceAddressEXT-None-02598"></a>
The <a href="vkspec.html#features-bufferDeviceAddress">bufferDeviceAddress</a> feature <strong class="purple">must</strong>
be enabled</p>
</li>
<li>
<p><a id="VUID-vkGetBufferDeviceAddressEXT-device-02599"></a>
If <code>device</code> was created with multiple physical devices, then the
<a href="vkspec.html#features-bufferDeviceAddressMultiDevice">bufferDeviceAddressMultiDevice</a>
feature <strong class="purple">must</strong> be enabled</p>
</li>
</ul>
</div>
</div>
</div>
<div class="sidebarblock">
<div class="content">
<div class="title">Valid Usage (Implicit)</div>
<div class="ulist">
<ul>
<li>
<p><a id="VUID-vkGetBufferDeviceAddressEXT-device-parameter"></a> <code>device</code> <strong class="purple">must</strong> be a valid <code>VkDevice</code> handle</p>
</li>
<li>
<p><a id="VUID-vkGetBufferDeviceAddressEXT-pInfo-parameter"></a> <code>pInfo</code> <strong class="purple">must</strong> be a valid pointer to a valid <code>VkBufferDeviceAddressInfoEXT</code> structure</p>
</li>
</ul>
</div>
</div>
</div>
</div>
<div class="sect3">
<h4 id="_see_also_198">See Also</h4>
<div class="paragraph">
<p><a href="#VkBufferDeviceAddressInfoEXT">VkBufferDeviceAddressInfoEXT</a>, <a href="#VkDevice">VkDevice</a></p>
</div>
</div>
<div class="sect3">
<h4 id="_document_notes_198">Document Notes</h4>
<div class="paragraph">
<p>For more information, see the Vulkan Specification at URL</p>
</div>
<div class="paragraph">
<p><a href="https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#vkGetBufferDeviceAddressEXT" class="bare">https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#vkGetBufferDeviceAddressEXT</a></p>
</div>
<div class="paragraph">
<p>This page is extracted from the Vulkan Specification.
Fixes and changes should be made to the Specification, not directly.</p>
</div>
<div style="page-break-after: always;"></div>
</div>
</div>
<div class="sect2">
<h3 id="_vkgetbuffermemoryrequirements3">vkGetBufferMemoryRequirements(3)</h3>
<div class="sect3">
<h4 id="_name_199">Name</h4>
<div class="paragraph">
<p>vkGetBufferMemoryRequirements - Returns the memory requirements for specified Vulkan object</p>
</div>
</div>
<div class="sect3">
<h4 id="_c_specification_199">C Specification</h4>
<div class="paragraph">
<p>To determine the memory requirements for a buffer resource, call:</p>
</div>
<div id="vkGetBufferMemoryRequirements" class="listingblock">
<div class="content">
<pre class="highlight"><code class="language-c++" data-lang="c++">void vkGetBufferMemoryRequirements(
    VkDevice                                    device,
    VkBuffer                                    buffer,
    VkMemoryRequirements*                       pMemoryRequirements);</code></pre>
</div>
</div>
</div>
<div class="sect3">
<h4 id="_parameters_199">Parameters</h4>
<div class="ulist">
<ul>
<li>
<p><code>device</code> is the logical device that owns the buffer.</p>
</li>
<li>
<p><code>buffer</code> is the buffer to query.</p>
</li>
<li>
<p><code>pMemoryRequirements</code> points to an instance of the
<a href="#VkMemoryRequirements">VkMemoryRequirements</a> structure in which the memory requirements of
the buffer object are returned.</p>
</li>
</ul>
</div>
</div>
<div class="sect3">
<h4 id="_description_199">Description</h4>
<div class="sidebarblock">
<div class="content">
<div class="title">Valid Usage (Implicit)</div>
<div class="ulist">
<ul>
<li>
<p><a id="VUID-vkGetBufferMemoryRequirements-device-parameter"></a> <code>device</code> <strong class="purple">must</strong> be a valid <code>VkDevice</code> handle</p>
</li>
<li>
<p><a id="VUID-vkGetBufferMemoryRequirements-buffer-parameter"></a> <code>buffer</code> <strong class="purple">must</strong> be a valid <code>VkBuffer</code> handle</p>
</li>
<li>
<p><a id="VUID-vkGetBufferMemoryRequirements-pMemoryRequirements-parameter"></a> <code>pMemoryRequirements</code> <strong class="purple">must</strong> be a valid pointer to a <code>VkMemoryRequirements</code> structure</p>
</li>
<li>
<p><a id="VUID-vkGetBufferMemoryRequirements-buffer-parent"></a> <code>buffer</code> <strong class="purple">must</strong> have been created, allocated, or retrieved from <code>device</code></p>
</li>
</ul>
</div>
</div>
</div>
</div>
<div class="sect3">
<h4 id="_see_also_199">See Also</h4>
<div class="paragraph">
<p><a href="#VkBuffer">VkBuffer</a>, <a href="#VkDevice">VkDevice</a>, <a href="#VkMemoryRequirements">VkMemoryRequirements</a></p>
</div>
</div>
<div class="sect3">
<h4 id="_document_notes_199">Document Notes</h4>
<div class="paragraph">
<p>For more information, see the Vulkan Specification at URL</p>
</div>
<div class="paragraph">
<p><a href="https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#vkGetBufferMemoryRequirements" class="bare">https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#vkGetBufferMemoryRequirements</a></p>
</div>
<div class="paragraph">
<p>This page is extracted from the Vulkan Specification.
Fixes and changes should be made to the Specification, not directly.</p>
</div>
<div style="page-break-after: always;"></div>
</div>
</div>
<div class="sect2">
<h3 id="_vkgetbuffermemoryrequirements23">vkGetBufferMemoryRequirements2(3)</h3>
<div class="sect3">
<h4 id="_name_200">Name</h4>
<div class="paragraph">
<p>vkGetBufferMemoryRequirements2 - Returns the memory requirements for specified Vulkan object</p>
</div>
</div>
<div class="sect3">
<h4 id="_c_specification_200">C Specification</h4>
<div class="paragraph">
<p>To determine the memory requirements for a buffer resource, call:</p>
</div>
<div id="vkGetBufferMemoryRequirements2" class="listingblock">
<div class="content">
<pre class="highlight"><code class="language-c++" data-lang="c++">void vkGetBufferMemoryRequirements2(
    VkDevice                                    device,
    const VkBufferMemoryRequirementsInfo2*      pInfo,
    VkMemoryRequirements2*                      pMemoryRequirements);</code></pre>
</div>
</div>
<div class="paragraph">
<p>or the equivalent command</p>
</div>
<div id="vkGetBufferMemoryRequirements2KHR" class="listingblock">
<div class="content">
<pre class="highlight"><code class="language-c++" data-lang="c++">void vkGetBufferMemoryRequirements2KHR(
    VkDevice                                    device,
    const VkBufferMemoryRequirementsInfo2*      pInfo,
    VkMemoryRequirements2*                      pMemoryRequirements);</code></pre>
</div>
</div>
</div>
<div class="sect3">
<h4 id="_parameters_200">Parameters</h4>
<div class="ulist">
<ul>
<li>
<p><code>device</code> is the logical device that owns the buffer.</p>
</li>
<li>
<p><code>pInfo</code> is a pointer to an instance of the
<code>VkBufferMemoryRequirementsInfo2</code> structure containing parameters
required for the memory requirements query.</p>
</li>
<li>
<p><code>pMemoryRequirements</code> points to an instance of the
<a href="#VkMemoryRequirements2">VkMemoryRequirements2</a> structure in which the memory requirements
of the buffer object are returned.</p>
</li>
</ul>
</div>
</div>
<div class="sect3">
<h4 id="_description_200">Description</h4>
<div class="sidebarblock">
<div class="content">
<div class="title">Valid Usage (Implicit)</div>
<div class="ulist">
<ul>
<li>
<p><a id="VUID-vkGetBufferMemoryRequirements2-device-parameter"></a> <code>device</code> <strong class="purple">must</strong> be a valid <code>VkDevice</code> handle</p>
</li>
<li>
<p><a id="VUID-vkGetBufferMemoryRequirements2-pInfo-parameter"></a> <code>pInfo</code> <strong class="purple">must</strong> be a valid pointer to a valid <code>VkBufferMemoryRequirementsInfo2</code> structure</p>
</li>
<li>
<p><a id="VUID-vkGetBufferMemoryRequirements2-pMemoryRequirements-parameter"></a> <code>pMemoryRequirements</code> <strong class="purple">must</strong> be a valid pointer to a <code>VkMemoryRequirements2</code> structure</p>
</li>
</ul>
</div>
</div>
</div>
</div>
<div class="sect3">
<h4 id="_see_also_200">See Also</h4>
<div class="paragraph">
<p><a href="#VkBufferMemoryRequirementsInfo2">VkBufferMemoryRequirementsInfo2</a>, <a href="#VkDevice">VkDevice</a>, <a href="#VkMemoryRequirements2">VkMemoryRequirements2</a></p>
</div>
</div>
<div class="sect3">
<h4 id="_document_notes_200">Document Notes</h4>
<div class="paragraph">
<p>For more information, see the Vulkan Specification at URL</p>
</div>
<div class="paragraph">
<p><a href="https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#vkGetBufferMemoryRequirements2" class="bare">https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#vkGetBufferMemoryRequirements2</a></p>
</div>
<div class="paragraph">
<p>This page is extracted from the Vulkan Specification.
Fixes and changes should be made to the Specification, not directly.</p>
</div>
<div style="page-break-after: always;"></div>
</div>
</div>
<div class="sect2">
<h3 id="_vkgetcalibratedtimestampsext3">vkGetCalibratedTimestampsEXT(3)</h3>
<div class="sect3">
<h4 id="_name_201">Name</h4>
<div class="paragraph">
<p>vkGetCalibratedTimestampsEXT - Query calibrated timestamps</p>
</div>
</div>
<div class="sect3">
<h4 id="_c_specification_201">C Specification</h4>
<div class="paragraph">
<p>In order to be able to correlate the time a particular operation took place
at on timelines of different time domains (e.g. a device operation vs a host
operation), Vulkan allows querying calibrated timestamps from multiple time
domains.</p>
</div>
<div class="paragraph">
<p>To query calibrated timestamps from a set of time domains, call:</p>
</div>
<div id="vkGetCalibratedTimestampsEXT" class="listingblock">
<div class="content">
<pre class="highlight"><code class="language-c++" data-lang="c++">VkResult vkGetCalibratedTimestampsEXT(
    VkDevice                                    device,
    uint32_t                                    timestampCount,
    const VkCalibratedTimestampInfoEXT*         pTimestampInfos,
    uint64_t*                                   pTimestamps,
    uint64_t*                                   pMaxDeviation);</code></pre>
</div>
</div>
</div>
<div class="sect3">
<h4 id="_parameters_201">Parameters</h4>
<div class="ulist">
<ul>
<li>
<p><code>device</code> is the logical device used to perform the query.</p>
</li>
<li>
<p><code>timestampCount</code> is the number of timestamps to query.</p>
</li>
<li>
<p><code>pTimestampInfos</code> is a pointer to an array of <code>timestampCount</code>
number of structures of type <a href="#VkCalibratedTimestampInfoEXT">VkCalibratedTimestampInfoEXT</a>,
describing the time domains the calibrated timestamps should be captured
from.</p>
</li>
<li>
<p><code>pTimestamps</code> is a pointer to an array of <code>timestampCount</code>
number of 64-bit unsigned integer values in which the requested
calibrated timestamp values are returned.</p>
</li>
<li>
<p><code>pMaxDeviation</code> is a pointer to a 64-bit unsigned integer value in
which the strictly positive maximum deviation, in nanoseconds, of the
calibrated timestamp values is returned.</p>
</li>
</ul>
</div>
</div>
<div class="sect3">
<h4 id="_description_201">Description</h4>
<div class="admonitionblock note">
<table>
<tr>
<td class="icon">
<i class="fa icon-note" title="Note"></i>
</td>
<td class="content">
<div class="title">Note</div>
<div class="paragraph">
<p>The maximum deviation <strong class="purple">may</strong> vary between calls to
<code>vkGetCalibratedTimestampsEXT</code> even for the same set of time domains due
to implementation and platform specific reasons.
It is the application&#8217;s responsibility to assess whether the returned
maximum deviation makes the timestamp values suitable for any particular
purpose and <strong class="purple">can</strong> choose to re-issue the timestamp calibration call pursuing
a lower devation value.</p>
</div>
</td>
</tr>
</table>
</div>
<div class="paragraph">
<p>Calibrated timestamp values <strong class="purple">can</strong> be extrapolated to estimate future
coinciding timestamp values, however, depending on the nature of the time
domains and other properties of the platform extrapolating values over a
sufficiently long period of time <strong class="purple">may</strong> no longer be accurate enough to fit
any particular purpose so applications are expected to re-calibrate the
timestamps on a regular basis.</p>
</div>
<div class="sidebarblock">
<div class="content">
<div class="title">Valid Usage (Implicit)</div>
<div class="ulist">
<ul>
<li>
<p><a id="VUID-vkGetCalibratedTimestampsEXT-device-parameter"></a> <code>device</code> <strong class="purple">must</strong> be a valid <code>VkDevice</code> handle</p>
</li>
<li>
<p><a id="VUID-vkGetCalibratedTimestampsEXT-pTimestampInfos-parameter"></a> <code>pTimestampInfos</code> <strong class="purple">must</strong> be a valid pointer to an array of <code>timestampCount</code> valid <code>VkCalibratedTimestampInfoEXT</code> structures</p>
</li>
<li>
<p><a id="VUID-vkGetCalibratedTimestampsEXT-pTimestamps-parameter"></a> <code>pTimestamps</code> <strong class="purple">must</strong> be a valid pointer to an array of <code>timestampCount</code> <code>uint64_t</code> values</p>
</li>
<li>
<p><a id="VUID-vkGetCalibratedTimestampsEXT-pMaxDeviation-parameter"></a> <code>pMaxDeviation</code> <strong class="purple">must</strong> be a valid pointer to a <code>uint64_t</code> value</p>
</li>
<li>
<p><a id="VUID-vkGetCalibratedTimestampsEXT-timestampCount-arraylength"></a> <code>timestampCount</code> <strong class="purple">must</strong> be greater than <code>0</code></p>
</li>
</ul>
</div>
</div>
</div>
<div class="sidebarblock">
<div class="content">
<div class="title">Return Codes</div>
<div class="dlist">
<dl>
<dt class="hdlist1"><a href="#fundamentals-successcodes">Success</a></dt>
<dd>
<div class="ulist">
<ul>
<li>
<p><code>VK_SUCCESS</code></p>
</li>
</ul>
</div>
</dd>
<dt class="hdlist1"><a href="#fundamentals-errorcodes">Failure</a></dt>
<dd>
<div class="ulist">
<ul>
<li>
<p><code>VK_ERROR_OUT_OF_HOST_MEMORY</code></p>
</li>
<li>
<p><code>VK_ERROR_OUT_OF_DEVICE_MEMORY</code></p>
</li>
</ul>
</div>
</dd>
</dl>
</div>
</div>
</div>
</div>
<div class="sect3">
<h4 id="_see_also_201">See Also</h4>
<div class="paragraph">
<p><a href="#VkCalibratedTimestampInfoEXT">VkCalibratedTimestampInfoEXT</a>, <a href="#VkDevice">VkDevice</a></p>
</div>
</div>
<div class="sect3">
<h4 id="_document_notes_201">Document Notes</h4>
<div class="paragraph">
<p>For more information, see the Vulkan Specification at URL</p>
</div>
<div class="paragraph">
<p><a href="https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#vkGetCalibratedTimestampsEXT" class="bare">https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#vkGetCalibratedTimestampsEXT</a></p>
</div>
<div class="paragraph">
<p>This page is extracted from the Vulkan Specification.
Fixes and changes should be made to the Specification, not directly.</p>
</div>
<div style="page-break-after: always;"></div>
</div>
</div>
<div class="sect2">
<h3 id="_vkgetdescriptorsetlayoutsupport3">vkGetDescriptorSetLayoutSupport(3)</h3>
<div class="sect3">
<h4 id="_name_202">Name</h4>
<div class="paragraph">
<p>vkGetDescriptorSetLayoutSupport - Query whether a descriptor set layout can be created</p>
</div>
</div>
<div class="sect3">
<h4 id="_c_specification_202">C Specification</h4>
<div class="paragraph">
<p>To query information about whether a descriptor set layout <strong class="purple">can</strong> be created,
call:</p>
</div>
<div id="vkGetDescriptorSetLayoutSupport" class="listingblock">
<div class="content">
<pre class="highlight"><code class="language-c++" data-lang="c++">void vkGetDescriptorSetLayoutSupport(
    VkDevice                                    device,
    const VkDescriptorSetLayoutCreateInfo*      pCreateInfo,
    VkDescriptorSetLayoutSupport*               pSupport);</code></pre>
</div>
</div>
<div class="paragraph">
<p>or the equivalent command</p>
</div>
<div id="vkGetDescriptorSetLayoutSupportKHR" class="listingblock">
<div class="content">
<pre class="highlight"><code class="language-c++" data-lang="c++">void vkGetDescriptorSetLayoutSupportKHR(
    VkDevice                                    device,
    const VkDescriptorSetLayoutCreateInfo*      pCreateInfo,
    VkDescriptorSetLayoutSupport*               pSupport);</code></pre>
</div>
</div>
</div>
<div class="sect3">
<h4 id="_parameters_202">Parameters</h4>
<div class="ulist">
<ul>
<li>
<p><code>device</code> is the logical device that would create the descriptor set
layout.</p>
</li>
<li>
<p><code>pCreateInfo</code> is a pointer to an instance of the
<a href="#VkDescriptorSetLayoutCreateInfo">VkDescriptorSetLayoutCreateInfo</a> structure specifying the state of
the descriptor set layout object.</p>
</li>
<li>
<p><code>pSupport</code> points to a <a href="#VkDescriptorSetLayoutSupport">VkDescriptorSetLayoutSupport</a> structure
in which information about support for the descriptor set layout object
is returned.</p>
</li>
</ul>
</div>
</div>
<div class="sect3">
<h4 id="_description_202">Description</h4>
<div class="paragraph">
<p>Some implementations have limitations on what fits in a descriptor set which
are not easily expressible in terms of existing limits like
<code>maxDescriptorSet</code>*, for example if all descriptor types share a limited
space in memory but each descriptor is a different size or alignment.
This command returns information about whether a descriptor set satisfies
this limit.
If the descriptor set layout satisfies the
<a href="#VkPhysicalDeviceMaintenance3Properties">VkPhysicalDeviceMaintenance3Properties</a>::<code>maxPerSetDescriptors</code>
limit, this command is guaranteed to return <code>VK_TRUE</code> in
<a href="#VkDescriptorSetLayoutSupport">VkDescriptorSetLayoutSupport</a>::<code>supported</code>.
If the descriptor set layout exceeds the
<a href="#VkPhysicalDeviceMaintenance3Properties">VkPhysicalDeviceMaintenance3Properties</a>::<code>maxPerSetDescriptors</code>
limit, whether the descriptor set layout is supported is
implementation-dependent and <strong class="purple">may</strong> depend on whether the descriptor sizes and
alignments cause the layout to exceed an internal limit.</p>
</div>
<div class="paragraph">
<p>This command does not consider other limits such as
<code>maxPerStageDescriptor</code>*, and so a descriptor set layout that is
supported according to this command <strong class="purple">must</strong> still satisfy the pipeline layout
limits such as <code>maxPerStageDescriptor</code>* in order to be used in a
pipeline layout.</p>
</div>
<div class="admonitionblock note">
<table>
<tr>
<td class="icon">
<i class="fa icon-note" title="Note"></i>
</td>
<td class="content">
<div class="title">Note</div>
<div class="paragraph">
<p>This is a <code>VkDevice</code> query rather than <code>VkPhysicalDevice</code> because
the answer <strong class="purple">may</strong> depend on enabled features.</p>
</div>
</td>
</tr>
</table>
</div>
<div class="sidebarblock">
<div class="content">
<div class="title">Valid Usage (Implicit)</div>
<div class="ulist">
<ul>
<li>
<p><a id="VUID-vkGetDescriptorSetLayoutSupport-device-parameter"></a> <code>device</code> <strong class="purple">must</strong> be a valid <code>VkDevice</code> handle</p>
</li>
<li>
<p><a id="VUID-vkGetDescriptorSetLayoutSupport-pCreateInfo-parameter"></a> <code>pCreateInfo</code> <strong class="purple">must</strong> be a valid pointer to a valid <code>VkDescriptorSetLayoutCreateInfo</code> structure</p>
</li>
<li>
<p><a id="VUID-vkGetDescriptorSetLayoutSupport-pSupport-parameter"></a> <code>pSupport</code> <strong class="purple">must</strong> be a valid pointer to a <code>VkDescriptorSetLayoutSupport</code> structure</p>
</li>
</ul>
</div>
</div>
</div>
</div>
<div class="sect3">
<h4 id="_see_also_202">See Also</h4>
<div class="paragraph">
<p><a href="#VkDescriptorSetLayoutCreateInfo">VkDescriptorSetLayoutCreateInfo</a>, <a href="#VkDescriptorSetLayoutSupport">VkDescriptorSetLayoutSupport</a>, <a href="#VkDevice">VkDevice</a></p>
</div>
</div>
<div class="sect3">
<h4 id="_document_notes_202">Document Notes</h4>
<div class="paragraph">
<p>For more information, see the Vulkan Specification at URL</p>
</div>
<div class="paragraph">
<p><a href="https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#vkGetDescriptorSetLayoutSupport" class="bare">https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#vkGetDescriptorSetLayoutSupport</a></p>
</div>
<div class="paragraph">
<p>This page is extracted from the Vulkan Specification.
Fixes and changes should be made to the Specification, not directly.</p>
</div>
<div style="page-break-after: always;"></div>
</div>
</div>
<div class="sect2">
<h3 id="_vkgetdevicegrouppeermemoryfeatures3">vkGetDeviceGroupPeerMemoryFeatures(3)</h3>
<div class="sect3">
<h4 id="_name_203">Name</h4>
<div class="paragraph">
<p>vkGetDeviceGroupPeerMemoryFeatures - Query supported peer memory features of a device</p>
</div>
</div>
<div class="sect3">
<h4 id="_c_specification_203">C Specification</h4>
<div class="paragraph">
<p><em>Peer memory</em> is memory that is allocated for a given physical device and
then bound to a resource and accessed by a different physical device, in a
logical device that represents multiple physical devices.
Some ways of reading and writing peer memory <strong class="purple">may</strong> not be supported by a
device.</p>
</div>
<div class="paragraph">
<p>To determine how peer memory <strong class="purple">can</strong> be accessed, call:</p>
</div>
<div id="vkGetDeviceGroupPeerMemoryFeatures" class="listingblock">
<div class="content">
<pre class="highlight"><code class="language-c++" data-lang="c++">void vkGetDeviceGroupPeerMemoryFeatures(
    VkDevice                                    device,
    uint32_t                                    heapIndex,
    uint32_t                                    localDeviceIndex,
    uint32_t                                    remoteDeviceIndex,
    VkPeerMemoryFeatureFlags*                   pPeerMemoryFeatures);</code></pre>
</div>
</div>
<div class="paragraph">
<p>or the equivalent command</p>
</div>
<div id="vkGetDeviceGroupPeerMemoryFeaturesKHR" class="listingblock">
<div class="content">
<pre class="highlight"><code class="language-c++" data-lang="c++">void vkGetDeviceGroupPeerMemoryFeaturesKHR(
    VkDevice                                    device,
    uint32_t                                    heapIndex,
    uint32_t                                    localDeviceIndex,
    uint32_t                                    remoteDeviceIndex,
    VkPeerMemoryFeatureFlags*                   pPeerMemoryFeatures);</code></pre>
</div>
</div>
</div>
<div class="sect3">
<h4 id="_parameters_203">Parameters</h4>
<div class="ulist">
<ul>
<li>
<p><code>device</code> is the logical device that owns the memory.</p>
</li>
<li>
<p><code>heapIndex</code> is the index of the memory heap from which the memory is
allocated.</p>
</li>
<li>
<p><code>localDeviceIndex</code> is the device index of the physical device that
performs the memory access.</p>
</li>
<li>
<p><code>remoteDeviceIndex</code> is the device index of the physical device that
the memory is allocated for.</p>
</li>
<li>
<p><code>pPeerMemoryFeatures</code> is a pointer to a bitmask of
<a href="#VkPeerMemoryFeatureFlagBits">VkPeerMemoryFeatureFlagBits</a> indicating which types of memory
accesses are supported for the combination of heap, local, and remote
devices.</p>
</li>
</ul>
</div>
</div>
<div class="sect3">
<h4 id="_description_203">Description</h4>
<div class="sidebarblock">
<div class="content">
<div class="title">Valid Usage</div>
<div class="ulist">
<ul>
<li>
<p><a id="VUID-vkGetDeviceGroupPeerMemoryFeatures-heapIndex-00691"></a>
<code>heapIndex</code> <strong class="purple">must</strong> be less than <code>memoryHeapCount</code></p>
</li>
<li>
<p><a id="VUID-vkGetDeviceGroupPeerMemoryFeatures-localDeviceIndex-00692"></a>
<code>localDeviceIndex</code> <strong class="purple">must</strong> be a valid device index</p>
</li>
<li>
<p><a id="VUID-vkGetDeviceGroupPeerMemoryFeatures-remoteDeviceIndex-00693"></a>
<code>remoteDeviceIndex</code> <strong class="purple">must</strong> be a valid device index</p>
</li>
<li>
<p><a id="VUID-vkGetDeviceGroupPeerMemoryFeatures-localDeviceIndex-00694"></a>
<code>localDeviceIndex</code> <strong class="purple">must</strong> not equal <code>remoteDeviceIndex</code></p>
</li>
</ul>
</div>
</div>
</div>
<div class="sidebarblock">
<div class="content">
<div class="title">Valid Usage (Implicit)</div>
<div class="ulist">
<ul>
<li>
<p><a id="VUID-vkGetDeviceGroupPeerMemoryFeatures-device-parameter"></a> <code>device</code> <strong class="purple">must</strong> be a valid <code>VkDevice</code> handle</p>
</li>
<li>
<p><a id="VUID-vkGetDeviceGroupPeerMemoryFeatures-pPeerMemoryFeatures-parameter"></a> <code>pPeerMemoryFeatures</code> <strong class="purple">must</strong> be a valid pointer to a <a href="#VkPeerMemoryFeatureFlags">VkPeerMemoryFeatureFlags</a> value</p>
</li>
</ul>
</div>
</div>
</div>
</div>
<div class="sect3">
<h4 id="_see_also_203">See Also</h4>
<div class="paragraph">
<p><a href="#VkDevice">VkDevice</a>, <a href="#VkPeerMemoryFeatureFlags">VkPeerMemoryFeatureFlags</a></p>
</div>
</div>
<div class="sect3">
<h4 id="_document_notes_203">Document Notes</h4>
<div class="paragraph">
<p>For more information, see the Vulkan Specification at URL</p>
</div>
<div class="paragraph">
<p><a href="https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#vkGetDeviceGroupPeerMemoryFeatures" class="bare">https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#vkGetDeviceGroupPeerMemoryFeatures</a></p>
</div>
<div class="paragraph">
<p>This page is extracted from the Vulkan Specification.
Fixes and changes should be made to the Specification, not directly.</p>
</div>
<div style="page-break-after: always;"></div>
</div>
</div>
<div class="sect2">
<h3 id="_vkgetdevicegrouppresentcapabilitieskhr3">vkGetDeviceGroupPresentCapabilitiesKHR(3)</h3>
<div class="sect3">
<h4 id="_name_204">Name</h4>
<div class="paragraph">
<p>vkGetDeviceGroupPresentCapabilitiesKHR - Query present capabilities from other physical devices</p>
</div>
</div>
<div class="sect3">
<h4 id="_c_specification_204">C Specification</h4>
<div class="paragraph">
<p>A logical device that represents multiple physical devices <strong class="purple">may</strong> support
presenting from images on more than one physical device, or combining images
from multiple physical devices.</p>
</div>
<div class="paragraph">
<p>To query these capabilities, call:</p>
</div>
<div id="vkGetDeviceGroupPresentCapabilitiesKHR" class="listingblock">
<div class="content">
<pre class="highlight"><code class="language-c++" data-lang="c++">VkResult vkGetDeviceGroupPresentCapabilitiesKHR(
    VkDevice                                    device,
    VkDeviceGroupPresentCapabilitiesKHR*        pDeviceGroupPresentCapabilities);</code></pre>
</div>
</div>
</div>
<div class="sect3">
<h4 id="_parameters_204">Parameters</h4>
<div class="ulist">
<ul>
<li>
<p><code>device</code> is the logical device.</p>
</li>
<li>
<p><code>pDeviceGroupPresentCapabilities</code> is a pointer to a structure of
type <a href="#VkDeviceGroupPresentCapabilitiesKHR">VkDeviceGroupPresentCapabilitiesKHR</a> that is filled with the
logical device&#8217;s capabilities.</p>
</li>
</ul>
</div>
</div>
<div class="sect3">
<h4 id="_description_204">Description</h4>
<div class="sidebarblock">
<div class="content">
<div class="title">Valid Usage (Implicit)</div>
<div class="ulist">
<ul>
<li>
<p><a id="VUID-vkGetDeviceGroupPresentCapabilitiesKHR-device-parameter"></a> <code>device</code> <strong class="purple">must</strong> be a valid <code>VkDevice</code> handle</p>
</li>
<li>
<p><a id="VUID-vkGetDeviceGroupPresentCapabilitiesKHR-pDeviceGroupPresentCapabilities-parameter"></a> <code>pDeviceGroupPresentCapabilities</code> <strong class="purple">must</strong> be a valid pointer to a <code>VkDeviceGroupPresentCapabilitiesKHR</code> structure</p>
</li>
</ul>
</div>
</div>
</div>
<div class="sidebarblock">
<div class="content">
<div class="title">Return Codes</div>
<div class="dlist">
<dl>
<dt class="hdlist1"><a href="#fundamentals-successcodes">Success</a></dt>
<dd>
<div class="ulist">
<ul>
<li>
<p><code>VK_SUCCESS</code></p>
</li>
</ul>
</div>
</dd>
<dt class="hdlist1"><a href="#fundamentals-errorcodes">Failure</a></dt>
<dd>
<div class="ulist">
<ul>
<li>
<p><code>VK_ERROR_OUT_OF_HOST_MEMORY</code></p>
</li>
<li>
<p><code>VK_ERROR_OUT_OF_DEVICE_MEMORY</code></p>
</li>
</ul>
</div>
</dd>
</dl>
</div>
</div>
</div>
</div>
<div class="sect3">
<h4 id="_see_also_204">See Also</h4>
<div class="paragraph">
<p><a href="#VkDevice">VkDevice</a>, <a href="#VkDeviceGroupPresentCapabilitiesKHR">VkDeviceGroupPresentCapabilitiesKHR</a></p>
</div>
</div>
<div class="sect3">
<h4 id="_document_notes_204">Document Notes</h4>
<div class="paragraph">
<p>For more information, see the Vulkan Specification at URL</p>
</div>
<div class="paragraph">
<p><a href="https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#vkGetDeviceGroupPresentCapabilitiesKHR" class="bare">https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#vkGetDeviceGroupPresentCapabilitiesKHR</a></p>
</div>
<div class="paragraph">
<p>This page is extracted from the Vulkan Specification.
Fixes and changes should be made to the Specification, not directly.</p>
</div>
<div style="page-break-after: always;"></div>
</div>
</div>
<div class="sect2">
<h3 id="_vkgetdevicegroupsurfacepresentmodes2ext3">vkGetDeviceGroupSurfacePresentModes2EXT(3)</h3>
<div class="sect3">
<h4 id="_name_205">Name</h4>
<div class="paragraph">
<p>vkGetDeviceGroupSurfacePresentModes2EXT - Query device group present capabilities for a surface</p>
</div>
</div>
<div class="sect3">
<h4 id="_c_specification_205">C Specification</h4>
<div class="paragraph">
<p>Alternatively, to query the supported device group presentation modes for a
surface combined with select other fixed swapchain creation parameters,
call:</p>
</div>
<div id="vkGetDeviceGroupSurfacePresentModes2EXT" class="listingblock">
<div class="content">
<pre class="highlight"><code class="language-c++" data-lang="c++">VkResult vkGetDeviceGroupSurfacePresentModes2EXT(
    VkDevice                                    device,
    const VkPhysicalDeviceSurfaceInfo2KHR*      pSurfaceInfo,
    VkDeviceGroupPresentModeFlagsKHR*           pModes);</code></pre>
</div>
</div>
</div>
<div class="sect3">
<h4 id="_parameters_205">Parameters</h4>
<div class="ulist">
<ul>
<li>
<p><code>device</code> is the logical device.</p>
</li>
<li>
<p><code>pSurfaceInfo</code> points to an instance of the
VkPhysicalDeviceSurfaceInfo2KHR structure, describing the surface and
other fixed parameters that would be consumed by vkCreateSwapchainKHR.</p>
</li>
<li>
<p><code>pModes</code> is a pointer to a value of type
<a href="#VkDeviceGroupPresentModeFlagsKHR">VkDeviceGroupPresentModeFlagsKHR</a> that is filled with the supported
device group present modes for the surface.</p>
</li>
</ul>
</div>
</div>
<div class="sect3">
<h4 id="_description_205">Description</h4>
<div class="paragraph">
<p><code>vkGetDeviceGroupSurfacePresentModes2EXT</code> behaves similarly to
<a href="#vkGetDeviceGroupSurfacePresentModesKHR">vkGetDeviceGroupSurfacePresentModesKHR</a>, with the ability to specify
extended inputs via chained input structures.</p>
</div>
<div class="sidebarblock">
<div class="content">
<div class="title">Valid Usage (Implicit)</div>
<div class="ulist">
<ul>
<li>
<p><a id="VUID-vkGetDeviceGroupSurfacePresentModes2EXT-device-parameter"></a> <code>device</code> <strong class="purple">must</strong> be a valid <code>VkDevice</code> handle</p>
</li>
<li>
<p><a id="VUID-vkGetDeviceGroupSurfacePresentModes2EXT-pSurfaceInfo-parameter"></a> <code>pSurfaceInfo</code> <strong class="purple">must</strong> be a valid pointer to a valid <code>VkPhysicalDeviceSurfaceInfo2KHR</code> structure</p>
</li>
<li>
<p><a id="VUID-vkGetDeviceGroupSurfacePresentModes2EXT-pModes-parameter"></a> <code>pModes</code> <strong class="purple">must</strong> be a valid pointer to a <a href="#VkDeviceGroupPresentModeFlagsKHR">VkDeviceGroupPresentModeFlagsKHR</a> value</p>
</li>
</ul>
</div>
</div>
</div>
<div class="sidebarblock">
<div class="content">
<div class="title">Return Codes</div>
<div class="dlist">
<dl>
<dt class="hdlist1"><a href="#fundamentals-successcodes">Success</a></dt>
<dd>
<div class="ulist">
<ul>
<li>
<p><code>VK_SUCCESS</code></p>
</li>
</ul>
</div>
</dd>
<dt class="hdlist1"><a href="#fundamentals-errorcodes">Failure</a></dt>
<dd>
<div class="ulist">
<ul>
<li>
<p><code>VK_ERROR_OUT_OF_HOST_MEMORY</code></p>
</li>
<li>
<p><code>VK_ERROR_OUT_OF_DEVICE_MEMORY</code></p>
</li>
<li>
<p><code>VK_ERROR_SURFACE_LOST_KHR</code></p>
</li>
</ul>
</div>
</dd>
</dl>
</div>
</div>
</div>
</div>
<div class="sect3">
<h4 id="_see_also_205">See Also</h4>
<div class="paragraph">
<p><a href="#VkDevice">VkDevice</a>, <a href="#VkDeviceGroupPresentModeFlagsKHR">VkDeviceGroupPresentModeFlagsKHR</a>, <a href="#VkPhysicalDeviceSurfaceInfo2KHR">VkPhysicalDeviceSurfaceInfo2KHR</a></p>
</div>
</div>
<div class="sect3">
<h4 id="_document_notes_205">Document Notes</h4>
<div class="paragraph">
<p>For more information, see the Vulkan Specification at URL</p>
</div>
<div class="paragraph">
<p><a href="https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#vkGetDeviceGroupSurfacePresentModes2EXT" class="bare">https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#vkGetDeviceGroupSurfacePresentModes2EXT</a></p>
</div>
<div class="paragraph">
<p>This page is extracted from the Vulkan Specification.
Fixes and changes should be made to the Specification, not directly.</p>
</div>
<div style="page-break-after: always;"></div>
</div>
</div>
<div class="sect2">
<h3 id="_vkgetdevicegroupsurfacepresentmodeskhr3">vkGetDeviceGroupSurfacePresentModesKHR(3)</h3>
<div class="sect3">
<h4 id="_name_206">Name</h4>
<div class="paragraph">
<p>vkGetDeviceGroupSurfacePresentModesKHR - Query present capabilities for a surface</p>
</div>
</div>
<div class="sect3">
<h4 id="_c_specification_206">C Specification</h4>
<div class="paragraph">
<p>Some surfaces <strong class="purple">may</strong> not be capable of using all the device group present
modes.</p>
</div>
<div class="paragraph">
<p>To query the supported device group present modes for a particular surface,
call:</p>
</div>
<div id="vkGetDeviceGroupSurfacePresentModesKHR" class="listingblock">
<div class="content">
<pre class="highlight"><code class="language-c++" data-lang="c++">VkResult vkGetDeviceGroupSurfacePresentModesKHR(
    VkDevice                                    device,
    VkSurfaceKHR                                surface,
    VkDeviceGroupPresentModeFlagsKHR*           pModes);</code></pre>
</div>
</div>
</div>
<div class="sect3">
<h4 id="_parameters_206">Parameters</h4>
<div class="ulist">
<ul>
<li>
<p><code>device</code> is the logical device.</p>
</li>
<li>
<p><code>surface</code> is the surface.</p>
</li>
<li>
<p><code>pModes</code> is a pointer to a value of type
<a href="#VkDeviceGroupPresentModeFlagsKHR">VkDeviceGroupPresentModeFlagsKHR</a> that is filled with the supported
device group present modes for the surface.</p>
</li>
</ul>
</div>
</div>
<div class="sect3">
<h4 id="_description_206">Description</h4>
<div class="paragraph">
<p>The modes returned by this command are not invariant, and <strong class="purple">may</strong> change in
response to the surface being moved, resized, or occluded.
These modes <strong class="purple">must</strong> be a subset of the modes returned by
<a href="#vkGetDeviceGroupPresentCapabilitiesKHR">vkGetDeviceGroupPresentCapabilitiesKHR</a>.</p>
</div>
<div class="sidebarblock">
<div class="content">
<div class="title">Valid Usage (Implicit)</div>
<div class="ulist">
<ul>
<li>
<p><a id="VUID-vkGetDeviceGroupSurfacePresentModesKHR-device-parameter"></a> <code>device</code> <strong class="purple">must</strong> be a valid <code>VkDevice</code> handle</p>
</li>
<li>
<p><a id="VUID-vkGetDeviceGroupSurfacePresentModesKHR-surface-parameter"></a> <code>surface</code> <strong class="purple">must</strong> be a valid <code>VkSurfaceKHR</code> handle</p>
</li>
<li>
<p><a id="VUID-vkGetDeviceGroupSurfacePresentModesKHR-pModes-parameter"></a> <code>pModes</code> <strong class="purple">must</strong> be a valid pointer to a <a href="#VkDeviceGroupPresentModeFlagsKHR">VkDeviceGroupPresentModeFlagsKHR</a> value</p>
</li>
<li>
<p><a id="VUID-vkGetDeviceGroupSurfacePresentModesKHR-commonparent"></a> Both of <code>device</code>, and <code>surface</code> <strong class="purple">must</strong> have been created, allocated, or retrieved from the same <code>VkInstance</code></p>
</li>
</ul>
</div>
</div>
</div>
<div class="sidebarblock">
<div class="content">
<div class="title">Host Synchronization</div>
<div class="ulist">
<ul>
<li>
<p>Host access to <code>surface</code> <strong class="purple">must</strong> be externally synchronized</p>
</li>
</ul>
</div>
</div>
</div>
<div class="sidebarblock">
<div class="content">
<div class="title">Return Codes</div>
<div class="dlist">
<dl>
<dt class="hdlist1"><a href="#fundamentals-successcodes">Success</a></dt>
<dd>
<div class="ulist">
<ul>
<li>
<p><code>VK_SUCCESS</code></p>
</li>
</ul>
</div>
</dd>
<dt class="hdlist1"><a href="#fundamentals-errorcodes">Failure</a></dt>
<dd>
<div class="ulist">
<ul>
<li>
<p><code>VK_ERROR_OUT_OF_HOST_MEMORY</code></p>
</li>
<li>
<p><code>VK_ERROR_OUT_OF_DEVICE_MEMORY</code></p>
</li>
<li>
<p><code>VK_ERROR_SURFACE_LOST_KHR</code></p>
</li>
</ul>
</div>
</dd>
</dl>
</div>
</div>
</div>
</div>
<div class="sect3">
<h4 id="_see_also_206">See Also</h4>
<div class="paragraph">
<p><a href="#VkDevice">VkDevice</a>, <a href="#VkDeviceGroupPresentModeFlagsKHR">VkDeviceGroupPresentModeFlagsKHR</a>, <a href="#VkSurfaceKHR">VkSurfaceKHR</a></p>
</div>
</div>
<div class="sect3">
<h4 id="_document_notes_206">Document Notes</h4>
<div class="paragraph">
<p>For more information, see the Vulkan Specification at URL</p>
</div>
<div class="paragraph">
<p><a href="https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#vkGetDeviceGroupSurfacePresentModesKHR" class="bare">https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#vkGetDeviceGroupSurfacePresentModesKHR</a></p>
</div>
<div class="paragraph">
<p>This page is extracted from the Vulkan Specification.
Fixes and changes should be made to the Specification, not directly.</p>
</div>
<div style="page-break-after: always;"></div>
</div>
</div>
<div class="sect2">
<h3 id="_vkgetdevicememorycommitment3">vkGetDeviceMemoryCommitment(3)</h3>
<div class="sect3">
<h4 id="_name_207">Name</h4>
<div class="paragraph">
<p>vkGetDeviceMemoryCommitment - Query the current commitment for a VkDeviceMemory</p>
</div>
</div>
<div class="sect3">
<h4 id="_c_specification_207">C Specification</h4>
<div class="paragraph">
<p>To determine the amount of lazily-allocated memory that is currently
committed for a memory object, call:</p>
</div>
<div id="vkGetDeviceMemoryCommitment" class="listingblock">
<div class="content">
<pre class="highlight"><code class="language-c++" data-lang="c++">void vkGetDeviceMemoryCommitment(
    VkDevice                                    device,
    VkDeviceMemory                              memory,
    VkDeviceSize*                               pCommittedMemoryInBytes);</code></pre>
</div>
</div>
</div>
<div class="sect3">
<h4 id="_parameters_207">Parameters</h4>
<div class="ulist">
<ul>
<li>
<p><code>device</code> is the logical device that owns the memory.</p>
</li>
<li>
<p><code>memory</code> is the memory object being queried.</p>
</li>
<li>
<p><code>pCommittedMemoryInBytes</code> is a pointer to a <code>VkDeviceSize</code>
value in which the number of bytes currently committed is returned, on
success.</p>
</li>
</ul>
</div>
</div>
<div class="sect3">
<h4 id="_description_207">Description</h4>
<div class="paragraph">
<p>The implementation <strong class="purple">may</strong> update the commitment at any time, and the value
returned by this query <strong class="purple">may</strong> be out of date.</p>
</div>
<div class="paragraph">
<p>The implementation guarantees to allocate any committed memory from the
heapIndex indicated by the memory type that the memory object was created
with.</p>
</div>
<div class="sidebarblock">
<div class="content">
<div class="title">Valid Usage</div>
<div class="ulist">
<ul>
<li>
<p><a id="VUID-vkGetDeviceMemoryCommitment-memory-00690"></a>
<code>memory</code> <strong class="purple">must</strong> have been created with a memory type that reports
<code>VK_MEMORY_PROPERTY_LAZILY_ALLOCATED_BIT</code></p>
</li>
</ul>
</div>
</div>
</div>
<div class="sidebarblock">
<div class="content">
<div class="title">Valid Usage (Implicit)</div>
<div class="ulist">
<ul>
<li>
<p><a id="VUID-vkGetDeviceMemoryCommitment-device-parameter"></a> <code>device</code> <strong class="purple">must</strong> be a valid <code>VkDevice</code> handle</p>
</li>
<li>
<p><a id="VUID-vkGetDeviceMemoryCommitment-memory-parameter"></a> <code>memory</code> <strong class="purple">must</strong> be a valid <code>VkDeviceMemory</code> handle</p>
</li>
<li>
<p><a id="VUID-vkGetDeviceMemoryCommitment-pCommittedMemoryInBytes-parameter"></a> <code>pCommittedMemoryInBytes</code> <strong class="purple">must</strong> be a valid pointer to a <code>VkDeviceSize</code> value</p>
</li>
<li>
<p><a id="VUID-vkGetDeviceMemoryCommitment-memory-parent"></a> <code>memory</code> <strong class="purple">must</strong> have been created, allocated, or retrieved from <code>device</code></p>
</li>
</ul>
</div>
</div>
</div>
</div>
<div class="sect3">
<h4 id="_see_also_207">See Also</h4>
<div class="paragraph">
<p><a href="#VkDevice">VkDevice</a>, <a href="#VkDeviceMemory">VkDeviceMemory</a>, <code>VkDeviceSize</code></p>
</div>
</div>
<div class="sect3">
<h4 id="_document_notes_207">Document Notes</h4>
<div class="paragraph">
<p>For more information, see the Vulkan Specification at URL</p>
</div>
<div class="paragraph">
<p><a href="https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#vkGetDeviceMemoryCommitment" class="bare">https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#vkGetDeviceMemoryCommitment</a></p>
</div>
<div class="paragraph">
<p>This page is extracted from the Vulkan Specification.
Fixes and changes should be made to the Specification, not directly.</p>
</div>
<div style="page-break-after: always;"></div>
</div>
</div>
<div class="sect2">
<h3 id="_vkgetdeviceprocaddr3">vkGetDeviceProcAddr(3)</h3>
<div class="sect3">
<h4 id="_name_208">Name</h4>
<div class="paragraph">
<p>vkGetDeviceProcAddr - Return a function pointer for a command</p>
</div>
</div>
<div class="sect3">
<h4 id="_c_specification_208">C Specification</h4>
<div class="paragraph">
<p>In order to support systems with multiple Vulkan implementations, the
function pointers returned by <code>vkGetInstanceProcAddr</code> <strong class="purple">may</strong> point to
dispatch code that calls a different real implementation for different
<a href="#VkDevice">VkDevice</a> objects or their child objects.
The overhead of the internal dispatch for <a href="#VkDevice">VkDevice</a> objects can be
avoided by obtaining device-specific function pointers for any commands that
use a device or device-child object as their dispatchable object.
Such function pointers <strong class="purple">can</strong> be obtained with the command:</p>
</div>
<div id="vkGetDeviceProcAddr" class="listingblock">
<div class="content">
<pre class="highlight"><code class="language-c++" data-lang="c++">PFN_vkVoidFunction vkGetDeviceProcAddr(
    VkDevice                                    device,
    const char*                                 pName);</code></pre>
</div>
</div>
</div>
<div class="sect3">
<h4 id="_parameters_208">Parameters</h4>
<div class="paragraph">
<p>The table below defines the various use cases for <code>vkGetDeviceProcAddr</code>
and expected return value for each case.</p>
</div>
</div>
<div class="sect3">
<h4 id="_description_208">Description</h4>
<div class="paragraph">
<p>The returned function pointer is of type <a href="#PFN_vkVoidFunction">PFN_vkVoidFunction</a>, and must
be cast to the type of the command being queried.
The function pointer <strong class="purple">must</strong> only be called with a dispatchable object (the
first parameter) that is <code>device</code> or a child of <code>device</code>.</p>
</div>
<table class="tableblock frame-all grid-all" style="width: 80%;">
<caption class="title">Table 1. vkGetDeviceProcAddr behavior</caption>
<colgroup>
<col style="width: 33.3333%;">
<col style="width: 33.3333%;">
<col style="width: 33.3334%;">
</colgroup>
<thead>
<tr>
<th class="tableblock halign-left valign-top"><code>device</code></th>
<th class="tableblock halign-left valign-top"><code>pName</code></th>
<th class="tableblock halign-left valign-top">return value</th>
</tr>
</thead>
<tbody>
<tr>
<td class="tableblock halign-left valign-top"><p class="tableblock"><code>NULL</code></p></td>
<td class="tableblock halign-left valign-top"><p class="tableblock">*</p></td>
<td class="tableblock halign-left valign-top"><p class="tableblock">undefined</p></td>
</tr>
<tr>
<td class="tableblock halign-left valign-top"><p class="tableblock">invalid device</p></td>
<td class="tableblock halign-left valign-top"><p class="tableblock">*</p></td>
<td class="tableblock halign-left valign-top"><p class="tableblock">undefined</p></td>
</tr>
<tr>
<td class="tableblock halign-left valign-top"><p class="tableblock">device</p></td>
<td class="tableblock halign-left valign-top"><p class="tableblock"><code>NULL</code></p></td>
<td class="tableblock halign-left valign-top"><p class="tableblock">undefined</p></td>
</tr>
<tr>
<td class="tableblock halign-left valign-top"><p class="tableblock">device</p></td>
<td class="tableblock halign-left valign-top"><p class="tableblock">core device-level Vulkan command</p></td>
<td class="tableblock halign-left valign-top"><p class="tableblock">fp</p></td>
</tr>
<tr>
<td class="tableblock halign-left valign-top"><p class="tableblock">device</p></td>
<td class="tableblock halign-left valign-top"><p class="tableblock">enabled device extension commands</p></td>
<td class="tableblock halign-left valign-top"><p class="tableblock">fp</p></td>
</tr>
<tr>
<td class="tableblock halign-left valign-top"><p class="tableblock">device</p></td>
<td class="tableblock halign-left valign-top"><p class="tableblock">* (any <code>pName</code> not covered above)</p></td>
<td class="tableblock halign-left valign-top"><p class="tableblock"><code>NULL</code></p></td>
</tr>
</tbody>
</table>
<div class="sidebarblock">
<div class="content">
<div class="title">Valid Usage (Implicit)</div>
<div class="ulist">
<ul>
<li>
<p><a id="VUID-vkGetDeviceProcAddr-device-parameter"></a> <code>device</code> <strong class="purple">must</strong> be a valid <code>VkDevice</code> handle</p>
</li>
<li>
<p><a id="VUID-vkGetDeviceProcAddr-pName-parameter"></a> <code>pName</code> <strong class="purple">must</strong> be a null-terminated UTF-8 string</p>
</li>
</ul>
</div>
</div>
</div>
</div>
<div class="sect3">
<h4 id="_see_also_208">See Also</h4>
<div class="paragraph">
<p><a href="#PFN_vkVoidFunction">PFN_vkVoidFunction</a>, <a href="#VkDevice">VkDevice</a></p>
</div>
</div>
<div class="sect3">
<h4 id="_document_notes_208">Document Notes</h4>
<div class="paragraph">
<p>For more information, see the Vulkan Specification at URL</p>
</div>
<div class="paragraph">
<p><a href="https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#vkGetDeviceProcAddr" class="bare">https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#vkGetDeviceProcAddr</a></p>
</div>
<div class="paragraph">
<p>This page is extracted from the Vulkan Specification.
Fixes and changes should be made to the Specification, not directly.</p>
</div>
<div style="page-break-after: always;"></div>
</div>
</div>
<div class="sect2">
<h3 id="_vkgetdevicequeue3">vkGetDeviceQueue(3)</h3>
<div class="sect3">
<h4 id="_name_209">Name</h4>
<div class="paragraph">
<p>vkGetDeviceQueue - Get a queue handle from a device</p>
</div>
</div>
<div class="sect3">
<h4 id="_c_specification_209">C Specification</h4>
<div class="paragraph">
<p>To retrieve a handle to a <a href="#VkQueue">VkQueue</a> object, call:</p>
</div>
<div id="vkGetDeviceQueue" class="listingblock">
<div class="content">
<pre class="highlight"><code class="language-c++" data-lang="c++">void vkGetDeviceQueue(
    VkDevice                                    device,
    uint32_t                                    queueFamilyIndex,
    uint32_t                                    queueIndex,
    VkQueue*                                    pQueue);</code></pre>
</div>
</div>
</div>
<div class="sect3">
<h4 id="_parameters_209">Parameters</h4>
<div class="ulist">
<ul>
<li>
<p><code>device</code> is the logical device that owns the queue.</p>
</li>
<li>
<p><code>queueFamilyIndex</code> is the index of the queue family to which the
queue belongs.</p>
</li>
<li>
<p><code>queueIndex</code> is the index within this queue family of the queue to
retrieve.</p>
</li>
<li>
<p><code>pQueue</code> is a pointer to a <a href="#VkQueue">VkQueue</a> object that will be filled
with the handle for the requested queue.</p>
</li>
</ul>
</div>
</div>
<div class="sect3">
<h4 id="_description_209">Description</h4>
<div class="paragraph">
<p><code>vkGetDeviceQueue</code> <strong class="purple">must</strong> only be used to get queues that were created
with the <code>flags</code> parameter of <code>VkDeviceQueueCreateInfo</code> set to zero.
To get queues that were created with a non-zero <code>flags</code> parameter use
<a href="#vkGetDeviceQueue2">vkGetDeviceQueue2</a>.</p>
</div>
<div class="sidebarblock">
<div class="content">
<div class="title">Valid Usage</div>
<div class="ulist">
<ul>
<li>
<p><a id="VUID-vkGetDeviceQueue-queueFamilyIndex-00384"></a>
<code>queueFamilyIndex</code> <strong class="purple">must</strong> be one of the queue family indices
specified when <code>device</code> was created, via the
<code>VkDeviceQueueCreateInfo</code> structure</p>
</li>
<li>
<p><a id="VUID-vkGetDeviceQueue-queueIndex-00385"></a>
<code>queueIndex</code> <strong class="purple">must</strong> be less than the number of queues created for the
specified queue family index when <code>device</code> was created, via the
<code>queueCount</code> member of the <code>VkDeviceQueueCreateInfo</code> structure</p>
</li>
<li>
<p><a id="VUID-vkGetDeviceQueue-flags-01841"></a>
<a href="#VkDeviceQueueCreateInfo">VkDeviceQueueCreateInfo</a>::<code>flags</code> <strong class="purple">must</strong> have been set to zero
when <code>device</code> was created</p>
</li>
</ul>
</div>
</div>
</div>
<div class="sidebarblock">
<div class="content">
<div class="title">Valid Usage (Implicit)</div>
<div class="ulist">
<ul>
<li>
<p><a id="VUID-vkGetDeviceQueue-device-parameter"></a> <code>device</code> <strong class="purple">must</strong> be a valid <code>VkDevice</code> handle</p>
</li>
<li>
<p><a id="VUID-vkGetDeviceQueue-pQueue-parameter"></a> <code>pQueue</code> <strong class="purple">must</strong> be a valid pointer to a <code>VkQueue</code> handle</p>
</li>
</ul>
</div>
</div>
</div>
</div>
<div class="sect3">
<h4 id="_see_also_209">See Also</h4>
<div class="paragraph">
<p><a href="#VkDevice">VkDevice</a>, <a href="#VkQueue">VkQueue</a></p>
</div>
</div>
<div class="sect3">
<h4 id="_document_notes_209">Document Notes</h4>
<div class="paragraph">
<p>For more information, see the Vulkan Specification at URL</p>
</div>
<div class="paragraph">
<p><a href="https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#vkGetDeviceQueue" class="bare">https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#vkGetDeviceQueue</a></p>
</div>
<div class="paragraph">
<p>This page is extracted from the Vulkan Specification.
Fixes and changes should be made to the Specification, not directly.</p>
</div>
<div style="page-break-after: always;"></div>
</div>
</div>
<div class="sect2">
<h3 id="_vkgetdevicequeue23">vkGetDeviceQueue2(3)</h3>
<div class="sect3">
<h4 id="_name_210">Name</h4>
<div class="paragraph">
<p>vkGetDeviceQueue2 - Get a queue handle from a device</p>
</div>
</div>
<div class="sect3">
<h4 id="_c_specification_210">C Specification</h4>
<div class="paragraph">
<p>To retrieve a handle to a <a href="#VkQueue">VkQueue</a> object with specific
<a href="#VkDeviceQueueCreateFlags">VkDeviceQueueCreateFlags</a> creation flags, call:</p>
</div>
<div id="vkGetDeviceQueue2" class="listingblock">
<div class="content">
<pre class="highlight"><code class="language-c++" data-lang="c++">void vkGetDeviceQueue2(
    VkDevice                                    device,
    const VkDeviceQueueInfo2*                   pQueueInfo,
    VkQueue*                                    pQueue);</code></pre>
</div>
</div>
</div>
<div class="sect3">
<h4 id="_parameters_210">Parameters</h4>
<div class="ulist">
<ul>
<li>
<p><code>device</code> is the logical device that owns the queue.</p>
</li>
<li>
<p><code>pQueueInfo</code> points to an instance of the <a href="#VkDeviceQueueInfo2">VkDeviceQueueInfo2</a>
structure, describing the parameters used to create the device queue.</p>
</li>
<li>
<p><code>pQueue</code> is a pointer to a <a href="#VkQueue">VkQueue</a> object that will be filled
with the handle for the requested queue.</p>
</li>
</ul>
</div>
</div>
<div class="sect3">
<h4 id="_description_210">Description</h4>
<div class="sidebarblock">
<div class="content">
<div class="title">Valid Usage (Implicit)</div>
<div class="ulist">
<ul>
<li>
<p><a id="VUID-vkGetDeviceQueue2-device-parameter"></a> <code>device</code> <strong class="purple">must</strong> be a valid <code>VkDevice</code> handle</p>
</li>
<li>
<p><a id="VUID-vkGetDeviceQueue2-pQueueInfo-parameter"></a> <code>pQueueInfo</code> <strong class="purple">must</strong> be a valid pointer to a valid <code>VkDeviceQueueInfo2</code> structure</p>
</li>
<li>
<p><a id="VUID-vkGetDeviceQueue2-pQueue-parameter"></a> <code>pQueue</code> <strong class="purple">must</strong> be a valid pointer to a <code>VkQueue</code> handle</p>
</li>
</ul>
</div>
</div>
</div>
</div>
<div class="sect3">
<h4 id="_see_also_210">See Also</h4>
<div class="paragraph">
<p><a href="#VkDevice">VkDevice</a>, <a href="#VkDeviceQueueInfo2">VkDeviceQueueInfo2</a>, <a href="#VkQueue">VkQueue</a></p>
</div>
</div>
<div class="sect3">
<h4 id="_document_notes_210">Document Notes</h4>
<div class="paragraph">
<p>For more information, see the Vulkan Specification at URL</p>
</div>
<div class="paragraph">
<p><a href="https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#vkGetDeviceQueue2" class="bare">https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#vkGetDeviceQueue2</a></p>
</div>
<div class="paragraph">
<p>This page is extracted from the Vulkan Specification.
Fixes and changes should be made to the Specification, not directly.</p>
</div>
<div style="page-break-after: always;"></div>
</div>
</div>
<div class="sect2">
<h3 id="_vkgetdisplaymodeproperties2khr3">vkGetDisplayModeProperties2KHR(3)</h3>
<div class="sect3">
<h4 id="_name_211">Name</h4>
<div class="paragraph">
<p>vkGetDisplayModeProperties2KHR - Query information about the available display modes.</p>
</div>
</div>
<div class="sect3">
<h4 id="_c_specification_211">C Specification</h4>
<div class="paragraph">
<p>To query the properties of a device&#8217;s built-in display modes, call:</p>
</div>
<div id="vkGetDisplayModeProperties2KHR" class="listingblock">
<div class="content">
<pre class="highlight"><code class="language-c++" data-lang="c++">VkResult vkGetDisplayModeProperties2KHR(
    VkPhysicalDevice                            physicalDevice,
    VkDisplayKHR                                display,
    uint32_t*                                   pPropertyCount,
    VkDisplayModeProperties2KHR*                pProperties);</code></pre>
</div>
</div>
</div>
<div class="sect3">
<h4 id="_parameters_211">Parameters</h4>
<div class="ulist">
<ul>
<li>
<p><code>physicalDevice</code> is the physical device associated with
<code>display</code>.</p>
</li>
<li>
<p><code>display</code> is the display to query.</p>
</li>
<li>
<p><code>pPropertyCount</code> is a pointer to an integer related to the number of
display modes available or queried, as described below.</p>
</li>
<li>
<p><code>pProperties</code> is either <code>NULL</code> or a pointer to an array of
<code>VkDisplayModeProperties2KHR</code> structures.</p>
</li>
</ul>
</div>
</div>
<div class="sect3">
<h4 id="_description_211">Description</h4>
<div class="paragraph">
<p><code>vkGetDisplayModeProperties2KHR</code> behaves similarly to
<a href="#vkGetDisplayModePropertiesKHR">vkGetDisplayModePropertiesKHR</a>, with the ability to return extended
information via chained output structures.</p>
</div>
<div class="sidebarblock">
<div class="content">
<div class="title">Valid Usage (Implicit)</div>
<div class="ulist">
<ul>
<li>
<p><a id="VUID-vkGetDisplayModeProperties2KHR-physicalDevice-parameter"></a> <code>physicalDevice</code> <strong class="purple">must</strong> be a valid <code>VkPhysicalDevice</code> handle</p>
</li>
<li>
<p><a id="VUID-vkGetDisplayModeProperties2KHR-display-parameter"></a> <code>display</code> <strong class="purple">must</strong> be a valid <code>VkDisplayKHR</code> handle</p>
</li>
<li>
<p><a id="VUID-vkGetDisplayModeProperties2KHR-pPropertyCount-parameter"></a> <code>pPropertyCount</code> <strong class="purple">must</strong> be a valid pointer to a <code>uint32_t</code> value</p>
</li>
<li>
<p><a id="VUID-vkGetDisplayModeProperties2KHR-pProperties-parameter"></a> If the value referenced by <code>pPropertyCount</code> is not <code>0</code>, and <code>pProperties</code> is not <code>NULL</code>, <code>pProperties</code> <strong class="purple">must</strong> be a valid pointer to an array of <code>pPropertyCount</code> <code>VkDisplayModeProperties2KHR</code> structures</p>
</li>
</ul>
</div>
</div>
</div>
<div class="sidebarblock">
<div class="content">
<div class="title">Return Codes</div>
<div class="dlist">
<dl>
<dt class="hdlist1"><a href="#fundamentals-successcodes">Success</a></dt>
<dd>
<div class="ulist">
<ul>
<li>
<p><code>VK_SUCCESS</code></p>
</li>
<li>
<p><code>VK_INCOMPLETE</code></p>
</li>
</ul>
</div>
</dd>
<dt class="hdlist1"><a href="#fundamentals-errorcodes">Failure</a></dt>
<dd>
<div class="ulist">
<ul>
<li>
<p><code>VK_ERROR_OUT_OF_HOST_MEMORY</code></p>
</li>
<li>
<p><code>VK_ERROR_OUT_OF_DEVICE_MEMORY</code></p>
</li>
</ul>
</div>
</dd>
</dl>
</div>
</div>
</div>
</div>
<div class="sect3">
<h4 id="_see_also_211">See Also</h4>
<div class="paragraph">
<p><a href="#VkDisplayKHR">VkDisplayKHR</a>, <a href="#VkDisplayModeProperties2KHR">VkDisplayModeProperties2KHR</a>, <a href="#VkPhysicalDevice">VkPhysicalDevice</a></p>
</div>
</div>
<div class="sect3">
<h4 id="_document_notes_211">Document Notes</h4>
<div class="paragraph">
<p>For more information, see the Vulkan Specification at URL</p>
</div>
<div class="paragraph">
<p><a href="https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#vkGetDisplayModeProperties2KHR" class="bare">https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#vkGetDisplayModeProperties2KHR</a></p>
</div>
<div class="paragraph">
<p>This page is extracted from the Vulkan Specification.
Fixes and changes should be made to the Specification, not directly.</p>
</div>
<div style="page-break-after: always;"></div>
</div>
</div>
<div class="sect2">
<h3 id="_vkgetdisplaymodepropertieskhr3">vkGetDisplayModePropertiesKHR(3)</h3>
<div class="sect3">
<h4 id="_name_212">Name</h4>
<div class="paragraph">
<p>vkGetDisplayModePropertiesKHR - Query the set of mode properties supported by the display</p>
</div>
</div>
<div class="sect3">
<h4 id="_c_specification_212">C Specification</h4>
<div class="paragraph">
<p>Each display has one or more supported modes associated with it by default.
These built-in modes are queried by calling:</p>
</div>
<div id="vkGetDisplayModePropertiesKHR" class="listingblock">
<div class="content">
<pre class="highlight"><code class="language-c++" data-lang="c++">VkResult vkGetDisplayModePropertiesKHR(
    VkPhysicalDevice                            physicalDevice,
    VkDisplayKHR                                display,
    uint32_t*                                   pPropertyCount,
    VkDisplayModePropertiesKHR*                 pProperties);</code></pre>
</div>
</div>
</div>
<div class="sect3">
<h4 id="_parameters_212">Parameters</h4>
<div class="ulist">
<ul>
<li>
<p><code>physicalDevice</code> is the physical device associated with
<code>display</code>.</p>
</li>
<li>
<p><code>display</code> is the display to query.</p>
</li>
<li>
<p><code>pPropertyCount</code> is a pointer to an integer related to the number of
display modes available or queried, as described below.</p>
</li>
<li>
<p><code>pProperties</code> is either <code>NULL</code> or a pointer to an array of
<code>VkDisplayModePropertiesKHR</code> structures.</p>
</li>
</ul>
</div>
</div>
<div class="sect3">
<h4 id="_description_212">Description</h4>
<div class="paragraph">
<p>If <code>pProperties</code> is <code>NULL</code>, then the number of display modes available
on the specified <code>display</code> for <code>physicalDevice</code> is returned in
<code>pPropertyCount</code>.
Otherwise, <code>pPropertyCount</code> <strong class="purple">must</strong> point to a variable set by the user to
the number of elements in the <code>pProperties</code> array, and on return the
variable is overwritten with the number of structures actually written to
<code>pProperties</code>.
If the value of <code>pPropertyCount</code> is less than the number of display
modes for <code>physicalDevice</code>, at most <code>pPropertyCount</code> structures will
be written.
If <code>pPropertyCount</code> is smaller than the number of display modes
available on the specified <code>display</code> for <code>physicalDevice</code>,
<code>VK_INCOMPLETE</code> will be returned instead of <code>VK_SUCCESS</code> to indicate
that not all the available values were returned.</p>
</div>
<div class="sidebarblock">
<div class="content">
<div class="title">Valid Usage (Implicit)</div>
<div class="ulist">
<ul>
<li>
<p><a id="VUID-vkGetDisplayModePropertiesKHR-physicalDevice-parameter"></a> <code>physicalDevice</code> <strong class="purple">must</strong> be a valid <code>VkPhysicalDevice</code> handle</p>
</li>
<li>
<p><a id="VUID-vkGetDisplayModePropertiesKHR-display-parameter"></a> <code>display</code> <strong class="purple">must</strong> be a valid <code>VkDisplayKHR</code> handle</p>
</li>
<li>
<p><a id="VUID-vkGetDisplayModePropertiesKHR-pPropertyCount-parameter"></a> <code>pPropertyCount</code> <strong class="purple">must</strong> be a valid pointer to a <code>uint32_t</code> value</p>
</li>
<li>
<p><a id="VUID-vkGetDisplayModePropertiesKHR-pProperties-parameter"></a> If the value referenced by <code>pPropertyCount</code> is not <code>0</code>, and <code>pProperties</code> is not <code>NULL</code>, <code>pProperties</code> <strong class="purple">must</strong> be a valid pointer to an array of <code>pPropertyCount</code> <code>VkDisplayModePropertiesKHR</code> structures</p>
</li>
</ul>
</div>
</div>
</div>
<div class="sidebarblock">
<div class="content">
<div class="title">Return Codes</div>
<div class="dlist">
<dl>
<dt class="hdlist1"><a href="#fundamentals-successcodes">Success</a></dt>
<dd>
<div class="ulist">
<ul>
<li>
<p><code>VK_SUCCESS</code></p>
</li>
<li>
<p><code>VK_INCOMPLETE</code></p>
</li>
</ul>
</div>
</dd>
<dt class="hdlist1"><a href="#fundamentals-errorcodes">Failure</a></dt>
<dd>
<div class="ulist">
<ul>
<li>
<p><code>VK_ERROR_OUT_OF_HOST_MEMORY</code></p>
</li>
<li>
<p><code>VK_ERROR_OUT_OF_DEVICE_MEMORY</code></p>
</li>
</ul>
</div>
</dd>
</dl>
</div>
</div>
</div>
</div>
<div class="sect3">
<h4 id="_see_also_212">See Also</h4>
<div class="paragraph">
<p><a href="#VkDisplayKHR">VkDisplayKHR</a>, <a href="#VkDisplayModePropertiesKHR">VkDisplayModePropertiesKHR</a>, <a href="#VkPhysicalDevice">VkPhysicalDevice</a></p>
</div>
</div>
<div class="sect3">
<h4 id="_document_notes_212">Document Notes</h4>
<div class="paragraph">
<p>For more information, see the Vulkan Specification at URL</p>
</div>
<div class="paragraph">
<p><a href="https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#vkGetDisplayModePropertiesKHR" class="bare">https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#vkGetDisplayModePropertiesKHR</a></p>
</div>
<div class="paragraph">
<p>This page is extracted from the Vulkan Specification.
Fixes and changes should be made to the Specification, not directly.</p>
</div>
<div style="page-break-after: always;"></div>
</div>
</div>
<div class="sect2">
<h3 id="_vkgetdisplayplanecapabilities2khr3">vkGetDisplayPlaneCapabilities2KHR(3)</h3>
<div class="sect3">
<h4 id="_name_213">Name</h4>
<div class="paragraph">
<p>vkGetDisplayPlaneCapabilities2KHR - Query capabilities of a mode and plane combination</p>
</div>
</div>
<div class="sect3">
<h4 id="_c_specification_213">C Specification</h4>
<div class="paragraph">
<p>To query the capabilities of a given mode and plane combination, call:</p>
</div>
<div id="vkGetDisplayPlaneCapabilities2KHR" class="listingblock">
<div class="content">
<pre class="highlight"><code class="language-c++" data-lang="c++">VkResult vkGetDisplayPlaneCapabilities2KHR(
    VkPhysicalDevice                            physicalDevice,
    const VkDisplayPlaneInfo2KHR*               pDisplayPlaneInfo,
    VkDisplayPlaneCapabilities2KHR*             pCapabilities);</code></pre>
</div>
</div>
</div>
<div class="sect3">
<h4 id="_parameters_213">Parameters</h4>
<div class="ulist">
<ul>
<li>
<p><code>physicalDevice</code> is the physical device associated with
<code>pDisplayPlaneInfo</code>.</p>
</li>
<li>
<p><code>pDisplayPlaneInfo</code> is a pointer to an instance of the
<a href="#VkDisplayPlaneInfo2KHR">VkDisplayPlaneInfo2KHR</a> structure describing the plane and mode.</p>
</li>
<li>
<p><code>pCapabilities</code> is a pointer to a
<a href="#VkDisplayPlaneCapabilities2KHR">VkDisplayPlaneCapabilities2KHR</a> structure in which the capabilities
are returned.</p>
</li>
</ul>
</div>
</div>
<div class="sect3">
<h4 id="_description_213">Description</h4>
<div class="paragraph">
<p><code>vkGetDisplayPlaneCapabilities2KHR</code> behaves similarly to
<a href="#vkGetDisplayPlaneCapabilitiesKHR">vkGetDisplayPlaneCapabilitiesKHR</a>, with the ability to specify extended
inputs via chained input structures, and to return extended information via
chained output structures.</p>
</div>
<div class="sidebarblock">
<div class="content">
<div class="title">Valid Usage (Implicit)</div>
<div class="ulist">
<ul>
<li>
<p><a id="VUID-vkGetDisplayPlaneCapabilities2KHR-physicalDevice-parameter"></a> <code>physicalDevice</code> <strong class="purple">must</strong> be a valid <code>VkPhysicalDevice</code> handle</p>
</li>
<li>
<p><a id="VUID-vkGetDisplayPlaneCapabilities2KHR-pDisplayPlaneInfo-parameter"></a> <code>pDisplayPlaneInfo</code> <strong class="purple">must</strong> be a valid pointer to a valid <code>VkDisplayPlaneInfo2KHR</code> structure</p>
</li>
<li>
<p><a id="VUID-vkGetDisplayPlaneCapabilities2KHR-pCapabilities-parameter"></a> <code>pCapabilities</code> <strong class="purple">must</strong> be a valid pointer to a <code>VkDisplayPlaneCapabilities2KHR</code> structure</p>
</li>
</ul>
</div>
</div>
</div>
<div class="sidebarblock">
<div class="content">
<div class="title">Return Codes</div>
<div class="dlist">
<dl>
<dt class="hdlist1"><a href="#fundamentals-successcodes">Success</a></dt>
<dd>
<div class="ulist">
<ul>
<li>
<p><code>VK_SUCCESS</code></p>
</li>
</ul>
</div>
</dd>
<dt class="hdlist1"><a href="#fundamentals-errorcodes">Failure</a></dt>
<dd>
<div class="ulist">
<ul>
<li>
<p><code>VK_ERROR_OUT_OF_HOST_MEMORY</code></p>
</li>
<li>
<p><code>VK_ERROR_OUT_OF_DEVICE_MEMORY</code></p>
</li>
</ul>
</div>
</dd>
</dl>
</div>
</div>
</div>
</div>
<div class="sect3">
<h4 id="_see_also_213">See Also</h4>
<div class="paragraph">
<p><a href="#VkDisplayPlaneCapabilities2KHR">VkDisplayPlaneCapabilities2KHR</a>, <a href="#VkDisplayPlaneInfo2KHR">VkDisplayPlaneInfo2KHR</a>, <a href="#VkPhysicalDevice">VkPhysicalDevice</a></p>
</div>
</div>
<div class="sect3">
<h4 id="_document_notes_213">Document Notes</h4>
<div class="paragraph">
<p>For more information, see the Vulkan Specification at URL</p>
</div>
<div class="paragraph">
<p><a href="https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#vkGetDisplayPlaneCapabilities2KHR" class="bare">https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#vkGetDisplayPlaneCapabilities2KHR</a></p>
</div>
<div class="paragraph">
<p>This page is extracted from the Vulkan Specification.
Fixes and changes should be made to the Specification, not directly.</p>
</div>
<div style="page-break-after: always;"></div>
</div>
</div>
<div class="sect2">
<h3 id="_vkgetdisplayplanecapabilitieskhr3">vkGetDisplayPlaneCapabilitiesKHR(3)</h3>
<div class="sect3">
<h4 id="_name_214">Name</h4>
<div class="paragraph">
<p>vkGetDisplayPlaneCapabilitiesKHR - Query capabilities of a mode and plane combination</p>
</div>
</div>
<div class="sect3">
<h4 id="_c_specification_214">C Specification</h4>
<div class="paragraph">
<p>Applications that wish to present directly to a display <strong class="purple">must</strong> select which
layer, or &#8220;plane&#8221; of the display they wish to target, and a mode to use
with the display.
Each display supports at least one plane.
The capabilities of a given mode and plane combination are determined by
calling:</p>
</div>
<div id="vkGetDisplayPlaneCapabilitiesKHR" class="listingblock">
<div class="content">
<pre class="highlight"><code class="language-c++" data-lang="c++">VkResult vkGetDisplayPlaneCapabilitiesKHR(
    VkPhysicalDevice                            physicalDevice,
    VkDisplayModeKHR                            mode,
    uint32_t                                    planeIndex,
    VkDisplayPlaneCapabilitiesKHR*              pCapabilities);</code></pre>
</div>
</div>
</div>
<div class="sect3">
<h4 id="_parameters_214">Parameters</h4>
<div class="ulist">
<ul>
<li>
<p><code>physicalDevice</code> is the physical device associated with
<code>display</code></p>
</li>
<li>
<p><code>mode</code> is the display mode the application intends to program when
using the specified plane.
Note this parameter also implicitly specifies a display.</p>
</li>
<li>
<p><code>planeIndex</code> is the plane which the application intends to use with
the display, and is less than the number of display planes supported by
the device.</p>
</li>
<li>
<p><code>pCapabilities</code> is a pointer to a
<a href="#VkDisplayPlaneCapabilitiesKHR">VkDisplayPlaneCapabilitiesKHR</a> structure in which the capabilities
are returned.</p>
</li>
</ul>
</div>
</div>
<div class="sect3">
<h4 id="_description_214">Description</h4>
<div class="sidebarblock">
<div class="content">
<div class="title">Valid Usage (Implicit)</div>
<div class="ulist">
<ul>
<li>
<p><a id="VUID-vkGetDisplayPlaneCapabilitiesKHR-physicalDevice-parameter"></a> <code>physicalDevice</code> <strong class="purple">must</strong> be a valid <code>VkPhysicalDevice</code> handle</p>
</li>
<li>
<p><a id="VUID-vkGetDisplayPlaneCapabilitiesKHR-mode-parameter"></a> <code>mode</code> <strong class="purple">must</strong> be a valid <code>VkDisplayModeKHR</code> handle</p>
</li>
<li>
<p><a id="VUID-vkGetDisplayPlaneCapabilitiesKHR-pCapabilities-parameter"></a> <code>pCapabilities</code> <strong class="purple">must</strong> be a valid pointer to a <code>VkDisplayPlaneCapabilitiesKHR</code> structure</p>
</li>
</ul>
</div>
</div>
</div>
<div class="sidebarblock">
<div class="content">
<div class="title">Host Synchronization</div>
<div class="ulist">
<ul>
<li>
<p>Host access to <code>mode</code> <strong class="purple">must</strong> be externally synchronized</p>
</li>
</ul>
</div>
</div>
</div>
<div class="sidebarblock">
<div class="content">
<div class="title">Return Codes</div>
<div class="dlist">
<dl>
<dt class="hdlist1"><a href="#fundamentals-successcodes">Success</a></dt>
<dd>
<div class="ulist">
<ul>
<li>
<p><code>VK_SUCCESS</code></p>
</li>
</ul>
</div>
</dd>
<dt class="hdlist1"><a href="#fundamentals-errorcodes">Failure</a></dt>
<dd>
<div class="ulist">
<ul>
<li>
<p><code>VK_ERROR_OUT_OF_HOST_MEMORY</code></p>
</li>
<li>
<p><code>VK_ERROR_OUT_OF_DEVICE_MEMORY</code></p>
</li>
</ul>
</div>
</dd>
</dl>
</div>
</div>
</div>
</div>
<div class="sect3">
<h4 id="_see_also_214">See Also</h4>
<div class="paragraph">
<p><a href="#VkDisplayModeKHR">VkDisplayModeKHR</a>, <a href="#VkDisplayPlaneCapabilitiesKHR">VkDisplayPlaneCapabilitiesKHR</a>, <a href="#VkPhysicalDevice">VkPhysicalDevice</a></p>
</div>
</div>
<div class="sect3">
<h4 id="_document_notes_214">Document Notes</h4>
<div class="paragraph">
<p>For more information, see the Vulkan Specification at URL</p>
</div>
<div class="paragraph">
<p><a href="https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#vkGetDisplayPlaneCapabilitiesKHR" class="bare">https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#vkGetDisplayPlaneCapabilitiesKHR</a></p>
</div>
<div class="paragraph">
<p>This page is extracted from the Vulkan Specification.
Fixes and changes should be made to the Specification, not directly.</p>
</div>
<div style="page-break-after: always;"></div>
</div>
</div>
<div class="sect2">
<h3 id="_vkgetdisplayplanesupporteddisplayskhr3">vkGetDisplayPlaneSupportedDisplaysKHR(3)</h3>
<div class="sect3">
<h4 id="_name_215">Name</h4>
<div class="paragraph">
<p>vkGetDisplayPlaneSupportedDisplaysKHR - Query the list of displays a plane supports</p>
</div>
</div>
<div class="sect3">
<h4 id="_c_specification_215">C Specification</h4>
<div class="paragraph">
<p>To determine which displays a plane is usable with, call</p>
</div>
<div id="vkGetDisplayPlaneSupportedDisplaysKHR" class="listingblock">
<div class="content">
<pre class="highlight"><code class="language-c++" data-lang="c++">VkResult vkGetDisplayPlaneSupportedDisplaysKHR(
    VkPhysicalDevice                            physicalDevice,
    uint32_t                                    planeIndex,
    uint32_t*                                   pDisplayCount,
    VkDisplayKHR*                               pDisplays);</code></pre>
</div>
</div>
</div>
<div class="sect3">
<h4 id="_parameters_215">Parameters</h4>
<div class="ulist">
<ul>
<li>
<p><code>physicalDevice</code> is a physical device.</p>
</li>
<li>
<p><code>planeIndex</code> is the plane which the application wishes to use, and
<strong class="purple">must</strong> be in the range <span class="eq">[0, physical device plane count - 1]</span>.</p>
</li>
<li>
<p><code>pDisplayCount</code> is a pointer to an integer related to the number of
displays available or queried, as described below.</p>
</li>
<li>
<p><code>pDisplays</code> is either <code>NULL</code> or a pointer to an array of
<code>VkDisplayKHR</code> handles.</p>
</li>
</ul>
</div>
</div>
<div class="sect3">
<h4 id="_description_215">Description</h4>
<div class="paragraph">
<p>If <code>pDisplays</code> is <code>NULL</code>, then the number of displays usable with the
specified <code>planeIndex</code> for <code>physicalDevice</code> is returned in
<code>pDisplayCount</code>.
Otherwise, <code>pDisplayCount</code> <strong class="purple">must</strong> point to a variable set by the user to
the number of elements in the <code>pDisplays</code> array, and on return the
variable is overwritten with the number of handles actually written to
<code>pDisplays</code>.
If the value of <code>pDisplayCount</code> is less than the number of display
planes for <code>physicalDevice</code>, at most <code>pDisplayCount</code> handles will be
written.
If <code>pDisplayCount</code> is smaller than the number of displays usable with
the specified <code>planeIndex</code> for <code>physicalDevice</code>, <code>VK_INCOMPLETE</code>
will be returned instead of <code>VK_SUCCESS</code> to indicate that not all the
available values were returned.</p>
</div>
<div class="sidebarblock">
<div class="content">
<div class="title">Valid Usage</div>
<div class="ulist">
<ul>
<li>
<p><a id="VUID-vkGetDisplayPlaneSupportedDisplaysKHR-planeIndex-01249"></a>
<code>planeIndex</code> <strong class="purple">must</strong> be less than the number of display planes
supported by the device as determined by calling
<code>vkGetPhysicalDeviceDisplayPlanePropertiesKHR</code></p>
</li>
</ul>
</div>
</div>
</div>
<div class="sidebarblock">
<div class="content">
<div class="title">Valid Usage (Implicit)</div>
<div class="ulist">
<ul>
<li>
<p><a id="VUID-vkGetDisplayPlaneSupportedDisplaysKHR-physicalDevice-parameter"></a> <code>physicalDevice</code> <strong class="purple">must</strong> be a valid <code>VkPhysicalDevice</code> handle</p>
</li>
<li>
<p><a id="VUID-vkGetDisplayPlaneSupportedDisplaysKHR-pDisplayCount-parameter"></a> <code>pDisplayCount</code> <strong class="purple">must</strong> be a valid pointer to a <code>uint32_t</code> value</p>
</li>
<li>
<p><a id="VUID-vkGetDisplayPlaneSupportedDisplaysKHR-pDisplays-parameter"></a> If the value referenced by <code>pDisplayCount</code> is not <code>0</code>, and <code>pDisplays</code> is not <code>NULL</code>, <code>pDisplays</code> <strong class="purple">must</strong> be a valid pointer to an array of <code>pDisplayCount</code> <code>VkDisplayKHR</code> handles</p>
</li>
</ul>
</div>
</div>
</div>
<div class="sidebarblock">
<div class="content">
<div class="title">Return Codes</div>
<div class="dlist">
<dl>
<dt class="hdlist1"><a href="#fundamentals-successcodes">Success</a></dt>
<dd>
<div class="ulist">
<ul>
<li>
<p><code>VK_SUCCESS</code></p>
</li>
<li>
<p><code>VK_INCOMPLETE</code></p>
</li>
</ul>
</div>
</dd>
<dt class="hdlist1"><a href="#fundamentals-errorcodes">Failure</a></dt>
<dd>
<div class="ulist">
<ul>
<li>
<p><code>VK_ERROR_OUT_OF_HOST_MEMORY</code></p>
</li>
<li>
<p><code>VK_ERROR_OUT_OF_DEVICE_MEMORY</code></p>
</li>
</ul>
</div>
</dd>
</dl>
</div>
</div>
</div>
</div>
<div class="sect3">
<h4 id="_see_also_215">See Also</h4>
<div class="paragraph">
<p><a href="#VkDisplayKHR">VkDisplayKHR</a>, <a href="#VkPhysicalDevice">VkPhysicalDevice</a></p>
</div>
</div>
<div class="sect3">
<h4 id="_document_notes_215">Document Notes</h4>
<div class="paragraph">
<p>For more information, see the Vulkan Specification at URL</p>
</div>
<div class="paragraph">
<p><a href="https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#vkGetDisplayPlaneSupportedDisplaysKHR" class="bare">https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#vkGetDisplayPlaneSupportedDisplaysKHR</a></p>
</div>
<div class="paragraph">
<p>This page is extracted from the Vulkan Specification.
Fixes and changes should be made to the Specification, not directly.</p>
</div>
<div style="page-break-after: always;"></div>
</div>
</div>
<div class="sect2">
<h3 id="_vkgeteventstatus3">vkGetEventStatus(3)</h3>
<div class="sect3">
<h4 id="_name_216">Name</h4>
<div class="paragraph">
<p>vkGetEventStatus - Retrieve the status of an event object</p>
</div>
</div>
<div class="sect3">
<h4 id="_c_specification_216">C Specification</h4>
<div class="paragraph">
<p>To query the state of an event from the host, call:</p>
</div>
<div id="vkGetEventStatus" class="listingblock">
<div class="content">
<pre class="highlight"><code class="language-c++" data-lang="c++">VkResult vkGetEventStatus(
    VkDevice                                    device,
    VkEvent                                     event);</code></pre>
</div>
</div>
</div>
<div class="sect3">
<h4 id="_parameters_216">Parameters</h4>
<div class="ulist">
<ul>
<li>
<p><code>device</code> is the logical device that owns the event.</p>
</li>
<li>
<p><code>event</code> is the handle of the event to query.</p>
</li>
</ul>
</div>
</div>
<div class="sect3">
<h4 id="_description_216">Description</h4>
<div class="paragraph">
<p>Upon success, <code>vkGetEventStatus</code> returns the state of the event object
with the following return codes:</p>
</div>
<table class="tableblock frame-all grid-all" style="width: 80%;">
<caption class="title">Table 2. Event Object Status Codes</caption>
<colgroup>
<col style="width: 50%;">
<col style="width: 50%;">
</colgroup>
<thead>
<tr>
<th class="tableblock halign-left valign-top">Status</th>
<th class="tableblock halign-left valign-top">Meaning</th>
</tr>
</thead>
<tbody>
<tr>
<td class="tableblock halign-left valign-top"><p class="tableblock"><code>VK_EVENT_SET</code></p></td>
<td class="tableblock halign-left valign-top"><p class="tableblock">The event specified by <code>event</code> is signaled.</p></td>
</tr>
<tr>
<td class="tableblock halign-left valign-top"><p class="tableblock"><code>VK_EVENT_RESET</code></p></td>
<td class="tableblock halign-left valign-top"><p class="tableblock">The event specified by <code>event</code> is unsignaled.</p></td>
</tr>
</tbody>
</table>
<div class="paragraph">
<p>If a <code>vkCmdSetEvent</code> or <code>vkCmdResetEvent</code> command is in a command
buffer that is in the <a href="vkspec.html#commandbuffers-lifecycle">pending state</a>, then the
value returned by this command <strong class="purple">may</strong> immediately be out of date.</p>
</div>
<div class="paragraph">
<p>The state of an event <strong class="purple">can</strong> be updated by the host.
The state of the event is immediately changed, and subsequent calls to
<code>vkGetEventStatus</code> will return the new state.
If an event is already in the requested state, then updating it to the same
state has no effect.</p>
</div>
<div class="sidebarblock">
<div class="content">
<div class="title">Valid Usage (Implicit)</div>
<div class="ulist">
<ul>
<li>
<p><a id="VUID-vkGetEventStatus-device-parameter"></a> <code>device</code> <strong class="purple">must</strong> be a valid <code>VkDevice</code> handle</p>
</li>
<li>
<p><a id="VUID-vkGetEventStatus-event-parameter"></a> <code>event</code> <strong class="purple">must</strong> be a valid <code>VkEvent</code> handle</p>
</li>
<li>
<p><a id="VUID-vkGetEventStatus-event-parent"></a> <code>event</code> <strong class="purple">must</strong> have been created, allocated, or retrieved from <code>device</code></p>
</li>
</ul>
</div>
</div>
</div>
<div class="sidebarblock">
<div class="content">
<div class="title">Return Codes</div>
<div class="dlist">
<dl>
<dt class="hdlist1"><a href="#fundamentals-successcodes">Success</a></dt>
<dd>
<div class="ulist">
<ul>
<li>
<p><code>VK_EVENT_SET</code></p>
</li>
<li>
<p><code>VK_EVENT_RESET</code></p>
</li>
</ul>
</div>
</dd>
<dt class="hdlist1"><a href="#fundamentals-errorcodes">Failure</a></dt>
<dd>
<div class="ulist">
<ul>
<li>
<p><code>VK_ERROR_OUT_OF_HOST_MEMORY</code></p>
</li>
<li>
<p><code>VK_ERROR_OUT_OF_DEVICE_MEMORY</code></p>
</li>
<li>
<p><code>VK_ERROR_DEVICE_LOST</code></p>
</li>
</ul>
</div>
</dd>
</dl>
</div>
</div>
</div>
</div>
<div class="sect3">
<h4 id="_see_also_216">See Also</h4>
<div class="paragraph">
<p><a href="#VkDevice">VkDevice</a>, <a href="#VkEvent">VkEvent</a></p>
</div>
</div>
<div class="sect3">
<h4 id="_document_notes_216">Document Notes</h4>
<div class="paragraph">
<p>For more information, see the Vulkan Specification at URL</p>
</div>
<div class="paragraph">
<p><a href="https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#vkGetEventStatus" class="bare">https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#vkGetEventStatus</a></p>
</div>
<div class="paragraph">
<p>This page is extracted from the Vulkan Specification.
Fixes and changes should be made to the Specification, not directly.</p>
</div>
<div style="page-break-after: always;"></div>
</div>
</div>
<div class="sect2">
<h3 id="_vkgetfencefdkhr3">vkGetFenceFdKHR(3)</h3>
<div class="sect3">
<h4 id="_name_217">Name</h4>
<div class="paragraph">
<p>vkGetFenceFdKHR - Get a POSIX file descriptor handle for a fence</p>
</div>
</div>
<div class="sect3">
<h4 id="_c_specification_217">C Specification</h4>
<div class="paragraph">
<p>To export a POSIX file descriptor representing the payload of a fence, call:</p>
</div>
<div id="vkGetFenceFdKHR" class="listingblock">
<div class="content">
<pre class="highlight"><code class="language-c++" data-lang="c++">VkResult vkGetFenceFdKHR(
    VkDevice                                    device,
    const VkFenceGetFdInfoKHR*                  pGetFdInfo,
    int*                                        pFd);</code></pre>
</div>
</div>
</div>
<div class="sect3">
<h4 id="_parameters_217">Parameters</h4>
<div class="ulist">
<ul>
<li>
<p><code>device</code> is the logical device that created the fence being
exported.</p>
</li>
<li>
<p><code>pGetFdInfo</code> is a pointer to an instance of the
<a href="#VkFenceGetFdInfoKHR">VkFenceGetFdInfoKHR</a> structure containing parameters of the export
operation.</p>
</li>
<li>
<p><code>pFd</code> will return the file descriptor representing the fence
payload.</p>
</li>
</ul>
</div>
</div>
<div class="sect3">
<h4 id="_description_217">Description</h4>
<div class="paragraph">
<p>Each call to <code>vkGetFenceFdKHR</code> <strong class="purple">must</strong> create a new file descriptor and
transfer ownership of it to the application.
To avoid leaking resources, the application <strong class="purple">must</strong> release ownership of the
file descriptor when it is no longer needed.</p>
</div>
<div class="admonitionblock note">
<table>
<tr>
<td class="icon">
<i class="fa icon-note" title="Note"></i>
</td>
<td class="content">
<div class="title">Note</div>
<div class="paragraph">
<p>Ownership can be released in many ways.
For example, the application can call <code>close</code>() on the file descriptor,
or transfer ownership back to Vulkan by using the file descriptor to import
a fence payload.</p>
</div>
</td>
</tr>
</table>
</div>
<div class="paragraph">
<p>If <code>pGetFdInfo</code>-&gt;<code>handleType</code> is
<code>VK_EXTERNAL_FENCE_HANDLE_TYPE_SYNC_FD_BIT</code> and the fence is signaled at
the time <code>vkGetFenceFdKHR</code> is called, <code>pFd</code> <strong class="purple">may</strong> return the value
<code>-1</code> instead of a valid file descriptor.</p>
</div>
<div class="paragraph">
<p>Where supported by the operating system, the implementation <strong class="purple">must</strong> set the
file descriptor to be closed automatically when an <code>execve</code> system call
is made.</p>
</div>
<div class="paragraph">
<p>Exporting a file descriptor from a fence <strong class="purple">may</strong> have side effects depending on
the transference of the specified handle type, as described in
<a href="vkspec.html#synchronization-fences-importing">Importing Fence State</a>.</p>
</div>
<div class="sidebarblock">
<div class="content">
<div class="title">Valid Usage (Implicit)</div>
<div class="ulist">
<ul>
<li>
<p><a id="VUID-vkGetFenceFdKHR-device-parameter"></a> <code>device</code> <strong class="purple">must</strong> be a valid <code>VkDevice</code> handle</p>
</li>
<li>
<p><a id="VUID-vkGetFenceFdKHR-pGetFdInfo-parameter"></a> <code>pGetFdInfo</code> <strong class="purple">must</strong> be a valid pointer to a valid <code>VkFenceGetFdInfoKHR</code> structure</p>
</li>
<li>
<p><a id="VUID-vkGetFenceFdKHR-pFd-parameter"></a> <code>pFd</code> <strong class="purple">must</strong> be a valid pointer to a <code>int</code> value</p>
</li>
</ul>
</div>
</div>
</div>
<div class="sidebarblock">
<div class="content">
<div class="title">Return Codes</div>
<div class="dlist">
<dl>
<dt class="hdlist1"><a href="#fundamentals-successcodes">Success</a></dt>
<dd>
<div class="ulist">
<ul>
<li>
<p><code>VK_SUCCESS</code></p>
</li>
</ul>
</div>
</dd>
<dt class="hdlist1"><a href="#fundamentals-errorcodes">Failure</a></dt>
<dd>
<div class="ulist">
<ul>
<li>
<p><code>VK_ERROR_TOO_MANY_OBJECTS</code></p>
</li>
<li>
<p><code>VK_ERROR_OUT_OF_HOST_MEMORY</code></p>
</li>
</ul>
</div>
</dd>
</dl>
</div>
</div>
</div>
</div>
<div class="sect3">
<h4 id="_see_also_217">See Also</h4>
<div class="paragraph">
<p><a href="#VkDevice">VkDevice</a>, <a href="#VkFenceGetFdInfoKHR">VkFenceGetFdInfoKHR</a></p>
</div>
</div>
<div class="sect3">
<h4 id="_document_notes_217">Document Notes</h4>
<div class="paragraph">
<p>For more information, see the Vulkan Specification at URL</p>
</div>
<div class="paragraph">
<p><a href="https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#vkGetFenceFdKHR" class="bare">https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#vkGetFenceFdKHR</a></p>
</div>
<div class="paragraph">
<p>This page is extracted from the Vulkan Specification.
Fixes and changes should be made to the Specification, not directly.</p>
</div>
<div style="page-break-after: always;"></div>
</div>
</div>
<div class="sect2">
<h3 id="_vkgetfencestatus3">vkGetFenceStatus(3)</h3>
<div class="sect3">
<h4 id="_name_218">Name</h4>
<div class="paragraph">
<p>vkGetFenceStatus - Return the status of a fence</p>
</div>
</div>
<div class="sect3">
<h4 id="_c_specification_218">C Specification</h4>
<div class="paragraph">
<p>To query the status of a fence from the host, call:</p>
</div>
<div id="vkGetFenceStatus" class="listingblock">
<div class="content">
<pre class="highlight"><code class="language-c++" data-lang="c++">VkResult vkGetFenceStatus(
    VkDevice                                    device,
    VkFence                                     fence);</code></pre>
</div>
</div>
</div>
<div class="sect3">
<h4 id="_parameters_218">Parameters</h4>
<div class="ulist">
<ul>
<li>
<p><code>device</code> is the logical device that owns the fence.</p>
</li>
<li>
<p><code>fence</code> is the handle of the fence to query.</p>
</li>
</ul>
</div>
</div>
<div class="sect3">
<h4 id="_description_218">Description</h4>
<div class="paragraph">
<p>Upon success, <code>vkGetFenceStatus</code> returns the status of the fence object,
with the following return codes:</p>
</div>
<table class="tableblock frame-all grid-all" style="width: 80%;">
<caption class="title">Table 3. Fence Object Status Codes</caption>
<colgroup>
<col style="width: 50%;">
<col style="width: 50%;">
</colgroup>
<thead>
<tr>
<th class="tableblock halign-left valign-top">Status</th>
<th class="tableblock halign-left valign-top">Meaning</th>
</tr>
</thead>
<tbody>
<tr>
<td class="tableblock halign-left valign-top"><p class="tableblock"><code>VK_SUCCESS</code></p></td>
<td class="tableblock halign-left valign-top"><p class="tableblock">The fence specified by <code>fence</code> is signaled.</p></td>
</tr>
<tr>
<td class="tableblock halign-left valign-top"><p class="tableblock"><code>VK_NOT_READY</code></p></td>
<td class="tableblock halign-left valign-top"><p class="tableblock">The fence specified by <code>fence</code> is unsignaled.</p></td>
</tr>
<tr>
<td class="tableblock halign-left valign-top"><p class="tableblock"><code>VK_ERROR_DEVICE_LOST</code></p></td>
<td class="tableblock halign-left valign-top"><p class="tableblock">The device has been lost.  See <a href="vkspec.html#devsandqueues-lost-device">Lost Device</a>.</p></td>
</tr>
</tbody>
</table>
<div class="paragraph">
<p>If a <a href="vkspec.html#devsandqueues-submission">queue submission</a> command is pending
execution, then the value returned by this command <strong class="purple">may</strong> immediately be out
of date.</p>
</div>
<div class="paragraph">
<p>If the device has been lost (see <a href="vkspec.html#devsandqueues-lost-device">Lost Device</a>),
<code>vkGetFenceStatus</code> <strong class="purple">may</strong> return any of the above status codes.
If the device has been lost and <code>vkGetFenceStatus</code> is called repeatedly,
it will eventually return either <code>VK_SUCCESS</code> or
<code>VK_ERROR_DEVICE_LOST</code>.</p>
</div>
<div class="sidebarblock">
<div class="content">
<div class="title">Valid Usage (Implicit)</div>
<div class="ulist">
<ul>
<li>
<p><a id="VUID-vkGetFenceStatus-device-parameter"></a> <code>device</code> <strong class="purple">must</strong> be a valid <code>VkDevice</code> handle</p>
</li>
<li>
<p><a id="VUID-vkGetFenceStatus-fence-parameter"></a> <code>fence</code> <strong class="purple">must</strong> be a valid <code>VkFence</code> handle</p>
</li>
<li>
<p><a id="VUID-vkGetFenceStatus-fence-parent"></a> <code>fence</code> <strong class="purple">must</strong> have been created, allocated, or retrieved from <code>device</code></p>
</li>
</ul>
</div>
</div>
</div>
<div class="sidebarblock">
<div class="content">
<div class="title">Return Codes</div>
<div class="dlist">
<dl>
<dt class="hdlist1"><a href="#fundamentals-successcodes">Success</a></dt>
<dd>
<div class="ulist">
<ul>
<li>
<p><code>VK_SUCCESS</code></p>
</li>
<li>
<p><code>VK_NOT_READY</code></p>
</li>
</ul>
</div>
</dd>
<dt class="hdlist1"><a href="#fundamentals-errorcodes">Failure</a></dt>
<dd>
<div class="ulist">
<ul>
<li>
<p><code>VK_ERROR_OUT_OF_HOST_MEMORY</code></p>
</li>
<li>
<p><code>VK_ERROR_OUT_OF_DEVICE_MEMORY</code></p>
</li>
<li>
<p><code>VK_ERROR_DEVICE_LOST</code></p>
</li>
</ul>
</div>
</dd>
</dl>
</div>
</div>
</div>
</div>
<div class="sect3">
<h4 id="_see_also_218">See Also</h4>
<div class="paragraph">
<p><a href="#VkDevice">VkDevice</a>, <a href="#VkFence">VkFence</a></p>
</div>
</div>
<div class="sect3">
<h4 id="_document_notes_218">Document Notes</h4>
<div class="paragraph">
<p>For more information, see the Vulkan Specification at URL</p>
</div>
<div class="paragraph">
<p><a href="https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#vkGetFenceStatus" class="bare">https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#vkGetFenceStatus</a></p>
</div>
<div class="paragraph">
<p>This page is extracted from the Vulkan Specification.
Fixes and changes should be made to the Specification, not directly.</p>
</div>
<div style="page-break-after: always;"></div>
</div>
</div>
<div class="sect2">
<h3 id="_vkgetfencewin32handlekhr3">vkGetFenceWin32HandleKHR(3)</h3>
<div class="sect3">
<h4 id="_name_219">Name</h4>
<div class="paragraph">
<p>vkGetFenceWin32HandleKHR - Get a Windows HANDLE for a fence</p>
</div>
</div>
<div class="sect3">
<h4 id="_c_specification_219">C Specification</h4>
<div class="paragraph">
<p>To export a Windows handle representing the state of a fence, call:</p>
</div>
<div id="vkGetFenceWin32HandleKHR" class="listingblock">
<div class="content">
<pre class="highlight"><code class="language-c++" data-lang="c++">VkResult vkGetFenceWin32HandleKHR(
    VkDevice                                    device,
    const VkFenceGetWin32HandleInfoKHR*         pGetWin32HandleInfo,
    HANDLE*                                     pHandle);</code></pre>
</div>
</div>
</div>
<div class="sect3">
<h4 id="_parameters_219">Parameters</h4>
<div class="ulist">
<ul>
<li>
<p><code>device</code> is the logical device that created the fence being
exported.</p>
</li>
<li>
<p><code>pGetWin32HandleInfo</code> is a pointer to an instance of the
<a href="#VkFenceGetWin32HandleInfoKHR">VkFenceGetWin32HandleInfoKHR</a> structure containing parameters of
the export operation.</p>
</li>
<li>
<p><code>pHandle</code> will return the Windows handle representing the fence
state.</p>
</li>
</ul>
</div>
</div>
<div class="sect3">
<h4 id="_description_219">Description</h4>
<div class="paragraph">
<p>For handle types defined as NT handles, the handles returned by
<code>vkGetFenceWin32HandleKHR</code> are owned by the application.
To avoid leaking resources, the application <strong class="purple">must</strong> release ownership of them
using the <code>CloseHandle</code> system call when they are no longer needed.</p>
</div>
<div class="paragraph">
<p>Exporting a Windows handle from a fence <strong class="purple">may</strong> have side effects depending on
the transference of the specified handle type, as described in
<a href="vkspec.html#synchronization-fences-importing">Importing Fence Payloads</a>.</p>
</div>
<div class="sidebarblock">
<div class="content">
<div class="title">Valid Usage (Implicit)</div>
<div class="ulist">
<ul>
<li>
<p><a id="VUID-vkGetFenceWin32HandleKHR-device-parameter"></a> <code>device</code> <strong class="purple">must</strong> be a valid <code>VkDevice</code> handle</p>
</li>
<li>
<p><a id="VUID-vkGetFenceWin32HandleKHR-pGetWin32HandleInfo-parameter"></a> <code>pGetWin32HandleInfo</code> <strong class="purple">must</strong> be a valid pointer to a valid <code>VkFenceGetWin32HandleInfoKHR</code> structure</p>
</li>
<li>
<p><a id="VUID-vkGetFenceWin32HandleKHR-pHandle-parameter"></a> <code>pHandle</code> <strong class="purple">must</strong> be a valid pointer to a <code>HANDLE</code> value</p>
</li>
</ul>
</div>
</div>
</div>
<div class="sidebarblock">
<div class="content">
<div class="title">Return Codes</div>
<div class="dlist">
<dl>
<dt class="hdlist1"><a href="#fundamentals-successcodes">Success</a></dt>
<dd>
<div class="ulist">
<ul>
<li>
<p><code>VK_SUCCESS</code></p>
</li>
</ul>
</div>
</dd>
<dt class="hdlist1"><a href="#fundamentals-errorcodes">Failure</a></dt>
<dd>
<div class="ulist">
<ul>
<li>
<p><code>VK_ERROR_TOO_MANY_OBJECTS</code></p>
</li>
<li>
<p><code>VK_ERROR_OUT_OF_HOST_MEMORY</code></p>
</li>
</ul>
</div>
</dd>
</dl>
</div>
</div>
</div>
</div>
<div class="sect3">
<h4 id="_see_also_219">See Also</h4>
<div class="paragraph">
<p><a href="#VkDevice">VkDevice</a>, <a href="#VkFenceGetWin32HandleInfoKHR">VkFenceGetWin32HandleInfoKHR</a></p>
</div>
</div>
<div class="sect3">
<h4 id="_document_notes_219">Document Notes</h4>
<div class="paragraph">
<p>For more information, see the Vulkan Specification at URL</p>
</div>
<div class="paragraph">
<p><a href="https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#vkGetFenceWin32HandleKHR" class="bare">https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#vkGetFenceWin32HandleKHR</a></p>
</div>
<div class="paragraph">
<p>This page is extracted from the Vulkan Specification.
Fixes and changes should be made to the Specification, not directly.</p>
</div>
<div style="page-break-after: always;"></div>
</div>
</div>
<div class="sect2">
<h3 id="_vkgetimagedrmformatmodifierpropertiesext3">vkGetImageDrmFormatModifierPropertiesEXT(3)</h3>
<div class="sect3">
<h4 id="_name_220">Name</h4>
<div class="paragraph">
<p>vkGetImageDrmFormatModifierPropertiesEXT - Returns an image&#8217;s DRM format modifier</p>
</div>
</div>
<div class="sect3">
<h4 id="_c_specification_220">C Specification</h4>
<div class="paragraph">
<p>If an image was created with <code>VK_IMAGE_TILING_DRM_FORMAT_MODIFIER_EXT</code>,
then the image has a <a href="vkspec.html#glossary-drm-format-modifier">Linux DRM format
modifier</a>.
To query the <em>modifier</em>, call:</p>
</div>
<div id="vkGetImageDrmFormatModifierPropertiesEXT" class="listingblock">
<div class="content">
<pre class="highlight"><code class="language-c++" data-lang="c++">VkResult vkGetImageDrmFormatModifierPropertiesEXT(
    VkDevice                                    device,
    VkImage                                     image,
    VkImageDrmFormatModifierPropertiesEXT*      pProperties);</code></pre>
</div>
</div>
</div>
<div class="sect3">
<h4 id="_parameters_220">Parameters</h4>
<div class="ulist">
<ul>
<li>
<p><code>device</code> is the logical device that owns the image.</p>
</li>
<li>
<p><code>image</code> is the queried image.</p>
</li>
<li>
<p><code>pProperties</code> will return properties of the image&#8217;s <em>DRM format
modifier</em>.</p>
</li>
</ul>
</div>
</div>
<div class="sect3">
<h4 id="_description_220">Description</h4>
<div class="sidebarblock">
<div class="content">
<div class="title">Valid Usage</div>
<div class="ulist">
<ul>
<li>
<p><a id="VUID-vkGetImageDrmFormatModifierPropertiesEXT-image-02272"></a>
<code>image</code> <strong class="purple">must</strong> have been created with
<a href="vkspec.html#VkImageCreateInfo"><code>tiling</code></a> equal to
<code>VK_IMAGE_TILING_DRM_FORMAT_MODIFIER_EXT</code>.</p>
</li>
</ul>
</div>
</div>
</div>
<div class="sidebarblock">
<div class="content">
<div class="title">Valid Usage (Implicit)</div>
<div class="ulist">
<ul>
<li>
<p><a id="VUID-vkGetImageDrmFormatModifierPropertiesEXT-device-parameter"></a> <code>device</code> <strong class="purple">must</strong> be a valid <code>VkDevice</code> handle</p>
</li>
<li>
<p><a id="VUID-vkGetImageDrmFormatModifierPropertiesEXT-image-parameter"></a> <code>image</code> <strong class="purple">must</strong> be a valid <code>VkImage</code> handle</p>
</li>
<li>
<p><a id="VUID-vkGetImageDrmFormatModifierPropertiesEXT-pProperties-parameter"></a> <code>pProperties</code> <strong class="purple">must</strong> be a valid pointer to a <code>VkImageDrmFormatModifierPropertiesEXT</code> structure</p>
</li>
<li>
<p><a id="VUID-vkGetImageDrmFormatModifierPropertiesEXT-image-parent"></a> <code>image</code> <strong class="purple">must</strong> have been created, allocated, or retrieved from <code>device</code></p>
</li>
</ul>
</div>
</div>
</div>
<div class="sidebarblock">
<div class="content">
<div class="title">Return Codes</div>
<div class="dlist">
<dl>
<dt class="hdlist1"><a href="#fundamentals-successcodes">Success</a></dt>
<dd>
<div class="ulist">
<ul>
<li>
<p><code>VK_SUCCESS</code></p>
</li>
</ul>
</div>
</dd>
</dl>
</div>
</div>
</div>
</div>
<div class="sect3">
<h4 id="_see_also_220">See Also</h4>
<div class="paragraph">
<p><a href="#VkDevice">VkDevice</a>, <a href="#VkImage">VkImage</a>, <a href="#VkImageDrmFormatModifierPropertiesEXT">VkImageDrmFormatModifierPropertiesEXT</a></p>
</div>
</div>
<div class="sect3">
<h4 id="_document_notes_220">Document Notes</h4>
<div class="paragraph">
<p>For more information, see the Vulkan Specification at URL</p>
</div>
<div class="paragraph">
<p><a href="https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#vkGetImageDrmFormatModifierPropertiesEXT" class="bare">https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#vkGetImageDrmFormatModifierPropertiesEXT</a></p>
</div>
<div class="paragraph">
<p>This page is extracted from the Vulkan Specification.
Fixes and changes should be made to the Specification, not directly.</p>
</div>
<div style="page-break-after: always;"></div>
</div>
</div>
<div class="sect2">
<h3 id="_vkgetimagememoryrequirements3">vkGetImageMemoryRequirements(3)</h3>
<div class="sect3">
<h4 id="_name_221">Name</h4>
<div class="paragraph">
<p>vkGetImageMemoryRequirements - Returns the memory requirements for specified Vulkan object</p>
</div>
</div>
<div class="sect3">
<h4 id="_c_specification_221">C Specification</h4>
<div class="paragraph">
<p>To determine the memory requirements for an image resource which is not
created with the <code>VK_IMAGE_CREATE_DISJOINT_BIT</code> flag set, call:</p>
</div>
<div id="vkGetImageMemoryRequirements" class="listingblock">
<div class="content">
<pre class="highlight"><code class="language-c++" data-lang="c++">void vkGetImageMemoryRequirements(
    VkDevice                                    device,
    VkImage                                     image,
    VkMemoryRequirements*                       pMemoryRequirements);</code></pre>
</div>
</div>
</div>
<div class="sect3">
<h4 id="_parameters_221">Parameters</h4>
<div class="ulist">
<ul>
<li>
<p><code>device</code> is the logical device that owns the image.</p>
</li>
<li>
<p><code>image</code> is the image to query.</p>
</li>
<li>
<p><code>pMemoryRequirements</code> points to an instance of the
<a href="#VkMemoryRequirements">VkMemoryRequirements</a> structure in which the memory requirements of
the image object are returned.</p>
</li>
</ul>
</div>
</div>
<div class="sect3">
<h4 id="_description_221">Description</h4>
<div class="sidebarblock">
<div class="content">
<div class="title">Valid Usage</div>
<div class="ulist">
<ul>
<li>
<p><a id="VUID-vkGetImageMemoryRequirements-image-01588"></a>
<code>image</code> <strong class="purple">must</strong> not have been created with the
<code>VK_IMAGE_CREATE_DISJOINT_BIT</code> flag set</p>
</li>
</ul>
</div>
</div>
</div>
<div class="sidebarblock">
<div class="content">
<div class="title">Valid Usage (Implicit)</div>
<div class="ulist">
<ul>
<li>
<p><a id="VUID-vkGetImageMemoryRequirements-device-parameter"></a> <code>device</code> <strong class="purple">must</strong> be a valid <code>VkDevice</code> handle</p>
</li>
<li>
<p><a id="VUID-vkGetImageMemoryRequirements-image-parameter"></a> <code>image</code> <strong class="purple">must</strong> be a valid <code>VkImage</code> handle</p>
</li>
<li>
<p><a id="VUID-vkGetImageMemoryRequirements-pMemoryRequirements-parameter"></a> <code>pMemoryRequirements</code> <strong class="purple">must</strong> be a valid pointer to a <code>VkMemoryRequirements</code> structure</p>
</li>
<li>
<p><a id="VUID-vkGetImageMemoryRequirements-image-parent"></a> <code>image</code> <strong class="purple">must</strong> have been created, allocated, or retrieved from <code>device</code></p>
</li>
</ul>
</div>
</div>
</div>
</div>
<div class="sect3">
<h4 id="_see_also_221">See Also</h4>
<div class="paragraph">
<p><a href="#VkDevice">VkDevice</a>, <a href="#VkImage">VkImage</a>, <a href="#VkMemoryRequirements">VkMemoryRequirements</a></p>
</div>
</div>
<div class="sect3">
<h4 id="_document_notes_221">Document Notes</h4>
<div class="paragraph">
<p>For more information, see the Vulkan Specification at URL</p>
</div>
<div class="paragraph">
<p><a href="https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#vkGetImageMemoryRequirements" class="bare">https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#vkGetImageMemoryRequirements</a></p>
</div>
<div class="paragraph">
<p>This page is extracted from the Vulkan Specification.
Fixes and changes should be made to the Specification, not directly.</p>
</div>
<div style="page-break-after: always;"></div>
</div>
</div>
<div class="sect2">
<h3 id="_vkgetimagememoryrequirements23">vkGetImageMemoryRequirements2(3)</h3>
<div class="sect3">
<h4 id="_name_222">Name</h4>
<div class="paragraph">
<p>vkGetImageMemoryRequirements2 - Returns the memory requirements for specified Vulkan object</p>
</div>
</div>
<div class="sect3">
<h4 id="_c_specification_222">C Specification</h4>
<div class="paragraph">
<p>To determine the memory requirements for an image resource, call:</p>
</div>
<div id="vkGetImageMemoryRequirements2" class="listingblock">
<div class="content">
<pre class="highlight"><code class="language-c++" data-lang="c++">void vkGetImageMemoryRequirements2(
    VkDevice                                    device,
    const VkImageMemoryRequirementsInfo2*       pInfo,
    VkMemoryRequirements2*                      pMemoryRequirements);</code></pre>
</div>
</div>
<div class="paragraph">
<p>or the equivalent command</p>
</div>
<div id="vkGetImageMemoryRequirements2KHR" class="listingblock">
<div class="content">
<pre class="highlight"><code class="language-c++" data-lang="c++">void vkGetImageMemoryRequirements2KHR(
    VkDevice                                    device,
    const VkImageMemoryRequirementsInfo2*       pInfo,
    VkMemoryRequirements2*                      pMemoryRequirements);</code></pre>
</div>
</div>
</div>
<div class="sect3">
<h4 id="_parameters_222">Parameters</h4>
<div class="ulist">
<ul>
<li>
<p><code>device</code> is the logical device that owns the image.</p>
</li>
<li>
<p><code>pInfo</code> is a pointer to an instance of the
<code>VkImageMemoryRequirementsInfo2</code> structure containing parameters
required for the memory requirements query.</p>
</li>
<li>
<p><code>pMemoryRequirements</code> points to an instance of the
<a href="#VkMemoryRequirements2">VkMemoryRequirements2</a> structure in which the memory requirements
of the image object are returned.</p>
</li>
</ul>
</div>
</div>
<div class="sect3">
<h4 id="_description_222">Description</h4>
<div class="sidebarblock">
<div class="content">
<div class="title">Valid Usage (Implicit)</div>
<div class="ulist">
<ul>
<li>
<p><a id="VUID-vkGetImageMemoryRequirements2-device-parameter"></a> <code>device</code> <strong class="purple">must</strong> be a valid <code>VkDevice</code> handle</p>
</li>
<li>
<p><a id="VUID-vkGetImageMemoryRequirements2-pInfo-parameter"></a> <code>pInfo</code> <strong class="purple">must</strong> be a valid pointer to a valid <code>VkImageMemoryRequirementsInfo2</code> structure</p>
</li>
<li>
<p><a id="VUID-vkGetImageMemoryRequirements2-pMemoryRequirements-parameter"></a> <code>pMemoryRequirements</code> <strong class="purple">must</strong> be a valid pointer to a <code>VkMemoryRequirements2</code> structure</p>
</li>
</ul>
</div>
</div>
</div>
</div>
<div class="sect3">
<h4 id="_see_also_222">See Also</h4>
<div class="paragraph">
<p><a href="#VkDevice">VkDevice</a>, <a href="#VkImageMemoryRequirementsInfo2">VkImageMemoryRequirementsInfo2</a>, <a href="#VkMemoryRequirements2">VkMemoryRequirements2</a></p>
</div>
</div>
<div class="sect3">
<h4 id="_document_notes_222">Document Notes</h4>
<div class="paragraph">
<p>For more information, see the Vulkan Specification at URL</p>
</div>
<div class="paragraph">
<p><a href="https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#vkGetImageMemoryRequirements2" class="bare">https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#vkGetImageMemoryRequirements2</a></p>
</div>
<div class="paragraph">
<p>This page is extracted from the Vulkan Specification.
Fixes and changes should be made to the Specification, not directly.</p>
</div>
<div style="page-break-after: always;"></div>
</div>
</div>
<div class="sect2">
<h3 id="_vkgetimagesparsememoryrequirements3">vkGetImageSparseMemoryRequirements(3)</h3>
<div class="sect3">
<h4 id="_name_223">Name</h4>
<div class="paragraph">
<p>vkGetImageSparseMemoryRequirements - Query the memory requirements for a sparse image</p>
</div>
</div>
<div class="sect3">
<h4 id="_c_specification_223">C Specification</h4>
<div class="paragraph">
<p>To query sparse memory requirements for an image, call:</p>
</div>
<div id="vkGetImageSparseMemoryRequirements" class="listingblock">
<div class="content">
<pre class="highlight"><code class="language-c++" data-lang="c++">void vkGetImageSparseMemoryRequirements(
    VkDevice                                    device,
    VkImage                                     image,
    uint32_t*                                   pSparseMemoryRequirementCount,
    VkSparseImageMemoryRequirements*            pSparseMemoryRequirements);</code></pre>
</div>
</div>
</div>
<div class="sect3">
<h4 id="_parameters_223">Parameters</h4>
<div class="ulist">
<ul>
<li>
<p><code>device</code> is the logical device that owns the image.</p>
</li>
<li>
<p><code>image</code> is the <a href="#VkImage">VkImage</a> object to get the memory requirements
for.</p>
</li>
<li>
<p><code>pSparseMemoryRequirementCount</code> is a pointer to an integer related
to the number of sparse memory requirements available or queried, as
described below.</p>
</li>
<li>
<p><code>pSparseMemoryRequirements</code> is either <code>NULL</code> or a pointer to an
array of <code>VkSparseImageMemoryRequirements</code> structures.</p>
</li>
</ul>
</div>
</div>
<div class="sect3">
<h4 id="_description_223">Description</h4>
<div class="paragraph">
<p>If <code>pSparseMemoryRequirements</code> is <code>NULL</code>, then the number of sparse
memory requirements available is returned in
<code>pSparseMemoryRequirementCount</code>.
Otherwise, <code>pSparseMemoryRequirementCount</code> <strong class="purple">must</strong> point to a variable set
by the user to the number of elements in the <code>pSparseMemoryRequirements</code>
array, and on return the variable is overwritten with the number of
structures actually written to <code>pSparseMemoryRequirements</code>.
If <code>pSparseMemoryRequirementCount</code> is less than the number of sparse
memory requirements available, at most <code>pSparseMemoryRequirementCount</code>
structures will be written.</p>
</div>
<div class="paragraph">
<p>If the image was not created with <code>VK_IMAGE_CREATE_SPARSE_RESIDENCY_BIT</code>
then <code>pSparseMemoryRequirementCount</code> will be set to zero and
<code>pSparseMemoryRequirements</code> will not be written to.</p>
</div>
<div class="admonitionblock note">
<table>
<tr>
<td class="icon">
<i class="fa icon-note" title="Note"></i>
</td>
<td class="content">
<div class="title">Note</div>
<div class="paragraph">
<p>It is legal for an implementation to report a larger value in
<code>VkMemoryRequirements</code>::<code>size</code> than would be obtained by adding
together memory sizes for all <code>VkSparseImageMemoryRequirements</code> returned
by <code>vkGetImageSparseMemoryRequirements</code>.
This <strong class="purple">may</strong> occur when the implementation requires unused padding in the
address range describing the resource.</p>
</div>
</td>
</tr>
</table>
</div>
<div class="sidebarblock">
<div class="content">
<div class="title">Valid Usage (Implicit)</div>
<div class="ulist">
<ul>
<li>
<p><a id="VUID-vkGetImageSparseMemoryRequirements-device-parameter"></a> <code>device</code> <strong class="purple">must</strong> be a valid <code>VkDevice</code> handle</p>
</li>
<li>
<p><a id="VUID-vkGetImageSparseMemoryRequirements-image-parameter"></a> <code>image</code> <strong class="purple">must</strong> be a valid <code>VkImage</code> handle</p>
</li>
<li>
<p><a id="VUID-vkGetImageSparseMemoryRequirements-pSparseMemoryRequirementCount-parameter"></a> <code>pSparseMemoryRequirementCount</code> <strong class="purple">must</strong> be a valid pointer to a <code>uint32_t</code> value</p>
</li>
<li>
<p><a id="VUID-vkGetImageSparseMemoryRequirements-pSparseMemoryRequirements-parameter"></a> If the value referenced by <code>pSparseMemoryRequirementCount</code> is not <code>0</code>, and <code>pSparseMemoryRequirements</code> is not <code>NULL</code>, <code>pSparseMemoryRequirements</code> <strong class="purple">must</strong> be a valid pointer to an array of <code>pSparseMemoryRequirementCount</code> <code>VkSparseImageMemoryRequirements</code> structures</p>
</li>
<li>
<p><a id="VUID-vkGetImageSparseMemoryRequirements-image-parent"></a> <code>image</code> <strong class="purple">must</strong> have been created, allocated, or retrieved from <code>device</code></p>
</li>
</ul>
</div>
</div>
</div>
</div>
<div class="sect3">
<h4 id="_see_also_223">See Also</h4>
<div class="paragraph">
<p><a href="#VkDevice">VkDevice</a>, <a href="#VkImage">VkImage</a>, <a href="#VkSparseImageMemoryRequirements">VkSparseImageMemoryRequirements</a></p>
</div>
</div>
<div class="sect3">
<h4 id="_document_notes_223">Document Notes</h4>
<div class="paragraph">
<p>For more information, see the Vulkan Specification at URL</p>
</div>
<div class="paragraph">
<p><a href="https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#vkGetImageSparseMemoryRequirements" class="bare">https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#vkGetImageSparseMemoryRequirements</a></p>
</div>
<div class="paragraph">
<p>This page is extracted from the Vulkan Specification.
Fixes and changes should be made to the Specification, not directly.</p>
</div>
<div style="page-break-after: always;"></div>
</div>
</div>
<div class="sect2">
<h3 id="_vkgetimagesparsememoryrequirements23">vkGetImageSparseMemoryRequirements2(3)</h3>
<div class="sect3">
<h4 id="_name_224">Name</h4>
<div class="paragraph">
<p>vkGetImageSparseMemoryRequirements2 - Query the memory requirements for a sparse image</p>
</div>
</div>
<div class="sect3">
<h4 id="_c_specification_224">C Specification</h4>
<div class="paragraph">
<p>To query sparse memory requirements for an image, call:</p>
</div>
<div id="vkGetImageSparseMemoryRequirements2" class="listingblock">
<div class="content">
<pre class="highlight"><code class="language-c++" data-lang="c++">void vkGetImageSparseMemoryRequirements2(
    VkDevice                                    device,
    const VkImageSparseMemoryRequirementsInfo2* pInfo,
    uint32_t*                                   pSparseMemoryRequirementCount,
    VkSparseImageMemoryRequirements2*           pSparseMemoryRequirements);</code></pre>
</div>
</div>
<div class="paragraph">
<p>or the equivalent command</p>
</div>
<div id="vkGetImageSparseMemoryRequirements2KHR" class="listingblock">
<div class="content">
<pre class="highlight"><code class="language-c++" data-lang="c++">void vkGetImageSparseMemoryRequirements2KHR(
    VkDevice                                    device,
    const VkImageSparseMemoryRequirementsInfo2* pInfo,
    uint32_t*                                   pSparseMemoryRequirementCount,
    VkSparseImageMemoryRequirements2*           pSparseMemoryRequirements);</code></pre>
</div>
</div>
</div>
<div class="sect3">
<h4 id="_parameters_224">Parameters</h4>
<div class="ulist">
<ul>
<li>
<p><code>device</code> is the logical device that owns the image.</p>
</li>
<li>
<p><code>pInfo</code> is a pointer to an instance of the
<code>VkImageSparseMemoryRequirementsInfo2</code> structure containing
parameters required for the memory requirements query.</p>
</li>
<li>
<p><code>pSparseMemoryRequirementCount</code> is a pointer to an integer related
to the number of sparse memory requirements available or queried, as
described below.</p>
</li>
<li>
<p><code>pSparseMemoryRequirements</code> is either <code>NULL</code> or a pointer to an
array of <code>VkSparseImageMemoryRequirements2</code> structures.</p>
</li>
</ul>
</div>
</div>
<div class="sect3">
<h4 id="_description_224">Description</h4>
<div class="sidebarblock">
<div class="content">
<div class="title">Valid Usage (Implicit)</div>
<div class="ulist">
<ul>
<li>
<p><a id="VUID-vkGetImageSparseMemoryRequirements2-device-parameter"></a> <code>device</code> <strong class="purple">must</strong> be a valid <code>VkDevice</code> handle</p>
</li>
<li>
<p><a id="VUID-vkGetImageSparseMemoryRequirements2-pInfo-parameter"></a> <code>pInfo</code> <strong class="purple">must</strong> be a valid pointer to a valid <code>VkImageSparseMemoryRequirementsInfo2</code> structure</p>
</li>
<li>
<p><a id="VUID-vkGetImageSparseMemoryRequirements2-pSparseMemoryRequirementCount-parameter"></a> <code>pSparseMemoryRequirementCount</code> <strong class="purple">must</strong> be a valid pointer to a <code>uint32_t</code> value</p>
</li>
<li>
<p><a id="VUID-vkGetImageSparseMemoryRequirements2-pSparseMemoryRequirements-parameter"></a> If the value referenced by <code>pSparseMemoryRequirementCount</code> is not <code>0</code>, and <code>pSparseMemoryRequirements</code> is not <code>NULL</code>, <code>pSparseMemoryRequirements</code> <strong class="purple">must</strong> be a valid pointer to an array of <code>pSparseMemoryRequirementCount</code> <code>VkSparseImageMemoryRequirements2</code> structures</p>
</li>
</ul>
</div>
</div>
</div>
</div>
<div class="sect3">
<h4 id="_see_also_224">See Also</h4>
<div class="paragraph">
<p><a href="#VkDevice">VkDevice</a>, <a href="#VkImageSparseMemoryRequirementsInfo2">VkImageSparseMemoryRequirementsInfo2</a>, <a href="#VkSparseImageMemoryRequirements2">VkSparseImageMemoryRequirements2</a></p>
</div>
</div>
<div class="sect3">
<h4 id="_document_notes_224">Document Notes</h4>
<div class="paragraph">
<p>For more information, see the Vulkan Specification at URL</p>
</div>
<div class="paragraph">
<p><a href="https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#vkGetImageSparseMemoryRequirements2" class="bare">https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#vkGetImageSparseMemoryRequirements2</a></p>
</div>
<div class="paragraph">
<p>This page is extracted from the Vulkan Specification.
Fixes and changes should be made to the Specification, not directly.</p>
</div>
<div style="page-break-after: always;"></div>
</div>
</div>
<div class="sect2">
<h3 id="_vkgetimagesubresourcelayout3">vkGetImageSubresourceLayout(3)</h3>
<div class="sect3">
<h4 id="_name_225">Name</h4>
<div class="paragraph">
<p>vkGetImageSubresourceLayout - Retrieve information about an image subresource</p>
</div>
</div>
<div class="sect3">
<h4 id="_c_specification_225">C Specification</h4>
<div class="paragraph">
<p>To query the memory layout of an image subresource, call:</p>
</div>
<div id="vkGetImageSubresourceLayout" class="listingblock">
<div class="content">
<pre class="highlight"><code class="language-c++" data-lang="c++">void vkGetImageSubresourceLayout(
    VkDevice                                    device,
    VkImage                                     image,
    const VkImageSubresource*                   pSubresource,
    VkSubresourceLayout*                        pLayout);</code></pre>
</div>
</div>
</div>
<div class="sect3">
<h4 id="_parameters_225">Parameters</h4>
<div class="ulist">
<ul>
<li>
<p><code>device</code> is the logical device that owns the image.</p>
</li>
<li>
<p><code>image</code> is the image whose layout is being queried.</p>
</li>
<li>
<p><code>pSubresource</code> is a pointer to a <a href="#VkImageSubresource">VkImageSubresource</a> structure
selecting a specific image for the image subresource.</p>
</li>
<li>
<p><code>pLayout</code> points to a <a href="#VkSubresourceLayout">VkSubresourceLayout</a> structure in which
the layout is returned.</p>
</li>
</ul>
</div>
</div>
<div class="sect3">
<h4 id="_description_225">Description</h4>
<div class="paragraph">
<p>If the image is <a href="vkspec.html#glossary-linear-resource">linear</a>, then the
returned layout is valid for <a href="vkspec.html#memory-device-hostacces">host access</a>.</p>
</div>
<div class="paragraph">
<p>If the image&#8217;s
tiling is <code>VK_IMAGE_TILING_LINEAR</code> and its
format is a <a href="vkspec.html#formats-requiring-sampler-ycbcr-conversion">multi-planar
format</a>, then <code>vkGetImageSubresourceLayout</code> describes one
<em>format plane</em>
of the image.
If the image&#8217;s tiling is <code>VK_IMAGE_TILING_DRM_FORMAT_MODIFIER_EXT</code>, then
<code>vkGetImageSubresourceLayout</code> describes one <em>memory plane</em> of the image.
If the image&#8217;s tiling is <code>VK_IMAGE_TILING_DRM_FORMAT_MODIFIER_EXT</code> and
the image is <a href="vkspec.html#glossary-linear-resource">non-linear</a>, then the returned
layout has an implementation-dependent meaning; the vendor of the image&#8217;s
<a href="vkspec.html#glossary-drm-format-modifier">DRM format modifier</a> <strong class="purple">may</strong> provide
documentation that explains how to interpret the returned layout.</p>
</div>
<div class="paragraph">
<p><code>vkGetImageSubresourceLayout</code> is invariant for the lifetime of a single
image.
However, the subresource layout of images in Android hardware buffer
external memory is not known until the image has been bound to memory, so
applications <strong class="purple">must</strong> not call <a href="#vkGetImageSubresourceLayout">vkGetImageSubresourceLayout</a> for such an
image before it has been bound.</p>
</div>
<div class="sidebarblock">
<div class="content">
<div class="title">Valid Usage</div>
<div class="ulist">
<ul>
<li>
<p><a id="VUID-vkGetImageSubresourceLayout-image-02270"></a>
<code>image</code> <strong class="purple">must</strong> have been created with <code>tiling</code> equal to
<code>VK_IMAGE_TILING_LINEAR</code> or
<code>VK_IMAGE_TILING_DRM_FORMAT_MODIFIER_EXT</code></p>
</li>
<li>
<p><a id="VUID-vkGetImageSubresourceLayout-aspectMask-00997"></a>
The <code>aspectMask</code> member of <code>pSubresource</code> <strong class="purple">must</strong> only have a
single bit set</p>
</li>
<li>
<p><a id="VUID-vkGetImageSubresourceLayout-mipLevel-01716"></a>
The <code>mipLevel</code> member of <code>pSubresource</code> <strong class="purple">must</strong> be less than the
<code>mipLevels</code> specified in <a href="#VkImageCreateInfo">VkImageCreateInfo</a> when <code>image</code>
was created</p>
</li>
<li>
<p><a id="VUID-vkGetImageSubresourceLayout-arrayLayer-01717"></a>
The <code>arrayLayer</code> member of <code>pSubresource</code> <strong class="purple">must</strong> be less than the
<code>arrayLayers</code> specified in <a href="#VkImageCreateInfo">VkImageCreateInfo</a> when <code>image</code>
was created</p>
</li>
<li>
<p><a id="VUID-vkGetImageSubresourceLayout-format-01581"></a>
If the <code>tiling</code> of the <code>image</code> is <code>VK_IMAGE_TILING_LINEAR</code>
and its <code>format</code> is a
<a href="vkspec.html#formats-requiring-sampler-ycbcr-conversion">multi-planar format</a> with
two planes, the <code>aspectMask</code> member of <code>pSubresource</code> <strong class="purple">must</strong> be
<code>VK_IMAGE_ASPECT_PLANE_0_BIT</code> or <code>VK_IMAGE_ASPECT_PLANE_1_BIT</code></p>
</li>
<li>
<p><a id="VUID-vkGetImageSubresourceLayout-format-01582"></a>
If the <code>tiling</code> of the <code>image</code> is <code>VK_IMAGE_TILING_LINEAR</code>
and its <code>format</code> is a
<a href="vkspec.html#formats-requiring-sampler-ycbcr-conversion">multi-planar format</a> with
three planes, the <code>aspectMask</code> member of <code>pSubresource</code> <strong class="purple">must</strong> be
<code>VK_IMAGE_ASPECT_PLANE_0_BIT</code>, <code>VK_IMAGE_ASPECT_PLANE_1_BIT</code> or
<code>VK_IMAGE_ASPECT_PLANE_2_BIT</code></p>
</li>
<li>
<p><a id="VUID-vkGetImageSubresourceLayout-image-01895"></a>
If <code>image</code> was created with the
<code>VK_EXTERNAL_MEMORY_HANDLE_TYPE_ANDROID_HARDWARE_BUFFER_BIT_ANDROID</code>
external memory handle type, then <code>image</code> <strong class="purple">must</strong> be bound to memory.</p>
</li>
<li>
<p><a id="VUID-vkGetImageSubresourceLayout-tiling-02271"></a>
 If the <code>tiling</code> of the <code>image</code> is
 <code>VK_IMAGE_TILING_DRM_FORMAT_MODIFIER_EXT</code>, then the <code>aspectMask</code>
 member of <code>pSubresource</code> <strong class="purple">must</strong> be
 <code>VK_IMAGE_ASPECT_MEMORY_PLANE_i_BIT_EXT</code> and the index <code>i</code> <strong class="purple">must</strong>
 be less than the
 <a href="vkspec.html#VkDrmFormatModifierPropertiesEXT"><code>drmFormatModifierPlaneCount</code></a>
 associated with the image&#8217;s
<a href="vkspec.html#VkImageCreateInfo"><code>format</code></a> and
<a href="vkspec.html#VkImageDrmFormatModifierPropertiesEXT"><code>drmFormatModifier</code></a>.</p>
</li>
</ul>
</div>
</div>
</div>
<div class="sidebarblock">
<div class="content">
<div class="title">Valid Usage (Implicit)</div>
<div class="ulist">
<ul>
<li>
<p><a id="VUID-vkGetImageSubresourceLayout-device-parameter"></a> <code>device</code> <strong class="purple">must</strong> be a valid <code>VkDevice</code> handle</p>
</li>
<li>
<p><a id="VUID-vkGetImageSubresourceLayout-image-parameter"></a> <code>image</code> <strong class="purple">must</strong> be a valid <code>VkImage</code> handle</p>
</li>
<li>
<p><a id="VUID-vkGetImageSubresourceLayout-pSubresource-parameter"></a> <code>pSubresource</code> <strong class="purple">must</strong> be a valid pointer to a valid <code>VkImageSubresource</code> structure</p>
</li>
<li>
<p><a id="VUID-vkGetImageSubresourceLayout-pLayout-parameter"></a> <code>pLayout</code> <strong class="purple">must</strong> be a valid pointer to a <code>VkSubresourceLayout</code> structure</p>
</li>
<li>
<p><a id="VUID-vkGetImageSubresourceLayout-image-parent"></a> <code>image</code> <strong class="purple">must</strong> have been created, allocated, or retrieved from <code>device</code></p>
</li>
</ul>
</div>
</div>
</div>
</div>
<div class="sect3">
<h4 id="_see_also_225">See Also</h4>
<div class="paragraph">
<p><a href="#VkDevice">VkDevice</a>, <a href="#VkImage">VkImage</a>, <a href="#VkImageSubresource">VkImageSubresource</a>, <a href="#VkSubresourceLayout">VkSubresourceLayout</a></p>
</div>
</div>
<div class="sect3">
<h4 id="_document_notes_225">Document Notes</h4>
<div class="paragraph">
<p>For more information, see the Vulkan Specification at URL</p>
</div>
<div class="paragraph">
<p><a href="https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#vkGetImageSubresourceLayout" class="bare">https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#vkGetImageSubresourceLayout</a></p>
</div>
<div class="paragraph">
<p>This page is extracted from the Vulkan Specification.
Fixes and changes should be made to the Specification, not directly.</p>
</div>
<div style="page-break-after: always;"></div>
</div>
</div>
<div class="sect2">
<h3 id="_vkgetimageviewhandlenvx3">vkGetImageViewHandleNVX(3)</h3>
<div class="sect3">
<h4 id="_name_226">Name</h4>
<div class="paragraph">
<p>vkGetImageViewHandleNVX - Get the handle for an image view for a specific descriptor type</p>
</div>
</div>
<div class="sect3">
<h4 id="_c_specification_226">C Specification</h4>
<div class="paragraph">
<p>To get the handle for an image view, call:</p>
</div>
<div id="vkGetImageViewHandleNVX" class="listingblock">
<div class="content">
<pre class="highlight"><code class="language-c++" data-lang="c++">uint32_t vkGetImageViewHandleNVX(
    VkDevice                                    device,
    const VkImageViewHandleInfoNVX*             pInfo);</code></pre>
</div>
</div>
</div>
<div class="sect3">
<h4 id="_parameters_226">Parameters</h4>
<div class="ulist">
<ul>
<li>
<p><code>device</code> is the logical device that owns the image view.</p>
</li>
<li>
<p><code>pInfo</code> describes the image view to query and type of handle.</p>
</li>
</ul>
</div>
</div>
<div class="sect3">
<h4 id="_description_226">Description</h4>
<div class="sidebarblock">
<div class="content">
<div class="title">Valid Usage (Implicit)</div>
<div class="ulist">
<ul>
<li>
<p><a id="VUID-vkGetImageViewHandleNVX-device-parameter"></a> <code>device</code> <strong class="purple">must</strong> be a valid <code>VkDevice</code> handle</p>
</li>
<li>
<p><a id="VUID-vkGetImageViewHandleNVX-pInfo-parameter"></a> <code>pInfo</code> <strong class="purple">must</strong> be a valid pointer to a valid <code>VkImageViewHandleInfoNVX</code> structure</p>
</li>
</ul>
</div>
</div>
</div>
</div>
<div class="sect3">
<h4 id="_see_also_226">See Also</h4>
<div class="paragraph">
<p><a href="#VkDevice">VkDevice</a>, <a href="#VkImageViewHandleInfoNVX">VkImageViewHandleInfoNVX</a></p>
</div>
</div>
<div class="sect3">
<h4 id="_document_notes_226">Document Notes</h4>
<div class="paragraph">
<p>For more information, see the Vulkan Specification at URL</p>
</div>
<div class="paragraph">
<p><a href="https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#vkGetImageViewHandleNVX" class="bare">https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#vkGetImageViewHandleNVX</a></p>
</div>
<div class="paragraph">
<p>This page is extracted from the Vulkan Specification.
Fixes and changes should be made to the Specification, not directly.</p>
</div>
<div style="page-break-after: always;"></div>
</div>
</div>
<div class="sect2">
<h3 id="_vkgetinstanceprocaddr3">vkGetInstanceProcAddr(3)</h3>
<div class="sect3">
<h4 id="_name_227">Name</h4>
<div class="paragraph">
<p>vkGetInstanceProcAddr - Return a function pointer for a command</p>
</div>
</div>
<div class="sect3">
<h4 id="_c_specification_227">C Specification</h4>
<div class="paragraph">
<p>Function pointers for all Vulkan commands <strong class="purple">can</strong> be obtained with the command:</p>
</div>
<div id="vkGetInstanceProcAddr" class="listingblock">
<div class="content">
<pre class="highlight"><code class="language-c++" data-lang="c++">PFN_vkVoidFunction vkGetInstanceProcAddr(
    VkInstance                                  instance,
    const char*                                 pName);</code></pre>
</div>
</div>
</div>
<div class="sect3">
<h4 id="_parameters_227">Parameters</h4>
<div class="ulist">
<ul>
<li>
<p><code>instance</code> is the instance that the function pointer will be
compatible with, or <code>NULL</code> for commands not dependent on any instance.</p>
</li>
<li>
<p><code>pName</code> is the name of the command to obtain.</p>
</li>
</ul>
</div>
</div>
<div class="sect3">
<h4 id="_description_227">Description</h4>
<div class="paragraph">
<p><code>vkGetInstanceProcAddr</code> itself is obtained in a platform- and loader-
specific manner.
Typically, the loader library will export this command as a function symbol,
so applications <strong class="purple">can</strong> link against the loader library, or load it dynamically
and look up the symbol using platform-specific APIs.</p>
</div>
<div class="paragraph">
<p>The table below defines the various use cases for
<code>vkGetInstanceProcAddr</code> and expected return value (&#8220;fp&#8221; is &#8220;function
pointer&#8221;) for each case.</p>
</div>
<div class="paragraph">
<p>The returned function pointer is of type <a href="#PFN_vkVoidFunction">PFN_vkVoidFunction</a>, and must
be cast to the type of the command being queried.</p>
</div>
<table class="tableblock frame-all grid-all" style="width: 80%;">
<caption class="title">Table 4. vkGetInstanceProcAddr behavior</caption>
<colgroup>
<col style="width: 33.3333%;">
<col style="width: 33.3333%;">
<col style="width: 33.3334%;">
</colgroup>
<thead>
<tr>
<th class="tableblock halign-left valign-top"><code>instance</code></th>
<th class="tableblock halign-left valign-top"><code>pName</code></th>
<th class="tableblock halign-left valign-top">return value</th>
</tr>
</thead>
<tbody>
<tr>
<td class="tableblock halign-left valign-top"><p class="tableblock">*</p></td>
<td class="tableblock halign-left valign-top"><p class="tableblock"><code>NULL</code></p></td>
<td class="tableblock halign-left valign-top"><p class="tableblock">undefined</p></td>
</tr>
<tr>
<td class="tableblock halign-left valign-top"><p class="tableblock">invalid instance</p></td>
<td class="tableblock halign-left valign-top"><p class="tableblock">*</p></td>
<td class="tableblock halign-left valign-top"><p class="tableblock">undefined</p></td>
</tr>
<tr>
<td class="tableblock halign-left valign-top"><p class="tableblock"><code>NULL</code></p></td>
<td class="tableblock halign-left valign-top"><p class="tableblock"><a href="#vkEnumerateInstanceVersion">vkEnumerateInstanceVersion</a></p></td>
<td class="tableblock halign-left valign-top"><p class="tableblock">fp</p></td>
</tr>
<tr>
<td class="tableblock halign-left valign-top"><p class="tableblock"><code>NULL</code></p></td>
<td class="tableblock halign-left valign-top"><p class="tableblock"><a href="#vkEnumerateInstanceExtensionProperties">vkEnumerateInstanceExtensionProperties</a></p></td>
<td class="tableblock halign-left valign-top"><p class="tableblock">fp</p></td>
</tr>
<tr>
<td class="tableblock halign-left valign-top"><p class="tableblock"><code>NULL</code></p></td>
<td class="tableblock halign-left valign-top"><p class="tableblock"><a href="#vkEnumerateInstanceLayerProperties">vkEnumerateInstanceLayerProperties</a></p></td>
<td class="tableblock halign-left valign-top"><p class="tableblock">fp</p></td>
</tr>
<tr>
<td class="tableblock halign-left valign-top"><p class="tableblock"><code>NULL</code></p></td>
<td class="tableblock halign-left valign-top"><p class="tableblock"><a href="#vkCreateInstance">vkCreateInstance</a></p></td>
<td class="tableblock halign-left valign-top"><p class="tableblock">fp</p></td>
</tr>
<tr>
<td class="tableblock halign-left valign-top"><p class="tableblock"><code>NULL</code></p></td>
<td class="tableblock halign-left valign-top"><p class="tableblock">* (any <code>pName</code> not covered above)</p></td>
<td class="tableblock halign-left valign-top"><p class="tableblock"><code>NULL</code></p></td>
</tr>
<tr>
<td class="tableblock halign-left valign-top"><p class="tableblock">instance</p></td>
<td class="tableblock halign-left valign-top"><p class="tableblock">core Vulkan command</p></td>
<td class="tableblock halign-left valign-top"><p class="tableblock">fp<sup>1</sup></p></td>
</tr>
<tr>
<td class="tableblock halign-left valign-top"><p class="tableblock">instance</p></td>
<td class="tableblock halign-left valign-top"><p class="tableblock">enabled instance extension commands for <code>instance</code></p></td>
<td class="tableblock halign-left valign-top"><p class="tableblock">fp<sup>1</sup></p></td>
</tr>
<tr>
<td class="tableblock halign-left valign-top"><p class="tableblock">instance</p></td>
<td class="tableblock halign-left valign-top"><p class="tableblock">available device extension<sup>2</sup> commands for <code>instance</code></p></td>
<td class="tableblock halign-left valign-top"><p class="tableblock">fp<sup>1</sup></p></td>
</tr>
<tr>
<td class="tableblock halign-left valign-top"><p class="tableblock">instance</p></td>
<td class="tableblock halign-left valign-top"><p class="tableblock">* (any <code>pName</code> not covered above)</p></td>
<td class="tableblock halign-left valign-top"><p class="tableblock"><code>NULL</code></p></td>
</tr>
</tbody>
</table>
<div class="dlist">
<dl>
<dt class="hdlist1">1</dt>
<dd>
<p>The returned function pointer <strong class="purple">must</strong> only be called with a dispatchable
object (the first parameter) that is <code>instance</code> or a child of
<code>instance</code>, e.g. <a href="#VkInstance">VkInstance</a>, <a href="#VkPhysicalDevice">VkPhysicalDevice</a>,
<a href="#VkDevice">VkDevice</a>, <a href="#VkQueue">VkQueue</a>, or <a href="#VkCommandBuffer">VkCommandBuffer</a>.</p>
</dd>
<dt class="hdlist1">2</dt>
<dd>
<p>An &#8220;available device extension&#8221; is a device extension supported by any
physical device enumerated by <code>instance</code>.</p>
</dd>
</dl>
</div>
<div class="sidebarblock">
<div class="content">
<div class="title">Valid Usage (Implicit)</div>
<div class="ulist">
<ul>
<li>
<p><a id="VUID-vkGetInstanceProcAddr-instance-parameter"></a> If <code>instance</code> is not <code>NULL</code>, <code>instance</code> <strong class="purple">must</strong> be a valid <code>VkInstance</code> handle</p>
</li>
<li>
<p><a id="VUID-vkGetInstanceProcAddr-pName-parameter"></a> <code>pName</code> <strong class="purple">must</strong> be a null-terminated UTF-8 string</p>
</li>
</ul>
</div>
</div>
</div>
</div>
<div class="sect3">
<h4 id="_see_also_227">See Also</h4>
<div class="paragraph">
<p><a href="#PFN_vkVoidFunction">PFN_vkVoidFunction</a>, <a href="#VkInstance">VkInstance</a></p>
</div>
</div>
<div class="sect3">
<h4 id="_document_notes_227">Document Notes</h4>
<div class="paragraph">
<p>For more information, see the Vulkan Specification at URL</p>
</div>
<div class="paragraph">
<p><a href="https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#vkGetInstanceProcAddr" class="bare">https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#vkGetInstanceProcAddr</a></p>
</div>
<div class="paragraph">
<p>This page is extracted from the Vulkan Specification.
Fixes and changes should be made to the Specification, not directly.</p>
</div>
<div style="page-break-after: always;"></div>
</div>
</div>
<div class="sect2">
<h3 id="_vkgetmemoryandroidhardwarebufferandroid3">vkGetMemoryAndroidHardwareBufferANDROID(3)</h3>
<div class="sect3">
<h4 id="_name_228">Name</h4>
<div class="paragraph">
<p>vkGetMemoryAndroidHardwareBufferANDROID - Get an Android hardware buffer for a memory object</p>
</div>
</div>
<div class="sect3">
<h4 id="_c_specification_228">C Specification</h4>
<div class="paragraph">
<p>To export an Android hardware buffer representing the underlying resources
of a Vulkan device memory object, call:</p>
</div>
<div id="vkGetMemoryAndroidHardwareBufferANDROID" class="listingblock">
<div class="content">
<pre class="highlight"><code class="language-c++" data-lang="c++">VkResult vkGetMemoryAndroidHardwareBufferANDROID(
    VkDevice                                    device,
    const VkMemoryGetAndroidHardwareBufferInfoANDROID* pInfo,
    struct AHardwareBuffer**                    pBuffer);</code></pre>
</div>
</div>
</div>
<div class="sect3">
<h4 id="_parameters_228">Parameters</h4>
<div class="ulist">
<ul>
<li>
<p><code>device</code> is the logical device that created the device memory being
exported.</p>
</li>
<li>
<p><code>pInfo</code> is a pointer to an instance of the
<a href="#VkMemoryGetAndroidHardwareBufferInfoANDROID">VkMemoryGetAndroidHardwareBufferInfoANDROID</a> structure containing
parameters of the export operation.</p>
</li>
<li>
<p><code>pBuffer</code> will return an Android hardware buffer representing the
underlying resources of the device memory object.</p>
</li>
</ul>
</div>
</div>
<div class="sect3">
<h4 id="_description_228">Description</h4>
<div class="paragraph">
<p>Each call to <code>vkGetMemoryAndroidHardwareBufferANDROID</code> <strong class="purple">must</strong> return an
Android hardware buffer with a new reference acquired in addition to the
reference held by the <a href="#VkDeviceMemory">VkDeviceMemory</a>.
To avoid leaking resources, the application <strong class="purple">must</strong> release the reference by
calling <code>AHardwareBuffer_release</code> when it is no longer needed.
When called with the same handle in
<a href="#VkMemoryGetAndroidHardwareBufferInfoANDROID">VkMemoryGetAndroidHardwareBufferInfoANDROID</a>::<code>memory</code>,
<code>vkGetMemoryAndroidHardwareBufferANDROID</code> <strong class="purple">must</strong> return the same Android
hardware buffer object.
If the device memory was created by importing an Android hardware buffer,
<code>vkGetMemoryAndroidHardwareBufferANDROID</code> <strong class="purple">must</strong> return that same Android
hardware buffer object.</p>
</div>
<div class="sidebarblock">
<div class="content">
<div class="title">Valid Usage (Implicit)</div>
<div class="ulist">
<ul>
<li>
<p><a id="VUID-vkGetMemoryAndroidHardwareBufferANDROID-device-parameter"></a> <code>device</code> <strong class="purple">must</strong> be a valid <code>VkDevice</code> handle</p>
</li>
<li>
<p><a id="VUID-vkGetMemoryAndroidHardwareBufferANDROID-pInfo-parameter"></a> <code>pInfo</code> <strong class="purple">must</strong> be a valid pointer to a valid <code>VkMemoryGetAndroidHardwareBufferInfoANDROID</code> structure</p>
</li>
<li>
<p><a id="VUID-vkGetMemoryAndroidHardwareBufferANDROID-pBuffer-parameter"></a> <code>pBuffer</code> <strong class="purple">must</strong> be a valid pointer to a valid pointer to a <code>AHardwareBuffer</code> value</p>
</li>
</ul>
</div>
</div>
</div>
<div class="sidebarblock">
<div class="content">
<div class="title">Return Codes</div>
<div class="dlist">
<dl>
<dt class="hdlist1"><a href="#fundamentals-successcodes">Success</a></dt>
<dd>
<div class="ulist">
<ul>
<li>
<p><code>VK_SUCCESS</code></p>
</li>
</ul>
</div>
</dd>
<dt class="hdlist1"><a href="#fundamentals-errorcodes">Failure</a></dt>
<dd>
<div class="ulist">
<ul>
<li>
<p><code>VK_ERROR_TOO_MANY_OBJECTS</code></p>
</li>
<li>
<p><code>VK_ERROR_OUT_OF_HOST_MEMORY</code></p>
</li>
</ul>
</div>
</dd>
</dl>
</div>
</div>
</div>
</div>
<div class="sect3">
<h4 id="_see_also_228">See Also</h4>
<div class="paragraph">
<p><a href="#VkDevice">VkDevice</a>, <a href="#VkMemoryGetAndroidHardwareBufferInfoANDROID">VkMemoryGetAndroidHardwareBufferInfoANDROID</a></p>
</div>
</div>
<div class="sect3">
<h4 id="_document_notes_228">Document Notes</h4>
<div class="paragraph">
<p>For more information, see the Vulkan Specification at URL</p>
</div>
<div class="paragraph">
<p><a href="https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#vkGetMemoryAndroidHardwareBufferANDROID" class="bare">https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#vkGetMemoryAndroidHardwareBufferANDROID</a></p>
</div>
<div class="paragraph">
<p>This page is extracted from the Vulkan Specification.
Fixes and changes should be made to the Specification, not directly.</p>
</div>
<div style="page-break-after: always;"></div>
</div>
</div>
<div class="sect2">
<h3 id="_vkgetmemoryfdkhr3">vkGetMemoryFdKHR(3)</h3>
<div class="sect3">
<h4 id="_name_229">Name</h4>
<div class="paragraph">
<p>vkGetMemoryFdKHR - Get a POSIX file descriptor for a memory object</p>
</div>
</div>
<div class="sect3">
<h4 id="_c_specification_229">C Specification</h4>
<div class="paragraph">
<p>To export a POSIX file descriptor representing the underlying resources of a
Vulkan device memory object, call:</p>
</div>
<div id="vkGetMemoryFdKHR" class="listingblock">
<div class="content">
<pre class="highlight"><code class="language-c++" data-lang="c++">VkResult vkGetMemoryFdKHR(
    VkDevice                                    device,
    const VkMemoryGetFdInfoKHR*                 pGetFdInfo,
    int*                                        pFd);</code></pre>
</div>
</div>
</div>
<div class="sect3">
<h4 id="_parameters_229">Parameters</h4>
<div class="ulist">
<ul>
<li>
<p><code>device</code> is the logical device that created the device memory being
exported.</p>
</li>
<li>
<p><code>pGetFdInfo</code> is a pointer to an instance of the
<a href="#VkMemoryGetFdInfoKHR">VkMemoryGetFdInfoKHR</a> structure containing parameters of the export
operation.</p>
</li>
<li>
<p><code>pFd</code> will return a file descriptor representing the underlying
resources of the device memory object.</p>
</li>
</ul>
</div>
</div>
<div class="sect3">
<h4 id="_description_229">Description</h4>
<div class="paragraph">
<p>Each call to <code>vkGetMemoryFdKHR</code> <strong class="purple">must</strong> create a new file descriptor and
transfer ownership of it to the application.
To avoid leaking resources, the application <strong class="purple">must</strong> release ownership of the
file descriptor using the <code>close</code> system call when it is no longer
needed, or by importing a Vulkan memory object from it.
Where supported by the operating system, the implementation <strong class="purple">must</strong> set the
file descriptor to be closed automatically when an <code>execve</code> system call
is made.</p>
</div>
<div class="sidebarblock">
<div class="content">
<div class="title">Valid Usage (Implicit)</div>
<div class="ulist">
<ul>
<li>
<p><a id="VUID-vkGetMemoryFdKHR-device-parameter"></a> <code>device</code> <strong class="purple">must</strong> be a valid <code>VkDevice</code> handle</p>
</li>
<li>
<p><a id="VUID-vkGetMemoryFdKHR-pGetFdInfo-parameter"></a> <code>pGetFdInfo</code> <strong class="purple">must</strong> be a valid pointer to a valid <code>VkMemoryGetFdInfoKHR</code> structure</p>
</li>
<li>
<p><a id="VUID-vkGetMemoryFdKHR-pFd-parameter"></a> <code>pFd</code> <strong class="purple">must</strong> be a valid pointer to a <code>int</code> value</p>
</li>
</ul>
</div>
</div>
</div>
<div class="sidebarblock">
<div class="content">
<div class="title">Return Codes</div>
<div class="dlist">
<dl>
<dt class="hdlist1"><a href="#fundamentals-successcodes">Success</a></dt>
<dd>
<div class="ulist">
<ul>
<li>
<p><code>VK_SUCCESS</code></p>
</li>
</ul>
</div>
</dd>
<dt class="hdlist1"><a href="#fundamentals-errorcodes">Failure</a></dt>
<dd>
<div class="ulist">
<ul>
<li>
<p><code>VK_ERROR_TOO_MANY_OBJECTS</code></p>
</li>
<li>
<p><code>VK_ERROR_OUT_OF_HOST_MEMORY</code></p>
</li>
</ul>
</div>
</dd>
</dl>
</div>
</div>
</div>
</div>
<div class="sect3">
<h4 id="_see_also_229">See Also</h4>
<div class="paragraph">
<p><a href="#VkDevice">VkDevice</a>, <a href="#VkMemoryGetFdInfoKHR">VkMemoryGetFdInfoKHR</a></p>
</div>
</div>
<div class="sect3">
<h4 id="_document_notes_229">Document Notes</h4>
<div class="paragraph">
<p>For more information, see the Vulkan Specification at URL</p>
</div>
<div class="paragraph">
<p><a href="https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#vkGetMemoryFdKHR" class="bare">https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#vkGetMemoryFdKHR</a></p>
</div>
<div class="paragraph">
<p>This page is extracted from the Vulkan Specification.
Fixes and changes should be made to the Specification, not directly.</p>
</div>
<div style="page-break-after: always;"></div>
</div>
</div>
<div class="sect2">
<h3 id="_vkgetmemoryfdpropertieskhr3">vkGetMemoryFdPropertiesKHR(3)</h3>
<div class="sect3">
<h4 id="_name_230">Name</h4>
<div class="paragraph">
<p>vkGetMemoryFdPropertiesKHR - Get Properties of External Memory File Descriptors</p>
</div>
</div>
<div class="sect3">
<h4 id="_c_specification_230">C Specification</h4>
<div class="paragraph">
<p>POSIX file descriptor memory handles compatible with Vulkan <strong class="purple">may</strong> also be
created by non-Vulkan APIs using methods beyond the scope of this
specification.
To determine the correct parameters to use when importing such handles,
call:</p>
</div>
<div id="vkGetMemoryFdPropertiesKHR" class="listingblock">
<div class="content">
<pre class="highlight"><code class="language-c++" data-lang="c++">VkResult vkGetMemoryFdPropertiesKHR(
    VkDevice                                    device,
    VkExternalMemoryHandleTypeFlagBits          handleType,
    int                                         fd,
    VkMemoryFdPropertiesKHR*                    pMemoryFdProperties);</code></pre>
</div>
</div>
</div>
<div class="sect3">
<h4 id="_parameters_230">Parameters</h4>
<div class="ulist">
<ul>
<li>
<p><code>device</code> is the logical device that will be importing <code>fd</code>.</p>
</li>
<li>
<p><code>handleType</code> is the type of the handle <code>fd</code>.</p>
</li>
<li>
<p><code>fd</code> is the handle which will be imported.</p>
</li>
<li>
<p><code>pMemoryFdProperties</code> is a pointer to a
<a href="#VkMemoryFdPropertiesKHR">VkMemoryFdPropertiesKHR</a> structure in which the properties of the
handle <code>fd</code> are returned.</p>
</li>
</ul>
</div>
</div>
<div class="sect3">
<h4 id="_description_230">Description</h4>
<div class="sidebarblock">
<div class="content">
<div class="title">Valid Usage</div>
<div class="ulist">
<ul>
<li>
<p><a id="VUID-vkGetMemoryFdPropertiesKHR-fd-00673"></a>
<code>fd</code> <strong class="purple">must</strong> be an external memory handle created outside of the
Vulkan API.</p>
</li>
<li>
<p><a id="VUID-vkGetMemoryFdPropertiesKHR-handleType-00674"></a>
<code>handleType</code> <strong class="purple">must</strong> not be
<code>VK_EXTERNAL_MEMORY_HANDLE_TYPE_OPAQUE_FD_BIT_KHR</code>.</p>
</li>
</ul>
</div>
</div>
</div>
<div class="sidebarblock">
<div class="content">
<div class="title">Valid Usage (Implicit)</div>
<div class="ulist">
<ul>
<li>
<p><a id="VUID-vkGetMemoryFdPropertiesKHR-device-parameter"></a> <code>device</code> <strong class="purple">must</strong> be a valid <code>VkDevice</code> handle</p>
</li>
<li>
<p><a id="VUID-vkGetMemoryFdPropertiesKHR-handleType-parameter"></a> <code>handleType</code> <strong class="purple">must</strong> be a valid <a href="#VkExternalMemoryHandleTypeFlagBits">VkExternalMemoryHandleTypeFlagBits</a> value</p>
</li>
<li>
<p><a id="VUID-vkGetMemoryFdPropertiesKHR-pMemoryFdProperties-parameter"></a> <code>pMemoryFdProperties</code> <strong class="purple">must</strong> be a valid pointer to a <code>VkMemoryFdPropertiesKHR</code> structure</p>
</li>
</ul>
</div>
</div>
</div>
<div class="sidebarblock">
<div class="content">
<div class="title">Return Codes</div>
<div class="dlist">
<dl>
<dt class="hdlist1"><a href="#fundamentals-successcodes">Success</a></dt>
<dd>
<div class="ulist">
<ul>
<li>
<p><code>VK_SUCCESS</code></p>
</li>
</ul>
</div>
</dd>
<dt class="hdlist1"><a href="#fundamentals-errorcodes">Failure</a></dt>
<dd>
<div class="ulist">
<ul>
<li>
<p><code>VK_ERROR_INVALID_EXTERNAL_HANDLE</code></p>
</li>
</ul>
</div>
</dd>
</dl>
</div>
</div>
</div>
</div>
<div class="sect3">
<h4 id="_see_also_230">See Also</h4>
<div class="paragraph">
<p><a href="#VkDevice">VkDevice</a>, <a href="#VkExternalMemoryHandleTypeFlagBits">VkExternalMemoryHandleTypeFlagBits</a>, <a href="#VkMemoryFdPropertiesKHR">VkMemoryFdPropertiesKHR</a></p>
</div>
</div>
<div class="sect3">
<h4 id="_document_notes_230">Document Notes</h4>
<div class="paragraph">
<p>For more information, see the Vulkan Specification at URL</p>
</div>
<div class="paragraph">
<p><a href="https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#vkGetMemoryFdPropertiesKHR" class="bare">https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#vkGetMemoryFdPropertiesKHR</a></p>
</div>
<div class="paragraph">
<p>This page is extracted from the Vulkan Specification.
Fixes and changes should be made to the Specification, not directly.</p>
</div>
<div style="page-break-after: always;"></div>
</div>
</div>
<div class="sect2">
<h3 id="_vkgetmemoryhostpointerpropertiesext3">vkGetMemoryHostPointerPropertiesEXT(3)</h3>
<div class="sect3">
<h4 id="_name_231">Name</h4>
<div class="paragraph">
<p>vkGetMemoryHostPointerPropertiesEXT - Get properties of external memory host pointer</p>
</div>
</div>
<div class="sect3">
<h4 id="_c_specification_231">C Specification</h4>
<div class="paragraph">
<p>To determine the correct parameters to use when importing host pointers,
call:</p>
</div>
<div id="vkGetMemoryHostPointerPropertiesEXT" class="listingblock">
<div class="content">
<pre class="highlight"><code class="language-c++" data-lang="c++">VkResult vkGetMemoryHostPointerPropertiesEXT(
    VkDevice                                    device,
    VkExternalMemoryHandleTypeFlagBits          handleType,
    const void*                                 pHostPointer,
    VkMemoryHostPointerPropertiesEXT*           pMemoryHostPointerProperties);</code></pre>
</div>
</div>
</div>
<div class="sect3">
<h4 id="_parameters_231">Parameters</h4>
<div class="ulist">
<ul>
<li>
<p><code>device</code> is the logical device that will be importing
<code>pHostPointer</code>.</p>
</li>
<li>
<p><code>handleType</code> is the type of the handle <code>pHostPointer</code>.</p>
</li>
<li>
<p><code>pHostPointer</code> is the host pointer to import from.</p>
</li>
<li>
<p><code>pMemoryHostPointerProperties</code> is a pointer to a
<a href="#VkMemoryHostPointerPropertiesEXT">VkMemoryHostPointerPropertiesEXT</a> structure in which the host
pointer properties are returned.</p>
</li>
</ul>
</div>
</div>
<div class="sect3">
<h4 id="_description_231">Description</h4>
<div class="sidebarblock">
<div class="content">
<div class="title">Valid Usage</div>
<div class="ulist">
<ul>
<li>
<p><a id="VUID-vkGetMemoryHostPointerPropertiesEXT-handleType-01752"></a>
<code>handleType</code> <strong class="purple">must</strong> be
<code>VK_EXTERNAL_MEMORY_HANDLE_TYPE_HOST_ALLOCATION_BIT_EXT</code> or
<code>VK_EXTERNAL_MEMORY_HANDLE_TYPE_HOST_MAPPED_FOREIGN_MEMORY_BIT_EXT</code></p>
</li>
<li>
<p><a id="VUID-vkGetMemoryHostPointerPropertiesEXT-pHostPointer-01753"></a>
<code>pHostPointer</code> <strong class="purple">must</strong> be a pointer aligned to an integer multiple of
<code>VkPhysicalDeviceExternalMemoryHostPropertiesEXT</code>::<code>minImportedHostPointerAlignment</code></p>
</li>
<li>
<p><a id="VUID-vkGetMemoryHostPointerPropertiesEXT-handleType-01754"></a>
If <code>handleType</code> is
<code>VK_EXTERNAL_MEMORY_HANDLE_TYPE_HOST_ALLOCATION_BIT_EXT</code>,
<code>pHostPointer</code> <strong class="purple">must</strong> be a pointer to host memory</p>
</li>
<li>
<p><a id="VUID-vkGetMemoryHostPointerPropertiesEXT-handleType-01755"></a>
If <code>handleType</code> is
<code>VK_EXTERNAL_MEMORY_HANDLE_TYPE_HOST_MAPPED_FOREIGN_MEMORY_BIT_EXT</code>,
<code>pHostPointer</code> <strong class="purple">must</strong> be a pointer to host mapped foreign memory</p>
</li>
</ul>
</div>
</div>
</div>
<div class="sidebarblock">
<div class="content">
<div class="title">Valid Usage (Implicit)</div>
<div class="ulist">
<ul>
<li>
<p><a id="VUID-vkGetMemoryHostPointerPropertiesEXT-device-parameter"></a> <code>device</code> <strong class="purple">must</strong> be a valid <code>VkDevice</code> handle</p>
</li>
<li>
<p><a id="VUID-vkGetMemoryHostPointerPropertiesEXT-handleType-parameter"></a> <code>handleType</code> <strong class="purple">must</strong> be a valid <a href="#VkExternalMemoryHandleTypeFlagBits">VkExternalMemoryHandleTypeFlagBits</a> value</p>
</li>
<li>
<p><a id="VUID-vkGetMemoryHostPointerPropertiesEXT-pMemoryHostPointerProperties-parameter"></a> <code>pMemoryHostPointerProperties</code> <strong class="purple">must</strong> be a valid pointer to a <code>VkMemoryHostPointerPropertiesEXT</code> structure</p>
</li>
</ul>
</div>
</div>
</div>
<div class="sidebarblock">
<div class="content">
<div class="title">Return Codes</div>
<div class="dlist">
<dl>
<dt class="hdlist1"><a href="#fundamentals-successcodes">Success</a></dt>
<dd>
<div class="ulist">
<ul>
<li>
<p><code>VK_SUCCESS</code></p>
</li>
</ul>
</div>
</dd>
<dt class="hdlist1"><a href="#fundamentals-errorcodes">Failure</a></dt>
<dd>
<div class="ulist">
<ul>
<li>
<p><code>VK_ERROR_INVALID_EXTERNAL_HANDLE</code></p>
</li>
</ul>
</div>
</dd>
</dl>
</div>
</div>
</div>
</div>
<div class="sect3">
<h4 id="_see_also_231">See Also</h4>
<div class="paragraph">
<p><a href="#VkDevice">VkDevice</a>, <a href="#VkExternalMemoryHandleTypeFlagBits">VkExternalMemoryHandleTypeFlagBits</a>, <a href="#VkMemoryHostPointerPropertiesEXT">VkMemoryHostPointerPropertiesEXT</a></p>
</div>
</div>
<div class="sect3">
<h4 id="_document_notes_231">Document Notes</h4>
<div class="paragraph">
<p>For more information, see the Vulkan Specification at URL</p>
</div>
<div class="paragraph">
<p><a href="https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#vkGetMemoryHostPointerPropertiesEXT" class="bare">https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#vkGetMemoryHostPointerPropertiesEXT</a></p>
</div>
<div class="paragraph">
<p>This page is extracted from the Vulkan Specification.
Fixes and changes should be made to the Specification, not directly.</p>
</div>
<div style="page-break-after: always;"></div>
</div>
</div>
<div class="sect2">
<h3 id="_vkgetmemorywin32handlekhr3">vkGetMemoryWin32HandleKHR(3)</h3>
<div class="sect3">
<h4 id="_name_232">Name</h4>
<div class="paragraph">
<p>vkGetMemoryWin32HandleKHR - Get a Windows HANDLE for a memory object</p>
</div>
</div>
<div class="sect3">
<h4 id="_c_specification_232">C Specification</h4>
<div class="paragraph">
<p>To export a Windows handle representing the underlying resources of a Vulkan
device memory object, call:</p>
</div>
<div id="vkGetMemoryWin32HandleKHR" class="listingblock">
<div class="content">
<pre class="highlight"><code class="language-c++" data-lang="c++">VkResult vkGetMemoryWin32HandleKHR(
    VkDevice                                    device,
    const VkMemoryGetWin32HandleInfoKHR*        pGetWin32HandleInfo,
    HANDLE*                                     pHandle);</code></pre>
</div>
</div>
</div>
<div class="sect3">
<h4 id="_parameters_232">Parameters</h4>
<div class="ulist">
<ul>
<li>
<p><code>device</code> is the logical device that created the device memory being
exported.</p>
</li>
<li>
<p><code>pGetWin32HandleInfo</code> is a pointer to an instance of the
<a href="#VkMemoryGetWin32HandleInfoKHR">VkMemoryGetWin32HandleInfoKHR</a> structure containing parameters of
the export operation.</p>
</li>
<li>
<p><code>pHandle</code> will return the Windows handle representing the underlying
resources of the device memory object.</p>
</li>
</ul>
</div>
</div>
<div class="sect3">
<h4 id="_description_232">Description</h4>
<div class="paragraph">
<p>For handle types defined as NT handles, the handles returned by
<code>vkGetMemoryWin32HandleKHR</code> are owned by the application.
To avoid leaking resources, the application <strong class="purple">must</strong> release ownership of them
using the <code>CloseHandle</code> system call when they are no longer needed.</p>
</div>
<div class="sidebarblock">
<div class="content">
<div class="title">Valid Usage (Implicit)</div>
<div class="ulist">
<ul>
<li>
<p><a id="VUID-vkGetMemoryWin32HandleKHR-device-parameter"></a> <code>device</code> <strong class="purple">must</strong> be a valid <code>VkDevice</code> handle</p>
</li>
<li>
<p><a id="VUID-vkGetMemoryWin32HandleKHR-pGetWin32HandleInfo-parameter"></a> <code>pGetWin32HandleInfo</code> <strong class="purple">must</strong> be a valid pointer to a valid <code>VkMemoryGetWin32HandleInfoKHR</code> structure</p>
</li>
<li>
<p><a id="VUID-vkGetMemoryWin32HandleKHR-pHandle-parameter"></a> <code>pHandle</code> <strong class="purple">must</strong> be a valid pointer to a <code>HANDLE</code> value</p>
</li>
</ul>
</div>
</div>
</div>
<div class="sidebarblock">
<div class="content">
<div class="title">Return Codes</div>
<div class="dlist">
<dl>
<dt class="hdlist1"><a href="#fundamentals-successcodes">Success</a></dt>
<dd>
<div class="ulist">
<ul>
<li>
<p><code>VK_SUCCESS</code></p>
</li>
</ul>
</div>
</dd>
<dt class="hdlist1"><a href="#fundamentals-errorcodes">Failure</a></dt>
<dd>
<div class="ulist">
<ul>
<li>
<p><code>VK_ERROR_TOO_MANY_OBJECTS</code></p>
</li>
<li>
<p><code>VK_ERROR_OUT_OF_HOST_MEMORY</code></p>
</li>
</ul>
</div>
</dd>
</dl>
</div>
</div>
</div>
</div>
<div class="sect3">
<h4 id="_see_also_232">See Also</h4>
<div class="paragraph">
<p><a href="#VkDevice">VkDevice</a>, <a href="#VkMemoryGetWin32HandleInfoKHR">VkMemoryGetWin32HandleInfoKHR</a></p>
</div>
</div>
<div class="sect3">
<h4 id="_document_notes_232">Document Notes</h4>
<div class="paragraph">
<p>For more information, see the Vulkan Specification at URL</p>
</div>
<div class="paragraph">
<p><a href="https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#vkGetMemoryWin32HandleKHR" class="bare">https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#vkGetMemoryWin32HandleKHR</a></p>
</div>
<div class="paragraph">
<p>This page is extracted from the Vulkan Specification.
Fixes and changes should be made to the Specification, not directly.</p>
</div>
<div style="page-break-after: always;"></div>
</div>
</div>
<div class="sect2">
<h3 id="_vkgetmemorywin32handlenv3">vkGetMemoryWin32HandleNV(3)</h3>
<div class="sect3">
<h4 id="_name_233">Name</h4>
<div class="paragraph">
<p>vkGetMemoryWin32HandleNV - retrieve Win32 handle to a device memory object</p>
</div>
</div>
<div class="sect3">
<h4 id="_c_specification_233">C Specification</h4>
<div class="paragraph">
<p>To retrieve the handle corresponding to a device memory object created with
<a href="#VkExportMemoryAllocateInfoNV">VkExportMemoryAllocateInfoNV</a>::<code>handleTypes</code> set to include
<code>VK_EXTERNAL_MEMORY_HANDLE_TYPE_OPAQUE_WIN32_BIT_NV</code> or
<code>VK_EXTERNAL_MEMORY_HANDLE_TYPE_OPAQUE_WIN32_KMT_BIT_NV</code>, call:</p>
</div>
<div id="vkGetMemoryWin32HandleNV" class="listingblock">
<div class="content">
<pre class="highlight"><code class="language-c++" data-lang="c++">VkResult vkGetMemoryWin32HandleNV(
    VkDevice                                    device,
    VkDeviceMemory                              memory,
    VkExternalMemoryHandleTypeFlagsNV           handleType,
    HANDLE*                                     pHandle);</code></pre>
</div>
</div>
</div>
<div class="sect3">
<h4 id="_parameters_233">Parameters</h4>
<div class="ulist">
<ul>
<li>
<p><code>device</code> is the logical device that owns the memory.</p>
</li>
<li>
<p><code>memory</code> is the <a href="#VkDeviceMemory">VkDeviceMemory</a> object.</p>
</li>
<li>
<p><code>handleType</code> is a bitmask of
<a href="#VkExternalMemoryHandleTypeFlagBitsNV">VkExternalMemoryHandleTypeFlagBitsNV</a> containing a single bit
specifying the type of handle requested.</p>
</li>
<li>
<p><code>handle</code> points to a Windows <code>HANDLE</code> in which the handle is
returned.</p>
</li>
</ul>
</div>
</div>
<div class="sect3">
<h4 id="_description_233">Description</h4>
<div class="sidebarblock">
<div class="content">
<div class="title">Valid Usage</div>
<div class="ulist">
<ul>
<li>
<p><a id="VUID-vkGetMemoryWin32HandleNV-handleType-01326"></a>
<code>handleType</code> <strong class="purple">must</strong> be a flag specified in
<a href="#VkExportMemoryAllocateInfoNV">VkExportMemoryAllocateInfoNV</a>::<code>handleTypes</code> when allocating
<code>memory</code></p>
</li>
</ul>
</div>
</div>
</div>
<div class="sidebarblock">
<div class="content">
<div class="title">Valid Usage (Implicit)</div>
<div class="ulist">
<ul>
<li>
<p><a id="VUID-vkGetMemoryWin32HandleNV-device-parameter"></a> <code>device</code> <strong class="purple">must</strong> be a valid <code>VkDevice</code> handle</p>
</li>
<li>
<p><a id="VUID-vkGetMemoryWin32HandleNV-memory-parameter"></a> <code>memory</code> <strong class="purple">must</strong> be a valid <code>VkDeviceMemory</code> handle</p>
</li>
<li>
<p><a id="VUID-vkGetMemoryWin32HandleNV-handleType-parameter"></a> <code>handleType</code> <strong class="purple">must</strong> be a valid combination of <a href="#VkExternalMemoryHandleTypeFlagBitsNV">VkExternalMemoryHandleTypeFlagBitsNV</a> values</p>
</li>
<li>
<p><a id="VUID-vkGetMemoryWin32HandleNV-handleType-requiredbitmask"></a> <code>handleType</code> <strong class="purple">must</strong> not be <code>0</code></p>
</li>
<li>
<p><a id="VUID-vkGetMemoryWin32HandleNV-pHandle-parameter"></a> <code>pHandle</code> <strong class="purple">must</strong> be a valid pointer to a <code>HANDLE</code> value</p>
</li>
<li>
<p><a id="VUID-vkGetMemoryWin32HandleNV-memory-parent"></a> <code>memory</code> <strong class="purple">must</strong> have been created, allocated, or retrieved from <code>device</code></p>
</li>
</ul>
</div>
</div>
</div>
<div class="sidebarblock">
<div class="content">
<div class="title">Return Codes</div>
<div class="dlist">
<dl>
<dt class="hdlist1"><a href="#fundamentals-successcodes">Success</a></dt>
<dd>
<div class="ulist">
<ul>
<li>
<p><code>VK_SUCCESS</code></p>
</li>
</ul>
</div>
</dd>
<dt class="hdlist1"><a href="#fundamentals-errorcodes">Failure</a></dt>
<dd>
<div class="ulist">
<ul>
<li>
<p><code>VK_ERROR_TOO_MANY_OBJECTS</code></p>
</li>
<li>
<p><code>VK_ERROR_OUT_OF_HOST_MEMORY</code></p>
</li>
</ul>
</div>
</dd>
</dl>
</div>
</div>
</div>
</div>
<div class="sect3">
<h4 id="_see_also_233">See Also</h4>
<div class="paragraph">
<p><a href="#VkDevice">VkDevice</a>, <a href="#VkDeviceMemory">VkDeviceMemory</a>, <a href="#VkExternalMemoryHandleTypeFlagsNV">VkExternalMemoryHandleTypeFlagsNV</a></p>
</div>
</div>
<div class="sect3">
<h4 id="_document_notes_233">Document Notes</h4>
<div class="paragraph">
<p>For more information, see the Vulkan Specification at URL</p>
</div>
<div class="paragraph">
<p><a href="https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#vkGetMemoryWin32HandleNV" class="bare">https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#vkGetMemoryWin32HandleNV</a></p>
</div>
<div class="paragraph">
<p>This page is extracted from the Vulkan Specification.
Fixes and changes should be made to the Specification, not directly.</p>
</div>
<div style="page-break-after: always;"></div>
</div>
</div>
<div class="sect2">
<h3 id="_vkgetmemorywin32handlepropertieskhr3">vkGetMemoryWin32HandlePropertiesKHR(3)</h3>
<div class="sect3">
<h4 id="_name_234">Name</h4>
<div class="paragraph">
<p>vkGetMemoryWin32HandlePropertiesKHR - Get Properties of External Memory Win32 Handles</p>
</div>
</div>
<div class="sect3">
<h4 id="_c_specification_234">C Specification</h4>
<div class="paragraph">
<p>Windows memory handles compatible with Vulkan <strong class="purple">may</strong> also be created by
non-Vulkan APIs using methods beyond the scope of this specification.
To determine the correct parameters to use when importing such handles,
call:</p>
</div>
<div id="vkGetMemoryWin32HandlePropertiesKHR" class="listingblock">
<div class="content">
<pre class="highlight"><code class="language-c++" data-lang="c++">VkResult vkGetMemoryWin32HandlePropertiesKHR(
    VkDevice                                    device,
    VkExternalMemoryHandleTypeFlagBits          handleType,
    HANDLE                                      handle,
    VkMemoryWin32HandlePropertiesKHR*           pMemoryWin32HandleProperties);</code></pre>
</div>
</div>
</div>
<div class="sect3">
<h4 id="_parameters_234">Parameters</h4>
<div class="ulist">
<ul>
<li>
<p><code>device</code> is the logical device that will be importing <code>handle</code>.</p>
</li>
<li>
<p><code>handleType</code> is the type of the handle <code>handle</code>.</p>
</li>
<li>
<p><code>handle</code> is the handle which will be imported.</p>
</li>
<li>
<p><code>pMemoryWin32HandleProperties</code> will return properties of
<code>handle</code>.</p>
</li>
</ul>
</div>
</div>
<div class="sect3">
<h4 id="_description_234">Description</h4>
<div class="sidebarblock">
<div class="content">
<div class="title">Valid Usage</div>
<div class="ulist">
<ul>
<li>
<p><a id="VUID-vkGetMemoryWin32HandlePropertiesKHR-handle-00665"></a>
<code>handle</code> <strong class="purple">must</strong> be an external memory handle created outside of the
Vulkan API.</p>
</li>
<li>
<p><a id="VUID-vkGetMemoryWin32HandlePropertiesKHR-handleType-00666"></a>
<code>handleType</code> <strong class="purple">must</strong> not be one of the handle types defined as opaque.</p>
</li>
</ul>
</div>
</div>
</div>
<div class="sidebarblock">
<div class="content">
<div class="title">Valid Usage (Implicit)</div>
<div class="ulist">
<ul>
<li>
<p><a id="VUID-vkGetMemoryWin32HandlePropertiesKHR-device-parameter"></a> <code>device</code> <strong class="purple">must</strong> be a valid <code>VkDevice</code> handle</p>
</li>
<li>
<p><a id="VUID-vkGetMemoryWin32HandlePropertiesKHR-handleType-parameter"></a> <code>handleType</code> <strong class="purple">must</strong> be a valid <a href="#VkExternalMemoryHandleTypeFlagBits">VkExternalMemoryHandleTypeFlagBits</a> value</p>
</li>
<li>
<p><a id="VUID-vkGetMemoryWin32HandlePropertiesKHR-pMemoryWin32HandleProperties-parameter"></a> <code>pMemoryWin32HandleProperties</code> <strong class="purple">must</strong> be a valid pointer to a <code>VkMemoryWin32HandlePropertiesKHR</code> structure</p>
</li>
</ul>
</div>
</div>
</div>
<div class="sidebarblock">
<div class="content">
<div class="title">Return Codes</div>
<div class="dlist">
<dl>
<dt class="hdlist1"><a href="#fundamentals-successcodes">Success</a></dt>
<dd>
<div class="ulist">
<ul>
<li>
<p><code>VK_SUCCESS</code></p>
</li>
</ul>
</div>
</dd>
<dt class="hdlist1"><a href="#fundamentals-errorcodes">Failure</a></dt>
<dd>
<div class="ulist">
<ul>
<li>
<p><code>VK_ERROR_INVALID_EXTERNAL_HANDLE</code></p>
</li>
</ul>
</div>
</dd>
</dl>
</div>
</div>
</div>
</div>
<div class="sect3">
<h4 id="_see_also_234">See Also</h4>
<div class="paragraph">
<p><a href="#VkDevice">VkDevice</a>, <a href="#VkExternalMemoryHandleTypeFlagBits">VkExternalMemoryHandleTypeFlagBits</a>, <a href="#VkMemoryWin32HandlePropertiesKHR">VkMemoryWin32HandlePropertiesKHR</a></p>
</div>
</div>
<div class="sect3">
<h4 id="_document_notes_234">Document Notes</h4>
<div class="paragraph">
<p>For more information, see the Vulkan Specification at URL</p>
</div>
<div class="paragraph">
<p><a href="https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#vkGetMemoryWin32HandlePropertiesKHR" class="bare">https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#vkGetMemoryWin32HandlePropertiesKHR</a></p>
</div>
<div class="paragraph">
<p>This page is extracted from the Vulkan Specification.
Fixes and changes should be made to the Specification, not directly.</p>
</div>
<div style="page-break-after: always;"></div>
</div>
</div>
<div class="sect2">
<h3 id="_vkgetpastpresentationtiminggoogle3">vkGetPastPresentationTimingGOOGLE(3)</h3>
<div class="sect3">
<h4 id="_name_235">Name</h4>
<div class="paragraph">
<p>vkGetPastPresentationTimingGOOGLE - Obtain timing of a previously-presented image</p>
</div>
</div>
<div class="sect3">
<h4 id="_c_specification_235">C Specification</h4>
<div class="paragraph">
<p>The implementation will maintain a limited amount of history of timing
information about previous presents.
Because of the asynchronous nature of the presentation engine, the timing
information for a given <a href="#vkQueuePresentKHR">vkQueuePresentKHR</a> command will become
available some time later.
These time values can be asynchronously queried, and will be returned if
available.
All time values are in nanoseconds, relative to a monotonically-increasing
clock (e.g. <code>CLOCK_MONOTONIC</code> (see clock_gettime(2)) on Android and Linux).</p>
</div>
<div class="paragraph">
<p>To asynchronously query the presentation engine, for newly-available timing
information about one or more previous presents to a given swapchain, call:</p>
</div>
<div id="vkGetPastPresentationTimingGOOGLE" class="listingblock">
<div class="content">
<pre class="highlight"><code class="language-c++" data-lang="c++">VkResult vkGetPastPresentationTimingGOOGLE(
    VkDevice                                    device,
    VkSwapchainKHR                              swapchain,
    uint32_t*                                   pPresentationTimingCount,
    VkPastPresentationTimingGOOGLE*             pPresentationTimings);</code></pre>
</div>
</div>
</div>
<div class="sect3">
<h4 id="_parameters_235">Parameters</h4>
<div class="ulist">
<ul>
<li>
<p><code>device</code> is the device associated with <code>swapchain</code>.</p>
</li>
<li>
<p><code>swapchain</code> is the swapchain to obtain presentation timing
information duration for.</p>
</li>
<li>
<p><code>pPresentationTimingCount</code> is a pointer to an integer related to the
number of <code>VkPastPresentationTimingGOOGLE</code> structures to query, as
described below.</p>
</li>
<li>
<p><code>pPresentationTimings</code> is either <code>NULL</code> or a pointer to an array of
<code>VkPastPresentationTimingGOOGLE</code> structures.</p>
</li>
</ul>
</div>
</div>
<div class="sect3">
<h4 id="_description_235">Description</h4>
<div class="paragraph">
<p>If <code>pPresentationTimings</code> is <code>NULL</code>, then the number of newly-available
timing records for the given <code>swapchain</code> is returned in
<code>pPresentationTimingCount</code>.
Otherwise, <code>pPresentationTimingCount</code> <strong class="purple">must</strong> point to a variable set by
the user to the number of elements in the <code>pPresentationTimings</code> array,
and on return the variable is overwritten with the number of structures
actually written to <code>pPresentationTimings</code>.
If the value of <code>pPresentationTimingCount</code> is less than the number of
newly-available timing records, at most <code>pPresentationTimingCount</code>
structures will be written.
If <code>pPresentationTimingCount</code> is smaller than the number of
newly-available timing records for the given <code>swapchain</code>,
<code>VK_INCOMPLETE</code> will be returned instead of <code>VK_SUCCESS</code> to indicate
that not all the available values were returned.</p>
</div>
<div class="sidebarblock">
<div class="content">
<div class="title">Valid Usage (Implicit)</div>
<div class="ulist">
<ul>
<li>
<p><a id="VUID-vkGetPastPresentationTimingGOOGLE-device-parameter"></a> <code>device</code> <strong class="purple">must</strong> be a valid <code>VkDevice</code> handle</p>
</li>
<li>
<p><a id="VUID-vkGetPastPresentationTimingGOOGLE-swapchain-parameter"></a> <code>swapchain</code> <strong class="purple">must</strong> be a valid <code>VkSwapchainKHR</code> handle</p>
</li>
<li>
<p><a id="VUID-vkGetPastPresentationTimingGOOGLE-pPresentationTimingCount-parameter"></a> <code>pPresentationTimingCount</code> <strong class="purple">must</strong> be a valid pointer to a <code>uint32_t</code> value</p>
</li>
<li>
<p><a id="VUID-vkGetPastPresentationTimingGOOGLE-pPresentationTimings-parameter"></a> If the value referenced by <code>pPresentationTimingCount</code> is not <code>0</code>, and <code>pPresentationTimings</code> is not <code>NULL</code>, <code>pPresentationTimings</code> <strong class="purple">must</strong> be a valid pointer to an array of <code>pPresentationTimingCount</code> <code>VkPastPresentationTimingGOOGLE</code> structures</p>
</li>
<li>
<p><a id="VUID-vkGetPastPresentationTimingGOOGLE-commonparent"></a> Both of <code>device</code>, and <code>swapchain</code> <strong class="purple">must</strong> have been created, allocated, or retrieved from the same <code>VkInstance</code></p>
</li>
</ul>
</div>
</div>
</div>
<div class="sidebarblock">
<div class="content">
<div class="title">Host Synchronization</div>
<div class="ulist">
<ul>
<li>
<p>Host access to <code>swapchain</code> <strong class="purple">must</strong> be externally synchronized</p>
</li>
</ul>
</div>
</div>
</div>
<div class="sidebarblock">
<div class="content">
<div class="title">Return Codes</div>
<div class="dlist">
<dl>
<dt class="hdlist1"><a href="#fundamentals-successcodes">Success</a></dt>
<dd>
<div class="ulist">
<ul>
<li>
<p><code>VK_SUCCESS</code></p>
</li>
<li>
<p><code>VK_INCOMPLETE</code></p>
</li>
</ul>
</div>
</dd>
<dt class="hdlist1"><a href="#fundamentals-errorcodes">Failure</a></dt>
<dd>
<div class="ulist">
<ul>
<li>
<p><code>VK_ERROR_DEVICE_LOST</code></p>
</li>
<li>
<p><code>VK_ERROR_OUT_OF_DATE_KHR</code></p>
</li>
<li>
<p><code>VK_ERROR_SURFACE_LOST_KHR</code></p>
</li>
</ul>
</div>
</dd>
</dl>
</div>
</div>
</div>
</div>
<div class="sect3">
<h4 id="_see_also_235">See Also</h4>
<div class="paragraph">
<p><a href="#VkDevice">VkDevice</a>, <a href="#VkPastPresentationTimingGOOGLE">VkPastPresentationTimingGOOGLE</a>, <a href="#VkSwapchainKHR">VkSwapchainKHR</a></p>
</div>
</div>
<div class="sect3">
<h4 id="_document_notes_235">Document Notes</h4>
<div class="paragraph">
<p>For more information, see the Vulkan Specification at URL</p>
</div>
<div class="paragraph">
<p><a href="https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#vkGetPastPresentationTimingGOOGLE" class="bare">https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#vkGetPastPresentationTimingGOOGLE</a></p>
</div>
<div class="paragraph">
<p>This page is extracted from the Vulkan Specification.
Fixes and changes should be made to the Specification, not directly.</p>
</div>
<div style="page-break-after: always;"></div>
</div>
</div>
<div class="sect2">
<h3 id="_vkgetphysicaldevicecalibrateabletimedomainsext3">vkGetPhysicalDeviceCalibrateableTimeDomainsEXT(3)</h3>
<div class="sect3">
<h4 id="_name_236">Name</h4>
<div class="paragraph">
<p>vkGetPhysicalDeviceCalibrateableTimeDomainsEXT - Query calibrateable time domains</p>
</div>
</div>
<div class="sect3">
<h4 id="_c_specification_236">C Specification</h4>
<div class="paragraph">
<p>To query the set of time domains for which a physical device supports
timestamp calibration, call:</p>
</div>
<div id="vkGetPhysicalDeviceCalibrateableTimeDomainsEXT" class="listingblock">
<div class="content">
<pre class="highlight"><code class="language-c++" data-lang="c++">VkResult vkGetPhysicalDeviceCalibrateableTimeDomainsEXT(
    VkPhysicalDevice                            physicalDevice,
    uint32_t*                                   pTimeDomainCount,
    VkTimeDomainEXT*                            pTimeDomains);</code></pre>
</div>
</div>
</div>
<div class="sect3">
<h4 id="_parameters_236">Parameters</h4>
<div class="ulist">
<ul>
<li>
<p><code>physicalDevice</code> is the physical device from which to query the set
of calibrateable time domains.</p>
</li>
<li>
<p><code>pTimeDomainCount</code> is a pointer to an integer related to the number
of calibrateable time domains available or queried, as described below.</p>
</li>
<li>
<p><code>pTimeDomains</code> is either <code>NULL</code> or a pointer to an array of
<a href="#VkTimeDomainEXT">VkTimeDomainEXT</a> values, indicating the supported calibrateable
time domains.</p>
</li>
</ul>
</div>
</div>
<div class="sect3">
<h4 id="_description_236">Description</h4>
<div class="paragraph">
<p>If <code>pTimeDomains</code> is <code>NULL</code>, then the number of calibrateable time
domains supported for the given <code>physicalDevice</code> is returned in
<code>pTimeDomainCount</code>.
Otherwise, <code>pTimeDomainCount</code> <strong class="purple">must</strong> point to a variable set by the user
to the number of elements in the <code>pTimeDomains</code> array, and on return the
variable is overwritten with the number of values actually written to
<code>pTimeDomains</code>.
If the value of <code>pTimeDomainCount</code> is less than the number of
calibrateable time domains supported, at most <code>pTimeDomainCount</code> values
will be written to <code>pTimeDomains</code>.
If <code>pTimeDomainCount</code> is smaller than the number of calibrateable time
domains supported for the given <code>physicalDevice</code>, <code>VK_INCOMPLETE</code>
will be returned instead of <code>VK_SUCCESS</code> to indicate that not all the
available values were returned.</p>
</div>
<div class="sidebarblock">
<div class="content">
<div class="title">Valid Usage (Implicit)</div>
<div class="ulist">
<ul>
<li>
<p><a id="VUID-vkGetPhysicalDeviceCalibrateableTimeDomainsEXT-physicalDevice-parameter"></a> <code>physicalDevice</code> <strong class="purple">must</strong> be a valid <code>VkPhysicalDevice</code> handle</p>
</li>
<li>
<p><a id="VUID-vkGetPhysicalDeviceCalibrateableTimeDomainsEXT-pTimeDomainCount-parameter"></a> <code>pTimeDomainCount</code> <strong class="purple">must</strong> be a valid pointer to a <code>uint32_t</code> value</p>
</li>
<li>
<p><a id="VUID-vkGetPhysicalDeviceCalibrateableTimeDomainsEXT-pTimeDomains-parameter"></a> If the value referenced by <code>pTimeDomainCount</code> is not <code>0</code>, and <code>pTimeDomains</code> is not <code>NULL</code>, <code>pTimeDomains</code> <strong class="purple">must</strong> be a valid pointer to an array of <code>pTimeDomainCount</code> <a href="#VkTimeDomainEXT">VkTimeDomainEXT</a> values</p>
</li>
</ul>
</div>
</div>
</div>
<div class="sidebarblock">
<div class="content">
<div class="title">Return Codes</div>
<div class="dlist">
<dl>
<dt class="hdlist1"><a href="#fundamentals-successcodes">Success</a></dt>
<dd>
<div class="ulist">
<ul>
<li>
<p><code>VK_SUCCESS</code></p>
</li>
<li>
<p><code>VK_INCOMPLETE</code></p>
</li>
</ul>
</div>
</dd>
<dt class="hdlist1"><a href="#fundamentals-errorcodes">Failure</a></dt>
<dd>
<div class="ulist">
<ul>
<li>
<p><code>VK_ERROR_OUT_OF_HOST_MEMORY</code></p>
</li>
<li>
<p><code>VK_ERROR_OUT_OF_DEVICE_MEMORY</code></p>
</li>
</ul>
</div>
</dd>
</dl>
</div>
</div>
</div>
</div>
<div class="sect3">
<h4 id="_see_also_236">See Also</h4>
<div class="paragraph">
<p><a href="#VkPhysicalDevice">VkPhysicalDevice</a>, <a href="#VkTimeDomainEXT">VkTimeDomainEXT</a></p>
</div>
</div>
<div class="sect3">
<h4 id="_document_notes_236">Document Notes</h4>
<div class="paragraph">
<p>For more information, see the Vulkan Specification at URL</p>
</div>
<div class="paragraph">
<p><a href="https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#vkGetPhysicalDeviceCalibrateableTimeDomainsEXT" class="bare">https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#vkGetPhysicalDeviceCalibrateableTimeDomainsEXT</a></p>
</div>
<div class="paragraph">
<p>This page is extracted from the Vulkan Specification.
Fixes and changes should be made to the Specification, not directly.</p>
</div>
<div style="page-break-after: always;"></div>
</div>
</div>
<div class="sect2">
<h3 id="_vkgetphysicaldevicecooperativematrixpropertiesnv3">vkGetPhysicalDeviceCooperativeMatrixPropertiesNV(3)</h3>
<div class="sect3">
<h4 id="_name_237">Name</h4>
<div class="paragraph">
<p>vkGetPhysicalDeviceCooperativeMatrixPropertiesNV - Returns properties describing what cooperative matrix types are supported</p>
</div>
</div>
<div class="sect3">
<h4 id="_c_specification_237">C Specification</h4>
<div class="paragraph">
<p>To enumerate the supported cooperative matrix types and operations, call:</p>
</div>
<div id="vkGetPhysicalDeviceCooperativeMatrixPropertiesNV" class="listingblock">
<div class="content">
<pre class="highlight"><code class="language-c++" data-lang="c++">VkResult vkGetPhysicalDeviceCooperativeMatrixPropertiesNV(
    VkPhysicalDevice                            physicalDevice,
    uint32_t*                                   pPropertyCount,
    VkCooperativeMatrixPropertiesNV*            pProperties);</code></pre>
</div>
</div>
</div>
<div class="sect3">
<h4 id="_parameters_237">Parameters</h4>
<div class="ulist">
<ul>
<li>
<p><code>physicalDevice</code> is the physical device.</p>
</li>
<li>
<p><code>pPropertyCount</code> is a pointer to an integer related to the number of
cooperative matrix properties available or queried.</p>
</li>
<li>
<p><code>pProperties</code> is either <code>NULL</code> or a pointer to an array of
<a href="#VkCooperativeMatrixPropertiesNV">VkCooperativeMatrixPropertiesNV</a> structures.</p>
</li>
</ul>
</div>
</div>
<div class="sect3">
<h4 id="_description_237">Description</h4>
<div class="paragraph">
<p>If <code>pProperties</code> is <code>NULL</code>, then the number of cooperative matrix
properties available is returned in <code>pPropertyCount</code>.
Otherwise, <code>pPropertyCount</code> <strong class="purple">must</strong> point to a variable set by the user to
the number of elements in the <code>pProperties</code> array, and on return the
variable is overwritten with the number of structures actually written to
<code>pProperties</code>.
If <code>pPropertyCount</code> is less than the number of cooperative matrix
properties available, at most <code>pPropertyCount</code> structures will be
written.
If <code>pPropertyCount</code> is smaller than the number of cooperative matrix
properties available, <code>VK_INCOMPLETE</code> will be returned instead of
<code>VK_SUCCESS</code>, to indicate that not all the available cooperative matrix
properties were returned.</p>
</div>
<div class="sidebarblock">
<div class="content">
<div class="title">Valid Usage (Implicit)</div>
<div class="ulist">
<ul>
<li>
<p><a id="VUID-vkGetPhysicalDeviceCooperativeMatrixPropertiesNV-physicalDevice-parameter"></a> <code>physicalDevice</code> <strong class="purple">must</strong> be a valid <code>VkPhysicalDevice</code> handle</p>
</li>
<li>
<p><a id="VUID-vkGetPhysicalDeviceCooperativeMatrixPropertiesNV-pPropertyCount-parameter"></a> <code>pPropertyCount</code> <strong class="purple">must</strong> be a valid pointer to a <code>uint32_t</code> value</p>
</li>
<li>
<p><a id="VUID-vkGetPhysicalDeviceCooperativeMatrixPropertiesNV-pProperties-parameter"></a> If the value referenced by <code>pPropertyCount</code> is not <code>0</code>, and <code>pProperties</code> is not <code>NULL</code>, <code>pProperties</code> <strong class="purple">must</strong> be a valid pointer to an array of <code>pPropertyCount</code> <code>VkCooperativeMatrixPropertiesNV</code> structures</p>
</li>
</ul>
</div>
</div>
</div>
<div class="sidebarblock">
<div class="content">
<div class="title">Return Codes</div>
<div class="dlist">
<dl>
<dt class="hdlist1"><a href="#fundamentals-successcodes">Success</a></dt>
<dd>
<div class="ulist">
<ul>
<li>
<p><code>VK_SUCCESS</code></p>
</li>
<li>
<p><code>VK_INCOMPLETE</code></p>
</li>
</ul>
</div>
</dd>
<dt class="hdlist1"><a href="#fundamentals-errorcodes">Failure</a></dt>
<dd>
<div class="ulist">
<ul>
<li>
<p><code>VK_ERROR_OUT_OF_HOST_MEMORY</code></p>
</li>
<li>
<p><code>VK_ERROR_OUT_OF_DEVICE_MEMORY</code></p>
</li>
</ul>
</div>
</dd>
</dl>
</div>
</div>
</div>
</div>
<div class="sect3">
<h4 id="_see_also_237">See Also</h4>
<div class="paragraph">
<p><a href="#VkCooperativeMatrixPropertiesNV">VkCooperativeMatrixPropertiesNV</a>, <a href="#VkPhysicalDevice">VkPhysicalDevice</a></p>
</div>
</div>
<div class="sect3">
<h4 id="_document_notes_237">Document Notes</h4>
<div class="paragraph">
<p>For more information, see the Vulkan Specification at URL</p>
</div>
<div class="paragraph">
<p><a href="https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#vkGetPhysicalDeviceCooperativeMatrixPropertiesNV" class="bare">https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#vkGetPhysicalDeviceCooperativeMatrixPropertiesNV</a></p>
</div>
<div class="paragraph">
<p>This page is extracted from the Vulkan Specification.
Fixes and changes should be made to the Specification, not directly.</p>
</div>
<div style="page-break-after: always;"></div>
</div>
</div>
<div class="sect2">
<h3 id="_vkgetphysicaldevicedisplayplaneproperties2khr3">vkGetPhysicalDeviceDisplayPlaneProperties2KHR(3)</h3>
<div class="sect3">
<h4 id="_name_238">Name</h4>
<div class="paragraph">
<p>vkGetPhysicalDeviceDisplayPlaneProperties2KHR - Query information about the available display planes.</p>
</div>
</div>
<div class="sect3">
<h4 id="_c_specification_238">C Specification</h4>
<div class="paragraph">
<p>To query the properties of a device&#8217;s display planes, call:</p>
</div>
<div id="vkGetPhysicalDeviceDisplayPlaneProperties2KHR" class="listingblock">
<div class="content">
<pre class="highlight"><code class="language-c++" data-lang="c++">VkResult vkGetPhysicalDeviceDisplayPlaneProperties2KHR(
    VkPhysicalDevice                            physicalDevice,
    uint32_t*                                   pPropertyCount,
    VkDisplayPlaneProperties2KHR*               pProperties);</code></pre>
</div>
</div>
</div>
<div class="sect3">
<h4 id="_parameters_238">Parameters</h4>
<div class="ulist">
<ul>
<li>
<p><code>physicalDevice</code> is a physical device.</p>
</li>
<li>
<p><code>pPropertyCount</code> is a pointer to an integer related to the number of
display planes available or queried, as described below.</p>
</li>
<li>
<p><code>pProperties</code> is either <code>NULL</code> or a pointer to an array of
<code>VkDisplayPlaneProperties2KHR</code> structures.</p>
</li>
</ul>
</div>
</div>
<div class="sect3">
<h4 id="_description_238">Description</h4>
<div class="paragraph">
<p><code>vkGetPhysicalDeviceDisplayPlaneProperties2KHR</code> behaves similarly to
<a href="#vkGetPhysicalDeviceDisplayPlanePropertiesKHR">vkGetPhysicalDeviceDisplayPlanePropertiesKHR</a>, with the ability to
return extended information via chained output structures.</p>
</div>
<div class="sidebarblock">
<div class="content">
<div class="title">Valid Usage (Implicit)</div>
<div class="ulist">
<ul>
<li>
<p><a id="VUID-vkGetPhysicalDeviceDisplayPlaneProperties2KHR-physicalDevice-parameter"></a> <code>physicalDevice</code> <strong class="purple">must</strong> be a valid <code>VkPhysicalDevice</code> handle</p>
</li>
<li>
<p><a id="VUID-vkGetPhysicalDeviceDisplayPlaneProperties2KHR-pPropertyCount-parameter"></a> <code>pPropertyCount</code> <strong class="purple">must</strong> be a valid pointer to a <code>uint32_t</code> value</p>
</li>
<li>
<p><a id="VUID-vkGetPhysicalDeviceDisplayPlaneProperties2KHR-pProperties-parameter"></a> If the value referenced by <code>pPropertyCount</code> is not <code>0</code>, and <code>pProperties</code> is not <code>NULL</code>, <code>pProperties</code> <strong class="purple">must</strong> be a valid pointer to an array of <code>pPropertyCount</code> <code>VkDisplayPlaneProperties2KHR</code> structures</p>
</li>
</ul>
</div>
</div>
</div>
<div class="sidebarblock">
<div class="content">
<div class="title">Return Codes</div>
<div class="dlist">
<dl>
<dt class="hdlist1"><a href="#fundamentals-successcodes">Success</a></dt>
<dd>
<div class="ulist">
<ul>
<li>
<p><code>VK_SUCCESS</code></p>
</li>
<li>
<p><code>VK_INCOMPLETE</code></p>
</li>
</ul>
</div>
</dd>
<dt class="hdlist1"><a href="#fundamentals-errorcodes">Failure</a></dt>
<dd>
<div class="ulist">
<ul>
<li>
<p><code>VK_ERROR_OUT_OF_HOST_MEMORY</code></p>
</li>
<li>
<p><code>VK_ERROR_OUT_OF_DEVICE_MEMORY</code></p>
</li>
</ul>
</div>
</dd>
</dl>
</div>
</div>
</div>
</div>
<div class="sect3">
<h4 id="_see_also_238">See Also</h4>
<div class="paragraph">
<p><a href="#VkDisplayPlaneProperties2KHR">VkDisplayPlaneProperties2KHR</a>, <a href="#VkPhysicalDevice">VkPhysicalDevice</a></p>
</div>
</div>
<div class="sect3">
<h4 id="_document_notes_238">Document Notes</h4>
<div class="paragraph">
<p>For more information, see the Vulkan Specification at URL</p>
</div>
<div class="paragraph">
<p><a href="https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#vkGetPhysicalDeviceDisplayPlaneProperties2KHR" class="bare">https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#vkGetPhysicalDeviceDisplayPlaneProperties2KHR</a></p>
</div>
<div class="paragraph">
<p>This page is extracted from the Vulkan Specification.
Fixes and changes should be made to the Specification, not directly.</p>
</div>
<div style="page-break-after: always;"></div>
</div>
</div>
<div class="sect2">
<h3 id="_vkgetphysicaldevicedisplayplanepropertieskhr3">vkGetPhysicalDeviceDisplayPlanePropertiesKHR(3)</h3>
<div class="sect3">
<h4 id="_name_239">Name</h4>
<div class="paragraph">
<p>vkGetPhysicalDeviceDisplayPlanePropertiesKHR - Query the plane properties</p>
</div>
</div>
<div class="sect3">
<h4 id="_c_specification_239">C Specification</h4>
<div class="paragraph">
<p>Images are presented to individual planes on a display.
Devices <strong class="purple">must</strong> support at least one plane on each display.
Planes <strong class="purple">can</strong> be stacked and blended to composite multiple images on one
display.
Devices <strong class="purple">may</strong> support only a fixed stacking order and fixed mapping between
planes and displays, or they <strong class="purple">may</strong> allow arbitrary application specified
stacking orders and mappings between planes and displays.
To query the properties of device display planes, call:</p>
</div>
<div id="vkGetPhysicalDeviceDisplayPlanePropertiesKHR" class="listingblock">
<div class="content">
<pre class="highlight"><code class="language-c++" data-lang="c++">VkResult vkGetPhysicalDeviceDisplayPlanePropertiesKHR(
    VkPhysicalDevice                            physicalDevice,
    uint32_t*                                   pPropertyCount,
    VkDisplayPlanePropertiesKHR*                pProperties);</code></pre>
</div>
</div>
</div>
<div class="sect3">
<h4 id="_parameters_239">Parameters</h4>
<div class="ulist">
<ul>
<li>
<p><code>physicalDevice</code> is a physical device.</p>
</li>
<li>
<p><code>pPropertyCount</code> is a pointer to an integer related to the number of
display planes available or queried, as described below.</p>
</li>
<li>
<p><code>pProperties</code> is either <code>NULL</code> or a pointer to an array of
<code>VkDisplayPlanePropertiesKHR</code> structures.</p>
</li>
</ul>
</div>
</div>
<div class="sect3">
<h4 id="_description_239">Description</h4>
<div class="paragraph">
<p>If <code>pProperties</code> is <code>NULL</code>, then the number of display planes available
for <code>physicalDevice</code> is returned in <code>pPropertyCount</code>.
Otherwise, <code>pPropertyCount</code> <strong class="purple">must</strong> point to a variable set by the user to
the number of elements in the <code>pProperties</code> array, and on return the
variable is overwritten with the number of structures actually written to
<code>pProperties</code>.
If the value of <code>pPropertyCount</code> is less than the number of display
planes for <code>physicalDevice</code>, at most <code>pPropertyCount</code> structures
will be written.</p>
</div>
<div class="sidebarblock">
<div class="content">
<div class="title">Valid Usage (Implicit)</div>
<div class="ulist">
<ul>
<li>
<p><a id="VUID-vkGetPhysicalDeviceDisplayPlanePropertiesKHR-physicalDevice-parameter"></a> <code>physicalDevice</code> <strong class="purple">must</strong> be a valid <code>VkPhysicalDevice</code> handle</p>
</li>
<li>
<p><a id="VUID-vkGetPhysicalDeviceDisplayPlanePropertiesKHR-pPropertyCount-parameter"></a> <code>pPropertyCount</code> <strong class="purple">must</strong> be a valid pointer to a <code>uint32_t</code> value</p>
</li>
<li>
<p><a id="VUID-vkGetPhysicalDeviceDisplayPlanePropertiesKHR-pProperties-parameter"></a> If the value referenced by <code>pPropertyCount</code> is not <code>0</code>, and <code>pProperties</code> is not <code>NULL</code>, <code>pProperties</code> <strong class="purple">must</strong> be a valid pointer to an array of <code>pPropertyCount</code> <code>VkDisplayPlanePropertiesKHR</code> structures</p>
</li>
</ul>
</div>
</div>
</div>
<div class="sidebarblock">
<div class="content">
<div class="title">Return Codes</div>
<div class="dlist">
<dl>
<dt class="hdlist1"><a href="#fundamentals-successcodes">Success</a></dt>
<dd>
<div class="ulist">
<ul>
<li>
<p><code>VK_SUCCESS</code></p>
</li>
<li>
<p><code>VK_INCOMPLETE</code></p>
</li>
</ul>
</div>
</dd>
<dt class="hdlist1"><a href="#fundamentals-errorcodes">Failure</a></dt>
<dd>
<div class="ulist">
<ul>
<li>
<p><code>VK_ERROR_OUT_OF_HOST_MEMORY</code></p>
</li>
<li>
<p><code>VK_ERROR_OUT_OF_DEVICE_MEMORY</code></p>
</li>
</ul>
</div>
</dd>
</dl>
</div>
</div>
</div>
</div>
<div class="sect3">
<h4 id="_see_also_239">See Also</h4>
<div class="paragraph">
<p><a href="#VkDisplayPlanePropertiesKHR">VkDisplayPlanePropertiesKHR</a>, <a href="#VkPhysicalDevice">VkPhysicalDevice</a></p>
</div>
</div>
<div class="sect3">
<h4 id="_document_notes_239">Document Notes</h4>
<div class="paragraph">
<p>For more information, see the Vulkan Specification at URL</p>
</div>
<div class="paragraph">
<p><a href="https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#vkGetPhysicalDeviceDisplayPlanePropertiesKHR" class="bare">https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#vkGetPhysicalDeviceDisplayPlanePropertiesKHR</a></p>
</div>
<div class="paragraph">
<p>This page is extracted from the Vulkan Specification.
Fixes and changes should be made to the Specification, not directly.</p>
</div>
<div style="page-break-after: always;"></div>
</div>
</div>
<div class="sect2">
<h3 id="_vkgetphysicaldevicedisplayproperties2khr3">vkGetPhysicalDeviceDisplayProperties2KHR(3)</h3>
<div class="sect3">
<h4 id="_name_240">Name</h4>
<div class="paragraph">
<p>vkGetPhysicalDeviceDisplayProperties2KHR - Query information about the available displays</p>
</div>
</div>
<div class="sect3">
<h4 id="_c_specification_240">C Specification</h4>
<div class="paragraph">
<p>To query information about the available displays, call:</p>
</div>
<div id="vkGetPhysicalDeviceDisplayProperties2KHR" class="listingblock">
<div class="content">
<pre class="highlight"><code class="language-c++" data-lang="c++">VkResult vkGetPhysicalDeviceDisplayProperties2KHR(
    VkPhysicalDevice                            physicalDevice,
    uint32_t*                                   pPropertyCount,
    VkDisplayProperties2KHR*                    pProperties);</code></pre>
</div>
</div>
</div>
<div class="sect3">
<h4 id="_parameters_240">Parameters</h4>
<div class="ulist">
<ul>
<li>
<p><code>physicalDevice</code> is a physical device.</p>
</li>
<li>
<p><code>pPropertyCount</code> is a pointer to an integer related to the number of
display devices available or queried, as described below.</p>
</li>
<li>
<p><code>pProperties</code> is either <code>NULL</code> or a pointer to an array of
<code>VkDisplayProperties2KHR</code> structures.</p>
</li>
</ul>
</div>
</div>
<div class="sect3">
<h4 id="_description_240">Description</h4>
<div class="paragraph">
<p><code>vkGetPhysicalDeviceDisplayProperties2KHR</code> behaves similarly to
<a href="#vkGetPhysicalDeviceDisplayPropertiesKHR">vkGetPhysicalDeviceDisplayPropertiesKHR</a>, with the ability to return
extended information via chained output structures.</p>
</div>
<div class="sidebarblock">
<div class="content">
<div class="title">Valid Usage (Implicit)</div>
<div class="ulist">
<ul>
<li>
<p><a id="VUID-vkGetPhysicalDeviceDisplayProperties2KHR-physicalDevice-parameter"></a> <code>physicalDevice</code> <strong class="purple">must</strong> be a valid <code>VkPhysicalDevice</code> handle</p>
</li>
<li>
<p><a id="VUID-vkGetPhysicalDeviceDisplayProperties2KHR-pPropertyCount-parameter"></a> <code>pPropertyCount</code> <strong class="purple">must</strong> be a valid pointer to a <code>uint32_t</code> value</p>
</li>
<li>
<p><a id="VUID-vkGetPhysicalDeviceDisplayProperties2KHR-pProperties-parameter"></a> If the value referenced by <code>pPropertyCount</code> is not <code>0</code>, and <code>pProperties</code> is not <code>NULL</code>, <code>pProperties</code> <strong class="purple">must</strong> be a valid pointer to an array of <code>pPropertyCount</code> <code>VkDisplayProperties2KHR</code> structures</p>
</li>
</ul>
</div>
</div>
</div>
<div class="sidebarblock">
<div class="content">
<div class="title">Return Codes</div>
<div class="dlist">
<dl>
<dt class="hdlist1"><a href="#fundamentals-successcodes">Success</a></dt>
<dd>
<div class="ulist">
<ul>
<li>
<p><code>VK_SUCCESS</code></p>
</li>
<li>
<p><code>VK_INCOMPLETE</code></p>
</li>
</ul>
</div>
</dd>
<dt class="hdlist1"><a href="#fundamentals-errorcodes">Failure</a></dt>
<dd>
<div class="ulist">
<ul>
<li>
<p><code>VK_ERROR_OUT_OF_HOST_MEMORY</code></p>
</li>
<li>
<p><code>VK_ERROR_OUT_OF_DEVICE_MEMORY</code></p>
</li>
</ul>
</div>
</dd>
</dl>
</div>
</div>
</div>
</div>
<div class="sect3">
<h4 id="_see_also_240">See Also</h4>
<div class="paragraph">
<p><a href="#VkDisplayProperties2KHR">VkDisplayProperties2KHR</a>, <a href="#VkPhysicalDevice">VkPhysicalDevice</a></p>
</div>
</div>
<div class="sect3">
<h4 id="_document_notes_240">Document Notes</h4>
<div class="paragraph">
<p>For more information, see the Vulkan Specification at URL</p>
</div>
<div class="paragraph">
<p><a href="https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#vkGetPhysicalDeviceDisplayProperties2KHR" class="bare">https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#vkGetPhysicalDeviceDisplayProperties2KHR</a></p>
</div>
<div class="paragraph">
<p>This page is extracted from the Vulkan Specification.
Fixes and changes should be made to the Specification, not directly.</p>
</div>
<div style="page-break-after: always;"></div>
</div>
</div>
<div class="sect2">
<h3 id="_vkgetphysicaldevicedisplaypropertieskhr3">vkGetPhysicalDeviceDisplayPropertiesKHR(3)</h3>
<div class="sect3">
<h4 id="_name_241">Name</h4>
<div class="paragraph">
<p>vkGetPhysicalDeviceDisplayPropertiesKHR - Query information about the available displays</p>
</div>
</div>
<div class="sect3">
<h4 id="_c_specification_241">C Specification</h4>
<div class="paragraph">
<p>Various functions are provided for enumerating the available display devices
present on a Vulkan physical device.
To query information about the available displays, call:</p>
</div>
<div id="vkGetPhysicalDeviceDisplayPropertiesKHR" class="listingblock">
<div class="content">
<pre class="highlight"><code class="language-c++" data-lang="c++">VkResult vkGetPhysicalDeviceDisplayPropertiesKHR(
    VkPhysicalDevice                            physicalDevice,
    uint32_t*                                   pPropertyCount,
    VkDisplayPropertiesKHR*                     pProperties);</code></pre>
</div>
</div>
</div>
<div class="sect3">
<h4 id="_parameters_241">Parameters</h4>
<div class="ulist">
<ul>
<li>
<p><code>physicalDevice</code> is a physical device.</p>
</li>
<li>
<p><code>pPropertyCount</code> is a pointer to an integer related to the number of
display devices available or queried, as described below.</p>
</li>
<li>
<p><code>pProperties</code> is either <code>NULL</code> or a pointer to an array of
<code>VkDisplayPropertiesKHR</code> structures.</p>
</li>
</ul>
</div>
</div>
<div class="sect3">
<h4 id="_description_241">Description</h4>
<div class="paragraph">
<p>If <code>pProperties</code> is <code>NULL</code>, then the number of display devices available
for <code>physicalDevice</code> is returned in <code>pPropertyCount</code>.
Otherwise, <code>pPropertyCount</code> <strong class="purple">must</strong> point to a variable set by the user to
the number of elements in the <code>pProperties</code> array, and on return the
variable is overwritten with the number of structures actually written to
<code>pProperties</code>.
If the value of <code>pPropertyCount</code> is less than the number of display
devices for <code>physicalDevice</code>, at most <code>pPropertyCount</code> structures
will be written.
If <code>pPropertyCount</code> is smaller than the number of display devices
available for <code>physicalDevice</code>, <code>VK_INCOMPLETE</code> will be returned
instead of <code>VK_SUCCESS</code> to indicate that not all the available values
were returned.</p>
</div>
<div class="sidebarblock">
<div class="content">
<div class="title">Valid Usage (Implicit)</div>
<div class="ulist">
<ul>
<li>
<p><a id="VUID-vkGetPhysicalDeviceDisplayPropertiesKHR-physicalDevice-parameter"></a> <code>physicalDevice</code> <strong class="purple">must</strong> be a valid <code>VkPhysicalDevice</code> handle</p>
</li>
<li>
<p><a id="VUID-vkGetPhysicalDeviceDisplayPropertiesKHR-pPropertyCount-parameter"></a> <code>pPropertyCount</code> <strong class="purple">must</strong> be a valid pointer to a <code>uint32_t</code> value</p>
</li>
<li>
<p><a id="VUID-vkGetPhysicalDeviceDisplayPropertiesKHR-pProperties-parameter"></a> If the value referenced by <code>pPropertyCount</code> is not <code>0</code>, and <code>pProperties</code> is not <code>NULL</code>, <code>pProperties</code> <strong class="purple">must</strong> be a valid pointer to an array of <code>pPropertyCount</code> <code>VkDisplayPropertiesKHR</code> structures</p>
</li>
</ul>
</div>
</div>
</div>
<div class="sidebarblock">
<div class="content">
<div class="title">Return Codes</div>
<div class="dlist">
<dl>
<dt class="hdlist1"><a href="#fundamentals-successcodes">Success</a></dt>
<dd>
<div class="ulist">
<ul>
<li>
<p><code>VK_SUCCESS</code></p>
</li>
<li>
<p><code>VK_INCOMPLETE</code></p>
</li>
</ul>
</div>
</dd>
<dt class="hdlist1"><a href="#fundamentals-errorcodes">Failure</a></dt>
<dd>
<div class="ulist">
<ul>
<li>
<p><code>VK_ERROR_OUT_OF_HOST_MEMORY</code></p>
</li>
<li>
<p><code>VK_ERROR_OUT_OF_DEVICE_MEMORY</code></p>
</li>
</ul>
</div>
</dd>
</dl>
</div>
</div>
</div>
</div>
<div class="sect3">
<h4 id="_see_also_241">See Also</h4>
<div class="paragraph">
<p><a href="#VkDisplayPropertiesKHR">VkDisplayPropertiesKHR</a>, <a href="#VkPhysicalDevice">VkPhysicalDevice</a></p>
</div>
</div>
<div class="sect3">
<h4 id="_document_notes_241">Document Notes</h4>
<div class="paragraph">
<p>For more information, see the Vulkan Specification at URL</p>
</div>
<div class="paragraph">
<p><a href="https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#vkGetPhysicalDeviceDisplayPropertiesKHR" class="bare">https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#vkGetPhysicalDeviceDisplayPropertiesKHR</a></p>
</div>
<div class="paragraph">
<p>This page is extracted from the Vulkan Specification.
Fixes and changes should be made to the Specification, not directly.</p>
</div>
<div style="page-break-after: always;"></div>
</div>
</div>
<div class="sect2">
<h3 id="_vkgetphysicaldeviceexternalbufferproperties3">vkGetPhysicalDeviceExternalBufferProperties(3)</h3>
<div class="sect3">
<h4 id="_name_242">Name</h4>
<div class="paragraph">
<p>vkGetPhysicalDeviceExternalBufferProperties - Query external handle types supported by buffers</p>
</div>
</div>
<div class="sect3">
<h4 id="_c_specification_242">C Specification</h4>
<div class="paragraph">
<p>To query the external handle types supported by buffers, call:</p>
</div>
<div id="vkGetPhysicalDeviceExternalBufferProperties" class="listingblock">
<div class="content">
<pre class="highlight"><code class="language-c++" data-lang="c++">void vkGetPhysicalDeviceExternalBufferProperties(
    VkPhysicalDevice                            physicalDevice,
    const VkPhysicalDeviceExternalBufferInfo*   pExternalBufferInfo,
    VkExternalBufferProperties*                 pExternalBufferProperties);</code></pre>
</div>
</div>
<div class="paragraph">
<p>or the equivalent command</p>
</div>
<div id="vkGetPhysicalDeviceExternalBufferPropertiesKHR" class="listingblock">
<div class="content">
<pre class="highlight"><code class="language-c++" data-lang="c++">void vkGetPhysicalDeviceExternalBufferPropertiesKHR(
    VkPhysicalDevice                            physicalDevice,
    const VkPhysicalDeviceExternalBufferInfo*   pExternalBufferInfo,
    VkExternalBufferProperties*                 pExternalBufferProperties);</code></pre>
</div>
</div>
</div>
<div class="sect3">
<h4 id="_parameters_242">Parameters</h4>
<div class="ulist">
<ul>
<li>
<p><code>physicalDevice</code> is the physical device from which to query the
buffer capabilities.</p>
</li>
<li>
<p><code>pExternalBufferInfo</code> points to an instance of the
<a href="#VkPhysicalDeviceExternalBufferInfo">VkPhysicalDeviceExternalBufferInfo</a> structure, describing the
parameters that would be consumed by <a href="#vkCreateBuffer">vkCreateBuffer</a>.</p>
</li>
<li>
<p><code>pExternalBufferProperties</code> points to an instance of the
<a href="#VkExternalBufferProperties">VkExternalBufferProperties</a> structure in which capabilities are
returned.</p>
</li>
</ul>
</div>
</div>
<div class="sect3">
<h4 id="_description_242">Description</h4>
<div class="sidebarblock">
<div class="content">
<div class="title">Valid Usage (Implicit)</div>
<div class="ulist">
<ul>
<li>
<p><a id="VUID-vkGetPhysicalDeviceExternalBufferProperties-physicalDevice-parameter"></a> <code>physicalDevice</code> <strong class="purple">must</strong> be a valid <code>VkPhysicalDevice</code> handle</p>
</li>
<li>
<p><a id="VUID-vkGetPhysicalDeviceExternalBufferProperties-pExternalBufferInfo-parameter"></a> <code>pExternalBufferInfo</code> <strong class="purple">must</strong> be a valid pointer to a valid <code>VkPhysicalDeviceExternalBufferInfo</code> structure</p>
</li>
<li>
<p><a id="VUID-vkGetPhysicalDeviceExternalBufferProperties-pExternalBufferProperties-parameter"></a> <code>pExternalBufferProperties</code> <strong class="purple">must</strong> be a valid pointer to a <code>VkExternalBufferProperties</code> structure</p>
</li>
</ul>
</div>
</div>
</div>
</div>
<div class="sect3">
<h4 id="_see_also_242">See Also</h4>
<div class="paragraph">
<p><a href="#VkExternalBufferProperties">VkExternalBufferProperties</a>, <a href="#VkPhysicalDevice">VkPhysicalDevice</a>, <a href="#VkPhysicalDeviceExternalBufferInfo">VkPhysicalDeviceExternalBufferInfo</a></p>
</div>
</div>
<div class="sect3">
<h4 id="_document_notes_242">Document Notes</h4>
<div class="paragraph">
<p>For more information, see the Vulkan Specification at URL</p>
</div>
<div class="paragraph">
<p><a href="https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#vkGetPhysicalDeviceExternalBufferProperties" class="bare">https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#vkGetPhysicalDeviceExternalBufferProperties</a></p>
</div>
<div class="paragraph">
<p>This page is extracted from the Vulkan Specification.
Fixes and changes should be made to the Specification, not directly.</p>
</div>
<div style="page-break-after: always;"></div>
</div>
</div>
<div class="sect2">
<h3 id="_vkgetphysicaldeviceexternalfenceproperties3">vkGetPhysicalDeviceExternalFenceProperties(3)</h3>
<div class="sect3">
<h4 id="_name_243">Name</h4>
<div class="paragraph">
<p>vkGetPhysicalDeviceExternalFenceProperties - Function for querying external fence handle capabilities.</p>
</div>
</div>
<div class="sect3">
<h4 id="_c_specification_243">C Specification</h4>
<div class="paragraph">
<p>Fences <strong class="purple">may</strong> support import and export of their
<a href="vkspec.html#synchronization-fences-payloads">payload</a> to external handles.
To query the external handle types supported by fences, call:</p>
</div>
<div id="vkGetPhysicalDeviceExternalFenceProperties" class="listingblock">
<div class="content">
<pre class="highlight"><code class="language-c++" data-lang="c++">void vkGetPhysicalDeviceExternalFenceProperties(
    VkPhysicalDevice                            physicalDevice,
    const VkPhysicalDeviceExternalFenceInfo*    pExternalFenceInfo,
    VkExternalFenceProperties*                  pExternalFenceProperties);</code></pre>
</div>
</div>
<div class="paragraph">
<p>or the equivalent command</p>
</div>
<div id="vkGetPhysicalDeviceExternalFencePropertiesKHR" class="listingblock">
<div class="content">
<pre class="highlight"><code class="language-c++" data-lang="c++">void vkGetPhysicalDeviceExternalFencePropertiesKHR(
    VkPhysicalDevice                            physicalDevice,
    const VkPhysicalDeviceExternalFenceInfo*    pExternalFenceInfo,
    VkExternalFenceProperties*                  pExternalFenceProperties);</code></pre>
</div>
</div>
</div>
<div class="sect3">
<h4 id="_parameters_243">Parameters</h4>
<div class="ulist">
<ul>
<li>
<p><code>physicalDevice</code> is the physical device from which to query the
fence capabilities.</p>
</li>
<li>
<p><code>pExternalFenceInfo</code> points to an instance of the
<a href="#VkPhysicalDeviceExternalFenceInfo">VkPhysicalDeviceExternalFenceInfo</a> structure, describing the
parameters that would be consumed by <a href="#vkCreateFence">vkCreateFence</a>.</p>
</li>
<li>
<p><code>pExternalFenceProperties</code> points to an instance of the
<a href="#VkExternalFenceProperties">VkExternalFenceProperties</a> structure in which capabilities are
returned.</p>
</li>
</ul>
</div>
</div>
<div class="sect3">
<h4 id="_description_243">Description</h4>
<div class="sidebarblock">
<div class="content">
<div class="title">Valid Usage (Implicit)</div>
<div class="ulist">
<ul>
<li>
<p><a id="VUID-vkGetPhysicalDeviceExternalFenceProperties-physicalDevice-parameter"></a> <code>physicalDevice</code> <strong class="purple">must</strong> be a valid <code>VkPhysicalDevice</code> handle</p>
</li>
<li>
<p><a id="VUID-vkGetPhysicalDeviceExternalFenceProperties-pExternalFenceInfo-parameter"></a> <code>pExternalFenceInfo</code> <strong class="purple">must</strong> be a valid pointer to a valid <code>VkPhysicalDeviceExternalFenceInfo</code> structure</p>
</li>
<li>
<p><a id="VUID-vkGetPhysicalDeviceExternalFenceProperties-pExternalFenceProperties-parameter"></a> <code>pExternalFenceProperties</code> <strong class="purple">must</strong> be a valid pointer to a <code>VkExternalFenceProperties</code> structure</p>
</li>
</ul>
</div>
</div>
</div>
</div>
<div class="sect3">
<h4 id="_see_also_243">See Also</h4>
<div class="paragraph">
<p><a href="#VkExternalFenceProperties">VkExternalFenceProperties</a>, <a href="#VkPhysicalDevice">VkPhysicalDevice</a>, <a href="#VkPhysicalDeviceExternalFenceInfo">VkPhysicalDeviceExternalFenceInfo</a></p>
</div>
</div>
<div class="sect3">
<h4 id="_document_notes_243">Document Notes</h4>
<div class="paragraph">
<p>For more information, see the Vulkan Specification at URL</p>
</div>
<div class="paragraph">
<p><a href="https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#vkGetPhysicalDeviceExternalFenceProperties" class="bare">https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#vkGetPhysicalDeviceExternalFenceProperties</a></p>
</div>
<div class="paragraph">
<p>This page is extracted from the Vulkan Specification.
Fixes and changes should be made to the Specification, not directly.</p>
</div>
<div style="page-break-after: always;"></div>
</div>
</div>
<div class="sect2">
<h3 id="_vkgetphysicaldeviceexternalimageformatpropertiesnv3">vkGetPhysicalDeviceExternalImageFormatPropertiesNV(3)</h3>
<div class="sect3">
<h4 id="_name_244">Name</h4>
<div class="paragraph">
<p>vkGetPhysicalDeviceExternalImageFormatPropertiesNV - determine image capabilities compatible with external memory handle types</p>
</div>
</div>
<div class="sect3">
<h4 id="_c_specification_244">C Specification</h4>
<div class="paragraph">
<p>To determine the image capabilities compatible with an external memory
handle type, call:</p>
</div>
<div id="vkGetPhysicalDeviceExternalImageFormatPropertiesNV" class="listingblock">
<div class="content">
<pre class="highlight"><code class="language-c++" data-lang="c++">VkResult vkGetPhysicalDeviceExternalImageFormatPropertiesNV(
    VkPhysicalDevice                            physicalDevice,
    VkFormat                                    format,
    VkImageType                                 type,
    VkImageTiling                               tiling,
    VkImageUsageFlags                           usage,
    VkImageCreateFlags                          flags,
    VkExternalMemoryHandleTypeFlagsNV           externalHandleType,
    VkExternalImageFormatPropertiesNV*          pExternalImageFormatProperties);</code></pre>
</div>
</div>
</div>
<div class="sect3">
<h4 id="_parameters_244">Parameters</h4>
<div class="ulist">
<ul>
<li>
<p><code>physicalDevice</code> is the physical device from which to query the
image capabilities</p>
</li>
<li>
<p><code>format</code> is the image format, corresponding to
<a href="#VkImageCreateInfo">VkImageCreateInfo</a>::<code>format</code>.</p>
</li>
<li>
<p><code>type</code> is the image type, corresponding to
<a href="#VkImageCreateInfo">VkImageCreateInfo</a>::<code>imageType</code>.</p>
</li>
<li>
<p><code>tiling</code> is the image tiling, corresponding to
<a href="#VkImageCreateInfo">VkImageCreateInfo</a>::<code>tiling</code>.</p>
</li>
<li>
<p><code>usage</code> is the intended usage of the image, corresponding to
<a href="#VkImageCreateInfo">VkImageCreateInfo</a>::<code>usage</code>.</p>
</li>
<li>
<p><code>flags</code> is a bitmask describing additional parameters of the image,
corresponding to <a href="#VkImageCreateInfo">VkImageCreateInfo</a>::<code>flags</code>.</p>
</li>
<li>
<p><code>externalHandleType</code> is either one of the bits from
<a href="#VkExternalMemoryHandleTypeFlagBitsNV">VkExternalMemoryHandleTypeFlagBitsNV</a>, or 0.</p>
</li>
<li>
<p><code>pExternalImageFormatProperties</code> points to an instance of the
<a href="#VkExternalImageFormatPropertiesNV">VkExternalImageFormatPropertiesNV</a> structure in which capabilities
are returned.</p>
</li>
</ul>
</div>
</div>
<div class="sect3">
<h4 id="_description_244">Description</h4>
<div class="paragraph">
<p>If <code>externalHandleType</code> is 0,
<code>pExternalImageFormatProperties</code>::imageFormatProperties will return the
same values as a call to <a href="#vkGetPhysicalDeviceImageFormatProperties">vkGetPhysicalDeviceImageFormatProperties</a>, and
the other members of <code>pExternalImageFormatProperties</code> will all be 0.
Otherwise, they are filled in as described for
<a href="#VkExternalImageFormatPropertiesNV">VkExternalImageFormatPropertiesNV</a>.</p>
</div>
<div class="sidebarblock">
<div class="content">
<div class="title">Valid Usage (Implicit)</div>
<div class="ulist">
<ul>
<li>
<p><a id="VUID-vkGetPhysicalDeviceExternalImageFormatPropertiesNV-physicalDevice-parameter"></a> <code>physicalDevice</code> <strong class="purple">must</strong> be a valid <code>VkPhysicalDevice</code> handle</p>
</li>
<li>
<p><a id="VUID-vkGetPhysicalDeviceExternalImageFormatPropertiesNV-format-parameter"></a> <code>format</code> <strong class="purple">must</strong> be a valid <a href="#VkFormat">VkFormat</a> value</p>
</li>
<li>
<p><a id="VUID-vkGetPhysicalDeviceExternalImageFormatPropertiesNV-type-parameter"></a> <code>type</code> <strong class="purple">must</strong> be a valid <a href="#VkImageType">VkImageType</a> value</p>
</li>
<li>
<p><a id="VUID-vkGetPhysicalDeviceExternalImageFormatPropertiesNV-tiling-parameter"></a> <code>tiling</code> <strong class="purple">must</strong> be a valid <a href="#VkImageTiling">VkImageTiling</a> value</p>
</li>
<li>
<p><a id="VUID-vkGetPhysicalDeviceExternalImageFormatPropertiesNV-usage-parameter"></a> <code>usage</code> <strong class="purple">must</strong> be a valid combination of <a href="#VkImageUsageFlagBits">VkImageUsageFlagBits</a> values</p>
</li>
<li>
<p><a id="VUID-vkGetPhysicalDeviceExternalImageFormatPropertiesNV-usage-requiredbitmask"></a> <code>usage</code> <strong class="purple">must</strong> not be <code>0</code></p>
</li>
<li>
<p><a id="VUID-vkGetPhysicalDeviceExternalImageFormatPropertiesNV-flags-parameter"></a> <code>flags</code> <strong class="purple">must</strong> be a valid combination of <a href="#VkImageCreateFlagBits">VkImageCreateFlagBits</a> values</p>
</li>
<li>
<p><a id="VUID-vkGetPhysicalDeviceExternalImageFormatPropertiesNV-externalHandleType-parameter"></a> <code>externalHandleType</code> <strong class="purple">must</strong> be a valid combination of <a href="#VkExternalMemoryHandleTypeFlagBitsNV">VkExternalMemoryHandleTypeFlagBitsNV</a> values</p>
</li>
<li>
<p><a id="VUID-vkGetPhysicalDeviceExternalImageFormatPropertiesNV-pExternalImageFormatProperties-parameter"></a> <code>pExternalImageFormatProperties</code> <strong class="purple">must</strong> be a valid pointer to a <code>VkExternalImageFormatPropertiesNV</code> structure</p>
</li>
</ul>
</div>
</div>
</div>
<div class="sidebarblock">
<div class="content">
<div class="title">Return Codes</div>
<div class="dlist">
<dl>
<dt class="hdlist1"><a href="#fundamentals-successcodes">Success</a></dt>
<dd>
<div class="ulist">
<ul>
<li>
<p><code>VK_SUCCESS</code></p>
</li>
</ul>
</div>
</dd>
<dt class="hdlist1"><a href="#fundamentals-errorcodes">Failure</a></dt>
<dd>
<div class="ulist">
<ul>
<li>
<p><code>VK_ERROR_OUT_OF_HOST_MEMORY</code></p>
</li>
<li>
<p><code>VK_ERROR_OUT_OF_DEVICE_MEMORY</code></p>
</li>
<li>
<p><code>VK_ERROR_FORMAT_NOT_SUPPORTED</code></p>
</li>
</ul>
</div>
</dd>
</dl>
</div>
</div>
</div>
</div>
<div class="sect3">
<h4 id="_see_also_244">See Also</h4>
<div class="paragraph">
<p><a href="#VkExternalImageFormatPropertiesNV">VkExternalImageFormatPropertiesNV</a>, <a href="#VkExternalMemoryHandleTypeFlagsNV">VkExternalMemoryHandleTypeFlagsNV</a>, <a href="#VkFormat">VkFormat</a>, <a href="#VkImageCreateFlags">VkImageCreateFlags</a>, <a href="#VkImageTiling">VkImageTiling</a>, <a href="#VkImageType">VkImageType</a>, <a href="#VkImageUsageFlags">VkImageUsageFlags</a>, <a href="#VkPhysicalDevice">VkPhysicalDevice</a></p>
</div>
</div>
<div class="sect3">
<h4 id="_document_notes_244">Document Notes</h4>
<div class="paragraph">
<p>For more information, see the Vulkan Specification at URL</p>
</div>
<div class="paragraph">
<p><a href="https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#vkGetPhysicalDeviceExternalImageFormatPropertiesNV" class="bare">https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#vkGetPhysicalDeviceExternalImageFormatPropertiesNV</a></p>
</div>
<div class="paragraph">
<p>This page is extracted from the Vulkan Specification.
Fixes and changes should be made to the Specification, not directly.</p>
</div>
<div style="page-break-after: always;"></div>
</div>
</div>
<div class="sect2">
<h3 id="_vkgetphysicaldeviceexternalsemaphoreproperties3">vkGetPhysicalDeviceExternalSemaphoreProperties(3)</h3>
<div class="sect3">
<h4 id="_name_245">Name</h4>
<div class="paragraph">
<p>vkGetPhysicalDeviceExternalSemaphoreProperties - Function for querying external semaphore handle capabilities.</p>
</div>
</div>
<div class="sect3">
<h4 id="_c_specification_245">C Specification</h4>
<div class="paragraph">
<p>Semaphores <strong class="purple">may</strong> support import and export of their
<a href="vkspec.html#synchronization-semaphores-payloads">payload</a> to external handles.
To query the external handle types supported by semaphores, call:</p>
</div>
<div id="vkGetPhysicalDeviceExternalSemaphoreProperties" class="listingblock">
<div class="content">
<pre class="highlight"><code class="language-c++" data-lang="c++">void vkGetPhysicalDeviceExternalSemaphoreProperties(
    VkPhysicalDevice                            physicalDevice,
    const VkPhysicalDeviceExternalSemaphoreInfo* pExternalSemaphoreInfo,
    VkExternalSemaphoreProperties*              pExternalSemaphoreProperties);</code></pre>
</div>
</div>
<div class="paragraph">
<p>or the equivalent command</p>
</div>
<div id="vkGetPhysicalDeviceExternalSemaphorePropertiesKHR" class="listingblock">
<div class="content">
<pre class="highlight"><code class="language-c++" data-lang="c++">void vkGetPhysicalDeviceExternalSemaphorePropertiesKHR(
    VkPhysicalDevice                            physicalDevice,
    const VkPhysicalDeviceExternalSemaphoreInfo* pExternalSemaphoreInfo,
    VkExternalSemaphoreProperties*              pExternalSemaphoreProperties);</code></pre>
</div>
</div>
</div>
<div class="sect3">
<h4 id="_parameters_245">Parameters</h4>
<div class="ulist">
<ul>
<li>
<p><code>physicalDevice</code> is the physical device from which to query the
semaphore capabilities.</p>
</li>
<li>
<p><code>pExternalSemaphoreInfo</code> points to an instance of the
<a href="#VkPhysicalDeviceExternalSemaphoreInfo">VkPhysicalDeviceExternalSemaphoreInfo</a> structure, describing the
parameters that would be consumed by <a href="#vkCreateSemaphore">vkCreateSemaphore</a>.</p>
</li>
<li>
<p><code>pExternalSemaphoreProperties</code> points to an instance of the
<a href="#VkExternalSemaphoreProperties">VkExternalSemaphoreProperties</a> structure in which capabilities are
returned.</p>
</li>
</ul>
</div>
</div>
<div class="sect3">
<h4 id="_description_245">Description</h4>
<div class="sidebarblock">
<div class="content">
<div class="title">Valid Usage (Implicit)</div>
<div class="ulist">
<ul>
<li>
<p><a id="VUID-vkGetPhysicalDeviceExternalSemaphoreProperties-physicalDevice-parameter"></a> <code>physicalDevice</code> <strong class="purple">must</strong> be a valid <code>VkPhysicalDevice</code> handle</p>
</li>
<li>
<p><a id="VUID-vkGetPhysicalDeviceExternalSemaphoreProperties-pExternalSemaphoreInfo-parameter"></a> <code>pExternalSemaphoreInfo</code> <strong class="purple">must</strong> be a valid pointer to a valid <code>VkPhysicalDeviceExternalSemaphoreInfo</code> structure</p>
</li>
<li>
<p><a id="VUID-vkGetPhysicalDeviceExternalSemaphoreProperties-pExternalSemaphoreProperties-parameter"></a> <code>pExternalSemaphoreProperties</code> <strong class="purple">must</strong> be a valid pointer to a <code>VkExternalSemaphoreProperties</code> structure</p>
</li>
</ul>
</div>
</div>
</div>
</div>
<div class="sect3">
<h4 id="_see_also_245">See Also</h4>
<div class="paragraph">
<p><a href="#VkExternalSemaphoreProperties">VkExternalSemaphoreProperties</a>, <a href="#VkPhysicalDevice">VkPhysicalDevice</a>, <a href="#VkPhysicalDeviceExternalSemaphoreInfo">VkPhysicalDeviceExternalSemaphoreInfo</a></p>
</div>
</div>
<div class="sect3">
<h4 id="_document_notes_245">Document Notes</h4>
<div class="paragraph">
<p>For more information, see the Vulkan Specification at URL</p>
</div>
<div class="paragraph">
<p><a href="https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#vkGetPhysicalDeviceExternalSemaphoreProperties" class="bare">https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#vkGetPhysicalDeviceExternalSemaphoreProperties</a></p>
</div>
<div class="paragraph">
<p>This page is extracted from the Vulkan Specification.
Fixes and changes should be made to the Specification, not directly.</p>
</div>
<div style="page-break-after: always;"></div>
</div>
</div>
<div class="sect2">
<h3 id="_vkgetphysicaldevicefeatures3">vkGetPhysicalDeviceFeatures(3)</h3>
<div class="sect3">
<h4 id="_name_246">Name</h4>
<div class="paragraph">
<p>vkGetPhysicalDeviceFeatures - Reports capabilities of a physical device</p>
</div>
</div>
<div class="sect3">
<h4 id="_c_specification_246">C Specification</h4>
<div class="paragraph">
<p>To query supported features, call:</p>
</div>
<div id="vkGetPhysicalDeviceFeatures" class="listingblock">
<div class="content">
<pre class="highlight"><code class="language-c++" data-lang="c++">void vkGetPhysicalDeviceFeatures(
    VkPhysicalDevice                            physicalDevice,
    VkPhysicalDeviceFeatures*                   pFeatures);</code></pre>
</div>
</div>
</div>
<div class="sect3">
<h4 id="_parameters_246">Parameters</h4>
<div class="ulist">
<ul>
<li>
<p><code>physicalDevice</code> is the physical device from which to query the
supported features.</p>
</li>
<li>
<p><code>pFeatures</code> is a pointer to a <a href="#VkPhysicalDeviceFeatures">VkPhysicalDeviceFeatures</a>
structure in which the physical device features are returned.
For each feature, a value of <code>VK_TRUE</code> specifies that the feature is
supported on this physical device, and <code>VK_FALSE</code> specifies that the
feature is not supported.</p>
</li>
</ul>
</div>
</div>
<div class="sect3">
<h4 id="_description_246">Description</h4>
<div class="sidebarblock">
<div class="content">
<div class="title">Valid Usage (Implicit)</div>
<div class="ulist">
<ul>
<li>
<p><a id="VUID-vkGetPhysicalDeviceFeatures-physicalDevice-parameter"></a> <code>physicalDevice</code> <strong class="purple">must</strong> be a valid <code>VkPhysicalDevice</code> handle</p>
</li>
<li>
<p><a id="VUID-vkGetPhysicalDeviceFeatures-pFeatures-parameter"></a> <code>pFeatures</code> <strong class="purple">must</strong> be a valid pointer to a <code>VkPhysicalDeviceFeatures</code> structure</p>
</li>
</ul>
</div>
</div>
</div>
</div>
<div class="sect3">
<h4 id="_see_also_246">See Also</h4>
<div class="paragraph">
<p><a href="#VkPhysicalDevice">VkPhysicalDevice</a>, <a href="#VkPhysicalDeviceFeatures">VkPhysicalDeviceFeatures</a></p>
</div>
</div>
<div class="sect3">
<h4 id="_document_notes_246">Document Notes</h4>
<div class="paragraph">
<p>For more information, see the Vulkan Specification at URL</p>
</div>
<div class="paragraph">
<p><a href="https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#vkGetPhysicalDeviceFeatures" class="bare">https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#vkGetPhysicalDeviceFeatures</a></p>
</div>
<div class="paragraph">
<p>This page is extracted from the Vulkan Specification.
Fixes and changes should be made to the Specification, not directly.</p>
</div>
<div style="page-break-after: always;"></div>
</div>
</div>
<div class="sect2">
<h3 id="_vkgetphysicaldevicefeatures23">vkGetPhysicalDeviceFeatures2(3)</h3>
<div class="sect3">
<h4 id="_name_247">Name</h4>
<div class="paragraph">
<p>vkGetPhysicalDeviceFeatures2 - Reports capabilities of a physical device</p>
</div>
</div>
<div class="sect3">
<h4 id="_c_specification_247">C Specification</h4>
<div class="paragraph">
<p>To query supported features defined by the core or extensions, call:</p>
</div>
<div id="vkGetPhysicalDeviceFeatures2" class="listingblock">
<div class="content">
<pre class="highlight"><code class="language-c++" data-lang="c++">void vkGetPhysicalDeviceFeatures2(
    VkPhysicalDevice                            physicalDevice,
    VkPhysicalDeviceFeatures2*                  pFeatures);</code></pre>
</div>
</div>
<div class="paragraph">
<p>or the equivalent command</p>
</div>
<div id="vkGetPhysicalDeviceFeatures2KHR" class="listingblock">
<div class="content">
<pre class="highlight"><code class="language-c++" data-lang="c++">void vkGetPhysicalDeviceFeatures2KHR(
    VkPhysicalDevice                            physicalDevice,
    VkPhysicalDeviceFeatures2*                  pFeatures);</code></pre>
</div>
</div>
</div>
<div class="sect3">
<h4 id="_parameters_247">Parameters</h4>
<div class="ulist">
<ul>
<li>
<p><code>physicalDevice</code> is the physical device from which to query the
supported features.</p>
</li>
<li>
<p><code>pFeatures</code> is a pointer to a <a href="#VkPhysicalDeviceFeatures2">VkPhysicalDeviceFeatures2</a>
structure in which the physical device features are returned.</p>
</li>
</ul>
</div>
</div>
<div class="sect3">
<h4 id="_description_247">Description</h4>
<div class="paragraph">
<p>Each structure in <code>pFeatures</code> and its <code>pNext</code> chain contain members
corresponding to fine-grained features.
<code>vkGetPhysicalDeviceFeatures2</code> writes each member to a boolean value
indicating whether that feature is supported.</p>
</div>
<div class="sidebarblock">
<div class="content">
<div class="title">Valid Usage (Implicit)</div>
<div class="ulist">
<ul>
<li>
<p><a id="VUID-vkGetPhysicalDeviceFeatures2-physicalDevice-parameter"></a> <code>physicalDevice</code> <strong class="purple">must</strong> be a valid <code>VkPhysicalDevice</code> handle</p>
</li>
<li>
<p><a id="VUID-vkGetPhysicalDeviceFeatures2-pFeatures-parameter"></a> <code>pFeatures</code> <strong class="purple">must</strong> be a valid pointer to a <code>VkPhysicalDeviceFeatures2</code> structure</p>
</li>
</ul>
</div>
</div>
</div>
</div>
<div class="sect3">
<h4 id="_see_also_247">See Also</h4>
<div class="paragraph">
<p><a href="#VkPhysicalDevice">VkPhysicalDevice</a>, <a href="#VkPhysicalDeviceFeatures2">VkPhysicalDeviceFeatures2</a></p>
</div>
</div>
<div class="sect3">
<h4 id="_document_notes_247">Document Notes</h4>
<div class="paragraph">
<p>For more information, see the Vulkan Specification at URL</p>
</div>
<div class="paragraph">
<p><a href="https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#vkGetPhysicalDeviceFeatures2" class="bare">https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#vkGetPhysicalDeviceFeatures2</a></p>
</div>
<div class="paragraph">
<p>This page is extracted from the Vulkan Specification.
Fixes and changes should be made to the Specification, not directly.</p>
</div>
<div style="page-break-after: always;"></div>
</div>
</div>
<div class="sect2">
<h3 id="_vkgetphysicaldeviceformatproperties3">vkGetPhysicalDeviceFormatProperties(3)</h3>
<div class="sect3">
<h4 id="_name_248">Name</h4>
<div class="paragraph">
<p>vkGetPhysicalDeviceFormatProperties - Lists physical device&#8217;s format capabilities</p>
</div>
</div>
<div class="sect3">
<h4 id="_c_specification_248">C Specification</h4>
<div class="paragraph">
<p>To query supported format features which are properties of the physical
device, call:</p>
</div>
<div id="vkGetPhysicalDeviceFormatProperties" class="listingblock">
<div class="content">
<pre class="highlight"><code class="language-c++" data-lang="c++">void vkGetPhysicalDeviceFormatProperties(
    VkPhysicalDevice                            physicalDevice,
    VkFormat                                    format,
    VkFormatProperties*                         pFormatProperties);</code></pre>
</div>
</div>
</div>
<div class="sect3">
<h4 id="_parameters_248">Parameters</h4>
<div class="ulist">
<ul>
<li>
<p><code>physicalDevice</code> is the physical device from which to query the
format properties.</p>
</li>
<li>
<p><code>format</code> is the format whose properties are queried.</p>
</li>
<li>
<p><code>pFormatProperties</code> is a pointer to a <a href="#VkFormatProperties">VkFormatProperties</a>
structure in which physical device properties for <code>format</code> are
returned.</p>
</li>
</ul>
</div>
</div>
<div class="sect3">
<h4 id="_description_248">Description</h4>
<div class="sidebarblock">
<div class="content">
<div class="title">Valid Usage (Implicit)</div>
<div class="ulist">
<ul>
<li>
<p><a id="VUID-vkGetPhysicalDeviceFormatProperties-physicalDevice-parameter"></a> <code>physicalDevice</code> <strong class="purple">must</strong> be a valid <code>VkPhysicalDevice</code> handle</p>
</li>
<li>
<p><a id="VUID-vkGetPhysicalDeviceFormatProperties-format-parameter"></a> <code>format</code> <strong class="purple">must</strong> be a valid <a href="#VkFormat">VkFormat</a> value</p>
</li>
<li>
<p><a id="VUID-vkGetPhysicalDeviceFormatProperties-pFormatProperties-parameter"></a> <code>pFormatProperties</code> <strong class="purple">must</strong> be a valid pointer to a <code>VkFormatProperties</code> structure</p>
</li>
</ul>
</div>
</div>
</div>
</div>
<div class="sect3">
<h4 id="_see_also_248">See Also</h4>
<div class="paragraph">
<p><a href="#VkFormat">VkFormat</a>, <a href="#VkFormatProperties">VkFormatProperties</a>, <a href="#VkPhysicalDevice">VkPhysicalDevice</a></p>
</div>
</div>
<div class="sect3">
<h4 id="_document_notes_248">Document Notes</h4>
<div class="paragraph">
<p>For more information, see the Vulkan Specification at URL</p>
</div>
<div class="paragraph">
<p><a href="https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#vkGetPhysicalDeviceFormatProperties" class="bare">https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#vkGetPhysicalDeviceFormatProperties</a></p>
</div>
<div class="paragraph">
<p>This page is extracted from the Vulkan Specification.
Fixes and changes should be made to the Specification, not directly.</p>
</div>
<div style="page-break-after: always;"></div>
</div>
</div>
<div class="sect2">
<h3 id="_vkgetphysicaldeviceformatproperties23">vkGetPhysicalDeviceFormatProperties2(3)</h3>
<div class="sect3">
<h4 id="_name_249">Name</h4>
<div class="paragraph">
<p>vkGetPhysicalDeviceFormatProperties2 - Lists physical device&#8217;s format capabilities</p>
</div>
</div>
<div class="sect3">
<h4 id="_c_specification_249">C Specification</h4>
<div class="paragraph">
<p>To query supported format features which are properties of the physical
device, call:</p>
</div>
<div id="vkGetPhysicalDeviceFormatProperties2" class="listingblock">
<div class="content">
<pre class="highlight"><code class="language-c++" data-lang="c++">void vkGetPhysicalDeviceFormatProperties2(
    VkPhysicalDevice                            physicalDevice,
    VkFormat                                    format,
    VkFormatProperties2*                        pFormatProperties);</code></pre>
</div>
</div>
<div class="paragraph">
<p>or the equivalent command</p>
</div>
<div id="vkGetPhysicalDeviceFormatProperties2KHR" class="listingblock">
<div class="content">
<pre class="highlight"><code class="language-c++" data-lang="c++">void vkGetPhysicalDeviceFormatProperties2KHR(
    VkPhysicalDevice                            physicalDevice,
    VkFormat                                    format,
    VkFormatProperties2*                        pFormatProperties);</code></pre>
</div>
</div>
</div>
<div class="sect3">
<h4 id="_parameters_249">Parameters</h4>
<div class="ulist">
<ul>
<li>
<p><code>physicalDevice</code> is the physical device from which to query the
format properties.</p>
</li>
<li>
<p><code>format</code> is the format whose properties are queried.</p>
</li>
<li>
<p><code>pFormatProperties</code> is a pointer to a <a href="#VkFormatProperties2">VkFormatProperties2</a>
structure in which physical device properties for <code>format</code> are
returned.</p>
</li>
</ul>
</div>
</div>
<div class="sect3">
<h4 id="_description_249">Description</h4>
<div class="paragraph">
<p><code>vkGetPhysicalDeviceFormatProperties2</code> behaves similarly to
<a href="#vkGetPhysicalDeviceFormatProperties">vkGetPhysicalDeviceFormatProperties</a>, with the ability to return
extended information in a <code>pNext</code> chain of output structures.</p>
</div>
<div class="sidebarblock">
<div class="content">
<div class="title">Valid Usage (Implicit)</div>
<div class="ulist">
<ul>
<li>
<p><a id="VUID-vkGetPhysicalDeviceFormatProperties2-physicalDevice-parameter"></a> <code>physicalDevice</code> <strong class="purple">must</strong> be a valid <code>VkPhysicalDevice</code> handle</p>
</li>
<li>
<p><a id="VUID-vkGetPhysicalDeviceFormatProperties2-format-parameter"></a> <code>format</code> <strong class="purple">must</strong> be a valid <a href="#VkFormat">VkFormat</a> value</p>
</li>
<li>
<p><a id="VUID-vkGetPhysicalDeviceFormatProperties2-pFormatProperties-parameter"></a> <code>pFormatProperties</code> <strong class="purple">must</strong> be a valid pointer to a <code>VkFormatProperties2</code> structure</p>
</li>
</ul>
</div>
</div>
</div>
</div>
<div class="sect3">
<h4 id="_see_also_249">See Also</h4>
<div class="paragraph">
<p><a href="#VkFormat">VkFormat</a>, <a href="#VkFormatProperties2">VkFormatProperties2</a>, <a href="#VkPhysicalDevice">VkPhysicalDevice</a></p>
</div>
</div>
<div class="sect3">
<h4 id="_document_notes_249">Document Notes</h4>
<div class="paragraph">
<p>For more information, see the Vulkan Specification at URL</p>
</div>
<div class="paragraph">
<p><a href="https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#vkGetPhysicalDeviceFormatProperties2" class="bare">https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#vkGetPhysicalDeviceFormatProperties2</a></p>
</div>
<div class="paragraph">
<p>This page is extracted from the Vulkan Specification.
Fixes and changes should be made to the Specification, not directly.</p>
</div>
<div style="page-break-after: always;"></div>
</div>
</div>
<div class="sect2">
<h3 id="_vkgetphysicaldevicegeneratedcommandspropertiesnvx3">vkGetPhysicalDeviceGeneratedCommandsPropertiesNVX(3)</h3>
<div class="sect3">
<h4 id="_name_250">Name</h4>
<div class="paragraph">
<p>vkGetPhysicalDeviceGeneratedCommandsPropertiesNVX - Returns device-generated commands related properties of a physical device</p>
</div>
</div>
<div class="sect3">
<h4 id="_c_specification_250">C Specification</h4>
<div class="paragraph">
<p>To query the support of related features and limitations, call:</p>
</div>
<div id="vkGetPhysicalDeviceGeneratedCommandsPropertiesNVX" class="listingblock">
<div class="content">
<pre class="highlight"><code class="language-c++" data-lang="c++">void vkGetPhysicalDeviceGeneratedCommandsPropertiesNVX(
    VkPhysicalDevice                            physicalDevice,
    VkDeviceGeneratedCommandsFeaturesNVX*       pFeatures,
    VkDeviceGeneratedCommandsLimitsNVX*         pLimits);</code></pre>
</div>
</div>
</div>
<div class="sect3">
<h4 id="_parameters_250">Parameters</h4>
<div class="ulist">
<ul>
<li>
<p><code>physicalDevice</code> is the handle to the physical device whose
properties will be queried.</p>
</li>
<li>
<p><code>pFeatures</code> points to an instance of the
<a href="#VkDeviceGeneratedCommandsFeaturesNVX">VkDeviceGeneratedCommandsFeaturesNVX</a> structure, that will be
filled with returned information.</p>
</li>
<li>
<p><code>pLimits</code> points to an instance of the
<a href="#VkDeviceGeneratedCommandsLimitsNVX">VkDeviceGeneratedCommandsLimitsNVX</a> structure, that will be filled
with returned information.</p>
</li>
</ul>
</div>
</div>
<div class="sect3">
<h4 id="_description_250">Description</h4>
<div class="sidebarblock">
<div class="content">
<div class="title">Valid Usage (Implicit)</div>
<div class="ulist">
<ul>
<li>
<p><a id="VUID-vkGetPhysicalDeviceGeneratedCommandsPropertiesNVX-physicalDevice-parameter"></a> <code>physicalDevice</code> <strong class="purple">must</strong> be a valid <code>VkPhysicalDevice</code> handle</p>
</li>
<li>
<p><a id="VUID-vkGetPhysicalDeviceGeneratedCommandsPropertiesNVX-pFeatures-parameter"></a> <code>pFeatures</code> <strong class="purple">must</strong> be a valid pointer to a <code>VkDeviceGeneratedCommandsFeaturesNVX</code> structure</p>
</li>
<li>
<p><a id="VUID-vkGetPhysicalDeviceGeneratedCommandsPropertiesNVX-pLimits-parameter"></a> <code>pLimits</code> <strong class="purple">must</strong> be a valid pointer to a <code>VkDeviceGeneratedCommandsLimitsNVX</code> structure</p>
</li>
</ul>
</div>
</div>
</div>
</div>
<div class="sect3">
<h4 id="_see_also_250">See Also</h4>
<div class="paragraph">
<p><a href="#VkDeviceGeneratedCommandsFeaturesNVX">VkDeviceGeneratedCommandsFeaturesNVX</a>, <a href="#VkDeviceGeneratedCommandsLimitsNVX">VkDeviceGeneratedCommandsLimitsNVX</a>, <a href="#VkPhysicalDevice">VkPhysicalDevice</a></p>
</div>
</div>
<div class="sect3">
<h4 id="_document_notes_250">Document Notes</h4>
<div class="paragraph">
<p>For more information, see the Vulkan Specification at URL</p>
</div>
<div class="paragraph">
<p><a href="https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#vkGetPhysicalDeviceGeneratedCommandsPropertiesNVX" class="bare">https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#vkGetPhysicalDeviceGeneratedCommandsPropertiesNVX</a></p>
</div>
<div class="paragraph">
<p>This page is extracted from the Vulkan Specification.
Fixes and changes should be made to the Specification, not directly.</p>
</div>
<div style="page-break-after: always;"></div>
</div>
</div>
<div class="sect2">
<h3 id="_vkgetphysicaldeviceimageformatproperties3">vkGetPhysicalDeviceImageFormatProperties(3)</h3>
<div class="sect3">
<h4 id="_name_251">Name</h4>
<div class="paragraph">
<p>vkGetPhysicalDeviceImageFormatProperties - Lists physical device&#8217;s image format capabilities</p>
</div>
</div>
<div class="sect3">
<h4 id="_c_specification_251">C Specification</h4>
<div class="paragraph">
<p>To query additional capabilities specific to image types, call:</p>
</div>
<div id="vkGetPhysicalDeviceImageFormatProperties" class="listingblock">
<div class="content">
<pre class="highlight"><code class="language-c++" data-lang="c++">VkResult vkGetPhysicalDeviceImageFormatProperties(
    VkPhysicalDevice                            physicalDevice,
    VkFormat                                    format,
    VkImageType                                 type,
    VkImageTiling                               tiling,
    VkImageUsageFlags                           usage,
    VkImageCreateFlags                          flags,
    VkImageFormatProperties*                    pImageFormatProperties);</code></pre>
</div>
</div>
</div>
<div class="sect3">
<h4 id="_parameters_251">Parameters</h4>
<div class="ulist">
<ul>
<li>
<p><code>physicalDevice</code> is the physical device from which to query the
image capabilities.</p>
</li>
<li>
<p><code>format</code> is a <a href="#VkFormat">VkFormat</a> value specifying the image format,
corresponding to <a href="#VkImageCreateInfo">VkImageCreateInfo</a>::<code>format</code>.</p>
</li>
<li>
<p><code>type</code> is a <a href="#VkImageType">VkImageType</a> value specifying the image type,
corresponding to <a href="#VkImageCreateInfo">VkImageCreateInfo</a>::<code>imageType</code>.</p>
</li>
<li>
<p><code>tiling</code> is a <a href="#VkImageTiling">VkImageTiling</a> value specifying the image tiling,
corresponding to <a href="#VkImageCreateInfo">VkImageCreateInfo</a>::<code>tiling</code>.</p>
</li>
<li>
<p><code>usage</code> is a bitmask of <a href="#VkImageUsageFlagBits">VkImageUsageFlagBits</a> specifying the
intended usage of the image, corresponding to
<a href="#VkImageCreateInfo">VkImageCreateInfo</a>::<code>usage</code>.</p>
</li>
<li>
<p><code>flags</code> is a bitmask of <a href="#VkImageCreateFlagBits">VkImageCreateFlagBits</a> specifying
additional parameters of the image, corresponding to
<a href="#VkImageCreateInfo">VkImageCreateInfo</a>::<code>flags</code>.</p>
</li>
<li>
<p><code>pImageFormatProperties</code> points to an instance of the
<a href="#VkImageFormatProperties">VkImageFormatProperties</a> structure in which capabilities are
returned.</p>
</li>
</ul>
</div>
</div>
<div class="sect3">
<h4 id="_description_251">Description</h4>
<div class="paragraph">
<p>The <code>format</code>, <code>type</code>, <code>tiling</code>, <code>usage</code>, and <code>flags</code>
parameters correspond to parameters that would be consumed by
<a href="#vkCreateImage">vkCreateImage</a> (as members of <code>VkImageCreateInfo</code>).</p>
</div>
<div class="paragraph">
<p>If <code>format</code> is not a supported image format, or if the combination of
<code>format</code>, <code>type</code>, <code>tiling</code>, <code>usage</code>, and <code>flags</code> is not
supported for images, then <code>vkGetPhysicalDeviceImageFormatProperties</code>
returns <code>VK_ERROR_FORMAT_NOT_SUPPORTED</code>.</p>
</div>
<div class="paragraph">
<p>The limitations on an image format that are reported by
<code>vkGetPhysicalDeviceImageFormatProperties</code> have the following property:
if <code>usage1</code> and <code>usage2</code> of type <a href="#VkImageUsageFlags">VkImageUsageFlags</a> are such that
the bits set in <code>usage1</code> are a subset of the bits set in <code>usage2</code>, and
<code>flags1</code> and <code>flags2</code> of type <a href="#VkImageCreateFlags">VkImageCreateFlags</a> are such that
the bits set in <code>flags1</code> are a subset of the bits set in <code>flags2</code>,
then the limitations for <code>usage1</code> and <code>flags1</code> <strong class="purple">must</strong> be no more strict
than the limitations for <code>usage2</code> and <code>flags2</code>, for all values of
<code>format</code>, <code>type</code>, and <code>tiling</code>.</p>
</div>
<div class="sidebarblock">
<div class="content">
<div class="title">Valid Usage</div>
<div class="ulist">
<ul>
<li>
<p><a id="VUID-vkGetPhysicalDeviceImageFormatProperties-tiling-02248"></a>
<code>tiling</code> <strong class="purple">must</strong> not be <code>VK_IMAGE_TILING_DRM_FORMAT_MODIFIER_EXT</code>.
(Use <a href="#vkGetPhysicalDeviceImageFormatProperties2">vkGetPhysicalDeviceImageFormatProperties2</a> instead).</p>
</li>
</ul>
</div>
</div>
</div>
<div class="sidebarblock">
<div class="content">
<div class="title">Valid Usage (Implicit)</div>
<div class="ulist">
<ul>
<li>
<p><a id="VUID-vkGetPhysicalDeviceImageFormatProperties-physicalDevice-parameter"></a> <code>physicalDevice</code> <strong class="purple">must</strong> be a valid <code>VkPhysicalDevice</code> handle</p>
</li>
<li>
<p><a id="VUID-vkGetPhysicalDeviceImageFormatProperties-format-parameter"></a> <code>format</code> <strong class="purple">must</strong> be a valid <a href="#VkFormat">VkFormat</a> value</p>
</li>
<li>
<p><a id="VUID-vkGetPhysicalDeviceImageFormatProperties-type-parameter"></a> <code>type</code> <strong class="purple">must</strong> be a valid <a href="#VkImageType">VkImageType</a> value</p>
</li>
<li>
<p><a id="VUID-vkGetPhysicalDeviceImageFormatProperties-tiling-parameter"></a> <code>tiling</code> <strong class="purple">must</strong> be a valid <a href="#VkImageTiling">VkImageTiling</a> value</p>
</li>
<li>
<p><a id="VUID-vkGetPhysicalDeviceImageFormatProperties-usage-parameter"></a> <code>usage</code> <strong class="purple">must</strong> be a valid combination of <a href="#VkImageUsageFlagBits">VkImageUsageFlagBits</a> values</p>
</li>
<li>
<p><a id="VUID-vkGetPhysicalDeviceImageFormatProperties-usage-requiredbitmask"></a> <code>usage</code> <strong class="purple">must</strong> not be <code>0</code></p>
</li>
<li>
<p><a id="VUID-vkGetPhysicalDeviceImageFormatProperties-flags-parameter"></a> <code>flags</code> <strong class="purple">must</strong> be a valid combination of <a href="#VkImageCreateFlagBits">VkImageCreateFlagBits</a> values</p>
</li>
<li>
<p><a id="VUID-vkGetPhysicalDeviceImageFormatProperties-pImageFormatProperties-parameter"></a> <code>pImageFormatProperties</code> <strong class="purple">must</strong> be a valid pointer to a <code>VkImageFormatProperties</code> structure</p>
</li>
</ul>
</div>
</div>
</div>
<div class="sidebarblock">
<div class="content">
<div class="title">Return Codes</div>
<div class="dlist">
<dl>
<dt class="hdlist1"><a href="#fundamentals-successcodes">Success</a></dt>
<dd>
<div class="ulist">
<ul>
<li>
<p><code>VK_SUCCESS</code></p>
</li>
</ul>
</div>
</dd>
<dt class="hdlist1"><a href="#fundamentals-errorcodes">Failure</a></dt>
<dd>
<div class="ulist">
<ul>
<li>
<p><code>VK_ERROR_OUT_OF_HOST_MEMORY</code></p>
</li>
<li>
<p><code>VK_ERROR_OUT_OF_DEVICE_MEMORY</code></p>
</li>
<li>
<p><code>VK_ERROR_FORMAT_NOT_SUPPORTED</code></p>
</li>
</ul>
</div>
</dd>
</dl>
</div>
</div>
</div>
</div>
<div class="sect3">
<h4 id="_see_also_251">See Also</h4>
<div class="paragraph">
<p><a href="#VkFormat">VkFormat</a>, <a href="#VkImageCreateFlags">VkImageCreateFlags</a>, <a href="#VkImageFormatProperties">VkImageFormatProperties</a>, <a href="#VkImageTiling">VkImageTiling</a>, <a href="#VkImageType">VkImageType</a>, <a href="#VkImageUsageFlags">VkImageUsageFlags</a>, <a href="#VkPhysicalDevice">VkPhysicalDevice</a></p>
</div>
</div>
<div class="sect3">
<h4 id="_document_notes_251">Document Notes</h4>
<div class="paragraph">
<p>For more information, see the Vulkan Specification at URL</p>
</div>
<div class="paragraph">
<p><a href="https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#vkGetPhysicalDeviceImageFormatProperties" class="bare">https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#vkGetPhysicalDeviceImageFormatProperties</a></p>
</div>
<div class="paragraph">
<p>This page is extracted from the Vulkan Specification.
Fixes and changes should be made to the Specification, not directly.</p>
</div>
<div style="page-break-after: always;"></div>
</div>
</div>
<div class="sect2">
<h3 id="_vkgetphysicaldeviceimageformatproperties23">vkGetPhysicalDeviceImageFormatProperties2(3)</h3>
<div class="sect3">
<h4 id="_name_252">Name</h4>
<div class="paragraph">
<p>vkGetPhysicalDeviceImageFormatProperties2 - Lists physical device&#8217;s image format capabilities</p>
</div>
</div>
<div class="sect3">
<h4 id="_c_specification_252">C Specification</h4>
<div class="paragraph">
<p>To query additional capabilities specific to image types, call:</p>
</div>
<div id="vkGetPhysicalDeviceImageFormatProperties2" class="listingblock">
<div class="content">
<pre class="highlight"><code class="language-c++" data-lang="c++">VkResult vkGetPhysicalDeviceImageFormatProperties2(
    VkPhysicalDevice                            physicalDevice,
    const VkPhysicalDeviceImageFormatInfo2*     pImageFormatInfo,
    VkImageFormatProperties2*                   pImageFormatProperties);</code></pre>
</div>
</div>
<div class="paragraph">
<p>or the equivalent command</p>
</div>
<div id="vkGetPhysicalDeviceImageFormatProperties2KHR" class="listingblock">
<div class="content">
<pre class="highlight"><code class="language-c++" data-lang="c++">VkResult vkGetPhysicalDeviceImageFormatProperties2KHR(
    VkPhysicalDevice                            physicalDevice,
    const VkPhysicalDeviceImageFormatInfo2*     pImageFormatInfo,
    VkImageFormatProperties2*                   pImageFormatProperties);</code></pre>
</div>
</div>
</div>
<div class="sect3">
<h4 id="_parameters_252">Parameters</h4>
<div class="ulist">
<ul>
<li>
<p><code>physicalDevice</code> is the physical device from which to query the
image capabilities.</p>
</li>
<li>
<p><code>pImageFormatInfo</code> points to an instance of the
<a href="#VkPhysicalDeviceImageFormatInfo2">VkPhysicalDeviceImageFormatInfo2</a> structure, describing the
parameters that would be consumed by <a href="#vkCreateImage">vkCreateImage</a>.</p>
</li>
<li>
<p><code>pImageFormatProperties</code> points to an instance of the
<a href="#VkImageFormatProperties2">VkImageFormatProperties2</a> structure in which capabilities are
returned.</p>
</li>
</ul>
</div>
</div>
<div class="sect3">
<h4 id="_description_252">Description</h4>
<div class="paragraph">
<p><code>vkGetPhysicalDeviceImageFormatProperties2</code> behaves similarly to
<a href="#vkGetPhysicalDeviceImageFormatProperties">vkGetPhysicalDeviceImageFormatProperties</a>, with the ability to return
extended information in a <code>pNext</code> chain of output structures.</p>
</div>
<div class="sidebarblock">
<div class="content">
<div class="title">Valid Usage</div>
<div class="ulist">
<ul>
<li>
<p><a id="VUID-vkGetPhysicalDeviceImageFormatProperties2-pNext-01868"></a>
If the <code>pNext</code> chain of <code>pImageFormatProperties</code> contains an
instance of <a href="#VkAndroidHardwareBufferUsageANDROID">VkAndroidHardwareBufferUsageANDROID</a>, the <code>pNext</code>
chain of <code>pImageFormatInfo</code> <strong class="purple">must</strong> contain an instance of
<a href="#VkPhysicalDeviceExternalImageFormatInfo">VkPhysicalDeviceExternalImageFormatInfo</a> with <code>handleType</code> set
to
<code>VK_EXTERNAL_MEMORY_HANDLE_TYPE_ANDROID_HARDWARE_BUFFER_BIT_ANDROID</code>.</p>
</li>
</ul>
</div>
</div>
</div>
<div class="sidebarblock">
<div class="content">
<div class="title">Valid Usage (Implicit)</div>
<div class="ulist">
<ul>
<li>
<p><a id="VUID-vkGetPhysicalDeviceImageFormatProperties2-physicalDevice-parameter"></a> <code>physicalDevice</code> <strong class="purple">must</strong> be a valid <code>VkPhysicalDevice</code> handle</p>
</li>
<li>
<p><a id="VUID-vkGetPhysicalDeviceImageFormatProperties2-pImageFormatInfo-parameter"></a> <code>pImageFormatInfo</code> <strong class="purple">must</strong> be a valid pointer to a valid <code>VkPhysicalDeviceImageFormatInfo2</code> structure</p>
</li>
<li>
<p><a id="VUID-vkGetPhysicalDeviceImageFormatProperties2-pImageFormatProperties-parameter"></a> <code>pImageFormatProperties</code> <strong class="purple">must</strong> be a valid pointer to a <code>VkImageFormatProperties2</code> structure</p>
</li>
</ul>
</div>
</div>
</div>
<div class="sidebarblock">
<div class="content">
<div class="title">Return Codes</div>
<div class="dlist">
<dl>
<dt class="hdlist1"><a href="#fundamentals-successcodes">Success</a></dt>
<dd>
<div class="ulist">
<ul>
<li>
<p><code>VK_SUCCESS</code></p>
</li>
</ul>
</div>
</dd>
<dt class="hdlist1"><a href="#fundamentals-errorcodes">Failure</a></dt>
<dd>
<div class="ulist">
<ul>
<li>
<p><code>VK_ERROR_OUT_OF_HOST_MEMORY</code></p>
</li>
<li>
<p><code>VK_ERROR_OUT_OF_DEVICE_MEMORY</code></p>
</li>
<li>
<p><code>VK_ERROR_FORMAT_NOT_SUPPORTED</code></p>
</li>
</ul>
</div>
</dd>
</dl>
</div>
</div>
</div>
</div>
<div class="sect3">
<h4 id="_see_also_252">See Also</h4>
<div class="paragraph">
<p><a href="#VkImageFormatProperties2">VkImageFormatProperties2</a>, <a href="#VkPhysicalDevice">VkPhysicalDevice</a>, <a href="#VkPhysicalDeviceImageFormatInfo2">VkPhysicalDeviceImageFormatInfo2</a></p>
</div>
</div>
<div class="sect3">
<h4 id="_document_notes_252">Document Notes</h4>
<div class="paragraph">
<p>For more information, see the Vulkan Specification at URL</p>
</div>
<div class="paragraph">
<p><a href="https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#vkGetPhysicalDeviceImageFormatProperties2" class="bare">https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#vkGetPhysicalDeviceImageFormatProperties2</a></p>
</div>
<div class="paragraph">
<p>This page is extracted from the Vulkan Specification.
Fixes and changes should be made to the Specification, not directly.</p>
</div>
<div style="page-break-after: always;"></div>
</div>
</div>
<div class="sect2">
<h3 id="_vkgetphysicaldevicememoryproperties3">vkGetPhysicalDeviceMemoryProperties(3)</h3>
<div class="sect3">
<h4 id="_name_253">Name</h4>
<div class="paragraph">
<p>vkGetPhysicalDeviceMemoryProperties - Reports memory information for the specified physical device</p>
</div>
</div>
<div class="sect3">
<h4 id="_c_specification_253">C Specification</h4>
<div class="paragraph">
<p>To query memory properties, call:</p>
</div>
<div id="vkGetPhysicalDeviceMemoryProperties" class="listingblock">
<div class="content">
<pre class="highlight"><code class="language-c++" data-lang="c++">void vkGetPhysicalDeviceMemoryProperties(
    VkPhysicalDevice                            physicalDevice,
    VkPhysicalDeviceMemoryProperties*           pMemoryProperties);</code></pre>
</div>
</div>
</div>
<div class="sect3">
<h4 id="_parameters_253">Parameters</h4>
<div class="ulist">
<ul>
<li>
<p><code>physicalDevice</code> is the handle to the device to query.</p>
</li>
<li>
<p><code>pMemoryProperties</code> points to an instance of
<code>VkPhysicalDeviceMemoryProperties</code> structure in which the properties
are returned.</p>
</li>
</ul>
</div>
</div>
<div class="sect3">
<h4 id="_description_253">Description</h4>
<div class="sidebarblock">
<div class="content">
<div class="title">Valid Usage (Implicit)</div>
<div class="ulist">
<ul>
<li>
<p><a id="VUID-vkGetPhysicalDeviceMemoryProperties-physicalDevice-parameter"></a> <code>physicalDevice</code> <strong class="purple">must</strong> be a valid <code>VkPhysicalDevice</code> handle</p>
</li>
<li>
<p><a id="VUID-vkGetPhysicalDeviceMemoryProperties-pMemoryProperties-parameter"></a> <code>pMemoryProperties</code> <strong class="purple">must</strong> be a valid pointer to a <code>VkPhysicalDeviceMemoryProperties</code> structure</p>
</li>
</ul>
</div>
</div>
</div>
</div>
<div class="sect3">
<h4 id="_see_also_253">See Also</h4>
<div class="paragraph">
<p><a href="#VkPhysicalDevice">VkPhysicalDevice</a>, <a href="#VkPhysicalDeviceMemoryProperties">VkPhysicalDeviceMemoryProperties</a></p>
</div>
</div>
<div class="sect3">
<h4 id="_document_notes_253">Document Notes</h4>
<div class="paragraph">
<p>For more information, see the Vulkan Specification at URL</p>
</div>
<div class="paragraph">
<p><a href="https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#vkGetPhysicalDeviceMemoryProperties" class="bare">https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#vkGetPhysicalDeviceMemoryProperties</a></p>
</div>
<div class="paragraph">
<p>This page is extracted from the Vulkan Specification.
Fixes and changes should be made to the Specification, not directly.</p>
</div>
<div style="page-break-after: always;"></div>
</div>
</div>
<div class="sect2">
<h3 id="_vkgetphysicaldevicememoryproperties23">vkGetPhysicalDeviceMemoryProperties2(3)</h3>
<div class="sect3">
<h4 id="_name_254">Name</h4>
<div class="paragraph">
<p>vkGetPhysicalDeviceMemoryProperties2 - Reports memory information for the specified physical device</p>
</div>
</div>
<div class="sect3">
<h4 id="_c_specification_254">C Specification</h4>
<div class="paragraph">
<p>To query memory properties, call:</p>
</div>
<div id="vkGetPhysicalDeviceMemoryProperties2" class="listingblock">
<div class="content">
<pre class="highlight"><code class="language-c++" data-lang="c++">void vkGetPhysicalDeviceMemoryProperties2(
    VkPhysicalDevice                            physicalDevice,
    VkPhysicalDeviceMemoryProperties2*          pMemoryProperties);</code></pre>
</div>
</div>
<div class="paragraph">
<p>or the equivalent command</p>
</div>
<div id="vkGetPhysicalDeviceMemoryProperties2KHR" class="listingblock">
<div class="content">
<pre class="highlight"><code class="language-c++" data-lang="c++">void vkGetPhysicalDeviceMemoryProperties2KHR(
    VkPhysicalDevice                            physicalDevice,
    VkPhysicalDeviceMemoryProperties2*          pMemoryProperties);</code></pre>
</div>
</div>
</div>
<div class="sect3">
<h4 id="_parameters_254">Parameters</h4>
<div class="ulist">
<ul>
<li>
<p><code>physicalDevice</code> is the handle to the device to query.</p>
</li>
<li>
<p><code>pMemoryProperties</code> points to an instance of
<code>VkPhysicalDeviceMemoryProperties2</code> structure in which the
properties are returned.</p>
</li>
</ul>
</div>
</div>
<div class="sect3">
<h4 id="_description_254">Description</h4>
<div class="paragraph">
<p><code>vkGetPhysicalDeviceMemoryProperties2</code> behaves similarly to
<a href="#vkGetPhysicalDeviceMemoryProperties">vkGetPhysicalDeviceMemoryProperties</a>, with the ability to return
extended information in a <code>pNext</code> chain of output structures.</p>
</div>
<div class="sidebarblock">
<div class="content">
<div class="title">Valid Usage (Implicit)</div>
<div class="ulist">
<ul>
<li>
<p><a id="VUID-vkGetPhysicalDeviceMemoryProperties2-physicalDevice-parameter"></a> <code>physicalDevice</code> <strong class="purple">must</strong> be a valid <code>VkPhysicalDevice</code> handle</p>
</li>
<li>
<p><a id="VUID-vkGetPhysicalDeviceMemoryProperties2-pMemoryProperties-parameter"></a> <code>pMemoryProperties</code> <strong class="purple">must</strong> be a valid pointer to a <code>VkPhysicalDeviceMemoryProperties2</code> structure</p>
</li>
</ul>
</div>
</div>
</div>
</div>
<div class="sect3">
<h4 id="_see_also_254">See Also</h4>
<div class="paragraph">
<p><a href="#VkPhysicalDevice">VkPhysicalDevice</a>, <a href="#VkPhysicalDeviceMemoryProperties2">VkPhysicalDeviceMemoryProperties2</a></p>
</div>
</div>
<div class="sect3">
<h4 id="_document_notes_254">Document Notes</h4>
<div class="paragraph">
<p>For more information, see the Vulkan Specification at URL</p>
</div>
<div class="paragraph">
<p><a href="https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#vkGetPhysicalDeviceMemoryProperties2" class="bare">https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#vkGetPhysicalDeviceMemoryProperties2</a></p>
</div>
<div class="paragraph">
<p>This page is extracted from the Vulkan Specification.
Fixes and changes should be made to the Specification, not directly.</p>
</div>
<div style="page-break-after: always;"></div>
</div>
</div>
<div class="sect2">
<h3 id="_vkgetphysicaldevicemultisamplepropertiesext3">vkGetPhysicalDeviceMultisamplePropertiesEXT(3)</h3>
<div class="sect3">
<h4 id="_name_255">Name</h4>
<div class="paragraph">
<p>vkGetPhysicalDeviceMultisamplePropertiesEXT - Report sample count specific multisampling capabilities of a physical device</p>
</div>
</div>
<div class="sect3">
<h4 id="_c_specification_255">C Specification</h4>
<div class="paragraph">
<p>In addition to the minimum capabilities described for (<a href="vkspec.html#limits">Limits</a>)
above, implementations <strong class="purple">may</strong> support additional multisampling capabilities
specific to a particular sample count.</p>
</div>
<div class="paragraph">
<p>To query additional sample count specific multisampling capabilities, call:</p>
</div>
<div id="vkGetPhysicalDeviceMultisamplePropertiesEXT" class="listingblock">
<div class="content">
<pre class="highlight"><code class="language-c++" data-lang="c++">void vkGetPhysicalDeviceMultisamplePropertiesEXT(
    VkPhysicalDevice                            physicalDevice,
    VkSampleCountFlagBits                       samples,
    VkMultisamplePropertiesEXT*                 pMultisampleProperties);</code></pre>
</div>
</div>
</div>
<div class="sect3">
<h4 id="_parameters_255">Parameters</h4>
<div class="ulist">
<ul>
<li>
<p><code>physicalDevice</code> is the physical device from which to query the
additional multisampling capabilities.</p>
</li>
<li>
<p><code>samples</code> is the sample count to query the capabilities for.</p>
</li>
<li>
<p><code>pMultisampleProperties</code> is a pointer to a structure of type
<a href="#VkMultisamplePropertiesEXT">VkMultisamplePropertiesEXT</a>, in which information about the
additional multisampling capabilities specific to the sample count is
returned.</p>
</li>
</ul>
</div>
</div>
<div class="sect3">
<h4 id="_description_255">Description</h4>
<div class="sidebarblock">
<div class="content">
<div class="title">Valid Usage (Implicit)</div>
<div class="ulist">
<ul>
<li>
<p><a id="VUID-vkGetPhysicalDeviceMultisamplePropertiesEXT-physicalDevice-parameter"></a> <code>physicalDevice</code> <strong class="purple">must</strong> be a valid <code>VkPhysicalDevice</code> handle</p>
</li>
<li>
<p><a id="VUID-vkGetPhysicalDeviceMultisamplePropertiesEXT-samples-parameter"></a> <code>samples</code> <strong class="purple">must</strong> be a valid <a href="#VkSampleCountFlagBits">VkSampleCountFlagBits</a> value</p>
</li>
<li>
<p><a id="VUID-vkGetPhysicalDeviceMultisamplePropertiesEXT-pMultisampleProperties-parameter"></a> <code>pMultisampleProperties</code> <strong class="purple">must</strong> be a valid pointer to a <code>VkMultisamplePropertiesEXT</code> structure</p>
</li>
</ul>
</div>
</div>
</div>
</div>
<div class="sect3">
<h4 id="_see_also_255">See Also</h4>
<div class="paragraph">
<p><a href="#VkMultisamplePropertiesEXT">VkMultisamplePropertiesEXT</a>, <a href="#VkPhysicalDevice">VkPhysicalDevice</a>, <a href="#VkSampleCountFlagBits">VkSampleCountFlagBits</a></p>
</div>
</div>
<div class="sect3">
<h4 id="_document_notes_255">Document Notes</h4>
<div class="paragraph">
<p>For more information, see the Vulkan Specification at URL</p>
</div>
<div class="paragraph">
<p><a href="https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#vkGetPhysicalDeviceMultisamplePropertiesEXT" class="bare">https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#vkGetPhysicalDeviceMultisamplePropertiesEXT</a></p>
</div>
<div class="paragraph">
<p>This page is extracted from the Vulkan Specification.
Fixes and changes should be made to the Specification, not directly.</p>
</div>
<div style="page-break-after: always;"></div>
</div>
</div>
<div class="sect2">
<h3 id="_vkgetphysicaldevicepresentrectangleskhr3">vkGetPhysicalDevicePresentRectanglesKHR(3)</h3>
<div class="sect3">
<h4 id="_name_256">Name</h4>
<div class="paragraph">
<p>vkGetPhysicalDevicePresentRectanglesKHR - Query present rectangles for a surface on a physical device</p>
</div>
</div>
<div class="sect3">
<h4 id="_c_specification_256">C Specification</h4>
<div class="paragraph">
<p>When using <code>VK_DEVICE_GROUP_PRESENT_MODE_LOCAL_MULTI_DEVICE_BIT_KHR</code>,
the application <strong class="purple">may</strong> need to know which regions of the surface are used when
presenting locally on each physical device.
Presentation of swapchain images to this surface need only have valid
contents in the regions returned by this command.</p>
</div>
<div class="paragraph">
<p>To query a set of rectangles used in presentation on the physical device,
call:</p>
</div>
<div id="vkGetPhysicalDevicePresentRectanglesKHR" class="listingblock">
<div class="content">
<pre class="highlight"><code class="language-c++" data-lang="c++">VkResult vkGetPhysicalDevicePresentRectanglesKHR(
    VkPhysicalDevice                            physicalDevice,
    VkSurfaceKHR                                surface,
    uint32_t*                                   pRectCount,
    VkRect2D*                                   pRects);</code></pre>
</div>
</div>
</div>
<div class="sect3">
<h4 id="_parameters_256">Parameters</h4>
<div class="ulist">
<ul>
<li>
<p><code>physicalDevice</code> is the physical device.</p>
</li>
<li>
<p><code>surface</code> is the surface.</p>
</li>
<li>
<p><code>pRectCount</code> is a pointer to an integer related to the number of
rectangles available or queried, as described below.</p>
</li>
<li>
<p><code>pRects</code> is either <code>NULL</code> or a pointer to an array of <a href="#VkRect2D">VkRect2D</a>
structures.</p>
</li>
</ul>
</div>
</div>
<div class="sect3">
<h4 id="_description_256">Description</h4>
<div class="paragraph">
<p>If <code>pRects</code> is <code>NULL</code>, then the number of rectangles used when
presenting the given <code>surface</code> is returned in <code>pRectCount</code>.
Otherwise, <code>pRectCount</code> <strong class="purple">must</strong> point to a variable set by the user to the
number of elements in the <code>pRects</code> array, and on return the variable is
overwritten with the number of structures actually written to <code>pRects</code>.
If the value of <code>pRectCount</code> is less than the number of rectangles, at
most <code>pRectCount</code> structures will be written.
If <code>pRectCount</code> is smaller than the number of rectangles used for the
given <code>surface</code>, <code>VK_INCOMPLETE</code> will be returned instead of
<code>VK_SUCCESS</code> to indicate that not all the available values were
returned.</p>
</div>
<div class="paragraph">
<p>The values returned by this command are not invariant, and <strong class="purple">may</strong> change in
response to the surface being moved, resized, or occluded.</p>
</div>
<div class="paragraph">
<p>The rectangles returned by this command <strong class="purple">must</strong> not overlap.</p>
</div>
<div class="sidebarblock">
<div class="content">
<div class="title">Valid Usage (Implicit)</div>
<div class="ulist">
<ul>
<li>
<p><a id="VUID-vkGetPhysicalDevicePresentRectanglesKHR-physicalDevice-parameter"></a> <code>physicalDevice</code> <strong class="purple">must</strong> be a valid <code>VkPhysicalDevice</code> handle</p>
</li>
<li>
<p><a id="VUID-vkGetPhysicalDevicePresentRectanglesKHR-surface-parameter"></a> <code>surface</code> <strong class="purple">must</strong> be a valid <code>VkSurfaceKHR</code> handle</p>
</li>
<li>
<p><a id="VUID-vkGetPhysicalDevicePresentRectanglesKHR-pRectCount-parameter"></a> <code>pRectCount</code> <strong class="purple">must</strong> be a valid pointer to a <code>uint32_t</code> value</p>
</li>
<li>
<p><a id="VUID-vkGetPhysicalDevicePresentRectanglesKHR-pRects-parameter"></a> If the value referenced by <code>pRectCount</code> is not <code>0</code>, and <code>pRects</code> is not <code>NULL</code>, <code>pRects</code> <strong class="purple">must</strong> be a valid pointer to an array of <code>pRectCount</code> <code>VkRect2D</code> structures</p>
</li>
<li>
<p><a id="VUID-vkGetPhysicalDevicePresentRectanglesKHR-commonparent"></a> Both of <code>physicalDevice</code>, and <code>surface</code> <strong class="purple">must</strong> have been created, allocated, or retrieved from the same <code>VkInstance</code></p>
</li>
</ul>
</div>
</div>
</div>
<div class="sidebarblock">
<div class="content">
<div class="title">Host Synchronization</div>
<div class="ulist">
<ul>
<li>
<p>Host access to <code>surface</code> <strong class="purple">must</strong> be externally synchronized</p>
</li>
</ul>
</div>
</div>
</div>
<div class="sidebarblock">
<div class="content">
<div class="title">Return Codes</div>
<div class="dlist">
<dl>
<dt class="hdlist1"><a href="#fundamentals-successcodes">Success</a></dt>
<dd>
<div class="ulist">
<ul>
<li>
<p><code>VK_SUCCESS</code></p>
</li>
<li>
<p><code>VK_INCOMPLETE</code></p>
</li>
</ul>
</div>
</dd>
<dt class="hdlist1"><a href="#fundamentals-errorcodes">Failure</a></dt>
<dd>
<div class="ulist">
<ul>
<li>
<p><code>VK_ERROR_OUT_OF_HOST_MEMORY</code></p>
</li>
<li>
<p><code>VK_ERROR_OUT_OF_DEVICE_MEMORY</code></p>
</li>
</ul>
</div>
</dd>
</dl>
</div>
</div>
</div>
</div>
<div class="sect3">
<h4 id="_see_also_256">See Also</h4>
<div class="paragraph">
<p><a href="#VkPhysicalDevice">VkPhysicalDevice</a>, <a href="#VkRect2D">VkRect2D</a>, <a href="#VkSurfaceKHR">VkSurfaceKHR</a></p>
</div>
</div>
<div class="sect3">
<h4 id="_document_notes_256">Document Notes</h4>
<div class="paragraph">
<p>For more information, see the Vulkan Specification at URL</p>
</div>
<div class="paragraph">
<p><a href="https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#vkGetPhysicalDevicePresentRectanglesKHR" class="bare">https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#vkGetPhysicalDevicePresentRectanglesKHR</a></p>
</div>
<div class="paragraph">
<p>This page is extracted from the Vulkan Specification.
Fixes and changes should be made to the Specification, not directly.</p>
</div>
<div style="page-break-after: always;"></div>
</div>
</div>
<div class="sect2">
<h3 id="_vkgetphysicaldeviceproperties3">vkGetPhysicalDeviceProperties(3)</h3>
<div class="sect3">
<h4 id="_name_257">Name</h4>
<div class="paragraph">
<p>vkGetPhysicalDeviceProperties - Returns properties of a physical device</p>
</div>
</div>
<div class="sect3">
<h4 id="_c_specification_257">C Specification</h4>
<div class="paragraph">
<p>To query general properties of physical devices once enumerated, call:</p>
</div>
<div id="vkGetPhysicalDeviceProperties" class="listingblock">
<div class="content">
<pre class="highlight"><code class="language-c++" data-lang="c++">void vkGetPhysicalDeviceProperties(
    VkPhysicalDevice                            physicalDevice,
    VkPhysicalDeviceProperties*                 pProperties);</code></pre>
</div>
</div>
</div>
<div class="sect3">
<h4 id="_parameters_257">Parameters</h4>
<div class="ulist">
<ul>
<li>
<p><code>physicalDevice</code> is the handle to the physical device whose
properties will be queried.</p>
</li>
<li>
<p><code>pProperties</code> points to an instance of the
<a href="#VkPhysicalDeviceProperties">VkPhysicalDeviceProperties</a> structure, that will be filled with
returned information.</p>
</li>
</ul>
</div>
</div>
<div class="sect3">
<h4 id="_description_257">Description</h4>
<div class="sidebarblock">
<div class="content">
<div class="title">Valid Usage (Implicit)</div>
<div class="ulist">
<ul>
<li>
<p><a id="VUID-vkGetPhysicalDeviceProperties-physicalDevice-parameter"></a> <code>physicalDevice</code> <strong class="purple">must</strong> be a valid <code>VkPhysicalDevice</code> handle</p>
</li>
<li>
<p><a id="VUID-vkGetPhysicalDeviceProperties-pProperties-parameter"></a> <code>pProperties</code> <strong class="purple">must</strong> be a valid pointer to a <code>VkPhysicalDeviceProperties</code> structure</p>
</li>
</ul>
</div>
</div>
</div>
</div>
<div class="sect3">
<h4 id="_see_also_257">See Also</h4>
<div class="paragraph">
<p><a href="#VkPhysicalDevice">VkPhysicalDevice</a>, <a href="#VkPhysicalDeviceProperties">VkPhysicalDeviceProperties</a></p>
</div>
</div>
<div class="sect3">
<h4 id="_document_notes_257">Document Notes</h4>
<div class="paragraph">
<p>For more information, see the Vulkan Specification at URL</p>
</div>
<div class="paragraph">
<p><a href="https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#vkGetPhysicalDeviceProperties" class="bare">https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#vkGetPhysicalDeviceProperties</a></p>
</div>
<div class="paragraph">
<p>This page is extracted from the Vulkan Specification.
Fixes and changes should be made to the Specification, not directly.</p>
</div>
<div style="page-break-after: always;"></div>
</div>
</div>
<div class="sect2">
<h3 id="_vkgetphysicaldeviceproperties23">vkGetPhysicalDeviceProperties2(3)</h3>
<div class="sect3">
<h4 id="_name_258">Name</h4>
<div class="paragraph">
<p>vkGetPhysicalDeviceProperties2 - Returns properties of a physical device</p>
</div>
</div>
<div class="sect3">
<h4 id="_c_specification_258">C Specification</h4>
<div class="paragraph">
<p>To query general properties of physical devices once enumerated, call:</p>
</div>
<div id="vkGetPhysicalDeviceProperties2" class="listingblock">
<div class="content">
<pre class="highlight"><code class="language-c++" data-lang="c++">void vkGetPhysicalDeviceProperties2(
    VkPhysicalDevice                            physicalDevice,
    VkPhysicalDeviceProperties2*                pProperties);</code></pre>
</div>
</div>
<div class="paragraph">
<p>or the equivalent command</p>
</div>
<div id="vkGetPhysicalDeviceProperties2KHR" class="listingblock">
<div class="content">
<pre class="highlight"><code class="language-c++" data-lang="c++">void vkGetPhysicalDeviceProperties2KHR(
    VkPhysicalDevice                            physicalDevice,
    VkPhysicalDeviceProperties2*                pProperties);</code></pre>
</div>
</div>
</div>
<div class="sect3">
<h4 id="_parameters_258">Parameters</h4>
<div class="ulist">
<ul>
<li>
<p><code>physicalDevice</code> is the handle to the physical device whose
properties will be queried.</p>
</li>
<li>
<p><code>pProperties</code> points to an instance of the
<a href="#VkPhysicalDeviceProperties2">VkPhysicalDeviceProperties2</a> structure, that will be filled with
returned information.</p>
</li>
</ul>
</div>
</div>
<div class="sect3">
<h4 id="_description_258">Description</h4>
<div class="paragraph">
<p>Each structure in <code>pProperties</code> and its <code>pNext</code> chain contain
members corresponding to properties or implementation-dependent limits.
<code>vkGetPhysicalDeviceProperties2</code> writes each member to a value
indicating the value of that property or limit.</p>
</div>
<div class="sidebarblock">
<div class="content">
<div class="title">Valid Usage (Implicit)</div>
<div class="ulist">
<ul>
<li>
<p><a id="VUID-vkGetPhysicalDeviceProperties2-physicalDevice-parameter"></a> <code>physicalDevice</code> <strong class="purple">must</strong> be a valid <code>VkPhysicalDevice</code> handle</p>
</li>
<li>
<p><a id="VUID-vkGetPhysicalDeviceProperties2-pProperties-parameter"></a> <code>pProperties</code> <strong class="purple">must</strong> be a valid pointer to a <code>VkPhysicalDeviceProperties2</code> structure</p>
</li>
</ul>
</div>
</div>
</div>
</div>
<div class="sect3">
<h4 id="_see_also_258">See Also</h4>
<div class="paragraph">
<p><a href="#VkPhysicalDevice">VkPhysicalDevice</a>, <a href="#VkPhysicalDeviceProperties2">VkPhysicalDeviceProperties2</a></p>
</div>
</div>
<div class="sect3">
<h4 id="_document_notes_258">Document Notes</h4>
<div class="paragraph">
<p>For more information, see the Vulkan Specification at URL</p>
</div>
<div class="paragraph">
<p><a href="https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#vkGetPhysicalDeviceProperties2" class="bare">https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#vkGetPhysicalDeviceProperties2</a></p>
</div>
<div class="paragraph">
<p>This page is extracted from the Vulkan Specification.
Fixes and changes should be made to the Specification, not directly.</p>
</div>
<div style="page-break-after: always;"></div>
</div>
</div>
<div class="sect2">
<h3 id="_vkgetphysicaldevicequeuefamilyproperties3">vkGetPhysicalDeviceQueueFamilyProperties(3)</h3>
<div class="sect3">
<h4 id="_name_259">Name</h4>
<div class="paragraph">
<p>vkGetPhysicalDeviceQueueFamilyProperties - Reports properties of the queues of the specified physical device</p>
</div>
</div>
<div class="sect3">
<h4 id="_c_specification_259">C Specification</h4>
<div class="paragraph">
<p>To query properties of queues available on a physical device, call:</p>
</div>
<div id="vkGetPhysicalDeviceQueueFamilyProperties" class="listingblock">
<div class="content">
<pre class="highlight"><code class="language-c++" data-lang="c++">void vkGetPhysicalDeviceQueueFamilyProperties(
    VkPhysicalDevice                            physicalDevice,
    uint32_t*                                   pQueueFamilyPropertyCount,
    VkQueueFamilyProperties*                    pQueueFamilyProperties);</code></pre>
</div>
</div>
</div>
<div class="sect3">
<h4 id="_parameters_259">Parameters</h4>
<div class="ulist">
<ul>
<li>
<p><code>physicalDevice</code> is the handle to the physical device whose
properties will be queried.</p>
</li>
<li>
<p><code>pQueueFamilyPropertyCount</code> is a pointer to an integer related to
the number of queue families available or queried, as described below.</p>
</li>
<li>
<p><code>pQueueFamilyProperties</code> is either <code>NULL</code> or a pointer to an array
of <a href="#VkQueueFamilyProperties">VkQueueFamilyProperties</a> structures.</p>
</li>
</ul>
</div>
</div>
<div class="sect3">
<h4 id="_description_259">Description</h4>
<div class="paragraph">
<p>If <code>pQueueFamilyProperties</code> is <code>NULL</code>, then the number of queue families
available is returned in <code>pQueueFamilyPropertyCount</code>.
Implementations <strong class="purple">must</strong> support at least one queue family.
Otherwise, <code>pQueueFamilyPropertyCount</code> <strong class="purple">must</strong> point to a variable set by
the user to the number of elements in the <code>pQueueFamilyProperties</code>
array, and on return the variable is overwritten with the number of
structures actually written to <code>pQueueFamilyProperties</code>.
If <code>pQueueFamilyPropertyCount</code> is less than the number of queue families
available, at most <code>pQueueFamilyPropertyCount</code> structures will be
written.</p>
</div>
<div class="sidebarblock">
<div class="content">
<div class="title">Valid Usage (Implicit)</div>
<div class="ulist">
<ul>
<li>
<p><a id="VUID-vkGetPhysicalDeviceQueueFamilyProperties-physicalDevice-parameter"></a> <code>physicalDevice</code> <strong class="purple">must</strong> be a valid <code>VkPhysicalDevice</code> handle</p>
</li>
<li>
<p><a id="VUID-vkGetPhysicalDeviceQueueFamilyProperties-pQueueFamilyPropertyCount-parameter"></a> <code>pQueueFamilyPropertyCount</code> <strong class="purple">must</strong> be a valid pointer to a <code>uint32_t</code> value</p>
</li>
<li>
<p><a id="VUID-vkGetPhysicalDeviceQueueFamilyProperties-pQueueFamilyProperties-parameter"></a> If the value referenced by <code>pQueueFamilyPropertyCount</code> is not <code>0</code>, and <code>pQueueFamilyProperties</code> is not <code>NULL</code>, <code>pQueueFamilyProperties</code> <strong class="purple">must</strong> be a valid pointer to an array of <code>pQueueFamilyPropertyCount</code> <code>VkQueueFamilyProperties</code> structures</p>
</li>
</ul>
</div>
</div>
</div>
</div>
<div class="sect3">
<h4 id="_see_also_259">See Also</h4>
<div class="paragraph">
<p><a href="#VkPhysicalDevice">VkPhysicalDevice</a>, <a href="#VkQueueFamilyProperties">VkQueueFamilyProperties</a></p>
</div>
</div>
<div class="sect3">
<h4 id="_document_notes_259">Document Notes</h4>
<div class="paragraph">
<p>For more information, see the Vulkan Specification at URL</p>
</div>
<div class="paragraph">
<p><a href="https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#vkGetPhysicalDeviceQueueFamilyProperties" class="bare">https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#vkGetPhysicalDeviceQueueFamilyProperties</a></p>
</div>
<div class="paragraph">
<p>This page is extracted from the Vulkan Specification.
Fixes and changes should be made to the Specification, not directly.</p>
</div>
<div style="page-break-after: always;"></div>
</div>
</div>
<div class="sect2">
<h3 id="_vkgetphysicaldevicequeuefamilyproperties23">vkGetPhysicalDeviceQueueFamilyProperties2(3)</h3>
<div class="sect3">
<h4 id="_name_260">Name</h4>
<div class="paragraph">
<p>vkGetPhysicalDeviceQueueFamilyProperties2 - Reports properties of the queues of the specified physical device</p>
</div>
</div>
<div class="sect3">
<h4 id="_c_specification_260">C Specification</h4>
<div class="paragraph">
<p>To query properties of queues available on a physical device, call:</p>
</div>
<div id="vkGetPhysicalDeviceQueueFamilyProperties2" class="listingblock">
<div class="content">
<pre class="highlight"><code class="language-c++" data-lang="c++">void vkGetPhysicalDeviceQueueFamilyProperties2(
    VkPhysicalDevice                            physicalDevice,
    uint32_t*                                   pQueueFamilyPropertyCount,
    VkQueueFamilyProperties2*                   pQueueFamilyProperties);</code></pre>
</div>
</div>
<div class="paragraph">
<p>or the equivalent command</p>
</div>
<div id="vkGetPhysicalDeviceQueueFamilyProperties2KHR" class="listingblock">
<div class="content">
<pre class="highlight"><code class="language-c++" data-lang="c++">void vkGetPhysicalDeviceQueueFamilyProperties2KHR(
    VkPhysicalDevice                            physicalDevice,
    uint32_t*                                   pQueueFamilyPropertyCount,
    VkQueueFamilyProperties2*                   pQueueFamilyProperties);</code></pre>
</div>
</div>
</div>
<div class="sect3">
<h4 id="_parameters_260">Parameters</h4>
<div class="ulist">
<ul>
<li>
<p><code>physicalDevice</code> is the handle to the physical device whose
properties will be queried.</p>
</li>
<li>
<p><code>pQueueFamilyPropertyCount</code> is a pointer to an integer related to
the number of queue families available or queried, as described in
<a href="#vkGetPhysicalDeviceQueueFamilyProperties">vkGetPhysicalDeviceQueueFamilyProperties</a>.</p>
</li>
<li>
<p><code>pQueueFamilyProperties</code> is either <code>NULL</code> or a pointer to an array
of <a href="#VkQueueFamilyProperties2">VkQueueFamilyProperties2</a> structures.</p>
</li>
</ul>
</div>
</div>
<div class="sect3">
<h4 id="_description_260">Description</h4>
<div class="paragraph">
<p><code>vkGetPhysicalDeviceQueueFamilyProperties2</code> behaves similarly to
<a href="#vkGetPhysicalDeviceQueueFamilyProperties">vkGetPhysicalDeviceQueueFamilyProperties</a>, with the ability to return
extended information in a <code>pNext</code> chain of output structures.</p>
</div>
<div class="sidebarblock">
<div class="content">
<div class="title">Valid Usage (Implicit)</div>
<div class="ulist">
<ul>
<li>
<p><a id="VUID-vkGetPhysicalDeviceQueueFamilyProperties2-physicalDevice-parameter"></a> <code>physicalDevice</code> <strong class="purple">must</strong> be a valid <code>VkPhysicalDevice</code> handle</p>
</li>
<li>
<p><a id="VUID-vkGetPhysicalDeviceQueueFamilyProperties2-pQueueFamilyPropertyCount-parameter"></a> <code>pQueueFamilyPropertyCount</code> <strong class="purple">must</strong> be a valid pointer to a <code>uint32_t</code> value</p>
</li>
<li>
<p><a id="VUID-vkGetPhysicalDeviceQueueFamilyProperties2-pQueueFamilyProperties-parameter"></a> If the value referenced by <code>pQueueFamilyPropertyCount</code> is not <code>0</code>, and <code>pQueueFamilyProperties</code> is not <code>NULL</code>, <code>pQueueFamilyProperties</code> <strong class="purple">must</strong> be a valid pointer to an array of <code>pQueueFamilyPropertyCount</code> <code>VkQueueFamilyProperties2</code> structures</p>
</li>
</ul>
</div>
</div>
</div>
</div>
<div class="sect3">
<h4 id="_see_also_260">See Also</h4>
<div class="paragraph">
<p><a href="#VkPhysicalDevice">VkPhysicalDevice</a>, <a href="#VkQueueFamilyProperties2">VkQueueFamilyProperties2</a></p>
</div>
</div>
<div class="sect3">
<h4 id="_document_notes_260">Document Notes</h4>
<div class="paragraph">
<p>For more information, see the Vulkan Specification at URL</p>
</div>
<div class="paragraph">
<p><a href="https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#vkGetPhysicalDeviceQueueFamilyProperties2" class="bare">https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#vkGetPhysicalDeviceQueueFamilyProperties2</a></p>
</div>
<div class="paragraph">
<p>This page is extracted from the Vulkan Specification.
Fixes and changes should be made to the Specification, not directly.</p>
</div>
<div style="page-break-after: always;"></div>
</div>
</div>
<div class="sect2">
<h3 id="_vkgetphysicaldevicesparseimageformatproperties3">vkGetPhysicalDeviceSparseImageFormatProperties(3)</h3>
<div class="sect3">
<h4 id="_name_261">Name</h4>
<div class="paragraph">
<p>vkGetPhysicalDeviceSparseImageFormatProperties - Retrieve properties of an image format applied to sparse images</p>
</div>
</div>
<div class="sect3">
<h4 id="_c_specification_261">C Specification</h4>
<div class="paragraph">
<p><code>vkGetPhysicalDeviceSparseImageFormatProperties</code> returns an array of
<a href="#VkSparseImageFormatProperties">VkSparseImageFormatProperties</a>.
Each element will describe properties for one set of image aspects that are
bound simultaneously in the image.
This is usually one element for each aspect in the image, but for
interleaved depth/stencil images there is only one element describing the
combined aspects.</p>
</div>
<div id="vkGetPhysicalDeviceSparseImageFormatProperties" class="listingblock">
<div class="content">
<pre class="highlight"><code class="language-c++" data-lang="c++">void vkGetPhysicalDeviceSparseImageFormatProperties(
    VkPhysicalDevice                            physicalDevice,
    VkFormat                                    format,
    VkImageType                                 type,
    VkSampleCountFlagBits                       samples,
    VkImageUsageFlags                           usage,
    VkImageTiling                               tiling,
    uint32_t*                                   pPropertyCount,
    VkSparseImageFormatProperties*              pProperties);</code></pre>
</div>
</div>
</div>
<div class="sect3">
<h4 id="_parameters_261">Parameters</h4>
<div class="ulist">
<ul>
<li>
<p><code>physicalDevice</code> is the physical device from which to query the
sparse image capabilities.</p>
</li>
<li>
<p><code>format</code> is the image format.</p>
</li>
<li>
<p><code>type</code> is the dimensionality of image.</p>
</li>
<li>
<p><code>samples</code> is the number of samples per texel as defined in
<a href="#VkSampleCountFlagBits">VkSampleCountFlagBits</a>.</p>
</li>
<li>
<p><code>usage</code> is a bitmask describing the intended usage of the image.</p>
</li>
<li>
<p><code>tiling</code> is the tiling arrangement of the texel blocks in memory.</p>
</li>
<li>
<p><code>pPropertyCount</code> is a pointer to an integer related to the number of
sparse format properties available or queried, as described below.</p>
</li>
<li>
<p><code>pProperties</code> is either <code>NULL</code> or a pointer to an array of
<a href="#VkSparseImageFormatProperties">VkSparseImageFormatProperties</a> structures.</p>
</li>
</ul>
</div>
</div>
<div class="sect3">
<h4 id="_description_261">Description</h4>
<div class="paragraph">
<p>If <code>pProperties</code> is <code>NULL</code>, then the number of sparse format properties
available is returned in <code>pPropertyCount</code>.
Otherwise, <code>pPropertyCount</code> <strong class="purple">must</strong> point to a variable set by the user to
the number of elements in the <code>pProperties</code> array, and on return the
variable is overwritten with the number of structures actually written to
<code>pProperties</code>.
If <code>pPropertyCount</code> is less than the number of sparse format properties
available, at most <code>pPropertyCount</code> structures will be written.</p>
</div>
<div class="paragraph">
<p>If <code>VK_IMAGE_CREATE_SPARSE_RESIDENCY_BIT</code> is not supported for the given
arguments, <code>pPropertyCount</code> will be set to zero upon return, and no data
will be written to <code>pProperties</code>.</p>
</div>
<div class="paragraph">
<p>Multiple aspects are returned for depth/stencil images that are implemented
as separate planes by the implementation.
The depth and stencil data planes each have unique
<code>VkSparseImageFormatProperties</code> data.</p>
</div>
<div class="paragraph">
<p>Depth/stencil images with depth and stencil data interleaved into a single
plane will return a single <code>VkSparseImageFormatProperties</code> structure
with the <code>aspectMask</code> set to <code>VK_IMAGE_ASPECT_DEPTH_BIT</code> |
<code>VK_IMAGE_ASPECT_STENCIL_BIT</code>.</p>
</div>
<div class="sidebarblock">
<div class="content">
<div class="title">Valid Usage</div>
<div class="ulist">
<ul>
<li>
<p><a id="VUID-vkGetPhysicalDeviceSparseImageFormatProperties-samples-01094"></a>
<code>samples</code> <strong class="purple">must</strong> be a bit value that is set in
<code>VkImageFormatProperties</code>::<code>sampleCounts</code> returned by
<code>vkGetPhysicalDeviceImageFormatProperties</code> with <code>format</code>,
<code>type</code>, <code>tiling</code>, and <code>usage</code> equal to those in this command
and <code>flags</code> equal to the value that is set in
<code>VkImageCreateInfo</code>::<code>flags</code> when the image is created</p>
</li>
</ul>
</div>
</div>
</div>
<div class="sidebarblock">
<div class="content">
<div class="title">Valid Usage (Implicit)</div>
<div class="ulist">
<ul>
<li>
<p><a id="VUID-vkGetPhysicalDeviceSparseImageFormatProperties-physicalDevice-parameter"></a> <code>physicalDevice</code> <strong class="purple">must</strong> be a valid <code>VkPhysicalDevice</code> handle</p>
</li>
<li>
<p><a id="VUID-vkGetPhysicalDeviceSparseImageFormatProperties-format-parameter"></a> <code>format</code> <strong class="purple">must</strong> be a valid <a href="#VkFormat">VkFormat</a> value</p>
</li>
<li>
<p><a id="VUID-vkGetPhysicalDeviceSparseImageFormatProperties-type-parameter"></a> <code>type</code> <strong class="purple">must</strong> be a valid <a href="#VkImageType">VkImageType</a> value</p>
</li>
<li>
<p><a id="VUID-vkGetPhysicalDeviceSparseImageFormatProperties-samples-parameter"></a> <code>samples</code> <strong class="purple">must</strong> be a valid <a href="#VkSampleCountFlagBits">VkSampleCountFlagBits</a> value</p>
</li>
<li>
<p><a id="VUID-vkGetPhysicalDeviceSparseImageFormatProperties-usage-parameter"></a> <code>usage</code> <strong class="purple">must</strong> be a valid combination of <a href="#VkImageUsageFlagBits">VkImageUsageFlagBits</a> values</p>
</li>
<li>
<p><a id="VUID-vkGetPhysicalDeviceSparseImageFormatProperties-usage-requiredbitmask"></a> <code>usage</code> <strong class="purple">must</strong> not be <code>0</code></p>
</li>
<li>
<p><a id="VUID-vkGetPhysicalDeviceSparseImageFormatProperties-tiling-parameter"></a> <code>tiling</code> <strong class="purple">must</strong> be a valid <a href="#VkImageTiling">VkImageTiling</a> value</p>
</li>
<li>
<p><a id="VUID-vkGetPhysicalDeviceSparseImageFormatProperties-pPropertyCount-parameter"></a> <code>pPropertyCount</code> <strong class="purple">must</strong> be a valid pointer to a <code>uint32_t</code> value</p>
</li>
<li>
<p><a id="VUID-vkGetPhysicalDeviceSparseImageFormatProperties-pProperties-parameter"></a> If the value referenced by <code>pPropertyCount</code> is not <code>0</code>, and <code>pProperties</code> is not <code>NULL</code>, <code>pProperties</code> <strong class="purple">must</strong> be a valid pointer to an array of <code>pPropertyCount</code> <code>VkSparseImageFormatProperties</code> structures</p>
</li>
</ul>
</div>
</div>
</div>
</div>
<div class="sect3">
<h4 id="_see_also_261">See Also</h4>
<div class="paragraph">
<p><a href="#VkFormat">VkFormat</a>, <a href="#VkImageTiling">VkImageTiling</a>, <a href="#VkImageType">VkImageType</a>, <a href="#VkImageUsageFlags">VkImageUsageFlags</a>, <a href="#VkPhysicalDevice">VkPhysicalDevice</a>, <a href="#VkSampleCountFlagBits">VkSampleCountFlagBits</a>, <a href="#VkSparseImageFormatProperties">VkSparseImageFormatProperties</a></p>
</div>
</div>
<div class="sect3">
<h4 id="_document_notes_261">Document Notes</h4>
<div class="paragraph">
<p>For more information, see the Vulkan Specification at URL</p>
</div>
<div class="paragraph">
<p><a href="https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#vkGetPhysicalDeviceSparseImageFormatProperties" class="bare">https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#vkGetPhysicalDeviceSparseImageFormatProperties</a></p>
</div>
<div class="paragraph">
<p>This page is extracted from the Vulkan Specification.
Fixes and changes should be made to the Specification, not directly.</p>
</div>
<div style="page-break-after: always;"></div>
</div>
</div>
<div class="sect2">
<h3 id="_vkgetphysicaldevicesparseimageformatproperties23">vkGetPhysicalDeviceSparseImageFormatProperties2(3)</h3>
<div class="sect3">
<h4 id="_name_262">Name</h4>
<div class="paragraph">
<p>vkGetPhysicalDeviceSparseImageFormatProperties2 - Retrieve properties of an image format applied to sparse images</p>
</div>
</div>
<div class="sect3">
<h4 id="_c_specification_262">C Specification</h4>
<div class="paragraph">
<p><code>vkGetPhysicalDeviceSparseImageFormatProperties2</code> returns an array of
<a href="#VkSparseImageFormatProperties2">VkSparseImageFormatProperties2</a>.
Each element will describe properties for one set of image aspects that are
bound simultaneously in the image.
This is usually one element for each aspect in the image, but for
interleaved depth/stencil images there is only one element describing the
combined aspects.</p>
</div>
<div id="vkGetPhysicalDeviceSparseImageFormatProperties2" class="listingblock">
<div class="content">
<pre class="highlight"><code class="language-c++" data-lang="c++">void vkGetPhysicalDeviceSparseImageFormatProperties2(
    VkPhysicalDevice                            physicalDevice,
    const VkPhysicalDeviceSparseImageFormatInfo2* pFormatInfo,
    uint32_t*                                   pPropertyCount,
    VkSparseImageFormatProperties2*             pProperties);</code></pre>
</div>
</div>
<div class="paragraph">
<p>or the equivalent command</p>
</div>
<div id="vkGetPhysicalDeviceSparseImageFormatProperties2KHR" class="listingblock">
<div class="content">
<pre class="highlight"><code class="language-c++" data-lang="c++">void vkGetPhysicalDeviceSparseImageFormatProperties2KHR(
    VkPhysicalDevice                            physicalDevice,
    const VkPhysicalDeviceSparseImageFormatInfo2* pFormatInfo,
    uint32_t*                                   pPropertyCount,
    VkSparseImageFormatProperties2*             pProperties);</code></pre>
</div>
</div>
</div>
<div class="sect3">
<h4 id="_parameters_262">Parameters</h4>
<div class="ulist">
<ul>
<li>
<p><code>physicalDevice</code> is the physical device from which to query the
sparse image capabilities.</p>
</li>
<li>
<p><code>pFormatInfo</code> is a pointer to a structure of type
<a href="#VkPhysicalDeviceSparseImageFormatInfo2">VkPhysicalDeviceSparseImageFormatInfo2</a> containing input parameters
to the command.</p>
</li>
<li>
<p><code>pPropertyCount</code> is a pointer to an integer related to the number of
sparse format properties available or queried, as described below.</p>
</li>
<li>
<p><code>pProperties</code> is either <code>NULL</code> or a pointer to an array of
<a href="#VkSparseImageFormatProperties2">VkSparseImageFormatProperties2</a> structures.</p>
</li>
</ul>
</div>
</div>
<div class="sect3">
<h4 id="_description_262">Description</h4>
<div class="paragraph">
<p><code>vkGetPhysicalDeviceSparseImageFormatProperties2</code> behaves identically to
<a href="#vkGetPhysicalDeviceSparseImageFormatProperties">vkGetPhysicalDeviceSparseImageFormatProperties</a>, with the ability to
return extended information by adding extension structures to the
<code>pNext</code> chain of its <code>pProperties</code> parameter.</p>
</div>
<div class="sidebarblock">
<div class="content">
<div class="title">Valid Usage (Implicit)</div>
<div class="ulist">
<ul>
<li>
<p><a id="VUID-vkGetPhysicalDeviceSparseImageFormatProperties2-physicalDevice-parameter"></a> <code>physicalDevice</code> <strong class="purple">must</strong> be a valid <code>VkPhysicalDevice</code> handle</p>
</li>
<li>
<p><a id="VUID-vkGetPhysicalDeviceSparseImageFormatProperties2-pFormatInfo-parameter"></a> <code>pFormatInfo</code> <strong class="purple">must</strong> be a valid pointer to a valid <code>VkPhysicalDeviceSparseImageFormatInfo2</code> structure</p>
</li>
<li>
<p><a id="VUID-vkGetPhysicalDeviceSparseImageFormatProperties2-pPropertyCount-parameter"></a> <code>pPropertyCount</code> <strong class="purple">must</strong> be a valid pointer to a <code>uint32_t</code> value</p>
</li>
<li>
<p><a id="VUID-vkGetPhysicalDeviceSparseImageFormatProperties2-pProperties-parameter"></a> If the value referenced by <code>pPropertyCount</code> is not <code>0</code>, and <code>pProperties</code> is not <code>NULL</code>, <code>pProperties</code> <strong class="purple">must</strong> be a valid pointer to an array of <code>pPropertyCount</code> <code>VkSparseImageFormatProperties2</code> structures</p>
</li>
</ul>
</div>
</div>
</div>
</div>
<div class="sect3">
<h4 id="_see_also_262">See Also</h4>
<div class="paragraph">
<p><a href="#VkPhysicalDevice">VkPhysicalDevice</a>, <a href="#VkPhysicalDeviceSparseImageFormatInfo2">VkPhysicalDeviceSparseImageFormatInfo2</a>, <a href="#VkSparseImageFormatProperties2">VkSparseImageFormatProperties2</a></p>
</div>
</div>
<div class="sect3">
<h4 id="_document_notes_262">Document Notes</h4>
<div class="paragraph">
<p>For more information, see the Vulkan Specification at URL</p>
</div>
<div class="paragraph">
<p><a href="https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#vkGetPhysicalDeviceSparseImageFormatProperties2" class="bare">https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#vkGetPhysicalDeviceSparseImageFormatProperties2</a></p>
</div>
<div class="paragraph">
<p>This page is extracted from the Vulkan Specification.
Fixes and changes should be made to the Specification, not directly.</p>
</div>
<div style="page-break-after: always;"></div>
</div>
</div>
<div class="sect2">
<h3 id="_vkgetphysicaldevicesurfacecapabilities2ext3">vkGetPhysicalDeviceSurfaceCapabilities2EXT(3)</h3>
<div class="sect3">
<h4 id="_name_263">Name</h4>
<div class="paragraph">
<p>vkGetPhysicalDeviceSurfaceCapabilities2EXT - Query surface capabilities</p>
</div>
</div>
<div class="sect3">
<h4 id="_c_specification_263">C Specification</h4>
<div class="paragraph">
<p>To query the basic capabilities of a surface, needed in order to create a
swapchain, call:</p>
</div>
<div id="vkGetPhysicalDeviceSurfaceCapabilities2EXT" class="listingblock">
<div class="content">
<pre class="highlight"><code class="language-c++" data-lang="c++">VkResult vkGetPhysicalDeviceSurfaceCapabilities2EXT(
    VkPhysicalDevice                            physicalDevice,
    VkSurfaceKHR                                surface,
    VkSurfaceCapabilities2EXT*                  pSurfaceCapabilities);</code></pre>
</div>
</div>
</div>
<div class="sect3">
<h4 id="_parameters_263">Parameters</h4>
<div class="ulist">
<ul>
<li>
<p><code>physicalDevice</code> is the physical device that will be associated with
the swapchain to be created, as described for
<a href="#vkCreateSwapchainKHR">vkCreateSwapchainKHR</a>.</p>
</li>
<li>
<p><code>surface</code> is the surface that will be associated with the swapchain.</p>
</li>
<li>
<p><code>pSurfaceCapabilities</code> is a pointer to an instance of the
<a href="#VkSurfaceCapabilities2EXT">VkSurfaceCapabilities2EXT</a> structure in which the capabilities are
returned.</p>
</li>
</ul>
</div>
</div>
<div class="sect3">
<h4 id="_description_263">Description</h4>
<div class="paragraph">
<p><code>vkGetPhysicalDeviceSurfaceCapabilities2EXT</code> behaves similarly to
<a href="#vkGetPhysicalDeviceSurfaceCapabilitiesKHR">vkGetPhysicalDeviceSurfaceCapabilitiesKHR</a>, with the ability to return
extended information by adding extension structures to the <code>pNext</code> chain
of its <code>pSurfaceCapabilities</code> parameter.</p>
</div>
<div class="sidebarblock">
<div class="content">
<div class="title">Valid Usage (Implicit)</div>
<div class="ulist">
<ul>
<li>
<p><a id="VUID-vkGetPhysicalDeviceSurfaceCapabilities2EXT-physicalDevice-parameter"></a> <code>physicalDevice</code> <strong class="purple">must</strong> be a valid <code>VkPhysicalDevice</code> handle</p>
</li>
<li>
<p><a id="VUID-vkGetPhysicalDeviceSurfaceCapabilities2EXT-surface-parameter"></a> <code>surface</code> <strong class="purple">must</strong> be a valid <code>VkSurfaceKHR</code> handle</p>
</li>
<li>
<p><a id="VUID-vkGetPhysicalDeviceSurfaceCapabilities2EXT-pSurfaceCapabilities-parameter"></a> <code>pSurfaceCapabilities</code> <strong class="purple">must</strong> be a valid pointer to a <code>VkSurfaceCapabilities2EXT</code> structure</p>
</li>
<li>
<p><a id="VUID-vkGetPhysicalDeviceSurfaceCapabilities2EXT-commonparent"></a> Both of <code>physicalDevice</code>, and <code>surface</code> <strong class="purple">must</strong> have been created, allocated, or retrieved from the same <code>VkInstance</code></p>
</li>
</ul>
</div>
</div>
</div>
<div class="sidebarblock">
<div class="content">
<div class="title">Return Codes</div>
<div class="dlist">
<dl>
<dt class="hdlist1"><a href="#fundamentals-successcodes">Success</a></dt>
<dd>
<div class="ulist">
<ul>
<li>
<p><code>VK_SUCCESS</code></p>
</li>
</ul>
</div>
</dd>
<dt class="hdlist1"><a href="#fundamentals-errorcodes">Failure</a></dt>
<dd>
<div class="ulist">
<ul>
<li>
<p><code>VK_ERROR_OUT_OF_HOST_MEMORY</code></p>
</li>
<li>
<p><code>VK_ERROR_OUT_OF_DEVICE_MEMORY</code></p>
</li>
<li>
<p><code>VK_ERROR_SURFACE_LOST_KHR</code></p>
</li>
</ul>
</div>
</dd>
</dl>
</div>
</div>
</div>
</div>
<div class="sect3">
<h4 id="_see_also_263">See Also</h4>
<div class="paragraph">
<p><a href="#VkPhysicalDevice">VkPhysicalDevice</a>, <a href="#VkSurfaceCapabilities2EXT">VkSurfaceCapabilities2EXT</a>, <a href="#VkSurfaceKHR">VkSurfaceKHR</a></p>
</div>
</div>
<div class="sect3">
<h4 id="_document_notes_263">Document Notes</h4>
<div class="paragraph">
<p>For more information, see the Vulkan Specification at URL</p>
</div>
<div class="paragraph">
<p><a href="https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#vkGetPhysicalDeviceSurfaceCapabilities2EXT" class="bare">https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#vkGetPhysicalDeviceSurfaceCapabilities2EXT</a></p>
</div>
<div class="paragraph">
<p>This page is extracted from the Vulkan Specification.
Fixes and changes should be made to the Specification, not directly.</p>
</div>
<div style="page-break-after: always;"></div>
</div>
</div>
<div class="sect2">
<h3 id="_vkgetphysicaldevicesurfacecapabilities2khr3">vkGetPhysicalDeviceSurfaceCapabilities2KHR(3)</h3>
<div class="sect3">
<h4 id="_name_264">Name</h4>
<div class="paragraph">
<p>vkGetPhysicalDeviceSurfaceCapabilities2KHR - Reports capabilities of a surface on a physical device</p>
</div>
</div>
<div class="sect3">
<h4 id="_c_specification_264">C Specification</h4>
<div class="paragraph">
<p>To query the basic capabilities of a surface defined by the core or
extensions, call:</p>
</div>
<div id="vkGetPhysicalDeviceSurfaceCapabilities2KHR" class="listingblock">
<div class="content">
<pre class="highlight"><code class="language-c++" data-lang="c++">VkResult vkGetPhysicalDeviceSurfaceCapabilities2KHR(
    VkPhysicalDevice                            physicalDevice,
    const VkPhysicalDeviceSurfaceInfo2KHR*      pSurfaceInfo,
    VkSurfaceCapabilities2KHR*                  pSurfaceCapabilities);</code></pre>
</div>
</div>
</div>
<div class="sect3">
<h4 id="_parameters_264">Parameters</h4>
<div class="ulist">
<ul>
<li>
<p><code>physicalDevice</code> is the physical device that will be associated with
the swapchain to be created, as described for
<a href="#vkCreateSwapchainKHR">vkCreateSwapchainKHR</a>.</p>
</li>
<li>
<p><code>pSurfaceInfo</code> points to an instance of the
<a href="#VkPhysicalDeviceSurfaceInfo2KHR">VkPhysicalDeviceSurfaceInfo2KHR</a> structure, describing the surface
and other fixed parameters that would be consumed by
<a href="#vkCreateSwapchainKHR">vkCreateSwapchainKHR</a>.</p>
</li>
<li>
<p><code>pSurfaceCapabilities</code> points to an instance of the
<a href="#VkSurfaceCapabilities2KHR">VkSurfaceCapabilities2KHR</a> structure in which the capabilities are
returned.</p>
</li>
</ul>
</div>
</div>
<div class="sect3">
<h4 id="_description_264">Description</h4>
<div class="paragraph">
<p><code>vkGetPhysicalDeviceSurfaceCapabilities2KHR</code> behaves similarly to
<a href="#vkGetPhysicalDeviceSurfaceCapabilitiesKHR">vkGetPhysicalDeviceSurfaceCapabilitiesKHR</a>, with the ability to specify
extended inputs via chained input structures, and to return extended
information via chained output structures.</p>
</div>
<div class="sidebarblock">
<div class="content">
<div class="title">Valid Usage</div>
<div class="ulist">
<ul>
<li>
<p><a id="VUID-vkGetPhysicalDeviceSurfaceCapabilities2KHR-pNext-02671"></a>
If an instance of <a href="#VkSurfaceCapabilitiesFullScreenExclusiveEXT">VkSurfaceCapabilitiesFullScreenExclusiveEXT</a> is
included in the <code>pNext</code> chain of <code>pSurfaceCapabilities</code>, an
instance of <a href="#VkSurfaceFullScreenExclusiveWin32InfoEXT">VkSurfaceFullScreenExclusiveWin32InfoEXT</a> <strong class="purple">must</strong> be
included in the <code>pNext</code> chain of <code>pSurfaceInfo</code>.</p>
</li>
</ul>
</div>
</div>
</div>
<div class="sidebarblock">
<div class="content">
<div class="title">Valid Usage (Implicit)</div>
<div class="ulist">
<ul>
<li>
<p><a id="VUID-vkGetPhysicalDeviceSurfaceCapabilities2KHR-physicalDevice-parameter"></a> <code>physicalDevice</code> <strong class="purple">must</strong> be a valid <code>VkPhysicalDevice</code> handle</p>
</li>
<li>
<p><a id="VUID-vkGetPhysicalDeviceSurfaceCapabilities2KHR-pSurfaceInfo-parameter"></a> <code>pSurfaceInfo</code> <strong class="purple">must</strong> be a valid pointer to a valid <code>VkPhysicalDeviceSurfaceInfo2KHR</code> structure</p>
</li>
<li>
<p><a id="VUID-vkGetPhysicalDeviceSurfaceCapabilities2KHR-pSurfaceCapabilities-parameter"></a> <code>pSurfaceCapabilities</code> <strong class="purple">must</strong> be a valid pointer to a <code>VkSurfaceCapabilities2KHR</code> structure</p>
</li>
</ul>
</div>
</div>
</div>
<div class="sidebarblock">
<div class="content">
<div class="title">Return Codes</div>
<div class="dlist">
<dl>
<dt class="hdlist1"><a href="#fundamentals-successcodes">Success</a></dt>
<dd>
<div class="ulist">
<ul>
<li>
<p><code>VK_SUCCESS</code></p>
</li>
</ul>
</div>
</dd>
<dt class="hdlist1"><a href="#fundamentals-errorcodes">Failure</a></dt>
<dd>
<div class="ulist">
<ul>
<li>
<p><code>VK_ERROR_OUT_OF_HOST_MEMORY</code></p>
</li>
<li>
<p><code>VK_ERROR_OUT_OF_DEVICE_MEMORY</code></p>
</li>
<li>
<p><code>VK_ERROR_SURFACE_LOST_KHR</code></p>
</li>
</ul>
</div>
</dd>
</dl>
</div>
</div>
</div>
</div>
<div class="sect3">
<h4 id="_see_also_264">See Also</h4>
<div class="paragraph">
<p><a href="#VkPhysicalDevice">VkPhysicalDevice</a>, <a href="#VkPhysicalDeviceSurfaceInfo2KHR">VkPhysicalDeviceSurfaceInfo2KHR</a>, <a href="#VkSurfaceCapabilities2KHR">VkSurfaceCapabilities2KHR</a></p>
</div>
</div>
<div class="sect3">
<h4 id="_document_notes_264">Document Notes</h4>
<div class="paragraph">
<p>For more information, see the Vulkan Specification at URL</p>
</div>
<div class="paragraph">
<p><a href="https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#vkGetPhysicalDeviceSurfaceCapabilities2KHR" class="bare">https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#vkGetPhysicalDeviceSurfaceCapabilities2KHR</a></p>
</div>
<div class="paragraph">
<p>This page is extracted from the Vulkan Specification.
Fixes and changes should be made to the Specification, not directly.</p>
</div>
<div style="page-break-after: always;"></div>
</div>
</div>
<div class="sect2">
<h3 id="_vkgetphysicaldevicesurfacecapabilitieskhr3">vkGetPhysicalDeviceSurfaceCapabilitiesKHR(3)</h3>
<div class="sect3">
<h4 id="_name_265">Name</h4>
<div class="paragraph">
<p>vkGetPhysicalDeviceSurfaceCapabilitiesKHR - Query surface capabilities</p>
</div>
</div>
<div class="sect3">
<h4 id="_c_specification_265">C Specification</h4>
<div class="paragraph">
<p>To query the basic capabilities of a surface, needed in order to create a
swapchain, call:</p>
</div>
<div id="vkGetPhysicalDeviceSurfaceCapabilitiesKHR" class="listingblock">
<div class="content">
<pre class="highlight"><code class="language-c++" data-lang="c++">VkResult vkGetPhysicalDeviceSurfaceCapabilitiesKHR(
    VkPhysicalDevice                            physicalDevice,
    VkSurfaceKHR                                surface,
    VkSurfaceCapabilitiesKHR*                   pSurfaceCapabilities);</code></pre>
</div>
</div>
</div>
<div class="sect3">
<h4 id="_parameters_265">Parameters</h4>
<div class="ulist">
<ul>
<li>
<p><code>physicalDevice</code> is the physical device that will be associated with
the swapchain to be created, as described for
<a href="#vkCreateSwapchainKHR">vkCreateSwapchainKHR</a>.</p>
</li>
<li>
<p><code>surface</code> is the surface that will be associated with the swapchain.</p>
</li>
<li>
<p><code>pSurfaceCapabilities</code> is a pointer to an instance of the
<a href="#VkSurfaceCapabilitiesKHR">VkSurfaceCapabilitiesKHR</a> structure in which the capabilities are
returned.</p>
</li>
</ul>
</div>
</div>
<div class="sect3">
<h4 id="_description_265">Description</h4>
<div class="sidebarblock">
<div class="content">
<div class="title">Valid Usage (Implicit)</div>
<div class="ulist">
<ul>
<li>
<p><a id="VUID-vkGetPhysicalDeviceSurfaceCapabilitiesKHR-physicalDevice-parameter"></a> <code>physicalDevice</code> <strong class="purple">must</strong> be a valid <code>VkPhysicalDevice</code> handle</p>
</li>
<li>
<p><a id="VUID-vkGetPhysicalDeviceSurfaceCapabilitiesKHR-surface-parameter"></a> <code>surface</code> <strong class="purple">must</strong> be a valid <code>VkSurfaceKHR</code> handle</p>
</li>
<li>
<p><a id="VUID-vkGetPhysicalDeviceSurfaceCapabilitiesKHR-pSurfaceCapabilities-parameter"></a> <code>pSurfaceCapabilities</code> <strong class="purple">must</strong> be a valid pointer to a <code>VkSurfaceCapabilitiesKHR</code> structure</p>
</li>
<li>
<p><a id="VUID-vkGetPhysicalDeviceSurfaceCapabilitiesKHR-commonparent"></a> Both of <code>physicalDevice</code>, and <code>surface</code> <strong class="purple">must</strong> have been created, allocated, or retrieved from the same <code>VkInstance</code></p>
</li>
</ul>
</div>
</div>
</div>
<div class="sidebarblock">
<div class="content">
<div class="title">Return Codes</div>
<div class="dlist">
<dl>
<dt class="hdlist1"><a href="#fundamentals-successcodes">Success</a></dt>
<dd>
<div class="ulist">
<ul>
<li>
<p><code>VK_SUCCESS</code></p>
</li>
</ul>
</div>
</dd>
<dt class="hdlist1"><a href="#fundamentals-errorcodes">Failure</a></dt>
<dd>
<div class="ulist">
<ul>
<li>
<p><code>VK_ERROR_OUT_OF_HOST_MEMORY</code></p>
</li>
<li>
<p><code>VK_ERROR_OUT_OF_DEVICE_MEMORY</code></p>
</li>
<li>
<p><code>VK_ERROR_SURFACE_LOST_KHR</code></p>
</li>
</ul>
</div>
</dd>
</dl>
</div>
</div>
</div>
</div>
<div class="sect3">
<h4 id="_see_also_265">See Also</h4>
<div class="paragraph">
<p><a href="#VkPhysicalDevice">VkPhysicalDevice</a>, <a href="#VkSurfaceCapabilitiesKHR">VkSurfaceCapabilitiesKHR</a>, <a href="#VkSurfaceKHR">VkSurfaceKHR</a></p>
</div>
</div>
<div class="sect3">
<h4 id="_document_notes_265">Document Notes</h4>
<div class="paragraph">
<p>For more information, see the Vulkan Specification at URL</p>
</div>
<div class="paragraph">
<p><a href="https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#vkGetPhysicalDeviceSurfaceCapabilitiesKHR" class="bare">https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#vkGetPhysicalDeviceSurfaceCapabilitiesKHR</a></p>
</div>
<div class="paragraph">
<p>This page is extracted from the Vulkan Specification.
Fixes and changes should be made to the Specification, not directly.</p>
</div>
<div style="page-break-after: always;"></div>
</div>
</div>
<div class="sect2">
<h3 id="_vkgetphysicaldevicesurfaceformats2khr3">vkGetPhysicalDeviceSurfaceFormats2KHR(3)</h3>
<div class="sect3">
<h4 id="_name_266">Name</h4>
<div class="paragraph">
<p>vkGetPhysicalDeviceSurfaceFormats2KHR - Query color formats supported by surface</p>
</div>
</div>
<div class="sect3">
<h4 id="_c_specification_266">C Specification</h4>
<div class="paragraph">
<p>To query the supported swapchain format tuples for a surface, call:</p>
</div>
<div id="vkGetPhysicalDeviceSurfaceFormats2KHR" class="listingblock">
<div class="content">
<pre class="highlight"><code class="language-c++" data-lang="c++">VkResult vkGetPhysicalDeviceSurfaceFormats2KHR(
    VkPhysicalDevice                            physicalDevice,
    const VkPhysicalDeviceSurfaceInfo2KHR*      pSurfaceInfo,
    uint32_t*                                   pSurfaceFormatCount,
    VkSurfaceFormat2KHR*                        pSurfaceFormats);</code></pre>
</div>
</div>
</div>
<div class="sect3">
<h4 id="_parameters_266">Parameters</h4>
<div class="ulist">
<ul>
<li>
<p><code>physicalDevice</code> is the physical device that will be associated with
the swapchain to be created, as described for
<a href="#vkCreateSwapchainKHR">vkCreateSwapchainKHR</a>.</p>
</li>
<li>
<p><code>pSurfaceInfo</code> points to an instance of the
<a href="#VkPhysicalDeviceSurfaceInfo2KHR">VkPhysicalDeviceSurfaceInfo2KHR</a> structure, describing the surface
and other fixed parameters that would be consumed by
<a href="#vkCreateSwapchainKHR">vkCreateSwapchainKHR</a>.</p>
</li>
<li>
<p><code>pSurfaceFormatCount</code> is a pointer to an integer related to the
number of format tuples available or queried, as described below.</p>
</li>
<li>
<p><code>pSurfaceFormats</code> is either <code>NULL</code> or a pointer to an array of
<a href="#VkSurfaceFormat2KHR">VkSurfaceFormat2KHR</a> structures.</p>
</li>
</ul>
</div>
</div>
<div class="sect3">
<h4 id="_description_266">Description</h4>
<div class="paragraph">
<p>If <code>pSurfaceFormats</code> is <code>NULL</code>, then the number of format tuples
supported for the given <code>surface</code> is returned in
<code>pSurfaceFormatCount</code>.
The number of format tuples supported will be greater than or equal to 1.
Otherwise, <code>pSurfaceFormatCount</code> <strong class="purple">must</strong> point to a variable set by the
user to the number of elements in the <code>pSurfaceFormats</code> array, and on
return the variable is overwritten with the number of structures actually
written to <code>pSurfaceFormats</code>.
If the value of <code>pSurfaceFormatCount</code> is less than the number of format
tuples supported, at most <code>pSurfaceFormatCount</code> structures will be
written.
If <code>pSurfaceFormatCount</code> is smaller than the number of format tuples
supported for the surface parameters described in <code>pSurfaceInfo</code>,
<code>VK_INCOMPLETE</code> will be returned instead of <code>VK_SUCCESS</code> to indicate
that not all the available values were returned.</p>
</div>
<div class="sidebarblock">
<div class="content">
<div class="title">Valid Usage (Implicit)</div>
<div class="ulist">
<ul>
<li>
<p><a id="VUID-vkGetPhysicalDeviceSurfaceFormats2KHR-physicalDevice-parameter"></a> <code>physicalDevice</code> <strong class="purple">must</strong> be a valid <code>VkPhysicalDevice</code> handle</p>
</li>
<li>
<p><a id="VUID-vkGetPhysicalDeviceSurfaceFormats2KHR-pSurfaceInfo-parameter"></a> <code>pSurfaceInfo</code> <strong class="purple">must</strong> be a valid pointer to a valid <code>VkPhysicalDeviceSurfaceInfo2KHR</code> structure</p>
</li>
<li>
<p><a id="VUID-vkGetPhysicalDeviceSurfaceFormats2KHR-pSurfaceFormatCount-parameter"></a> <code>pSurfaceFormatCount</code> <strong class="purple">must</strong> be a valid pointer to a <code>uint32_t</code> value</p>
</li>
<li>
<p><a id="VUID-vkGetPhysicalDeviceSurfaceFormats2KHR-pSurfaceFormats-parameter"></a> If the value referenced by <code>pSurfaceFormatCount</code> is not <code>0</code>, and <code>pSurfaceFormats</code> is not <code>NULL</code>, <code>pSurfaceFormats</code> <strong class="purple">must</strong> be a valid pointer to an array of <code>pSurfaceFormatCount</code> <code>VkSurfaceFormat2KHR</code> structures</p>
</li>
</ul>
</div>
</div>
</div>
<div class="sidebarblock">
<div class="content">
<div class="title">Return Codes</div>
<div class="dlist">
<dl>
<dt class="hdlist1"><a href="#fundamentals-successcodes">Success</a></dt>
<dd>
<div class="ulist">
<ul>
<li>
<p><code>VK_SUCCESS</code></p>
</li>
<li>
<p><code>VK_INCOMPLETE</code></p>
</li>
</ul>
</div>
</dd>
<dt class="hdlist1"><a href="#fundamentals-errorcodes">Failure</a></dt>
<dd>
<div class="ulist">
<ul>
<li>
<p><code>VK_ERROR_OUT_OF_HOST_MEMORY</code></p>
</li>
<li>
<p><code>VK_ERROR_OUT_OF_DEVICE_MEMORY</code></p>
</li>
<li>
<p><code>VK_ERROR_SURFACE_LOST_KHR</code></p>
</li>
</ul>
</div>
</dd>
</dl>
</div>
</div>
</div>
</div>
<div class="sect3">
<h4 id="_see_also_266">See Also</h4>
<div class="paragraph">
<p><a href="#VkPhysicalDevice">VkPhysicalDevice</a>, <a href="#VkPhysicalDeviceSurfaceInfo2KHR">VkPhysicalDeviceSurfaceInfo2KHR</a>, <a href="#VkSurfaceFormat2KHR">VkSurfaceFormat2KHR</a></p>
</div>
</div>
<div class="sect3">
<h4 id="_document_notes_266">Document Notes</h4>
<div class="paragraph">
<p>For more information, see the Vulkan Specification at URL</p>
</div>
<div class="paragraph">
<p><a href="https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#vkGetPhysicalDeviceSurfaceFormats2KHR" class="bare">https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#vkGetPhysicalDeviceSurfaceFormats2KHR</a></p>
</div>
<div class="paragraph">
<p>This page is extracted from the Vulkan Specification.
Fixes and changes should be made to the Specification, not directly.</p>
</div>
<div style="page-break-after: always;"></div>
</div>
</div>
<div class="sect2">
<h3 id="_vkgetphysicaldevicesurfaceformatskhr3">vkGetPhysicalDeviceSurfaceFormatsKHR(3)</h3>
<div class="sect3">
<h4 id="_name_267">Name</h4>
<div class="paragraph">
<p>vkGetPhysicalDeviceSurfaceFormatsKHR - Query color formats supported by surface</p>
</div>
</div>
<div class="sect3">
<h4 id="_c_specification_267">C Specification</h4>
<div class="paragraph">
<p>To query the supported swapchain format-color space pairs for a surface,
call:</p>
</div>
<div id="vkGetPhysicalDeviceSurfaceFormatsKHR" class="listingblock">
<div class="content">
<pre class="highlight"><code class="language-c++" data-lang="c++">VkResult vkGetPhysicalDeviceSurfaceFormatsKHR(
    VkPhysicalDevice                            physicalDevice,
    VkSurfaceKHR                                surface,
    uint32_t*                                   pSurfaceFormatCount,
    VkSurfaceFormatKHR*                         pSurfaceFormats);</code></pre>
</div>
</div>
</div>
<div class="sect3">
<h4 id="_parameters_267">Parameters</h4>
<div class="ulist">
<ul>
<li>
<p><code>physicalDevice</code> is the physical device that will be associated with
the swapchain to be created, as described for
<a href="#vkCreateSwapchainKHR">vkCreateSwapchainKHR</a>.</p>
</li>
<li>
<p><code>surface</code> is the surface that will be associated with the swapchain.</p>
</li>
<li>
<p><code>pSurfaceFormatCount</code> is a pointer to an integer related to the
number of format pairs available or queried, as described below.</p>
</li>
<li>
<p><code>pSurfaceFormats</code> is either <code>NULL</code> or a pointer to an array of
<code>VkSurfaceFormatKHR</code> structures.</p>
</li>
</ul>
</div>
</div>
<div class="sect3">
<h4 id="_description_267">Description</h4>
<div class="paragraph">
<p>If <code>pSurfaceFormats</code> is <code>NULL</code>, then the number of format pairs
supported for the given <code>surface</code> is returned in
<code>pSurfaceFormatCount</code>.
The number of format pairs supported will be greater than or equal to 1.
Otherwise, <code>pSurfaceFormatCount</code> <strong class="purple">must</strong> point to a variable set by the
user to the number of elements in the <code>pSurfaceFormats</code> array, and on
return the variable is overwritten with the number of structures actually
written to <code>pSurfaceFormats</code>.
If the value of <code>pSurfaceFormatCount</code> is less than the number of format
pairs supported, at most <code>pSurfaceFormatCount</code> structures will be
written.
If <code>pSurfaceFormatCount</code> is smaller than the number of format pairs
supported for the given <code>surface</code>, <code>VK_INCOMPLETE</code> will be returned
instead of <code>VK_SUCCESS</code> to indicate that not all the available values
were returned.</p>
</div>
<div class="sidebarblock">
<div class="content">
<div class="title">Valid Usage (Implicit)</div>
<div class="ulist">
<ul>
<li>
<p><a id="VUID-vkGetPhysicalDeviceSurfaceFormatsKHR-physicalDevice-parameter"></a> <code>physicalDevice</code> <strong class="purple">must</strong> be a valid <code>VkPhysicalDevice</code> handle</p>
</li>
<li>
<p><a id="VUID-vkGetPhysicalDeviceSurfaceFormatsKHR-surface-parameter"></a> <code>surface</code> <strong class="purple">must</strong> be a valid <code>VkSurfaceKHR</code> handle</p>
</li>
<li>
<p><a id="VUID-vkGetPhysicalDeviceSurfaceFormatsKHR-pSurfaceFormatCount-parameter"></a> <code>pSurfaceFormatCount</code> <strong class="purple">must</strong> be a valid pointer to a <code>uint32_t</code> value</p>
</li>
<li>
<p><a id="VUID-vkGetPhysicalDeviceSurfaceFormatsKHR-pSurfaceFormats-parameter"></a> If the value referenced by <code>pSurfaceFormatCount</code> is not <code>0</code>, and <code>pSurfaceFormats</code> is not <code>NULL</code>, <code>pSurfaceFormats</code> <strong class="purple">must</strong> be a valid pointer to an array of <code>pSurfaceFormatCount</code> <code>VkSurfaceFormatKHR</code> structures</p>
</li>
<li>
<p><a id="VUID-vkGetPhysicalDeviceSurfaceFormatsKHR-commonparent"></a> Both of <code>physicalDevice</code>, and <code>surface</code> <strong class="purple">must</strong> have been created, allocated, or retrieved from the same <code>VkInstance</code></p>
</li>
</ul>
</div>
</div>
</div>
<div class="sidebarblock">
<div class="content">
<div class="title">Return Codes</div>
<div class="dlist">
<dl>
<dt class="hdlist1"><a href="#fundamentals-successcodes">Success</a></dt>
<dd>
<div class="ulist">
<ul>
<li>
<p><code>VK_SUCCESS</code></p>
</li>
<li>
<p><code>VK_INCOMPLETE</code></p>
</li>
</ul>
</div>
</dd>
<dt class="hdlist1"><a href="#fundamentals-errorcodes">Failure</a></dt>
<dd>
<div class="ulist">
<ul>
<li>
<p><code>VK_ERROR_OUT_OF_HOST_MEMORY</code></p>
</li>
<li>
<p><code>VK_ERROR_OUT_OF_DEVICE_MEMORY</code></p>
</li>
<li>
<p><code>VK_ERROR_SURFACE_LOST_KHR</code></p>
</li>
</ul>
</div>
</dd>
</dl>
</div>
</div>
</div>
</div>
<div class="sect3">
<h4 id="_see_also_267">See Also</h4>
<div class="paragraph">
<p><a href="#VkPhysicalDevice">VkPhysicalDevice</a>, <a href="#VkSurfaceFormatKHR">VkSurfaceFormatKHR</a>, <a href="#VkSurfaceKHR">VkSurfaceKHR</a></p>
</div>
</div>
<div class="sect3">
<h4 id="_document_notes_267">Document Notes</h4>
<div class="paragraph">
<p>For more information, see the Vulkan Specification at URL</p>
</div>
<div class="paragraph">
<p><a href="https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#vkGetPhysicalDeviceSurfaceFormatsKHR" class="bare">https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#vkGetPhysicalDeviceSurfaceFormatsKHR</a></p>
</div>
<div class="paragraph">
<p>This page is extracted from the Vulkan Specification.
Fixes and changes should be made to the Specification, not directly.</p>
</div>
<div style="page-break-after: always;"></div>
</div>
</div>
<div class="sect2">
<h3 id="_vkgetphysicaldevicesurfacepresentmodes2ext3">vkGetPhysicalDeviceSurfacePresentModes2EXT(3)</h3>
<div class="sect3">
<h4 id="_name_268">Name</h4>
<div class="paragraph">
<p>vkGetPhysicalDeviceSurfacePresentModes2EXT - Query supported presentation modes</p>
</div>
</div>
<div class="sect3">
<h4 id="_c_specification_268">C Specification</h4>
<div class="paragraph">
<p>Alternatively, to query the supported presentation modes for a surface
combined with select other fixed swapchain creation parameters, call:</p>
</div>
<div id="vkGetPhysicalDeviceSurfacePresentModes2EXT" class="listingblock">
<div class="content">
<pre class="highlight"><code class="language-c++" data-lang="c++">VkResult vkGetPhysicalDeviceSurfacePresentModes2EXT(
    VkPhysicalDevice                            physicalDevice,
    const VkPhysicalDeviceSurfaceInfo2KHR*      pSurfaceInfo,
    uint32_t*                                   pPresentModeCount,
    VkPresentModeKHR*                           pPresentModes);</code></pre>
</div>
</div>
</div>
<div class="sect3">
<h4 id="_parameters_268">Parameters</h4>
<div class="ulist">
<ul>
<li>
<p><code>physicalDevice</code> is the physical device that will be associated with
the swapchain to be created, as described for
<a href="#vkCreateSwapchainKHR">vkCreateSwapchainKHR</a>.</p>
</li>
<li>
<p><code>pSurfaceInfo</code> points to an instance of the
<a href="#VkPhysicalDeviceSurfaceInfo2KHR">VkPhysicalDeviceSurfaceInfo2KHR</a> structure, describing the surface
and other fixed parameters that would be consumed by
<a href="#vkCreateSwapchainKHR">vkCreateSwapchainKHR</a>.</p>
</li>
<li>
<p><code>pPresentModeCount</code> is a pointer to an integer related to the number
of presentation modes available or queried, as described below.</p>
</li>
<li>
<p><code>pPresentModes</code> is either <code>NULL</code> or a pointer to an array of
<a href="#VkPresentModeKHR">VkPresentModeKHR</a> values, indicating the supported presentation
modes.</p>
</li>
</ul>
</div>
</div>
<div class="sect3">
<h4 id="_description_268">Description</h4>
<div class="paragraph">
<p><code>vkGetPhysicalDeviceSurfacePresentModes2EXT</code> behaves similarly to
<a href="#vkGetPhysicalDeviceSurfacePresentModesKHR">vkGetPhysicalDeviceSurfacePresentModesKHR</a>, with the ability to specify
extended inputs via chained input structures.</p>
</div>
<div class="sidebarblock">
<div class="content">
<div class="title">Valid Usage (Implicit)</div>
<div class="ulist">
<ul>
<li>
<p><a id="VUID-vkGetPhysicalDeviceSurfacePresentModes2EXT-physicalDevice-parameter"></a> <code>physicalDevice</code> <strong class="purple">must</strong> be a valid <code>VkPhysicalDevice</code> handle</p>
</li>
<li>
<p><a id="VUID-vkGetPhysicalDeviceSurfacePresentModes2EXT-pSurfaceInfo-parameter"></a> <code>pSurfaceInfo</code> <strong class="purple">must</strong> be a valid pointer to a valid <code>VkPhysicalDeviceSurfaceInfo2KHR</code> structure</p>
</li>
<li>
<p><a id="VUID-vkGetPhysicalDeviceSurfacePresentModes2EXT-pPresentModeCount-parameter"></a> <code>pPresentModeCount</code> <strong class="purple">must</strong> be a valid pointer to a <code>uint32_t</code> value</p>
</li>
<li>
<p><a id="VUID-vkGetPhysicalDeviceSurfacePresentModes2EXT-pPresentModes-parameter"></a> If the value referenced by <code>pPresentModeCount</code> is not <code>0</code>, and <code>pPresentModes</code> is not <code>NULL</code>, <code>pPresentModes</code> <strong class="purple">must</strong> be a valid pointer to an array of <code>pPresentModeCount</code> <a href="#VkPresentModeKHR">VkPresentModeKHR</a> values</p>
</li>
</ul>
</div>
</div>
</div>
<div class="sidebarblock">
<div class="content">
<div class="title">Return Codes</div>
<div class="dlist">
<dl>
<dt class="hdlist1"><a href="#fundamentals-successcodes">Success</a></dt>
<dd>
<div class="ulist">
<ul>
<li>
<p><code>VK_SUCCESS</code></p>
</li>
<li>
<p><code>VK_INCOMPLETE</code></p>
</li>
</ul>
</div>
</dd>
<dt class="hdlist1"><a href="#fundamentals-errorcodes">Failure</a></dt>
<dd>
<div class="ulist">
<ul>
<li>
<p><code>VK_ERROR_OUT_OF_HOST_MEMORY</code></p>
</li>
<li>
<p><code>VK_ERROR_OUT_OF_DEVICE_MEMORY</code></p>
</li>
<li>
<p><code>VK_ERROR_SURFACE_LOST_KHR</code></p>
</li>
</ul>
</div>
</dd>
</dl>
</div>
</div>
</div>
</div>
<div class="sect3">
<h4 id="_see_also_268">See Also</h4>
<div class="paragraph">
<p><a href="#VkPhysicalDevice">VkPhysicalDevice</a>, <a href="#VkPhysicalDeviceSurfaceInfo2KHR">VkPhysicalDeviceSurfaceInfo2KHR</a>, <a href="#VkPresentModeKHR">VkPresentModeKHR</a></p>
</div>
</div>
<div class="sect3">
<h4 id="_document_notes_268">Document Notes</h4>
<div class="paragraph">
<p>For more information, see the Vulkan Specification at URL</p>
</div>
<div class="paragraph">
<p><a href="https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#vkGetPhysicalDeviceSurfacePresentModes2EXT" class="bare">https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#vkGetPhysicalDeviceSurfacePresentModes2EXT</a></p>
</div>
<div class="paragraph">
<p>This page is extracted from the Vulkan Specification.
Fixes and changes should be made to the Specification, not directly.</p>
</div>
<div style="page-break-after: always;"></div>
</div>
</div>
<div class="sect2">
<h3 id="_vkgetphysicaldevicesurfacepresentmodeskhr3">vkGetPhysicalDeviceSurfacePresentModesKHR(3)</h3>
<div class="sect3">
<h4 id="_name_269">Name</h4>
<div class="paragraph">
<p>vkGetPhysicalDeviceSurfacePresentModesKHR - Query supported presentation modes</p>
</div>
</div>
<div class="sect3">
<h4 id="_c_specification_269">C Specification</h4>
<div class="paragraph">
<p>To query the supported presentation modes for a surface, call:</p>
</div>
<div id="vkGetPhysicalDeviceSurfacePresentModesKHR" class="listingblock">
<div class="content">
<pre class="highlight"><code class="language-c++" data-lang="c++">VkResult vkGetPhysicalDeviceSurfacePresentModesKHR(
    VkPhysicalDevice                            physicalDevice,
    VkSurfaceKHR                                surface,
    uint32_t*                                   pPresentModeCount,
    VkPresentModeKHR*                           pPresentModes);</code></pre>
</div>
</div>
</div>
<div class="sect3">
<h4 id="_parameters_269">Parameters</h4>
<div class="ulist">
<ul>
<li>
<p><code>physicalDevice</code> is the physical device that will be associated with
the swapchain to be created, as described for
<a href="#vkCreateSwapchainKHR">vkCreateSwapchainKHR</a>.</p>
</li>
<li>
<p><code>surface</code> is the surface that will be associated with the swapchain.</p>
</li>
<li>
<p><code>pPresentModeCount</code> is a pointer to an integer related to the number
of presentation modes available or queried, as described below.</p>
</li>
<li>
<p><code>pPresentModes</code> is either <code>NULL</code> or a pointer to an array of
<a href="#VkPresentModeKHR">VkPresentModeKHR</a> values, indicating the supported presentation
modes.</p>
</li>
</ul>
</div>
</div>
<div class="sect3">
<h4 id="_description_269">Description</h4>
<div class="paragraph">
<p>If <code>pPresentModes</code> is <code>NULL</code>, then the number of presentation modes
supported for the given <code>surface</code> is returned in
<code>pPresentModeCount</code>.
Otherwise, <code>pPresentModeCount</code> <strong class="purple">must</strong> point to a variable set by the user
to the number of elements in the <code>pPresentModes</code> array, and on return
the variable is overwritten with the number of values actually written to
<code>pPresentModes</code>.
If the value of <code>pPresentModeCount</code> is less than the number of
presentation modes supported, at most <code>pPresentModeCount</code> values will be
written.
If <code>pPresentModeCount</code> is smaller than the number of presentation modes
supported for the given <code>surface</code>, <code>VK_INCOMPLETE</code> will be returned
instead of <code>VK_SUCCESS</code> to indicate that not all the available values
were returned.</p>
</div>
<div class="sidebarblock">
<div class="content">
<div class="title">Valid Usage (Implicit)</div>
<div class="ulist">
<ul>
<li>
<p><a id="VUID-vkGetPhysicalDeviceSurfacePresentModesKHR-physicalDevice-parameter"></a> <code>physicalDevice</code> <strong class="purple">must</strong> be a valid <code>VkPhysicalDevice</code> handle</p>
</li>
<li>
<p><a id="VUID-vkGetPhysicalDeviceSurfacePresentModesKHR-surface-parameter"></a> <code>surface</code> <strong class="purple">must</strong> be a valid <code>VkSurfaceKHR</code> handle</p>
</li>
<li>
<p><a id="VUID-vkGetPhysicalDeviceSurfacePresentModesKHR-pPresentModeCount-parameter"></a> <code>pPresentModeCount</code> <strong class="purple">must</strong> be a valid pointer to a <code>uint32_t</code> value</p>
</li>
<li>
<p><a id="VUID-vkGetPhysicalDeviceSurfacePresentModesKHR-pPresentModes-parameter"></a> If the value referenced by <code>pPresentModeCount</code> is not <code>0</code>, and <code>pPresentModes</code> is not <code>NULL</code>, <code>pPresentModes</code> <strong class="purple">must</strong> be a valid pointer to an array of <code>pPresentModeCount</code> <a href="#VkPresentModeKHR">VkPresentModeKHR</a> values</p>
</li>
<li>
<p><a id="VUID-vkGetPhysicalDeviceSurfacePresentModesKHR-commonparent"></a> Both of <code>physicalDevice</code>, and <code>surface</code> <strong class="purple">must</strong> have been created, allocated, or retrieved from the same <code>VkInstance</code></p>
</li>
</ul>
</div>
</div>
</div>
<div class="sidebarblock">
<div class="content">
<div class="title">Return Codes</div>
<div class="dlist">
<dl>
<dt class="hdlist1"><a href="#fundamentals-successcodes">Success</a></dt>
<dd>
<div class="ulist">
<ul>
<li>
<p><code>VK_SUCCESS</code></p>
</li>
<li>
<p><code>VK_INCOMPLETE</code></p>
</li>
</ul>
</div>
</dd>
<dt class="hdlist1"><a href="#fundamentals-errorcodes">Failure</a></dt>
<dd>
<div class="ulist">
<ul>
<li>
<p><code>VK_ERROR_OUT_OF_HOST_MEMORY</code></p>
</li>
<li>
<p><code>VK_ERROR_OUT_OF_DEVICE_MEMORY</code></p>
</li>
<li>
<p><code>VK_ERROR_SURFACE_LOST_KHR</code></p>
</li>
</ul>
</div>
</dd>
</dl>
</div>
</div>
</div>
</div>
<div class="sect3">
<h4 id="_see_also_269">See Also</h4>
<div class="paragraph">
<p><a href="#VkPhysicalDevice">VkPhysicalDevice</a>, <a href="#VkPresentModeKHR">VkPresentModeKHR</a>, <a href="#VkSurfaceKHR">VkSurfaceKHR</a></p>
</div>
</div>
<div class="sect3">
<h4 id="_document_notes_269">Document Notes</h4>
<div class="paragraph">
<p>For more information, see the Vulkan Specification at URL</p>
</div>
<div class="paragraph">
<p><a href="https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#vkGetPhysicalDeviceSurfacePresentModesKHR" class="bare">https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#vkGetPhysicalDeviceSurfacePresentModesKHR</a></p>
</div>
<div class="paragraph">
<p>This page is extracted from the Vulkan Specification.
Fixes and changes should be made to the Specification, not directly.</p>
</div>
<div style="page-break-after: always;"></div>
</div>
</div>
<div class="sect2">
<h3 id="_vkgetphysicaldevicesurfacesupportkhr3">vkGetPhysicalDeviceSurfaceSupportKHR(3)</h3>
<div class="sect3">
<h4 id="_name_270">Name</h4>
<div class="paragraph">
<p>vkGetPhysicalDeviceSurfaceSupportKHR - Query if presentation is supported</p>
</div>
</div>
<div class="sect3">
<h4 id="_c_specification_270">C Specification</h4>
<div class="paragraph">
<p>To determine whether a queue family of a physical device supports
presentation to a given surface, call:</p>
</div>
<div id="vkGetPhysicalDeviceSurfaceSupportKHR" class="listingblock">
<div class="content">
<pre class="highlight"><code class="language-c++" data-lang="c++">VkResult vkGetPhysicalDeviceSurfaceSupportKHR(
    VkPhysicalDevice                            physicalDevice,
    uint32_t                                    queueFamilyIndex,
    VkSurfaceKHR                                surface,
    VkBool32*                                   pSupported);</code></pre>
</div>
</div>
</div>
<div class="sect3">
<h4 id="_parameters_270">Parameters</h4>
<div class="ulist">
<ul>
<li>
<p><code>physicalDevice</code> is the physical device.</p>
</li>
<li>
<p><code>queueFamilyIndex</code> is the queue family.</p>
</li>
<li>
<p><code>surface</code> is the surface.</p>
</li>
<li>
<p><code>pSupported</code> is a pointer to a <code>VkBool32</code>, which is set to
<code>VK_TRUE</code> to indicate support, and <code>VK_FALSE</code> otherwise.</p>
</li>
</ul>
</div>
</div>
<div class="sect3">
<h4 id="_description_270">Description</h4>
<div class="sidebarblock">
<div class="content">
<div class="title">Valid Usage</div>
<div class="ulist">
<ul>
<li>
<p><a id="VUID-vkGetPhysicalDeviceSurfaceSupportKHR-queueFamilyIndex-01269"></a>
<code>queueFamilyIndex</code> <strong class="purple">must</strong> be less than
<code>pQueueFamilyPropertyCount</code> returned by
<code>vkGetPhysicalDeviceQueueFamilyProperties</code> for the given
<code>physicalDevice</code></p>
</li>
</ul>
</div>
</div>
</div>
<div class="sidebarblock">
<div class="content">
<div class="title">Valid Usage (Implicit)</div>
<div class="ulist">
<ul>
<li>
<p><a id="VUID-vkGetPhysicalDeviceSurfaceSupportKHR-physicalDevice-parameter"></a> <code>physicalDevice</code> <strong class="purple">must</strong> be a valid <code>VkPhysicalDevice</code> handle</p>
</li>
<li>
<p><a id="VUID-vkGetPhysicalDeviceSurfaceSupportKHR-surface-parameter"></a> <code>surface</code> <strong class="purple">must</strong> be a valid <code>VkSurfaceKHR</code> handle</p>
</li>
<li>
<p><a id="VUID-vkGetPhysicalDeviceSurfaceSupportKHR-pSupported-parameter"></a> <code>pSupported</code> <strong class="purple">must</strong> be a valid pointer to a <code>VkBool32</code> value</p>
</li>
<li>
<p><a id="VUID-vkGetPhysicalDeviceSurfaceSupportKHR-commonparent"></a> Both of <code>physicalDevice</code>, and <code>surface</code> <strong class="purple">must</strong> have been created, allocated, or retrieved from the same <code>VkInstance</code></p>
</li>
</ul>
</div>
</div>
</div>
<div class="sidebarblock">
<div class="content">
<div class="title">Return Codes</div>
<div class="dlist">
<dl>
<dt class="hdlist1"><a href="#fundamentals-successcodes">Success</a></dt>
<dd>
<div class="ulist">
<ul>
<li>
<p><code>VK_SUCCESS</code></p>
</li>
</ul>
</div>
</dd>
<dt class="hdlist1"><a href="#fundamentals-errorcodes">Failure</a></dt>
<dd>
<div class="ulist">
<ul>
<li>
<p><code>VK_ERROR_OUT_OF_HOST_MEMORY</code></p>
</li>
<li>
<p><code>VK_ERROR_OUT_OF_DEVICE_MEMORY</code></p>
</li>
<li>
<p><code>VK_ERROR_SURFACE_LOST_KHR</code></p>
</li>
</ul>
</div>
</dd>
</dl>
</div>
</div>
</div>
</div>
<div class="sect3">
<h4 id="_see_also_270">See Also</h4>
<div class="paragraph">
<p><code>VkBool32</code>, <a href="#VkPhysicalDevice">VkPhysicalDevice</a>, <a href="#VkSurfaceKHR">VkSurfaceKHR</a></p>
</div>
</div>
<div class="sect3">
<h4 id="_document_notes_270">Document Notes</h4>
<div class="paragraph">
<p>For more information, see the Vulkan Specification at URL</p>
</div>
<div class="paragraph">
<p><a href="https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#vkGetPhysicalDeviceSurfaceSupportKHR" class="bare">https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#vkGetPhysicalDeviceSurfaceSupportKHR</a></p>
</div>
<div class="paragraph">
<p>This page is extracted from the Vulkan Specification.
Fixes and changes should be made to the Specification, not directly.</p>
</div>
<div style="page-break-after: always;"></div>
</div>
</div>
<div class="sect2">
<h3 id="_vkgetphysicaldevicewaylandpresentationsupportkhr3">vkGetPhysicalDeviceWaylandPresentationSupportKHR(3)</h3>
<div class="sect3">
<h4 id="_name_271">Name</h4>
<div class="paragraph">
<p>vkGetPhysicalDeviceWaylandPresentationSupportKHR - Query physical device for presentation to Wayland</p>
</div>
</div>
<div class="sect3">
<h4 id="_c_specification_271">C Specification</h4>
<div class="paragraph">
<p>To determine whether a queue family of a physical device supports
presentation to a Wayland compositor, call:</p>
</div>
<div id="vkGetPhysicalDeviceWaylandPresentationSupportKHR" class="listingblock">
<div class="content">
<pre class="highlight"><code class="language-c++" data-lang="c++">VkBool32 vkGetPhysicalDeviceWaylandPresentationSupportKHR(
    VkPhysicalDevice                            physicalDevice,
    uint32_t                                    queueFamilyIndex,
    struct wl_display*                          display);</code></pre>
</div>
</div>
</div>
<div class="sect3">
<h4 id="_parameters_271">Parameters</h4>
<div class="ulist">
<ul>
<li>
<p><code>physicalDevice</code> is the physical device.</p>
</li>
<li>
<p><code>queueFamilyIndex</code> is the queue family index.</p>
</li>
<li>
<p><code>display</code> is a pointer to the <code>wl_display</code> associated with a
Wayland compositor.</p>
</li>
</ul>
</div>
</div>
<div class="sect3">
<h4 id="_description_271">Description</h4>
<div class="paragraph">
<p>This platform-specific function <strong class="purple">can</strong> be called prior to creating a surface.</p>
</div>
<div class="sidebarblock">
<div class="content">
<div class="title">Valid Usage</div>
<div class="ulist">
<ul>
<li>
<p><a id="VUID-vkGetPhysicalDeviceWaylandPresentationSupportKHR-queueFamilyIndex-01306"></a>
<code>queueFamilyIndex</code> <strong class="purple">must</strong> be less than
<code>pQueueFamilyPropertyCount</code> returned by
<code>vkGetPhysicalDeviceQueueFamilyProperties</code> for the given
<code>physicalDevice</code></p>
</li>
</ul>
</div>
</div>
</div>
<div class="sidebarblock">
<div class="content">
<div class="title">Valid Usage (Implicit)</div>
<div class="ulist">
<ul>
<li>
<p><a id="VUID-vkGetPhysicalDeviceWaylandPresentationSupportKHR-physicalDevice-parameter"></a> <code>physicalDevice</code> <strong class="purple">must</strong> be a valid <code>VkPhysicalDevice</code> handle</p>
</li>
<li>
<p><a id="VUID-vkGetPhysicalDeviceWaylandPresentationSupportKHR-display-parameter"></a> <code>display</code> <strong class="purple">must</strong> be a valid pointer to a <code>wl_display</code> value</p>
</li>
</ul>
</div>
</div>
</div>
</div>
<div class="sect3">
<h4 id="_see_also_271">See Also</h4>
<div class="paragraph">
<p><a href="#VkPhysicalDevice">VkPhysicalDevice</a></p>
</div>
</div>
<div class="sect3">
<h4 id="_document_notes_271">Document Notes</h4>
<div class="paragraph">
<p>For more information, see the Vulkan Specification at URL</p>
</div>
<div class="paragraph">
<p><a href="https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#vkGetPhysicalDeviceWaylandPresentationSupportKHR" class="bare">https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#vkGetPhysicalDeviceWaylandPresentationSupportKHR</a></p>
</div>
<div class="paragraph">
<p>This page is extracted from the Vulkan Specification.
Fixes and changes should be made to the Specification, not directly.</p>
</div>
<div style="page-break-after: always;"></div>
</div>
</div>
<div class="sect2">
<h3 id="_vkgetphysicaldevicewin32presentationsupportkhr3">vkGetPhysicalDeviceWin32PresentationSupportKHR(3)</h3>
<div class="sect3">
<h4 id="_name_272">Name</h4>
<div class="paragraph">
<p>vkGetPhysicalDeviceWin32PresentationSupportKHR - query queue family support for presentation on a Win32 display</p>
</div>
</div>
<div class="sect3">
<h4 id="_c_specification_272">C Specification</h4>
<div class="paragraph">
<p>To determine whether a queue family of a physical device supports
presentation to the Microsoft Windows desktop, call:</p>
</div>
<div id="vkGetPhysicalDeviceWin32PresentationSupportKHR" class="listingblock">
<div class="content">
<pre class="highlight"><code class="language-c++" data-lang="c++">VkBool32 vkGetPhysicalDeviceWin32PresentationSupportKHR(
    VkPhysicalDevice                            physicalDevice,
    uint32_t                                    queueFamilyIndex);</code></pre>
</div>
</div>
</div>
<div class="sect3">
<h4 id="_parameters_272">Parameters</h4>
<div class="ulist">
<ul>
<li>
<p><code>physicalDevice</code> is the physical device.</p>
</li>
<li>
<p><code>queueFamilyIndex</code> is the queue family index.</p>
</li>
</ul>
</div>
</div>
<div class="sect3">
<h4 id="_description_272">Description</h4>
<div class="paragraph">
<p>This platform-specific function <strong class="purple">can</strong> be called prior to creating a surface.</p>
</div>
<div class="sidebarblock">
<div class="content">
<div class="title">Valid Usage</div>
<div class="ulist">
<ul>
<li>
<p><a id="VUID-vkGetPhysicalDeviceWin32PresentationSupportKHR-queueFamilyIndex-01309"></a>
<code>queueFamilyIndex</code> <strong class="purple">must</strong> be less than
<code>pQueueFamilyPropertyCount</code> returned by
<code>vkGetPhysicalDeviceQueueFamilyProperties</code> for the given
<code>physicalDevice</code></p>
</li>
</ul>
</div>
</div>
</div>
<div class="sidebarblock">
<div class="content">
<div class="title">Valid Usage (Implicit)</div>
<div class="ulist">
<ul>
<li>
<p><a id="VUID-vkGetPhysicalDeviceWin32PresentationSupportKHR-physicalDevice-parameter"></a> <code>physicalDevice</code> <strong class="purple">must</strong> be a valid <code>VkPhysicalDevice</code> handle</p>
</li>
</ul>
</div>
</div>
</div>
</div>
<div class="sect3">
<h4 id="_see_also_272">See Also</h4>
<div class="paragraph">
<p><a href="#VkPhysicalDevice">VkPhysicalDevice</a></p>
</div>
</div>
<div class="sect3">
<h4 id="_document_notes_272">Document Notes</h4>
<div class="paragraph">
<p>For more information, see the Vulkan Specification at URL</p>
</div>
<div class="paragraph">
<p><a href="https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#vkGetPhysicalDeviceWin32PresentationSupportKHR" class="bare">https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#vkGetPhysicalDeviceWin32PresentationSupportKHR</a></p>
</div>
<div class="paragraph">
<p>This page is extracted from the Vulkan Specification.
Fixes and changes should be made to the Specification, not directly.</p>
</div>
<div style="page-break-after: always;"></div>
</div>
</div>
<div class="sect2">
<h3 id="_vkgetphysicaldevicexcbpresentationsupportkhr3">vkGetPhysicalDeviceXcbPresentationSupportKHR(3)</h3>
<div class="sect3">
<h4 id="_name_273">Name</h4>
<div class="paragraph">
<p>vkGetPhysicalDeviceXcbPresentationSupportKHR - Query physical device for presentation to X11 server using XCB</p>
</div>
</div>
<div class="sect3">
<h4 id="_c_specification_273">C Specification</h4>
<div class="paragraph">
<p>To determine whether a queue family of a physical device supports
presentation to an X11 server, using the XCB client-side library, call:</p>
</div>
<div id="vkGetPhysicalDeviceXcbPresentationSupportKHR" class="listingblock">
<div class="content">
<pre class="highlight"><code class="language-c++" data-lang="c++">VkBool32 vkGetPhysicalDeviceXcbPresentationSupportKHR(
    VkPhysicalDevice                            physicalDevice,
    uint32_t                                    queueFamilyIndex,
    xcb_connection_t*                           connection,
    xcb_visualid_t                              visual_id);</code></pre>
</div>
</div>
</div>
<div class="sect3">
<h4 id="_parameters_273">Parameters</h4>
<div class="ulist">
<ul>
<li>
<p><code>physicalDevice</code> is the physical device.</p>
</li>
<li>
<p><code>queueFamilyIndex</code> is the queue family index.</p>
</li>
<li>
<p><code>connection</code> is a pointer to an <code>xcb_connection_t</code> to the X
server.
<code>visual_id</code> is an X11 visual (<code>xcb_visualid_t</code>).</p>
</li>
</ul>
</div>
</div>
<div class="sect3">
<h4 id="_description_273">Description</h4>
<div class="paragraph">
<p>This platform-specific function <strong class="purple">can</strong> be called prior to creating a surface.</p>
</div>
<div class="sidebarblock">
<div class="content">
<div class="title">Valid Usage</div>
<div class="ulist">
<ul>
<li>
<p><a id="VUID-vkGetPhysicalDeviceXcbPresentationSupportKHR-queueFamilyIndex-01312"></a>
<code>queueFamilyIndex</code> <strong class="purple">must</strong> be less than
<code>pQueueFamilyPropertyCount</code> returned by
<code>vkGetPhysicalDeviceQueueFamilyProperties</code> for the given
<code>physicalDevice</code></p>
</li>
</ul>
</div>
</div>
</div>
<div class="sidebarblock">
<div class="content">
<div class="title">Valid Usage (Implicit)</div>
<div class="ulist">
<ul>
<li>
<p><a id="VUID-vkGetPhysicalDeviceXcbPresentationSupportKHR-physicalDevice-parameter"></a> <code>physicalDevice</code> <strong class="purple">must</strong> be a valid <code>VkPhysicalDevice</code> handle</p>
</li>
<li>
<p><a id="VUID-vkGetPhysicalDeviceXcbPresentationSupportKHR-connection-parameter"></a> <code>connection</code> <strong class="purple">must</strong> be a valid pointer to a <code>xcb_connection_t</code> value</p>
</li>
</ul>
</div>
</div>
</div>
</div>
<div class="sect3">
<h4 id="_see_also_273">See Also</h4>
<div class="paragraph">
<p><a href="#VkPhysicalDevice">VkPhysicalDevice</a></p>
</div>
</div>
<div class="sect3">
<h4 id="_document_notes_273">Document Notes</h4>
<div class="paragraph">
<p>For more information, see the Vulkan Specification at URL</p>
</div>
<div class="paragraph">
<p><a href="https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#vkGetPhysicalDeviceXcbPresentationSupportKHR" class="bare">https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#vkGetPhysicalDeviceXcbPresentationSupportKHR</a></p>
</div>
<div class="paragraph">
<p>This page is extracted from the Vulkan Specification.
Fixes and changes should be made to the Specification, not directly.</p>
</div>
<div style="page-break-after: always;"></div>
</div>
</div>
<div class="sect2">
<h3 id="_vkgetphysicaldevicexlibpresentationsupportkhr3">vkGetPhysicalDeviceXlibPresentationSupportKHR(3)</h3>
<div class="sect3">
<h4 id="_name_274">Name</h4>
<div class="paragraph">
<p>vkGetPhysicalDeviceXlibPresentationSupportKHR - Query physical device for presentation to X11 server using Xlib</p>
</div>
</div>
<div class="sect3">
<h4 id="_c_specification_274">C Specification</h4>
<div class="paragraph">
<p>To determine whether a queue family of a physical device supports
presentation to an X11 server, using the Xlib client-side library, call:</p>
</div>
<div id="vkGetPhysicalDeviceXlibPresentationSupportKHR" class="listingblock">
<div class="content">
<pre class="highlight"><code class="language-c++" data-lang="c++">VkBool32 vkGetPhysicalDeviceXlibPresentationSupportKHR(
    VkPhysicalDevice                            physicalDevice,
    uint32_t                                    queueFamilyIndex,
    Display*                                    dpy,
    VisualID                                    visualID);</code></pre>
</div>
</div>
</div>
<div class="sect3">
<h4 id="_parameters_274">Parameters</h4>
<div class="ulist">
<ul>
<li>
<p><code>physicalDevice</code> is the physical device.</p>
</li>
<li>
<p><code>queueFamilyIndex</code> is the queue family index.</p>
</li>
<li>
<p><code>dpy</code> is a pointer to an Xlib <code>Display</code> connection to the server.</p>
</li>
<li>
<p><code>visualId</code> is an X11 visual (<code>VisualID</code>).</p>
</li>
</ul>
</div>
</div>
<div class="sect3">
<h4 id="_description_274">Description</h4>
<div class="paragraph">
<p>This platform-specific function <strong class="purple">can</strong> be called prior to creating a surface.</p>
</div>
<div class="sidebarblock">
<div class="content">
<div class="title">Valid Usage</div>
<div class="ulist">
<ul>
<li>
<p><a id="VUID-vkGetPhysicalDeviceXlibPresentationSupportKHR-queueFamilyIndex-01315"></a>
<code>queueFamilyIndex</code> <strong class="purple">must</strong> be less than
<code>pQueueFamilyPropertyCount</code> returned by
<code>vkGetPhysicalDeviceQueueFamilyProperties</code> for the given
<code>physicalDevice</code></p>
</li>
</ul>
</div>
</div>
</div>
<div class="sidebarblock">
<div class="content">
<div class="title">Valid Usage (Implicit)</div>
<div class="ulist">
<ul>
<li>
<p><a id="VUID-vkGetPhysicalDeviceXlibPresentationSupportKHR-physicalDevice-parameter"></a> <code>physicalDevice</code> <strong class="purple">must</strong> be a valid <code>VkPhysicalDevice</code> handle</p>
</li>
<li>
<p><a id="VUID-vkGetPhysicalDeviceXlibPresentationSupportKHR-dpy-parameter"></a> <code>dpy</code> <strong class="purple">must</strong> be a valid pointer to a <code>Display</code> value</p>
</li>
</ul>
</div>
</div>
</div>
</div>
<div class="sect3">
<h4 id="_see_also_274">See Also</h4>
<div class="paragraph">
<p><a href="#VkPhysicalDevice">VkPhysicalDevice</a></p>
</div>
</div>
<div class="sect3">
<h4 id="_document_notes_274">Document Notes</h4>
<div class="paragraph">
<p>For more information, see the Vulkan Specification at URL</p>
</div>
<div class="paragraph">
<p><a href="https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#vkGetPhysicalDeviceXlibPresentationSupportKHR" class="bare">https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#vkGetPhysicalDeviceXlibPresentationSupportKHR</a></p>
</div>
<div class="paragraph">
<p>This page is extracted from the Vulkan Specification.
Fixes and changes should be made to the Specification, not directly.</p>
</div>
<div style="page-break-after: always;"></div>
</div>
</div>
<div class="sect2">
<h3 id="_vkgetpipelinecachedata3">vkGetPipelineCacheData(3)</h3>
<div class="sect3">
<h4 id="_name_275">Name</h4>
<div class="paragraph">
<p>vkGetPipelineCacheData - Get the data store from a pipeline cache</p>
</div>
</div>
<div class="sect3">
<h4 id="_c_specification_275">C Specification</h4>
<div class="paragraph">
<p>Data <strong class="purple">can</strong> be retrieved from a pipeline cache object using the command:</p>
</div>
<div id="vkGetPipelineCacheData" class="listingblock">
<div class="content">
<pre class="highlight"><code class="language-c++" data-lang="c++">VkResult vkGetPipelineCacheData(
    VkDevice                                    device,
    VkPipelineCache                             pipelineCache,
    size_t*                                     pDataSize,
    void*                                       pData);</code></pre>
</div>
</div>
</div>
<div class="sect3">
<h4 id="_parameters_275">Parameters</h4>
<div class="ulist">
<ul>
<li>
<p><code>device</code> is the logical device that owns the pipeline cache.</p>
</li>
<li>
<p><code>pipelineCache</code> is the pipeline cache to retrieve data from.</p>
</li>
<li>
<p><code>pDataSize</code> is a pointer to a value related to the amount of data in
the pipeline cache, as described below.</p>
</li>
<li>
<p><code>pData</code> is either <code>NULL</code> or a pointer to a buffer.</p>
</li>
</ul>
</div>
</div>
<div class="sect3">
<h4 id="_description_275">Description</h4>
<div class="paragraph">
<p>If <code>pData</code> is <code>NULL</code>, then the maximum size of the data that <strong class="purple">can</strong> be
retrieved from the pipeline cache, in bytes, is returned in <code>pDataSize</code>.
Otherwise, <code>pDataSize</code> <strong class="purple">must</strong> point to a variable set by the user to the
size of the buffer, in bytes, pointed to by <code>pData</code>, and on return the
variable is overwritten with the amount of data actually written to
<code>pData</code>.</p>
</div>
<div class="paragraph">
<p>If <code>pDataSize</code> is less than the maximum size that <strong class="purple">can</strong> be retrieved by
the pipeline cache, at most <code>pDataSize</code> bytes will be written to
<code>pData</code>, and <code>vkGetPipelineCacheData</code> will return
<code>VK_INCOMPLETE</code>.
Any data written to <code>pData</code> is valid and <strong class="purple">can</strong> be provided as the
<code>pInitialData</code> member of the <code>VkPipelineCacheCreateInfo</code> structure
passed to <code>vkCreatePipelineCache</code>.</p>
</div>
<div class="paragraph">
<p>Two calls to <code>vkGetPipelineCacheData</code> with the same parameters <strong class="purple">must</strong>
retrieve the same data unless a command that modifies the contents of the
cache is called between them.</p>
</div>
<div id="pipelines-cache-header" class="paragraph">
<p>Applications <strong class="purple">can</strong> store the data retrieved from the pipeline cache, and use
these data, possibly in a future run of the application, to populate new
pipeline cache objects.
The results of pipeline compiles, however, <strong class="purple">may</strong> depend on the vendor ID,
device ID, driver version, and other details of the device.
To enable applications to detect when previously retrieved data is
incompatible with the device, the initial bytes written to <code>pData</code> <strong class="purple">must</strong>
be a header consisting of the following members:</p>
</div>
<table class="tableblock frame-all grid-all" style="width: 85%;">
<caption class="title">Table 5. Layout for pipeline cache header version <code>VK_PIPELINE_CACHE_HEADER_VERSION_ONE</code></caption>
<colgroup>
<col style="width: 8%;">
<col style="width: 21%;">
<col style="width: 71%;">
</colgroup>
<thead>
<tr>
<th class="tableblock halign-left valign-top">Offset</th>
<th class="tableblock halign-left valign-top">Size</th>
<th class="tableblock halign-left valign-top">Meaning</th>
</tr>
</thead>
<tbody>
<tr>
<td class="tableblock halign-left valign-top"><p class="tableblock">0</p></td>
<td class="tableblock halign-left valign-top"><p class="tableblock">4</p></td>
<td class="tableblock halign-left valign-top"><p class="tableblock">length in bytes of the entire pipeline cache header
                             written as a stream of bytes, with the least
                             significant byte first</p></td>
</tr>
<tr>
<td class="tableblock halign-left valign-top"><p class="tableblock">4</p></td>
<td class="tableblock halign-left valign-top"><p class="tableblock">4</p></td>
<td class="tableblock halign-left valign-top"><p class="tableblock">a <a href="#VkPipelineCacheHeaderVersion">VkPipelineCacheHeaderVersion</a> value
                             written as a stream of bytes, with the least
                             significant byte first</p></td>
</tr>
<tr>
<td class="tableblock halign-left valign-top"><p class="tableblock">8</p></td>
<td class="tableblock halign-left valign-top"><p class="tableblock">4</p></td>
<td class="tableblock halign-left valign-top"><p class="tableblock">a vendor ID equal to
                             <code>VkPhysicalDeviceProperties</code>::<code>vendorID</code>
                             written as a stream of bytes, with the least
                             significant byte first</p></td>
</tr>
<tr>
<td class="tableblock halign-left valign-top"><p class="tableblock">12</p></td>
<td class="tableblock halign-left valign-top"><p class="tableblock">4</p></td>
<td class="tableblock halign-left valign-top"><p class="tableblock">a device ID equal to
                             <code>VkPhysicalDeviceProperties</code>::<code>deviceID</code>
                             written as a stream of bytes, with the least
                             significant byte first</p></td>
</tr>
<tr>
<td class="tableblock halign-left valign-top"><p class="tableblock">16</p></td>
<td class="tableblock halign-left valign-top"><p class="tableblock"><code>VK_UUID_SIZE</code></p></td>
<td class="tableblock halign-left valign-top"><p class="tableblock">a pipeline cache ID equal to
                             <code>VkPhysicalDeviceProperties</code>::<code>pipelineCacheUUID</code></p></td>
</tr>
</tbody>
</table>
<div class="paragraph">
<p>The first four bytes encode the length of the entire pipeline cache header,
in bytes.
This value includes all fields in the header including the pipeline cache
version field and the size of the length field.</p>
</div>
<div class="paragraph">
<p>The next four bytes encode the pipeline cache version, as described for
<a href="#VkPipelineCacheHeaderVersion">VkPipelineCacheHeaderVersion</a>.
A consumer of the pipeline cache <strong class="purple">should</strong> use the cache version to interpret
the remainder of the cache header.</p>
</div>
<div class="paragraph">
<p>If <code>pDataSize</code> is less than what is necessary to store this header,
nothing will be written to <code>pData</code> and zero will be written to
<code>pDataSize</code>.</p>
</div>
<div class="sidebarblock">
<div class="content">
<div class="title">Valid Usage (Implicit)</div>
<div class="ulist">
<ul>
<li>
<p><a id="VUID-vkGetPipelineCacheData-device-parameter"></a> <code>device</code> <strong class="purple">must</strong> be a valid <code>VkDevice</code> handle</p>
</li>
<li>
<p><a id="VUID-vkGetPipelineCacheData-pipelineCache-parameter"></a> <code>pipelineCache</code> <strong class="purple">must</strong> be a valid <code>VkPipelineCache</code> handle</p>
</li>
<li>
<p><a id="VUID-vkGetPipelineCacheData-pDataSize-parameter"></a> <code>pDataSize</code> <strong class="purple">must</strong> be a valid pointer to a <code>size_t</code> value</p>
</li>
<li>
<p><a id="VUID-vkGetPipelineCacheData-pData-parameter"></a> If the value referenced by <code>pDataSize</code> is not <code>0</code>, and <code>pData</code> is not <code>NULL</code>, <code>pData</code> <strong class="purple">must</strong> be a valid pointer to an array of <code>pDataSize</code> bytes</p>
</li>
<li>
<p><a id="VUID-vkGetPipelineCacheData-pipelineCache-parent"></a> <code>pipelineCache</code> <strong class="purple">must</strong> have been created, allocated, or retrieved from <code>device</code></p>
</li>
</ul>
</div>
</div>
</div>
<div class="sidebarblock">
<div class="content">
<div class="title">Return Codes</div>
<div class="dlist">
<dl>
<dt class="hdlist1"><a href="#fundamentals-successcodes">Success</a></dt>
<dd>
<div class="ulist">
<ul>
<li>
<p><code>VK_SUCCESS</code></p>
</li>
<li>
<p><code>VK_INCOMPLETE</code></p>
</li>
</ul>
</div>
</dd>
<dt class="hdlist1"><a href="#fundamentals-errorcodes">Failure</a></dt>
<dd>
<div class="ulist">
<ul>
<li>
<p><code>VK_ERROR_OUT_OF_HOST_MEMORY</code></p>
</li>
<li>
<p><code>VK_ERROR_OUT_OF_DEVICE_MEMORY</code></p>
</li>
</ul>
</div>
</dd>
</dl>
</div>
</div>
</div>
</div>
<div class="sect3">
<h4 id="_see_also_275">See Also</h4>
<div class="paragraph">
<p><a href="#VkDevice">VkDevice</a>, <a href="#VkPipelineCache">VkPipelineCache</a></p>
</div>
</div>
<div class="sect3">
<h4 id="_document_notes_275">Document Notes</h4>
<div class="paragraph">
<p>For more information, see the Vulkan Specification at URL</p>
</div>
<div class="paragraph">
<p><a href="https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#vkGetPipelineCacheData" class="bare">https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#vkGetPipelineCacheData</a></p>
</div>
<div class="paragraph">
<p>This page is extracted from the Vulkan Specification.
Fixes and changes should be made to the Specification, not directly.</p>
</div>
<div style="page-break-after: always;"></div>
</div>
</div>
<div class="sect2">
<h3 id="_vkgetquerypoolresults3">vkGetQueryPoolResults(3)</h3>
<div class="sect3">
<h4 id="_name_276">Name</h4>
<div class="paragraph">
<p>vkGetQueryPoolResults - Copy results of queries in a query pool to a host memory region</p>
</div>
</div>
<div class="sect3">
<h4 id="_c_specification_276">C Specification</h4>
<div class="paragraph">
<p>To retrieve status and results for a set of queries, call:</p>
</div>
<div id="vkGetQueryPoolResults" class="listingblock">
<div class="content">
<pre class="highlight"><code class="language-c++" data-lang="c++">VkResult vkGetQueryPoolResults(
    VkDevice                                    device,
    VkQueryPool                                 queryPool,
    uint32_t                                    firstQuery,
    uint32_t                                    queryCount,
    size_t                                      dataSize,
    void*                                       pData,
    VkDeviceSize                                stride,
    VkQueryResultFlags                          flags);</code></pre>
</div>
</div>
</div>
<div class="sect3">
<h4 id="_parameters_276">Parameters</h4>
<div class="ulist">
<ul>
<li>
<p><code>device</code> is the logical device that owns the query pool.</p>
</li>
<li>
<p><code>queryPool</code> is the query pool managing the queries containing the
desired results.</p>
</li>
<li>
<p><code>firstQuery</code> is the initial query index.</p>
</li>
<li>
<p><code>queryCount</code> is the number of queries.
<code>firstQuery</code> and <code>queryCount</code> together define a range of
queries.
For pipeline statistics queries, each query index in the pool contains
one integer value for each bit that is enabled in
<a href="#VkQueryPoolCreateInfo">VkQueryPoolCreateInfo</a>::<code>pipelineStatistics</code> when the pool is
created.</p>
</li>
<li>
<p><code>dataSize</code> is the size in bytes of the buffer pointed to by
<code>pData</code>.</p>
</li>
<li>
<p><code>pData</code> is a pointer to a user-allocated buffer where the results
will be written</p>
</li>
<li>
<p><code>stride</code> is the stride in bytes between results for individual
queries within <code>pData</code>.</p>
</li>
<li>
<p><code>flags</code> is a bitmask of <a href="#VkQueryResultFlagBits">VkQueryResultFlagBits</a> specifying how
and when results are returned.</p>
</li>
</ul>
</div>
</div>
<div class="sect3">
<h4 id="_description_276">Description</h4>
<div class="paragraph">
<p>If no bits are set in <code>flags</code>, and all requested queries are in the
available state, results are written as an array of 32-bit unsigned integer
values.
The behavior when not all queries are available, is described
<a href="vkspec.html#queries-wait-bit-not-set">below</a>.</p>
</div>
<div class="paragraph">
<p>If <code>VK_QUERY_RESULT_64_BIT</code> is not set and the result overflows a 32-bit
value, the value <strong class="purple">may</strong> either wrap or saturate.
Similarly, if <code>VK_QUERY_RESULT_64_BIT</code> is set and the result overflows a
64-bit value, the value <strong class="purple">may</strong> either wrap or saturate.</p>
</div>
<div class="paragraph">
<p>If <code>VK_QUERY_RESULT_WAIT_BIT</code> is set, Vulkan will wait for each query to
be in the available state before retrieving the numerical results for that
query.
In this case, <code>vkGetQueryPoolResults</code> is guaranteed to succeed and
return <code>VK_SUCCESS</code> if the queries become available in a finite time
(i.e. if they have been issued and not reset).
If queries will never finish (e.g. due to being reset but not issued), then
<code>vkGetQueryPoolResults</code> <strong class="purple">may</strong> not return in finite time.</p>
</div>
<div id="queries-wait-bit-not-set" class="paragraph">
<p>If <code>VK_QUERY_RESULT_WAIT_BIT</code> and <code>VK_QUERY_RESULT_PARTIAL_BIT</code> are
both not set then no result values are written to <code>pData</code> for queries
that are in the unavailable state at the time of the call, and
<code>vkGetQueryPoolResults</code> returns <code>VK_NOT_READY</code>.
However, availability state is still written to <code>pData</code> for those
queries if <code>VK_QUERY_RESULT_WITH_AVAILABILITY_BIT</code> is set.</p>
</div>
<div class="admonitionblock note">
<table>
<tr>
<td class="icon">
<i class="fa icon-note" title="Note"></i>
</td>
<td class="content">
<div class="title">Note</div>
<div class="paragraph">
<p>Applications <strong class="purple">must</strong> take care to ensure that use of the
<code>VK_QUERY_RESULT_WAIT_BIT</code> bit has the desired effect.</p>
</div>
<div class="paragraph">
<p>For example, if a query has been used previously and a command buffer
records the commands <code>vkCmdResetQueryPool</code>, <code>vkCmdBeginQuery</code>, and
<code>vkCmdEndQuery</code> for that query, then the query will remain in the
available state until the <code>vkCmdResetQueryPool</code> command executes on a
queue.
Applications <strong class="purple">can</strong> use fences or events to ensure that a query has already
been reset before checking for its results or availability status.
Otherwise, a stale value could be returned from a previous use of the query.</p>
</div>
<div class="paragraph">
<p>The above also applies when <code>VK_QUERY_RESULT_WAIT_BIT</code> is used in
combination with <code>VK_QUERY_RESULT_WITH_AVAILABILITY_BIT</code>.
In this case, the returned availability status <strong class="purple">may</strong> reflect the result of a
previous use of the query unless the <code>vkCmdResetQueryPool</code> command has
been executed since the last use of the query.</p>
</div>
</td>
</tr>
</table>
</div>
<div class="admonitionblock note">
<table>
<tr>
<td class="icon">
<i class="fa icon-note" title="Note"></i>
</td>
<td class="content">
<div class="title">Note</div>
<div class="paragraph">
<p>Applications <strong class="purple">can</strong> double-buffer query pool usage, with a pool per frame, and
reset queries at the end of the frame in which they are read.</p>
</div>
</td>
</tr>
</table>
</div>
<div class="paragraph">
<p>If <code>VK_QUERY_RESULT_PARTIAL_BIT</code> is set, <code>VK_QUERY_RESULT_WAIT_BIT</code>
is not set, and the query&#8217;s status is unavailable, an intermediate result
value between zero and the final result value is written to <code>pData</code> for
that query.</p>
</div>
<div class="paragraph">
<p><code>VK_QUERY_RESULT_PARTIAL_BIT</code> <strong class="purple">must</strong> not be used if the pool&#8217;s
<code>queryType</code> is <code>VK_QUERY_TYPE_TIMESTAMP</code>.</p>
</div>
<div class="paragraph">
<p>If <code>VK_QUERY_RESULT_WITH_AVAILABILITY_BIT</code> is set, the final integer
value written for each query is non-zero if the query&#8217;s status was available
or zero if the status was unavailable.
When <code>VK_QUERY_RESULT_WITH_AVAILABILITY_BIT</code> is used, implementations
<strong class="purple">must</strong> guarantee that if they return a non-zero availability value then the
numerical results <strong class="purple">must</strong> be valid, assuming the results are not reset by a
subsequent command.</p>
</div>
<div class="admonitionblock note">
<table>
<tr>
<td class="icon">
<i class="fa icon-note" title="Note"></i>
</td>
<td class="content">
<div class="title">Note</div>
<div class="paragraph">
<p>Satisfying this guarantee <strong class="purple">may</strong> require careful ordering by the application,
e.g. to read the availability status before reading the results.</p>
</div>
</td>
</tr>
</table>
</div>
<div class="sidebarblock">
<div class="content">
<div class="title">Valid Usage</div>
<div class="ulist">
<ul>
<li>
<p><a id="VUID-vkGetQueryPoolResults-firstQuery-00813"></a>
<code>firstQuery</code> <strong class="purple">must</strong> be less than the number of queries in
<code>queryPool</code></p>
</li>
<li>
<p><a id="VUID-vkGetQueryPoolResults-flags-00814"></a>
If <code>VK_QUERY_RESULT_64_BIT</code> is not set in <code>flags</code> then
<code>pData</code> and <code>stride</code> <strong class="purple">must</strong> be multiples of <code>4</code></p>
</li>
<li>
<p><a id="VUID-vkGetQueryPoolResults-flags-00815"></a>
If <code>VK_QUERY_RESULT_64_BIT</code> is set in <code>flags</code> then <code>pData</code>
and <code>stride</code> <strong class="purple">must</strong> be multiples of <code>8</code></p>
</li>
<li>
<p><a id="VUID-vkGetQueryPoolResults-firstQuery-00816"></a>
The sum of <code>firstQuery</code> and <code>queryCount</code> <strong class="purple">must</strong> be less than or
equal to the number of queries in <code>queryPool</code></p>
</li>
<li>
<p><a id="VUID-vkGetQueryPoolResults-dataSize-00817"></a>
<code>dataSize</code> <strong class="purple">must</strong> be large enough to contain the result of each
query, as described <a href="vkspec.html#queries-operation-memorylayout">here</a></p>
</li>
<li>
<p><a id="VUID-vkGetQueryPoolResults-queryType-00818"></a>
If the <code>queryType</code> used to create <code>queryPool</code> was
<code>VK_QUERY_TYPE_TIMESTAMP</code>, <code>flags</code> <strong class="purple">must</strong> not contain
<code>VK_QUERY_RESULT_PARTIAL_BIT</code></p>
</li>
</ul>
</div>
</div>
</div>
<div class="sidebarblock">
<div class="content">
<div class="title">Valid Usage (Implicit)</div>
<div class="ulist">
<ul>
<li>
<p><a id="VUID-vkGetQueryPoolResults-device-parameter"></a> <code>device</code> <strong class="purple">must</strong> be a valid <code>VkDevice</code> handle</p>
</li>
<li>
<p><a id="VUID-vkGetQueryPoolResults-queryPool-parameter"></a> <code>queryPool</code> <strong class="purple">must</strong> be a valid <code>VkQueryPool</code> handle</p>
</li>
<li>
<p><a id="VUID-vkGetQueryPoolResults-pData-parameter"></a> <code>pData</code> <strong class="purple">must</strong> be a valid pointer to an array of <code>dataSize</code> bytes</p>
</li>
<li>
<p><a id="VUID-vkGetQueryPoolResults-flags-parameter"></a> <code>flags</code> <strong class="purple">must</strong> be a valid combination of <a href="#VkQueryResultFlagBits">VkQueryResultFlagBits</a> values</p>
</li>
<li>
<p><a id="VUID-vkGetQueryPoolResults-dataSize-arraylength"></a> <code>dataSize</code> <strong class="purple">must</strong> be greater than <code>0</code></p>
</li>
<li>
<p><a id="VUID-vkGetQueryPoolResults-queryPool-parent"></a> <code>queryPool</code> <strong class="purple">must</strong> have been created, allocated, or retrieved from <code>device</code></p>
</li>
</ul>
</div>
</div>
</div>
<div class="sidebarblock">
<div class="content">
<div class="title">Return Codes</div>
<div class="dlist">
<dl>
<dt class="hdlist1"><a href="#fundamentals-successcodes">Success</a></dt>
<dd>
<div class="ulist">
<ul>
<li>
<p><code>VK_SUCCESS</code></p>
</li>
<li>
<p><code>VK_NOT_READY</code></p>
</li>
</ul>
</div>
</dd>
<dt class="hdlist1"><a href="#fundamentals-errorcodes">Failure</a></dt>
<dd>
<div class="ulist">
<ul>
<li>
<p><code>VK_ERROR_OUT_OF_HOST_MEMORY</code></p>
</li>
<li>
<p><code>VK_ERROR_OUT_OF_DEVICE_MEMORY</code></p>
</li>
<li>
<p><code>VK_ERROR_DEVICE_LOST</code></p>
</li>
</ul>
</div>
</dd>
</dl>
</div>
</div>
</div>
</div>
<div class="sect3">
<h4 id="_see_also_276">See Also</h4>
<div class="paragraph">
<p><a href="#VkDevice">VkDevice</a>, <code>VkDeviceSize</code>, <a href="#VkQueryPool">VkQueryPool</a>, <a href="#VkQueryResultFlags">VkQueryResultFlags</a></p>
</div>
</div>
<div class="sect3">
<h4 id="_document_notes_276">Document Notes</h4>
<div class="paragraph">
<p>For more information, see the Vulkan Specification at URL</p>
</div>
<div class="paragraph">
<p><a href="https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#vkGetQueryPoolResults" class="bare">https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#vkGetQueryPoolResults</a></p>
</div>
<div class="paragraph">
<p>This page is extracted from the Vulkan Specification.
Fixes and changes should be made to the Specification, not directly.</p>
</div>
<div style="page-break-after: always;"></div>
</div>
</div>
<div class="sect2">
<h3 id="_vkgetqueuecheckpointdatanv3">vkGetQueueCheckpointDataNV(3)</h3>
<div class="sect3">
<h4 id="_name_277">Name</h4>
<div class="paragraph">
<p>vkGetQueueCheckpointDataNV - retrieve diagnostic checkpoint data</p>
</div>
</div>
<div class="sect3">
<h4 id="_c_specification_277">C Specification</h4>
<div class="paragraph">
<p>If the device encounters an error during execution, the implementation will
return a <code>VK_ERROR_DEVICE_LOST</code> error to the application at a certain
point during host execution.
When this happens, the application <strong class="purple">can</strong> call
<a href="#vkGetQueueCheckpointDataNV">vkGetQueueCheckpointDataNV</a> to retrieve information on the most recent
diagnostic checkpoints that were executed by the device.</p>
</div>
<div id="vkGetQueueCheckpointDataNV" class="listingblock">
<div class="content">
<pre class="highlight"><code class="language-c++" data-lang="c++">void vkGetQueueCheckpointDataNV(
    VkQueue                                     queue,
    uint32_t*                                   pCheckpointDataCount,
    VkCheckpointDataNV*                         pCheckpointData);</code></pre>
</div>
</div>
</div>
<div class="sect3">
<h4 id="_parameters_277">Parameters</h4>
<div class="ulist">
<ul>
<li>
<p><code>queue</code> is the <a href="#VkQueue">VkQueue</a> object the caller would like to
retrieve checkpoint data for</p>
</li>
<li>
<p><code>pCheckpointDataCount</code> is a pointer to an integer related to the
number of checkpoint markers available or queried, as described below.</p>
</li>
<li>
<p><code>pCheckpointData</code> is either <code>NULL</code> or a pointer to an array of
<code>VkCheckpointDataNV</code> structures.</p>
</li>
</ul>
</div>
</div>
<div class="sect3">
<h4 id="_description_277">Description</h4>
<div class="paragraph">
<p>If <code>pCheckpointData</code> is <code>NULL</code>, then the number of checkpoint markers
available is returned in <code>pCheckpointDataCount</code>.</p>
</div>
<div class="paragraph">
<p>Otherwise, <code>pCheckpointDataCount</code> <strong class="purple">must</strong> point to a variable set by the
user to the number of elements in the <code>pCheckpointData</code> array, and on
return the variable is overwritten with the number of structures actually
written to <code>pCheckpointData</code>.</p>
</div>
<div class="paragraph">
<p>If <code>pCheckpointDataCount</code> is less than the number of checkpoint markers
available, at most <code>pCheckpointDataCount</code> structures will be written.</p>
</div>
<div class="sidebarblock">
<div class="content">
<div class="title">Valid Usage</div>
<div class="ulist">
<ul>
<li>
<p><a id="VUID-vkGetQueueCheckpointDataNV-queue-02025"></a>
The device that <code>queue</code> belongs to <strong class="purple">must</strong> be in the lost state</p>
</li>
</ul>
</div>
</div>
</div>
<div class="sidebarblock">
<div class="content">
<div class="title">Valid Usage (Implicit)</div>
<div class="ulist">
<ul>
<li>
<p><a id="VUID-vkGetQueueCheckpointDataNV-queue-parameter"></a> <code>queue</code> <strong class="purple">must</strong> be a valid <code>VkQueue</code> handle</p>
</li>
<li>
<p><a id="VUID-vkGetQueueCheckpointDataNV-pCheckpointDataCount-parameter"></a> <code>pCheckpointDataCount</code> <strong class="purple">must</strong> be a valid pointer to a <code>uint32_t</code> value</p>
</li>
<li>
<p><a id="VUID-vkGetQueueCheckpointDataNV-pCheckpointData-parameter"></a> If the value referenced by <code>pCheckpointDataCount</code> is not <code>0</code>, and <code>pCheckpointData</code> is not <code>NULL</code>, <code>pCheckpointData</code> <strong class="purple">must</strong> be a valid pointer to an array of <code>pCheckpointDataCount</code> <code>VkCheckpointDataNV</code> structures</p>
</li>
</ul>
</div>
</div>
</div>
</div>
<div class="sect3">
<h4 id="_see_also_277">See Also</h4>
<div class="paragraph">
<p><a href="#VkCheckpointDataNV">VkCheckpointDataNV</a>, <a href="#VkQueue">VkQueue</a></p>
</div>
</div>
<div class="sect3">
<h4 id="_document_notes_277">Document Notes</h4>
<div class="paragraph">
<p>For more information, see the Vulkan Specification at URL</p>
</div>
<div class="paragraph">
<p><a href="https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#vkGetQueueCheckpointDataNV" class="bare">https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#vkGetQueueCheckpointDataNV</a></p>
</div>
<div class="paragraph">
<p>This page is extracted from the Vulkan Specification.
Fixes and changes should be made to the Specification, not directly.</p>
</div>
<div style="page-break-after: always;"></div>
</div>
</div>
<div class="sect2">
<h3 id="_vkgetrandroutputdisplayext3">vkGetRandROutputDisplayEXT(3)</h3>
<div class="sect3">
<h4 id="_name_278">Name</h4>
<div class="paragraph">
<p>vkGetRandROutputDisplayEXT - Query the VkDisplayKHR corresponding to an X11 RandR Output</p>
</div>
</div>
<div class="sect3">
<h4 id="_c_specification_278">C Specification</h4>
<div class="paragraph">
<p>When acquiring displays from an X11 server, an application may also wish to
enumerate and identify them using a native handle rather than a
<code>VkDisplayKHR</code> handle.
To determine the <code>VkDisplayKHR</code> handle corresponding to an X11 RandR
Output, call:</p>
</div>
<div id="vkGetRandROutputDisplayEXT" class="listingblock">
<div class="content">
<pre class="highlight"><code class="language-c++" data-lang="c++">VkResult vkGetRandROutputDisplayEXT(
    VkPhysicalDevice                            physicalDevice,
    Display*                                    dpy,
    RROutput                                    rrOutput,
    VkDisplayKHR*                               pDisplay);</code></pre>
</div>
</div>
</div>
<div class="sect3">
<h4 id="_parameters_278">Parameters</h4>
<div class="ulist">
<ul>
<li>
<p><code>physicalDevice</code> The physical device to query the display handle on.</p>
</li>
<li>
<p><code>dpy</code> A connection to the X11 server from which <code>rrOutput</code> was
queried.</p>
</li>
<li>
<p><code>rrOutput</code> An X11 RandR output ID.</p>
</li>
<li>
<p><code>pDisplay</code> The corresponding <a href="#VkDisplayKHR">VkDisplayKHR</a> handle will be
returned here.</p>
</li>
</ul>
</div>
</div>
<div class="sect3">
<h4 id="_description_278">Description</h4>
<div class="paragraph">
<p>If there is no <a href="#VkDisplayKHR">VkDisplayKHR</a> corresponding to <code>rrOutput</code> on
<code>physicalDevice</code>, <a href="#VK_NULL_HANDLE">VK_NULL_HANDLE</a> <strong class="purple">must</strong> be returned in
<code>pDisplay</code>.</p>
</div>
<div class="sidebarblock">
<div class="content">
<div class="title">Valid Usage (Implicit)</div>
<div class="ulist">
<ul>
<li>
<p><a id="VUID-vkGetRandROutputDisplayEXT-physicalDevice-parameter"></a> <code>physicalDevice</code> <strong class="purple">must</strong> be a valid <code>VkPhysicalDevice</code> handle</p>
</li>
<li>
<p><a id="VUID-vkGetRandROutputDisplayEXT-dpy-parameter"></a> <code>dpy</code> <strong class="purple">must</strong> be a valid pointer to a <code>Display</code> value</p>
</li>
<li>
<p><a id="VUID-vkGetRandROutputDisplayEXT-pDisplay-parameter"></a> <code>pDisplay</code> <strong class="purple">must</strong> be a valid pointer to a <code>VkDisplayKHR</code> handle</p>
</li>
</ul>
</div>
</div>
</div>
<div class="sidebarblock">
<div class="content">
<div class="title">Return Codes</div>
<div class="dlist">
<dl>
<dt class="hdlist1"><a href="#fundamentals-successcodes">Success</a></dt>
<dd>
<div class="ulist">
<ul>
<li>
<p><code>VK_SUCCESS</code></p>
</li>
</ul>
</div>
</dd>
</dl>
</div>
</div>
</div>
</div>
<div class="sect3">
<h4 id="_see_also_278">See Also</h4>
<div class="paragraph">
<p><a href="#VkDisplayKHR">VkDisplayKHR</a>, <a href="#VkPhysicalDevice">VkPhysicalDevice</a></p>
</div>
</div>
<div class="sect3">
<h4 id="_document_notes_278">Document Notes</h4>
<div class="paragraph">
<p>For more information, see the Vulkan Specification at URL</p>
</div>
<div class="paragraph">
<p><a href="https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#vkGetRandROutputDisplayEXT" class="bare">https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#vkGetRandROutputDisplayEXT</a></p>
</div>
<div class="paragraph">
<p>This page is extracted from the Vulkan Specification.
Fixes and changes should be made to the Specification, not directly.</p>
</div>
<div style="page-break-after: always;"></div>
</div>
</div>
<div class="sect2">
<h3 id="_vkgetraytracingshadergrouphandlesnv3">vkGetRayTracingShaderGroupHandlesNV(3)</h3>
<div class="sect3">
<h4 id="_name_279">Name</h4>
<div class="paragraph">
<p>vkGetRayTracingShaderGroupHandlesNV - Query ray tracing pipeline shader group handles</p>
</div>
</div>
<div class="sect3">
<h4 id="_c_specification_279">C Specification</h4>
<div class="paragraph">
<p>To query the opaque handles of shaders in the ray tracing pipeline, call:</p>
</div>
<div id="vkGetRayTracingShaderGroupHandlesNV" class="listingblock">
<div class="content">
<pre class="highlight"><code class="language-c++" data-lang="c++">VkResult vkGetRayTracingShaderGroupHandlesNV(
    VkDevice                                    device,
    VkPipeline                                  pipeline,
    uint32_t                                    firstGroup,
    uint32_t                                    groupCount,
    size_t                                      dataSize,
    void*                                       pData);</code></pre>
</div>
</div>
</div>
<div class="sect3">
<h4 id="_parameters_279">Parameters</h4>
<div class="ulist">
<ul>
<li>
<p><code>device</code> is the logical device that contains the ray tracing
pipeline.</p>
</li>
<li>
<p><code>pipeline</code> is the ray tracing pipeline object that contains the
shaders.</p>
</li>
<li>
<p><code>firstGroup</code> is the index of the first group to retrieve a handle
for from the <a href="#VkRayTracingShaderGroupCreateInfoNV">VkRayTracingShaderGroupCreateInfoNV</a>::<code>pGroups</code>
array.</p>
</li>
<li>
<p><code>groupCount</code> is the number of shader handles to retrieve.</p>
</li>
<li>
<p><code>dataSize</code> is the size in bytes of the buffer pointed to by
<code>pData</code>.</p>
</li>
<li>
<p><code>pData</code> is a pointer to a user-allocated buffer where the results
will be written.</p>
</li>
</ul>
</div>
</div>
<div class="sect3">
<h4 id="_description_279">Description</h4>
<div class="sidebarblock">
<div class="content">
<div class="title">Valid Usage</div>
<div class="ulist">
<ul>
<li>
<p><a id="VUID-vkGetRayTracingShaderGroupHandlesNV-firstGroup-02419"></a>
The sum of <code>firstGroup</code> and <code>groupCount</code> <strong class="purple">must</strong> be less than the
number of shader groups in <code>pipeline</code>.</p>
</li>
<li>
<p><a id="VUID-vkGetRayTracingShaderGroupHandlesNV-dataSize-02420"></a>
<code>dataSize</code> <strong class="purple">must</strong> be at least
<span class="eq"><code>VkPhysicalDeviceRayTracingPropertiesNV</code>::<code>shaderGroupHandleSize</code>
× <code>groupCount</code></span></p>
</li>
</ul>
</div>
</div>
</div>
<div class="sidebarblock">
<div class="content">
<div class="title">Valid Usage (Implicit)</div>
<div class="ulist">
<ul>
<li>
<p><a id="VUID-vkGetRayTracingShaderGroupHandlesNV-device-parameter"></a> <code>device</code> <strong class="purple">must</strong> be a valid <code>VkDevice</code> handle</p>
</li>
<li>
<p><a id="VUID-vkGetRayTracingShaderGroupHandlesNV-pipeline-parameter"></a> <code>pipeline</code> <strong class="purple">must</strong> be a valid <code>VkPipeline</code> handle</p>
</li>
<li>
<p><a id="VUID-vkGetRayTracingShaderGroupHandlesNV-pData-parameter"></a> <code>pData</code> <strong class="purple">must</strong> be a valid pointer to an array of <code>dataSize</code> bytes</p>
</li>
<li>
<p><a id="VUID-vkGetRayTracingShaderGroupHandlesNV-dataSize-arraylength"></a> <code>dataSize</code> <strong class="purple">must</strong> be greater than <code>0</code></p>
</li>
<li>
<p><a id="VUID-vkGetRayTracingShaderGroupHandlesNV-pipeline-parent"></a> <code>pipeline</code> <strong class="purple">must</strong> have been created, allocated, or retrieved from <code>device</code></p>
</li>
</ul>
</div>
</div>
</div>
<div class="sidebarblock">
<div class="content">
<div class="title">Return Codes</div>
<div class="dlist">
<dl>
<dt class="hdlist1"><a href="#fundamentals-successcodes">Success</a></dt>
<dd>
<div class="ulist">
<ul>
<li>
<p><code>VK_SUCCESS</code></p>
</li>
</ul>
</div>
</dd>
<dt class="hdlist1"><a href="#fundamentals-errorcodes">Failure</a></dt>
<dd>
<div class="ulist">
<ul>
<li>
<p><code>VK_ERROR_OUT_OF_HOST_MEMORY</code></p>
</li>
<li>
<p><code>VK_ERROR_OUT_OF_DEVICE_MEMORY</code></p>
</li>
</ul>
</div>
</dd>
</dl>
</div>
</div>
</div>
</div>
<div class="sect3">
<h4 id="_see_also_279">See Also</h4>
<div class="paragraph">
<p><a href="#VkDevice">VkDevice</a>, <a href="#VkPipeline">VkPipeline</a></p>
</div>
</div>
<div class="sect3">
<h4 id="_document_notes_279">Document Notes</h4>
<div class="paragraph">
<p>For more information, see the Vulkan Specification at URL</p>
</div>
<div class="paragraph">
<p><a href="https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#vkGetRayTracingShaderGroupHandlesNV" class="bare">https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#vkGetRayTracingShaderGroupHandlesNV</a></p>
</div>
<div class="paragraph">
<p>This page is extracted from the Vulkan Specification.
Fixes and changes should be made to the Specification, not directly.</p>
</div>
<div style="page-break-after: always;"></div>
</div>
</div>
<div class="sect2">
<h3 id="_vkgetrefreshcycledurationgoogle3">vkGetRefreshCycleDurationGOOGLE(3)</h3>
<div class="sect3">
<h4 id="_name_280">Name</h4>
<div class="paragraph">
<p>vkGetRefreshCycleDurationGOOGLE - Obtain the RC duration of the PE&#8217;s display</p>
</div>
</div>
<div class="sect3">
<h4 id="_c_specification_280">C Specification</h4>
<div class="paragraph">
<p>To query the duration of a refresh cycle (RC) for the presentation engine&#8217;s
display, call:</p>
</div>
<div id="vkGetRefreshCycleDurationGOOGLE" class="listingblock">
<div class="content">
<pre class="highlight"><code class="language-c++" data-lang="c++">VkResult vkGetRefreshCycleDurationGOOGLE(
    VkDevice                                    device,
    VkSwapchainKHR                              swapchain,
    VkRefreshCycleDurationGOOGLE*               pDisplayTimingProperties);</code></pre>
</div>
</div>
</div>
<div class="sect3">
<h4 id="_parameters_280">Parameters</h4>
<div class="ulist">
<ul>
<li>
<p><code>device</code> is the device associated with <code>swapchain</code>.</p>
</li>
<li>
<p><code>swapchain</code> is the swapchain to obtain the refresh duration for.</p>
</li>
<li>
<p><code>pDisplayTimingProperties</code> is a pointer to an instance of the
<code>VkRefreshCycleDurationGOOGLE</code> structure.</p>
</li>
</ul>
</div>
</div>
<div class="sect3">
<h4 id="_description_280">Description</h4>
<div class="sidebarblock">
<div class="content">
<div class="title">Valid Usage (Implicit)</div>
<div class="ulist">
<ul>
<li>
<p><a id="VUID-vkGetRefreshCycleDurationGOOGLE-device-parameter"></a> <code>device</code> <strong class="purple">must</strong> be a valid <code>VkDevice</code> handle</p>
</li>
<li>
<p><a id="VUID-vkGetRefreshCycleDurationGOOGLE-swapchain-parameter"></a> <code>swapchain</code> <strong class="purple">must</strong> be a valid <code>VkSwapchainKHR</code> handle</p>
</li>
<li>
<p><a id="VUID-vkGetRefreshCycleDurationGOOGLE-pDisplayTimingProperties-parameter"></a> <code>pDisplayTimingProperties</code> <strong class="purple">must</strong> be a valid pointer to a <code>VkRefreshCycleDurationGOOGLE</code> structure</p>
</li>
<li>
<p><a id="VUID-vkGetRefreshCycleDurationGOOGLE-commonparent"></a> Both of <code>device</code>, and <code>swapchain</code> <strong class="purple">must</strong> have been created, allocated, or retrieved from the same <code>VkInstance</code></p>
</li>
</ul>
</div>
</div>
</div>
<div class="sidebarblock">
<div class="content">
<div class="title">Host Synchronization</div>
<div class="ulist">
<ul>
<li>
<p>Host access to <code>swapchain</code> <strong class="purple">must</strong> be externally synchronized</p>
</li>
</ul>
</div>
</div>
</div>
<div class="sidebarblock">
<div class="content">
<div class="title">Return Codes</div>
<div class="dlist">
<dl>
<dt class="hdlist1"><a href="#fundamentals-successcodes">Success</a></dt>
<dd>
<div class="ulist">
<ul>
<li>
<p><code>VK_SUCCESS</code></p>
</li>
</ul>
</div>
</dd>
<dt class="hdlist1"><a href="#fundamentals-errorcodes">Failure</a></dt>
<dd>
<div class="ulist">
<ul>
<li>
<p><code>VK_ERROR_DEVICE_LOST</code></p>
</li>
<li>
<p><code>VK_ERROR_SURFACE_LOST_KHR</code></p>
</li>
</ul>
</div>
</dd>
</dl>
</div>
</div>
</div>
</div>
<div class="sect3">
<h4 id="_see_also_280">See Also</h4>
<div class="paragraph">
<p><a href="#VkDevice">VkDevice</a>, <a href="#VkRefreshCycleDurationGOOGLE">VkRefreshCycleDurationGOOGLE</a>, <a href="#VkSwapchainKHR">VkSwapchainKHR</a></p>
</div>
</div>
<div class="sect3">
<h4 id="_document_notes_280">Document Notes</h4>
<div class="paragraph">
<p>For more information, see the Vulkan Specification at URL</p>
</div>
<div class="paragraph">
<p><a href="https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#vkGetRefreshCycleDurationGOOGLE" class="bare">https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#vkGetRefreshCycleDurationGOOGLE</a></p>
</div>
<div class="paragraph">
<p>This page is extracted from the Vulkan Specification.
Fixes and changes should be made to the Specification, not directly.</p>
</div>
<div style="page-break-after: always;"></div>
</div>
</div>
<div class="sect2">
<h3 id="_vkgetrenderareagranularity3">vkGetRenderAreaGranularity(3)</h3>
<div class="sect3">
<h4 id="_name_281">Name</h4>
<div class="paragraph">
<p>vkGetRenderAreaGranularity - Returns the granularity for optimal render area</p>
</div>
</div>
<div class="sect3">
<h4 id="_c_specification_281">C Specification</h4>
<div class="paragraph">
<p>To query the render area granularity, call:</p>
</div>
<div id="vkGetRenderAreaGranularity" class="listingblock">
<div class="content">
<pre class="highlight"><code class="language-c++" data-lang="c++">void vkGetRenderAreaGranularity(
    VkDevice                                    device,
    VkRenderPass                                renderPass,
    VkExtent2D*                                 pGranularity);</code></pre>
</div>
</div>
</div>
<div class="sect3">
<h4 id="_parameters_281">Parameters</h4>
<div class="ulist">
<ul>
<li>
<p><code>device</code> is the logical device that owns the render pass.</p>
</li>
<li>
<p><code>renderPass</code> is a handle to a render pass.</p>
</li>
<li>
<p><code>pGranularity</code> points to a <a href="#VkExtent2D">VkExtent2D</a> structure in which the
granularity is returned.</p>
</li>
</ul>
</div>
</div>
<div class="sect3">
<h4 id="_description_281">Description</h4>
<div class="paragraph">
<p>The conditions leading to an optimal <code>renderArea</code> are:</p>
</div>
<div class="ulist">
<ul>
<li>
<p>the <code>offset.x</code> member in <code>renderArea</code> is a multiple of the
<code>width</code> member of the returned <a href="#VkExtent2D">VkExtent2D</a> (the horizontal
granularity).</p>
</li>
<li>
<p>the <code>offset.y</code> member in <code>renderArea</code> is a multiple of the
<code>height</code> of the returned <a href="#VkExtent2D">VkExtent2D</a> (the vertical
granularity).</p>
</li>
<li>
<p>either the <code>offset.width</code> member in <code>renderArea</code> is a multiple
of the horizontal granularity or <code>offset.x</code>+<code>offset.width</code> is
equal to the <code>width</code> of the <code>framebuffer</code> in the
<a href="#VkRenderPassBeginInfo">VkRenderPassBeginInfo</a>.</p>
</li>
<li>
<p>either the <code>offset.height</code> member in <code>renderArea</code> is a multiple
of the vertical granularity or <code>offset.y</code>+<code>offset.height</code> is
equal to the <code>height</code> of the <code>framebuffer</code> in the
<a href="#VkRenderPassBeginInfo">VkRenderPassBeginInfo</a>.</p>
</li>
</ul>
</div>
<div class="paragraph">
<p>Subpass dependencies are not affected by the render area, and apply to the
entire image subresources attached to the framebuffer as specified in the
description of <a href="vkspec.html#renderpass-layout-transitions">automatic layout
transitions</a>.
Similarly, pipeline barriers are valid even if their effect extends outside
the render area.</p>
</div>
<div class="sidebarblock">
<div class="content">
<div class="title">Valid Usage (Implicit)</div>
<div class="ulist">
<ul>
<li>
<p><a id="VUID-vkGetRenderAreaGranularity-device-parameter"></a> <code>device</code> <strong class="purple">must</strong> be a valid <code>VkDevice</code> handle</p>
</li>
<li>
<p><a id="VUID-vkGetRenderAreaGranularity-renderPass-parameter"></a> <code>renderPass</code> <strong class="purple">must</strong> be a valid <code>VkRenderPass</code> handle</p>
</li>
<li>
<p><a id="VUID-vkGetRenderAreaGranularity-pGranularity-parameter"></a> <code>pGranularity</code> <strong class="purple">must</strong> be a valid pointer to a <code>VkExtent2D</code> structure</p>
</li>
<li>
<p><a id="VUID-vkGetRenderAreaGranularity-renderPass-parent"></a> <code>renderPass</code> <strong class="purple">must</strong> have been created, allocated, or retrieved from <code>device</code></p>
</li>
</ul>
</div>
</div>
</div>
</div>
<div class="sect3">
<h4 id="_see_also_281">See Also</h4>
<div class="paragraph">
<p><a href="#VkDevice">VkDevice</a>, <a href="#VkExtent2D">VkExtent2D</a>, <a href="#VkRenderPass">VkRenderPass</a></p>
</div>
</div>
<div class="sect3">
<h4 id="_document_notes_281">Document Notes</h4>
<div class="paragraph">
<p>For more information, see the Vulkan Specification at URL</p>
</div>
<div class="paragraph">
<p><a href="https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#vkGetRenderAreaGranularity" class="bare">https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#vkGetRenderAreaGranularity</a></p>
</div>
<div class="paragraph">
<p>This page is extracted from the Vulkan Specification.
Fixes and changes should be made to the Specification, not directly.</p>
</div>
<div style="page-break-after: always;"></div>
</div>
</div>
<div class="sect2">
<h3 id="_vkgetsemaphorefdkhr3">vkGetSemaphoreFdKHR(3)</h3>
<div class="sect3">
<h4 id="_name_282">Name</h4>
<div class="paragraph">
<p>vkGetSemaphoreFdKHR - Get a POSIX file descriptor handle for a semaphore</p>
</div>
</div>
<div class="sect3">
<h4 id="_c_specification_282">C Specification</h4>
<div class="paragraph">
<p>To export a POSIX file descriptor representing the payload of a semaphore,
call:</p>
</div>
<div id="vkGetSemaphoreFdKHR" class="listingblock">
<div class="content">
<pre class="highlight"><code class="language-c++" data-lang="c++">VkResult vkGetSemaphoreFdKHR(
    VkDevice                                    device,
    const VkSemaphoreGetFdInfoKHR*              pGetFdInfo,
    int*                                        pFd);</code></pre>
</div>
</div>
</div>
<div class="sect3">
<h4 id="_parameters_282">Parameters</h4>
<div class="ulist">
<ul>
<li>
<p><code>device</code> is the logical device that created the semaphore being
exported.</p>
</li>
<li>
<p><code>pGetFdInfo</code> is a pointer to an instance of the
<a href="#VkSemaphoreGetFdInfoKHR">VkSemaphoreGetFdInfoKHR</a> structure containing parameters of the
export operation.</p>
</li>
<li>
<p><code>pFd</code> will return the file descriptor representing the semaphore
payload.</p>
</li>
</ul>
</div>
</div>
<div class="sect3">
<h4 id="_description_282">Description</h4>
<div class="paragraph">
<p>Each call to <code>vkGetSemaphoreFdKHR</code> <strong class="purple">must</strong> create a new file descriptor
and transfer ownership of it to the application.
To avoid leaking resources, the application <strong class="purple">must</strong> release ownership of the
file descriptor when it is no longer needed.</p>
</div>
<div class="admonitionblock note">
<table>
<tr>
<td class="icon">
<i class="fa icon-note" title="Note"></i>
</td>
<td class="content">
<div class="title">Note</div>
<div class="paragraph">
<p>Ownership can be released in many ways.
For example, the application can call <code>close</code>() on the file descriptor,
or transfer ownership back to Vulkan by using the file descriptor to import
a semaphore payload.</p>
</div>
</td>
</tr>
</table>
</div>
<div class="paragraph">
<p>Where supported by the operating system, the implementation <strong class="purple">must</strong> set the
file descriptor to be closed automatically when an <code>execve</code> system call
is made.</p>
</div>
<div class="paragraph">
<p>Exporting a file descriptor from a semaphore <strong class="purple">may</strong> have side effects
depending on the transference of the specified handle type, as described in
<a href="vkspec.html#synchronization-semaphores-importing">Importing Semaphore State</a>.</p>
</div>
<div class="sidebarblock">
<div class="content">
<div class="title">Valid Usage (Implicit)</div>
<div class="ulist">
<ul>
<li>
<p><a id="VUID-vkGetSemaphoreFdKHR-device-parameter"></a> <code>device</code> <strong class="purple">must</strong> be a valid <code>VkDevice</code> handle</p>
</li>
<li>
<p><a id="VUID-vkGetSemaphoreFdKHR-pGetFdInfo-parameter"></a> <code>pGetFdInfo</code> <strong class="purple">must</strong> be a valid pointer to a valid <code>VkSemaphoreGetFdInfoKHR</code> structure</p>
</li>
<li>
<p><a id="VUID-vkGetSemaphoreFdKHR-pFd-parameter"></a> <code>pFd</code> <strong class="purple">must</strong> be a valid pointer to a <code>int</code> value</p>
</li>
</ul>
</div>
</div>
</div>
<div class="sidebarblock">
<div class="content">
<div class="title">Return Codes</div>
<div class="dlist">
<dl>
<dt class="hdlist1"><a href="#fundamentals-successcodes">Success</a></dt>
<dd>
<div class="ulist">
<ul>
<li>
<p><code>VK_SUCCESS</code></p>
</li>
</ul>
</div>
</dd>
<dt class="hdlist1"><a href="#fundamentals-errorcodes">Failure</a></dt>
<dd>
<div class="ulist">
<ul>
<li>
<p><code>VK_ERROR_TOO_MANY_OBJECTS</code></p>
</li>
<li>
<p><code>VK_ERROR_OUT_OF_HOST_MEMORY</code></p>
</li>
</ul>
</div>
</dd>
</dl>
</div>
</div>
</div>
</div>
<div class="sect3">
<h4 id="_see_also_282">See Also</h4>
<div class="paragraph">
<p><a href="#VkDevice">VkDevice</a>, <a href="#VkSemaphoreGetFdInfoKHR">VkSemaphoreGetFdInfoKHR</a></p>
</div>
</div>
<div class="sect3">
<h4 id="_document_notes_282">Document Notes</h4>
<div class="paragraph">
<p>For more information, see the Vulkan Specification at URL</p>
</div>
<div class="paragraph">
<p><a href="https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#vkGetSemaphoreFdKHR" class="bare">https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#vkGetSemaphoreFdKHR</a></p>
</div>
<div class="paragraph">
<p>This page is extracted from the Vulkan Specification.
Fixes and changes should be made to the Specification, not directly.</p>
</div>
<div style="page-break-after: always;"></div>
</div>
</div>
<div class="sect2">
<h3 id="_vkgetsemaphorewin32handlekhr3">vkGetSemaphoreWin32HandleKHR(3)</h3>
<div class="sect3">
<h4 id="_name_283">Name</h4>
<div class="paragraph">
<p>vkGetSemaphoreWin32HandleKHR - Get a Windows HANDLE for a semaphore</p>
</div>
</div>
<div class="sect3">
<h4 id="_c_specification_283">C Specification</h4>
<div class="paragraph">
<p>To export a Windows handle representing the payload of a semaphore, call:</p>
</div>
<div id="vkGetSemaphoreWin32HandleKHR" class="listingblock">
<div class="content">
<pre class="highlight"><code class="language-c++" data-lang="c++">VkResult vkGetSemaphoreWin32HandleKHR(
    VkDevice                                    device,
    const VkSemaphoreGetWin32HandleInfoKHR*     pGetWin32HandleInfo,
    HANDLE*                                     pHandle);</code></pre>
</div>
</div>
</div>
<div class="sect3">
<h4 id="_parameters_283">Parameters</h4>
<div class="ulist">
<ul>
<li>
<p><code>device</code> is the logical device that created the semaphore being
exported.</p>
</li>
<li>
<p><code>pGetWin32HandleInfo</code> is a pointer to an instance of the
<a href="#VkSemaphoreGetWin32HandleInfoKHR">VkSemaphoreGetWin32HandleInfoKHR</a> structure containing parameters
of the export operation.</p>
</li>
<li>
<p><code>pHandle</code> will return the Windows handle representing the semaphore
state.</p>
</li>
</ul>
</div>
</div>
<div class="sect3">
<h4 id="_description_283">Description</h4>
<div class="paragraph">
<p>For handle types defined as NT handles, the handles returned by
<code>vkGetSemaphoreWin32HandleKHR</code> are owned by the application.
To avoid leaking resources, the application <strong class="purple">must</strong> release ownership of them
using the <code>CloseHandle</code> system call when they are no longer needed.</p>
</div>
<div class="paragraph">
<p>Exporting a Windows handle from a semaphore <strong class="purple">may</strong> have side effects depending
on the transference of the specified handle type, as described in
<a href="vkspec.html#synchronization-semaphores-importing">Importing Semaphore Payloads</a>.</p>
</div>
<div class="sidebarblock">
<div class="content">
<div class="title">Valid Usage (Implicit)</div>
<div class="ulist">
<ul>
<li>
<p><a id="VUID-vkGetSemaphoreWin32HandleKHR-device-parameter"></a> <code>device</code> <strong class="purple">must</strong> be a valid <code>VkDevice</code> handle</p>
</li>
<li>
<p><a id="VUID-vkGetSemaphoreWin32HandleKHR-pGetWin32HandleInfo-parameter"></a> <code>pGetWin32HandleInfo</code> <strong class="purple">must</strong> be a valid pointer to a valid <code>VkSemaphoreGetWin32HandleInfoKHR</code> structure</p>
</li>
<li>
<p><a id="VUID-vkGetSemaphoreWin32HandleKHR-pHandle-parameter"></a> <code>pHandle</code> <strong class="purple">must</strong> be a valid pointer to a <code>HANDLE</code> value</p>
</li>
</ul>
</div>
</div>
</div>
<div class="sidebarblock">
<div class="content">
<div class="title">Return Codes</div>
<div class="dlist">
<dl>
<dt class="hdlist1"><a href="#fundamentals-successcodes">Success</a></dt>
<dd>
<div class="ulist">
<ul>
<li>
<p><code>VK_SUCCESS</code></p>
</li>
</ul>
</div>
</dd>
<dt class="hdlist1"><a href="#fundamentals-errorcodes">Failure</a></dt>
<dd>
<div class="ulist">
<ul>
<li>
<p><code>VK_ERROR_TOO_MANY_OBJECTS</code></p>
</li>
<li>
<p><code>VK_ERROR_OUT_OF_HOST_MEMORY</code></p>
</li>
</ul>
</div>
</dd>
</dl>
</div>
</div>
</div>
</div>
<div class="sect3">
<h4 id="_see_also_283">See Also</h4>
<div class="paragraph">
<p><a href="#VkDevice">VkDevice</a>, <a href="#VkSemaphoreGetWin32HandleInfoKHR">VkSemaphoreGetWin32HandleInfoKHR</a></p>
</div>
</div>
<div class="sect3">
<h4 id="_document_notes_283">Document Notes</h4>
<div class="paragraph">
<p>For more information, see the Vulkan Specification at URL</p>
</div>
<div class="paragraph">
<p><a href="https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#vkGetSemaphoreWin32HandleKHR" class="bare">https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#vkGetSemaphoreWin32HandleKHR</a></p>
</div>
<div class="paragraph">
<p>This page is extracted from the Vulkan Specification.
Fixes and changes should be made to the Specification, not directly.</p>
</div>
<div style="page-break-after: always;"></div>
</div>
</div>
<div class="sect2">
<h3 id="_vkgetshaderinfoamd3">vkGetShaderInfoAMD(3)</h3>
<div class="sect3">
<h4 id="_name_284">Name</h4>
<div class="paragraph">
<p>vkGetShaderInfoAMD - Get information about a shader in a pipeline</p>
</div>
</div>
<div class="sect3">
<h4 id="_c_specification_284">C Specification</h4>
<div class="paragraph">
<p>Information about a particular shader that has been compiled as part of a
pipeline object can be extracted by calling:</p>
</div>
<div id="vkGetShaderInfoAMD" class="listingblock">
<div class="content">
<pre class="highlight"><code class="language-c++" data-lang="c++">VkResult vkGetShaderInfoAMD(
    VkDevice                                    device,
    VkPipeline                                  pipeline,
    VkShaderStageFlagBits                       shaderStage,
    VkShaderInfoTypeAMD                         infoType,
    size_t*                                     pInfoSize,
    void*                                       pInfo);</code></pre>
</div>
</div>
</div>
<div class="sect3">
<h4 id="_parameters_284">Parameters</h4>
<div class="ulist">
<ul>
<li>
<p><code>device</code> is the device that created <code>pipeline</code>.</p>
</li>
<li>
<p><code>pipeline</code> is the target of the query.</p>
</li>
<li>
<p><code>shaderStage</code> identifies the particular shader within the pipeline
about which information is being queried.</p>
</li>
<li>
<p><code>infoType</code> describes what kind of information is being queried.</p>
</li>
<li>
<p><code>pInfoSize</code> is a pointer to a value related to the amount of data
the query returns, as described below.</p>
</li>
<li>
<p><code>pInfo</code> is either NULL or a pointer to a buffer.</p>
</li>
</ul>
</div>
</div>
<div class="sect3">
<h4 id="_description_284">Description</h4>
<div class="paragraph">
<p>If <code>pInfo</code> is <code>NULL</code>, then the maximum size of the information that <strong class="purple">can</strong>
be retrieved about the shader, in bytes, is returned in <code>pInfoSize</code>.
Otherwise, <code>pInfoSize</code> <strong class="purple">must</strong> point to a variable set by the user to the
size of the buffer, in bytes, pointed to by <code>pInfo</code>, and on return the
variable is overwritten with the amount of data actually written to
<code>pInfo</code>.</p>
</div>
<div class="paragraph">
<p>If <code>pInfoSize</code> is less than the maximum size that <strong class="purple">can</strong> be retrieved by
the pipeline cache, then at most <code>pInfoSize</code> bytes will be written to
<code>pInfo</code>, and <code>vkGetShaderInfoAMD</code> will return <code>VK_INCOMPLETE</code>.</p>
</div>
<div class="paragraph">
<p>Not all information is available for every shader and implementations may
not support all kinds of information for any shader.
When a certain type of information is unavailable, the function returns
<code>VK_ERROR_FEATURE_NOT_PRESENT</code>.</p>
</div>
<div class="paragraph">
<p>If information is successfully and fully queried, the function will return
<code>VK_SUCCESS</code>.</p>
</div>
<div class="paragraph">
<p>For <code>infoType</code> <code>VK_SHADER_INFO_TYPE_STATISTICS_AMD</code>, an instance of
<code>VkShaderStatisticsInfoAMD</code> will be written to the buffer pointed to by
<code>pInfo</code>.
This structure will be populated with statistics regarding the physical
device resources used by that shader along with other miscellaneous
information and is described in further detail below.</p>
</div>
<div class="paragraph">
<p>For <code>infoType</code> <code>VK_SHADER_INFO_TYPE_DISASSEMBLY_AMD</code>, <code>pInfo</code>
points to a UTF-8 null-terminated string containing human-readable
disassembly.
The exact formatting and contents of the disassembly string are
vendor-specific.</p>
</div>
<div class="paragraph">
<p>The formatting and contents of all other types of information, including
<code>infoType</code> <code>VK_SHADER_INFO_TYPE_BINARY_AMD</code>, are left to the vendor
and are not further specified by this extension.</p>
</div>
<div class="sidebarblock">
<div class="content">
<div class="title">Valid Usage (Implicit)</div>
<div class="ulist">
<ul>
<li>
<p><a id="VUID-vkGetShaderInfoAMD-device-parameter"></a> <code>device</code> <strong class="purple">must</strong> be a valid <code>VkDevice</code> handle</p>
</li>
<li>
<p><a id="VUID-vkGetShaderInfoAMD-pipeline-parameter"></a> <code>pipeline</code> <strong class="purple">must</strong> be a valid <code>VkPipeline</code> handle</p>
</li>
<li>
<p><a id="VUID-vkGetShaderInfoAMD-shaderStage-parameter"></a> <code>shaderStage</code> <strong class="purple">must</strong> be a valid <a href="#VkShaderStageFlagBits">VkShaderStageFlagBits</a> value</p>
</li>
<li>
<p><a id="VUID-vkGetShaderInfoAMD-infoType-parameter"></a> <code>infoType</code> <strong class="purple">must</strong> be a valid <a href="#VkShaderInfoTypeAMD">VkShaderInfoTypeAMD</a> value</p>
</li>
<li>
<p><a id="VUID-vkGetShaderInfoAMD-pInfoSize-parameter"></a> <code>pInfoSize</code> <strong class="purple">must</strong> be a valid pointer to a <code>size_t</code> value</p>
</li>
<li>
<p><a id="VUID-vkGetShaderInfoAMD-pInfo-parameter"></a> If the value referenced by <code>pInfoSize</code> is not <code>0</code>, and <code>pInfo</code> is not <code>NULL</code>, <code>pInfo</code> <strong class="purple">must</strong> be a valid pointer to an array of <code>pInfoSize</code> bytes</p>
</li>
<li>
<p><a id="VUID-vkGetShaderInfoAMD-pipeline-parent"></a> <code>pipeline</code> <strong class="purple">must</strong> have been created, allocated, or retrieved from <code>device</code></p>
</li>
</ul>
</div>
</div>
</div>
<div class="sidebarblock">
<div class="content">
<div class="title">Return Codes</div>
<div class="dlist">
<dl>
<dt class="hdlist1"><a href="#fundamentals-successcodes">Success</a></dt>
<dd>
<div class="ulist">
<ul>
<li>
<p><code>VK_SUCCESS</code></p>
</li>
<li>
<p><code>VK_INCOMPLETE</code></p>
</li>
</ul>
</div>
</dd>
<dt class="hdlist1"><a href="#fundamentals-errorcodes">Failure</a></dt>
<dd>
<div class="ulist">
<ul>
<li>
<p><code>VK_ERROR_FEATURE_NOT_PRESENT</code></p>
</li>
<li>
<p><code>VK_ERROR_OUT_OF_HOST_MEMORY</code></p>
</li>
</ul>
</div>
</dd>
</dl>
</div>
</div>
</div>
</div>
<div class="sect3">
<h4 id="_see_also_284">See Also</h4>
<div class="paragraph">
<p><a href="#VkDevice">VkDevice</a>, <a href="#VkPipeline">VkPipeline</a>, <a href="#VkShaderInfoTypeAMD">VkShaderInfoTypeAMD</a>, <a href="#VkShaderStageFlagBits">VkShaderStageFlagBits</a></p>
</div>
</div>
<div class="sect3">
<h4 id="_document_notes_284">Document Notes</h4>
<div class="paragraph">
<p>For more information, see the Vulkan Specification at URL</p>
</div>
<div class="paragraph">
<p><a href="https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#vkGetShaderInfoAMD" class="bare">https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#vkGetShaderInfoAMD</a></p>
</div>
<div class="paragraph">
<p>This page is extracted from the Vulkan Specification.
Fixes and changes should be made to the Specification, not directly.</p>
</div>
<div style="page-break-after: always;"></div>
</div>
</div>
<div class="sect2">
<h3 id="_vkgetswapchaincounterext3">vkGetSwapchainCounterEXT(3)</h3>
<div class="sect3">
<h4 id="_name_285">Name</h4>
<div class="paragraph">
<p>vkGetSwapchainCounterEXT - Query the current value of a surface counter</p>
</div>
</div>
<div class="sect3">
<h4 id="_c_specification_285">C Specification</h4>
<div class="paragraph">
<p>The requested counters become active when the first presentation command for
the associated swapchain is processed by the presentation engine.
To query the value of an active counter, use:</p>
</div>
<div id="vkGetSwapchainCounterEXT" class="listingblock">
<div class="content">
<pre class="highlight"><code class="language-c++" data-lang="c++">VkResult vkGetSwapchainCounterEXT(
    VkDevice                                    device,
    VkSwapchainKHR                              swapchain,
    VkSurfaceCounterFlagBitsEXT                 counter,
    uint64_t*                                   pCounterValue);</code></pre>
</div>
</div>
</div>
<div class="sect3">
<h4 id="_parameters_285">Parameters</h4>
<div class="ulist">
<ul>
<li>
<p><code>device</code> is the <a href="#VkDevice">VkDevice</a> associated with <code>swapchain</code>.</p>
</li>
<li>
<p><code>swapchain</code> is the swapchain from which to query the counter value.</p>
</li>
<li>
<p><code>counter</code> is the counter to query.</p>
</li>
<li>
<p><code>pCounterValue</code> will return the current value of the counter.</p>
</li>
</ul>
</div>
</div>
<div class="sect3">
<h4 id="_description_285">Description</h4>
<div class="paragraph">
<p>If a counter is not available because the swapchain is out of date, the
implementation <strong class="purple">may</strong> return <code>VK_ERROR_OUT_OF_DATE_KHR</code>.</p>
</div>
<div class="sidebarblock">
<div class="content">
<div class="title">Valid Usage</div>
<div class="ulist">
<ul>
<li>
<p><a id="VUID-vkGetSwapchainCounterEXT-swapchain-01245"></a>
One or more present commands on <code>swapchain</code> <strong class="purple">must</strong> have been
processed by the presentation engine.</p>
</li>
</ul>
</div>
</div>
</div>
<div class="sidebarblock">
<div class="content">
<div class="title">Valid Usage (Implicit)</div>
<div class="ulist">
<ul>
<li>
<p><a id="VUID-vkGetSwapchainCounterEXT-device-parameter"></a> <code>device</code> <strong class="purple">must</strong> be a valid <code>VkDevice</code> handle</p>
</li>
<li>
<p><a id="VUID-vkGetSwapchainCounterEXT-swapchain-parameter"></a> <code>swapchain</code> <strong class="purple">must</strong> be a valid <code>VkSwapchainKHR</code> handle</p>
</li>
<li>
<p><a id="VUID-vkGetSwapchainCounterEXT-counter-parameter"></a> <code>counter</code> <strong class="purple">must</strong> be a valid <a href="#VkSurfaceCounterFlagBitsEXT">VkSurfaceCounterFlagBitsEXT</a> value</p>
</li>
<li>
<p><a id="VUID-vkGetSwapchainCounterEXT-pCounterValue-parameter"></a> <code>pCounterValue</code> <strong class="purple">must</strong> be a valid pointer to a <code>uint64_t</code> value</p>
</li>
<li>
<p><a id="VUID-vkGetSwapchainCounterEXT-commonparent"></a> Both of <code>device</code>, and <code>swapchain</code> <strong class="purple">must</strong> have been created, allocated, or retrieved from the same <code>VkInstance</code></p>
</li>
</ul>
</div>
</div>
</div>
<div class="sidebarblock">
<div class="content">
<div class="title">Return Codes</div>
<div class="dlist">
<dl>
<dt class="hdlist1"><a href="#fundamentals-successcodes">Success</a></dt>
<dd>
<div class="ulist">
<ul>
<li>
<p><code>VK_SUCCESS</code></p>
</li>
</ul>
</div>
</dd>
<dt class="hdlist1"><a href="#fundamentals-errorcodes">Failure</a></dt>
<dd>
<div class="ulist">
<ul>
<li>
<p><code>VK_ERROR_DEVICE_LOST</code></p>
</li>
<li>
<p><code>VK_ERROR_OUT_OF_DATE_KHR</code></p>
</li>
</ul>
</div>
</dd>
</dl>
</div>
</div>
</div>
</div>
<div class="sect3">
<h4 id="_see_also_285">See Also</h4>
<div class="paragraph">
<p><a href="#VkDevice">VkDevice</a>, <a href="#VkSurfaceCounterFlagBitsEXT">VkSurfaceCounterFlagBitsEXT</a>, <a href="#VkSwapchainKHR">VkSwapchainKHR</a></p>
</div>
</div>
<div class="sect3">
<h4 id="_document_notes_285">Document Notes</h4>
<div class="paragraph">
<p>For more information, see the Vulkan Specification at URL</p>
</div>
<div class="paragraph">
<p><a href="https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#vkGetSwapchainCounterEXT" class="bare">https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#vkGetSwapchainCounterEXT</a></p>
</div>
<div class="paragraph">
<p>This page is extracted from the Vulkan Specification.
Fixes and changes should be made to the Specification, not directly.</p>
</div>
<div style="page-break-after: always;"></div>
</div>
</div>
<div class="sect2">
<h3 id="_vkgetswapchainimageskhr3">vkGetSwapchainImagesKHR(3)</h3>
<div class="sect3">
<h4 id="_name_286">Name</h4>
<div class="paragraph">
<p>vkGetSwapchainImagesKHR - Obtain the array of presentable images associated with a swapchain</p>
</div>
</div>
<div class="sect3">
<h4 id="_c_specification_286">C Specification</h4>
<div class="paragraph">
<p>To obtain the array of presentable images associated with a swapchain, call:</p>
</div>
<div id="vkGetSwapchainImagesKHR" class="listingblock">
<div class="content">
<pre class="highlight"><code class="language-c++" data-lang="c++">VkResult vkGetSwapchainImagesKHR(
    VkDevice                                    device,
    VkSwapchainKHR                              swapchain,
    uint32_t*                                   pSwapchainImageCount,
    VkImage*                                    pSwapchainImages);</code></pre>
</div>
</div>
</div>
<div class="sect3">
<h4 id="_parameters_286">Parameters</h4>
<div class="ulist">
<ul>
<li>
<p><code>device</code> is the device associated with <code>swapchain</code>.</p>
</li>
<li>
<p><code>swapchain</code> is the swapchain to query.</p>
</li>
<li>
<p><code>pSwapchainImageCount</code> is a pointer to an integer related to the
number of presentable images available or queried, as described below.</p>
</li>
<li>
<p><code>pSwapchainImages</code> is either <code>NULL</code> or a pointer to an array of
<code>VkImage</code> handles.</p>
</li>
</ul>
</div>
</div>
<div class="sect3">
<h4 id="_description_286">Description</h4>
<div class="paragraph">
<p>If <code>pSwapchainImages</code> is <code>NULL</code>, then the number of presentable images
for <code>swapchain</code> is returned in <code>pSwapchainImageCount</code>.
Otherwise, <code>pSwapchainImageCount</code> <strong class="purple">must</strong> point to a variable set by the
user to the number of elements in the <code>pSwapchainImages</code> array, and on
return the variable is overwritten with the number of structures actually
written to <code>pSwapchainImages</code>.
If the value of <code>pSwapchainImageCount</code> is less than the number of
presentable images for <code>swapchain</code>, at most <code>pSwapchainImageCount</code>
structures will be written.
If <code>pSwapchainImageCount</code> is smaller than the number of presentable
images for <code>swapchain</code>, <code>VK_INCOMPLETE</code> will be returned instead of
<code>VK_SUCCESS</code> to indicate that not all the available values were
returned.</p>
</div>
<div class="sidebarblock">
<div class="content">
<div class="title">Valid Usage (Implicit)</div>
<div class="ulist">
<ul>
<li>
<p><a id="VUID-vkGetSwapchainImagesKHR-device-parameter"></a> <code>device</code> <strong class="purple">must</strong> be a valid <code>VkDevice</code> handle</p>
</li>
<li>
<p><a id="VUID-vkGetSwapchainImagesKHR-swapchain-parameter"></a> <code>swapchain</code> <strong class="purple">must</strong> be a valid <code>VkSwapchainKHR</code> handle</p>
</li>
<li>
<p><a id="VUID-vkGetSwapchainImagesKHR-pSwapchainImageCount-parameter"></a> <code>pSwapchainImageCount</code> <strong class="purple">must</strong> be a valid pointer to a <code>uint32_t</code> value</p>
</li>
<li>
<p><a id="VUID-vkGetSwapchainImagesKHR-pSwapchainImages-parameter"></a> If the value referenced by <code>pSwapchainImageCount</code> is not <code>0</code>, and <code>pSwapchainImages</code> is not <code>NULL</code>, <code>pSwapchainImages</code> <strong class="purple">must</strong> be a valid pointer to an array of <code>pSwapchainImageCount</code> <code>VkImage</code> handles</p>
</li>
<li>
<p><a id="VUID-vkGetSwapchainImagesKHR-commonparent"></a> Both of <code>device</code>, and <code>swapchain</code> <strong class="purple">must</strong> have been created, allocated, or retrieved from the same <code>VkInstance</code></p>
</li>
</ul>
</div>
</div>
</div>
<div class="sidebarblock">
<div class="content">
<div class="title">Return Codes</div>
<div class="dlist">
<dl>
<dt class="hdlist1"><a href="#fundamentals-successcodes">Success</a></dt>
<dd>
<div class="ulist">
<ul>
<li>
<p><code>VK_SUCCESS</code></p>
</li>
<li>
<p><code>VK_INCOMPLETE</code></p>
</li>
</ul>
</div>
</dd>
<dt class="hdlist1"><a href="#fundamentals-errorcodes">Failure</a></dt>
<dd>
<div class="ulist">
<ul>
<li>
<p><code>VK_ERROR_OUT_OF_HOST_MEMORY</code></p>
</li>
<li>
<p><code>VK_ERROR_OUT_OF_DEVICE_MEMORY</code></p>
</li>
</ul>
</div>
</dd>
</dl>
</div>
</div>
</div>
</div>
<div class="sect3">
<h4 id="_see_also_286">See Also</h4>
<div class="paragraph">
<p><a href="#VkDevice">VkDevice</a>, <a href="#VkImage">VkImage</a>, <a href="#VkSwapchainKHR">VkSwapchainKHR</a></p>
</div>
</div>
<div class="sect3">
<h4 id="_document_notes_286">Document Notes</h4>
<div class="paragraph">
<p>For more information, see the Vulkan Specification at URL</p>
</div>
<div class="paragraph">
<p><a href="https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#vkGetSwapchainImagesKHR" class="bare">https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#vkGetSwapchainImagesKHR</a></p>
</div>
<div class="paragraph">
<p>This page is extracted from the Vulkan Specification.
Fixes and changes should be made to the Specification, not directly.</p>
</div>
<div style="page-break-after: always;"></div>
</div>
</div>
<div class="sect2">
<h3 id="_vkgetswapchainstatuskhr3">vkGetSwapchainStatusKHR(3)</h3>
<div class="sect3">
<h4 id="_name_287">Name</h4>
<div class="paragraph">
<p>vkGetSwapchainStatusKHR - Get a swapchain&#8217;s status</p>
</div>
</div>
<div class="sect3">
<h4 id="_c_specification_287">C Specification</h4>
<div class="paragraph">
<p>In order to query a swapchain&#8217;s status when rendering to a shared
presentable image, call:</p>
</div>
<div id="vkGetSwapchainStatusKHR" class="listingblock">
<div class="content">
<pre class="highlight"><code class="language-c++" data-lang="c++">VkResult vkGetSwapchainStatusKHR(
    VkDevice                                    device,
    VkSwapchainKHR                              swapchain);</code></pre>
</div>
</div>
</div>
<div class="sect3">
<h4 id="_parameters_287">Parameters</h4>
<div class="ulist">
<ul>
<li>
<p><code>device</code> is the device associated with <code>swapchain</code>.</p>
</li>
<li>
<p><code>swapchain</code> is the swapchain to query.</p>
</li>
</ul>
</div>
</div>
<div class="sect3">
<h4 id="_description_287">Description</h4>
<div class="sidebarblock">
<div class="content">
<div class="title">Valid Usage (Implicit)</div>
<div class="ulist">
<ul>
<li>
<p><a id="VUID-vkGetSwapchainStatusKHR-device-parameter"></a> <code>device</code> <strong class="purple">must</strong> be a valid <code>VkDevice</code> handle</p>
</li>
<li>
<p><a id="VUID-vkGetSwapchainStatusKHR-swapchain-parameter"></a> <code>swapchain</code> <strong class="purple">must</strong> be a valid <code>VkSwapchainKHR</code> handle</p>
</li>
<li>
<p><a id="VUID-vkGetSwapchainStatusKHR-commonparent"></a> Both of <code>device</code>, and <code>swapchain</code> <strong class="purple">must</strong> have been created, allocated, or retrieved from the same <code>VkInstance</code></p>
</li>
</ul>
</div>
</div>
</div>
<div class="sidebarblock">
<div class="content">
<div class="title">Host Synchronization</div>
<div class="ulist">
<ul>
<li>
<p>Host access to <code>swapchain</code> <strong class="purple">must</strong> be externally synchronized</p>
</li>
</ul>
</div>
</div>
</div>
<div class="sidebarblock">
<div class="content">
<div class="title">Return Codes</div>
<div class="dlist">
<dl>
<dt class="hdlist1"><a href="#fundamentals-successcodes">Success</a></dt>
<dd>
<div class="ulist">
<ul>
<li>
<p><code>VK_SUCCESS</code></p>
</li>
<li>
<p><code>VK_SUBOPTIMAL_KHR</code></p>
</li>
</ul>
</div>
</dd>
<dt class="hdlist1"><a href="#fundamentals-errorcodes">Failure</a></dt>
<dd>
<div class="ulist">
<ul>
<li>
<p><code>VK_ERROR_OUT_OF_HOST_MEMORY</code></p>
</li>
<li>
<p><code>VK_ERROR_OUT_OF_DEVICE_MEMORY</code></p>
</li>
<li>
<p><code>VK_ERROR_DEVICE_LOST</code></p>
</li>
<li>
<p><code>VK_ERROR_OUT_OF_DATE_KHR</code></p>
</li>
<li>
<p><code>VK_ERROR_SURFACE_LOST_KHR</code></p>
</li>
<li>
<p><code>VK_ERROR_FULL_SCREEN_EXCLUSIVE_MODE_LOST_EXT</code></p>
</li>
</ul>
</div>
</dd>
</dl>
</div>
</div>
</div>
</div>
<div class="sect3">
<h4 id="_see_also_287">See Also</h4>
<div class="paragraph">
<p><a href="#VkDevice">VkDevice</a>, <a href="#VkSwapchainKHR">VkSwapchainKHR</a></p>
</div>
</div>
<div class="sect3">
<h4 id="_document_notes_287">Document Notes</h4>
<div class="paragraph">
<p>For more information, see the Vulkan Specification at URL</p>
</div>
<div class="paragraph">
<p><a href="https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#vkGetSwapchainStatusKHR" class="bare">https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#vkGetSwapchainStatusKHR</a></p>
</div>
<div class="paragraph">
<p>This page is extracted from the Vulkan Specification.
Fixes and changes should be made to the Specification, not directly.</p>
</div>
<div style="page-break-after: always;"></div>
</div>
</div>
<div class="sect2">
<h3 id="_vkgetvalidationcachedataext3">vkGetValidationCacheDataEXT(3)</h3>
<div class="sect3">
<h4 id="_name_288">Name</h4>
<div class="paragraph">
<p>vkGetValidationCacheDataEXT - Get the data store from a validation cache</p>
</div>
</div>
<div class="sect3">
<h4 id="_c_specification_288">C Specification</h4>
<div class="paragraph">
<p>Data <strong class="purple">can</strong> be retrieved from a validation cache object using the command:</p>
</div>
<div id="vkGetValidationCacheDataEXT" class="listingblock">
<div class="content">
<pre class="highlight"><code class="language-c++" data-lang="c++">VkResult vkGetValidationCacheDataEXT(
    VkDevice                                    device,
    VkValidationCacheEXT                        validationCache,
    size_t*                                     pDataSize,
    void*                                       pData);</code></pre>
</div>
</div>
</div>
<div class="sect3">
<h4 id="_parameters_288">Parameters</h4>
<div class="ulist">
<ul>
<li>
<p><code>device</code> is the logical device that owns the validation cache.</p>
</li>
<li>
<p><code>validationCache</code> is the validation cache to retrieve data from.</p>
</li>
<li>
<p><code>pDataSize</code> is a pointer to a value related to the amount of data in
the validation cache, as described below.</p>
</li>
<li>
<p><code>pData</code> is either <code>NULL</code> or a pointer to a buffer.</p>
</li>
</ul>
</div>
</div>
<div class="sect3">
<h4 id="_description_288">Description</h4>
<div class="paragraph">
<p>If <code>pData</code> is <code>NULL</code>, then the maximum size of the data that <strong class="purple">can</strong> be
retrieved from the validation cache, in bytes, is returned in
<code>pDataSize</code>.
Otherwise, <code>pDataSize</code> <strong class="purple">must</strong> point to a variable set by the user to the
size of the buffer, in bytes, pointed to by <code>pData</code>, and on return the
variable is overwritten with the amount of data actually written to
<code>pData</code>.</p>
</div>
<div class="paragraph">
<p>If <code>pDataSize</code> is less than the maximum size that <strong class="purple">can</strong> be retrieved by
the validation cache, at most <code>pDataSize</code> bytes will be written to
<code>pData</code>, and <code>vkGetValidationCacheDataEXT</code> will return
<code>VK_INCOMPLETE</code>.
Any data written to <code>pData</code> is valid and <strong class="purple">can</strong> be provided as the
<code>pInitialData</code> member of the <code>VkValidationCacheCreateInfoEXT</code>
structure passed to <code>vkCreateValidationCacheEXT</code>.</p>
</div>
<div class="paragraph">
<p>Two calls to <code>vkGetValidationCacheDataEXT</code> with the same parameters
<strong class="purple">must</strong> retrieve the same data unless a command that modifies the contents of
the cache is called between them.</p>
</div>
<div id="validation-cache-header" class="paragraph">
<p>Applications <strong class="purple">can</strong> store the data retrieved from the validation cache, and
use these data, possibly in a future run of the application, to populate new
validation cache objects.
The results of validation, however, <strong class="purple">may</strong> depend on the vendor ID, device ID,
driver version, and other details of the device.
To enable applications to detect when previously retrieved data is
incompatible with the device, the initial bytes written to <code>pData</code> <strong class="purple">must</strong>
be a header consisting of the following members:</p>
</div>
<table class="tableblock frame-all grid-all" style="width: 85%;">
<caption class="title">Table 6. Layout for validation cache header version <code>VK_VALIDATION_CACHE_HEADER_VERSION_ONE_EXT</code></caption>
<colgroup>
<col style="width: 8%;">
<col style="width: 21%;">
<col style="width: 71%;">
</colgroup>
<thead>
<tr>
<th class="tableblock halign-left valign-top">Offset</th>
<th class="tableblock halign-left valign-top">Size</th>
<th class="tableblock halign-left valign-top">Meaning</th>
</tr>
</thead>
<tbody>
<tr>
<td class="tableblock halign-left valign-top"><p class="tableblock">0</p></td>
<td class="tableblock halign-left valign-top"><p class="tableblock">4</p></td>
<td class="tableblock halign-left valign-top"><p class="tableblock">length in bytes of the entire validation cache header
                             written as a stream of bytes, with the least
                             significant byte first</p></td>
</tr>
<tr>
<td class="tableblock halign-left valign-top"><p class="tableblock">4</p></td>
<td class="tableblock halign-left valign-top"><p class="tableblock">4</p></td>
<td class="tableblock halign-left valign-top"><p class="tableblock">a <a href="#VkValidationCacheHeaderVersionEXT">VkValidationCacheHeaderVersionEXT</a> value
                             written as a stream of bytes, with the least
                             significant byte first</p></td>
</tr>
<tr>
<td class="tableblock halign-left valign-top"><p class="tableblock">8</p></td>
<td class="tableblock halign-left valign-top"><p class="tableblock"><code>VK_UUID_SIZE</code></p></td>
<td class="tableblock halign-left valign-top"><p class="tableblock">a layer commit ID expressed as a UUID, which uniquely
                             identifies the version of the validation layers used
                             to generate these validation results</p></td>
</tr>
</tbody>
</table>
<div class="paragraph">
<p>The first four bytes encode the length of the entire validation cache
header, in bytes.
This value includes all fields in the header including the validation cache
version field and the size of the length field.</p>
</div>
<div class="paragraph">
<p>The next four bytes encode the validation cache version, as described for
<a href="#VkValidationCacheHeaderVersionEXT">VkValidationCacheHeaderVersionEXT</a>.
A consumer of the validation cache <strong class="purple">should</strong> use the cache version to
interpret the remainder of the cache header.</p>
</div>
<div class="paragraph">
<p>If <code>pDataSize</code> is less than what is necessary to store this header,
nothing will be written to <code>pData</code> and zero will be written to
<code>pDataSize</code>.</p>
</div>
<div class="sidebarblock">
<div class="content">
<div class="title">Valid Usage (Implicit)</div>
<div class="ulist">
<ul>
<li>
<p><a id="VUID-vkGetValidationCacheDataEXT-device-parameter"></a> <code>device</code> <strong class="purple">must</strong> be a valid <code>VkDevice</code> handle</p>
</li>
<li>
<p><a id="VUID-vkGetValidationCacheDataEXT-validationCache-parameter"></a> <code>validationCache</code> <strong class="purple">must</strong> be a valid <code>VkValidationCacheEXT</code> handle</p>
</li>
<li>
<p><a id="VUID-vkGetValidationCacheDataEXT-pDataSize-parameter"></a> <code>pDataSize</code> <strong class="purple">must</strong> be a valid pointer to a <code>size_t</code> value</p>
</li>
<li>
<p><a id="VUID-vkGetValidationCacheDataEXT-pData-parameter"></a> If the value referenced by <code>pDataSize</code> is not <code>0</code>, and <code>pData</code> is not <code>NULL</code>, <code>pData</code> <strong class="purple">must</strong> be a valid pointer to an array of <code>pDataSize</code> bytes</p>
</li>
<li>
<p><a id="VUID-vkGetValidationCacheDataEXT-validationCache-parent"></a> <code>validationCache</code> <strong class="purple">must</strong> have been created, allocated, or retrieved from <code>device</code></p>
</li>
</ul>
</div>
</div>
</div>
<div class="sidebarblock">
<div class="content">
<div class="title">Return Codes</div>
<div class="dlist">
<dl>
<dt class="hdlist1"><a href="#fundamentals-successcodes">Success</a></dt>
<dd>
<div class="ulist">
<ul>
<li>
<p><code>VK_SUCCESS</code></p>
</li>
<li>
<p><code>VK_INCOMPLETE</code></p>
</li>
</ul>
</div>
</dd>
<dt class="hdlist1"><a href="#fundamentals-errorcodes">Failure</a></dt>
<dd>
<div class="ulist">
<ul>
<li>
<p><code>VK_ERROR_OUT_OF_HOST_MEMORY</code></p>
</li>
<li>
<p><code>VK_ERROR_OUT_OF_DEVICE_MEMORY</code></p>
</li>
</ul>
</div>
</dd>
</dl>
</div>
</div>
</div>
</div>
<div class="sect3">
<h4 id="_see_also_288">See Also</h4>
<div class="paragraph">
<p><a href="#VkDevice">VkDevice</a>, <a href="#VkValidationCacheEXT">VkValidationCacheEXT</a></p>
</div>
</div>
<div class="sect3">
<h4 id="_document_notes_288">Document Notes</h4>
<div class="paragraph">
<p>For more information, see the Vulkan Specification at URL</p>
</div>
<div class="paragraph">
<p><a href="https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#vkGetValidationCacheDataEXT" class="bare">https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#vkGetValidationCacheDataEXT</a></p>
</div>
<div class="paragraph">
<p>This page is extracted from the Vulkan Specification.
Fixes and changes should be made to the Specification, not directly.</p>
</div>
<div style="page-break-after: always;"></div>
</div>
</div>
<div class="sect2">
<h3 id="_vkimportfencefdkhr3">vkImportFenceFdKHR(3)</h3>
<div class="sect3">
<h4 id="_name_289">Name</h4>
<div class="paragraph">
<p>vkImportFenceFdKHR - Import a fence from a POSIX file descriptor</p>
</div>
</div>
<div class="sect3">
<h4 id="_c_specification_289">C Specification</h4>
<div class="paragraph">
<p>To import a fence payload from a POSIX file descriptor, call:</p>
</div>
<div id="vkImportFenceFdKHR" class="listingblock">
<div class="content">
<pre class="highlight"><code class="language-c++" data-lang="c++">VkResult vkImportFenceFdKHR(
    VkDevice                                    device,
    const VkImportFenceFdInfoKHR*               pImportFenceFdInfo);</code></pre>
</div>
</div>
</div>
<div class="sect3">
<h4 id="_parameters_289">Parameters</h4>
<div class="ulist">
<ul>
<li>
<p><code>device</code> is the logical device that created the fence.</p>
</li>
<li>
<p><code>pImportFenceFdInfo</code> points to a <a href="#VkImportFenceFdInfoKHR">VkImportFenceFdInfoKHR</a>
structure specifying the fence and import parameters.</p>
</li>
</ul>
</div>
</div>
<div class="sect3">
<h4 id="_description_289">Description</h4>
<div class="paragraph">
<p>Importing a fence payload from a file descriptor transfers ownership of the
file descriptor from the application to the Vulkan implementation.
The application <strong class="purple">must</strong> not perform any operations on the file descriptor
after a successful import.</p>
</div>
<div class="paragraph">
<p>Applications <strong class="purple">can</strong> import the same fence payload into multiple instances of
Vulkan, into the same instance from which it was exported, and multiple
times into a given Vulkan instance.</p>
</div>
<div class="sidebarblock">
<div class="content">
<div class="title">Valid Usage</div>
<div class="ulist">
<ul>
<li>
<p><a id="VUID-vkImportFenceFdKHR-fence-01463"></a>
<code>fence</code> <strong class="purple">must</strong> not be associated with any queue command that has not
yet completed execution on that queue</p>
</li>
</ul>
</div>
</div>
</div>
<div class="sidebarblock">
<div class="content">
<div class="title">Valid Usage (Implicit)</div>
<div class="ulist">
<ul>
<li>
<p><a id="VUID-vkImportFenceFdKHR-device-parameter"></a> <code>device</code> <strong class="purple">must</strong> be a valid <code>VkDevice</code> handle</p>
</li>
<li>
<p><a id="VUID-vkImportFenceFdKHR-pImportFenceFdInfo-parameter"></a> <code>pImportFenceFdInfo</code> <strong class="purple">must</strong> be a valid pointer to a valid <code>VkImportFenceFdInfoKHR</code> structure</p>
</li>
</ul>
</div>
</div>
</div>
<div class="sidebarblock">
<div class="content">
<div class="title">Return Codes</div>
<div class="dlist">
<dl>
<dt class="hdlist1"><a href="#fundamentals-successcodes">Success</a></dt>
<dd>
<div class="ulist">
<ul>
<li>
<p><code>VK_SUCCESS</code></p>
</li>
</ul>
</div>
</dd>
<dt class="hdlist1"><a href="#fundamentals-errorcodes">Failure</a></dt>
<dd>
<div class="ulist">
<ul>
<li>
<p><code>VK_ERROR_OUT_OF_HOST_MEMORY</code></p>
</li>
<li>
<p><code>VK_ERROR_INVALID_EXTERNAL_HANDLE</code></p>
</li>
</ul>
</div>
</dd>
</dl>
</div>
</div>
</div>
</div>
<div class="sect3">
<h4 id="_see_also_289">See Also</h4>
<div class="paragraph">
<p><a href="#VkDevice">VkDevice</a>, <a href="#VkImportFenceFdInfoKHR">VkImportFenceFdInfoKHR</a></p>
</div>
</div>
<div class="sect3">
<h4 id="_document_notes_289">Document Notes</h4>
<div class="paragraph">
<p>For more information, see the Vulkan Specification at URL</p>
</div>
<div class="paragraph">
<p><a href="https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#vkImportFenceFdKHR" class="bare">https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#vkImportFenceFdKHR</a></p>
</div>
<div class="paragraph">
<p>This page is extracted from the Vulkan Specification.
Fixes and changes should be made to the Specification, not directly.</p>
</div>
<div style="page-break-after: always;"></div>
</div>
</div>
<div class="sect2">
<h3 id="_vkimportfencewin32handlekhr3">vkImportFenceWin32HandleKHR(3)</h3>
<div class="sect3">
<h4 id="_name_290">Name</h4>
<div class="paragraph">
<p>vkImportFenceWin32HandleKHR - Import a fence from a Windows HANDLE</p>
</div>
</div>
<div class="sect3">
<h4 id="_c_specification_290">C Specification</h4>
<div class="paragraph">
<p>To import a fence payload from a Windows handle, call:</p>
</div>
<div id="vkImportFenceWin32HandleKHR" class="listingblock">
<div class="content">
<pre class="highlight"><code class="language-c++" data-lang="c++">VkResult vkImportFenceWin32HandleKHR(
    VkDevice                                    device,
    const VkImportFenceWin32HandleInfoKHR*      pImportFenceWin32HandleInfo);</code></pre>
</div>
</div>
</div>
<div class="sect3">
<h4 id="_parameters_290">Parameters</h4>
<div class="ulist">
<ul>
<li>
<p><code>device</code> is the logical device that created the fence.</p>
</li>
<li>
<p><code>pImportFenceWin32HandleInfo</code> points to a
<a href="#VkImportFenceWin32HandleInfoKHR">VkImportFenceWin32HandleInfoKHR</a> structure specifying the fence and
import parameters.</p>
</li>
</ul>
</div>
</div>
<div class="sect3">
<h4 id="_description_290">Description</h4>
<div class="paragraph">
<p>Importing a fence payload from Windows handles does not transfer ownership
of the handle to the Vulkan implementation.
For handle types defined as NT handles, the application <strong class="purple">must</strong> release
ownership using the <code>CloseHandle</code> system call when the handle is no
longer needed.</p>
</div>
<div class="paragraph">
<p>Applications <strong class="purple">can</strong> import the same fence payload into multiple instances of
Vulkan, into the same instance from which it was exported, and multiple
times into a given Vulkan instance.</p>
</div>
<div class="sidebarblock">
<div class="content">
<div class="title">Valid Usage (Implicit)</div>
<div class="ulist">
<ul>
<li>
<p><a id="VUID-vkImportFenceWin32HandleKHR-device-parameter"></a> <code>device</code> <strong class="purple">must</strong> be a valid <code>VkDevice</code> handle</p>
</li>
<li>
<p><a id="VUID-vkImportFenceWin32HandleKHR-pImportFenceWin32HandleInfo-parameter"></a> <code>pImportFenceWin32HandleInfo</code> <strong class="purple">must</strong> be a valid pointer to a valid <code>VkImportFenceWin32HandleInfoKHR</code> structure</p>
</li>
</ul>
</div>
</div>
</div>
<div class="sidebarblock">
<div class="content">
<div class="title">Return Codes</div>
<div class="dlist">
<dl>
<dt class="hdlist1"><a href="#fundamentals-successcodes">Success</a></dt>
<dd>
<div class="ulist">
<ul>
<li>
<p><code>VK_SUCCESS</code></p>
</li>
</ul>
</div>
</dd>
<dt class="hdlist1"><a href="#fundamentals-errorcodes">Failure</a></dt>
<dd>
<div class="ulist">
<ul>
<li>
<p><code>VK_ERROR_OUT_OF_HOST_MEMORY</code></p>
</li>
<li>
<p><code>VK_ERROR_INVALID_EXTERNAL_HANDLE</code></p>
</li>
</ul>
</div>
</dd>
</dl>
</div>
</div>
</div>
</div>
<div class="sect3">
<h4 id="_see_also_290">See Also</h4>
<div class="paragraph">
<p><a href="#VkDevice">VkDevice</a>, <a href="#VkImportFenceWin32HandleInfoKHR">VkImportFenceWin32HandleInfoKHR</a></p>
</div>
</div>
<div class="sect3">
<h4 id="_document_notes_290">Document Notes</h4>
<div class="paragraph">
<p>For more information, see the Vulkan Specification at URL</p>
</div>
<div class="paragraph">
<p><a href="https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#vkImportFenceWin32HandleKHR" class="bare">https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#vkImportFenceWin32HandleKHR</a></p>
</div>
<div class="paragraph">
<p>This page is extracted from the Vulkan Specification.
Fixes and changes should be made to the Specification, not directly.</p>
</div>
<div style="page-break-after: always;"></div>
</div>
</div>
<div class="sect2">
<h3 id="_vkimportsemaphorefdkhr3">vkImportSemaphoreFdKHR(3)</h3>
<div class="sect3">
<h4 id="_name_291">Name</h4>
<div class="paragraph">
<p>vkImportSemaphoreFdKHR - Import a semaphore from a POSIX file descriptor</p>
</div>
</div>
<div class="sect3">
<h4 id="_c_specification_291">C Specification</h4>
<div class="paragraph">
<p>To import a semaphore payload from a POSIX file descriptor, call:</p>
</div>
<div id="vkImportSemaphoreFdKHR" class="listingblock">
<div class="content">
<pre class="highlight"><code class="language-c++" data-lang="c++">VkResult vkImportSemaphoreFdKHR(
    VkDevice                                    device,
    const VkImportSemaphoreFdInfoKHR*           pImportSemaphoreFdInfo);</code></pre>
</div>
</div>
</div>
<div class="sect3">
<h4 id="_parameters_291">Parameters</h4>
<div class="ulist">
<ul>
<li>
<p><code>device</code> is the logical device that created the semaphore.</p>
</li>
<li>
<p><code>pImportSemaphoreFdInfo</code> points to a
<a href="#VkImportSemaphoreFdInfoKHR">VkImportSemaphoreFdInfoKHR</a> structure specifying the semaphore and
import parameters.</p>
</li>
</ul>
</div>
</div>
<div class="sect3">
<h4 id="_description_291">Description</h4>
<div class="paragraph">
<p>Importing a semaphore payload from a file descriptor transfers ownership of
the file descriptor from the application to the Vulkan implementation.
The application <strong class="purple">must</strong> not perform any operations on the file descriptor
after a successful import.</p>
</div>
<div class="paragraph">
<p>Applications <strong class="purple">can</strong> import the same semaphore payload into multiple instances
of Vulkan, into the same instance from which it was exported, and multiple
times into a given Vulkan instance.</p>
</div>
<div class="sidebarblock">
<div class="content">
<div class="title">Valid Usage</div>
<div class="ulist">
<ul>
<li>
<p><a id="VUID-vkImportSemaphoreFdKHR-semaphore-01142"></a>
<code>semaphore</code> <strong class="purple">must</strong> not be associated with any queue command that has
not yet completed execution on that queue</p>
</li>
</ul>
</div>
</div>
</div>
<div class="sidebarblock">
<div class="content">
<div class="title">Valid Usage (Implicit)</div>
<div class="ulist">
<ul>
<li>
<p><a id="VUID-vkImportSemaphoreFdKHR-device-parameter"></a> <code>device</code> <strong class="purple">must</strong> be a valid <code>VkDevice</code> handle</p>
</li>
<li>
<p><a id="VUID-vkImportSemaphoreFdKHR-pImportSemaphoreFdInfo-parameter"></a> <code>pImportSemaphoreFdInfo</code> <strong class="purple">must</strong> be a valid pointer to a valid <code>VkImportSemaphoreFdInfoKHR</code> structure</p>
</li>
</ul>
</div>
</div>
</div>
<div class="sidebarblock">
<div class="content">
<div class="title">Return Codes</div>
<div class="dlist">
<dl>
<dt class="hdlist1"><a href="#fundamentals-successcodes">Success</a></dt>
<dd>
<div class="ulist">
<ul>
<li>
<p><code>VK_SUCCESS</code></p>
</li>
</ul>
</div>
</dd>
<dt class="hdlist1"><a href="#fundamentals-errorcodes">Failure</a></dt>
<dd>
<div class="ulist">
<ul>
<li>
<p><code>VK_ERROR_OUT_OF_HOST_MEMORY</code></p>
</li>
<li>
<p><code>VK_ERROR_INVALID_EXTERNAL_HANDLE</code></p>
</li>
</ul>
</div>
</dd>
</dl>
</div>
</div>
</div>
</div>
<div class="sect3">
<h4 id="_see_also_291">See Also</h4>
<div class="paragraph">
<p><a href="#VkDevice">VkDevice</a>, <a href="#VkImportSemaphoreFdInfoKHR">VkImportSemaphoreFdInfoKHR</a></p>
</div>
</div>
<div class="sect3">
<h4 id="_document_notes_291">Document Notes</h4>
<div class="paragraph">
<p>For more information, see the Vulkan Specification at URL</p>
</div>
<div class="paragraph">
<p><a href="https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#vkImportSemaphoreFdKHR" class="bare">https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#vkImportSemaphoreFdKHR</a></p>
</div>
<div class="paragraph">
<p>This page is extracted from the Vulkan Specification.
Fixes and changes should be made to the Specification, not directly.</p>
</div>
<div style="page-break-after: always;"></div>
</div>
</div>
<div class="sect2">
<h3 id="_vkimportsemaphorewin32handlekhr3">vkImportSemaphoreWin32HandleKHR(3)</h3>
<div class="sect3">
<h4 id="_name_292">Name</h4>
<div class="paragraph">
<p>vkImportSemaphoreWin32HandleKHR - Import a semaphore from a Windows HANDLE</p>
</div>
</div>
<div class="sect3">
<h4 id="_c_specification_292">C Specification</h4>
<div class="paragraph">
<p>To import a semaphore payload from a Windows handle, call:</p>
</div>
<div id="vkImportSemaphoreWin32HandleKHR" class="listingblock">
<div class="content">
<pre class="highlight"><code class="language-c++" data-lang="c++">VkResult vkImportSemaphoreWin32HandleKHR(
    VkDevice                                    device,
    const VkImportSemaphoreWin32HandleInfoKHR*  pImportSemaphoreWin32HandleInfo);</code></pre>
</div>
</div>
</div>
<div class="sect3">
<h4 id="_parameters_292">Parameters</h4>
<div class="ulist">
<ul>
<li>
<p><code>device</code> is the logical device that created the semaphore.</p>
</li>
<li>
<p><code>pImportSemaphoreWin32HandleInfo</code> points to a
<a href="#VkImportSemaphoreWin32HandleInfoKHR">VkImportSemaphoreWin32HandleInfoKHR</a> structure specifying the
semaphore and import parameters.</p>
</li>
</ul>
</div>
</div>
<div class="sect3">
<h4 id="_description_292">Description</h4>
<div class="paragraph">
<p>Importing a semaphore payload from Windows handles does not transfer
ownership of the handle to the Vulkan implementation.
For handle types defined as NT handles, the application <strong class="purple">must</strong> release
ownership using the <code>CloseHandle</code> system call when the handle is no
longer needed.</p>
</div>
<div class="paragraph">
<p>Applications <strong class="purple">can</strong> import the same semaphore payload into multiple instances
of Vulkan, into the same instance from which it was exported, and multiple
times into a given Vulkan instance.</p>
</div>
<div class="sidebarblock">
<div class="content">
<div class="title">Valid Usage (Implicit)</div>
<div class="ulist">
<ul>
<li>
<p><a id="VUID-vkImportSemaphoreWin32HandleKHR-device-parameter"></a> <code>device</code> <strong class="purple">must</strong> be a valid <code>VkDevice</code> handle</p>
</li>
<li>
<p><a id="VUID-vkImportSemaphoreWin32HandleKHR-pImportSemaphoreWin32HandleInfo-parameter"></a> <code>pImportSemaphoreWin32HandleInfo</code> <strong class="purple">must</strong> be a valid pointer to a valid <code>VkImportSemaphoreWin32HandleInfoKHR</code> structure</p>
</li>
</ul>
</div>
</div>
</div>
<div class="sidebarblock">
<div class="content">
<div class="title">Return Codes</div>
<div class="dlist">
<dl>
<dt class="hdlist1"><a href="#fundamentals-successcodes">Success</a></dt>
<dd>
<div class="ulist">
<ul>
<li>
<p><code>VK_SUCCESS</code></p>
</li>
</ul>
</div>
</dd>
<dt class="hdlist1"><a href="#fundamentals-errorcodes">Failure</a></dt>
<dd>
<div class="ulist">
<ul>
<li>
<p><code>VK_ERROR_OUT_OF_HOST_MEMORY</code></p>
</li>
<li>
<p><code>VK_ERROR_INVALID_EXTERNAL_HANDLE</code></p>
</li>
</ul>
</div>
</dd>
</dl>
</div>
</div>
</div>
</div>
<div class="sect3">
<h4 id="_see_also_292">See Also</h4>
<div class="paragraph">
<p><a href="#VkDevice">VkDevice</a>, <a href="#VkImportSemaphoreWin32HandleInfoKHR">VkImportSemaphoreWin32HandleInfoKHR</a></p>
</div>
</div>
<div class="sect3">
<h4 id="_document_notes_292">Document Notes</h4>
<div class="paragraph">
<p>For more information, see the Vulkan Specification at URL</p>
</div>
<div class="paragraph">
<p><a href="https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#vkImportSemaphoreWin32HandleKHR" class="bare">https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#vkImportSemaphoreWin32HandleKHR</a></p>
</div>
<div class="paragraph">
<p>This page is extracted from the Vulkan Specification.
Fixes and changes should be made to the Specification, not directly.</p>
</div>
<div style="page-break-after: always;"></div>
</div>
</div>
<div class="sect2">
<h3 id="_vkinvalidatemappedmemoryranges3">vkInvalidateMappedMemoryRanges(3)</h3>
<div class="sect3">
<h4 id="_name_293">Name</h4>
<div class="paragraph">
<p>vkInvalidateMappedMemoryRanges - Invalidate ranges of mapped memory objects</p>
</div>
</div>
<div class="sect3">
<h4 id="_c_specification_293">C Specification</h4>
<div class="paragraph">
<p>To invalidate ranges of non-coherent memory from the host caches, call:</p>
</div>
<div id="vkInvalidateMappedMemoryRanges" class="listingblock">
<div class="content">
<pre class="highlight"><code class="language-c++" data-lang="c++">VkResult vkInvalidateMappedMemoryRanges(
    VkDevice                                    device,
    uint32_t                                    memoryRangeCount,
    const VkMappedMemoryRange*                  pMemoryRanges);</code></pre>
</div>
</div>
</div>
<div class="sect3">
<h4 id="_parameters_293">Parameters</h4>
<div class="ulist">
<ul>
<li>
<p><code>device</code> is the logical device that owns the memory ranges.</p>
</li>
<li>
<p><code>memoryRangeCount</code> is the length of the <code>pMemoryRanges</code> array.</p>
</li>
<li>
<p><code>pMemoryRanges</code> is a pointer to an array of
<a href="#VkMappedMemoryRange">VkMappedMemoryRange</a> structures describing the memory ranges to
invalidate.</p>
</li>
</ul>
</div>
</div>
<div class="sect3">
<h4 id="_description_293">Description</h4>
<div class="paragraph">
<p><code>vkInvalidateMappedMemoryRanges</code> guarantees that device writes to the
memory ranges described by <code>pMemoryRanges</code>, which have been made
available to the host memory domain using the <code>VK_ACCESS_HOST_WRITE_BIT</code>
and <code>VK_ACCESS_HOST_READ_BIT</code> <a href="vkspec.html#synchronization-access-types">access
types</a>, are made visible to the host.
If a range of non-coherent memory is written by the host and then
invalidated without first being flushed, its contents are undefined.</p>
</div>
<div class="paragraph">
<p>Within each range described by <code>pMemoryRanges</code>, each set of
<code>nonCoherentAtomSize</code> bytes in that range is invalidated if any byte in
that set has been written by the device since it was first host mapped, or
the last time it was invalidated.</p>
</div>
<div class="admonitionblock note">
<table>
<tr>
<td class="icon">
<i class="fa icon-note" title="Note"></i>
</td>
<td class="content">
<div class="title">Note</div>
<div class="paragraph">
<p>Mapping non-coherent memory does not implicitly invalidate the mapped
memory, and device writes that have not been invalidated <strong class="purple">must</strong> be made
visible before the host reads or overwrites them.</p>
</div>
</td>
</tr>
</table>
</div>
<div class="sidebarblock">
<div class="content">
<div class="title">Valid Usage (Implicit)</div>
<div class="ulist">
<ul>
<li>
<p><a id="VUID-vkInvalidateMappedMemoryRanges-device-parameter"></a> <code>device</code> <strong class="purple">must</strong> be a valid <code>VkDevice</code> handle</p>
</li>
<li>
<p><a id="VUID-vkInvalidateMappedMemoryRanges-pMemoryRanges-parameter"></a> <code>pMemoryRanges</code> <strong class="purple">must</strong> be a valid pointer to an array of <code>memoryRangeCount</code> valid <code>VkMappedMemoryRange</code> structures</p>
</li>
<li>
<p><a id="VUID-vkInvalidateMappedMemoryRanges-memoryRangeCount-arraylength"></a> <code>memoryRangeCount</code> <strong class="purple">must</strong> be greater than <code>0</code></p>
</li>
</ul>
</div>
</div>
</div>
<div class="sidebarblock">
<div class="content">
<div class="title">Return Codes</div>
<div class="dlist">
<dl>
<dt class="hdlist1"><a href="#fundamentals-successcodes">Success</a></dt>
<dd>
<div class="ulist">
<ul>
<li>
<p><code>VK_SUCCESS</code></p>
</li>
</ul>
</div>
</dd>
<dt class="hdlist1"><a href="#fundamentals-errorcodes">Failure</a></dt>
<dd>
<div class="ulist">
<ul>
<li>
<p><code>VK_ERROR_OUT_OF_HOST_MEMORY</code></p>
</li>
<li>
<p><code>VK_ERROR_OUT_OF_DEVICE_MEMORY</code></p>
</li>
</ul>
</div>
</dd>
</dl>
</div>
</div>
</div>
</div>
<div class="sect3">
<h4 id="_see_also_293">See Also</h4>
<div class="paragraph">
<p><a href="#VkDevice">VkDevice</a>, <a href="#VkMappedMemoryRange">VkMappedMemoryRange</a></p>
</div>
</div>
<div class="sect3">
<h4 id="_document_notes_293">Document Notes</h4>
<div class="paragraph">
<p>For more information, see the Vulkan Specification at URL</p>
</div>
<div class="paragraph">
<p><a href="https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#vkInvalidateMappedMemoryRanges" class="bare">https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#vkInvalidateMappedMemoryRanges</a></p>
</div>
<div class="paragraph">
<p>This page is extracted from the Vulkan Specification.
Fixes and changes should be made to the Specification, not directly.</p>
</div>
<div style="page-break-after: always;"></div>
</div>
</div>
<div class="sect2">
<h3 id="_vkmapmemory3">vkMapMemory(3)</h3>
<div class="sect3">
<h4 id="_name_294">Name</h4>
<div class="paragraph">
<p>vkMapMemory - Map a memory object into application address space</p>
</div>
</div>
<div class="sect3">
<h4 id="_c_specification_294">C Specification</h4>
<div class="paragraph">
<p>To retrieve a host virtual address pointer to a region of a mappable memory
object, call:</p>
</div>
<div id="vkMapMemory" class="listingblock">
<div class="content">
<pre class="highlight"><code class="language-c++" data-lang="c++">VkResult vkMapMemory(
    VkDevice                                    device,
    VkDeviceMemory                              memory,
    VkDeviceSize                                offset,
    VkDeviceSize                                size,
    VkMemoryMapFlags                            flags,
    void**                                      ppData);</code></pre>
</div>
</div>
</div>
<div class="sect3">
<h4 id="_parameters_294">Parameters</h4>
<div class="ulist">
<ul>
<li>
<p><code>device</code> is the logical device that owns the memory.</p>
</li>
<li>
<p><code>memory</code> is the <a href="#VkDeviceMemory">VkDeviceMemory</a> object to be mapped.</p>
</li>
<li>
<p><code>offset</code> is a zero-based byte offset from the beginning of the
memory object.</p>
</li>
<li>
<p><code>size</code> is the size of the memory range to map, or
<code>VK_WHOLE_SIZE</code> to map from <code>offset</code> to the end of the
allocation.</p>
</li>
<li>
<p><code>flags</code> is reserved for future use.</p>
</li>
<li>
<p><code>ppData</code> points to a pointer in which is returned a host-accessible
pointer to the beginning of the mapped range.
This pointer minus <code>offset</code> <strong class="purple">must</strong> be aligned to at least
<a href="#VkPhysicalDeviceLimits">VkPhysicalDeviceLimits</a>::<code>minMemoryMapAlignment</code>.</p>
</li>
</ul>
</div>
</div>
<div class="sect3">
<h4 id="_description_294">Description</h4>
<div class="paragraph">
<p>After a successful call to <code>vkMapMemory</code> the memory object <code>memory</code>
is considered to be currently <em>host mapped</em>.
It is an application error to call <code>vkMapMemory</code> on a memory object that
is already host mapped.</p>
</div>
<div class="admonitionblock note">
<table>
<tr>
<td class="icon">
<i class="fa icon-note" title="Note"></i>
</td>
<td class="content">
<div class="title">Note</div>
<div class="paragraph">
<p><code>vkMapMemory</code> will fail if the implementation is unable to allocate an
appropriately sized contiguous virtual address range, e.g. due to virtual
address space fragmentation or platform limits.
In such cases, <code>vkMapMemory</code> <strong class="purple">must</strong> return
<code>VK_ERROR_MEMORY_MAP_FAILED</code>.
The application <strong class="purple">can</strong> improve the likelihood of success by reducing the size
of the mapped range and/or removing unneeded mappings using
<a href="#vkUnmapMemory">vkUnmapMemory</a>.</p>
</div>
</td>
</tr>
</table>
</div>
<div id="memory-device-hostaccess-hazards" class="paragraph">
<p><code>vkMapMemory</code> does not check whether the device memory is currently in
use before returning the host-accessible pointer.
The application <strong class="purple">must</strong> guarantee that any previously submitted command that
writes to this range has completed before the host reads from or writes to
that range, and that any previously submitted command that reads from that
range has completed before the host writes to that region (see
<a href="vkspec.html#synchronization-submission-host-writes">here</a> for details on fulfilling
such a guarantee).
If the device memory was allocated without the
<code>VK_MEMORY_PROPERTY_HOST_COHERENT_BIT</code> set, these guarantees <strong class="purple">must</strong> be
made for an extended range: the application <strong class="purple">must</strong> round down the start of
the range to the nearest multiple of
<a href="#VkPhysicalDeviceLimits">VkPhysicalDeviceLimits</a>::<code>nonCoherentAtomSize</code>, and round the end
of the range up to the nearest multiple of
<a href="#VkPhysicalDeviceLimits">VkPhysicalDeviceLimits</a>::<code>nonCoherentAtomSize</code>.</p>
</div>
<div class="paragraph">
<p>While a range of device memory is host mapped, the application is
responsible for synchronizing both device and host access to that memory
range.</p>
</div>
<div class="admonitionblock note">
<table>
<tr>
<td class="icon">
<i class="fa icon-note" title="Note"></i>
</td>
<td class="content">
<div class="title">Note</div>
<div class="paragraph">
<p>It is important for the application developer to become meticulously
familiar with all of the mechanisms described in the chapter on
<a href="vkspec.html#synchronization">Synchronization and Cache Control</a> as they are crucial
to maintaining memory access ordering.</p>
</div>
</td>
</tr>
</table>
</div>
<div class="sidebarblock">
<div class="content">
<div class="title">Valid Usage</div>
<div class="ulist">
<ul>
<li>
<p><a id="VUID-vkMapMemory-memory-00678"></a>
<code>memory</code> <strong class="purple">must</strong> not be currently host mapped</p>
</li>
<li>
<p><a id="VUID-vkMapMemory-offset-00679"></a>
<code>offset</code> <strong class="purple">must</strong> be less than the size of <code>memory</code></p>
</li>
<li>
<p><a id="VUID-vkMapMemory-size-00680"></a>
If <code>size</code> is not equal to <code>VK_WHOLE_SIZE</code>, <code>size</code> <strong class="purple">must</strong> be
greater than <code>0</code></p>
</li>
<li>
<p><a id="VUID-vkMapMemory-size-00681"></a>
If <code>size</code> is not equal to <code>VK_WHOLE_SIZE</code>, <code>size</code> <strong class="purple">must</strong> be
less than or equal to the size of the <code>memory</code> minus <code>offset</code></p>
</li>
<li>
<p><a id="VUID-vkMapMemory-memory-00682"></a>
<code>memory</code> <strong class="purple">must</strong> have been created with a memory type that reports
<code>VK_MEMORY_PROPERTY_HOST_VISIBLE_BIT</code></p>
</li>
<li>
<p><a id="VUID-vkMapMemory-memory-00683"></a>
<code>memory</code> <strong class="purple">must</strong> not have been allocated with multiple instances.</p>
</li>
</ul>
</div>
</div>
</div>
<div class="sidebarblock">
<div class="content">
<div class="title">Valid Usage (Implicit)</div>
<div class="ulist">
<ul>
<li>
<p><a id="VUID-vkMapMemory-device-parameter"></a> <code>device</code> <strong class="purple">must</strong> be a valid <code>VkDevice</code> handle</p>
</li>
<li>
<p><a id="VUID-vkMapMemory-memory-parameter"></a> <code>memory</code> <strong class="purple">must</strong> be a valid <code>VkDeviceMemory</code> handle</p>
</li>
<li>
<p><a id="VUID-vkMapMemory-flags-zerobitmask"></a> <code>flags</code> <strong class="purple">must</strong> be <code>0</code></p>
</li>
<li>
<p><a id="VUID-vkMapMemory-ppData-parameter"></a> <code>ppData</code> <strong class="purple">must</strong> be a valid pointer to a pointer value</p>
</li>
<li>
<p><a id="VUID-vkMapMemory-memory-parent"></a> <code>memory</code> <strong class="purple">must</strong> have been created, allocated, or retrieved from <code>device</code></p>
</li>
</ul>
</div>
</div>
</div>
<div class="sidebarblock">
<div class="content">
<div class="title">Host Synchronization</div>
<div class="ulist">
<ul>
<li>
<p>Host access to <code>memory</code> <strong class="purple">must</strong> be externally synchronized</p>
</li>
</ul>
</div>
</div>
</div>
<div class="sidebarblock">
<div class="content">
<div class="title">Return Codes</div>
<div class="dlist">
<dl>
<dt class="hdlist1"><a href="#fundamentals-successcodes">Success</a></dt>
<dd>
<div class="ulist">
<ul>
<li>
<p><code>VK_SUCCESS</code></p>
</li>
</ul>
</div>
</dd>
<dt class="hdlist1"><a href="#fundamentals-errorcodes">Failure</a></dt>
<dd>
<div class="ulist">
<ul>
<li>
<p><code>VK_ERROR_OUT_OF_HOST_MEMORY</code></p>
</li>
<li>
<p><code>VK_ERROR_OUT_OF_DEVICE_MEMORY</code></p>
</li>
<li>
<p><code>VK_ERROR_MEMORY_MAP_FAILED</code></p>
</li>
</ul>
</div>
</dd>
</dl>
</div>
</div>
</div>
</div>
<div class="sect3">
<h4 id="_see_also_294">See Also</h4>
<div class="paragraph">
<p><a href="#VkDevice">VkDevice</a>, <a href="#VkDeviceMemory">VkDeviceMemory</a>, <code>VkDeviceSize</code>, <a href="#VkMemoryMapFlags">VkMemoryMapFlags</a></p>
</div>
</div>
<div class="sect3">
<h4 id="_document_notes_294">Document Notes</h4>
<div class="paragraph">
<p>For more information, see the Vulkan Specification at URL</p>
</div>
<div class="paragraph">
<p><a href="https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#vkMapMemory" class="bare">https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#vkMapMemory</a></p>
</div>
<div class="paragraph">
<p>This page is extracted from the Vulkan Specification.
Fixes and changes should be made to the Specification, not directly.</p>
</div>
<div style="page-break-after: always;"></div>
</div>
</div>
<div class="sect2">
<h3 id="_vkmergepipelinecaches3">vkMergePipelineCaches(3)</h3>
<div class="sect3">
<h4 id="_name_295">Name</h4>
<div class="paragraph">
<p>vkMergePipelineCaches - Combine the data stores of pipeline caches</p>
</div>
</div>
<div class="sect3">
<h4 id="_c_specification_295">C Specification</h4>
<div class="paragraph">
<p>Pipeline cache objects <strong class="purple">can</strong> be merged using the command:</p>
</div>
<div id="vkMergePipelineCaches" class="listingblock">
<div class="content">
<pre class="highlight"><code class="language-c++" data-lang="c++">VkResult vkMergePipelineCaches(
    VkDevice                                    device,
    VkPipelineCache                             dstCache,
    uint32_t                                    srcCacheCount,
    const VkPipelineCache*                      pSrcCaches);</code></pre>
</div>
</div>
</div>
<div class="sect3">
<h4 id="_parameters_295">Parameters</h4>
<div class="ulist">
<ul>
<li>
<p><code>device</code> is the logical device that owns the pipeline cache objects.</p>
</li>
<li>
<p><code>dstCache</code> is the handle of the pipeline cache to merge results
into.</p>
</li>
<li>
<p><code>srcCacheCount</code> is the length of the <code>pSrcCaches</code> array.</p>
</li>
<li>
<p><code>pSrcCaches</code> is an array of pipeline cache handles, which will be
merged into <code>dstCache</code>.
The previous contents of <code>dstCache</code> are included after the merge.</p>
</li>
</ul>
</div>
</div>
<div class="sect3">
<h4 id="_description_295">Description</h4>
<div class="admonitionblock note">
<table>
<tr>
<td class="icon">
<i class="fa icon-note" title="Note"></i>
</td>
<td class="content">
<div class="title">Note</div>
<div class="paragraph">
<p>The details of the merge operation are implementation dependent, but
implementations <strong class="purple">should</strong> merge the contents of the specified pipelines and
prune duplicate entries.</p>
</div>
</td>
</tr>
</table>
</div>
<div class="sidebarblock">
<div class="content">
<div class="title">Valid Usage</div>
<div class="ulist">
<ul>
<li>
<p><a id="VUID-vkMergePipelineCaches-dstCache-00770"></a>
<code>dstCache</code> <strong class="purple">must</strong> not appear in the list of source caches</p>
</li>
</ul>
</div>
</div>
</div>
<div class="sidebarblock">
<div class="content">
<div class="title">Valid Usage (Implicit)</div>
<div class="ulist">
<ul>
<li>
<p><a id="VUID-vkMergePipelineCaches-device-parameter"></a> <code>device</code> <strong class="purple">must</strong> be a valid <code>VkDevice</code> handle</p>
</li>
<li>
<p><a id="VUID-vkMergePipelineCaches-dstCache-parameter"></a> <code>dstCache</code> <strong class="purple">must</strong> be a valid <code>VkPipelineCache</code> handle</p>
</li>
<li>
<p><a id="VUID-vkMergePipelineCaches-pSrcCaches-parameter"></a> <code>pSrcCaches</code> <strong class="purple">must</strong> be a valid pointer to an array of <code>srcCacheCount</code> valid <code>VkPipelineCache</code> handles</p>
</li>
<li>
<p><a id="VUID-vkMergePipelineCaches-srcCacheCount-arraylength"></a> <code>srcCacheCount</code> <strong class="purple">must</strong> be greater than <code>0</code></p>
</li>
<li>
<p><a id="VUID-vkMergePipelineCaches-dstCache-parent"></a> <code>dstCache</code> <strong class="purple">must</strong> have been created, allocated, or retrieved from <code>device</code></p>
</li>
<li>
<p><a id="VUID-vkMergePipelineCaches-pSrcCaches-parent"></a> Each element of <code>pSrcCaches</code> <strong class="purple">must</strong> have been created, allocated, or retrieved from <code>device</code></p>
</li>
</ul>
</div>
</div>
</div>
<div class="sidebarblock">
<div class="content">
<div class="title">Host Synchronization</div>
<div class="ulist">
<ul>
<li>
<p>Host access to <code>dstCache</code> <strong class="purple">must</strong> be externally synchronized</p>
</li>
</ul>
</div>
</div>
</div>
<div class="sidebarblock">
<div class="content">
<div class="title">Return Codes</div>
<div class="dlist">
<dl>
<dt class="hdlist1"><a href="#fundamentals-successcodes">Success</a></dt>
<dd>
<div class="ulist">
<ul>
<li>
<p><code>VK_SUCCESS</code></p>
</li>
</ul>
</div>
</dd>
<dt class="hdlist1"><a href="#fundamentals-errorcodes">Failure</a></dt>
<dd>
<div class="ulist">
<ul>
<li>
<p><code>VK_ERROR_OUT_OF_HOST_MEMORY</code></p>
</li>
<li>
<p><code>VK_ERROR_OUT_OF_DEVICE_MEMORY</code></p>
</li>
</ul>
</div>
</dd>
</dl>
</div>
</div>
</div>
</div>
<div class="sect3">
<h4 id="_see_also_295">See Also</h4>
<div class="paragraph">
<p><a href="#VkDevice">VkDevice</a>, <a href="#VkPipelineCache">VkPipelineCache</a></p>
</div>
</div>
<div class="sect3">
<h4 id="_document_notes_295">Document Notes</h4>
<div class="paragraph">
<p>For more information, see the Vulkan Specification at URL</p>
</div>
<div class="paragraph">
<p><a href="https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#vkMergePipelineCaches" class="bare">https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#vkMergePipelineCaches</a></p>
</div>
<div class="paragraph">
<p>This page is extracted from the Vulkan Specification.
Fixes and changes should be made to the Specification, not directly.</p>
</div>
<div style="page-break-after: always;"></div>
</div>
</div>
<div class="sect2">
<h3 id="_vkmergevalidationcachesext3">vkMergeValidationCachesEXT(3)</h3>
<div class="sect3">
<h4 id="_name_296">Name</h4>
<div class="paragraph">
<p>vkMergeValidationCachesEXT - Combine the data stores of validation caches</p>
</div>
</div>
<div class="sect3">
<h4 id="_c_specification_296">C Specification</h4>
<div class="paragraph">
<p>Validation cache objects <strong class="purple">can</strong> be merged using the command:</p>
</div>
<div id="vkMergeValidationCachesEXT" class="listingblock">
<div class="content">
<pre class="highlight"><code class="language-c++" data-lang="c++">VkResult vkMergeValidationCachesEXT(
    VkDevice                                    device,
    VkValidationCacheEXT                        dstCache,
    uint32_t                                    srcCacheCount,
    const VkValidationCacheEXT*                 pSrcCaches);</code></pre>
</div>
</div>
</div>
<div class="sect3">
<h4 id="_parameters_296">Parameters</h4>
<div class="ulist">
<ul>
<li>
<p><code>device</code> is the logical device that owns the validation cache
objects.</p>
</li>
<li>
<p><code>dstCache</code> is the handle of the validation cache to merge results
into.</p>
</li>
<li>
<p><code>srcCacheCount</code> is the length of the <code>pSrcCaches</code> array.</p>
</li>
<li>
<p><code>pSrcCaches</code> is an array of validation cache handles, which will be
merged into <code>dstCache</code>.
The previous contents of <code>dstCache</code> are included after the merge.</p>
</li>
</ul>
</div>
</div>
<div class="sect3">
<h4 id="_description_296">Description</h4>
<div class="admonitionblock note">
<table>
<tr>
<td class="icon">
<i class="fa icon-note" title="Note"></i>
</td>
<td class="content">
<div class="title">Note</div>
<div class="paragraph">
<p>The details of the merge operation are implementation dependent, but
implementations <strong class="purple">should</strong> merge the contents of the specified validation
caches and prune duplicate entries.</p>
</div>
</td>
</tr>
</table>
</div>
<div class="sidebarblock">
<div class="content">
<div class="title">Valid Usage</div>
<div class="ulist">
<ul>
<li>
<p><a id="VUID-vkMergeValidationCachesEXT-dstCache-01536"></a>
<code>dstCache</code> <strong class="purple">must</strong> not appear in the list of source caches</p>
</li>
</ul>
</div>
</div>
</div>
<div class="sidebarblock">
<div class="content">
<div class="title">Valid Usage (Implicit)</div>
<div class="ulist">
<ul>
<li>
<p><a id="VUID-vkMergeValidationCachesEXT-device-parameter"></a> <code>device</code> <strong class="purple">must</strong> be a valid <code>VkDevice</code> handle</p>
</li>
<li>
<p><a id="VUID-vkMergeValidationCachesEXT-dstCache-parameter"></a> <code>dstCache</code> <strong class="purple">must</strong> be a valid <code>VkValidationCacheEXT</code> handle</p>
</li>
<li>
<p><a id="VUID-vkMergeValidationCachesEXT-pSrcCaches-parameter"></a> <code>pSrcCaches</code> <strong class="purple">must</strong> be a valid pointer to an array of <code>srcCacheCount</code> valid <code>VkValidationCacheEXT</code> handles</p>
</li>
<li>
<p><a id="VUID-vkMergeValidationCachesEXT-srcCacheCount-arraylength"></a> <code>srcCacheCount</code> <strong class="purple">must</strong> be greater than <code>0</code></p>
</li>
<li>
<p><a id="VUID-vkMergeValidationCachesEXT-dstCache-parent"></a> <code>dstCache</code> <strong class="purple">must</strong> have been created, allocated, or retrieved from <code>device</code></p>
</li>
<li>
<p><a id="VUID-vkMergeValidationCachesEXT-pSrcCaches-parent"></a> Each element of <code>pSrcCaches</code> <strong class="purple">must</strong> have been created, allocated, or retrieved from <code>device</code></p>
</li>
</ul>
</div>
</div>
</div>
<div class="sidebarblock">
<div class="content">
<div class="title">Host Synchronization</div>
<div class="ulist">
<ul>
<li>
<p>Host access to <code>dstCache</code> <strong class="purple">must</strong> be externally synchronized</p>
</li>
</ul>
</div>
</div>
</div>
<div class="sidebarblock">
<div class="content">
<div class="title">Return Codes</div>
<div class="dlist">
<dl>
<dt class="hdlist1"><a href="#fundamentals-successcodes">Success</a></dt>
<dd>
<div class="ulist">
<ul>
<li>
<p><code>VK_SUCCESS</code></p>
</li>
</ul>
</div>
</dd>
<dt class="hdlist1"><a href="#fundamentals-errorcodes">Failure</a></dt>
<dd>
<div class="ulist">
<ul>
<li>
<p><code>VK_ERROR_OUT_OF_HOST_MEMORY</code></p>
</li>
<li>
<p><code>VK_ERROR_OUT_OF_DEVICE_MEMORY</code></p>
</li>
</ul>
</div>
</dd>
</dl>
</div>
</div>
</div>
</div>
<div class="sect3">
<h4 id="_see_also_296">See Also</h4>
<div class="paragraph">
<p><a href="#VkDevice">VkDevice</a>, <a href="#VkValidationCacheEXT">VkValidationCacheEXT</a></p>
</div>
</div>
<div class="sect3">
<h4 id="_document_notes_296">Document Notes</h4>
<div class="paragraph">
<p>For more information, see the Vulkan Specification at URL</p>
</div>
<div class="paragraph">
<p><a href="https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#vkMergeValidationCachesEXT" class="bare">https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#vkMergeValidationCachesEXT</a></p>
</div>
<div class="paragraph">
<p>This page is extracted from the Vulkan Specification.
Fixes and changes should be made to the Specification, not directly.</p>
</div>
<div style="page-break-after: always;"></div>
</div>
</div>
<div class="sect2">
<h3 id="_vkqueuebegindebugutilslabelext3">vkQueueBeginDebugUtilsLabelEXT(3)</h3>
<div class="sect3">
<h4 id="_name_297">Name</h4>
<div class="paragraph">
<p>vkQueueBeginDebugUtilsLabelEXT - Open a queue debug label region</p>
</div>
</div>
<div class="sect3">
<h4 id="_c_specification_297">C Specification</h4>
<div class="paragraph">
<p>A queue debug label region is opened by calling:</p>
</div>
<div id="vkQueueBeginDebugUtilsLabelEXT" class="listingblock">
<div class="content">
<pre class="highlight"><code class="language-c++" data-lang="c++">void vkQueueBeginDebugUtilsLabelEXT(
    VkQueue                                     queue,
    const VkDebugUtilsLabelEXT*                 pLabelInfo);</code></pre>
</div>
</div>
</div>
<div class="sect3">
<h4 id="_parameters_297">Parameters</h4>
<div class="ulist">
<ul>
<li>
<p><code>queue</code> is the queue in which to start a debug label region.</p>
</li>
<li>
<p><code>pLabelInfo</code> is a pointer to an instance of the
<a href="#VkDebugUtilsLabelEXT">VkDebugUtilsLabelEXT</a> structure specifying the parameters of the
label region to open.</p>
</li>
</ul>
</div>
</div>
<div class="sect3">
<h4 id="_description_297">Description</h4>
<div class="sidebarblock">
<div class="content">
<div class="title">Valid Usage (Implicit)</div>
<div class="ulist">
<ul>
<li>
<p><a id="VUID-vkQueueBeginDebugUtilsLabelEXT-queue-parameter"></a> <code>queue</code> <strong class="purple">must</strong> be a valid <code>VkQueue</code> handle</p>
</li>
<li>
<p><a id="VUID-vkQueueBeginDebugUtilsLabelEXT-pLabelInfo-parameter"></a> <code>pLabelInfo</code> <strong class="purple">must</strong> be a valid pointer to a valid <code>VkDebugUtilsLabelEXT</code> structure</p>
</li>
</ul>
</div>
</div>
</div>
<div class="sidebarblock">
<div class="content">
<div class="title">Command Properties</div>
<table class="tableblock frame-all grid-all stretch">
<colgroup>
<col style="width: 25%;">
<col style="width: 25%;">
<col style="width: 25%;">
<col style="width: 25%;">
</colgroup>
<thead>
<tr>
<th class="tableblock halign-left valign-top"><a href="#VkCommandBufferLevel">Command Buffer Levels</a></th>
<th class="tableblock halign-left valign-top"><a href="#vkCmdBeginRenderPass">Render Pass Scope</a></th>
<th class="tableblock halign-left valign-top"><a href="#VkQueueFlagBits">Supported Queue Types</a></th>
<th class="tableblock halign-left valign-top"><a href="#synchronization-pipeline-stages-types">Pipeline Type</a></th>
</tr>
</thead>
<tbody>
<tr>
<td class="tableblock halign-left valign-top"><p class="tableblock">-</p></td>
<td class="tableblock halign-left valign-top"><p class="tableblock">-</p></td>
<td class="tableblock halign-left valign-top"><p class="tableblock">Any</p></td>
<td class="tableblock halign-left valign-top"><p class="tableblock">-</p></td>
</tr>
</tbody>
</table>
</div>
</div>
</div>
<div class="sect3">
<h4 id="_see_also_297">See Also</h4>
<div class="paragraph">
<p><a href="#VkDebugUtilsLabelEXT">VkDebugUtilsLabelEXT</a>, <a href="#VkQueue">VkQueue</a></p>
</div>
</div>
<div class="sect3">
<h4 id="_document_notes_297">Document Notes</h4>
<div class="paragraph">
<p>For more information, see the Vulkan Specification at URL</p>
</div>
<div class="paragraph">
<p><a href="https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#vkQueueBeginDebugUtilsLabelEXT" class="bare">https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#vkQueueBeginDebugUtilsLabelEXT</a></p>
</div>
<div class="paragraph">
<p>This page is extracted from the Vulkan Specification.
Fixes and changes should be made to the Specification, not directly.</p>
</div>
<div style="page-break-after: always;"></div>
</div>
</div>
<div class="sect2">
<h3 id="_vkqueuebindsparse3">vkQueueBindSparse(3)</h3>
<div class="sect3">
<h4 id="_name_298">Name</h4>
<div class="paragraph">
<p>vkQueueBindSparse - Bind device memory to a sparse resource object</p>
</div>
</div>
<div class="sect3">
<h4 id="_c_specification_298">C Specification</h4>
<div class="paragraph">
<p>To submit sparse binding operations to a queue, call:</p>
</div>
<div id="vkQueueBindSparse" class="listingblock">
<div class="content">
<pre class="highlight"><code class="language-c++" data-lang="c++">VkResult vkQueueBindSparse(
    VkQueue                                     queue,
    uint32_t                                    bindInfoCount,
    const VkBindSparseInfo*                     pBindInfo,
    VkFence                                     fence);</code></pre>
</div>
</div>
</div>
<div class="sect3">
<h4 id="_parameters_298">Parameters</h4>
<div class="ulist">
<ul>
<li>
<p><code>queue</code> is the queue that the sparse binding operations will be
submitted to.</p>
</li>
<li>
<p><code>bindInfoCount</code> is the number of elements in the <code>pBindInfo</code>
array.</p>
</li>
<li>
<p><code>pBindInfo</code> is an array of <a href="#VkBindSparseInfo">VkBindSparseInfo</a> structures, each
specifying a sparse binding submission batch.</p>
</li>
<li>
<p><code>fence</code> is an <strong class="purple">optional</strong> handle to a fence to be signaled.
If <code>fence</code> is not <a href="#VK_NULL_HANDLE">VK_NULL_HANDLE</a>, it defines a
<a href="vkspec.html#synchronization-fences-signaling">fence signal operation</a>.</p>
</li>
</ul>
</div>
</div>
<div class="sect3">
<h4 id="_description_298">Description</h4>
<div class="paragraph">
<p><code>vkQueueBindSparse</code> is a <a href="vkspec.html#devsandqueues-submission">queue submission
command</a>, with each batch defined by an element of <code>pBindInfo</code> as an
instance of the <a href="#VkBindSparseInfo">VkBindSparseInfo</a> structure.
Batches begin execution in the order they appear in <code>pBindInfo</code>, but
<strong class="purple">may</strong> complete out of order.</p>
</div>
<div class="paragraph">
<p>Within a batch, a given range of a resource <strong class="purple">must</strong> not be bound more than
once.
Across batches, if a range is to be bound to one allocation and offset and
then to another allocation and offset, then the application <strong class="purple">must</strong> guarantee
(usually using semaphores) that the binding operations are executed in the
correct order, as well as to order binding operations against the execution
of command buffer submissions.</p>
</div>
<div class="paragraph">
<p>As no operation to <a href="#vkQueueBindSparse">vkQueueBindSparse</a> causes any pipeline stage to
access memory, synchronization primitives used in this command effectively
only define execution dependencies.</p>
</div>
<div class="paragraph">
<p>Additional information about fence and semaphore operation is described in
<a href="vkspec.html#synchronization">the synchronization chapter</a>.</p>
</div>
<div class="sidebarblock">
<div class="content">
<div class="title">Valid Usage</div>
<div class="ulist">
<ul>
<li>
<p><a id="VUID-vkQueueBindSparse-fence-01113"></a>
If <code>fence</code> is not <a href="#VK_NULL_HANDLE">VK_NULL_HANDLE</a>, <code>fence</code> <strong class="purple">must</strong> be
unsignaled</p>
</li>
<li>
<p><a id="VUID-vkQueueBindSparse-fence-01114"></a>
If <code>fence</code> is not <a href="#VK_NULL_HANDLE">VK_NULL_HANDLE</a>, <code>fence</code> <strong class="purple">must</strong> not be
associated with any other queue command that has not yet completed
execution on that queue</p>
</li>
<li>
<p><a id="VUID-vkQueueBindSparse-pSignalSemaphores-01115"></a>
Each element of the <code>pSignalSemaphores</code> member of each element of
<code>pBindInfo</code> <strong class="purple">must</strong> be unsignaled when the semaphore signal operation
it defines is executed on the device</p>
</li>
<li>
<p><a id="VUID-vkQueueBindSparse-pWaitSemaphores-01116"></a>
When a semaphore unsignal operation defined by any element of the
<code>pWaitSemaphores</code> member of any element of <code>pBindInfo</code> executes
on <code>queue</code>, no other queue <strong class="purple">must</strong> be waiting on the same semaphore.</p>
</li>
<li>
<p><a id="VUID-vkQueueBindSparse-pWaitSemaphores-01117"></a>
All elements of the <code>pWaitSemaphores</code> member of all elements of
<code>pBindInfo</code> <strong class="purple">must</strong> be semaphores that are signaled, or have
<a href="vkspec.html#synchronization-semaphores-signaling">semaphore signal operations</a>
previously submitted for execution.</p>
</li>
</ul>
</div>
</div>
</div>
<div class="sidebarblock">
<div class="content">
<div class="title">Valid Usage (Implicit)</div>
<div class="ulist">
<ul>
<li>
<p><a id="VUID-vkQueueBindSparse-queue-parameter"></a> <code>queue</code> <strong class="purple">must</strong> be a valid <code>VkQueue</code> handle</p>
</li>
<li>
<p><a id="VUID-vkQueueBindSparse-pBindInfo-parameter"></a> If <code>bindInfoCount</code> is not <code>0</code>, <code>pBindInfo</code> <strong class="purple">must</strong> be a valid pointer to an array of <code>bindInfoCount</code> valid <code>VkBindSparseInfo</code> structures</p>
</li>
<li>
<p><a id="VUID-vkQueueBindSparse-fence-parameter"></a> If <code>fence</code> is not <a href="#VK_NULL_HANDLE">VK_NULL_HANDLE</a>, <code>fence</code> <strong class="purple">must</strong> be a valid <code>VkFence</code> handle</p>
</li>
<li>
<p><a id="VUID-vkQueueBindSparse-queuetype"></a> The <code>queue</code> <strong class="purple">must</strong> support sparse binding operations</p>
</li>
<li>
<p><a id="VUID-vkQueueBindSparse-commonparent"></a> Both of <code>fence</code>, and <code>queue</code> that are valid handles <strong class="purple">must</strong> have been created, allocated, or retrieved from the same <code>VkDevice</code></p>
</li>
</ul>
</div>
</div>
</div>
<div class="sidebarblock">
<div class="content">
<div class="title">Host Synchronization</div>
<div class="ulist">
<ul>
<li>
<p>Host access to <code>queue</code> <strong class="purple">must</strong> be externally synchronized</p>
</li>
<li>
<p>Host access to <code>pBindInfo</code>[].pWaitSemaphores[] <strong class="purple">must</strong> be externally synchronized</p>
</li>
<li>
<p>Host access to <code>pBindInfo</code>[].pSignalSemaphores[] <strong class="purple">must</strong> be externally synchronized</p>
</li>
<li>
<p>Host access to <code>pBindInfo</code>[].pBufferBinds[].buffer <strong class="purple">must</strong> be externally synchronized</p>
</li>
<li>
<p>Host access to <code>pBindInfo</code>[].pImageOpaqueBinds[].image <strong class="purple">must</strong> be externally synchronized</p>
</li>
<li>
<p>Host access to <code>pBindInfo</code>[].pImageBinds[].image <strong class="purple">must</strong> be externally synchronized</p>
</li>
<li>
<p>Host access to <code>fence</code> <strong class="purple">must</strong> be externally synchronized</p>
</li>
</ul>
</div>
</div>
</div>
<div class="sidebarblock">
<div class="content">
<div class="title">Command Properties</div>
<table class="tableblock frame-all grid-all stretch">
<colgroup>
<col style="width: 25%;">
<col style="width: 25%;">
<col style="width: 25%;">
<col style="width: 25%;">
</colgroup>
<thead>
<tr>
<th class="tableblock halign-left valign-top"><a href="#VkCommandBufferLevel">Command Buffer Levels</a></th>
<th class="tableblock halign-left valign-top"><a href="#vkCmdBeginRenderPass">Render Pass Scope</a></th>
<th class="tableblock halign-left valign-top"><a href="#VkQueueFlagBits">Supported Queue Types</a></th>
<th class="tableblock halign-left valign-top"><a href="#synchronization-pipeline-stages-types">Pipeline Type</a></th>
</tr>
</thead>
<tbody>
<tr>
<td class="tableblock halign-left valign-top"><p class="tableblock">-</p></td>
<td class="tableblock halign-left valign-top"><p class="tableblock">-</p></td>
<td class="tableblock halign-left valign-top"><p class="tableblock">SPARSE_BINDING</p></td>
<td class="tableblock halign-left valign-top"><p class="tableblock">-</p></td>
</tr>
</tbody>
</table>
</div>
</div>
<div class="sidebarblock">
<div class="content">
<div class="title">Return Codes</div>
<div class="dlist">
<dl>
<dt class="hdlist1"><a href="#fundamentals-successcodes">Success</a></dt>
<dd>
<div class="ulist">
<ul>
<li>
<p><code>VK_SUCCESS</code></p>
</li>
</ul>
</div>
</dd>
<dt class="hdlist1"><a href="#fundamentals-errorcodes">Failure</a></dt>
<dd>
<div class="ulist">
<ul>
<li>
<p><code>VK_ERROR_OUT_OF_HOST_MEMORY</code></p>
</li>
<li>
<p><code>VK_ERROR_OUT_OF_DEVICE_MEMORY</code></p>
</li>
<li>
<p><code>VK_ERROR_DEVICE_LOST</code></p>
</li>
</ul>
</div>
</dd>
</dl>
</div>
</div>
</div>
</div>
<div class="sect3">
<h4 id="_see_also_298">See Also</h4>
<div class="paragraph">
<p><a href="#VkBindSparseInfo">VkBindSparseInfo</a>, <a href="#VkFence">VkFence</a>, <a href="#VkQueue">VkQueue</a></p>
</div>
</div>
<div class="sect3">
<h4 id="_document_notes_298">Document Notes</h4>
<div class="paragraph">
<p>For more information, see the Vulkan Specification at URL</p>
</div>
<div class="paragraph">
<p><a href="https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#vkQueueBindSparse" class="bare">https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#vkQueueBindSparse</a></p>
</div>
<div class="paragraph">
<p>This page is extracted from the Vulkan Specification.
Fixes and changes should be made to the Specification, not directly.</p>
</div>
<div style="page-break-after: always;"></div>
</div>
</div>
<div class="sect2">
<h3 id="_vkqueueenddebugutilslabelext3">vkQueueEndDebugUtilsLabelEXT(3)</h3>
<div class="sect3">
<h4 id="_name_299">Name</h4>
<div class="paragraph">
<p>vkQueueEndDebugUtilsLabelEXT - Close a queue debug label region</p>
</div>
</div>
<div class="sect3">
<h4 id="_c_specification_299">C Specification</h4>
<div class="paragraph">
<p>A queue debug label region is closed by calling:</p>
</div>
<div id="vkQueueEndDebugUtilsLabelEXT" class="listingblock">
<div class="content">
<pre class="highlight"><code class="language-c++" data-lang="c++">void vkQueueEndDebugUtilsLabelEXT(
    VkQueue                                     queue);</code></pre>
</div>
</div>
</div>
<div class="sect3">
<h4 id="_parameters_299">Parameters</h4>
<div class="ulist">
<ul>
<li>
<p><code>queue</code> is the queue in which a debug label region should be closed.</p>
</li>
</ul>
</div>
</div>
<div class="sect3">
<h4 id="_description_299">Description</h4>
<div class="paragraph">
<p>The calls to <a href="#vkQueueBeginDebugUtilsLabelEXT">vkQueueBeginDebugUtilsLabelEXT</a> and
<a href="#vkQueueEndDebugUtilsLabelEXT">vkQueueEndDebugUtilsLabelEXT</a> <strong class="purple">must</strong> be matched and balanced.</p>
</div>
<div class="sidebarblock">
<div class="content">
<div class="title">Valid Usage</div>
<div class="ulist">
<ul>
<li>
<p><a id="VUID-vkQueueEndDebugUtilsLabelEXT-None-01911"></a>
There <strong class="purple">must</strong> be an outstanding <code>vkQueueBeginDebugUtilsLabelEXT</code>
command prior to the <code>vkQueueEndDebugUtilsLabelEXT</code> on the queue</p>
</li>
</ul>
</div>
</div>
</div>
<div class="sidebarblock">
<div class="content">
<div class="title">Valid Usage (Implicit)</div>
<div class="ulist">
<ul>
<li>
<p><a id="VUID-vkQueueEndDebugUtilsLabelEXT-queue-parameter"></a> <code>queue</code> <strong class="purple">must</strong> be a valid <code>VkQueue</code> handle</p>
</li>
</ul>
</div>
</div>
</div>
<div class="sidebarblock">
<div class="content">
<div class="title">Command Properties</div>
<table class="tableblock frame-all grid-all stretch">
<colgroup>
<col style="width: 25%;">
<col style="width: 25%;">
<col style="width: 25%;">
<col style="width: 25%;">
</colgroup>
<thead>
<tr>
<th class="tableblock halign-left valign-top"><a href="#VkCommandBufferLevel">Command Buffer Levels</a></th>
<th class="tableblock halign-left valign-top"><a href="#vkCmdBeginRenderPass">Render Pass Scope</a></th>
<th class="tableblock halign-left valign-top"><a href="#VkQueueFlagBits">Supported Queue Types</a></th>
<th class="tableblock halign-left valign-top"><a href="#synchronization-pipeline-stages-types">Pipeline Type</a></th>
</tr>
</thead>
<tbody>
<tr>
<td class="tableblock halign-left valign-top"><p class="tableblock">-</p></td>
<td class="tableblock halign-left valign-top"><p class="tableblock">-</p></td>
<td class="tableblock halign-left valign-top"><p class="tableblock">Any</p></td>
<td class="tableblock halign-left valign-top"><p class="tableblock">-</p></td>
</tr>
</tbody>
</table>
</div>
</div>
</div>
<div class="sect3">
<h4 id="_see_also_299">See Also</h4>
<div class="paragraph">
<p><a href="#VkQueue">VkQueue</a></p>
</div>
</div>
<div class="sect3">
<h4 id="_document_notes_299">Document Notes</h4>
<div class="paragraph">
<p>For more information, see the Vulkan Specification at URL</p>
</div>
<div class="paragraph">
<p><a href="https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#vkQueueEndDebugUtilsLabelEXT" class="bare">https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#vkQueueEndDebugUtilsLabelEXT</a></p>
</div>
<div class="paragraph">
<p>This page is extracted from the Vulkan Specification.
Fixes and changes should be made to the Specification, not directly.</p>
</div>
<div style="page-break-after: always;"></div>
</div>
</div>
<div class="sect2">
<h3 id="_vkqueueinsertdebugutilslabelext3">vkQueueInsertDebugUtilsLabelEXT(3)</h3>
<div class="sect3">
<h4 id="_name_300">Name</h4>
<div class="paragraph">
<p>vkQueueInsertDebugUtilsLabelEXT - Insert a label into a queue</p>
</div>
</div>
<div class="sect3">
<h4 id="_c_specification_300">C Specification</h4>
<div class="paragraph">
<p>A single label can be inserted into a queue by calling:</p>
</div>
<div id="vkQueueInsertDebugUtilsLabelEXT" class="listingblock">
<div class="content">
<pre class="highlight"><code class="language-c++" data-lang="c++">void vkQueueInsertDebugUtilsLabelEXT(
    VkQueue                                     queue,
    const VkDebugUtilsLabelEXT*                 pLabelInfo);</code></pre>
</div>
</div>
</div>
<div class="sect3">
<h4 id="_parameters_300">Parameters</h4>
<div class="ulist">
<ul>
<li>
<p><code>queue</code> is the queue into which a debug label will be inserted.</p>
</li>
<li>
<p><code>pLabelInfo</code> is a pointer to an instance of the
<a href="#VkDebugUtilsLabelEXT">VkDebugUtilsLabelEXT</a> structure specifying the parameters of the
label to insert.</p>
</li>
</ul>
</div>
</div>
<div class="sect3">
<h4 id="_description_300">Description</h4>
<div class="sidebarblock">
<div class="content">
<div class="title">Valid Usage (Implicit)</div>
<div class="ulist">
<ul>
<li>
<p><a id="VUID-vkQueueInsertDebugUtilsLabelEXT-queue-parameter"></a> <code>queue</code> <strong class="purple">must</strong> be a valid <code>VkQueue</code> handle</p>
</li>
<li>
<p><a id="VUID-vkQueueInsertDebugUtilsLabelEXT-pLabelInfo-parameter"></a> <code>pLabelInfo</code> <strong class="purple">must</strong> be a valid pointer to a valid <code>VkDebugUtilsLabelEXT</code> structure</p>
</li>
</ul>
</div>
</div>
</div>
<div class="sidebarblock">
<div class="content">
<div class="title">Command Properties</div>
<table class="tableblock frame-all grid-all stretch">
<colgroup>
<col style="width: 25%;">
<col style="width: 25%;">
<col style="width: 25%;">
<col style="width: 25%;">
</colgroup>
<thead>
<tr>
<th class="tableblock halign-left valign-top"><a href="#VkCommandBufferLevel">Command Buffer Levels</a></th>
<th class="tableblock halign-left valign-top"><a href="#vkCmdBeginRenderPass">Render Pass Scope</a></th>
<th class="tableblock halign-left valign-top"><a href="#VkQueueFlagBits">Supported Queue Types</a></th>
<th class="tableblock halign-left valign-top"><a href="#synchronization-pipeline-stages-types">Pipeline Type</a></th>
</tr>
</thead>
<tbody>
<tr>
<td class="tableblock halign-left valign-top"><p class="tableblock">-</p></td>
<td class="tableblock halign-left valign-top"><p class="tableblock">-</p></td>
<td class="tableblock halign-left valign-top"><p class="tableblock">Any</p></td>
<td class="tableblock halign-left valign-top"><p class="tableblock">-</p></td>
</tr>
</tbody>
</table>
</div>
</div>
</div>
<div class="sect3">
<h4 id="_see_also_300">See Also</h4>
<div class="paragraph">
<p><a href="#VkDebugUtilsLabelEXT">VkDebugUtilsLabelEXT</a>, <a href="#VkQueue">VkQueue</a></p>
</div>
</div>
<div class="sect3">
<h4 id="_document_notes_300">Document Notes</h4>
<div class="paragraph">
<p>For more information, see the Vulkan Specification at URL</p>
</div>
<div class="paragraph">
<p><a href="https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#vkQueueInsertDebugUtilsLabelEXT" class="bare">https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#vkQueueInsertDebugUtilsLabelEXT</a></p>
</div>
<div class="paragraph">
<p>This page is extracted from the Vulkan Specification.
Fixes and changes should be made to the Specification, not directly.</p>
</div>
<div style="page-break-after: always;"></div>
</div>
</div>
<div class="sect2">
<h3 id="_vkqueuepresentkhr3">vkQueuePresentKHR(3)</h3>
<div class="sect3">
<h4 id="_name_301">Name</h4>
<div class="paragraph">
<p>vkQueuePresentKHR - Queue an image for presentation</p>
</div>
</div>
<div class="sect3">
<h4 id="_c_specification_301">C Specification</h4>
<div class="paragraph">
<p>After queueing all rendering commands and transitioning the image to the
correct layout, to queue an image for presentation, call:</p>
</div>
<div id="vkQueuePresentKHR" class="listingblock">
<div class="content">
<pre class="highlight"><code class="language-c++" data-lang="c++">VkResult vkQueuePresentKHR(
    VkQueue                                     queue,
    const VkPresentInfoKHR*                     pPresentInfo);</code></pre>
</div>
</div>
</div>
<div class="sect3">
<h4 id="_parameters_301">Parameters</h4>
<div class="ulist">
<ul>
<li>
<p><code>queue</code> is a queue that is capable of presentation to the target
surface&#8217;s platform on the same device as the image&#8217;s swapchain.</p>
</li>
<li>
<p><code>pPresentInfo</code> is a pointer to an instance of the
<a href="#VkPresentInfoKHR">VkPresentInfoKHR</a> structure specifying the parameters of the
presentation.</p>
</li>
</ul>
</div>
</div>
<div class="sect3">
<h4 id="_description_301">Description</h4>
<div class="admonitionblock note">
<table>
<tr>
<td class="icon">
<i class="fa icon-note" title="Note"></i>
</td>
<td class="content">
<div class="title">Note</div>
<div class="paragraph">
<p>There is no requirement for an application to present images in the same
order that they were acquired - applications can arbitrarily present any
image that is currently acquired.</p>
</div>
</td>
</tr>
</table>
</div>
<div class="sidebarblock">
<div class="content">
<div class="title">Valid Usage</div>
<div class="ulist">
<ul>
<li>
<p><a id="VUID-vkQueuePresentKHR-pSwapchains-01292"></a>
Each element of <code>pSwapchains</code> member of <code>pPresentInfo</code> <strong class="purple">must</strong> be
a swapchain that is created for a surface for which presentation is
supported from <code>queue</code> as determined using a call to
<code>vkGetPhysicalDeviceSurfaceSupportKHR</code></p>
</li>
<li>
<p><a id="VUID-vkQueuePresentKHR-pSwapchains-01293"></a>
If more than one member of <code>pSwapchains</code> was created from a display
surface, all display surfaces referenced that refer to the same display
<strong class="purple">must</strong> use the same display mode</p>
</li>
<li>
<p><a id="VUID-vkQueuePresentKHR-pWaitSemaphores-01294"></a>
When a semaphore unsignal operation defined by the elements of the
<code>pWaitSemaphores</code> member of <code>pPresentInfo</code> executes on
<code>queue</code>, no other queue <strong class="purple">must</strong> be waiting on the same semaphore.</p>
</li>
<li>
<p><a id="VUID-vkQueuePresentKHR-pWaitSemaphores-01295"></a>
All elements of the <code>pWaitSemaphores</code> member of <code>pPresentInfo</code>
<strong class="purple">must</strong> be semaphores that are signaled, or have
<a href="vkspec.html#synchronization-semaphores-signaling">semaphore signal operations</a>
previously submitted for execution.</p>
</li>
</ul>
</div>
</div>
</div>
<div class="paragraph">
<p>Any writes to memory backing the images referenced by the
<code>pImageIndices</code> and <code>pSwapchains</code> members of <code>pPresentInfo</code>,
that are available before <a href="#vkQueuePresentKHR">vkQueuePresentKHR</a> is executed, are
automatically made visible to the read access performed by the presentation
engine.
This automatic visibility operation for an image happens-after the semaphore
signal operation, and happens-before the presentation engine accesses the
image.</p>
</div>
<div class="paragraph">
<p>Queueing an image for presentation defines a set of <em>queue operations</em>,
including waiting on the semaphores and submitting a presentation request to
the presentation engine.
However, the scope of this set of queue operations does not include the
actual processing of the image by the presentation engine.</p>
</div>
<div class="paragraph">
<p>If <code>vkQueuePresentKHR</code> fails to enqueue the corresponding set of queue
operations, it <strong class="purple">may</strong> return <code>VK_ERROR_OUT_OF_HOST_MEMORY</code> or
<code>VK_ERROR_OUT_OF_DEVICE_MEMORY</code>.
If it does, the implementation <strong class="purple">must</strong> ensure that the state and contents of
any resources or synchronization primitives referenced is unaffected by the
call or its failure.</p>
</div>
<div class="paragraph">
<p>If <code>vkQueuePresentKHR</code> fails in such a way that the implementation is
unable to make that guarantee, the implementation <strong class="purple">must</strong> return
<code>VK_ERROR_DEVICE_LOST</code>.</p>
</div>
<div class="paragraph">
<p>However, if the presentation request is rejected by the presentation engine
with an error <code>VK_ERROR_OUT_OF_DATE_KHR</code> or
<code>VK_ERROR_SURFACE_LOST_KHR</code>, the set of queue operations are still
considered to be enqueued and thus any semaphore to be waited on gets
unsignaled when the corresponding queue operation is complete.</p>
</div>
<div class="paragraph">
<p>If any <code>swapchain</code> member of <code>pPresentInfo</code> was created with
<code>VK_FULL_SCREEN_EXCLUSIVE_APPLICATION_CONTROLLED_EXT</code>,
<code>VK_ERROR_FULL_SCREEN_EXCLUSIVE_MODE_LOST_EXT</code> will be returned if that
swapchain does not have exclusive full-screen access, possibly for
implementation-specific reasons outside of the application&#8217;s control.</p>
</div>
<div class="sidebarblock">
<div class="content">
<div class="title">Valid Usage (Implicit)</div>
<div class="ulist">
<ul>
<li>
<p><a id="VUID-vkQueuePresentKHR-queue-parameter"></a> <code>queue</code> <strong class="purple">must</strong> be a valid <code>VkQueue</code> handle</p>
</li>
<li>
<p><a id="VUID-vkQueuePresentKHR-pPresentInfo-parameter"></a> <code>pPresentInfo</code> <strong class="purple">must</strong> be a valid pointer to a valid <code>VkPresentInfoKHR</code> structure</p>
</li>
</ul>
</div>
</div>
</div>
<div class="sidebarblock">
<div class="content">
<div class="title">Host Synchronization</div>
<div class="ulist">
<ul>
<li>
<p>Host access to <code>queue</code> <strong class="purple">must</strong> be externally synchronized</p>
</li>
<li>
<p>Host access to <code>pPresentInfo.pWaitSemaphores</code>[] <strong class="purple">must</strong> be externally synchronized</p>
</li>
<li>
<p>Host access to <code>pPresentInfo.pSwapchains</code>[] <strong class="purple">must</strong> be externally synchronized</p>
</li>
</ul>
</div>
</div>
</div>
<div class="sidebarblock">
<div class="content">
<div class="title">Command Properties</div>
<table class="tableblock frame-all grid-all stretch">
<colgroup>
<col style="width: 25%;">
<col style="width: 25%;">
<col style="width: 25%;">
<col style="width: 25%;">
</colgroup>
<thead>
<tr>
<th class="tableblock halign-left valign-top"><a href="#VkCommandBufferLevel">Command Buffer Levels</a></th>
<th class="tableblock halign-left valign-top"><a href="#vkCmdBeginRenderPass">Render Pass Scope</a></th>
<th class="tableblock halign-left valign-top"><a href="#VkQueueFlagBits">Supported Queue Types</a></th>
<th class="tableblock halign-left valign-top"><a href="#synchronization-pipeline-stages-types">Pipeline Type</a></th>
</tr>
</thead>
<tbody>
<tr>
<td class="tableblock halign-left valign-top"><p class="tableblock">-</p></td>
<td class="tableblock halign-left valign-top"><p class="tableblock">-</p></td>
<td class="tableblock halign-left valign-top"><p class="tableblock">Any</p></td>
<td class="tableblock halign-left valign-top"><p class="tableblock">-</p></td>
</tr>
</tbody>
</table>
</div>
</div>
<div class="sidebarblock">
<div class="content">
<div class="title">Return Codes</div>
<div class="dlist">
<dl>
<dt class="hdlist1"><a href="#fundamentals-successcodes">Success</a></dt>
<dd>
<div class="ulist">
<ul>
<li>
<p><code>VK_SUCCESS</code></p>
</li>
<li>
<p><code>VK_SUBOPTIMAL_KHR</code></p>
</li>
</ul>
</div>
</dd>
<dt class="hdlist1"><a href="#fundamentals-errorcodes">Failure</a></dt>
<dd>
<div class="ulist">
<ul>
<li>
<p><code>VK_ERROR_OUT_OF_HOST_MEMORY</code></p>
</li>
<li>
<p><code>VK_ERROR_OUT_OF_DEVICE_MEMORY</code></p>
</li>
<li>
<p><code>VK_ERROR_DEVICE_LOST</code></p>
</li>
<li>
<p><code>VK_ERROR_OUT_OF_DATE_KHR</code></p>
</li>
<li>
<p><code>VK_ERROR_SURFACE_LOST_KHR</code></p>
</li>
<li>
<p><code>VK_ERROR_FULL_SCREEN_EXCLUSIVE_MODE_LOST_EXT</code></p>
</li>
</ul>
</div>
</dd>
</dl>
</div>
</div>
</div>
</div>
<div class="sect3">
<h4 id="_see_also_301">See Also</h4>
<div class="paragraph">
<p><a href="#VkPresentInfoKHR">VkPresentInfoKHR</a>, <a href="#VkQueue">VkQueue</a></p>
</div>
</div>
<div class="sect3">
<h4 id="_document_notes_301">Document Notes</h4>
<div class="paragraph">
<p>For more information, see the Vulkan Specification at URL</p>
</div>
<div class="paragraph">
<p><a href="https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#vkQueuePresentKHR" class="bare">https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#vkQueuePresentKHR</a></p>
</div>
<div class="paragraph">
<p>This page is extracted from the Vulkan Specification.
Fixes and changes should be made to the Specification, not directly.</p>
</div>
<div style="page-break-after: always;"></div>
</div>
</div>
<div class="sect2">
<h3 id="_vkqueuesubmit3">vkQueueSubmit(3)</h3>
<div class="sect3">
<h4 id="_name_302">Name</h4>
<div class="paragraph">
<p>vkQueueSubmit - Submits a sequence of semaphores or command buffers to a queue</p>
</div>
</div>
<div class="sect3">
<h4 id="_c_specification_302">C Specification</h4>
<div class="paragraph">
<p>To submit command buffers to a queue, call:</p>
</div>
<div id="vkQueueSubmit" class="listingblock">
<div class="content">
<pre class="highlight"><code class="language-c++" data-lang="c++">VkResult vkQueueSubmit(
    VkQueue                                     queue,
    uint32_t                                    submitCount,
    const VkSubmitInfo*                         pSubmits,
    VkFence                                     fence);</code></pre>
</div>
</div>
</div>
<div class="sect3">
<h4 id="_parameters_302">Parameters</h4>
<div class="ulist">
<ul>
<li>
<p><code>queue</code> is the queue that the command buffers will be submitted to.</p>
</li>
<li>
<p><code>submitCount</code> is the number of elements in the <code>pSubmits</code> array.</p>
</li>
<li>
<p><code>pSubmits</code> is a pointer to an array of <a href="#VkSubmitInfo">VkSubmitInfo</a>
structures, each specifying a command buffer submission batch.</p>
</li>
<li>
<p><code>fence</code> is an <strong class="purple">optional</strong> handle to a fence to be signaled once all
submitted command buffers have completed execution.
If <code>fence</code> is not <a href="#VK_NULL_HANDLE">VK_NULL_HANDLE</a>, it defines a
<a href="vkspec.html#synchronization-fences-signaling">fence signal operation</a>.</p>
</li>
</ul>
</div>
</div>
<div class="sect3">
<h4 id="_description_302">Description</h4>
<div class="admonitionblock note">
<table>
<tr>
<td class="icon">
<i class="fa icon-note" title="Note"></i>
</td>
<td class="content">
<div class="title">Note</div>
<div class="paragraph">
<p>Submission can be a high overhead operation, and applications <strong class="purple">should</strong>
attempt to batch work together into as few calls to <code>vkQueueSubmit</code> as
possible.</p>
</div>
</td>
</tr>
</table>
</div>
<div class="paragraph">
<p><code>vkQueueSubmit</code> is a <a href="vkspec.html#devsandqueues-submission">queue submission
command</a>, with each batch defined by an element of <code>pSubmits</code> as an
instance of the <a href="#VkSubmitInfo">VkSubmitInfo</a> structure.
Batches begin execution in the order they appear in <code>pSubmits</code>, but <strong class="purple">may</strong>
complete out of order.</p>
</div>
<div class="paragraph">
<p>Fence and semaphore operations submitted with <a href="#vkQueueSubmit">vkQueueSubmit</a> have
additional ordering constraints compared to other submission commands, with
dependencies involving previous and subsequent queue operations.
Information about these additional constraints can be found in the
<a href="vkspec.html#synchronization-semaphores">semaphore</a> and <a href="vkspec.html#synchronization-fences">fence</a> sections of <a href="vkspec.html#synchronization">the synchronization chapter</a>.</p>
</div>
<div class="paragraph">
<p>Details on the interaction of <code>pWaitDstStageMask</code> with synchronization
are described in the <a href="vkspec.html#synchronization-semaphores-waiting">semaphore wait
operation</a> section of <a href="vkspec.html#synchronization">the synchronization chapter</a>.</p>
</div>
<div class="paragraph">
<p>The order that batches appear in <code>pSubmits</code> is used to determine
<a href="vkspec.html#synchronization-submission-order">submission order</a>, and thus all the
<a href="vkspec.html#synchronization-implicit">implicit ordering guarantees</a> that respect it.
Other than these implicit ordering guarantees and any <a href="vkspec.html#synchronization">explicit synchronization primitives</a>, these batches <strong class="purple">may</strong> overlap or
otherwise execute out of order.</p>
</div>
<div class="paragraph">
<p>If any command buffer submitted to this queue is in the
<a href="vkspec.html#commandbuffers-lifecycle">executable state</a>, it is moved to the
<a href="vkspec.html#commandbuffers-lifecycle">pending state</a>.
Once execution of all submissions of a command buffer complete, it moves
from the <a href="vkspec.html#commandbuffers-lifecycle">pending state</a>, back to the
<a href="vkspec.html#commandbuffers-lifecycle">executable state</a>.
If a command buffer was recorded with the
<code>VK_COMMAND_BUFFER_USAGE_ONE_TIME_SUBMIT_BIT</code> flag, it instead moves
back to the <a href="vkspec.html#commandbuffers-lifecycle">invalid state</a>.</p>
</div>
<div class="paragraph">
<p>If <code>vkQueueSubmit</code> fails, it <strong class="purple">may</strong> return
<code>VK_ERROR_OUT_OF_HOST_MEMORY</code> or <code>VK_ERROR_OUT_OF_DEVICE_MEMORY</code>.
If it does, the implementation <strong class="purple">must</strong> ensure that the state and contents of
any resources or synchronization primitives referenced by the submitted
command buffers and any semaphores referenced by <code>pSubmits</code> is
unaffected by the call or its failure.
If <code>vkQueueSubmit</code> fails in such a way that the implementation is unable
to make that guarantee, the implementation <strong class="purple">must</strong> return
<code>VK_ERROR_DEVICE_LOST</code>.
See <a href="vkspec.html#devsandqueues-lost-device">Lost Device</a>.</p>
</div>
<div class="sidebarblock">
<div class="content">
<div class="title">Valid Usage</div>
<div class="ulist">
<ul>
<li>
<p><a id="VUID-vkQueueSubmit-fence-00063"></a>
If <code>fence</code> is not <a href="#VK_NULL_HANDLE">VK_NULL_HANDLE</a>, <code>fence</code> <strong class="purple">must</strong> be
unsignaled</p>
</li>
<li>
<p><a id="VUID-vkQueueSubmit-fence-00064"></a>
If <code>fence</code> is not <a href="#VK_NULL_HANDLE">VK_NULL_HANDLE</a>, <code>fence</code> <strong class="purple">must</strong> not be
associated with any other queue command that has not yet completed
execution on that queue</p>
</li>
<li>
<p><a id="VUID-vkQueueSubmit-pCommandBuffers-00065"></a>
Any calls to <a href="#vkCmdSetEvent">vkCmdSetEvent</a>, <a href="#vkCmdResetEvent">vkCmdResetEvent</a> or
<a href="#vkCmdWaitEvents">vkCmdWaitEvents</a> that have been recorded into any of the command
buffer elements of the <code>pCommandBuffers</code> member of any element of
<code>pSubmits</code>, <strong class="purple">must</strong> not reference any <a href="#VkEvent">VkEvent</a> that is referenced
by any of those commands in a command buffer that has been submitted to
another queue and is still in the <em>pending state</em>.</p>
</li>
<li>
<p><a id="VUID-vkQueueSubmit-pWaitDstStageMask-00066"></a>
Any stage flag included in any element of the <code>pWaitDstStageMask</code>
member of any element of <code>pSubmits</code> <strong class="purple">must</strong> be a pipeline stage
supported by one of the capabilities of <code>queue</code>, as specified in the
<a href="vkspec.html#synchronization-pipeline-stages-supported">table of supported pipeline
stages</a>.</p>
</li>
<li>
<p><a id="VUID-vkQueueSubmit-pSignalSemaphores-00067"></a>
Each element of the <code>pSignalSemaphores</code> member of any element of
<code>pSubmits</code> <strong class="purple">must</strong> be unsignaled when the semaphore signal operation
it defines is executed on the device</p>
</li>
<li>
<p><a id="VUID-vkQueueSubmit-pWaitSemaphores-00068"></a>
When a semaphore unsignal operation defined by any element of the
<code>pWaitSemaphores</code> member of any element of <code>pSubmits</code> executes
on <code>queue</code>, no other queue <strong class="purple">must</strong> be waiting on the same semaphore.</p>
</li>
<li>
<p><a id="VUID-vkQueueSubmit-pWaitSemaphores-00069"></a>
All elements of the <code>pWaitSemaphores</code> member of all elements of
<code>pSubmits</code> <strong class="purple">must</strong> be semaphores that are signaled, or have
<a href="vkspec.html#synchronization-semaphores-signaling">semaphore signal operations</a>
previously submitted for execution.</p>
</li>
<li>
<p><a id="VUID-vkQueueSubmit-pCommandBuffers-00070"></a>
Each element of the <code>pCommandBuffers</code> member of each element of
<code>pSubmits</code> <strong class="purple">must</strong> be in the <a href="vkspec.html#commandbuffers-lifecycle">pending or
executable state</a>.</p>
</li>
<li>
<p><a id="VUID-vkQueueSubmit-pCommandBuffers-00071"></a>
If any element of the <code>pCommandBuffers</code> member of any element of
<code>pSubmits</code> was not recorded with the
<code>VK_COMMAND_BUFFER_USAGE_SIMULTANEOUS_USE_BIT</code>, it <strong class="purple">must</strong> not be in
the <a href="vkspec.html#commandbuffers-lifecycle">pending state</a>.</p>
</li>
<li>
<p><a id="VUID-vkQueueSubmit-pCommandBuffers-00072"></a>
Any <a href="vkspec.html#commandbuffers-secondary">secondary command buffers recorded</a>
into any element of the <code>pCommandBuffers</code> member of any element of
<code>pSubmits</code> <strong class="purple">must</strong> be in the <a href="vkspec.html#commandbuffers-lifecycle">pending or
executable state</a>.</p>
</li>
<li>
<p><a id="VUID-vkQueueSubmit-pCommandBuffers-00073"></a>
If any <a href="vkspec.html#commandbuffers-secondary">secondary command buffers recorded</a>
into any element of the <code>pCommandBuffers</code> member of any element of
<code>pSubmits</code> was not recorded with the
<code>VK_COMMAND_BUFFER_USAGE_SIMULTANEOUS_USE_BIT</code>, it <strong class="purple">must</strong> not be in
the <a href="vkspec.html#commandbuffers-lifecycle">pending state</a>.</p>
</li>
<li>
<p><a id="VUID-vkQueueSubmit-pCommandBuffers-00074"></a>
Each element of the <code>pCommandBuffers</code> member of each element of
<code>pSubmits</code> <strong class="purple">must</strong> have been allocated from a <code>VkCommandPool</code> that
was created for the same queue family <code>queue</code> belongs to.</p>
</li>
<li>
<p><a id="VUID-vkQueueSubmit-pSubmits-02207"></a>
If any element of <code>pSubmits</code>-&gt;<code>pCommandBuffers</code> includes a
<a href="vkspec.html#synchronization-queue-transfers-acquire">Queue Family Transfer Acquire
Operation</a>, there <strong class="purple">must</strong> exist a previously submitted
<a href="vkspec.html#synchronization-queue-transfers-release">Queue Family Transfer Release
Operation</a> on a queue in the queue family identified by the acquire
operation, with parameters matching the acquire operation as defined in
the definition of such <a href="vkspec.html#synchronization-queue-transfers-acquire">acquire operations</a>, and which happens before the acquire operation.</p>
</li>
</ul>
</div>
</div>
</div>
<div class="sidebarblock">
<div class="content">
<div class="title">Valid Usage (Implicit)</div>
<div class="ulist">
<ul>
<li>
<p><a id="VUID-vkQueueSubmit-queue-parameter"></a> <code>queue</code> <strong class="purple">must</strong> be a valid <code>VkQueue</code> handle</p>
</li>
<li>
<p><a id="VUID-vkQueueSubmit-pSubmits-parameter"></a> If <code>submitCount</code> is not <code>0</code>, <code>pSubmits</code> <strong class="purple">must</strong> be a valid pointer to an array of <code>submitCount</code> valid <code>VkSubmitInfo</code> structures</p>
</li>
<li>
<p><a id="VUID-vkQueueSubmit-fence-parameter"></a> If <code>fence</code> is not <a href="#VK_NULL_HANDLE">VK_NULL_HANDLE</a>, <code>fence</code> <strong class="purple">must</strong> be a valid <code>VkFence</code> handle</p>
</li>
<li>
<p><a id="VUID-vkQueueSubmit-commonparent"></a> Both of <code>fence</code>, and <code>queue</code> that are valid handles <strong class="purple">must</strong> have been created, allocated, or retrieved from the same <code>VkDevice</code></p>
</li>
</ul>
</div>
</div>
</div>
<div class="sidebarblock">
<div class="content">
<div class="title">Host Synchronization</div>
<div class="ulist">
<ul>
<li>
<p>Host access to <code>queue</code> <strong class="purple">must</strong> be externally synchronized</p>
</li>
<li>
<p>Host access to <code>pSubmits</code>[].pWaitSemaphores[] <strong class="purple">must</strong> be externally synchronized</p>
</li>
<li>
<p>Host access to <code>pSubmits</code>[].pSignalSemaphores[] <strong class="purple">must</strong> be externally synchronized</p>
</li>
<li>
<p>Host access to <code>fence</code> <strong class="purple">must</strong> be externally synchronized</p>
</li>
</ul>
</div>
</div>
</div>
<div class="sidebarblock">
<div class="content">
<div class="title">Command Properties</div>
<table class="tableblock frame-all grid-all stretch">
<colgroup>
<col style="width: 25%;">
<col style="width: 25%;">
<col style="width: 25%;">
<col style="width: 25%;">
</colgroup>
<thead>
<tr>
<th class="tableblock halign-left valign-top"><a href="#VkCommandBufferLevel">Command Buffer Levels</a></th>
<th class="tableblock halign-left valign-top"><a href="#vkCmdBeginRenderPass">Render Pass Scope</a></th>
<th class="tableblock halign-left valign-top"><a href="#VkQueueFlagBits">Supported Queue Types</a></th>
<th class="tableblock halign-left valign-top"><a href="#synchronization-pipeline-stages-types">Pipeline Type</a></th>
</tr>
</thead>
<tbody>
<tr>
<td class="tableblock halign-left valign-top"><p class="tableblock">-</p></td>
<td class="tableblock halign-left valign-top"><p class="tableblock">-</p></td>
<td class="tableblock halign-left valign-top"><p class="tableblock">Any</p></td>
<td class="tableblock halign-left valign-top"><p class="tableblock">-</p></td>
</tr>
</tbody>
</table>
</div>
</div>
<div class="sidebarblock">
<div class="content">
<div class="title">Return Codes</div>
<div class="dlist">
<dl>
<dt class="hdlist1"><a href="#fundamentals-successcodes">Success</a></dt>
<dd>
<div class="ulist">
<ul>
<li>
<p><code>VK_SUCCESS</code></p>
</li>
</ul>
</div>
</dd>
<dt class="hdlist1"><a href="#fundamentals-errorcodes">Failure</a></dt>
<dd>
<div class="ulist">
<ul>
<li>
<p><code>VK_ERROR_OUT_OF_HOST_MEMORY</code></p>
</li>
<li>
<p><code>VK_ERROR_OUT_OF_DEVICE_MEMORY</code></p>
</li>
<li>
<p><code>VK_ERROR_DEVICE_LOST</code></p>
</li>
</ul>
</div>
</dd>
</dl>
</div>
</div>
</div>
</div>
<div class="sect3">
<h4 id="_see_also_302">See Also</h4>
<div class="paragraph">
<p><a href="#VkFence">VkFence</a>, <a href="#VkQueue">VkQueue</a>, <a href="#VkSubmitInfo">VkSubmitInfo</a></p>
</div>
</div>
<div class="sect3">
<h4 id="_document_notes_302">Document Notes</h4>
<div class="paragraph">
<p>For more information, see the Vulkan Specification at URL</p>
</div>
<div class="paragraph">
<p><a href="https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#vkQueueSubmit" class="bare">https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#vkQueueSubmit</a></p>
</div>
<div class="paragraph">
<p>This page is extracted from the Vulkan Specification.
Fixes and changes should be made to the Specification, not directly.</p>
</div>
<div style="page-break-after: always;"></div>
</div>
</div>
<div class="sect2">
<h3 id="_vkqueuewaitidle3">vkQueueWaitIdle(3)</h3>
<div class="sect3">
<h4 id="_name_303">Name</h4>
<div class="paragraph">
<p>vkQueueWaitIdle - Wait for a queue to become idle</p>
</div>
</div>
<div class="sect3">
<h4 id="_c_specification_303">C Specification</h4>
<div class="paragraph">
<p>To wait on the host for the completion of outstanding queue operations for a
given queue, call:</p>
</div>
<div id="vkQueueWaitIdle" class="listingblock">
<div class="content">
<pre class="highlight"><code class="language-c++" data-lang="c++">VkResult vkQueueWaitIdle(
    VkQueue                                     queue);</code></pre>
</div>
</div>
</div>
<div class="sect3">
<h4 id="_parameters_303">Parameters</h4>
<div class="ulist">
<ul>
<li>
<p><code>queue</code> is the queue on which to wait.</p>
</li>
</ul>
</div>
</div>
<div class="sect3">
<h4 id="_description_303">Description</h4>
<div class="paragraph">
<p><code>vkQueueWaitIdle</code> is equivalent to submitting a fence to a queue and
waiting with an infinite timeout for that fence to signal.</p>
</div>
<div class="sidebarblock">
<div class="content">
<div class="title">Valid Usage (Implicit)</div>
<div class="ulist">
<ul>
<li>
<p><a id="VUID-vkQueueWaitIdle-queue-parameter"></a> <code>queue</code> <strong class="purple">must</strong> be a valid <code>VkQueue</code> handle</p>
</li>
</ul>
</div>
</div>
</div>
<div class="sidebarblock">
<div class="content">
<div class="title">Host Synchronization</div>
<div class="ulist">
<ul>
<li>
<p>Host access to <code>queue</code> <strong class="purple">must</strong> be externally synchronized</p>
</li>
</ul>
</div>
</div>
</div>
<div class="sidebarblock">
<div class="content">
<div class="title">Command Properties</div>
<table class="tableblock frame-all grid-all stretch">
<colgroup>
<col style="width: 25%;">
<col style="width: 25%;">
<col style="width: 25%;">
<col style="width: 25%;">
</colgroup>
<thead>
<tr>
<th class="tableblock halign-left valign-top"><a href="#VkCommandBufferLevel">Command Buffer Levels</a></th>
<th class="tableblock halign-left valign-top"><a href="#vkCmdBeginRenderPass">Render Pass Scope</a></th>
<th class="tableblock halign-left valign-top"><a href="#VkQueueFlagBits">Supported Queue Types</a></th>
<th class="tableblock halign-left valign-top"><a href="#synchronization-pipeline-stages-types">Pipeline Type</a></th>
</tr>
</thead>
<tbody>
<tr>
<td class="tableblock halign-left valign-top"><p class="tableblock">-</p></td>
<td class="tableblock halign-left valign-top"><p class="tableblock">-</p></td>
<td class="tableblock halign-left valign-top"><p class="tableblock">Any</p></td>
<td class="tableblock halign-left valign-top"><p class="tableblock">-</p></td>
</tr>
</tbody>
</table>
</div>
</div>
<div class="sidebarblock">
<div class="content">
<div class="title">Return Codes</div>
<div class="dlist">
<dl>
<dt class="hdlist1"><a href="#fundamentals-successcodes">Success</a></dt>
<dd>
<div class="ulist">
<ul>
<li>
<p><code>VK_SUCCESS</code></p>
</li>
</ul>
</div>
</dd>
<dt class="hdlist1"><a href="#fundamentals-errorcodes">Failure</a></dt>
<dd>
<div class="ulist">
<ul>
<li>
<p><code>VK_ERROR_OUT_OF_HOST_MEMORY</code></p>
</li>
<li>
<p><code>VK_ERROR_OUT_OF_DEVICE_MEMORY</code></p>
</li>
<li>
<p><code>VK_ERROR_DEVICE_LOST</code></p>
</li>
</ul>
</div>
</dd>
</dl>
</div>
</div>
</div>
</div>
<div class="sect3">
<h4 id="_see_also_303">See Also</h4>
<div class="paragraph">
<p><a href="#VkQueue">VkQueue</a></p>
</div>
</div>
<div class="sect3">
<h4 id="_document_notes_303">Document Notes</h4>
<div class="paragraph">
<p>For more information, see the Vulkan Specification at URL</p>
</div>
<div class="paragraph">
<p><a href="https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#vkQueueWaitIdle" class="bare">https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#vkQueueWaitIdle</a></p>
</div>
<div class="paragraph">
<p>This page is extracted from the Vulkan Specification.
Fixes and changes should be made to the Specification, not directly.</p>
</div>
<div style="page-break-after: always;"></div>
</div>
</div>
<div class="sect2">
<h3 id="_vkregisterdeviceeventext3">vkRegisterDeviceEventEXT(3)</h3>
<div class="sect3">
<h4 id="_name_304">Name</h4>
<div class="paragraph">
<p>vkRegisterDeviceEventEXT - Signal a fence when a device event occurs</p>
</div>
</div>
<div class="sect3">
<h4 id="_c_specification_304">C Specification</h4>
<div class="paragraph">
<p>To create a fence that will be signaled when an event occurs on a device,
call:</p>
</div>
<div id="vkRegisterDeviceEventEXT" class="listingblock">
<div class="content">
<pre class="highlight"><code class="language-c++" data-lang="c++">VkResult vkRegisterDeviceEventEXT(
    VkDevice                                    device,
    const VkDeviceEventInfoEXT*                 pDeviceEventInfo,
    const VkAllocationCallbacks*                pAllocator,
    VkFence*                                    pFence);</code></pre>
</div>
</div>
</div>
<div class="sect3">
<h4 id="_parameters_304">Parameters</h4>
<div class="ulist">
<ul>
<li>
<p><code>device</code> is a logical device on which the event <strong class="purple">may</strong> occur.</p>
</li>
<li>
<p><code>pDeviceEventInfo</code> is a pointer to an instance of the
<a href="#VkDeviceEventInfoEXT">VkDeviceEventInfoEXT</a> structure describing the event of interest to
the application.</p>
</li>
<li>
<p><code>pAllocator</code> controls host memory allocation as described in the
<a href="vkspec.html#memory-allocation">Memory Allocation</a> chapter.</p>
</li>
<li>
<p><code>pFence</code> points to a handle in which the resulting fence object is
returned.</p>
</li>
</ul>
</div>
</div>
<div class="sect3">
<h4 id="_description_304">Description</h4>
<div class="sidebarblock">
<div class="content">
<div class="title">Valid Usage (Implicit)</div>
<div class="ulist">
<ul>
<li>
<p><a id="VUID-vkRegisterDeviceEventEXT-device-parameter"></a> <code>device</code> <strong class="purple">must</strong> be a valid <code>VkDevice</code> handle</p>
</li>
<li>
<p><a id="VUID-vkRegisterDeviceEventEXT-pDeviceEventInfo-parameter"></a> <code>pDeviceEventInfo</code> <strong class="purple">must</strong> be a valid pointer to a valid <code>VkDeviceEventInfoEXT</code> structure</p>
</li>
<li>
<p><a id="VUID-vkRegisterDeviceEventEXT-pAllocator-parameter"></a> If <code>pAllocator</code> is not <code>NULL</code>, <code>pAllocator</code> <strong class="purple">must</strong> be a valid pointer to a valid <code>VkAllocationCallbacks</code> structure</p>
</li>
<li>
<p><a id="VUID-vkRegisterDeviceEventEXT-pFence-parameter"></a> <code>pFence</code> <strong class="purple">must</strong> be a valid pointer to a <code>VkFence</code> handle</p>
</li>
</ul>
</div>
</div>
</div>
<div class="sidebarblock">
<div class="content">
<div class="title">Return Codes</div>
<div class="dlist">
<dl>
<dt class="hdlist1"><a href="#fundamentals-successcodes">Success</a></dt>
<dd>
<div class="ulist">
<ul>
<li>
<p><code>VK_SUCCESS</code></p>
</li>
</ul>
</div>
</dd>
</dl>
</div>
</div>
</div>
</div>
<div class="sect3">
<h4 id="_see_also_304">See Also</h4>
<div class="paragraph">
<p><a href="#VkAllocationCallbacks">VkAllocationCallbacks</a>, <a href="#VkDevice">VkDevice</a>, <a href="#VkDeviceEventInfoEXT">VkDeviceEventInfoEXT</a>, <a href="#VkFence">VkFence</a></p>
</div>
</div>
<div class="sect3">
<h4 id="_document_notes_304">Document Notes</h4>
<div class="paragraph">
<p>For more information, see the Vulkan Specification at URL</p>
</div>
<div class="paragraph">
<p><a href="https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#vkRegisterDeviceEventEXT" class="bare">https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#vkRegisterDeviceEventEXT</a></p>
</div>
<div class="paragraph">
<p>This page is extracted from the Vulkan Specification.
Fixes and changes should be made to the Specification, not directly.</p>
</div>
<div style="page-break-after: always;"></div>
</div>
</div>
<div class="sect2">
<h3 id="_vkregisterdisplayeventext3">vkRegisterDisplayEventEXT(3)</h3>
<div class="sect3">
<h4 id="_name_305">Name</h4>
<div class="paragraph">
<p>vkRegisterDisplayEventEXT - Signal a fence when a display event occurs</p>
</div>
</div>
<div class="sect3">
<h4 id="_c_specification_305">C Specification</h4>
<div class="paragraph">
<p>To create a fence that will be signaled when an event occurs on a
<a href="#VkDisplayKHR">VkDisplayKHR</a> object, call:</p>
</div>
<div id="vkRegisterDisplayEventEXT" class="listingblock">
<div class="content">
<pre class="highlight"><code class="language-c++" data-lang="c++">VkResult vkRegisterDisplayEventEXT(
    VkDevice                                    device,
    VkDisplayKHR                                display,
    const VkDisplayEventInfoEXT*                pDisplayEventInfo,
    const VkAllocationCallbacks*                pAllocator,
    VkFence*                                    pFence);</code></pre>
</div>
</div>
</div>
<div class="sect3">
<h4 id="_parameters_305">Parameters</h4>
<div class="ulist">
<ul>
<li>
<p><code>device</code> is a logical device associated with <code>display</code></p>
</li>
<li>
<p><code>display</code> is the display on which the event <strong class="purple">may</strong> occur.</p>
</li>
<li>
<p><code>pDisplayEventInfo</code> is a pointer to an instance of the
<a href="#VkDisplayEventInfoEXT">VkDisplayEventInfoEXT</a> structure describing the event of interest
to the application.</p>
</li>
<li>
<p><code>pAllocator</code> controls host memory allocation as described in the
<a href="vkspec.html#memory-allocation">Memory Allocation</a> chapter.</p>
</li>
<li>
<p><code>pFence</code> points to a handle in which the resulting fence object is
returned.</p>
</li>
</ul>
</div>
</div>
<div class="sect3">
<h4 id="_description_305">Description</h4>
<div class="sidebarblock">
<div class="content">
<div class="title">Valid Usage (Implicit)</div>
<div class="ulist">
<ul>
<li>
<p><a id="VUID-vkRegisterDisplayEventEXT-device-parameter"></a> <code>device</code> <strong class="purple">must</strong> be a valid <code>VkDevice</code> handle</p>
</li>
<li>
<p><a id="VUID-vkRegisterDisplayEventEXT-display-parameter"></a> <code>display</code> <strong class="purple">must</strong> be a valid <code>VkDisplayKHR</code> handle</p>
</li>
<li>
<p><a id="VUID-vkRegisterDisplayEventEXT-pDisplayEventInfo-parameter"></a> <code>pDisplayEventInfo</code> <strong class="purple">must</strong> be a valid pointer to a valid <code>VkDisplayEventInfoEXT</code> structure</p>
</li>
<li>
<p><a id="VUID-vkRegisterDisplayEventEXT-pAllocator-parameter"></a> If <code>pAllocator</code> is not <code>NULL</code>, <code>pAllocator</code> <strong class="purple">must</strong> be a valid pointer to a valid <code>VkAllocationCallbacks</code> structure</p>
</li>
<li>
<p><a id="VUID-vkRegisterDisplayEventEXT-pFence-parameter"></a> <code>pFence</code> <strong class="purple">must</strong> be a valid pointer to a <code>VkFence</code> handle</p>
</li>
</ul>
</div>
</div>
</div>
<div class="sidebarblock">
<div class="content">
<div class="title">Return Codes</div>
<div class="dlist">
<dl>
<dt class="hdlist1"><a href="#fundamentals-successcodes">Success</a></dt>
<dd>
<div class="ulist">
<ul>
<li>
<p><code>VK_SUCCESS</code></p>
</li>
</ul>
</div>
</dd>
</dl>
</div>
</div>
</div>
</div>
<div class="sect3">
<h4 id="_see_also_305">See Also</h4>
<div class="paragraph">
<p><a href="#VkAllocationCallbacks">VkAllocationCallbacks</a>, <a href="#VkDevice">VkDevice</a>, <a href="#VkDisplayEventInfoEXT">VkDisplayEventInfoEXT</a>, <a href="#VkDisplayKHR">VkDisplayKHR</a>, <a href="#VkFence">VkFence</a></p>
</div>
</div>
<div class="sect3">
<h4 id="_document_notes_305">Document Notes</h4>
<div class="paragraph">
<p>For more information, see the Vulkan Specification at URL</p>
</div>
<div class="paragraph">
<p><a href="https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#vkRegisterDisplayEventEXT" class="bare">https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#vkRegisterDisplayEventEXT</a></p>
</div>
<div class="paragraph">
<p>This page is extracted from the Vulkan Specification.
Fixes and changes should be made to the Specification, not directly.</p>
</div>
<div style="page-break-after: always;"></div>
</div>
</div>
<div class="sect2">
<h3 id="_vkregisterobjectsnvx3">vkRegisterObjectsNVX(3)</h3>
<div class="sect3">
<h4 id="_name_306">Name</h4>
<div class="paragraph">
<p>vkRegisterObjectsNVX - Register resource bindings in an object table</p>
</div>
</div>
<div class="sect3">
<h4 id="_c_specification_306">C Specification</h4>
<div class="paragraph">
<p>Resource bindings of Vulkan objects are registered at an arbitrary
<code>uint32_t</code> index within an object table.
As long as the object table references such objects, they <strong class="purple">must</strong> not be
deleted.</p>
</div>
<div id="vkRegisterObjectsNVX" class="listingblock">
<div class="content">
<pre class="highlight"><code class="language-c++" data-lang="c++">VkResult vkRegisterObjectsNVX(
    VkDevice                                    device,
    VkObjectTableNVX                            objectTable,
    uint32_t                                    objectCount,
    const VkObjectTableEntryNVX* const*         ppObjectTableEntries,
    const uint32_t*                             pObjectIndices);</code></pre>
</div>
</div>
</div>
<div class="sect3">
<h4 id="_parameters_306">Parameters</h4>
<div class="ulist">
<ul>
<li>
<p><code>device</code> is the logical device that creates the object table.</p>
</li>
<li>
<p><code>objectTable</code> is the table for which the resources are registered.</p>
</li>
<li>
<p><code>objectCount</code> is the number of resources to register.</p>
</li>
<li>
<p><code>ppObjectTableEntries</code> provides an array for detailed binding
informations, each array element is a pointer to a struct of type
<code>VkObjectTablePipelineEntryNVX</code>,
<code>VkObjectTableDescriptorSetEntryNVX</code>,
<code>VkObjectTableVertexBufferEntryNVX</code>,
<code>VkObjectTableIndexBufferEntryNVX</code> or
<code>VkObjectTablePushConstantEntryNVX</code> (see below for details).</p>
</li>
<li>
<p><code>pObjectIndices</code> are the indices at which each resource is
registered.</p>
</li>
</ul>
</div>
</div>
<div class="sect3">
<h4 id="_description_306">Description</h4>
<div class="sidebarblock">
<div class="content">
<div class="title">Valid Usage</div>
<div class="ulist">
<ul>
<li>
<p><a id="VUID-vkRegisterObjectsNVX-pObjectTableEntry-01364"></a>
The contents of <code>pObjectTableEntry</code> <strong class="purple">must</strong> yield plausible bindings
supported by the device.</p>
</li>
<li>
<p><a id="VUID-vkRegisterObjectsNVX-pObjectIndices-01365"></a>
At any <code>pObjectIndices</code> there <strong class="purple">must</strong> not be a registered resource
already.</p>
</li>
<li>
<p><a id="VUID-vkRegisterObjectsNVX-pObjectIndices-01366"></a>
Any value inside <code>pObjectIndices</code> <strong class="purple">must</strong> be below the appropriate
<code>VkObjectTableCreateInfoNVX</code>::<code>pObjectEntryCounts</code> limits
provided at <code>objectTable</code> creation time.</p>
</li>
</ul>
</div>
</div>
</div>
<div class="sidebarblock">
<div class="content">
<div class="title">Valid Usage (Implicit)</div>
<div class="ulist">
<ul>
<li>
<p><a id="VUID-vkRegisterObjectsNVX-device-parameter"></a> <code>device</code> <strong class="purple">must</strong> be a valid <code>VkDevice</code> handle</p>
</li>
<li>
<p><a id="VUID-vkRegisterObjectsNVX-objectTable-parameter"></a> <code>objectTable</code> <strong class="purple">must</strong> be a valid <code>VkObjectTableNVX</code> handle</p>
</li>
<li>
<p><a id="VUID-vkRegisterObjectsNVX-ppObjectTableEntries-parameter"></a> <code>ppObjectTableEntries</code> <strong class="purple">must</strong> be a valid pointer to an array of <code>objectCount</code> valid <code>VkObjectTableEntryNVX</code> structures</p>
</li>
<li>
<p><a id="VUID-vkRegisterObjectsNVX-pObjectIndices-parameter"></a> <code>pObjectIndices</code> <strong class="purple">must</strong> be a valid pointer to an array of <code>objectCount</code> <code>uint32_t</code> values</p>
</li>
<li>
<p><a id="VUID-vkRegisterObjectsNVX-objectCount-arraylength"></a> <code>objectCount</code> <strong class="purple">must</strong> be greater than <code>0</code></p>
</li>
<li>
<p><a id="VUID-vkRegisterObjectsNVX-objectTable-parent"></a> <code>objectTable</code> <strong class="purple">must</strong> have been created, allocated, or retrieved from <code>device</code></p>
</li>
</ul>
</div>
</div>
</div>
<div class="sidebarblock">
<div class="content">
<div class="title">Host Synchronization</div>
<div class="ulist">
<ul>
<li>
<p>Host access to <code>objectTable</code> <strong class="purple">must</strong> be externally synchronized</p>
</li>
</ul>
</div>
</div>
</div>
<div class="sidebarblock">
<div class="content">
<div class="title">Return Codes</div>
<div class="dlist">
<dl>
<dt class="hdlist1"><a href="#fundamentals-successcodes">Success</a></dt>
<dd>
<div class="ulist">
<ul>
<li>
<p><code>VK_SUCCESS</code></p>
</li>
</ul>
</div>
</dd>
<dt class="hdlist1"><a href="#fundamentals-errorcodes">Failure</a></dt>
<dd>
<div class="ulist">
<ul>
<li>
<p><code>VK_ERROR_OUT_OF_HOST_MEMORY</code></p>
</li>
<li>
<p><code>VK_ERROR_OUT_OF_DEVICE_MEMORY</code></p>
</li>
</ul>
</div>
</dd>
</dl>
</div>
</div>
</div>
</div>
<div class="sect3">
<h4 id="_see_also_306">See Also</h4>
<div class="paragraph">
<p><a href="#VkDevice">VkDevice</a>, <a href="#VkObjectTableEntryNVX">VkObjectTableEntryNVX</a>, <a href="#VkObjectTableNVX">VkObjectTableNVX</a></p>
</div>
</div>
<div class="sect3">
<h4 id="_document_notes_306">Document Notes</h4>
<div class="paragraph">
<p>For more information, see the Vulkan Specification at URL</p>
</div>
<div class="paragraph">
<p><a href="https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#vkRegisterObjectsNVX" class="bare">https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#vkRegisterObjectsNVX</a></p>
</div>
<div class="paragraph">
<p>This page is extracted from the Vulkan Specification.
Fixes and changes should be made to the Specification, not directly.</p>
</div>
<div style="page-break-after: always;"></div>
</div>
</div>
<div class="sect2">
<h3 id="_vkreleasedisplayext3">vkReleaseDisplayEXT(3)</h3>
<div class="sect3">
<h4 id="_name_307">Name</h4>
<div class="paragraph">
<p>vkReleaseDisplayEXT - Release access to an acquired VkDisplayKHR</p>
</div>
</div>
<div class="sect3">
<h4 id="_c_specification_307">C Specification</h4>
<div class="paragraph">
<p>To release a previously acquired display, call:</p>
</div>
<div id="vkReleaseDisplayEXT" class="listingblock">
<div class="content">
<pre class="highlight"><code class="language-c++" data-lang="c++">VkResult vkReleaseDisplayEXT(
    VkPhysicalDevice                            physicalDevice,
    VkDisplayKHR                                display);</code></pre>
</div>
</div>
</div>
<div class="sect3">
<h4 id="_parameters_307">Parameters</h4>
<div class="ulist">
<ul>
<li>
<p><code>physicalDevice</code> The physical device the display is on.</p>
</li>
<li>
<p><code>display</code> The display to release control of.</p>
</li>
</ul>
</div>
</div>
<div class="sect3">
<h4 id="_description_307">Description</h4>
<div class="sidebarblock">
<div class="content">
<div class="title">Valid Usage (Implicit)</div>
<div class="ulist">
<ul>
<li>
<p><a id="VUID-vkReleaseDisplayEXT-physicalDevice-parameter"></a> <code>physicalDevice</code> <strong class="purple">must</strong> be a valid <code>VkPhysicalDevice</code> handle</p>
</li>
<li>
<p><a id="VUID-vkReleaseDisplayEXT-display-parameter"></a> <code>display</code> <strong class="purple">must</strong> be a valid <code>VkDisplayKHR</code> handle</p>
</li>
</ul>
</div>
</div>
</div>
<div class="sidebarblock">
<div class="content">
<div class="title">Return Codes</div>
<div class="dlist">
<dl>
<dt class="hdlist1"><a href="#fundamentals-successcodes">Success</a></dt>
<dd>
<div class="ulist">
<ul>
<li>
<p><code>VK_SUCCESS</code></p>
</li>
</ul>
</div>
</dd>
</dl>
</div>
</div>
</div>
</div>
<div class="sect3">
<h4 id="_see_also_307">See Also</h4>
<div class="paragraph">
<p><a href="#VkDisplayKHR">VkDisplayKHR</a>, <a href="#VkPhysicalDevice">VkPhysicalDevice</a></p>
</div>
</div>
<div class="sect3">
<h4 id="_document_notes_307">Document Notes</h4>
<div class="paragraph">
<p>For more information, see the Vulkan Specification at URL</p>
</div>
<div class="paragraph">
<p><a href="https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#vkReleaseDisplayEXT" class="bare">https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#vkReleaseDisplayEXT</a></p>
</div>
<div class="paragraph">
<p>This page is extracted from the Vulkan Specification.
Fixes and changes should be made to the Specification, not directly.</p>
</div>
<div style="page-break-after: always;"></div>
</div>
</div>
<div class="sect2">
<h3 id="_vkreleasefullscreenexclusivemodeext3">vkReleaseFullScreenExclusiveModeEXT(3)</h3>
<div class="sect3">
<h4 id="_name_308">Name</h4>
<div class="paragraph">
<p>vkReleaseFullScreenExclusiveModeEXT - Release full-screen exclusive mode from a swapchain</p>
</div>
</div>
<div class="sect3">
<h4 id="_c_specification_308">C Specification</h4>
<div class="paragraph">
<p>To release exclusive full-screen access from a swapchain, call:</p>
</div>
<div id="vkReleaseFullScreenExclusiveModeEXT" class="listingblock">
<div class="content">
<pre class="highlight"><code class="language-c++" data-lang="c++">VkResult vkReleaseFullScreenExclusiveModeEXT(
    VkDevice                                    device,
    VkSwapchainKHR                              swapchain);</code></pre>
</div>
</div>
</div>
<div class="sect3">
<h4 id="_parameters_308">Parameters</h4>
<div class="ulist">
<ul>
<li>
<p><code>device</code> is the device associated with <code>swapchain</code>.</p>
</li>
<li>
<p><code>swapchain</code> is the swapchain to release exclusive full-screen access
from.</p>
</li>
</ul>
</div>
</div>
<div class="sect3">
<h4 id="_description_308">Description</h4>
<div class="admonitionblock note">
<table>
<tr>
<td class="icon">
<i class="fa icon-note" title="Note"></i>
</td>
<td class="content">
<div class="title">Note</div>
<div class="paragraph">
<p>Applications will not be able to present to <code>swapchain</code> after this call
until exclusive full-screen access is reacquired.
This is usually useful to handle when an application is minimised or
otherwise intends to stop presenting for a time.</p>
</div>
</td>
</tr>
</table>
</div>
<div class="sidebarblock">
<div class="content">
<div class="title">Valid Usage</div>
<div class="ulist">
<ul>
<li>
<p><a id="VUID-vkReleaseFullScreenExclusiveModeEXT-swapchain-02677"></a>
<code>swapchain</code> <strong class="purple">must</strong> not be in the retired state</p>
</li>
<li>
<p><a id="VUID-vkReleaseFullScreenExclusiveModeEXT-swapchain-02678"></a>
<code>swapchain</code> <strong class="purple">must</strong> be a swapchain created with an instance of
<a href="#VkSurfaceFullScreenExclusiveInfoEXT">VkSurfaceFullScreenExclusiveInfoEXT</a>, with
<code>fullScreenExclusive</code> set to
<code>VK_FULL_SCREEN_EXCLUSIVE_APPLICATION_CONTROLLED_EXT</code></p>
</li>
</ul>
</div>
</div>
</div>
</div>
<div class="sect3">
<h4 id="_see_also_308">See Also</h4>
<div class="paragraph">
<p><a href="#VkDevice">VkDevice</a>, <a href="#VkSwapchainKHR">VkSwapchainKHR</a></p>
</div>
</div>
<div class="sect3">
<h4 id="_document_notes_308">Document Notes</h4>
<div class="paragraph">
<p>For more information, see the Vulkan Specification at URL</p>
</div>
<div class="paragraph">
<p><a href="https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#vkReleaseFullScreenExclusiveModeEXT" class="bare">https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#vkReleaseFullScreenExclusiveModeEXT</a></p>
</div>
<div class="paragraph">
<p>This page is extracted from the Vulkan Specification.
Fixes and changes should be made to the Specification, not directly.</p>
</div>
<div style="page-break-after: always;"></div>
</div>
</div>
<div class="sect2">
<h3 id="_vkresetcommandbuffer3">vkResetCommandBuffer(3)</h3>
<div class="sect3">
<h4 id="_name_309">Name</h4>
<div class="paragraph">
<p>vkResetCommandBuffer - Reset a command buffer to the initial state</p>
</div>
</div>
<div class="sect3">
<h4 id="_c_specification_309">C Specification</h4>
<div class="paragraph">
<p>To reset command buffers, call:</p>
</div>
<div id="vkResetCommandBuffer" class="listingblock">
<div class="content">
<pre class="highlight"><code class="language-c++" data-lang="c++">VkResult vkResetCommandBuffer(
    VkCommandBuffer                             commandBuffer,
    VkCommandBufferResetFlags                   flags);</code></pre>
</div>
</div>
</div>
<div class="sect3">
<h4 id="_parameters_309">Parameters</h4>
<div class="ulist">
<ul>
<li>
<p><code>commandBuffer</code> is the command buffer to reset.
The command buffer <strong class="purple">can</strong> be in any state other than
<a href="vkspec.html#commandbuffers-lifecycle">pending</a>, and is moved into the
<a href="vkspec.html#commandbuffers-lifecycle">initial state</a>.</p>
</li>
<li>
<p><code>flags</code> is a bitmask of <a href="#VkCommandBufferResetFlagBits">VkCommandBufferResetFlagBits</a>
controlling the reset operation.</p>
</li>
</ul>
</div>
</div>
<div class="sect3">
<h4 id="_description_309">Description</h4>
<div class="paragraph">
<p>Any primary command buffer that is in the <a href="vkspec.html#commandbuffers-lifecycle">recording or executable state</a> and has <code>commandBuffer</code> recorded into
it, becomes <a href="vkspec.html#commandbuffers-lifecycle">invalid</a>.</p>
</div>
<div class="sidebarblock">
<div class="content">
<div class="title">Valid Usage</div>
<div class="ulist">
<ul>
<li>
<p><a id="VUID-vkResetCommandBuffer-commandBuffer-00045"></a>
<code>commandBuffer</code> <strong class="purple">must</strong> not be in the <a href="vkspec.html#commandbuffers-lifecycle">pending state</a></p>
</li>
<li>
<p><a id="VUID-vkResetCommandBuffer-commandBuffer-00046"></a>
<code>commandBuffer</code> <strong class="purple">must</strong> have been allocated from a pool that was
created with the <code>VK_COMMAND_POOL_CREATE_RESET_COMMAND_BUFFER_BIT</code></p>
</li>
</ul>
</div>
</div>
</div>
<div class="sidebarblock">
<div class="content">
<div class="title">Valid Usage (Implicit)</div>
<div class="ulist">
<ul>
<li>
<p><a id="VUID-vkResetCommandBuffer-commandBuffer-parameter"></a> <code>commandBuffer</code> <strong class="purple">must</strong> be a valid <code>VkCommandBuffer</code> handle</p>
</li>
<li>
<p><a id="VUID-vkResetCommandBuffer-flags-parameter"></a> <code>flags</code> <strong class="purple">must</strong> be a valid combination of <a href="#VkCommandBufferResetFlagBits">VkCommandBufferResetFlagBits</a> values</p>
</li>
</ul>
</div>
</div>
</div>
<div class="sidebarblock">
<div class="content">
<div class="title">Host Synchronization</div>
<div class="ulist">
<ul>
<li>
<p>Host access to <code>commandBuffer</code> <strong class="purple">must</strong> be externally synchronized</p>
</li>
</ul>
</div>
</div>
</div>
<div class="sidebarblock">
<div class="content">
<div class="title">Return Codes</div>
<div class="dlist">
<dl>
<dt class="hdlist1"><a href="#fundamentals-successcodes">Success</a></dt>
<dd>
<div class="ulist">
<ul>
<li>
<p><code>VK_SUCCESS</code></p>
</li>
</ul>
</div>
</dd>
<dt class="hdlist1"><a href="#fundamentals-errorcodes">Failure</a></dt>
<dd>
<div class="ulist">
<ul>
<li>
<p><code>VK_ERROR_OUT_OF_HOST_MEMORY</code></p>
</li>
<li>
<p><code>VK_ERROR_OUT_OF_DEVICE_MEMORY</code></p>
</li>
</ul>
</div>
</dd>
</dl>
</div>
</div>
</div>
</div>
<div class="sect3">
<h4 id="_see_also_309">See Also</h4>
<div class="paragraph">
<p><a href="#VkCommandBuffer">VkCommandBuffer</a>, <a href="#VkCommandBufferResetFlags">VkCommandBufferResetFlags</a></p>
</div>
</div>
<div class="sect3">
<h4 id="_document_notes_309">Document Notes</h4>
<div class="paragraph">
<p>For more information, see the Vulkan Specification at URL</p>
</div>
<div class="paragraph">
<p><a href="https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#vkResetCommandBuffer" class="bare">https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#vkResetCommandBuffer</a></p>
</div>
<div class="paragraph">
<p>This page is extracted from the Vulkan Specification.
Fixes and changes should be made to the Specification, not directly.</p>
</div>
<div style="page-break-after: always;"></div>
</div>
</div>
<div class="sect2">
<h3 id="_vkresetcommandpool3">vkResetCommandPool(3)</h3>
<div class="sect3">
<h4 id="_name_310">Name</h4>
<div class="paragraph">
<p>vkResetCommandPool - Reset a command pool</p>
</div>
</div>
<div class="sect3">
<h4 id="_c_specification_310">C Specification</h4>
<div class="paragraph">
<p>To reset a command pool, call:</p>
</div>
<div id="vkResetCommandPool" class="listingblock">
<div class="content">
<pre class="highlight"><code class="language-c++" data-lang="c++">VkResult vkResetCommandPool(
    VkDevice                                    device,
    VkCommandPool                               commandPool,
    VkCommandPoolResetFlags                     flags);</code></pre>
</div>
</div>
</div>
<div class="sect3">
<h4 id="_parameters_310">Parameters</h4>
<div class="ulist">
<ul>
<li>
<p><code>device</code> is the logical device that owns the command pool.</p>
</li>
<li>
<p><code>commandPool</code> is the command pool to reset.</p>
</li>
<li>
<p><code>flags</code> is a bitmask of <a href="#VkCommandPoolResetFlagBits">VkCommandPoolResetFlagBits</a> controlling
the reset operation.</p>
</li>
</ul>
</div>
</div>
<div class="sect3">
<h4 id="_description_310">Description</h4>
<div class="paragraph">
<p>Resetting a command pool recycles all of the resources from all of the
command buffers allocated from the command pool back to the command pool.
All command buffers that have been allocated from the command pool are put
in the <a href="vkspec.html#commandbuffers-lifecycle">initial state</a>.</p>
</div>
<div class="paragraph">
<p>Any primary command buffer allocated from another <a href="#VkCommandPool">VkCommandPool</a> that
is in the <a href="vkspec.html#commandbuffers-lifecycle">recording or executable state</a> and
has a secondary command buffer allocated from <code>commandPool</code> recorded
into it, becomes <a href="vkspec.html#commandbuffers-lifecycle">invalid</a>.</p>
</div>
<div class="sidebarblock">
<div class="content">
<div class="title">Valid Usage</div>
<div class="ulist">
<ul>
<li>
<p><a id="VUID-vkResetCommandPool-commandPool-00040"></a>
All <code>VkCommandBuffer</code> objects allocated from <code>commandPool</code> <strong class="purple">must</strong>
not be in the <a href="vkspec.html#commandbuffers-lifecycle">pending state</a></p>
</li>
</ul>
</div>
</div>
</div>
<div class="sidebarblock">
<div class="content">
<div class="title">Valid Usage (Implicit)</div>
<div class="ulist">
<ul>
<li>
<p><a id="VUID-vkResetCommandPool-device-parameter"></a> <code>device</code> <strong class="purple">must</strong> be a valid <code>VkDevice</code> handle</p>
</li>
<li>
<p><a id="VUID-vkResetCommandPool-commandPool-parameter"></a> <code>commandPool</code> <strong class="purple">must</strong> be a valid <code>VkCommandPool</code> handle</p>
</li>
<li>
<p><a id="VUID-vkResetCommandPool-flags-parameter"></a> <code>flags</code> <strong class="purple">must</strong> be a valid combination of <a href="#VkCommandPoolResetFlagBits">VkCommandPoolResetFlagBits</a> values</p>
</li>
<li>
<p><a id="VUID-vkResetCommandPool-commandPool-parent"></a> <code>commandPool</code> <strong class="purple">must</strong> have been created, allocated, or retrieved from <code>device</code></p>
</li>
</ul>
</div>
</div>
</div>
<div class="sidebarblock">
<div class="content">
<div class="title">Host Synchronization</div>
<div class="ulist">
<ul>
<li>
<p>Host access to <code>commandPool</code> <strong class="purple">must</strong> be externally synchronized</p>
</li>
</ul>
</div>
</div>
</div>
<div class="sidebarblock">
<div class="content">
<div class="title">Return Codes</div>
<div class="dlist">
<dl>
<dt class="hdlist1"><a href="#fundamentals-successcodes">Success</a></dt>
<dd>
<div class="ulist">
<ul>
<li>
<p><code>VK_SUCCESS</code></p>
</li>
</ul>
</div>
</dd>
<dt class="hdlist1"><a href="#fundamentals-errorcodes">Failure</a></dt>
<dd>
<div class="ulist">
<ul>
<li>
<p><code>VK_ERROR_OUT_OF_HOST_MEMORY</code></p>
</li>
<li>
<p><code>VK_ERROR_OUT_OF_DEVICE_MEMORY</code></p>
</li>
</ul>
</div>
</dd>
</dl>
</div>
</div>
</div>
</div>
<div class="sect3">
<h4 id="_see_also_310">See Also</h4>
<div class="paragraph">
<p><a href="#VkCommandPool">VkCommandPool</a>, <a href="#VkCommandPoolResetFlags">VkCommandPoolResetFlags</a>, <a href="#VkDevice">VkDevice</a></p>
</div>
</div>
<div class="sect3">
<h4 id="_document_notes_310">Document Notes</h4>
<div class="paragraph">
<p>For more information, see the Vulkan Specification at URL</p>
</div>
<div class="paragraph">
<p><a href="https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#vkResetCommandPool" class="bare">https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#vkResetCommandPool</a></p>
</div>
<div class="paragraph">
<p>This page is extracted from the Vulkan Specification.
Fixes and changes should be made to the Specification, not directly.</p>
</div>
<div style="page-break-after: always;"></div>
</div>
</div>
<div class="sect2">
<h3 id="_vkresetdescriptorpool3">vkResetDescriptorPool(3)</h3>
<div class="sect3">
<h4 id="_name_311">Name</h4>
<div class="paragraph">
<p>vkResetDescriptorPool - Resets a descriptor pool object</p>
</div>
</div>
<div class="sect3">
<h4 id="_c_specification_311">C Specification</h4>
<div class="paragraph">
<p>To return all descriptor sets allocated from a given pool to the pool,
rather than freeing individual descriptor sets, call:</p>
</div>
<div id="vkResetDescriptorPool" class="listingblock">
<div class="content">
<pre class="highlight"><code class="language-c++" data-lang="c++">VkResult vkResetDescriptorPool(
    VkDevice                                    device,
    VkDescriptorPool                            descriptorPool,
    VkDescriptorPoolResetFlags                  flags);</code></pre>
</div>
</div>
</div>
<div class="sect3">
<h4 id="_parameters_311">Parameters</h4>
<div class="ulist">
<ul>
<li>
<p><code>device</code> is the logical device that owns the descriptor pool.</p>
</li>
<li>
<p><code>descriptorPool</code> is the descriptor pool to be reset.</p>
</li>
<li>
<p><code>flags</code> is reserved for future use.</p>
</li>
</ul>
</div>
</div>
<div class="sect3">
<h4 id="_description_311">Description</h4>
<div class="paragraph">
<p>Resetting a descriptor pool recycles all of the resources from all of the
descriptor sets allocated from the descriptor pool back to the descriptor
pool, and the descriptor sets are implicitly freed.</p>
</div>
<div class="sidebarblock">
<div class="content">
<div class="title">Valid Usage</div>
<div class="ulist">
<ul>
<li>
<p><a id="VUID-vkResetDescriptorPool-descriptorPool-00313"></a>
All uses of <code>descriptorPool</code> (via any allocated descriptor sets)
<strong class="purple">must</strong> have completed execution</p>
</li>
</ul>
</div>
</div>
</div>
<div class="sidebarblock">
<div class="content">
<div class="title">Valid Usage (Implicit)</div>
<div class="ulist">
<ul>
<li>
<p><a id="VUID-vkResetDescriptorPool-device-parameter"></a> <code>device</code> <strong class="purple">must</strong> be a valid <code>VkDevice</code> handle</p>
</li>
<li>
<p><a id="VUID-vkResetDescriptorPool-descriptorPool-parameter"></a> <code>descriptorPool</code> <strong class="purple">must</strong> be a valid <code>VkDescriptorPool</code> handle</p>
</li>
<li>
<p><a id="VUID-vkResetDescriptorPool-flags-zerobitmask"></a> <code>flags</code> <strong class="purple">must</strong> be <code>0</code></p>
</li>
<li>
<p><a id="VUID-vkResetDescriptorPool-descriptorPool-parent"></a> <code>descriptorPool</code> <strong class="purple">must</strong> have been created, allocated, or retrieved from <code>device</code></p>
</li>
</ul>
</div>
</div>
</div>
<div class="sidebarblock">
<div class="content">
<div class="title">Host Synchronization</div>
<div class="ulist">
<ul>
<li>
<p>Host access to <code>descriptorPool</code> <strong class="purple">must</strong> be externally synchronized</p>
</li>
<li>
<p>Host access to any <code>VkDescriptorSet</code> objects allocated from <code>descriptorPool</code> <strong class="purple">must</strong> be externally synchronized</p>
</li>
</ul>
</div>
</div>
</div>
<div class="sidebarblock">
<div class="content">
<div class="title">Return Codes</div>
<div class="dlist">
<dl>
<dt class="hdlist1"><a href="#fundamentals-successcodes">Success</a></dt>
<dd>
<div class="ulist">
<ul>
<li>
<p><code>VK_SUCCESS</code></p>
</li>
</ul>
</div>
</dd>
<dt class="hdlist1"><a href="#fundamentals-errorcodes">Failure</a></dt>
<dd>
<div class="ulist">
<ul>
<li>
<p><code>VK_ERROR_OUT_OF_HOST_MEMORY</code></p>
</li>
<li>
<p><code>VK_ERROR_OUT_OF_DEVICE_MEMORY</code></p>
</li>
</ul>
</div>
</dd>
</dl>
</div>
</div>
</div>
</div>
<div class="sect3">
<h4 id="_see_also_311">See Also</h4>
<div class="paragraph">
<p><a href="#VkDescriptorPool">VkDescriptorPool</a>, <a href="#VkDescriptorPoolResetFlags">VkDescriptorPoolResetFlags</a>, <a href="#VkDevice">VkDevice</a></p>
</div>
</div>
<div class="sect3">
<h4 id="_document_notes_311">Document Notes</h4>
<div class="paragraph">
<p>For more information, see the Vulkan Specification at URL</p>
</div>
<div class="paragraph">
<p><a href="https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#vkResetDescriptorPool" class="bare">https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#vkResetDescriptorPool</a></p>
</div>
<div class="paragraph">
<p>This page is extracted from the Vulkan Specification.
Fixes and changes should be made to the Specification, not directly.</p>
</div>
<div style="page-break-after: always;"></div>
</div>
</div>
<div class="sect2">
<h3 id="_vkresetevent3">vkResetEvent(3)</h3>
<div class="sect3">
<h4 id="_name_312">Name</h4>
<div class="paragraph">
<p>vkResetEvent - Reset an event to non-signaled state</p>
</div>
</div>
<div class="sect3">
<h4 id="_c_specification_312">C Specification</h4>
<div class="paragraph">
<p>To set the state of an event to unsignaled from the host, call:</p>
</div>
<div id="vkResetEvent" class="listingblock">
<div class="content">
<pre class="highlight"><code class="language-c++" data-lang="c++">VkResult vkResetEvent(
    VkDevice                                    device,
    VkEvent                                     event);</code></pre>
</div>
</div>
</div>
<div class="sect3">
<h4 id="_parameters_312">Parameters</h4>
<div class="ulist">
<ul>
<li>
<p><code>device</code> is the logical device that owns the event.</p>
</li>
<li>
<p><code>event</code> is the event to reset.</p>
</li>
</ul>
</div>
</div>
<div class="sect3">
<h4 id="_description_312">Description</h4>
<div class="paragraph">
<p>When <a href="#vkResetEvent">vkResetEvent</a> is executed on the host, it defines an <em>event
unsignal operation</em> which resets the event to the unsignaled state.</p>
</div>
<div class="paragraph">
<p>If <code>event</code> is already in the unsignaled state when <a href="#vkResetEvent">vkResetEvent</a> is
executed, then <a href="#vkResetEvent">vkResetEvent</a> has no effect, and no event unsignal
operation occurs.</p>
</div>
<div class="sidebarblock">
<div class="content">
<div class="title">Valid Usage</div>
<div class="ulist">
<ul>
<li>
<p><a id="VUID-vkResetEvent-event-01148"></a>
<code>event</code> <strong class="purple">must</strong> not be waited on by a <code>vkCmdWaitEvents</code> command
that is currently executing</p>
</li>
</ul>
</div>
</div>
</div>
<div class="sidebarblock">
<div class="content">
<div class="title">Valid Usage (Implicit)</div>
<div class="ulist">
<ul>
<li>
<p><a id="VUID-vkResetEvent-device-parameter"></a> <code>device</code> <strong class="purple">must</strong> be a valid <code>VkDevice</code> handle</p>
</li>
<li>
<p><a id="VUID-vkResetEvent-event-parameter"></a> <code>event</code> <strong class="purple">must</strong> be a valid <code>VkEvent</code> handle</p>
</li>
<li>
<p><a id="VUID-vkResetEvent-event-parent"></a> <code>event</code> <strong class="purple">must</strong> have been created, allocated, or retrieved from <code>device</code></p>
</li>
</ul>
</div>
</div>
</div>
<div class="sidebarblock">
<div class="content">
<div class="title">Host Synchronization</div>
<div class="ulist">
<ul>
<li>
<p>Host access to <code>event</code> <strong class="purple">must</strong> be externally synchronized</p>
</li>
</ul>
</div>
</div>
</div>
<div class="sidebarblock">
<div class="content">
<div class="title">Return Codes</div>
<div class="dlist">
<dl>
<dt class="hdlist1"><a href="#fundamentals-successcodes">Success</a></dt>
<dd>
<div class="ulist">
<ul>
<li>
<p><code>VK_SUCCESS</code></p>
</li>
</ul>
</div>
</dd>
<dt class="hdlist1"><a href="#fundamentals-errorcodes">Failure</a></dt>
<dd>
<div class="ulist">
<ul>
<li>
<p><code>VK_ERROR_OUT_OF_HOST_MEMORY</code></p>
</li>
<li>
<p><code>VK_ERROR_OUT_OF_DEVICE_MEMORY</code></p>
</li>
</ul>
</div>
</dd>
</dl>
</div>
</div>
</div>
</div>
<div class="sect3">
<h4 id="_see_also_312">See Also</h4>
<div class="paragraph">
<p><a href="#VkDevice">VkDevice</a>, <a href="#VkEvent">VkEvent</a></p>
</div>
</div>
<div class="sect3">
<h4 id="_document_notes_312">Document Notes</h4>
<div class="paragraph">
<p>For more information, see the Vulkan Specification at URL</p>
</div>
<div class="paragraph">
<p><a href="https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#vkResetEvent" class="bare">https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#vkResetEvent</a></p>
</div>
<div class="paragraph">
<p>This page is extracted from the Vulkan Specification.
Fixes and changes should be made to the Specification, not directly.</p>
</div>
<div style="page-break-after: always;"></div>
</div>
</div>
<div class="sect2">
<h3 id="_vkresetfences3">vkResetFences(3)</h3>
<div class="sect3">
<h4 id="_name_313">Name</h4>
<div class="paragraph">
<p>vkResetFences - Resets one or more fence objects</p>
</div>
</div>
<div class="sect3">
<h4 id="_c_specification_313">C Specification</h4>
<div class="paragraph">
<p>To set the state of fences to unsignaled from the host, call:</p>
</div>
<div id="vkResetFences" class="listingblock">
<div class="content">
<pre class="highlight"><code class="language-c++" data-lang="c++">VkResult vkResetFences(
    VkDevice                                    device,
    uint32_t                                    fenceCount,
    const VkFence*                              pFences);</code></pre>
</div>
</div>
</div>
<div class="sect3">
<h4 id="_parameters_313">Parameters</h4>
<div class="ulist">
<ul>
<li>
<p><code>device</code> is the logical device that owns the fences.</p>
</li>
<li>
<p><code>fenceCount</code> is the number of fences to reset.</p>
</li>
<li>
<p><code>pFences</code> is a pointer to an array of fence handles to reset.</p>
</li>
</ul>
</div>
</div>
<div class="sect3">
<h4 id="_description_313">Description</h4>
<div class="paragraph">
<p>If any member of <code>pFences</code> currently has its
<a href="vkspec.html#synchronization-fences-importing">payload imported</a> with temporary
permanence, that fence&#8217;s prior permanent payload is first restored.
The remaining operations described therefore operate on the restored
payload.</p>
</div>
<div class="paragraph">
<p>When <a href="#vkResetFences">vkResetFences</a> is executed on the host, it defines a <em>fence
unsignal operation</em> for each fence, which resets the fence to the unsignaled
state.</p>
</div>
<div class="paragraph">
<p>If any member of <code>pFences</code> is already in the unsignaled state when
<a href="#vkResetFences">vkResetFences</a> is executed, then <a href="#vkResetFences">vkResetFences</a> has no effect on
that fence.</p>
</div>
<div class="sidebarblock">
<div class="content">
<div class="title">Valid Usage</div>
<div class="ulist">
<ul>
<li>
<p><a id="VUID-vkResetFences-pFences-01123"></a>
Each element of <code>pFences</code> <strong class="purple">must</strong> not be currently associated with any
queue command that has not yet completed execution on that queue</p>
</li>
</ul>
</div>
</div>
</div>
<div class="sidebarblock">
<div class="content">
<div class="title">Valid Usage (Implicit)</div>
<div class="ulist">
<ul>
<li>
<p><a id="VUID-vkResetFences-device-parameter"></a> <code>device</code> <strong class="purple">must</strong> be a valid <code>VkDevice</code> handle</p>
</li>
<li>
<p><a id="VUID-vkResetFences-pFences-parameter"></a> <code>pFences</code> <strong class="purple">must</strong> be a valid pointer to an array of <code>fenceCount</code> valid <code>VkFence</code> handles</p>
</li>
<li>
<p><a id="VUID-vkResetFences-fenceCount-arraylength"></a> <code>fenceCount</code> <strong class="purple">must</strong> be greater than <code>0</code></p>
</li>
<li>
<p><a id="VUID-vkResetFences-pFences-parent"></a> Each element of <code>pFences</code> <strong class="purple">must</strong> have been created, allocated, or retrieved from <code>device</code></p>
</li>
</ul>
</div>
</div>
</div>
<div class="sidebarblock">
<div class="content">
<div class="title">Host Synchronization</div>
<div class="ulist">
<ul>
<li>
<p>Host access to each member of <code>pFences</code> <strong class="purple">must</strong> be externally synchronized</p>
</li>
</ul>
</div>
</div>
</div>
<div class="sidebarblock">
<div class="content">
<div class="title">Return Codes</div>
<div class="dlist">
<dl>
<dt class="hdlist1"><a href="#fundamentals-successcodes">Success</a></dt>
<dd>
<div class="ulist">
<ul>
<li>
<p><code>VK_SUCCESS</code></p>
</li>
</ul>
</div>
</dd>
<dt class="hdlist1"><a href="#fundamentals-errorcodes">Failure</a></dt>
<dd>
<div class="ulist">
<ul>
<li>
<p><code>VK_ERROR_OUT_OF_HOST_MEMORY</code></p>
</li>
<li>
<p><code>VK_ERROR_OUT_OF_DEVICE_MEMORY</code></p>
</li>
</ul>
</div>
</dd>
</dl>
</div>
</div>
</div>
</div>
<div class="sect3">
<h4 id="_see_also_313">See Also</h4>
<div class="paragraph">
<p><a href="#VkDevice">VkDevice</a>, <a href="#VkFence">VkFence</a></p>
</div>
</div>
<div class="sect3">
<h4 id="_document_notes_313">Document Notes</h4>
<div class="paragraph">
<p>For more information, see the Vulkan Specification at URL</p>
</div>
<div class="paragraph">
<p><a href="https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#vkResetFences" class="bare">https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#vkResetFences</a></p>
</div>
<div class="paragraph">
<p>This page is extracted from the Vulkan Specification.
Fixes and changes should be made to the Specification, not directly.</p>
</div>
<div style="page-break-after: always;"></div>
</div>
</div>
<div class="sect2">
<h3 id="_vkresetquerypoolext3">vkResetQueryPoolEXT(3)</h3>
<div class="sect3">
<h4 id="_name_314">Name</h4>
<div class="paragraph">
<p>vkResetQueryPoolEXT - Reset queries in a query pool</p>
</div>
</div>
<div class="sect3">
<h4 id="_c_specification_314">C Specification</h4>
<div class="paragraph">
<p>To reset a range of queries in a query pool on the host, call:</p>
</div>
<div id="vkResetQueryPoolEXT" class="listingblock">
<div class="content">
<pre class="highlight"><code class="language-c++" data-lang="c++">void vkResetQueryPoolEXT(
    VkDevice                                    device,
    VkQueryPool                                 queryPool,
    uint32_t                                    firstQuery,
    uint32_t                                    queryCount);</code></pre>
</div>
</div>
</div>
<div class="sect3">
<h4 id="_parameters_314">Parameters</h4>
<div class="ulist">
<ul>
<li>
<p><code>queryPool</code> is the handle of the query pool managing the queries
being reset.</p>
</li>
<li>
<p><code>firstQuery</code> is the initial query index to reset.</p>
</li>
<li>
<p><code>queryCount</code> is the number of queries to reset.</p>
</li>
</ul>
</div>
</div>
<div class="sect3">
<h4 id="_description_314">Description</h4>
<div class="paragraph">
<p>This command sets the status of query indices <span class="eq">[<code>firstQuery</code>,
<code>firstQuery</code> +  <code>queryCount</code> - 1]</span> to unavailable.</p>
</div>
<div class="sidebarblock">
<div class="content">
<div class="title">Valid Usage</div>
<div class="ulist">
<ul>
<li>
<p><a id="VUID-vkResetQueryPoolEXT-None-02665"></a>
The <a href="vkspec.html#features-hostQueryReset">hostQueryReset</a> feature <strong class="purple">must</strong> be enabled</p>
</li>
<li>
<p><a id="VUID-vkResetQueryPoolEXT-firstQuery-02666"></a>
<code>firstQuery</code> <strong class="purple">must</strong> be less than the number of queries in
<code>queryPool</code></p>
</li>
<li>
<p><a id="VUID-vkResetQueryPoolEXT-firstQuery-02667"></a>
The sum of <code>firstQuery</code> and <code>queryCount</code> <strong class="purple">must</strong> be less than or
equal to the number of queries in <code>queryPool</code></p>
</li>
</ul>
</div>
</div>
</div>
<div class="sidebarblock">
<div class="content">
<div class="title">Valid Usage (Implicit)</div>
<div class="ulist">
<ul>
<li>
<p><a id="VUID-vkResetQueryPoolEXT-device-parameter"></a> <code>device</code> <strong class="purple">must</strong> be a valid <code>VkDevice</code> handle</p>
</li>
<li>
<p><a id="VUID-vkResetQueryPoolEXT-queryPool-parameter"></a> <code>queryPool</code> <strong class="purple">must</strong> be a valid <code>VkQueryPool</code> handle</p>
</li>
<li>
<p><a id="VUID-vkResetQueryPoolEXT-queryPool-parent"></a> <code>queryPool</code> <strong class="purple">must</strong> have been created, allocated, or retrieved from <code>device</code></p>
</li>
</ul>
</div>
</div>
</div>
</div>
<div class="sect3">
<h4 id="_see_also_314">See Also</h4>
<div class="paragraph">
<p><a href="#VkDevice">VkDevice</a>, <a href="#VkQueryPool">VkQueryPool</a></p>
</div>
</div>
<div class="sect3">
<h4 id="_document_notes_314">Document Notes</h4>
<div class="paragraph">
<p>For more information, see the Vulkan Specification at URL</p>
</div>
<div class="paragraph">
<p><a href="https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#vkResetQueryPoolEXT" class="bare">https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#vkResetQueryPoolEXT</a></p>
</div>
<div class="paragraph">
<p>This page is extracted from the Vulkan Specification.
Fixes and changes should be made to the Specification, not directly.</p>
</div>
<div style="page-break-after: always;"></div>
</div>
</div>
<div class="sect2">
<h3 id="_vksetdebugutilsobjectnameext3">vkSetDebugUtilsObjectNameEXT(3)</h3>
<div class="sect3">
<h4 id="_name_315">Name</h4>
<div class="paragraph">
<p>vkSetDebugUtilsObjectNameEXT - Give a user-friendly name to an object</p>
</div>
</div>
<div class="sect3">
<h4 id="_c_specification_315">C Specification</h4>
<div id="vkSetDebugUtilsObjectNameEXT" class="listingblock">
<div class="content">
<pre class="highlight"><code class="language-c++" data-lang="c++">VkResult vkSetDebugUtilsObjectNameEXT(
    VkDevice                                    device,
    const VkDebugUtilsObjectNameInfoEXT*        pNameInfo);</code></pre>
</div>
</div>
</div>
<div class="sect3">
<h4 id="_parameters_315">Parameters</h4>
<div class="ulist">
<ul>
<li>
<p><code>device</code> is the device that created the object.</p>
</li>
<li>
<p><code>pNameInfo</code> is a pointer to an instance of the
<a href="#VkDebugUtilsObjectNameInfoEXT">VkDebugUtilsObjectNameInfoEXT</a> structure specifying the parameters
of the name to set on the object.</p>
</li>
</ul>
</div>
</div>
<div class="sect3">
<h4 id="_description_315">Description</h4>
<div class="sidebarblock">
<div class="content">
<div class="title">Valid Usage</div>
<div class="ulist">
<ul>
<li>
<p><a id="VUID-vkSetDebugUtilsObjectNameEXT-pNameInfo-02587"></a>
<code>pNameInfo</code>-&gt;<code>objectType</code> <strong class="purple">must</strong> not be
<code>VK_OBJECT_TYPE_UNKNOWN</code></p>
</li>
<li>
<p><a id="VUID-vkSetDebugUtilsObjectNameEXT-pNameInfo-02588"></a>
<code>pNameInfo</code>-&gt;<code>objectHandle</code> <strong class="purple">must</strong> not be <a href="#VK_NULL_HANDLE">VK_NULL_HANDLE</a></p>
</li>
</ul>
</div>
</div>
</div>
<div class="sidebarblock">
<div class="content">
<div class="title">Valid Usage (Implicit)</div>
<div class="ulist">
<ul>
<li>
<p><a id="VUID-vkSetDebugUtilsObjectNameEXT-device-parameter"></a> <code>device</code> <strong class="purple">must</strong> be a valid <code>VkDevice</code> handle</p>
</li>
<li>
<p><a id="VUID-vkSetDebugUtilsObjectNameEXT-pNameInfo-parameter"></a> <code>pNameInfo</code> <strong class="purple">must</strong> be a valid pointer to a valid <code>VkDebugUtilsObjectNameInfoEXT</code> structure</p>
</li>
</ul>
</div>
</div>
</div>
<div class="sidebarblock">
<div class="content">
<div class="title">Host Synchronization</div>
<div class="ulist">
<ul>
<li>
<p>Host access to <code>pNameInfo.objectHandle</code> <strong class="purple">must</strong> be externally synchronized</p>
</li>
</ul>
</div>
</div>
</div>
<div class="sidebarblock">
<div class="content">
<div class="title">Return Codes</div>
<div class="dlist">
<dl>
<dt class="hdlist1"><a href="#fundamentals-successcodes">Success</a></dt>
<dd>
<div class="ulist">
<ul>
<li>
<p><code>VK_SUCCESS</code></p>
</li>
</ul>
</div>
</dd>
<dt class="hdlist1"><a href="#fundamentals-errorcodes">Failure</a></dt>
<dd>
<div class="ulist">
<ul>
<li>
<p><code>VK_ERROR_OUT_OF_HOST_MEMORY</code></p>
</li>
<li>
<p><code>VK_ERROR_OUT_OF_DEVICE_MEMORY</code></p>
</li>
</ul>
</div>
</dd>
</dl>
</div>
</div>
</div>
</div>
<div class="sect3">
<h4 id="_see_also_315">See Also</h4>
<div class="paragraph">
<p><a href="#VkDebugUtilsObjectNameInfoEXT">VkDebugUtilsObjectNameInfoEXT</a>, <a href="#VkDevice">VkDevice</a></p>
</div>
</div>
<div class="sect3">
<h4 id="_document_notes_315">Document Notes</h4>
<div class="paragraph">
<p>For more information, see the Vulkan Specification at URL</p>
</div>
<div class="paragraph">
<p><a href="https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#vkSetDebugUtilsObjectNameEXT" class="bare">https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#vkSetDebugUtilsObjectNameEXT</a></p>
</div>
<div class="paragraph">
<p>This page is extracted from the Vulkan Specification.
Fixes and changes should be made to the Specification, not directly.</p>
</div>
<div style="page-break-after: always;"></div>
</div>
</div>
<div class="sect2">
<h3 id="_vksetdebugutilsobjecttagext3">vkSetDebugUtilsObjectTagEXT(3)</h3>
<div class="sect3">
<h4 id="_name_316">Name</h4>
<div class="paragraph">
<p>vkSetDebugUtilsObjectTagEXT - Attach arbitrary data to an object</p>
</div>
</div>
<div class="sect3">
<h4 id="_c_specification_316">C Specification</h4>
<div id="vkSetDebugUtilsObjectTagEXT" class="listingblock">
<div class="content">
<pre class="highlight"><code class="language-c++" data-lang="c++">VkResult vkSetDebugUtilsObjectTagEXT(
    VkDevice                                    device,
    const VkDebugUtilsObjectTagInfoEXT*         pTagInfo);</code></pre>
</div>
</div>
</div>
<div class="sect3">
<h4 id="_parameters_316">Parameters</h4>
<div class="ulist">
<ul>
<li>
<p><code>device</code> is the device that created the object.</p>
</li>
<li>
<p><code>pTagInfo</code> is a pointer to an instance of the
<a href="#VkDebugUtilsObjectTagInfoEXT">VkDebugUtilsObjectTagInfoEXT</a> structure specifying the parameters
of the tag to attach to the object.</p>
</li>
</ul>
</div>
</div>
<div class="sect3">
<h4 id="_description_316">Description</h4>
<div class="sidebarblock">
<div class="content">
<div class="title">Valid Usage (Implicit)</div>
<div class="ulist">
<ul>
<li>
<p><a id="VUID-vkSetDebugUtilsObjectTagEXT-device-parameter"></a> <code>device</code> <strong class="purple">must</strong> be a valid <code>VkDevice</code> handle</p>
</li>
<li>
<p><a id="VUID-vkSetDebugUtilsObjectTagEXT-pTagInfo-parameter"></a> <code>pTagInfo</code> <strong class="purple">must</strong> be a valid pointer to a valid <code>VkDebugUtilsObjectTagInfoEXT</code> structure</p>
</li>
</ul>
</div>
</div>
</div>
<div class="sidebarblock">
<div class="content">
<div class="title">Host Synchronization</div>
<div class="ulist">
<ul>
<li>
<p>Host access to <code>pTagInfo.objectHandle</code> <strong class="purple">must</strong> be externally synchronized</p>
</li>
</ul>
</div>
</div>
</div>
<div class="sidebarblock">
<div class="content">
<div class="title">Return Codes</div>
<div class="dlist">
<dl>
<dt class="hdlist1"><a href="#fundamentals-successcodes">Success</a></dt>
<dd>
<div class="ulist">
<ul>
<li>
<p><code>VK_SUCCESS</code></p>
</li>
</ul>
</div>
</dd>
<dt class="hdlist1"><a href="#fundamentals-errorcodes">Failure</a></dt>
<dd>
<div class="ulist">
<ul>
<li>
<p><code>VK_ERROR_OUT_OF_HOST_MEMORY</code></p>
</li>
<li>
<p><code>VK_ERROR_OUT_OF_DEVICE_MEMORY</code></p>
</li>
</ul>
</div>
</dd>
</dl>
</div>
</div>
</div>
</div>
<div class="sect3">
<h4 id="_see_also_316">See Also</h4>
<div class="paragraph">
<p><a href="#VkDebugUtilsObjectTagInfoEXT">VkDebugUtilsObjectTagInfoEXT</a>, <a href="#VkDevice">VkDevice</a></p>
</div>
</div>
<div class="sect3">
<h4 id="_document_notes_316">Document Notes</h4>
<div class="paragraph">
<p>For more information, see the Vulkan Specification at URL</p>
</div>
<div class="paragraph">
<p><a href="https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#vkSetDebugUtilsObjectTagEXT" class="bare">https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#vkSetDebugUtilsObjectTagEXT</a></p>
</div>
<div class="paragraph">
<p>This page is extracted from the Vulkan Specification.
Fixes and changes should be made to the Specification, not directly.</p>
</div>
<div style="page-break-after: always;"></div>
</div>
</div>
<div class="sect2">
<h3 id="_vksetevent3">vkSetEvent(3)</h3>
<div class="sect3">
<h4 id="_name_317">Name</h4>
<div class="paragraph">
<p>vkSetEvent - Set an event to signaled state</p>
</div>
</div>
<div class="sect3">
<h4 id="_c_specification_317">C Specification</h4>
<div class="paragraph">
<p>To set the state of an event to signaled from the host, call:</p>
</div>
<div id="vkSetEvent" class="listingblock">
<div class="content">
<pre class="highlight"><code class="language-c++" data-lang="c++">VkResult vkSetEvent(
    VkDevice                                    device,
    VkEvent                                     event);</code></pre>
</div>
</div>
</div>
<div class="sect3">
<h4 id="_parameters_317">Parameters</h4>
<div class="ulist">
<ul>
<li>
<p><code>device</code> is the logical device that owns the event.</p>
</li>
<li>
<p><code>event</code> is the event to set.</p>
</li>
</ul>
</div>
</div>
<div class="sect3">
<h4 id="_description_317">Description</h4>
<div class="paragraph">
<p>When <a href="#vkSetEvent">vkSetEvent</a> is executed on the host, it defines an <em>event signal
operation</em> which sets the event to the signaled state.</p>
</div>
<div class="paragraph">
<p>If <code>event</code> is already in the signaled state when <a href="#vkSetEvent">vkSetEvent</a> is
executed, then <a href="#vkSetEvent">vkSetEvent</a> has no effect, and no event signal operation
occurs.</p>
</div>
<div class="sidebarblock">
<div class="content">
<div class="title">Valid Usage (Implicit)</div>
<div class="ulist">
<ul>
<li>
<p><a id="VUID-vkSetEvent-device-parameter"></a> <code>device</code> <strong class="purple">must</strong> be a valid <code>VkDevice</code> handle</p>
</li>
<li>
<p><a id="VUID-vkSetEvent-event-parameter"></a> <code>event</code> <strong class="purple">must</strong> be a valid <code>VkEvent</code> handle</p>
</li>
<li>
<p><a id="VUID-vkSetEvent-event-parent"></a> <code>event</code> <strong class="purple">must</strong> have been created, allocated, or retrieved from <code>device</code></p>
</li>
</ul>
</div>
</div>
</div>
<div class="sidebarblock">
<div class="content">
<div class="title">Host Synchronization</div>
<div class="ulist">
<ul>
<li>
<p>Host access to <code>event</code> <strong class="purple">must</strong> be externally synchronized</p>
</li>
</ul>
</div>
</div>
</div>
<div class="sidebarblock">
<div class="content">
<div class="title">Return Codes</div>
<div class="dlist">
<dl>
<dt class="hdlist1"><a href="#fundamentals-successcodes">Success</a></dt>
<dd>
<div class="ulist">
<ul>
<li>
<p><code>VK_SUCCESS</code></p>
</li>
</ul>
</div>
</dd>
<dt class="hdlist1"><a href="#fundamentals-errorcodes">Failure</a></dt>
<dd>
<div class="ulist">
<ul>
<li>
<p><code>VK_ERROR_OUT_OF_HOST_MEMORY</code></p>
</li>
<li>
<p><code>VK_ERROR_OUT_OF_DEVICE_MEMORY</code></p>
</li>
</ul>
</div>
</dd>
</dl>
</div>
</div>
</div>
</div>
<div class="sect3">
<h4 id="_see_also_317">See Also</h4>
<div class="paragraph">
<p><a href="#VkDevice">VkDevice</a>, <a href="#VkEvent">VkEvent</a></p>
</div>
</div>
<div class="sect3">
<h4 id="_document_notes_317">Document Notes</h4>
<div class="paragraph">
<p>For more information, see the Vulkan Specification at URL</p>
</div>
<div class="paragraph">
<p><a href="https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#vkSetEvent" class="bare">https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#vkSetEvent</a></p>
</div>
<div class="paragraph">
<p>This page is extracted from the Vulkan Specification.
Fixes and changes should be made to the Specification, not directly.</p>
</div>
<div style="page-break-after: always;"></div>
</div>
</div>
<div class="sect2">
<h3 id="_vksethdrmetadataext3">vkSetHdrMetadataEXT(3)</h3>
<div class="sect3">
<h4 id="_name_318">Name</h4>
<div class="paragraph">
<p>vkSetHdrMetadataEXT - function to set Hdr metadata</p>
</div>
</div>
<div class="sect3">
<h4 id="_c_specification_318">C Specification</h4>
<div id="vkSetHdrMetadataEXT" class="listingblock">
<div class="content">
<pre class="highlight"><code class="language-c++" data-lang="c++">void vkSetHdrMetadataEXT(
    VkDevice                                    device,
    uint32_t                                    swapchainCount,
    const VkSwapchainKHR*                       pSwapchains,
    const VkHdrMetadataEXT*                     pMetadata);</code></pre>
</div>
</div>
</div>
<div class="sect3">
<h4 id="_parameters_318">Parameters</h4>
<div class="ulist">
<ul>
<li>
<p><code>device</code> is the logical device where the swapchain(s) were created.</p>
</li>
<li>
<p><code>swapchainCount</code> is the number of swapchains included in
<code>pSwapchains</code>.</p>
</li>
<li>
<p><code>pSwapchains</code> is a pointer to the array of <code>swapchainCount</code>
<code>VkSwapchainKHR</code> handles.</p>
</li>
<li>
<p><code>pMetadata</code> is a pointer to the array of <code>swapchainCount</code>
<code>VkHdrMetadataEXT</code> structures.</p>
</li>
</ul>
</div>
</div>
<div class="sect3">
<h4 id="_description_318">Description</h4>
<div class="sidebarblock">
<div class="content">
<div class="title">Valid Usage (Implicit)</div>
<div class="ulist">
<ul>
<li>
<p><a id="VUID-vkSetHdrMetadataEXT-device-parameter"></a> <code>device</code> <strong class="purple">must</strong> be a valid <code>VkDevice</code> handle</p>
</li>
<li>
<p><a id="VUID-vkSetHdrMetadataEXT-pSwapchains-parameter"></a> <code>pSwapchains</code> <strong class="purple">must</strong> be a valid pointer to an array of <code>swapchainCount</code> valid <code>VkSwapchainKHR</code> handles</p>
</li>
<li>
<p><a id="VUID-vkSetHdrMetadataEXT-pMetadata-parameter"></a> <code>pMetadata</code> <strong class="purple">must</strong> be a valid pointer to an array of <code>swapchainCount</code> valid <code>VkHdrMetadataEXT</code> structures</p>
</li>
<li>
<p><a id="VUID-vkSetHdrMetadataEXT-swapchainCount-arraylength"></a> <code>swapchainCount</code> <strong class="purple">must</strong> be greater than <code>0</code></p>
</li>
<li>
<p><a id="VUID-vkSetHdrMetadataEXT-commonparent"></a> Both of <code>device</code>, and the elements of <code>pSwapchains</code> <strong class="purple">must</strong> have been created, allocated, or retrieved from the same <code>VkInstance</code></p>
</li>
</ul>
</div>
</div>
</div>
</div>
<div class="sect3">
<h4 id="_see_also_318">See Also</h4>
<div class="paragraph">
<p><a href="#VkDevice">VkDevice</a>, <a href="#VkHdrMetadataEXT">VkHdrMetadataEXT</a>, <a href="#VkSwapchainKHR">VkSwapchainKHR</a></p>
</div>
</div>
<div class="sect3">
<h4 id="_document_notes_318">Document Notes</h4>
<div class="paragraph">
<p>For more information, see the Vulkan Specification at URL</p>
</div>
<div class="paragraph">
<p><a href="https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#vkSetHdrMetadataEXT" class="bare">https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#vkSetHdrMetadataEXT</a></p>
</div>
<div class="paragraph">
<p>This page is extracted from the Vulkan Specification.
Fixes and changes should be made to the Specification, not directly.</p>
</div>
<div style="page-break-after: always;"></div>
</div>
</div>
<div class="sect2">
<h3 id="_vksetlocaldimmingamd3">vkSetLocalDimmingAMD(3)</h3>
<div class="sect3">
<h4 id="_name_319">Name</h4>
<div class="paragraph">
<p>vkSetLocalDimmingAMD - Set Local Dimming</p>
</div>
</div>
<div class="sect3">
<h4 id="_c_specification_319">C Specification</h4>
<div class="paragraph">
<p>The local dimming HDR setting may also be changed over the life of a
swapchain by calling:</p>
</div>
<div id="vkSetLocalDimmingAMD" class="listingblock">
<div class="content">
<pre class="highlight"><code class="language-c++" data-lang="c++">void vkSetLocalDimmingAMD(
    VkDevice                                    device,
    VkSwapchainKHR                              swapChain,
    VkBool32                                    localDimmingEnable);</code></pre>
</div>
</div>
</div>
<div class="sect3">
<h4 id="_parameters_319">Parameters</h4>
<div class="ulist">
<ul>
<li>
<p><code>device</code> is the device associated with <code>swapChain</code>.</p>
</li>
<li>
<p><code>swapChain</code> handle to enable local dimming.</p>
</li>
<li>
<p><code>localDimmingEnable</code> specifies whether local dimming is enabled for
the swapchain.</p>
</li>
</ul>
</div>
</div>
<div class="sect3">
<h4 id="_description_319">Description</h4>
<div class="sidebarblock">
<div class="content">
<div class="title">Valid Usage (Implicit)</div>
<div class="ulist">
<ul>
<li>
<p><a id="VUID-vkSetLocalDimmingAMD-device-parameter"></a> <code>device</code> <strong class="purple">must</strong> be a valid <code>VkDevice</code> handle</p>
</li>
<li>
<p><a id="VUID-vkSetLocalDimmingAMD-swapChain-parameter"></a> <code>swapChain</code> <strong class="purple">must</strong> be a valid <code>VkSwapchainKHR</code> handle</p>
</li>
<li>
<p><a id="VUID-vkSetLocalDimmingAMD-commonparent"></a> Both of <code>device</code>, and <code>swapChain</code> <strong class="purple">must</strong> have been created, allocated, or retrieved from the same <code>VkInstance</code></p>
</li>
</ul>
</div>
</div>
</div>
<div class="sidebarblock">
<div class="content">
<div class="title">Valid Usage</div>
<div class="ulist">
<ul>
<li>
<p><a id="VUID-vkSetLocalDimmingAMD-XXXXX"></a>
It is only valid to call <a href="#vkSetLocalDimmingAMD">vkSetLocalDimmingAMD</a> if
<a href="#VkDisplayNativeHdrSurfaceCapabilitiesAMD">VkDisplayNativeHdrSurfaceCapabilitiesAMD</a>::<code>localDimmingSupport</code>
is supported.</p>
</li>
</ul>
</div>
</div>
</div>
</div>
<div class="sect3">
<h4 id="_see_also_319">See Also</h4>
<div class="paragraph">
<p><code>VkBool32</code>, <a href="#VkDevice">VkDevice</a>, <a href="#VkSwapchainKHR">VkSwapchainKHR</a></p>
</div>
</div>
<div class="sect3">
<h4 id="_document_notes_319">Document Notes</h4>
<div class="paragraph">
<p>For more information, see the Vulkan Specification at URL</p>
</div>
<div class="paragraph">
<p><a href="https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#vkSetLocalDimmingAMD" class="bare">https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#vkSetLocalDimmingAMD</a></p>
</div>
<div class="paragraph">
<p>This page is extracted from the Vulkan Specification.
Fixes and changes should be made to the Specification, not directly.</p>
</div>
<div style="page-break-after: always;"></div>
</div>
</div>
<div class="sect2">
<h3 id="_vksubmitdebugutilsmessageext3">vkSubmitDebugUtilsMessageEXT(3)</h3>
<div class="sect3">
<h4 id="_name_320">Name</h4>
<div class="paragraph">
<p>vkSubmitDebugUtilsMessageEXT - Inject a message into a debug stream</p>
</div>
</div>
<div class="sect3">
<h4 id="_c_specification_320">C Specification</h4>
<div class="paragraph">
<p>There may be times that a user wishes to intentionally submit a debug
message.
To do this, call:</p>
</div>
<div id="vkSubmitDebugUtilsMessageEXT" class="listingblock">
<div class="content">
<pre class="highlight"><code class="language-c++" data-lang="c++">void vkSubmitDebugUtilsMessageEXT(
    VkInstance                                  instance,
    VkDebugUtilsMessageSeverityFlagBitsEXT      messageSeverity,
    VkDebugUtilsMessageTypeFlagsEXT             messageTypes,
    const VkDebugUtilsMessengerCallbackDataEXT* pCallbackData);</code></pre>
</div>
</div>
</div>
<div class="sect3">
<h4 id="_parameters_320">Parameters</h4>
<div class="ulist">
<ul>
<li>
<p><code>instance</code> is the debug stream&#8217;s <a href="#VkInstance">VkInstance</a>.</p>
</li>
<li>
<p><code>messageSeverity</code> is the
<a href="#VkDebugUtilsMessageSeverityFlagBitsEXT">VkDebugUtilsMessageSeverityFlagBitsEXT</a> severity of this
event/message.</p>
</li>
<li>
<p><code>messageTypes</code> is a bitmask of
<a href="#VkDebugUtilsMessageTypeFlagBitsEXT">VkDebugUtilsMessageTypeFlagBitsEXT</a> specifying which type of
event(s) to identify with this message.</p>
</li>
<li>
<p><code>pCallbackData</code> contains all the callback related data in the
<a href="#VkDebugUtilsMessengerCallbackDataEXT">VkDebugUtilsMessengerCallbackDataEXT</a> structure.</p>
</li>
</ul>
</div>
</div>
<div class="sect3">
<h4 id="_description_320">Description</h4>
<div class="paragraph">
<p>The call will propagate through the layers and generate callback(s) as
indicated by the message&#8217;s flags.
The parameters are passed on to the callback in addition to the
<code>pUserData</code> value that was defined at the time the messenger was
registered.</p>
</div>
<div class="sidebarblock">
<div class="content">
<div class="title">Valid Usage</div>
<div class="ulist">
<ul>
<li>
<p><a id="VUID-vkSubmitDebugUtilsMessageEXT-objectType-02591"></a>
<code>objectType</code> member of each element of
<code>pCallbackData</code>-&gt;<code>pObjects</code> <strong class="purple">must</strong> not be
<code>VK_OBJECT_TYPE_UNKNOWN</code></p>
</li>
</ul>
</div>
</div>
</div>
<div class="sidebarblock">
<div class="content">
<div class="title">Valid Usage (Implicit)</div>
<div class="ulist">
<ul>
<li>
<p><a id="VUID-vkSubmitDebugUtilsMessageEXT-instance-parameter"></a> <code>instance</code> <strong class="purple">must</strong> be a valid <code>VkInstance</code> handle</p>
</li>
<li>
<p><a id="VUID-vkSubmitDebugUtilsMessageEXT-messageSeverity-parameter"></a> <code>messageSeverity</code> <strong class="purple">must</strong> be a valid <a href="#VkDebugUtilsMessageSeverityFlagBitsEXT">VkDebugUtilsMessageSeverityFlagBitsEXT</a> value</p>
</li>
<li>
<p><a id="VUID-vkSubmitDebugUtilsMessageEXT-messageTypes-parameter"></a> <code>messageTypes</code> <strong class="purple">must</strong> be a valid combination of <a href="#VkDebugUtilsMessageTypeFlagBitsEXT">VkDebugUtilsMessageTypeFlagBitsEXT</a> values</p>
</li>
<li>
<p><a id="VUID-vkSubmitDebugUtilsMessageEXT-messageTypes-requiredbitmask"></a> <code>messageTypes</code> <strong class="purple">must</strong> not be <code>0</code></p>
</li>
<li>
<p><a id="VUID-vkSubmitDebugUtilsMessageEXT-pCallbackData-parameter"></a> <code>pCallbackData</code> <strong class="purple">must</strong> be a valid pointer to a valid <code>VkDebugUtilsMessengerCallbackDataEXT</code> structure</p>
</li>
</ul>
</div>
</div>
</div>
</div>
<div class="sect3">
<h4 id="_see_also_320">See Also</h4>
<div class="paragraph">
<p><a href="#VkDebugUtilsMessageSeverityFlagBitsEXT">VkDebugUtilsMessageSeverityFlagBitsEXT</a>, <a href="#VkDebugUtilsMessageTypeFlagsEXT">VkDebugUtilsMessageTypeFlagsEXT</a>, <a href="#VkDebugUtilsMessengerCallbackDataEXT">VkDebugUtilsMessengerCallbackDataEXT</a>, <a href="#VkInstance">VkInstance</a></p>
</div>
</div>
<div class="sect3">
<h4 id="_document_notes_320">Document Notes</h4>
<div class="paragraph">
<p>For more information, see the Vulkan Specification at URL</p>
</div>
<div class="paragraph">
<p><a href="https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#vkSubmitDebugUtilsMessageEXT" class="bare">https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#vkSubmitDebugUtilsMessageEXT</a></p>
</div>
<div class="paragraph">
<p>This page is extracted from the Vulkan Specification.
Fixes and changes should be made to the Specification, not directly.</p>
</div>
<div style="page-break-after: always;"></div>
</div>
</div>
<div class="sect2">
<h3 id="_vktrimcommandpool3">vkTrimCommandPool(3)</h3>
<div class="sect3">
<h4 id="_name_321">Name</h4>
<div class="paragraph">
<p>vkTrimCommandPool - Trim a command pool</p>
</div>
</div>
<div class="sect3">
<h4 id="_c_specification_321">C Specification</h4>
<div class="paragraph">
<p>To trim a command pool, call:</p>
</div>
<div id="vkTrimCommandPool" class="listingblock">
<div class="content">
<pre class="highlight"><code class="language-c++" data-lang="c++">void vkTrimCommandPool(
    VkDevice                                    device,
    VkCommandPool                               commandPool,
    VkCommandPoolTrimFlags                      flags);</code></pre>
</div>
</div>
<div class="paragraph">
<p>or the equivalent command</p>
</div>
<div id="vkTrimCommandPoolKHR" class="listingblock">
<div class="content">
<pre class="highlight"><code class="language-c++" data-lang="c++">void vkTrimCommandPoolKHR(
    VkDevice                                    device,
    VkCommandPool                               commandPool,
    VkCommandPoolTrimFlags                      flags);</code></pre>
</div>
</div>
</div>
<div class="sect3">
<h4 id="_parameters_321">Parameters</h4>
<div class="ulist">
<ul>
<li>
<p><code>device</code> is the logical device that owns the command pool.</p>
</li>
<li>
<p><code>commandPool</code> is the command pool to trim.</p>
</li>
<li>
<p><code>flags</code> is reserved for future use.</p>
</li>
</ul>
</div>
</div>
<div class="sect3">
<h4 id="_description_321">Description</h4>
<div class="paragraph">
<p>Trimming a command pool recycles unused memory from the command pool back to
the system.
Command buffers allocated from the pool are not affected by the command.</p>
</div>
<div class="admonitionblock note">
<table>
<tr>
<td class="icon">
<i class="fa icon-note" title="Note"></i>
</td>
<td class="content">
<div class="title">Note</div>
<div class="paragraph">
<p>This command provides applications with some control over the internal
memory allocations used by command pools.</p>
</div>
<div class="paragraph">
<p>Unused memory normally arises from command buffers that have been recorded
and later reset, such that they are no longer using the memory.
On reset, a command buffer can return memory to its command pool, but the
only way to release memory from a command pool to the system requires
calling <a href="#vkResetCommandPool">vkResetCommandPool</a>, which cannot be executed while any command
buffers from that pool are still in use.
Subsequent recording operations into command buffers will re-use this memory
but since total memory requirements fluctuate over time, unused memory can
accumulate.</p>
</div>
<div class="paragraph">
<p>In this situation, trimming a command pool <strong class="purple">may</strong> be useful to return unused
memory back to the system, returning the total outstanding memory allocated
by the pool back to a more &#8220;average&#8221; value.</p>
</div>
<div class="paragraph">
<p>Implementations utilize many internal allocation strategies that make it
impossible to guarantee that all unused memory is released back to the
system.
For instance, an implementation of a command pool <strong class="purple">may</strong> involve allocating
memory in bulk from the system and sub-allocating from that memory.
In such an implementation any live command buffer that holds a reference to
a bulk allocation would prevent that allocation from being freed, even if
only a small proportion of the bulk allocation is in use.</p>
</div>
<div class="paragraph">
<p>In most cases trimming will result in a reduction in allocated but unused
memory, but it does not guarantee the &#8220;ideal&#8221; behavior.</p>
</div>
<div class="paragraph">
<p>Trimming <strong class="purple">may</strong> be an expensive operation, and <strong class="purple">should</strong> not be called
frequently.
Trimming <strong class="purple">should</strong> be treated as a way to relieve memory pressure after
application-known points when there exists enough unused memory that the
cost of trimming is &#8220;worth&#8221; it.</p>
</div>
</td>
</tr>
</table>
</div>
<div class="sidebarblock">
<div class="content">
<div class="title">Valid Usage (Implicit)</div>
<div class="ulist">
<ul>
<li>
<p><a id="VUID-vkTrimCommandPool-device-parameter"></a> <code>device</code> <strong class="purple">must</strong> be a valid <code>VkDevice</code> handle</p>
</li>
<li>
<p><a id="VUID-vkTrimCommandPool-commandPool-parameter"></a> <code>commandPool</code> <strong class="purple">must</strong> be a valid <code>VkCommandPool</code> handle</p>
</li>
<li>
<p><a id="VUID-vkTrimCommandPool-flags-zerobitmask"></a> <code>flags</code> <strong class="purple">must</strong> be <code>0</code></p>
</li>
<li>
<p><a id="VUID-vkTrimCommandPool-commandPool-parent"></a> <code>commandPool</code> <strong class="purple">must</strong> have been created, allocated, or retrieved from <code>device</code></p>
</li>
</ul>
</div>
</div>
</div>
<div class="sidebarblock">
<div class="content">
<div class="title">Host Synchronization</div>
<div class="ulist">
<ul>
<li>
<p>Host access to <code>commandPool</code> <strong class="purple">must</strong> be externally synchronized</p>
</li>
</ul>
</div>
</div>
</div>
</div>
<div class="sect3">
<h4 id="_see_also_321">See Also</h4>
<div class="paragraph">
<p><a href="#VkCommandPool">VkCommandPool</a>, <a href="#VkCommandPoolTrimFlags">VkCommandPoolTrimFlags</a>, <a href="#VkDevice">VkDevice</a></p>
</div>
</div>
<div class="sect3">
<h4 id="_document_notes_321">Document Notes</h4>
<div class="paragraph">
<p>For more information, see the Vulkan Specification at URL</p>
</div>
<div class="paragraph">
<p><a href="https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#vkTrimCommandPool" class="bare">https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#vkTrimCommandPool</a></p>
</div>
<div class="paragraph">
<p>This page is extracted from the Vulkan Specification.
Fixes and changes should be made to the Specification, not directly.</p>
</div>
<div style="page-break-after: always;"></div>
</div>
</div>
<div class="sect2">
<h3 id="_vkunmapmemory3">vkUnmapMemory(3)</h3>
<div class="sect3">
<h4 id="_name_322">Name</h4>
<div class="paragraph">
<p>vkUnmapMemory - Unmap a previously mapped memory object</p>
</div>
</div>
<div class="sect3">
<h4 id="_c_specification_322">C Specification</h4>
<div class="paragraph">
<p>To unmap a memory object once host access to it is no longer needed by the
application, call:</p>
</div>
<div id="vkUnmapMemory" class="listingblock">
<div class="content">
<pre class="highlight"><code class="language-c++" data-lang="c++">void vkUnmapMemory(
    VkDevice                                    device,
    VkDeviceMemory                              memory);</code></pre>
</div>
</div>
</div>
<div class="sect3">
<h4 id="_parameters_322">Parameters</h4>
<div class="ulist">
<ul>
<li>
<p><code>device</code> is the logical device that owns the memory.</p>
</li>
<li>
<p><code>memory</code> is the memory object to be unmapped.</p>
</li>
</ul>
</div>
</div>
<div class="sect3">
<h4 id="_description_322">Description</h4>
<div class="sidebarblock">
<div class="content">
<div class="title">Valid Usage</div>
<div class="ulist">
<ul>
<li>
<p><a id="VUID-vkUnmapMemory-memory-00689"></a>
<code>memory</code> <strong class="purple">must</strong> be currently host mapped</p>
</li>
</ul>
</div>
</div>
</div>
<div class="sidebarblock">
<div class="content">
<div class="title">Valid Usage (Implicit)</div>
<div class="ulist">
<ul>
<li>
<p><a id="VUID-vkUnmapMemory-device-parameter"></a> <code>device</code> <strong class="purple">must</strong> be a valid <code>VkDevice</code> handle</p>
</li>
<li>
<p><a id="VUID-vkUnmapMemory-memory-parameter"></a> <code>memory</code> <strong class="purple">must</strong> be a valid <code>VkDeviceMemory</code> handle</p>
</li>
<li>
<p><a id="VUID-vkUnmapMemory-memory-parent"></a> <code>memory</code> <strong class="purple">must</strong> have been created, allocated, or retrieved from <code>device</code></p>
</li>
</ul>
</div>
</div>
</div>
<div class="sidebarblock">
<div class="content">
<div class="title">Host Synchronization</div>
<div class="ulist">
<ul>
<li>
<p>Host access to <code>memory</code> <strong class="purple">must</strong> be externally synchronized</p>
</li>
</ul>
</div>
</div>
</div>
</div>
<div class="sect3">
<h4 id="_see_also_322">See Also</h4>
<div class="paragraph">
<p><a href="#VkDevice">VkDevice</a>, <a href="#VkDeviceMemory">VkDeviceMemory</a></p>
</div>
</div>
<div class="sect3">
<h4 id="_document_notes_322">Document Notes</h4>
<div class="paragraph">
<p>For more information, see the Vulkan Specification at URL</p>
</div>
<div class="paragraph">
<p><a href="https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#vkUnmapMemory" class="bare">https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#vkUnmapMemory</a></p>
</div>
<div class="paragraph">
<p>This page is extracted from the Vulkan Specification.
Fixes and changes should be made to the Specification, not directly.</p>
</div>
<div style="page-break-after: always;"></div>
</div>
</div>
<div class="sect2">
<h3 id="_vkunregisterobjectsnvx3">vkUnregisterObjectsNVX(3)</h3>
<div class="sect3">
<h4 id="_name_323">Name</h4>
<div class="paragraph">
<p>vkUnregisterObjectsNVX - Unregister resource bindings in an object table</p>
</div>
</div>
<div class="sect3">
<h4 id="_c_specification_323">C Specification</h4>
<div class="paragraph">
<p>Use the following command to unregister resources from an object table:</p>
</div>
<div id="vkUnregisterObjectsNVX" class="listingblock">
<div class="content">
<pre class="highlight"><code class="language-c++" data-lang="c++">VkResult vkUnregisterObjectsNVX(
    VkDevice                                    device,
    VkObjectTableNVX                            objectTable,
    uint32_t                                    objectCount,
    const VkObjectEntryTypeNVX*                 pObjectEntryTypes,
    const uint32_t*                             pObjectIndices);</code></pre>
</div>
</div>
</div>
<div class="sect3">
<h4 id="_parameters_323">Parameters</h4>
<div class="ulist">
<ul>
<li>
<p><code>device</code> is the logical device that creates the object table.</p>
</li>
<li>
<p><code>objectTable</code> is the table from which the resources are
unregistered.</p>
</li>
<li>
<p><code>objectCount</code> is the number of resources being removed from the
object table.</p>
</li>
<li>
<p><code>pObjectEntryType</code> provides an array of <a href="#VkObjectEntryTypeNVX">VkObjectEntryTypeNVX</a>
for the resources being removed.</p>
</li>
<li>
<p><code>pObjectIndices</code> provides the array of object indices to be removed.</p>
</li>
</ul>
</div>
</div>
<div class="sect3">
<h4 id="_description_323">Description</h4>
<div class="sidebarblock">
<div class="content">
<div class="title">Valid Usage</div>
<div class="ulist">
<ul>
<li>
<p><a id="VUID-vkUnregisterObjectsNVX-pObjectIndices-01373"></a>
At any <code>pObjectIndices</code> there <strong class="purple">must</strong> be a registered resource
already.</p>
</li>
<li>
<p><a id="VUID-vkUnregisterObjectsNVX-pObjectEntryTypes-01374"></a>
The <code>pObjectEntryTypes</code> of the resource at <code>pObjectIndices</code>
<strong class="purple">must</strong> match.</p>
</li>
<li>
<p><a id="VUID-vkUnregisterObjectsNVX-None-01375"></a>
All operations on the device using the registered resource <strong class="purple">must</strong> have
been completed.</p>
</li>
</ul>
</div>
</div>
</div>
<div class="sidebarblock">
<div class="content">
<div class="title">Valid Usage (Implicit)</div>
<div class="ulist">
<ul>
<li>
<p><a id="VUID-vkUnregisterObjectsNVX-device-parameter"></a> <code>device</code> <strong class="purple">must</strong> be a valid <code>VkDevice</code> handle</p>
</li>
<li>
<p><a id="VUID-vkUnregisterObjectsNVX-objectTable-parameter"></a> <code>objectTable</code> <strong class="purple">must</strong> be a valid <code>VkObjectTableNVX</code> handle</p>
</li>
<li>
<p><a id="VUID-vkUnregisterObjectsNVX-pObjectEntryTypes-parameter"></a> <code>pObjectEntryTypes</code> <strong class="purple">must</strong> be a valid pointer to an array of <code>objectCount</code> valid <a href="#VkObjectEntryTypeNVX">VkObjectEntryTypeNVX</a> values</p>
</li>
<li>
<p><a id="VUID-vkUnregisterObjectsNVX-pObjectIndices-parameter"></a> <code>pObjectIndices</code> <strong class="purple">must</strong> be a valid pointer to an array of <code>objectCount</code> <code>uint32_t</code> values</p>
</li>
<li>
<p><a id="VUID-vkUnregisterObjectsNVX-objectCount-arraylength"></a> <code>objectCount</code> <strong class="purple">must</strong> be greater than <code>0</code></p>
</li>
<li>
<p><a id="VUID-vkUnregisterObjectsNVX-objectTable-parent"></a> <code>objectTable</code> <strong class="purple">must</strong> have been created, allocated, or retrieved from <code>device</code></p>
</li>
</ul>
</div>
</div>
</div>
<div class="sidebarblock">
<div class="content">
<div class="title">Host Synchronization</div>
<div class="ulist">
<ul>
<li>
<p>Host access to <code>objectTable</code> <strong class="purple">must</strong> be externally synchronized</p>
</li>
</ul>
</div>
</div>
</div>
<div class="sidebarblock">
<div class="content">
<div class="title">Return Codes</div>
<div class="dlist">
<dl>
<dt class="hdlist1"><a href="#fundamentals-successcodes">Success</a></dt>
<dd>
<div class="ulist">
<ul>
<li>
<p><code>VK_SUCCESS</code></p>
</li>
</ul>
</div>
</dd>
<dt class="hdlist1"><a href="#fundamentals-errorcodes">Failure</a></dt>
<dd>
<div class="ulist">
<ul>
<li>
<p><code>VK_ERROR_OUT_OF_HOST_MEMORY</code></p>
</li>
<li>
<p><code>VK_ERROR_OUT_OF_DEVICE_MEMORY</code></p>
</li>
</ul>
</div>
</dd>
</dl>
</div>
</div>
</div>
</div>
<div class="sect3">
<h4 id="_see_also_323">See Also</h4>
<div class="paragraph">
<p><a href="#VkDevice">VkDevice</a>, <a href="#VkObjectEntryTypeNVX">VkObjectEntryTypeNVX</a>, <a href="#VkObjectTableNVX">VkObjectTableNVX</a></p>
</div>
</div>
<div class="sect3">
<h4 id="_document_notes_323">Document Notes</h4>
<div class="paragraph">
<p>For more information, see the Vulkan Specification at URL</p>
</div>
<div class="paragraph">
<p><a href="https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#vkUnregisterObjectsNVX" class="bare">https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#vkUnregisterObjectsNVX</a></p>
</div>
<div class="paragraph">
<p>This page is extracted from the Vulkan Specification.
Fixes and changes should be made to the Specification, not directly.</p>
</div>
<div style="page-break-after: always;"></div>
</div>
</div>
<div class="sect2">
<h3 id="_vkupdatedescriptorsetwithtemplate3">vkUpdateDescriptorSetWithTemplate(3)</h3>
<div class="sect3">
<h4 id="_name_324">Name</h4>
<div class="paragraph">
<p>vkUpdateDescriptorSetWithTemplate - Update the contents of a descriptor set object using an update template</p>
</div>
</div>
<div class="sect3">
<h4 id="_c_specification_324">C Specification</h4>
<div class="paragraph">
<p>Once a <code>VkDescriptorUpdateTemplate</code> has been created, descriptor sets
<strong class="purple">can</strong> be updated by calling:</p>
</div>
<div id="vkUpdateDescriptorSetWithTemplate" class="listingblock">
<div class="content">
<pre class="highlight"><code class="language-c++" data-lang="c++">void vkUpdateDescriptorSetWithTemplate(
    VkDevice                                    device,
    VkDescriptorSet                             descriptorSet,
    VkDescriptorUpdateTemplate                  descriptorUpdateTemplate,
    const void*                                 pData);</code></pre>
</div>
</div>
<div class="paragraph">
<p>or the equivalent command</p>
</div>
<div id="vkUpdateDescriptorSetWithTemplateKHR" class="listingblock">
<div class="content">
<pre class="highlight"><code class="language-c++" data-lang="c++">void vkUpdateDescriptorSetWithTemplateKHR(
    VkDevice                                    device,
    VkDescriptorSet                             descriptorSet,
    VkDescriptorUpdateTemplate                  descriptorUpdateTemplate,
    const void*                                 pData);</code></pre>
</div>
</div>
</div>
<div class="sect3">
<h4 id="_parameters_324">Parameters</h4>
<div class="ulist">
<ul>
<li>
<p><code>device</code> is the logical device that updates the descriptor sets.</p>
</li>
<li>
<p><code>descriptorSet</code> is the descriptor set to update</p>
</li>
<li>
<p><code>descriptorUpdateTemplate</code> is the <a href="#VkDescriptorUpdateTemplate">VkDescriptorUpdateTemplate</a>
which specifies the update mapping between <code>pData</code> and the
descriptor set to update.</p>
</li>
<li>
<p><code>pData</code> is a pointer to memory which contains one or more structures
of <a href="#VkDescriptorImageInfo">VkDescriptorImageInfo</a>, <a href="#VkDescriptorBufferInfo">VkDescriptorBufferInfo</a>, or
<a href="#VkBufferView">VkBufferView</a> used to write the descriptors.</p>
</li>
</ul>
</div>
</div>
<div class="sect3">
<h4 id="_description_324">Description</h4>
<div class="sidebarblock">
<div class="content">
<div class="title">Valid Usage</div>
<div class="ulist">
<ul>
<li>
<p><a id="VUID-vkUpdateDescriptorSetWithTemplate-pData-01685"></a>
<code>pData</code> <strong class="purple">must</strong> be a valid pointer to a memory that contains one or
more valid instances of <a href="#VkDescriptorImageInfo">VkDescriptorImageInfo</a>,
<a href="#VkDescriptorBufferInfo">VkDescriptorBufferInfo</a>, or <a href="#VkBufferView">VkBufferView</a> in a layout defined
by <code>descriptorUpdateTemplate</code> when it was created with
<a href="#vkCreateDescriptorUpdateTemplate">vkCreateDescriptorUpdateTemplate</a></p>
</li>
</ul>
</div>
</div>
</div>
<div class="sidebarblock">
<div class="content">
<div class="title">Valid Usage (Implicit)</div>
<div class="ulist">
<ul>
<li>
<p><a id="VUID-vkUpdateDescriptorSetWithTemplate-device-parameter"></a> <code>device</code> <strong class="purple">must</strong> be a valid <code>VkDevice</code> handle</p>
</li>
<li>
<p><a id="VUID-vkUpdateDescriptorSetWithTemplate-descriptorSet-parameter"></a> <code>descriptorSet</code> <strong class="purple">must</strong> be a valid <code>VkDescriptorSet</code> handle</p>
</li>
<li>
<p><a id="VUID-vkUpdateDescriptorSetWithTemplate-descriptorUpdateTemplate-parameter"></a> <code>descriptorUpdateTemplate</code> <strong class="purple">must</strong> be a valid <code>VkDescriptorUpdateTemplate</code> handle</p>
</li>
<li>
<p><a id="VUID-vkUpdateDescriptorSetWithTemplate-descriptorUpdateTemplate-parent"></a> <code>descriptorUpdateTemplate</code> <strong class="purple">must</strong> have been created, allocated, or retrieved from <code>device</code></p>
</li>
</ul>
</div>
</div>
</div>
<div class="sidebarblock">
<div class="content">
<div class="title">Host Synchronization</div>
<div class="ulist">
<ul>
<li>
<p>Host access to <code>descriptorSet</code> <strong class="purple">must</strong> be externally synchronized</p>
</li>
</ul>
</div>
</div>
</div>
<div class="listingblock">
<div class="title">API example</div>
<div class="content">
<pre class="highlight"><code class="language-c++" data-lang="c++">struct AppBufferView {
    VkBufferView bufferView;
    uint32_t     applicationRelatedInformation;
};

struct AppDataStructure
{
    VkDescriptorImageInfo  imageInfo;          // a single image info
    VkDescriptorBufferInfo bufferInfoArray[3]; // 3 buffer infos in an array
    AppBufferView          bufferView[2];      // An application defined structure containing a bufferView
    // ... some more application related data
};

const VkDescriptorUpdateTemplateEntry descriptorUpdateTemplateEntries[] =
{
    // binding to a single image descriptor
    {
        0,                                           // binding
        0,                                           // dstArrayElement
        1,                                           // descriptorCount
        VK_DESCRIPTOR_TYPE_COMBINED_IMAGE_SAMPLER,   // descriptorType
        offsetof(AppDataStructure, imageInfo),       // offset
        0                                            // stride is not required if descriptorCount is 1
    },

    // binding to an array of buffer descriptors
    {
        1,                                           // binding
        0,                                           // dstArrayElement
        3,                                           // descriptorCount
        VK_DESCRIPTOR_TYPE_UNIFORM_BUFFER,           // descriptorType
        offsetof(AppDataStructure, bufferInfoArray), // offset
        sizeof(VkDescriptorBufferInfo)               // stride, descriptor buffer infos are compact
    },

    // binding to an array of buffer views
    {
        2,                                           // binding
        0,                                           // dstArrayElement
        2,                                           // descriptorCount
        VK_DESCRIPTOR_TYPE_STORAGE_TEXEL_BUFFER,     // descriptorType
        offsetof(AppDataStructure, bufferView) +
          offsetof(AppBufferView, bufferView),       // offset
        sizeof(AppBufferView)                        // stride, bufferViews do not have to be compact
    },
};

// create a descriptor update template for descriptor set updates
const VkDescriptorUpdateTemplateCreateInfo createInfo =
{
    VK_STRUCTURE_TYPE_DESCRIPTOR_UPDATE_TEMPLATE_CREATE_INFO,  // sType
    NULL,                                                      // pNext
    0,                                                         // flags
    3,                                                         // descriptorUpdateEntryCount
    descriptorUpdateTemplateEntries,                           // pDescriptorUpdateEntries
    VK_DESCRIPTOR_UPDATE_TEMPLATE_TYPE_DESCRIPTOR_SET,         // templateType
    myLayout,                                                  // descriptorSetLayout
    0,                                                         // pipelineBindPoint, ignored by given templateType
    0,                                                         // pipelineLayout, ignored by given templateType
    0,                                                         // set, ignored by given templateType
};

VkDescriptorUpdateTemplate myDescriptorUpdateTemplate;
myResult = vkCreateDescriptorUpdateTemplate(
    myDevice,
    &amp;createInfo,
    NULL,
    &amp;myDescriptorUpdateTemplate);
}


AppDataStructure appData;

// fill appData here or cache it in your engine
vkUpdateDescriptorSetWithTemplate(myDevice, myDescriptorSet, myDescriptorUpdateTemplate, &amp;appData);</code></pre>
</div>
</div>
</div>
<div class="sect3">
<h4 id="_see_also_324">See Also</h4>
<div class="paragraph">
<p><a href="#VkDescriptorSet">VkDescriptorSet</a>, <a href="#VkDescriptorUpdateTemplate">VkDescriptorUpdateTemplate</a>, <a href="#VkDevice">VkDevice</a></p>
</div>
</div>
<div class="sect3">
<h4 id="_document_notes_324">Document Notes</h4>
<div class="paragraph">
<p>For more information, see the Vulkan Specification at URL</p>
</div>
<div class="paragraph">
<p><a href="https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#vkUpdateDescriptorSetWithTemplate" class="bare">https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#vkUpdateDescriptorSetWithTemplate</a></p>
</div>
<div class="paragraph">
<p>This page is extracted from the Vulkan Specification.
Fixes and changes should be made to the Specification, not directly.</p>
</div>
<div style="page-break-after: always;"></div>
</div>
</div>
<div class="sect2">
<h3 id="_vkupdatedescriptorsets3">vkUpdateDescriptorSets(3)</h3>
<div class="sect3">
<h4 id="_name_325">Name</h4>
<div class="paragraph">
<p>vkUpdateDescriptorSets - Update the contents of a descriptor set object</p>
</div>
</div>
<div class="sect3">
<h4 id="_c_specification_325">C Specification</h4>
<div class="paragraph">
<p>Once allocated, descriptor sets <strong class="purple">can</strong> be updated with a combination of write
and copy operations.
To update descriptor sets, call:</p>
</div>
<div id="vkUpdateDescriptorSets" class="listingblock">
<div class="content">
<pre class="highlight"><code class="language-c++" data-lang="c++">void vkUpdateDescriptorSets(
    VkDevice                                    device,
    uint32_t                                    descriptorWriteCount,
    const VkWriteDescriptorSet*                 pDescriptorWrites,
    uint32_t                                    descriptorCopyCount,
    const VkCopyDescriptorSet*                  pDescriptorCopies);</code></pre>
</div>
</div>
</div>
<div class="sect3">
<h4 id="_parameters_325">Parameters</h4>
<div class="ulist">
<ul>
<li>
<p><code>device</code> is the logical device that updates the descriptor sets.</p>
</li>
<li>
<p><code>descriptorWriteCount</code> is the number of elements in the
<code>pDescriptorWrites</code> array.</p>
</li>
<li>
<p><code>pDescriptorWrites</code> is a pointer to an array of
<a href="#VkWriteDescriptorSet">VkWriteDescriptorSet</a> structures describing the descriptor sets to
write to.</p>
</li>
<li>
<p><code>descriptorCopyCount</code> is the number of elements in the
<code>pDescriptorCopies</code> array.</p>
</li>
<li>
<p><code>pDescriptorCopies</code> is a pointer to an array of
<a href="#VkCopyDescriptorSet">VkCopyDescriptorSet</a> structures describing the descriptor sets to
copy between.</p>
</li>
</ul>
</div>
</div>
<div class="sect3">
<h4 id="_description_325">Description</h4>
<div class="paragraph">
<p>The operations described by <code>pDescriptorWrites</code> are performed first,
followed by the operations described by <code>pDescriptorCopies</code>.
Within each array, the operations are performed in the order they appear in
the array.</p>
</div>
<div class="paragraph">
<p>Each element in the <code>pDescriptorWrites</code> array describes an operation
updating the descriptor set using descriptors for resources specified in the
structure.</p>
</div>
<div class="paragraph">
<p>Each element in the <code>pDescriptorCopies</code> array is a
<a href="#VkCopyDescriptorSet">VkCopyDescriptorSet</a> structure describing an operation copying
descriptors between sets.</p>
</div>
<div class="paragraph">
<p>If the <code>dstSet</code> member of any element of <code>pDescriptorWrites</code> or
<code>pDescriptorCopies</code> is bound, accessed, or modified by any command that
was recorded to a command buffer which is currently in the
<a href="vkspec.html#commandbuffers-lifecycle">recording or executable state</a>,
and any of the descriptor bindings that are updated were not created with
the <code>VK_DESCRIPTOR_BINDING_UPDATE_AFTER_BIND_BIT_EXT</code> or
<code>VK_DESCRIPTOR_BINDING_UPDATE_UNUSED_WHILE_PENDING_BIT_EXT</code> bits set,
that command buffer becomes <a href="vkspec.html#commandbuffers-lifecycle">invalid</a>.</p>
</div>
<div class="sidebarblock">
<div class="content">
<div class="title">Valid Usage</div>
<div class="ulist">
<ul>
<li>
<p><a id="VUID-vkUpdateDescriptorSets-None-03047"></a>
Descriptor bindings updated by this command which were created without
the <code>VK_DESCRIPTOR_BINDING_UPDATE_AFTER_BIND_BIT_EXT</code> or
<code>VK_DESCRIPTOR_BINDING_UPDATE_UNUSED_WHILE_PENDING_BIT_EXT</code> bits set
<strong class="purple">must</strong> not be used by any command that was recorded to a command buffer
which is in the <a href="vkspec.html#commandbuffers-lifecycle">pending state</a>.</p>
</li>
</ul>
</div>
</div>
</div>
<div class="sidebarblock">
<div class="content">
<div class="title">Valid Usage (Implicit)</div>
<div class="ulist">
<ul>
<li>
<p><a id="VUID-vkUpdateDescriptorSets-device-parameter"></a> <code>device</code> <strong class="purple">must</strong> be a valid <code>VkDevice</code> handle</p>
</li>
<li>
<p><a id="VUID-vkUpdateDescriptorSets-pDescriptorWrites-parameter"></a> If <code>descriptorWriteCount</code> is not <code>0</code>, <code>pDescriptorWrites</code> <strong class="purple">must</strong> be a valid pointer to an array of <code>descriptorWriteCount</code> valid <code>VkWriteDescriptorSet</code> structures</p>
</li>
<li>
<p><a id="VUID-vkUpdateDescriptorSets-pDescriptorCopies-parameter"></a> If <code>descriptorCopyCount</code> is not <code>0</code>, <code>pDescriptorCopies</code> <strong class="purple">must</strong> be a valid pointer to an array of <code>descriptorCopyCount</code> valid <code>VkCopyDescriptorSet</code> structures</p>
</li>
</ul>
</div>
</div>
</div>
<div class="sidebarblock">
<div class="content">
<div class="title">Host Synchronization</div>
<div class="ulist">
<ul>
<li>
<p>Host access to <code>pDescriptorWrites</code>[].dstSet <strong class="purple">must</strong> be externally synchronized</p>
</li>
<li>
<p>Host access to <code>pDescriptorCopies</code>[].dstSet <strong class="purple">must</strong> be externally synchronized</p>
</li>
</ul>
</div>
</div>
</div>
</div>
<div class="sect3">
<h4 id="_see_also_325">See Also</h4>
<div class="paragraph">
<p><a href="#VkCopyDescriptorSet">VkCopyDescriptorSet</a>, <a href="#VkDevice">VkDevice</a>, <a href="#VkWriteDescriptorSet">VkWriteDescriptorSet</a></p>
</div>
</div>
<div class="sect3">
<h4 id="_document_notes_325">Document Notes</h4>
<div class="paragraph">
<p>For more information, see the Vulkan Specification at URL</p>
</div>
<div class="paragraph">
<p><a href="https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#vkUpdateDescriptorSets" class="bare">https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#vkUpdateDescriptorSets</a></p>
</div>
<div class="paragraph">
<p>This page is extracted from the Vulkan Specification.
Fixes and changes should be made to the Specification, not directly.</p>
</div>
<div style="page-break-after: always;"></div>
</div>
</div>
<div class="sect2">
<h3 id="_vkwaitforfences3">vkWaitForFences(3)</h3>
<div class="sect3">
<h4 id="_name_326">Name</h4>
<div class="paragraph">
<p>vkWaitForFences - Wait for one or more fences to become signaled</p>
</div>
</div>
<div class="sect3">
<h4 id="_c_specification_326">C Specification</h4>
<div class="paragraph">
<p>To wait for one or more fences to enter the signaled state on the host,
call:</p>
</div>
<div id="vkWaitForFences" class="listingblock">
<div class="content">
<pre class="highlight"><code class="language-c++" data-lang="c++">VkResult vkWaitForFences(
    VkDevice                                    device,
    uint32_t                                    fenceCount,
    const VkFence*                              pFences,
    VkBool32                                    waitAll,
    uint64_t                                    timeout);</code></pre>
</div>
</div>
</div>
<div class="sect3">
<h4 id="_parameters_326">Parameters</h4>
<div class="ulist">
<ul>
<li>
<p><code>device</code> is the logical device that owns the fences.</p>
</li>
<li>
<p><code>fenceCount</code> is the number of fences to wait on.</p>
</li>
<li>
<p><code>pFences</code> is a pointer to an array of <code>fenceCount</code> fence
handles.</p>
</li>
<li>
<p><code>waitAll</code> is the condition that <strong class="purple">must</strong> be satisfied to successfully
unblock the wait.
If <code>waitAll</code> is <code>VK_TRUE</code>, then the condition is that all fences
in <code>pFences</code> are signaled.
Otherwise, the condition is that at least one fence in <code>pFences</code> is
signaled.</p>
</li>
<li>
<p><code>timeout</code> is the timeout period in units of nanoseconds.
<code>timeout</code> is adjusted to the closest value allowed by the
implementation-dependent timeout accuracy, which <strong class="purple">may</strong> be substantially
longer than one nanosecond, and <strong class="purple">may</strong> be longer than the requested
period.</p>
</li>
</ul>
</div>
</div>
<div class="sect3">
<h4 id="_description_326">Description</h4>
<div class="paragraph">
<p>If the condition is satisfied when <code>vkWaitForFences</code> is called, then
<code>vkWaitForFences</code> returns immediately.
If the condition is not satisfied at the time <code>vkWaitForFences</code> is
called, then <code>vkWaitForFences</code> will block and wait up to <code>timeout</code>
nanoseconds for the condition to become satisfied.</p>
</div>
<div class="paragraph">
<p>If <code>timeout</code> is zero, then <code>vkWaitForFences</code> does not wait, but
simply returns the current state of the fences.
<code>VK_TIMEOUT</code> will be returned in this case if the condition is not
satisfied, even though no actual wait was performed.</p>
</div>
<div class="paragraph">
<p>If the specified timeout period expires before the condition is satisfied,
<code>vkWaitForFences</code> returns <code>VK_TIMEOUT</code>.
If the condition is satisfied before <code>timeout</code> nanoseconds has expired,
<code>vkWaitForFences</code> returns <code>VK_SUCCESS</code>.</p>
</div>
<div class="paragraph">
<p>If device loss occurs (see <a href="vkspec.html#devsandqueues-lost-device">Lost Device</a>) before
the timeout has expired, <code>vkWaitForFences</code> <strong class="purple">must</strong> return in finite time
with either <code>VK_SUCCESS</code> or <code>VK_ERROR_DEVICE_LOST</code>.</p>
</div>
<div class="admonitionblock note">
<table>
<tr>
<td class="icon">
<i class="fa icon-note" title="Note"></i>
</td>
<td class="content">
<div class="title">Note</div>
<div class="paragraph">
<p>While we guarantee that <code>vkWaitForFences</code> <strong class="purple">must</strong> return in finite time,
no guarantees are made that it returns immediately upon device loss.
However, the client can reasonably expect that the delay will be on the
order of seconds and that calling <code>vkWaitForFences</code> will not result in a
permanently (or seemingly permanently) dead process.</p>
</div>
</td>
</tr>
</table>
</div>
<div class="sidebarblock">
<div class="content">
<div class="title">Valid Usage (Implicit)</div>
<div class="ulist">
<ul>
<li>
<p><a id="VUID-vkWaitForFences-device-parameter"></a> <code>device</code> <strong class="purple">must</strong> be a valid <code>VkDevice</code> handle</p>
</li>
<li>
<p><a id="VUID-vkWaitForFences-pFences-parameter"></a> <code>pFences</code> <strong class="purple">must</strong> be a valid pointer to an array of <code>fenceCount</code> valid <code>VkFence</code> handles</p>
</li>
<li>
<p><a id="VUID-vkWaitForFences-fenceCount-arraylength"></a> <code>fenceCount</code> <strong class="purple">must</strong> be greater than <code>0</code></p>
</li>
<li>
<p><a id="VUID-vkWaitForFences-pFences-parent"></a> Each element of <code>pFences</code> <strong class="purple">must</strong> have been created, allocated, or retrieved from <code>device</code></p>
</li>
</ul>
</div>
</div>
</div>
<div class="sidebarblock">
<div class="content">
<div class="title">Return Codes</div>
<div class="dlist">
<dl>
<dt class="hdlist1"><a href="#fundamentals-successcodes">Success</a></dt>
<dd>
<div class="ulist">
<ul>
<li>
<p><code>VK_SUCCESS</code></p>
</li>
<li>
<p><code>VK_TIMEOUT</code></p>
</li>
</ul>
</div>
</dd>
<dt class="hdlist1"><a href="#fundamentals-errorcodes">Failure</a></dt>
<dd>
<div class="ulist">
<ul>
<li>
<p><code>VK_ERROR_OUT_OF_HOST_MEMORY</code></p>
</li>
<li>
<p><code>VK_ERROR_OUT_OF_DEVICE_MEMORY</code></p>
</li>
<li>
<p><code>VK_ERROR_DEVICE_LOST</code></p>
</li>
</ul>
</div>
</dd>
</dl>
</div>
</div>
</div>
</div>
<div class="sect3">
<h4 id="_see_also_326">See Also</h4>
<div class="paragraph">
<p><code>VkBool32</code>, <a href="#VkDevice">VkDevice</a>, <a href="#VkFence">VkFence</a></p>
</div>
</div>
<div class="sect3">
<h4 id="_document_notes_326">Document Notes</h4>
<div class="paragraph">
<p>For more information, see the Vulkan Specification at URL</p>
</div>
<div class="paragraph">
<p><a href="https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#vkWaitForFences" class="bare">https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#vkWaitForFences</a></p>
</div>
<div class="paragraph">
<p>This page is extracted from the Vulkan Specification.
Fixes and changes should be made to the Specification, not directly.</p>
</div>
<div style="page-break-after: always;"></div>
</div>
</div>
</div>
</div>
</root>