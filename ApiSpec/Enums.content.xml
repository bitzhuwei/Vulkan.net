<root>
<div class="sect1">
<h2 id="enums">Enumerations</h2>
<div class="sectionbody">
<div class="sect2">
<h3 id="_vkaccelerationstructurememoryrequirementstypenv3">VkAccelerationStructureMemoryRequirementsTypeNV(3)</h3>
<div class="sect3">
<h4 id="_name_798">Name</h4>
<div class="paragraph">
<p>VkAccelerationStructureMemoryRequirementsTypeNV - Acceleration structure memory requirement type</p>
</div>
</div>
<div class="sect3">
<h4 id="_c_specification_798">C Specification</h4>
<div class="paragraph">
<p>Possible values of <code>type</code> in
<code>VkAccelerationStructureMemoryRequirementsInfoNV</code> are:,</p>
</div>
<div id="VkAccelerationStructureMemoryRequirementsTypeNV" class="listingblock">
<div class="content">
<pre class="highlight"><code class="language-c++" data-lang="c++">typedef enum VkAccelerationStructureMemoryRequirementsTypeNV {
    VK_ACCELERATION_STRUCTURE_MEMORY_REQUIREMENTS_TYPE_OBJECT_NV = 0,
    VK_ACCELERATION_STRUCTURE_MEMORY_REQUIREMENTS_TYPE_BUILD_SCRATCH_NV = 1,
    VK_ACCELERATION_STRUCTURE_MEMORY_REQUIREMENTS_TYPE_UPDATE_SCRATCH_NV = 2,
    VK_ACCELERATION_STRUCTURE_MEMORY_REQUIREMENTS_TYPE_MAX_ENUM_NV = 0x7FFFFFFF
} VkAccelerationStructureMemoryRequirementsTypeNV;</code></pre>
</div>
</div>
</div>
<div class="sect3">
<h4 id="_description_798">Description</h4>
<div class="ulist">
<ul>
<li>
<p><code>VK_ACCELERATION_STRUCTURE_MEMORY_REQUIREMENTS_TYPE_OBJECT_NV</code>
requests the memory requirement for the <code>VkAccelerationStructureNV</code>
backing store.</p>
</li>
<li>
<p><code>VK_ACCELERATION_STRUCTURE_MEMORY_REQUIREMENTS_TYPE_BUILD_SCRATCH_NV</code>
requests the memory requirement for scratch space during the initial
build.</p>
</li>
<li>
<p><code>VK_ACCELERATION_STRUCTURE_MEMORY_REQUIREMENTS_TYPE_UPDATE_SCRATCH_NV</code>
requests the memory requirement for scratch space during an update.</p>
</li>
</ul>
</div>
</div>
<div class="sect3">
<h4 id="_see_also_798">See Also</h4>
<div class="paragraph">
<p><a href="#VkAccelerationStructureMemoryRequirementsInfoNV">VkAccelerationStructureMemoryRequirementsInfoNV</a></p>
</div>
</div>
<div class="sect3">
<h4 id="_document_notes_798">Document Notes</h4>
<div class="paragraph">
<p>For more information, see the Vulkan Specification at URL</p>
</div>
<div class="paragraph">
<p><a href="https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VkAccelerationStructureMemoryRequirementsTypeNV" class="bare">https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VkAccelerationStructureMemoryRequirementsTypeNV</a></p>
</div>
<div class="paragraph">
<p>This page is extracted from the Vulkan Specification.
Fixes and changes should be made to the Specification, not directly.</p>
</div>
<div style="page-break-after: always;"></div>
</div>
</div>
<div class="sect2">
<h3 id="_vkaccelerationstructuretypenv3">VkAccelerationStructureTypeNV(3)</h3>
<div class="sect3">
<h4 id="_name_799">Name</h4>
<div class="paragraph">
<p>VkAccelerationStructureTypeNV - Type of acceleration structure</p>
</div>
</div>
<div class="sect3">
<h4 id="_c_specification_799">C Specification</h4>
<div class="paragraph">
<p>Values which <strong class="purple">can</strong> be set in <a href="#VkAccelerationStructureInfoNV">VkAccelerationStructureInfoNV</a>::<code>type</code>,
specifying the type of acceleration structure, are:</p>
</div>
<div id="VkAccelerationStructureTypeNV" class="listingblock">
<div class="content">
<pre class="highlight"><code class="language-c++" data-lang="c++">typedef enum VkAccelerationStructureTypeNV {
    VK_ACCELERATION_STRUCTURE_TYPE_TOP_LEVEL_NV = 0,
    VK_ACCELERATION_STRUCTURE_TYPE_BOTTOM_LEVEL_NV = 1,
    VK_ACCELERATION_STRUCTURE_TYPE_MAX_ENUM_NV = 0x7FFFFFFF
} VkAccelerationStructureTypeNV;</code></pre>
</div>
</div>
</div>
<div class="sect3">
<h4 id="_description_799">Description</h4>
<div class="ulist">
<ul>
<li>
<p><code>VK_ACCELERATION_STRUCTURE_TYPE_TOP_LEVEL_NV</code> is a top-level
acceleration structure containing instance data referring to
bottom-level level acceleration structures.</p>
</li>
<li>
<p><code>VK_ACCELERATION_STRUCTURE_TYPE_BOTTOM_LEVEL_NV</code> is a bottom-level
acceleration structure containing the AABBs or geometry to be
intersected.</p>
</li>
</ul>
</div>
</div>
<div class="sect3">
<h4 id="_see_also_799">See Also</h4>
<div class="paragraph">
<p><a href="#VkAccelerationStructureInfoNV">VkAccelerationStructureInfoNV</a></p>
</div>
</div>
<div class="sect3">
<h4 id="_document_notes_799">Document Notes</h4>
<div class="paragraph">
<p>For more information, see the Vulkan Specification at URL</p>
</div>
<div class="paragraph">
<p><a href="https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VkAccelerationStructureTypeNV" class="bare">https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VkAccelerationStructureTypeNV</a></p>
</div>
<div class="paragraph">
<p>This page is extracted from the Vulkan Specification.
Fixes and changes should be made to the Specification, not directly.</p>
</div>
<div style="page-break-after: always;"></div>
</div>
</div>
<div class="sect2">
<h3 id="_vkaccessflagbits3">VkAccessFlagBits(3)</h3>
<div class="sect3">
<h4 id="_name_800">Name</h4>
<div class="paragraph">
<p>VkAccessFlagBits - Bitmask specifying memory access types that will participate in a memory dependency</p>
</div>
</div>
<div class="sect3">
<h4 id="_c_specification_800">C Specification</h4>
<div class="paragraph">
<p>Memory in Vulkan <strong class="purple">can</strong> be accessed from within shader invocations and via
some fixed-function stages of the pipeline.
The <em>access type</em> is a function of the <a href="vkspec.html#descriptorsets">descriptor type</a>
used, or how a fixed-function stage accesses memory.
Each access type corresponds to a bit flag in <a href="#VkAccessFlagBits">VkAccessFlagBits</a>.</p>
</div>
<div id="synchronization-access-masks" class="paragraph">
<p>Some synchronization commands take sets of access types as parameters to
define the <a href="vkspec.html#synchronization-dependencies-access-scopes">access scopes</a> of
a memory dependency.
If a synchronization command includes a source access mask, its first
<a href="vkspec.html#synchronization-dependencies-access-scopes">access scope</a> only includes
accesses via the access types specified in that mask.
Similarly, if a synchronization command includes a destination access mask,
its second <a href="vkspec.html#synchronization-dependencies-access-scopes">access scope</a> only
includes accesses via the access types specified in that mask.</p>
</div>
<div class="paragraph">
<p>Access types that <strong class="purple">can</strong> be set in an access mask include:</p>
</div>
<div id="VkAccessFlagBits" class="listingblock">
<div class="content">
<pre class="highlight"><code class="language-c++" data-lang="c++">typedef enum VkAccessFlagBits {
    VK_ACCESS_INDIRECT_COMMAND_READ_BIT = 0x00000001,
    VK_ACCESS_INDEX_READ_BIT = 0x00000002,
    VK_ACCESS_VERTEX_ATTRIBUTE_READ_BIT = 0x00000004,
    VK_ACCESS_UNIFORM_READ_BIT = 0x00000008,
    VK_ACCESS_INPUT_ATTACHMENT_READ_BIT = 0x00000010,
    VK_ACCESS_SHADER_READ_BIT = 0x00000020,
    VK_ACCESS_SHADER_WRITE_BIT = 0x00000040,
    VK_ACCESS_COLOR_ATTACHMENT_READ_BIT = 0x00000080,
    VK_ACCESS_COLOR_ATTACHMENT_WRITE_BIT = 0x00000100,
    VK_ACCESS_DEPTH_STENCIL_ATTACHMENT_READ_BIT = 0x00000200,
    VK_ACCESS_DEPTH_STENCIL_ATTACHMENT_WRITE_BIT = 0x00000400,
    VK_ACCESS_TRANSFER_READ_BIT = 0x00000800,
    VK_ACCESS_TRANSFER_WRITE_BIT = 0x00001000,
    VK_ACCESS_HOST_READ_BIT = 0x00002000,
    VK_ACCESS_HOST_WRITE_BIT = 0x00004000,
    VK_ACCESS_MEMORY_READ_BIT = 0x00008000,
    VK_ACCESS_MEMORY_WRITE_BIT = 0x00010000,
    VK_ACCESS_TRANSFORM_FEEDBACK_WRITE_BIT_EXT = 0x02000000,
    VK_ACCESS_TRANSFORM_FEEDBACK_COUNTER_READ_BIT_EXT = 0x04000000,
    VK_ACCESS_TRANSFORM_FEEDBACK_COUNTER_WRITE_BIT_EXT = 0x08000000,
    VK_ACCESS_CONDITIONAL_RENDERING_READ_BIT_EXT = 0x00100000,
    VK_ACCESS_COMMAND_PROCESS_READ_BIT_NVX = 0x00020000,
    VK_ACCESS_COMMAND_PROCESS_WRITE_BIT_NVX = 0x00040000,
    VK_ACCESS_COLOR_ATTACHMENT_READ_NONCOHERENT_BIT_EXT = 0x00080000,
    VK_ACCESS_SHADING_RATE_IMAGE_READ_BIT_NV = 0x00800000,
    VK_ACCESS_ACCELERATION_STRUCTURE_READ_BIT_NV = 0x00200000,
    VK_ACCESS_ACCELERATION_STRUCTURE_WRITE_BIT_NV = 0x00400000,
    VK_ACCESS_FRAGMENT_DENSITY_MAP_READ_BIT_EXT = 0x01000000,
    VK_ACCESS_FLAG_BITS_MAX_ENUM = 0x7FFFFFFF
} VkAccessFlagBits;</code></pre>
</div>
</div>
</div>
<div class="sect3">
<h4 id="_description_800">Description</h4>
<div class="ulist">
<ul>
<li>
<p><code>VK_ACCESS_INDIRECT_COMMAND_READ_BIT</code> specifies read access to
indirect command data read as part of an indirect drawing or dispatch
command.</p>
</li>
<li>
<p><code>VK_ACCESS_INDEX_READ_BIT</code> specifies read access to an index buffer
as part of an indexed drawing command, bound by
<a href="#vkCmdBindIndexBuffer">vkCmdBindIndexBuffer</a>.</p>
</li>
<li>
<p><code>VK_ACCESS_VERTEX_ATTRIBUTE_READ_BIT</code> specifies read access to a
vertex buffer as part of a drawing command, bound by
<a href="#vkCmdBindVertexBuffers">vkCmdBindVertexBuffers</a>.</p>
</li>
<li>
<p><code>VK_ACCESS_UNIFORM_READ_BIT</code> specifies read access to a
<a href="vkspec.html#descriptorsets-uniformbuffer">uniform buffer</a>.</p>
</li>
<li>
<p><code>VK_ACCESS_INPUT_ATTACHMENT_READ_BIT</code> specifies read access to an
<a href="vkspec.html#renderpass">input attachment</a> within a render pass during fragment
shading.</p>
</li>
<li>
<p><code>VK_ACCESS_SHADER_READ_BIT</code> specifies read access to a
<a href="vkspec.html#descriptorsets-storagebuffer">storage buffer</a>,
<a href="vkspec.html#descriptorsets-physical-storage-buffer">physical storage buffer</a>,
<a href="vkspec.html#descriptorsets-uniformtexelbuffer">uniform texel buffer</a>,
<a href="vkspec.html#descriptorsets-storagetexelbuffer">storage texel buffer</a>,
<a href="vkspec.html#descriptorsets-sampledimage">sampled image</a>, or
<a href="vkspec.html#descriptorsets-storageimage">storage image</a>.</p>
</li>
<li>
<p><code>VK_ACCESS_SHADER_WRITE_BIT</code> specifies write access to a
<a href="vkspec.html#descriptorsets-storagebuffer">storage buffer</a>,
<a href="vkspec.html#descriptorsets-physical-storage-buffer">physical storage buffer</a>,
<a href="vkspec.html#descriptorsets-storagetexelbuffer">storage texel buffer</a>, or
<a href="vkspec.html#descriptorsets-storageimage">storage image</a>.</p>
</li>
<li>
<p><code>VK_ACCESS_COLOR_ATTACHMENT_READ_BIT</code> specifies read access to a
<a href="vkspec.html#renderpass">color attachment</a>, such as via <a href="vkspec.html#framebuffer-blending">blending</a>, <a href="vkspec.html#framebuffer-logicop">logic operations</a>, or via certain
<a href="vkspec.html#renderpass-load-store-ops">subpass load operations</a>.
It does not include <a href="vkspec.html#framebuffer-blend-advanced">advanced blend
operations</a>.</p>
</li>
<li>
<p><code>VK_ACCESS_COLOR_ATTACHMENT_WRITE_BIT</code> specifies write access to a
<a href="#renderpass">color, resolve, or depth/stencil resolve attachment</a>
during a <a href="vkspec.html#renderpass">render pass</a> or via certain
<a href="vkspec.html#renderpass-load-store-ops">subpass load and store operations</a>.</p>
</li>
<li>
<p><code>VK_ACCESS_DEPTH_STENCIL_ATTACHMENT_READ_BIT</code> specifies read access
to a <a href="vkspec.html#renderpass">depth/stencil attachment</a>, via <a href="vkspec.html#fragops-ds-state">depth or stencil operations</a> or via certain
<a href="vkspec.html#renderpass-load-store-ops">subpass load operations</a>.</p>
</li>
<li>
<p><code>VK_ACCESS_DEPTH_STENCIL_ATTACHMENT_WRITE_BIT</code> specifies write
access to a <a href="vkspec.html#renderpass">depth/stencil attachment</a>, via
<a href="vkspec.html#fragops-ds-state">depth or stencil operations</a> or via certain
<a href="vkspec.html#renderpass-load-store-ops">subpass load and store operations</a>.</p>
</li>
<li>
<p><code>VK_ACCESS_TRANSFER_READ_BIT</code> specifies read access to an image or
buffer in a <a href="vkspec.html#copies">copy</a> operation.</p>
</li>
<li>
<p><code>VK_ACCESS_TRANSFER_WRITE_BIT</code> specifies write access to an image or
buffer in a <a href="vkspec.html#clears">clear</a> or <a href="vkspec.html#copies">copy</a> operation.</p>
</li>
<li>
<p><code>VK_ACCESS_HOST_READ_BIT</code> specifies read access by a host operation.
Accesses of this type are not performed through a resource, but directly
on memory.</p>
</li>
<li>
<p><code>VK_ACCESS_HOST_WRITE_BIT</code> specifies write access by a host
operation.
Accesses of this type are not performed through a resource, but directly
on memory.</p>
</li>
<li>
<p><code>VK_ACCESS_MEMORY_READ_BIT</code> specifies read access via non-specific
entities.
These entities include the Vulkan device and host, but <strong class="purple">may</strong> also include
entities external to the Vulkan device or otherwise not part of the core
Vulkan pipeline.
When included in a destination access mask, makes all available writes
visible to all future read accesses on entities known to the Vulkan
device.</p>
</li>
<li>
<p><code>VK_ACCESS_MEMORY_WRITE_BIT</code> specifies write access via non-specific
entities.
These entities include the Vulkan device and host, but <strong class="purple">may</strong> also include
entities external to the Vulkan device or otherwise not part of the core
Vulkan pipeline.
When included in a source access mask, all writes that are performed by
entities known to the Vulkan device are made available.
When included in a destination access mask, makes all available writes
visible to all future write accesses on entities known to the Vulkan
device.</p>
</li>
<li>
<p><code>VK_ACCESS_CONDITIONAL_RENDERING_READ_BIT_EXT</code> specifies read access
to a predicate as part of conditional rendering.</p>
</li>
<li>
<p><code>VK_ACCESS_TRANSFORM_FEEDBACK_WRITE_BIT_EXT</code> specifies write access
to a transform feedback buffer made when transform feedback is active.</p>
</li>
<li>
<p><code>VK_ACCESS_TRANSFORM_FEEDBACK_COUNTER_READ_BIT_EXT</code> specifies read
access to a transform feedback counter buffer which is read when
<code>vkCmdBeginTransformFeedbackEXT</code> executes.</p>
</li>
<li>
<p><code>VK_ACCESS_TRANSFORM_FEEDBACK_COUNTER_WRITE_BIT_EXT</code> specifies write
access to a transform feedback counter buffer which is written when
<code>vkCmdEndTransformFeedbackEXT</code> executes.</p>
</li>
<li>
<p><code>VK_ACCESS_COMMAND_PROCESS_READ_BIT_NVX</code> specifies reads from
<code>VkBuffer</code> inputs to <a href="#vkCmdProcessCommandsNVX">vkCmdProcessCommandsNVX</a>.</p>
</li>
<li>
<p><code>VK_ACCESS_COMMAND_PROCESS_WRITE_BIT_NVX</code> specifies writes to the
target command buffer in <a href="#vkCmdProcessCommandsNVX">vkCmdProcessCommandsNVX</a>.</p>
</li>
<li>
<p><code>VK_ACCESS_COLOR_ATTACHMENT_READ_NONCOHERENT_BIT_EXT</code> is similar to
<code>VK_ACCESS_COLOR_ATTACHMENT_READ_BIT</code>, but also includes
<a href="vkspec.html#framebuffer-blend-advanced">advanced blend operations</a>.</p>
</li>
<li>
<p><code>VK_ACCESS_SHADING_RATE_IMAGE_READ_BIT_NV</code> specifies read access to
a shading rate image as part of a drawing command, as bound by
<a href="#vkCmdBindShadingRateImageNV">vkCmdBindShadingRateImageNV</a>.</p>
</li>
<li>
<p><code>VK_ACCESS_ACCELERATION_STRUCTURE_READ_BIT_NV</code> specifies read access
to an acceleration structure as part of a trace or build command.</p>
</li>
<li>
<p><code>VK_ACCESS_ACCELERATION_STRUCTURE_WRITE_BIT_NV</code> specifies write
access to an acceleration structure as part of a build command.</p>
</li>
<li>
<p><code>VK_ACCESS_FRAGMENT_DENSITY_MAP_READ_BIT_EXT</code> specifies read access
to a <a href="vkspec.html#renderpass-fragmentdensitymapattachment">fragment density map
attachment</a> during dynamic <a href="vkspec.html#fragmentdensitymapops">fragment density
map operations</a></p>
</li>
</ul>
</div>
<div class="paragraph">
<p>Certain access types are only performed by a subset of pipeline stages.
Any synchronization command that takes both stage masks and access masks
uses both to define the <a href="vkspec.html#synchronization-dependencies-access-scopes">access
scopes</a> - only the specified access types performed by the specified stages
are included in the access scope.
An application <strong class="purple">must</strong> not specify an access flag in a synchronization command
if it does not include a pipeline stage in the corresponding stage mask that
is able to perform accesses of that type.
The following table lists, for each access flag, which pipeline stages <strong class="purple">can</strong>
perform that type of access.</p>
</div>
<table id="synchronization-access-types-supported" class="tableblock frame-all grid-all stretch">
<caption class="title">Table 12. Supported access types</caption>
<colgroup>
<col style="width: 50%;" />
<col style="width: 50%;" />
</colgroup>
<thead>
<tr>
<th class="tableblock halign-left valign-top">Access flag</th>
<th class="tableblock halign-left valign-top">Supported pipeline stages</th>
</tr>
</thead>
<tbody>
<tr>
<td class="tableblock halign-left valign-top"><p class="tableblock"><code>VK_ACCESS_INDIRECT_COMMAND_READ_BIT</code></p></td>
<td class="tableblock halign-left valign-top"><p class="tableblock"><code>VK_PIPELINE_STAGE_DRAW_INDIRECT_BIT</code></p></td>
</tr>
<tr>
<td class="tableblock halign-left valign-top"><p class="tableblock"><code>VK_ACCESS_INDEX_READ_BIT</code></p></td>
<td class="tableblock halign-left valign-top"><p class="tableblock"><code>VK_PIPELINE_STAGE_VERTEX_INPUT_BIT</code></p></td>
</tr>
<tr>
<td class="tableblock halign-left valign-top"><p class="tableblock"><code>VK_ACCESS_VERTEX_ATTRIBUTE_READ_BIT</code></p></td>
<td class="tableblock halign-left valign-top"><p class="tableblock"><code>VK_PIPELINE_STAGE_VERTEX_INPUT_BIT</code></p></td>
</tr>
<tr>
<td class="tableblock halign-left valign-top"><p class="tableblock"><code>VK_ACCESS_UNIFORM_READ_BIT</code></p></td>
<td class="tableblock halign-left valign-top"><p class="tableblock"><code>VK_PIPELINE_STAGE_TASK_SHADER_BIT_NV</code>, <code>VK_PIPELINE_STAGE_MESH_SHADER_BIT_NV</code>,
                                                               <code>VK_PIPELINE_STAGE_RAY_TRACING_SHADER_BIT_NV</code>,
                                                               <code>VK_PIPELINE_STAGE_VERTEX_SHADER_BIT</code>, <code>VK_PIPELINE_STAGE_TESSELLATION_CONTROL_SHADER_BIT</code>, <code>VK_PIPELINE_STAGE_TESSELLATION_EVALUATION_SHADER_BIT</code>, <code>VK_PIPELINE_STAGE_GEOMETRY_SHADER_BIT</code>, <code>VK_PIPELINE_STAGE_FRAGMENT_SHADER_BIT</code>, or <code>VK_PIPELINE_STAGE_COMPUTE_SHADER_BIT</code></p></td>
</tr>
<tr>
<td class="tableblock halign-left valign-top"><p class="tableblock"><code>VK_ACCESS_SHADER_READ_BIT</code></p></td>
<td class="tableblock halign-left valign-top"><p class="tableblock"><code>VK_PIPELINE_STAGE_TASK_SHADER_BIT_NV</code>, <code>VK_PIPELINE_STAGE_MESH_SHADER_BIT_NV</code>,
                                                               <code>VK_PIPELINE_STAGE_RAY_TRACING_SHADER_BIT_NV</code>,
                                                               <code>VK_PIPELINE_STAGE_VERTEX_SHADER_BIT</code>, <code>VK_PIPELINE_STAGE_TESSELLATION_CONTROL_SHADER_BIT</code>, <code>VK_PIPELINE_STAGE_TESSELLATION_EVALUATION_SHADER_BIT</code>, <code>VK_PIPELINE_STAGE_GEOMETRY_SHADER_BIT</code>, <code>VK_PIPELINE_STAGE_FRAGMENT_SHADER_BIT</code>, or <code>VK_PIPELINE_STAGE_COMPUTE_SHADER_BIT</code></p></td>
</tr>
<tr>
<td class="tableblock halign-left valign-top"><p class="tableblock"><code>VK_ACCESS_SHADER_WRITE_BIT</code></p></td>
<td class="tableblock halign-left valign-top"><p class="tableblock"><code>VK_PIPELINE_STAGE_TASK_SHADER_BIT_NV</code>, <code>VK_PIPELINE_STAGE_MESH_SHADER_BIT_NV</code>,
                                                               <code>VK_PIPELINE_STAGE_RAY_TRACING_SHADER_BIT_NV</code>,
                                                               <code>VK_PIPELINE_STAGE_VERTEX_SHADER_BIT</code>, <code>VK_PIPELINE_STAGE_TESSELLATION_CONTROL_SHADER_BIT</code>, <code>VK_PIPELINE_STAGE_TESSELLATION_EVALUATION_SHADER_BIT</code>, <code>VK_PIPELINE_STAGE_GEOMETRY_SHADER_BIT</code>, <code>VK_PIPELINE_STAGE_FRAGMENT_SHADER_BIT</code>, or <code>VK_PIPELINE_STAGE_COMPUTE_SHADER_BIT</code></p></td>
</tr>
<tr>
<td class="tableblock halign-left valign-top"><p class="tableblock"><code>VK_ACCESS_INPUT_ATTACHMENT_READ_BIT</code></p></td>
<td class="tableblock halign-left valign-top"><p class="tableblock"><code>VK_PIPELINE_STAGE_FRAGMENT_SHADER_BIT</code></p></td>
</tr>
<tr>
<td class="tableblock halign-left valign-top"><p class="tableblock"><code>VK_ACCESS_COLOR_ATTACHMENT_READ_BIT</code></p></td>
<td class="tableblock halign-left valign-top"><p class="tableblock"><code>VK_PIPELINE_STAGE_COLOR_ATTACHMENT_OUTPUT_BIT</code></p></td>
</tr>
<tr>
<td class="tableblock halign-left valign-top"><p class="tableblock"><code>VK_ACCESS_COLOR_ATTACHMENT_WRITE_BIT</code></p></td>
<td class="tableblock halign-left valign-top"><p class="tableblock"><code>VK_PIPELINE_STAGE_COLOR_ATTACHMENT_OUTPUT_BIT</code></p></td>
</tr>
<tr>
<td class="tableblock halign-left valign-top"><p class="tableblock"><code>VK_ACCESS_DEPTH_STENCIL_ATTACHMENT_READ_BIT</code></p></td>
<td class="tableblock halign-left valign-top"><p class="tableblock"><code>VK_PIPELINE_STAGE_EARLY_FRAGMENT_TESTS_BIT</code>, or <code>VK_PIPELINE_STAGE_LATE_FRAGMENT_TESTS_BIT</code></p></td>
</tr>
<tr>
<td class="tableblock halign-left valign-top"><p class="tableblock"><code>VK_ACCESS_DEPTH_STENCIL_ATTACHMENT_WRITE_BIT</code></p></td>
<td class="tableblock halign-left valign-top"><p class="tableblock"><code>VK_PIPELINE_STAGE_EARLY_FRAGMENT_TESTS_BIT</code>, or <code>VK_PIPELINE_STAGE_LATE_FRAGMENT_TESTS_BIT</code></p></td>
</tr>
<tr>
<td class="tableblock halign-left valign-top"><p class="tableblock"><code>VK_ACCESS_TRANSFER_READ_BIT</code></p></td>
<td class="tableblock halign-left valign-top"><p class="tableblock"><code>VK_PIPELINE_STAGE_TRANSFER_BIT</code></p></td>
</tr>
<tr>
<td class="tableblock halign-left valign-top"><p class="tableblock"><code>VK_ACCESS_TRANSFER_WRITE_BIT</code></p></td>
<td class="tableblock halign-left valign-top"><p class="tableblock"><code>VK_PIPELINE_STAGE_TRANSFER_BIT</code></p></td>
</tr>
<tr>
<td class="tableblock halign-left valign-top"><p class="tableblock"><code>VK_ACCESS_HOST_READ_BIT</code></p></td>
<td class="tableblock halign-left valign-top"><p class="tableblock"><code>VK_PIPELINE_STAGE_HOST_BIT</code></p></td>
</tr>
<tr>
<td class="tableblock halign-left valign-top"><p class="tableblock"><code>VK_ACCESS_HOST_WRITE_BIT</code></p></td>
<td class="tableblock halign-left valign-top"><p class="tableblock"><code>VK_PIPELINE_STAGE_HOST_BIT</code></p></td>
</tr>
<tr>
<td class="tableblock halign-left valign-top"><p class="tableblock"><code>VK_ACCESS_MEMORY_READ_BIT</code></p></td>
<td class="tableblock halign-left valign-top"><p class="tableblock">N/A</p></td>
</tr>
<tr>
<td class="tableblock halign-left valign-top"><p class="tableblock"><code>VK_ACCESS_MEMORY_WRITE_BIT</code></p></td>
<td class="tableblock halign-left valign-top"><p class="tableblock">N/A</p></td>
</tr>
<tr>
<td class="tableblock halign-left valign-top"><p class="tableblock"><code>VK_ACCESS_COLOR_ATTACHMENT_READ_NONCOHERENT_BIT_EXT</code></p></td>
<td class="tableblock halign-left valign-top"><p class="tableblock"><code>VK_PIPELINE_STAGE_COLOR_ATTACHMENT_OUTPUT_BIT</code></p></td>
</tr>
<tr>
<td class="tableblock halign-left valign-top"><p class="tableblock"><code>VK_ACCESS_COMMAND_PROCESS_READ_BIT_NVX</code></p></td>
<td class="tableblock halign-left valign-top"><p class="tableblock"><code>VK_PIPELINE_STAGE_COMMAND_PROCESS_BIT_NVX</code></p></td>
</tr>
<tr>
<td class="tableblock halign-left valign-top"><p class="tableblock"><code>VK_ACCESS_COMMAND_PROCESS_WRITE_BIT_NVX</code></p></td>
<td class="tableblock halign-left valign-top"><p class="tableblock"><code>VK_PIPELINE_STAGE_COMMAND_PROCESS_BIT_NVX</code></p></td>
</tr>
<tr>
<td class="tableblock halign-left valign-top"><p class="tableblock"><code>VK_ACCESS_CONDITIONAL_RENDERING_READ_BIT_EXT</code></p></td>
<td class="tableblock halign-left valign-top"><p class="tableblock"><code>VK_PIPELINE_STAGE_CONDITIONAL_RENDERING_BIT_EXT</code></p></td>
</tr>
<tr>
<td class="tableblock halign-left valign-top"><p class="tableblock"><code>VK_ACCESS_SHADING_RATE_IMAGE_READ_BIT_NV</code></p></td>
<td class="tableblock halign-left valign-top"><p class="tableblock"><code>VK_PIPELINE_STAGE_SHADING_RATE_IMAGE_BIT_NV</code></p></td>
</tr>
<tr>
<td class="tableblock halign-left valign-top"><p class="tableblock"><code>VK_ACCESS_TRANSFORM_FEEDBACK_WRITE_BIT_EXT</code></p></td>
<td class="tableblock halign-left valign-top"><p class="tableblock"><code>VK_PIPELINE_STAGE_TRANSFORM_FEEDBACK_BIT_EXT</code></p></td>
</tr>
<tr>
<td class="tableblock halign-left valign-top"><p class="tableblock"><code>VK_ACCESS_TRANSFORM_FEEDBACK_COUNTER_WRITE_BIT_EXT</code></p></td>
<td class="tableblock halign-left valign-top"><p class="tableblock"><code>VK_PIPELINE_STAGE_TRANSFORM_FEEDBACK_BIT_EXT</code></p></td>
</tr>
<tr>
<td class="tableblock halign-left valign-top"><p class="tableblock"><code>VK_ACCESS_TRANSFORM_FEEDBACK_COUNTER_READ_BIT_EXT</code></p></td>
<td class="tableblock halign-left valign-top"><p class="tableblock"><code>VK_PIPELINE_STAGE_DRAW_INDIRECT_BIT</code></p></td>
</tr>
<tr>
<td class="tableblock halign-left valign-top"><p class="tableblock"><code>VK_ACCESS_ACCELERATION_STRUCTURE_READ_BIT_NV</code></p></td>
<td class="tableblock halign-left valign-top"><p class="tableblock"><code>VK_PIPELINE_STAGE_RAY_TRACING_SHADER_BIT_NV</code>, or <code>VK_PIPELINE_STAGE_ACCELERATION_STRUCTURE_BUILD_BIT_NV</code></p></td>
</tr>
<tr>
<td class="tableblock halign-left valign-top"><p class="tableblock"><code>VK_ACCESS_ACCELERATION_STRUCTURE_WRITE_BIT_NV</code></p></td>
<td class="tableblock halign-left valign-top"><p class="tableblock"><code>VK_PIPELINE_STAGE_ACCELERATION_STRUCTURE_BUILD_BIT_NV</code></p></td>
</tr>
<tr>
<td class="tableblock halign-left valign-top"><p class="tableblock"><code>VK_ACCESS_FRAGMENT_DENSITY_MAP_READ_BIT_EXT</code></p></td>
<td class="tableblock halign-left valign-top"><p class="tableblock"><code>VK_PIPELINE_STAGE_FRAGMENT_DENSITY_PROCESS_BIT_EXT</code></p></td>
</tr>
</tbody>
</table>
<div id="synchronization-host-access-types" class="paragraph">
<p>If a memory object does not have the
<code>VK_MEMORY_PROPERTY_HOST_COHERENT_BIT</code> property, then
<a href="#vkFlushMappedMemoryRanges">vkFlushMappedMemoryRanges</a> <strong class="purple">must</strong> be called in order to guarantee that
writes to the memory object from the host are made available to the host
domain, where they <strong class="purple">can</strong> be further made available to the device domain via a
domain operation.
Similarly, <a href="#vkInvalidateMappedMemoryRanges">vkInvalidateMappedMemoryRanges</a> <strong class="purple">must</strong> be called to guarantee
that writes which are available to the host domain are made visible to host
operations.</p>
</div>
<div class="paragraph">
<p>If the memory object does have the
<code>VK_MEMORY_PROPERTY_HOST_COHERENT_BIT</code> property flag, writes to the
memory object from the host are automatically made available to the host
domain.
Similarly, writes made available to the host domain are automatically made
visible to the host.</p>
</div>
<div class="admonitionblock note">
<table>
<tr>
<td class="icon">
<i class="fa icon-note" title="Note"></i>
</td>
<td class="content">
<div class="title">Note</div>
<div class="paragraph">
<p>The <a href="#vkQueueSubmit">vkQueueSubmit</a> command <a href="vkspec.html#synchronization-submission-host-writes">automatically performs a domain operation from host to device</a> for all
writes performed before the command executes, so in most cases an explicit
memory barrier is not needed for this case.
In the few circumstances where a submit does not occur between the host
write and the device read access, writes <strong class="purple">can</strong> be made available by using an
explicit memory barrier.</p>
</div>
</td>
</tr>
</table>
</div>
</div>
<div class="sect3">
<h4 id="_see_also_800">See Also</h4>
<div class="paragraph">
<p><a href="#VkAccessFlags">VkAccessFlags</a></p>
</div>
</div>
<div class="sect3">
<h4 id="_document_notes_800">Document Notes</h4>
<div class="paragraph">
<p>For more information, see the Vulkan Specification at URL</p>
</div>
<div class="paragraph">
<p><a href="https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VkAccessFlagBits" class="bare">https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VkAccessFlagBits</a></p>
</div>
<div class="paragraph">
<p>This page is extracted from the Vulkan Specification.
Fixes and changes should be made to the Specification, not directly.</p>
</div>
<div style="page-break-after: always;"></div>
</div>
</div>
<div class="sect2">
<h3 id="_vkattachmentdescriptionflagbits3">VkAttachmentDescriptionFlagBits(3)</h3>
<div class="sect3">
<h4 id="_name_801">Name</h4>
<div class="paragraph">
<p>VkAttachmentDescriptionFlagBits - Bitmask specifying additional properties of an attachment</p>
</div>
</div>
<div class="sect3">
<h4 id="_c_specification_801">C Specification</h4>
<div class="paragraph">
<p>Bits which <strong class="purple">can</strong> be set in <a href="#VkAttachmentDescription">VkAttachmentDescription</a>::<code>flags</code>
describing additional properties of the attachment are:</p>
</div>
<div id="VkAttachmentDescriptionFlagBits" class="listingblock">
<div class="content">
<pre class="highlight"><code class="language-c++" data-lang="c++">typedef enum VkAttachmentDescriptionFlagBits {
    VK_ATTACHMENT_DESCRIPTION_MAY_ALIAS_BIT = 0x00000001,
    VK_ATTACHMENT_DESCRIPTION_FLAG_BITS_MAX_ENUM = 0x7FFFFFFF
} VkAttachmentDescriptionFlagBits;</code></pre>
</div>
</div>
</div>
<div class="sect3">
<h4 id="_description_801">Description</h4>
<div class="ulist">
<ul>
<li>
<p><code>VK_ATTACHMENT_DESCRIPTION_MAY_ALIAS_BIT</code> specifies that the
attachment aliases the same device memory as other attachments.</p>
</li>
</ul>
</div>
</div>
<div class="sect3">
<h4 id="_see_also_801">See Also</h4>
<div class="paragraph">
<p><a href="#VkAttachmentDescriptionFlags">VkAttachmentDescriptionFlags</a></p>
</div>
</div>
<div class="sect3">
<h4 id="_document_notes_801">Document Notes</h4>
<div class="paragraph">
<p>For more information, see the Vulkan Specification at URL</p>
</div>
<div class="paragraph">
<p><a href="https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VkAttachmentDescriptionFlagBits" class="bare">https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VkAttachmentDescriptionFlagBits</a></p>
</div>
<div class="paragraph">
<p>This page is extracted from the Vulkan Specification.
Fixes and changes should be made to the Specification, not directly.</p>
</div>
<div style="page-break-after: always;"></div>
</div>
</div>
<div class="sect2">
<h3 id="_vkattachmentloadop3">VkAttachmentLoadOp(3)</h3>
<div class="sect3">
<h4 id="_name_802">Name</h4>
<div class="paragraph">
<p>VkAttachmentLoadOp - Specify how contents of an attachment are treated at the beginning of a subpass</p>
</div>
</div>
<div class="sect3">
<h4 id="_c_specification_802">C Specification</h4>
<div class="paragraph">
<p>Possible values of <a href="#VkAttachmentDescription">VkAttachmentDescription</a>::<code>loadOp</code> and
<code>stencilLoadOp</code>, specifying how the contents of the attachment are
treated, are:</p>
</div>
<div id="VkAttachmentLoadOp" class="listingblock">
<div class="content">
<pre class="highlight"><code class="language-c++" data-lang="c++">typedef enum VkAttachmentLoadOp {
    VK_ATTACHMENT_LOAD_OP_LOAD = 0,
    VK_ATTACHMENT_LOAD_OP_CLEAR = 1,
    VK_ATTACHMENT_LOAD_OP_DONT_CARE = 2,
    VK_ATTACHMENT_LOAD_OP_MAX_ENUM = 0x7FFFFFFF
} VkAttachmentLoadOp;</code></pre>
</div>
</div>
</div>
<div class="sect3">
<h4 id="_description_802">Description</h4>
<div class="ulist">
<ul>
<li>
<p><code>VK_ATTACHMENT_LOAD_OP_LOAD</code> specifies that the previous contents of
the image within the render area will be preserved.
For attachments with a depth/stencil format, this uses the access type
<code>VK_ACCESS_DEPTH_STENCIL_ATTACHMENT_READ_BIT</code>.
For attachments with a color format, this uses the access type
<code>VK_ACCESS_COLOR_ATTACHMENT_READ_BIT</code>.</p>
</li>
<li>
<p><code>VK_ATTACHMENT_LOAD_OP_CLEAR</code> specifies that the contents within the
render area will be cleared to a uniform value, which is specified when
a render pass instance is begun.
For attachments with a depth/stencil format, this uses the access type
<code>VK_ACCESS_DEPTH_STENCIL_ATTACHMENT_WRITE_BIT</code>.
For attachments with a color format, this uses the access type
<code>VK_ACCESS_COLOR_ATTACHMENT_WRITE_BIT</code>.</p>
</li>
<li>
<p><code>VK_ATTACHMENT_LOAD_OP_DONT_CARE</code> specifies that the previous
contents within the area need not be preserved; the contents of the
attachment will be undefined inside the render area.
For attachments with a depth/stencil format, this uses the access type
<code>VK_ACCESS_DEPTH_STENCIL_ATTACHMENT_WRITE_BIT</code>.
For attachments with a color format, this uses the access type
<code>VK_ACCESS_COLOR_ATTACHMENT_WRITE_BIT</code>.</p>
</li>
</ul>
</div>
</div>
<div class="sect3">
<h4 id="_see_also_802">See Also</h4>
<div class="paragraph">
<p><a href="#VkAttachmentDescription">VkAttachmentDescription</a>, <a href="#VkAttachmentDescription2KHR">VkAttachmentDescription2KHR</a></p>
</div>
</div>
<div class="sect3">
<h4 id="_document_notes_802">Document Notes</h4>
<div class="paragraph">
<p>For more information, see the Vulkan Specification at URL</p>
</div>
<div class="paragraph">
<p><a href="https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VkAttachmentLoadOp" class="bare">https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VkAttachmentLoadOp</a></p>
</div>
<div class="paragraph">
<p>This page is extracted from the Vulkan Specification.
Fixes and changes should be made to the Specification, not directly.</p>
</div>
<div style="page-break-after: always;"></div>
</div>
</div>
<div class="sect2">
<h3 id="_vkattachmentstoreop3">VkAttachmentStoreOp(3)</h3>
<div class="sect3">
<h4 id="_name_803">Name</h4>
<div class="paragraph">
<p>VkAttachmentStoreOp - Specify how contents of an attachment are treated at the end of a subpass</p>
</div>
</div>
<div class="sect3">
<h4 id="_c_specification_803">C Specification</h4>
<div class="paragraph">
<p>Possible values of <a href="#VkAttachmentDescription">VkAttachmentDescription</a>::<code>storeOp</code> and
<code>stencilStoreOp</code>, specifying how the contents of the attachment are
treated, are:</p>
</div>
<div id="VkAttachmentStoreOp" class="listingblock">
<div class="content">
<pre class="highlight"><code class="language-c++" data-lang="c++">typedef enum VkAttachmentStoreOp {
    VK_ATTACHMENT_STORE_OP_STORE = 0,
    VK_ATTACHMENT_STORE_OP_DONT_CARE = 1,
    VK_ATTACHMENT_STORE_OP_MAX_ENUM = 0x7FFFFFFF
} VkAttachmentStoreOp;</code></pre>
</div>
</div>
</div>
<div class="sect3">
<h4 id="_description_803">Description</h4>
<div class="ulist">
<ul>
<li>
<p><code>VK_ATTACHMENT_STORE_OP_STORE</code> specifies the contents generated
during the render pass and within the render area are written to memory.
For attachments with a depth/stencil format, this uses the access type
<code>VK_ACCESS_DEPTH_STENCIL_ATTACHMENT_WRITE_BIT</code>.
For attachments with a color format, this uses the access type
<code>VK_ACCESS_COLOR_ATTACHMENT_WRITE_BIT</code>.</p>
</li>
<li>
<p><code>VK_ATTACHMENT_STORE_OP_DONT_CARE</code> specifies the contents within the
render area are not needed after rendering, and <strong class="purple">may</strong> be discarded; the
contents of the attachment will be undefined inside the render area.
For attachments with a depth/stencil format, this uses the access type
<code>VK_ACCESS_DEPTH_STENCIL_ATTACHMENT_WRITE_BIT</code>.
For attachments with a color format, this uses the access type
<code>VK_ACCESS_COLOR_ATTACHMENT_WRITE_BIT</code>.</p>
</li>
</ul>
</div>
</div>
<div class="sect3">
<h4 id="_see_also_803">See Also</h4>
<div class="paragraph">
<p><a href="#VkAttachmentDescription">VkAttachmentDescription</a>, <a href="#VkAttachmentDescription2KHR">VkAttachmentDescription2KHR</a></p>
</div>
</div>
<div class="sect3">
<h4 id="_document_notes_803">Document Notes</h4>
<div class="paragraph">
<p>For more information, see the Vulkan Specification at URL</p>
</div>
<div class="paragraph">
<p><a href="https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VkAttachmentStoreOp" class="bare">https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VkAttachmentStoreOp</a></p>
</div>
<div class="paragraph">
<p>This page is extracted from the Vulkan Specification.
Fixes and changes should be made to the Specification, not directly.</p>
</div>
<div style="page-break-after: always;"></div>
</div>
</div>
<div class="sect2">
<h3 id="_vkblendfactor3">VkBlendFactor(3)</h3>
<div class="sect3">
<h4 id="_name_804">Name</h4>
<div class="paragraph">
<p>VkBlendFactor - Framebuffer blending factors</p>
</div>
</div>
<div class="sect3">
<h4 id="_c_specification_804">C Specification</h4>
<div class="paragraph">
<p>The source and destination color and alpha blending factors are selected
from the enum:</p>
</div>
<div id="VkBlendFactor" class="listingblock">
<div class="content">
<pre class="highlight"><code class="language-c++" data-lang="c++">typedef enum VkBlendFactor {
    VK_BLEND_FACTOR_ZERO = 0,
    VK_BLEND_FACTOR_ONE = 1,
    VK_BLEND_FACTOR_SRC_COLOR = 2,
    VK_BLEND_FACTOR_ONE_MINUS_SRC_COLOR = 3,
    VK_BLEND_FACTOR_DST_COLOR = 4,
    VK_BLEND_FACTOR_ONE_MINUS_DST_COLOR = 5,
    VK_BLEND_FACTOR_SRC_ALPHA = 6,
    VK_BLEND_FACTOR_ONE_MINUS_SRC_ALPHA = 7,
    VK_BLEND_FACTOR_DST_ALPHA = 8,
    VK_BLEND_FACTOR_ONE_MINUS_DST_ALPHA = 9,
    VK_BLEND_FACTOR_CONSTANT_COLOR = 10,
    VK_BLEND_FACTOR_ONE_MINUS_CONSTANT_COLOR = 11,
    VK_BLEND_FACTOR_CONSTANT_ALPHA = 12,
    VK_BLEND_FACTOR_ONE_MINUS_CONSTANT_ALPHA = 13,
    VK_BLEND_FACTOR_SRC_ALPHA_SATURATE = 14,
    VK_BLEND_FACTOR_SRC1_COLOR = 15,
    VK_BLEND_FACTOR_ONE_MINUS_SRC1_COLOR = 16,
    VK_BLEND_FACTOR_SRC1_ALPHA = 17,
    VK_BLEND_FACTOR_ONE_MINUS_SRC1_ALPHA = 18,
    VK_BLEND_FACTOR_MAX_ENUM = 0x7FFFFFFF
} VkBlendFactor;</code></pre>
</div>
</div>
</div>
<div class="sect3">
<h4 id="_description_804">Description</h4>
<div class="paragraph">
<p>The semantics of each enum value is described in the table below:</p>
</div>
<table class="tableblock frame-all grid-all stretch">
<caption class="title">Table 13. Blend Factors</caption>
<colgroup>
<col style="width: 59%;" />
<col style="width: 28%;" />
<col style="width: 13%;" />
</colgroup>
<thead>
<tr>
<th class="tableblock halign-left valign-top"><a href="#VkBlendFactor">VkBlendFactor</a></th>
<th class="tableblock halign-left valign-top">RGB Blend Factors <span class="eq">(S<sub>r</sub>,S<sub>g</sub>,S<sub>b</sub>)</span> or <span class="eq">(D<sub>r</sub>,D<sub>g</sub>,D<sub>b</sub>)</span></th>
<th class="tableblock halign-left valign-top">Alpha Blend Factor (<span class="eq">S<sub>a</sub></span> or <span class="eq">D<sub>a</sub></span>)</th>
</tr>
</thead>
<tbody>
<tr>
<td class="tableblock halign-left valign-top"><p class="tableblock"><code>VK_BLEND_FACTOR_ZERO</code></p></td>
<td class="tableblock halign-left valign-top"><p class="tableblock"><span class="eq">(0,0,0)</span></p></td>
<td class="tableblock halign-left valign-top"><p class="tableblock"><span class="eq">0</span></p></td>
</tr>
<tr>
<td class="tableblock halign-left valign-top"><p class="tableblock"><code>VK_BLEND_FACTOR_ONE</code></p></td>
<td class="tableblock halign-left valign-top"><p class="tableblock"><span class="eq">(1,1,1)</span></p></td>
<td class="tableblock halign-left valign-top"><p class="tableblock"><span class="eq">1</span></p></td>
</tr>
<tr>
<td class="tableblock halign-left valign-top"><p class="tableblock"><code>VK_BLEND_FACTOR_SRC_COLOR</code></p></td>
<td class="tableblock halign-left valign-top"><p class="tableblock"><span class="eq">(R<sub>s0</sub>,G<sub>s0</sub>,B<sub>s0</sub>)</span></p></td>
<td class="tableblock halign-left valign-top"><p class="tableblock"><span class="eq">A<sub>s0</sub></span></p></td>
</tr>
<tr>
<td class="tableblock halign-left valign-top"><p class="tableblock"><code>VK_BLEND_FACTOR_ONE_MINUS_SRC_COLOR</code></p></td>
<td class="tableblock halign-left valign-top"><p class="tableblock"><span class="eq">(1-R<sub>s0</sub>,1-G<sub>s0</sub>,1-B<sub>s0</sub>)</span></p></td>
<td class="tableblock halign-left valign-top"><p class="tableblock"><span class="eq">1-A<sub>s0</sub></span></p></td>
</tr>
<tr>
<td class="tableblock halign-left valign-top"><p class="tableblock"><code>VK_BLEND_FACTOR_DST_COLOR</code></p></td>
<td class="tableblock halign-left valign-top"><p class="tableblock"><span class="eq">(R<sub>d</sub>,G<sub>d</sub>,B<sub>d</sub>)</span></p></td>
<td class="tableblock halign-left valign-top"><p class="tableblock"><span class="eq">A<sub>d</sub></span></p></td>
</tr>
<tr>
<td class="tableblock halign-left valign-top"><p class="tableblock"><code>VK_BLEND_FACTOR_ONE_MINUS_DST_COLOR</code></p></td>
<td class="tableblock halign-left valign-top"><p class="tableblock"><span class="eq">(1-R<sub>d</sub>,1-G<sub>d</sub>,1-B<sub>d</sub>)</span></p></td>
<td class="tableblock halign-left valign-top"><p class="tableblock"><span class="eq">1-A<sub>d</sub></span></p></td>
</tr>
<tr>
<td class="tableblock halign-left valign-top"><p class="tableblock"><code>VK_BLEND_FACTOR_SRC_ALPHA</code></p></td>
<td class="tableblock halign-left valign-top"><p class="tableblock"><span class="eq">(A<sub>s0</sub>,A<sub>s0</sub>,A<sub>s0</sub>)</span></p></td>
<td class="tableblock halign-left valign-top"><p class="tableblock"><span class="eq">A<sub>s0</sub></span></p></td>
</tr>
<tr>
<td class="tableblock halign-left valign-top"><p class="tableblock"><code>VK_BLEND_FACTOR_ONE_MINUS_SRC_ALPHA</code></p></td>
<td class="tableblock halign-left valign-top"><p class="tableblock"><span class="eq">(1-A<sub>s0</sub>,1-A<sub>s0</sub>,1-A<sub>s0</sub>)</span></p></td>
<td class="tableblock halign-left valign-top"><p class="tableblock"><span class="eq">1-A<sub>s0</sub></span></p></td>
</tr>
<tr>
<td class="tableblock halign-left valign-top"><p class="tableblock"><code>VK_BLEND_FACTOR_DST_ALPHA</code></p></td>
<td class="tableblock halign-left valign-top"><p class="tableblock"><span class="eq">(A<sub>d</sub>,A<sub>d</sub>,A<sub>d</sub>)</span></p></td>
<td class="tableblock halign-left valign-top"><p class="tableblock"><span class="eq">A<sub>d</sub></span></p></td>
</tr>
<tr>
<td class="tableblock halign-left valign-top"><p class="tableblock"><code>VK_BLEND_FACTOR_ONE_MINUS_DST_ALPHA</code></p></td>
<td class="tableblock halign-left valign-top"><p class="tableblock"><span class="eq">(1-A<sub>d</sub>,1-A<sub>d</sub>,1-A<sub>d</sub>)</span></p></td>
<td class="tableblock halign-left valign-top"><p class="tableblock"><span class="eq">1-A<sub>d</sub></span></p></td>
</tr>
<tr>
<td class="tableblock halign-left valign-top"><p class="tableblock"><code>VK_BLEND_FACTOR_CONSTANT_COLOR</code></p></td>
<td class="tableblock halign-left valign-top"><p class="tableblock"><span class="eq">(R<sub>c</sub>,G<sub>c</sub>,B<sub>c</sub>)</span></p></td>
<td class="tableblock halign-left valign-top"><p class="tableblock"><span class="eq">A<sub>c</sub></span></p></td>
</tr>
<tr>
<td class="tableblock halign-left valign-top"><p class="tableblock"><code>VK_BLEND_FACTOR_ONE_MINUS_CONSTANT_COLOR</code></p></td>
<td class="tableblock halign-left valign-top"><p class="tableblock"><span class="eq">(1-R<sub>c</sub>,1-G<sub>c</sub>,1-B<sub>c</sub>)</span></p></td>
<td class="tableblock halign-left valign-top"><p class="tableblock"><span class="eq">1-A<sub>c</sub></span></p></td>
</tr>
<tr>
<td class="tableblock halign-left valign-top"><p class="tableblock"><code>VK_BLEND_FACTOR_CONSTANT_ALPHA</code></p></td>
<td class="tableblock halign-left valign-top"><p class="tableblock"><span class="eq">(A<sub>c</sub>,A<sub>c</sub>,A<sub>c</sub>)</span></p></td>
<td class="tableblock halign-left valign-top"><p class="tableblock"><span class="eq">A<sub>c</sub></span></p></td>
</tr>
<tr>
<td class="tableblock halign-left valign-top"><p class="tableblock"><code>VK_BLEND_FACTOR_ONE_MINUS_CONSTANT_ALPHA</code></p></td>
<td class="tableblock halign-left valign-top"><p class="tableblock"><span class="eq">(1-A<sub>c</sub>,1-A<sub>c</sub>,1-A<sub>c</sub>)</span></p></td>
<td class="tableblock halign-left valign-top"><p class="tableblock"><span class="eq">1-A<sub>c</sub></span></p></td>
</tr>
<tr>
<td class="tableblock halign-left valign-top"><p class="tableblock"><code>VK_BLEND_FACTOR_SRC_ALPHA_SATURATE</code></p></td>
<td class="tableblock halign-left valign-top"><p class="tableblock"><span class="eq">(f,f,f)</span>; <span class="eq">f = min(A<sub>s0</sub>,1-A<sub>d</sub>)</span></p></td>
<td class="tableblock halign-left valign-top"><p class="tableblock"><span class="eq">1</span></p></td>
</tr>
<tr>
<td class="tableblock halign-left valign-top"><p class="tableblock"><code>VK_BLEND_FACTOR_SRC1_COLOR</code></p></td>
<td class="tableblock halign-left valign-top"><p class="tableblock"><span class="eq">(R<sub>s1</sub>,G<sub>s1</sub>,B<sub>s1</sub>)</span></p></td>
<td class="tableblock halign-left valign-top"><p class="tableblock"><span class="eq">A<sub>s1</sub></span></p></td>
</tr>
<tr>
<td class="tableblock halign-left valign-top"><p class="tableblock"><code>VK_BLEND_FACTOR_ONE_MINUS_SRC1_COLOR</code></p></td>
<td class="tableblock halign-left valign-top"><p class="tableblock"><span class="eq">(1-R<sub>s1</sub>,1-G<sub>s1</sub>,1-B<sub>s1</sub>)</span></p></td>
<td class="tableblock halign-left valign-top"><p class="tableblock"><span class="eq">1-A<sub>s1</sub></span></p></td>
</tr>
<tr>
<td class="tableblock halign-left valign-top"><p class="tableblock"><code>VK_BLEND_FACTOR_SRC1_ALPHA</code></p></td>
<td class="tableblock halign-left valign-top"><p class="tableblock"><span class="eq">(A<sub>s1</sub>,A<sub>s1</sub>,A<sub>s1</sub>)</span></p></td>
<td class="tableblock halign-left valign-top"><p class="tableblock"><span class="eq">A<sub>s1</sub></span></p></td>
</tr>
<tr>
<td class="tableblock halign-left valign-top"><p class="tableblock"><code>VK_BLEND_FACTOR_ONE_MINUS_SRC1_ALPHA</code></p></td>
<td class="tableblock halign-left valign-top"><p class="tableblock"><span class="eq">(1-A<sub>s1</sub>,1-A<sub>s1</sub>,1-A<sub>s1</sub>)</span></p></td>
<td class="tableblock halign-left valign-top"><p class="tableblock"><span class="eq">1-A<sub>s1</sub></span></p></td>
</tr>
</tbody>
</table>
<div class="paragraph">
<p>In this table, the following conventions are used:</p>
</div>
<div class="ulist">
<ul>
<li>
<p><span class="eq">R<sub>s0</sub>,G<sub>s0</sub>,B<sub>s0</sub></span> and <span class="eq">A<sub>s0</sub></span> represent the first source color
R, G, B, and A components, respectively, for the fragment output
location corresponding to the color attachment being blended.</p>
</li>
<li>
<p><span class="eq">R<sub>s1</sub>,G<sub>s1</sub>,B<sub>s1</sub></span> and <span class="eq">A<sub>s1</sub></span> represent the second source
color R, G, B, and A components, respectively, used in dual source
blending modes, for the fragment output location corresponding to the
color attachment being blended.</p>
</li>
<li>
<p><span class="eq">R<sub>d</sub>,G<sub>d</sub>,B<sub>d</sub></span> and <span class="eq">A<sub>d</sub></span> represent the R, G, B, and A
components of the destination color.
That is, the color currently in the corresponding color attachment for
this fragment/sample.</p>
</li>
<li>
<p><span class="eq">R<sub>c</sub>,G<sub>c</sub>,B<sub>c</sub></span> and <span class="eq">A<sub>c</sub></span> represent the blend constant R, G,
B, and A components, respectively.</p>
</li>
</ul>
</div>
</div>
<div class="sect3">
<h4 id="_see_also_804">See Also</h4>
<div class="paragraph">
<p><a href="#VkPipelineColorBlendAttachmentState">VkPipelineColorBlendAttachmentState</a></p>
</div>
</div>
<div class="sect3">
<h4 id="_document_notes_804">Document Notes</h4>
<div class="paragraph">
<p>For more information, see the Vulkan Specification at URL</p>
</div>
<div class="paragraph">
<p><a href="https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VkBlendFactor" class="bare">https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VkBlendFactor</a></p>
</div>
<div class="paragraph">
<p>This page is extracted from the Vulkan Specification.
Fixes and changes should be made to the Specification, not directly.</p>
</div>
<div style="page-break-after: always;"></div>
</div>
</div>
<div class="sect2">
<h3 id="_vkblendop3">VkBlendOp(3)</h3>
<div class="sect3">
<h4 id="_name_805">Name</h4>
<div class="paragraph">
<p>VkBlendOp - Framebuffer blending operations</p>
</div>
</div>
<div class="sect3">
<h4 id="_c_specification_805">C Specification</h4>
<div class="paragraph">
<p>Once the source and destination blend factors have been selected, they along
with the source and destination components are passed to the blending
operations.
RGB and alpha components <strong class="purple">can</strong> use different operations.
Possible values of <a href="#VkBlendOp">VkBlendOp</a>, specifying the operations, are:</p>
</div>
<div id="VkBlendOp" class="listingblock">
<div class="content">
<pre class="highlight"><code class="language-c++" data-lang="c++">typedef enum VkBlendOp {
    VK_BLEND_OP_ADD = 0,
    VK_BLEND_OP_SUBTRACT = 1,
    VK_BLEND_OP_REVERSE_SUBTRACT = 2,
    VK_BLEND_OP_MIN = 3,
    VK_BLEND_OP_MAX = 4,
    VK_BLEND_OP_ZERO_EXT = 1000148000,
    VK_BLEND_OP_SRC_EXT = 1000148001,
    VK_BLEND_OP_DST_EXT = 1000148002,
    VK_BLEND_OP_SRC_OVER_EXT = 1000148003,
    VK_BLEND_OP_DST_OVER_EXT = 1000148004,
    VK_BLEND_OP_SRC_IN_EXT = 1000148005,
    VK_BLEND_OP_DST_IN_EXT = 1000148006,
    VK_BLEND_OP_SRC_OUT_EXT = 1000148007,
    VK_BLEND_OP_DST_OUT_EXT = 1000148008,
    VK_BLEND_OP_SRC_ATOP_EXT = 1000148009,
    VK_BLEND_OP_DST_ATOP_EXT = 1000148010,
    VK_BLEND_OP_XOR_EXT = 1000148011,
    VK_BLEND_OP_MULTIPLY_EXT = 1000148012,
    VK_BLEND_OP_SCREEN_EXT = 1000148013,
    VK_BLEND_OP_OVERLAY_EXT = 1000148014,
    VK_BLEND_OP_DARKEN_EXT = 1000148015,
    VK_BLEND_OP_LIGHTEN_EXT = 1000148016,
    VK_BLEND_OP_COLORDODGE_EXT = 1000148017,
    VK_BLEND_OP_COLORBURN_EXT = 1000148018,
    VK_BLEND_OP_HARDLIGHT_EXT = 1000148019,
    VK_BLEND_OP_SOFTLIGHT_EXT = 1000148020,
    VK_BLEND_OP_DIFFERENCE_EXT = 1000148021,
    VK_BLEND_OP_EXCLUSION_EXT = 1000148022,
    VK_BLEND_OP_INVERT_EXT = 1000148023,
    VK_BLEND_OP_INVERT_RGB_EXT = 1000148024,
    VK_BLEND_OP_LINEARDODGE_EXT = 1000148025,
    VK_BLEND_OP_LINEARBURN_EXT = 1000148026,
    VK_BLEND_OP_VIVIDLIGHT_EXT = 1000148027,
    VK_BLEND_OP_LINEARLIGHT_EXT = 1000148028,
    VK_BLEND_OP_PINLIGHT_EXT = 1000148029,
    VK_BLEND_OP_HARDMIX_EXT = 1000148030,
    VK_BLEND_OP_HSL_HUE_EXT = 1000148031,
    VK_BLEND_OP_HSL_SATURATION_EXT = 1000148032,
    VK_BLEND_OP_HSL_COLOR_EXT = 1000148033,
    VK_BLEND_OP_HSL_LUMINOSITY_EXT = 1000148034,
    VK_BLEND_OP_PLUS_EXT = 1000148035,
    VK_BLEND_OP_PLUS_CLAMPED_EXT = 1000148036,
    VK_BLEND_OP_PLUS_CLAMPED_ALPHA_EXT = 1000148037,
    VK_BLEND_OP_PLUS_DARKER_EXT = 1000148038,
    VK_BLEND_OP_MINUS_EXT = 1000148039,
    VK_BLEND_OP_MINUS_CLAMPED_EXT = 1000148040,
    VK_BLEND_OP_CONTRAST_EXT = 1000148041,
    VK_BLEND_OP_INVERT_OVG_EXT = 1000148042,
    VK_BLEND_OP_RED_EXT = 1000148043,
    VK_BLEND_OP_GREEN_EXT = 1000148044,
    VK_BLEND_OP_BLUE_EXT = 1000148045,
    VK_BLEND_OP_MAX_ENUM = 0x7FFFFFFF
} VkBlendOp;</code></pre>
</div>
</div>
</div>
<div class="sect3">
<h4 id="_description_805">Description</h4>
<div style="page-break-after: always;"></div>
<div class="paragraph">
<p>The semantics of each basic blend operations is described in the table
below:</p>
</div>
<table class="tableblock frame-all grid-all stretch">
<caption class="title">Table 14. Basic Blend Operations</caption>
<colgroup>
<col style="width: 45%;" />
<col style="width: 30%;" />
<col style="width: 25%;" />
</colgroup>
<thead>
<tr>
<th class="tableblock halign-left valign-top"><a href="#VkBlendOp">VkBlendOp</a></th>
<th class="tableblock halign-left valign-top">RGB Components</th>
<th class="tableblock halign-left valign-top">Alpha Component</th>
</tr>
</thead>
<tbody>
<tr>
<td class="tableblock halign-left valign-top"><p class="tableblock"><code>VK_BLEND_OP_ADD</code></p></td>
<td class="tableblock halign-left valign-top"><p class="tableblock"><span class="eq">R = R<sub>s0</sub> × S<sub>r</sub> +  R<sub>d</sub> × D<sub>r</sub></span><br />
  <span class="eq">G = G<sub>s0</sub> × S<sub>g</sub> +  G<sub>d</sub> × D<sub>g</sub></span><br />
  <span class="eq">B = B<sub>s0</sub> × S<sub>b</sub> +  B<sub>d</sub> × D<sub>b</sub></span></p></td>
<td class="tableblock halign-left valign-top"><p class="tableblock"><span class="eq">A = A<sub>s0</sub> × S<sub>a</sub> +  A<sub>d</sub> × D<sub>a</sub></span></p></td>
</tr>
<tr>
<td class="tableblock halign-left valign-top"><p class="tableblock"><code>VK_BLEND_OP_SUBTRACT</code></p></td>
<td class="tableblock halign-left valign-top"><p class="tableblock"><span class="eq">R = R<sub>s0</sub> × S<sub>r</sub> - R<sub>d</sub> × D<sub>r</sub></span><br />
  <span class="eq">G = G<sub>s0</sub> × S<sub>g</sub> - G<sub>d</sub> × D<sub>g</sub></span><br />
  <span class="eq">B = B<sub>s0</sub> × S<sub>b</sub> - B<sub>d</sub> × D<sub>b</sub></span></p></td>
<td class="tableblock halign-left valign-top"><p class="tableblock"><span class="eq">A = A<sub>s0</sub> × S<sub>a</sub> - A<sub>d</sub> × D<sub>a</sub></span></p></td>
</tr>
<tr>
<td class="tableblock halign-left valign-top"><p class="tableblock"><code>VK_BLEND_OP_REVERSE_SUBTRACT</code></p></td>
<td class="tableblock halign-left valign-top"><p class="tableblock"><span class="eq">R = R<sub>d</sub> × D<sub>r</sub> - R<sub>s0</sub> × S<sub>r</sub></span><br />
  <span class="eq">G = G<sub>d</sub> × D<sub>g</sub> - G<sub>s0</sub> × S<sub>g</sub></span><br />
  <span class="eq">B = B<sub>d</sub> × D<sub>b</sub> - B<sub>s0</sub> × S<sub>b</sub></span></p></td>
<td class="tableblock halign-left valign-top"><p class="tableblock"><span class="eq">A = A<sub>d</sub> × D<sub>a</sub> - A<sub>s0</sub> × S<sub>a</sub></span></p></td>
</tr>
<tr>
<td class="tableblock halign-left valign-top"><p class="tableblock"><code>VK_BLEND_OP_MIN</code></p></td>
<td class="tableblock halign-left valign-top"><p class="tableblock"><span class="eq">R = min(R<sub>s0</sub>,R<sub>d</sub>)</span><br />
  <span class="eq">G = min(G<sub>s0</sub>,G<sub>d</sub>)</span><br />
  <span class="eq">B = min(B<sub>s0</sub>,B<sub>d</sub>)</span></p></td>
<td class="tableblock halign-left valign-top"><p class="tableblock"><span class="eq">A = min(A<sub>s0</sub>,A<sub>d</sub>)</span></p></td>
</tr>
<tr>
<td class="tableblock halign-left valign-top"><p class="tableblock"><code>VK_BLEND_OP_MAX</code></p></td>
<td class="tableblock halign-left valign-top"><p class="tableblock"><span class="eq">R = max(R<sub>s0</sub>,R<sub>d</sub>)</span><br />
  <span class="eq">G = max(G<sub>s0</sub>,G<sub>d</sub>)</span><br />
  <span class="eq">B = max(B<sub>s0</sub>,B<sub>d</sub>)</span></p></td>
<td class="tableblock halign-left valign-top"><p class="tableblock"><span class="eq">A = max(A<sub>s0</sub>,A<sub>d</sub>)</span></p></td>
</tr>
</tbody>
</table>
<div class="paragraph">
<p>In this table, the following conventions are used:</p>
</div>
<div class="ulist">
<ul>
<li>
<p><span class="eq">R<sub>s0</sub>, G<sub>s0</sub>, B<sub>s0</sub></span> and <span class="eq">A<sub>s0</sub></span> represent the first source
color R, G, B, and A components, respectively.</p>
</li>
<li>
<p><span class="eq">R<sub>d</sub>, G<sub>d</sub>, B<sub>d</sub></span> and <span class="eq">A<sub>d</sub></span> represent the R, G, B, and A
components of the destination color.
That is, the color currently in the corresponding color attachment for
this fragment/sample.</p>
</li>
<li>
<p><span class="eq">S<sub>r</sub>, S<sub>g</sub>, S<sub>b</sub></span> and <span class="eq">S<sub>a</sub></span> represent the source blend factor
R, G, B, and A components, respectively.</p>
</li>
<li>
<p><span class="eq">D<sub>r</sub>, D<sub>g</sub>, D<sub>b</sub></span> and <span class="eq">D<sub>a</sub></span> represent the destination blend
factor R, G, B, and A components, respectively.</p>
</li>
</ul>
</div>
<div class="paragraph">
<p>The blending operation produces a new set of values <span class="eq">R, G, B</span> and
<span class="eq">A</span>, which are written to the framebuffer attachment.
If blending is not enabled for this attachment, then <span class="eq">R, G, B</span> and
<span class="eq">A</span> are assigned <span class="eq">R<sub>s0</sub>, G<sub>s0</sub>, B<sub>s0</sub></span> and <span class="eq">A<sub>s0</sub></span>,
respectively.</p>
</div>
<div class="paragraph">
<p>If the color attachment is fixed-point, the components of the source and
destination values and blend factors are each clamped to <span class="eq">[0,1]</span> or
<span class="eq">[-1,1]</span> respectively for an unsigned normalized or signed normalized
color attachment prior to evaluating the blend operations.
If the color attachment is floating-point, no clamping occurs.</p>
</div>
</div>
<div class="sect3">
<h4 id="_see_also_805">See Also</h4>
<div class="paragraph">
<p><a href="#VkPipelineColorBlendAttachmentState">VkPipelineColorBlendAttachmentState</a></p>
</div>
</div>
<div class="sect3">
<h4 id="_document_notes_805">Document Notes</h4>
<div class="paragraph">
<p>For more information, see the Vulkan Specification at URL</p>
</div>
<div class="paragraph">
<p><a href="https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VkBlendOp" class="bare">https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VkBlendOp</a></p>
</div>
<div class="paragraph">
<p>This page is extracted from the Vulkan Specification.
Fixes and changes should be made to the Specification, not directly.</p>
</div>
<div style="page-break-after: always;"></div>
</div>
</div>
<div class="sect2">
<h3 id="_vkblendoverlapext3">VkBlendOverlapEXT(3)</h3>
<div class="sect3">
<h4 id="_name_806">Name</h4>
<div class="paragraph">
<p>VkBlendOverlapEXT - Enumerant specifying the blend overlap parameter</p>
</div>
</div>
<div class="sect3">
<h4 id="_c_specification_806">C Specification</h4>
<div class="paragraph">
<p>When blending using advanced blend operations, we expect that the R, G, and
B components of premultiplied source and destination color inputs be stored
as the product of non-premultiplied R, G, and B component values and the A
component of the color.
If any R, G, or B component of a premultiplied input color is non-zero and
the A component is zero, the color is considered ill-formed, and the
corresponding component of the blend result is undefined.</p>
</div>
<div class="paragraph">
<p>The weighting functions <span class="eq">p<sub>0</sub></span>, <span class="eq">p<sub>1</sub></span>, and <span class="eq">p<sub>2</sub></span> are defined
in table <a href="vkspec.html#framebuffer-blend-advanced-overlap-modes">Advanced Blend Overlap
Modes</a>.
In these functions, the A components of the source and destination colors
are taken to indicate the portion of the pixel covered by the fragment
(source) and the fragments previously accumulated in the pixel
(destination).
The functions <span class="eq">p<sub>0</sub></span>, <span class="eq">p<sub>1</sub></span>, and <span class="eq">p<sub>2</sub></span> approximate the
relative portion of the pixel covered by the intersection of the source and
destination, covered only by the source, and covered only by the
destination, respectively.</p>
</div>
<div class="paragraph">
<p>Possible values of
<a href="#VkPipelineColorBlendAdvancedStateCreateInfoEXT">VkPipelineColorBlendAdvancedStateCreateInfoEXT</a>::<code>blendOverlap</code>,
specifying the blend overlap functions, are:</p>
</div>
<div id="VkBlendOverlapEXT" class="listingblock">
<div class="content">
<pre class="highlight"><code class="language-c++" data-lang="c++">typedef enum VkBlendOverlapEXT {
    VK_BLEND_OVERLAP_UNCORRELATED_EXT = 0,
    VK_BLEND_OVERLAP_DISJOINT_EXT = 1,
    VK_BLEND_OVERLAP_CONJOINT_EXT = 2,
    VK_BLEND_OVERLAP_MAX_ENUM_EXT = 0x7FFFFFFF
} VkBlendOverlapEXT;</code></pre>
</div>
</div>
</div>
<div class="sect3">
<h4 id="_description_806">Description</h4>
<div class="ulist">
<ul>
<li>
<p><code>VK_BLEND_OVERLAP_UNCORRELATED_EXT</code> specifies that there is no
correlation between the source and destination coverage.</p>
</li>
<li>
<p><code>VK_BLEND_OVERLAP_CONJOINT_EXT</code> specifies that the source and
destination coverage are considered to have maximal overlap.</p>
</li>
<li>
<p><code>VK_BLEND_OVERLAP_DISJOINT_EXT</code> specifies that the source and
destination coverage are considered to have minimal overlap.</p>
</li>
</ul>
</div>
<table id="framebuffer-blend-advanced-overlap-modes" class="tableblock frame-all grid-all" style="width: 80%;">
<caption class="title">Table 15. Advanced Blend Overlap Modes</caption>
<colgroup>
<col style="width: 50%;" />
<col style="width: 50%;" />
</colgroup>
<thead>
<tr>
<th class="tableblock halign-left valign-top">Overlap Mode</th>
<th class="tableblock halign-left valign-top">Weighting Equations</th>
</tr>
</thead>
<tbody>
<tr>
<td class="tableblock halign-left valign-top"><p class="tableblock"><code>VK_BLEND_OVERLAP_UNCORRELATED_EXT</code></p></td>
<td class="tableblock halign-left valign-top"><div class="content"><div class="stemblock">
<div class="content">
\[                                              \begin{aligned}
                                                p_0(A_s,A_d) &amp; = A_sA_d \\
                                                p_1(A_s,A_d) &amp; = A_s(1-A_d) \\
                                                p_2(A_s,A_d) &amp; = A_d(1-A_s) \\
                                              \end{aligned}\]
</div>
</div></div></td>
</tr>
<tr>
<td class="tableblock halign-left valign-top"><p class="tableblock"><code>VK_BLEND_OVERLAP_CONJOINT_EXT</code></p></td>
<td class="tableblock halign-left valign-top"><div class="content"><div class="stemblock">
<div class="content">
\[                                              \begin{aligned}
                                                p_0(A_s,A_d) &amp; = min(A_s,A_d) \\
                                                p_1(A_s,A_d) &amp; = max(A_s-A_d,0) \\
                                                p_2(A_s,A_d) &amp; = max(A_d-A_s,0) \\
                                              \end{aligned}\]
</div>
</div></div></td>
</tr>
<tr>
<td class="tableblock halign-left valign-top"><p class="tableblock"><code>VK_BLEND_OVERLAP_DISJOINT_EXT</code></p></td>
<td class="tableblock halign-left valign-top"><div class="content"><div class="stemblock">
<div class="content">
\[                                              \begin{aligned}
                                                p_0(A_s,A_d) &amp; = max(A_s+A_d-1,0) \\
                                                p_1(A_s,A_d) &amp; = min(A_s,1-A_d) \\
                                                p_2(A_s,A_d) &amp; = min(A_d,1-A_s) \\
                                              \end{aligned}\]
</div>
</div></div></td>
</tr>
</tbody>
</table>
</div>
<div class="sect3">
<h4 id="_see_also_806">See Also</h4>
<div class="paragraph">
<p><a href="#VkPipelineColorBlendAdvancedStateCreateInfoEXT">VkPipelineColorBlendAdvancedStateCreateInfoEXT</a></p>
</div>
</div>
<div class="sect3">
<h4 id="_document_notes_806">Document Notes</h4>
<div class="paragraph">
<p>For more information, see the Vulkan Specification at URL</p>
</div>
<div class="paragraph">
<p><a href="https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VkBlendOverlapEXT" class="bare">https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VkBlendOverlapEXT</a></p>
</div>
<div class="paragraph">
<p>This page is extracted from the Vulkan Specification.
Fixes and changes should be made to the Specification, not directly.</p>
</div>
<div style="page-break-after: always;"></div>
</div>
</div>
<div class="sect2">
<h3 id="_vkbordercolor3">VkBorderColor(3)</h3>
<div class="sect3">
<h4 id="_name_807">Name</h4>
<div class="paragraph">
<p>VkBorderColor - Specify border color used for texture lookups</p>
</div>
</div>
<div class="sect3">
<h4 id="_c_specification_807">C Specification</h4>
<div class="paragraph">
<p>Possible values of <a href="#VkSamplerCreateInfo">VkSamplerCreateInfo</a>::<code>borderColor</code>, specifying
the border color used for texture lookups, are:</p>
</div>
<div id="VkBorderColor" class="listingblock">
<div class="content">
<pre class="highlight"><code class="language-c++" data-lang="c++">typedef enum VkBorderColor {
    VK_BORDER_COLOR_FLOAT_TRANSPARENT_BLACK = 0,
    VK_BORDER_COLOR_INT_TRANSPARENT_BLACK = 1,
    VK_BORDER_COLOR_FLOAT_OPAQUE_BLACK = 2,
    VK_BORDER_COLOR_INT_OPAQUE_BLACK = 3,
    VK_BORDER_COLOR_FLOAT_OPAQUE_WHITE = 4,
    VK_BORDER_COLOR_INT_OPAQUE_WHITE = 5,
    VK_BORDER_COLOR_MAX_ENUM = 0x7FFFFFFF
} VkBorderColor;</code></pre>
</div>
</div>
</div>
<div class="sect3">
<h4 id="_description_807">Description</h4>
<div class="ulist">
<ul>
<li>
<p><code>VK_BORDER_COLOR_FLOAT_TRANSPARENT_BLACK</code> specifies a transparent,
floating-point format, black color.</p>
</li>
<li>
<p><code>VK_BORDER_COLOR_INT_TRANSPARENT_BLACK</code> specifies a transparent,
integer format, black color.</p>
</li>
<li>
<p><code>VK_BORDER_COLOR_FLOAT_OPAQUE_BLACK</code> specifies an opaque,
floating-point format, black color.</p>
</li>
<li>
<p><code>VK_BORDER_COLOR_INT_OPAQUE_BLACK</code> specifies an opaque, integer
format, black color.</p>
</li>
<li>
<p><code>VK_BORDER_COLOR_FLOAT_OPAQUE_WHITE</code> specifies an opaque,
floating-point format, white color.</p>
</li>
<li>
<p><code>VK_BORDER_COLOR_INT_OPAQUE_WHITE</code> specifies an opaque, integer
format, white color.</p>
</li>
</ul>
</div>
<div class="paragraph">
<p>These colors are described in detail in <a href="vkspec.html#textures-texel-replacement">Texel
Replacement</a>.</p>
</div>
</div>
<div class="sect3">
<h4 id="_see_also_807">See Also</h4>
<div class="paragraph">
<p><a href="#VkSamplerCreateInfo">VkSamplerCreateInfo</a></p>
</div>
</div>
<div class="sect3">
<h4 id="_document_notes_807">Document Notes</h4>
<div class="paragraph">
<p>For more information, see the Vulkan Specification at URL</p>
</div>
<div class="paragraph">
<p><a href="https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VkBorderColor" class="bare">https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VkBorderColor</a></p>
</div>
<div class="paragraph">
<p>This page is extracted from the Vulkan Specification.
Fixes and changes should be made to the Specification, not directly.</p>
</div>
<div style="page-break-after: always;"></div>
</div>
</div>
<div class="sect2">
<h3 id="_vkbuffercreateflagbits3">VkBufferCreateFlagBits(3)</h3>
<div class="sect3">
<h4 id="_name_808">Name</h4>
<div class="paragraph">
<p>VkBufferCreateFlagBits - Bitmask specifying additional parameters of a buffer</p>
</div>
</div>
<div class="sect3">
<h4 id="_c_specification_808">C Specification</h4>
<div class="paragraph">
<p>Bits which <strong class="purple">can</strong> be set in <a href="#VkBufferCreateInfo">VkBufferCreateInfo</a>::<code>flags</code>, specifying
additional parameters of a buffer, are:</p>
</div>
<div id="VkBufferCreateFlagBits" class="listingblock">
<div class="content">
<pre class="highlight"><code class="language-c++" data-lang="c++">typedef enum VkBufferCreateFlagBits {
    VK_BUFFER_CREATE_SPARSE_BINDING_BIT = 0x00000001,
    VK_BUFFER_CREATE_SPARSE_RESIDENCY_BIT = 0x00000002,
    VK_BUFFER_CREATE_SPARSE_ALIASED_BIT = 0x00000004,
    VK_BUFFER_CREATE_PROTECTED_BIT = 0x00000008,
    VK_BUFFER_CREATE_DEVICE_ADDRESS_CAPTURE_REPLAY_BIT_EXT = 0x00000010,
    VK_BUFFER_CREATE_FLAG_BITS_MAX_ENUM = 0x7FFFFFFF
} VkBufferCreateFlagBits;</code></pre>
</div>
</div>
</div>
<div class="sect3">
<h4 id="_description_808">Description</h4>
<div class="ulist">
<ul>
<li>
<p><code>VK_BUFFER_CREATE_SPARSE_BINDING_BIT</code> specifies that the buffer will
be backed using sparse memory binding.</p>
</li>
<li>
<p><code>VK_BUFFER_CREATE_SPARSE_RESIDENCY_BIT</code> specifies that the buffer
<strong class="purple">can</strong> be partially backed using sparse memory binding.
Buffers created with this flag <strong class="purple">must</strong> also be created with the
<code>VK_BUFFER_CREATE_SPARSE_BINDING_BIT</code> flag.</p>
</li>
<li>
<p><code>VK_BUFFER_CREATE_SPARSE_ALIASED_BIT</code> specifies that the buffer will
be backed using sparse memory binding with memory ranges that might also
simultaneously be backing another buffer (or another portion of the same
buffer).
Buffers created with this flag <strong class="purple">must</strong> also be created with the
<code>VK_BUFFER_CREATE_SPARSE_BINDING_BIT</code> flag.</p>
</li>
<li>
<p><code>VK_BUFFER_CREATE_PROTECTED_BIT</code> specifies that the buffer is a
protected buffer.</p>
</li>
<li>
<p><code>VK_BUFFER_CREATE_DEVICE_ADDRESS_CAPTURE_REPLAY_BIT_EXT</code> specifies
that the buffer&#8217;s address <strong class="purple">can</strong> be saved and reused on a subsequent run
(e.g. for trace capture and replay), see
<a href="#VkBufferDeviceAddressCreateInfoEXT">VkBufferDeviceAddressCreateInfoEXT</a> for more detail.</p>
</li>
</ul>
</div>
<div class="paragraph">
<p>See <a href="vkspec.html#sparsememory-sparseresourcefeatures">Sparse Resource Features</a> and
<a href="vkspec.html#features">Physical Device Features</a> for details of the sparse memory
features supported on a device.</p>
</div>
</div>
<div class="sect3">
<h4 id="_see_also_808">See Also</h4>
<div class="paragraph">
<p><a href="#VkBufferCreateFlags">VkBufferCreateFlags</a></p>
</div>
</div>
<div class="sect3">
<h4 id="_document_notes_808">Document Notes</h4>
<div class="paragraph">
<p>For more information, see the Vulkan Specification at URL</p>
</div>
<div class="paragraph">
<p><a href="https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VkBufferCreateFlagBits" class="bare">https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VkBufferCreateFlagBits</a></p>
</div>
<div class="paragraph">
<p>This page is extracted from the Vulkan Specification.
Fixes and changes should be made to the Specification, not directly.</p>
</div>
<div style="page-break-after: always;"></div>
</div>
</div>
<div class="sect2">
<h3 id="_vkbufferusageflagbits3">VkBufferUsageFlagBits(3)</h3>
<div class="sect3">
<h4 id="_name_809">Name</h4>
<div class="paragraph">
<p>VkBufferUsageFlagBits - Bitmask specifying allowed usage of a buffer</p>
</div>
</div>
<div class="sect3">
<h4 id="_c_specification_809">C Specification</h4>
<div class="paragraph">
<p>Bits which <strong class="purple">can</strong> be set in <a href="#VkBufferCreateInfo">VkBufferCreateInfo</a>::<code>usage</code>, specifying
usage behavior of a buffer, are:</p>
</div>
<div id="VkBufferUsageFlagBits" class="listingblock">
<div class="content">
<pre class="highlight"><code class="language-c++" data-lang="c++">typedef enum VkBufferUsageFlagBits {
    VK_BUFFER_USAGE_TRANSFER_SRC_BIT = 0x00000001,
    VK_BUFFER_USAGE_TRANSFER_DST_BIT = 0x00000002,
    VK_BUFFER_USAGE_UNIFORM_TEXEL_BUFFER_BIT = 0x00000004,
    VK_BUFFER_USAGE_STORAGE_TEXEL_BUFFER_BIT = 0x00000008,
    VK_BUFFER_USAGE_UNIFORM_BUFFER_BIT = 0x00000010,
    VK_BUFFER_USAGE_STORAGE_BUFFER_BIT = 0x00000020,
    VK_BUFFER_USAGE_INDEX_BUFFER_BIT = 0x00000040,
    VK_BUFFER_USAGE_VERTEX_BUFFER_BIT = 0x00000080,
    VK_BUFFER_USAGE_INDIRECT_BUFFER_BIT = 0x00000100,
    VK_BUFFER_USAGE_TRANSFORM_FEEDBACK_BUFFER_BIT_EXT = 0x00000800,
    VK_BUFFER_USAGE_TRANSFORM_FEEDBACK_COUNTER_BUFFER_BIT_EXT = 0x00001000,
    VK_BUFFER_USAGE_CONDITIONAL_RENDERING_BIT_EXT = 0x00000200,
    VK_BUFFER_USAGE_RAY_TRACING_BIT_NV = 0x00000400,
    VK_BUFFER_USAGE_SHADER_DEVICE_ADDRESS_BIT_EXT = 0x00020000,
    VK_BUFFER_USAGE_FLAG_BITS_MAX_ENUM = 0x7FFFFFFF
} VkBufferUsageFlagBits;</code></pre>
</div>
</div>
</div>
<div class="sect3">
<h4 id="_description_809">Description</h4>
<div class="ulist">
<ul>
<li>
<p><code>VK_BUFFER_USAGE_TRANSFER_SRC_BIT</code> specifies that the buffer <strong class="purple">can</strong> be
used as the source of a <em>transfer command</em> (see the definition of
<a href="vkspec.html#synchronization-pipeline-stages-transfer"><code>VK_PIPELINE_STAGE_TRANSFER_BIT</code></a>).</p>
</li>
<li>
<p><code>VK_BUFFER_USAGE_TRANSFER_DST_BIT</code> specifies that the buffer <strong class="purple">can</strong> be
used as the destination of a transfer command.</p>
</li>
<li>
<p><code>VK_BUFFER_USAGE_UNIFORM_TEXEL_BUFFER_BIT</code> specifies that the buffer
<strong class="purple">can</strong> be used to create a <code>VkBufferView</code> suitable for occupying a
<code>VkDescriptorSet</code> slot of type
<code>VK_DESCRIPTOR_TYPE_UNIFORM_TEXEL_BUFFER</code>.</p>
</li>
<li>
<p><code>VK_BUFFER_USAGE_STORAGE_TEXEL_BUFFER_BIT</code> specifies that the buffer
<strong class="purple">can</strong> be used to create a <code>VkBufferView</code> suitable for occupying a
<code>VkDescriptorSet</code> slot of type
<code>VK_DESCRIPTOR_TYPE_STORAGE_TEXEL_BUFFER</code>.</p>
</li>
<li>
<p><code>VK_BUFFER_USAGE_UNIFORM_BUFFER_BIT</code> specifies that the buffer <strong class="purple">can</strong>
be used in a <code>VkDescriptorBufferInfo</code> suitable for occupying a
<code>VkDescriptorSet</code> slot either of type
<code>VK_DESCRIPTOR_TYPE_UNIFORM_BUFFER</code> or
<code>VK_DESCRIPTOR_TYPE_UNIFORM_BUFFER_DYNAMIC</code>.</p>
</li>
<li>
<p><code>VK_BUFFER_USAGE_STORAGE_BUFFER_BIT</code> specifies that the buffer <strong class="purple">can</strong>
be used in a <code>VkDescriptorBufferInfo</code> suitable for occupying a
<code>VkDescriptorSet</code> slot either of type
<code>VK_DESCRIPTOR_TYPE_STORAGE_BUFFER</code> or
<code>VK_DESCRIPTOR_TYPE_STORAGE_BUFFER_DYNAMIC</code>.</p>
</li>
<li>
<p><code>VK_BUFFER_USAGE_INDEX_BUFFER_BIT</code> specifies that the buffer is
suitable for passing as the <code>buffer</code> parameter to
<code>vkCmdBindIndexBuffer</code>.</p>
</li>
<li>
<p><code>VK_BUFFER_USAGE_VERTEX_BUFFER_BIT</code> specifies that the buffer is
suitable for passing as an element of the <code>pBuffers</code> array to
<code>vkCmdBindVertexBuffers</code>.</p>
</li>
<li>
<p><code>VK_BUFFER_USAGE_INDIRECT_BUFFER_BIT</code> specifies that the buffer is
suitable for passing as the <code>buffer</code> parameter to
<code>vkCmdDrawIndirect</code>, <code>vkCmdDrawIndexedIndirect</code>,
<code>vkCmdDrawMeshTasksIndirectNV</code>,
<code>vkCmdDrawMeshTasksIndirectCountNV</code>,
or <code>vkCmdDispatchIndirect</code>.
It is also suitable for passing as the <code>buffer</code> member of
<code>VkIndirectCommandsTokenNVX</code>, or <code>sequencesCountBuffer</code> or
<code>sequencesIndexBuffer</code> member of <code>VkCmdProcessCommandsInfoNVX</code></p>
</li>
<li>
<p><code>VK_BUFFER_USAGE_CONDITIONAL_RENDERING_BIT_EXT</code> specifies that the
buffer is suitable for passing as the <code>buffer</code> parameter to
<a href="#vkCmdBeginConditionalRenderingEXT">vkCmdBeginConditionalRenderingEXT</a>.</p>
</li>
<li>
<p><code>VK_BUFFER_USAGE_TRANSFORM_FEEDBACK_BUFFER_BIT_EXT</code> specifies that
the buffer is suitable for using for binding as a transform feedback
buffer with <a href="#vkCmdBindTransformFeedbackBuffersEXT">vkCmdBindTransformFeedbackBuffersEXT</a>.</p>
</li>
<li>
<p><code>VK_BUFFER_USAGE_TRANSFORM_FEEDBACK_COUNTER_BUFFER_BIT_EXT</code>
specifies that the buffer is suitable for using as a counter buffer with
<a href="#vkCmdBeginTransformFeedbackEXT">vkCmdBeginTransformFeedbackEXT</a> and
<a href="#vkCmdEndTransformFeedbackEXT">vkCmdEndTransformFeedbackEXT</a>.</p>
</li>
<li>
<p><code>VK_BUFFER_USAGE_RAY_TRACING_BIT_NV</code> specifies that the buffer is
suitable for use in <a href="#vkCmdTraceRaysNV">vkCmdTraceRaysNV</a> and
<a href="#vkCmdBuildAccelerationStructureNV">vkCmdBuildAccelerationStructureNV</a>.</p>
</li>
<li>
<p><code>VK_BUFFER_USAGE_SHADER_DEVICE_ADDRESS_BIT_EXT</code> specifies that the
buffer <strong class="purple">can</strong> be used to retrieve a buffer device address via
<a href="#vkGetBufferDeviceAddressEXT">vkGetBufferDeviceAddressEXT</a> and use that address to access the
buffer&#8217;s memory from a shader.</p>
</li>
</ul>
</div>
</div>
<div class="sect3">
<h4 id="_see_also_809">See Also</h4>
<div class="paragraph">
<p><a href="#VkBufferUsageFlags">VkBufferUsageFlags</a></p>
</div>
</div>
<div class="sect3">
<h4 id="_document_notes_809">Document Notes</h4>
<div class="paragraph">
<p>For more information, see the Vulkan Specification at URL</p>
</div>
<div class="paragraph">
<p><a href="https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VkBufferUsageFlagBits" class="bare">https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VkBufferUsageFlagBits</a></p>
</div>
<div class="paragraph">
<p>This page is extracted from the Vulkan Specification.
Fixes and changes should be made to the Specification, not directly.</p>
</div>
<div style="page-break-after: always;"></div>
</div>
</div>
<div class="sect2">
<h3 id="_vkbuildaccelerationstructureflagbitsnv3">VkBuildAccelerationStructureFlagBitsNV(3)</h3>
<div class="sect3">
<h4 id="_name_810">Name</h4>
<div class="paragraph">
<p>VkBuildAccelerationStructureFlagBitsNV - Bitmask specifying additional parameters for acceleration structure builds</p>
</div>
</div>
<div class="sect3">
<h4 id="_c_specification_810">C Specification</h4>
<div class="paragraph">
<p>Bits which <strong class="purple">can</strong> be set in <a href="#VkAccelerationStructureInfoNV">VkAccelerationStructureInfoNV</a>::<code>flags</code>,
specifying additional parameters for acceleration structure builds, are:</p>
</div>
<div id="VkBuildAccelerationStructureFlagBitsNV" class="listingblock">
<div class="content">
<pre class="highlight"><code class="language-c++" data-lang="c++">typedef enum VkBuildAccelerationStructureFlagBitsNV {
    VK_BUILD_ACCELERATION_STRUCTURE_ALLOW_UPDATE_BIT_NV = 0x00000001,
    VK_BUILD_ACCELERATION_STRUCTURE_ALLOW_COMPACTION_BIT_NV = 0x00000002,
    VK_BUILD_ACCELERATION_STRUCTURE_PREFER_FAST_TRACE_BIT_NV = 0x00000004,
    VK_BUILD_ACCELERATION_STRUCTURE_PREFER_FAST_BUILD_BIT_NV = 0x00000008,
    VK_BUILD_ACCELERATION_STRUCTURE_LOW_MEMORY_BIT_NV = 0x00000010,
    VK_BUILD_ACCELERATION_STRUCTURE_FLAG_BITS_MAX_ENUM_NV = 0x7FFFFFFF
} VkBuildAccelerationStructureFlagBitsNV;</code></pre>
</div>
</div>
</div>
<div class="sect3">
<h4 id="_description_810">Description</h4>
<div class="ulist">
<ul>
<li>
<p><code>VK_BUILD_ACCELERATION_STRUCTURE_ALLOW_UPDATE_BIT_NV</code> indicates that
the specified acceleration structure <strong class="purple">can</strong> be updated with <code>update</code>
of <code>VK_TRUE</code> in <a href="#vkCmdBuildAccelerationStructureNV">vkCmdBuildAccelerationStructureNV</a>.</p>
</li>
<li>
<p><code>VK_BUILD_ACCELERATION_STRUCTURE_ALLOW_COMPACTION_BIT_NV</code> indicates
that the specified acceleration structure <strong class="purple">can</strong> act as the source for
<a href="#vkCmdCopyAccelerationStructureNV">vkCmdCopyAccelerationStructureNV</a> with <code>mode</code> of
<code>VK_COPY_ACCELERATION_STRUCTURE_MODE_COMPACT_NV</code> to produce a
compacted acceleration structure.</p>
</li>
<li>
<p><code>VK_BUILD_ACCELERATION_STRUCTURE_PREFER_FAST_TRACE_BIT_NV</code> indicates
that the given acceleration structure build <strong class="purple">should</strong> prioritize trace
performance over build time.</p>
</li>
<li>
<p><code>VK_BUILD_ACCELERATION_STRUCTURE_PREFER_FAST_BUILD_BIT_NV</code> indicates
that the given acceleration structure build <strong class="purple">should</strong> prioritize build
time over trace performance.</p>
</li>
<li>
<p><code>VK_BUILD_ACCELERATION_STRUCTURE_LOW_MEMORY_BIT_NV</code> indicates that
this acceleration structure <strong class="purple">should</strong> minimize the size of the scratch
memory and the final result build, potentially at the expense of build
time or trace performance.</p>
</li>
</ul>
</div>
<div class="admonitionblock note">
<table>
<tr>
<td class="icon">
<i class="fa icon-note" title="Note"></i>
</td>
<td class="content">
<div class="title">Note</div>
<div class="paragraph">
<p><code>VK_BUILD_ACCELERATION_STRUCTURE_ALLOW_UPDATE_BIT_NV</code> and
<code>VK_BUILD_ACCELERATION_STRUCTURE_ALLOW_COMPACTION_BIT_NV</code> <strong class="purple">may</strong> take more
time and memory than a normal build, and so <strong class="purple">should</strong> only be used when those
features are used.</p>
</div>
</td>
</tr>
</table>
</div>
</div>
<div class="sect3">
<h4 id="_see_also_810">See Also</h4>
<div class="paragraph">
<p><a href="#VkBuildAccelerationStructureFlagsNV">VkBuildAccelerationStructureFlagsNV</a></p>
</div>
</div>
<div class="sect3">
<h4 id="_document_notes_810">Document Notes</h4>
<div class="paragraph">
<p>For more information, see the Vulkan Specification at URL</p>
</div>
<div class="paragraph">
<p><a href="https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VkBuildAccelerationStructureFlagBitsNV" class="bare">https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VkBuildAccelerationStructureFlagBitsNV</a></p>
</div>
<div class="paragraph">
<p>This page is extracted from the Vulkan Specification.
Fixes and changes should be made to the Specification, not directly.</p>
</div>
<div style="page-break-after: always;"></div>
</div>
</div>
<div class="sect2">
<h3 id="_vkchromalocation3">VkChromaLocation(3)</h3>
<div class="sect3">
<h4 id="_name_811">Name</h4>
<div class="paragraph">
<p>VkChromaLocation - Position of downsampled chroma samples</p>
</div>
</div>
<div class="sect3">
<h4 id="_c_specification_811">C Specification</h4>
<div class="paragraph">
<p>The <a href="#VkChromaLocation">VkChromaLocation</a> enum, which defines the location of downsampled
chroma channel samples relative to the luma samples, is defined as:</p>
</div>
<div id="VkChromaLocation" class="listingblock">
<div class="content">
<pre class="highlight"><code class="language-c++" data-lang="c++">typedef enum VkChromaLocation {
    VK_CHROMA_LOCATION_COSITED_EVEN = 0,
    VK_CHROMA_LOCATION_MIDPOINT = 1,
    VK_CHROMA_LOCATION_COSITED_EVEN_KHR = VK_CHROMA_LOCATION_COSITED_EVEN,
    VK_CHROMA_LOCATION_MIDPOINT_KHR = VK_CHROMA_LOCATION_MIDPOINT,
    VK_CHROMA_LOCATION_MAX_ENUM = 0x7FFFFFFF
} VkChromaLocation;</code></pre>
</div>
</div>
<div class="paragraph">
<p>or the equivalent</p>
</div>
<div id="VkChromaLocationKHR" class="listingblock">
<div class="content">
<pre class="highlight"><code class="language-c++" data-lang="c++">typedef VkChromaLocation VkChromaLocationKHR;</code></pre>
</div>
</div>
</div>
<div class="sect3">
<h4 id="_description_811">Description</h4>
<div class="ulist">
<ul>
<li>
<p><code>VK_CHROMA_LOCATION_COSITED_EVEN</code> specifies that downsampled chroma
samples are aligned with luma samples with even coordinates.</p>
</li>
<li>
<p><code>VK_CHROMA_LOCATION_MIDPOINT</code> specifies that downsampled chroma
samples are located half way between each even luma sample and the
nearest higher odd luma sample.</p>
</li>
</ul>
</div>
</div>
<div class="sect3">
<h4 id="_see_also_811">See Also</h4>
<div class="paragraph">
<p><a href="#VkAndroidHardwareBufferFormatPropertiesANDROID">VkAndroidHardwareBufferFormatPropertiesANDROID</a>, <a href="#VkSamplerYcbcrConversionCreateInfo">VkSamplerYcbcrConversionCreateInfo</a></p>
</div>
</div>
<div class="sect3">
<h4 id="_document_notes_811">Document Notes</h4>
<div class="paragraph">
<p>For more information, see the Vulkan Specification at URL</p>
</div>
<div class="paragraph">
<p><a href="https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VkChromaLocation" class="bare">https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VkChromaLocation</a></p>
</div>
<div class="paragraph">
<p>This page is extracted from the Vulkan Specification.
Fixes and changes should be made to the Specification, not directly.</p>
</div>
<div style="page-break-after: always;"></div>
</div>
</div>
<div class="sect2">
<h3 id="_vkcoarsesampleordertypenv3">VkCoarseSampleOrderTypeNV(3)</h3>
<div class="sect3">
<h4 id="_name_812">Name</h4>
<div class="paragraph">
<p>VkCoarseSampleOrderTypeNV - Shading rate image sample ordering types</p>
</div>
</div>
<div class="sect3">
<h4 id="_c_specification_812">C Specification</h4>
<div class="paragraph">
<p>The type <a href="#VkCoarseSampleOrderTypeNV">VkCoarseSampleOrderTypeNV</a> specifies the technique used to
order coverage samples in fragments larger than one pixel, and is defined
as:</p>
</div>
<div id="VkCoarseSampleOrderTypeNV" class="listingblock">
<div class="content">
<pre class="highlight"><code class="language-c++" data-lang="c++">typedef enum VkCoarseSampleOrderTypeNV {
    VK_COARSE_SAMPLE_ORDER_TYPE_DEFAULT_NV = 0,
    VK_COARSE_SAMPLE_ORDER_TYPE_CUSTOM_NV = 1,
    VK_COARSE_SAMPLE_ORDER_TYPE_PIXEL_MAJOR_NV = 2,
    VK_COARSE_SAMPLE_ORDER_TYPE_SAMPLE_MAJOR_NV = 3,
    VK_COARSE_SAMPLE_ORDER_TYPE_MAX_ENUM_NV = 0x7FFFFFFF
} VkCoarseSampleOrderTypeNV;</code></pre>
</div>
</div>
</div>
<div class="sect3">
<h4 id="_description_812">Description</h4>
<div class="ulist">
<ul>
<li>
<p><code>VK_COARSE_SAMPLE_ORDER_TYPE_DEFAULT_NV</code> specifies that coverage
samples will be ordered in an implementation-dependent manner.</p>
</li>
<li>
<p><code>VK_COARSE_SAMPLE_ORDER_TYPE_CUSTOM_NV</code> specifies that coverage
samples will be ordered according to the array of custom orderings
provided in either the <code>pCustomSampleOrders</code> member of
<code>VkPipelineViewportCoarseSampleOrderStateCreateInfoNV</code> or the
<code>pCustomSampleOrders</code> member of <a href="#vkCmdSetCoarseSampleOrderNV">vkCmdSetCoarseSampleOrderNV</a>.</p>
</li>
<li>
<p><code>VK_COARSE_SAMPLE_ORDER_TYPE_PIXEL_MAJOR_NV</code> specifies that coverage
samples will be ordered sequentially, sorted first by pixel coordinate
(in row-major order) and then by coverage sample number.</p>
</li>
<li>
<p><code>VK_COARSE_SAMPLE_ORDER_TYPE_SAMPLE_MAJOR_NV</code> specifies that
coverage samples will be ordered sequentially, sorted first by coverage
sample number and then by pixel coordinate (in row-major order).</p>
</li>
</ul>
</div>
</div>
<div class="sect3">
<h4 id="_see_also_812">See Also</h4>
<div class="paragraph">
<p><a href="#VkPipelineViewportCoarseSampleOrderStateCreateInfoNV">VkPipelineViewportCoarseSampleOrderStateCreateInfoNV</a>, <a href="#vkCmdSetCoarseSampleOrderNV">vkCmdSetCoarseSampleOrderNV</a></p>
</div>
</div>
<div class="sect3">
<h4 id="_document_notes_812">Document Notes</h4>
<div class="paragraph">
<p>For more information, see the Vulkan Specification at URL</p>
</div>
<div class="paragraph">
<p><a href="https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VkCoarseSampleOrderTypeNV" class="bare">https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VkCoarseSampleOrderTypeNV</a></p>
</div>
<div class="paragraph">
<p>This page is extracted from the Vulkan Specification.
Fixes and changes should be made to the Specification, not directly.</p>
</div>
<div style="page-break-after: always;"></div>
</div>
</div>
<div class="sect2">
<h3 id="_vkcolorcomponentflagbits3">VkColorComponentFlagBits(3)</h3>
<div class="sect3">
<h4 id="_name_813">Name</h4>
<div class="paragraph">
<p>VkColorComponentFlagBits - Bitmask controlling which components are written to the framebuffer</p>
</div>
</div>
<div class="sect3">
<h4 id="_c_specification_813">C Specification</h4>
<div class="paragraph">
<p>Bits which <strong class="purple">can</strong> be set in
<a href="#VkPipelineColorBlendAttachmentState">VkPipelineColorBlendAttachmentState</a>::<code>colorWriteMask</code> to determine
whether the final color values <span class="eq">R, G, B</span> and <span class="eq">A</span> are written to the
framebuffer attachment are:</p>
</div>
<div id="VkColorComponentFlagBits" class="listingblock">
<div class="content">
<pre class="highlight"><code class="language-c++" data-lang="c++">typedef enum VkColorComponentFlagBits {
    VK_COLOR_COMPONENT_R_BIT = 0x00000001,
    VK_COLOR_COMPONENT_G_BIT = 0x00000002,
    VK_COLOR_COMPONENT_B_BIT = 0x00000004,
    VK_COLOR_COMPONENT_A_BIT = 0x00000008,
    VK_COLOR_COMPONENT_FLAG_BITS_MAX_ENUM = 0x7FFFFFFF
} VkColorComponentFlagBits;</code></pre>
</div>
</div>
</div>
<div class="sect3">
<h4 id="_description_813">Description</h4>
<div class="ulist">
<ul>
<li>
<p><code>VK_COLOR_COMPONENT_R_BIT</code> specifies that the <span class="eq">R</span> value is
written to the color attachment for the appropriate sample.
Otherwise, the value in memory is unmodified.</p>
</li>
<li>
<p><code>VK_COLOR_COMPONENT_G_BIT</code> specifies that the <span class="eq">G</span> value is
written to the color attachment for the appropriate sample.
Otherwise, the value in memory is unmodified.</p>
</li>
<li>
<p><code>VK_COLOR_COMPONENT_B_BIT</code> specifies that the <span class="eq">B</span> value is
written to the color attachment for the appropriate sample.
Otherwise, the value in memory is unmodified.</p>
</li>
<li>
<p><code>VK_COLOR_COMPONENT_A_BIT</code> specifies that the <span class="eq">A</span> value is
written to the color attachment for the appropriate sample.
Otherwise, the value in memory is unmodified.</p>
</li>
</ul>
</div>
<div class="paragraph">
<p>The color write mask operation is applied regardless of whether blending is
enabled.</p>
</div>
</div>
<div class="sect3">
<h4 id="_see_also_813">See Also</h4>
<div class="paragraph">
<p><a href="#VkColorComponentFlags">VkColorComponentFlags</a></p>
</div>
</div>
<div class="sect3">
<h4 id="_document_notes_813">Document Notes</h4>
<div class="paragraph">
<p>For more information, see the Vulkan Specification at URL</p>
</div>
<div class="paragraph">
<p><a href="https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VkColorComponentFlagBits" class="bare">https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VkColorComponentFlagBits</a></p>
</div>
<div class="paragraph">
<p>This page is extracted from the Vulkan Specification.
Fixes and changes should be made to the Specification, not directly.</p>
</div>
<div style="page-break-after: always;"></div>
</div>
</div>
<div class="sect2">
<h3 id="_vkcolorspacekhr3">VkColorSpaceKHR(3)</h3>
<div class="sect3">
<h4 id="_name_814">Name</h4>
<div class="paragraph">
<p>VkColorSpaceKHR - supported color space of the presentation engine</p>
</div>
</div>
<div class="sect3">
<h4 id="_c_specification_814">C Specification</h4>
<div class="paragraph">
<p>Possible values of <a href="#VkSurfaceFormatKHR">VkSurfaceFormatKHR</a>::<code>colorSpace</code>, specifying
supported color spaces of a presentation engine, are:</p>
</div>
<div id="VkColorSpaceKHR" class="listingblock">
<div class="content">
<pre class="highlight"><code class="language-c++" data-lang="c++">typedef enum VkColorSpaceKHR {
    VK_COLOR_SPACE_SRGB_NONLINEAR_KHR = 0,
    VK_COLOR_SPACE_DISPLAY_P3_NONLINEAR_EXT = 1000104001,
    VK_COLOR_SPACE_EXTENDED_SRGB_LINEAR_EXT = 1000104002,
    VK_COLOR_SPACE_DCI_P3_LINEAR_EXT = 1000104003,
    VK_COLOR_SPACE_DCI_P3_NONLINEAR_EXT = 1000104004,
    VK_COLOR_SPACE_BT709_LINEAR_EXT = 1000104005,
    VK_COLOR_SPACE_BT709_NONLINEAR_EXT = 1000104006,
    VK_COLOR_SPACE_BT2020_LINEAR_EXT = 1000104007,
    VK_COLOR_SPACE_HDR10_ST2084_EXT = 1000104008,
    VK_COLOR_SPACE_DOLBYVISION_EXT = 1000104009,
    VK_COLOR_SPACE_HDR10_HLG_EXT = 1000104010,
    VK_COLOR_SPACE_ADOBERGB_LINEAR_EXT = 1000104011,
    VK_COLOR_SPACE_ADOBERGB_NONLINEAR_EXT = 1000104012,
    VK_COLOR_SPACE_PASS_THROUGH_EXT = 1000104013,
    VK_COLOR_SPACE_EXTENDED_SRGB_NONLINEAR_EXT = 1000104014,
    VK_COLOR_SPACE_DISPLAY_NATIVE_AMD = 1000213000,
    VK_COLORSPACE_SRGB_NONLINEAR_KHR = VK_COLOR_SPACE_SRGB_NONLINEAR_KHR,
    VK_COLOR_SPACE_MAX_ENUM_KHR = 0x7FFFFFFF
} VkColorSpaceKHR;</code></pre>
</div>
</div>
</div>
<div class="sect3">
<h4 id="_description_814">Description</h4>
<div class="ulist">
<ul>
<li>
<p><code>VK_COLOR_SPACE_SRGB_NONLINEAR_KHR</code> specifies support for the sRGB
color space.</p>
</li>
<li>
<p><code>VK_COLOR_SPACE_DISPLAY_P3_NONLINEAR_EXT</code> specifies support for the
Display-P3 color space and applies an sRGB-like transfer function
(defined below).</p>
</li>
<li>
<p><code>VK_COLOR_SPACE_EXTENDED_SRGB_LINEAR_EXT</code> specifies support for the
extended sRGB color space and applies a linear transfer function.</p>
</li>
<li>
<p><code>VK_COLOR_SPACE_EXTENDED_SRGB_NONLINEAR_EXT</code> specifies support for
the extended sRGB color space and applies an sRGB transfer function.</p>
</li>
<li>
<p><code>VK_COLOR_SPACE_DCI_P3_LINEAR_EXT</code> specifies support for the DCI-P3
color space and applies a linear OETF.</p>
</li>
<li>
<p><code>VK_COLOR_SPACE_DCI_P3_NONLINEAR_EXT</code> specifies support for the
DCI-P3 color space and applies the Gamma 2.6 OETF.</p>
</li>
<li>
<p><code>VK_COLOR_SPACE_BT709_LINEAR_EXT</code> specifies support for the BT709
color space and applies a linear OETF.</p>
</li>
<li>
<p><code>VK_COLOR_SPACE_BT709_NONLINEAR_EXT</code> specifies support for the BT709
color space and applies the SMPTE 170M OETF.</p>
</li>
<li>
<p><code>VK_COLOR_SPACE_BT2020_LINEAR_EXT</code> specifies support for the BT2020
color space and applies a linear OETF.</p>
</li>
<li>
<p><code>VK_COLOR_SPACE_HDR10_ST2084_EXT</code> specifies support for the HDR10
(BT2020 color) space and applies the SMPTE ST2084 Perceptual Quantizer
(PQ) OETF.</p>
</li>
<li>
<p><code>VK_COLOR_SPACE_DOLBYVISION_EXT</code> specifies support for the Dolby
Vision (BT2020 color space), proprietary encoding, and applies the SMPTE
ST2084 OETF.</p>
</li>
<li>
<p><code>VK_COLOR_SPACE_HDR10_HLG_EXT</code> specifies support for the HDR10
(BT2020 color space) and applies the Hybrid Log Gamma (HLG) OETF.</p>
</li>
<li>
<p><code>VK_COLOR_SPACE_ADOBERGB_LINEAR_EXT</code> specifies support for the
AdobeRGB color space and applies a linear OETF.</p>
</li>
<li>
<p><code>VK_COLOR_SPACE_ADOBERGB_NONLINEAR_EXT</code> specifies support for the
AdobeRGB color space and applies the Gamma 2.2 OETF.</p>
</li>
<li>
<p><code>VK_COLOR_SPACE_PASS_THROUGH_EXT</code> specifies that color components
are used &#8220;as is&#8221;.
This is intended to allow applications to supply data for color spaces
not described here.</p>
</li>
<li>
<p><code>VK_COLOR_SPACE_DISPLAY_NATIVE_AMD</code> specifies support for the
display&#8217;s native color space.
This matches the color space expectations of AMD&#8217;s FreeSync2 standard,
for displays supporting it.</p>
</li>
</ul>
</div>
<div class="paragraph">
<p>The color components of Non-linear color space swap chain images have had
the appropriate transfer function applied.
Vulkan requires that all implementations support the sRGB transfer function
when using an SRGB pixel format.
Other transfer functions, such as SMPTE 170M or SMPTE2084, <strong class="purple">must</strong> not be
performed by the implementation, but <strong class="purple">can</strong> be performed by the application
shader.
This extension defines enums for <a href="#VkColorSpaceKHR">VkColorSpaceKHR</a> that correspond to
the following color spaces:</p>
</div>
<table id="VK_EXT_swapchain_colorspace-table" class="tableblock frame-all grid-all stretch">
<caption class="title">Table 16. Color Spaces and Attributes</caption>
<colgroup>
<col style="width: 16.6666%;" />
<col style="width: 16.6666%;" />
<col style="width: 16.6666%;" />
<col style="width: 16.6666%;" />
<col style="width: 16.6666%;" />
<col style="width: 16.667%;" />
</colgroup>
<thead>
<tr>
<th class="tableblock halign-left valign-top">Name</th>
<th class="tableblock halign-left valign-top">Red Primary</th>
<th class="tableblock halign-left valign-top">Green Primary</th>
<th class="tableblock halign-left valign-top">Blue Primary</th>
<th class="tableblock halign-left valign-top">White-point</th>
<th class="tableblock halign-left valign-top">Transfer function</th>
</tr>
</thead>
<tbody>
<tr>
<td class="tableblock halign-left valign-top"><p class="tableblock">DCI-P3</p></td>
<td class="tableblock halign-left valign-top"><p class="tableblock">0.680, 0.320</p></td>
<td class="tableblock halign-left valign-top"><p class="tableblock">0.265, 0.690</p></td>
<td class="tableblock halign-left valign-top"><p class="tableblock">0.150, 0.060</p></td>
<td class="tableblock halign-left valign-top"><p class="tableblock">0.3127, 0.3290 (D65)</p></td>
<td class="tableblock halign-left valign-top"><p class="tableblock">Gamma 2.6</p></td>
</tr>
<tr>
<td class="tableblock halign-left valign-top"><p class="tableblock">Display-P3</p></td>
<td class="tableblock halign-left valign-top"><p class="tableblock">0.680, 0.320</p></td>
<td class="tableblock halign-left valign-top"><p class="tableblock">0.265, 0.690</p></td>
<td class="tableblock halign-left valign-top"><p class="tableblock">0.150, 0.060</p></td>
<td class="tableblock halign-left valign-top"><p class="tableblock">0.3127, 0.3290 (D65)</p></td>
<td class="tableblock halign-left valign-top"><p class="tableblock">Display-P3</p></td>
</tr>
<tr>
<td class="tableblock halign-left valign-top"><p class="tableblock">BT709</p></td>
<td class="tableblock halign-left valign-top"><p class="tableblock">0.640, 0.330</p></td>
<td class="tableblock halign-left valign-top"><p class="tableblock">0.300, 0.600</p></td>
<td class="tableblock halign-left valign-top"><p class="tableblock">0.150, 0.060</p></td>
<td class="tableblock halign-left valign-top"><p class="tableblock">0.3127, 0.3290 (D65)</p></td>
<td class="tableblock halign-left valign-top"><p class="tableblock">SMPTE 170M</p></td>
</tr>
<tr>
<td class="tableblock halign-left valign-top"><p class="tableblock">sRGB</p></td>
<td class="tableblock halign-left valign-top"><p class="tableblock">0.640, 0.330</p></td>
<td class="tableblock halign-left valign-top"><p class="tableblock">0.300, 0.600</p></td>
<td class="tableblock halign-left valign-top"><p class="tableblock">0.150, 0.060</p></td>
<td class="tableblock halign-left valign-top"><p class="tableblock">0.3127, 0.3290 (D65)</p></td>
<td class="tableblock halign-left valign-top"><p class="tableblock">sRGB</p></td>
</tr>
<tr>
<td class="tableblock halign-left valign-top"><p class="tableblock">extended sRGB</p></td>
<td class="tableblock halign-left valign-top"><p class="tableblock">0.640, 0.330</p></td>
<td class="tableblock halign-left valign-top"><p class="tableblock">0.300, 0.600</p></td>
<td class="tableblock halign-left valign-top"><p class="tableblock">0.150, 0.060</p></td>
<td class="tableblock halign-left valign-top"><p class="tableblock">0.3127, 0.3290 (D65)</p></td>
<td class="tableblock halign-left valign-top"><p class="tableblock">extended sRGB</p></td>
</tr>
<tr>
<td class="tableblock halign-left valign-top"><p class="tableblock">HDR10_ST2084</p></td>
<td class="tableblock halign-left valign-top"><p class="tableblock">0.708, 0.292</p></td>
<td class="tableblock halign-left valign-top"><p class="tableblock">0.170, 0.797</p></td>
<td class="tableblock halign-left valign-top"><p class="tableblock">0.131, 0.046</p></td>
<td class="tableblock halign-left valign-top"><p class="tableblock">0.3127, 0.3290 (D65)</p></td>
<td class="tableblock halign-left valign-top"><p class="tableblock">ST2084</p></td>
</tr>
<tr>
<td class="tableblock halign-left valign-top"><p class="tableblock">DOLBYVISION</p></td>
<td class="tableblock halign-left valign-top"><p class="tableblock">0.708, 0.292</p></td>
<td class="tableblock halign-left valign-top"><p class="tableblock">0.170, 0.797</p></td>
<td class="tableblock halign-left valign-top"><p class="tableblock">0.131, 0.046</p></td>
<td class="tableblock halign-left valign-top"><p class="tableblock">0.3127, 0.3290 (D65)</p></td>
<td class="tableblock halign-left valign-top"><p class="tableblock">ST2084</p></td>
</tr>
<tr>
<td class="tableblock halign-left valign-top"><p class="tableblock">HDR10_HLG</p></td>
<td class="tableblock halign-left valign-top"><p class="tableblock">0.708, 0.292</p></td>
<td class="tableblock halign-left valign-top"><p class="tableblock">0.170, 0.797</p></td>
<td class="tableblock halign-left valign-top"><p class="tableblock">0.131, 0.046</p></td>
<td class="tableblock halign-left valign-top"><p class="tableblock">0.3127, 0.3290 (D65)</p></td>
<td class="tableblock halign-left valign-top"><p class="tableblock">HLG</p></td>
</tr>
<tr>
<td class="tableblock halign-left valign-top"><p class="tableblock">AdobeRGB</p></td>
<td class="tableblock halign-left valign-top"><p class="tableblock">0.640, 0.330</p></td>
<td class="tableblock halign-left valign-top"><p class="tableblock">0.210, 0.710</p></td>
<td class="tableblock halign-left valign-top"><p class="tableblock">0.150, 0.060</p></td>
<td class="tableblock halign-left valign-top"><p class="tableblock">0.3127, 0.3290 (D65)</p></td>
<td class="tableblock halign-left valign-top"><p class="tableblock">AdobeRGB</p></td>
</tr>
</tbody>
</table>
<div class="paragraph">
<p>For Opto-Electrical Transfer Function (OETF), unless otherwise specified,
the values of <span class="eq">L</span> and <span class="eq">E</span> are defined as:</p>
</div>
<div class="paragraph">
<p><span class="eq">L</span> - linear luminance of image \(0 \leq L \leq 1\) for
conventional colorimetry</p>
</div>
<div class="paragraph">
<p><span class="eq">E</span> - corresponding electrical signal (value stored in memory)</p>
</div>
</div>
<div class="sect3">
<h4 id="_see_also_814">See Also</h4>
<div class="paragraph">
<p><a href="#VkSurfaceFormatKHR">VkSurfaceFormatKHR</a>, <a href="#VkSwapchainCreateInfoKHR">VkSwapchainCreateInfoKHR</a></p>
</div>
</div>
<div class="sect3">
<h4 id="_document_notes_814">Document Notes</h4>
<div class="paragraph">
<p>For more information, see the Vulkan Specification at URL</p>
</div>
<div class="paragraph">
<p><a href="https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VkColorSpaceKHR" class="bare">https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VkColorSpaceKHR</a></p>
</div>
<div class="paragraph">
<p>This page is extracted from the Vulkan Specification.
Fixes and changes should be made to the Specification, not directly.</p>
</div>
<div style="page-break-after: always;"></div>
</div>
</div>
<div class="sect2">
<h3 id="_vkcommandbufferlevel3">VkCommandBufferLevel(3)</h3>
<div class="sect3">
<h4 id="_name_815">Name</h4>
<div class="paragraph">
<p>VkCommandBufferLevel - Enumerant specifying a command buffer level</p>
</div>
</div>
<div class="sect3">
<h4 id="_c_specification_815">C Specification</h4>
<div class="paragraph">
<p>Possible values of <a href="#VkCommandBufferAllocateInfo">VkCommandBufferAllocateInfo</a>::<code>level</code>,
specifying the command buffer level, are:</p>
</div>
<div id="VkCommandBufferLevel" class="listingblock">
<div class="content">
<pre class="highlight"><code class="language-c++" data-lang="c++">typedef enum VkCommandBufferLevel {
    VK_COMMAND_BUFFER_LEVEL_PRIMARY = 0,
    VK_COMMAND_BUFFER_LEVEL_SECONDARY = 1,
    VK_COMMAND_BUFFER_LEVEL_MAX_ENUM = 0x7FFFFFFF
} VkCommandBufferLevel;</code></pre>
</div>
</div>
</div>
<div class="sect3">
<h4 id="_description_815">Description</h4>
<div class="ulist">
<ul>
<li>
<p><code>VK_COMMAND_BUFFER_LEVEL_PRIMARY</code> specifies a primary command
buffer.</p>
</li>
<li>
<p><code>VK_COMMAND_BUFFER_LEVEL_SECONDARY</code> specifies a secondary command
buffer.</p>
</li>
</ul>
</div>
</div>
<div class="sect3">
<h4 id="_see_also_815">See Also</h4>
<div class="paragraph">
<p><a href="#VkCommandBufferAllocateInfo">VkCommandBufferAllocateInfo</a></p>
</div>
</div>
<div class="sect3">
<h4 id="_document_notes_815">Document Notes</h4>
<div class="paragraph">
<p>For more information, see the Vulkan Specification at URL</p>
</div>
<div class="paragraph">
<p><a href="https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VkCommandBufferLevel" class="bare">https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VkCommandBufferLevel</a></p>
</div>
<div class="paragraph">
<p>This page is extracted from the Vulkan Specification.
Fixes and changes should be made to the Specification, not directly.</p>
</div>
<div style="page-break-after: always;"></div>
</div>
</div>
<div class="sect2">
<h3 id="_vkcommandbufferresetflagbits3">VkCommandBufferResetFlagBits(3)</h3>
<div class="sect3">
<h4 id="_name_816">Name</h4>
<div class="paragraph">
<p>VkCommandBufferResetFlagBits - Bitmask controlling behavior of a command buffer reset</p>
</div>
</div>
<div class="sect3">
<h4 id="_c_specification_816">C Specification</h4>
<div class="paragraph">
<p>Bits which <strong class="purple">can</strong> be set in <a href="#vkResetCommandBuffer">vkResetCommandBuffer</a>::<code>flags</code> to control
the reset operation are:</p>
</div>
<div id="VkCommandBufferResetFlagBits" class="listingblock">
<div class="content">
<pre class="highlight"><code class="language-c++" data-lang="c++">typedef enum VkCommandBufferResetFlagBits {
    VK_COMMAND_BUFFER_RESET_RELEASE_RESOURCES_BIT = 0x00000001,
    VK_COMMAND_BUFFER_RESET_FLAG_BITS_MAX_ENUM = 0x7FFFFFFF
} VkCommandBufferResetFlagBits;</code></pre>
</div>
</div>
</div>
<div class="sect3">
<h4 id="_description_816">Description</h4>
<div class="ulist">
<ul>
<li>
<p><code>VK_COMMAND_BUFFER_RESET_RELEASE_RESOURCES_BIT</code> specifies that most
or all memory resources currently owned by the command buffer <strong class="purple">should</strong> be
returned to the parent command pool.
If this flag is not set, then the command buffer <strong class="purple">may</strong> hold onto memory
resources and reuse them when recording commands.
<code>commandBuffer</code> is moved to the <a href="vkspec.html#commandbuffers-lifecycle">initial
state</a>.</p>
</li>
</ul>
</div>
</div>
<div class="sect3">
<h4 id="_see_also_816">See Also</h4>
<div class="paragraph">
<p><a href="#VkCommandBufferResetFlags">VkCommandBufferResetFlags</a></p>
</div>
</div>
<div class="sect3">
<h4 id="_document_notes_816">Document Notes</h4>
<div class="paragraph">
<p>For more information, see the Vulkan Specification at URL</p>
</div>
<div class="paragraph">
<p><a href="https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VkCommandBufferResetFlagBits" class="bare">https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VkCommandBufferResetFlagBits</a></p>
</div>
<div class="paragraph">
<p>This page is extracted from the Vulkan Specification.
Fixes and changes should be made to the Specification, not directly.</p>
</div>
<div style="page-break-after: always;"></div>
</div>
</div>
<div class="sect2">
<h3 id="_vkcommandbufferusageflagbits3">VkCommandBufferUsageFlagBits(3)</h3>
<div class="sect3">
<h4 id="_name_817">Name</h4>
<div class="paragraph">
<p>VkCommandBufferUsageFlagBits - Bitmask specifying usage behavior for command buffer</p>
</div>
</div>
<div class="sect3">
<h4 id="_c_specification_817">C Specification</h4>
<div class="paragraph">
<p>Bits which <strong class="purple">can</strong> be set in <a href="#VkCommandBufferBeginInfo">VkCommandBufferBeginInfo</a>::<code>flags</code> to
specify usage behavior for a command buffer are:</p>
</div>
<div id="VkCommandBufferUsageFlagBits" class="listingblock">
<div class="content">
<pre class="highlight"><code class="language-c++" data-lang="c++">typedef enum VkCommandBufferUsageFlagBits {
    VK_COMMAND_BUFFER_USAGE_ONE_TIME_SUBMIT_BIT = 0x00000001,
    VK_COMMAND_BUFFER_USAGE_RENDER_PASS_CONTINUE_BIT = 0x00000002,
    VK_COMMAND_BUFFER_USAGE_SIMULTANEOUS_USE_BIT = 0x00000004,
    VK_COMMAND_BUFFER_USAGE_FLAG_BITS_MAX_ENUM = 0x7FFFFFFF
} VkCommandBufferUsageFlagBits;</code></pre>
</div>
</div>
</div>
<div class="sect3">
<h4 id="_description_817">Description</h4>
<div class="ulist">
<ul>
<li>
<p><code>VK_COMMAND_BUFFER_USAGE_ONE_TIME_SUBMIT_BIT</code> specifies that each
recording of the command buffer will only be submitted once, and the
command buffer will be reset and recorded again between each submission.</p>
</li>
<li>
<p><code>VK_COMMAND_BUFFER_USAGE_RENDER_PASS_CONTINUE_BIT</code> specifies that a
secondary command buffer is considered to be entirely inside a render
pass.
If this is a primary command buffer, then this bit is ignored.</p>
</li>
<li>
<p><code>VK_COMMAND_BUFFER_USAGE_SIMULTANEOUS_USE_BIT</code> specifies that a
command buffer <strong class="purple">can</strong> be resubmitted to a queue while it is in the
<em>pending state</em>, and recorded into multiple primary command buffers.</p>
</li>
</ul>
</div>
</div>
<div class="sect3">
<h4 id="_see_also_817">See Also</h4>
<div class="paragraph">
<p><a href="#VkCommandBufferUsageFlags">VkCommandBufferUsageFlags</a></p>
</div>
</div>
<div class="sect3">
<h4 id="_document_notes_817">Document Notes</h4>
<div class="paragraph">
<p>For more information, see the Vulkan Specification at URL</p>
</div>
<div class="paragraph">
<p><a href="https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VkCommandBufferUsageFlagBits" class="bare">https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VkCommandBufferUsageFlagBits</a></p>
</div>
<div class="paragraph">
<p>This page is extracted from the Vulkan Specification.
Fixes and changes should be made to the Specification, not directly.</p>
</div>
<div style="page-break-after: always;"></div>
</div>
</div>
<div class="sect2">
<h3 id="_vkcommandpoolcreateflagbits3">VkCommandPoolCreateFlagBits(3)</h3>
<div class="sect3">
<h4 id="_name_818">Name</h4>
<div class="paragraph">
<p>VkCommandPoolCreateFlagBits - Bitmask specifying usage behavior for a command pool</p>
</div>
</div>
<div class="sect3">
<h4 id="_c_specification_818">C Specification</h4>
<div class="paragraph">
<p>Bits which <strong class="purple">can</strong> be set in <a href="#VkCommandPoolCreateInfo">VkCommandPoolCreateInfo</a>::<code>flags</code> to
specify usage behavior for a command pool are:</p>
</div>
<div id="VkCommandPoolCreateFlagBits" class="listingblock">
<div class="content">
<pre class="highlight"><code class="language-c++" data-lang="c++">typedef enum VkCommandPoolCreateFlagBits {
    VK_COMMAND_POOL_CREATE_TRANSIENT_BIT = 0x00000001,
    VK_COMMAND_POOL_CREATE_RESET_COMMAND_BUFFER_BIT = 0x00000002,
    VK_COMMAND_POOL_CREATE_PROTECTED_BIT = 0x00000004,
    VK_COMMAND_POOL_CREATE_FLAG_BITS_MAX_ENUM = 0x7FFFFFFF
} VkCommandPoolCreateFlagBits;</code></pre>
</div>
</div>
</div>
<div class="sect3">
<h4 id="_description_818">Description</h4>
<div class="ulist">
<ul>
<li>
<p><code>VK_COMMAND_POOL_CREATE_TRANSIENT_BIT</code> specifies that command
buffers allocated from the pool will be short-lived, meaning that they
will be reset or freed in a relatively short timeframe.
This flag <strong class="purple">may</strong> be used by the implementation to control memory
allocation behavior within the pool.</p>
</li>
<li>
<p><code>VK_COMMAND_POOL_CREATE_RESET_COMMAND_BUFFER_BIT</code> allows any command
buffer allocated from a pool to be individually reset to the
<a href="vkspec.html#commandbuffers-lifecycle">initial state</a>; either by calling
<a href="#vkResetCommandBuffer">vkResetCommandBuffer</a>, or via the implicit reset when calling
<a href="#vkBeginCommandBuffer">vkBeginCommandBuffer</a>.
If this flag is not set on a pool, then <code>vkResetCommandBuffer</code> <strong class="purple">must</strong>
not be called for any command buffer allocated from that pool.</p>
</li>
<li>
<p><code>VK_COMMAND_POOL_CREATE_PROTECTED_BIT</code> specifies that command
buffers allocated from the pool are protected command buffers.
If the protected memory feature is not enabled, the
<code>VK_COMMAND_POOL_CREATE_PROTECTED_BIT</code> bit of <code>flags</code> <strong class="purple">must</strong> not
be set.</p>
</li>
</ul>
</div>
</div>
<div class="sect3">
<h4 id="_see_also_818">See Also</h4>
<div class="paragraph">
<p><a href="#VkCommandPoolCreateFlags">VkCommandPoolCreateFlags</a></p>
</div>
</div>
<div class="sect3">
<h4 id="_document_notes_818">Document Notes</h4>
<div class="paragraph">
<p>For more information, see the Vulkan Specification at URL</p>
</div>
<div class="paragraph">
<p><a href="https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VkCommandPoolCreateFlagBits" class="bare">https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VkCommandPoolCreateFlagBits</a></p>
</div>
<div class="paragraph">
<p>This page is extracted from the Vulkan Specification.
Fixes and changes should be made to the Specification, not directly.</p>
</div>
<div style="page-break-after: always;"></div>
</div>
</div>
<div class="sect2">
<h3 id="_vkcommandpoolresetflagbits3">VkCommandPoolResetFlagBits(3)</h3>
<div class="sect3">
<h4 id="_name_819">Name</h4>
<div class="paragraph">
<p>VkCommandPoolResetFlagBits - Bitmask controlling behavior of a command pool reset</p>
</div>
</div>
<div class="sect3">
<h4 id="_c_specification_819">C Specification</h4>
<div class="paragraph">
<p>Bits which <strong class="purple">can</strong> be set in <a href="#vkResetCommandPool">vkResetCommandPool</a>::<code>flags</code> to control
the reset operation are:</p>
</div>
<div id="VkCommandPoolResetFlagBits" class="listingblock">
<div class="content">
<pre class="highlight"><code class="language-c++" data-lang="c++">typedef enum VkCommandPoolResetFlagBits {
    VK_COMMAND_POOL_RESET_RELEASE_RESOURCES_BIT = 0x00000001,
    VK_COMMAND_POOL_RESET_FLAG_BITS_MAX_ENUM = 0x7FFFFFFF
} VkCommandPoolResetFlagBits;</code></pre>
</div>
</div>
</div>
<div class="sect3">
<h4 id="_description_819">Description</h4>
<div class="ulist">
<ul>
<li>
<p><code>VK_COMMAND_POOL_RESET_RELEASE_RESOURCES_BIT</code> specifies that
resetting a command pool recycles all of the resources from the command
pool back to the system.</p>
</li>
</ul>
</div>
</div>
<div class="sect3">
<h4 id="_see_also_819">See Also</h4>
<div class="paragraph">
<p><a href="#VkCommandPoolResetFlags">VkCommandPoolResetFlags</a></p>
</div>
</div>
<div class="sect3">
<h4 id="_document_notes_819">Document Notes</h4>
<div class="paragraph">
<p>For more information, see the Vulkan Specification at URL</p>
</div>
<div class="paragraph">
<p><a href="https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VkCommandPoolResetFlagBits" class="bare">https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VkCommandPoolResetFlagBits</a></p>
</div>
<div class="paragraph">
<p>This page is extracted from the Vulkan Specification.
Fixes and changes should be made to the Specification, not directly.</p>
</div>
<div style="page-break-after: always;"></div>
</div>
</div>
<div class="sect2">
<h3 id="_vkcompareop3">VkCompareOp(3)</h3>
<div class="sect3">
<h4 id="_name_820">Name</h4>
<div class="paragraph">
<p>VkCompareOp - Stencil comparison function</p>
</div>
</div>
<div class="sect3">
<h4 id="_c_specification_820">C Specification</h4>
<div class="paragraph">
<p>Possible values of <a href="#VkStencilOpState">VkStencilOpState</a>::<code>compareOp</code>, specifying the
stencil comparison function, are:</p>
</div>
<div id="VkCompareOp" class="listingblock">
<div class="content">
<pre class="highlight"><code class="language-c++" data-lang="c++">typedef enum VkCompareOp {
    VK_COMPARE_OP_NEVER = 0,
    VK_COMPARE_OP_LESS = 1,
    VK_COMPARE_OP_EQUAL = 2,
    VK_COMPARE_OP_LESS_OR_EQUAL = 3,
    VK_COMPARE_OP_GREATER = 4,
    VK_COMPARE_OP_NOT_EQUAL = 5,
    VK_COMPARE_OP_GREATER_OR_EQUAL = 6,
    VK_COMPARE_OP_ALWAYS = 7,
    VK_COMPARE_OP_MAX_ENUM = 0x7FFFFFFF
} VkCompareOp;</code></pre>
</div>
</div>
</div>
<div class="sect3">
<h4 id="_description_820">Description</h4>
<div class="ulist">
<ul>
<li>
<p><code>VK_COMPARE_OP_NEVER</code> specifies that the test never passes.</p>
</li>
<li>
<p><code>VK_COMPARE_OP_LESS</code> specifies that the test passes when <span class="eq">R &lt;
S</span>.</p>
</li>
<li>
<p><code>VK_COMPARE_OP_EQUAL</code> specifies that the test passes when <span class="eq">R =
S</span>.</p>
</li>
<li>
<p><code>VK_COMPARE_OP_LESS_OR_EQUAL</code> specifies that the test passes when
<span class="eq">R ≤ S</span>.</p>
</li>
<li>
<p><code>VK_COMPARE_OP_GREATER</code> specifies that the test passes when <span class="eq">R &gt;
S</span>.</p>
</li>
<li>
<p><code>VK_COMPARE_OP_NOT_EQUAL</code> specifies that the test passes when <span class="eq">R
≠ S</span>.</p>
</li>
<li>
<p><code>VK_COMPARE_OP_GREATER_OR_EQUAL</code> specifies that the test passes when
<span class="eq">R ≥ S</span>.</p>
</li>
<li>
<p><code>VK_COMPARE_OP_ALWAYS</code> specifies that the test always passes.</p>
</li>
</ul>
</div>
</div>
<div class="sect3">
<h4 id="_see_also_820">See Also</h4>
<div class="paragraph">
<p><a href="#VkPipelineDepthStencilStateCreateInfo">VkPipelineDepthStencilStateCreateInfo</a>, <a href="#VkSamplerCreateInfo">VkSamplerCreateInfo</a>, <a href="#VkStencilOpState">VkStencilOpState</a></p>
</div>
</div>
<div class="sect3">
<h4 id="_document_notes_820">Document Notes</h4>
<div class="paragraph">
<p>For more information, see the Vulkan Specification at URL</p>
</div>
<div class="paragraph">
<p><a href="https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VkCompareOp" class="bare">https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VkCompareOp</a></p>
</div>
<div class="paragraph">
<p>This page is extracted from the Vulkan Specification.
Fixes and changes should be made to the Specification, not directly.</p>
</div>
<div style="page-break-after: always;"></div>
</div>
</div>
<div class="sect2">
<h3 id="_vkcomponentswizzle3">VkComponentSwizzle(3)</h3>
<div class="sect3">
<h4 id="_name_821">Name</h4>
<div class="paragraph">
<p>VkComponentSwizzle - Specify how a component is swizzled</p>
</div>
</div>
<div class="sect3">
<h4 id="_c_specification_821">C Specification</h4>
<div class="paragraph">
<p>Possible values of the members of <a href="#VkComponentMapping">VkComponentMapping</a>, specifying the
component values placed in each component of the output vector, are:</p>
</div>
<div id="VkComponentSwizzle" class="listingblock">
<div class="content">
<pre class="highlight"><code class="language-c++" data-lang="c++">typedef enum VkComponentSwizzle {
    VK_COMPONENT_SWIZZLE_IDENTITY = 0,
    VK_COMPONENT_SWIZZLE_ZERO = 1,
    VK_COMPONENT_SWIZZLE_ONE = 2,
    VK_COMPONENT_SWIZZLE_R = 3,
    VK_COMPONENT_SWIZZLE_G = 4,
    VK_COMPONENT_SWIZZLE_B = 5,
    VK_COMPONENT_SWIZZLE_A = 6,
    VK_COMPONENT_SWIZZLE_MAX_ENUM = 0x7FFFFFFF
} VkComponentSwizzle;</code></pre>
</div>
</div>
</div>
<div class="sect3">
<h4 id="_description_821">Description</h4>
<div class="ulist">
<ul>
<li>
<p><code>VK_COMPONENT_SWIZZLE_IDENTITY</code> specifies that the component is set
to the identity swizzle.</p>
</li>
<li>
<p><code>VK_COMPONENT_SWIZZLE_ZERO</code> specifies that the component is set to
zero.</p>
</li>
<li>
<p><code>VK_COMPONENT_SWIZZLE_ONE</code> specifies that the component is set to
either 1 or 1.0, depending on whether the type of the image view format
is integer or floating-point respectively, as determined by the
<a href="vkspec.html#formats-definition">Format Definition</a> section for each
<a href="#VkFormat">VkFormat</a>.</p>
</li>
<li>
<p><code>VK_COMPONENT_SWIZZLE_R</code> specifies that the component is set to the
value of the R component of the image.</p>
</li>
<li>
<p><code>VK_COMPONENT_SWIZZLE_G</code> specifies that the component is set to the
value of the G component of the image.</p>
</li>
<li>
<p><code>VK_COMPONENT_SWIZZLE_B</code> specifies that the component is set to the
value of the B component of the image.</p>
</li>
<li>
<p><code>VK_COMPONENT_SWIZZLE_A</code> specifies that the component is set to the
value of the A component of the image.</p>
</li>
</ul>
</div>
<div class="paragraph">
<p>Setting the identity swizzle on a component is equivalent to setting the
identity mapping on that component.
That is:</p>
</div>
<table id="resources-image-views-identity-mappings" class="tableblock frame-all grid-all stretch">
<caption class="title">Table 17. Component Mappings Equivalent To <code>VK_COMPONENT_SWIZZLE_IDENTITY</code></caption>
<colgroup>
<col style="width: 50%;" />
<col style="width: 50%;" />
</colgroup>
<thead>
<tr>
<th class="tableblock halign-left valign-top">Component</th>
<th class="tableblock halign-left valign-top">Identity Mapping</th>
</tr>
</thead>
<tbody>
<tr>
<td class="tableblock halign-left valign-top"><p class="tableblock"><code>components.r</code></p></td>
<td class="tableblock halign-left valign-top"><p class="tableblock"><code>VK_COMPONENT_SWIZZLE_R</code></p></td>
</tr>
<tr>
<td class="tableblock halign-left valign-top"><p class="tableblock"><code>components.g</code></p></td>
<td class="tableblock halign-left valign-top"><p class="tableblock"><code>VK_COMPONENT_SWIZZLE_G</code></p></td>
</tr>
<tr>
<td class="tableblock halign-left valign-top"><p class="tableblock"><code>components.b</code></p></td>
<td class="tableblock halign-left valign-top"><p class="tableblock"><code>VK_COMPONENT_SWIZZLE_B</code></p></td>
</tr>
<tr>
<td class="tableblock halign-left valign-top"><p class="tableblock"><code>components.a</code></p></td>
<td class="tableblock halign-left valign-top"><p class="tableblock"><code>VK_COMPONENT_SWIZZLE_A</code></p></td>
</tr>
</tbody>
</table>
</div>
<div class="sect3">
<h4 id="_see_also_821">See Also</h4>
<div class="paragraph">
<p><a href="#VkComponentMapping">VkComponentMapping</a></p>
</div>
</div>
<div class="sect3">
<h4 id="_document_notes_821">Document Notes</h4>
<div class="paragraph">
<p>For more information, see the Vulkan Specification at URL</p>
</div>
<div class="paragraph">
<p><a href="https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VkComponentSwizzle" class="bare">https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VkComponentSwizzle</a></p>
</div>
<div class="paragraph">
<p>This page is extracted from the Vulkan Specification.
Fixes and changes should be made to the Specification, not directly.</p>
</div>
<div style="page-break-after: always;"></div>
</div>
</div>
<div class="sect2">
<h3 id="_vkcomponenttypenv3">VkComponentTypeNV(3)</h3>
<div class="sect3">
<h4 id="_name_822">Name</h4>
<div class="paragraph">
<p>VkComponentTypeNV - Specify SPIR-V cooperative matrix component type</p>
</div>
</div>
<div class="sect3">
<h4 id="_c_specification_822">C Specification</h4>
<div class="paragraph">
<p>Possible values for <a href="#VkComponentTypeNV">VkComponentTypeNV</a> include:</p>
</div>
<div id="VkComponentTypeNV" class="listingblock">
<div class="content">
<pre class="highlight"><code class="language-c++" data-lang="c++">typedef enum VkComponentTypeNV {
    VK_COMPONENT_TYPE_FLOAT16_NV = 0,
    VK_COMPONENT_TYPE_FLOAT32_NV = 1,
    VK_COMPONENT_TYPE_FLOAT64_NV = 2,
    VK_COMPONENT_TYPE_SINT8_NV = 3,
    VK_COMPONENT_TYPE_SINT16_NV = 4,
    VK_COMPONENT_TYPE_SINT32_NV = 5,
    VK_COMPONENT_TYPE_SINT64_NV = 6,
    VK_COMPONENT_TYPE_UINT8_NV = 7,
    VK_COMPONENT_TYPE_UINT16_NV = 8,
    VK_COMPONENT_TYPE_UINT32_NV = 9,
    VK_COMPONENT_TYPE_UINT64_NV = 10,
    VK_COMPONENT_TYPE_MAX_ENUM_NV = 0x7FFFFFFF
} VkComponentTypeNV;</code></pre>
</div>
</div>
</div>
<div class="sect3">
<h4 id="_description_822">Description</h4>
<div class="ulist">
<ul>
<li>
<p><code>VK_COMPONENT_TYPE_FLOAT16_NV</code> corresponds to SPIR-V
<code>OpTypeFloat</code> 16.</p>
</li>
<li>
<p><code>VK_COMPONENT_TYPE_FLOAT32_NV</code> corresponds to SPIR-V
<code>OpTypeFloat</code> 32.</p>
</li>
<li>
<p><code>VK_COMPONENT_TYPE_FLOAT64_NV</code> corresponds to SPIR-V
<code>OpTypeFloat</code> 64.</p>
</li>
<li>
<p><code>VK_COMPONENT_TYPE_SINT8_NV</code> corresponds to SPIR-V <code>OpTypeInt</code> 8
1.</p>
</li>
<li>
<p><code>VK_COMPONENT_TYPE_SINT16_NV</code> corresponds to SPIR-V <code>OpTypeInt</code>
16 1.</p>
</li>
<li>
<p><code>VK_COMPONENT_TYPE_SINT32_NV</code> corresponds to SPIR-V <code>OpTypeInt</code>
32 1.</p>
</li>
<li>
<p><code>VK_COMPONENT_TYPE_SINT64_NV</code> corresponds to SPIR-V <code>OpTypeInt</code>
64 1.</p>
</li>
<li>
<p><code>VK_COMPONENT_TYPE_UINT8_NV</code> corresponds to SPIR-V <code>OpTypeInt</code> 8
0.</p>
</li>
<li>
<p><code>VK_COMPONENT_TYPE_UINT16_NV</code> corresponds to SPIR-V <code>OpTypeInt</code>
16 0.</p>
</li>
<li>
<p><code>VK_COMPONENT_TYPE_UINT32_NV</code> corresponds to SPIR-V <code>OpTypeInt</code>
32 0.</p>
</li>
<li>
<p><code>VK_COMPONENT_TYPE_UINT64_NV</code> corresponds to SPIR-V <code>OpTypeInt</code>
64 0.</p>
</li>
</ul>
</div>
</div>
<div class="sect3">
<h4 id="_see_also_822">See Also</h4>
<div class="paragraph">
<p><a href="#VkCooperativeMatrixPropertiesNV">VkCooperativeMatrixPropertiesNV</a></p>
</div>
</div>
<div class="sect3">
<h4 id="_document_notes_822">Document Notes</h4>
<div class="paragraph">
<p>For more information, see the Vulkan Specification at URL</p>
</div>
<div class="paragraph">
<p><a href="https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VkComponentTypeNV" class="bare">https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VkComponentTypeNV</a></p>
</div>
<div class="paragraph">
<p>This page is extracted from the Vulkan Specification.
Fixes and changes should be made to the Specification, not directly.</p>
</div>
<div style="page-break-after: always;"></div>
</div>
</div>
<div class="sect2">
<h3 id="_vkcompositealphaflagbitskhr3">VkCompositeAlphaFlagBitsKHR(3)</h3>
<div class="sect3">
<h4 id="_name_823">Name</h4>
<div class="paragraph">
<p>VkCompositeAlphaFlagBitsKHR - alpha compositing modes supported on a device</p>
</div>
</div>
<div class="sect3">
<h4 id="_c_specification_823">C Specification</h4>
<div class="paragraph">
<p>The <code>supportedCompositeAlpha</code> member is of type
<a href="#VkCompositeAlphaFlagBitsKHR">VkCompositeAlphaFlagBitsKHR</a>, which contains the following values:</p>
</div>
<div id="VkCompositeAlphaFlagBitsKHR" class="listingblock">
<div class="content">
<pre class="highlight"><code class="language-c++" data-lang="c++">typedef enum VkCompositeAlphaFlagBitsKHR {
    VK_COMPOSITE_ALPHA_OPAQUE_BIT_KHR = 0x00000001,
    VK_COMPOSITE_ALPHA_PRE_MULTIPLIED_BIT_KHR = 0x00000002,
    VK_COMPOSITE_ALPHA_POST_MULTIPLIED_BIT_KHR = 0x00000004,
    VK_COMPOSITE_ALPHA_INHERIT_BIT_KHR = 0x00000008,
    VK_COMPOSITE_ALPHA_FLAG_BITS_MAX_ENUM_KHR = 0x7FFFFFFF
} VkCompositeAlphaFlagBitsKHR;</code></pre>
</div>
</div>
</div>
<div class="sect3">
<h4 id="_description_823">Description</h4>
<div class="paragraph">
<p>These values are described as follows:</p>
</div>
<div class="ulist">
<ul>
<li>
<p><code>VK_COMPOSITE_ALPHA_OPAQUE_BIT_KHR</code>: The alpha channel, if it
exists, of the images is ignored in the compositing process.
Instead, the image is treated as if it has a constant alpha of 1.0.</p>
</li>
<li>
<p><code>VK_COMPOSITE_ALPHA_PRE_MULTIPLIED_BIT_KHR</code>: The alpha channel, if
it exists, of the images is respected in the compositing process.
The non-alpha channels of the image are expected to already be
multiplied by the alpha channel by the application.</p>
</li>
<li>
<p><code>VK_COMPOSITE_ALPHA_POST_MULTIPLIED_BIT_KHR</code>: The alpha channel, if
it exists, of the images is respected in the compositing process.
The non-alpha channels of the image are not expected to already be
multiplied by the alpha channel by the application; instead, the
compositor will multiply the non-alpha channels of the image by the
alpha channel during compositing.</p>
</li>
<li>
<p><code>VK_COMPOSITE_ALPHA_INHERIT_BIT_KHR</code>: The way in which the
presentation engine treats the alpha channel in the images is unknown to
the Vulkan API.
Instead, the application is responsible for setting the composite alpha
blending mode using native window system commands.
If the application does not set the blending mode using native window
system commands, then a platform-specific default will be used.</p>
</li>
</ul>
</div>
</div>
<div class="sect3">
<h4 id="_see_also_823">See Also</h4>
<div class="paragraph">
<p><a href="#VkCompositeAlphaFlagsKHR">VkCompositeAlphaFlagsKHR</a>, <a href="#VkSwapchainCreateInfoKHR">VkSwapchainCreateInfoKHR</a></p>
</div>
</div>
<div class="sect3">
<h4 id="_document_notes_823">Document Notes</h4>
<div class="paragraph">
<p>For more information, see the Vulkan Specification at URL</p>
</div>
<div class="paragraph">
<p><a href="https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VkCompositeAlphaFlagBitsKHR" class="bare">https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VkCompositeAlphaFlagBitsKHR</a></p>
</div>
<div class="paragraph">
<p>This page is extracted from the Vulkan Specification.
Fixes and changes should be made to the Specification, not directly.</p>
</div>
<div style="page-break-after: always;"></div>
</div>
</div>
<div class="sect2">
<h3 id="_vkconditionalrenderingflagbitsext3">VkConditionalRenderingFlagBitsEXT(3)</h3>
<div class="sect3">
<h4 id="_name_824">Name</h4>
<div class="paragraph">
<p>VkConditionalRenderingFlagBitsEXT - Specify the behavior of conditional rendering</p>
</div>
</div>
<div class="sect3">
<h4 id="_c_specification_824">C Specification</h4>
<div class="paragraph">
<p>Bits which <strong class="purple">can</strong> be set in
<a href="#vkCmdBeginConditionalRenderingEXT">vkCmdBeginConditionalRenderingEXT</a>::<code>flags</code> specifying the behavior
of conditional rendering are:</p>
</div>
<div id="VkConditionalRenderingFlagBitsEXT" class="listingblock">
<div class="content">
<pre class="highlight"><code class="language-c++" data-lang="c++">typedef enum VkConditionalRenderingFlagBitsEXT {
    VK_CONDITIONAL_RENDERING_INVERTED_BIT_EXT = 0x00000001,
    VK_CONDITIONAL_RENDERING_FLAG_BITS_MAX_ENUM_EXT = 0x7FFFFFFF
} VkConditionalRenderingFlagBitsEXT;</code></pre>
</div>
</div>
</div>
<div class="sect3">
<h4 id="_description_824">Description</h4>
<div class="ulist">
<ul>
<li>
<p><code>VK_CONDITIONAL_RENDERING_INVERTED_BIT_EXT</code> specifies the condition
used to determine whether to discard rendering commands or not.
That is, if the 32-bit predicate read from <code>buffer</code> memory at
<code>offset</code> is zero, the rendering commands are not discarded, and if
non zero, then they are discarded.</p>
</li>
</ul>
</div>
</div>
<div class="sect3">
<h4 id="_see_also_824">See Also</h4>
<div class="paragraph">
<p><a href="#VkConditionalRenderingFlagsEXT">VkConditionalRenderingFlagsEXT</a></p>
</div>
</div>
<div class="sect3">
<h4 id="_document_notes_824">Document Notes</h4>
<div class="paragraph">
<p>For more information, see the Vulkan Specification at URL</p>
</div>
<div class="paragraph">
<p><a href="https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VkConditionalRenderingFlagBitsEXT" class="bare">https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VkConditionalRenderingFlagBitsEXT</a></p>
</div>
<div class="paragraph">
<p>This page is extracted from the Vulkan Specification.
Fixes and changes should be made to the Specification, not directly.</p>
</div>
<div style="page-break-after: always;"></div>
</div>
</div>
<div class="sect2">
<h3 id="_vkconservativerasterizationmodeext3">VkConservativeRasterizationModeEXT(3)</h3>
<div class="sect3">
<h4 id="_name_825">Name</h4>
<div class="paragraph">
<p>VkConservativeRasterizationModeEXT - Specify the conservative rasterization mode</p>
</div>
</div>
<div class="sect3">
<h4 id="_c_specification_825">C Specification</h4>
<div class="paragraph">
<p>Possible values of
<a href="#VkPipelineRasterizationConservativeStateCreateInfoEXT">VkPipelineRasterizationConservativeStateCreateInfoEXT</a>::<code>conservativeRasterizationMode</code>,
specifying the conservative rasterization mode are:</p>
</div>
<div id="VkConservativeRasterizationModeEXT" class="listingblock">
<div class="content">
<pre class="highlight"><code class="language-c++" data-lang="c++">typedef enum VkConservativeRasterizationModeEXT {
    VK_CONSERVATIVE_RASTERIZATION_MODE_DISABLED_EXT = 0,
    VK_CONSERVATIVE_RASTERIZATION_MODE_OVERESTIMATE_EXT = 1,
    VK_CONSERVATIVE_RASTERIZATION_MODE_UNDERESTIMATE_EXT = 2,
    VK_CONSERVATIVE_RASTERIZATION_MODE_MAX_ENUM_EXT = 0x7FFFFFFF
} VkConservativeRasterizationModeEXT;</code></pre>
</div>
</div>
</div>
<div class="sect3">
<h4 id="_description_825">Description</h4>
<div class="ulist">
<ul>
<li>
<p><code>VK_CONSERVATIVE_RASTERIZATION_MODE_DISABLED_EXT</code> specifies that
conservative rasterization is disabled and rasterization proceeds as
normal.</p>
</li>
<li>
<p><code>VK_CONSERVATIVE_RASTERIZATION_MODE_OVERESTIMATE_EXT</code> specifies that
conservative rasterization is enabled in overestimation mode.</p>
</li>
<li>
<p><code>VK_CONSERVATIVE_RASTERIZATION_MODE_UNDERESTIMATE_EXT</code> specifies
that conservative rasterization is enabled in underestimation mode.</p>
</li>
</ul>
</div>
</div>
<div class="sect3">
<h4 id="_see_also_825">See Also</h4>
<div class="paragraph">
<p><a href="#VkPipelineRasterizationConservativeStateCreateInfoEXT">VkPipelineRasterizationConservativeStateCreateInfoEXT</a></p>
</div>
</div>
<div class="sect3">
<h4 id="_document_notes_825">Document Notes</h4>
<div class="paragraph">
<p>For more information, see the Vulkan Specification at URL</p>
</div>
<div class="paragraph">
<p><a href="https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VkConservativeRasterizationModeEXT" class="bare">https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VkConservativeRasterizationModeEXT</a></p>
</div>
<div class="paragraph">
<p>This page is extracted from the Vulkan Specification.
Fixes and changes should be made to the Specification, not directly.</p>
</div>
<div style="page-break-after: always;"></div>
</div>
</div>
<div class="sect2">
<h3 id="_vkcopyaccelerationstructuremodenv3">VkCopyAccelerationStructureModeNV(3)</h3>
<div class="sect3">
<h4 id="_name_826">Name</h4>
<div class="paragraph">
<p>VkCopyAccelerationStructureModeNV - Acceleration structure copy mode</p>
</div>
</div>
<div class="sect3">
<h4 id="_c_specification_826">C Specification</h4>
<div class="paragraph">
<p>Possible values of <a href="#vkCmdCopyAccelerationStructureNV">vkCmdCopyAccelerationStructureNV</a>::<code>mode</code>,
specifying additional operations to perform during the copy, are:</p>
</div>
<div id="VkCopyAccelerationStructureModeNV" class="listingblock">
<div class="content">
<pre class="highlight"><code class="language-c++" data-lang="c++">typedef enum VkCopyAccelerationStructureModeNV {
    VK_COPY_ACCELERATION_STRUCTURE_MODE_CLONE_NV = 0,
    VK_COPY_ACCELERATION_STRUCTURE_MODE_COMPACT_NV = 1,
    VK_COPY_ACCELERATION_STRUCTURE_MODE_MAX_ENUM_NV = 0x7FFFFFFF
} VkCopyAccelerationStructureModeNV;</code></pre>
</div>
</div>
</div>
<div class="sect3">
<h4 id="_description_826">Description</h4>
<div class="ulist">
<ul>
<li>
<p><code>VK_COPY_ACCELERATION_STRUCTURE_MODE_CLONE_NV</code> creates a direct copy
of the acceleration structure specified in <code>src</code> into the one
specified by <code>dst</code>.
The <code>dst</code> acceleration structure <strong class="purple">must</strong> have been created with the
same parameters as <code>src</code>.</p>
</li>
<li>
<p><code>VK_COPY_ACCELERATION_STRUCTURE_MODE_COMPACT_NV</code> creates a more
compact version of an acceleration structure <code>src</code> into <code>dst</code>.
The acceleration structure <code>dst</code> <strong class="purple">must</strong> have been created with a
<code>compactedSize</code> corresponding to the one returned by
<a href="#vkCmdWriteAccelerationStructuresPropertiesNV">vkCmdWriteAccelerationStructuresPropertiesNV</a> after the build of
the acceleration structure specified by <code>src</code>.</p>
</li>
</ul>
</div>
</div>
<div class="sect3">
<h4 id="_see_also_826">See Also</h4>
<div class="paragraph">
<p><a href="#vkCmdCopyAccelerationStructureNV">vkCmdCopyAccelerationStructureNV</a></p>
</div>
</div>
<div class="sect3">
<h4 id="_document_notes_826">Document Notes</h4>
<div class="paragraph">
<p>For more information, see the Vulkan Specification at URL</p>
</div>
<div class="paragraph">
<p><a href="https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VkCopyAccelerationStructureModeNV" class="bare">https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VkCopyAccelerationStructureModeNV</a></p>
</div>
<div class="paragraph">
<p>This page is extracted from the Vulkan Specification.
Fixes and changes should be made to the Specification, not directly.</p>
</div>
<div style="page-break-after: always;"></div>
</div>
</div>
<div class="sect2">
<h3 id="_vkcoveragemodulationmodenv3">VkCoverageModulationModeNV(3)</h3>
<div class="sect3">
<h4 id="_name_827">Name</h4>
<div class="paragraph">
<p>VkCoverageModulationModeNV - Specify the discard rectangle mode</p>
</div>
</div>
<div class="sect3">
<h4 id="_c_specification_827">C Specification</h4>
<div class="paragraph">
<p>Possible values of
<a href="#VkPipelineCoverageModulationStateCreateInfoNV">VkPipelineCoverageModulationStateCreateInfoNV</a>::<code>coverageModulationMode</code>,
specifying which color components are modulated, are:</p>
</div>
<div id="VkCoverageModulationModeNV" class="listingblock">
<div class="content">
<pre class="highlight"><code class="language-c++" data-lang="c++">typedef enum VkCoverageModulationModeNV {
    VK_COVERAGE_MODULATION_MODE_NONE_NV = 0,
    VK_COVERAGE_MODULATION_MODE_RGB_NV = 1,
    VK_COVERAGE_MODULATION_MODE_ALPHA_NV = 2,
    VK_COVERAGE_MODULATION_MODE_RGBA_NV = 3,
    VK_COVERAGE_MODULATION_MODE_MAX_ENUM_NV = 0x7FFFFFFF
} VkCoverageModulationModeNV;</code></pre>
</div>
</div>
</div>
<div class="sect3">
<h4 id="_description_827">Description</h4>
<div class="ulist">
<ul>
<li>
<p><code>VK_COVERAGE_MODULATION_MODE_NONE_NV</code> specifies that no components
are multiplied by the modulation factor.</p>
</li>
<li>
<p><code>VK_COVERAGE_MODULATION_MODE_RGB_NV</code> specifies that the red, green,
and blue components are multiplied by the modulation factor.</p>
</li>
<li>
<p><code>VK_COVERAGE_MODULATION_MODE_ALPHA_NV</code> specifies that the alpha
component is multiplied by the modulation factor.</p>
</li>
<li>
<p><code>VK_COVERAGE_MODULATION_MODE_RGBA_NV</code> specifies that all components
are multiplied by the modulation factor.</p>
</li>
</ul>
</div>
</div>
<div class="sect3">
<h4 id="_see_also_827">See Also</h4>
<div class="paragraph">
<p><a href="#VkPipelineCoverageModulationStateCreateInfoNV">VkPipelineCoverageModulationStateCreateInfoNV</a></p>
</div>
</div>
<div class="sect3">
<h4 id="_document_notes_827">Document Notes</h4>
<div class="paragraph">
<p>For more information, see the Vulkan Specification at URL</p>
</div>
<div class="paragraph">
<p><a href="https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VkCoverageModulationModeNV" class="bare">https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VkCoverageModulationModeNV</a></p>
</div>
<div class="paragraph">
<p>This page is extracted from the Vulkan Specification.
Fixes and changes should be made to the Specification, not directly.</p>
</div>
<div style="page-break-after: always;"></div>
</div>
</div>
<div class="sect2">
<h3 id="_vkcullmodeflagbits3">VkCullModeFlagBits(3)</h3>
<div class="sect3">
<h4 id="_name_828">Name</h4>
<div class="paragraph">
<p>VkCullModeFlagBits - Bitmask controlling triangle culling</p>
</div>
</div>
<div class="sect3">
<h4 id="_c_specification_828">C Specification</h4>
<div class="paragraph">
<p>Once the orientation of triangles is determined, they are culled according
to the <a href="#VkPipelineRasterizationStateCreateInfo">VkPipelineRasterizationStateCreateInfo</a>::<code>cullMode</code> property
of the currently active pipeline.
Possible values are:</p>
</div>
<div id="VkCullModeFlagBits" class="listingblock">
<div class="content">
<pre class="highlight"><code class="language-c++" data-lang="c++">typedef enum VkCullModeFlagBits {
    VK_CULL_MODE_NONE = 0,
    VK_CULL_MODE_FRONT_BIT = 0x00000001,
    VK_CULL_MODE_BACK_BIT = 0x00000002,
    VK_CULL_MODE_FRONT_AND_BACK = 0x00000003,
    VK_CULL_MODE_FLAG_BITS_MAX_ENUM = 0x7FFFFFFF
} VkCullModeFlagBits;</code></pre>
</div>
</div>
</div>
<div class="sect3">
<h4 id="_description_828">Description</h4>
<div class="ulist">
<ul>
<li>
<p><code>VK_CULL_MODE_NONE</code> specifies that no triangles are discarded</p>
</li>
<li>
<p><code>VK_CULL_MODE_FRONT_BIT</code> specifies that front-facing triangles are
discarded</p>
</li>
<li>
<p><code>VK_CULL_MODE_BACK_BIT</code> specifies that back-facing triangles are
discarded</p>
</li>
<li>
<p><code>VK_CULL_MODE_FRONT_AND_BACK</code> specifies that all triangles are
discarded.</p>
</li>
</ul>
</div>
<div class="paragraph">
<p>Following culling, fragments are produced for any triangles which have not
been discarded.</p>
</div>
</div>
<div class="sect3">
<h4 id="_see_also_828">See Also</h4>
<div class="paragraph">
<p><a href="#VkCullModeFlags">VkCullModeFlags</a></p>
</div>
</div>
<div class="sect3">
<h4 id="_document_notes_828">Document Notes</h4>
<div class="paragraph">
<p>For more information, see the Vulkan Specification at URL</p>
</div>
<div class="paragraph">
<p><a href="https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VkCullModeFlagBits" class="bare">https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VkCullModeFlagBits</a></p>
</div>
<div class="paragraph">
<p>This page is extracted from the Vulkan Specification.
Fixes and changes should be made to the Specification, not directly.</p>
</div>
<div style="page-break-after: always;"></div>
</div>
</div>
<div class="sect2">
<h3 id="_vkdebugreportflagbitsext3">VkDebugReportFlagBitsEXT(3)</h3>
<div class="sect3">
<h4 id="_name_829">Name</h4>
<div class="paragraph">
<p>VkDebugReportFlagBitsEXT - Bitmask specifying events which cause a debug report callback</p>
</div>
</div>
<div class="sect3">
<h4 id="_c_specification_829">C Specification</h4>
<div class="paragraph">
<p>Bits which <strong class="purple">can</strong> be set in
<a href="#VkDebugReportCallbackCreateInfoEXT">VkDebugReportCallbackCreateInfoEXT</a>::<code>flags</code>, specifying events
which cause a debug report, are:</p>
</div>
<div id="VkDebugReportFlagBitsEXT" class="listingblock">
<div class="content">
<pre class="highlight"><code class="language-c++" data-lang="c++">typedef enum VkDebugReportFlagBitsEXT {
    VK_DEBUG_REPORT_INFORMATION_BIT_EXT = 0x00000001,
    VK_DEBUG_REPORT_WARNING_BIT_EXT = 0x00000002,
    VK_DEBUG_REPORT_PERFORMANCE_WARNING_BIT_EXT = 0x00000004,
    VK_DEBUG_REPORT_ERROR_BIT_EXT = 0x00000008,
    VK_DEBUG_REPORT_DEBUG_BIT_EXT = 0x00000010,
    VK_DEBUG_REPORT_FLAG_BITS_MAX_ENUM_EXT = 0x7FFFFFFF
} VkDebugReportFlagBitsEXT;</code></pre>
</div>
</div>
</div>
<div class="sect3">
<h4 id="_description_829">Description</h4>
<div class="ulist">
<ul>
<li>
<p><code>VK_DEBUG_REPORT_ERROR_BIT_EXT</code> specifies that the application has
violated a valid usage condition of the specification.</p>
</li>
<li>
<p><code>VK_DEBUG_REPORT_WARNING_BIT_EXT</code> specifies use of Vulkan that <strong class="purple">may</strong>
expose an app bug.
Such cases may not be immediately harmful, such as a fragment shader
outputting to a location with no attachment.
Other cases <strong class="purple">may</strong> point to behavior that is almost certainly bad when
unintended such as using an image whose memory has not been filled.
In general if you see a warning but you know that the behavior is
intended/desired, then simply ignore the warning.</p>
</li>
<li>
<p><code>VK_DEBUG_REPORT_PERFORMANCE_WARNING_BIT_EXT</code> specifies a
potentially non-optimal use of Vulkan, e.g. using
<a href="#vkCmdClearColorImage">vkCmdClearColorImage</a> when setting
<a href="#VkAttachmentDescription">VkAttachmentDescription</a>::<code>loadOp</code> to
<code>VK_ATTACHMENT_LOAD_OP_CLEAR</code> would have worked.</p>
</li>
<li>
<p><code>VK_DEBUG_REPORT_INFORMATION_BIT_EXT</code> specifies an informational
message such as resource details that may be handy when debugging an
application.</p>
</li>
<li>
<p><code>VK_DEBUG_REPORT_DEBUG_BIT_EXT</code> specifies diagnostic information
from the implementation and layers.</p>
</li>
</ul>
</div>
</div>
<div class="sect3">
<h4 id="_see_also_829">See Also</h4>
<div class="paragraph">
<p><a href="#VkDebugReportFlagsEXT">VkDebugReportFlagsEXT</a></p>
</div>
</div>
<div class="sect3">
<h4 id="_document_notes_829">Document Notes</h4>
<div class="paragraph">
<p>For more information, see the Vulkan Specification at URL</p>
</div>
<div class="paragraph">
<p><a href="https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VkDebugReportFlagBitsEXT" class="bare">https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VkDebugReportFlagBitsEXT</a></p>
</div>
<div class="paragraph">
<p>This page is extracted from the Vulkan Specification.
Fixes and changes should be made to the Specification, not directly.</p>
</div>
<div style="page-break-after: always;"></div>
</div>
</div>
<div class="sect2">
<h3 id="_vkdebugreportobjecttypeext3">VkDebugReportObjectTypeEXT(3)</h3>
<div class="sect3">
<h4 id="_name_830">Name</h4>
<div class="paragraph">
<p>VkDebugReportObjectTypeEXT - Specify the type of an object handle</p>
</div>
</div>
<div class="sect3">
<h4 id="_c_specification_830">C Specification</h4>
<div class="paragraph">
<p>Possible values passed to the <code>objectType</code> parameter of the callback
function specified by
<a href="#VkDebugReportCallbackCreateInfoEXT">VkDebugReportCallbackCreateInfoEXT</a>::<code>pfnCallback</code>, specifying the
type of object handle being reported, are:</p>
</div>
<div id="VkDebugReportObjectTypeEXT" class="listingblock">
<div class="content">
<pre class="highlight"><code class="language-c++" data-lang="c++">typedef enum VkDebugReportObjectTypeEXT {
    VK_DEBUG_REPORT_OBJECT_TYPE_UNKNOWN_EXT = 0,
    VK_DEBUG_REPORT_OBJECT_TYPE_INSTANCE_EXT = 1,
    VK_DEBUG_REPORT_OBJECT_TYPE_PHYSICAL_DEVICE_EXT = 2,
    VK_DEBUG_REPORT_OBJECT_TYPE_DEVICE_EXT = 3,
    VK_DEBUG_REPORT_OBJECT_TYPE_QUEUE_EXT = 4,
    VK_DEBUG_REPORT_OBJECT_TYPE_SEMAPHORE_EXT = 5,
    VK_DEBUG_REPORT_OBJECT_TYPE_COMMAND_BUFFER_EXT = 6,
    VK_DEBUG_REPORT_OBJECT_TYPE_FENCE_EXT = 7,
    VK_DEBUG_REPORT_OBJECT_TYPE_DEVICE_MEMORY_EXT = 8,
    VK_DEBUG_REPORT_OBJECT_TYPE_BUFFER_EXT = 9,
    VK_DEBUG_REPORT_OBJECT_TYPE_IMAGE_EXT = 10,
    VK_DEBUG_REPORT_OBJECT_TYPE_EVENT_EXT = 11,
    VK_DEBUG_REPORT_OBJECT_TYPE_QUERY_POOL_EXT = 12,
    VK_DEBUG_REPORT_OBJECT_TYPE_BUFFER_VIEW_EXT = 13,
    VK_DEBUG_REPORT_OBJECT_TYPE_IMAGE_VIEW_EXT = 14,
    VK_DEBUG_REPORT_OBJECT_TYPE_SHADER_MODULE_EXT = 15,
    VK_DEBUG_REPORT_OBJECT_TYPE_PIPELINE_CACHE_EXT = 16,
    VK_DEBUG_REPORT_OBJECT_TYPE_PIPELINE_LAYOUT_EXT = 17,
    VK_DEBUG_REPORT_OBJECT_TYPE_RENDER_PASS_EXT = 18,
    VK_DEBUG_REPORT_OBJECT_TYPE_PIPELINE_EXT = 19,
    VK_DEBUG_REPORT_OBJECT_TYPE_DESCRIPTOR_SET_LAYOUT_EXT = 20,
    VK_DEBUG_REPORT_OBJECT_TYPE_SAMPLER_EXT = 21,
    VK_DEBUG_REPORT_OBJECT_TYPE_DESCRIPTOR_POOL_EXT = 22,
    VK_DEBUG_REPORT_OBJECT_TYPE_DESCRIPTOR_SET_EXT = 23,
    VK_DEBUG_REPORT_OBJECT_TYPE_FRAMEBUFFER_EXT = 24,
    VK_DEBUG_REPORT_OBJECT_TYPE_COMMAND_POOL_EXT = 25,
    VK_DEBUG_REPORT_OBJECT_TYPE_SURFACE_KHR_EXT = 26,
    VK_DEBUG_REPORT_OBJECT_TYPE_SWAPCHAIN_KHR_EXT = 27,
    VK_DEBUG_REPORT_OBJECT_TYPE_DEBUG_REPORT_CALLBACK_EXT_EXT = 28,
    VK_DEBUG_REPORT_OBJECT_TYPE_DISPLAY_KHR_EXT = 29,
    VK_DEBUG_REPORT_OBJECT_TYPE_DISPLAY_MODE_KHR_EXT = 30,
    VK_DEBUG_REPORT_OBJECT_TYPE_OBJECT_TABLE_NVX_EXT = 31,
    VK_DEBUG_REPORT_OBJECT_TYPE_INDIRECT_COMMANDS_LAYOUT_NVX_EXT = 32,
    VK_DEBUG_REPORT_OBJECT_TYPE_VALIDATION_CACHE_EXT_EXT = 33,
    VK_DEBUG_REPORT_OBJECT_TYPE_SAMPLER_YCBCR_CONVERSION_EXT = 1000156000,
    VK_DEBUG_REPORT_OBJECT_TYPE_DESCRIPTOR_UPDATE_TEMPLATE_EXT = 1000085000,
    VK_DEBUG_REPORT_OBJECT_TYPE_ACCELERATION_STRUCTURE_NV_EXT = 1000165000,
    VK_DEBUG_REPORT_OBJECT_TYPE_DEBUG_REPORT_EXT = VK_DEBUG_REPORT_OBJECT_TYPE_DEBUG_REPORT_CALLBACK_EXT_EXT,
    VK_DEBUG_REPORT_OBJECT_TYPE_VALIDATION_CACHE_EXT = VK_DEBUG_REPORT_OBJECT_TYPE_VALIDATION_CACHE_EXT_EXT,
    VK_DEBUG_REPORT_OBJECT_TYPE_DESCRIPTOR_UPDATE_TEMPLATE_KHR_EXT = VK_DEBUG_REPORT_OBJECT_TYPE_DESCRIPTOR_UPDATE_TEMPLATE_EXT,
    VK_DEBUG_REPORT_OBJECT_TYPE_SAMPLER_YCBCR_CONVERSION_KHR_EXT = VK_DEBUG_REPORT_OBJECT_TYPE_SAMPLER_YCBCR_CONVERSION_EXT,
    VK_DEBUG_REPORT_OBJECT_TYPE_MAX_ENUM_EXT = 0x7FFFFFFF
} VkDebugReportObjectTypeEXT;</code></pre>
</div>
</div>
</div>
<div class="sect3">
<h4 id="_description_830">Description</h4>
<table id="debug-report-object-types" class="tableblock frame-all grid-all" style="width: 80%;">
<caption class="title">Table 18. VkDebugReportObjectTypeEXT and Vulkan Handle Relationship</caption>
<colgroup>
<col style="width: 60.3448%;" />
<col style="width: 39.6552%;" />
</colgroup>
<thead>
<tr>
<th class="tableblock halign-left valign-top"><a href="#VkDebugReportObjectTypeEXT">VkDebugReportObjectTypeEXT</a></th>
<th class="tableblock halign-left valign-top">Vulkan Handle Type</th>
</tr>
</thead>
<tbody>
<tr>
<td class="tableblock halign-left valign-top"><p class="tableblock"><code>VK_DEBUG_REPORT_OBJECT_TYPE_UNKNOWN_EXT</code></p></td>
<td class="tableblock halign-left valign-top"><p class="tableblock">Unknown/Undefined Handle</p></td>
</tr>
<tr>
<td class="tableblock halign-left valign-top"><p class="tableblock"><code>VK_DEBUG_REPORT_OBJECT_TYPE_INSTANCE_EXT</code></p></td>
<td class="tableblock halign-left valign-top"><p class="tableblock"><a href="#VkInstance">VkInstance</a></p></td>
</tr>
<tr>
<td class="tableblock halign-left valign-top"><p class="tableblock"><code>VK_DEBUG_REPORT_OBJECT_TYPE_PHYSICAL_DEVICE_EXT</code></p></td>
<td class="tableblock halign-left valign-top"><p class="tableblock"><a href="#VkPhysicalDevice">VkPhysicalDevice</a></p></td>
</tr>
<tr>
<td class="tableblock halign-left valign-top"><p class="tableblock"><code>VK_DEBUG_REPORT_OBJECT_TYPE_DEVICE_EXT</code></p></td>
<td class="tableblock halign-left valign-top"><p class="tableblock"><a href="#VkDevice">VkDevice</a></p></td>
</tr>
<tr>
<td class="tableblock halign-left valign-top"><p class="tableblock"><code>VK_DEBUG_REPORT_OBJECT_TYPE_QUEUE_EXT</code></p></td>
<td class="tableblock halign-left valign-top"><p class="tableblock"><a href="#VkQueue">VkQueue</a></p></td>
</tr>
<tr>
<td class="tableblock halign-left valign-top"><p class="tableblock"><code>VK_DEBUG_REPORT_OBJECT_TYPE_SEMAPHORE_EXT</code></p></td>
<td class="tableblock halign-left valign-top"><p class="tableblock"><a href="#VkSemaphore">VkSemaphore</a></p></td>
</tr>
<tr>
<td class="tableblock halign-left valign-top"><p class="tableblock"><code>VK_DEBUG_REPORT_OBJECT_TYPE_COMMAND_BUFFER_EXT</code></p></td>
<td class="tableblock halign-left valign-top"><p class="tableblock"><a href="#VkCommandBuffer">VkCommandBuffer</a></p></td>
</tr>
<tr>
<td class="tableblock halign-left valign-top"><p class="tableblock"><code>VK_DEBUG_REPORT_OBJECT_TYPE_FENCE_EXT</code></p></td>
<td class="tableblock halign-left valign-top"><p class="tableblock"><a href="#VkFence">VkFence</a></p></td>
</tr>
<tr>
<td class="tableblock halign-left valign-top"><p class="tableblock"><code>VK_DEBUG_REPORT_OBJECT_TYPE_DEVICE_MEMORY_EXT</code></p></td>
<td class="tableblock halign-left valign-top"><p class="tableblock"><a href="#VkDeviceMemory">VkDeviceMemory</a></p></td>
</tr>
<tr>
<td class="tableblock halign-left valign-top"><p class="tableblock"><code>VK_DEBUG_REPORT_OBJECT_TYPE_BUFFER_EXT</code></p></td>
<td class="tableblock halign-left valign-top"><p class="tableblock"><a href="#VkBuffer">VkBuffer</a></p></td>
</tr>
<tr>
<td class="tableblock halign-left valign-top"><p class="tableblock"><code>VK_DEBUG_REPORT_OBJECT_TYPE_IMAGE_EXT</code></p></td>
<td class="tableblock halign-left valign-top"><p class="tableblock"><a href="#VkImage">VkImage</a></p></td>
</tr>
<tr>
<td class="tableblock halign-left valign-top"><p class="tableblock"><code>VK_DEBUG_REPORT_OBJECT_TYPE_EVENT_EXT</code></p></td>
<td class="tableblock halign-left valign-top"><p class="tableblock"><a href="#VkEvent">VkEvent</a></p></td>
</tr>
<tr>
<td class="tableblock halign-left valign-top"><p class="tableblock"><code>VK_DEBUG_REPORT_OBJECT_TYPE_QUERY_POOL_EXT</code></p></td>
<td class="tableblock halign-left valign-top"><p class="tableblock"><a href="#VkQueryPool">VkQueryPool</a></p></td>
</tr>
<tr>
<td class="tableblock halign-left valign-top"><p class="tableblock"><code>VK_DEBUG_REPORT_OBJECT_TYPE_BUFFER_VIEW_EXT</code></p></td>
<td class="tableblock halign-left valign-top"><p class="tableblock"><a href="#VkBufferView">VkBufferView</a></p></td>
</tr>
<tr>
<td class="tableblock halign-left valign-top"><p class="tableblock"><code>VK_DEBUG_REPORT_OBJECT_TYPE_IMAGE_VIEW_EXT</code></p></td>
<td class="tableblock halign-left valign-top"><p class="tableblock"><a href="#VkImageView">VkImageView</a></p></td>
</tr>
<tr>
<td class="tableblock halign-left valign-top"><p class="tableblock"><code>VK_DEBUG_REPORT_OBJECT_TYPE_SHADER_MODULE_EXT</code></p></td>
<td class="tableblock halign-left valign-top"><p class="tableblock"><a href="#VkShaderModule">VkShaderModule</a></p></td>
</tr>
<tr>
<td class="tableblock halign-left valign-top"><p class="tableblock"><code>VK_DEBUG_REPORT_OBJECT_TYPE_PIPELINE_CACHE_EXT</code></p></td>
<td class="tableblock halign-left valign-top"><p class="tableblock"><a href="#VkPipelineCache">VkPipelineCache</a></p></td>
</tr>
<tr>
<td class="tableblock halign-left valign-top"><p class="tableblock"><code>VK_DEBUG_REPORT_OBJECT_TYPE_PIPELINE_LAYOUT_EXT</code></p></td>
<td class="tableblock halign-left valign-top"><p class="tableblock"><a href="#VkPipelineLayout">VkPipelineLayout</a></p></td>
</tr>
<tr>
<td class="tableblock halign-left valign-top"><p class="tableblock"><code>VK_DEBUG_REPORT_OBJECT_TYPE_RENDER_PASS_EXT</code></p></td>
<td class="tableblock halign-left valign-top"><p class="tableblock"><a href="#VkRenderPass">VkRenderPass</a></p></td>
</tr>
<tr>
<td class="tableblock halign-left valign-top"><p class="tableblock"><code>VK_DEBUG_REPORT_OBJECT_TYPE_PIPELINE_EXT</code></p></td>
<td class="tableblock halign-left valign-top"><p class="tableblock"><a href="#VkPipeline">VkPipeline</a></p></td>
</tr>
<tr>
<td class="tableblock halign-left valign-top"><p class="tableblock"><code>VK_DEBUG_REPORT_OBJECT_TYPE_DESCRIPTOR_SET_LAYOUT_EXT</code></p></td>
<td class="tableblock halign-left valign-top"><p class="tableblock"><a href="#VkDescriptorSetLayout">VkDescriptorSetLayout</a></p></td>
</tr>
<tr>
<td class="tableblock halign-left valign-top"><p class="tableblock"><code>VK_DEBUG_REPORT_OBJECT_TYPE_SAMPLER_EXT</code></p></td>
<td class="tableblock halign-left valign-top"><p class="tableblock"><a href="#VkSampler">VkSampler</a></p></td>
</tr>
<tr>
<td class="tableblock halign-left valign-top"><p class="tableblock"><code>VK_DEBUG_REPORT_OBJECT_TYPE_DESCRIPTOR_POOL_EXT</code></p></td>
<td class="tableblock halign-left valign-top"><p class="tableblock"><a href="#VkDescriptorPool">VkDescriptorPool</a></p></td>
</tr>
<tr>
<td class="tableblock halign-left valign-top"><p class="tableblock"><code>VK_DEBUG_REPORT_OBJECT_TYPE_DESCRIPTOR_SET_EXT</code></p></td>
<td class="tableblock halign-left valign-top"><p class="tableblock"><a href="#VkDescriptorSet">VkDescriptorSet</a></p></td>
</tr>
<tr>
<td class="tableblock halign-left valign-top"><p class="tableblock"><code>VK_DEBUG_REPORT_OBJECT_TYPE_FRAMEBUFFER_EXT</code></p></td>
<td class="tableblock halign-left valign-top"><p class="tableblock"><a href="#VkFramebuffer">VkFramebuffer</a></p></td>
</tr>
<tr>
<td class="tableblock halign-left valign-top"><p class="tableblock"><code>VK_DEBUG_REPORT_OBJECT_TYPE_COMMAND_POOL_EXT</code></p></td>
<td class="tableblock halign-left valign-top"><p class="tableblock"><a href="#VkCommandPool">VkCommandPool</a></p></td>
</tr>
<tr>
<td class="tableblock halign-left valign-top"><p class="tableblock"><code>VK_DEBUG_REPORT_OBJECT_TYPE_SURFACE_KHR_EXT</code></p></td>
<td class="tableblock halign-left valign-top"><p class="tableblock"><a href="#VkSurfaceKHR">VkSurfaceKHR</a></p></td>
</tr>
<tr>
<td class="tableblock halign-left valign-top"><p class="tableblock"><code>VK_DEBUG_REPORT_OBJECT_TYPE_SWAPCHAIN_KHR_EXT</code></p></td>
<td class="tableblock halign-left valign-top"><p class="tableblock"><a href="#VkSwapchainKHR">VkSwapchainKHR</a></p></td>
</tr>
<tr>
<td class="tableblock halign-left valign-top"><p class="tableblock"><code>VK_DEBUG_REPORT_OBJECT_TYPE_DEBUG_REPORT_CALLBACK_EXT_EXT</code></p></td>
<td class="tableblock halign-left valign-top"><p class="tableblock"><a href="#VkDebugReportCallbackEXT">VkDebugReportCallbackEXT</a></p></td>
</tr>
<tr>
<td class="tableblock halign-left valign-top"><p class="tableblock"><code>VK_DEBUG_REPORT_OBJECT_TYPE_DISPLAY_KHR_EXT</code></p></td>
<td class="tableblock halign-left valign-top"><p class="tableblock"><a href="#VkDisplayKHR">VkDisplayKHR</a></p></td>
</tr>
<tr>
<td class="tableblock halign-left valign-top"><p class="tableblock"><code>VK_DEBUG_REPORT_OBJECT_TYPE_DISPLAY_MODE_KHR_EXT</code></p></td>
<td class="tableblock halign-left valign-top"><p class="tableblock"><a href="#VkDisplayModeKHR">VkDisplayModeKHR</a></p></td>
</tr>
<tr>
<td class="tableblock halign-left valign-top"><p class="tableblock"><code>VK_DEBUG_REPORT_OBJECT_TYPE_OBJECT_TABLE_NVX_EXT</code></p></td>
<td class="tableblock halign-left valign-top"><p class="tableblock"><a href="#VkObjectTableNVX">VkObjectTableNVX</a></p></td>
</tr>
<tr>
<td class="tableblock halign-left valign-top"><p class="tableblock"><code>VK_DEBUG_REPORT_OBJECT_TYPE_INDIRECT_COMMANDS_LAYOUT_NVX_EXT</code></p></td>
<td class="tableblock halign-left valign-top"><p class="tableblock"><a href="#VkIndirectCommandsLayoutNVX">VkIndirectCommandsLayoutNVX</a></p></td>
</tr>
<tr>
<td class="tableblock halign-left valign-top"><p class="tableblock"><code>VK_DEBUG_REPORT_OBJECT_TYPE_DESCRIPTOR_UPDATE_TEMPLATE_EXT</code></p></td>
<td class="tableblock halign-left valign-top"><p class="tableblock"><a href="#VkDescriptorUpdateTemplate">VkDescriptorUpdateTemplate</a></p></td>
</tr>
</tbody>
</table>
<div class="admonitionblock note">
<table>
<tr>
<td class="icon">
<i class="fa icon-note" title="Note"></i>
</td>
<td class="content">
<div class="title">Note</div>
<div class="paragraph">
<p>The primary expected use of <code>VK_ERROR_VALIDATION_FAILED_EXT</code> is for
validation layer testing.
It is not expected that an application would see this error code during
normal use of the validation layers.</p>
</div>
</td>
</tr>
</table>
</div>
</div>
<div class="sect3">
<h4 id="_see_also_830">See Also</h4>
<div class="paragraph">
<p><a href="#VkDebugMarkerObjectNameInfoEXT">VkDebugMarkerObjectNameInfoEXT</a>, <a href="#VkDebugMarkerObjectTagInfoEXT">VkDebugMarkerObjectTagInfoEXT</a>, <a href="#vkDebugReportMessageEXT">vkDebugReportMessageEXT</a></p>
</div>
</div>
<div class="sect3">
<h4 id="_document_notes_830">Document Notes</h4>
<div class="paragraph">
<p>For more information, see the Vulkan Specification at URL</p>
</div>
<div class="paragraph">
<p><a href="https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VkDebugReportObjectTypeEXT" class="bare">https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VkDebugReportObjectTypeEXT</a></p>
</div>
<div class="paragraph">
<p>This page is extracted from the Vulkan Specification.
Fixes and changes should be made to the Specification, not directly.</p>
</div>
<div style="page-break-after: always;"></div>
</div>
</div>
<div class="sect2">
<h3 id="_vkdebugutilsmessageseverityflagbitsext3">VkDebugUtilsMessageSeverityFlagBitsEXT(3)</h3>
<div class="sect3">
<h4 id="_name_831">Name</h4>
<div class="paragraph">
<p>VkDebugUtilsMessageSeverityFlagBitsEXT - Bitmask specifying which severities of events cause a debug messenger callback</p>
</div>
</div>
<div class="sect3">
<h4 id="_c_specification_831">C Specification</h4>
<div class="paragraph">
<p>Bits which <strong class="purple">can</strong> be set in
<a href="#VkDebugUtilsMessengerCreateInfoEXT">VkDebugUtilsMessengerCreateInfoEXT</a>::<code>messageSeverity</code>, specifying
event severities which cause a debug messenger to call the callback, are:</p>
</div>
<div id="VkDebugUtilsMessageSeverityFlagBitsEXT" class="listingblock">
<div class="content">
<pre class="highlight"><code class="language-c++" data-lang="c++">typedef enum VkDebugUtilsMessageSeverityFlagBitsEXT {
    VK_DEBUG_UTILS_MESSAGE_SEVERITY_VERBOSE_BIT_EXT = 0x00000001,
    VK_DEBUG_UTILS_MESSAGE_SEVERITY_INFO_BIT_EXT = 0x00000010,
    VK_DEBUG_UTILS_MESSAGE_SEVERITY_WARNING_BIT_EXT = 0x00000100,
    VK_DEBUG_UTILS_MESSAGE_SEVERITY_ERROR_BIT_EXT = 0x00001000,
    VK_DEBUG_UTILS_MESSAGE_SEVERITY_FLAG_BITS_MAX_ENUM_EXT = 0x7FFFFFFF
} VkDebugUtilsMessageSeverityFlagBitsEXT;</code></pre>
</div>
</div>
</div>
<div class="sect3">
<h4 id="_description_831">Description</h4>
<div class="ulist">
<ul>
<li>
<p><code>VK_DEBUG_UTILS_MESSAGE_SEVERITY_VERBOSE_BIT_EXT</code> specifies the most
verbose output indicating all diagnostic messages from the Vulkan
loader, layers, and drivers should be captured.</p>
</li>
<li>
<p><code>VK_DEBUG_UTILS_MESSAGE_SEVERITY_INFO_BIT_EXT</code> specifies an
informational message such as resource details that may be handy when
debugging an application.</p>
</li>
<li>
<p><code>VK_DEBUG_UTILS_MESSAGE_SEVERITY_WARNING_BIT_EXT</code> specifies use of
Vulkan that <strong class="purple">may</strong> expose an app bug.
Such cases may not be immediately harmful, such as a fragment shader
outputting to a location with no attachment.
Other cases <strong class="purple">may</strong> point to behavior that is almost certainly bad when
unintended such as using an image whose memory has not been filled.
In general if you see a warning but you know that the behavior is
intended/desired, then simply ignore the warning.</p>
</li>
<li>
<p><code>VK_DEBUG_UTILS_MESSAGE_SEVERITY_ERROR_BIT_EXT</code> specifies that the
application has violated a valid usage condition of the specification.</p>
</li>
</ul>
</div>
</div>
<div class="sect3">
<h4 id="_see_also_831">See Also</h4>
<div class="paragraph">
<p><a href="#VkDebugUtilsMessageSeverityFlagsEXT">VkDebugUtilsMessageSeverityFlagsEXT</a>, <a href="#vkSubmitDebugUtilsMessageEXT">vkSubmitDebugUtilsMessageEXT</a></p>
</div>
</div>
<div class="sect3">
<h4 id="_document_notes_831">Document Notes</h4>
<div class="paragraph">
<p>For more information, see the Vulkan Specification at URL</p>
</div>
<div class="paragraph">
<p><a href="https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VkDebugUtilsMessageSeverityFlagBitsEXT" class="bare">https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VkDebugUtilsMessageSeverityFlagBitsEXT</a></p>
</div>
<div class="paragraph">
<p>This page is extracted from the Vulkan Specification.
Fixes and changes should be made to the Specification, not directly.</p>
</div>
<div style="page-break-after: always;"></div>
</div>
</div>
<div class="sect2">
<h3 id="_vkdebugutilsmessagetypeflagbitsext3">VkDebugUtilsMessageTypeFlagBitsEXT(3)</h3>
<div class="sect3">
<h4 id="_name_832">Name</h4>
<div class="paragraph">
<p>VkDebugUtilsMessageTypeFlagBitsEXT - Bitmask specifying which types of events cause a debug messenger callback</p>
</div>
</div>
<div class="sect3">
<h4 id="_c_specification_832">C Specification</h4>
<div class="paragraph">
<p>Bits which <strong class="purple">can</strong> be set in
<a href="#VkDebugUtilsMessengerCreateInfoEXT">VkDebugUtilsMessengerCreateInfoEXT</a>::<code>messageType</code>, specifying
event types which cause a debug messenger to call the callback, are:</p>
</div>
<div id="VkDebugUtilsMessageTypeFlagBitsEXT" class="listingblock">
<div class="content">
<pre class="highlight"><code class="language-c++" data-lang="c++">typedef enum VkDebugUtilsMessageTypeFlagBitsEXT {
    VK_DEBUG_UTILS_MESSAGE_TYPE_GENERAL_BIT_EXT = 0x00000001,
    VK_DEBUG_UTILS_MESSAGE_TYPE_VALIDATION_BIT_EXT = 0x00000002,
    VK_DEBUG_UTILS_MESSAGE_TYPE_PERFORMANCE_BIT_EXT = 0x00000004,
    VK_DEBUG_UTILS_MESSAGE_TYPE_FLAG_BITS_MAX_ENUM_EXT = 0x7FFFFFFF
} VkDebugUtilsMessageTypeFlagBitsEXT;</code></pre>
</div>
</div>
</div>
<div class="sect3">
<h4 id="_description_832">Description</h4>
<div class="ulist">
<ul>
<li>
<p><code>VK_DEBUG_UTILS_MESSAGE_TYPE_GENERAL_BIT_EXT</code> specifies that some
general event has occurred.
This is typically a non-specification, non-performance event.</p>
</li>
<li>
<p><code>VK_DEBUG_UTILS_MESSAGE_TYPE_VALIDATION_BIT_EXT</code> specifies that
something has occurred during validation against the Vulkan
specification that may indicate invalid behavior.</p>
</li>
<li>
<p><code>VK_DEBUG_UTILS_MESSAGE_TYPE_PERFORMANCE_BIT_EXT</code> specifies a
potentially non-optimal use of Vulkan, e.g. using
<a href="#vkCmdClearColorImage">vkCmdClearColorImage</a> when setting
<a href="#VkAttachmentDescription">VkAttachmentDescription</a>::<code>loadOp</code> to
<code>VK_ATTACHMENT_LOAD_OP_CLEAR</code> would have worked.</p>
</li>
</ul>
</div>
</div>
<div class="sect3">
<h4 id="_see_also_832">See Also</h4>
<div class="paragraph">
<p><a href="#VkDebugUtilsMessageTypeFlagsEXT">VkDebugUtilsMessageTypeFlagsEXT</a></p>
</div>
</div>
<div class="sect3">
<h4 id="_document_notes_832">Document Notes</h4>
<div class="paragraph">
<p>For more information, see the Vulkan Specification at URL</p>
</div>
<div class="paragraph">
<p><a href="https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VkDebugUtilsMessageTypeFlagBitsEXT" class="bare">https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VkDebugUtilsMessageTypeFlagBitsEXT</a></p>
</div>
<div class="paragraph">
<p>This page is extracted from the Vulkan Specification.
Fixes and changes should be made to the Specification, not directly.</p>
</div>
<div style="page-break-after: always;"></div>
</div>
</div>
<div class="sect2">
<h3 id="_vkdependencyflagbits3">VkDependencyFlagBits(3)</h3>
<div class="sect3">
<h4 id="_name_833">Name</h4>
<div class="paragraph">
<p>VkDependencyFlagBits - Bitmask specifying how execution and memory dependencies are formed</p>
</div>
</div>
<div class="sect3">
<h4 id="_c_specification_833">C Specification</h4>
<div class="paragraph">
<p>Bits which <strong class="purple">can</strong> be set in <code>vkCmdPipelineBarrier</code>::<code>dependencyFlags</code>,
specifying how execution and memory dependencies are formed, are:</p>
</div>
<div id="VkDependencyFlagBits" class="listingblock">
<div class="content">
<pre class="highlight"><code class="language-c++" data-lang="c++">typedef enum VkDependencyFlagBits {
    VK_DEPENDENCY_BY_REGION_BIT = 0x00000001,
    VK_DEPENDENCY_DEVICE_GROUP_BIT = 0x00000004,
    VK_DEPENDENCY_VIEW_LOCAL_BIT = 0x00000002,
    VK_DEPENDENCY_VIEW_LOCAL_BIT_KHR = VK_DEPENDENCY_VIEW_LOCAL_BIT,
    VK_DEPENDENCY_DEVICE_GROUP_BIT_KHR = VK_DEPENDENCY_DEVICE_GROUP_BIT,
    VK_DEPENDENCY_FLAG_BITS_MAX_ENUM = 0x7FFFFFFF
} VkDependencyFlagBits;</code></pre>
</div>
</div>
</div>
<div class="sect3">
<h4 id="_description_833">Description</h4>
<div class="ulist">
<ul>
<li>
<p><code>VK_DEPENDENCY_BY_REGION_BIT</code> specifies that dependencies will be
<a href="vkspec.html#synchronization-framebuffer-regions">framebuffer-local</a>.</p>
</li>
<li>
<p><code>VK_DEPENDENCY_VIEW_LOCAL_BIT</code> specifies that a
<a href="vkspec.html#synchronization-pipeline-barriers-subpass-self-dependencies">subpass
has more than one view</a>.</p>
</li>
<li>
<p><code>VK_DEPENDENCY_DEVICE_GROUP_BIT</code> specifies that dependencies are
<a href="vkspec.html#synchronization-device-local-dependencies">non-device-local
dependency</a>.</p>
</li>
</ul>
</div>
</div>
<div class="sect3">
<h4 id="_see_also_833">See Also</h4>
<div class="paragraph">
<p><a href="#VkDependencyFlags">VkDependencyFlags</a></p>
</div>
</div>
<div class="sect3">
<h4 id="_document_notes_833">Document Notes</h4>
<div class="paragraph">
<p>For more information, see the Vulkan Specification at URL</p>
</div>
<div class="paragraph">
<p><a href="https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VkDependencyFlagBits" class="bare">https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VkDependencyFlagBits</a></p>
</div>
<div class="paragraph">
<p>This page is extracted from the Vulkan Specification.
Fixes and changes should be made to the Specification, not directly.</p>
</div>
<div style="page-break-after: always;"></div>
</div>
</div>
<div class="sect2">
<h3 id="_vkdescriptorbindingflagbitsext3">VkDescriptorBindingFlagBitsEXT(3)</h3>
<div class="sect3">
<h4 id="_name_834">Name</h4>
<div class="paragraph">
<p>VkDescriptorBindingFlagBitsEXT - Bitmask specifying descriptor set layout binding properties</p>
</div>
</div>
<div class="sect3">
<h4 id="_c_specification_834">C Specification</h4>
<div class="paragraph">
<p>Bits which <strong class="purple">can</strong> be set in each element of
<a href="#VkDescriptorSetLayoutBindingFlagsCreateInfoEXT">VkDescriptorSetLayoutBindingFlagsCreateInfoEXT</a>::<code>pBindingFlags</code> to
specify options for the corresponding descriptor set layout binding are:</p>
</div>
<div id="VkDescriptorBindingFlagBitsEXT" class="listingblock">
<div class="content">
<pre class="highlight"><code class="language-c++" data-lang="c++">typedef enum VkDescriptorBindingFlagBitsEXT {
    VK_DESCRIPTOR_BINDING_UPDATE_AFTER_BIND_BIT_EXT = 0x00000001,
    VK_DESCRIPTOR_BINDING_UPDATE_UNUSED_WHILE_PENDING_BIT_EXT = 0x00000002,
    VK_DESCRIPTOR_BINDING_PARTIALLY_BOUND_BIT_EXT = 0x00000004,
    VK_DESCRIPTOR_BINDING_VARIABLE_DESCRIPTOR_COUNT_BIT_EXT = 0x00000008,
    VK_DESCRIPTOR_BINDING_FLAG_BITS_MAX_ENUM_EXT = 0x7FFFFFFF
} VkDescriptorBindingFlagBitsEXT;</code></pre>
</div>
</div>
</div>
<div class="sect3">
<h4 id="_description_834">Description</h4>
<div class="ulist">
<ul>
<li>
<p><code>VK_DESCRIPTOR_BINDING_UPDATE_AFTER_BIND_BIT_EXT</code> indicates that if
descriptors in this binding are updated between when the descriptor set
is bound in a command buffer and when that command buffer is submitted
to a queue, then the submission will use the most recently set
descriptors for this binding and the updates do not invalidate the
command buffer.
Descriptor bindings created with this flag are also partially exempt
from the external synchronization requirement in
<a href="#vkUpdateDescriptorSetWithTemplateKHR">vkUpdateDescriptorSetWithTemplateKHR</a> and
<a href="#vkUpdateDescriptorSets">vkUpdateDescriptorSets</a>.
They <strong class="purple">can</strong> be updated concurrently with the set being bound to a command
buffer in another thread, but not concurrently with the set being reset
or freed.</p>
</li>
<li>
<p><code>VK_DESCRIPTOR_BINDING_PARTIALLY_BOUND_BIT_EXT</code> indicates that
descriptors in this binding that are not <em>dynamically used</em> need not
contain valid descriptors at the time the descriptors are consumed.
A descriptor is dynamically used if any shader invocation executes an
instruction that performs any memory access using the descriptor.</p>
</li>
<li>
<p><code>VK_DESCRIPTOR_BINDING_UPDATE_UNUSED_WHILE_PENDING_BIT_EXT</code>
indicates that descriptors in this binding <strong class="purple">can</strong> be updated after a
command buffer has bound this descriptor set, or while a command buffer
that uses this descriptor set is pending execution, as long as the
descriptors that are updated are not used by those command buffers.
If <code>VK_DESCRIPTOR_BINDING_PARTIALLY_BOUND_BIT_EXT</code> is also set, then
descriptors <strong class="purple">can</strong> be updated as long as they are not dynamically used by
any shader invocations.
If <code>VK_DESCRIPTOR_BINDING_PARTIALLY_BOUND_BIT_EXT</code> is not set, then
descriptors <strong class="purple">can</strong> be updated as long as they are not statically used by
any shader invocations.</p>
</li>
<li>
<p><code>VK_DESCRIPTOR_BINDING_VARIABLE_DESCRIPTOR_COUNT_BIT_EXT</code> indicates
that this descriptor binding has a variable size that will be specified
when a descriptor set is allocated using this layout.
The value of <code>descriptorCount</code> is treated as an upper bound on the
size of the binding.
This <strong class="purple">must</strong> only be used for the last binding in the descriptor set
layout (i.e. the binding with the largest value of <code>binding</code>).
For the purposes of counting against limits such as
<code>maxDescriptorSet</code>* and <code>maxPerStageDescriptor</code>*, the full value
of <code>descriptorCount</code> is counted
, except for descriptor bindings with a descriptor type of
<code>VK_DESCRIPTOR_TYPE_INLINE_UNIFORM_BLOCK_EXT</code> where
<code>descriptorCount</code> specifies the upper bound on the byte size of the
binding, thus it counts against the <a href="vkspec.html#limits-maxInlineUniformBlockSize"><code>maxInlineUniformBlockSize</code></a> limit instead.
.</p>
</li>
</ul>
</div>
<div class="admonitionblock note">
<table>
<tr>
<td class="icon">
<i class="fa icon-note" title="Note"></i>
</td>
<td class="content">
<div class="title">Note</div>
<div class="paragraph">
<p>Note that while <code>VK_DESCRIPTOR_BINDING_UPDATE_AFTER_BIND_BIT_EXT</code> and
<code>VK_DESCRIPTOR_BINDING_UPDATE_UNUSED_WHILE_PENDING_BIT_EXT</code> both involve
updates to descriptor sets after they are bound,
<code>VK_DESCRIPTOR_BINDING_UPDATE_UNUSED_WHILE_PENDING_BIT_EXT</code> is a weaker
requirement since it is only about descriptors that are not used, whereas
<code>VK_DESCRIPTOR_BINDING_UPDATE_AFTER_BIND_BIT_EXT</code> requires the
implementation to observe updates to descriptors that are used.</p>
</div>
</td>
</tr>
</table>
</div>
</div>
<div class="sect3">
<h4 id="_see_also_834">See Also</h4>
<div class="paragraph">
<p><a href="#VkDescriptorBindingFlagsEXT">VkDescriptorBindingFlagsEXT</a></p>
</div>
</div>
<div class="sect3">
<h4 id="_document_notes_834">Document Notes</h4>
<div class="paragraph">
<p>For more information, see the Vulkan Specification at URL</p>
</div>
<div class="paragraph">
<p><a href="https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VkDescriptorBindingFlagBitsEXT" class="bare">https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VkDescriptorBindingFlagBitsEXT</a></p>
</div>
<div class="paragraph">
<p>This page is extracted from the Vulkan Specification.
Fixes and changes should be made to the Specification, not directly.</p>
</div>
<div style="page-break-after: always;"></div>
</div>
</div>
<div class="sect2">
<h3 id="_vkdescriptorpoolcreateflagbits3">VkDescriptorPoolCreateFlagBits(3)</h3>
<div class="sect3">
<h4 id="_name_835">Name</h4>
<div class="paragraph">
<p>VkDescriptorPoolCreateFlagBits - Bitmask specifying certain supported operations on a descriptor pool</p>
</div>
</div>
<div class="sect3">
<h4 id="_c_specification_835">C Specification</h4>
<div class="paragraph">
<p>Bits which <strong class="purple">can</strong> be set in <a href="#VkDescriptorPoolCreateInfo">VkDescriptorPoolCreateInfo</a>::<code>flags</code> to
enable operations on a descriptor pool are:</p>
</div>
<div id="VkDescriptorPoolCreateFlagBits" class="listingblock">
<div class="content">
<pre class="highlight"><code class="language-c++" data-lang="c++">typedef enum VkDescriptorPoolCreateFlagBits {
    VK_DESCRIPTOR_POOL_CREATE_FREE_DESCRIPTOR_SET_BIT = 0x00000001,
    VK_DESCRIPTOR_POOL_CREATE_UPDATE_AFTER_BIND_BIT_EXT = 0x00000002,
    VK_DESCRIPTOR_POOL_CREATE_FLAG_BITS_MAX_ENUM = 0x7FFFFFFF
} VkDescriptorPoolCreateFlagBits;</code></pre>
</div>
</div>
</div>
<div class="sect3">
<h4 id="_description_835">Description</h4>
<div class="ulist">
<ul>
<li>
<p><code>VK_DESCRIPTOR_POOL_CREATE_FREE_DESCRIPTOR_SET_BIT</code> specifies that
descriptor sets <strong class="purple">can</strong> return their individual allocations to the pool,
i.e. all of <a href="#vkAllocateDescriptorSets">vkAllocateDescriptorSets</a>, <a href="#vkFreeDescriptorSets">vkFreeDescriptorSets</a>,
and <a href="#vkResetDescriptorPool">vkResetDescriptorPool</a> are allowed.
Otherwise, descriptor sets allocated from the pool <strong class="purple">must</strong> not be
individually freed back to the pool, i.e. only
<a href="#vkAllocateDescriptorSets">vkAllocateDescriptorSets</a> and <a href="#vkResetDescriptorPool">vkResetDescriptorPool</a> are
allowed.</p>
</li>
<li>
<p><code>VK_DESCRIPTOR_POOL_CREATE_UPDATE_AFTER_BIND_BIT_EXT</code> specifies that
descriptor sets allocated from this pool <strong class="purple">can</strong> include bindings with the
<code>VK_DESCRIPTOR_BINDING_UPDATE_AFTER_BIND_BIT_EXT</code> bit set.
It is valid to allocate descriptor sets that have bindings that do not
set the <code>VK_DESCRIPTOR_BINDING_UPDATE_AFTER_BIND_BIT_EXT</code> bit from a
pool that has <code>VK_DESCRIPTOR_POOL_CREATE_UPDATE_AFTER_BIND_BIT_EXT</code>
set.</p>
</li>
</ul>
</div>
</div>
<div class="sect3">
<h4 id="_see_also_835">See Also</h4>
<div class="paragraph">
<p><a href="#VkDescriptorPoolCreateFlags">VkDescriptorPoolCreateFlags</a></p>
</div>
</div>
<div class="sect3">
<h4 id="_document_notes_835">Document Notes</h4>
<div class="paragraph">
<p>For more information, see the Vulkan Specification at URL</p>
</div>
<div class="paragraph">
<p><a href="https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VkDescriptorPoolCreateFlagBits" class="bare">https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VkDescriptorPoolCreateFlagBits</a></p>
</div>
<div class="paragraph">
<p>This page is extracted from the Vulkan Specification.
Fixes and changes should be made to the Specification, not directly.</p>
</div>
<div style="page-break-after: always;"></div>
</div>
</div>
<div class="sect2">
<h3 id="_vkdescriptorsetlayoutcreateflagbits3">VkDescriptorSetLayoutCreateFlagBits(3)</h3>
<div class="sect3">
<h4 id="_name_836">Name</h4>
<div class="paragraph">
<p>VkDescriptorSetLayoutCreateFlagBits - Bitmask specifying descriptor set layout properties</p>
</div>
</div>
<div class="sect3">
<h4 id="_c_specification_836">C Specification</h4>
<div class="paragraph">
<p>Bits which <strong class="purple">can</strong> be set in <a href="#VkDescriptorSetLayoutCreateInfo">VkDescriptorSetLayoutCreateInfo</a>::<code>flags</code>
to specify options for descriptor set layout are:</p>
</div>
<div id="VkDescriptorSetLayoutCreateFlagBits" class="listingblock">
<div class="content">
<pre class="highlight"><code class="language-c++" data-lang="c++">typedef enum VkDescriptorSetLayoutCreateFlagBits {
    VK_DESCRIPTOR_SET_LAYOUT_CREATE_PUSH_DESCRIPTOR_BIT_KHR = 0x00000001,
    VK_DESCRIPTOR_SET_LAYOUT_CREATE_UPDATE_AFTER_BIND_POOL_BIT_EXT = 0x00000002,
    VK_DESCRIPTOR_SET_LAYOUT_CREATE_FLAG_BITS_MAX_ENUM = 0x7FFFFFFF
} VkDescriptorSetLayoutCreateFlagBits;</code></pre>
</div>
</div>
</div>
<div class="sect3">
<h4 id="_description_836">Description</h4>
<div class="ulist">
<ul>
<li>
<p><code>VK_DESCRIPTOR_SET_LAYOUT_CREATE_PUSH_DESCRIPTOR_BIT_KHR</code> specifies
that descriptor sets <strong class="purple">must</strong> not be allocated using this layout, and
descriptors are instead pushed by <a href="#vkCmdPushDescriptorSetKHR">vkCmdPushDescriptorSetKHR</a>.</p>
</li>
<li>
<p><code>VK_DESCRIPTOR_SET_LAYOUT_CREATE_UPDATE_AFTER_BIND_POOL_BIT_EXT</code>
specifies that descriptor sets using this layout <strong class="purple">must</strong> be allocated from
a descriptor pool created with the
<code>VK_DESCRIPTOR_POOL_CREATE_UPDATE_AFTER_BIND_BIT_EXT</code> bit set.
Descriptor set layouts created with this bit set have alternate limits
for the maximum number of descriptors per-stage and per-pipeline layout.
The non-UpdateAfterBind limits only count descriptors in sets created
without this flag.
The UpdateAfterBind limits count all descriptors, but the limits <strong class="purple">may</strong> be
higher than the non-UpdateAfterBind limits.</p>
</li>
</ul>
</div>
</div>
<div class="sect3">
<h4 id="_see_also_836">See Also</h4>
<div class="paragraph">
<p><a href="#VkDescriptorSetLayoutCreateFlags">VkDescriptorSetLayoutCreateFlags</a></p>
</div>
</div>
<div class="sect3">
<h4 id="_document_notes_836">Document Notes</h4>
<div class="paragraph">
<p>For more information, see the Vulkan Specification at URL</p>
</div>
<div class="paragraph">
<p><a href="https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VkDescriptorSetLayoutCreateFlagBits" class="bare">https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VkDescriptorSetLayoutCreateFlagBits</a></p>
</div>
<div class="paragraph">
<p>This page is extracted from the Vulkan Specification.
Fixes and changes should be made to the Specification, not directly.</p>
</div>
<div style="page-break-after: always;"></div>
</div>
</div>
<div class="sect2">
<h3 id="_vkdescriptortype3">VkDescriptorType(3)</h3>
<div class="sect3">
<h4 id="_name_837">Name</h4>
<div class="paragraph">
<p>VkDescriptorType - Specifies the type of a descriptor in a descriptor set</p>
</div>
</div>
<div class="sect3">
<h4 id="_c_specification_837">C Specification</h4>
<div class="paragraph">
<p>The type of descriptors in a descriptor set is specified by
<a href="#VkWriteDescriptorSet">VkWriteDescriptorSet</a>::<code>descriptorType</code>, which <strong class="purple">must</strong> be one of the
values:</p>
</div>
<div id="VkDescriptorType" class="listingblock">
<div class="content">
<pre class="highlight"><code class="language-c++" data-lang="c++">typedef enum VkDescriptorType {
    VK_DESCRIPTOR_TYPE_SAMPLER = 0,
    VK_DESCRIPTOR_TYPE_COMBINED_IMAGE_SAMPLER = 1,
    VK_DESCRIPTOR_TYPE_SAMPLED_IMAGE = 2,
    VK_DESCRIPTOR_TYPE_STORAGE_IMAGE = 3,
    VK_DESCRIPTOR_TYPE_UNIFORM_TEXEL_BUFFER = 4,
    VK_DESCRIPTOR_TYPE_STORAGE_TEXEL_BUFFER = 5,
    VK_DESCRIPTOR_TYPE_UNIFORM_BUFFER = 6,
    VK_DESCRIPTOR_TYPE_STORAGE_BUFFER = 7,
    VK_DESCRIPTOR_TYPE_UNIFORM_BUFFER_DYNAMIC = 8,
    VK_DESCRIPTOR_TYPE_STORAGE_BUFFER_DYNAMIC = 9,
    VK_DESCRIPTOR_TYPE_INPUT_ATTACHMENT = 10,
    VK_DESCRIPTOR_TYPE_INLINE_UNIFORM_BLOCK_EXT = 1000138000,
    VK_DESCRIPTOR_TYPE_ACCELERATION_STRUCTURE_NV = 1000165000,
    VK_DESCRIPTOR_TYPE_MAX_ENUM = 0x7FFFFFFF
} VkDescriptorType;</code></pre>
</div>
</div>
</div>
<div class="sect3">
<h4 id="_description_837">Description</h4>
<div class="ulist">
<ul>
<li>
<p><code>VK_DESCRIPTOR_TYPE_SAMPLER</code> specifies a <a href="vkspec.html#descriptorsets-sampler">sampler descriptor</a>.</p>
</li>
<li>
<p><code>VK_DESCRIPTOR_TYPE_COMBINED_IMAGE_SAMPLER</code> specifies a
<a href="vkspec.html#descriptorsets-combinedimagesampler">combined image sampler
descriptor</a>.</p>
</li>
<li>
<p><code>VK_DESCRIPTOR_TYPE_SAMPLED_IMAGE</code> specifies a
<a href="vkspec.html#descriptorsets-sampledimage">sampled image descriptor</a>.</p>
</li>
<li>
<p><code>VK_DESCRIPTOR_TYPE_STORAGE_IMAGE</code> specifies a
<a href="vkspec.html#descriptorsets-storageimage">storage image descriptor</a>.</p>
</li>
<li>
<p><code>VK_DESCRIPTOR_TYPE_UNIFORM_TEXEL_BUFFER</code> specifies a
<a href="vkspec.html#descriptorsets-uniformtexelbuffer">uniform texel buffer descriptor</a>.</p>
</li>
<li>
<p><code>VK_DESCRIPTOR_TYPE_STORAGE_TEXEL_BUFFER</code> specifies a
<a href="vkspec.html#descriptorsets-storagetexelbuffer">storage texel buffer descriptor</a>.</p>
</li>
<li>
<p><code>VK_DESCRIPTOR_TYPE_UNIFORM_BUFFER</code> specifies a
<a href="vkspec.html#descriptorsets-uniformbuffer">uniform buffer descriptor</a>.</p>
</li>
<li>
<p><code>VK_DESCRIPTOR_TYPE_STORAGE_BUFFER</code> specifies a
<a href="vkspec.html#descriptorsets-storagebuffer">storage buffer descriptor</a>.</p>
</li>
<li>
<p><code>VK_DESCRIPTOR_TYPE_UNIFORM_BUFFER_DYNAMIC</code> specifies a
<a href="vkspec.html#descriptorsets-uniformbufferdynamic">dynamic uniform buffer
descriptor</a>.</p>
</li>
<li>
<p><code>VK_DESCRIPTOR_TYPE_STORAGE_BUFFER_DYNAMIC</code> specifies a
<a href="vkspec.html#descriptorsets-storagebufferdynamic">dynamic storage buffer
descriptor</a>.</p>
</li>
<li>
<p><code>VK_DESCRIPTOR_TYPE_INPUT_ATTACHMENT</code> specifies an
<a href="vkspec.html#descriptorsets-inputattachment">input attachment descriptor</a>.</p>
</li>
<li>
<p><code>VK_DESCRIPTOR_TYPE_INLINE_UNIFORM_BLOCK_EXT</code> specifies an
<a href="vkspec.html#descriptorsets-inlineuniformblock">inline uniform block</a>.</p>
</li>
</ul>
</div>
<div class="paragraph">
<p>When a descriptor set is updated via elements of <a href="#VkWriteDescriptorSet">VkWriteDescriptorSet</a>,
members of <code>pImageInfo</code>, <code>pBufferInfo</code> and <code>pTexelBufferView</code>
are only accessed by the implementation when they correspond to descriptor
type being defined - otherwise they are ignored.
The members accessed are as follows for each descriptor type:</p>
</div>
<div class="ulist">
<ul>
<li>
<p>For <code>VK_DESCRIPTOR_TYPE_SAMPLER</code>, only the <code>sampler</code> member of
each element of <a href="#VkWriteDescriptorSet">VkWriteDescriptorSet</a>::<code>pImageInfo</code> is
accessed.</p>
</li>
<li>
<p>For <code>VK_DESCRIPTOR_TYPE_SAMPLED_IMAGE</code>,
<code>VK_DESCRIPTOR_TYPE_STORAGE_IMAGE</code>, or
<code>VK_DESCRIPTOR_TYPE_INPUT_ATTACHMENT</code>, only the <code>imageView</code> and
<code>imageLayout</code> members of each element of
<a href="#VkWriteDescriptorSet">VkWriteDescriptorSet</a>::<code>pImageInfo</code> are accessed.</p>
</li>
<li>
<p>For <code>VK_DESCRIPTOR_TYPE_COMBINED_IMAGE_SAMPLER</code>, all members of each
element of <a href="#VkWriteDescriptorSet">VkWriteDescriptorSet</a>::<code>pImageInfo</code> are accessed.</p>
</li>
<li>
<p>For <code>VK_DESCRIPTOR_TYPE_UNIFORM_BUFFER</code>,
<code>VK_DESCRIPTOR_TYPE_STORAGE_BUFFER</code>,
<code>VK_DESCRIPTOR_TYPE_UNIFORM_BUFFER_DYNAMIC</code>, or
<code>VK_DESCRIPTOR_TYPE_STORAGE_BUFFER_DYNAMIC</code>, all members of each
element of <a href="#VkWriteDescriptorSet">VkWriteDescriptorSet</a>::<code>pBufferInfo</code> are accessed.</p>
</li>
<li>
<p>For <code>VK_DESCRIPTOR_TYPE_UNIFORM_TEXEL_BUFFER</code> or
<code>VK_DESCRIPTOR_TYPE_STORAGE_TEXEL_BUFFER</code>, each element of
<a href="#VkWriteDescriptorSet">VkWriteDescriptorSet</a>::<code>pTexelBufferView</code> is accessed.</p>
</li>
</ul>
</div>
<div class="paragraph">
<p>When updating descriptors with a <code>descriptorType</code> of
<code>VK_DESCRIPTOR_TYPE_INLINE_UNIFORM_BLOCK_EXT</code>, none of the
<code>pImageInfo</code>, <code>pBufferInfo</code>, or <code>pTexelBufferView</code> members are
accessed, instead the source data of the descriptor update operation is
taken from the instance of <a href="#VkWriteDescriptorSetInlineUniformBlockEXT">VkWriteDescriptorSetInlineUniformBlockEXT</a>
in the <code>pNext</code> chain of <code>VkWriteDescriptorSet</code>.
When updating descriptors with a <code>descriptorType</code> of
<code>VK_DESCRIPTOR_TYPE_ACCELERATION_STRUCTURE_NV</code>, none of the
<code>pImageInfo</code>, <code>pBufferInfo</code>, or <code>pTexelBufferView</code> members are
accessed, instead the source data of the descriptor update operation is
taken from the instance of <a href="#VkWriteDescriptorSetAccelerationStructureNV">VkWriteDescriptorSetAccelerationStructureNV</a>
in the <code>pNext</code> chain of <code>VkWriteDescriptorSet</code>.</p>
</div>
</div>
<div class="sect3">
<h4 id="_see_also_837">See Also</h4>
<div class="paragraph">
<p><a href="#VkDescriptorPoolSize">VkDescriptorPoolSize</a>, <a href="#VkDescriptorSetLayoutBinding">VkDescriptorSetLayoutBinding</a>, <a href="#VkDescriptorUpdateTemplateEntry">VkDescriptorUpdateTemplateEntry</a>, <a href="#VkImageViewHandleInfoNVX">VkImageViewHandleInfoNVX</a>, <a href="#VkWriteDescriptorSet">VkWriteDescriptorSet</a></p>
</div>
</div>
<div class="sect3">
<h4 id="_document_notes_837">Document Notes</h4>
<div class="paragraph">
<p>For more information, see the Vulkan Specification at URL</p>
</div>
<div class="paragraph">
<p><a href="https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VkDescriptorType" class="bare">https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VkDescriptorType</a></p>
</div>
<div class="paragraph">
<p>This page is extracted from the Vulkan Specification.
Fixes and changes should be made to the Specification, not directly.</p>
</div>
<div style="page-break-after: always;"></div>
</div>
</div>
<div class="sect2">
<h3 id="_vkdescriptorupdatetemplatetype3">VkDescriptorUpdateTemplateType(3)</h3>
<div class="sect3">
<h4 id="_name_838">Name</h4>
<div class="paragraph">
<p>VkDescriptorUpdateTemplateType - Indicates the valid usage of the descriptor update template</p>
</div>
</div>
<div class="sect3">
<h4 id="_c_specification_838">C Specification</h4>
<div class="paragraph">
<p>The descriptor update template type is determined by the
<a href="#VkDescriptorUpdateTemplateCreateInfo">VkDescriptorUpdateTemplateCreateInfo</a>::<code>templateType</code> property,
which takes the following values:</p>
</div>
<div id="VkDescriptorUpdateTemplateType" class="listingblock">
<div class="content">
<pre class="highlight"><code class="language-c++" data-lang="c++">typedef enum VkDescriptorUpdateTemplateType {
    VK_DESCRIPTOR_UPDATE_TEMPLATE_TYPE_DESCRIPTOR_SET = 0,
    VK_DESCRIPTOR_UPDATE_TEMPLATE_TYPE_PUSH_DESCRIPTORS_KHR = 1,
    VK_DESCRIPTOR_UPDATE_TEMPLATE_TYPE_DESCRIPTOR_SET_KHR = VK_DESCRIPTOR_UPDATE_TEMPLATE_TYPE_DESCRIPTOR_SET,
    VK_DESCRIPTOR_UPDATE_TEMPLATE_TYPE_MAX_ENUM = 0x7FFFFFFF
} VkDescriptorUpdateTemplateType;</code></pre>
</div>
</div>
<div class="paragraph">
<p>or the equivalent</p>
</div>
<div id="VkDescriptorUpdateTemplateTypeKHR" class="listingblock">
<div class="content">
<pre class="highlight"><code class="language-c++" data-lang="c++">typedef VkDescriptorUpdateTemplateType VkDescriptorUpdateTemplateTypeKHR;</code></pre>
</div>
</div>
</div>
<div class="sect3">
<h4 id="_description_838">Description</h4>
<div class="ulist">
<ul>
<li>
<p><code>VK_DESCRIPTOR_UPDATE_TEMPLATE_TYPE_DESCRIPTOR_SET</code> specifies that
the descriptor update template will be used for descriptor set updates
only.</p>
</li>
<li>
<p><code>VK_DESCRIPTOR_UPDATE_TEMPLATE_TYPE_PUSH_DESCRIPTORS_KHR</code> specifies
that the descriptor update template will be used for push descriptor
updates only.</p>
</li>
</ul>
</div>
</div>
<div class="sect3">
<h4 id="_see_also_838">See Also</h4>
<div class="paragraph">
<p><a href="#VkDescriptorUpdateTemplateCreateInfo">VkDescriptorUpdateTemplateCreateInfo</a></p>
</div>
</div>
<div class="sect3">
<h4 id="_document_notes_838">Document Notes</h4>
<div class="paragraph">
<p>For more information, see the Vulkan Specification at URL</p>
</div>
<div class="paragraph">
<p><a href="https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VkDescriptorUpdateTemplateType" class="bare">https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VkDescriptorUpdateTemplateType</a></p>
</div>
<div class="paragraph">
<p>This page is extracted from the Vulkan Specification.
Fixes and changes should be made to the Specification, not directly.</p>
</div>
<div style="page-break-after: always;"></div>
</div>
</div>
<div class="sect2">
<h3 id="_vkdeviceeventtypeext3">VkDeviceEventTypeEXT(3)</h3>
<div class="sect3">
<h4 id="_name_839">Name</h4>
<div class="paragraph">
<p>VkDeviceEventTypeEXT - Events that can occur on a device object</p>
</div>
</div>
<div class="sect3">
<h4 id="_c_specification_839">C Specification</h4>
<div class="paragraph">
<p>Possible values of <a href="#VkDeviceEventInfoEXT">VkDeviceEventInfoEXT</a>::<code>device</code>, specifying when
a fence will be signaled, are:</p>
</div>
<div id="VkDeviceEventTypeEXT" class="listingblock">
<div class="content">
<pre class="highlight"><code class="language-c++" data-lang="c++">typedef enum VkDeviceEventTypeEXT {
    VK_DEVICE_EVENT_TYPE_DISPLAY_HOTPLUG_EXT = 0,
    VK_DEVICE_EVENT_TYPE_MAX_ENUM_EXT = 0x7FFFFFFF
} VkDeviceEventTypeEXT;</code></pre>
</div>
</div>
</div>
<div class="sect3">
<h4 id="_description_839">Description</h4>
<div class="ulist">
<ul>
<li>
<p><code>VK_DEVICE_EVENT_TYPE_DISPLAY_HOTPLUG_EXT</code> specifies that the fence
is signaled when a display is plugged into or unplugged from the
specified device.
Applications <strong class="purple">can</strong> use this notification to determine when they need to
re-enumerate the available displays on a device.</p>
</li>
</ul>
</div>
</div>
<div class="sect3">
<h4 id="_see_also_839">See Also</h4>
<div class="paragraph">
<p><a href="#VkDeviceEventInfoEXT">VkDeviceEventInfoEXT</a></p>
</div>
</div>
<div class="sect3">
<h4 id="_document_notes_839">Document Notes</h4>
<div class="paragraph">
<p>For more information, see the Vulkan Specification at URL</p>
</div>
<div class="paragraph">
<p><a href="https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VkDeviceEventTypeEXT" class="bare">https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VkDeviceEventTypeEXT</a></p>
</div>
<div class="paragraph">
<p>This page is extracted from the Vulkan Specification.
Fixes and changes should be made to the Specification, not directly.</p>
</div>
<div style="page-break-after: always;"></div>
</div>
</div>
<div class="sect2">
<h3 id="_vkdevicegrouppresentmodeflagbitskhr3">VkDeviceGroupPresentModeFlagBitsKHR(3)</h3>
<div class="sect3">
<h4 id="_name_840">Name</h4>
<div class="paragraph">
<p>VkDeviceGroupPresentModeFlagBitsKHR - Bitmask specifying supported device group present modes</p>
</div>
</div>
<div class="sect3">
<h4 id="_c_specification_840">C Specification</h4>
<div class="paragraph">
<p>Bits which <strong class="purple">may</strong> be set in
<a href="#VkDeviceGroupPresentCapabilitiesKHR">VkDeviceGroupPresentCapabilitiesKHR</a>::<code>modes</code> to indicate which
device group presentation modes are supported are:</p>
</div>
<div id="VkDeviceGroupPresentModeFlagBitsKHR" class="listingblock">
<div class="content">
<pre class="highlight"><code class="language-c++" data-lang="c++">typedef enum VkDeviceGroupPresentModeFlagBitsKHR {
    VK_DEVICE_GROUP_PRESENT_MODE_LOCAL_BIT_KHR = 0x00000001,
    VK_DEVICE_GROUP_PRESENT_MODE_REMOTE_BIT_KHR = 0x00000002,
    VK_DEVICE_GROUP_PRESENT_MODE_SUM_BIT_KHR = 0x00000004,
    VK_DEVICE_GROUP_PRESENT_MODE_LOCAL_MULTI_DEVICE_BIT_KHR = 0x00000008,
    VK_DEVICE_GROUP_PRESENT_MODE_FLAG_BITS_MAX_ENUM_KHR = 0x7FFFFFFF
} VkDeviceGroupPresentModeFlagBitsKHR;</code></pre>
</div>
</div>
</div>
<div class="sect3">
<h4 id="_description_840">Description</h4>
<div class="ulist">
<ul>
<li>
<p><code>VK_DEVICE_GROUP_PRESENT_MODE_LOCAL_BIT_KHR</code> specifies that any
physical device with a presentation engine <strong class="purple">can</strong> present its own
swapchain images.</p>
</li>
<li>
<p><code>VK_DEVICE_GROUP_PRESENT_MODE_REMOTE_BIT_KHR</code> specifies that any
physical device with a presentation engine <strong class="purple">can</strong> present swapchain images
from any physical device in its <code>presentMask</code>.</p>
</li>
<li>
<p><code>VK_DEVICE_GROUP_PRESENT_MODE_SUM_BIT_KHR</code> specifies that any
physical device with a presentation engine <strong class="purple">can</strong> present the sum of
swapchain images from any physical devices in its <code>presentMask</code>.</p>
</li>
<li>
<p><code>VK_DEVICE_GROUP_PRESENT_MODE_LOCAL_MULTI_DEVICE_BIT_KHR</code> specifies
that multiple physical devices with a presentation engine <strong class="purple">can</strong> each
present their own swapchain images.</p>
</li>
</ul>
</div>
</div>
<div class="sect3">
<h4 id="_see_also_840">See Also</h4>
<div class="paragraph">
<p><a href="#VkDeviceGroupPresentInfoKHR">VkDeviceGroupPresentInfoKHR</a>, <a href="#VkDeviceGroupPresentModeFlagsKHR">VkDeviceGroupPresentModeFlagsKHR</a></p>
</div>
</div>
<div class="sect3">
<h4 id="_document_notes_840">Document Notes</h4>
<div class="paragraph">
<p>For more information, see the Vulkan Specification at URL</p>
</div>
<div class="paragraph">
<p><a href="https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VkDeviceGroupPresentModeFlagBitsKHR" class="bare">https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VkDeviceGroupPresentModeFlagBitsKHR</a></p>
</div>
<div class="paragraph">
<p>This page is extracted from the Vulkan Specification.
Fixes and changes should be made to the Specification, not directly.</p>
</div>
<div style="page-break-after: always;"></div>
</div>
</div>
<div class="sect2">
<h3 id="_vkdevicequeuecreateflagbits3">VkDeviceQueueCreateFlagBits(3)</h3>
<div class="sect3">
<h4 id="_name_841">Name</h4>
<div class="paragraph">
<p>VkDeviceQueueCreateFlagBits - Bitmask specifying behavior of the queue</p>
</div>
</div>
<div class="sect3">
<h4 id="_c_specification_841">C Specification</h4>
<div class="paragraph">
<p>Bits which <strong class="purple">can</strong> be set in <a href="#VkDeviceQueueCreateInfo">VkDeviceQueueCreateInfo</a>::<code>flags</code> to
specify usage behavior of the queue are:</p>
</div>
<div id="VkDeviceQueueCreateFlagBits" class="listingblock">
<div class="content">
<pre class="highlight"><code class="language-c++" data-lang="c++">typedef enum VkDeviceQueueCreateFlagBits {
    VK_DEVICE_QUEUE_CREATE_PROTECTED_BIT = 0x00000001,
    VK_DEVICE_QUEUE_CREATE_FLAG_BITS_MAX_ENUM = 0x7FFFFFFF
} VkDeviceQueueCreateFlagBits;</code></pre>
</div>
</div>
</div>
<div class="sect3">
<h4 id="_description_841">Description</h4>
<div class="ulist">
<ul>
<li>
<p><code>VK_DEVICE_QUEUE_CREATE_PROTECTED_BIT</code> specifies that the device
queue is a protected-capable queue.
If the protected memory feature is not enabled, the
<code>VK_DEVICE_QUEUE_CREATE_PROTECTED_BIT</code> bit of <code>flags</code> <strong class="purple">must</strong> not
be set.</p>
</li>
</ul>
</div>
</div>
<div class="sect3">
<h4 id="_see_also_841">See Also</h4>
<div class="paragraph">
<p><a href="#VkDeviceQueueCreateFlags">VkDeviceQueueCreateFlags</a></p>
</div>
</div>
<div class="sect3">
<h4 id="_document_notes_841">Document Notes</h4>
<div class="paragraph">
<p>For more information, see the Vulkan Specification at URL</p>
</div>
<div class="paragraph">
<p><a href="https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VkDeviceQueueCreateFlagBits" class="bare">https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VkDeviceQueueCreateFlagBits</a></p>
</div>
<div class="paragraph">
<p>This page is extracted from the Vulkan Specification.
Fixes and changes should be made to the Specification, not directly.</p>
</div>
<div style="page-break-after: always;"></div>
</div>
</div>
<div class="sect2">
<h3 id="_vkdiscardrectanglemodeext3">VkDiscardRectangleModeEXT(3)</h3>
<div class="sect3">
<h4 id="_name_842">Name</h4>
<div class="paragraph">
<p>VkDiscardRectangleModeEXT - Specify the discard rectangle mode</p>
</div>
</div>
<div class="sect3">
<h4 id="_c_specification_842">C Specification</h4>
<div class="paragraph">
<p>Possible values of
<a href="#VkPipelineDiscardRectangleStateCreateInfoEXT">VkPipelineDiscardRectangleStateCreateInfoEXT</a>::<code>discardRectangleMode</code>,
specifying the behavior of the discard rectangle test, are:</p>
</div>
<div id="VkDiscardRectangleModeEXT" class="listingblock">
<div class="content">
<pre class="highlight"><code class="language-c++" data-lang="c++">typedef enum VkDiscardRectangleModeEXT {
    VK_DISCARD_RECTANGLE_MODE_INCLUSIVE_EXT = 0,
    VK_DISCARD_RECTANGLE_MODE_EXCLUSIVE_EXT = 1,
    VK_DISCARD_RECTANGLE_MODE_MAX_ENUM_EXT = 0x7FFFFFFF
} VkDiscardRectangleModeEXT;</code></pre>
</div>
</div>
</div>
<div class="sect3">
<h4 id="_description_842">Description</h4>
<div class="ulist">
<ul>
<li>
<p><code>VK_DISCARD_RECTANGLE_MODE_INCLUSIVE_EXT</code> specifies that a fragment
within any discard rectangle satisfies the test.</p>
</li>
<li>
<p><code>VK_DISCARD_RECTANGLE_MODE_EXCLUSIVE_EXT</code> specifies that a fragment
not within any of the discard rectangles satisfies the test.</p>
</li>
</ul>
</div>
</div>
<div class="sect3">
<h4 id="_see_also_842">See Also</h4>
<div class="paragraph">
<p><a href="#VkPipelineDiscardRectangleStateCreateInfoEXT">VkPipelineDiscardRectangleStateCreateInfoEXT</a></p>
</div>
</div>
<div class="sect3">
<h4 id="_document_notes_842">Document Notes</h4>
<div class="paragraph">
<p>For more information, see the Vulkan Specification at URL</p>
</div>
<div class="paragraph">
<p><a href="https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VkDiscardRectangleModeEXT" class="bare">https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VkDiscardRectangleModeEXT</a></p>
</div>
<div class="paragraph">
<p>This page is extracted from the Vulkan Specification.
Fixes and changes should be made to the Specification, not directly.</p>
</div>
<div style="page-break-after: always;"></div>
</div>
</div>
<div class="sect2">
<h3 id="_vkdisplayeventtypeext3">VkDisplayEventTypeEXT(3)</h3>
<div class="sect3">
<h4 id="_name_843">Name</h4>
<div class="paragraph">
<p>VkDisplayEventTypeEXT - Events that can occur on a display object</p>
</div>
</div>
<div class="sect3">
<h4 id="_c_specification_843">C Specification</h4>
<div class="paragraph">
<p>Possible values of <a href="#VkDisplayEventInfoEXT">VkDisplayEventInfoEXT</a>::<code>displayEvent</code>,
specifying when a fence will be signaled, are:</p>
</div>
<div id="VkDisplayEventTypeEXT" class="listingblock">
<div class="content">
<pre class="highlight"><code class="language-c++" data-lang="c++">typedef enum VkDisplayEventTypeEXT {
    VK_DISPLAY_EVENT_TYPE_FIRST_PIXEL_OUT_EXT = 0,
    VK_DISPLAY_EVENT_TYPE_MAX_ENUM_EXT = 0x7FFFFFFF
} VkDisplayEventTypeEXT;</code></pre>
</div>
</div>
</div>
<div class="sect3">
<h4 id="_description_843">Description</h4>
<div class="ulist">
<ul>
<li>
<p><code>VK_DISPLAY_EVENT_TYPE_FIRST_PIXEL_OUT_EXT</code> specifies that the fence
is signaled when the first pixel of the next display refresh cycle
leaves the display engine for the display.</p>
</li>
</ul>
</div>
</div>
<div class="sect3">
<h4 id="_see_also_843">See Also</h4>
<div class="paragraph">
<p><a href="#VkDisplayEventInfoEXT">VkDisplayEventInfoEXT</a></p>
</div>
</div>
<div class="sect3">
<h4 id="_document_notes_843">Document Notes</h4>
<div class="paragraph">
<p>For more information, see the Vulkan Specification at URL</p>
</div>
<div class="paragraph">
<p><a href="https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VkDisplayEventTypeEXT" class="bare">https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VkDisplayEventTypeEXT</a></p>
</div>
<div class="paragraph">
<p>This page is extracted from the Vulkan Specification.
Fixes and changes should be made to the Specification, not directly.</p>
</div>
<div style="page-break-after: always;"></div>
</div>
</div>
<div class="sect2">
<h3 id="_vkdisplayplanealphaflagbitskhr3">VkDisplayPlaneAlphaFlagBitsKHR(3)</h3>
<div class="sect3">
<h4 id="_name_844">Name</h4>
<div class="paragraph">
<p>VkDisplayPlaneAlphaFlagBitsKHR - Alpha blending type</p>
</div>
</div>
<div class="sect3">
<h4 id="_c_specification_844">C Specification</h4>
<div class="paragraph">
<p>Possible values of <a href="#VkDisplaySurfaceCreateInfoKHR">VkDisplaySurfaceCreateInfoKHR</a>::<code>alphaMode</code>,
specifying the type of alpha blending to use on a display, are:</p>
</div>
<div id="VkDisplayPlaneAlphaFlagBitsKHR" class="listingblock">
<div class="content">
<pre class="highlight"><code class="language-c++" data-lang="c++">typedef enum VkDisplayPlaneAlphaFlagBitsKHR {
    VK_DISPLAY_PLANE_ALPHA_OPAQUE_BIT_KHR = 0x00000001,
    VK_DISPLAY_PLANE_ALPHA_GLOBAL_BIT_KHR = 0x00000002,
    VK_DISPLAY_PLANE_ALPHA_PER_PIXEL_BIT_KHR = 0x00000004,
    VK_DISPLAY_PLANE_ALPHA_PER_PIXEL_PREMULTIPLIED_BIT_KHR = 0x00000008,
    VK_DISPLAY_PLANE_ALPHA_FLAG_BITS_MAX_ENUM_KHR = 0x7FFFFFFF
} VkDisplayPlaneAlphaFlagBitsKHR;</code></pre>
</div>
</div>
</div>
<div class="sect3">
<h4 id="_description_844">Description</h4>
<div class="ulist">
<ul>
<li>
<p><code>VK_DISPLAY_PLANE_ALPHA_OPAQUE_BIT_KHR</code> specifies that the source
image will be treated as opaque.</p>
</li>
<li>
<p><code>VK_DISPLAY_PLANE_ALPHA_GLOBAL_BIT_KHR</code> specifies that a global
alpha value <strong class="purple">must</strong> be specified that will be applied to all pixels in the
source image.</p>
</li>
<li>
<p><code>VK_DISPLAY_PLANE_ALPHA_PER_PIXEL_BIT_KHR</code> specifies that the alpha
value will be determined by the alpha channel of the source image&#8217;s
pixels.
If the source format contains no alpha values, no blending will be
applied.
The source alpha values are not premultiplied into the source image&#8217;s
other color channels.</p>
</li>
<li>
<p><code>VK_DISPLAY_PLANE_ALPHA_PER_PIXEL_PREMULTIPLIED_BIT_KHR</code> is
equivalent to <code>VK_DISPLAY_PLANE_ALPHA_PER_PIXEL_BIT_KHR</code>, except the
source alpha values are assumed to be premultiplied into the source
image&#8217;s other color channels.</p>
</li>
</ul>
</div>
</div>
<div class="sect3">
<h4 id="_see_also_844">See Also</h4>
<div class="paragraph">
<p><a href="#VkDisplayPlaneAlphaFlagsKHR">VkDisplayPlaneAlphaFlagsKHR</a>, <a href="#VkDisplaySurfaceCreateInfoKHR">VkDisplaySurfaceCreateInfoKHR</a></p>
</div>
</div>
<div class="sect3">
<h4 id="_document_notes_844">Document Notes</h4>
<div class="paragraph">
<p>For more information, see the Vulkan Specification at URL</p>
</div>
<div class="paragraph">
<p><a href="https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VkDisplayPlaneAlphaFlagBitsKHR" class="bare">https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VkDisplayPlaneAlphaFlagBitsKHR</a></p>
</div>
<div class="paragraph">
<p>This page is extracted from the Vulkan Specification.
Fixes and changes should be made to the Specification, not directly.</p>
</div>
<div style="page-break-after: always;"></div>
</div>
</div>
<div class="sect2">
<h3 id="_vkdisplaypowerstateext3">VkDisplayPowerStateEXT(3)</h3>
<div class="sect3">
<h4 id="_name_845">Name</h4>
<div class="paragraph">
<p>VkDisplayPowerStateEXT - Possible power states for a display</p>
</div>
</div>
<div class="sect3">
<h4 id="_c_specification_845">C Specification</h4>
<div class="paragraph">
<p>Possible values of <a href="#VkDisplayPowerInfoEXT">VkDisplayPowerInfoEXT</a>::<code>powerState</code>, specifying
the new power state of a display, are:</p>
</div>
<div id="VkDisplayPowerStateEXT" class="listingblock">
<div class="content">
<pre class="highlight"><code class="language-c++" data-lang="c++">typedef enum VkDisplayPowerStateEXT {
    VK_DISPLAY_POWER_STATE_OFF_EXT = 0,
    VK_DISPLAY_POWER_STATE_SUSPEND_EXT = 1,
    VK_DISPLAY_POWER_STATE_ON_EXT = 2,
    VK_DISPLAY_POWER_STATE_MAX_ENUM_EXT = 0x7FFFFFFF
} VkDisplayPowerStateEXT;</code></pre>
</div>
</div>
</div>
<div class="sect3">
<h4 id="_description_845">Description</h4>
<div class="ulist">
<ul>
<li>
<p><code>VK_DISPLAY_POWER_STATE_OFF_EXT</code> specifies that the display is
powered down.</p>
</li>
<li>
<p><code>VK_DISPLAY_POWER_STATE_SUSPEND_EXT</code> specifies that the display is
put into a low power mode, from which it <strong class="purple">may</strong> be able to transition back
to <code>VK_DISPLAY_POWER_STATE_ON_EXT</code> more quickly than if it were in
<code>VK_DISPLAY_POWER_STATE_OFF_EXT</code>.
This state <strong class="purple">may</strong> be the same as <code>VK_DISPLAY_POWER_STATE_OFF_EXT</code>.</p>
</li>
<li>
<p><code>VK_DISPLAY_POWER_STATE_ON_EXT</code> specifies that the display is
powered on.</p>
</li>
</ul>
</div>
</div>
<div class="sect3">
<h4 id="_see_also_845">See Also</h4>
<div class="paragraph">
<p><a href="#VkDisplayPowerInfoEXT">VkDisplayPowerInfoEXT</a></p>
</div>
</div>
<div class="sect3">
<h4 id="_document_notes_845">Document Notes</h4>
<div class="paragraph">
<p>For more information, see the Vulkan Specification at URL</p>
</div>
<div class="paragraph">
<p><a href="https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VkDisplayPowerStateEXT" class="bare">https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VkDisplayPowerStateEXT</a></p>
</div>
<div class="paragraph">
<p>This page is extracted from the Vulkan Specification.
Fixes and changes should be made to the Specification, not directly.</p>
</div>
<div style="page-break-after: always;"></div>
</div>
</div>
<div class="sect2">
<h3 id="_vkdriveridkhr3">VkDriverIdKHR(3)</h3>
<div class="sect3">
<h4 id="_name_846">Name</h4>
<div class="paragraph">
<p>VkDriverIdKHR - Khronos driver IDs</p>
</div>
</div>
<div class="sect3">
<h4 id="_c_specification_846">C Specification</h4>
<div class="paragraph">
<p>Khronos driver IDs which <strong class="purple">may</strong> be returned in
<a href="#VkPhysicalDeviceDriverPropertiesKHR">VkPhysicalDeviceDriverPropertiesKHR</a>::<code>driverID</code> are:</p>
</div>
<div id="VkDriverIdKHR" class="listingblock">
<div class="content">
<pre class="highlight"><code class="language-c++" data-lang="c++">typedef enum VkDriverIdKHR {
    VK_DRIVER_ID_AMD_PROPRIETARY_KHR = 1,
    VK_DRIVER_ID_AMD_OPEN_SOURCE_KHR = 2,
    VK_DRIVER_ID_MESA_RADV_KHR = 3,
    VK_DRIVER_ID_NVIDIA_PROPRIETARY_KHR = 4,
    VK_DRIVER_ID_INTEL_PROPRIETARY_WINDOWS_KHR = 5,
    VK_DRIVER_ID_INTEL_OPEN_SOURCE_MESA_KHR = 6,
    VK_DRIVER_ID_IMAGINATION_PROPRIETARY_KHR = 7,
    VK_DRIVER_ID_QUALCOMM_PROPRIETARY_KHR = 8,
    VK_DRIVER_ID_ARM_PROPRIETARY_KHR = 9,
    VK_DRIVER_ID_GOOGLE_PASTEL_KHR = 10,
    VK_DRIVER_ID_GGP_PROPRIETARY_KHR = 11,
    VK_DRIVER_ID_MAX_ENUM_KHR = 0x7FFFFFFF
} VkDriverIdKHR;</code></pre>
</div>
</div>
</div>
<div class="sect3">
<h4 id="_description_846">Description</h4>
<div class="admonitionblock note">
<table>
<tr>
<td class="icon">
<i class="fa icon-note" title="Note"></i>
</td>
<td class="content">
<div class="title">Note</div>
<div class="paragraph">
<p>Khronos driver IDs may be allocated by vendors at any time.
There may be multiple driver IDs for the same vendor, representing different
drivers (for e.g. different platforms, proprietary or open source, etc.).
Only the latest canonical versions of this Specification, of the
corresponding <code>vk.xml</code> API Registry, and of the corresponding
<code>vulkan_core.h</code> header file <strong class="purple">must</strong> contain all reserved Khronos driver IDs.</p>
</div>
<div class="paragraph">
<p>Only driver IDs registered with Khronos are given symbolic names.
There <strong class="purple">may</strong> be unregistered driver IDs returned.</p>
</div>
</td>
</tr>
</table>
</div>
</div>
<div class="sect3">
<h4 id="_see_also_846">See Also</h4>
<div class="paragraph">
<p><a href="#VkPhysicalDeviceDriverPropertiesKHR">VkPhysicalDeviceDriverPropertiesKHR</a></p>
</div>
</div>
<div class="sect3">
<h4 id="_document_notes_846">Document Notes</h4>
<div class="paragraph">
<p>For more information, see the Vulkan Specification at URL</p>
</div>
<div class="paragraph">
<p><a href="https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VkDriverIdKHR" class="bare">https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VkDriverIdKHR</a></p>
</div>
<div class="paragraph">
<p>This page is extracted from the Vulkan Specification.
Fixes and changes should be made to the Specification, not directly.</p>
</div>
<div style="page-break-after: always;"></div>
</div>
</div>
<div class="sect2">
<h3 id="_vkdynamicstate3">VkDynamicState(3)</h3>
<div class="sect3">
<h4 id="_name_847">Name</h4>
<div class="paragraph">
<p>VkDynamicState - Indicate which dynamic state is taken from dynamic state commands</p>
</div>
</div>
<div class="sect3">
<h4 id="_c_specification_847">C Specification</h4>
<div class="paragraph">
<p>The source of different pieces of dynamic state is specified by the
<a href="#VkPipelineDynamicStateCreateInfo">VkPipelineDynamicStateCreateInfo</a>::<code>pDynamicStates</code> property of the
currently active pipeline, each of whose elements <strong class="purple">must</strong> be one of the
values:</p>
</div>
<div id="VkDynamicState" class="listingblock">
<div class="content">
<pre class="highlight"><code class="language-c++" data-lang="c++">typedef enum VkDynamicState {
    VK_DYNAMIC_STATE_VIEWPORT = 0,
    VK_DYNAMIC_STATE_SCISSOR = 1,
    VK_DYNAMIC_STATE_LINE_WIDTH = 2,
    VK_DYNAMIC_STATE_DEPTH_BIAS = 3,
    VK_DYNAMIC_STATE_BLEND_CONSTANTS = 4,
    VK_DYNAMIC_STATE_DEPTH_BOUNDS = 5,
    VK_DYNAMIC_STATE_STENCIL_COMPARE_MASK = 6,
    VK_DYNAMIC_STATE_STENCIL_WRITE_MASK = 7,
    VK_DYNAMIC_STATE_STENCIL_REFERENCE = 8,
    VK_DYNAMIC_STATE_VIEWPORT_W_SCALING_NV = 1000087000,
    VK_DYNAMIC_STATE_DISCARD_RECTANGLE_EXT = 1000099000,
    VK_DYNAMIC_STATE_SAMPLE_LOCATIONS_EXT = 1000143000,
    VK_DYNAMIC_STATE_VIEWPORT_SHADING_RATE_PALETTE_NV = 1000164004,
    VK_DYNAMIC_STATE_VIEWPORT_COARSE_SAMPLE_ORDER_NV = 1000164006,
    VK_DYNAMIC_STATE_EXCLUSIVE_SCISSOR_NV = 1000205001,
    VK_DYNAMIC_STATE_MAX_ENUM = 0x7FFFFFFF
} VkDynamicState;</code></pre>
</div>
</div>
</div>
<div class="sect3">
<h4 id="_description_847">Description</h4>
<div class="ulist">
<ul>
<li>
<p><code>VK_DYNAMIC_STATE_VIEWPORT</code> specifies that the <code>pViewports</code>
state in <code>VkPipelineViewportStateCreateInfo</code> will be ignored and
<strong class="purple">must</strong> be set dynamically with <a href="#vkCmdSetViewport">vkCmdSetViewport</a> before any draw
commands.
The number of viewports used by a pipeline is still specified by the
<code>viewportCount</code> member of <code>VkPipelineViewportStateCreateInfo</code>.</p>
</li>
<li>
<p><code>VK_DYNAMIC_STATE_SCISSOR</code> specifies that the <code>pScissors</code> state
in <code>VkPipelineViewportStateCreateInfo</code> will be ignored and <strong class="purple">must</strong> be
set dynamically with <a href="#vkCmdSetScissor">vkCmdSetScissor</a> before any draw commands.
The number of scissor rectangles used by a pipeline is still specified
by the <code>scissorCount</code> member of
<code>VkPipelineViewportStateCreateInfo</code>.</p>
</li>
<li>
<p><code>VK_DYNAMIC_STATE_LINE_WIDTH</code> specifies that the <code>lineWidth</code>
state in <code>VkPipelineRasterizationStateCreateInfo</code> will be ignored
and <strong class="purple">must</strong> be set dynamically with <a href="#vkCmdSetLineWidth">vkCmdSetLineWidth</a> before any
draw commands that generate line primitives for the rasterizer.</p>
</li>
<li>
<p><code>VK_DYNAMIC_STATE_DEPTH_BIAS</code> specifies that the
<code>depthBiasConstantFactor</code>, <code>depthBiasClamp</code> and
<code>depthBiasSlopeFactor</code> states in
<code>VkPipelineRasterizationStateCreateInfo</code> will be ignored and <strong class="purple">must</strong>
be set dynamically with <a href="#vkCmdSetDepthBias">vkCmdSetDepthBias</a> before any draws are
performed with <code>depthBiasEnable</code> in
<code>VkPipelineRasterizationStateCreateInfo</code> set to <code>VK_TRUE</code>.</p>
</li>
<li>
<p><code>VK_DYNAMIC_STATE_BLEND_CONSTANTS</code> specifies that the
<code>blendConstants</code> state in <code>VkPipelineColorBlendStateCreateInfo</code>
will be ignored and <strong class="purple">must</strong> be set dynamically with
<a href="#vkCmdSetBlendConstants">vkCmdSetBlendConstants</a> before any draws are performed with a
pipeline state with <code>VkPipelineColorBlendAttachmentState</code> member
<code>blendEnable</code> set to <code>VK_TRUE</code> and any of the blend functions
using a constant blend color.</p>
</li>
<li>
<p><code>VK_DYNAMIC_STATE_DEPTH_BOUNDS</code> specifies that the
<code>minDepthBounds</code> and <code>maxDepthBounds</code> states of
<a href="#VkPipelineDepthStencilStateCreateInfo">VkPipelineDepthStencilStateCreateInfo</a> will be ignored and <strong class="purple">must</strong> be
set dynamically with <a href="#vkCmdSetDepthBounds">vkCmdSetDepthBounds</a> before any draws are
performed with a pipeline state with
<code>VkPipelineDepthStencilStateCreateInfo</code> member
<code>depthBoundsTestEnable</code> set to <code>VK_TRUE</code>.</p>
</li>
<li>
<p><code>VK_DYNAMIC_STATE_STENCIL_COMPARE_MASK</code> specifies that the
<code>compareMask</code> state in <code>VkPipelineDepthStencilStateCreateInfo</code>
for both <code>front</code> and <code>back</code> will be ignored and <strong class="purple">must</strong> be set
dynamically with <a href="#vkCmdSetStencilCompareMask">vkCmdSetStencilCompareMask</a> before any draws are
performed with a pipeline state with
<code>VkPipelineDepthStencilStateCreateInfo</code> member
<code>stencilTestEnable</code> set to <code>VK_TRUE</code></p>
</li>
<li>
<p><code>VK_DYNAMIC_STATE_STENCIL_WRITE_MASK</code> specifies that the
<code>writeMask</code> state in <code>VkPipelineDepthStencilStateCreateInfo</code> for
both <code>front</code> and <code>back</code> will be ignored and <strong class="purple">must</strong> be set
dynamically with <a href="#vkCmdSetStencilWriteMask">vkCmdSetStencilWriteMask</a> before any draws are
performed with a pipeline state with
<code>VkPipelineDepthStencilStateCreateInfo</code> member
<code>stencilTestEnable</code> set to <code>VK_TRUE</code></p>
</li>
<li>
<p><code>VK_DYNAMIC_STATE_STENCIL_REFERENCE</code> specifies that the
<code>reference</code> state in <code>VkPipelineDepthStencilStateCreateInfo</code> for
both <code>front</code> and <code>back</code> will be ignored and <strong class="purple">must</strong> be set
dynamically with <a href="#vkCmdSetStencilReference">vkCmdSetStencilReference</a> before any draws are
performed with a pipeline state with
<code>VkPipelineDepthStencilStateCreateInfo</code> member
<code>stencilTestEnable</code> set to <code>VK_TRUE</code></p>
</li>
<li>
<p><code>VK_DYNAMIC_STATE_VIEWPORT_W_SCALING_NV</code> specifies that the
<code>pViewportScalings</code> state in
<a href="#VkPipelineViewportWScalingStateCreateInfoNV">VkPipelineViewportWScalingStateCreateInfoNV</a> will be ignored and
<strong class="purple">must</strong> be set dynamically with <a href="#vkCmdSetViewportWScalingNV">vkCmdSetViewportWScalingNV</a> before
any draws are performed with a pipeline state with
<a href="#VkPipelineViewportWScalingStateCreateInfoNV">VkPipelineViewportWScalingStateCreateInfoNV</a> member
<code>viewportScalingEnable</code> set to <code>VK_TRUE</code></p>
</li>
<li>
<p><code>VK_DYNAMIC_STATE_DISCARD_RECTANGLE_EXT</code> specifies that the
<code>pDiscardRectangles</code> state in
<a href="#VkPipelineDiscardRectangleStateCreateInfoEXT">VkPipelineDiscardRectangleStateCreateInfoEXT</a> will be ignored and
<strong class="purple">must</strong> be set dynamically with <a href="#vkCmdSetDiscardRectangleEXT">vkCmdSetDiscardRectangleEXT</a> before
any draw or clear commands.
The <a href="#VkDiscardRectangleModeEXT">VkDiscardRectangleModeEXT</a> and the number of active discard
rectangles is still specified by the <code>discardRectangleMode</code> and
<code>discardRectangleCount</code> members of
<code>VkPipelineDiscardRectangleStateCreateInfoEXT</code>.</p>
</li>
<li>
<p><code>VK_DYNAMIC_STATE_SAMPLE_LOCATIONS_EXT</code> specifies that the
<code>sampleLocationsInfo</code> state in
<a href="#VkPipelineSampleLocationsStateCreateInfoEXT">VkPipelineSampleLocationsStateCreateInfoEXT</a> will be ignored and
<strong class="purple">must</strong> be set dynamically with <a href="#vkCmdSetSampleLocationsEXT">vkCmdSetSampleLocationsEXT</a> before
any draw or clear commands.
Enabling custom sample locations is still indicated by the
<code>sampleLocationsEnable</code> member of
<code>VkPipelineSampleLocationsStateCreateInfoEXT</code>.</p>
</li>
<li>
<p><code>VK_DYNAMIC_STATE_EXCLUSIVE_SCISSOR_NV</code> specifies that the
<code>pExclusiveScissors</code> state in
<code>VkPipelineViewportExclusiveScissorStateCreateInfoNV</code> will be
ignored and <strong class="purple">must</strong> be set dynamically with
<a href="#vkCmdSetExclusiveScissorNV">vkCmdSetExclusiveScissorNV</a> before any draw commands.
The number of exclusive scissor rectangles used by a pipeline is still
specified by the <code>exclusiveScissorCount</code> member of
<code>VkPipelineViewportExclusiveScissorStateCreateInfoNV</code>.</p>
</li>
<li>
<p><code>VK_DYNAMIC_STATE_VIEWPORT_SHADING_RATE_PALETTE_NV</code> specifies that
the <code>pShadingRatePalettes</code> state in
<a href="#VkPipelineViewportShadingRateImageStateCreateInfoNV">VkPipelineViewportShadingRateImageStateCreateInfoNV</a> will be
ignored and <strong class="purple">must</strong> be set dynamically with
<a href="#vkCmdSetViewportShadingRatePaletteNV">vkCmdSetViewportShadingRatePaletteNV</a> before any draw commands.</p>
</li>
<li>
<p><code>VK_DYNAMIC_STATE_VIEWPORT_COARSE_SAMPLE_ORDER_NV</code> specifies that
the coarse sample order state in
<a href="#VkPipelineViewportCoarseSampleOrderStateCreateInfoNV">VkPipelineViewportCoarseSampleOrderStateCreateInfoNV</a> will be
ignored and <strong class="purple">must</strong> be set dynamically with
<a href="#vkCmdSetCoarseSampleOrderNV">vkCmdSetCoarseSampleOrderNV</a> before any draw commands.</p>
</li>
</ul>
</div>
</div>
<div class="sect3">
<h4 id="_see_also_847">See Also</h4>
<div class="paragraph">
<p><a href="#VkPipelineDynamicStateCreateInfo">VkPipelineDynamicStateCreateInfo</a></p>
</div>
</div>
<div class="sect3">
<h4 id="_document_notes_847">Document Notes</h4>
<div class="paragraph">
<p>For more information, see the Vulkan Specification at URL</p>
</div>
<div class="paragraph">
<p><a href="https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VkDynamicState" class="bare">https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VkDynamicState</a></p>
</div>
<div class="paragraph">
<p>This page is extracted from the Vulkan Specification.
Fixes and changes should be made to the Specification, not directly.</p>
</div>
<div style="page-break-after: always;"></div>
</div>
</div>
<div class="sect2">
<h3 id="_vkexternalfencefeatureflagbits3">VkExternalFenceFeatureFlagBits(3)</h3>
<div class="sect3">
<h4 id="_name_848">Name</h4>
<div class="paragraph">
<p>VkExternalFenceFeatureFlagBits - Bitfield describing features of an external fence handle type</p>
</div>
</div>
<div class="sect3">
<h4 id="_c_specification_848">C Specification</h4>
<div class="paragraph">
<p>Bits which <strong class="purple">may</strong> be set in
<a href="#VkExternalFenceProperties">VkExternalFenceProperties</a>::<code>externalFenceFeatures</code>, indicating
features of a fence external handle type, are:</p>
</div>
<div id="VkExternalFenceFeatureFlagBits" class="listingblock">
<div class="content">
<pre class="highlight"><code class="language-c++" data-lang="c++">typedef enum VkExternalFenceFeatureFlagBits {
    VK_EXTERNAL_FENCE_FEATURE_EXPORTABLE_BIT = 0x00000001,
    VK_EXTERNAL_FENCE_FEATURE_IMPORTABLE_BIT = 0x00000002,
    VK_EXTERNAL_FENCE_FEATURE_EXPORTABLE_BIT_KHR = VK_EXTERNAL_FENCE_FEATURE_EXPORTABLE_BIT,
    VK_EXTERNAL_FENCE_FEATURE_IMPORTABLE_BIT_KHR = VK_EXTERNAL_FENCE_FEATURE_IMPORTABLE_BIT,
    VK_EXTERNAL_FENCE_FEATURE_FLAG_BITS_MAX_ENUM = 0x7FFFFFFF
} VkExternalFenceFeatureFlagBits;</code></pre>
</div>
</div>
<div class="paragraph">
<p>or the equivalent</p>
</div>
<div id="VkExternalFenceFeatureFlagBitsKHR" class="listingblock">
<div class="content">
<pre class="highlight"><code class="language-c++" data-lang="c++">typedef VkExternalFenceFeatureFlagBits VkExternalFenceFeatureFlagBitsKHR;</code></pre>
</div>
</div>
</div>
<div class="sect3">
<h4 id="_description_848">Description</h4>
<div class="ulist">
<ul>
<li>
<p><code>VK_EXTERNAL_FENCE_FEATURE_EXPORTABLE_BIT</code> specifies handles of this
type <strong class="purple">can</strong> be exported from Vulkan fence objects.</p>
</li>
<li>
<p><code>VK_EXTERNAL_FENCE_FEATURE_IMPORTABLE_BIT</code> specifies handles of this
type <strong class="purple">can</strong> be imported to Vulkan fence objects.</p>
</li>
</ul>
</div>
</div>
<div class="sect3">
<h4 id="_see_also_848">See Also</h4>
<div class="paragraph">
<p><a href="#VkExternalFenceFeatureFlags">VkExternalFenceFeatureFlags</a></p>
</div>
</div>
<div class="sect3">
<h4 id="_document_notes_848">Document Notes</h4>
<div class="paragraph">
<p>For more information, see the Vulkan Specification at URL</p>
</div>
<div class="paragraph">
<p><a href="https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VkExternalFenceFeatureFlagBits" class="bare">https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VkExternalFenceFeatureFlagBits</a></p>
</div>
<div class="paragraph">
<p>This page is extracted from the Vulkan Specification.
Fixes and changes should be made to the Specification, not directly.</p>
</div>
<div style="page-break-after: always;"></div>
</div>
</div>
<div class="sect2">
<h3 id="_vkexternalfencehandletypeflagbits3">VkExternalFenceHandleTypeFlagBits(3)</h3>
<div class="sect3">
<h4 id="_name_849">Name</h4>
<div class="paragraph">
<p>VkExternalFenceHandleTypeFlagBits - Bitmask of valid external fence handle types</p>
</div>
</div>
<div class="sect3">
<h4 id="_c_specification_849">C Specification</h4>
<div class="paragraph">
<p>Bits which <strong class="purple">may</strong> be set in
<a href="#VkPhysicalDeviceExternalFenceInfo">VkPhysicalDeviceExternalFenceInfo</a>::<code>handleType</code>, and in the
<code>exportFromImportedHandleTypes</code> and <code>compatibleHandleTypes</code> members
of <a href="#VkExternalFenceProperties">VkExternalFenceProperties</a>, to indicate external fence handle types,
are:</p>
</div>
<div id="VkExternalFenceHandleTypeFlagBits" class="listingblock">
<div class="content">
<pre class="highlight"><code class="language-c++" data-lang="c++">typedef enum VkExternalFenceHandleTypeFlagBits {
    VK_EXTERNAL_FENCE_HANDLE_TYPE_OPAQUE_FD_BIT = 0x00000001,
    VK_EXTERNAL_FENCE_HANDLE_TYPE_OPAQUE_WIN32_BIT = 0x00000002,
    VK_EXTERNAL_FENCE_HANDLE_TYPE_OPAQUE_WIN32_KMT_BIT = 0x00000004,
    VK_EXTERNAL_FENCE_HANDLE_TYPE_SYNC_FD_BIT = 0x00000008,
    VK_EXTERNAL_FENCE_HANDLE_TYPE_OPAQUE_FD_BIT_KHR = VK_EXTERNAL_FENCE_HANDLE_TYPE_OPAQUE_FD_BIT,
    VK_EXTERNAL_FENCE_HANDLE_TYPE_OPAQUE_WIN32_BIT_KHR = VK_EXTERNAL_FENCE_HANDLE_TYPE_OPAQUE_WIN32_BIT,
    VK_EXTERNAL_FENCE_HANDLE_TYPE_OPAQUE_WIN32_KMT_BIT_KHR = VK_EXTERNAL_FENCE_HANDLE_TYPE_OPAQUE_WIN32_KMT_BIT,
    VK_EXTERNAL_FENCE_HANDLE_TYPE_SYNC_FD_BIT_KHR = VK_EXTERNAL_FENCE_HANDLE_TYPE_SYNC_FD_BIT,
    VK_EXTERNAL_FENCE_HANDLE_TYPE_FLAG_BITS_MAX_ENUM = 0x7FFFFFFF
} VkExternalFenceHandleTypeFlagBits;</code></pre>
</div>
</div>
<div class="paragraph">
<p>or the equivalent</p>
</div>
<div id="VkExternalFenceHandleTypeFlagBitsKHR" class="listingblock">
<div class="content">
<pre class="highlight"><code class="language-c++" data-lang="c++">typedef VkExternalFenceHandleTypeFlagBits VkExternalFenceHandleTypeFlagBitsKHR;</code></pre>
</div>
</div>
</div>
<div class="sect3">
<h4 id="_description_849">Description</h4>
<div class="ulist">
<ul>
<li>
<p><code>VK_EXTERNAL_FENCE_HANDLE_TYPE_OPAQUE_FD_BIT</code> specifies a POSIX file
descriptor handle that has only limited valid usage outside of Vulkan
and other compatible APIs.
It <strong class="purple">must</strong> be compatible with the POSIX system calls <code>dup</code>, <code>dup2</code>,
<code>close</code>, and the non-standard system call <code>dup3</code>.
Additionally, it <strong class="purple">must</strong> be transportable over a socket using an
<code>SCM_RIGHTS</code> control message.
It owns a reference to the underlying synchronization primitive
represented by its Vulkan fence object.</p>
</li>
<li>
<p><code>VK_EXTERNAL_FENCE_HANDLE_TYPE_OPAQUE_WIN32_BIT</code> specifies an NT
handle that has only limited valid usage outside of Vulkan and other
compatible APIs.
It <strong class="purple">must</strong> be compatible with the functions <code>DuplicateHandle</code>,
<code>CloseHandle</code>, <code>CompareObjectHandles</code>, <code>GetHandleInformation</code>,
and <code>SetHandleInformation</code>.
It owns a reference to the underlying synchronization primitive
represented by its Vulkan fence object.</p>
</li>
<li>
<p><code>VK_EXTERNAL_FENCE_HANDLE_TYPE_OPAQUE_WIN32_KMT_BIT</code> specifies a
global share handle that has only limited valid usage outside of Vulkan
and other compatible APIs.
It is not compatible with any native APIs.
It does not own a reference to the underlying synchronization primitive
represented by its Vulkan fence object, and will therefore become
invalid when all Vulkan fence objects associated with it are destroyed.</p>
</li>
<li>
<p><code>VK_EXTERNAL_FENCE_HANDLE_TYPE_SYNC_FD_BIT</code> specifies a POSIX file
descriptor handle to a Linux Sync File or Android Fence.
It can be used with any native API accepting a valid sync file or fence
as input.
It owns a reference to the underlying synchronization primitive
associated with the file descriptor.
Implementations which support importing this handle type <strong class="purple">must</strong> accept
any type of sync or fence FD supported by the native system they are
running on.</p>
</li>
</ul>
</div>
<div style="page-break-after: always;"></div>
<div class="paragraph">
<p>Some external fence handle types can only be shared within the same
underlying physical device and/or the same driver version, as defined in the
following table:</p>
</div>
<table id="external-fence-handle-types-compatibility" class="tableblock frame-all grid-all stretch">
<caption class="title">Table 19. External fence handle types compatibility</caption>
<colgroup>
<col style="width: 33.3333%;" />
<col style="width: 33.3333%;" />
<col style="width: 33.3334%;" />
</colgroup>
<tbody>
<tr>
<td class="tableblock halign-left valign-top"><p class="tableblock">Handle type</p></td>
<td class="tableblock halign-left valign-top"><p class="tableblock"><code>VkPhysicalDeviceIDProperties</code><wbr />::<code>driverUUID</code></p></td>
<td class="tableblock halign-left valign-top"><p class="tableblock"><code>VkPhysicalDeviceIDProperties</code><wbr />::<code>deviceUUID</code></p></td>
</tr>
<tr>
<td class="tableblock halign-left valign-top"><p class="tableblock"><code>VK_EXTERNAL_FENCE_HANDLE_TYPE_OPAQUE_FD_BIT</code></p></td>
<td class="tableblock halign-left valign-top"><p class="tableblock">Must match</p></td>
<td class="tableblock halign-left valign-top"><p class="tableblock">Must match</p></td>
</tr>
<tr>
<td class="tableblock halign-left valign-top"><p class="tableblock"><code>VK_EXTERNAL_FENCE_HANDLE_TYPE_OPAQUE_WIN32_BIT</code></p></td>
<td class="tableblock halign-left valign-top"><p class="tableblock">Must match</p></td>
<td class="tableblock halign-left valign-top"><p class="tableblock">Must match</p></td>
</tr>
<tr>
<td class="tableblock halign-left valign-top"><p class="tableblock"><code>VK_EXTERNAL_FENCE_HANDLE_TYPE_OPAQUE_WIN32_KMT_BIT</code></p></td>
<td class="tableblock halign-left valign-top"><p class="tableblock">Must match</p></td>
<td class="tableblock halign-left valign-top"><p class="tableblock">Must match</p></td>
</tr>
<tr>
<td class="tableblock halign-left valign-top"><p class="tableblock"><code>VK_EXTERNAL_FENCE_HANDLE_TYPE_SYNC_FD_BIT</code></p></td>
<td class="tableblock halign-left valign-top"><p class="tableblock">No restriction</p></td>
<td class="tableblock halign-left valign-top"><p class="tableblock">No restriction</p></td>
</tr>
</tbody>
</table>
</div>
<div class="sect3">
<h4 id="_see_also_849">See Also</h4>
<div class="paragraph">
<p><a href="#VkExternalFenceHandleTypeFlags">VkExternalFenceHandleTypeFlags</a>, <a href="#VkFenceGetFdInfoKHR">VkFenceGetFdInfoKHR</a>, <a href="#VkFenceGetWin32HandleInfoKHR">VkFenceGetWin32HandleInfoKHR</a>, <a href="#VkImportFenceFdInfoKHR">VkImportFenceFdInfoKHR</a>, <a href="#VkImportFenceWin32HandleInfoKHR">VkImportFenceWin32HandleInfoKHR</a>, <a href="#VkPhysicalDeviceExternalFenceInfo">VkPhysicalDeviceExternalFenceInfo</a></p>
</div>
</div>
<div class="sect3">
<h4 id="_document_notes_849">Document Notes</h4>
<div class="paragraph">
<p>For more information, see the Vulkan Specification at URL</p>
</div>
<div class="paragraph">
<p><a href="https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VkExternalFenceHandleTypeFlagBits" class="bare">https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VkExternalFenceHandleTypeFlagBits</a></p>
</div>
<div class="paragraph">
<p>This page is extracted from the Vulkan Specification.
Fixes and changes should be made to the Specification, not directly.</p>
</div>
<div style="page-break-after: always;"></div>
</div>
</div>
<div class="sect2">
<h3 id="_vkexternalmemoryfeatureflagbits3">VkExternalMemoryFeatureFlagBits(3)</h3>
<div class="sect3">
<h4 id="_name_850">Name</h4>
<div class="paragraph">
<p>VkExternalMemoryFeatureFlagBits - Bitmask specifying features of an external memory handle type</p>
</div>
</div>
<div class="sect3">
<h4 id="_c_specification_850">C Specification</h4>
<div class="paragraph">
<p>Bits which <strong class="purple">may</strong> be set in
<a href="#VkExternalMemoryProperties">VkExternalMemoryProperties</a>::<code>externalMemoryFeatures</code>, specifying
features of an external memory handle type, are:</p>
</div>
<div id="VkExternalMemoryFeatureFlagBits" class="listingblock">
<div class="content">
<pre class="highlight"><code class="language-c++" data-lang="c++">typedef enum VkExternalMemoryFeatureFlagBits {
    VK_EXTERNAL_MEMORY_FEATURE_DEDICATED_ONLY_BIT = 0x00000001,
    VK_EXTERNAL_MEMORY_FEATURE_EXPORTABLE_BIT = 0x00000002,
    VK_EXTERNAL_MEMORY_FEATURE_IMPORTABLE_BIT = 0x00000004,
    VK_EXTERNAL_MEMORY_FEATURE_DEDICATED_ONLY_BIT_KHR = VK_EXTERNAL_MEMORY_FEATURE_DEDICATED_ONLY_BIT,
    VK_EXTERNAL_MEMORY_FEATURE_EXPORTABLE_BIT_KHR = VK_EXTERNAL_MEMORY_FEATURE_EXPORTABLE_BIT,
    VK_EXTERNAL_MEMORY_FEATURE_IMPORTABLE_BIT_KHR = VK_EXTERNAL_MEMORY_FEATURE_IMPORTABLE_BIT,
    VK_EXTERNAL_MEMORY_FEATURE_FLAG_BITS_MAX_ENUM = 0x7FFFFFFF
} VkExternalMemoryFeatureFlagBits;</code></pre>
</div>
</div>
<div class="paragraph">
<p>or the equivalent</p>
</div>
<div id="VkExternalMemoryFeatureFlagBitsKHR" class="listingblock">
<div class="content">
<pre class="highlight"><code class="language-c++" data-lang="c++">typedef VkExternalMemoryFeatureFlagBits VkExternalMemoryFeatureFlagBitsKHR;</code></pre>
</div>
</div>
</div>
<div class="sect3">
<h4 id="_description_850">Description</h4>
<div class="ulist">
<ul>
<li>
<p><code>VK_EXTERNAL_MEMORY_FEATURE_DEDICATED_ONLY_BIT</code> specifies that
images or buffers created with the specified parameters and handle type
<strong class="purple">must</strong> use the mechanisms defined by <a href="#VkMemoryDedicatedRequirements">VkMemoryDedicatedRequirements</a>
and <a href="#VkMemoryDedicatedAllocateInfo">VkMemoryDedicatedAllocateInfo</a> to create (or import) a
dedicated allocation for the image or buffer.</p>
</li>
<li>
<p><code>VK_EXTERNAL_MEMORY_FEATURE_EXPORTABLE_BIT</code> specifies that handles
of this type <strong class="purple">can</strong> be exported from Vulkan memory objects.</p>
</li>
<li>
<p><code>VK_EXTERNAL_MEMORY_FEATURE_IMPORTABLE_BIT</code> specifies that handles
of this type <strong class="purple">can</strong> be imported as Vulkan memory objects.</p>
</li>
</ul>
</div>
<div class="paragraph">
<p>Because their semantics in external APIs roughly align with that of an image
or buffer with a dedicated allocation in Vulkan, implementations are
<strong class="purple">required</strong> to report <code>VK_EXTERNAL_MEMORY_FEATURE_DEDICATED_ONLY_BIT</code> for
the following external handle types:</p>
</div>
<div class="ulist">
<ul>
<li>
<p><code>VK_EXTERNAL_MEMORY_HANDLE_TYPE_D3D11_TEXTURE_BIT</code></p>
</li>
<li>
<p><code>VK_EXTERNAL_MEMORY_HANDLE_TYPE_D3D11_TEXTURE_KMT_BIT</code></p>
</li>
<li>
<p><code>VK_EXTERNAL_MEMORY_HANDLE_TYPE_D3D12_RESOURCE_BIT</code></p>
</li>
<li>
<p><code>VK_EXTERNAL_MEMORY_HANDLE_TYPE_ANDROID_HARDWARE_BUFFER_BIT_ANDROID</code>
for images only</p>
</li>
</ul>
</div>
<div class="paragraph">
<p>Implementations <strong class="purple">must</strong> not report
<code>VK_EXTERNAL_MEMORY_FEATURE_DEDICATED_ONLY_BIT</code> for buffers with
external handle type
<code>VK_EXTERNAL_MEMORY_HANDLE_TYPE_ANDROID_HARDWARE_BUFFER_BIT_ANDROID</code>.</p>
</div>
</div>
<div class="sect3">
<h4 id="_see_also_850">See Also</h4>
<div class="paragraph">
<p><a href="#VkExternalMemoryFeatureFlags">VkExternalMemoryFeatureFlags</a></p>
</div>
</div>
<div class="sect3">
<h4 id="_document_notes_850">Document Notes</h4>
<div class="paragraph">
<p>For more information, see the Vulkan Specification at URL</p>
</div>
<div class="paragraph">
<p><a href="https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VkExternalMemoryFeatureFlagBits" class="bare">https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VkExternalMemoryFeatureFlagBits</a></p>
</div>
<div class="paragraph">
<p>This page is extracted from the Vulkan Specification.
Fixes and changes should be made to the Specification, not directly.</p>
</div>
<div style="page-break-after: always;"></div>
</div>
</div>
<div class="sect2">
<h3 id="_vkexternalmemoryfeatureflagbitsnv3">VkExternalMemoryFeatureFlagBitsNV(3)</h3>
<div class="sect3">
<h4 id="_name_851">Name</h4>
<div class="paragraph">
<p>VkExternalMemoryFeatureFlagBitsNV - Bitmask specifying external memory features</p>
</div>
</div>
<div class="sect3">
<h4 id="_c_specification_851">C Specification</h4>
<div class="paragraph">
<p>Bits which <strong class="purple">can</strong> be set in
<a href="#VkExternalImageFormatPropertiesNV">VkExternalImageFormatPropertiesNV</a>::<code>externalMemoryFeatures</code>,
indicating properties of the external memory handle type, are:</p>
</div>
<div id="VkExternalMemoryFeatureFlagBitsNV" class="listingblock">
<div class="content">
<pre class="highlight"><code class="language-c++" data-lang="c++">typedef enum VkExternalMemoryFeatureFlagBitsNV {
    VK_EXTERNAL_MEMORY_FEATURE_DEDICATED_ONLY_BIT_NV = 0x00000001,
    VK_EXTERNAL_MEMORY_FEATURE_EXPORTABLE_BIT_NV = 0x00000002,
    VK_EXTERNAL_MEMORY_FEATURE_IMPORTABLE_BIT_NV = 0x00000004,
    VK_EXTERNAL_MEMORY_FEATURE_FLAG_BITS_MAX_ENUM_NV = 0x7FFFFFFF
} VkExternalMemoryFeatureFlagBitsNV;</code></pre>
</div>
</div>
</div>
<div class="sect3">
<h4 id="_description_851">Description</h4>
<div class="ulist">
<ul>
<li>
<p><code>VK_EXTERNAL_MEMORY_FEATURE_DEDICATED_ONLY_BIT_NV</code> specifies that
external memory of the specified type <strong class="purple">must</strong> be created as a dedicated
allocation when used in the manner specified.</p>
</li>
<li>
<p><code>VK_EXTERNAL_MEMORY_FEATURE_EXPORTABLE_BIT_NV</code> specifies that the
implementation supports exporting handles of the specified type.</p>
</li>
<li>
<p><code>VK_EXTERNAL_MEMORY_FEATURE_IMPORTABLE_BIT_NV</code> specifies that the
implementation supports importing handles of the specified type.</p>
</li>
</ul>
</div>
</div>
<div class="sect3">
<h4 id="_see_also_851">See Also</h4>
<div class="paragraph">
<p><a href="#VkExternalImageFormatPropertiesNV">VkExternalImageFormatPropertiesNV</a>, <a href="#VkExternalMemoryFeatureFlagsNV">VkExternalMemoryFeatureFlagsNV</a>, <a href="#vkGetPhysicalDeviceExternalImageFormatPropertiesNV">vkGetPhysicalDeviceExternalImageFormatPropertiesNV</a></p>
</div>
</div>
<div class="sect3">
<h4 id="_document_notes_851">Document Notes</h4>
<div class="paragraph">
<p>For more information, see the Vulkan Specification at URL</p>
</div>
<div class="paragraph">
<p><a href="https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VkExternalMemoryFeatureFlagBitsNV" class="bare">https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VkExternalMemoryFeatureFlagBitsNV</a></p>
</div>
<div class="paragraph">
<p>This page is extracted from the Vulkan Specification.
Fixes and changes should be made to the Specification, not directly.</p>
</div>
<div style="page-break-after: always;"></div>
</div>
</div>
<div class="sect2">
<h3 id="_vkexternalmemoryhandletypeflagbits3">VkExternalMemoryHandleTypeFlagBits(3)</h3>
<div class="sect3">
<h4 id="_name_852">Name</h4>
<div class="paragraph">
<p>VkExternalMemoryHandleTypeFlagBits - Bit specifying external memory handle types</p>
</div>
</div>
<div class="sect3">
<h4 id="_c_specification_852">C Specification</h4>
<div class="paragraph">
<p>Possible values of
<a href="#VkPhysicalDeviceExternalImageFormatInfo">VkPhysicalDeviceExternalImageFormatInfo</a>::<code>handleType</code>, specifying
an external memory handle type, are:</p>
</div>
<div id="VkExternalMemoryHandleTypeFlagBits" class="listingblock">
<div class="content">
<pre class="highlight"><code class="language-c++" data-lang="c++">typedef enum VkExternalMemoryHandleTypeFlagBits {
    VK_EXTERNAL_MEMORY_HANDLE_TYPE_OPAQUE_FD_BIT = 0x00000001,
    VK_EXTERNAL_MEMORY_HANDLE_TYPE_OPAQUE_WIN32_BIT = 0x00000002,
    VK_EXTERNAL_MEMORY_HANDLE_TYPE_OPAQUE_WIN32_KMT_BIT = 0x00000004,
    VK_EXTERNAL_MEMORY_HANDLE_TYPE_D3D11_TEXTURE_BIT = 0x00000008,
    VK_EXTERNAL_MEMORY_HANDLE_TYPE_D3D11_TEXTURE_KMT_BIT = 0x00000010,
    VK_EXTERNAL_MEMORY_HANDLE_TYPE_D3D12_HEAP_BIT = 0x00000020,
    VK_EXTERNAL_MEMORY_HANDLE_TYPE_D3D12_RESOURCE_BIT = 0x00000040,
    VK_EXTERNAL_MEMORY_HANDLE_TYPE_DMA_BUF_BIT_EXT = 0x00000200,
    VK_EXTERNAL_MEMORY_HANDLE_TYPE_ANDROID_HARDWARE_BUFFER_BIT_ANDROID = 0x00000400,
    VK_EXTERNAL_MEMORY_HANDLE_TYPE_HOST_ALLOCATION_BIT_EXT = 0x00000080,
    VK_EXTERNAL_MEMORY_HANDLE_TYPE_HOST_MAPPED_FOREIGN_MEMORY_BIT_EXT = 0x00000100,
    VK_EXTERNAL_MEMORY_HANDLE_TYPE_OPAQUE_FD_BIT_KHR = VK_EXTERNAL_MEMORY_HANDLE_TYPE_OPAQUE_FD_BIT,
    VK_EXTERNAL_MEMORY_HANDLE_TYPE_OPAQUE_WIN32_BIT_KHR = VK_EXTERNAL_MEMORY_HANDLE_TYPE_OPAQUE_WIN32_BIT,
    VK_EXTERNAL_MEMORY_HANDLE_TYPE_OPAQUE_WIN32_KMT_BIT_KHR = VK_EXTERNAL_MEMORY_HANDLE_TYPE_OPAQUE_WIN32_KMT_BIT,
    VK_EXTERNAL_MEMORY_HANDLE_TYPE_D3D11_TEXTURE_BIT_KHR = VK_EXTERNAL_MEMORY_HANDLE_TYPE_D3D11_TEXTURE_BIT,
    VK_EXTERNAL_MEMORY_HANDLE_TYPE_D3D11_TEXTURE_KMT_BIT_KHR = VK_EXTERNAL_MEMORY_HANDLE_TYPE_D3D11_TEXTURE_KMT_BIT,
    VK_EXTERNAL_MEMORY_HANDLE_TYPE_D3D12_HEAP_BIT_KHR = VK_EXTERNAL_MEMORY_HANDLE_TYPE_D3D12_HEAP_BIT,
    VK_EXTERNAL_MEMORY_HANDLE_TYPE_D3D12_RESOURCE_BIT_KHR = VK_EXTERNAL_MEMORY_HANDLE_TYPE_D3D12_RESOURCE_BIT,
    VK_EXTERNAL_MEMORY_HANDLE_TYPE_FLAG_BITS_MAX_ENUM = 0x7FFFFFFF
} VkExternalMemoryHandleTypeFlagBits;</code></pre>
</div>
</div>
<div class="paragraph">
<p>or the equivalent</p>
</div>
<div id="VkExternalMemoryHandleTypeFlagBitsKHR" class="listingblock">
<div class="content">
<pre class="highlight"><code class="language-c++" data-lang="c++">typedef VkExternalMemoryHandleTypeFlagBits VkExternalMemoryHandleTypeFlagBitsKHR;</code></pre>
</div>
</div>
</div>
<div class="sect3">
<h4 id="_description_852">Description</h4>
<div class="ulist">
<ul>
<li>
<p><code>VK_EXTERNAL_MEMORY_HANDLE_TYPE_OPAQUE_FD_BIT</code> specifies a POSIX
file descriptor handle that has only limited valid usage outside of
Vulkan and other compatible APIs.
It <strong class="purple">must</strong> be compatible with the POSIX system calls <code>dup</code>, <code>dup2</code>,
<code>close</code>, and the non-standard system call <code>dup3</code>.
Additionally, it <strong class="purple">must</strong> be transportable over a socket using an
<code>SCM_RIGHTS</code> control message.
It owns a reference to the underlying memory resource represented by its
Vulkan memory object.</p>
</li>
<li>
<p><code>VK_EXTERNAL_MEMORY_HANDLE_TYPE_OPAQUE_WIN32_BIT</code> specifies an NT
handle that has only limited valid usage outside of Vulkan and other
compatible APIs.
It <strong class="purple">must</strong> be compatible with the functions <code>DuplicateHandle</code>,
<code>CloseHandle</code>, <code>CompareObjectHandles</code>, <code>GetHandleInformation</code>,
and <code>SetHandleInformation</code>.
It owns a reference to the underlying memory resource represented by its
Vulkan memory object.</p>
</li>
<li>
<p><code>VK_EXTERNAL_MEMORY_HANDLE_TYPE_OPAQUE_WIN32_KMT_BIT</code> specifies a
global share handle that has only limited valid usage outside of Vulkan
and other compatible APIs.
It is not compatible with any native APIs.
It does not own a reference to the underlying memory resource
represented its Vulkan memory object, and will therefore become invalid
when all Vulkan memory objects associated with it are destroyed.</p>
</li>
<li>
<p><code>VK_EXTERNAL_MEMORY_HANDLE_TYPE_D3D11_TEXTURE_BIT</code> specifies an NT
handle returned by <code>IDXGIResource1</code>::<code>CreateSharedHandle</code>
referring to a Direct3D 10 or 11 texture resource.
It owns a reference to the memory used by the Direct3D resource.</p>
</li>
<li>
<p><code>VK_EXTERNAL_MEMORY_HANDLE_TYPE_D3D11_TEXTURE_KMT_BIT</code> specifies a
global share handle returned by <code>IDXGIResource</code>::<code>GetSharedHandle</code>
referring to a Direct3D 10 or 11 texture resource.
It does not own a reference to the underlying Direct3D resource, and
will therefore become invalid when all Vulkan memory objects and
Direct3D resources associated with it are destroyed.</p>
</li>
<li>
<p><code>VK_EXTERNAL_MEMORY_HANDLE_TYPE_D3D12_HEAP_BIT</code> specifies an NT
handle returned by <code>ID3D12Device</code>::<code>CreateSharedHandle</code> referring
to a Direct3D 12 heap resource.
It owns a reference to the resources used by the Direct3D heap.</p>
</li>
<li>
<p><code>VK_EXTERNAL_MEMORY_HANDLE_TYPE_D3D12_RESOURCE_BIT</code> specifies an NT
handle returned by <code>ID3D12Device</code>::<code>CreateSharedHandle</code> referring
to a Direct3D 12 committed resource.
It owns a reference to the memory used by the Direct3D resource.</p>
</li>
<li>
<p><code>VK_EXTERNAL_MEMORY_HANDLE_TYPE_HOST_ALLOCATION_BIT_EXT</code> specifies a
host pointer returned by a host memory allocation command.
It does not own a reference to the underlying memory resource, and will
therefore become invalid if the host memory is freed.</p>
</li>
<li>
<p><code>VK_EXTERNAL_MEMORY_HANDLE_TYPE_HOST_MAPPED_FOREIGN_MEMORY_BIT_EXT</code>
specifies a host pointer to <em>host mapped foreign memory</em>.
It does not own a reference to the underlying memory resource, and will
therefore become invalid if the foreign memory is unmapped or otherwise
becomes no longer available.</p>
</li>
<li>
<p><code>VK_EXTERNAL_MEMORY_HANDLE_TYPE_DMA_BUF_BIT_EXT</code> is a file
descriptor for a Linux dma_buf.
It owns a reference to the underlying memory resource represented by its
Vulkan memory object.</p>
</li>
<li>
<p><code>VK_EXTERNAL_MEMORY_HANDLE_TYPE_ANDROID_HARDWARE_BUFFER_BIT_ANDROID</code>
specifies an <a href="#AHardwareBuffer">AHardwareBuffer</a> object defined by the Android NDK.
See <a href="vkspec.html#memory-external-android-hardware-buffer">Android Hardware Buffers</a>
for more details of this handle type.</p>
</li>
</ul>
</div>
<div style="page-break-after: always;"></div>
<div class="paragraph">
<p>Some external memory handle types can only be shared within the same
underlying physical device and/or the same driver version, as defined in the
following table:</p>
</div>
<table id="external-memory-handle-types-compatibility" class="tableblock frame-all grid-all stretch">
<caption class="title">Table 20. External memory handle types compatibility</caption>
<colgroup>
<col style="width: 33.3333%;" />
<col style="width: 33.3333%;" />
<col style="width: 33.3334%;" />
</colgroup>
<tbody>
<tr>
<td class="tableblock halign-left valign-top"><p class="tableblock">Handle type</p></td>
<td class="tableblock halign-left valign-top"><p class="tableblock"><code>VkPhysicalDeviceIDProperties</code><wbr />::<code>driverUUID</code></p></td>
<td class="tableblock halign-left valign-top"><p class="tableblock"><code>VkPhysicalDeviceIDProperties</code><wbr />::<code>deviceUUID</code></p></td>
</tr>
<tr>
<td class="tableblock halign-left valign-top"><p class="tableblock"><code>VK_EXTERNAL_MEMORY_HANDLE_TYPE_OPAQUE_FD_BIT</code></p></td>
<td class="tableblock halign-left valign-top"><p class="tableblock">Must match</p></td>
<td class="tableblock halign-left valign-top"><p class="tableblock">Must match</p></td>
</tr>
<tr>
<td class="tableblock halign-left valign-top"><p class="tableblock"><code>VK_EXTERNAL_MEMORY_HANDLE_TYPE_OPAQUE_WIN32_BIT</code></p></td>
<td class="tableblock halign-left valign-top"><p class="tableblock">Must match</p></td>
<td class="tableblock halign-left valign-top"><p class="tableblock">Must match</p></td>
</tr>
<tr>
<td class="tableblock halign-left valign-top"><p class="tableblock"><code>VK_EXTERNAL_MEMORY_HANDLE_TYPE_OPAQUE_WIN32_KMT_BIT</code></p></td>
<td class="tableblock halign-left valign-top"><p class="tableblock">Must match</p></td>
<td class="tableblock halign-left valign-top"><p class="tableblock">Must match</p></td>
</tr>
<tr>
<td class="tableblock halign-left valign-top"><p class="tableblock"><code>VK_EXTERNAL_MEMORY_HANDLE_TYPE_D3D11_TEXTURE_BIT</code></p></td>
<td class="tableblock halign-left valign-top"><p class="tableblock">Must match</p></td>
<td class="tableblock halign-left valign-top"><p class="tableblock">Must match</p></td>
</tr>
<tr>
<td class="tableblock halign-left valign-top"><p class="tableblock"><code>VK_EXTERNAL_MEMORY_HANDLE_TYPE_D3D11_TEXTURE_KMT_BIT</code></p></td>
<td class="tableblock halign-left valign-top"><p class="tableblock">Must match</p></td>
<td class="tableblock halign-left valign-top"><p class="tableblock">Must match</p></td>
</tr>
<tr>
<td class="tableblock halign-left valign-top"><p class="tableblock"><code>VK_EXTERNAL_MEMORY_HANDLE_TYPE_D3D12_HEAP_BIT</code></p></td>
<td class="tableblock halign-left valign-top"><p class="tableblock">Must match</p></td>
<td class="tableblock halign-left valign-top"><p class="tableblock">Must match</p></td>
</tr>
<tr>
<td class="tableblock halign-left valign-top"><p class="tableblock"><code>VK_EXTERNAL_MEMORY_HANDLE_TYPE_D3D12_RESOURCE_BIT</code></p></td>
<td class="tableblock halign-left valign-top"><p class="tableblock">Must match</p></td>
<td class="tableblock halign-left valign-top"><p class="tableblock">Must match</p></td>
</tr>
<tr>
<td class="tableblock halign-left valign-top"><p class="tableblock"><code>VK_EXTERNAL_MEMORY_HANDLE_TYPE_HOST_ALLOCATION_BIT_EXT</code></p></td>
<td class="tableblock halign-left valign-top"><p class="tableblock">No restriction</p></td>
<td class="tableblock halign-left valign-top"><p class="tableblock">No restriction</p></td>
</tr>
<tr>
<td class="tableblock halign-left valign-top"><p class="tableblock"><code>VK_EXTERNAL_MEMORY_HANDLE_TYPE_HOST_MAPPED_FOREIGN_MEMORY_BIT_EXT</code></p></td>
<td class="tableblock halign-left valign-top"><p class="tableblock">No restriction</p></td>
<td class="tableblock halign-left valign-top"><p class="tableblock">No restriction</p></td>
</tr>
<tr>
<td class="tableblock halign-left valign-top"><p class="tableblock"><code>VK_EXTERNAL_MEMORY_HANDLE_TYPE_DMA_BUF_BIT_EXT</code></p></td>
<td class="tableblock halign-left valign-top"><p class="tableblock">No restriction</p></td>
<td class="tableblock halign-left valign-top"><p class="tableblock">No restriction</p></td>
</tr>
<tr>
<td class="tableblock halign-left valign-top"><p class="tableblock"><code>VK_EXTERNAL_MEMORY_HANDLE_TYPE_ANDROID_HARDWARE_BUFFER_BIT_ANDROID</code></p></td>
<td class="tableblock halign-left valign-top"><p class="tableblock">No restriction</p></td>
<td class="tableblock halign-left valign-top"><p class="tableblock">No restriction</p></td>
</tr>
</tbody>
</table>
<div class="admonitionblock note">
<table>
<tr>
<td class="icon">
<i class="fa icon-note" title="Note"></i>
</td>
<td class="content">
<div class="title">Note</div>
<div class="paragraph">
<p>The above table does not restrict the drivers and devices with which
<code>VK_EXTERNAL_MEMORY_HANDLE_TYPE_HOST_ALLOCATION_BIT_EXT</code> and
<code>VK_EXTERNAL_MEMORY_HANDLE_TYPE_HOST_MAPPED_FOREIGN_MEMORY_BIT_EXT</code> <strong class="purple">may</strong>
be shared, as these handle types inherently mean memory that does not come
from the same device, as they import memory from the host or a foreign
device, respectively.</p>
</div>
</td>
</tr>
</table>
</div>
<div class="admonitionblock note">
<table>
<tr>
<td class="icon">
<i class="fa icon-note" title="Note"></i>
</td>
<td class="content">
<div class="title">Note</div>
<div class="paragraph">
<p>Even though the above table does not restrict the drivers and devices with
which <code>VK_EXTERNAL_MEMORY_HANDLE_TYPE_DMA_BUF_BIT_EXT</code> <strong class="purple">may</strong> be shared,
query mechanisms exist in the Vulkan API that prevent the import of
incompatible dma-bufs (such as <a href="#vkGetMemoryFdPropertiesKHR">vkGetMemoryFdPropertiesKHR</a>) and that
prevent incompatible usage of dma-bufs (such as
<a href="#VkPhysicalDeviceExternalBufferInfoKHR">VkPhysicalDeviceExternalBufferInfoKHR</a> and
<a href="#VkPhysicalDeviceExternalImageFormatInfoKHR">VkPhysicalDeviceExternalImageFormatInfoKHR</a>).</p>
</div>
</td>
</tr>
</table>
</div>
</div>
<div class="sect3">
<h4 id="_see_also_852">See Also</h4>
<div class="paragraph">
<p><a href="#VkExternalMemoryHandleTypeFlags">VkExternalMemoryHandleTypeFlags</a>, <a href="#VkImportMemoryFdInfoKHR">VkImportMemoryFdInfoKHR</a>, <a href="#VkImportMemoryHostPointerInfoEXT">VkImportMemoryHostPointerInfoEXT</a>, <a href="#VkImportMemoryWin32HandleInfoKHR">VkImportMemoryWin32HandleInfoKHR</a>, <a href="#VkMemoryGetFdInfoKHR">VkMemoryGetFdInfoKHR</a>, <a href="#VkMemoryGetWin32HandleInfoKHR">VkMemoryGetWin32HandleInfoKHR</a>, <a href="#VkPhysicalDeviceExternalBufferInfo">VkPhysicalDeviceExternalBufferInfo</a>, <a href="#VkPhysicalDeviceExternalImageFormatInfo">VkPhysicalDeviceExternalImageFormatInfo</a>, <a href="#vkGetMemoryFdPropertiesKHR">vkGetMemoryFdPropertiesKHR</a>, <a href="#vkGetMemoryHostPointerPropertiesEXT">vkGetMemoryHostPointerPropertiesEXT</a>, <a href="#vkGetMemoryWin32HandlePropertiesKHR">vkGetMemoryWin32HandlePropertiesKHR</a></p>
</div>
</div>
<div class="sect3">
<h4 id="_document_notes_852">Document Notes</h4>
<div class="paragraph">
<p>For more information, see the Vulkan Specification at URL</p>
</div>
<div class="paragraph">
<p><a href="https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VkExternalMemoryHandleTypeFlagBits" class="bare">https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VkExternalMemoryHandleTypeFlagBits</a></p>
</div>
<div class="paragraph">
<p>This page is extracted from the Vulkan Specification.
Fixes and changes should be made to the Specification, not directly.</p>
</div>
<div style="page-break-after: always;"></div>
</div>
</div>
<div class="sect2">
<h3 id="_vkexternalmemoryhandletypeflagbitsnv3">VkExternalMemoryHandleTypeFlagBitsNV(3)</h3>
<div class="sect3">
<h4 id="_name_853">Name</h4>
<div class="paragraph">
<p>VkExternalMemoryHandleTypeFlagBitsNV - Bitmask specifying external memory handle types</p>
</div>
</div>
<div class="sect3">
<h4 id="_c_specification_853">C Specification</h4>
<div class="paragraph">
<p>Possible values of <a href="#VkImportMemoryWin32HandleInfoNV">VkImportMemoryWin32HandleInfoNV</a>::<code>handleType</code>,
specifying the type of an external memory handle, are:</p>
</div>
<div id="VkExternalMemoryHandleTypeFlagBitsNV" class="listingblock">
<div class="content">
<pre class="highlight"><code class="language-c++" data-lang="c++">typedef enum VkExternalMemoryHandleTypeFlagBitsNV {
    VK_EXTERNAL_MEMORY_HANDLE_TYPE_OPAQUE_WIN32_BIT_NV = 0x00000001,
    VK_EXTERNAL_MEMORY_HANDLE_TYPE_OPAQUE_WIN32_KMT_BIT_NV = 0x00000002,
    VK_EXTERNAL_MEMORY_HANDLE_TYPE_D3D11_IMAGE_BIT_NV = 0x00000004,
    VK_EXTERNAL_MEMORY_HANDLE_TYPE_D3D11_IMAGE_KMT_BIT_NV = 0x00000008,
    VK_EXTERNAL_MEMORY_HANDLE_TYPE_FLAG_BITS_MAX_ENUM_NV = 0x7FFFFFFF
} VkExternalMemoryHandleTypeFlagBitsNV;</code></pre>
</div>
</div>
</div>
<div class="sect3">
<h4 id="_description_853">Description</h4>
<div class="ulist">
<ul>
<li>
<p><code>VK_EXTERNAL_MEMORY_HANDLE_TYPE_OPAQUE_WIN32_KMT_BIT_NV</code> specifies a
handle to memory returned by <a href="#vkGetMemoryWin32HandleNV">vkGetMemoryWin32HandleNV</a>.</p>
</li>
<li>
<p><code>VK_EXTERNAL_MEMORY_HANDLE_TYPE_OPAQUE_WIN32_BIT_NV</code> specifies a
handle to memory returned by <a href="#vkGetMemoryWin32HandleNV">vkGetMemoryWin32HandleNV</a>, or one
duplicated from such a handle using <code>DuplicateHandle()</code>.</p>
</li>
<li>
<p><code>VK_EXTERNAL_MEMORY_HANDLE_TYPE_D3D11_IMAGE_BIT_NV</code> specifies a
valid NT handle to memory returned by
<code>IDXGIResource1::CreateSharedHandle</code>, or a handle duplicated from such a
handle using <code>DuplicateHandle()</code>.</p>
</li>
<li>
<p><code>VK_EXTERNAL_MEMORY_HANDLE_TYPE_D3D11_IMAGE_KMT_BIT_NV</code> specifies a
handle to memory returned by <code>IDXGIResource::GetSharedHandle()</code>.</p>
</li>
</ul>
</div>
<div class="admonitionblock note">
<table>
<tr>
<td class="icon">
<i class="fa icon-note" title="Note"></i>
</td>
<td class="content">
<div class="title">editing-note</div>
<div class="paragraph">
<p>(Jon) If additional (non-Win32) bits are added to the possible memory types,
this type should move to the <code><a href="vkspec.html#VK_NV_external_memory_capabilities" class="bare">html/vkspec.html#VK_NV_external_memory_capabilities</a></code>
section, and each bit would then be protected by ifdefs for the extension
it&#8217;s defined by.</p>
</div>
</td>
</tr>
</table>
</div>
</div>
<div class="sect3">
<h4 id="_see_also_853">See Also</h4>
<div class="paragraph">
<p><a href="#VkExternalMemoryHandleTypeFlagsNV">VkExternalMemoryHandleTypeFlagsNV</a></p>
</div>
</div>
<div class="sect3">
<h4 id="_document_notes_853">Document Notes</h4>
<div class="paragraph">
<p>For more information, see the Vulkan Specification at URL</p>
</div>
<div class="paragraph">
<p><a href="https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VkExternalMemoryHandleTypeFlagBitsNV" class="bare">https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VkExternalMemoryHandleTypeFlagBitsNV</a></p>
</div>
<div class="paragraph">
<p>This page is extracted from the Vulkan Specification.
Fixes and changes should be made to the Specification, not directly.</p>
</div>
<div style="page-break-after: always;"></div>
</div>
</div>
<div class="sect2">
<h3 id="_vkexternalsemaphorefeatureflagbits3">VkExternalSemaphoreFeatureFlagBits(3)</h3>
<div class="sect3">
<h4 id="_name_854">Name</h4>
<div class="paragraph">
<p>VkExternalSemaphoreFeatureFlagBits - Bitfield describing features of an external semaphore handle type</p>
</div>
</div>
<div class="sect3">
<h4 id="_c_specification_854">C Specification</h4>
<div class="paragraph">
<p>Possible values of
<a href="#VkExternalSemaphoreProperties">VkExternalSemaphoreProperties</a>::<code>externalSemaphoreFeatures</code>,
specifying the features of an external semaphore handle type, are:</p>
</div>
<div id="VkExternalSemaphoreFeatureFlagBits" class="listingblock">
<div class="content">
<pre class="highlight"><code class="language-c++" data-lang="c++">typedef enum VkExternalSemaphoreFeatureFlagBits {
    VK_EXTERNAL_SEMAPHORE_FEATURE_EXPORTABLE_BIT = 0x00000001,
    VK_EXTERNAL_SEMAPHORE_FEATURE_IMPORTABLE_BIT = 0x00000002,
    VK_EXTERNAL_SEMAPHORE_FEATURE_EXPORTABLE_BIT_KHR = VK_EXTERNAL_SEMAPHORE_FEATURE_EXPORTABLE_BIT,
    VK_EXTERNAL_SEMAPHORE_FEATURE_IMPORTABLE_BIT_KHR = VK_EXTERNAL_SEMAPHORE_FEATURE_IMPORTABLE_BIT,
    VK_EXTERNAL_SEMAPHORE_FEATURE_FLAG_BITS_MAX_ENUM = 0x7FFFFFFF
} VkExternalSemaphoreFeatureFlagBits;</code></pre>
</div>
</div>
<div class="paragraph">
<p>or the equivalent</p>
</div>
<div id="VkExternalSemaphoreFeatureFlagBitsKHR" class="listingblock">
<div class="content">
<pre class="highlight"><code class="language-c++" data-lang="c++">typedef VkExternalSemaphoreFeatureFlagBits VkExternalSemaphoreFeatureFlagBitsKHR;</code></pre>
</div>
</div>
</div>
<div class="sect3">
<h4 id="_description_854">Description</h4>
<div class="ulist">
<ul>
<li>
<p><code>VK_EXTERNAL_SEMAPHORE_FEATURE_EXPORTABLE_BIT</code> specifies that
handles of this type <strong class="purple">can</strong> be exported from Vulkan semaphore objects.</p>
</li>
<li>
<p><code>VK_EXTERNAL_SEMAPHORE_FEATURE_IMPORTABLE_BIT</code> specifies that
handles of this type <strong class="purple">can</strong> be imported as Vulkan semaphore objects.</p>
</li>
</ul>
</div>
</div>
<div class="sect3">
<h4 id="_see_also_854">See Also</h4>
<div class="paragraph">
<p><a href="#VkExternalSemaphoreFeatureFlags">VkExternalSemaphoreFeatureFlags</a></p>
</div>
</div>
<div class="sect3">
<h4 id="_document_notes_854">Document Notes</h4>
<div class="paragraph">
<p>For more information, see the Vulkan Specification at URL</p>
</div>
<div class="paragraph">
<p><a href="https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VkExternalSemaphoreFeatureFlagBits" class="bare">https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VkExternalSemaphoreFeatureFlagBits</a></p>
</div>
<div class="paragraph">
<p>This page is extracted from the Vulkan Specification.
Fixes and changes should be made to the Specification, not directly.</p>
</div>
<div style="page-break-after: always;"></div>
</div>
</div>
<div class="sect2">
<h3 id="_vkexternalsemaphorehandletypeflagbits3">VkExternalSemaphoreHandleTypeFlagBits(3)</h3>
<div class="sect3">
<h4 id="_name_855">Name</h4>
<div class="paragraph">
<p>VkExternalSemaphoreHandleTypeFlagBits - Bitmask of valid external semaphore handle types</p>
</div>
</div>
<div class="sect3">
<h4 id="_c_specification_855">C Specification</h4>
<div class="paragraph">
<p>Bits which <strong class="purple">may</strong> be set in
<a href="#VkPhysicalDeviceExternalSemaphoreInfo">VkPhysicalDeviceExternalSemaphoreInfo</a>::<code>handleType</code>, specifying an
external semaphore handle type, are:</p>
</div>
<div id="VkExternalSemaphoreHandleTypeFlagBits" class="listingblock">
<div class="content">
<pre class="highlight"><code class="language-c++" data-lang="c++">typedef enum VkExternalSemaphoreHandleTypeFlagBits {
    VK_EXTERNAL_SEMAPHORE_HANDLE_TYPE_OPAQUE_FD_BIT = 0x00000001,
    VK_EXTERNAL_SEMAPHORE_HANDLE_TYPE_OPAQUE_WIN32_BIT = 0x00000002,
    VK_EXTERNAL_SEMAPHORE_HANDLE_TYPE_OPAQUE_WIN32_KMT_BIT = 0x00000004,
    VK_EXTERNAL_SEMAPHORE_HANDLE_TYPE_D3D12_FENCE_BIT = 0x00000008,
    VK_EXTERNAL_SEMAPHORE_HANDLE_TYPE_SYNC_FD_BIT = 0x00000010,
    VK_EXTERNAL_SEMAPHORE_HANDLE_TYPE_OPAQUE_FD_BIT_KHR = VK_EXTERNAL_SEMAPHORE_HANDLE_TYPE_OPAQUE_FD_BIT,
    VK_EXTERNAL_SEMAPHORE_HANDLE_TYPE_OPAQUE_WIN32_BIT_KHR = VK_EXTERNAL_SEMAPHORE_HANDLE_TYPE_OPAQUE_WIN32_BIT,
    VK_EXTERNAL_SEMAPHORE_HANDLE_TYPE_OPAQUE_WIN32_KMT_BIT_KHR = VK_EXTERNAL_SEMAPHORE_HANDLE_TYPE_OPAQUE_WIN32_KMT_BIT,
    VK_EXTERNAL_SEMAPHORE_HANDLE_TYPE_D3D12_FENCE_BIT_KHR = VK_EXTERNAL_SEMAPHORE_HANDLE_TYPE_D3D12_FENCE_BIT,
    VK_EXTERNAL_SEMAPHORE_HANDLE_TYPE_SYNC_FD_BIT_KHR = VK_EXTERNAL_SEMAPHORE_HANDLE_TYPE_SYNC_FD_BIT,
    VK_EXTERNAL_SEMAPHORE_HANDLE_TYPE_FLAG_BITS_MAX_ENUM = 0x7FFFFFFF
} VkExternalSemaphoreHandleTypeFlagBits;</code></pre>
</div>
</div>
<div class="paragraph">
<p>or the equivalent</p>
</div>
<div id="VkExternalSemaphoreHandleTypeFlagBitsKHR" class="listingblock">
<div class="content">
<pre class="highlight"><code class="language-c++" data-lang="c++">typedef VkExternalSemaphoreHandleTypeFlagBits VkExternalSemaphoreHandleTypeFlagBitsKHR;</code></pre>
</div>
</div>
</div>
<div class="sect3">
<h4 id="_description_855">Description</h4>
<div class="ulist">
<ul>
<li>
<p><code>VK_EXTERNAL_SEMAPHORE_HANDLE_TYPE_OPAQUE_FD_BIT</code> specifies a POSIX
file descriptor handle that has only limited valid usage outside of
Vulkan and other compatible APIs.
It <strong class="purple">must</strong> be compatible with the POSIX system calls <code>dup</code>, <code>dup2</code>,
<code>close</code>, and the non-standard system call <code>dup3</code>.
Additionally, it <strong class="purple">must</strong> be transportable over a socket using an
<code>SCM_RIGHTS</code> control message.
It owns a reference to the underlying synchronization primitive
represented by its Vulkan semaphore object.</p>
</li>
<li>
<p><code>VK_EXTERNAL_SEMAPHORE_HANDLE_TYPE_OPAQUE_WIN32_BIT</code> specifies an NT
handle that has only limited valid usage outside of Vulkan and other
compatible APIs.
It <strong class="purple">must</strong> be compatible with the functions <code>DuplicateHandle</code>,
<code>CloseHandle</code>, <code>CompareObjectHandles</code>, <code>GetHandleInformation</code>,
and <code>SetHandleInformation</code>.
It owns a reference to the underlying synchronization primitive
represented by its Vulkan semaphore object.</p>
</li>
<li>
<p><code>VK_EXTERNAL_SEMAPHORE_HANDLE_TYPE_OPAQUE_WIN32_KMT_BIT</code> specifies a
global share handle that has only limited valid usage outside of Vulkan
and other compatible APIs.
It is not compatible with any native APIs.
It does not own a reference to the underlying synchronization primitive
represented its Vulkan semaphore object, and will therefore become
invalid when all Vulkan semaphore objects associated with it are
destroyed.</p>
</li>
<li>
<p><code>VK_EXTERNAL_SEMAPHORE_HANDLE_TYPE_D3D12_FENCE_BIT</code> specifies an NT
handle returned by <code>ID3D12Device</code>::<code>CreateSharedHandle</code> referring
to a Direct3D 12 fence.
It owns a reference to the underlying synchronization primitive
associated with the Direct3D fence.</p>
</li>
<li>
<p><code>VK_EXTERNAL_SEMAPHORE_HANDLE_TYPE_SYNC_FD_BIT</code> specifies a POSIX
file descriptor handle to a Linux Sync File or Android Fence object.
It can be used with any native API accepting a valid sync file or fence
as input.
It owns a reference to the underlying synchronization primitive
associated with the file descriptor.
Implementations which support importing this handle type <strong class="purple">must</strong> accept
any type of sync or fence FD supported by the native system they are
running on.</p>
</li>
</ul>
</div>
<div class="admonitionblock note">
<table>
<tr>
<td class="icon">
<i class="fa icon-note" title="Note"></i>
</td>
<td class="content">
<div class="title">Note</div>
<div class="paragraph">
<p>Handles of type <code>VK_EXTERNAL_SEMAPHORE_HANDLE_TYPE_SYNC_FD_BIT</code>
generated by the implementation may represent either Linux Sync Files or
Android Fences at the implementation&#8217;s discretion.
Applications <strong class="purple">should</strong> only use operations defined for both types of file
descriptors, unless they know via means external to Vulkan the type of the
file descriptor, or are prepared to deal with the system-defined operation
failures resulting from using the wrong type.</p>
</div>
</td>
</tr>
</table>
</div>
<div style="page-break-after: always;"></div>
<div class="paragraph">
<p>Some external semaphore handle types can only be shared within the same
underlying physical device and/or the same driver version, as defined in the
following table:</p>
</div>
<table id="external-semaphore-handle-types-compatibility" class="tableblock frame-all grid-all stretch">
<caption class="title">Table 21. External semaphore handle types compatibility</caption>
<colgroup>
<col style="width: 33.3333%;" />
<col style="width: 33.3333%;" />
<col style="width: 33.3334%;" />
</colgroup>
<tbody>
<tr>
<td class="tableblock halign-left valign-top"><p class="tableblock">Handle type</p></td>
<td class="tableblock halign-left valign-top"><p class="tableblock"><code>VkPhysicalDeviceIDProperties</code><wbr />::<code>driverUUID</code></p></td>
<td class="tableblock halign-left valign-top"><p class="tableblock"><code>VkPhysicalDeviceIDProperties</code><wbr />::<code>deviceUUID</code></p></td>
</tr>
<tr>
<td class="tableblock halign-left valign-top"><p class="tableblock"><code>VK_EXTERNAL_SEMAPHORE_HANDLE_TYPE_OPAQUE_FD_BIT</code></p></td>
<td class="tableblock halign-left valign-top"><p class="tableblock">Must match</p></td>
<td class="tableblock halign-left valign-top"><p class="tableblock">Must match</p></td>
</tr>
<tr>
<td class="tableblock halign-left valign-top"><p class="tableblock"><code>VK_EXTERNAL_SEMAPHORE_HANDLE_TYPE_OPAQUE_WIN32_BIT</code></p></td>
<td class="tableblock halign-left valign-top"><p class="tableblock">Must match</p></td>
<td class="tableblock halign-left valign-top"><p class="tableblock">Must match</p></td>
</tr>
<tr>
<td class="tableblock halign-left valign-top"><p class="tableblock"><code>VK_EXTERNAL_SEMAPHORE_HANDLE_TYPE_OPAQUE_WIN32_KMT_BIT</code></p></td>
<td class="tableblock halign-left valign-top"><p class="tableblock">Must match</p></td>
<td class="tableblock halign-left valign-top"><p class="tableblock">Must match</p></td>
</tr>
<tr>
<td class="tableblock halign-left valign-top"><p class="tableblock"><code>VK_EXTERNAL_SEMAPHORE_HANDLE_TYPE_D3D12_FENCE_BIT</code></p></td>
<td class="tableblock halign-left valign-top"><p class="tableblock">Must match</p></td>
<td class="tableblock halign-left valign-top"><p class="tableblock">Must match</p></td>
</tr>
<tr>
<td class="tableblock halign-left valign-top"><p class="tableblock"><code>VK_EXTERNAL_SEMAPHORE_HANDLE_TYPE_SYNC_FD_BIT</code></p></td>
<td class="tableblock halign-left valign-top"><p class="tableblock">No restriction</p></td>
<td class="tableblock halign-left valign-top"><p class="tableblock">No restriction</p></td>
</tr>
</tbody>
</table>
</div>
<div class="sect3">
<h4 id="_see_also_855">See Also</h4>
<div class="paragraph">
<p><a href="#VkExternalSemaphoreHandleTypeFlags">VkExternalSemaphoreHandleTypeFlags</a>, <a href="#VkImportSemaphoreFdInfoKHR">VkImportSemaphoreFdInfoKHR</a>, <a href="#VkImportSemaphoreWin32HandleInfoKHR">VkImportSemaphoreWin32HandleInfoKHR</a>, <a href="#VkPhysicalDeviceExternalSemaphoreInfo">VkPhysicalDeviceExternalSemaphoreInfo</a>, <a href="#VkSemaphoreGetFdInfoKHR">VkSemaphoreGetFdInfoKHR</a>, <a href="#VkSemaphoreGetWin32HandleInfoKHR">VkSemaphoreGetWin32HandleInfoKHR</a></p>
</div>
</div>
<div class="sect3">
<h4 id="_document_notes_855">Document Notes</h4>
<div class="paragraph">
<p>For more information, see the Vulkan Specification at URL</p>
</div>
<div class="paragraph">
<p><a href="https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VkExternalSemaphoreHandleTypeFlagBits" class="bare">https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VkExternalSemaphoreHandleTypeFlagBits</a></p>
</div>
<div class="paragraph">
<p>This page is extracted from the Vulkan Specification.
Fixes and changes should be made to the Specification, not directly.</p>
</div>
<div style="page-break-after: always;"></div>
</div>
</div>
<div class="sect2">
<h3 id="_vkfencecreateflagbits3">VkFenceCreateFlagBits(3)</h3>
<div class="sect3">
<h4 id="_name_856">Name</h4>
<div class="paragraph">
<p>VkFenceCreateFlagBits - Bitmask specifying initial state and behavior of a fence</p>
</div>
</div>
<div class="sect3">
<h4 id="_c_specification_856">C Specification</h4>
<div id="VkFenceCreateFlagBits" class="listingblock">
<div class="content">
<pre class="highlight"><code class="language-c++" data-lang="c++">typedef enum VkFenceCreateFlagBits {
    VK_FENCE_CREATE_SIGNALED_BIT = 0x00000001,
    VK_FENCE_CREATE_FLAG_BITS_MAX_ENUM = 0x7FFFFFFF
} VkFenceCreateFlagBits;</code></pre>
</div>
</div>
</div>
<div class="sect3">
<h4 id="_description_856">Description</h4>
<div class="ulist">
<ul>
<li>
<p><code>VK_FENCE_CREATE_SIGNALED_BIT</code> specifies that the fence object is
created in the signaled state.
Otherwise, it is created in the unsignaled state.</p>
</li>
</ul>
</div>
</div>
<div class="sect3">
<h4 id="_see_also_856">See Also</h4>
<div class="paragraph">
<p><a href="#VkFenceCreateFlags">VkFenceCreateFlags</a></p>
</div>
</div>
<div class="sect3">
<h4 id="_document_notes_856">Document Notes</h4>
<div class="paragraph">
<p>For more information, see the Vulkan Specification at URL</p>
</div>
<div class="paragraph">
<p><a href="https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VkFenceCreateFlagBits" class="bare">https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VkFenceCreateFlagBits</a></p>
</div>
<div class="paragraph">
<p>This page is extracted from the Vulkan Specification.
Fixes and changes should be made to the Specification, not directly.</p>
</div>
<div style="page-break-after: always;"></div>
</div>
</div>
<div class="sect2">
<h3 id="_vkfenceimportflagbits3">VkFenceImportFlagBits(3)</h3>
<div class="sect3">
<h4 id="_name_857">Name</h4>
<div class="paragraph">
<p>VkFenceImportFlagBits - Bitmask specifying additional parameters of fence payload import</p>
</div>
</div>
<div class="sect3">
<h4 id="_c_specification_857">C Specification</h4>
<div class="paragraph">
<p>Bits which <strong class="purple">can</strong> be set in
<a href="#VkImportFenceWin32HandleInfoKHR">VkImportFenceWin32HandleInfoKHR</a>::<code>flags</code>
and
<a href="#VkImportFenceFdInfoKHR">VkImportFenceFdInfoKHR</a>::<code>flags</code>
specifying additional parameters of a fence import operation are:</p>
</div>
<div id="VkFenceImportFlagBits" class="listingblock">
<div class="content">
<pre class="highlight"><code class="language-c++" data-lang="c++">typedef enum VkFenceImportFlagBits {
    VK_FENCE_IMPORT_TEMPORARY_BIT = 0x00000001,
    VK_FENCE_IMPORT_TEMPORARY_BIT_KHR = VK_FENCE_IMPORT_TEMPORARY_BIT,
    VK_FENCE_IMPORT_FLAG_BITS_MAX_ENUM = 0x7FFFFFFF
} VkFenceImportFlagBits;</code></pre>
</div>
</div>
<div class="paragraph">
<p>or the equivalent</p>
</div>
<div id="VkFenceImportFlagBitsKHR" class="listingblock">
<div class="content">
<pre class="highlight"><code class="language-c++" data-lang="c++">typedef VkFenceImportFlagBits VkFenceImportFlagBitsKHR;</code></pre>
</div>
</div>
</div>
<div class="sect3">
<h4 id="_description_857">Description</h4>
<div class="ulist">
<ul>
<li>
<p><code>VK_FENCE_IMPORT_TEMPORARY_BIT</code> specifies that the fence payload
will be imported only temporarily, as described in
<a href="vkspec.html#synchronization-fences-importing">Importing Fence Payloads</a>,
regardless of the permanence of <code>handleType</code>.</p>
</li>
</ul>
</div>
</div>
<div class="sect3">
<h4 id="_see_also_857">See Also</h4>
<div class="paragraph">
<p><a href="#VkFenceImportFlags">VkFenceImportFlags</a></p>
</div>
</div>
<div class="sect3">
<h4 id="_document_notes_857">Document Notes</h4>
<div class="paragraph">
<p>For more information, see the Vulkan Specification at URL</p>
</div>
<div class="paragraph">
<p><a href="https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VkFenceImportFlagBits" class="bare">https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VkFenceImportFlagBits</a></p>
</div>
<div class="paragraph">
<p>This page is extracted from the Vulkan Specification.
Fixes and changes should be made to the Specification, not directly.</p>
</div>
<div style="page-break-after: always;"></div>
</div>
</div>
<div class="sect2">
<h3 id="_vkfilter3">VkFilter(3)</h3>
<div class="sect3">
<h4 id="_name_858">Name</h4>
<div class="paragraph">
<p>VkFilter - Specify filters used for texture lookups</p>
</div>
</div>
<div class="sect3">
<h4 id="_c_specification_858">C Specification</h4>
<div class="paragraph">
<p>Possible values of the <a href="#VkSamplerCreateInfo">VkSamplerCreateInfo</a>::<code>magFilter</code> and
<code>minFilter</code> parameters, specifying filters used for texture lookups,
are:</p>
</div>
<div id="VkFilter" class="listingblock">
<div class="content">
<pre class="highlight"><code class="language-c++" data-lang="c++">typedef enum VkFilter {
    VK_FILTER_NEAREST = 0,
    VK_FILTER_LINEAR = 1,
    VK_FILTER_CUBIC_IMG = 1000015000,
    VK_FILTER_CUBIC_EXT = VK_FILTER_CUBIC_IMG,
    VK_FILTER_MAX_ENUM = 0x7FFFFFFF
} VkFilter;</code></pre>
</div>
</div>
</div>
<div class="sect3">
<h4 id="_description_858">Description</h4>
<div class="ulist">
<ul>
<li>
<p><code>VK_FILTER_NEAREST</code> specifies nearest filtering.</p>
</li>
<li>
<p><code>VK_FILTER_LINEAR</code> specifies linear filtering.</p>
</li>
<li>
<p><code>VK_FILTER_CUBIC_EXT</code> specifies cubic filtering.</p>
</li>
</ul>
</div>
<div class="paragraph">
<p>These filters are described in detail in <a href="vkspec.html#textures-texel-filtering">Texel
Filtering</a>.</p>
</div>
</div>
<div class="sect3">
<h4 id="_see_also_858">See Also</h4>
<div class="paragraph">
<p><a href="#VkSamplerCreateInfo">VkSamplerCreateInfo</a>, <a href="#VkSamplerYcbcrConversionCreateInfo">VkSamplerYcbcrConversionCreateInfo</a>, <a href="#vkCmdBlitImage">vkCmdBlitImage</a></p>
</div>
</div>
<div class="sect3">
<h4 id="_document_notes_858">Document Notes</h4>
<div class="paragraph">
<p>For more information, see the Vulkan Specification at URL</p>
</div>
<div class="paragraph">
<p><a href="https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VkFilter" class="bare">https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VkFilter</a></p>
</div>
<div class="paragraph">
<p>This page is extracted from the Vulkan Specification.
Fixes and changes should be made to the Specification, not directly.</p>
</div>
<div style="page-break-after: always;"></div>
</div>
</div>
<div class="sect2">
<h3 id="_vkformat3">VkFormat(3)</h3>
<div class="sect3">
<h4 id="_name_859">Name</h4>
<div class="paragraph">
<p>VkFormat - Available image formats</p>
</div>
</div>
<div class="sect3">
<h4 id="_c_specification_859">C Specification</h4>
<div class="paragraph">
<p>The following image formats <strong class="purple">can</strong> be passed to, and <strong class="purple">may</strong> be returned from
Vulkan commands.
The memory required to store each format is discussed with that format, and
also summarized in the <a href="vkspec.html#texel-block-size">Representation and Texel Block
Size</a> section and the <a href="vkspec.html#formats-compatibility">Compatible formats</a> table.</p>
</div>
<div id="VkFormat" class="listingblock">
<div class="content">
<pre class="highlight"><code class="language-c++" data-lang="c++">typedef enum VkFormat {
    VK_FORMAT_UNDEFINED = 0,
    VK_FORMAT_R4G4_UNORM_PACK8 = 1,
    VK_FORMAT_R4G4B4A4_UNORM_PACK16 = 2,
    VK_FORMAT_B4G4R4A4_UNORM_PACK16 = 3,
    VK_FORMAT_R5G6B5_UNORM_PACK16 = 4,
    VK_FORMAT_B5G6R5_UNORM_PACK16 = 5,
    VK_FORMAT_R5G5B5A1_UNORM_PACK16 = 6,
    VK_FORMAT_B5G5R5A1_UNORM_PACK16 = 7,
    VK_FORMAT_A1R5G5B5_UNORM_PACK16 = 8,
    VK_FORMAT_R8_UNORM = 9,
    VK_FORMAT_R8_SNORM = 10,
    VK_FORMAT_R8_USCALED = 11,
    VK_FORMAT_R8_SSCALED = 12,
    VK_FORMAT_R8_UINT = 13,
    VK_FORMAT_R8_SINT = 14,
    VK_FORMAT_R8_SRGB = 15,
    VK_FORMAT_R8G8_UNORM = 16,
    VK_FORMAT_R8G8_SNORM = 17,
    VK_FORMAT_R8G8_USCALED = 18,
    VK_FORMAT_R8G8_SSCALED = 19,
    VK_FORMAT_R8G8_UINT = 20,
    VK_FORMAT_R8G8_SINT = 21,
    VK_FORMAT_R8G8_SRGB = 22,
    VK_FORMAT_R8G8B8_UNORM = 23,
    VK_FORMAT_R8G8B8_SNORM = 24,
    VK_FORMAT_R8G8B8_USCALED = 25,
    VK_FORMAT_R8G8B8_SSCALED = 26,
    VK_FORMAT_R8G8B8_UINT = 27,
    VK_FORMAT_R8G8B8_SINT = 28,
    VK_FORMAT_R8G8B8_SRGB = 29,
    VK_FORMAT_B8G8R8_UNORM = 30,
    VK_FORMAT_B8G8R8_SNORM = 31,
    VK_FORMAT_B8G8R8_USCALED = 32,
    VK_FORMAT_B8G8R8_SSCALED = 33,
    VK_FORMAT_B8G8R8_UINT = 34,
    VK_FORMAT_B8G8R8_SINT = 35,
    VK_FORMAT_B8G8R8_SRGB = 36,
    VK_FORMAT_R8G8B8A8_UNORM = 37,
    VK_FORMAT_R8G8B8A8_SNORM = 38,
    VK_FORMAT_R8G8B8A8_USCALED = 39,
    VK_FORMAT_R8G8B8A8_SSCALED = 40,
    VK_FORMAT_R8G8B8A8_UINT = 41,
    VK_FORMAT_R8G8B8A8_SINT = 42,
    VK_FORMAT_R8G8B8A8_SRGB = 43,
    VK_FORMAT_B8G8R8A8_UNORM = 44,
    VK_FORMAT_B8G8R8A8_SNORM = 45,
    VK_FORMAT_B8G8R8A8_USCALED = 46,
    VK_FORMAT_B8G8R8A8_SSCALED = 47,
    VK_FORMAT_B8G8R8A8_UINT = 48,
    VK_FORMAT_B8G8R8A8_SINT = 49,
    VK_FORMAT_B8G8R8A8_SRGB = 50,
    VK_FORMAT_A8B8G8R8_UNORM_PACK32 = 51,
    VK_FORMAT_A8B8G8R8_SNORM_PACK32 = 52,
    VK_FORMAT_A8B8G8R8_USCALED_PACK32 = 53,
    VK_FORMAT_A8B8G8R8_SSCALED_PACK32 = 54,
    VK_FORMAT_A8B8G8R8_UINT_PACK32 = 55,
    VK_FORMAT_A8B8G8R8_SINT_PACK32 = 56,
    VK_FORMAT_A8B8G8R8_SRGB_PACK32 = 57,
    VK_FORMAT_A2R10G10B10_UNORM_PACK32 = 58,
    VK_FORMAT_A2R10G10B10_SNORM_PACK32 = 59,
    VK_FORMAT_A2R10G10B10_USCALED_PACK32 = 60,
    VK_FORMAT_A2R10G10B10_SSCALED_PACK32 = 61,
    VK_FORMAT_A2R10G10B10_UINT_PACK32 = 62,
    VK_FORMAT_A2R10G10B10_SINT_PACK32 = 63,
    VK_FORMAT_A2B10G10R10_UNORM_PACK32 = 64,
    VK_FORMAT_A2B10G10R10_SNORM_PACK32 = 65,
    VK_FORMAT_A2B10G10R10_USCALED_PACK32 = 66,
    VK_FORMAT_A2B10G10R10_SSCALED_PACK32 = 67,
    VK_FORMAT_A2B10G10R10_UINT_PACK32 = 68,
    VK_FORMAT_A2B10G10R10_SINT_PACK32 = 69,
    VK_FORMAT_R16_UNORM = 70,
    VK_FORMAT_R16_SNORM = 71,
    VK_FORMAT_R16_USCALED = 72,
    VK_FORMAT_R16_SSCALED = 73,
    VK_FORMAT_R16_UINT = 74,
    VK_FORMAT_R16_SINT = 75,
    VK_FORMAT_R16_SFLOAT = 76,
    VK_FORMAT_R16G16_UNORM = 77,
    VK_FORMAT_R16G16_SNORM = 78,
    VK_FORMAT_R16G16_USCALED = 79,
    VK_FORMAT_R16G16_SSCALED = 80,
    VK_FORMAT_R16G16_UINT = 81,
    VK_FORMAT_R16G16_SINT = 82,
    VK_FORMAT_R16G16_SFLOAT = 83,
    VK_FORMAT_R16G16B16_UNORM = 84,
    VK_FORMAT_R16G16B16_SNORM = 85,
    VK_FORMAT_R16G16B16_USCALED = 86,
    VK_FORMAT_R16G16B16_SSCALED = 87,
    VK_FORMAT_R16G16B16_UINT = 88,
    VK_FORMAT_R16G16B16_SINT = 89,
    VK_FORMAT_R16G16B16_SFLOAT = 90,
    VK_FORMAT_R16G16B16A16_UNORM = 91,
    VK_FORMAT_R16G16B16A16_SNORM = 92,
    VK_FORMAT_R16G16B16A16_USCALED = 93,
    VK_FORMAT_R16G16B16A16_SSCALED = 94,
    VK_FORMAT_R16G16B16A16_UINT = 95,
    VK_FORMAT_R16G16B16A16_SINT = 96,
    VK_FORMAT_R16G16B16A16_SFLOAT = 97,
    VK_FORMAT_R32_UINT = 98,
    VK_FORMAT_R32_SINT = 99,
    VK_FORMAT_R32_SFLOAT = 100,
    VK_FORMAT_R32G32_UINT = 101,
    VK_FORMAT_R32G32_SINT = 102,
    VK_FORMAT_R32G32_SFLOAT = 103,
    VK_FORMAT_R32G32B32_UINT = 104,
    VK_FORMAT_R32G32B32_SINT = 105,
    VK_FORMAT_R32G32B32_SFLOAT = 106,
    VK_FORMAT_R32G32B32A32_UINT = 107,
    VK_FORMAT_R32G32B32A32_SINT = 108,
    VK_FORMAT_R32G32B32A32_SFLOAT = 109,
    VK_FORMAT_R64_UINT = 110,
    VK_FORMAT_R64_SINT = 111,
    VK_FORMAT_R64_SFLOAT = 112,
    VK_FORMAT_R64G64_UINT = 113,
    VK_FORMAT_R64G64_SINT = 114,
    VK_FORMAT_R64G64_SFLOAT = 115,
    VK_FORMAT_R64G64B64_UINT = 116,
    VK_FORMAT_R64G64B64_SINT = 117,
    VK_FORMAT_R64G64B64_SFLOAT = 118,
    VK_FORMAT_R64G64B64A64_UINT = 119,
    VK_FORMAT_R64G64B64A64_SINT = 120,
    VK_FORMAT_R64G64B64A64_SFLOAT = 121,
    VK_FORMAT_B10G11R11_UFLOAT_PACK32 = 122,
    VK_FORMAT_E5B9G9R9_UFLOAT_PACK32 = 123,
    VK_FORMAT_D16_UNORM = 124,
    VK_FORMAT_X8_D24_UNORM_PACK32 = 125,
    VK_FORMAT_D32_SFLOAT = 126,
    VK_FORMAT_S8_UINT = 127,
    VK_FORMAT_D16_UNORM_S8_UINT = 128,
    VK_FORMAT_D24_UNORM_S8_UINT = 129,
    VK_FORMAT_D32_SFLOAT_S8_UINT = 130,
    VK_FORMAT_BC1_RGB_UNORM_BLOCK = 131,
    VK_FORMAT_BC1_RGB_SRGB_BLOCK = 132,
    VK_FORMAT_BC1_RGBA_UNORM_BLOCK = 133,
    VK_FORMAT_BC1_RGBA_SRGB_BLOCK = 134,
    VK_FORMAT_BC2_UNORM_BLOCK = 135,
    VK_FORMAT_BC2_SRGB_BLOCK = 136,
    VK_FORMAT_BC3_UNORM_BLOCK = 137,
    VK_FORMAT_BC3_SRGB_BLOCK = 138,
    VK_FORMAT_BC4_UNORM_BLOCK = 139,
    VK_FORMAT_BC4_SNORM_BLOCK = 140,
    VK_FORMAT_BC5_UNORM_BLOCK = 141,
    VK_FORMAT_BC5_SNORM_BLOCK = 142,
    VK_FORMAT_BC6H_UFLOAT_BLOCK = 143,
    VK_FORMAT_BC6H_SFLOAT_BLOCK = 144,
    VK_FORMAT_BC7_UNORM_BLOCK = 145,
    VK_FORMAT_BC7_SRGB_BLOCK = 146,
    VK_FORMAT_ETC2_R8G8B8_UNORM_BLOCK = 147,
    VK_FORMAT_ETC2_R8G8B8_SRGB_BLOCK = 148,
    VK_FORMAT_ETC2_R8G8B8A1_UNORM_BLOCK = 149,
    VK_FORMAT_ETC2_R8G8B8A1_SRGB_BLOCK = 150,
    VK_FORMAT_ETC2_R8G8B8A8_UNORM_BLOCK = 151,
    VK_FORMAT_ETC2_R8G8B8A8_SRGB_BLOCK = 152,
    VK_FORMAT_EAC_R11_UNORM_BLOCK = 153,
    VK_FORMAT_EAC_R11_SNORM_BLOCK = 154,
    VK_FORMAT_EAC_R11G11_UNORM_BLOCK = 155,
    VK_FORMAT_EAC_R11G11_SNORM_BLOCK = 156,
    VK_FORMAT_ASTC_4x4_UNORM_BLOCK = 157,
    VK_FORMAT_ASTC_4x4_SRGB_BLOCK = 158,
    VK_FORMAT_ASTC_5x4_UNORM_BLOCK = 159,
    VK_FORMAT_ASTC_5x4_SRGB_BLOCK = 160,
    VK_FORMAT_ASTC_5x5_UNORM_BLOCK = 161,
    VK_FORMAT_ASTC_5x5_SRGB_BLOCK = 162,
    VK_FORMAT_ASTC_6x5_UNORM_BLOCK = 163,
    VK_FORMAT_ASTC_6x5_SRGB_BLOCK = 164,
    VK_FORMAT_ASTC_6x6_UNORM_BLOCK = 165,
    VK_FORMAT_ASTC_6x6_SRGB_BLOCK = 166,
    VK_FORMAT_ASTC_8x5_UNORM_BLOCK = 167,
    VK_FORMAT_ASTC_8x5_SRGB_BLOCK = 168,
    VK_FORMAT_ASTC_8x6_UNORM_BLOCK = 169,
    VK_FORMAT_ASTC_8x6_SRGB_BLOCK = 170,
    VK_FORMAT_ASTC_8x8_UNORM_BLOCK = 171,
    VK_FORMAT_ASTC_8x8_SRGB_BLOCK = 172,
    VK_FORMAT_ASTC_10x5_UNORM_BLOCK = 173,
    VK_FORMAT_ASTC_10x5_SRGB_BLOCK = 174,
    VK_FORMAT_ASTC_10x6_UNORM_BLOCK = 175,
    VK_FORMAT_ASTC_10x6_SRGB_BLOCK = 176,
    VK_FORMAT_ASTC_10x8_UNORM_BLOCK = 177,
    VK_FORMAT_ASTC_10x8_SRGB_BLOCK = 178,
    VK_FORMAT_ASTC_10x10_UNORM_BLOCK = 179,
    VK_FORMAT_ASTC_10x10_SRGB_BLOCK = 180,
    VK_FORMAT_ASTC_12x10_UNORM_BLOCK = 181,
    VK_FORMAT_ASTC_12x10_SRGB_BLOCK = 182,
    VK_FORMAT_ASTC_12x12_UNORM_BLOCK = 183,
    VK_FORMAT_ASTC_12x12_SRGB_BLOCK = 184,
    VK_FORMAT_G8B8G8R8_422_UNORM = 1000156000,
    VK_FORMAT_B8G8R8G8_422_UNORM = 1000156001,
    VK_FORMAT_G8_B8_R8_3PLANE_420_UNORM = 1000156002,
    VK_FORMAT_G8_B8R8_2PLANE_420_UNORM = 1000156003,
    VK_FORMAT_G8_B8_R8_3PLANE_422_UNORM = 1000156004,
    VK_FORMAT_G8_B8R8_2PLANE_422_UNORM = 1000156005,
    VK_FORMAT_G8_B8_R8_3PLANE_444_UNORM = 1000156006,
    VK_FORMAT_R10X6_UNORM_PACK16 = 1000156007,
    VK_FORMAT_R10X6G10X6_UNORM_2PACK16 = 1000156008,
    VK_FORMAT_R10X6G10X6B10X6A10X6_UNORM_4PACK16 = 1000156009,
    VK_FORMAT_G10X6B10X6G10X6R10X6_422_UNORM_4PACK16 = 1000156010,
    VK_FORMAT_B10X6G10X6R10X6G10X6_422_UNORM_4PACK16 = 1000156011,
    VK_FORMAT_G10X6_B10X6_R10X6_3PLANE_420_UNORM_3PACK16 = 1000156012,
    VK_FORMAT_G10X6_B10X6R10X6_2PLANE_420_UNORM_3PACK16 = 1000156013,
    VK_FORMAT_G10X6_B10X6_R10X6_3PLANE_422_UNORM_3PACK16 = 1000156014,
    VK_FORMAT_G10X6_B10X6R10X6_2PLANE_422_UNORM_3PACK16 = 1000156015,
    VK_FORMAT_G10X6_B10X6_R10X6_3PLANE_444_UNORM_3PACK16 = 1000156016,
    VK_FORMAT_R12X4_UNORM_PACK16 = 1000156017,
    VK_FORMAT_R12X4G12X4_UNORM_2PACK16 = 1000156018,
    VK_FORMAT_R12X4G12X4B12X4A12X4_UNORM_4PACK16 = 1000156019,
    VK_FORMAT_G12X4B12X4G12X4R12X4_422_UNORM_4PACK16 = 1000156020,
    VK_FORMAT_B12X4G12X4R12X4G12X4_422_UNORM_4PACK16 = 1000156021,
    VK_FORMAT_G12X4_B12X4_R12X4_3PLANE_420_UNORM_3PACK16 = 1000156022,
    VK_FORMAT_G12X4_B12X4R12X4_2PLANE_420_UNORM_3PACK16 = 1000156023,
    VK_FORMAT_G12X4_B12X4_R12X4_3PLANE_422_UNORM_3PACK16 = 1000156024,
    VK_FORMAT_G12X4_B12X4R12X4_2PLANE_422_UNORM_3PACK16 = 1000156025,
    VK_FORMAT_G12X4_B12X4_R12X4_3PLANE_444_UNORM_3PACK16 = 1000156026,
    VK_FORMAT_G16B16G16R16_422_UNORM = 1000156027,
    VK_FORMAT_B16G16R16G16_422_UNORM = 1000156028,
    VK_FORMAT_G16_B16_R16_3PLANE_420_UNORM = 1000156029,
    VK_FORMAT_G16_B16R16_2PLANE_420_UNORM = 1000156030,
    VK_FORMAT_G16_B16_R16_3PLANE_422_UNORM = 1000156031,
    VK_FORMAT_G16_B16R16_2PLANE_422_UNORM = 1000156032,
    VK_FORMAT_G16_B16_R16_3PLANE_444_UNORM = 1000156033,
    VK_FORMAT_PVRTC1_2BPP_UNORM_BLOCK_IMG = 1000054000,
    VK_FORMAT_PVRTC1_4BPP_UNORM_BLOCK_IMG = 1000054001,
    VK_FORMAT_PVRTC2_2BPP_UNORM_BLOCK_IMG = 1000054002,
    VK_FORMAT_PVRTC2_4BPP_UNORM_BLOCK_IMG = 1000054003,
    VK_FORMAT_PVRTC1_2BPP_SRGB_BLOCK_IMG = 1000054004,
    VK_FORMAT_PVRTC1_4BPP_SRGB_BLOCK_IMG = 1000054005,
    VK_FORMAT_PVRTC2_2BPP_SRGB_BLOCK_IMG = 1000054006,
    VK_FORMAT_PVRTC2_4BPP_SRGB_BLOCK_IMG = 1000054007,
    VK_FORMAT_G8B8G8R8_422_UNORM_KHR = VK_FORMAT_G8B8G8R8_422_UNORM,
    VK_FORMAT_B8G8R8G8_422_UNORM_KHR = VK_FORMAT_B8G8R8G8_422_UNORM,
    VK_FORMAT_G8_B8_R8_3PLANE_420_UNORM_KHR = VK_FORMAT_G8_B8_R8_3PLANE_420_UNORM,
    VK_FORMAT_G8_B8R8_2PLANE_420_UNORM_KHR = VK_FORMAT_G8_B8R8_2PLANE_420_UNORM,
    VK_FORMAT_G8_B8_R8_3PLANE_422_UNORM_KHR = VK_FORMAT_G8_B8_R8_3PLANE_422_UNORM,
    VK_FORMAT_G8_B8R8_2PLANE_422_UNORM_KHR = VK_FORMAT_G8_B8R8_2PLANE_422_UNORM,
    VK_FORMAT_G8_B8_R8_3PLANE_444_UNORM_KHR = VK_FORMAT_G8_B8_R8_3PLANE_444_UNORM,
    VK_FORMAT_R10X6_UNORM_PACK16_KHR = VK_FORMAT_R10X6_UNORM_PACK16,
    VK_FORMAT_R10X6G10X6_UNORM_2PACK16_KHR = VK_FORMAT_R10X6G10X6_UNORM_2PACK16,
    VK_FORMAT_R10X6G10X6B10X6A10X6_UNORM_4PACK16_KHR = VK_FORMAT_R10X6G10X6B10X6A10X6_UNORM_4PACK16,
    VK_FORMAT_G10X6B10X6G10X6R10X6_422_UNORM_4PACK16_KHR = VK_FORMAT_G10X6B10X6G10X6R10X6_422_UNORM_4PACK16,
    VK_FORMAT_B10X6G10X6R10X6G10X6_422_UNORM_4PACK16_KHR = VK_FORMAT_B10X6G10X6R10X6G10X6_422_UNORM_4PACK16,
    VK_FORMAT_G10X6_B10X6_R10X6_3PLANE_420_UNORM_3PACK16_KHR = VK_FORMAT_G10X6_B10X6_R10X6_3PLANE_420_UNORM_3PACK16,
    VK_FORMAT_G10X6_B10X6R10X6_2PLANE_420_UNORM_3PACK16_KHR = VK_FORMAT_G10X6_B10X6R10X6_2PLANE_420_UNORM_3PACK16,
    VK_FORMAT_G10X6_B10X6_R10X6_3PLANE_422_UNORM_3PACK16_KHR = VK_FORMAT_G10X6_B10X6_R10X6_3PLANE_422_UNORM_3PACK16,
    VK_FORMAT_G10X6_B10X6R10X6_2PLANE_422_UNORM_3PACK16_KHR = VK_FORMAT_G10X6_B10X6R10X6_2PLANE_422_UNORM_3PACK16,
    VK_FORMAT_G10X6_B10X6_R10X6_3PLANE_444_UNORM_3PACK16_KHR = VK_FORMAT_G10X6_B10X6_R10X6_3PLANE_444_UNORM_3PACK16,
    VK_FORMAT_R12X4_UNORM_PACK16_KHR = VK_FORMAT_R12X4_UNORM_PACK16,
    VK_FORMAT_R12X4G12X4_UNORM_2PACK16_KHR = VK_FORMAT_R12X4G12X4_UNORM_2PACK16,
    VK_FORMAT_R12X4G12X4B12X4A12X4_UNORM_4PACK16_KHR = VK_FORMAT_R12X4G12X4B12X4A12X4_UNORM_4PACK16,
    VK_FORMAT_G12X4B12X4G12X4R12X4_422_UNORM_4PACK16_KHR = VK_FORMAT_G12X4B12X4G12X4R12X4_422_UNORM_4PACK16,
    VK_FORMAT_B12X4G12X4R12X4G12X4_422_UNORM_4PACK16_KHR = VK_FORMAT_B12X4G12X4R12X4G12X4_422_UNORM_4PACK16,
    VK_FORMAT_G12X4_B12X4_R12X4_3PLANE_420_UNORM_3PACK16_KHR = VK_FORMAT_G12X4_B12X4_R12X4_3PLANE_420_UNORM_3PACK16,
    VK_FORMAT_G12X4_B12X4R12X4_2PLANE_420_UNORM_3PACK16_KHR = VK_FORMAT_G12X4_B12X4R12X4_2PLANE_420_UNORM_3PACK16,
    VK_FORMAT_G12X4_B12X4_R12X4_3PLANE_422_UNORM_3PACK16_KHR = VK_FORMAT_G12X4_B12X4_R12X4_3PLANE_422_UNORM_3PACK16,
    VK_FORMAT_G12X4_B12X4R12X4_2PLANE_422_UNORM_3PACK16_KHR = VK_FORMAT_G12X4_B12X4R12X4_2PLANE_422_UNORM_3PACK16,
    VK_FORMAT_G12X4_B12X4_R12X4_3PLANE_444_UNORM_3PACK16_KHR = VK_FORMAT_G12X4_B12X4_R12X4_3PLANE_444_UNORM_3PACK16,
    VK_FORMAT_G16B16G16R16_422_UNORM_KHR = VK_FORMAT_G16B16G16R16_422_UNORM,
    VK_FORMAT_B16G16R16G16_422_UNORM_KHR = VK_FORMAT_B16G16R16G16_422_UNORM,
    VK_FORMAT_G16_B16_R16_3PLANE_420_UNORM_KHR = VK_FORMAT_G16_B16_R16_3PLANE_420_UNORM,
    VK_FORMAT_G16_B16R16_2PLANE_420_UNORM_KHR = VK_FORMAT_G16_B16R16_2PLANE_420_UNORM,
    VK_FORMAT_G16_B16_R16_3PLANE_422_UNORM_KHR = VK_FORMAT_G16_B16_R16_3PLANE_422_UNORM,
    VK_FORMAT_G16_B16R16_2PLANE_422_UNORM_KHR = VK_FORMAT_G16_B16R16_2PLANE_422_UNORM,
    VK_FORMAT_G16_B16_R16_3PLANE_444_UNORM_KHR = VK_FORMAT_G16_B16_R16_3PLANE_444_UNORM,
    VK_FORMAT_MAX_ENUM = 0x7FFFFFFF
} VkFormat;</code></pre>
</div>
</div>
</div>
<div class="sect3">
<h4 id="_description_859">Description</h4>
<div class="ulist">
<ul>
<li>
<p><code>VK_FORMAT_UNDEFINED</code> specifies that the format is not specified.</p>
</li>
<li>
<p><code>VK_FORMAT_R4G4_UNORM_PACK8</code> specifies a two-component, 8-bit packed
unsigned normalized format that has a 4-bit R component in bits 4..7,
and a 4-bit G component in bits 0..3.</p>
</li>
<li>
<p><code>VK_FORMAT_R4G4B4A4_UNORM_PACK16</code> specifies a four-component, 16-bit
packed unsigned normalized format that has a 4-bit R component in bits
12..15, a 4-bit G component in bits 8..11, a 4-bit B component in bits
4..7, and a 4-bit A component in bits 0..3.</p>
</li>
<li>
<p><code>VK_FORMAT_B4G4R4A4_UNORM_PACK16</code> specifies a four-component, 16-bit
packed unsigned normalized format that has a 4-bit B component in bits
12..15, a 4-bit G component in bits 8..11, a 4-bit R component in bits
4..7, and a 4-bit A component in bits 0..3.</p>
</li>
<li>
<p><code>VK_FORMAT_R5G6B5_UNORM_PACK16</code> specifies a three-component, 16-bit
packed unsigned normalized format that has a 5-bit R component in bits
11..15, a 6-bit G component in bits 5..10, and a 5-bit B component in
bits 0..4.</p>
</li>
<li>
<p><code>VK_FORMAT_B5G6R5_UNORM_PACK16</code> specifies a three-component, 16-bit
packed unsigned normalized format that has a 5-bit B component in bits
11..15, a 6-bit G component in bits 5..10, and a 5-bit R component in
bits 0..4.</p>
</li>
<li>
<p><code>VK_FORMAT_R5G5B5A1_UNORM_PACK16</code> specifies a four-component, 16-bit
packed unsigned normalized format that has a 5-bit R component in bits
11..15, a 5-bit G component in bits 6..10, a 5-bit B component in bits
1..5, and a 1-bit A component in bit 0.</p>
</li>
<li>
<p><code>VK_FORMAT_B5G5R5A1_UNORM_PACK16</code> specifies a four-component, 16-bit
packed unsigned normalized format that has a 5-bit B component in bits
11..15, a 5-bit G component in bits 6..10, a 5-bit R component in bits
1..5, and a 1-bit A component in bit 0.</p>
</li>
<li>
<p><code>VK_FORMAT_A1R5G5B5_UNORM_PACK16</code> specifies a four-component, 16-bit
packed unsigned normalized format that has a 1-bit A component in bit
15, a 5-bit R component in bits 10..14, a 5-bit G component in bits
5..9, and a 5-bit B component in bits 0..4.</p>
</li>
<li>
<p><code>VK_FORMAT_R8_UNORM</code> specifies a one-component, 8-bit unsigned
normalized format that has a single 8-bit R component.</p>
</li>
<li>
<p><code>VK_FORMAT_R8_SNORM</code> specifies a one-component, 8-bit signed
normalized format that has a single 8-bit R component.</p>
</li>
<li>
<p><code>VK_FORMAT_R8_USCALED</code> specifies a one-component, 8-bit unsigned
scaled integer format that has a single 8-bit R component.</p>
</li>
<li>
<p><code>VK_FORMAT_R8_SSCALED</code> specifies a one-component, 8-bit signed
scaled integer format that has a single 8-bit R component.</p>
</li>
<li>
<p><code>VK_FORMAT_R8_UINT</code> specifies a one-component, 8-bit unsigned
integer format that has a single 8-bit R component.</p>
</li>
<li>
<p><code>VK_FORMAT_R8_SINT</code> specifies a one-component, 8-bit signed integer
format that has a single 8-bit R component.</p>
</li>
<li>
<p><code>VK_FORMAT_R8_SRGB</code> specifies a one-component, 8-bit unsigned
normalized format that has a single 8-bit R component stored with sRGB
nonlinear encoding.</p>
</li>
<li>
<p><code>VK_FORMAT_R8G8_UNORM</code> specifies a two-component, 16-bit unsigned
normalized format that has an 8-bit R component in byte 0, and an 8-bit
G component in byte 1.</p>
</li>
<li>
<p><code>VK_FORMAT_R8G8_SNORM</code> specifies a two-component, 16-bit signed
normalized format that has an 8-bit R component in byte 0, and an 8-bit
G component in byte 1.</p>
</li>
<li>
<p><code>VK_FORMAT_R8G8_USCALED</code> specifies a two-component, 16-bit unsigned
scaled integer format that has an 8-bit R component in byte 0, and an
8-bit G component in byte 1.</p>
</li>
<li>
<p><code>VK_FORMAT_R8G8_SSCALED</code> specifies a two-component, 16-bit signed
scaled integer format that has an 8-bit R component in byte 0, and an
8-bit G component in byte 1.</p>
</li>
<li>
<p><code>VK_FORMAT_R8G8_UINT</code> specifies a two-component, 16-bit unsigned
integer format that has an 8-bit R component in byte 0, and an 8-bit G
component in byte 1.</p>
</li>
<li>
<p><code>VK_FORMAT_R8G8_SINT</code> specifies a two-component, 16-bit signed
integer format that has an 8-bit R component in byte 0, and an 8-bit G
component in byte 1.</p>
</li>
<li>
<p><code>VK_FORMAT_R8G8_SRGB</code> specifies a two-component, 16-bit unsigned
normalized format that has an 8-bit R component stored with sRGB
nonlinear encoding in byte 0, and an 8-bit G component stored with sRGB
nonlinear encoding in byte 1.</p>
</li>
<li>
<p><code>VK_FORMAT_R8G8B8_UNORM</code> specifies a three-component, 24-bit
unsigned normalized format that has an 8-bit R component in byte 0, an
8-bit G component in byte 1, and an 8-bit B component in byte 2.</p>
</li>
<li>
<p><code>VK_FORMAT_R8G8B8_SNORM</code> specifies a three-component, 24-bit signed
normalized format that has an 8-bit R component in byte 0, an 8-bit G
component in byte 1, and an 8-bit B component in byte 2.</p>
</li>
<li>
<p><code>VK_FORMAT_R8G8B8_USCALED</code> specifies a three-component, 24-bit
unsigned scaled format that has an 8-bit R component in byte 0, an 8-bit
G component in byte 1, and an 8-bit B component in byte 2.</p>
</li>
<li>
<p><code>VK_FORMAT_R8G8B8_SSCALED</code> specifies a three-component, 24-bit
signed scaled format that has an 8-bit R component in byte 0, an 8-bit G
component in byte 1, and an 8-bit B component in byte 2.</p>
</li>
<li>
<p><code>VK_FORMAT_R8G8B8_UINT</code> specifies a three-component, 24-bit unsigned
integer format that has an 8-bit R component in byte 0, an 8-bit G
component in byte 1, and an 8-bit B component in byte 2.</p>
</li>
<li>
<p><code>VK_FORMAT_R8G8B8_SINT</code> specifies a three-component, 24-bit signed
integer format that has an 8-bit R component in byte 0, an 8-bit G
component in byte 1, and an 8-bit B component in byte 2.</p>
</li>
<li>
<p><code>VK_FORMAT_R8G8B8_SRGB</code> specifies a three-component, 24-bit unsigned
normalized format that has an 8-bit R component stored with sRGB
nonlinear encoding in byte 0, an 8-bit G component stored with sRGB
nonlinear encoding in byte 1, and an 8-bit B component stored with sRGB
nonlinear encoding in byte 2.</p>
</li>
<li>
<p><code>VK_FORMAT_B8G8R8_UNORM</code> specifies a three-component, 24-bit
unsigned normalized format that has an 8-bit B component in byte 0, an
8-bit G component in byte 1, and an 8-bit R component in byte 2.</p>
</li>
<li>
<p><code>VK_FORMAT_B8G8R8_SNORM</code> specifies a three-component, 24-bit signed
normalized format that has an 8-bit B component in byte 0, an 8-bit G
component in byte 1, and an 8-bit R component in byte 2.</p>
</li>
<li>
<p><code>VK_FORMAT_B8G8R8_USCALED</code> specifies a three-component, 24-bit
unsigned scaled format that has an 8-bit B component in byte 0, an 8-bit
G component in byte 1, and an 8-bit R component in byte 2.</p>
</li>
<li>
<p><code>VK_FORMAT_B8G8R8_SSCALED</code> specifies a three-component, 24-bit
signed scaled format that has an 8-bit B component in byte 0, an 8-bit G
component in byte 1, and an 8-bit R component in byte 2.</p>
</li>
<li>
<p><code>VK_FORMAT_B8G8R8_UINT</code> specifies a three-component, 24-bit unsigned
integer format that has an 8-bit B component in byte 0, an 8-bit G
component in byte 1, and an 8-bit R component in byte 2.</p>
</li>
<li>
<p><code>VK_FORMAT_B8G8R8_SINT</code> specifies a three-component, 24-bit signed
integer format that has an 8-bit B component in byte 0, an 8-bit G
component in byte 1, and an 8-bit R component in byte 2.</p>
</li>
<li>
<p><code>VK_FORMAT_B8G8R8_SRGB</code> specifies a three-component, 24-bit unsigned
normalized format that has an 8-bit B component stored with sRGB
nonlinear encoding in byte 0, an 8-bit G component stored with sRGB
nonlinear encoding in byte 1, and an 8-bit R component stored with sRGB
nonlinear encoding in byte 2.</p>
</li>
<li>
<p><code>VK_FORMAT_R8G8B8A8_UNORM</code> specifies a four-component, 32-bit
unsigned normalized format that has an 8-bit R component in byte 0, an
8-bit G component in byte 1, an 8-bit B component in byte 2, and an
8-bit A component in byte 3.</p>
</li>
<li>
<p><code>VK_FORMAT_R8G8B8A8_SNORM</code> specifies a four-component, 32-bit signed
normalized format that has an 8-bit R component in byte 0, an 8-bit G
component in byte 1, an 8-bit B component in byte 2, and an 8-bit A
component in byte 3.</p>
</li>
<li>
<p><code>VK_FORMAT_R8G8B8A8_USCALED</code> specifies a four-component, 32-bit
unsigned scaled format that has an 8-bit R component in byte 0, an 8-bit
G component in byte 1, an 8-bit B component in byte 2, and an 8-bit A
component in byte 3.</p>
</li>
<li>
<p><code>VK_FORMAT_R8G8B8A8_SSCALED</code> specifies a four-component, 32-bit
signed scaled format that has an 8-bit R component in byte 0, an 8-bit G
component in byte 1, an 8-bit B component in byte 2, and an 8-bit A
component in byte 3.</p>
</li>
<li>
<p><code>VK_FORMAT_R8G8B8A8_UINT</code> specifies a four-component, 32-bit
unsigned integer format that has an 8-bit R component in byte 0, an
8-bit G component in byte 1, an 8-bit B component in byte 2, and an
8-bit A component in byte 3.</p>
</li>
<li>
<p><code>VK_FORMAT_R8G8B8A8_SINT</code> specifies a four-component, 32-bit signed
integer format that has an 8-bit R component in byte 0, an 8-bit G
component in byte 1, an 8-bit B component in byte 2, and an 8-bit A
component in byte 3.</p>
</li>
<li>
<p><code>VK_FORMAT_R8G8B8A8_SRGB</code> specifies a four-component, 32-bit
unsigned normalized format that has an 8-bit R component stored with
sRGB nonlinear encoding in byte 0, an 8-bit G component stored with sRGB
nonlinear encoding in byte 1, an 8-bit B component stored with sRGB
nonlinear encoding in byte 2, and an 8-bit A component in byte 3.</p>
</li>
<li>
<p><code>VK_FORMAT_B8G8R8A8_UNORM</code> specifies a four-component, 32-bit
unsigned normalized format that has an 8-bit B component in byte 0, an
8-bit G component in byte 1, an 8-bit R component in byte 2, and an
8-bit A component in byte 3.</p>
</li>
<li>
<p><code>VK_FORMAT_B8G8R8A8_SNORM</code> specifies a four-component, 32-bit signed
normalized format that has an 8-bit B component in byte 0, an 8-bit G
component in byte 1, an 8-bit R component in byte 2, and an 8-bit A
component in byte 3.</p>
</li>
<li>
<p><code>VK_FORMAT_B8G8R8A8_USCALED</code> specifies a four-component, 32-bit
unsigned scaled format that has an 8-bit B component in byte 0, an 8-bit
G component in byte 1, an 8-bit R component in byte 2, and an 8-bit A
component in byte 3.</p>
</li>
<li>
<p><code>VK_FORMAT_B8G8R8A8_SSCALED</code> specifies a four-component, 32-bit
signed scaled format that has an 8-bit B component in byte 0, an 8-bit G
component in byte 1, an 8-bit R component in byte 2, and an 8-bit A
component in byte 3.</p>
</li>
<li>
<p><code>VK_FORMAT_B8G8R8A8_UINT</code> specifies a four-component, 32-bit
unsigned integer format that has an 8-bit B component in byte 0, an
8-bit G component in byte 1, an 8-bit R component in byte 2, and an
8-bit A component in byte 3.</p>
</li>
<li>
<p><code>VK_FORMAT_B8G8R8A8_SINT</code> specifies a four-component, 32-bit signed
integer format that has an 8-bit B component in byte 0, an 8-bit G
component in byte 1, an 8-bit R component in byte 2, and an 8-bit A
component in byte 3.</p>
</li>
<li>
<p><code>VK_FORMAT_B8G8R8A8_SRGB</code> specifies a four-component, 32-bit
unsigned normalized format that has an 8-bit B component stored with
sRGB nonlinear encoding in byte 0, an 8-bit G component stored with sRGB
nonlinear encoding in byte 1, an 8-bit R component stored with sRGB
nonlinear encoding in byte 2, and an 8-bit A component in byte 3.</p>
</li>
<li>
<p><code>VK_FORMAT_A8B8G8R8_UNORM_PACK32</code> specifies a four-component, 32-bit
packed unsigned normalized format that has an 8-bit A component in bits
24..31, an 8-bit B component in bits 16..23, an 8-bit G component in
bits 8..15, and an 8-bit R component in bits 0..7.</p>
</li>
<li>
<p><code>VK_FORMAT_A8B8G8R8_SNORM_PACK32</code> specifies a four-component, 32-bit
packed signed normalized format that has an 8-bit A component in bits
24..31, an 8-bit B component in bits 16..23, an 8-bit G component in
bits 8..15, and an 8-bit R component in bits 0..7.</p>
</li>
<li>
<p><code>VK_FORMAT_A8B8G8R8_USCALED_PACK32</code> specifies a four-component,
32-bit packed unsigned scaled integer format that has an 8-bit A
component in bits 24..31, an 8-bit B component in bits 16..23, an 8-bit
G component in bits 8..15, and an 8-bit R component in bits 0..7.</p>
</li>
<li>
<p><code>VK_FORMAT_A8B8G8R8_SSCALED_PACK32</code> specifies a four-component,
32-bit packed signed scaled integer format that has an 8-bit A component
in bits 24..31, an 8-bit B component in bits 16..23, an 8-bit G
component in bits 8..15, and an 8-bit R component in bits 0..7.</p>
</li>
<li>
<p><code>VK_FORMAT_A8B8G8R8_UINT_PACK32</code> specifies a four-component, 32-bit
packed unsigned integer format that has an 8-bit A component in bits
24..31, an 8-bit B component in bits 16..23, an 8-bit G component in
bits 8..15, and an 8-bit R component in bits 0..7.</p>
</li>
<li>
<p><code>VK_FORMAT_A8B8G8R8_SINT_PACK32</code> specifies a four-component, 32-bit
packed signed integer format that has an 8-bit A component in bits
24..31, an 8-bit B component in bits 16..23, an 8-bit G component in
bits 8..15, and an 8-bit R component in bits 0..7.</p>
</li>
<li>
<p><code>VK_FORMAT_A8B8G8R8_SRGB_PACK32</code> specifies a four-component, 32-bit
packed unsigned normalized format that has an 8-bit A component in bits
24..31, an 8-bit B component stored with sRGB nonlinear encoding in bits
16..23, an 8-bit G component stored with sRGB nonlinear encoding in bits
8..15, and an 8-bit R component stored with sRGB nonlinear encoding in
bits 0..7.</p>
</li>
<li>
<p><code>VK_FORMAT_A2R10G10B10_UNORM_PACK32</code> specifies a four-component,
32-bit packed unsigned normalized format that has a 2-bit A component in
bits 30..31, a 10-bit R component in bits 20..29, a 10-bit G component
in bits 10..19, and a 10-bit B component in bits 0..9.</p>
</li>
<li>
<p><code>VK_FORMAT_A2R10G10B10_SNORM_PACK32</code> specifies a four-component,
32-bit packed signed normalized format that has a 2-bit A component in
bits 30..31, a 10-bit R component in bits 20..29, a 10-bit G component
in bits 10..19, and a 10-bit B component in bits 0..9.</p>
</li>
<li>
<p><code>VK_FORMAT_A2R10G10B10_USCALED_PACK32</code> specifies a four-component,
32-bit packed unsigned scaled integer format that has a 2-bit A
component in bits 30..31, a 10-bit R component in bits 20..29, a 10-bit
G component in bits 10..19, and a 10-bit B component in bits 0..9.</p>
</li>
<li>
<p><code>VK_FORMAT_A2R10G10B10_SSCALED_PACK32</code> specifies a four-component,
32-bit packed signed scaled integer format that has a 2-bit A component
in bits 30..31, a 10-bit R component in bits 20..29, a 10-bit G
component in bits 10..19, and a 10-bit B component in bits 0..9.</p>
</li>
<li>
<p><code>VK_FORMAT_A2R10G10B10_UINT_PACK32</code> specifies a four-component,
32-bit packed unsigned integer format that has a 2-bit A component in
bits 30..31, a 10-bit R component in bits 20..29, a 10-bit G component
in bits 10..19, and a 10-bit B component in bits 0..9.</p>
</li>
<li>
<p><code>VK_FORMAT_A2R10G10B10_SINT_PACK32</code> specifies a four-component,
32-bit packed signed integer format that has a 2-bit A component in bits
30..31, a 10-bit R component in bits 20..29, a 10-bit G component in
bits 10..19, and a 10-bit B component in bits 0..9.</p>
</li>
<li>
<p><code>VK_FORMAT_A2B10G10R10_UNORM_PACK32</code> specifies a four-component,
32-bit packed unsigned normalized format that has a 2-bit A component in
bits 30..31, a 10-bit B component in bits 20..29, a 10-bit G component
in bits 10..19, and a 10-bit R component in bits 0..9.</p>
</li>
<li>
<p><code>VK_FORMAT_A2B10G10R10_SNORM_PACK32</code> specifies a four-component,
32-bit packed signed normalized format that has a 2-bit A component in
bits 30..31, a 10-bit B component in bits 20..29, a 10-bit G component
in bits 10..19, and a 10-bit R component in bits 0..9.</p>
</li>
<li>
<p><code>VK_FORMAT_A2B10G10R10_USCALED_PACK32</code> specifies a four-component,
32-bit packed unsigned scaled integer format that has a 2-bit A
component in bits 30..31, a 10-bit B component in bits 20..29, a 10-bit
G component in bits 10..19, and a 10-bit R component in bits 0..9.</p>
</li>
<li>
<p><code>VK_FORMAT_A2B10G10R10_SSCALED_PACK32</code> specifies a four-component,
32-bit packed signed scaled integer format that has a 2-bit A component
in bits 30..31, a 10-bit B component in bits 20..29, a 10-bit G
component in bits 10..19, and a 10-bit R component in bits 0..9.</p>
</li>
<li>
<p><code>VK_FORMAT_A2B10G10R10_UINT_PACK32</code> specifies a four-component,
32-bit packed unsigned integer format that has a 2-bit A component in
bits 30..31, a 10-bit B component in bits 20..29, a 10-bit G component
in bits 10..19, and a 10-bit R component in bits 0..9.</p>
</li>
<li>
<p><code>VK_FORMAT_A2B10G10R10_SINT_PACK32</code> specifies a four-component,
32-bit packed signed integer format that has a 2-bit A component in bits
30..31, a 10-bit B component in bits 20..29, a 10-bit G component in
bits 10..19, and a 10-bit R component in bits 0..9.</p>
</li>
<li>
<p><code>VK_FORMAT_R16_UNORM</code> specifies a one-component, 16-bit unsigned
normalized format that has a single 16-bit R component.</p>
</li>
<li>
<p><code>VK_FORMAT_R16_SNORM</code> specifies a one-component, 16-bit signed
normalized format that has a single 16-bit R component.</p>
</li>
<li>
<p><code>VK_FORMAT_R16_USCALED</code> specifies a one-component, 16-bit unsigned
scaled integer format that has a single 16-bit R component.</p>
</li>
<li>
<p><code>VK_FORMAT_R16_SSCALED</code> specifies a one-component, 16-bit signed
scaled integer format that has a single 16-bit R component.</p>
</li>
<li>
<p><code>VK_FORMAT_R16_UINT</code> specifies a one-component, 16-bit unsigned
integer format that has a single 16-bit R component.</p>
</li>
<li>
<p><code>VK_FORMAT_R16_SINT</code> specifies a one-component, 16-bit signed
integer format that has a single 16-bit R component.</p>
</li>
<li>
<p><code>VK_FORMAT_R16_SFLOAT</code> specifies a one-component, 16-bit signed
floating-point format that has a single 16-bit R component.</p>
</li>
<li>
<p><code>VK_FORMAT_R16G16_UNORM</code> specifies a two-component, 32-bit unsigned
normalized format that has a 16-bit R component in bytes 0..1, and a
16-bit G component in bytes 2..3.</p>
</li>
<li>
<p><code>VK_FORMAT_R16G16_SNORM</code> specifies a two-component, 32-bit signed
normalized format that has a 16-bit R component in bytes 0..1, and a
16-bit G component in bytes 2..3.</p>
</li>
<li>
<p><code>VK_FORMAT_R16G16_USCALED</code> specifies a two-component, 32-bit
unsigned scaled integer format that has a 16-bit R component in bytes
0..1, and a 16-bit G component in bytes 2..3.</p>
</li>
<li>
<p><code>VK_FORMAT_R16G16_SSCALED</code> specifies a two-component, 32-bit signed
scaled integer format that has a 16-bit R component in bytes 0..1, and a
16-bit G component in bytes 2..3.</p>
</li>
<li>
<p><code>VK_FORMAT_R16G16_UINT</code> specifies a two-component, 32-bit unsigned
integer format that has a 16-bit R component in bytes 0..1, and a 16-bit
G component in bytes 2..3.</p>
</li>
<li>
<p><code>VK_FORMAT_R16G16_SINT</code> specifies a two-component, 32-bit signed
integer format that has a 16-bit R component in bytes 0..1, and a 16-bit
G component in bytes 2..3.</p>
</li>
<li>
<p><code>VK_FORMAT_R16G16_SFLOAT</code> specifies a two-component, 32-bit signed
floating-point format that has a 16-bit R component in bytes 0..1, and a
16-bit G component in bytes 2..3.</p>
</li>
<li>
<p><code>VK_FORMAT_R16G16B16_UNORM</code> specifies a three-component, 48-bit
unsigned normalized format that has a 16-bit R component in bytes 0..1,
a 16-bit G component in bytes 2..3, and a 16-bit B component in bytes
4..5.</p>
</li>
<li>
<p><code>VK_FORMAT_R16G16B16_SNORM</code> specifies a three-component, 48-bit
signed normalized format that has a 16-bit R component in bytes 0..1, a
16-bit G component in bytes 2..3, and a 16-bit B component in bytes
4..5.</p>
</li>
<li>
<p><code>VK_FORMAT_R16G16B16_USCALED</code> specifies a three-component, 48-bit
unsigned scaled integer format that has a 16-bit R component in bytes
0..1, a 16-bit G component in bytes 2..3, and a 16-bit B component in
bytes 4..5.</p>
</li>
<li>
<p><code>VK_FORMAT_R16G16B16_SSCALED</code> specifies a three-component, 48-bit
signed scaled integer format that has a 16-bit R component in bytes
0..1, a 16-bit G component in bytes 2..3, and a 16-bit B component in
bytes 4..5.</p>
</li>
<li>
<p><code>VK_FORMAT_R16G16B16_UINT</code> specifies a three-component, 48-bit
unsigned integer format that has a 16-bit R component in bytes 0..1, a
16-bit G component in bytes 2..3, and a 16-bit B component in bytes
4..5.</p>
</li>
<li>
<p><code>VK_FORMAT_R16G16B16_SINT</code> specifies a three-component, 48-bit
signed integer format that has a 16-bit R component in bytes 0..1, a
16-bit G component in bytes 2..3, and a 16-bit B component in bytes
4..5.</p>
</li>
<li>
<p><code>VK_FORMAT_R16G16B16_SFLOAT</code> specifies a three-component, 48-bit
signed floating-point format that has a 16-bit R component in bytes
0..1, a 16-bit G component in bytes 2..3, and a 16-bit B component in
bytes 4..5.</p>
</li>
<li>
<p><code>VK_FORMAT_R16G16B16A16_UNORM</code> specifies a four-component, 64-bit
unsigned normalized format that has a 16-bit R component in bytes 0..1,
a 16-bit G component in bytes 2..3, a 16-bit B component in bytes 4..5,
and a 16-bit A component in bytes 6..7.</p>
</li>
<li>
<p><code>VK_FORMAT_R16G16B16A16_SNORM</code> specifies a four-component, 64-bit
signed normalized format that has a 16-bit R component in bytes 0..1, a
16-bit G component in bytes 2..3, a 16-bit B component in bytes 4..5,
and a 16-bit A component in bytes 6..7.</p>
</li>
<li>
<p><code>VK_FORMAT_R16G16B16A16_USCALED</code> specifies a four-component, 64-bit
unsigned scaled integer format that has a 16-bit R component in bytes
0..1, a 16-bit G component in bytes 2..3, a 16-bit B component in bytes
4..5, and a 16-bit A component in bytes 6..7.</p>
</li>
<li>
<p><code>VK_FORMAT_R16G16B16A16_SSCALED</code> specifies a four-component, 64-bit
signed scaled integer format that has a 16-bit R component in bytes
0..1, a 16-bit G component in bytes 2..3, a 16-bit B component in bytes
4..5, and a 16-bit A component in bytes 6..7.</p>
</li>
<li>
<p><code>VK_FORMAT_R16G16B16A16_UINT</code> specifies a four-component, 64-bit
unsigned integer format that has a 16-bit R component in bytes 0..1, a
16-bit G component in bytes 2..3, a 16-bit B component in bytes 4..5,
and a 16-bit A component in bytes 6..7.</p>
</li>
<li>
<p><code>VK_FORMAT_R16G16B16A16_SINT</code> specifies a four-component, 64-bit
signed integer format that has a 16-bit R component in bytes 0..1, a
16-bit G component in bytes 2..3, a 16-bit B component in bytes 4..5,
and a 16-bit A component in bytes 6..7.</p>
</li>
<li>
<p><code>VK_FORMAT_R16G16B16A16_SFLOAT</code> specifies a four-component, 64-bit
signed floating-point format that has a 16-bit R component in bytes
0..1, a 16-bit G component in bytes 2..3, a 16-bit B component in bytes
4..5, and a 16-bit A component in bytes 6..7.</p>
</li>
<li>
<p><code>VK_FORMAT_R32_UINT</code> specifies a one-component, 32-bit unsigned
integer format that has a single 32-bit R component.</p>
</li>
<li>
<p><code>VK_FORMAT_R32_SINT</code> specifies a one-component, 32-bit signed
integer format that has a single 32-bit R component.</p>
</li>
<li>
<p><code>VK_FORMAT_R32_SFLOAT</code> specifies a one-component, 32-bit signed
floating-point format that has a single 32-bit R component.</p>
</li>
<li>
<p><code>VK_FORMAT_R32G32_UINT</code> specifies a two-component, 64-bit unsigned
integer format that has a 32-bit R component in bytes 0..3, and a 32-bit
G component in bytes 4..7.</p>
</li>
<li>
<p><code>VK_FORMAT_R32G32_SINT</code> specifies a two-component, 64-bit signed
integer format that has a 32-bit R component in bytes 0..3, and a 32-bit
G component in bytes 4..7.</p>
</li>
<li>
<p><code>VK_FORMAT_R32G32_SFLOAT</code> specifies a two-component, 64-bit signed
floating-point format that has a 32-bit R component in bytes 0..3, and a
32-bit G component in bytes 4..7.</p>
</li>
<li>
<p><code>VK_FORMAT_R32G32B32_UINT</code> specifies a three-component, 96-bit
unsigned integer format that has a 32-bit R component in bytes 0..3, a
32-bit G component in bytes 4..7, and a 32-bit B component in bytes
8..11.</p>
</li>
<li>
<p><code>VK_FORMAT_R32G32B32_SINT</code> specifies a three-component, 96-bit
signed integer format that has a 32-bit R component in bytes 0..3, a
32-bit G component in bytes 4..7, and a 32-bit B component in bytes
8..11.</p>
</li>
<li>
<p><code>VK_FORMAT_R32G32B32_SFLOAT</code> specifies a three-component, 96-bit
signed floating-point format that has a 32-bit R component in bytes
0..3, a 32-bit G component in bytes 4..7, and a 32-bit B component in
bytes 8..11.</p>
</li>
<li>
<p><code>VK_FORMAT_R32G32B32A32_UINT</code> specifies a four-component, 128-bit
unsigned integer format that has a 32-bit R component in bytes 0..3, a
32-bit G component in bytes 4..7, a 32-bit B component in bytes 8..11,
and a 32-bit A component in bytes 12..15.</p>
</li>
<li>
<p><code>VK_FORMAT_R32G32B32A32_SINT</code> specifies a four-component, 128-bit
signed integer format that has a 32-bit R component in bytes 0..3, a
32-bit G component in bytes 4..7, a 32-bit B component in bytes 8..11,
and a 32-bit A component in bytes 12..15.</p>
</li>
<li>
<p><code>VK_FORMAT_R32G32B32A32_SFLOAT</code> specifies a four-component, 128-bit
signed floating-point format that has a 32-bit R component in bytes
0..3, a 32-bit G component in bytes 4..7, a 32-bit B component in bytes
8..11, and a 32-bit A component in bytes 12..15.</p>
</li>
<li>
<p><code>VK_FORMAT_R64_UINT</code> specifies a one-component, 64-bit unsigned
integer format that has a single 64-bit R component.</p>
</li>
<li>
<p><code>VK_FORMAT_R64_SINT</code> specifies a one-component, 64-bit signed
integer format that has a single 64-bit R component.</p>
</li>
<li>
<p><code>VK_FORMAT_R64_SFLOAT</code> specifies a one-component, 64-bit signed
floating-point format that has a single 64-bit R component.</p>
</li>
<li>
<p><code>VK_FORMAT_R64G64_UINT</code> specifies a two-component, 128-bit unsigned
integer format that has a 64-bit R component in bytes 0..7, and a 64-bit
G component in bytes 8..15.</p>
</li>
<li>
<p><code>VK_FORMAT_R64G64_SINT</code> specifies a two-component, 128-bit signed
integer format that has a 64-bit R component in bytes 0..7, and a 64-bit
G component in bytes 8..15.</p>
</li>
<li>
<p><code>VK_FORMAT_R64G64_SFLOAT</code> specifies a two-component, 128-bit signed
floating-point format that has a 64-bit R component in bytes 0..7, and a
64-bit G component in bytes 8..15.</p>
</li>
<li>
<p><code>VK_FORMAT_R64G64B64_UINT</code> specifies a three-component, 192-bit
unsigned integer format that has a 64-bit R component in bytes 0..7, a
64-bit G component in bytes 8..15, and a 64-bit B component in bytes
16..23.</p>
</li>
<li>
<p><code>VK_FORMAT_R64G64B64_SINT</code> specifies a three-component, 192-bit
signed integer format that has a 64-bit R component in bytes 0..7, a
64-bit G component in bytes 8..15, and a 64-bit B component in bytes
16..23.</p>
</li>
<li>
<p><code>VK_FORMAT_R64G64B64_SFLOAT</code> specifies a three-component, 192-bit
signed floating-point format that has a 64-bit R component in bytes
0..7, a 64-bit G component in bytes 8..15, and a 64-bit B component in
bytes 16..23.</p>
</li>
<li>
<p><code>VK_FORMAT_R64G64B64A64_UINT</code> specifies a four-component, 256-bit
unsigned integer format that has a 64-bit R component in bytes 0..7, a
64-bit G component in bytes 8..15, a 64-bit B component in bytes 16..23,
and a 64-bit A component in bytes 24..31.</p>
</li>
<li>
<p><code>VK_FORMAT_R64G64B64A64_SINT</code> specifies a four-component, 256-bit
signed integer format that has a 64-bit R component in bytes 0..7, a
64-bit G component in bytes 8..15, a 64-bit B component in bytes 16..23,
and a 64-bit A component in bytes 24..31.</p>
</li>
<li>
<p><code>VK_FORMAT_R64G64B64A64_SFLOAT</code> specifies a four-component, 256-bit
signed floating-point format that has a 64-bit R component in bytes
0..7, a 64-bit G component in bytes 8..15, a 64-bit B component in bytes
16..23, and a 64-bit A component in bytes 24..31.</p>
</li>
<li>
<p><code>VK_FORMAT_B10G11R11_UFLOAT_PACK32</code> specifies a three-component,
32-bit packed unsigned floating-point format that has a 10-bit B
component in bits 22..31, an 11-bit G component in bits 11..21, an
11-bit R component in bits 0..10.
See <a href="vkspec.html#fundamentals-fp10" class="bare">html/vkspec.html#fundamentals-fp10</a> and <a href="vkspec.html#fundamentals-fp11" class="bare">html/vkspec.html#fundamentals-fp11</a>.</p>
</li>
<li>
<p><code>VK_FORMAT_E5B9G9R9_UFLOAT_PACK32</code> specifies a three-component,
32-bit packed unsigned floating-point format that has a 5-bit shared
exponent in bits 27..31, a 9-bit B component mantissa in bits 18..26, a
9-bit G component mantissa in bits 9..17, and a 9-bit R component
mantissa in bits 0..8.</p>
</li>
<li>
<p><code>VK_FORMAT_D16_UNORM</code> specifies a one-component, 16-bit unsigned
normalized format that has a single 16-bit depth component.</p>
</li>
<li>
<p><code>VK_FORMAT_X8_D24_UNORM_PACK32</code> specifies a two-component, 32-bit
format that has 24 unsigned normalized bits in the depth component and,
optionally:, 8 bits that are unused.</p>
</li>
<li>
<p><code>VK_FORMAT_D32_SFLOAT</code> specifies a one-component, 32-bit signed
floating-point format that has 32-bits in the depth component.</p>
</li>
<li>
<p><code>VK_FORMAT_S8_UINT</code> specifies a one-component, 8-bit unsigned
integer format that has 8-bits in the stencil component.</p>
</li>
<li>
<p><code>VK_FORMAT_D16_UNORM_S8_UINT</code> specifies a two-component, 24-bit
format that has 16 unsigned normalized bits in the depth component and 8
unsigned integer bits in the stencil component.</p>
</li>
<li>
<p><code>VK_FORMAT_D24_UNORM_S8_UINT</code> specifies a two-component, 32-bit
packed format that has 8 unsigned integer bits in the stencil component,
and 24 unsigned normalized bits in the depth component.</p>
</li>
<li>
<p><code>VK_FORMAT_D32_SFLOAT_S8_UINT</code> specifies a two-component format that
has 32 signed float bits in the depth component and 8 unsigned integer
bits in the stencil component.
There are optionally: 24-bits that are unused.</p>
</li>
<li>
<p><code>VK_FORMAT_BC1_RGB_UNORM_BLOCK</code> specifies a three-component,
block-compressed format where each 64-bit compressed texel block encodes
a 4×4 rectangle of unsigned normalized RGB texel data.
This format has no alpha and is considered opaque.</p>
</li>
<li>
<p><code>VK_FORMAT_BC1_RGB_SRGB_BLOCK</code> specifies a three-component,
block-compressed format where each 64-bit compressed texel block encodes
a 4×4 rectangle of unsigned normalized RGB texel data with sRGB
nonlinear encoding.
This format has no alpha and is considered opaque.</p>
</li>
<li>
<p><code>VK_FORMAT_BC1_RGBA_UNORM_BLOCK</code> specifies a four-component,
block-compressed format where each 64-bit compressed texel block encodes
a 4×4 rectangle of unsigned normalized RGB texel data, and
provides 1 bit of alpha.</p>
</li>
<li>
<p><code>VK_FORMAT_BC1_RGBA_SRGB_BLOCK</code> specifies a four-component,
block-compressed format where each 64-bit compressed texel block encodes
a 4×4 rectangle of unsigned normalized RGB texel data with sRGB
nonlinear encoding, and provides 1 bit of alpha.</p>
</li>
<li>
<p><code>VK_FORMAT_BC2_UNORM_BLOCK</code> specifies a four-component,
block-compressed format where each 128-bit compressed texel block
encodes a 4×4 rectangle of unsigned normalized RGBA texel data
with the first 64 bits encoding alpha values followed by 64 bits
encoding RGB values.</p>
</li>
<li>
<p><code>VK_FORMAT_BC2_SRGB_BLOCK</code> specifies a four-component,
block-compressed format where each 128-bit compressed texel block
encodes a 4×4 rectangle of unsigned normalized RGBA texel data
with the first 64 bits encoding alpha values followed by 64 bits
encoding RGB values with sRGB nonlinear encoding.</p>
</li>
<li>
<p><code>VK_FORMAT_BC3_UNORM_BLOCK</code> specifies a four-component,
block-compressed format where each 128-bit compressed texel block
encodes a 4×4 rectangle of unsigned normalized RGBA texel data
with the first 64 bits encoding alpha values followed by 64 bits
encoding RGB values.</p>
</li>
<li>
<p><code>VK_FORMAT_BC3_SRGB_BLOCK</code> specifies a four-component,
block-compressed format where each 128-bit compressed texel block
encodes a 4×4 rectangle of unsigned normalized RGBA texel data
with the first 64 bits encoding alpha values followed by 64 bits
encoding RGB values with sRGB nonlinear encoding.</p>
</li>
<li>
<p><code>VK_FORMAT_BC4_UNORM_BLOCK</code> specifies a one-component,
block-compressed format where each 64-bit compressed texel block encodes
a 4×4 rectangle of unsigned normalized red texel data.</p>
</li>
<li>
<p><code>VK_FORMAT_BC4_SNORM_BLOCK</code> specifies a one-component,
block-compressed format where each 64-bit compressed texel block encodes
a 4×4 rectangle of signed normalized red texel data.</p>
</li>
<li>
<p><code>VK_FORMAT_BC5_UNORM_BLOCK</code> specifies a two-component,
block-compressed format where each 128-bit compressed texel block
encodes a 4×4 rectangle of unsigned normalized RG texel data with
the first 64 bits encoding red values followed by 64 bits encoding green
values.</p>
</li>
<li>
<p><code>VK_FORMAT_BC5_SNORM_BLOCK</code> specifies a two-component,
block-compressed format where each 128-bit compressed texel block
encodes a 4×4 rectangle of signed normalized RG texel data with
the first 64 bits encoding red values followed by 64 bits encoding green
values.</p>
</li>
<li>
<p><code>VK_FORMAT_BC6H_UFLOAT_BLOCK</code> specifies a three-component,
block-compressed format where each 128-bit compressed texel block
encodes a 4×4 rectangle of unsigned floating-point RGB texel data.</p>
</li>
<li>
<p><code>VK_FORMAT_BC6H_SFLOAT_BLOCK</code> specifies a three-component,
block-compressed format where each 128-bit compressed texel block
encodes a 4×4 rectangle of signed floating-point RGB texel data.</p>
</li>
<li>
<p><code>VK_FORMAT_BC7_UNORM_BLOCK</code> specifies a four-component,
block-compressed format where each 128-bit compressed texel block
encodes a 4×4 rectangle of unsigned normalized RGBA texel data.</p>
</li>
<li>
<p><code>VK_FORMAT_BC7_SRGB_BLOCK</code> specifies a four-component,
block-compressed format where each 128-bit compressed texel block
encodes a 4×4 rectangle of unsigned normalized RGBA texel data
with sRGB nonlinear encoding applied to the RGB components.</p>
</li>
<li>
<p><code>VK_FORMAT_ETC2_R8G8B8_UNORM_BLOCK</code> specifies a three-component,
ETC2 compressed format where each 64-bit compressed texel block encodes
a 4×4 rectangle of unsigned normalized RGB texel data.
This format has no alpha and is considered opaque.</p>
</li>
<li>
<p><code>VK_FORMAT_ETC2_R8G8B8_SRGB_BLOCK</code> specifies a three-component, ETC2
compressed format where each 64-bit compressed texel block encodes a
4×4 rectangle of unsigned normalized RGB texel data with sRGB
nonlinear encoding.
This format has no alpha and is considered opaque.</p>
</li>
<li>
<p><code>VK_FORMAT_ETC2_R8G8B8A1_UNORM_BLOCK</code> specifies a four-component,
ETC2 compressed format where each 64-bit compressed texel block encodes
a 4×4 rectangle of unsigned normalized RGB texel data, and
provides 1 bit of alpha.</p>
</li>
<li>
<p><code>VK_FORMAT_ETC2_R8G8B8A1_SRGB_BLOCK</code> specifies a four-component,
ETC2 compressed format where each 64-bit compressed texel block encodes
a 4×4 rectangle of unsigned normalized RGB texel data with sRGB
nonlinear encoding, and provides 1 bit of alpha.</p>
</li>
<li>
<p><code>VK_FORMAT_ETC2_R8G8B8A8_UNORM_BLOCK</code> specifies a four-component,
ETC2 compressed format where each 128-bit compressed texel block encodes
a 4×4 rectangle of unsigned normalized RGBA texel data with the
first 64 bits encoding alpha values followed by 64 bits encoding RGB
values.</p>
</li>
<li>
<p><code>VK_FORMAT_ETC2_R8G8B8A8_SRGB_BLOCK</code> specifies a four-component,
ETC2 compressed format where each 128-bit compressed texel block encodes
a 4×4 rectangle of unsigned normalized RGBA texel data with the
first 64 bits encoding alpha values followed by 64 bits encoding RGB
values with sRGB nonlinear encoding applied.</p>
</li>
<li>
<p><code>VK_FORMAT_EAC_R11_UNORM_BLOCK</code> specifies a one-component, ETC2
compressed format where each 64-bit compressed texel block encodes a
4×4 rectangle of unsigned normalized red texel data.</p>
</li>
<li>
<p><code>VK_FORMAT_EAC_R11_SNORM_BLOCK</code> specifies a one-component, ETC2
compressed format where each 64-bit compressed texel block encodes a
4×4 rectangle of signed normalized red texel data.</p>
</li>
<li>
<p><code>VK_FORMAT_EAC_R11G11_UNORM_BLOCK</code> specifies a two-component, ETC2
compressed format where each 128-bit compressed texel block encodes a
4×4 rectangle of unsigned normalized RG texel data with the first
64 bits encoding red values followed by 64 bits encoding green values.</p>
</li>
<li>
<p><code>VK_FORMAT_EAC_R11G11_SNORM_BLOCK</code> specifies a two-component, ETC2
compressed format where each 128-bit compressed texel block encodes a
4×4 rectangle of signed normalized RG texel data with the first 64
bits encoding red values followed by 64 bits encoding green values.</p>
</li>
<li>
<p><code>VK_FORMAT_ASTC_4x4_UNORM_BLOCK</code> specifies a four-component, ASTC
compressed format where each 128-bit compressed texel block encodes a
4×4 rectangle of unsigned normalized RGBA texel data.</p>
</li>
<li>
<p><code>VK_FORMAT_ASTC_4x4_SRGB_BLOCK</code> specifies a four-component, ASTC
compressed format where each 128-bit compressed texel block encodes a
4×4 rectangle of unsigned normalized RGBA texel data with sRGB
nonlinear encoding applied to the RGB components.</p>
</li>
<li>
<p><code>VK_FORMAT_ASTC_5x4_UNORM_BLOCK</code> specifies a four-component, ASTC
compressed format where each 128-bit compressed texel block encodes a
5×4 rectangle of unsigned normalized RGBA texel data.</p>
</li>
<li>
<p><code>VK_FORMAT_ASTC_5x4_SRGB_BLOCK</code> specifies a four-component, ASTC
compressed format where each 128-bit compressed texel block encodes a
5×4 rectangle of unsigned normalized RGBA texel data with sRGB
nonlinear encoding applied to the RGB components.</p>
</li>
<li>
<p><code>VK_FORMAT_ASTC_5x5_UNORM_BLOCK</code> specifies a four-component, ASTC
compressed format where each 128-bit compressed texel block encodes a
5×5 rectangle of unsigned normalized RGBA texel data.</p>
</li>
<li>
<p><code>VK_FORMAT_ASTC_5x5_SRGB_BLOCK</code> specifies a four-component, ASTC
compressed format where each 128-bit compressed texel block encodes a
5×5 rectangle of unsigned normalized RGBA texel data with sRGB
nonlinear encoding applied to the RGB components.</p>
</li>
<li>
<p><code>VK_FORMAT_ASTC_6x5_UNORM_BLOCK</code> specifies a four-component, ASTC
compressed format where each 128-bit compressed texel block encodes a
6×5 rectangle of unsigned normalized RGBA texel data.</p>
</li>
<li>
<p><code>VK_FORMAT_ASTC_6x5_SRGB_BLOCK</code> specifies a four-component, ASTC
compressed format where each 128-bit compressed texel block encodes a
6×5 rectangle of unsigned normalized RGBA texel data with sRGB
nonlinear encoding applied to the RGB components.</p>
</li>
<li>
<p><code>VK_FORMAT_ASTC_6x6_UNORM_BLOCK</code> specifies a four-component, ASTC
compressed format where each 128-bit compressed texel block encodes a
6×6 rectangle of unsigned normalized RGBA texel data.</p>
</li>
<li>
<p><code>VK_FORMAT_ASTC_6x6_SRGB_BLOCK</code> specifies a four-component, ASTC
compressed format where each 128-bit compressed texel block encodes a
6×6 rectangle of unsigned normalized RGBA texel data with sRGB
nonlinear encoding applied to the RGB components.</p>
</li>
<li>
<p><code>VK_FORMAT_ASTC_8x5_UNORM_BLOCK</code> specifies a four-component, ASTC
compressed format where each 128-bit compressed texel block encodes an
8×5 rectangle of unsigned normalized RGBA texel data.</p>
</li>
<li>
<p><code>VK_FORMAT_ASTC_8x5_SRGB_BLOCK</code> specifies a four-component, ASTC
compressed format where each 128-bit compressed texel block encodes an
8×5 rectangle of unsigned normalized RGBA texel data with sRGB
nonlinear encoding applied to the RGB components.</p>
</li>
<li>
<p><code>VK_FORMAT_ASTC_8x6_UNORM_BLOCK</code> specifies a four-component, ASTC
compressed format where each 128-bit compressed texel block encodes an
8×6 rectangle of unsigned normalized RGBA texel data.</p>
</li>
<li>
<p><code>VK_FORMAT_ASTC_8x6_SRGB_BLOCK</code> specifies a four-component, ASTC
compressed format where each 128-bit compressed texel block encodes an
8×6 rectangle of unsigned normalized RGBA texel data with sRGB
nonlinear encoding applied to the RGB components.</p>
</li>
<li>
<p><code>VK_FORMAT_ASTC_8x8_UNORM_BLOCK</code> specifies a four-component, ASTC
compressed format where each 128-bit compressed texel block encodes an
8×8 rectangle of unsigned normalized RGBA texel data.</p>
</li>
<li>
<p><code>VK_FORMAT_ASTC_8x8_SRGB_BLOCK</code> specifies a four-component, ASTC
compressed format where each 128-bit compressed texel block encodes an
8×8 rectangle of unsigned normalized RGBA texel data with sRGB
nonlinear encoding applied to the RGB components.</p>
</li>
<li>
<p><code>VK_FORMAT_ASTC_10x5_UNORM_BLOCK</code> specifies a four-component, ASTC
compressed format where each 128-bit compressed texel block encodes a
10×5 rectangle of unsigned normalized RGBA texel data.</p>
</li>
<li>
<p><code>VK_FORMAT_ASTC_10x5_SRGB_BLOCK</code> specifies a four-component, ASTC
compressed format where each 128-bit compressed texel block encodes a
10×5 rectangle of unsigned normalized RGBA texel data with sRGB
nonlinear encoding applied to the RGB components.</p>
</li>
<li>
<p><code>VK_FORMAT_ASTC_10x6_UNORM_BLOCK</code> specifies a four-component, ASTC
compressed format where each 128-bit compressed texel block encodes a
10×6 rectangle of unsigned normalized RGBA texel data.</p>
</li>
<li>
<p><code>VK_FORMAT_ASTC_10x6_SRGB_BLOCK</code> specifies a four-component, ASTC
compressed format where each 128-bit compressed texel block encodes a
10×6 rectangle of unsigned normalized RGBA texel data with sRGB
nonlinear encoding applied to the RGB components.</p>
</li>
<li>
<p><code>VK_FORMAT_ASTC_10x8_UNORM_BLOCK</code> specifies a four-component, ASTC
compressed format where each 128-bit compressed texel block encodes a
10×8 rectangle of unsigned normalized RGBA texel data.</p>
</li>
<li>
<p><code>VK_FORMAT_ASTC_10x8_SRGB_BLOCK</code> specifies a four-component, ASTC
compressed format where each 128-bit compressed texel block encodes a
10×8 rectangle of unsigned normalized RGBA texel data with sRGB
nonlinear encoding applied to the RGB components.</p>
</li>
<li>
<p><code>VK_FORMAT_ASTC_10x10_UNORM_BLOCK</code> specifies a four-component, ASTC
compressed format where each 128-bit compressed texel block encodes a
10×10 rectangle of unsigned normalized RGBA texel data.</p>
</li>
<li>
<p><code>VK_FORMAT_ASTC_10x10_SRGB_BLOCK</code> specifies a four-component, ASTC
compressed format where each 128-bit compressed texel block encodes a
10×10 rectangle of unsigned normalized RGBA texel data with sRGB
nonlinear encoding applied to the RGB components.</p>
</li>
<li>
<p><code>VK_FORMAT_ASTC_12x10_UNORM_BLOCK</code> specifies a four-component, ASTC
compressed format where each 128-bit compressed texel block encodes a
12×10 rectangle of unsigned normalized RGBA texel data.</p>
</li>
<li>
<p><code>VK_FORMAT_ASTC_12x10_SRGB_BLOCK</code> specifies a four-component, ASTC
compressed format where each 128-bit compressed texel block encodes a
12×10 rectangle of unsigned normalized RGBA texel data with sRGB
nonlinear encoding applied to the RGB components.</p>
</li>
<li>
<p><code>VK_FORMAT_ASTC_12x12_UNORM_BLOCK</code> specifies a four-component, ASTC
compressed format where each 128-bit compressed texel block encodes a
12×12 rectangle of unsigned normalized RGBA texel data.</p>
</li>
<li>
<p><code>VK_FORMAT_ASTC_12x12_SRGB_BLOCK</code> specifies a four-component, ASTC
compressed format where each 128-bit compressed texel block encodes a
12×12 rectangle of unsigned normalized RGBA texel data with sRGB
nonlinear encoding applied to the RGB components.</p>
</li>
<li>
<p><code>VK_FORMAT_G8B8G8R8_422_UNORM</code> specifies a four-component, 32-bit
format containing a pair of G components, an R component, and a B
component, collectively encoding a 2×1 rectangle of unsigned
normalized RGB texel data.
One G value is present at each <em>i</em> coordinate, with the B and R values
shared across both G values and thus recorded at half the horizontal
resolution of the image.
This format has an 8-bit G component for the even <em>i</em> coordinate in byte
0, an 8-bit B component in byte 1, an 8-bit G component for the odd <em>i</em>
coordinate in byte 2, and an 8-bit R component in byte 3.
Images in this format <strong class="purple">must</strong> be defined with a width that is a multiple
of two.
For the purposes of the constraints on copy extents, this format is
treated as a compressed format with a 2×1 compressed texel block.</p>
</li>
<li>
<p><code>VK_FORMAT_B8G8R8G8_422_UNORM</code> specifies a four-component, 32-bit
format containing a pair of G components, an R component, and a B
component, collectively encoding a 2×1 rectangle of unsigned
normalized RGB texel data.
One G value is present at each <em>i</em> coordinate, with the B and R values
shared across both G values and thus recorded at half the horizontal
resolution of the image.
This format has an 8-bit B component in byte 0, an 8-bit G component for
the even <em>i</em> coordinate in byte 1, an 8-bit R component in byte 2, and
an 8-bit G component for the odd <em>i</em> coordinate in byte 3.
Images in this format <strong class="purple">must</strong> be defined with a width that is a multiple
of two.
For the purposes of the constraints on copy extents, this format is
treated as a compressed format with a 2×1 compressed texel block.</p>
</li>
<li>
<p><code>VK_FORMAT_G8_B8_R8_3PLANE_420_UNORM</code> specifies an unsigned
normalized <em>multi-planar format</em> that has an 8-bit G component in plane
0, an 8-bit B component in plane 1, and an 8-bit R component in plane 2.
The horizontal and vertical dimensions of the R and B planes are halved
relative to the image dimensions, and each R and B component is shared
with the G components for which \(\lfloor i_G \times 0.5
\rfloor = i_B = i_R\) and \(\lfloor j_G \times 0.5 \rfloor = j_B
= j_R\).
The location of each plane when this image is in linear layout can be
determined via <a href="#vkGetImageSubresourceLayout">vkGetImageSubresourceLayout</a>, using
<code>VK_IMAGE_ASPECT_PLANE_0_BIT</code> for the G plane,
<code>VK_IMAGE_ASPECT_PLANE_1_BIT</code> for the B plane, and
<code>VK_IMAGE_ASPECT_PLANE_2_BIT</code> for the R plane.
Images in this format <strong class="purple">must</strong> be defined with a width and height that is a
multiple of two.</p>
</li>
<li>
<p><code>VK_FORMAT_G8_B8R8_2PLANE_420_UNORM</code> specifies an unsigned
normalized <em>multi-planar format</em> that has an 8-bit G component in plane
0, and a two-component, 16-bit BR plane 1 consisting of an 8-bit B
component in byte 0 and an 8-bit R component in byte 1.
The horizontal and vertical dimensions of the BR plane is halved
relative to the image dimensions, and each R and B value is shared with
the G components for which \(\lfloor i_G \times 0.5 \rfloor =
i_B = i_R\) and \(\lfloor j_G \times 0.5 \rfloor = j_B = j_R\).
The location of each plane when this image is in linear layout can be
determined via <a href="#vkGetImageSubresourceLayout">vkGetImageSubresourceLayout</a>, using
<code>VK_IMAGE_ASPECT_PLANE_0_BIT</code> for the G plane, and
<code>VK_IMAGE_ASPECT_PLANE_1_BIT</code> for the BR plane.
Images in this format <strong class="purple">must</strong> be defined with a width and height that is a
multiple of two.</p>
</li>
<li>
<p><code>VK_FORMAT_G8_B8_R8_3PLANE_422_UNORM</code> specifies an unsigned
normalized <em>multi-planar format</em> that has an 8-bit G component in plane
0, an 8-bit B component in plane 1, and an 8-bit R component in plane 2.
The horizontal dimension of the R and B plane is halved relative to the
image dimensions, and each R and B value is shared with the G components
for which \(\lfloor i_G \times 0.5 \rfloor = i_B = i_R\).
The location of each plane when this image is in linear layout can be
determined via <a href="#vkGetImageSubresourceLayout">vkGetImageSubresourceLayout</a>, using
<code>VK_IMAGE_ASPECT_PLANE_0_BIT</code> for the G plane,
<code>VK_IMAGE_ASPECT_PLANE_1_BIT</code> for the B plane, and
<code>VK_IMAGE_ASPECT_PLANE_2_BIT</code> for the R plane.
Images in this format <strong class="purple">must</strong> be defined with a width that is a multiple
of two.</p>
</li>
<li>
<p><code>VK_FORMAT_G8_B8R8_2PLANE_422_UNORM</code> specifies an unsigned
normalized <em>multi-planar format</em> that has an 8-bit G component in plane
0, and a two-component, 16-bit BR plane 1 consisting of an 8-bit B
component in byte 0 and an 8-bit R component in byte 1.
The horizontal dimensions of the BR plane is halved relative to the
image dimensions, and each R and B value is shared with the G components
for which \(\lfloor i_G \times 0.5 \rfloor = i_B = i_R\).
The location of each plane when this image is in linear layout can be
determined via <a href="#vkGetImageSubresourceLayout">vkGetImageSubresourceLayout</a>, using
<code>VK_IMAGE_ASPECT_PLANE_0_BIT</code> for the G plane, and
<code>VK_IMAGE_ASPECT_PLANE_1_BIT</code> for the BR plane.
Images in this format <strong class="purple">must</strong> be defined with a width that is a multiple
of two.</p>
</li>
<li>
<p><code>VK_FORMAT_G8_B8_R8_3PLANE_444_UNORM</code> specifies an unsigned
normalized <em>multi-planar format</em> that has an 8-bit G component in plane
0, an 8-bit B component in plane 1, and an 8-bit R component in plane 2.
Each plane has the same dimensions and each R, G and B component
contributes to a single texel.
The location of each plane when this image is in linear layout can be
determined via <a href="#vkGetImageSubresourceLayout">vkGetImageSubresourceLayout</a>, using
<code>VK_IMAGE_ASPECT_PLANE_0_BIT</code> for the G plane,
<code>VK_IMAGE_ASPECT_PLANE_1_BIT</code> for the B plane, and
<code>VK_IMAGE_ASPECT_PLANE_2_BIT</code> for the R plane.</p>
</li>
<li>
<p><code>VK_FORMAT_R10X6_UNORM_PACK16</code> specifies a one-component, 16-bit
unsigned normalized format that has a single 10-bit R component in the
top 10 bits of a 16-bit word, with the bottom 6 bits set to 0.</p>
</li>
<li>
<p><code>VK_FORMAT_R10X6G10X6_UNORM_2PACK16</code> specifies a two-component,
32-bit unsigned normalized format that has a 10-bit R component in the
top 10 bits of the word in bytes 0..1, and a 10-bit G component in the
top 10 bits of the word in bytes 2..3, with the bottom 6 bits of each
word set to 0.</p>
</li>
<li>
<p><code>VK_FORMAT_R10X6G10X6B10X6A10X6_UNORM_4PACK16</code> specifies a
four-component, 64-bit unsigned normalized format that has a 10-bit R
component in the top 10 bits of the word in bytes 0..1, a 10-bit G
component in the top 10 bits of the word in bytes 2..3, a 10-bit B
component in the top 10 bits of the word in bytes 4..5, and a 10-bit A
component in the top 10 bits of the word in bytes 6..7, with the bottom
6 bits of each word set to 0.</p>
</li>
<li>
<p><code>VK_FORMAT_G10X6B10X6G10X6R10X6_422_UNORM_4PACK16</code> specifies a
four-component, 64-bit format containing a pair of G components, an R
component, and a B component, collectively encoding a 2×1
rectangle of unsigned normalized RGB texel data.
One G value is present at each <em>i</em> coordinate, with the B and R values
shared across both G values and thus recorded at half the horizontal
resolution of the image.
This format has a 10-bit G component for the even <em>i</em> coordinate in the
top 10 bits of the word in bytes 0..1, a 10-bit B component in the top
10 bits of the word in bytes 2..3, a 10-bit G component for the odd <em>i</em>
coordinate in the top 10 bits of the word in bytes 4..5, and a 10-bit R
component in the top 10 bits of the word in bytes 6..7, with the bottom
6 bits of each word set to 0.
Images in this format <strong class="purple">must</strong> be defined with a width that is a multiple
of two.
For the purposes of the constraints on copy extents, this format is
treated as a compressed format with a 2×1 compressed texel block.</p>
</li>
<li>
<p><code>VK_FORMAT_B10X6G10X6R10X6G10X6_422_UNORM_4PACK16</code> specifies a
four-component, 64-bit format containing a pair of G components, an R
component, and a B component, collectively encoding a 2×1
rectangle of unsigned normalized RGB texel data.
One G value is present at each <em>i</em> coordinate, with the B and R values
shared across both G values and thus recorded at half the horizontal
resolution of the image.
This format has a 10-bit B component in the top 10 bits of the word in
bytes 0..1, a 10-bit G component for the even <em>i</em> coordinate in the top
10 bits of the word in bytes 2..3, a 10-bit R component in the top 10
bits of the word in bytes 4..5, and a 10-bit G component for the odd <em>i</em>
coordinate in the top 10 bits of the word in bytes 6..7, with the bottom
6 bits of each word set to 0.
Images in this format <strong class="purple">must</strong> be defined with a width that is a multiple
of two.
For the purposes of the constraints on copy extents, this format is
treated as a compressed format with a 2×1 compressed texel block.</p>
</li>
<li>
<p><code>VK_FORMAT_G10X6_B10X6_R10X6_3PLANE_420_UNORM_3PACK16</code> specifies an
unsigned normalized <em>multi-planar format</em> that has a 10-bit G component
in the top 10 bits of each 16-bit word of plane 0, a 10-bit B component
in the top 10 bits of each 16-bit word of plane 1, and a 10-bit R
component in the top 10 bits of each 16-bit word of plane 2, with the
bottom 6 bits of each word set to 0.
The horizontal and vertical dimensions of the R and B planes are halved
relative to the image dimensions, and each R and B component is shared
with the G components for which \(\lfloor i_G \times 0.5
\rfloor = i_B = i_R\) and \(\lfloor j_G \times 0.5 \rfloor = j_B
= j_R\).
The location of each plane when this image is in linear layout can be
determined via <a href="#vkGetImageSubresourceLayout">vkGetImageSubresourceLayout</a>, using
<code>VK_IMAGE_ASPECT_PLANE_0_BIT</code> for the G plane,
<code>VK_IMAGE_ASPECT_PLANE_1_BIT</code> for the B plane, and
<code>VK_IMAGE_ASPECT_PLANE_2_BIT</code> for the R plane.
Images in this format <strong class="purple">must</strong> be defined with a width and height that is a
multiple of two.</p>
</li>
<li>
<p><code>VK_FORMAT_G10X6_B10X6R10X6_2PLANE_420_UNORM_3PACK16</code> specifies an
unsigned normalized <em>multi-planar format</em> that has a 10-bit G component
in the top 10 bits of each 16-bit word of plane 0, and a two-component,
32-bit BR plane 1 consisting of a 10-bit B component in the top 10 bits
of the word in bytes 0..1, and a 10-bit R component in the top 10 bits
of the word in bytes 2..3, the bottom 6 bits of each word set to 0.
The horizontal and vertical dimensions of the BR plane is halved
relative to the image dimensions, and each R and B value is shared with
the G components for which \(\lfloor i_G \times 0.5 \rfloor =
i_B = i_R\) and \(\lfloor j_G \times 0.5 \rfloor = j_B = j_R\).
The location of each plane when this image is in linear layout can be
determined via <a href="#vkGetImageSubresourceLayout">vkGetImageSubresourceLayout</a>, using
<code>VK_IMAGE_ASPECT_PLANE_0_BIT</code> for the G plane, and
<code>VK_IMAGE_ASPECT_PLANE_1_BIT</code> for the BR plane.
Images in this format <strong class="purple">must</strong> be defined with a width and height that is a
multiple of two.</p>
</li>
<li>
<p><code>VK_FORMAT_G10X6_B10X6_R10X6_3PLANE_422_UNORM_3PACK16</code> specifies an
unsigned normalized <em>multi-planar format</em> that has a 10-bit G component
in the top 10 bits of each 16-bit word of plane 0, a 10-bit B component
in the top 10 bits of each 16-bit word of plane 1, and a 10-bit R
component in the top 10 bits of each 16-bit word of plane 2, with the
bottom 6 bits of each word set to 0.
The horizontal dimension of the R and B plane is halved relative to the
image dimensions, and each R and B value is shared with the G components
for which \(\lfloor i_G \times 0.5 \rfloor = i_B = i_R\).
The location of each plane when this image is in linear layout can be
determined via <a href="#vkGetImageSubresourceLayout">vkGetImageSubresourceLayout</a>, using
<code>VK_IMAGE_ASPECT_PLANE_0_BIT</code> for the G plane,
<code>VK_IMAGE_ASPECT_PLANE_1_BIT</code> for the B plane, and
<code>VK_IMAGE_ASPECT_PLANE_2_BIT</code> for the R plane.
Images in this format <strong class="purple">must</strong> be defined with a width that is a multiple
of two.</p>
</li>
<li>
<p><code>VK_FORMAT_G10X6_B10X6R10X6_2PLANE_422_UNORM_3PACK16</code> specifies an
unsigned normalized <em>multi-planar format</em> that has a 10-bit G component
in the top 10 bits of each 16-bit word of plane 0, and a two-component,
32-bit BR plane 1 consisting of a 10-bit B component in the top 10 bits
of the word in bytes 0..1, and a 10-bit R component in the top 10 bits
of the word in bytes 2..3, the bottom 6 bits of each word set to 0.
The horizontal dimensions of the BR plane is halved relative to the
image dimensions, and each R and B value is shared with the G components
for which \(\lfloor i_G \times 0.5 \rfloor = i_B = i_R\).
The location of each plane when this image is in linear layout can be
determined via <a href="#vkGetImageSubresourceLayout">vkGetImageSubresourceLayout</a>, using
<code>VK_IMAGE_ASPECT_PLANE_0_BIT</code> for the G plane, and
<code>VK_IMAGE_ASPECT_PLANE_1_BIT</code> for the BR plane.
Images in this format <strong class="purple">must</strong> be defined with a width that is a multiple
of two.</p>
</li>
<li>
<p><code>VK_FORMAT_G10X6_B10X6_R10X6_3PLANE_444_UNORM_3PACK16</code> specifies an
unsigned normalized <em>multi-planar format</em> that has a 10-bit G component
in the top 10 bits of each 16-bit word of plane 0, a 10-bit B component
in the top 10 bits of each 16-bit word of plane 1, and a 10-bit R
component in the top 10 bits of each 16-bit word of plane 2, with the
bottom 6 bits of each word set to 0.
Each plane has the same dimensions and each R, G and B component
contributes to a single texel.
The location of each plane when this image is in linear layout can be
determined via <a href="#vkGetImageSubresourceLayout">vkGetImageSubresourceLayout</a>, using
<code>VK_IMAGE_ASPECT_PLANE_0_BIT</code> for the G plane,
<code>VK_IMAGE_ASPECT_PLANE_1_BIT</code> for the B plane, and
<code>VK_IMAGE_ASPECT_PLANE_2_BIT</code> for the R plane.</p>
</li>
<li>
<p><code>VK_FORMAT_R12X4_UNORM_PACK16</code> specifies a one-component, 16-bit
unsigned normalized format that has a single 12-bit R component in the
top 12 bits of a 16-bit word, with the bottom 4 bits set to 0.</p>
</li>
<li>
<p><code>VK_FORMAT_R12X4G12X4_UNORM_2PACK16</code> specifies a two-component,
32-bit unsigned normalized format that has a 12-bit R component in the
top 12 bits of the word in bytes 0..1, and a 12-bit G component in the
top 12 bits of the word in bytes 2..3, with the bottom 4 bits of each
word set to 0.</p>
</li>
<li>
<p><code>VK_FORMAT_R12X4G12X4B12X4A12X4_UNORM_4PACK16</code> specifies a
four-component, 64-bit unsigned normalized format that has a 12-bit R
component in the top 12 bits of the word in bytes 0..1, a 12-bit G
component in the top 12 bits of the word in bytes 2..3, a 12-bit B
component in the top 12 bits of the word in bytes 4..5, and a 12-bit A
component in the top 12 bits of the word in bytes 6..7, with the bottom
4 bits of each word set to 0.</p>
</li>
<li>
<p><code>VK_FORMAT_G12X4B12X4G12X4R12X4_422_UNORM_4PACK16</code> specifies a
four-component, 64-bit format containing a pair of G components, an R
component, and a B component, collectively encoding a 2×1
rectangle of unsigned normalized RGB texel data.
One G value is present at each <em>i</em> coordinate, with the B and R values
shared across both G values and thus recorded at half the horizontal
resolution of the image.
This format has a 12-bit G component for the even <em>i</em> coordinate in the
top 12 bits of the word in bytes 0..1, a 12-bit B component in the top
12 bits of the word in bytes 2..3, a 12-bit G component for the odd <em>i</em>
coordinate in the top 12 bits of the word in bytes 4..5, and a 12-bit R
component in the top 12 bits of the word in bytes 6..7, with the bottom
4 bits of each word set to 0.
Images in this format <strong class="purple">must</strong> be defined with a width that is a multiple
of two.
For the purposes of the constraints on copy extents, this format is
treated as a compressed format with a 2×1 compressed texel block.</p>
</li>
<li>
<p><code>VK_FORMAT_B12X4G12X4R12X4G12X4_422_UNORM_4PACK16</code> specifies a
four-component, 64-bit format containing a pair of G components, an R
component, and a B component, collectively encoding a 2×1
rectangle of unsigned normalized RGB texel data.
One G value is present at each <em>i</em> coordinate, with the B and R values
shared across both G values and thus recorded at half the horizontal
resolution of the image.
This format has a 12-bit B component in the top 12 bits of the word in
bytes 0..1, a 12-bit G component for the even <em>i</em> coordinate in the top
12 bits of the word in bytes 2..3, a 12-bit R component in the top 12
bits of the word in bytes 4..5, and a 12-bit G component for the odd <em>i</em>
coordinate in the top 12 bits of the word in bytes 6..7, with the bottom
4 bits of each word set to 0.
Images in this format <strong class="purple">must</strong> be defined with a width that is a multiple
of two.
For the purposes of the constraints on copy extents, this format is
treated as a compressed format with a 2×1 compressed texel block.</p>
</li>
<li>
<p><code>VK_FORMAT_G12X4_B12X4_R12X4_3PLANE_420_UNORM_3PACK16</code> specifies an
unsigned normalized <em>multi-planar format</em> that has a 12-bit G component
in the top 12 bits of each 16-bit word of plane 0, a 12-bit B component
in the top 12 bits of each 16-bit word of plane 1, and a 12-bit R
component in the top 12 bits of each 16-bit word of plane 2, with the
bottom 4 bits of each word set to 0.
The horizontal and vertical dimensions of the R and B planes are halved
relative to the image dimensions, and each R and B component is shared
with the G components for which \(\lfloor i_G \times 0.5
\rfloor = i_B = i_R\) and \(\lfloor j_G \times 0.5 \rfloor = j_B
= j_R\).
The location of each plane when this image is in linear layout can be
determined via <a href="#vkGetImageSubresourceLayout">vkGetImageSubresourceLayout</a>, using
<code>VK_IMAGE_ASPECT_PLANE_0_BIT</code> for the G plane,
<code>VK_IMAGE_ASPECT_PLANE_1_BIT</code> for the B plane, and
<code>VK_IMAGE_ASPECT_PLANE_2_BIT</code> for the R plane.
Images in this format <strong class="purple">must</strong> be defined with a width and height that is a
multiple of two.</p>
</li>
<li>
<p><code>VK_FORMAT_G12X4_B12X4R12X4_2PLANE_420_UNORM_3PACK16</code> specifies an
unsigned normalized <em>multi-planar format</em> that has a 12-bit G component
in the top 12 bits of each 16-bit word of plane 0, and a two-component,
32-bit BR plane 1 consisting of a 12-bit B component in the top 12 bits
of the word in bytes 0..1, and a 12-bit R component in the top 12 bits
of the word in bytes 2..3, the bottom 4 bits of each word set to 0.
The horizontal and vertical dimensions of the BR plane is halved
relative to the image dimensions, and each R and B value is shared with
the G components for which \(\lfloor i_G \times 0.5 \rfloor =
i_B = i_R\) and \(\lfloor j_G \times 0.5 \rfloor = j_B = j_R\).
The location of each plane when this image is in linear layout can be
determined via <a href="#vkGetImageSubresourceLayout">vkGetImageSubresourceLayout</a>, using
<code>VK_IMAGE_ASPECT_PLANE_0_BIT</code> for the G plane, and
<code>VK_IMAGE_ASPECT_PLANE_1_BIT</code> for the BR plane.
Images in this format <strong class="purple">must</strong> be defined with a width and height that is a
multiple of two.</p>
</li>
<li>
<p><code>VK_FORMAT_G12X4_B12X4_R12X4_3PLANE_422_UNORM_3PACK16</code> specifies an
unsigned normalized <em>multi-planar format</em> that has a 12-bit G component
in the top 12 bits of each 16-bit word of plane 0, a 12-bit B component
in the top 12 bits of each 16-bit word of plane 1, and a 12-bit R
component in the top 12 bits of each 16-bit word of plane 2, with the
bottom 4 bits of each word set to 0.
The horizontal dimension of the R and B plane is halved relative to the
image dimensions, and each R and B value is shared with the G components
for which \(\lfloor i_G \times 0.5 \rfloor = i_B = i_R\).
The location of each plane when this image is in linear layout can be
determined via <a href="#vkGetImageSubresourceLayout">vkGetImageSubresourceLayout</a>, using
<code>VK_IMAGE_ASPECT_PLANE_0_BIT</code> for the G plane,
<code>VK_IMAGE_ASPECT_PLANE_1_BIT</code> for the B plane, and
<code>VK_IMAGE_ASPECT_PLANE_2_BIT</code> for the R plane.
Images in this format <strong class="purple">must</strong> be defined with a width that is a multiple
of two.</p>
</li>
<li>
<p><code>VK_FORMAT_G12X4_B12X4R12X4_2PLANE_422_UNORM_3PACK16</code> specifies an
unsigned normalized <em>multi-planar format</em> that has a 12-bit G component
in the top 12 bits of each 16-bit word of plane 0, and a two-component,
32-bit BR plane 1 consisting of a 12-bit B component in the top 12 bits
of the word in bytes 0..1, and a 12-bit R component in the top 12 bits
of the word in bytes 2..3, the bottom 4 bits of each word set to 0.
The horizontal dimensions of the BR plane is halved relative to the
image dimensions, and each R and B value is shared with the G components
for which \(\lfloor i_G \times 0.5 \rfloor = i_B = i_R\).
The location of each plane when this image is in linear layout can be
determined via <a href="#vkGetImageSubresourceLayout">vkGetImageSubresourceLayout</a>, using
<code>VK_IMAGE_ASPECT_PLANE_0_BIT</code> for the G plane, and
<code>VK_IMAGE_ASPECT_PLANE_1_BIT</code> for the BR plane.
Images in this format <strong class="purple">must</strong> be defined with a width that is a multiple
of two.</p>
</li>
<li>
<p><code>VK_FORMAT_G12X4_B12X4_R12X4_3PLANE_444_UNORM_3PACK16</code> specifies an
unsigned normalized <em>multi-planar format</em> that has a 12-bit G component
in the top 12 bits of each 16-bit word of plane 0, a 12-bit B component
in the top 12 bits of each 16-bit word of plane 1, and a 12-bit R
component in the top 12 bits of each 16-bit word of plane 2, with the
bottom 4 bits of each word set to 0.
Each plane has the same dimensions and each R, G and B component
contributes to a single texel.
The location of each plane when this image is in linear layout can be
determined via <a href="#vkGetImageSubresourceLayout">vkGetImageSubresourceLayout</a>, using
<code>VK_IMAGE_ASPECT_PLANE_0_BIT</code> for the G plane,
<code>VK_IMAGE_ASPECT_PLANE_1_BIT</code> for the B plane, and
<code>VK_IMAGE_ASPECT_PLANE_2_BIT</code> for the R plane.</p>
</li>
<li>
<p><code>VK_FORMAT_G16B16G16R16_422_UNORM</code> specifies a four-component,
64-bit format containing a pair of G components, an R component, and a B
component, collectively encoding a 2×1 rectangle of unsigned
normalized RGB texel data.
One G value is present at each <em>i</em> coordinate, with the B and R values
shared across both G values and thus recorded at half the horizontal
resolution of the image.
This format has a 16-bit G component for the even <em>i</em> coordinate in the
word in bytes 0..1, a 16-bit B component in the word in bytes 2..3, a
16-bit G component for the odd <em>i</em> coordinate in the word in bytes 4..5,
and a 16-bit R component in the word in bytes 6..7.
Images in this format <strong class="purple">must</strong> be defined with a width that is a multiple
of two.
For the purposes of the constraints on copy extents, this format is
treated as a compressed format with a 2×1 compressed texel block.</p>
</li>
<li>
<p><code>VK_FORMAT_B16G16R16G16_422_UNORM</code> specifies a four-component,
64-bit format containing a pair of G components, an R component, and a B
component, collectively encoding a 2×1 rectangle of unsigned
normalized RGB texel data.
One G value is present at each <em>i</em> coordinate, with the B and R values
shared across both G values and thus recorded at half the horizontal
resolution of the image.
This format has a 16-bit B component in the word in bytes 0..1, a 16-bit
G component for the even <em>i</em> coordinate in the word in bytes 2..3, a
16-bit R component in the word in bytes 4..5, and a 16-bit G component
for the odd <em>i</em> coordinate in the word in bytes 6..7.
Images in this format <strong class="purple">must</strong> be defined with a width that is a multiple
of two.
For the purposes of the constraints on copy extents, this format is
treated as a compressed format with a 2×1 compressed texel block.</p>
</li>
<li>
<p><code>VK_FORMAT_G16_B16_R16_3PLANE_420_UNORM</code> specifies an unsigned
normalized <em>multi-planar format</em> that has a 16-bit G component in each
16-bit word of plane 0, a 16-bit B component in each 16-bit word of
plane 1, and a 16-bit R component in each 16-bit word of plane 2.
The horizontal and vertical dimensions of the R and B planes are halved
relative to the image dimensions, and each R and B component is shared
with the G components for which \(\lfloor i_G \times 0.5
\rfloor = i_B = i_R\) and \(\lfloor j_G \times 0.5 \rfloor = j_B
= j_R\).
The location of each plane when this image is in linear layout can be
determined via <a href="#vkGetImageSubresourceLayout">vkGetImageSubresourceLayout</a>, using
<code>VK_IMAGE_ASPECT_PLANE_0_BIT</code> for the G plane,
<code>VK_IMAGE_ASPECT_PLANE_1_BIT</code> for the B plane, and
<code>VK_IMAGE_ASPECT_PLANE_2_BIT</code> for the R plane.
Images in this format <strong class="purple">must</strong> be defined with a width and height that is a
multiple of two.</p>
</li>
<li>
<p><code>VK_FORMAT_G16_B16R16_2PLANE_420_UNORM</code> specifies an unsigned
normalized <em>multi-planar format</em> that has a 16-bit G component in each
16-bit word of plane 0, and a two-component, 32-bit BR plane 1
consisting of a 16-bit B component in the word in bytes 0..1, and a
16-bit R component in the word in bytes 2..3.
The horizontal and vertical dimensions of the BR plane is halved
relative to the image dimensions, and each R and B value is shared with
the G components for which \(\lfloor i_G \times 0.5 \rfloor =
i_B = i_R\) and \(\lfloor j_G \times 0.5 \rfloor = j_B = j_R\).
The location of each plane when this image is in linear layout can be
determined via <a href="#vkGetImageSubresourceLayout">vkGetImageSubresourceLayout</a>, using
<code>VK_IMAGE_ASPECT_PLANE_0_BIT</code> for the G plane, and
<code>VK_IMAGE_ASPECT_PLANE_1_BIT</code> for the BR plane.
Images in this format <strong class="purple">must</strong> be defined with a width and height that is a
multiple of two.</p>
</li>
<li>
<p><code>VK_FORMAT_G16_B16_R16_3PLANE_422_UNORM</code> specifies an unsigned
normalized <em>multi-planar format</em> that has a 16-bit G component in each
16-bit word of plane 0, a 16-bit B component in each 16-bit word of
plane 1, and a 16-bit R component in each 16-bit word of plane 2.
The horizontal dimension of the R and B plane is halved relative to the
image dimensions, and each R and B value is shared with the G components
for which \(\lfloor i_G \times 0.5 \rfloor = i_B = i_R\).
The location of each plane when this image is in linear layout can be
determined via <a href="#vkGetImageSubresourceLayout">vkGetImageSubresourceLayout</a>, using
<code>VK_IMAGE_ASPECT_PLANE_0_BIT</code> for the G plane,
<code>VK_IMAGE_ASPECT_PLANE_1_BIT</code> for the B plane, and
<code>VK_IMAGE_ASPECT_PLANE_2_BIT</code> for the R plane.
Images in this format <strong class="purple">must</strong> be defined with a width that is a multiple
of two.</p>
</li>
<li>
<p><code>VK_FORMAT_G16_B16R16_2PLANE_422_UNORM</code> specifies an unsigned
normalized <em>multi-planar format</em> that has a 16-bit G component in each
16-bit word of plane 0, and a two-component, 32-bit BR plane 1
consisting of a 16-bit B component in the word in bytes 0..1, and a
16-bit R component in the word in bytes 2..3.
The horizontal dimensions of the BR plane is halved relative to the
image dimensions, and each R and B value is shared with the G components
for which \(\lfloor i_G \times 0.5 \rfloor = i_B = i_R\).
The location of each plane when this image is in linear layout can be
determined via <a href="#vkGetImageSubresourceLayout">vkGetImageSubresourceLayout</a>, using
<code>VK_IMAGE_ASPECT_PLANE_0_BIT</code> for the G plane, and
<code>VK_IMAGE_ASPECT_PLANE_1_BIT</code> for the BR plane.
Images in this format <strong class="purple">must</strong> be defined with a width that is a multiple
of two.</p>
</li>
<li>
<p><code>VK_FORMAT_G16_B16_R16_3PLANE_444_UNORM</code> specifies an unsigned
normalized <em>multi-planar format</em> that has a 16-bit G component in each
16-bit word of plane 0, a 16-bit B component in each 16-bit word of
plane 1, and a 16-bit R component in each 16-bit word of plane 2.
Each plane has the same dimensions and each R, G and B component
contributes to a single texel.
The location of each plane when this image is in linear layout can be
determined via <a href="#vkGetImageSubresourceLayout">vkGetImageSubresourceLayout</a>, using
<code>VK_IMAGE_ASPECT_PLANE_0_BIT</code> for the G plane,
<code>VK_IMAGE_ASPECT_PLANE_1_BIT</code> for the B plane, and
<code>VK_IMAGE_ASPECT_PLANE_2_BIT</code> for the R plane.</p>
</li>
</ul>
</div>
</div>
<div class="sect3">
<h4 id="_see_also_859">See Also</h4>
<div class="paragraph">
<p><a href="#VkAndroidHardwareBufferFormatPropertiesANDROID">VkAndroidHardwareBufferFormatPropertiesANDROID</a>, <a href="#VkAttachmentDescription">VkAttachmentDescription</a>, <a href="#VkAttachmentDescription2KHR">VkAttachmentDescription2KHR</a>, <a href="#VkBufferViewCreateInfo">VkBufferViewCreateInfo</a>, <a href="#VkGeometryTrianglesNV">VkGeometryTrianglesNV</a>, <a href="#VkImageCreateInfo">VkImageCreateInfo</a>, <a href="#VkImageFormatListCreateInfoKHR">VkImageFormatListCreateInfoKHR</a>, <a href="#VkImageViewASTCDecodeModeEXT">VkImageViewASTCDecodeModeEXT</a>, <a href="#VkImageViewCreateInfo">VkImageViewCreateInfo</a>, <a href="#VkPhysicalDeviceImageFormatInfo2">VkPhysicalDeviceImageFormatInfo2</a>, <a href="#VkPhysicalDeviceSparseImageFormatInfo2">VkPhysicalDeviceSparseImageFormatInfo2</a>, <a href="#VkSamplerYcbcrConversionCreateInfo">VkSamplerYcbcrConversionCreateInfo</a>, <a href="#VkSurfaceFormatKHR">VkSurfaceFormatKHR</a>, <a href="#VkSwapchainCreateInfoKHR">VkSwapchainCreateInfoKHR</a>, <a href="#VkVertexInputAttributeDescription">VkVertexInputAttributeDescription</a>, <a href="#vkGetPhysicalDeviceExternalImageFormatPropertiesNV">vkGetPhysicalDeviceExternalImageFormatPropertiesNV</a>, <a href="#vkGetPhysicalDeviceFormatProperties">vkGetPhysicalDeviceFormatProperties</a>, <a href="#vkGetPhysicalDeviceFormatProperties2">vkGetPhysicalDeviceFormatProperties2</a>, <a href="#vkGetPhysicalDeviceFormatProperties2KHR">vkGetPhysicalDeviceFormatProperties2KHR</a>, <a href="#vkGetPhysicalDeviceImageFormatProperties">vkGetPhysicalDeviceImageFormatProperties</a>, <a href="#vkGetPhysicalDeviceSparseImageFormatProperties">vkGetPhysicalDeviceSparseImageFormatProperties</a></p>
</div>
</div>
<div class="sect3">
<h4 id="_document_notes_859">Document Notes</h4>
<div class="paragraph">
<p>For more information, see the Vulkan Specification at URL</p>
</div>
<div class="paragraph">
<p><a href="https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VkFormat" class="bare">https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VkFormat</a></p>
</div>
<div class="paragraph">
<p>This page is extracted from the Vulkan Specification.
Fixes and changes should be made to the Specification, not directly.</p>
</div>
<div style="page-break-after: always;"></div>
</div>
</div>
<div class="sect2">
<h3 id="_vkformatfeatureflagbits3">VkFormatFeatureFlagBits(3)</h3>
<div class="sect3">
<h4 id="_name_860">Name</h4>
<div class="paragraph">
<p>VkFormatFeatureFlagBits - Bitmask specifying features supported by a buffer</p>
</div>
</div>
<div class="sect3">
<h4 id="_c_specification_860">C Specification</h4>
<div class="paragraph">
<p>Bits which <strong class="purple">can</strong> be set in the <a href="#VkFormatProperties">VkFormatProperties</a> features
<code>linearTilingFeatures</code>, <code>optimalTilingFeatures</code>,
<a href="vkspec.html#VkDrmFormatModifierPropertiesEXT"><code>drmFormatModifierTilingFeatures</code></a>,
and <code>bufferFeatures</code> are:</p>
</div>
<div id="VkFormatFeatureFlagBits" class="listingblock">
<div class="content">
<pre class="highlight"><code class="language-c++" data-lang="c++">typedef enum VkFormatFeatureFlagBits {
    VK_FORMAT_FEATURE_SAMPLED_IMAGE_BIT = 0x00000001,
    VK_FORMAT_FEATURE_STORAGE_IMAGE_BIT = 0x00000002,
    VK_FORMAT_FEATURE_STORAGE_IMAGE_ATOMIC_BIT = 0x00000004,
    VK_FORMAT_FEATURE_UNIFORM_TEXEL_BUFFER_BIT = 0x00000008,
    VK_FORMAT_FEATURE_STORAGE_TEXEL_BUFFER_BIT = 0x00000010,
    VK_FORMAT_FEATURE_STORAGE_TEXEL_BUFFER_ATOMIC_BIT = 0x00000020,
    VK_FORMAT_FEATURE_VERTEX_BUFFER_BIT = 0x00000040,
    VK_FORMAT_FEATURE_COLOR_ATTACHMENT_BIT = 0x00000080,
    VK_FORMAT_FEATURE_COLOR_ATTACHMENT_BLEND_BIT = 0x00000100,
    VK_FORMAT_FEATURE_DEPTH_STENCIL_ATTACHMENT_BIT = 0x00000200,
    VK_FORMAT_FEATURE_BLIT_SRC_BIT = 0x00000400,
    VK_FORMAT_FEATURE_BLIT_DST_BIT = 0x00000800,
    VK_FORMAT_FEATURE_SAMPLED_IMAGE_FILTER_LINEAR_BIT = 0x00001000,
    VK_FORMAT_FEATURE_TRANSFER_SRC_BIT = 0x00004000,
    VK_FORMAT_FEATURE_TRANSFER_DST_BIT = 0x00008000,
    VK_FORMAT_FEATURE_MIDPOINT_CHROMA_SAMPLES_BIT = 0x00020000,
    VK_FORMAT_FEATURE_SAMPLED_IMAGE_YCBCR_CONVERSION_LINEAR_FILTER_BIT = 0x00040000,
    VK_FORMAT_FEATURE_SAMPLED_IMAGE_YCBCR_CONVERSION_SEPARATE_RECONSTRUCTION_FILTER_BIT = 0x00080000,
    VK_FORMAT_FEATURE_SAMPLED_IMAGE_YCBCR_CONVERSION_CHROMA_RECONSTRUCTION_EXPLICIT_BIT = 0x00100000,
    VK_FORMAT_FEATURE_SAMPLED_IMAGE_YCBCR_CONVERSION_CHROMA_RECONSTRUCTION_EXPLICIT_FORCEABLE_BIT = 0x00200000,
    VK_FORMAT_FEATURE_DISJOINT_BIT = 0x00400000,
    VK_FORMAT_FEATURE_COSITED_CHROMA_SAMPLES_BIT = 0x00800000,
    VK_FORMAT_FEATURE_SAMPLED_IMAGE_FILTER_CUBIC_BIT_IMG = 0x00002000,
    VK_FORMAT_FEATURE_SAMPLED_IMAGE_FILTER_MINMAX_BIT_EXT = 0x00010000,
    VK_FORMAT_FEATURE_FRAGMENT_DENSITY_MAP_BIT_EXT = 0x01000000,
    VK_FORMAT_FEATURE_TRANSFER_SRC_BIT_KHR = VK_FORMAT_FEATURE_TRANSFER_SRC_BIT,
    VK_FORMAT_FEATURE_TRANSFER_DST_BIT_KHR = VK_FORMAT_FEATURE_TRANSFER_DST_BIT,
    VK_FORMAT_FEATURE_MIDPOINT_CHROMA_SAMPLES_BIT_KHR = VK_FORMAT_FEATURE_MIDPOINT_CHROMA_SAMPLES_BIT,
    VK_FORMAT_FEATURE_SAMPLED_IMAGE_YCBCR_CONVERSION_LINEAR_FILTER_BIT_KHR = VK_FORMAT_FEATURE_SAMPLED_IMAGE_YCBCR_CONVERSION_LINEAR_FILTER_BIT,
    VK_FORMAT_FEATURE_SAMPLED_IMAGE_YCBCR_CONVERSION_SEPARATE_RECONSTRUCTION_FILTER_BIT_KHR = VK_FORMAT_FEATURE_SAMPLED_IMAGE_YCBCR_CONVERSION_SEPARATE_RECONSTRUCTION_FILTER_BIT,
    VK_FORMAT_FEATURE_SAMPLED_IMAGE_YCBCR_CONVERSION_CHROMA_RECONSTRUCTION_EXPLICIT_BIT_KHR = VK_FORMAT_FEATURE_SAMPLED_IMAGE_YCBCR_CONVERSION_CHROMA_RECONSTRUCTION_EXPLICIT_BIT,
    VK_FORMAT_FEATURE_SAMPLED_IMAGE_YCBCR_CONVERSION_CHROMA_RECONSTRUCTION_EXPLICIT_FORCEABLE_BIT_KHR = VK_FORMAT_FEATURE_SAMPLED_IMAGE_YCBCR_CONVERSION_CHROMA_RECONSTRUCTION_EXPLICIT_FORCEABLE_BIT,
    VK_FORMAT_FEATURE_DISJOINT_BIT_KHR = VK_FORMAT_FEATURE_DISJOINT_BIT,
    VK_FORMAT_FEATURE_COSITED_CHROMA_SAMPLES_BIT_KHR = VK_FORMAT_FEATURE_COSITED_CHROMA_SAMPLES_BIT,
    VK_FORMAT_FEATURE_SAMPLED_IMAGE_FILTER_CUBIC_BIT_EXT = VK_FORMAT_FEATURE_SAMPLED_IMAGE_FILTER_CUBIC_BIT_IMG,
    VK_FORMAT_FEATURE_FLAG_BITS_MAX_ENUM = 0x7FFFFFFF
} VkFormatFeatureFlagBits;</code></pre>
</div>
</div>
</div>
<div class="sect3">
<h4 id="_description_860">Description</h4>
<div class="paragraph">
<p>The following bits <strong class="purple">may</strong> be set in
<code>linearTilingFeatures</code>, <code>optimalTilingFeatures</code>, and
<a href="vkspec.html#VkDrmFormatModifierPropertiesEXT"><code>drmFormatModifierTilingFeatures</code></a>,
specifying that the features are supported by <a href="vkspec.html#VkImage">images</a> or
<a href="vkspec.html#VkImageView">image views</a> created with the queried
<a href="#vkGetPhysicalDeviceFormatProperties">vkGetPhysicalDeviceFormatProperties</a>::<code>format</code>:</p>
</div>
<div class="ulist">
<ul>
<li>
<p><code>VK_FORMAT_FEATURE_SAMPLED_IMAGE_BIT</code> specifies that an image view
<strong class="purple">can</strong> be <a href="vkspec.html#descriptorsets-sampledimage">sampled from</a>.</p>
</li>
<li>
<p><code>VK_FORMAT_FEATURE_STORAGE_IMAGE_BIT</code> specifies that an image view
<strong class="purple">can</strong> be used as a <a href="vkspec.html#descriptorsets-storageimage">storage images</a>.</p>
</li>
<li>
<p><code>VK_FORMAT_FEATURE_STORAGE_IMAGE_ATOMIC_BIT</code> specifies that an image
view <strong class="purple">can</strong> be used as storage image that supports atomic operations.</p>
</li>
<li>
<p><code>VK_FORMAT_FEATURE_COLOR_ATTACHMENT_BIT</code> specifies that an image
view <strong class="purple">can</strong> be used as a framebuffer color attachment and as an input
attachment.</p>
</li>
<li>
<p><code>VK_FORMAT_FEATURE_COLOR_ATTACHMENT_BLEND_BIT</code> specifies that an
image view <strong class="purple">can</strong> be used as a framebuffer color attachment that supports
blending and as an input attachment.</p>
</li>
<li>
<p><code>VK_FORMAT_FEATURE_DEPTH_STENCIL_ATTACHMENT_BIT</code> specifies that an
image view <strong class="purple">can</strong> be used as a framebuffer depth/stencil attachment and as
an input attachment.</p>
</li>
<li>
<p><code>VK_FORMAT_FEATURE_BLIT_SRC_BIT</code> specifies that an image <strong class="purple">can</strong> be
used as <code>srcImage</code> for the <code>vkCmdBlitImage</code> command.</p>
</li>
<li>
<p><code>VK_FORMAT_FEATURE_BLIT_DST_BIT</code> specifies that an image <strong class="purple">can</strong> be
used as <code>dstImage</code> for the <code>vkCmdBlitImage</code> command.</p>
</li>
<li>
<p><code>VK_FORMAT_FEATURE_SAMPLED_IMAGE_FILTER_LINEAR_BIT</code> specifies that
if <code>VK_FORMAT_FEATURE_SAMPLED_IMAGE_BIT</code> is also set, an image view
<strong class="purple">can</strong> be used with a sampler that has either of <code>magFilter</code> or
<code>minFilter</code> set to <code>VK_FILTER_LINEAR</code>, or <code>mipmapMode</code> set
to <code>VK_SAMPLER_MIPMAP_MODE_LINEAR</code>.
If <code>VK_FORMAT_FEATURE_BLIT_SRC_BIT</code> is also set, an image can be
used as the <code>srcImage</code> to <a href="#vkCmdBlitImage">vkCmdBlitImage</a> with a <code>filter</code>
of <code>VK_FILTER_LINEAR</code>.
This bit <strong class="purple">must</strong> only be exposed for formats that also support the
<code>VK_FORMAT_FEATURE_SAMPLED_IMAGE_BIT</code> or
<code>VK_FORMAT_FEATURE_BLIT_SRC_BIT</code>.</p>
<div class="paragraph">
<p>If the format being queried is a depth/stencil format, this bit only
specifies that the depth aspect (not the stencil aspect) of an image of this
format supports linear filtering, and that linear filtering of the depth
aspect is supported whether depth compare is enabled in the sampler or not.
If this bit is not present, linear filtering with depth compare disabled is
unsupported and linear filtering with depth compare enabled is supported,
but <strong class="purple">may</strong> compute the filtered value in an implementation-dependent manner
which differs from the normal rules of linear filtering.
The resulting value <strong class="purple">must</strong> be in the range <span class="eq">[0,1]</span> and <strong class="purple">should</strong> be
proportional to, or a weighted average of, the number of comparison passes
or failures.</p>
</div>
</li>
<li>
<p><code>VK_FORMAT_FEATURE_TRANSFER_SRC_BIT</code> specifies that an image <strong class="purple">can</strong> be
used as a source image for <a href="vkspec.html#copies">copy commands</a>.</p>
</li>
<li>
<p><code>VK_FORMAT_FEATURE_TRANSFER_DST_BIT</code> specifies that an image <strong class="purple">can</strong> be
used as a destination image for <a href="vkspec.html#copies">copy commands</a> and <a href="vkspec.html#clears">clear commands</a>.</p>
</li>
<li>
<p><code>VK_FORMAT_FEATURE_SAMPLED_IMAGE_FILTER_MINMAX_BIT_EXT</code> specifies
<code>VkImage</code> <strong class="purple">can</strong> be used as a sampled image with a min or max
<a href="#VkSamplerReductionModeEXT">VkSamplerReductionModeEXT</a>.
This bit <strong class="purple">must</strong> only be exposed for formats that also support the
<code>VK_FORMAT_FEATURE_SAMPLED_IMAGE_BIT</code>.</p>
</li>
<li>
<p><code>VK_FORMAT_FEATURE_SAMPLED_IMAGE_FILTER_CUBIC_BIT_EXT</code> specifies
that <code>VkImage</code> <strong class="purple">can</strong> be used with a sampler that has either of
<code>magFilter</code> or <code>minFilter</code> set to <code>VK_FILTER_CUBIC_EXT</code>, or
be the source image for a blit with <code>filter</code> set to
<code>VK_FILTER_CUBIC_EXT</code>.
This bit <strong class="purple">must</strong> only be exposed for formats that also support the
<code>VK_FORMAT_FEATURE_SAMPLED_IMAGE_BIT</code>.
If the format being queried is a depth/stencil format, this only
specifies that the depth aspect is cubic filterable.</p>
</li>
<li>
<p><code>VK_FORMAT_FEATURE_MIDPOINT_CHROMA_SAMPLES_BIT</code> specifies that an
application <strong class="purple">can</strong> define a <a href="vkspec.html#samplers-YCbCr-conversion">sampler Y&#8217;C<sub>B</sub>C<sub>R</sub>
conversion</a> using this format as a source, and that an image of this
format <strong class="purple">can</strong> be used with a <code>VkSamplerYcbcrConversionCreateInfo</code>
<code>xChromaOffset</code> and/or <code>yChromaOffset</code> of
<code>VK_CHROMA_LOCATION_MIDPOINT</code>.
Otherwise both <code>xChromaOffset</code> and <code>yChromaOffset</code> <strong class="purple">must</strong> be
<code>VK_CHROMA_LOCATION_COSITED_EVEN</code>.
If a format does not incorporate chroma downsampling (it is not a
&#8220;422&#8221; or &#8220;420&#8221; format) but the implementation supports sampler
Y&#8217;C<sub>B</sub>C<sub>R</sub> conversion for this format, the implementation <strong class="purple">must</strong> set
<code>VK_FORMAT_FEATURE_MIDPOINT_CHROMA_SAMPLES_BIT</code>.</p>
</li>
<li>
<p><code>VK_FORMAT_FEATURE_COSITED_CHROMA_SAMPLES_BIT</code> specifies that an
application <strong class="purple">can</strong> define a <a href="vkspec.html#samplers-YCbCr-conversion">sampler Y&#8217;C<sub>B</sub>C<sub>R</sub>
conversion</a> using this format as a source, and that an image of this
format <strong class="purple">can</strong> be used with a <code>VkSamplerYcbcrConversionCreateInfo</code>
<code>xChromaOffset</code> and/or <code>yChromaOffset</code> of
<code>VK_CHROMA_LOCATION_COSITED_EVEN</code>.
Otherwise both <code>xChromaOffset</code> and <code>yChromaOffset</code> <strong class="purple">must</strong> be
<code>VK_CHROMA_LOCATION_MIDPOINT</code>.
If neither <code>VK_FORMAT_FEATURE_COSITED_CHROMA_SAMPLES_BIT</code> nor
<code>VK_FORMAT_FEATURE_MIDPOINT_CHROMA_SAMPLES_BIT</code> is set, the
application <strong class="purple">must</strong> not define a <a href="vkspec.html#samplers-YCbCr-conversion">sampler
Y&#8217;C<sub>B</sub>C<sub>R</sub> conversion</a> using this format as a source.</p>
</li>
<li>
<p><code>VK_FORMAT_FEATURE_SAMPLED_IMAGE_YCBCR_CONVERSION_LINEAR_FILTER_BIT</code>
specifies that the format can do linear sampler filtering
(min/magFilter) whilst sampler Y&#8217;C<sub>B</sub>C<sub>R</sub> conversion is enabled.</p>
</li>
<li>
<p><code>VK_FORMAT_FEATURE_SAMPLED_IMAGE_YCBCR_CONVERSION_SEPARATE_RECONSTRUCTION_FILTER_BIT</code>
specifies that the format can have different chroma, min, and mag
filters.</p>
</li>
<li>
<p><code>VK_FORMAT_FEATURE_SAMPLED_IMAGE_YCBCR_CONVERSION_CHROMA_RECONSTRUCTION_EXPLICIT_BIT</code>
specifies that reconstruction is explicit, as described in
<a href="vkspec.html#textures-chroma-reconstruction" class="bare">html/vkspec.html#textures-chroma-reconstruction</a>.
If this bit is not present, reconstruction is implicit by default.</p>
</li>
<li>
<p><code>VK_FORMAT_FEATURE_SAMPLED_IMAGE_YCBCR_CONVERSION_CHROMA_RECONSTRUCTION_EXPLICIT_FORCEABLE_BIT</code>
specifies that reconstruction <strong class="purple">can</strong> be forcibly made explicit by setting
<a href="#VkSamplerYcbcrConversionCreateInfo">VkSamplerYcbcrConversionCreateInfo</a>::<code>forceExplicitReconstruction</code>
to <code>VK_TRUE</code>.</p>
</li>
<li>
<p><code>VK_FORMAT_FEATURE_DISJOINT_BIT</code> specifies that a multi-planar image
<strong class="purple">can</strong> have the <code>VK_IMAGE_CREATE_DISJOINT_BIT</code> set during image
creation.
An implementation <strong class="purple">must</strong> not set <code>VK_FORMAT_FEATURE_DISJOINT_BIT</code> for
<em>single-plane formats</em>.</p>
</li>
<li>
<p><code>VK_FORMAT_FEATURE_FRAGMENT_DENSITY_MAP_BIT_EXT</code> specifies that an
image view <strong class="purple">can</strong> be used as a
<a href="vkspec.html#renderpass-fragmentdensitymapattachment">fragment density map
attachment</a>.</p>
</li>
</ul>
</div>
<div class="paragraph">
<p>The following bits <strong class="purple">may</strong> be set in <code>bufferFeatures</code>, specifying that the
features are supported by <a href="vkspec.html#VkBuffer">buffers</a> or <a href="vkspec.html#VkBufferView">buffer
views</a> created with the queried
<a href="#vkGetPhysicalDeviceProperties">vkGetPhysicalDeviceProperties</a>::<code>format</code>:</p>
</div>
<div class="ulist">
<ul>
<li>
<p><code>VK_FORMAT_FEATURE_UNIFORM_TEXEL_BUFFER_BIT</code> specifies that the
format <strong class="purple">can</strong> be used to create a buffer view that <strong class="purple">can</strong> be bound to a
<code>VK_DESCRIPTOR_TYPE_UNIFORM_TEXEL_BUFFER</code> descriptor.</p>
</li>
<li>
<p><code>VK_FORMAT_FEATURE_STORAGE_TEXEL_BUFFER_BIT</code> specifies that the
format <strong class="purple">can</strong> be used to create a buffer view that <strong class="purple">can</strong> be bound to a
<code>VK_DESCRIPTOR_TYPE_STORAGE_TEXEL_BUFFER</code> descriptor.</p>
</li>
<li>
<p><code>VK_FORMAT_FEATURE_STORAGE_TEXEL_BUFFER_ATOMIC_BIT</code> specifies that
atomic operations are supported on
<code>VK_DESCRIPTOR_TYPE_STORAGE_TEXEL_BUFFER</code> with this format.</p>
</li>
<li>
<p><code>VK_FORMAT_FEATURE_VERTEX_BUFFER_BIT</code> specifies that the format <strong class="purple">can</strong>
be used as a vertex attribute format
(<code>VkVertexInputAttributeDescription</code>::<code>format</code>).</p>
</li>
</ul>
</div>
</div>
<div class="sect3">
<h4 id="_see_also_860">See Also</h4>
<div class="paragraph">
<p><a href="#VkFormatFeatureFlags">VkFormatFeatureFlags</a></p>
</div>
</div>
<div class="sect3">
<h4 id="_document_notes_860">Document Notes</h4>
<div class="paragraph">
<p>For more information, see the Vulkan Specification at URL</p>
</div>
<div class="paragraph">
<p><a href="https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VkFormatFeatureFlagBits" class="bare">https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VkFormatFeatureFlagBits</a></p>
</div>
<div class="paragraph">
<p>This page is extracted from the Vulkan Specification.
Fixes and changes should be made to the Specification, not directly.</p>
</div>
<div style="page-break-after: always;"></div>
</div>
</div>
<div class="sect2">
<h3 id="_vkfrontface3">VkFrontFace(3)</h3>
<div class="sect3">
<h4 id="_name_861">Name</h4>
<div class="paragraph">
<p>VkFrontFace - Interpret polygon front-facing orientation</p>
</div>
</div>
<div class="sect3">
<h4 id="_c_specification_861">C Specification</h4>
<div class="paragraph">
<p>The first step of polygon rasterization is to determine whether the triangle
is <em>back-facing</em> or <em>front-facing</em>.
This determination is made based on the sign of the (clipped or unclipped)
polygon&#8217;s area computed in framebuffer coordinates.
One way to compute this area is:</p>
</div>
<div class="stemblock">
<div class="content">
\[a = -{1 \over 2}\sum_{i=0}^{n-1}
      x_f^i y_f^{i \oplus 1} -
      x_f^{i \oplus 1} y_f^i\]
</div>
</div>
<div class="paragraph">
<p>where \(x_f^i\) and \(y_f^i\) are the <span class="eq">x</span> and <span class="eq">y</span>
framebuffer coordinates of the <span class="eq">i</span>th vertex of the <span class="eq">n</span>-vertex
polygon (vertices are numbered starting at zero for the purposes of this
computation) and <span class="eq">i ⊕ 1</span> is <span class="eq">(i +  1) mod n</span>.</p>
</div>
<div class="paragraph">
<p>The interpretation of the sign of <span class="eq">a</span> is determined by the
<a href="#VkPipelineRasterizationStateCreateInfo">VkPipelineRasterizationStateCreateInfo</a>::<code>frontFace</code> property of
the currently active pipeline.
Possible values are:</p>
</div>
<div id="VkFrontFace" class="listingblock">
<div class="content">
<pre class="highlight"><code class="language-c++" data-lang="c++">typedef enum VkFrontFace {
    VK_FRONT_FACE_COUNTER_CLOCKWISE = 0,
    VK_FRONT_FACE_CLOCKWISE = 1,
    VK_FRONT_FACE_MAX_ENUM = 0x7FFFFFFF
} VkFrontFace;</code></pre>
</div>
</div>
</div>
<div class="sect3">
<h4 id="_description_861">Description</h4>
<div class="ulist">
<ul>
<li>
<p><code>VK_FRONT_FACE_COUNTER_CLOCKWISE</code> specifies that a triangle with
positive area is considered front-facing.</p>
</li>
<li>
<p><code>VK_FRONT_FACE_CLOCKWISE</code> specifies that a triangle with negative
area is considered front-facing.</p>
</li>
</ul>
</div>
<div class="paragraph">
<p>Any triangle which is not front-facing is back-facing, including zero-area
triangles.</p>
</div>
</div>
<div class="sect3">
<h4 id="_see_also_861">See Also</h4>
<div class="paragraph">
<p><a href="#VkPipelineRasterizationStateCreateInfo">VkPipelineRasterizationStateCreateInfo</a></p>
</div>
</div>
<div class="sect3">
<h4 id="_document_notes_861">Document Notes</h4>
<div class="paragraph">
<p>For more information, see the Vulkan Specification at URL</p>
</div>
<div class="paragraph">
<p><a href="https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VkFrontFace" class="bare">https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VkFrontFace</a></p>
</div>
<div class="paragraph">
<p>This page is extracted from the Vulkan Specification.
Fixes and changes should be made to the Specification, not directly.</p>
</div>
<div style="page-break-after: always;"></div>
</div>
</div>
<div class="sect2">
<h3 id="_vkfullscreenexclusiveext3">VkFullScreenExclusiveEXT(3)</h3>
<div class="sect3">
<h4 id="_name_862">Name</h4>
<div class="paragraph">
<p>VkFullScreenExclusiveEXT - Hint values an application can specify affecting full-screen transition behavior</p>
</div>
</div>
<div class="sect3">
<h4 id="_c_specification_862">C Specification</h4>
<div class="paragraph">
<p>Possible values of
<code>VkSurfaceFullScreenExclusiveInfoEXT</code>::<code>fullScreenExclusive</code> are:</p>
</div>
<div id="VkFullScreenExclusiveEXT" class="listingblock">
<div class="content">
<pre class="highlight"><code class="language-c++" data-lang="c++">typedef enum VkFullScreenExclusiveEXT {
    VK_FULL_SCREEN_EXCLUSIVE_DEFAULT_EXT = 0,
    VK_FULL_SCREEN_EXCLUSIVE_ALLOWED_EXT = 1,
    VK_FULL_SCREEN_EXCLUSIVE_DISALLOWED_EXT = 2,
    VK_FULL_SCREEN_EXCLUSIVE_APPLICATION_CONTROLLED_EXT = 3,
    VK_FULL_SCREEN_EXCLUSIVE_MAX_ENUM_EXT = 0x7FFFFFFF
} VkFullScreenExclusiveEXT;</code></pre>
</div>
</div>
</div>
<div class="sect3">
<h4 id="_description_862">Description</h4>
<div class="ulist">
<ul>
<li>
<p><code>VK_FULL_SCREEN_EXCLUSIVE_DEFAULT_EXT</code> indicates the implementation
<strong class="purple">should</strong> determine the appropriate full-screen method by whatever means
it deems appropriate.</p>
</li>
<li>
<p><code>VK_FULL_SCREEN_EXCLUSIVE_ALLOWED_EXT</code> indicates the implementation
<strong class="purple">may</strong> use full-screen exclusive mechanisms when available.
Such mechanisms <strong class="purple">may</strong> result in better performance and/or the
availability of different presentation capabilities, but <strong class="purple">may</strong> require a
more disruptive transition during swapchain initialization, first
presentation and/or destruction.</p>
</li>
<li>
<p><code>VK_FULL_SCREEN_EXCLUSIVE_DISALLOWED_EXT</code> indicates the
implementation <strong class="purple">should</strong> avoid using full-screen mechanisms which rely on
disruptive transitions.</p>
</li>
<li>
<p><code>VK_FULL_SCREEN_EXCLUSIVE_APPLICATION_CONTROLLED_EXT</code> indicates the
application will manage full-screen exclusive mode by using the
<a href="#vkAcquireFullScreenExclusiveModeEXT">vkAcquireFullScreenExclusiveModeEXT</a> and
<a href="#vkReleaseFullScreenExclusiveModeEXT">vkReleaseFullScreenExclusiveModeEXT</a> commands.</p>
</li>
</ul>
</div>
</div>
<div class="sect3">
<h4 id="_see_also_862">See Also</h4>
<div class="paragraph">
<p><a href="#VkSurfaceFullScreenExclusiveInfoEXT">VkSurfaceFullScreenExclusiveInfoEXT</a></p>
</div>
</div>
<div class="sect3">
<h4 id="_document_notes_862">Document Notes</h4>
<div class="paragraph">
<p>For more information, see the Vulkan Specification at URL</p>
</div>
<div class="paragraph">
<p><a href="https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VkFullScreenExclusiveEXT" class="bare">https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VkFullScreenExclusiveEXT</a></p>
</div>
<div class="paragraph">
<p>This page is extracted from the Vulkan Specification.
Fixes and changes should be made to the Specification, not directly.</p>
</div>
<div style="page-break-after: always;"></div>
</div>
</div>
<div class="sect2">
<h3 id="_vkgeometryflagbitsnv3">VkGeometryFlagBitsNV(3)</h3>
<div class="sect3">
<h4 id="_name_863">Name</h4>
<div class="paragraph">
<p>VkGeometryFlagBitsNV - Bitmask specifying additional parameters for a geometry</p>
</div>
</div>
<div class="sect3">
<h4 id="_c_specification_863">C Specification</h4>
<div class="paragraph">
<p>Bits which <strong class="purple">can</strong> be set in <a href="#VkGeometryNV">VkGeometryNV</a>::<code>flags</code>, specifying
additional parameters for acceleration structure builds, are:</p>
</div>
<div id="VkGeometryFlagBitsNV" class="listingblock">
<div class="content">
<pre class="highlight"><code class="language-c++" data-lang="c++">typedef enum VkGeometryFlagBitsNV {
    VK_GEOMETRY_OPAQUE_BIT_NV = 0x00000001,
    VK_GEOMETRY_NO_DUPLICATE_ANY_HIT_INVOCATION_BIT_NV = 0x00000002,
    VK_GEOMETRY_FLAG_BITS_MAX_ENUM_NV = 0x7FFFFFFF
} VkGeometryFlagBitsNV;</code></pre>
</div>
</div>
</div>
<div class="sect3">
<h4 id="_description_863">Description</h4>
<div class="ulist">
<ul>
<li>
<p><code>VK_GEOMETRY_OPAQUE_BIT_NV</code> indicates that this geometry does not
invoke the any-hit shaders even if present in a hit group.</p>
</li>
<li>
<p><code>VK_GEOMETRY_NO_DUPLICATE_ANY_HIT_INVOCATION_BIT_NV</code> indicates that
the implementation <strong class="purple">must</strong> only call the any-hit shader a single time for
each primitive in this geometry.
If this bit is absent an implementation <strong class="purple">may</strong> invoke the any-hit shader
more than once for this geometry.</p>
</li>
</ul>
</div>
</div>
<div class="sect3">
<h4 id="_see_also_863">See Also</h4>
<div class="paragraph">
<p><a href="#VkGeometryFlagsNV">VkGeometryFlagsNV</a></p>
</div>
</div>
<div class="sect3">
<h4 id="_document_notes_863">Document Notes</h4>
<div class="paragraph">
<p>For more information, see the Vulkan Specification at URL</p>
</div>
<div class="paragraph">
<p><a href="https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VkGeometryFlagBitsNV" class="bare">https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VkGeometryFlagBitsNV</a></p>
</div>
<div class="paragraph">
<p>This page is extracted from the Vulkan Specification.
Fixes and changes should be made to the Specification, not directly.</p>
</div>
<div style="page-break-after: always;"></div>
</div>
</div>
<div class="sect2">
<h3 id="_vkgeometryinstanceflagbitsnv3">VkGeometryInstanceFlagBitsNV(3)</h3>
<div class="sect3">
<h4 id="_name_864">Name</h4>
<div class="paragraph">
<p>VkGeometryInstanceFlagBitsNV - Instance flag bits</p>
</div>
</div>
<div class="sect3">
<h4 id="_c_specification_864">C Specification</h4>
<div class="paragraph">
<p>Possible values of <code>flags</code> in the instance modifying the behavior of
that instance are:,</p>
</div>
<div id="VkGeometryInstanceFlagBitsNV" class="listingblock">
<div class="content">
<pre class="highlight"><code class="language-c++" data-lang="c++">typedef enum VkGeometryInstanceFlagBitsNV {
    VK_GEOMETRY_INSTANCE_TRIANGLE_CULL_DISABLE_BIT_NV = 0x00000001,
    VK_GEOMETRY_INSTANCE_TRIANGLE_FRONT_COUNTERCLOCKWISE_BIT_NV = 0x00000002,
    VK_GEOMETRY_INSTANCE_FORCE_OPAQUE_BIT_NV = 0x00000004,
    VK_GEOMETRY_INSTANCE_FORCE_NO_OPAQUE_BIT_NV = 0x00000008,
    VK_GEOMETRY_INSTANCE_FLAG_BITS_MAX_ENUM_NV = 0x7FFFFFFF
} VkGeometryInstanceFlagBitsNV;</code></pre>
</div>
</div>
</div>
<div class="sect3">
<h4 id="_description_864">Description</h4>
<div class="ulist">
<ul>
<li>
<p><code>VK_GEOMETRY_INSTANCE_TRIANGLE_CULL_DISABLE_BIT_NV</code> disables face
culling for this instance.</p>
</li>
<li>
<p><code>VK_GEOMETRY_INSTANCE_TRIANGLE_FRONT_COUNTERCLOCKWISE_BIT_NV</code>
indicates that the front face of the triangle for culling purposes is
the face that is counter clockwise in object space relative to the ray
origin.
Because the facing is determined in object space, an instance transform
matrix does not change the winding, but a geometry transform does.</p>
</li>
<li>
<p><code>VK_GEOMETRY_INSTANCE_FORCE_OPAQUE_BIT_NV</code> causes this instance to
act as though <code>VK_GEOMETRY_OPAQUE_BIT_NV</code> were specified on all
geometries referenced by this instance.
This behavior <strong class="purple">can</strong> be overridden by the ray flag
<code>gl_RayFlagsNoOpaqueNV</code>.</p>
</li>
<li>
<p><code>VK_GEOMETRY_INSTANCE_FORCE_NO_OPAQUE_BIT_NV</code> causes this instance
to act as though <code>VK_GEOMETRY_OPAQUE_BIT_NV</code> were not specified on
all geometries referenced by this instance.
This behavior <strong class="purple">can</strong> be overridden by the ray flag
<code>gl_RayFlagsOpaqueNV</code>.</p>
</li>
</ul>
</div>
<div class="paragraph">
<p><code>VK_GEOMETRY_INSTANCE_FORCE_NO_OPAQUE_BIT_NV</code> and
<code>VK_GEOMETRY_INSTANCE_FORCE_OPAQUE_BIT_NV</code> <strong class="purple">must</strong> not be used in the same
flag.</p>
</div>
</div>
<div class="sect3">
<h4 id="_see_also_864">See Also</h4>
<div class="paragraph">
<p><a href="#VkGeometryInstanceFlagsNV">VkGeometryInstanceFlagsNV</a></p>
</div>
</div>
<div class="sect3">
<h4 id="_document_notes_864">Document Notes</h4>
<div class="paragraph">
<p>For more information, see the Vulkan Specification at URL</p>
</div>
<div class="paragraph">
<p><a href="https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VkGeometryInstanceFlagBitsNV" class="bare">https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VkGeometryInstanceFlagBitsNV</a></p>
</div>
<div class="paragraph">
<p>This page is extracted from the Vulkan Specification.
Fixes and changes should be made to the Specification, not directly.</p>
</div>
<div style="page-break-after: always;"></div>
</div>
</div>
<div class="sect2">
<h3 id="_vkgeometrytypenv3">VkGeometryTypeNV(3)</h3>
<div class="sect3">
<h4 id="_name_865">Name</h4>
<div class="paragraph">
<p>VkGeometryTypeNV - Enum specifying which type of geometry is provided</p>
</div>
</div>
<div class="sect3">
<h4 id="_c_specification_865">C Specification</h4>
<div class="paragraph">
<p>Geometry types are specified by <a href="#VkGeometryTypeNV">VkGeometryTypeNV</a>, which takes values:</p>
</div>
<div id="VkGeometryTypeNV" class="listingblock">
<div class="content">
<pre class="highlight"><code class="language-c++" data-lang="c++">typedef enum VkGeometryTypeNV {
    VK_GEOMETRY_TYPE_TRIANGLES_NV = 0,
    VK_GEOMETRY_TYPE_AABBS_NV = 1,
    VK_GEOMETRY_TYPE_MAX_ENUM_NV = 0x7FFFFFFF
} VkGeometryTypeNV;</code></pre>
</div>
</div>
</div>
<div class="sect3">
<h4 id="_description_865">Description</h4>
<div class="ulist">
<ul>
<li>
<p><code>VK_GEOMETRY_TYPE_TRIANGLES_NV</code> indicates that the <code>triangles</code>
of <a href="#VkGeometryDataNV">VkGeometryDataNV</a> contains valid data.</p>
</li>
<li>
<p><code>VK_GEOMETRY_TYPE_AABBS_NV</code> indicates that the <code>aabbs</code> of
<a href="#VkGeometryDataNV">VkGeometryDataNV</a> contains valid data.</p>
</li>
</ul>
</div>
</div>
<div class="sect3">
<h4 id="_see_also_865">See Also</h4>
<div class="paragraph">
<p><a href="#VkGeometryNV">VkGeometryNV</a></p>
</div>
</div>
<div class="sect3">
<h4 id="_document_notes_865">Document Notes</h4>
<div class="paragraph">
<p>For more information, see the Vulkan Specification at URL</p>
</div>
<div class="paragraph">
<p><a href="https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VkGeometryTypeNV" class="bare">https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VkGeometryTypeNV</a></p>
</div>
<div class="paragraph">
<p>This page is extracted from the Vulkan Specification.
Fixes and changes should be made to the Specification, not directly.</p>
</div>
<div style="page-break-after: always;"></div>
</div>
</div>
<div class="sect2">
<h3 id="_vkimageaspectflagbits3">VkImageAspectFlagBits(3)</h3>
<div class="sect3">
<h4 id="_name_866">Name</h4>
<div class="paragraph">
<p>VkImageAspectFlagBits - Bitmask specifying which aspects of an image are included in a view</p>
</div>
</div>
<div class="sect3">
<h4 id="_c_specification_866">C Specification</h4>
<div class="paragraph">
<p>Bits which <strong class="purple">can</strong> be set in an aspect mask to specify aspects of an image for
purposes such as identifying a subresource, are:</p>
</div>
<div id="VkImageAspectFlagBits" class="listingblock">
<div class="content">
<pre class="highlight"><code class="language-c++" data-lang="c++">typedef enum VkImageAspectFlagBits {
    VK_IMAGE_ASPECT_COLOR_BIT = 0x00000001,
    VK_IMAGE_ASPECT_DEPTH_BIT = 0x00000002,
    VK_IMAGE_ASPECT_STENCIL_BIT = 0x00000004,
    VK_IMAGE_ASPECT_METADATA_BIT = 0x00000008,
    VK_IMAGE_ASPECT_PLANE_0_BIT = 0x00000010,
    VK_IMAGE_ASPECT_PLANE_1_BIT = 0x00000020,
    VK_IMAGE_ASPECT_PLANE_2_BIT = 0x00000040,
    VK_IMAGE_ASPECT_MEMORY_PLANE_0_BIT_EXT = 0x00000080,
    VK_IMAGE_ASPECT_MEMORY_PLANE_1_BIT_EXT = 0x00000100,
    VK_IMAGE_ASPECT_MEMORY_PLANE_2_BIT_EXT = 0x00000200,
    VK_IMAGE_ASPECT_MEMORY_PLANE_3_BIT_EXT = 0x00000400,
    VK_IMAGE_ASPECT_PLANE_0_BIT_KHR = VK_IMAGE_ASPECT_PLANE_0_BIT,
    VK_IMAGE_ASPECT_PLANE_1_BIT_KHR = VK_IMAGE_ASPECT_PLANE_1_BIT,
    VK_IMAGE_ASPECT_PLANE_2_BIT_KHR = VK_IMAGE_ASPECT_PLANE_2_BIT,
    VK_IMAGE_ASPECT_FLAG_BITS_MAX_ENUM = 0x7FFFFFFF
} VkImageAspectFlagBits;</code></pre>
</div>
</div>
</div>
<div class="sect3">
<h4 id="_description_866">Description</h4>
<div class="ulist">
<ul>
<li>
<p><code>VK_IMAGE_ASPECT_COLOR_BIT</code> specifies the color aspect.</p>
</li>
<li>
<p><code>VK_IMAGE_ASPECT_DEPTH_BIT</code> specifies the depth aspect.</p>
</li>
<li>
<p><code>VK_IMAGE_ASPECT_STENCIL_BIT</code> specifies the stencil aspect.</p>
</li>
<li>
<p><code>VK_IMAGE_ASPECT_METADATA_BIT</code> specifies the metadata aspect, used
for sparse <a href="vkspec.html#sparsememory">sparse resource</a> operations.</p>
</li>
</ul>
</div>
</div>
<div class="sect3">
<h4 id="_see_also_866">See Also</h4>
<div class="paragraph">
<p><a href="#VkBindImagePlaneMemoryInfo">VkBindImagePlaneMemoryInfo</a>, <a href="#VkImageAspectFlags">VkImageAspectFlags</a>, <a href="#VkImagePlaneMemoryRequirementsInfo">VkImagePlaneMemoryRequirementsInfo</a></p>
</div>
</div>
<div class="sect3">
<h4 id="_document_notes_866">Document Notes</h4>
<div class="paragraph">
<p>For more information, see the Vulkan Specification at URL</p>
</div>
<div class="paragraph">
<p><a href="https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VkImageAspectFlagBits" class="bare">https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VkImageAspectFlagBits</a></p>
</div>
<div class="paragraph">
<p>This page is extracted from the Vulkan Specification.
Fixes and changes should be made to the Specification, not directly.</p>
</div>
<div style="page-break-after: always;"></div>
</div>
</div>
<div class="sect2">
<h3 id="_vkimagecreateflagbits3">VkImageCreateFlagBits(3)</h3>
<div class="sect3">
<h4 id="_name_867">Name</h4>
<div class="paragraph">
<p>VkImageCreateFlagBits - Bitmask specifying additional parameters of an image</p>
</div>
</div>
<div class="sect3">
<h4 id="_c_specification_867">C Specification</h4>
<div class="paragraph">
<p>Bits which <strong class="purple">can</strong> be set in <a href="#VkImageCreateInfo">VkImageCreateInfo</a>::<code>flags</code>, specifying
additional parameters of an image, are:</p>
</div>
<div id="VkImageCreateFlagBits" class="listingblock">
<div class="content">
<pre class="highlight"><code class="language-c++" data-lang="c++">typedef enum VkImageCreateFlagBits {
    VK_IMAGE_CREATE_SPARSE_BINDING_BIT = 0x00000001,
    VK_IMAGE_CREATE_SPARSE_RESIDENCY_BIT = 0x00000002,
    VK_IMAGE_CREATE_SPARSE_ALIASED_BIT = 0x00000004,
    VK_IMAGE_CREATE_MUTABLE_FORMAT_BIT = 0x00000008,
    VK_IMAGE_CREATE_CUBE_COMPATIBLE_BIT = 0x00000010,
    VK_IMAGE_CREATE_ALIAS_BIT = 0x00000400,
    VK_IMAGE_CREATE_SPLIT_INSTANCE_BIND_REGIONS_BIT = 0x00000040,
    VK_IMAGE_CREATE_2D_ARRAY_COMPATIBLE_BIT = 0x00000020,
    VK_IMAGE_CREATE_BLOCK_TEXEL_VIEW_COMPATIBLE_BIT = 0x00000080,
    VK_IMAGE_CREATE_EXTENDED_USAGE_BIT = 0x00000100,
    VK_IMAGE_CREATE_PROTECTED_BIT = 0x00000800,
    VK_IMAGE_CREATE_DISJOINT_BIT = 0x00000200,
    VK_IMAGE_CREATE_CORNER_SAMPLED_BIT_NV = 0x00002000,
    VK_IMAGE_CREATE_SAMPLE_LOCATIONS_COMPATIBLE_DEPTH_BIT_EXT = 0x00001000,
    VK_IMAGE_CREATE_SUBSAMPLED_BIT_EXT = 0x00004000,
    VK_IMAGE_CREATE_SPLIT_INSTANCE_BIND_REGIONS_BIT_KHR = VK_IMAGE_CREATE_SPLIT_INSTANCE_BIND_REGIONS_BIT,
    VK_IMAGE_CREATE_2D_ARRAY_COMPATIBLE_BIT_KHR = VK_IMAGE_CREATE_2D_ARRAY_COMPATIBLE_BIT,
    VK_IMAGE_CREATE_BLOCK_TEXEL_VIEW_COMPATIBLE_BIT_KHR = VK_IMAGE_CREATE_BLOCK_TEXEL_VIEW_COMPATIBLE_BIT,
    VK_IMAGE_CREATE_EXTENDED_USAGE_BIT_KHR = VK_IMAGE_CREATE_EXTENDED_USAGE_BIT,
    VK_IMAGE_CREATE_DISJOINT_BIT_KHR = VK_IMAGE_CREATE_DISJOINT_BIT,
    VK_IMAGE_CREATE_ALIAS_BIT_KHR = VK_IMAGE_CREATE_ALIAS_BIT,
    VK_IMAGE_CREATE_FLAG_BITS_MAX_ENUM = 0x7FFFFFFF
} VkImageCreateFlagBits;</code></pre>
</div>
</div>
</div>
<div class="sect3">
<h4 id="_description_867">Description</h4>
<div class="ulist">
<ul>
<li>
<p><code>VK_IMAGE_CREATE_SPARSE_BINDING_BIT</code> specifies that the image will
be backed using sparse memory binding.</p>
</li>
<li>
<p><code>VK_IMAGE_CREATE_SPARSE_RESIDENCY_BIT</code> specifies that the image <strong class="purple">can</strong>
be partially backed using sparse memory binding.
Images created with this flag <strong class="purple">must</strong> also be created with the
<code>VK_IMAGE_CREATE_SPARSE_BINDING_BIT</code> flag.</p>
</li>
<li>
<p><code>VK_IMAGE_CREATE_SPARSE_ALIASED_BIT</code> specifies that the image will
be backed using sparse memory binding with memory ranges that might also
simultaneously be backing another image (or another portion of the same
image).
Images created with this flag <strong class="purple">must</strong> also be created with the
<code>VK_IMAGE_CREATE_SPARSE_BINDING_BIT</code> flag</p>
</li>
<li>
<p><code>VK_IMAGE_CREATE_MUTABLE_FORMAT_BIT</code> specifies that the image <strong class="purple">can</strong>
be used to create a <code>VkImageView</code> with a different format from the
image.
For <a href="vkspec.html#formats-requiring-sampler-ycbcr-conversion">multi-planar</a> formats,
<code>VK_IMAGE_CREATE_MUTABLE_FORMAT_BIT</code> specifies that a
<code>VkImageView</code> can be created of a <em>plane</em> of the image.</p>
</li>
<li>
<p><code>VK_IMAGE_CREATE_CUBE_COMPATIBLE_BIT</code> specifies that the image <strong class="purple">can</strong>
be used to create a <code>VkImageView</code> of type
<code>VK_IMAGE_VIEW_TYPE_CUBE</code> or <code>VK_IMAGE_VIEW_TYPE_CUBE_ARRAY</code>.</p>
</li>
<li>
<p><code>VK_IMAGE_CREATE_2D_ARRAY_COMPATIBLE_BIT</code> specifies that the image
<strong class="purple">can</strong> be used to create a <code>VkImageView</code> of type
<code>VK_IMAGE_VIEW_TYPE_2D</code> or <code>VK_IMAGE_VIEW_TYPE_2D_ARRAY</code>.</p>
</li>
<li>
<p><code>VK_IMAGE_CREATE_PROTECTED_BIT</code> specifies that the image is a
protected image.</p>
</li>
<li>
<p><code>VK_IMAGE_CREATE_SPLIT_INSTANCE_BIND_REGIONS_BIT</code> specifies that the
image <strong class="purple">can</strong> be used with a non-zero value of the
<code>splitInstanceBindRegionCount</code> member of a
<a href="#VkBindImageMemoryDeviceGroupInfo">VkBindImageMemoryDeviceGroupInfo</a> structure passed into
<a href="#vkBindImageMemory2">vkBindImageMemory2</a>.
This flag also has the effect of making the image use the standard
sparse image block dimensions.</p>
</li>
<li>
<p><code>VK_IMAGE_CREATE_BLOCK_TEXEL_VIEW_COMPATIBLE_BIT</code> specifies that the
image having a compressed format <strong class="purple">can</strong> be used to create a
<code>VkImageView</code> with an uncompressed format where each texel in the
image view corresponds to a compressed texel block of the image.</p>
</li>
<li>
<p><code>VK_IMAGE_CREATE_EXTENDED_USAGE_BIT</code> specifies that the image <strong class="purple">can</strong>
be created with usage flags that are not supported for the format the
image is created with but are supported for at least one format a
<code>VkImageView</code> created from the image <strong class="purple">can</strong> have.</p>
</li>
<li>
<p><code>VK_IMAGE_CREATE_DISJOINT_BIT</code> specifies that an image with a
<a href="vkspec.html#formats-requiring-sampler-ycbcr-conversion">multi-planar format</a> <strong class="purple">must</strong>
have each plane separately bound to memory, rather than having a single
memory binding for the whole image; the presence of this bit
distinguishes a <em>disjoint image</em> from an image without this bit set.</p>
</li>
<li>
<p><code>VK_IMAGE_CREATE_ALIAS_BIT</code> specifies that two images created with
    the same creation parameters and aliased to the same memory <strong class="purple">can</strong>
    interpret the contents of the memory consistently with each other,
    subject to the rules described in the <a href="vkspec.html#resources-memory-aliasing">Memory
    Aliasing</a> section.
    This flag further specifies that each plane of a <em>disjoint</em> image <strong class="purple">can</strong>
    share an in-memory non-linear representation with single-plane images,
    and that a single-plane image <strong class="purple">can</strong> share an in-memory non-linear
    representation with a plane of a multi-planar disjoint image, according
    to the rules in <a href="vkspec.html#formats-compatible-planes" class="bare">html/vkspec.html#formats-compatible-planes</a>.
    If the <code>pNext</code> chain includes a
<a href="#VkExternalMemoryImageCreateInfo">VkExternalMemoryImageCreateInfo</a>
or
<a href="#VkExternalMemoryImageCreateInfoNV">VkExternalMemoryImageCreateInfoNV</a>
    structure whose <code>handleTypes</code> member is not <code>0</code>, it is as if
    <code>VK_IMAGE_CREATE_ALIAS_BIT</code> is set.</p>
</li>
<li>
<p><code>VK_IMAGE_CREATE_SAMPLE_LOCATIONS_COMPATIBLE_DEPTH_BIT_EXT</code>
specifies that an image with a depth or depth/stencil format <strong class="purple">can</strong> be
used with custom sample locations when used as a depth/stencil
attachment.</p>
</li>
<li>
<p><code>VK_IMAGE_CREATE_CORNER_SAMPLED_BIT_NV</code> specifies that the image is
a <a href="vkspec.html#resources-images-corner-sampled">corner-sampled image</a>.</p>
</li>
<li>
<p><code>VK_IMAGE_CREATE_SUBSAMPLED_BIT_EXT</code> specifies that an image <strong class="purple">can</strong> be
in a subsampled format which <strong class="purple">may</strong> be more optimal when written as an
attachment by a render pass that has a fragment density map attachment.
Accessing a subsampled image has additional considerations:</p>
<div class="ulist">
<ul>
<li>
<p>Image data read as an image sampler is undefined if the sampler was not
created with <code>flags</code> containing
<code>VK_SAMPLER_CREATE_SUBSAMPLED_BIT_EXT</code> or was not sampled through
the use of a combined image sampler with an immutable sampler in
<code>VkDescriptorSetLayoutBinding</code>.</p>
</li>
<li>
<p>Image data read with an input attachment is undefined if the contents
were not written as an attachment in an earlier subpass of the same
render pass.</p>
</li>
<li>
<p>Image data read with load operations <strong class="purple">may</strong> be resampled to the fragment
density of the render pass.</p>
</li>
<li>
<p>Image contents outside of the render area become undefined if the image
is stored as a render pass attachment.</p>
</li>
</ul>
</div>
</li>
</ul>
</div>
<div class="paragraph">
<p>See <a href="vkspec.html#sparsememory-sparseresourcefeatures">Sparse Resource Features</a> and
<a href="vkspec.html#sparsememory-physicalfeatures">Sparse Physical Device Features</a> for more
details.</p>
</div>
</div>
<div class="sect3">
<h4 id="_see_also_867">See Also</h4>
<div class="paragraph">
<p><a href="#VkImageCreateFlags">VkImageCreateFlags</a></p>
</div>
</div>
<div class="sect3">
<h4 id="_document_notes_867">Document Notes</h4>
<div class="paragraph">
<p>For more information, see the Vulkan Specification at URL</p>
</div>
<div class="paragraph">
<p><a href="https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VkImageCreateFlagBits" class="bare">https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VkImageCreateFlagBits</a></p>
</div>
<div class="paragraph">
<p>This page is extracted from the Vulkan Specification.
Fixes and changes should be made to the Specification, not directly.</p>
</div>
<div style="page-break-after: always;"></div>
</div>
</div>
<div class="sect2">
<h3 id="_vkimagelayout3">VkImageLayout(3)</h3>
<div class="sect3">
<h4 id="_name_868">Name</h4>
<div class="paragraph">
<p>VkImageLayout - Layout of image and image subresources</p>
</div>
</div>
<div class="sect3">
<h4 id="_c_specification_868">C Specification</h4>
<div class="paragraph">
<p>The set of image layouts consists of:</p>
</div>
<div id="VkImageLayout" class="listingblock">
<div class="content">
<pre class="highlight"><code class="language-c++" data-lang="c++">typedef enum VkImageLayout {
    VK_IMAGE_LAYOUT_UNDEFINED = 0,
    VK_IMAGE_LAYOUT_GENERAL = 1,
    VK_IMAGE_LAYOUT_COLOR_ATTACHMENT_OPTIMAL = 2,
    VK_IMAGE_LAYOUT_DEPTH_STENCIL_ATTACHMENT_OPTIMAL = 3,
    VK_IMAGE_LAYOUT_DEPTH_STENCIL_READ_ONLY_OPTIMAL = 4,
    VK_IMAGE_LAYOUT_SHADER_READ_ONLY_OPTIMAL = 5,
    VK_IMAGE_LAYOUT_TRANSFER_SRC_OPTIMAL = 6,
    VK_IMAGE_LAYOUT_TRANSFER_DST_OPTIMAL = 7,
    VK_IMAGE_LAYOUT_PREINITIALIZED = 8,
    VK_IMAGE_LAYOUT_DEPTH_READ_ONLY_STENCIL_ATTACHMENT_OPTIMAL = 1000117000,
    VK_IMAGE_LAYOUT_DEPTH_ATTACHMENT_STENCIL_READ_ONLY_OPTIMAL = 1000117001,
    VK_IMAGE_LAYOUT_PRESENT_SRC_KHR = 1000001002,
    VK_IMAGE_LAYOUT_SHARED_PRESENT_KHR = 1000111000,
    VK_IMAGE_LAYOUT_SHADING_RATE_OPTIMAL_NV = 1000164003,
    VK_IMAGE_LAYOUT_FRAGMENT_DENSITY_MAP_OPTIMAL_EXT = 1000218000,
    VK_IMAGE_LAYOUT_DEPTH_READ_ONLY_STENCIL_ATTACHMENT_OPTIMAL_KHR = VK_IMAGE_LAYOUT_DEPTH_READ_ONLY_STENCIL_ATTACHMENT_OPTIMAL,
    VK_IMAGE_LAYOUT_DEPTH_ATTACHMENT_STENCIL_READ_ONLY_OPTIMAL_KHR = VK_IMAGE_LAYOUT_DEPTH_ATTACHMENT_STENCIL_READ_ONLY_OPTIMAL,
    VK_IMAGE_LAYOUT_MAX_ENUM = 0x7FFFFFFF
} VkImageLayout;</code></pre>
</div>
</div>
</div>
<div class="sect3">
<h4 id="_description_868">Description</h4>
<div class="paragraph">
<p>The type(s) of device access supported by each layout are:</p>
</div>
<div class="ulist">
<ul>
<li>
<p><code>VK_IMAGE_LAYOUT_UNDEFINED</code> does not support device access.
This layout <strong class="purple">must</strong> only be used as the <code>initialLayout</code> member of
<code>VkImageCreateInfo</code> or <code>VkAttachmentDescription</code>, or as the
<code>oldLayout</code> in an image transition.
When transitioning out of this layout, the contents of the memory are
not guaranteed to be preserved.</p>
</li>
<li>
<p><code>VK_IMAGE_LAYOUT_PREINITIALIZED</code> does not support device access.
This layout <strong class="purple">must</strong> only be used as the <code>initialLayout</code> member of
<code>VkImageCreateInfo</code> or <code>VkAttachmentDescription</code>, or as the
<code>oldLayout</code> in an image transition.
When transitioning out of this layout, the contents of the memory are
preserved.
This layout is intended to be used as the initial layout for an image
whose contents are written by the host, and hence the data <strong class="purple">can</strong> be
written to memory immediately, without first executing a layout
transition.
Currently, <code>VK_IMAGE_LAYOUT_PREINITIALIZED</code> is only useful with
<a href="vkspec.html#glossary-linear-resource">linear</a> images because there is not a
standard layout defined for <code>VK_IMAGE_TILING_OPTIMAL</code> images.</p>
</li>
<li>
<p><code>VK_IMAGE_LAYOUT_GENERAL</code> supports all types of device access.</p>
</li>
<li>
<p><code>VK_IMAGE_LAYOUT_COLOR_ATTACHMENT_OPTIMAL</code> <strong class="purple">must</strong> only be used as a
color or resolve attachment in a <code>VkFramebuffer</code>.
This layout is valid only for image subresources of images created with
the <code>VK_IMAGE_USAGE_COLOR_ATTACHMENT_BIT</code> usage bit enabled.</p>
</li>
<li>
<p><code>VK_IMAGE_LAYOUT_DEPTH_STENCIL_ATTACHMENT_OPTIMAL</code> <strong class="purple">must</strong> only be
used as a depth/stencil
or depth/stencil resolve
attachment in a <code>VkFramebuffer</code>.
This layout is valid only for image subresources of images created with
the <code>VK_IMAGE_USAGE_DEPTH_STENCIL_ATTACHMENT_BIT</code> usage bit enabled.</p>
</li>
<li>
<p><code>VK_IMAGE_LAYOUT_DEPTH_STENCIL_READ_ONLY_OPTIMAL</code> <strong class="purple">must</strong> only be used
as a read-only depth/stencil attachment in a <code>VkFramebuffer</code> and/or
as a read-only image in a shader (which <strong class="purple">can</strong> be read as a sampled image,
combined image/sampler and/or input attachment).
This layout is valid only for image subresources of images created with
the <code>VK_IMAGE_USAGE_DEPTH_STENCIL_ATTACHMENT_BIT</code> usage bit enabled.
Only image views created with a <code>usage</code> value including
<code>VK_IMAGE_USAGE_SAMPLED_BIT</code> <strong class="purple">can</strong> be used as a sampled image or
combined image/sampler in a shader.
Similarly, only image views created with a <code>usage</code> value including
<code>VK_IMAGE_USAGE_INPUT_ATTACHMENT_BIT</code> <strong class="purple">can</strong> be used as input
attachments.</p>
</li>
<li>
<p><code>VK_IMAGE_LAYOUT_DEPTH_READ_ONLY_STENCIL_ATTACHMENT_OPTIMAL</code>: <strong class="purple">must</strong>
only be used as a depth/stencil attachment in a <code>VkFramebuffer</code>,
where the depth aspect is read-only, and/or as a read-only image in a
shader (which <strong class="purple">can</strong> be read as a sampled image, combined image/sampler
and/or input attachment) where only the depth aspect is accessed.
This layout is valid only for image subresources of images created with
the <code>VK_IMAGE_USAGE_DEPTH_STENCIL_ATTACHMENT_BIT</code> usage bit enabled.
Only image views created with a <code>usage</code> value including
<code>VK_IMAGE_USAGE_SAMPLED_BIT</code> <strong class="purple">can</strong> be used as a sampled image or
combined image/sampler in a shader.
Similarly, only image views created with a <code>usage</code> value including
<code>VK_IMAGE_USAGE_INPUT_ATTACHMENT_BIT</code> <strong class="purple">can</strong> be used as input
attachments.</p>
</li>
<li>
<p><code>VK_IMAGE_LAYOUT_DEPTH_ATTACHMENT_STENCIL_READ_ONLY_OPTIMAL</code>: <strong class="purple">must</strong>
only be used as a depth/stencil attachment in a <code>VkFramebuffer</code>,
where the stencil aspect is read-only, and/or as a read-only image in a
shader (which <strong class="purple">can</strong> be read as a sampled image, combined image/sampler
and/or input attachment) where only the stencil aspect is accessed.
This layout is valid only for image subresources of images created with
the <code>VK_IMAGE_USAGE_DEPTH_STENCIL_ATTACHMENT_BIT</code> usage bit enabled.
Only image views created with a <code>usage</code> value including
<code>VK_IMAGE_USAGE_SAMPLED_BIT</code> <strong class="purple">can</strong> be used as a sampled image or
combined image/sampler in a shader.
Similarly, only image views created with a <code>usage</code> value including
<code>VK_IMAGE_USAGE_INPUT_ATTACHMENT_BIT</code> <strong class="purple">can</strong> be used as input
attachments.</p>
</li>
<li>
<p><code>VK_IMAGE_LAYOUT_SHADER_READ_ONLY_OPTIMAL</code> <strong class="purple">must</strong> only be used as a
read-only image in a shader (which <strong class="purple">can</strong> be read as a sampled image,
combined image/sampler and/or input attachment).
This layout is valid only for image subresources of images created with
the <code>VK_IMAGE_USAGE_SAMPLED_BIT</code> or
<code>VK_IMAGE_USAGE_INPUT_ATTACHMENT_BIT</code> usage bit enabled.</p>
</li>
<li>
<p><code>VK_IMAGE_LAYOUT_TRANSFER_SRC_OPTIMAL</code> <strong class="purple">must</strong> only be used as a
source image of a transfer command (see the definition of
<a href="vkspec.html#synchronization-pipeline-stages-transfer"><code>VK_PIPELINE_STAGE_TRANSFER_BIT</code></a>).
This layout is valid only for image subresources of images created with
the <code>VK_IMAGE_USAGE_TRANSFER_SRC_BIT</code> usage bit enabled.</p>
</li>
<li>
<p><code>VK_IMAGE_LAYOUT_TRANSFER_DST_OPTIMAL</code> <strong class="purple">must</strong> only be used as a
destination image of a transfer command.
This layout is valid only for image subresources of images created with
the <code>VK_IMAGE_USAGE_TRANSFER_DST_BIT</code> usage bit enabled.</p>
</li>
<li>
<p><code>VK_IMAGE_LAYOUT_PRESENT_SRC_KHR</code> <strong class="purple">must</strong> only be used for presenting
a presentable image for display.
A swapchain&#8217;s image <strong class="purple">must</strong> be transitioned to this layout before calling
<a href="#vkQueuePresentKHR">vkQueuePresentKHR</a>, and <strong class="purple">must</strong> be transitioned away from this layout
after calling <a href="#vkAcquireNextImageKHR">vkAcquireNextImageKHR</a>.</p>
</li>
<li>
<p><code>VK_IMAGE_LAYOUT_SHARED_PRESENT_KHR</code> is valid only for shared
presentable images, and <strong class="purple">must</strong> be used for any usage the image supports.</p>
</li>
<li>
<p><code>VK_IMAGE_LAYOUT_SHADING_RATE_OPTIMAL_NV</code> <strong class="purple">must</strong> only be used as a
read-only <a href="vkspec.html#primsrast-shading-rate-image">shading-rate-image</a>.
This layout is valid only for image subresources of images created with
the <code>VK_IMAGE_USAGE_SHADING_RATE_IMAGE_BIT_NV</code> usage bit enabled.</p>
</li>
<li>
<p><code>VK_IMAGE_LAYOUT_FRAGMENT_DENSITY_MAP_OPTIMAL_EXT</code> <strong class="purple">must</strong> only be
used as a fragment density map attachment in a <code>VkRenderPass</code>.
This layout is valid only for image subresources of images created with
the <code>VK_IMAGE_USAGE_FRAGMENT_DENSITY_MAP_BIT_EXT</code> usage bit enabled.</p>
</li>
</ul>
</div>
<div class="paragraph">
<p>The layout of each image subresource is not a state of the image subresource
itself, but is rather a property of how the data in memory is organized, and
thus for each mechanism of accessing an image in the API the application
<strong class="purple">must</strong> specify a parameter or structure member that indicates which image
layout the image subresource(s) are considered to be in when the image will
be accessed.
For transfer commands, this is a parameter to the command (see <a href="vkspec.html#clears" class="bare">html/vkspec.html#clears</a>
and <a href="vkspec.html#copies" class="bare">html/vkspec.html#copies</a>).
For use as a framebuffer attachment, this is a member in the substructures
of the <code>VkRenderPassCreateInfo</code> (see <a href="vkspec.html#renderpass">Render Pass</a>).
For use in a descriptor set, this is a member in the
<code>VkDescriptorImageInfo</code> structure (see <a href="vkspec.html#descriptorsets-updates" class="bare">html/vkspec.html#descriptorsets-updates</a>).</p>
</div>
</div>
<div class="sect3">
<h4 id="_see_also_868">See Also</h4>
<div class="paragraph">
<p><a href="#VkAttachmentDescription">VkAttachmentDescription</a>, <a href="#VkAttachmentDescription2KHR">VkAttachmentDescription2KHR</a>, <a href="#VkAttachmentReference">VkAttachmentReference</a>, <a href="#VkAttachmentReference2KHR">VkAttachmentReference2KHR</a>, <a href="#VkDescriptorImageInfo">VkDescriptorImageInfo</a>, <a href="#VkImageCreateInfo">VkImageCreateInfo</a>, <a href="#VkImageMemoryBarrier">VkImageMemoryBarrier</a>, <a href="#vkCmdBindShadingRateImageNV">vkCmdBindShadingRateImageNV</a>, <a href="#vkCmdBlitImage">vkCmdBlitImage</a>, <a href="#vkCmdClearColorImage">vkCmdClearColorImage</a>, <a href="#vkCmdClearDepthStencilImage">vkCmdClearDepthStencilImage</a>, <a href="#vkCmdCopyBufferToImage">vkCmdCopyBufferToImage</a>, <a href="#vkCmdCopyImage">vkCmdCopyImage</a>, <a href="#vkCmdCopyImageToBuffer">vkCmdCopyImageToBuffer</a>, <a href="#vkCmdResolveImage">vkCmdResolveImage</a></p>
</div>
</div>
<div class="sect3">
<h4 id="_document_notes_868">Document Notes</h4>
<div class="paragraph">
<p>For more information, see the Vulkan Specification at URL</p>
</div>
<div class="paragraph">
<p><a href="https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VkImageLayout" class="bare">https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VkImageLayout</a></p>
</div>
<div class="paragraph">
<p>This page is extracted from the Vulkan Specification.
Fixes and changes should be made to the Specification, not directly.</p>
</div>
<div style="page-break-after: always;"></div>
</div>
</div>
<div class="sect2">
<h3 id="_vkimagetiling3">VkImageTiling(3)</h3>
<div class="sect3">
<h4 id="_name_869">Name</h4>
<div class="paragraph">
<p>VkImageTiling - Specifies the tiling arrangement of data in an image</p>
</div>
</div>
<div class="sect3">
<h4 id="_c_specification_869">C Specification</h4>
<div class="paragraph">
<p>Possible values of <a href="#VkImageCreateInfo">VkImageCreateInfo</a>::<code>tiling</code>, specifying the
tiling arrangement of texel blocks in an image, are:</p>
</div>
<div id="VkImageTiling" class="listingblock">
<div class="content">
<pre class="highlight"><code class="language-c++" data-lang="c++">typedef enum VkImageTiling {
    VK_IMAGE_TILING_OPTIMAL = 0,
    VK_IMAGE_TILING_LINEAR = 1,
    VK_IMAGE_TILING_DRM_FORMAT_MODIFIER_EXT = 1000158000,
    VK_IMAGE_TILING_MAX_ENUM = 0x7FFFFFFF
} VkImageTiling;</code></pre>
</div>
</div>
</div>
<div class="sect3">
<h4 id="_description_869">Description</h4>
<div class="ulist">
<ul>
<li>
<p><code>VK_IMAGE_TILING_OPTIMAL</code> specifies optimal tiling (texels are laid
out in an implementation-dependent arrangement, for more optimal memory
access).</p>
</li>
<li>
<p><code>VK_IMAGE_TILING_LINEAR</code> specifies linear tiling (texels are laid
out in memory in row-major order, possibly with some padding on each
row).</p>
</li>
<li>
<p><code>VK_IMAGE_TILING_DRM_FORMAT_MODIFIER_EXT</code> indicates that the image&#8217;s
tiling is defined by a <a href="vkspec.html#glossary-drm-format-modifier">Linux DRM format
modifier</a>.
The modifier is specified at image creation with
<a href="#VkImageDrmFormatModifierListCreateInfoEXT">VkImageDrmFormatModifierListCreateInfoEXT</a> or
<a href="#VkImageDrmFormatModifierExplicitCreateInfoEXT">VkImageDrmFormatModifierExplicitCreateInfoEXT</a>, and <strong class="purple">can</strong> be queried
with <a href="#vkGetImageDrmFormatModifierPropertiesEXT">vkGetImageDrmFormatModifierPropertiesEXT</a>.</p>
</li>
</ul>
</div>
</div>
<div class="sect3">
<h4 id="_see_also_869">See Also</h4>
<div class="paragraph">
<p><a href="#VkImageCreateInfo">VkImageCreateInfo</a>, <a href="#VkPhysicalDeviceImageFormatInfo2">VkPhysicalDeviceImageFormatInfo2</a>, <a href="#VkPhysicalDeviceSparseImageFormatInfo2">VkPhysicalDeviceSparseImageFormatInfo2</a>, <a href="#vkGetPhysicalDeviceExternalImageFormatPropertiesNV">vkGetPhysicalDeviceExternalImageFormatPropertiesNV</a>, <a href="#vkGetPhysicalDeviceImageFormatProperties">vkGetPhysicalDeviceImageFormatProperties</a>, <a href="#vkGetPhysicalDeviceSparseImageFormatProperties">vkGetPhysicalDeviceSparseImageFormatProperties</a></p>
</div>
</div>
<div class="sect3">
<h4 id="_document_notes_869">Document Notes</h4>
<div class="paragraph">
<p>For more information, see the Vulkan Specification at URL</p>
</div>
<div class="paragraph">
<p><a href="https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VkImageTiling" class="bare">https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VkImageTiling</a></p>
</div>
<div class="paragraph">
<p>This page is extracted from the Vulkan Specification.
Fixes and changes should be made to the Specification, not directly.</p>
</div>
<div style="page-break-after: always;"></div>
</div>
</div>
<div class="sect2">
<h3 id="_vkimagetype3">VkImageType(3)</h3>
<div class="sect3">
<h4 id="_name_870">Name</h4>
<div class="paragraph">
<p>VkImageType - Specifies the type of an image object</p>
</div>
</div>
<div class="sect3">
<h4 id="_c_specification_870">C Specification</h4>
<div class="paragraph">
<p>Possible values of <a href="#VkImageCreateInfo">VkImageCreateInfo</a>::<code>imageType</code>, specifying the
basic dimensionality of an image, are:</p>
</div>
<div id="VkImageType" class="listingblock">
<div class="content">
<pre class="highlight"><code class="language-c++" data-lang="c++">typedef enum VkImageType {
    VK_IMAGE_TYPE_1D = 0,
    VK_IMAGE_TYPE_2D = 1,
    VK_IMAGE_TYPE_3D = 2,
    VK_IMAGE_TYPE_MAX_ENUM = 0x7FFFFFFF
} VkImageType;</code></pre>
</div>
</div>
</div>
<div class="sect3">
<h4 id="_description_870">Description</h4>
<div class="ulist">
<ul>
<li>
<p><code>VK_IMAGE_TYPE_1D</code> specifies a one-dimensional image.</p>
</li>
<li>
<p><code>VK_IMAGE_TYPE_2D</code> specifies a two-dimensional image.</p>
</li>
<li>
<p><code>VK_IMAGE_TYPE_3D</code> specifies a three-dimensional image.</p>
</li>
</ul>
</div>
</div>
<div class="sect3">
<h4 id="_see_also_870">See Also</h4>
<div class="paragraph">
<p><a href="#VkImageCreateInfo">VkImageCreateInfo</a>, <a href="#VkPhysicalDeviceImageFormatInfo2">VkPhysicalDeviceImageFormatInfo2</a>, <a href="#VkPhysicalDeviceSparseImageFormatInfo2">VkPhysicalDeviceSparseImageFormatInfo2</a>, <a href="#vkGetPhysicalDeviceExternalImageFormatPropertiesNV">vkGetPhysicalDeviceExternalImageFormatPropertiesNV</a>, <a href="#vkGetPhysicalDeviceImageFormatProperties">vkGetPhysicalDeviceImageFormatProperties</a>, <a href="#vkGetPhysicalDeviceSparseImageFormatProperties">vkGetPhysicalDeviceSparseImageFormatProperties</a></p>
</div>
</div>
<div class="sect3">
<h4 id="_document_notes_870">Document Notes</h4>
<div class="paragraph">
<p>For more information, see the Vulkan Specification at URL</p>
</div>
<div class="paragraph">
<p><a href="https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VkImageType" class="bare">https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VkImageType</a></p>
</div>
<div class="paragraph">
<p>This page is extracted from the Vulkan Specification.
Fixes and changes should be made to the Specification, not directly.</p>
</div>
<div style="page-break-after: always;"></div>
</div>
</div>
<div class="sect2">
<h3 id="_vkimageusageflagbits3">VkImageUsageFlagBits(3)</h3>
<div class="sect3">
<h4 id="_name_871">Name</h4>
<div class="paragraph">
<p>VkImageUsageFlagBits - Bitmask specifying intended usage of an image</p>
</div>
</div>
<div class="sect3">
<h4 id="_c_specification_871">C Specification</h4>
<div class="paragraph">
<p>Bits which <strong class="purple">can</strong> be set in <a href="#VkImageCreateInfo">VkImageCreateInfo</a>::<code>usage</code>, specifying
intended usage of an image, are:</p>
</div>
<div id="VkImageUsageFlagBits" class="listingblock">
<div class="content">
<pre class="highlight"><code class="language-c++" data-lang="c++">typedef enum VkImageUsageFlagBits {
    VK_IMAGE_USAGE_TRANSFER_SRC_BIT = 0x00000001,
    VK_IMAGE_USAGE_TRANSFER_DST_BIT = 0x00000002,
    VK_IMAGE_USAGE_SAMPLED_BIT = 0x00000004,
    VK_IMAGE_USAGE_STORAGE_BIT = 0x00000008,
    VK_IMAGE_USAGE_COLOR_ATTACHMENT_BIT = 0x00000010,
    VK_IMAGE_USAGE_DEPTH_STENCIL_ATTACHMENT_BIT = 0x00000020,
    VK_IMAGE_USAGE_TRANSIENT_ATTACHMENT_BIT = 0x00000040,
    VK_IMAGE_USAGE_INPUT_ATTACHMENT_BIT = 0x00000080,
    VK_IMAGE_USAGE_SHADING_RATE_IMAGE_BIT_NV = 0x00000100,
    VK_IMAGE_USAGE_FRAGMENT_DENSITY_MAP_BIT_EXT = 0x00000200,
    VK_IMAGE_USAGE_FLAG_BITS_MAX_ENUM = 0x7FFFFFFF
} VkImageUsageFlagBits;</code></pre>
</div>
</div>
</div>
<div class="sect3">
<h4 id="_description_871">Description</h4>
<div class="ulist">
<ul>
<li>
<p><code>VK_IMAGE_USAGE_TRANSFER_SRC_BIT</code> specifies that the image <strong class="purple">can</strong> be
used as the source of a transfer command.</p>
</li>
<li>
<p><code>VK_IMAGE_USAGE_TRANSFER_DST_BIT</code> specifies that the image <strong class="purple">can</strong> be
used as the destination of a transfer command.</p>
</li>
<li>
<p><code>VK_IMAGE_USAGE_SAMPLED_BIT</code> specifies that the image <strong class="purple">can</strong> be used
to create a <code>VkImageView</code> suitable for occupying a
<code>VkDescriptorSet</code> slot either of type
<code>VK_DESCRIPTOR_TYPE_SAMPLED_IMAGE</code> or
<code>VK_DESCRIPTOR_TYPE_COMBINED_IMAGE_SAMPLER</code>, and be sampled by a
shader.</p>
</li>
<li>
<p><code>VK_IMAGE_USAGE_STORAGE_BIT</code> specifies that the image <strong class="purple">can</strong> be used
to create a <code>VkImageView</code> suitable for occupying a
<code>VkDescriptorSet</code> slot of type
<code>VK_DESCRIPTOR_TYPE_STORAGE_IMAGE</code>.</p>
</li>
<li>
<p><code>VK_IMAGE_USAGE_COLOR_ATTACHMENT_BIT</code> specifies that the image <strong class="purple">can</strong>
be used to create a <code>VkImageView</code> suitable for use as a color or
resolve attachment in a <code>VkFramebuffer</code>.</p>
</li>
<li>
<p><code>VK_IMAGE_USAGE_DEPTH_STENCIL_ATTACHMENT_BIT</code> specifies that the
image <strong class="purple">can</strong> be used to create a <code>VkImageView</code> suitable for use as a
depth/stencil
or depth/stencil resolve
attachment in a <code>VkFramebuffer</code>.</p>
</li>
<li>
<p><code>VK_IMAGE_USAGE_TRANSIENT_ATTACHMENT_BIT</code> specifies that the memory
bound to this image will have been allocated with the
<code>VK_MEMORY_PROPERTY_LAZILY_ALLOCATED_BIT</code> (see <a href="vkspec.html#memory" class="bare">html/vkspec.html#memory</a> for more
detail).
This bit <strong class="purple">can</strong> be set for any image that <strong class="purple">can</strong> be used to create a
<code>VkImageView</code> suitable for use as a color, resolve, depth/stencil,
or input attachment.</p>
</li>
<li>
<p><code>VK_IMAGE_USAGE_INPUT_ATTACHMENT_BIT</code> specifies that the image <strong class="purple">can</strong>
be used to create a <code>VkImageView</code> suitable for occupying
<code>VkDescriptorSet</code> slot of type
<code>VK_DESCRIPTOR_TYPE_INPUT_ATTACHMENT</code>; be read from a shader as an
input attachment; and be used as an input attachment in a framebuffer.</p>
</li>
<li>
<p><code>VK_IMAGE_USAGE_SHADING_RATE_IMAGE_BIT_NV</code> specifies that the image
<strong class="purple">can</strong> be used to create a <code>VkImageView</code> suitable for use as a
<a href="vkspec.html#primsrast-shading-rate-image">shading rate image</a>.</p>
</li>
</ul>
</div>
</div>
<div class="sect3">
<h4 id="_see_also_871">See Also</h4>
<div class="paragraph">
<p><a href="#VkImageUsageFlags">VkImageUsageFlags</a></p>
</div>
</div>
<div class="sect3">
<h4 id="_document_notes_871">Document Notes</h4>
<div class="paragraph">
<p>For more information, see the Vulkan Specification at URL</p>
</div>
<div class="paragraph">
<p><a href="https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VkImageUsageFlagBits" class="bare">https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VkImageUsageFlagBits</a></p>
</div>
<div class="paragraph">
<p>This page is extracted from the Vulkan Specification.
Fixes and changes should be made to the Specification, not directly.</p>
</div>
<div style="page-break-after: always;"></div>
</div>
</div>
<div class="sect2">
<h3 id="_vkimageviewcreateflagbits3">VkImageViewCreateFlagBits(3)</h3>
<div class="sect3">
<h4 id="_name_872">Name</h4>
<div class="paragraph">
<p>VkImageViewCreateFlagBits - Bitmask specifying additional parameters of an image view</p>
</div>
</div>
<div class="sect3">
<h4 id="_c_specification_872">C Specification</h4>
<div class="paragraph">
<p>Bits which <strong class="purple">can</strong> be set in <a href="#VkImageViewCreateInfo">VkImageViewCreateInfo</a>::<code>flags</code>,
specifying additional parameters of an image, are:</p>
</div>
<div id="VkImageViewCreateFlagBits" class="listingblock">
<div class="content">
<pre class="highlight"><code class="language-c++" data-lang="c++">typedef enum VkImageViewCreateFlagBits {
    VK_IMAGE_VIEW_CREATE_FRAGMENT_DENSITY_MAP_DYNAMIC_BIT_EXT = 0x00000001,
    VK_IMAGE_VIEW_CREATE_FLAG_BITS_MAX_ENUM = 0x7FFFFFFF
} VkImageViewCreateFlagBits;</code></pre>
</div>
</div>
</div>
<div class="sect3">
<h4 id="_description_872">Description</h4>
<div class="ulist">
<ul>
<li>
<p><code>VK_IMAGE_VIEW_CREATE_FRAGMENT_DENSITY_MAP_DYNAMIC_BIT_EXT</code>
prohibits the implementation from accessing the fragment density map by
the host during <code>vkCmdBeginRenderPass</code> as the contents are expected
to change after recording</p>
</li>
</ul>
</div>
</div>
<div class="sect3">
<h4 id="_see_also_872">See Also</h4>
<div class="paragraph">
<p><a href="#VkImageViewCreateFlags">VkImageViewCreateFlags</a></p>
</div>
</div>
<div class="sect3">
<h4 id="_document_notes_872">Document Notes</h4>
<div class="paragraph">
<p>For more information, see the Vulkan Specification at URL</p>
</div>
<div class="paragraph">
<p><a href="https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VkImageViewCreateFlagBits" class="bare">https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VkImageViewCreateFlagBits</a></p>
</div>
<div class="paragraph">
<p>This page is extracted from the Vulkan Specification.
Fixes and changes should be made to the Specification, not directly.</p>
</div>
<div style="page-break-after: always;"></div>
</div>
</div>
<div class="sect2">
<h3 id="_vkimageviewtype3">VkImageViewType(3)</h3>
<div class="sect3">
<h4 id="_name_873">Name</h4>
<div class="paragraph">
<p>VkImageViewType - Image view types</p>
</div>
</div>
<div class="sect3">
<h4 id="_c_specification_873">C Specification</h4>
<div class="paragraph">
<p>The types of image views that <strong class="purple">can</strong> be created are:</p>
</div>
<div id="VkImageViewType" class="listingblock">
<div class="content">
<pre class="highlight"><code class="language-c++" data-lang="c++">typedef enum VkImageViewType {
    VK_IMAGE_VIEW_TYPE_1D = 0,
    VK_IMAGE_VIEW_TYPE_2D = 1,
    VK_IMAGE_VIEW_TYPE_3D = 2,
    VK_IMAGE_VIEW_TYPE_CUBE = 3,
    VK_IMAGE_VIEW_TYPE_1D_ARRAY = 4,
    VK_IMAGE_VIEW_TYPE_2D_ARRAY = 5,
    VK_IMAGE_VIEW_TYPE_CUBE_ARRAY = 6,
    VK_IMAGE_VIEW_TYPE_MAX_ENUM = 0x7FFFFFFF
} VkImageViewType;</code></pre>
</div>
</div>
</div>
<div class="sect3">
<h4 id="_description_873">Description</h4>
<div class="paragraph">
<p>The exact image view type is partially implicit, based on the image&#8217;s type
and sample count, as well as the view creation parameters as described in
the <a href="vkspec.html#resources-image-views-compatibility">image view compatibility table</a>
for <a href="#vkCreateImageView">vkCreateImageView</a>.
This table also shows which SPIR-V <code>OpTypeImage</code> <code>Dim</code> and
<code>Arrayed</code> parameters correspond to each image view type.</p>
</div>
</div>
<div class="sect3">
<h4 id="_see_also_873">See Also</h4>
<div class="paragraph">
<p><a href="#VkImageViewCreateInfo">VkImageViewCreateInfo</a>, <a href="#VkPhysicalDeviceImageViewImageFormatInfoEXT">VkPhysicalDeviceImageViewImageFormatInfoEXT</a></p>
</div>
</div>
<div class="sect3">
<h4 id="_document_notes_873">Document Notes</h4>
<div class="paragraph">
<p>For more information, see the Vulkan Specification at URL</p>
</div>
<div class="paragraph">
<p><a href="https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VkImageViewType" class="bare">https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VkImageViewType</a></p>
</div>
<div class="paragraph">
<p>This page is extracted from the Vulkan Specification.
Fixes and changes should be made to the Specification, not directly.</p>
</div>
<div style="page-break-after: always;"></div>
</div>
</div>
<div class="sect2">
<h3 id="_vkindextype3">VkIndexType(3)</h3>
<div class="sect3">
<h4 id="_name_874">Name</h4>
<div class="paragraph">
<p>VkIndexType - Type of index buffer indices</p>
</div>
</div>
<div class="sect3">
<h4 id="_c_specification_874">C Specification</h4>
<div class="paragraph">
<p>Possible values of <a href="#vkCmdBindIndexBuffer">vkCmdBindIndexBuffer</a>::<code>indexType</code>, specifying
the size of indices, are:</p>
</div>
<div id="VkIndexType" class="listingblock">
<div class="content">
<pre class="highlight"><code class="language-c++" data-lang="c++">typedef enum VkIndexType {
    VK_INDEX_TYPE_UINT16 = 0,
    VK_INDEX_TYPE_UINT32 = 1,
    VK_INDEX_TYPE_NONE_NV = 1000165000,
    VK_INDEX_TYPE_MAX_ENUM = 0x7FFFFFFF
} VkIndexType;</code></pre>
</div>
</div>
</div>
<div class="sect3">
<h4 id="_description_874">Description</h4>
<div class="ulist">
<ul>
<li>
<p><code>VK_INDEX_TYPE_UINT16</code> specifies that indices are 16-bit unsigned
integer values.</p>
</li>
<li>
<p><code>VK_INDEX_TYPE_UINT32</code> specifies that indices are 32-bit unsigned
integer values.</p>
</li>
<li>
<p><code>VK_INDEX_TYPE_NONE_NV</code> specifies that no indices are provided.</p>
</li>
</ul>
</div>
</div>
<div class="sect3">
<h4 id="_see_also_874">See Also</h4>
<div class="paragraph">
<p><a href="#VkGeometryTrianglesNV">VkGeometryTrianglesNV</a>, <a href="#VkObjectTableIndexBufferEntryNVX">VkObjectTableIndexBufferEntryNVX</a>, <a href="#vkCmdBindIndexBuffer">vkCmdBindIndexBuffer</a></p>
</div>
</div>
<div class="sect3">
<h4 id="_document_notes_874">Document Notes</h4>
<div class="paragraph">
<p>For more information, see the Vulkan Specification at URL</p>
</div>
<div class="paragraph">
<p><a href="https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VkIndexType" class="bare">https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VkIndexType</a></p>
</div>
<div class="paragraph">
<p>This page is extracted from the Vulkan Specification.
Fixes and changes should be made to the Specification, not directly.</p>
</div>
<div style="page-break-after: always;"></div>
</div>
</div>
<div class="sect2">
<h3 id="_vkindirectcommandslayoutusageflagbitsnvx3">VkIndirectCommandsLayoutUsageFlagBitsNVX(3)</h3>
<div class="sect3">
<h4 id="_name_875">Name</h4>
<div class="paragraph">
<p>VkIndirectCommandsLayoutUsageFlagBitsNVX - Bitmask specifying allowed usage of an indirect commands layout</p>
</div>
</div>
<div class="sect3">
<h4 id="_c_specification_875">C Specification</h4>
<div class="paragraph">
<p>Bits which <strong class="purple">can</strong> be set in
<a href="#VkIndirectCommandsLayoutCreateInfoNVX">VkIndirectCommandsLayoutCreateInfoNVX</a>::<code>flags</code>, specifying usage
hints of an indirect command layout, are:</p>
</div>
<div id="VkIndirectCommandsLayoutUsageFlagBitsNVX" class="listingblock">
<div class="content">
<pre class="highlight"><code class="language-c++" data-lang="c++">typedef enum VkIndirectCommandsLayoutUsageFlagBitsNVX {
    VK_INDIRECT_COMMANDS_LAYOUT_USAGE_UNORDERED_SEQUENCES_BIT_NVX = 0x00000001,
    VK_INDIRECT_COMMANDS_LAYOUT_USAGE_SPARSE_SEQUENCES_BIT_NVX = 0x00000002,
    VK_INDIRECT_COMMANDS_LAYOUT_USAGE_EMPTY_EXECUTIONS_BIT_NVX = 0x00000004,
    VK_INDIRECT_COMMANDS_LAYOUT_USAGE_INDEXED_SEQUENCES_BIT_NVX = 0x00000008,
    VK_INDIRECT_COMMANDS_LAYOUT_USAGE_FLAG_BITS_MAX_ENUM_NVX = 0x7FFFFFFF
} VkIndirectCommandsLayoutUsageFlagBitsNVX;</code></pre>
</div>
</div>
</div>
<div class="sect3">
<h4 id="_description_875">Description</h4>
<div class="ulist">
<ul>
<li>
<p><code>VK_INDIRECT_COMMANDS_LAYOUT_USAGE_UNORDERED_SEQUENCES_BIT_NVX</code>
specifies that the processing of sequences <strong class="purple">can</strong> happen at an
implementation-dependent order, which is not guaranteed to be coherent
across multiple invocations.</p>
</li>
<li>
<p><code>VK_INDIRECT_COMMANDS_LAYOUT_USAGE_SPARSE_SEQUENCES_BIT_NVX</code>
specifies that there is likely a high difference between allocated
number of sequences and actually used.</p>
</li>
<li>
<p><code>VK_INDIRECT_COMMANDS_LAYOUT_USAGE_EMPTY_EXECUTIONS_BIT_NVX</code>
specifies that there are likely many draw or dispatch calls that are
zero-sized (zero grid dimension, no primitives to render).</p>
</li>
<li>
<p><code>VK_INDIRECT_COMMANDS_LAYOUT_USAGE_INDEXED_SEQUENCES_BIT_NVX</code>
specifies that the input data for the sequences is not implicitly
indexed from 0..sequencesUsed but a user provided <code>VkBuffer</code>
encoding the index is provided.</p>
</li>
</ul>
</div>
</div>
<div class="sect3">
<h4 id="_see_also_875">See Also</h4>
<div class="paragraph">
<p><a href="#VkIndirectCommandsLayoutUsageFlagsNVX">VkIndirectCommandsLayoutUsageFlagsNVX</a></p>
</div>
</div>
<div class="sect3">
<h4 id="_document_notes_875">Document Notes</h4>
<div class="paragraph">
<p>For more information, see the Vulkan Specification at URL</p>
</div>
<div class="paragraph">
<p><a href="https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VkIndirectCommandsLayoutUsageFlagBitsNVX" class="bare">https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VkIndirectCommandsLayoutUsageFlagBitsNVX</a></p>
</div>
<div class="paragraph">
<p>This page is extracted from the Vulkan Specification.
Fixes and changes should be made to the Specification, not directly.</p>
</div>
<div style="page-break-after: always;"></div>
</div>
</div>
<div class="sect2">
<h3 id="_vkindirectcommandstokentypenvx3">VkIndirectCommandsTokenTypeNVX(3)</h3>
<div class="sect3">
<h4 id="_name_876">Name</h4>
<div class="paragraph">
<p>VkIndirectCommandsTokenTypeNVX - Enum specifying</p>
</div>
</div>
<div class="sect3">
<h4 id="_c_specification_876">C Specification</h4>
<div class="paragraph">
<p>Possible values of those elements of the
<a href="#VkIndirectCommandsLayoutCreateInfoNVX">VkIndirectCommandsLayoutCreateInfoNVX</a>::<code>pTokens</code> array which
specify command tokens (other elements of the array specify command
parameters) are:</p>
</div>
<div id="VkIndirectCommandsTokenTypeNVX" class="listingblock">
<div class="content">
<pre class="highlight"><code class="language-c++" data-lang="c++">typedef enum VkIndirectCommandsTokenTypeNVX {
    VK_INDIRECT_COMMANDS_TOKEN_TYPE_PIPELINE_NVX = 0,
    VK_INDIRECT_COMMANDS_TOKEN_TYPE_DESCRIPTOR_SET_NVX = 1,
    VK_INDIRECT_COMMANDS_TOKEN_TYPE_INDEX_BUFFER_NVX = 2,
    VK_INDIRECT_COMMANDS_TOKEN_TYPE_VERTEX_BUFFER_NVX = 3,
    VK_INDIRECT_COMMANDS_TOKEN_TYPE_PUSH_CONSTANT_NVX = 4,
    VK_INDIRECT_COMMANDS_TOKEN_TYPE_DRAW_INDEXED_NVX = 5,
    VK_INDIRECT_COMMANDS_TOKEN_TYPE_DRAW_NVX = 6,
    VK_INDIRECT_COMMANDS_TOKEN_TYPE_DISPATCH_NVX = 7,
    VK_INDIRECT_COMMANDS_TOKEN_TYPE_MAX_ENUM_NVX = 0x7FFFFFFF
} VkIndirectCommandsTokenTypeNVX;</code></pre>
</div>
</div>
</div>
<div class="sect3">
<h4 id="_description_876">Description</h4>
<table class="tableblock frame-all grid-all" style="width: 80%;">
<caption class="title">Table 22. Supported indirect command tokens</caption>
<colgroup>
<col style="width: 67%;" />
<col style="width: 33%;" />
</colgroup>
<thead>
<tr>
<th class="tableblock halign-left valign-top">Token type</th>
<th class="tableblock halign-left valign-top">Equivalent command</th>
</tr>
</thead>
<tbody>
<tr>
<td class="tableblock halign-left valign-top"><p class="tableblock"><code>VK_INDIRECT_COMMANDS_TOKEN_TYPE_PIPELINE_NVX</code></p></td>
<td class="tableblock halign-left valign-top"><p class="tableblock"><code>vkCmdBindPipeline</code></p></td>
</tr>
<tr>
<td class="tableblock halign-left valign-top"><p class="tableblock"><code>VK_INDIRECT_COMMANDS_TOKEN_TYPE_DESCRIPTOR_SET_NVX</code></p></td>
<td class="tableblock halign-left valign-top"><p class="tableblock"><code>vkCmdBindDescriptorSets</code></p></td>
</tr>
<tr>
<td class="tableblock halign-left valign-top"><p class="tableblock"><code>VK_INDIRECT_COMMANDS_TOKEN_TYPE_INDEX_BUFFER_NVX</code></p></td>
<td class="tableblock halign-left valign-top"><p class="tableblock"><code>vkCmdBindIndexBuffer</code></p></td>
</tr>
<tr>
<td class="tableblock halign-left valign-top"><p class="tableblock"><code>VK_INDIRECT_COMMANDS_TOKEN_TYPE_VERTEX_BUFFER_NVX</code></p></td>
<td class="tableblock halign-left valign-top"><p class="tableblock"><code>vkCmdBindVertexBuffers</code></p></td>
</tr>
<tr>
<td class="tableblock halign-left valign-top"><p class="tableblock"><code>VK_INDIRECT_COMMANDS_TOKEN_TYPE_PUSH_CONSTANT_NVX</code></p></td>
<td class="tableblock halign-left valign-top"><p class="tableblock"><code>vkCmdPushConstants</code></p></td>
</tr>
<tr>
<td class="tableblock halign-left valign-top"><p class="tableblock"><code>VK_INDIRECT_COMMANDS_TOKEN_TYPE_DRAW_INDEXED_NVX</code></p></td>
<td class="tableblock halign-left valign-top"><p class="tableblock"><code>vkCmdDrawIndexedIndirect</code></p></td>
</tr>
<tr>
<td class="tableblock halign-left valign-top"><p class="tableblock"><code>VK_INDIRECT_COMMANDS_TOKEN_TYPE_DRAW_NVX</code></p></td>
<td class="tableblock halign-left valign-top"><p class="tableblock"><code>vkCmdDrawIndirect</code></p></td>
</tr>
<tr>
<td class="tableblock halign-left valign-top"><p class="tableblock"><code>VK_INDIRECT_COMMANDS_TOKEN_TYPE_DISPATCH_NVX</code></p></td>
<td class="tableblock halign-left valign-top"><p class="tableblock"><code>vkCmdDispatchIndirect</code></p></td>
</tr>
</tbody>
</table>
</div>
<div class="sect3">
<h4 id="_see_also_876">See Also</h4>
<div class="paragraph">
<p><a href="#VkIndirectCommandsLayoutTokenNVX">VkIndirectCommandsLayoutTokenNVX</a>, <a href="#VkIndirectCommandsTokenNVX">VkIndirectCommandsTokenNVX</a></p>
</div>
</div>
<div class="sect3">
<h4 id="_document_notes_876">Document Notes</h4>
<div class="paragraph">
<p>For more information, see the Vulkan Specification at URL</p>
</div>
<div class="paragraph">
<p><a href="https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VkIndirectCommandsTokenTypeNVX" class="bare">https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VkIndirectCommandsTokenTypeNVX</a></p>
</div>
<div class="paragraph">
<p>This page is extracted from the Vulkan Specification.
Fixes and changes should be made to the Specification, not directly.</p>
</div>
<div style="page-break-after: always;"></div>
</div>
</div>
<div class="sect2">
<h3 id="_vkinternalallocationtype3">VkInternalAllocationType(3)</h3>
<div class="sect3">
<h4 id="_name_877">Name</h4>
<div class="paragraph">
<p>VkInternalAllocationType - Allocation type</p>
</div>
</div>
<div class="sect3">
<h4 id="_c_specification_877">C Specification</h4>
<div class="paragraph">
<p>The <code>allocationType</code> parameter to the <code>pfnInternalAllocation</code> and
<code>pfnInternalFree</code> functions <strong class="purple">may</strong> be one of the following values:</p>
</div>
<div id="VkInternalAllocationType" class="listingblock">
<div class="content">
<pre class="highlight"><code class="language-c++" data-lang="c++">typedef enum VkInternalAllocationType {
    VK_INTERNAL_ALLOCATION_TYPE_EXECUTABLE = 0,
    VK_INTERNAL_ALLOCATION_TYPE_MAX_ENUM = 0x7FFFFFFF
} VkInternalAllocationType;</code></pre>
</div>
</div>
</div>
<div class="sect3">
<h4 id="_description_877">Description</h4>
<div class="ulist">
<ul>
<li>
<p><code>VK_INTERNAL_ALLOCATION_TYPE_EXECUTABLE</code> specifies that the
allocation is intended for execution by the host.</p>
</li>
</ul>
</div>
</div>
<div class="sect3">
<h4 id="_see_also_877">See Also</h4>
<div class="paragraph">
<p><a href="#PFN_vkInternalAllocationNotification">PFN_vkInternalAllocationNotification</a>, <a href="#PFN_vkInternalFreeNotification">PFN_vkInternalFreeNotification</a></p>
</div>
</div>
<div class="sect3">
<h4 id="_document_notes_877">Document Notes</h4>
<div class="paragraph">
<p>For more information, see the Vulkan Specification at URL</p>
</div>
<div class="paragraph">
<p><a href="https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VkInternalAllocationType" class="bare">https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VkInternalAllocationType</a></p>
</div>
<div class="paragraph">
<p>This page is extracted from the Vulkan Specification.
Fixes and changes should be made to the Specification, not directly.</p>
</div>
<div style="page-break-after: always;"></div>
</div>
</div>
<div class="sect2">
<h3 id="_vklogicop3">VkLogicOp(3)</h3>
<div class="sect3">
<h4 id="_name_878">Name</h4>
<div class="paragraph">
<p>VkLogicOp - Framebuffer logical operations</p>
</div>
</div>
<div class="sect3">
<h4 id="_c_specification_878">C Specification</h4>
<div class="paragraph">
<p>Logical operations are controlled by the <code>logicOpEnable</code> and
<code>logicOp</code> members of <a href="#VkPipelineColorBlendStateCreateInfo">VkPipelineColorBlendStateCreateInfo</a>.
If <code>logicOpEnable</code> is <code>VK_TRUE</code>, then a logical operation selected
by <code>logicOp</code> is applied between each color attachment and the fragment&#8217;s
corresponding output value, and blending of all attachments is treated as if
it were disabled.
Any attachments using color formats for which logical operations are not
supported simply pass through the color values unmodified.
The logical operation is applied independently for each of the red, green,
blue, and alpha components.
The <code>logicOp</code> is selected from the following operations:</p>
</div>
<div id="VkLogicOp" class="listingblock">
<div class="content">
<pre class="highlight"><code class="language-c++" data-lang="c++">typedef enum VkLogicOp {
    VK_LOGIC_OP_CLEAR = 0,
    VK_LOGIC_OP_AND = 1,
    VK_LOGIC_OP_AND_REVERSE = 2,
    VK_LOGIC_OP_COPY = 3,
    VK_LOGIC_OP_AND_INVERTED = 4,
    VK_LOGIC_OP_NO_OP = 5,
    VK_LOGIC_OP_XOR = 6,
    VK_LOGIC_OP_OR = 7,
    VK_LOGIC_OP_NOR = 8,
    VK_LOGIC_OP_EQUIVALENT = 9,
    VK_LOGIC_OP_INVERT = 10,
    VK_LOGIC_OP_OR_REVERSE = 11,
    VK_LOGIC_OP_COPY_INVERTED = 12,
    VK_LOGIC_OP_OR_INVERTED = 13,
    VK_LOGIC_OP_NAND = 14,
    VK_LOGIC_OP_SET = 15,
    VK_LOGIC_OP_MAX_ENUM = 0x7FFFFFFF
} VkLogicOp;</code></pre>
</div>
</div>
</div>
<div class="sect3">
<h4 id="_description_878">Description</h4>
<div style="page-break-after: always;"></div>
<div class="paragraph">
<p>The logical operations supported by Vulkan are summarized in the following
table in which</p>
</div>
<div class="ulist">
<ul>
<li>
<p><span class="eq">¬</span> is bitwise invert,</p>
</li>
<li>
<p><span class="eq">∧</span> is bitwise and,</p>
</li>
<li>
<p><span class="eq">∨</span> is bitwise or,</p>
</li>
<li>
<p><span class="eq">⊕</span> is bitwise exclusive or,</p>
</li>
<li>
<p><span class="eq">s</span> is the fragment&#8217;s <span class="eq">R<sub>s0</sub>, G<sub>s0</sub>, B<sub>s0</sub></span> or <span class="eq">A<sub>s0</sub></span>
component value for the fragment output corresponding to the color
attachment being updated, and</p>
</li>
<li>
<p><span class="eq">d</span> is the color attachment&#8217;s <span class="eq">R, G, B</span> or <span class="eq">A</span> component
value:</p>
</li>
</ul>
</div>
<table class="tableblock frame-all grid-all" style="width: 75%;">
<caption class="title">Table 23. Logical Operations</caption>
<colgroup>
<col style="width: 50%;" />
<col style="width: 50%;" />
</colgroup>
<thead>
<tr>
<th class="tableblock halign-left valign-top">Mode</th>
<th class="tableblock halign-left valign-top">Operation</th>
</tr>
</thead>
<tbody>
<tr>
<td class="tableblock halign-left valign-top"><p class="tableblock"><code>VK_LOGIC_OP_CLEAR</code></p></td>
<td class="tableblock halign-left valign-top"><p class="tableblock"><span class="eq">0</span></p></td>
</tr>
<tr>
<td class="tableblock halign-left valign-top"><p class="tableblock"><code>VK_LOGIC_OP_AND</code></p></td>
<td class="tableblock halign-left valign-top"><p class="tableblock"><span class="eq">s ∧ d</span></p></td>
</tr>
<tr>
<td class="tableblock halign-left valign-top"><p class="tableblock"><code>VK_LOGIC_OP_AND_REVERSE</code></p></td>
<td class="tableblock halign-left valign-top"><p class="tableblock"><span class="eq">s ∧ ¬ d</span></p></td>
</tr>
<tr>
<td class="tableblock halign-left valign-top"><p class="tableblock"><code>VK_LOGIC_OP_COPY</code></p></td>
<td class="tableblock halign-left valign-top"><p class="tableblock"><span class="eq">s</span></p></td>
</tr>
<tr>
<td class="tableblock halign-left valign-top"><p class="tableblock"><code>VK_LOGIC_OP_AND_INVERTED</code></p></td>
<td class="tableblock halign-left valign-top"><p class="tableblock"><span class="eq">¬ s ∧ d</span></p></td>
</tr>
<tr>
<td class="tableblock halign-left valign-top"><p class="tableblock"><code>VK_LOGIC_OP_NO_OP</code></p></td>
<td class="tableblock halign-left valign-top"><p class="tableblock"><span class="eq">d</span></p></td>
</tr>
<tr>
<td class="tableblock halign-left valign-top"><p class="tableblock"><code>VK_LOGIC_OP_XOR</code></p></td>
<td class="tableblock halign-left valign-top"><p class="tableblock"><span class="eq">s ⊕ d</span></p></td>
</tr>
<tr>
<td class="tableblock halign-left valign-top"><p class="tableblock"><code>VK_LOGIC_OP_OR</code></p></td>
<td class="tableblock halign-left valign-top"><p class="tableblock"><span class="eq">s ∨ d</span></p></td>
</tr>
<tr>
<td class="tableblock halign-left valign-top"><p class="tableblock"><code>VK_LOGIC_OP_NOR</code></p></td>
<td class="tableblock halign-left valign-top"><p class="tableblock"><span class="eq">¬ (s ∨ d)</span></p></td>
</tr>
<tr>
<td class="tableblock halign-left valign-top"><p class="tableblock"><code>VK_LOGIC_OP_EQUIVALENT</code></p></td>
<td class="tableblock halign-left valign-top"><p class="tableblock"><span class="eq">¬ (s ⊕ d)</span></p></td>
</tr>
<tr>
<td class="tableblock halign-left valign-top"><p class="tableblock"><code>VK_LOGIC_OP_INVERT</code></p></td>
<td class="tableblock halign-left valign-top"><p class="tableblock"><span class="eq">¬ d</span></p></td>
</tr>
<tr>
<td class="tableblock halign-left valign-top"><p class="tableblock"><code>VK_LOGIC_OP_OR_REVERSE</code></p></td>
<td class="tableblock halign-left valign-top"><p class="tableblock"><span class="eq">s ∨ ¬ d</span></p></td>
</tr>
<tr>
<td class="tableblock halign-left valign-top"><p class="tableblock"><code>VK_LOGIC_OP_COPY_INVERTED</code></p></td>
<td class="tableblock halign-left valign-top"><p class="tableblock"><span class="eq">¬ s</span></p></td>
</tr>
<tr>
<td class="tableblock halign-left valign-top"><p class="tableblock"><code>VK_LOGIC_OP_OR_INVERTED</code></p></td>
<td class="tableblock halign-left valign-top"><p class="tableblock"><span class="eq">¬ s ∨ d</span></p></td>
</tr>
<tr>
<td class="tableblock halign-left valign-top"><p class="tableblock"><code>VK_LOGIC_OP_NAND</code></p></td>
<td class="tableblock halign-left valign-top"><p class="tableblock"><span class="eq">¬ (s ∧ d)</span></p></td>
</tr>
<tr>
<td class="tableblock halign-left valign-top"><p class="tableblock"><code>VK_LOGIC_OP_SET</code></p></td>
<td class="tableblock halign-left valign-top"><p class="tableblock">all 1s</p></td>
</tr>
</tbody>
</table>
<div class="paragraph">
<p>The result of the logical operation is then written to the color attachment
as controlled by the component write mask, described in
<a href="vkspec.html#framebuffer-blendoperations">Blend Operations</a>.</p>
</div>
</div>
<div class="sect3">
<h4 id="_see_also_878">See Also</h4>
<div class="paragraph">
<p><a href="#VkPipelineColorBlendStateCreateInfo">VkPipelineColorBlendStateCreateInfo</a></p>
</div>
</div>
<div class="sect3">
<h4 id="_document_notes_878">Document Notes</h4>
<div class="paragraph">
<p>For more information, see the Vulkan Specification at URL</p>
</div>
<div class="paragraph">
<p><a href="https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VkLogicOp" class="bare">https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VkLogicOp</a></p>
</div>
<div class="paragraph">
<p>This page is extracted from the Vulkan Specification.
Fixes and changes should be made to the Specification, not directly.</p>
</div>
<div style="page-break-after: always;"></div>
</div>
</div>
<div class="sect2">
<h3 id="_vkmemoryallocateflagbits3">VkMemoryAllocateFlagBits(3)</h3>
<div class="sect3">
<h4 id="_name_879">Name</h4>
<div class="paragraph">
<p>VkMemoryAllocateFlagBits - Bitmask specifying flags for a device memory allocation</p>
</div>
</div>
<div class="sect3">
<h4 id="_c_specification_879">C Specification</h4>
<div class="paragraph">
<p>Bits which <strong class="purple">can</strong> be set in <a href="#VkMemoryAllocateFlagsInfo">VkMemoryAllocateFlagsInfo</a>::<code>flags</code>,
controlling device memory allocation, are:</p>
</div>
<div id="VkMemoryAllocateFlagBits" class="listingblock">
<div class="content">
<pre class="highlight"><code class="language-c++" data-lang="c++">typedef enum VkMemoryAllocateFlagBits {
    VK_MEMORY_ALLOCATE_DEVICE_MASK_BIT = 0x00000001,
    VK_MEMORY_ALLOCATE_DEVICE_MASK_BIT_KHR = VK_MEMORY_ALLOCATE_DEVICE_MASK_BIT,
    VK_MEMORY_ALLOCATE_FLAG_BITS_MAX_ENUM = 0x7FFFFFFF
} VkMemoryAllocateFlagBits;</code></pre>
</div>
</div>
<div class="paragraph">
<p>or the equivalent</p>
</div>
<div id="VkMemoryAllocateFlagBitsKHR" class="listingblock">
<div class="content">
<pre class="highlight"><code class="language-c++" data-lang="c++">typedef VkMemoryAllocateFlagBits VkMemoryAllocateFlagBitsKHR;</code></pre>
</div>
</div>
</div>
<div class="sect3">
<h4 id="_description_879">Description</h4>
<div class="ulist">
<ul>
<li>
<p><code>VK_MEMORY_ALLOCATE_DEVICE_MASK_BIT</code> specifies that memory will be
allocated for the devices in
<a href="#VkMemoryAllocateFlagsInfo">VkMemoryAllocateFlagsInfo</a>::<code>deviceMask</code>.</p>
</li>
</ul>
</div>
</div>
<div class="sect3">
<h4 id="_see_also_879">See Also</h4>
<div class="paragraph">
<p><a href="#VkMemoryAllocateFlags">VkMemoryAllocateFlags</a></p>
</div>
</div>
<div class="sect3">
<h4 id="_document_notes_879">Document Notes</h4>
<div class="paragraph">
<p>For more information, see the Vulkan Specification at URL</p>
</div>
<div class="paragraph">
<p><a href="https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VkMemoryAllocateFlagBits" class="bare">https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VkMemoryAllocateFlagBits</a></p>
</div>
<div class="paragraph">
<p>This page is extracted from the Vulkan Specification.
Fixes and changes should be made to the Specification, not directly.</p>
</div>
<div style="page-break-after: always;"></div>
</div>
</div>
<div class="sect2">
<h3 id="_vkmemoryheapflagbits3">VkMemoryHeapFlagBits(3)</h3>
<div class="sect3">
<h4 id="_name_880">Name</h4>
<div class="paragraph">
<p>VkMemoryHeapFlagBits - Bitmask specifying attribute flags for a heap</p>
</div>
</div>
<div class="sect3">
<h4 id="_c_specification_880">C Specification</h4>
<div class="paragraph">
<p>Bits which <strong class="purple">may</strong> be set in <a href="#VkMemoryHeap">VkMemoryHeap</a>::<code>flags</code>, indicating
attribute flags for the heap, are:</p>
</div>
<div id="VkMemoryHeapFlagBits" class="listingblock">
<div class="content">
<pre class="highlight"><code class="language-c++" data-lang="c++">typedef enum VkMemoryHeapFlagBits {
    VK_MEMORY_HEAP_DEVICE_LOCAL_BIT = 0x00000001,
    VK_MEMORY_HEAP_MULTI_INSTANCE_BIT = 0x00000002,
    VK_MEMORY_HEAP_MULTI_INSTANCE_BIT_KHR = VK_MEMORY_HEAP_MULTI_INSTANCE_BIT,
    VK_MEMORY_HEAP_FLAG_BITS_MAX_ENUM = 0x7FFFFFFF
} VkMemoryHeapFlagBits;</code></pre>
</div>
</div>
</div>
<div class="sect3">
<h4 id="_description_880">Description</h4>
<div class="ulist">
<ul>
<li>
<p><code>VK_MEMORY_HEAP_DEVICE_LOCAL_BIT</code> specifies that the heap
corresponds to device local memory.
Device local memory <strong class="purple">may</strong> have different performance characteristics than
host local memory, and <strong class="purple">may</strong> support different memory property flags.</p>
</li>
<li>
<p><code>VK_MEMORY_HEAP_MULTI_INSTANCE_BIT</code> specifies that in a logical
device representing more than one physical device, there is a
per-physical device instance of the heap memory.
By default, an allocation from such a heap will be replicated to each
physical device&#8217;s instance of the heap.</p>
</li>
</ul>
</div>
</div>
<div class="sect3">
<h4 id="_see_also_880">See Also</h4>
<div class="paragraph">
<p><a href="#VkMemoryHeapFlags">VkMemoryHeapFlags</a></p>
</div>
</div>
<div class="sect3">
<h4 id="_document_notes_880">Document Notes</h4>
<div class="paragraph">
<p>For more information, see the Vulkan Specification at URL</p>
</div>
<div class="paragraph">
<p><a href="https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VkMemoryHeapFlagBits" class="bare">https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VkMemoryHeapFlagBits</a></p>
</div>
<div class="paragraph">
<p>This page is extracted from the Vulkan Specification.
Fixes and changes should be made to the Specification, not directly.</p>
</div>
<div style="page-break-after: always;"></div>
</div>
</div>
<div class="sect2">
<h3 id="_vkmemoryoverallocationbehavioramd3">VkMemoryOverallocationBehaviorAMD(3)</h3>
<div class="sect3">
<h4 id="_name_881">Name</h4>
<div class="paragraph">
<p>VkMemoryOverallocationBehaviorAMD - Specify memory overallocation behavior</p>
</div>
</div>
<div class="sect3">
<h4 id="_c_specification_881">C Specification</h4>
<div class="paragraph">
<p>Possible values for
<a href="#VkDeviceMemoryOverallocationCreateInfoAMD">VkDeviceMemoryOverallocationCreateInfoAMD</a>::overallocationBehavior
include:</p>
</div>
<div id="VkMemoryOverallocationBehaviorAMD" class="listingblock">
<div class="content">
<pre class="highlight"><code class="language-c++" data-lang="c++">typedef enum VkMemoryOverallocationBehaviorAMD {
    VK_MEMORY_OVERALLOCATION_BEHAVIOR_DEFAULT_AMD = 0,
    VK_MEMORY_OVERALLOCATION_BEHAVIOR_ALLOWED_AMD = 1,
    VK_MEMORY_OVERALLOCATION_BEHAVIOR_DISALLOWED_AMD = 2,
    VK_MEMORY_OVERALLOCATION_BEHAVIOR_MAX_ENUM_AMD = 0x7FFFFFFF
} VkMemoryOverallocationBehaviorAMD;</code></pre>
</div>
</div>
</div>
<div class="sect3">
<h4 id="_description_881">Description</h4>
<div class="ulist">
<ul>
<li>
<p><code>VK_MEMORY_OVERALLOCATION_BEHAVIOR_DEFAULT_AMD</code> lets the
implementation decide if overallocation should be allowed.</p>
</li>
<li>
<p><code>VK_MEMORY_OVERALLOCATION_BEHAVIOR_ALLOWED_AMD</code> specifies
overallocation is allowed if platform permits.</p>
</li>
<li>
<p><code>VK_MEMORY_OVERALLOCATION_BEHAVIOR_DISALLOWED_AMD</code> specifies the
application is not allowed to allocate device memory beyond the heap
sizes reported by <a href="#VkPhysicalDeviceMemoryProperties">VkPhysicalDeviceMemoryProperties</a>.
Allocations that are not explicitly made by the application within the
scope of the Vulkan instance are not accounted for.</p>
</li>
</ul>
</div>
</div>
<div class="sect3">
<h4 id="_see_also_881">See Also</h4>
<div class="paragraph">
<p><a href="#VkDeviceMemoryOverallocationCreateInfoAMD">VkDeviceMemoryOverallocationCreateInfoAMD</a></p>
</div>
</div>
<div class="sect3">
<h4 id="_document_notes_881">Document Notes</h4>
<div class="paragraph">
<p>For more information, see the Vulkan Specification at URL</p>
</div>
<div class="paragraph">
<p><a href="https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VkMemoryOverallocationBehaviorAMD" class="bare">https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VkMemoryOverallocationBehaviorAMD</a></p>
</div>
<div class="paragraph">
<p>This page is extracted from the Vulkan Specification.
Fixes and changes should be made to the Specification, not directly.</p>
</div>
<div style="page-break-after: always;"></div>
</div>
</div>
<div class="sect2">
<h3 id="_vkmemorypropertyflagbits3">VkMemoryPropertyFlagBits(3)</h3>
<div class="sect3">
<h4 id="_name_882">Name</h4>
<div class="paragraph">
<p>VkMemoryPropertyFlagBits - Bitmask specifying properties for a memory type</p>
</div>
</div>
<div class="sect3">
<h4 id="_c_specification_882">C Specification</h4>
<div class="paragraph">
<p>Bits which <strong class="purple">may</strong> be set in <a href="#VkMemoryType">VkMemoryType</a>::<code>propertyFlags</code>,
indicating properties of a memory heap, are:</p>
</div>
<div id="VkMemoryPropertyFlagBits" class="listingblock">
<div class="content">
<pre class="highlight"><code class="language-c++" data-lang="c++">typedef enum VkMemoryPropertyFlagBits {
    VK_MEMORY_PROPERTY_DEVICE_LOCAL_BIT = 0x00000001,
    VK_MEMORY_PROPERTY_HOST_VISIBLE_BIT = 0x00000002,
    VK_MEMORY_PROPERTY_HOST_COHERENT_BIT = 0x00000004,
    VK_MEMORY_PROPERTY_HOST_CACHED_BIT = 0x00000008,
    VK_MEMORY_PROPERTY_LAZILY_ALLOCATED_BIT = 0x00000010,
    VK_MEMORY_PROPERTY_PROTECTED_BIT = 0x00000020,
    VK_MEMORY_PROPERTY_FLAG_BITS_MAX_ENUM = 0x7FFFFFFF
} VkMemoryPropertyFlagBits;</code></pre>
</div>
</div>
</div>
<div class="sect3">
<h4 id="_description_882">Description</h4>
<div class="ulist">
<ul>
<li>
<p><code>VK_MEMORY_PROPERTY_DEVICE_LOCAL_BIT</code> bit specifies that memory
allocated with this type is the most efficient for device access.
This property will be set if and only if the memory type belongs to a
heap with the <code>VK_MEMORY_HEAP_DEVICE_LOCAL_BIT</code> set.</p>
</li>
<li>
<p><code>VK_MEMORY_PROPERTY_HOST_VISIBLE_BIT</code> bit specifies that memory
allocated with this type <strong class="purple">can</strong> be mapped for host access using
<a href="#vkMapMemory">vkMapMemory</a>.</p>
</li>
<li>
<p><code>VK_MEMORY_PROPERTY_HOST_COHERENT_BIT</code> bit specifies that the host
cache management commands <a href="#vkFlushMappedMemoryRanges">vkFlushMappedMemoryRanges</a> and
<a href="#vkInvalidateMappedMemoryRanges">vkInvalidateMappedMemoryRanges</a> are not needed to flush host writes
to the device or make device writes visible to the host, respectively.</p>
</li>
<li>
<p><code>VK_MEMORY_PROPERTY_HOST_CACHED_BIT</code> bit specifies that memory
allocated with this type is cached on the host.
Host memory accesses to uncached memory are slower than to cached
memory, however uncached memory is always host coherent.</p>
</li>
<li>
<p><code>VK_MEMORY_PROPERTY_LAZILY_ALLOCATED_BIT</code> bit specifies that the
memory type only allows device access to the memory.
Memory types <strong class="purple">must</strong> not have both
<code>VK_MEMORY_PROPERTY_LAZILY_ALLOCATED_BIT</code> and
<code>VK_MEMORY_PROPERTY_HOST_VISIBLE_BIT</code> set.
Additionally, the object&#8217;s backing memory <strong class="purple">may</strong> be provided by the
implementation lazily as specified in <a href="vkspec.html#memory-device-lazy_allocation">Lazily Allocated Memory</a>.</p>
</li>
<li>
<p><code>VK_MEMORY_PROPERTY_PROTECTED_BIT</code> bit specifies that the memory
type only allows device access to the memory, and allows protected queue
operations to access the memory.
Memory types <strong class="purple">must</strong> not have <code>VK_MEMORY_PROPERTY_PROTECTED_BIT</code> set
and any of <code>VK_MEMORY_PROPERTY_HOST_VISIBLE_BIT</code> set, or
<code>VK_MEMORY_PROPERTY_HOST_COHERENT_BIT</code> set, or
<code>VK_MEMORY_PROPERTY_HOST_CACHED_BIT</code> set.</p>
</li>
</ul>
</div>
</div>
<div class="sect3">
<h4 id="_see_also_882">See Also</h4>
<div class="paragraph">
<p><a href="#VkMemoryPropertyFlags">VkMemoryPropertyFlags</a></p>
</div>
</div>
<div class="sect3">
<h4 id="_document_notes_882">Document Notes</h4>
<div class="paragraph">
<p>For more information, see the Vulkan Specification at URL</p>
</div>
<div class="paragraph">
<p><a href="https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VkMemoryPropertyFlagBits" class="bare">https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VkMemoryPropertyFlagBits</a></p>
</div>
<div class="paragraph">
<p>This page is extracted from the Vulkan Specification.
Fixes and changes should be made to the Specification, not directly.</p>
</div>
<div style="page-break-after: always;"></div>
</div>
</div>
<div class="sect2">
<h3 id="_vkobjectentrytypenvx3">VkObjectEntryTypeNVX(3)</h3>
<div class="sect3">
<h4 id="_name_883">Name</h4>
<div class="paragraph">
<p>VkObjectEntryTypeNVX - Enum specifying object table entry type</p>
</div>
</div>
<div class="sect3">
<h4 id="_c_specification_883">C Specification</h4>
<div class="paragraph">
<p>Possible values of elements of the
<a href="#VkObjectTableCreateInfoNVX">VkObjectTableCreateInfoNVX</a>::<code>pObjectEntryTypes</code> array, specifying
the entry type of a configuration, are:</p>
</div>
<div id="VkObjectEntryTypeNVX" class="listingblock">
<div class="content">
<pre class="highlight"><code class="language-c++" data-lang="c++">typedef enum VkObjectEntryTypeNVX {
    VK_OBJECT_ENTRY_TYPE_DESCRIPTOR_SET_NVX = 0,
    VK_OBJECT_ENTRY_TYPE_PIPELINE_NVX = 1,
    VK_OBJECT_ENTRY_TYPE_INDEX_BUFFER_NVX = 2,
    VK_OBJECT_ENTRY_TYPE_VERTEX_BUFFER_NVX = 3,
    VK_OBJECT_ENTRY_TYPE_PUSH_CONSTANT_NVX = 4,
    VK_OBJECT_ENTRY_TYPE_MAX_ENUM_NVX = 0x7FFFFFFF
} VkObjectEntryTypeNVX;</code></pre>
</div>
</div>
</div>
<div class="sect3">
<h4 id="_description_883">Description</h4>
<div class="ulist">
<ul>
<li>
<p><code>VK_OBJECT_ENTRY_TYPE_DESCRIPTOR_SET_NVX</code> specifies a
<code>VkDescriptorSet</code> resource entry that is registered via
<code>VkObjectTableDescriptorSetEntryNVX</code>.</p>
</li>
<li>
<p><code>VK_OBJECT_ENTRY_TYPE_PIPELINE_NVX</code> specifies a <code>VkPipeline</code>
resource entry that is registered via
<code>VkObjectTablePipelineEntryNVX</code>.</p>
</li>
<li>
<p><code>VK_OBJECT_ENTRY_TYPE_INDEX_BUFFER_NVX</code> specifies a <code>VkBuffer</code>
resource entry that is registered via
<code>VkObjectTableIndexBufferEntryNVX</code>.</p>
</li>
<li>
<p><code>VK_OBJECT_ENTRY_TYPE_VERTEX_BUFFER_NVX</code> specifies a <code>VkBuffer</code>
resource entry that is registered via
<code>VkObjectTableVertexBufferEntryNVX</code>.</p>
</li>
<li>
<p><code>VK_OBJECT_ENTRY_TYPE_PUSH_CONSTANT_NVX</code> specifies the resource
entry is registered via <code>VkObjectTablePushConstantEntryNVX</code>.</p>
</li>
</ul>
</div>
</div>
<div class="sect3">
<h4 id="_see_also_883">See Also</h4>
<div class="paragraph">
<p><a href="#VkObjectTableCreateInfoNVX">VkObjectTableCreateInfoNVX</a>, <a href="#VkObjectTableDescriptorSetEntryNVX">VkObjectTableDescriptorSetEntryNVX</a>, <a href="#VkObjectTableEntryNVX">VkObjectTableEntryNVX</a>, <a href="#VkObjectTableIndexBufferEntryNVX">VkObjectTableIndexBufferEntryNVX</a>, <a href="#VkObjectTablePipelineEntryNVX">VkObjectTablePipelineEntryNVX</a>, <a href="#VkObjectTablePushConstantEntryNVX">VkObjectTablePushConstantEntryNVX</a>, <a href="#VkObjectTableVertexBufferEntryNVX">VkObjectTableVertexBufferEntryNVX</a>, <a href="#vkUnregisterObjectsNVX">vkUnregisterObjectsNVX</a></p>
</div>
</div>
<div class="sect3">
<h4 id="_document_notes_883">Document Notes</h4>
<div class="paragraph">
<p>For more information, see the Vulkan Specification at URL</p>
</div>
<div class="paragraph">
<p><a href="https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VkObjectEntryTypeNVX" class="bare">https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VkObjectEntryTypeNVX</a></p>
</div>
<div class="paragraph">
<p>This page is extracted from the Vulkan Specification.
Fixes and changes should be made to the Specification, not directly.</p>
</div>
<div style="page-break-after: always;"></div>
</div>
</div>
<div class="sect2">
<h3 id="_vkobjectentryusageflagbitsnvx3">VkObjectEntryUsageFlagBitsNVX(3)</h3>
<div class="sect3">
<h4 id="_name_884">Name</h4>
<div class="paragraph">
<p>VkObjectEntryUsageFlagBitsNVX - Bitmask specifying allowed usage of an object entry</p>
</div>
</div>
<div class="sect3">
<h4 id="_c_specification_884">C Specification</h4>
<div class="paragraph">
<p>Bits which <strong class="purple">can</strong> be set in elements of the
<a href="#VkObjectTableCreateInfoNVX">VkObjectTableCreateInfoNVX</a>::<code>pObjectEntryUsageFlags</code> array,
specifying binding usage of an entry, are:</p>
</div>
<div id="VkObjectEntryUsageFlagBitsNVX" class="listingblock">
<div class="content">
<pre class="highlight"><code class="language-c++" data-lang="c++">typedef enum VkObjectEntryUsageFlagBitsNVX {
    VK_OBJECT_ENTRY_USAGE_GRAPHICS_BIT_NVX = 0x00000001,
    VK_OBJECT_ENTRY_USAGE_COMPUTE_BIT_NVX = 0x00000002,
    VK_OBJECT_ENTRY_USAGE_FLAG_BITS_MAX_ENUM_NVX = 0x7FFFFFFF
} VkObjectEntryUsageFlagBitsNVX;</code></pre>
</div>
</div>
</div>
<div class="sect3">
<h4 id="_description_884">Description</h4>
<div class="ulist">
<ul>
<li>
<p><code>VK_OBJECT_ENTRY_USAGE_GRAPHICS_BIT_NVX</code> specifies that the resource
is bound to <code>VK_PIPELINE_BIND_POINT_GRAPHICS</code></p>
</li>
<li>
<p><code>VK_OBJECT_ENTRY_USAGE_COMPUTE_BIT_NVX</code> specifies that the resource
is bound to <code>VK_PIPELINE_BIND_POINT_COMPUTE</code></p>
</li>
</ul>
</div>
</div>
<div class="sect3">
<h4 id="_see_also_884">See Also</h4>
<div class="paragraph">
<p><a href="#VkObjectEntryUsageFlagsNVX">VkObjectEntryUsageFlagsNVX</a></p>
</div>
</div>
<div class="sect3">
<h4 id="_document_notes_884">Document Notes</h4>
<div class="paragraph">
<p>For more information, see the Vulkan Specification at URL</p>
</div>
<div class="paragraph">
<p><a href="https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VkObjectEntryUsageFlagBitsNVX" class="bare">https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VkObjectEntryUsageFlagBitsNVX</a></p>
</div>
<div class="paragraph">
<p>This page is extracted from the Vulkan Specification.
Fixes and changes should be made to the Specification, not directly.</p>
</div>
<div style="page-break-after: always;"></div>
</div>
</div>
<div class="sect2">
<h3 id="_vkobjecttype3">VkObjectType(3)</h3>
<div class="sect3">
<h4 id="_name_885">Name</h4>
<div class="paragraph">
<p>VkObjectType - Specify an enumeration to track object handle types</p>
</div>
</div>
<div class="sect3">
<h4 id="_c_specification_885">C Specification</h4>
<div class="paragraph">
<p>The <a href="#VkObjectType">VkObjectType</a> enumeration defines values, each of which corresponds
to a specific Vulkan handle type.
These values <strong class="purple">can</strong> be used to associate debug information with a particular
type of object through one or more extensions.</p>
</div>
<div id="VkObjectType" class="listingblock">
<div class="content">
<pre class="highlight"><code class="language-c++" data-lang="c++">typedef enum VkObjectType {
    VK_OBJECT_TYPE_UNKNOWN = 0,
    VK_OBJECT_TYPE_INSTANCE = 1,
    VK_OBJECT_TYPE_PHYSICAL_DEVICE = 2,
    VK_OBJECT_TYPE_DEVICE = 3,
    VK_OBJECT_TYPE_QUEUE = 4,
    VK_OBJECT_TYPE_SEMAPHORE = 5,
    VK_OBJECT_TYPE_COMMAND_BUFFER = 6,
    VK_OBJECT_TYPE_FENCE = 7,
    VK_OBJECT_TYPE_DEVICE_MEMORY = 8,
    VK_OBJECT_TYPE_BUFFER = 9,
    VK_OBJECT_TYPE_IMAGE = 10,
    VK_OBJECT_TYPE_EVENT = 11,
    VK_OBJECT_TYPE_QUERY_POOL = 12,
    VK_OBJECT_TYPE_BUFFER_VIEW = 13,
    VK_OBJECT_TYPE_IMAGE_VIEW = 14,
    VK_OBJECT_TYPE_SHADER_MODULE = 15,
    VK_OBJECT_TYPE_PIPELINE_CACHE = 16,
    VK_OBJECT_TYPE_PIPELINE_LAYOUT = 17,
    VK_OBJECT_TYPE_RENDER_PASS = 18,
    VK_OBJECT_TYPE_PIPELINE = 19,
    VK_OBJECT_TYPE_DESCRIPTOR_SET_LAYOUT = 20,
    VK_OBJECT_TYPE_SAMPLER = 21,
    VK_OBJECT_TYPE_DESCRIPTOR_POOL = 22,
    VK_OBJECT_TYPE_DESCRIPTOR_SET = 23,
    VK_OBJECT_TYPE_FRAMEBUFFER = 24,
    VK_OBJECT_TYPE_COMMAND_POOL = 25,
    VK_OBJECT_TYPE_SAMPLER_YCBCR_CONVERSION = 1000156000,
    VK_OBJECT_TYPE_DESCRIPTOR_UPDATE_TEMPLATE = 1000085000,
    VK_OBJECT_TYPE_SURFACE_KHR = 1000000000,
    VK_OBJECT_TYPE_SWAPCHAIN_KHR = 1000001000,
    VK_OBJECT_TYPE_DISPLAY_KHR = 1000002000,
    VK_OBJECT_TYPE_DISPLAY_MODE_KHR = 1000002001,
    VK_OBJECT_TYPE_DEBUG_REPORT_CALLBACK_EXT = 1000011000,
    VK_OBJECT_TYPE_OBJECT_TABLE_NVX = 1000086000,
    VK_OBJECT_TYPE_INDIRECT_COMMANDS_LAYOUT_NVX = 1000086001,
    VK_OBJECT_TYPE_DEBUG_UTILS_MESSENGER_EXT = 1000128000,
    VK_OBJECT_TYPE_VALIDATION_CACHE_EXT = 1000160000,
    VK_OBJECT_TYPE_ACCELERATION_STRUCTURE_NV = 1000165000,
    VK_OBJECT_TYPE_DESCRIPTOR_UPDATE_TEMPLATE_KHR = VK_OBJECT_TYPE_DESCRIPTOR_UPDATE_TEMPLATE,
    VK_OBJECT_TYPE_SAMPLER_YCBCR_CONVERSION_KHR = VK_OBJECT_TYPE_SAMPLER_YCBCR_CONVERSION,
    VK_OBJECT_TYPE_MAX_ENUM = 0x7FFFFFFF
} VkObjectType;</code></pre>
</div>
</div>
</div>
<div class="sect3">
<h4 id="_description_885">Description</h4>
<table id="debugging-object-types" class="tableblock frame-all grid-all" style="width: 80%;">
<caption class="title">Table 24. VkObjectType and Vulkan Handle Relationship</caption>
<colgroup>
<col style="width: 60.3448%;" />
<col style="width: 39.6552%;" />
</colgroup>
<thead>
<tr>
<th class="tableblock halign-left valign-top"><a href="#VkObjectType">VkObjectType</a></th>
<th class="tableblock halign-left valign-top">Vulkan Handle Type</th>
</tr>
</thead>
<tbody>
<tr>
<td class="tableblock halign-left valign-top"><p class="tableblock"><code>VK_OBJECT_TYPE_UNKNOWN</code></p></td>
<td class="tableblock halign-left valign-top"><p class="tableblock">Unknown/Undefined Handle</p></td>
</tr>
<tr>
<td class="tableblock halign-left valign-top"><p class="tableblock"><code>VK_OBJECT_TYPE_INSTANCE</code></p></td>
<td class="tableblock halign-left valign-top"><p class="tableblock"><a href="#VkInstance">VkInstance</a></p></td>
</tr>
<tr>
<td class="tableblock halign-left valign-top"><p class="tableblock"><code>VK_OBJECT_TYPE_PHYSICAL_DEVICE</code></p></td>
<td class="tableblock halign-left valign-top"><p class="tableblock"><a href="#VkPhysicalDevice">VkPhysicalDevice</a></p></td>
</tr>
<tr>
<td class="tableblock halign-left valign-top"><p class="tableblock"><code>VK_OBJECT_TYPE_DEVICE</code></p></td>
<td class="tableblock halign-left valign-top"><p class="tableblock"><a href="#VkDevice">VkDevice</a></p></td>
</tr>
<tr>
<td class="tableblock halign-left valign-top"><p class="tableblock"><code>VK_OBJECT_TYPE_QUEUE</code></p></td>
<td class="tableblock halign-left valign-top"><p class="tableblock"><a href="#VkQueue">VkQueue</a></p></td>
</tr>
<tr>
<td class="tableblock halign-left valign-top"><p class="tableblock"><code>VK_OBJECT_TYPE_SEMAPHORE</code></p></td>
<td class="tableblock halign-left valign-top"><p class="tableblock"><a href="#VkSemaphore">VkSemaphore</a></p></td>
</tr>
<tr>
<td class="tableblock halign-left valign-top"><p class="tableblock"><code>VK_OBJECT_TYPE_COMMAND_BUFFER</code></p></td>
<td class="tableblock halign-left valign-top"><p class="tableblock"><a href="#VkCommandBuffer">VkCommandBuffer</a></p></td>
</tr>
<tr>
<td class="tableblock halign-left valign-top"><p class="tableblock"><code>VK_OBJECT_TYPE_FENCE</code></p></td>
<td class="tableblock halign-left valign-top"><p class="tableblock"><a href="#VkFence">VkFence</a></p></td>
</tr>
<tr>
<td class="tableblock halign-left valign-top"><p class="tableblock"><code>VK_OBJECT_TYPE_DEVICE_MEMORY</code></p></td>
<td class="tableblock halign-left valign-top"><p class="tableblock"><a href="#VkDeviceMemory">VkDeviceMemory</a></p></td>
</tr>
<tr>
<td class="tableblock halign-left valign-top"><p class="tableblock"><code>VK_OBJECT_TYPE_BUFFER</code></p></td>
<td class="tableblock halign-left valign-top"><p class="tableblock"><a href="#VkBuffer">VkBuffer</a></p></td>
</tr>
<tr>
<td class="tableblock halign-left valign-top"><p class="tableblock"><code>VK_OBJECT_TYPE_IMAGE</code></p></td>
<td class="tableblock halign-left valign-top"><p class="tableblock"><a href="#VkImage">VkImage</a></p></td>
</tr>
<tr>
<td class="tableblock halign-left valign-top"><p class="tableblock"><code>VK_OBJECT_TYPE_EVENT</code></p></td>
<td class="tableblock halign-left valign-top"><p class="tableblock"><a href="#VkEvent">VkEvent</a></p></td>
</tr>
<tr>
<td class="tableblock halign-left valign-top"><p class="tableblock"><code>VK_OBJECT_TYPE_QUERY_POOL</code></p></td>
<td class="tableblock halign-left valign-top"><p class="tableblock"><a href="#VkQueryPool">VkQueryPool</a></p></td>
</tr>
<tr>
<td class="tableblock halign-left valign-top"><p class="tableblock"><code>VK_OBJECT_TYPE_BUFFER_VIEW</code></p></td>
<td class="tableblock halign-left valign-top"><p class="tableblock"><a href="#VkBufferView">VkBufferView</a></p></td>
</tr>
<tr>
<td class="tableblock halign-left valign-top"><p class="tableblock"><code>VK_OBJECT_TYPE_IMAGE_VIEW</code></p></td>
<td class="tableblock halign-left valign-top"><p class="tableblock"><a href="#VkImageView">VkImageView</a></p></td>
</tr>
<tr>
<td class="tableblock halign-left valign-top"><p class="tableblock"><code>VK_OBJECT_TYPE_SHADER_MODULE</code></p></td>
<td class="tableblock halign-left valign-top"><p class="tableblock"><a href="#VkShaderModule">VkShaderModule</a></p></td>
</tr>
<tr>
<td class="tableblock halign-left valign-top"><p class="tableblock"><code>VK_OBJECT_TYPE_PIPELINE_CACHE</code></p></td>
<td class="tableblock halign-left valign-top"><p class="tableblock"><a href="#VkPipelineCache">VkPipelineCache</a></p></td>
</tr>
<tr>
<td class="tableblock halign-left valign-top"><p class="tableblock"><code>VK_OBJECT_TYPE_PIPELINE_LAYOUT</code></p></td>
<td class="tableblock halign-left valign-top"><p class="tableblock"><a href="#VkPipelineLayout">VkPipelineLayout</a></p></td>
</tr>
<tr>
<td class="tableblock halign-left valign-top"><p class="tableblock"><code>VK_OBJECT_TYPE_RENDER_PASS</code></p></td>
<td class="tableblock halign-left valign-top"><p class="tableblock"><a href="#VkRenderPass">VkRenderPass</a></p></td>
</tr>
<tr>
<td class="tableblock halign-left valign-top"><p class="tableblock"><code>VK_OBJECT_TYPE_PIPELINE</code></p></td>
<td class="tableblock halign-left valign-top"><p class="tableblock"><a href="#VkPipeline">VkPipeline</a></p></td>
</tr>
<tr>
<td class="tableblock halign-left valign-top"><p class="tableblock"><code>VK_OBJECT_TYPE_DESCRIPTOR_SET_LAYOUT</code></p></td>
<td class="tableblock halign-left valign-top"><p class="tableblock"><a href="#VkDescriptorSetLayout">VkDescriptorSetLayout</a></p></td>
</tr>
<tr>
<td class="tableblock halign-left valign-top"><p class="tableblock"><code>VK_OBJECT_TYPE_SAMPLER</code></p></td>
<td class="tableblock halign-left valign-top"><p class="tableblock"><a href="#VkSampler">VkSampler</a></p></td>
</tr>
<tr>
<td class="tableblock halign-left valign-top"><p class="tableblock"><code>VK_OBJECT_TYPE_DESCRIPTOR_POOL</code></p></td>
<td class="tableblock halign-left valign-top"><p class="tableblock"><a href="#VkDescriptorPool">VkDescriptorPool</a></p></td>
</tr>
<tr>
<td class="tableblock halign-left valign-top"><p class="tableblock"><code>VK_OBJECT_TYPE_DESCRIPTOR_SET</code></p></td>
<td class="tableblock halign-left valign-top"><p class="tableblock"><a href="#VkDescriptorSet">VkDescriptorSet</a></p></td>
</tr>
<tr>
<td class="tableblock halign-left valign-top"><p class="tableblock"><code>VK_OBJECT_TYPE_FRAMEBUFFER</code></p></td>
<td class="tableblock halign-left valign-top"><p class="tableblock"><a href="#VkFramebuffer">VkFramebuffer</a></p></td>
</tr>
<tr>
<td class="tableblock halign-left valign-top"><p class="tableblock"><code>VK_OBJECT_TYPE_COMMAND_POOL</code></p></td>
<td class="tableblock halign-left valign-top"><p class="tableblock"><a href="#VkCommandPool">VkCommandPool</a></p></td>
</tr>
<tr>
<td class="tableblock halign-left valign-top"><p class="tableblock"><code>VK_OBJECT_TYPE_SAMPLER_YCBCR_CONVERSION</code></p></td>
<td class="tableblock halign-left valign-top"><p class="tableblock"><a href="#VkSamplerYcbcrConversion">VkSamplerYcbcrConversion</a></p></td>
</tr>
<tr>
<td class="tableblock halign-left valign-top"><p class="tableblock"><code>VK_OBJECT_TYPE_DESCRIPTOR_UPDATE_TEMPLATE</code></p></td>
<td class="tableblock halign-left valign-top"><p class="tableblock"><a href="#VkDescriptorUpdateTemplate">VkDescriptorUpdateTemplate</a></p></td>
</tr>
<tr>
<td class="tableblock halign-left valign-top"><p class="tableblock"><code>VK_OBJECT_TYPE_SURFACE_KHR</code></p></td>
<td class="tableblock halign-left valign-top"><p class="tableblock"><a href="#VkSurfaceKHR">VkSurfaceKHR</a></p></td>
</tr>
<tr>
<td class="tableblock halign-left valign-top"><p class="tableblock"><code>VK_OBJECT_TYPE_SWAPCHAIN_KHR</code></p></td>
<td class="tableblock halign-left valign-top"><p class="tableblock"><a href="#VkSwapchainKHR">VkSwapchainKHR</a></p></td>
</tr>
<tr>
<td class="tableblock halign-left valign-top"><p class="tableblock"><code>VK_OBJECT_TYPE_DISPLAY_KHR</code></p></td>
<td class="tableblock halign-left valign-top"><p class="tableblock"><a href="#VkDisplayKHR">VkDisplayKHR</a></p></td>
</tr>
<tr>
<td class="tableblock halign-left valign-top"><p class="tableblock"><code>VK_OBJECT_TYPE_DISPLAY_MODE_KHR</code></p></td>
<td class="tableblock halign-left valign-top"><p class="tableblock"><a href="#VkDisplayModeKHR">VkDisplayModeKHR</a></p></td>
</tr>
<tr>
<td class="tableblock halign-left valign-top"><p class="tableblock"><code>VK_OBJECT_TYPE_DEBUG_REPORT_CALLBACK_EXT</code></p></td>
<td class="tableblock halign-left valign-top"><p class="tableblock"><a href="#VkDebugReportCallbackEXT">VkDebugReportCallbackEXT</a></p></td>
</tr>
<tr>
<td class="tableblock halign-left valign-top"><p class="tableblock"><code>VK_OBJECT_TYPE_OBJECT_TABLE_NVX</code></p></td>
<td class="tableblock halign-left valign-top"><p class="tableblock"><a href="#VkObjectTableNVX">VkObjectTableNVX</a></p></td>
</tr>
<tr>
<td class="tableblock halign-left valign-top"><p class="tableblock"><code>VK_OBJECT_TYPE_INDIRECT_COMMANDS_LAYOUT_NVX</code></p></td>
<td class="tableblock halign-left valign-top"><p class="tableblock"><a href="#VkIndirectCommandsLayoutNVX">VkIndirectCommandsLayoutNVX</a></p></td>
</tr>
<tr>
<td class="tableblock halign-left valign-top"><p class="tableblock"><code>VK_OBJECT_TYPE_DEBUG_UTILS_MESSENGER_EXT</code></p></td>
<td class="tableblock halign-left valign-top"><p class="tableblock"><a href="#VkDebugUtilsMessengerEXT">VkDebugUtilsMessengerEXT</a></p></td>
</tr>
<tr>
<td class="tableblock halign-left valign-top"><p class="tableblock"><code>VK_OBJECT_TYPE_VALIDATION_CACHE_EXT</code></p></td>
<td class="tableblock halign-left valign-top"><p class="tableblock"><a href="#VkValidationCacheEXT">VkValidationCacheEXT</a></p></td>
</tr>
<tr>
<td class="tableblock halign-left valign-top"><p class="tableblock"><code>VK_OBJECT_TYPE_ACCELERATION_STRUCTURE_NV</code></p></td>
<td class="tableblock halign-left valign-top"><p class="tableblock"><a href="#VkAccelerationStructureNV">VkAccelerationStructureNV</a></p></td>
</tr>
</tbody>
</table>
</div>
<div class="sect3">
<h4 id="_see_also_885">See Also</h4>
<div class="paragraph">
<p><a href="#VkDebugUtilsObjectNameInfoEXT">VkDebugUtilsObjectNameInfoEXT</a>, <a href="#VkDebugUtilsObjectTagInfoEXT">VkDebugUtilsObjectTagInfoEXT</a></p>
</div>
</div>
<div class="sect3">
<h4 id="_document_notes_885">Document Notes</h4>
<div class="paragraph">
<p>For more information, see the Vulkan Specification at URL</p>
</div>
<div class="paragraph">
<p><a href="https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VkObjectType" class="bare">https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VkObjectType</a></p>
</div>
<div class="paragraph">
<p>This page is extracted from the Vulkan Specification.
Fixes and changes should be made to the Specification, not directly.</p>
</div>
<div style="page-break-after: always;"></div>
</div>
</div>
<div class="sect2">
<h3 id="_vkpeermemoryfeatureflagbits3">VkPeerMemoryFeatureFlagBits(3)</h3>
<div class="sect3">
<h4 id="_name_886">Name</h4>
<div class="paragraph">
<p>VkPeerMemoryFeatureFlagBits - Bitmask specifying supported peer memory features</p>
</div>
</div>
<div class="sect3">
<h4 id="_c_specification_886">C Specification</h4>
<div class="paragraph">
<p>Bits which <strong class="purple">may</strong> be set in the value returned for
<a href="#vkGetDeviceGroupPeerMemoryFeatures">vkGetDeviceGroupPeerMemoryFeatures</a>::<code>pPeerMemoryFeatures</code>,
indicating the supported peer memory features, are:</p>
</div>
<div id="VkPeerMemoryFeatureFlagBits" class="listingblock">
<div class="content">
<pre class="highlight"><code class="language-c++" data-lang="c++">typedef enum VkPeerMemoryFeatureFlagBits {
    VK_PEER_MEMORY_FEATURE_COPY_SRC_BIT = 0x00000001,
    VK_PEER_MEMORY_FEATURE_COPY_DST_BIT = 0x00000002,
    VK_PEER_MEMORY_FEATURE_GENERIC_SRC_BIT = 0x00000004,
    VK_PEER_MEMORY_FEATURE_GENERIC_DST_BIT = 0x00000008,
    VK_PEER_MEMORY_FEATURE_COPY_SRC_BIT_KHR = VK_PEER_MEMORY_FEATURE_COPY_SRC_BIT,
    VK_PEER_MEMORY_FEATURE_COPY_DST_BIT_KHR = VK_PEER_MEMORY_FEATURE_COPY_DST_BIT,
    VK_PEER_MEMORY_FEATURE_GENERIC_SRC_BIT_KHR = VK_PEER_MEMORY_FEATURE_GENERIC_SRC_BIT,
    VK_PEER_MEMORY_FEATURE_GENERIC_DST_BIT_KHR = VK_PEER_MEMORY_FEATURE_GENERIC_DST_BIT,
    VK_PEER_MEMORY_FEATURE_FLAG_BITS_MAX_ENUM = 0x7FFFFFFF
} VkPeerMemoryFeatureFlagBits;</code></pre>
</div>
</div>
<div class="paragraph">
<p>or the equivalent</p>
</div>
<div id="VkPeerMemoryFeatureFlagBitsKHR" class="listingblock">
<div class="content">
<pre class="highlight"><code class="language-c++" data-lang="c++">typedef VkPeerMemoryFeatureFlagBits VkPeerMemoryFeatureFlagBitsKHR;</code></pre>
</div>
</div>
</div>
<div class="sect3">
<h4 id="_description_886">Description</h4>
<div class="ulist">
<ul>
<li>
<p><code>VK_PEER_MEMORY_FEATURE_COPY_SRC_BIT</code> specifies that the memory <strong class="purple">can</strong>
be accessed as the source of a <a href="#vkCmdCopyBuffer">vkCmdCopyBuffer</a>,
<a href="#vkCmdCopyImage">vkCmdCopyImage</a>, <a href="#vkCmdCopyBufferToImage">vkCmdCopyBufferToImage</a>, or
<a href="#vkCmdCopyImageToBuffer">vkCmdCopyImageToBuffer</a> command.</p>
</li>
<li>
<p><code>VK_PEER_MEMORY_FEATURE_COPY_DST_BIT</code> specifies that the memory <strong class="purple">can</strong>
be accessed as the destination of a <a href="#vkCmdCopyBuffer">vkCmdCopyBuffer</a>,
<a href="#vkCmdCopyImage">vkCmdCopyImage</a>, <a href="#vkCmdCopyBufferToImage">vkCmdCopyBufferToImage</a>, or
<a href="#vkCmdCopyImageToBuffer">vkCmdCopyImageToBuffer</a> command.</p>
</li>
<li>
<p><code>VK_PEER_MEMORY_FEATURE_GENERIC_SRC_BIT</code> specifies that the memory
<strong class="purple">can</strong> be read as any memory access type.</p>
</li>
<li>
<p><code>VK_PEER_MEMORY_FEATURE_GENERIC_DST_BIT</code> specifies that the memory
<strong class="purple">can</strong> be written as any memory access type.
Shader atomics are considered to be writes.</p>
</li>
</ul>
</div>
<div class="admonitionblock note">
<table>
<tr>
<td class="icon">
<i class="fa icon-note" title="Note"></i>
</td>
<td class="content">
<div class="title">Note</div>
<div class="paragraph">
<p>The peer memory features of a memory heap also apply to any accesses that
<strong class="purple">may</strong> be performed during <a href="vkspec.html#synchronization-image-layout-transitions">image
layout transitions</a>.</p>
</div>
</td>
</tr>
</table>
</div>
<div class="paragraph">
<p><code>VK_PEER_MEMORY_FEATURE_COPY_DST_BIT</code> <strong class="purple">must</strong> be supported for all host
local heaps and for at least one device local heap.</p>
</div>
<div class="paragraph">
<p>If a device does not support a peer memory feature, it is still valid to use
a resource that includes both local and peer memory bindings with the
corresponding access type as long as only the local bindings are actually
accessed.
For example, an application doing split-frame rendering would use
framebuffer attachments that include both local and peer memory bindings,
but would scissor the rendering to only update local memory.</p>
</div>
</div>
<div class="sect3">
<h4 id="_see_also_886">See Also</h4>
<div class="paragraph">
<p><a href="#VkPeerMemoryFeatureFlags">VkPeerMemoryFeatureFlags</a></p>
</div>
</div>
<div class="sect3">
<h4 id="_document_notes_886">Document Notes</h4>
<div class="paragraph">
<p>For more information, see the Vulkan Specification at URL</p>
</div>
<div class="paragraph">
<p><a href="https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VkPeerMemoryFeatureFlagBits" class="bare">https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VkPeerMemoryFeatureFlagBits</a></p>
</div>
<div class="paragraph">
<p>This page is extracted from the Vulkan Specification.
Fixes and changes should be made to the Specification, not directly.</p>
</div>
<div style="page-break-after: always;"></div>
</div>
</div>
<div class="sect2">
<h3 id="_vkphysicaldevicetype3">VkPhysicalDeviceType(3)</h3>
<div class="sect3">
<h4 id="_name_887">Name</h4>
<div class="paragraph">
<p>VkPhysicalDeviceType - Supported physical device types</p>
</div>
</div>
<div class="sect3">
<h4 id="_c_specification_887">C Specification</h4>
<div class="paragraph">
<p>The physical device types which <strong class="purple">may</strong> be returned in
<a href="#VkPhysicalDeviceProperties">VkPhysicalDeviceProperties</a>::<code>deviceType</code> are:</p>
</div>
<div id="VkPhysicalDeviceType" class="listingblock">
<div class="content">
<pre class="highlight"><code class="language-c++" data-lang="c++">typedef enum VkPhysicalDeviceType {
    VK_PHYSICAL_DEVICE_TYPE_OTHER = 0,
    VK_PHYSICAL_DEVICE_TYPE_INTEGRATED_GPU = 1,
    VK_PHYSICAL_DEVICE_TYPE_DISCRETE_GPU = 2,
    VK_PHYSICAL_DEVICE_TYPE_VIRTUAL_GPU = 3,
    VK_PHYSICAL_DEVICE_TYPE_CPU = 4,
    VK_PHYSICAL_DEVICE_TYPE_MAX_ENUM = 0x7FFFFFFF
} VkPhysicalDeviceType;</code></pre>
</div>
</div>
</div>
<div class="sect3">
<h4 id="_description_887">Description</h4>
<div class="ulist">
<ul>
<li>
<p><code>VK_PHYSICAL_DEVICE_TYPE_OTHER</code> - the device does not match any
other available types.</p>
</li>
<li>
<p><code>VK_PHYSICAL_DEVICE_TYPE_INTEGRATED_GPU</code> - the device is typically
one embedded in or tightly coupled with the host.</p>
</li>
<li>
<p><code>VK_PHYSICAL_DEVICE_TYPE_DISCRETE_GPU</code> - the device is typically a
separate processor connected to the host via an interlink.</p>
</li>
<li>
<p><code>VK_PHYSICAL_DEVICE_TYPE_VIRTUAL_GPU</code> - the device is typically a
virtual node in a virtualization environment.</p>
</li>
<li>
<p><code>VK_PHYSICAL_DEVICE_TYPE_CPU</code> - the device is typically running on
the same processors as the host.</p>
</li>
</ul>
</div>
<div class="paragraph">
<p>The physical device type is advertised for informational purposes only, and
does not directly affect the operation of the system.
However, the device type <strong class="purple">may</strong> correlate with other advertised properties or
capabilities of the system, such as how many memory heaps there are.</p>
</div>
</div>
<div class="sect3">
<h4 id="_see_also_887">See Also</h4>
<div class="paragraph">
<p><a href="#VkPhysicalDeviceProperties">VkPhysicalDeviceProperties</a></p>
</div>
</div>
<div class="sect3">
<h4 id="_document_notes_887">Document Notes</h4>
<div class="paragraph">
<p>For more information, see the Vulkan Specification at URL</p>
</div>
<div class="paragraph">
<p><a href="https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VkPhysicalDeviceType" class="bare">https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VkPhysicalDeviceType</a></p>
</div>
<div class="paragraph">
<p>This page is extracted from the Vulkan Specification.
Fixes and changes should be made to the Specification, not directly.</p>
</div>
<div style="page-break-after: always;"></div>
</div>
</div>
<div class="sect2">
<h3 id="_vkpipelinebindpoint3">VkPipelineBindPoint(3)</h3>
<div class="sect3">
<h4 id="_name_888">Name</h4>
<div class="paragraph">
<p>VkPipelineBindPoint - Specify the bind point of a pipeline object to a command buffer</p>
</div>
</div>
<div class="sect3">
<h4 id="_c_specification_888">C Specification</h4>
<div class="paragraph">
<p>Possible values of <a href="#vkCmdBindPipeline">vkCmdBindPipeline</a>::<code>pipelineBindPoint</code>,
specifying the bind point of a pipeline object, are:</p>
</div>
<div id="VkPipelineBindPoint" class="listingblock">
<div class="content">
<pre class="highlight"><code class="language-c++" data-lang="c++">typedef enum VkPipelineBindPoint {
    VK_PIPELINE_BIND_POINT_GRAPHICS = 0,
    VK_PIPELINE_BIND_POINT_COMPUTE = 1,
    VK_PIPELINE_BIND_POINT_RAY_TRACING_NV = 1000165000,
    VK_PIPELINE_BIND_POINT_MAX_ENUM = 0x7FFFFFFF
} VkPipelineBindPoint;</code></pre>
</div>
</div>
</div>
<div class="sect3">
<h4 id="_description_888">Description</h4>
<div class="ulist">
<ul>
<li>
<p><code>VK_PIPELINE_BIND_POINT_COMPUTE</code> specifies binding as a compute
pipeline.</p>
</li>
<li>
<p><code>VK_PIPELINE_BIND_POINT_GRAPHICS</code> specifies binding as a graphics
pipeline.</p>
</li>
<li>
<p><code>VK_PIPELINE_BIND_POINT_RAY_TRACING_NV</code> specifies binding as a ray
tracing pipeline.</p>
</li>
</ul>
</div>
</div>
<div class="sect3">
<h4 id="_see_also_888">See Also</h4>
<div class="paragraph">
<p><a href="#VkDescriptorUpdateTemplateCreateInfo">VkDescriptorUpdateTemplateCreateInfo</a>, <a href="#VkIndirectCommandsLayoutCreateInfoNVX">VkIndirectCommandsLayoutCreateInfoNVX</a>, <a href="#VkSubpassDescription">VkSubpassDescription</a>, <a href="#VkSubpassDescription2KHR">VkSubpassDescription2KHR</a>, <a href="#vkCmdBindDescriptorSets">vkCmdBindDescriptorSets</a>, <a href="#vkCmdBindPipeline">vkCmdBindPipeline</a>, <a href="#vkCmdPushDescriptorSetKHR">vkCmdPushDescriptorSetKHR</a></p>
</div>
</div>
<div class="sect3">
<h4 id="_document_notes_888">Document Notes</h4>
<div class="paragraph">
<p>For more information, see the Vulkan Specification at URL</p>
</div>
<div class="paragraph">
<p><a href="https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VkPipelineBindPoint" class="bare">https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VkPipelineBindPoint</a></p>
</div>
<div class="paragraph">
<p>This page is extracted from the Vulkan Specification.
Fixes and changes should be made to the Specification, not directly.</p>
</div>
<div style="page-break-after: always;"></div>
</div>
</div>
<div class="sect2">
<h3 id="_vkpipelinecacheheaderversion3">VkPipelineCacheHeaderVersion(3)</h3>
<div class="sect3">
<h4 id="_name_889">Name</h4>
<div class="paragraph">
<p>VkPipelineCacheHeaderVersion - Encode pipeline cache version</p>
</div>
</div>
<div class="sect3">
<h4 id="_c_specification_889">C Specification</h4>
<div class="paragraph">
<p>Possible values of the second group of four bytes in the header returned by
<a href="#vkGetPipelineCacheData">vkGetPipelineCacheData</a>, encoding the pipeline cache version, are:</p>
</div>
<div id="VkPipelineCacheHeaderVersion" class="listingblock">
<div class="content">
<pre class="highlight"><code class="language-c++" data-lang="c++">typedef enum VkPipelineCacheHeaderVersion {
    VK_PIPELINE_CACHE_HEADER_VERSION_ONE = 1,
    VK_PIPELINE_CACHE_HEADER_VERSION_MAX_ENUM = 0x7FFFFFFF
} VkPipelineCacheHeaderVersion;</code></pre>
</div>
</div>
</div>
<div class="sect3">
<h4 id="_description_889">Description</h4>
<div class="ulist">
<ul>
<li>
<p><code>VK_PIPELINE_CACHE_HEADER_VERSION_ONE</code> specifies version one of the
pipeline cache.</p>
</li>
</ul>
</div>
</div>
<div class="sect3">
<h4 id="_see_also_889">See Also</h4>
<div class="paragraph">
<p><a href="#vkCreatePipelineCache">vkCreatePipelineCache</a>, <a href="#vkGetPipelineCacheData">vkGetPipelineCacheData</a></p>
</div>
</div>
<div class="sect3">
<h4 id="_document_notes_889">Document Notes</h4>
<div class="paragraph">
<p>For more information, see the Vulkan Specification at URL</p>
</div>
<div class="paragraph">
<p><a href="https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VkPipelineCacheHeaderVersion" class="bare">https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VkPipelineCacheHeaderVersion</a></p>
</div>
<div class="paragraph">
<p>This page is extracted from the Vulkan Specification.
Fixes and changes should be made to the Specification, not directly.</p>
</div>
<div style="page-break-after: always;"></div>
</div>
</div>
<div class="sect2">
<h3 id="_vkpipelinecreateflagbits3">VkPipelineCreateFlagBits(3)</h3>
<div class="sect3">
<h4 id="_name_890">Name</h4>
<div class="paragraph">
<p>VkPipelineCreateFlagBits - Bitmask controlling how a pipeline is created</p>
</div>
</div>
<div class="sect3">
<h4 id="_c_specification_890">C Specification</h4>
<div class="paragraph">
<p>Possible values of the <code>flags</code> member of
<a href="#VkGraphicsPipelineCreateInfo">VkGraphicsPipelineCreateInfo</a>, <a href="#VkComputePipelineCreateInfo">VkComputePipelineCreateInfo</a>, and
<a href="#VkRayTracingPipelineCreateInfoNV">VkRayTracingPipelineCreateInfoNV</a>,
specifying how a pipeline is created, are:</p>
</div>
<div id="VkPipelineCreateFlagBits" class="listingblock">
<div class="content">
<pre class="highlight"><code class="language-c++" data-lang="c++">typedef enum VkPipelineCreateFlagBits {
    VK_PIPELINE_CREATE_DISABLE_OPTIMIZATION_BIT = 0x00000001,
    VK_PIPELINE_CREATE_ALLOW_DERIVATIVES_BIT = 0x00000002,
    VK_PIPELINE_CREATE_DERIVATIVE_BIT = 0x00000004,
    VK_PIPELINE_CREATE_VIEW_INDEX_FROM_DEVICE_INDEX_BIT = 0x00000008,
    VK_PIPELINE_CREATE_DISPATCH_BASE = 0x00000010,
    VK_PIPELINE_CREATE_DEFER_COMPILE_BIT_NV = 0x00000020,
    VK_PIPELINE_CREATE_VIEW_INDEX_FROM_DEVICE_INDEX_BIT_KHR = VK_PIPELINE_CREATE_VIEW_INDEX_FROM_DEVICE_INDEX_BIT,
    VK_PIPELINE_CREATE_DISPATCH_BASE_KHR = VK_PIPELINE_CREATE_DISPATCH_BASE,
    VK_PIPELINE_CREATE_FLAG_BITS_MAX_ENUM = 0x7FFFFFFF
} VkPipelineCreateFlagBits;</code></pre>
</div>
</div>
</div>
<div class="sect3">
<h4 id="_description_890">Description</h4>
<div class="ulist">
<ul>
<li>
<p><code>VK_PIPELINE_CREATE_DISABLE_OPTIMIZATION_BIT</code> specifies that the
created pipeline will not be optimized.
Using this flag <strong class="purple">may</strong> reduce the time taken to create the pipeline.</p>
</li>
<li>
<p><code>VK_PIPELINE_CREATE_ALLOW_DERIVATIVES_BIT</code> specifies that the
pipeline to be created is allowed to be the parent of a pipeline that
will be created in a subsequent call to <a href="#vkCreateGraphicsPipelines">vkCreateGraphicsPipelines</a>
or <a href="#vkCreateComputePipelines">vkCreateComputePipelines</a>.</p>
</li>
<li>
<p><code>VK_PIPELINE_CREATE_DERIVATIVE_BIT</code> specifies that the pipeline to
be created will be a child of a previously created parent pipeline.</p>
</li>
<li>
<p><code>VK_PIPELINE_CREATE_VIEW_INDEX_FROM_DEVICE_INDEX_BIT</code> specifies that
any shader input variables decorated as <code>ViewIndex</code> will be assigned
values as if they were decorated as <code>DeviceIndex</code>.</p>
</li>
<li>
<p><code>VK_PIPELINE_CREATE_DISPATCH_BASE</code> specifies that a compute pipeline
<strong class="purple">can</strong> be used with <a href="#vkCmdDispatchBase">vkCmdDispatchBase</a> with a non-zero base
workgroup.</p>
</li>
<li>
<p><code>VK_PIPELINE_CREATE_DEFER_COMPILE_BIT_NV</code> specifies that a pipeline
is created with all shaders in the deferred state.
Before using the pipeline the application <strong class="purple">must</strong> call
<a href="#vkCompileDeferredNV">vkCompileDeferredNV</a> exactly once on each shader in the pipeline
before using the pipeline.</p>
</li>
</ul>
</div>
<div class="paragraph">
<p>It is valid to set both <code>VK_PIPELINE_CREATE_ALLOW_DERIVATIVES_BIT</code> and
<code>VK_PIPELINE_CREATE_DERIVATIVE_BIT</code>.
This allows a pipeline to be both a parent and possibly a child in a
pipeline hierarchy.
See <a href="vkspec.html#pipelines-pipeline-derivatives">Pipeline Derivatives</a> for more
information.</p>
</div>
</div>
<div class="sect3">
<h4 id="_see_also_890">See Also</h4>
<div class="paragraph">
<p><a href="#VkPipelineCreateFlags">VkPipelineCreateFlags</a></p>
</div>
</div>
<div class="sect3">
<h4 id="_document_notes_890">Document Notes</h4>
<div class="paragraph">
<p>For more information, see the Vulkan Specification at URL</p>
</div>
<div class="paragraph">
<p><a href="https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VkPipelineCreateFlagBits" class="bare">https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VkPipelineCreateFlagBits</a></p>
</div>
<div class="paragraph">
<p>This page is extracted from the Vulkan Specification.
Fixes and changes should be made to the Specification, not directly.</p>
</div>
<div style="page-break-after: always;"></div>
</div>
</div>
<div class="sect2">
<h3 id="_vkpipelinecreationfeedbackflagbitsext3">VkPipelineCreationFeedbackFlagBitsEXT(3)</h3>
<div class="sect3">
<h4 id="_name_891">Name</h4>
<div class="paragraph">
<p>VkPipelineCreationFeedbackFlagBitsEXT - Bitmask specifying pipeline or pipeline stage creation feedback</p>
</div>
</div>
<div class="sect3">
<h4 id="_c_specification_891">C Specification</h4>
<div class="paragraph">
<p>Possible values of the <code>flags</code> member of
<a href="#VkPipelineCreationFeedbackEXT">VkPipelineCreationFeedbackEXT</a> are:</p>
</div>
<div id="VkPipelineCreationFeedbackFlagBitsEXT" class="listingblock">
<div class="content">
<pre class="highlight"><code class="language-c++" data-lang="c++">typedef enum VkPipelineCreationFeedbackFlagBitsEXT {
    VK_PIPELINE_CREATION_FEEDBACK_VALID_BIT_EXT = 0x00000001,
    VK_PIPELINE_CREATION_FEEDBACK_APPLICATION_PIPELINE_CACHE_HIT_BIT_EXT = 0x00000002,
    VK_PIPELINE_CREATION_FEEDBACK_BASE_PIPELINE_ACCELERATION_BIT_EXT = 0x00000004,
    VK_PIPELINE_CREATION_FEEDBACK_FLAG_BITS_MAX_ENUM_EXT = 0x7FFFFFFF
} VkPipelineCreationFeedbackFlagBitsEXT;</code></pre>
</div>
</div>
</div>
<div class="sect3">
<h4 id="_description_891">Description</h4>
<div class="ulist">
<ul>
<li>
<p><code>VK_PIPELINE_CREATION_FEEDBACK_VALID_BIT_EXT</code> indicates that the
feedback information is valid.</p>
</li>
<li>
<p><code>VK_PIPELINE_CREATION_FEEDBACK_APPLICATION_PIPELINE_CACHE_HIT_BIT_EXT</code>
indicates that a readily usable pipeline or pipeline stage was found in
the <code>pipelineCache</code> specified by the application in the pipeline
creation command.</p>
<div class="paragraph">
<p>An implementation <strong class="purple">should</strong> set the
<code>VK_PIPELINE_CREATION_FEEDBACK_APPLICATION_PIPELINE_CACHE_HIT_BIT_EXT</code>
bit if it was able to avoid the large majority of pipeline or pipeline stage
creation work by using the <code>pipelineCache</code> parameter of
<a href="#vkCreateGraphicsPipelines">vkCreateGraphicsPipelines</a>,
<a href="#vkCreateRayTracingPipelinesNV">vkCreateRayTracingPipelinesNV</a>,
or <a href="#vkCreateComputePipelines">vkCreateComputePipelines</a>.
When an implementation sets this bit for the entire pipeline, it <strong class="purple">may</strong> leave
it unset for any stage.</p>
</div>
<div class="admonitionblock note">
<table>
<tr>
<td class="icon">
<i class="fa icon-note" title="Note"></i>
</td>
<td class="content">
<div class="title">Note</div>
<div class="paragraph">
<p>Implementations are encouraged to provide a meaningful signal to
applications using this bit.
The intention is to communicate to the application that the pipeline or
pipeline stage was created "as fast as it gets" using the pipeline cache
provided by the application.
If an implementation uses an internal cache, it is discouraged from setting
this bit as the feedback would be unactionable.</p>
</div>
</td>
</tr>
</table>
</div>
</li>
<li>
<p><code>VK_PIPELINE_CREATION_FEEDBACK_BASE_PIPELINE_ACCELERATION_BIT_EXT</code>
indicates that the base pipeline specified by the
<code>basePipelineHandle</code> or <code>basePipelineIndex</code> member of the
<code>Vk*PipelineCreateInfo</code> structure was used to accelerate the
creation of the pipeline.</p>
<div class="paragraph">
<p>An implementation <strong class="purple">should</strong> set the
<code>VK_PIPELINE_CREATION_FEEDBACK_BASE_PIPELINE_ACCELERATION_BIT_EXT</code> bit
if it was able to avoid a significant amount of work by using the base
pipeline.</p>
</div>
<div class="admonitionblock note">
<table>
<tr>
<td class="icon">
<i class="fa icon-note" title="Note"></i>
</td>
<td class="content">
<div class="title">Note</div>
<div class="paragraph">
<p>While "significant amount of work" is subjective, implementations are
encouraged to provide a meaningful signal to applications using this bit.
For example, a 1% reduction in duration may not warrant setting this bit,
while a 50% reduction would.</p>
</div>
</td>
</tr>
</table>
</div>
</li>
</ul>
</div>
</div>
<div class="sect3">
<h4 id="_see_also_891">See Also</h4>
<div class="paragraph">
<p><a href="#VkPipelineCreationFeedbackCreateInfoEXT">VkPipelineCreationFeedbackCreateInfoEXT</a>, <a href="#VkPipelineCreationFeedbackEXT">VkPipelineCreationFeedbackEXT</a>, <a href="#VkPipelineCreationFeedbackFlagsEXT">VkPipelineCreationFeedbackFlagsEXT</a></p>
</div>
</div>
<div class="sect3">
<h4 id="_document_notes_891">Document Notes</h4>
<div class="paragraph">
<p>For more information, see the Vulkan Specification at URL</p>
</div>
<div class="paragraph">
<p><a href="https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VkPipelineCreationFeedbackFlagBitsEXT" class="bare">https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VkPipelineCreationFeedbackFlagBitsEXT</a></p>
</div>
<div class="paragraph">
<p>This page is extracted from the Vulkan Specification.
Fixes and changes should be made to the Specification, not directly.</p>
</div>
<div style="page-break-after: always;"></div>
</div>
</div>
<div class="sect2">
<h3 id="_vkpipelinestageflagbits3">VkPipelineStageFlagBits(3)</h3>
<div class="sect3">
<h4 id="_name_892">Name</h4>
<div class="paragraph">
<p>VkPipelineStageFlagBits - Bitmask specifying pipeline stages</p>
</div>
</div>
<div class="sect3">
<h4 id="_c_specification_892">C Specification</h4>
<div class="paragraph">
<p>Several of the synchronization commands include pipeline stage parameters,
restricting the <a href="vkspec.html#synchronization-dependencies-scopes">synchronization
scopes</a> for that command to just those stages.
This allows fine grained control over the exact execution dependencies and
accesses performed by action commands.
Implementations <strong class="purple">should</strong> use these pipeline stages to avoid unnecessary
stalls or cache flushing.</p>
</div>
<div class="paragraph">
<p>Bits which can be set, specifying pipeline stages, are:</p>
</div>
<div id="VkPipelineStageFlagBits" class="listingblock">
<div class="content">
<pre class="highlight"><code class="language-c++" data-lang="c++">typedef enum VkPipelineStageFlagBits {
    VK_PIPELINE_STAGE_TOP_OF_PIPE_BIT = 0x00000001,
    VK_PIPELINE_STAGE_DRAW_INDIRECT_BIT = 0x00000002,
    VK_PIPELINE_STAGE_VERTEX_INPUT_BIT = 0x00000004,
    VK_PIPELINE_STAGE_VERTEX_SHADER_BIT = 0x00000008,
    VK_PIPELINE_STAGE_TESSELLATION_CONTROL_SHADER_BIT = 0x00000010,
    VK_PIPELINE_STAGE_TESSELLATION_EVALUATION_SHADER_BIT = 0x00000020,
    VK_PIPELINE_STAGE_GEOMETRY_SHADER_BIT = 0x00000040,
    VK_PIPELINE_STAGE_FRAGMENT_SHADER_BIT = 0x00000080,
    VK_PIPELINE_STAGE_EARLY_FRAGMENT_TESTS_BIT = 0x00000100,
    VK_PIPELINE_STAGE_LATE_FRAGMENT_TESTS_BIT = 0x00000200,
    VK_PIPELINE_STAGE_COLOR_ATTACHMENT_OUTPUT_BIT = 0x00000400,
    VK_PIPELINE_STAGE_COMPUTE_SHADER_BIT = 0x00000800,
    VK_PIPELINE_STAGE_TRANSFER_BIT = 0x00001000,
    VK_PIPELINE_STAGE_BOTTOM_OF_PIPE_BIT = 0x00002000,
    VK_PIPELINE_STAGE_HOST_BIT = 0x00004000,
    VK_PIPELINE_STAGE_ALL_GRAPHICS_BIT = 0x00008000,
    VK_PIPELINE_STAGE_ALL_COMMANDS_BIT = 0x00010000,
    VK_PIPELINE_STAGE_TRANSFORM_FEEDBACK_BIT_EXT = 0x01000000,
    VK_PIPELINE_STAGE_CONDITIONAL_RENDERING_BIT_EXT = 0x00040000,
    VK_PIPELINE_STAGE_COMMAND_PROCESS_BIT_NVX = 0x00020000,
    VK_PIPELINE_STAGE_SHADING_RATE_IMAGE_BIT_NV = 0x00400000,
    VK_PIPELINE_STAGE_RAY_TRACING_SHADER_BIT_NV = 0x00200000,
    VK_PIPELINE_STAGE_ACCELERATION_STRUCTURE_BUILD_BIT_NV = 0x02000000,
    VK_PIPELINE_STAGE_TASK_SHADER_BIT_NV = 0x00080000,
    VK_PIPELINE_STAGE_MESH_SHADER_BIT_NV = 0x00100000,
    VK_PIPELINE_STAGE_FRAGMENT_DENSITY_PROCESS_BIT_EXT = 0x00800000,
    VK_PIPELINE_STAGE_FLAG_BITS_MAX_ENUM = 0x7FFFFFFF
} VkPipelineStageFlagBits;</code></pre>
</div>
</div>
</div>
<div class="sect3">
<h4 id="_description_892">Description</h4>
<div class="ulist">
<ul>
<li>
<p><code>VK_PIPELINE_STAGE_TOP_OF_PIPE_BIT</code> specifies the stage of the
pipeline where any commands are initially received by the queue.</p>
</li>
<li>
<p><code>VK_PIPELINE_STAGE_DRAW_INDIRECT_BIT</code> specifies the stage of the
pipeline where Draw/DispatchIndirect data structures are consumed.
This stage also includes reading commands written by
<a href="#vkCmdProcessCommandsNVX">vkCmdProcessCommandsNVX</a>.</p>
</li>
<li>
<p><code>VK_PIPELINE_STAGE_TASK_SHADER_BIT_NV</code> specifies the task shader
stage.</p>
</li>
<li>
<p><code>VK_PIPELINE_STAGE_MESH_SHADER_BIT_NV</code> specifies the mesh shader
stage.</p>
</li>
<li>
<p><code>VK_PIPELINE_STAGE_VERTEX_INPUT_BIT</code> specifies the stage of the
pipeline where vertex and index buffers are consumed.</p>
</li>
<li>
<p><code>VK_PIPELINE_STAGE_VERTEX_SHADER_BIT</code> specifies the vertex shader
stage.</p>
</li>
<li>
<p><code>VK_PIPELINE_STAGE_TESSELLATION_CONTROL_SHADER_BIT</code> specifies the
tessellation control shader stage.</p>
</li>
<li>
<p><code>VK_PIPELINE_STAGE_TESSELLATION_EVALUATION_SHADER_BIT</code> specifies the
tessellation evaluation shader stage.</p>
</li>
<li>
<p><code>VK_PIPELINE_STAGE_GEOMETRY_SHADER_BIT</code> specifies the geometry
shader stage.</p>
</li>
<li>
<p><code>VK_PIPELINE_STAGE_FRAGMENT_SHADER_BIT</code> specifies the fragment
shader stage.</p>
</li>
<li>
<p><code>VK_PIPELINE_STAGE_EARLY_FRAGMENT_TESTS_BIT</code> specifies the stage of
the pipeline where early fragment tests (depth and stencil tests before
fragment shading) are performed.
This stage also includes <a href="vkspec.html#renderpass-load-store-ops">subpass load
operations</a> for framebuffer attachments with a depth/stencil format.</p>
</li>
<li>
<p><code>VK_PIPELINE_STAGE_LATE_FRAGMENT_TESTS_BIT</code> specifies the stage of
the pipeline where late fragment tests (depth and stencil tests after
fragment shading) are performed.
This stage also includes <a href="vkspec.html#renderpass-load-store-ops">subpass store
operations</a> for framebuffer attachments with a depth/stencil format.</p>
</li>
<li>
<p><code>VK_PIPELINE_STAGE_COLOR_ATTACHMENT_OUTPUT_BIT</code> specifies the stage
of the pipeline after blending where the final color values are output
from the pipeline.
This stage also includes <a href="vkspec.html#renderpass-load-store-ops">subpass load and
store operations</a> and multisample resolve operations for framebuffer
attachments with a color
or depth/stencil
format.</p>
</li>
<li>
<p><code>VK_PIPELINE_STAGE_COMPUTE_SHADER_BIT</code> specifies the execution of a
compute shader.</p>
</li>
<li>
<p><a id="synchronization-pipeline-stages-transfer"></a>
<code>VK_PIPELINE_STAGE_TRANSFER_BIT</code> specifies the execution of copy
commands.
This includes the operations resulting from all <a href="vkspec.html#copies">copy
commands</a>, <a href="vkspec.html#clears">clear commands</a> (with the exception of
<a href="#vkCmdClearAttachments">vkCmdClearAttachments</a>), and <a href="#vkCmdCopyQueryPoolResults">vkCmdCopyQueryPoolResults</a>.</p>
</li>
<li>
<p><code>VK_PIPELINE_STAGE_BOTTOM_OF_PIPE_BIT</code> specifies the final stage in
the pipeline where operations generated by all commands complete
execution.</p>
</li>
<li>
<p><code>VK_PIPELINE_STAGE_HOST_BIT</code> specifies a pseudo-stage indicating
execution on the host of reads/writes of device memory.
This stage is not invoked by any commands recorded in a command buffer.</p>
</li>
<li>
<p><code>VK_PIPELINE_STAGE_RAY_TRACING_SHADER_BIT_NV</code> specifies the
execution of the ray tracing shader stages.</p>
</li>
<li>
<p><code>VK_PIPELINE_STAGE_ACCELERATION_STRUCTURE_BUILD_BIT_NV</code> specifies
the execution of <a href="#vkCmdBuildAccelerationStructureNV">vkCmdBuildAccelerationStructureNV</a>,
<a href="#vkCmdCopyAccelerationStructureNV">vkCmdCopyAccelerationStructureNV</a>, and
<a href="#vkCmdWriteAccelerationStructuresPropertiesNV">vkCmdWriteAccelerationStructuresPropertiesNV</a>.</p>
</li>
<li>
<p><code>VK_PIPELINE_STAGE_ALL_GRAPHICS_BIT</code> specifies the execution of all
graphics pipeline stages, and is equivalent to the logical OR of:</p>
<div class="ulist">
<ul>
<li>
<p><code>VK_PIPELINE_STAGE_TOP_OF_PIPE_BIT</code></p>
</li>
<li>
<p><code>VK_PIPELINE_STAGE_DRAW_INDIRECT_BIT</code></p>
</li>
<li>
<p><code>VK_PIPELINE_STAGE_TASK_SHADER_BIT_NV</code></p>
</li>
<li>
<p><code>VK_PIPELINE_STAGE_MESH_SHADER_BIT_NV</code></p>
</li>
<li>
<p><code>VK_PIPELINE_STAGE_VERTEX_INPUT_BIT</code></p>
</li>
<li>
<p><code>VK_PIPELINE_STAGE_VERTEX_SHADER_BIT</code></p>
</li>
<li>
<p><code>VK_PIPELINE_STAGE_TESSELLATION_CONTROL_SHADER_BIT</code></p>
</li>
<li>
<p><code>VK_PIPELINE_STAGE_TESSELLATION_EVALUATION_SHADER_BIT</code></p>
</li>
<li>
<p><code>VK_PIPELINE_STAGE_GEOMETRY_SHADER_BIT</code></p>
</li>
<li>
<p><code>VK_PIPELINE_STAGE_FRAGMENT_SHADER_BIT</code></p>
</li>
<li>
<p><code>VK_PIPELINE_STAGE_EARLY_FRAGMENT_TESTS_BIT</code></p>
</li>
<li>
<p><code>VK_PIPELINE_STAGE_LATE_FRAGMENT_TESTS_BIT</code></p>
</li>
<li>
<p><code>VK_PIPELINE_STAGE_COLOR_ATTACHMENT_OUTPUT_BIT</code></p>
</li>
<li>
<p><code>VK_PIPELINE_STAGE_BOTTOM_OF_PIPE_BIT</code></p>
</li>
<li>
<p><code>VK_PIPELINE_STAGE_CONDITIONAL_RENDERING_BIT_EXT</code></p>
</li>
<li>
<p><code>VK_PIPELINE_STAGE_TRANSFORM_FEEDBACK_BIT_EXT</code></p>
</li>
<li>
<p><code>VK_PIPELINE_STAGE_SHADING_RATE_IMAGE_BIT_NV</code></p>
</li>
<li>
<p><code>VK_PIPELINE_STAGE_FRAGMENT_DENSITY_PROCESS_BIT_EXT</code></p>
</li>
</ul>
</div>
</li>
<li>
<p><code>VK_PIPELINE_STAGE_ALL_COMMANDS_BIT</code> is equivalent to the logical OR
of every other pipeline stage flag that is supported on the queue it is
used with.</p>
</li>
<li>
<p><code>VK_PIPELINE_STAGE_CONDITIONAL_RENDERING_BIT_EXT</code> specifies the
stage of the pipeline where the predicate of conditional rendering is
consumed.</p>
</li>
<li>
<p><code>VK_PIPELINE_STAGE_TRANSFORM_FEEDBACK_BIT_EXT</code> specifies the stage
of the pipeline where vertex attribute output values are written to the
transform feedback buffers.</p>
</li>
<li>
<p><code>VK_PIPELINE_STAGE_COMMAND_PROCESS_BIT_NVX</code> specifies the stage of
the pipeline where device-side generation of commands via
<a href="#vkCmdProcessCommandsNVX">vkCmdProcessCommandsNVX</a> is handled.</p>
</li>
<li>
<p><code>VK_PIPELINE_STAGE_SHADING_RATE_IMAGE_BIT_NV</code> specifies the stage of
the pipeline where the <a href="vkspec.html#primsrast-shading-rate-image">shading rate
image</a> is read to determine the shading rate for portions of a
rasterized primitive.</p>
</li>
<li>
<p><code>VK_PIPELINE_STAGE_FRAGMENT_DENSITY_PROCESS_BIT_EXT</code> specifies the
stage of the pipeline where the fragment density map is read to
<a href="vkspec.html#fragmentdensitymapops">generate the fragment areas</a>.</p>
</li>
</ul>
</div>
<div class="admonitionblock note">
<table>
<tr>
<td class="icon">
<i class="fa icon-note" title="Note"></i>
</td>
<td class="content">
<div class="title">Note</div>
<div class="paragraph">
<p>An execution dependency with only <code>VK_PIPELINE_STAGE_BOTTOM_OF_PIPE_BIT</code>
in the destination stage mask will only prevent that stage from executing in
subsequently submitted commands.
As this stage does not perform any actual execution, this is not observable
- in effect, it does not delay processing of subsequent commands.
Similarly an execution dependency with only
<code>VK_PIPELINE_STAGE_TOP_OF_PIPE_BIT</code> in the source stage mask will
effectively not wait for any prior commands to complete.</p>
</div>
<div class="paragraph">
<p>When defining a memory dependency, using only
<code>VK_PIPELINE_STAGE_BOTTOM_OF_PIPE_BIT</code> or
<code>VK_PIPELINE_STAGE_TOP_OF_PIPE_BIT</code> would never make any accesses
available and/or visible because these stages do not access memory.</p>
</div>
<div class="paragraph">
<p><code>VK_PIPELINE_STAGE_BOTTOM_OF_PIPE_BIT</code> and
<code>VK_PIPELINE_STAGE_TOP_OF_PIPE_BIT</code> are useful for accomplishing layout
transitions and queue ownership operations when the required execution
dependency is satisfied by other means - for example, semaphore operations
between queues.</p>
</div>
</td>
</tr>
</table>
</div>
</div>
<div class="sect3">
<h4 id="_see_also_892">See Also</h4>
<div class="paragraph">
<p><a href="#VkCheckpointDataNV">VkCheckpointDataNV</a>, <a href="#VkPipelineStageFlags">VkPipelineStageFlags</a>, <a href="#vkCmdWriteBufferMarkerAMD">vkCmdWriteBufferMarkerAMD</a>, <a href="#vkCmdWriteTimestamp">vkCmdWriteTimestamp</a></p>
</div>
</div>
<div class="sect3">
<h4 id="_document_notes_892">Document Notes</h4>
<div class="paragraph">
<p>For more information, see the Vulkan Specification at URL</p>
</div>
<div class="paragraph">
<p><a href="https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VkPipelineStageFlagBits" class="bare">https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VkPipelineStageFlagBits</a></p>
</div>
<div class="paragraph">
<p>This page is extracted from the Vulkan Specification.
Fixes and changes should be made to the Specification, not directly.</p>
</div>
<div style="page-break-after: always;"></div>
</div>
</div>
<div class="sect2">
<h3 id="_vkpointclippingbehavior3">VkPointClippingBehavior(3)</h3>
<div class="sect3">
<h4 id="_name_893">Name</h4>
<div class="paragraph">
<p>VkPointClippingBehavior - Enum specifying the point clipping behavior</p>
</div>
</div>
<div class="sect3">
<h4 id="_c_specification_893">C Specification</h4>
<div class="paragraph">
<p>Possible values of
<a href="#VkPhysicalDevicePointClippingProperties">VkPhysicalDevicePointClippingProperties</a>::<code>pointClippingBehavior</code>,
specifying clipping behavior of a point primitive whose vertex lies outside
the clip volume, are:</p>
</div>
<div id="VkPointClippingBehavior" class="listingblock">
<div class="content">
<pre class="highlight"><code class="language-c++" data-lang="c++">typedef enum VkPointClippingBehavior {
    VK_POINT_CLIPPING_BEHAVIOR_ALL_CLIP_PLANES = 0,
    VK_POINT_CLIPPING_BEHAVIOR_USER_CLIP_PLANES_ONLY = 1,
    VK_POINT_CLIPPING_BEHAVIOR_ALL_CLIP_PLANES_KHR = VK_POINT_CLIPPING_BEHAVIOR_ALL_CLIP_PLANES,
    VK_POINT_CLIPPING_BEHAVIOR_USER_CLIP_PLANES_ONLY_KHR = VK_POINT_CLIPPING_BEHAVIOR_USER_CLIP_PLANES_ONLY,
    VK_POINT_CLIPPING_BEHAVIOR_MAX_ENUM = 0x7FFFFFFF
} VkPointClippingBehavior;</code></pre>
</div>
</div>
<div class="paragraph">
<p>or the equivalent</p>
</div>
<div id="VkPointClippingBehaviorKHR" class="listingblock">
<div class="content">
<pre class="highlight"><code class="language-c++" data-lang="c++">typedef VkPointClippingBehavior VkPointClippingBehaviorKHR;</code></pre>
</div>
</div>
</div>
<div class="sect3">
<h4 id="_description_893">Description</h4>
<div class="ulist">
<ul>
<li>
<p><code>VK_POINT_CLIPPING_BEHAVIOR_ALL_CLIP_PLANES</code> specifies that the
primitive is discarded if the vertex lies outside any clip plane,
including the planes bounding the view volume.</p>
</li>
<li>
<p><code>VK_POINT_CLIPPING_BEHAVIOR_USER_CLIP_PLANES_ONLY</code> specifies that
the primitive is discarded only if the vertex lies outside any user clip
plane.</p>
</li>
</ul>
</div>
</div>
<div class="sect3">
<h4 id="_see_also_893">See Also</h4>
<div class="paragraph">
<p><a href="#VkPhysicalDevicePointClippingProperties">VkPhysicalDevicePointClippingProperties</a></p>
</div>
</div>
<div class="sect3">
<h4 id="_document_notes_893">Document Notes</h4>
<div class="paragraph">
<p>For more information, see the Vulkan Specification at URL</p>
</div>
<div class="paragraph">
<p><a href="https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VkPointClippingBehavior" class="bare">https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VkPointClippingBehavior</a></p>
</div>
<div class="paragraph">
<p>This page is extracted from the Vulkan Specification.
Fixes and changes should be made to the Specification, not directly.</p>
</div>
<div style="page-break-after: always;"></div>
</div>
</div>
<div class="sect2">
<h3 id="_vkpolygonmode3">VkPolygonMode(3)</h3>
<div class="sect3">
<h4 id="_name_894">Name</h4>
<div class="paragraph">
<p>VkPolygonMode - Control polygon rasterization mode</p>
</div>
</div>
<div class="sect3">
<h4 id="_c_specification_894">C Specification</h4>
<div class="paragraph">
<p>Possible values of the
<a href="#VkPipelineRasterizationStateCreateInfo">VkPipelineRasterizationStateCreateInfo</a>::<code>polygonMode</code> property of
the currently active pipeline, specifying the method of rasterization for
polygons, are:</p>
</div>
<div id="VkPolygonMode" class="listingblock">
<div class="content">
<pre class="highlight"><code class="language-c++" data-lang="c++">typedef enum VkPolygonMode {
    VK_POLYGON_MODE_FILL = 0,
    VK_POLYGON_MODE_LINE = 1,
    VK_POLYGON_MODE_POINT = 2,
    VK_POLYGON_MODE_FILL_RECTANGLE_NV = 1000153000,
    VK_POLYGON_MODE_MAX_ENUM = 0x7FFFFFFF
} VkPolygonMode;</code></pre>
</div>
</div>
</div>
<div class="sect3">
<h4 id="_description_894">Description</h4>
<div class="ulist">
<ul>
<li>
<p><code>VK_POLYGON_MODE_POINT</code> specifies that polygon vertices are drawn as
points.</p>
</li>
<li>
<p><code>VK_POLYGON_MODE_LINE</code> specifies that polygon edges are drawn as
line segments.</p>
</li>
<li>
<p><code>VK_POLYGON_MODE_FILL</code> specifies that polygons are rendered using
the polygon rasterization rules in this section.</p>
</li>
<li>
<p><code>VK_POLYGON_MODE_FILL_RECTANGLE_NV</code> specifies that polygons are
rendered using polygon rasterization rules, modified to consider a
sample within the primitive if the sample location is inside the
axis-aligned bounding box of the triangle after projection.
Note that the barycentric weights used in attribute interpolation <strong class="purple">can</strong>
extend outside the range <span class="eq">[0,1]</span> when these primitives are shaded.
Special treatment is given to a sample position on the boundary edge of
the bounding box.
In such a case, if two rectangles lie on either side of a common edge
(with identical endpoints) on which a sample position lies, then exactly
one of the triangles <strong class="purple">must</strong> produce a fragment that covers that sample
during rasterization.</p>
<div class="paragraph">
<p>Polygons rendered in <code>VK_POLYGON_MODE_FILL_RECTANGLE_NV</code> mode <strong class="purple">may</strong> be
    clipped by the frustum or by user clip planes.
    If clipping is applied, the triangle is culled rather than clipped.</p>
</div>
<div class="paragraph">
<p>Area calculation and facingness are determined for
    <code>VK_POLYGON_MODE_FILL_RECTANGLE_NV</code> mode using the triangle&#8217;s
    vertices.</p>
</div>
</li>
</ul>
</div>
<div class="paragraph">
<p>These modes affect only the final rasterization of polygons: in particular,
a polygon&#8217;s vertices are shaded and the polygon is clipped and possibly
culled before these modes are applied.</p>
</div>
</div>
<div class="sect3">
<h4 id="_see_also_894">See Also</h4>
<div class="paragraph">
<p><a href="#VkPipelineRasterizationStateCreateInfo">VkPipelineRasterizationStateCreateInfo</a></p>
</div>
</div>
<div class="sect3">
<h4 id="_document_notes_894">Document Notes</h4>
<div class="paragraph">
<p>For more information, see the Vulkan Specification at URL</p>
</div>
<div class="paragraph">
<p><a href="https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VkPolygonMode" class="bare">https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VkPolygonMode</a></p>
</div>
<div class="paragraph">
<p>This page is extracted from the Vulkan Specification.
Fixes and changes should be made to the Specification, not directly.</p>
</div>
<div style="page-break-after: always;"></div>
</div>
</div>
<div class="sect2">
<h3 id="_vkpresentmodekhr3">VkPresentModeKHR(3)</h3>
<div class="sect3">
<h4 id="_name_895">Name</h4>
<div class="paragraph">
<p>VkPresentModeKHR - presentation mode supported for a surface</p>
</div>
</div>
<div class="sect3">
<h4 id="_c_specification_895">C Specification</h4>
<div class="paragraph">
<p>Possible values of elements of the
<a href="#vkGetPhysicalDeviceSurfacePresentModesKHR">vkGetPhysicalDeviceSurfacePresentModesKHR</a>::<code>pPresentModes</code> array,
indicating the supported presentation modes for a surface, are:</p>
</div>
<div id="VkPresentModeKHR" class="listingblock">
<div class="content">
<pre class="highlight"><code class="language-c++" data-lang="c++">typedef enum VkPresentModeKHR {
    VK_PRESENT_MODE_IMMEDIATE_KHR = 0,
    VK_PRESENT_MODE_MAILBOX_KHR = 1,
    VK_PRESENT_MODE_FIFO_KHR = 2,
    VK_PRESENT_MODE_FIFO_RELAXED_KHR = 3,
    VK_PRESENT_MODE_SHARED_DEMAND_REFRESH_KHR = 1000111000,
    VK_PRESENT_MODE_SHARED_CONTINUOUS_REFRESH_KHR = 1000111001,
    VK_PRESENT_MODE_MAX_ENUM_KHR = 0x7FFFFFFF
} VkPresentModeKHR;</code></pre>
</div>
</div>
</div>
<div class="sect3">
<h4 id="_description_895">Description</h4>
<div class="ulist">
<ul>
<li>
<p><code>VK_PRESENT_MODE_IMMEDIATE_KHR</code> specifies that the presentation
engine does not wait for a vertical blanking period to update the
current image, meaning this mode <strong class="purple">may</strong> result in visible tearing.
No internal queuing of presentation requests is needed, as the requests
are applied immediately.</p>
</li>
<li>
<p><code>VK_PRESENT_MODE_MAILBOX_KHR</code> specifies that the presentation engine
waits for the next vertical blanking period to update the current image.
Tearing <strong class="purple">cannot</strong> be observed.
An internal single-entry queue is used to hold pending presentation
requests.
If the queue is full when a new presentation request is received, the
new request replaces the existing entry, and any images associated with
the prior entry become available for re-use by the application.
One request is removed from the queue and processed during each vertical
blanking period in which the queue is non-empty.</p>
</li>
<li>
<p><code>VK_PRESENT_MODE_FIFO_KHR</code> specifies that the presentation engine
waits for the next vertical blanking period to update the current image.
Tearing <strong class="purple">cannot</strong> be observed.
An internal queue is used to hold pending presentation requests.
New requests are appended to the end of the queue, and one request is
removed from the beginning of the queue and processed during each
vertical blanking period in which the queue is non-empty.
This is the only value of <code>presentMode</code> that is <strong class="purple">required</strong> to be
supported.</p>
</li>
<li>
<p><code>VK_PRESENT_MODE_FIFO_RELAXED_KHR</code> specifies that the presentation
engine generally waits for the next vertical blanking period to update
the current image.
If a vertical blanking period has already passed since the last update
of the current image then the presentation engine does not wait for
another vertical blanking period for the update, meaning this mode <strong class="purple">may</strong>
result in visible tearing in this case.
This mode is useful for reducing visual stutter with an application that
will mostly present a new image before the next vertical blanking
period, but may occasionally be late, and present a new image just after
the next vertical blanking period.
An internal queue is used to hold pending presentation requests.
New requests are appended to the end of the queue, and one request is
removed from the beginning of the queue and processed during or after
each vertical blanking period in which the queue is non-empty.</p>
</li>
<li>
<p><code>VK_PRESENT_MODE_SHARED_DEMAND_REFRESH_KHR</code> specifies that the
presentation engine and application have concurrent access to a single
image, which is referred to as a <em>shared presentable image</em>.
The presentation engine is only required to update the current image
after a new presentation request is received.
Therefore the application <strong class="purple">must</strong> make a presentation request whenever an
update is required.
However, the presentation engine <strong class="purple">may</strong> update the current image at any
point, meaning this mode <strong class="purple">may</strong> result in visible tearing.</p>
</li>
<li>
<p><code>VK_PRESENT_MODE_SHARED_CONTINUOUS_REFRESH_KHR</code> specifies that the
presentation engine and application have concurrent access to a single
image, which is referred to as a <em>shared presentable image</em>.
The presentation engine periodically updates the current image on its
regular refresh cycle.
The application is only required to make one initial presentation
request, after which the presentation engine <strong class="purple">must</strong> update the current
image without any need for further presentation requests.
The application <strong class="purple">can</strong> indicate the image contents have been updated by
making a presentation request, but this does not guarantee the timing of
when it will be updated.
This mode <strong class="purple">may</strong> result in visible tearing if rendering to the image is
not timed correctly.</p>
</li>
</ul>
</div>
<div class="paragraph">
<p>The supported <a href="#VkImageUsageFlagBits">VkImageUsageFlagBits</a> of the presentable images of a
swapchain created for a surface <strong class="purple">may</strong> differ depending on the presentation
mode, and can be determined as per the table below:</p>
</div>
<table class="tableblock frame-all grid-all stretch">
<caption class="title">Table 25. Presentable image usage queries</caption>
<colgroup>
<col style="width: 50%;" />
<col style="width: 50%;" />
</colgroup>
<thead>
<tr>
<th class="tableblock halign-left valign-top">Presentation mode</th>
<th class="tableblock halign-left valign-top">Image usage flags</th>
</tr>
</thead>
<tbody>
<tr>
<td class="tableblock halign-left valign-top"><p class="tableblock"><code>VK_PRESENT_MODE_IMMEDIATE_KHR</code></p></td>
<td class="tableblock halign-left valign-top"><p class="tableblock"><a href="#VkSurfaceCapabilitiesKHR">VkSurfaceCapabilitiesKHR</a>::<code>supportedUsageFlags</code></p></td>
</tr>
<tr>
<td class="tableblock halign-left valign-top"><p class="tableblock"><code>VK_PRESENT_MODE_MAILBOX_KHR</code></p></td>
<td class="tableblock halign-left valign-top"><p class="tableblock"><a href="#VkSurfaceCapabilitiesKHR">VkSurfaceCapabilitiesKHR</a>::<code>supportedUsageFlags</code></p></td>
</tr>
<tr>
<td class="tableblock halign-left valign-top"><p class="tableblock"><code>VK_PRESENT_MODE_FIFO_KHR</code></p></td>
<td class="tableblock halign-left valign-top"><p class="tableblock"><a href="#VkSurfaceCapabilitiesKHR">VkSurfaceCapabilitiesKHR</a>::<code>supportedUsageFlags</code></p></td>
</tr>
<tr>
<td class="tableblock halign-left valign-top"><p class="tableblock"><code>VK_PRESENT_MODE_FIFO_RELAXED_KHR</code></p></td>
<td class="tableblock halign-left valign-top"><p class="tableblock"><a href="#VkSurfaceCapabilitiesKHR">VkSurfaceCapabilitiesKHR</a>::<code>supportedUsageFlags</code></p></td>
</tr>
<tr>
<td class="tableblock halign-left valign-top"><p class="tableblock"><code>VK_PRESENT_MODE_SHARED_DEMAND_REFRESH_KHR</code></p></td>
<td class="tableblock halign-left valign-top"><p class="tableblock"><a href="#VkSharedPresentSurfaceCapabilitiesKHR">VkSharedPresentSurfaceCapabilitiesKHR</a>::<code>sharedPresentSupportedUsageFlags</code></p></td>
</tr>
<tr>
<td class="tableblock halign-left valign-top"><p class="tableblock"><code>VK_PRESENT_MODE_SHARED_CONTINUOUS_REFRESH_KHR</code></p></td>
<td class="tableblock halign-left valign-top"><p class="tableblock"><a href="#VkSharedPresentSurfaceCapabilitiesKHR">VkSharedPresentSurfaceCapabilitiesKHR</a>::<code>sharedPresentSupportedUsageFlags</code></p></td>
</tr>
</tbody>
</table>
<div class="admonitionblock note">
<table>
<tr>
<td class="icon">
<i class="fa icon-note" title="Note"></i>
</td>
<td class="content">
<div class="title">Note</div>
<div class="paragraph">
<p>For reference, the mode indicated by <code>VK_PRESENT_MODE_FIFO_KHR</code> is
equivalent to the behavior of {wgl|glX|egl}SwapBuffers with a swap interval
of 1, while the mode indicated by <code>VK_PRESENT_MODE_FIFO_RELAXED_KHR</code> is
equivalent to the behavior of {wgl|glX}SwapBuffers with a swap interval of
-1 (from the {WGL|GLX}_EXT_swap_control_tear extensions).</p>
</div>
</td>
</tr>
</table>
</div>
</div>
<div class="sect3">
<h4 id="_see_also_895">See Also</h4>
<div class="paragraph">
<p><a href="#VkSwapchainCreateInfoKHR">VkSwapchainCreateInfoKHR</a>, <a href="#vkGetPhysicalDeviceSurfacePresentModes2EXT">vkGetPhysicalDeviceSurfacePresentModes2EXT</a>, <a href="#vkGetPhysicalDeviceSurfacePresentModesKHR">vkGetPhysicalDeviceSurfacePresentModesKHR</a></p>
</div>
</div>
<div class="sect3">
<h4 id="_document_notes_895">Document Notes</h4>
<div class="paragraph">
<p>For more information, see the Vulkan Specification at URL</p>
</div>
<div class="paragraph">
<p><a href="https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VkPresentModeKHR" class="bare">https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VkPresentModeKHR</a></p>
</div>
<div class="paragraph">
<p>This page is extracted from the Vulkan Specification.
Fixes and changes should be made to the Specification, not directly.</p>
</div>
<div style="page-break-after: always;"></div>
</div>
</div>
<div class="sect2">
<h3 id="_vkprimitivetopology3">VkPrimitiveTopology(3)</h3>
<div class="sect3">
<h4 id="_name_896">Name</h4>
<div class="paragraph">
<p>VkPrimitiveTopology - Supported primitive topologies</p>
</div>
</div>
<div class="sect3">
<h4 id="_c_specification_896">C Specification</h4>
<div class="paragraph">
<p>The primitive topologies defined by <a href="#VkPrimitiveTopology">VkPrimitiveTopology</a> are:</p>
</div>
<div id="VkPrimitiveTopology" class="listingblock">
<div class="content">
<pre class="highlight"><code class="language-c++" data-lang="c++">typedef enum VkPrimitiveTopology {
    VK_PRIMITIVE_TOPOLOGY_POINT_LIST = 0,
    VK_PRIMITIVE_TOPOLOGY_LINE_LIST = 1,
    VK_PRIMITIVE_TOPOLOGY_LINE_STRIP = 2,
    VK_PRIMITIVE_TOPOLOGY_TRIANGLE_LIST = 3,
    VK_PRIMITIVE_TOPOLOGY_TRIANGLE_STRIP = 4,
    VK_PRIMITIVE_TOPOLOGY_TRIANGLE_FAN = 5,
    VK_PRIMITIVE_TOPOLOGY_LINE_LIST_WITH_ADJACENCY = 6,
    VK_PRIMITIVE_TOPOLOGY_LINE_STRIP_WITH_ADJACENCY = 7,
    VK_PRIMITIVE_TOPOLOGY_TRIANGLE_LIST_WITH_ADJACENCY = 8,
    VK_PRIMITIVE_TOPOLOGY_TRIANGLE_STRIP_WITH_ADJACENCY = 9,
    VK_PRIMITIVE_TOPOLOGY_PATCH_LIST = 10,
    VK_PRIMITIVE_TOPOLOGY_MAX_ENUM = 0x7FFFFFFF
} VkPrimitiveTopology;</code></pre>
</div>
</div>
</div>
<div class="sect3">
<h4 id="_description_896">Description</h4>
<div class="ulist">
<ul>
<li>
<p><code>VK_PRIMITIVE_TOPOLOGY_POINT_LIST</code> specifies a series of
<a href="vkspec.html#drawing-point-lists">separate point primitives</a>.</p>
</li>
<li>
<p><code>VK_PRIMITIVE_TOPOLOGY_LINE_LIST</code> specifies a series of
<a href="vkspec.html#drawing-line-lists">separate line primitives</a>.</p>
</li>
<li>
<p><code>VK_PRIMITIVE_TOPOLOGY_LINE_STRIP</code> specifies a series of
<a href="vkspec.html#drawing-line-strips">connected line primitives</a> with consecutive lines
sharing a vertex.</p>
</li>
<li>
<p><code>VK_PRIMITIVE_TOPOLOGY_TRIANGLE_LIST</code> specifies a series of
<a href="vkspec.html#drawing-triangle-lists">separate triangle primitives</a>.</p>
</li>
<li>
<p><code>VK_PRIMITIVE_TOPOLOGY_TRIANGLE_STRIP</code> specifies a series of
<a href="vkspec.html#drawing-triangle-strips">connected triangle primitives</a> with
consecutive triangles sharing an edge.</p>
</li>
<li>
<p><code>VK_PRIMITIVE_TOPOLOGY_TRIANGLE_FAN</code> specifies a series of
<a href="vkspec.html#drawing-triangle-fans">connected triangle primitives</a> with all
triangles sharing a common vertex.</p>
</li>
<li>
<p><code>VK_PRIMITIVE_TOPOLOGY_LINE_LIST_WITH_ADJACENCY</code> specifies a series
<a href="vkspec.html#drawing-line-lists-with-adjacency">separate line primitives with
adjacency</a>.</p>
</li>
<li>
<p><code>VK_PRIMITIVE_TOPOLOGY_LINE_STRIP_WITH_ADJACENCY</code> specifies a series
<a href="vkspec.html#drawing-line-strips-with-adjacency">connected line primitives with
adjacency</a>, with consecutive primitives sharing three vertices.</p>
</li>
<li>
<p><code>VK_PRIMITIVE_TOPOLOGY_TRIANGLE_LIST_WITH_ADJACENCY</code> specifies a
series <a href="vkspec.html#drawing-line-lists-with-adjacency">separate triangle primitives
with adjacency</a>.</p>
</li>
<li>
<p><code>VK_PRIMITIVE_TOPOLOGY_TRIANGLE_STRIP_WITH_ADJACENCY</code> specifies
<a href="vkspec.html#drawing-line-lists-with-adjacency">connected triangle primitives with
adjacency</a>, with consecutive triangles sharing an edge.</p>
</li>
<li>
<p><code>VK_PRIMITIVE_TOPOLOGY_PATCH_LIST</code> specifies
<a href="vkspec.html#drawing-patch-lists">separate patch primitives</a>.</p>
</li>
</ul>
</div>
<div class="paragraph">
<p>Each primitive topology, and its construction from a list of vertices, is
described in detail below with a supporting diagram, according to the
following key:</p>
</div>
<table class="tableblock frame-all grid-all stretch">
<colgroup>
<col style="width: 8.3333%;" />
<col style="width: 16.6666%;" />
<col style="width: 75.0001%;" />
</colgroup>
<tbody>
<tr>
<td class="tableblock halign-center valign-middle"><p class="tableblock"><span class="image"><span class="alt">primitive topology key vertex</span></span></p></td>
<td class="tableblock halign-left valign-middle"><p class="tableblock">Vertex</p></td>
<td class="tableblock halign-left valign-top"><p class="tableblock">A point in 3-dimensional space.
  Positions chosen within the diagrams are arbitrary and for
  illustration only.</p></td>
</tr>
<tr>
<td class="tableblock halign-center valign-middle"><p class="tableblock"><span class="image"><span class="alt">primitive topology key vertex number</span></span></p></td>
<td class="tableblock halign-left valign-middle"><p class="tableblock">Vertex Number</p></td>
<td class="tableblock halign-left valign-top"><p class="tableblock">Sequence position of a vertex within the provided vertex data.</p></td>
</tr>
<tr>
<td class="tableblock halign-center valign-middle"><p class="tableblock"><span class="image"><span class="alt">primitive topology key provoking vertex</span></span></p></td>
<td class="tableblock halign-left valign-middle"><p class="tableblock">Provoking Vertex</p></td>
<td class="tableblock halign-left valign-top"><p class="tableblock">Provoking vertex within the main primitive.
  The arrow points along an edge of the relevant primitive, following winding order.
  Used in <a href="vkspec.html#vertexpostproc-flatshading">flat shading</a>.</p></td>
</tr>
<tr>
<td class="tableblock halign-center valign-middle"><p class="tableblock"><span class="image"><span class="alt">primitive topology key edge</span></span></p></td>
<td class="tableblock halign-left valign-middle"><p class="tableblock">Primitive Edge</p></td>
<td class="tableblock halign-left valign-top"><p class="tableblock">An edge connecting the points of a main primitive.</p></td>
</tr>
<tr>
<td class="tableblock halign-center valign-middle"><p class="tableblock"><span class="image"><span class="alt">primitive topology key adjacency edge</span></span></p></td>
<td class="tableblock halign-left valign-middle"><p class="tableblock">Adjacency Edge</p></td>
<td class="tableblock halign-left valign-top"><p class="tableblock">Points connected by these lines do not contribute to a main primitive,
  and are only accessible in a <a href="vkspec.html#geometry">geometry shader</a>.</p></td>
</tr>
<tr>
<td class="tableblock halign-center valign-middle"><p class="tableblock"><span class="image"><span class="alt">primitive topology key winding order</span></span></p></td>
<td class="tableblock halign-left valign-middle"><p class="tableblock">Winding Order</p></td>
<td class="tableblock halign-left valign-top"><p class="tableblock">The relative order in which vertices are defined within a primitive,
  used in the <a href="vkspec.html#primsrast-polygons-basic">facing determination</a>.
  This ordering has no specific start or end point.</p></td>
</tr>
</tbody>
</table>
<div class="paragraph">
<p>The diagrams are supported with mathematical definitions where the vertices
and primitives are numbered starting from <span class="eq">0</span>; <span class="eq">vertex<sub>0</sub></span> is the
first vertex in the provided data and <span class="eq">primitive<sub>0</sub></span> is the first
primitive in the set of primitives defined by the vertices and topology.</p>
</div>
</div>
<div class="sect3">
<h4 id="_see_also_896">See Also</h4>
<div class="paragraph">
<p><a href="#VkPipelineInputAssemblyStateCreateInfo">VkPipelineInputAssemblyStateCreateInfo</a></p>
</div>
</div>
<div class="sect3">
<h4 id="_document_notes_896">Document Notes</h4>
<div class="paragraph">
<p>For more information, see the Vulkan Specification at URL</p>
</div>
<div class="paragraph">
<p><a href="https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VkPrimitiveTopology" class="bare">https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VkPrimitiveTopology</a></p>
</div>
<div class="paragraph">
<p>This page is extracted from the Vulkan Specification.
Fixes and changes should be made to the Specification, not directly.</p>
</div>
<div style="page-break-after: always;"></div>
</div>
</div>
<div class="sect2">
<h3 id="_vkquerycontrolflagbits3">VkQueryControlFlagBits(3)</h3>
<div class="sect3">
<h4 id="_name_897">Name</h4>
<div class="paragraph">
<p>VkQueryControlFlagBits - Bitmask specifying constraints on a query</p>
</div>
</div>
<div class="sect3">
<h4 id="_c_specification_897">C Specification</h4>
<div class="paragraph">
<p>Bits which <strong class="purple">can</strong> be set in <a href="#vkCmdBeginQuery">vkCmdBeginQuery</a>::<code>flags</code>, specifying
constraints on the types of queries that <strong class="purple">can</strong> be performed, are:</p>
</div>
<div id="VkQueryControlFlagBits" class="listingblock">
<div class="content">
<pre class="highlight"><code class="language-c++" data-lang="c++">typedef enum VkQueryControlFlagBits {
    VK_QUERY_CONTROL_PRECISE_BIT = 0x00000001,
    VK_QUERY_CONTROL_FLAG_BITS_MAX_ENUM = 0x7FFFFFFF
} VkQueryControlFlagBits;</code></pre>
</div>
</div>
</div>
<div class="sect3">
<h4 id="_description_897">Description</h4>
<div class="ulist">
<ul>
<li>
<p><code>VK_QUERY_CONTROL_PRECISE_BIT</code> specifies the precision of
<a href="vkspec.html#queries-occlusion">occlusion queries</a>.</p>
</li>
</ul>
</div>
</div>
<div class="sect3">
<h4 id="_see_also_897">See Also</h4>
<div class="paragraph">
<p><a href="#VkQueryControlFlags">VkQueryControlFlags</a></p>
</div>
</div>
<div class="sect3">
<h4 id="_document_notes_897">Document Notes</h4>
<div class="paragraph">
<p>For more information, see the Vulkan Specification at URL</p>
</div>
<div class="paragraph">
<p><a href="https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VkQueryControlFlagBits" class="bare">https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VkQueryControlFlagBits</a></p>
</div>
<div class="paragraph">
<p>This page is extracted from the Vulkan Specification.
Fixes and changes should be made to the Specification, not directly.</p>
</div>
<div style="page-break-after: always;"></div>
</div>
</div>
<div class="sect2">
<h3 id="_vkquerypipelinestatisticflagbits3">VkQueryPipelineStatisticFlagBits(3)</h3>
<div class="sect3">
<h4 id="_name_898">Name</h4>
<div class="paragraph">
<p>VkQueryPipelineStatisticFlagBits - Bitmask specifying queried pipeline statistics</p>
</div>
</div>
<div class="sect3">
<h4 id="_c_specification_898">C Specification</h4>
<div class="paragraph">
<p>Bits which <strong class="purple">can</strong> be set to individually enable pipeline statistics counters
for query pools with <a href="#VkQueryPoolCreateInfo">VkQueryPoolCreateInfo</a>::<code>pipelineStatistics</code>,
and for secondary command buffers with
<a href="#VkCommandBufferInheritanceInfo">VkCommandBufferInheritanceInfo</a>::<code>pipelineStatistics</code>, are:</p>
</div>
<div id="VkQueryPipelineStatisticFlagBits" class="listingblock">
<div class="content">
<pre class="highlight"><code class="language-c++" data-lang="c++">typedef enum VkQueryPipelineStatisticFlagBits {
    VK_QUERY_PIPELINE_STATISTIC_INPUT_ASSEMBLY_VERTICES_BIT = 0x00000001,
    VK_QUERY_PIPELINE_STATISTIC_INPUT_ASSEMBLY_PRIMITIVES_BIT = 0x00000002,
    VK_QUERY_PIPELINE_STATISTIC_VERTEX_SHADER_INVOCATIONS_BIT = 0x00000004,
    VK_QUERY_PIPELINE_STATISTIC_GEOMETRY_SHADER_INVOCATIONS_BIT = 0x00000008,
    VK_QUERY_PIPELINE_STATISTIC_GEOMETRY_SHADER_PRIMITIVES_BIT = 0x00000010,
    VK_QUERY_PIPELINE_STATISTIC_CLIPPING_INVOCATIONS_BIT = 0x00000020,
    VK_QUERY_PIPELINE_STATISTIC_CLIPPING_PRIMITIVES_BIT = 0x00000040,
    VK_QUERY_PIPELINE_STATISTIC_FRAGMENT_SHADER_INVOCATIONS_BIT = 0x00000080,
    VK_QUERY_PIPELINE_STATISTIC_TESSELLATION_CONTROL_SHADER_PATCHES_BIT = 0x00000100,
    VK_QUERY_PIPELINE_STATISTIC_TESSELLATION_EVALUATION_SHADER_INVOCATIONS_BIT = 0x00000200,
    VK_QUERY_PIPELINE_STATISTIC_COMPUTE_SHADER_INVOCATIONS_BIT = 0x00000400,
    VK_QUERY_PIPELINE_STATISTIC_FLAG_BITS_MAX_ENUM = 0x7FFFFFFF
} VkQueryPipelineStatisticFlagBits;</code></pre>
</div>
</div>
</div>
<div class="sect3">
<h4 id="_description_898">Description</h4>
<div class="ulist">
<ul>
<li>
<p><code>VK_QUERY_PIPELINE_STATISTIC_INPUT_ASSEMBLY_VERTICES_BIT</code> specifies
that queries managed by the pool will count the number of vertices
processed by the <a href="vkspec.html#drawing">input assembly</a> stage.
Vertices corresponding to incomplete primitives <strong class="purple">may</strong> contribute to the
count.</p>
</li>
<li>
<p><code>VK_QUERY_PIPELINE_STATISTIC_INPUT_ASSEMBLY_PRIMITIVES_BIT</code>
specifies that queries managed by the pool will count the number of
primitives processed by the <a href="vkspec.html#drawing">input assembly</a> stage.
If primitive restart is enabled, restarting the primitive topology has
no effect on the count.
Incomplete primitives <strong class="purple">may</strong> be counted.</p>
</li>
<li>
<p><code>VK_QUERY_PIPELINE_STATISTIC_VERTEX_SHADER_INVOCATIONS_BIT</code>
specifies that queries managed by the pool will count the number of
vertex shader invocations.
This counter&#8217;s value is incremented each time a vertex shader is
<a href="vkspec.html#shaders-vertex-execution">invoked</a>.</p>
</li>
<li>
<p><code>VK_QUERY_PIPELINE_STATISTIC_GEOMETRY_SHADER_INVOCATIONS_BIT</code>
specifies that queries managed by the pool will count the number of
geometry shader invocations.
This counter&#8217;s value is incremented each time a geometry shader is
<a href="vkspec.html#shaders-geometry-execution">invoked</a>.
In the case of <a href="vkspec.html#geometry-invocations">instanced geometry shaders</a>, the
geometry shader invocations count is incremented for each separate
instanced invocation.</p>
</li>
<li>
<p><code>VK_QUERY_PIPELINE_STATISTIC_GEOMETRY_SHADER_PRIMITIVES_BIT</code>
specifies that queries managed by the pool will count the number of
primitives generated by geometry shader invocations.
The counter&#8217;s value is incremented each time the geometry shader emits a
primitive.
Restarting primitive topology using the SPIR-V instructions
<code>OpEndPrimitive</code> or <code>OpEndStreamPrimitive</code> has no effect on the
geometry shader output primitives count.</p>
</li>
<li>
<p><code>VK_QUERY_PIPELINE_STATISTIC_CLIPPING_INVOCATIONS_BIT</code> specifies
that queries managed by the pool will count the number of primitives
processed by the <a href="vkspec.html#vertexpostproc-clipping">Primitive Clipping</a> stage of
the pipeline.
The counter&#8217;s value is incremented each time a primitive reaches the
primitive clipping stage.</p>
</li>
<li>
<p><code>VK_QUERY_PIPELINE_STATISTIC_CLIPPING_PRIMITIVES_BIT</code> specifies that
queries managed by the pool will count the number of primitives output
by the <a href="vkspec.html#vertexpostproc-clipping">Primitive Clipping</a> stage of the
pipeline.
The counter&#8217;s value is incremented each time a primitive passes the
primitive clipping stage.
The actual number of primitives output by the primitive clipping stage
for a particular input primitive is implementation-dependent but <strong class="purple">must</strong>
satisfy the following conditions:</p>
<div class="ulist">
<ul>
<li>
<p>If at least one vertex of the input primitive lies inside the clipping
volume, the counter is incremented by one or more.</p>
</li>
<li>
<p>Otherwise, the counter is incremented by zero or more.</p>
</li>
</ul>
</div>
</li>
<li>
<p><code>VK_QUERY_PIPELINE_STATISTIC_FRAGMENT_SHADER_INVOCATIONS_BIT</code>
specifies that queries managed by the pool will count the number of
fragment shader invocations.
The counter&#8217;s value is incremented each time the fragment shader is
<a href="vkspec.html#shaders-fragment-execution">invoked</a>.</p>
</li>
<li>
<p><code>VK_QUERY_PIPELINE_STATISTIC_TESSELLATION_CONTROL_SHADER_PATCHES_BIT</code>
specifies that queries managed by the pool will count the number of
patches processed by the tessellation control shader.
The counter&#8217;s value is incremented once for each patch for which a
tessellation control shader is
<a href="vkspec.html#shaders-tessellation-control-execution">invoked</a>.</p>
</li>
<li>
<p><code>VK_QUERY_PIPELINE_STATISTIC_TESSELLATION_EVALUATION_SHADER_INVOCATIONS_BIT</code>
specifies that queries managed by the pool will count the number of
invocations of the tessellation evaluation shader.
The counter&#8217;s value is incremented each time the tessellation evaluation
shader is <a href="vkspec.html#shaders-tessellation-evaluation-execution">invoked</a>.</p>
</li>
<li>
<p><code>VK_QUERY_PIPELINE_STATISTIC_COMPUTE_SHADER_INVOCATIONS_BIT</code>
specifies that queries managed by the pool will count the number of
compute shader invocations.
The counter&#8217;s value is incremented every time the compute shader is
invoked.
Implementations <strong class="purple">may</strong> skip the execution of certain compute shader
invocations or execute additional compute shader invocations for
implementation-dependent reasons as long as the results of rendering
otherwise remain unchanged.</p>
</li>
</ul>
</div>
<div class="paragraph">
<p>These values are intended to measure relative statistics on one
implementation.
Various device architectures will count these values differently.
Any or all counters <strong class="purple">may</strong> be affected by the issues described in
<a href="vkspec.html#queries-operation-undefined">Query Operation</a>.</p>
</div>
<div class="admonitionblock note">
<table>
<tr>
<td class="icon">
<i class="fa icon-note" title="Note"></i>
</td>
<td class="content">
<div class="title">Note</div>
<div class="paragraph">
<p>For example, tile-based rendering devices <strong class="purple">may</strong> need to replay the scene
multiple times, affecting some of the counts.</p>
</div>
</td>
</tr>
</table>
</div>
<div class="paragraph">
<p>If a pipeline has <code>rasterizerDiscardEnable</code> enabled, implementations
<strong class="purple">may</strong> discard primitives after the final vertex processing stage.
As a result, if <code>rasterizerDiscardEnable</code> is enabled, the clipping input
and output primitives counters <strong class="purple">may</strong> not be incremented.</p>
</div>
<div class="paragraph">
<p>When a pipeline statistics query finishes, the result for that query is
marked as available.
The application <strong class="purple">can</strong> copy the result to a buffer (via
<code>vkCmdCopyQueryPoolResults</code>), or request it be put into host memory (via
<code>vkGetQueryPoolResults</code>).</p>
</div>
</div>
<div class="sect3">
<h4 id="_see_also_898">See Also</h4>
<div class="paragraph">
<p><a href="#VkQueryPipelineStatisticFlags">VkQueryPipelineStatisticFlags</a></p>
</div>
</div>
<div class="sect3">
<h4 id="_document_notes_898">Document Notes</h4>
<div class="paragraph">
<p>For more information, see the Vulkan Specification at URL</p>
</div>
<div class="paragraph">
<p><a href="https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VkQueryPipelineStatisticFlagBits" class="bare">https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VkQueryPipelineStatisticFlagBits</a></p>
</div>
<div class="paragraph">
<p>This page is extracted from the Vulkan Specification.
Fixes and changes should be made to the Specification, not directly.</p>
</div>
<div style="page-break-after: always;"></div>
</div>
</div>
<div class="sect2">
<h3 id="_vkqueryresultflagbits3">VkQueryResultFlagBits(3)</h3>
<div class="sect3">
<h4 id="_name_899">Name</h4>
<div class="paragraph">
<p>VkQueryResultFlagBits - Bitmask specifying how and when query results are returned</p>
</div>
</div>
<div class="sect3">
<h4 id="_c_specification_899">C Specification</h4>
<div class="paragraph">
<p>Bits which <strong class="purple">can</strong> be set in <a href="#vkGetQueryPoolResults">vkGetQueryPoolResults</a>::<code>flags</code> and
<a href="#vkCmdCopyQueryPoolResults">vkCmdCopyQueryPoolResults</a>::<code>flags</code>, specifying how and when
results are returned, are:</p>
</div>
<div id="VkQueryResultFlagBits" class="listingblock">
<div class="content">
<pre class="highlight"><code class="language-c++" data-lang="c++">typedef enum VkQueryResultFlagBits {
    VK_QUERY_RESULT_64_BIT = 0x00000001,
    VK_QUERY_RESULT_WAIT_BIT = 0x00000002,
    VK_QUERY_RESULT_WITH_AVAILABILITY_BIT = 0x00000004,
    VK_QUERY_RESULT_PARTIAL_BIT = 0x00000008,
    VK_QUERY_RESULT_FLAG_BITS_MAX_ENUM = 0x7FFFFFFF
} VkQueryResultFlagBits;</code></pre>
</div>
</div>
</div>
<div class="sect3">
<h4 id="_description_899">Description</h4>
<div class="ulist">
<ul>
<li>
<p><code>VK_QUERY_RESULT_64_BIT</code> specifies the results will be written as an
array of 64-bit unsigned integer values.
If this bit is not set, the results will be written as an array of
32-bit unsigned integer values.</p>
</li>
<li>
<p><code>VK_QUERY_RESULT_WAIT_BIT</code> specifies that Vulkan will wait for each
query&#8217;s status to become available before retrieving its results.</p>
</li>
<li>
<p><code>VK_QUERY_RESULT_WITH_AVAILABILITY_BIT</code> specifies that the
availability status accompanies the results.</p>
</li>
<li>
<p><code>VK_QUERY_RESULT_PARTIAL_BIT</code> specifies that returning partial
results is acceptable.</p>
</li>
</ul>
</div>
</div>
<div class="sect3">
<h4 id="_see_also_899">See Also</h4>
<div class="paragraph">
<p><a href="#VkQueryResultFlags">VkQueryResultFlags</a></p>
</div>
</div>
<div class="sect3">
<h4 id="_document_notes_899">Document Notes</h4>
<div class="paragraph">
<p>For more information, see the Vulkan Specification at URL</p>
</div>
<div class="paragraph">
<p><a href="https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VkQueryResultFlagBits" class="bare">https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VkQueryResultFlagBits</a></p>
</div>
<div class="paragraph">
<p>This page is extracted from the Vulkan Specification.
Fixes and changes should be made to the Specification, not directly.</p>
</div>
<div style="page-break-after: always;"></div>
</div>
</div>
<div class="sect2">
<h3 id="_vkquerytype3">VkQueryType(3)</h3>
<div class="sect3">
<h4 id="_name_900">Name</h4>
<div class="paragraph">
<p>VkQueryType - Specify the type of queries managed by a query pool</p>
</div>
</div>
<div class="sect3">
<h4 id="_c_specification_900">C Specification</h4>
<div class="paragraph">
<p>Possible values of <a href="#VkQueryPoolCreateInfo">VkQueryPoolCreateInfo</a>::<code>queryType</code>, specifying
the type of queries managed by the pool, are:</p>
</div>
<div id="VkQueryType" class="listingblock">
<div class="content">
<pre class="highlight"><code class="language-c++" data-lang="c++">typedef enum VkQueryType {
    VK_QUERY_TYPE_OCCLUSION = 0,
    VK_QUERY_TYPE_PIPELINE_STATISTICS = 1,
    VK_QUERY_TYPE_TIMESTAMP = 2,
    VK_QUERY_TYPE_TRANSFORM_FEEDBACK_STREAM_EXT = 1000028004,
    VK_QUERY_TYPE_ACCELERATION_STRUCTURE_COMPACTED_SIZE_NV = 1000165000,
    VK_QUERY_TYPE_MAX_ENUM = 0x7FFFFFFF
} VkQueryType;</code></pre>
</div>
</div>
</div>
<div class="sect3">
<h4 id="_description_900">Description</h4>
<div class="ulist">
<ul>
<li>
<p><code>VK_QUERY_TYPE_OCCLUSION</code> specifies an <a href="vkspec.html#queries-occlusion">occlusion query</a>.</p>
</li>
<li>
<p><code>VK_QUERY_TYPE_PIPELINE_STATISTICS</code> specifies a <a href="vkspec.html#queries-pipestats">pipeline statistics query</a>.</p>
</li>
<li>
<p><code>VK_QUERY_TYPE_TIMESTAMP</code> specifies a <a href="vkspec.html#queries-timestamps">timestamp query</a>.</p>
</li>
<li>
<p><code>VK_QUERY_TYPE_TRANSFORM_FEEDBACK_STREAM_EXT</code> specifies a
<a href="vkspec.html#queries-transform-feedback">transform feedback query</a>.</p>
</li>
</ul>
</div>
</div>
<div class="sect3">
<h4 id="_see_also_900">See Also</h4>
<div class="paragraph">
<p><a href="#VkQueryPoolCreateInfo">VkQueryPoolCreateInfo</a>, <a href="#vkCmdWriteAccelerationStructuresPropertiesNV">vkCmdWriteAccelerationStructuresPropertiesNV</a></p>
</div>
</div>
<div class="sect3">
<h4 id="_document_notes_900">Document Notes</h4>
<div class="paragraph">
<p>For more information, see the Vulkan Specification at URL</p>
</div>
<div class="paragraph">
<p><a href="https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VkQueryType" class="bare">https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VkQueryType</a></p>
</div>
<div class="paragraph">
<p>This page is extracted from the Vulkan Specification.
Fixes and changes should be made to the Specification, not directly.</p>
</div>
<div style="page-break-after: always;"></div>
</div>
</div>
<div class="sect2">
<h3 id="_vkqueueflagbits3">VkQueueFlagBits(3)</h3>
<div class="sect3">
<h4 id="_name_901">Name</h4>
<div class="paragraph">
<p>VkQueueFlagBits - Bitmask specifying capabilities of queues in a queue family</p>
</div>
</div>
<div class="sect3">
<h4 id="_c_specification_901">C Specification</h4>
<div class="paragraph">
<p>Bits which <strong class="purple">may</strong> be set in <a href="#VkQueueFamilyProperties">VkQueueFamilyProperties</a>::<code>queueFlags</code>
indicating capabilities of queues in a queue family are:</p>
</div>
<div id="VkQueueFlagBits" class="listingblock">
<div class="content">
<pre class="highlight"><code class="language-c++" data-lang="c++">typedef enum VkQueueFlagBits {
    VK_QUEUE_GRAPHICS_BIT = 0x00000001,
    VK_QUEUE_COMPUTE_BIT = 0x00000002,
    VK_QUEUE_TRANSFER_BIT = 0x00000004,
    VK_QUEUE_SPARSE_BINDING_BIT = 0x00000008,
    VK_QUEUE_PROTECTED_BIT = 0x00000010,
    VK_QUEUE_FLAG_BITS_MAX_ENUM = 0x7FFFFFFF
} VkQueueFlagBits;</code></pre>
</div>
</div>
</div>
<div class="sect3">
<h4 id="_description_901">Description</h4>
<div class="ulist">
<ul>
<li>
<p><code>VK_QUEUE_GRAPHICS_BIT</code> specifies that queues in this queue family
support graphics operations.</p>
</li>
<li>
<p><code>VK_QUEUE_COMPUTE_BIT</code> specifies that queues in this queue family
support compute operations.</p>
</li>
<li>
<p><code>VK_QUEUE_TRANSFER_BIT</code> specifies that queues in this queue family
support transfer operations.</p>
</li>
<li>
<p><code>VK_QUEUE_SPARSE_BINDING_BIT</code> specifies that queues in this queue
family support sparse memory management operations (see
<a href="vkspec.html#sparsememory">Sparse Resources</a>).
If any of the sparse resource features are enabled, then at least one
queue family <strong class="purple">must</strong> support this bit.</p>
</li>
<li>
<p>if <code>VK_QUEUE_PROTECTED_BIT</code> is set, then the queues in this queue
family support the <code>VK_DEVICE_QUEUE_CREATE_PROTECTED_BIT</code> bit.
(see <a href="vkspec.html#memory-protected-memory">Protected Memory</a>).
If the protected memory physical device feature is supported, then at
least one queue family of at least one physical device exposed by the
implementation <strong class="purple">must</strong> support this bit.</p>
</li>
</ul>
</div>
<div class="paragraph">
<p>If an implementation exposes any queue family that supports graphics
operations, at least one queue family of at least one physical device
exposed by the implementation <strong class="purple">must</strong> support both graphics and compute
operations.</p>
</div>
<div class="paragraph">
<p>Furthermore, if the protected memory physical device feature is supported,
then at least one queue family of at least one physical device exposed by
the implementation <strong class="purple">must</strong> support graphics operations, compute operations,
and protected memory operations.</p>
</div>
<div class="admonitionblock note">
<table>
<tr>
<td class="icon">
<i class="fa icon-note" title="Note"></i>
</td>
<td class="content">
<div class="title">Note</div>
<div class="paragraph">
<p>All commands that are allowed on a queue that supports transfer operations
are also allowed on a queue that supports either graphics or compute
operations.
Thus, if the capabilities of a queue family include
<code>VK_QUEUE_GRAPHICS_BIT</code> or <code>VK_QUEUE_COMPUTE_BIT</code>, then reporting
the <code>VK_QUEUE_TRANSFER_BIT</code> capability separately for that queue family
is <strong class="purple">optional</strong>.</p>
</div>
</td>
</tr>
</table>
</div>
<div class="paragraph">
<p>For further details see <a href="vkspec.html#devsandqueues-queues">Queues</a>.</p>
</div>
</div>
<div class="sect3">
<h4 id="_see_also_901">See Also</h4>
<div class="paragraph">
<p><a href="#VkQueueFlags">VkQueueFlags</a></p>
</div>
</div>
<div class="sect3">
<h4 id="_document_notes_901">Document Notes</h4>
<div class="paragraph">
<p>For more information, see the Vulkan Specification at URL</p>
</div>
<div class="paragraph">
<p><a href="https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VkQueueFlagBits" class="bare">https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VkQueueFlagBits</a></p>
</div>
<div class="paragraph">
<p>This page is extracted from the Vulkan Specification.
Fixes and changes should be made to the Specification, not directly.</p>
</div>
<div style="page-break-after: always;"></div>
</div>
</div>
<div class="sect2">
<h3 id="_vkqueueglobalpriorityext3">VkQueueGlobalPriorityEXT(3)</h3>
<div class="sect3">
<h4 id="_name_902">Name</h4>
<div class="paragraph">
<p>VkQueueGlobalPriorityEXT - Values specifying a system-wide queue priority</p>
</div>
</div>
<div class="sect3">
<h4 id="_c_specification_902">C Specification</h4>
<div class="paragraph">
<p>Possible values of
<a href="#VkDeviceQueueGlobalPriorityCreateInfoEXT">VkDeviceQueueGlobalPriorityCreateInfoEXT</a>::<code>globalPriority</code>,
specifying a system-wide priority level are:</p>
</div>
<div id="VkQueueGlobalPriorityEXT" class="listingblock">
<div class="content">
<pre class="highlight"><code class="language-c++" data-lang="c++">typedef enum VkQueueGlobalPriorityEXT {
    VK_QUEUE_GLOBAL_PRIORITY_LOW_EXT = 128,
    VK_QUEUE_GLOBAL_PRIORITY_MEDIUM_EXT = 256,
    VK_QUEUE_GLOBAL_PRIORITY_HIGH_EXT = 512,
    VK_QUEUE_GLOBAL_PRIORITY_REALTIME_EXT = 1024,
    VK_QUEUE_GLOBAL_PRIORITY_MAX_ENUM_EXT = 0x7FFFFFFF
} VkQueueGlobalPriorityEXT;</code></pre>
</div>
</div>
</div>
<div class="sect3">
<h4 id="_description_902">Description</h4>
<div class="paragraph">
<p>Priority values are sorted in ascending order.
A comparison operation on the enum values can be used to determine the
priority order.</p>
</div>
<div class="ulist">
<ul>
<li>
<p><code>VK_QUEUE_GLOBAL_PRIORITY_LOW_EXT</code> is below the system default.
Useful for non-interactive tasks.</p>
</li>
<li>
<p><code>VK_QUEUE_GLOBAL_PRIORITY_MEDIUM_EXT</code> is the system default
priority.</p>
</li>
<li>
<p><code>VK_QUEUE_GLOBAL_PRIORITY_HIGH_EXT</code> is above the system default.</p>
</li>
<li>
<p><code>VK_QUEUE_GLOBAL_PRIORITY_REALTIME_EXT</code> is the highest priority.
Useful for critical tasks.</p>
</li>
</ul>
</div>
</div>
<div class="sect3">
<h4 id="_see_also_902">See Also</h4>
<div class="paragraph">
<p><a href="#VkDeviceQueueGlobalPriorityCreateInfoEXT">VkDeviceQueueGlobalPriorityCreateInfoEXT</a></p>
</div>
</div>
<div class="sect3">
<h4 id="_document_notes_902">Document Notes</h4>
<div class="paragraph">
<p>For more information, see the Vulkan Specification at URL</p>
</div>
<div class="paragraph">
<p><a href="https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VkQueueGlobalPriorityEXT" class="bare">https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VkQueueGlobalPriorityEXT</a></p>
</div>
<div class="paragraph">
<p>This page is extracted from the Vulkan Specification.
Fixes and changes should be made to the Specification, not directly.</p>
</div>
<div style="page-break-after: always;"></div>
</div>
</div>
<div class="sect2">
<h3 id="_vkrasterizationorderamd3">VkRasterizationOrderAMD(3)</h3>
<div class="sect3">
<h4 id="_name_903">Name</h4>
<div class="paragraph">
<p>VkRasterizationOrderAMD - Specify rasterization order for a graphics pipeline</p>
</div>
</div>
<div class="sect3">
<h4 id="_c_specification_903">C Specification</h4>
<div class="paragraph">
<p>Possible values of
<a href="#VkPipelineRasterizationStateRasterizationOrderAMD">VkPipelineRasterizationStateRasterizationOrderAMD</a>::<code>rasterizationOrder</code>,
specifying the primitive rasterization order, are:</p>
</div>
<div id="VkRasterizationOrderAMD" class="listingblock">
<div class="content">
<pre class="highlight"><code class="language-c++" data-lang="c++">typedef enum VkRasterizationOrderAMD {
    VK_RASTERIZATION_ORDER_STRICT_AMD = 0,
    VK_RASTERIZATION_ORDER_RELAXED_AMD = 1,
    VK_RASTERIZATION_ORDER_MAX_ENUM_AMD = 0x7FFFFFFF
} VkRasterizationOrderAMD;</code></pre>
</div>
</div>
</div>
<div class="sect3">
<h4 id="_description_903">Description</h4>
<div class="ulist">
<ul>
<li>
<p><code>VK_RASTERIZATION_ORDER_STRICT_AMD</code> specifies that operations for
each primitive in a subpass <strong class="purple">must</strong> occur in <a href="vkspec.html#drawing-primitive-order">primitive order</a>.</p>
</li>
<li>
<p><code>VK_RASTERIZATION_ORDER_RELAXED_AMD</code> specifies that operations for
each primitive in a subpass <strong class="purple">may</strong> not occur in <a href="vkspec.html#drawing-primitive-order">primitive order</a>.</p>
</li>
</ul>
</div>
</div>
<div class="sect3">
<h4 id="_see_also_903">See Also</h4>
<div class="paragraph">
<p><a href="#VkPipelineRasterizationStateRasterizationOrderAMD">VkPipelineRasterizationStateRasterizationOrderAMD</a></p>
</div>
</div>
<div class="sect3">
<h4 id="_document_notes_903">Document Notes</h4>
<div class="paragraph">
<p>For more information, see the Vulkan Specification at URL</p>
</div>
<div class="paragraph">
<p><a href="https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VkRasterizationOrderAMD" class="bare">https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VkRasterizationOrderAMD</a></p>
</div>
<div class="paragraph">
<p>This page is extracted from the Vulkan Specification.
Fixes and changes should be made to the Specification, not directly.</p>
</div>
<div style="page-break-after: always;"></div>
</div>
</div>
<div class="sect2">
<h3 id="_vkraytracingshadergrouptypenv3">VkRayTracingShaderGroupTypeNV(3)</h3>
<div class="sect3">
<h4 id="_name_904">Name</h4>
<div class="paragraph">
<p>VkRayTracingShaderGroupTypeNV - Shader group types</p>
</div>
</div>
<div class="sect3">
<h4 id="_c_specification_904">C Specification</h4>
<div class="paragraph">
<p>Possible values of <code>type</code> in <code>VkRayTracingShaderGroupCreateInfoNV</code>
are:</p>
</div>
<div id="VkRayTracingShaderGroupTypeNV" class="listingblock">
<div class="content">
<pre class="highlight"><code class="language-c++" data-lang="c++">typedef enum VkRayTracingShaderGroupTypeNV {
    VK_RAY_TRACING_SHADER_GROUP_TYPE_GENERAL_NV = 0,
    VK_RAY_TRACING_SHADER_GROUP_TYPE_TRIANGLES_HIT_GROUP_NV = 1,
    VK_RAY_TRACING_SHADER_GROUP_TYPE_PROCEDURAL_HIT_GROUP_NV = 2,
    VK_RAY_TRACING_SHADER_GROUP_TYPE_MAX_ENUM_NV = 0x7FFFFFFF
} VkRayTracingShaderGroupTypeNV;</code></pre>
</div>
</div>
</div>
<div class="sect3">
<h4 id="_description_904">Description</h4>
<div class="ulist">
<ul>
<li>
<p><code>VK_RAY_TRACING_SHADER_GROUP_TYPE_GENERAL_NV</code> indicates a shader
group with a single <code>VK_SHADER_STAGE_RAYGEN_BIT_NV</code>,
<code>VK_SHADER_STAGE_MISS_BIT_NV</code>, or
<code>VK_SHADER_STAGE_CALLABLE_BIT_NV</code> shader in it.</p>
</li>
<li>
<p><code>VK_RAY_TRACING_SHADER_GROUP_TYPE_TRIANGLES_HIT_GROUP_NV</code> specifies
a shader group that only hits triangles and <strong class="purple">must</strong> not contain an
intersection shader, only closest hit and any-hit.</p>
</li>
<li>
<p><code>VK_RAY_TRACING_SHADER_GROUP_TYPE_PROCEDURAL_HIT_GROUP_NV</code> specifies
a shader group that only intersects with custom geometry and <strong class="purple">must</strong>
contain an intersection shader and <strong class="purple">may</strong> contain closest hit and any-hit
shaders.</p>
</li>
</ul>
</div>
<div class="admonitionblock note">
<table>
<tr>
<td class="icon">
<i class="fa icon-note" title="Note"></i>
</td>
<td class="content">
<div class="title">Note</div>
<div class="paragraph">
<p>For current group types, the hit group type could be inferred from the
presence or absence of the intersection shader, but we provide the type
explicitly for future hit groups that do not have that property.</p>
</div>
</td>
</tr>
</table>
</div>
</div>
<div class="sect3">
<h4 id="_see_also_904">See Also</h4>
<div class="paragraph">
<p><a href="#VkRayTracingShaderGroupCreateInfoNV">VkRayTracingShaderGroupCreateInfoNV</a></p>
</div>
</div>
<div class="sect3">
<h4 id="_document_notes_904">Document Notes</h4>
<div class="paragraph">
<p>For more information, see the Vulkan Specification at URL</p>
</div>
<div class="paragraph">
<p><a href="https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VkRayTracingShaderGroupTypeNV" class="bare">https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VkRayTracingShaderGroupTypeNV</a></p>
</div>
<div class="paragraph">
<p>This page is extracted from the Vulkan Specification.
Fixes and changes should be made to the Specification, not directly.</p>
</div>
<div style="page-break-after: always;"></div>
</div>
</div>
<div class="sect2">
<h3 id="_vkresolvemodeflagbitskhr3">VkResolveModeFlagBitsKHR(3)</h3>
<div class="sect3">
<h4 id="_name_905">Name</h4>
<div class="paragraph">
<p>VkResolveModeFlagBitsKHR - Bitmask indicating supported depth and stencil resolve modes</p>
</div>
</div>
<div class="sect3">
<h4 id="_c_specification_905">C Specification</h4>
<div class="paragraph">
<p>Possible values of
<a href="#VkSubpassDescriptionDepthStencilResolveKHR">VkSubpassDescriptionDepthStencilResolveKHR</a>::<code>depthResolveMode</code> and
<code>stencilResolveMode</code>, specifying the depth and stencil resolve modes,
are:</p>
</div>
<div id="VkResolveModeFlagBitsKHR" class="listingblock">
<div class="content">
<pre class="highlight"><code class="language-c++" data-lang="c++">typedef enum VkResolveModeFlagBitsKHR {
    VK_RESOLVE_MODE_NONE_KHR = 0,
    VK_RESOLVE_MODE_SAMPLE_ZERO_BIT_KHR = 0x00000001,
    VK_RESOLVE_MODE_AVERAGE_BIT_KHR = 0x00000002,
    VK_RESOLVE_MODE_MIN_BIT_KHR = 0x00000004,
    VK_RESOLVE_MODE_MAX_BIT_KHR = 0x00000008,
    VK_RESOLVE_MODE_FLAG_BITS_MAX_ENUM_KHR = 0x7FFFFFFF
} VkResolveModeFlagBitsKHR;</code></pre>
</div>
</div>
</div>
<div class="sect3">
<h4 id="_description_905">Description</h4>
<div class="ulist">
<ul>
<li>
<p><code>VK_RESOLVE_MODE_NONE_KHR</code> indicates that no resolve operation is
done.</p>
</li>
<li>
<p><code>VK_RESOLVE_MODE_SAMPLE_ZERO_BIT_KHR</code> indicates that result of the
resolve operation is equal to the value of sample 0.</p>
</li>
<li>
<p><code>VK_RESOLVE_MODE_AVERAGE_BIT_KHR</code> indicates that result of the
resolve operation is the average of the sample values.</p>
</li>
<li>
<p><code>VK_RESOLVE_MODE_MIN_BIT_KHR</code> indicates that result of the resolve
operation is the minimum of the sample values.</p>
</li>
<li>
<p><code>VK_RESOLVE_MODE_MAX_BIT_KHR</code> indicates that result of the resolve
operation is the maximum of the sample values.</p>
</li>
</ul>
</div>
</div>
<div class="sect3">
<h4 id="_see_also_905">See Also</h4>
<div class="paragraph">
<p><a href="#VkResolveModeFlagsKHR">VkResolveModeFlagsKHR</a>, <a href="#VkSubpassDescriptionDepthStencilResolveKHR">VkSubpassDescriptionDepthStencilResolveKHR</a></p>
</div>
</div>
<div class="sect3">
<h4 id="_document_notes_905">Document Notes</h4>
<div class="paragraph">
<p>For more information, see the Vulkan Specification at URL</p>
</div>
<div class="paragraph">
<p><a href="https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VkResolveModeFlagBitsKHR" class="bare">https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VkResolveModeFlagBitsKHR</a></p>
</div>
<div class="paragraph">
<p>This page is extracted from the Vulkan Specification.
Fixes and changes should be made to the Specification, not directly.</p>
</div>
<div style="page-break-after: always;"></div>
</div>
</div>
<div class="sect2">
<h3 id="_vkresult3">VkResult(3)</h3>
<div class="sect3">
<h4 id="_name_906">Name</h4>
<div class="paragraph">
<p>VkResult - Vulkan command return codes</p>
</div>
</div>
<div class="sect3">
<h4 id="_c_specification_906">C Specification</h4>
<div class="paragraph">
<p>While the core Vulkan API is not designed to capture incorrect usage, some
circumstances still require return codes.
Commands in Vulkan return their status via return codes that are in one of
two categories:</p>
</div>
<div class="ulist">
<ul>
<li>
<p>Successful completion codes are returned when a command needs to
communicate success or status information.
All successful completion codes are non-negative values.</p>
</li>
<li>
<p>Run time error codes are returned when a command needs to communicate a
failure that could only be detected at run time.
All run time error codes are negative values.</p>
</li>
</ul>
</div>
<div class="paragraph">
<p>All return codes in Vulkan are reported via <a href="#VkResult">VkResult</a> return values.
The possible codes are:</p>
</div>
<div id="VkResult" class="listingblock">
<div class="content">
<pre class="highlight"><code class="language-c++" data-lang="c++">typedef enum VkResult {
    VK_SUCCESS = 0,
    VK_NOT_READY = 1,
    VK_TIMEOUT = 2,
    VK_EVENT_SET = 3,
    VK_EVENT_RESET = 4,
    VK_INCOMPLETE = 5,
    VK_ERROR_OUT_OF_HOST_MEMORY = -1,
    VK_ERROR_OUT_OF_DEVICE_MEMORY = -2,
    VK_ERROR_INITIALIZATION_FAILED = -3,
    VK_ERROR_DEVICE_LOST = -4,
    VK_ERROR_MEMORY_MAP_FAILED = -5,
    VK_ERROR_LAYER_NOT_PRESENT = -6,
    VK_ERROR_EXTENSION_NOT_PRESENT = -7,
    VK_ERROR_FEATURE_NOT_PRESENT = -8,
    VK_ERROR_INCOMPATIBLE_DRIVER = -9,
    VK_ERROR_TOO_MANY_OBJECTS = -10,
    VK_ERROR_FORMAT_NOT_SUPPORTED = -11,
    VK_ERROR_FRAGMENTED_POOL = -12,
    VK_ERROR_OUT_OF_POOL_MEMORY = -1000069000,
    VK_ERROR_INVALID_EXTERNAL_HANDLE = -1000072003,
    VK_ERROR_SURFACE_LOST_KHR = -1000000000,
    VK_ERROR_NATIVE_WINDOW_IN_USE_KHR = -1000000001,
    VK_SUBOPTIMAL_KHR = 1000001003,
    VK_ERROR_OUT_OF_DATE_KHR = -1000001004,
    VK_ERROR_INCOMPATIBLE_DISPLAY_KHR = -1000003001,
    VK_ERROR_VALIDATION_FAILED_EXT = -1000011001,
    VK_ERROR_INVALID_SHADER_NV = -1000012000,
    VK_ERROR_INVALID_DRM_FORMAT_MODIFIER_PLANE_LAYOUT_EXT = -1000158000,
    VK_ERROR_FRAGMENTATION_EXT = -1000161000,
    VK_ERROR_NOT_PERMITTED_EXT = -1000174001,
    VK_ERROR_INVALID_DEVICE_ADDRESS_EXT = -1000244000,
    VK_ERROR_FULL_SCREEN_EXCLUSIVE_MODE_LOST_EXT = -1000255000,
    VK_ERROR_OUT_OF_POOL_MEMORY_KHR = VK_ERROR_OUT_OF_POOL_MEMORY,
    VK_ERROR_INVALID_EXTERNAL_HANDLE_KHR = VK_ERROR_INVALID_EXTERNAL_HANDLE,
    VK_RESULT_MAX_ENUM = 0x7FFFFFFF
} VkResult;</code></pre>
</div>
</div>
</div>
<div class="sect3">
<h4 id="_description_906">Description</h4>
<div id="fundamentals-successcodes" class="ulist">
<div class="title">Success Codes</div>
<ul>
<li>
<p><code>VK_SUCCESS</code> Command successfully completed</p>
</li>
<li>
<p><code>VK_NOT_READY</code> A fence or query has not yet completed</p>
</li>
<li>
<p><code>VK_TIMEOUT</code> A wait operation has not completed in the specified
time</p>
</li>
<li>
<p><code>VK_EVENT_SET</code> An event is signaled</p>
</li>
<li>
<p><code>VK_EVENT_RESET</code> An event is unsignaled</p>
</li>
<li>
<p><code>VK_INCOMPLETE</code> A return array was too small for the result</p>
</li>
<li>
<p><code>VK_SUBOPTIMAL_KHR</code> A swapchain no longer matches the surface
properties exactly, but <strong class="purple">can</strong> still be used to present to the surface
successfully.</p>
</li>
</ul>
</div>
<div id="fundamentals-errorcodes" class="ulist">
<div class="title">Error codes</div>
<ul>
<li>
<p><code>VK_ERROR_OUT_OF_HOST_MEMORY</code> A host memory allocation has failed.</p>
</li>
<li>
<p><code>VK_ERROR_OUT_OF_DEVICE_MEMORY</code> A device memory allocation has
failed.</p>
</li>
<li>
<p><code>VK_ERROR_INITIALIZATION_FAILED</code> Initialization of an object could
not be completed for implementation-specific reasons.</p>
</li>
<li>
<p><code>VK_ERROR_DEVICE_LOST</code> The logical or physical device has been lost.
See <a href="vkspec.html#devsandqueues-lost-device">Lost Device</a></p>
</li>
<li>
<p><code>VK_ERROR_MEMORY_MAP_FAILED</code> Mapping of a memory object has failed.</p>
</li>
<li>
<p><code>VK_ERROR_LAYER_NOT_PRESENT</code> A requested layer is not present or
could not be loaded.</p>
</li>
<li>
<p><code>VK_ERROR_EXTENSION_NOT_PRESENT</code> A requested extension is not
supported.</p>
</li>
<li>
<p><code>VK_ERROR_FEATURE_NOT_PRESENT</code> A requested feature is not supported.</p>
</li>
<li>
<p><code>VK_ERROR_INCOMPATIBLE_DRIVER</code> The requested version of Vulkan is
not supported by the driver or is otherwise incompatible for
implementation-specific reasons.</p>
</li>
<li>
<p><code>VK_ERROR_TOO_MANY_OBJECTS</code> Too many objects of the type have
already been created.</p>
</li>
<li>
<p><code>VK_ERROR_FORMAT_NOT_SUPPORTED</code> A requested format is not supported
on this device.</p>
</li>
<li>
<p><code>VK_ERROR_FRAGMENTED_POOL</code> A pool allocation has failed due to
fragmentation of the pool&#8217;s memory.
This <strong class="purple">must</strong> only be returned if no attempt to allocate host or device
memory was made to accommodate the new allocation.
This <strong class="purple">should</strong> be returned in preference to
<code>VK_ERROR_OUT_OF_POOL_MEMORY</code>, but only if the implementation is
certain that the pool allocation failure was due to fragmentation.</p>
</li>
<li>
<p><code>VK_ERROR_SURFACE_LOST_KHR</code> A surface is no longer available.</p>
</li>
<li>
<p><code>VK_ERROR_NATIVE_WINDOW_IN_USE_KHR</code> The requested window is already
in use by Vulkan or another API in a manner which prevents it from being
used again.</p>
</li>
<li>
<p><code>VK_ERROR_OUT_OF_DATE_KHR</code> A surface has changed in such a way that
it is no longer compatible with the swapchain, and further presentation
requests using the swapchain will fail.
Applications <strong class="purple">must</strong> query the new surface properties and recreate their
swapchain if they wish to continue presenting to the surface.</p>
</li>
<li>
<p><code>VK_ERROR_INCOMPATIBLE_DISPLAY_KHR</code> The display used by a swapchain
does not use the same presentable image layout, or is incompatible in a
way that prevents sharing an image.</p>
</li>
<li>
<p><code>VK_ERROR_INVALID_SHADER_NV</code> One or more shaders failed to compile
or link.
More details are reported back to the application via
<code><a href="vkspec.html#VK_EXT_debug_report" class="bare">html/vkspec.html#VK_EXT_debug_report</a></code> if enabled.</p>
</li>
<li>
<p><code>VK_ERROR_OUT_OF_POOL_MEMORY</code> A pool memory allocation has failed.
This <strong class="purple">must</strong> only be returned if no attempt to allocate host or device
memory was made to accommodate the new allocation.
If the failure was definitely due to fragmentation of the pool,
<code>VK_ERROR_FRAGMENTED_POOL</code> <strong class="purple">should</strong> be returned instead.</p>
</li>
<li>
<p><code>VK_ERROR_INVALID_EXTERNAL_HANDLE</code> An external handle is not a valid
handle of the specified type.</p>
</li>
<li>
<p><code>VK_ERROR_FRAGMENTATION_EXT</code> A descriptor pool creation has failed
due to fragmentation.</p>
</li>
<li>
<p><code>VK_ERROR_INVALID_DEVICE_ADDRESS_EXT</code> A buffer creation failed
because the requested address is not available.</p>
</li>
<li>
<p><code>VK_ERROR_FULL_SCREEN_EXCLUSIVE_MODE_LOST_EXT</code> An operation on a
swapchain created with
<code>VK_FULL_SCREEN_EXCLUSIVE_APPLICATION_CONTROLLED_EXT</code> failed as it
did not have exlusive full-screen access.
This <strong class="purple">may</strong> occur due to implementation-dependent reasons, outside of the
application&#8217;s control.</p>
</li>
</ul>
</div>
<div class="paragraph">
<p>If a command returns a run time error, unless otherwise specified any output
parameters will have undefined contents, except that if the output
parameter is a structure with <code>sType</code> and <code>pNext</code> fields, those
fields will be unmodified.
Any structures chained from <code>pNext</code> will also have undefined contents,
except that <code>sType</code> and <code>pNext</code> will be unmodified.</p>
</div>
<div class="paragraph">
<p>Out of memory errors do not damage any currently existing Vulkan objects.
Objects that have already been successfully created <strong class="purple">can</strong> still be used by
the application.</p>
</div>
<div class="paragraph">
<p>Performance-critical commands generally do not have return codes.
If a run time error occurs in such commands, the implementation will defer
reporting the error until a specified point.
For commands that record into command buffers (<code>vkCmd*</code>) run time errors
are reported by <code>vkEndCommandBuffer</code>.</p>
</div>
</div>
<div class="sect3">
<h4 id="_see_also_906">See Also</h4>
<div class="paragraph">
<p><a href="#VkPresentInfoKHR">VkPresentInfoKHR</a></p>
</div>
</div>
<div class="sect3">
<h4 id="_document_notes_906">Document Notes</h4>
<div class="paragraph">
<p>For more information, see the Vulkan Specification at URL</p>
</div>
<div class="paragraph">
<p><a href="https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VkResult" class="bare">https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VkResult</a></p>
</div>
<div class="paragraph">
<p>This page is extracted from the Vulkan Specification.
Fixes and changes should be made to the Specification, not directly.</p>
</div>
<div style="page-break-after: always;"></div>
</div>
</div>
<div class="sect2">
<h3 id="_vksamplecountflagbits3">VkSampleCountFlagBits(3)</h3>
<div class="sect3">
<h4 id="_name_907">Name</h4>
<div class="paragraph">
<p>VkSampleCountFlagBits - Bitmask specifying sample counts supported for an image used for storage operations</p>
</div>
</div>
<div class="sect3">
<h4 id="_c_specification_907">C Specification</h4>
<div class="paragraph">
<p>Bits which <strong class="purple">may</strong> be set in the sample count limits returned by
<a href="#VkPhysicalDeviceLimits">VkPhysicalDeviceLimits</a>, as well as in other queries and structures
representing image sample counts, are:</p>
</div>
<div id="VkSampleCountFlagBits" class="listingblock">
<div class="content">
<pre class="highlight"><code class="language-c++" data-lang="c++">typedef enum VkSampleCountFlagBits {
    VK_SAMPLE_COUNT_1_BIT = 0x00000001,
    VK_SAMPLE_COUNT_2_BIT = 0x00000002,
    VK_SAMPLE_COUNT_4_BIT = 0x00000004,
    VK_SAMPLE_COUNT_8_BIT = 0x00000008,
    VK_SAMPLE_COUNT_16_BIT = 0x00000010,
    VK_SAMPLE_COUNT_32_BIT = 0x00000020,
    VK_SAMPLE_COUNT_64_BIT = 0x00000040,
    VK_SAMPLE_COUNT_FLAG_BITS_MAX_ENUM = 0x7FFFFFFF
} VkSampleCountFlagBits;</code></pre>
</div>
</div>
</div>
<div class="sect3">
<h4 id="_description_907">Description</h4>
<div class="ulist">
<ul>
<li>
<p><code>VK_SAMPLE_COUNT_1_BIT</code> specifies an image with one sample per
pixel.</p>
</li>
<li>
<p><code>VK_SAMPLE_COUNT_2_BIT</code> specifies an image with 2 samples per pixel.</p>
</li>
<li>
<p><code>VK_SAMPLE_COUNT_4_BIT</code> specifies an image with 4 samples per pixel.</p>
</li>
<li>
<p><code>VK_SAMPLE_COUNT_8_BIT</code> specifies an image with 8 samples per pixel.</p>
</li>
<li>
<p><code>VK_SAMPLE_COUNT_16_BIT</code> specifies an image with 16 samples per
pixel.</p>
</li>
<li>
<p><code>VK_SAMPLE_COUNT_32_BIT</code> specifies an image with 32 samples per
pixel.</p>
</li>
<li>
<p><code>VK_SAMPLE_COUNT_64_BIT</code> specifies an image with 64 samples per
pixel.</p>
</li>
</ul>
</div>
</div>
<div class="sect3">
<h4 id="_see_also_907">See Also</h4>
<div class="paragraph">
<p><a href="#VkAttachmentDescription">VkAttachmentDescription</a>, <a href="#VkAttachmentDescription2KHR">VkAttachmentDescription2KHR</a>, <a href="#VkImageCreateInfo">VkImageCreateInfo</a>, <a href="#VkPhysicalDeviceSparseImageFormatInfo2">VkPhysicalDeviceSparseImageFormatInfo2</a>, <a href="#VkPipelineMultisampleStateCreateInfo">VkPipelineMultisampleStateCreateInfo</a>, <a href="#VkSampleCountFlags">VkSampleCountFlags</a>, <a href="#VkSampleLocationsInfoEXT">VkSampleLocationsInfoEXT</a>, <a href="#vkGetPhysicalDeviceMultisamplePropertiesEXT">vkGetPhysicalDeviceMultisamplePropertiesEXT</a>, <a href="#vkGetPhysicalDeviceSparseImageFormatProperties">vkGetPhysicalDeviceSparseImageFormatProperties</a></p>
</div>
</div>
<div class="sect3">
<h4 id="_document_notes_907">Document Notes</h4>
<div class="paragraph">
<p>For more information, see the Vulkan Specification at URL</p>
</div>
<div class="paragraph">
<p><a href="https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VkSampleCountFlagBits" class="bare">https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VkSampleCountFlagBits</a></p>
</div>
<div class="paragraph">
<p>This page is extracted from the Vulkan Specification.
Fixes and changes should be made to the Specification, not directly.</p>
</div>
<div style="page-break-after: always;"></div>
</div>
</div>
<div class="sect2">
<h3 id="_vksampleraddressmode3">VkSamplerAddressMode(3)</h3>
<div class="sect3">
<h4 id="_name_908">Name</h4>
<div class="paragraph">
<p>VkSamplerAddressMode - Specify behavior of sampling with texture coordinates outside an image</p>
</div>
</div>
<div class="sect3">
<h4 id="_c_specification_908">C Specification</h4>
<div class="paragraph">
<p>Possible values of the <a href="#VkSamplerCreateInfo">VkSamplerCreateInfo</a>::<code>addressMode*</code>
parameters, specifying the behavior of sampling with coordinates outside the
range <span class="eq">[0,1]</span> for the respective <span class="eq">u</span>, <span class="eq">v</span>, or <span class="eq">w</span> coordinate
as defined in the <a href="vkspec.html#textures-wrapping-operation">Wrapping Operation</a>
section, are:</p>
</div>
<div id="VkSamplerAddressMode" class="listingblock">
<div class="content">
<pre class="highlight"><code class="language-c++" data-lang="c++">typedef enum VkSamplerAddressMode {
    VK_SAMPLER_ADDRESS_MODE_REPEAT = 0,
    VK_SAMPLER_ADDRESS_MODE_MIRRORED_REPEAT = 1,
    VK_SAMPLER_ADDRESS_MODE_CLAMP_TO_EDGE = 2,
    VK_SAMPLER_ADDRESS_MODE_CLAMP_TO_BORDER = 3,
    VK_SAMPLER_ADDRESS_MODE_MIRROR_CLAMP_TO_EDGE = 4,
    VK_SAMPLER_ADDRESS_MODE_MAX_ENUM = 0x7FFFFFFF
} VkSamplerAddressMode;</code></pre>
</div>
</div>
</div>
<div class="sect3">
<h4 id="_description_908">Description</h4>
<div class="ulist">
<ul>
<li>
<p><code>VK_SAMPLER_ADDRESS_MODE_REPEAT</code> specifies that the repeat wrap mode
will be used.</p>
</li>
<li>
<p><code>VK_SAMPLER_ADDRESS_MODE_MIRRORED_REPEAT</code> specifies that the
mirrored repeat wrap mode will be used.</p>
</li>
<li>
<p><code>VK_SAMPLER_ADDRESS_MODE_CLAMP_TO_EDGE</code> specifies that the clamp to
edge wrap mode will be used.</p>
</li>
<li>
<p><code>VK_SAMPLER_ADDRESS_MODE_CLAMP_TO_BORDER</code> specifies that the clamp
to border wrap mode will be used.</p>
</li>
<li>
<p><code>VK_SAMPLER_ADDRESS_MODE_MIRROR_CLAMP_TO_EDGE</code> specifies that the
mirror clamp to edge wrap mode will be used.
This is only valid if the <code><a href="vkspec.html#VK_KHR_sampler_mirror_clamp_to_edge" class="bare">html/vkspec.html#VK_KHR_sampler_mirror_clamp_to_edge</a></code>
extension is enabled.</p>
</li>
</ul>
</div>
</div>
<div class="sect3">
<h4 id="_see_also_908">See Also</h4>
<div class="paragraph">
<p><a href="#VkSamplerCreateInfo">VkSamplerCreateInfo</a></p>
</div>
</div>
<div class="sect3">
<h4 id="_document_notes_908">Document Notes</h4>
<div class="paragraph">
<p>For more information, see the Vulkan Specification at URL</p>
</div>
<div class="paragraph">
<p><a href="https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VkSamplerAddressMode" class="bare">https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VkSamplerAddressMode</a></p>
</div>
<div class="paragraph">
<p>This page is extracted from the Vulkan Specification.
Fixes and changes should be made to the Specification, not directly.</p>
</div>
<div style="page-break-after: always;"></div>
</div>
</div>
<div class="sect2">
<h3 id="_vksamplercreateflagbits3">VkSamplerCreateFlagBits(3)</h3>
<div class="sect3">
<h4 id="_name_909">Name</h4>
<div class="paragraph">
<p>VkSamplerCreateFlagBits - Bitmask specifying additional parameters of sampler</p>
</div>
</div>
<div class="sect3">
<h4 id="_c_specification_909">C Specification</h4>
<div class="paragraph">
<p>Bits which <strong class="purple">can</strong> be set in <a href="#VkSamplerCreateInfo">VkSamplerCreateInfo</a>::<code>flags</code>, specifying
additional parameters of a sampler, are:</p>
</div>
<div id="VkSamplerCreateFlagBits" class="listingblock">
<div class="content">
<pre class="highlight"><code class="language-c++" data-lang="c++">typedef enum VkSamplerCreateFlagBits {
    VK_SAMPLER_CREATE_SUBSAMPLED_BIT_EXT = 0x00000001,
    VK_SAMPLER_CREATE_SUBSAMPLED_COARSE_RECONSTRUCTION_BIT_EXT = 0x00000002,
    VK_SAMPLER_CREATE_FLAG_BITS_MAX_ENUM = 0x7FFFFFFF
} VkSamplerCreateFlagBits;</code></pre>
</div>
</div>
</div>
<div class="sect3">
<h4 id="_description_909">Description</h4>
<div class="ulist">
<ul>
<li>
<p><a id="samplers-subsamplesampler"></a> <code>VK_SAMPLER_CREATE_SUBSAMPLED_BIT_EXT</code>
specifies that the sampler will read from an image created with
<code>flags</code> containing <code>VK_IMAGE_CREATE_SUBSAMPLED_BIT_EXT</code>.</p>
</li>
<li>
<p><code>VK_SAMPLER_CREATE_SUBSAMPLED_COARSE_RECONSTRUCTION_BIT_EXT</code>
specifies that the implementation <strong class="purple">may</strong> use approximations when
reconstructing a full color value for texture access from a subsampled
image.</p>
</li>
</ul>
</div>
<div class="admonitionblock note">
<table>
<tr>
<td class="icon">
<i class="fa icon-note" title="Note"></i>
</td>
<td class="content">
<div class="title">Note</div>
<div class="paragraph">
<p>The approximations used when
<code>VK_SAMPLER_CREATE_SUBSAMPLED_COARSE_RECONSTRUCTION_BIT_EXT</code> is
specified are implementation defined.
Some implementations <strong class="purple">may</strong> interpolate between fragment density levels in a
subsampled image.
In that case, this bit <strong class="purple">may</strong> be used to decide whether the interpolation
factors are calculated per fragment or at a coarser granularity.</p>
</div>
</td>
</tr>
</table>
</div>
</div>
<div class="sect3">
<h4 id="_see_also_909">See Also</h4>
<div class="paragraph">
<p><a href="#VkSamplerCreateFlags">VkSamplerCreateFlags</a></p>
</div>
</div>
<div class="sect3">
<h4 id="_document_notes_909">Document Notes</h4>
<div class="paragraph">
<p>For more information, see the Vulkan Specification at URL</p>
</div>
<div class="paragraph">
<p><a href="https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VkSamplerCreateFlagBits" class="bare">https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VkSamplerCreateFlagBits</a></p>
</div>
<div class="paragraph">
<p>This page is extracted from the Vulkan Specification.
Fixes and changes should be made to the Specification, not directly.</p>
</div>
<div style="page-break-after: always;"></div>
</div>
</div>
<div class="sect2">
<h3 id="_vksamplermipmapmode3">VkSamplerMipmapMode(3)</h3>
<div class="sect3">
<h4 id="_name_910">Name</h4>
<div class="paragraph">
<p>VkSamplerMipmapMode - Specify mipmap mode used for texture lookups</p>
</div>
</div>
<div class="sect3">
<h4 id="_c_specification_910">C Specification</h4>
<div class="paragraph">
<p>Possible values of the <a href="#VkSamplerCreateInfo">VkSamplerCreateInfo</a>::<code>mipmapMode</code>,
specifying the mipmap mode used for texture lookups, are:</p>
</div>
<div id="VkSamplerMipmapMode" class="listingblock">
<div class="content">
<pre class="highlight"><code class="language-c++" data-lang="c++">typedef enum VkSamplerMipmapMode {
    VK_SAMPLER_MIPMAP_MODE_NEAREST = 0,
    VK_SAMPLER_MIPMAP_MODE_LINEAR = 1,
    VK_SAMPLER_MIPMAP_MODE_MAX_ENUM = 0x7FFFFFFF
} VkSamplerMipmapMode;</code></pre>
</div>
</div>
</div>
<div class="sect3">
<h4 id="_description_910">Description</h4>
<div class="ulist">
<ul>
<li>
<p><code>VK_SAMPLER_MIPMAP_MODE_NEAREST</code> specifies nearest filtering.</p>
</li>
<li>
<p><code>VK_SAMPLER_MIPMAP_MODE_LINEAR</code> specifies linear filtering.</p>
</li>
</ul>
</div>
<div class="paragraph">
<p>These modes are described in detail in <a href="vkspec.html#textures-texel-filtering">Texel
Filtering</a>.</p>
</div>
</div>
<div class="sect3">
<h4 id="_see_also_910">See Also</h4>
<div class="paragraph">
<p><a href="#VkSamplerCreateInfo">VkSamplerCreateInfo</a></p>
</div>
</div>
<div class="sect3">
<h4 id="_document_notes_910">Document Notes</h4>
<div class="paragraph">
<p>For more information, see the Vulkan Specification at URL</p>
</div>
<div class="paragraph">
<p><a href="https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VkSamplerMipmapMode" class="bare">https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VkSamplerMipmapMode</a></p>
</div>
<div class="paragraph">
<p>This page is extracted from the Vulkan Specification.
Fixes and changes should be made to the Specification, not directly.</p>
</div>
<div style="page-break-after: always;"></div>
</div>
</div>
<div class="sect2">
<h3 id="_vksamplerreductionmodeext3">VkSamplerReductionModeEXT(3)</h3>
<div class="sect3">
<h4 id="_name_911">Name</h4>
<div class="paragraph">
<p>VkSamplerReductionModeEXT - Specify reduction mode for texture filtering</p>
</div>
</div>
<div class="sect3">
<h4 id="_c_specification_911">C Specification</h4>
<div class="paragraph">
<p>Reduction modes are specified by <a href="#VkSamplerReductionModeEXT">VkSamplerReductionModeEXT</a>, which
takes values:</p>
</div>
<div id="VkSamplerReductionModeEXT" class="listingblock">
<div class="content">
<pre class="highlight"><code class="language-c++" data-lang="c++">typedef enum VkSamplerReductionModeEXT {
    VK_SAMPLER_REDUCTION_MODE_WEIGHTED_AVERAGE_EXT = 0,
    VK_SAMPLER_REDUCTION_MODE_MIN_EXT = 1,
    VK_SAMPLER_REDUCTION_MODE_MAX_EXT = 2,
    VK_SAMPLER_REDUCTION_MODE_MAX_ENUM_EXT = 0x7FFFFFFF
} VkSamplerReductionModeEXT;</code></pre>
</div>
</div>
</div>
<div class="sect3">
<h4 id="_description_911">Description</h4>
<div class="ulist">
<ul>
<li>
<p><code>VK_SAMPLER_REDUCTION_MODE_WEIGHTED_AVERAGE_EXT</code> specifies that
texel values are combined by computing a weighted average of values in
the footprint, using weights as specified in
<a href="vkspec.html#textures-unnormalized-to-integer">the image operations chapter</a>.</p>
</li>
<li>
<p><code>VK_SAMPLER_REDUCTION_MODE_MIN_EXT</code> specifies that texel values are
combined by taking the component-wise minimum of values in the footprint
with non-zero weights.</p>
</li>
<li>
<p><code>VK_SAMPLER_REDUCTION_MODE_MAX_EXT</code> specifies that texel values are
combined by taking the component-wise maximum of values in the footprint
with non-zero weights.</p>
</li>
</ul>
</div>
</div>
<div class="sect3">
<h4 id="_see_also_911">See Also</h4>
<div class="paragraph">
<p><a href="#VkSamplerReductionModeCreateInfoEXT">VkSamplerReductionModeCreateInfoEXT</a></p>
</div>
</div>
<div class="sect3">
<h4 id="_document_notes_911">Document Notes</h4>
<div class="paragraph">
<p>For more information, see the Vulkan Specification at URL</p>
</div>
<div class="paragraph">
<p><a href="https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VkSamplerReductionModeEXT" class="bare">https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VkSamplerReductionModeEXT</a></p>
</div>
<div class="paragraph">
<p>This page is extracted from the Vulkan Specification.
Fixes and changes should be made to the Specification, not directly.</p>
</div>
<div style="page-break-after: always;"></div>
</div>
</div>
<div class="sect2">
<h3 id="_vksamplerycbcrmodelconversion3">VkSamplerYcbcrModelConversion(3)</h3>
<div class="sect3">
<h4 id="_name_912">Name</h4>
<div class="paragraph">
<p>VkSamplerYcbcrModelConversion - Color model component of a color space</p>
</div>
</div>
<div class="sect3">
<h4 id="_c_specification_912">C Specification</h4>
<div class="paragraph">
<p><a href="#VkSamplerYcbcrModelConversion">VkSamplerYcbcrModelConversion</a> defines the conversion from the source
color model to the shader color model.
Possible values are:</p>
</div>
<div id="VkSamplerYcbcrModelConversion" class="listingblock">
<div class="content">
<pre class="highlight"><code class="language-c++" data-lang="c++">typedef enum VkSamplerYcbcrModelConversion {
    VK_SAMPLER_YCBCR_MODEL_CONVERSION_RGB_IDENTITY = 0,
    VK_SAMPLER_YCBCR_MODEL_CONVERSION_YCBCR_IDENTITY = 1,
    VK_SAMPLER_YCBCR_MODEL_CONVERSION_YCBCR_709 = 2,
    VK_SAMPLER_YCBCR_MODEL_CONVERSION_YCBCR_601 = 3,
    VK_SAMPLER_YCBCR_MODEL_CONVERSION_YCBCR_2020 = 4,
    VK_SAMPLER_YCBCR_MODEL_CONVERSION_RGB_IDENTITY_KHR = VK_SAMPLER_YCBCR_MODEL_CONVERSION_RGB_IDENTITY,
    VK_SAMPLER_YCBCR_MODEL_CONVERSION_YCBCR_IDENTITY_KHR = VK_SAMPLER_YCBCR_MODEL_CONVERSION_YCBCR_IDENTITY,
    VK_SAMPLER_YCBCR_MODEL_CONVERSION_YCBCR_709_KHR = VK_SAMPLER_YCBCR_MODEL_CONVERSION_YCBCR_709,
    VK_SAMPLER_YCBCR_MODEL_CONVERSION_YCBCR_601_KHR = VK_SAMPLER_YCBCR_MODEL_CONVERSION_YCBCR_601,
    VK_SAMPLER_YCBCR_MODEL_CONVERSION_YCBCR_2020_KHR = VK_SAMPLER_YCBCR_MODEL_CONVERSION_YCBCR_2020,
    VK_SAMPLER_YCBCR_MODEL_CONVERSION_MAX_ENUM = 0x7FFFFFFF
} VkSamplerYcbcrModelConversion;</code></pre>
</div>
</div>
<div class="paragraph">
<p>or the equivalent</p>
</div>
<div id="VkSamplerYcbcrModelConversionKHR" class="listingblock">
<div class="content">
<pre class="highlight"><code class="language-c++" data-lang="c++">typedef VkSamplerYcbcrModelConversion VkSamplerYcbcrModelConversionKHR;</code></pre>
</div>
</div>
</div>
<div class="sect3">
<h4 id="_description_912">Description</h4>
<div class="ulist">
<ul>
<li>
<p><code>VK_SAMPLER_YCBCR_MODEL_CONVERSION_RGB_IDENTITY</code> specifies that the
input values to the conversion are unmodified.</p>
</li>
<li>
<p><code>VK_SAMPLER_YCBCR_MODEL_CONVERSION_YCBCR_IDENTITY</code> specifies no
model conversion but the inputs are range expanded as for Y&#8217;C<sub>B</sub>C<sub>R</sub>.</p>
</li>
<li>
<p><code>VK_SAMPLER_YCBCR_MODEL_CONVERSION_YCBCR_709</code> specifies the color
model conversion from Y&#8217;C<sub>B</sub>C<sub>R</sub> to R&#8217;G&#8217;B' defined in BT.709 and
described in the &#8220;BT.709 Y’C<sub>B</sub>C<sub>R</sub> conversion&#8221; section of the
<a href="vkspec.html#data-format">Khronos Data Format Specification</a>.</p>
</li>
<li>
<p><code>VK_SAMPLER_YCBCR_MODEL_CONVERSION_YCBCR_601</code> specifies the color
model conversion from Y&#8217;C<sub>B</sub>C<sub>R</sub> to R&#8217;G&#8217;B' defined in BT.601 and
described in the &#8220;BT.601 Y’C<sub>B</sub>C<sub>R</sub> conversion&#8221; section of the
<a href="vkspec.html#data-format">Khronos Data Format Specification</a>.</p>
</li>
<li>
<p><code>VK_SAMPLER_YCBCR_MODEL_CONVERSION_YCBCR_2020</code> specifies the color
model conversion from Y&#8217;C<sub>B</sub>C<sub>R</sub> to R&#8217;G&#8217;B' defined in BT.2020 and
described in the &#8220;BT.2020 Y’C<sub>B</sub>C<sub>R</sub> conversion&#8221; section of the
<a href="vkspec.html#data-format">Khronos Data Format Specification</a>.</p>
</li>
</ul>
</div>
<div class="paragraph">
<p>In the <code>VK_SAMPLER_YCBCR_MODEL_CONVERSION_YCBCR_*</code> color models, for the
input to the sampler Y&#8217;C<sub>B</sub>C<sub>R</sub> range expansion and model conversion:</p>
</div>
<div class="ulist">
<ul>
<li>
<p>the Y (Y' luma) channel corresponds to the G channel of an RGB image.</p>
</li>
<li>
<p>the CB (C<sub>B</sub> or &#8220;U&#8221; blue color difference) channel corresponds to the
B channel of an RGB image.</p>
</li>
<li>
<p>the CR (C<sub>R</sub> or &#8220;V&#8221; red color difference) channel corresponds to the R
channel of an RGB image.</p>
</li>
<li>
<p>the alpha channel, if present, is not modified by color model
conversion.</p>
</li>
</ul>
</div>
<div class="paragraph">
<p>These rules reflect the mapping of channels after the channel swizzle
operation (controlled by
<a href="#VkSamplerYcbcrConversionCreateInfo">VkSamplerYcbcrConversionCreateInfo</a>::<code>components</code>).</p>
</div>
<div class="admonitionblock note">
<table>
<tr>
<td class="icon">
<i class="fa icon-note" title="Note"></i>
</td>
<td class="content">
<div class="title">Note</div>
<div class="paragraph">
<p>For example, an &#8220;YUVA&#8221; 32-bit format comprising four 8-bit channels can be
implemented as <code>VK_FORMAT_R8G8B8A8_UNORM</code> with a component mapping:</p>
</div>
<div class="ulist">
<ul>
<li>
<p><code>components.a</code> = <code>VK_COMPONENT_SWIZZLE_IDENTITY</code></p>
</li>
<li>
<p><code>components.r</code> = <code>VK_COMPONENT_SWIZZLE_B</code></p>
</li>
<li>
<p><code>components.g</code> = <code>VK_COMPONENT_SWIZZLE_R</code></p>
</li>
<li>
<p><code>components.b</code> = <code>VK_COMPONENT_SWIZZLE_G</code></p>
</li>
</ul>
</div>
</td>
</tr>
</table>
</div>
</div>
<div class="sect3">
<h4 id="_see_also_912">See Also</h4>
<div class="paragraph">
<p><a href="#VkAndroidHardwareBufferFormatPropertiesANDROID">VkAndroidHardwareBufferFormatPropertiesANDROID</a>, <a href="#VkSamplerYcbcrConversionCreateInfo">VkSamplerYcbcrConversionCreateInfo</a></p>
</div>
</div>
<div class="sect3">
<h4 id="_document_notes_912">Document Notes</h4>
<div class="paragraph">
<p>For more information, see the Vulkan Specification at URL</p>
</div>
<div class="paragraph">
<p><a href="https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VkSamplerYcbcrModelConversion" class="bare">https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VkSamplerYcbcrModelConversion</a></p>
</div>
<div class="paragraph">
<p>This page is extracted from the Vulkan Specification.
Fixes and changes should be made to the Specification, not directly.</p>
</div>
<div style="page-break-after: always;"></div>
</div>
</div>
<div class="sect2">
<h3 id="_vksamplerycbcrrange3">VkSamplerYcbcrRange(3)</h3>
<div class="sect3">
<h4 id="_name_913">Name</h4>
<div class="paragraph">
<p>VkSamplerYcbcrRange - Range of encoded values in a color space</p>
</div>
</div>
<div class="sect3">
<h4 id="_c_specification_913">C Specification</h4>
<div class="paragraph">
<p>The <a href="#VkSamplerYcbcrRange">VkSamplerYcbcrRange</a> enum describes whether color channels are
encoded using the full range of numerical values or whether values are
reserved for headroom and foot room.
<a href="#VkSamplerYcbcrRange">VkSamplerYcbcrRange</a> is defined as:</p>
</div>
<div id="VkSamplerYcbcrRange" class="listingblock">
<div class="content">
<pre class="highlight"><code class="language-c++" data-lang="c++">typedef enum VkSamplerYcbcrRange {
    VK_SAMPLER_YCBCR_RANGE_ITU_FULL = 0,
    VK_SAMPLER_YCBCR_RANGE_ITU_NARROW = 1,
    VK_SAMPLER_YCBCR_RANGE_ITU_FULL_KHR = VK_SAMPLER_YCBCR_RANGE_ITU_FULL,
    VK_SAMPLER_YCBCR_RANGE_ITU_NARROW_KHR = VK_SAMPLER_YCBCR_RANGE_ITU_NARROW,
    VK_SAMPLER_YCBCR_RANGE_MAX_ENUM = 0x7FFFFFFF
} VkSamplerYcbcrRange;</code></pre>
</div>
</div>
<div class="paragraph">
<p>or the equivalent</p>
</div>
<div id="VkSamplerYcbcrRangeKHR" class="listingblock">
<div class="content">
<pre class="highlight"><code class="language-c++" data-lang="c++">typedef VkSamplerYcbcrRange VkSamplerYcbcrRangeKHR;</code></pre>
</div>
</div>
</div>
<div class="sect3">
<h4 id="_description_913">Description</h4>
<div class="ulist">
<ul>
<li>
<p><code>VK_SAMPLER_YCBCR_RANGE_ITU_FULL</code> specifies that the full range of
the encoded values are valid and interpreted according to the ITU &#8220;full
range&#8221; quantization rules.</p>
</li>
<li>
<p><code>VK_SAMPLER_YCBCR_RANGE_ITU_NARROW</code> specifies that headroom and foot
room are reserved in the numerical range of encoded values, and the
remaining values are expanded according to the ITU &#8220;narrow range&#8221;
quantization rules.</p>
</li>
</ul>
</div>
<div class="paragraph">
<p>The formulae for these conversions is described in the
<a href="vkspec.html#textures-sampler-YCbCr-conversion-rangeexpand">Sampler Y&#8217;C<sub>B</sub>C<sub>R</sub> Range
Expansion</a> section of the <a href="vkspec.html#textures">Image Operations</a> chapter.</p>
</div>
<div class="paragraph">
<p>No range modification takes place if <code>ycbcrModel</code> is
<code>VK_SAMPLER_YCBCR_MODEL_CONVERSION_RGB_IDENTITY</code>; the <code>ycbcrRange</code>
field of <code>VkSamplerYcbcrConversionCreateInfo</code> is ignored in this case.</p>
</div>
</div>
<div class="sect3">
<h4 id="_see_also_913">See Also</h4>
<div class="paragraph">
<p><a href="#VkAndroidHardwareBufferFormatPropertiesANDROID">VkAndroidHardwareBufferFormatPropertiesANDROID</a>, <a href="#VkSamplerYcbcrConversionCreateInfo">VkSamplerYcbcrConversionCreateInfo</a></p>
</div>
</div>
<div class="sect3">
<h4 id="_document_notes_913">Document Notes</h4>
<div class="paragraph">
<p>For more information, see the Vulkan Specification at URL</p>
</div>
<div class="paragraph">
<p><a href="https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VkSamplerYcbcrRange" class="bare">https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VkSamplerYcbcrRange</a></p>
</div>
<div class="paragraph">
<p>This page is extracted from the Vulkan Specification.
Fixes and changes should be made to the Specification, not directly.</p>
</div>
<div style="page-break-after: always;"></div>
</div>
</div>
<div class="sect2">
<h3 id="_vkscopenv3">VkScopeNV(3)</h3>
<div class="sect3">
<h4 id="_name_914">Name</h4>
<div class="paragraph">
<p>VkScopeNV - Specify SPIR-V scope</p>
</div>
</div>
<div class="sect3">
<h4 id="_c_specification_914">C Specification</h4>
<div class="paragraph">
<p>Possible values for <a href="#VkScopeNV">VkScopeNV</a> include:</p>
</div>
<div id="VkScopeNV" class="listingblock">
<div class="content">
<pre class="highlight"><code class="language-c++" data-lang="c++">typedef enum VkScopeNV {
    VK_SCOPE_DEVICE_NV = 1,
    VK_SCOPE_WORKGROUP_NV = 2,
    VK_SCOPE_SUBGROUP_NV = 3,
    VK_SCOPE_QUEUE_FAMILY_NV = 5,
    VK_SCOPE_MAX_ENUM_NV = 0x7FFFFFFF
} VkScopeNV;</code></pre>
</div>
</div>
</div>
<div class="sect3">
<h4 id="_description_914">Description</h4>
<div class="ulist">
<ul>
<li>
<p><code>VK_SCOPE_DEVICE_NV</code> corresponds to SPIR-V <code>Device</code> scope.</p>
</li>
<li>
<p><code>VK_SCOPE_WORKGROUP_NV</code> corresponds to SPIR-V <code>Workgroup</code> scope.</p>
</li>
<li>
<p><code>VK_SCOPE_SUBGROUP_NV</code> corresponds to SPIR-V <code>Subgroup</code> scope.</p>
</li>
<li>
<p><code>VK_SCOPE_QUEUE_FAMILY_NV</code> corresponds to SPIR-V <code>QueueFamilyKHR</code>
scope.</p>
</li>
</ul>
</div>
<div class="paragraph">
<p>All enum values match the corresponding SPIR-V value.</p>
</div>
</div>
<div class="sect3">
<h4 id="_see_also_914">See Also</h4>
<div class="paragraph">
<p><a href="#VkCooperativeMatrixPropertiesNV">VkCooperativeMatrixPropertiesNV</a></p>
</div>
</div>
<div class="sect3">
<h4 id="_document_notes_914">Document Notes</h4>
<div class="paragraph">
<p>For more information, see the Vulkan Specification at URL</p>
</div>
<div class="paragraph">
<p><a href="https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VkScopeNV" class="bare">https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VkScopeNV</a></p>
</div>
<div class="paragraph">
<p>This page is extracted from the Vulkan Specification.
Fixes and changes should be made to the Specification, not directly.</p>
</div>
<div style="page-break-after: always;"></div>
</div>
</div>
<div class="sect2">
<h3 id="_vksemaphoreimportflagbits3">VkSemaphoreImportFlagBits(3)</h3>
<div class="sect3">
<h4 id="_name_915">Name</h4>
<div class="paragraph">
<p>VkSemaphoreImportFlagBits - Bitmask specifying additional parameters of semaphore payload import</p>
</div>
</div>
<div class="sect3">
<h4 id="_c_specification_915">C Specification</h4>
<div class="paragraph">
<p>Additional parameters of a semaphore import operation are specified by
<a href="#VkImportSemaphoreWin32HandleInfoKHR">VkImportSemaphoreWin32HandleInfoKHR</a>::<code>flags</code>
or
<a href="#VkImportSemaphoreFdInfoKHR">VkImportSemaphoreFdInfoKHR</a>::<code>flags</code>
.
Bits which can be set include:</p>
</div>
<div id="VkSemaphoreImportFlagBits" class="listingblock">
<div class="content">
<pre class="highlight"><code class="language-c++" data-lang="c++">typedef enum VkSemaphoreImportFlagBits {
    VK_SEMAPHORE_IMPORT_TEMPORARY_BIT = 0x00000001,
    VK_SEMAPHORE_IMPORT_TEMPORARY_BIT_KHR = VK_SEMAPHORE_IMPORT_TEMPORARY_BIT,
    VK_SEMAPHORE_IMPORT_FLAG_BITS_MAX_ENUM = 0x7FFFFFFF
} VkSemaphoreImportFlagBits;</code></pre>
</div>
</div>
<div class="paragraph">
<p>or the equivalent</p>
</div>
<div id="VkSemaphoreImportFlagBitsKHR" class="listingblock">
<div class="content">
<pre class="highlight"><code class="language-c++" data-lang="c++">typedef VkSemaphoreImportFlagBits VkSemaphoreImportFlagBitsKHR;</code></pre>
</div>
</div>
</div>
<div class="sect3">
<h4 id="_description_915">Description</h4>
<div class="paragraph">
<p>These bits have the following meanings:</p>
</div>
<div class="ulist">
<ul>
<li>
<p><code>VK_SEMAPHORE_IMPORT_TEMPORARY_BIT</code> specifies that the semaphore
payload will be imported only temporarily, as described in
<a href="vkspec.html#synchronization-semaphores-importing">Importing Semaphore Payloads</a>,
regardless of the permanence of <code>handleType</code>.</p>
</li>
</ul>
</div>
</div>
<div class="sect3">
<h4 id="_see_also_915">See Also</h4>
<div class="paragraph">
<p><a href="#VkSemaphoreImportFlags">VkSemaphoreImportFlags</a></p>
</div>
</div>
<div class="sect3">
<h4 id="_document_notes_915">Document Notes</h4>
<div class="paragraph">
<p>For more information, see the Vulkan Specification at URL</p>
</div>
<div class="paragraph">
<p><a href="https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VkSemaphoreImportFlagBits" class="bare">https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VkSemaphoreImportFlagBits</a></p>
</div>
<div class="paragraph">
<p>This page is extracted from the Vulkan Specification.
Fixes and changes should be made to the Specification, not directly.</p>
</div>
<div style="page-break-after: always;"></div>
</div>
</div>
<div class="sect2">
<h3 id="_vkshaderinfotypeamd3">VkShaderInfoTypeAMD(3)</h3>
<div class="sect3">
<h4 id="_name_916">Name</h4>
<div class="paragraph">
<p>VkShaderInfoTypeAMD - Enum specifying which type of shader info to query</p>
</div>
</div>
<div class="sect3">
<h4 id="_c_specification_916">C Specification</h4>
<div class="paragraph">
<p>Possible values of <a href="#vkGetShaderInfoAMD">vkGetShaderInfoAMD</a>::<code>infoType</code>, specifying the
information being queried from a shader, are:</p>
</div>
<div id="VkShaderInfoTypeAMD" class="listingblock">
<div class="content">
<pre class="highlight"><code class="language-c++" data-lang="c++">typedef enum VkShaderInfoTypeAMD {
    VK_SHADER_INFO_TYPE_STATISTICS_AMD = 0,
    VK_SHADER_INFO_TYPE_BINARY_AMD = 1,
    VK_SHADER_INFO_TYPE_DISASSEMBLY_AMD = 2,
    VK_SHADER_INFO_TYPE_MAX_ENUM_AMD = 0x7FFFFFFF
} VkShaderInfoTypeAMD;</code></pre>
</div>
</div>
</div>
<div class="sect3">
<h4 id="_description_916">Description</h4>
<div class="ulist">
<ul>
<li>
<p><code>VK_SHADER_INFO_TYPE_STATISTICS_AMD</code> specifies that device resources
used by a shader will be queried.</p>
</li>
<li>
<p><code>VK_SHADER_INFO_TYPE_BINARY_AMD</code> specifies that
implementation-specific information will be queried.</p>
</li>
<li>
<p><code>VK_SHADER_INFO_TYPE_DISASSEMBLY_AMD</code> specifies that human-readable
dissassembly of a shader.</p>
</li>
</ul>
</div>
</div>
<div class="sect3">
<h4 id="_see_also_916">See Also</h4>
<div class="paragraph">
<p><a href="#vkGetShaderInfoAMD">vkGetShaderInfoAMD</a></p>
</div>
</div>
<div class="sect3">
<h4 id="_document_notes_916">Document Notes</h4>
<div class="paragraph">
<p>For more information, see the Vulkan Specification at URL</p>
</div>
<div class="paragraph">
<p><a href="https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VkShaderInfoTypeAMD" class="bare">https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VkShaderInfoTypeAMD</a></p>
</div>
<div class="paragraph">
<p>This page is extracted from the Vulkan Specification.
Fixes and changes should be made to the Specification, not directly.</p>
</div>
<div style="page-break-after: always;"></div>
</div>
</div>
<div class="sect2">
<h3 id="_vkshaderstageflagbits3">VkShaderStageFlagBits(3)</h3>
<div class="sect3">
<h4 id="_name_917">Name</h4>
<div class="paragraph">
<p>VkShaderStageFlagBits - Bitmask specifying a pipeline stage</p>
</div>
</div>
<div class="sect3">
<h4 id="_c_specification_917">C Specification</h4>
<div class="paragraph">
<p>Commands and structures which need to specify one or more shader stages do
so using a bitmask whose bits correspond to stages.
Bits which <strong class="purple">can</strong> be set to specify shader stages are:</p>
</div>
<div id="VkShaderStageFlagBits" class="listingblock">
<div class="content">
<pre class="highlight"><code class="language-c++" data-lang="c++">typedef enum VkShaderStageFlagBits {
    VK_SHADER_STAGE_VERTEX_BIT = 0x00000001,
    VK_SHADER_STAGE_TESSELLATION_CONTROL_BIT = 0x00000002,
    VK_SHADER_STAGE_TESSELLATION_EVALUATION_BIT = 0x00000004,
    VK_SHADER_STAGE_GEOMETRY_BIT = 0x00000008,
    VK_SHADER_STAGE_FRAGMENT_BIT = 0x00000010,
    VK_SHADER_STAGE_COMPUTE_BIT = 0x00000020,
    VK_SHADER_STAGE_ALL_GRAPHICS = 0x0000001F,
    VK_SHADER_STAGE_ALL = 0x7FFFFFFF,
    VK_SHADER_STAGE_RAYGEN_BIT_NV = 0x00000100,
    VK_SHADER_STAGE_ANY_HIT_BIT_NV = 0x00000200,
    VK_SHADER_STAGE_CLOSEST_HIT_BIT_NV = 0x00000400,
    VK_SHADER_STAGE_MISS_BIT_NV = 0x00000800,
    VK_SHADER_STAGE_INTERSECTION_BIT_NV = 0x00001000,
    VK_SHADER_STAGE_CALLABLE_BIT_NV = 0x00002000,
    VK_SHADER_STAGE_TASK_BIT_NV = 0x00000040,
    VK_SHADER_STAGE_MESH_BIT_NV = 0x00000080,
    VK_SHADER_STAGE_FLAG_BITS_MAX_ENUM = 0x7FFFFFFF
} VkShaderStageFlagBits;</code></pre>
</div>
</div>
</div>
<div class="sect3">
<h4 id="_description_917">Description</h4>
<div class="ulist">
<ul>
<li>
<p><code>VK_SHADER_STAGE_VERTEX_BIT</code> specifies the vertex stage.</p>
</li>
<li>
<p><code>VK_SHADER_STAGE_TESSELLATION_CONTROL_BIT</code> specifies the
tessellation control stage.</p>
</li>
<li>
<p><code>VK_SHADER_STAGE_TESSELLATION_EVALUATION_BIT</code> specifies the
tessellation evaluation stage.</p>
</li>
<li>
<p><code>VK_SHADER_STAGE_GEOMETRY_BIT</code> specifies the geometry stage.</p>
</li>
<li>
<p><code>VK_SHADER_STAGE_FRAGMENT_BIT</code> specifies the fragment stage.</p>
</li>
<li>
<p><code>VK_SHADER_STAGE_COMPUTE_BIT</code> specifies the compute stage.</p>
</li>
<li>
<p><code>VK_SHADER_STAGE_TASK_BIT_NV</code> specifies the task stage.</p>
</li>
<li>
<p><code>VK_SHADER_STAGE_MESH_BIT_NV</code> specifies the mesh stage.</p>
</li>
<li>
<p><code>VK_SHADER_STAGE_ALL_GRAPHICS</code> is a combination of bits used as
shorthand to specify all graphics stages defined above (excluding the
compute stage).</p>
</li>
<li>
<p><code>VK_SHADER_STAGE_ALL</code> is a combination of bits used as shorthand to
specify all shader stages supported by the device, including all
additional stages which are introduced by extensions.</p>
</li>
<li>
<p><code>VK_SHADER_STAGE_RAYGEN_BIT_NV</code> specifies the ray generation stage.</p>
</li>
<li>
<p><code>VK_SHADER_STAGE_ANY_HIT_BIT_NV</code> specifies the any-hit stage.</p>
</li>
<li>
<p><code>VK_SHADER_STAGE_CLOSEST_HIT_BIT_NV</code> specifies the closest hit
stage.</p>
</li>
<li>
<p><code>VK_SHADER_STAGE_MISS_BIT_NV</code> specifies the miss stage.</p>
</li>
<li>
<p><code>VK_SHADER_STAGE_INTERSECTION_BIT_NV</code> specifies the intersection
stage.</p>
</li>
<li>
<p><code>VK_SHADER_STAGE_CALLABLE_BIT_NV</code> specifies the callable stage.</p>
</li>
</ul>
</div>
<div class="admonitionblock note">
<table>
<tr>
<td class="icon">
<i class="fa icon-note" title="Note"></i>
</td>
<td class="content">
<div class="title">Note</div>
<div class="paragraph">
<p><code>VK_SHADER_STAGE_ALL_GRAPHICS</code> only includes the original five graphics
stages included in Vulkan 1.0, and not any stages added by extensions.
Thus, it may not have the desired effect in all cases.</p>
</div>
</td>
</tr>
</table>
</div>
</div>
<div class="sect3">
<h4 id="_see_also_917">See Also</h4>
<div class="paragraph">
<p><a href="#VkPipelineShaderStageCreateInfo">VkPipelineShaderStageCreateInfo</a>, <a href="#VkShaderStageFlags">VkShaderStageFlags</a>, <a href="#vkGetShaderInfoAMD">vkGetShaderInfoAMD</a></p>
</div>
</div>
<div class="sect3">
<h4 id="_document_notes_917">Document Notes</h4>
<div class="paragraph">
<p>For more information, see the Vulkan Specification at URL</p>
</div>
<div class="paragraph">
<p><a href="https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VkShaderStageFlagBits" class="bare">https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VkShaderStageFlagBits</a></p>
</div>
<div class="paragraph">
<p>This page is extracted from the Vulkan Specification.
Fixes and changes should be made to the Specification, not directly.</p>
</div>
<div style="page-break-after: always;"></div>
</div>
</div>
<div class="sect2">
<h3 id="_vkshadingratepaletteentrynv3">VkShadingRatePaletteEntryNV(3)</h3>
<div class="sect3">
<h4 id="_name_918">Name</h4>
<div class="paragraph">
<p>VkShadingRatePaletteEntryNV - Shading rate image palette entry types</p>
</div>
</div>
<div class="sect3">
<h4 id="_c_specification_918">C Specification</h4>
<div class="paragraph">
<p>The supported shading rate image palette entries are defined by
<a href="#VkShadingRatePaletteEntryNV">VkShadingRatePaletteEntryNV</a>:</p>
</div>
<div id="VkShadingRatePaletteEntryNV" class="listingblock">
<div class="content">
<pre class="highlight"><code class="language-c++" data-lang="c++">typedef enum VkShadingRatePaletteEntryNV {
    VK_SHADING_RATE_PALETTE_ENTRY_NO_INVOCATIONS_NV = 0,
    VK_SHADING_RATE_PALETTE_ENTRY_16_INVOCATIONS_PER_PIXEL_NV = 1,
    VK_SHADING_RATE_PALETTE_ENTRY_8_INVOCATIONS_PER_PIXEL_NV = 2,
    VK_SHADING_RATE_PALETTE_ENTRY_4_INVOCATIONS_PER_PIXEL_NV = 3,
    VK_SHADING_RATE_PALETTE_ENTRY_2_INVOCATIONS_PER_PIXEL_NV = 4,
    VK_SHADING_RATE_PALETTE_ENTRY_1_INVOCATION_PER_PIXEL_NV = 5,
    VK_SHADING_RATE_PALETTE_ENTRY_1_INVOCATION_PER_2X1_PIXELS_NV = 6,
    VK_SHADING_RATE_PALETTE_ENTRY_1_INVOCATION_PER_1X2_PIXELS_NV = 7,
    VK_SHADING_RATE_PALETTE_ENTRY_1_INVOCATION_PER_2X2_PIXELS_NV = 8,
    VK_SHADING_RATE_PALETTE_ENTRY_1_INVOCATION_PER_4X2_PIXELS_NV = 9,
    VK_SHADING_RATE_PALETTE_ENTRY_1_INVOCATION_PER_2X4_PIXELS_NV = 10,
    VK_SHADING_RATE_PALETTE_ENTRY_1_INVOCATION_PER_4X4_PIXELS_NV = 11,
    VK_SHADING_RATE_PALETTE_ENTRY_MAX_ENUM_NV = 0x7FFFFFFF
} VkShadingRatePaletteEntryNV;</code></pre>
</div>
</div>
</div>
<div class="sect3">
<h4 id="_description_918">Description</h4>
<div class="paragraph">
<p>The following table indicates the width and height (in pixels) of each
fragment generated using the indicated shading rate, as well as the maximum
number of fragment shader invocations launched for each fragment.
When processing regions of a primitive that have a shading rate of
<code>VK_SHADING_RATE_PALETTE_ENTRY_NO_INVOCATIONS_NV</code>, no fragments will be
generated in that region.</p>
</div>
<table class="tableblock frame-all grid-all stretch">
<colgroup>
<col style="width: 25%;" />
<col style="width: 25%;" />
<col style="width: 25%;" />
<col style="width: 25%;" />
</colgroup>
<thead>
<tr>
<th class="tableblock halign-left valign-top">Shading Rate</th>
<th class="tableblock halign-left valign-top">Width</th>
<th class="tableblock halign-left valign-top">Height</th>
<th class="tableblock halign-left valign-top">Invocations</th>
</tr>
</thead>
<tbody>
<tr>
<td class="tableblock halign-left valign-top"><p class="tableblock"><code>VK_SHADING_RATE_PALETTE_ENTRY_NO_INVOCATIONS_NV</code></p></td>
<td class="tableblock halign-left valign-top"><p class="tableblock">0</p></td>
<td class="tableblock halign-left valign-top"><p class="tableblock">0</p></td>
<td class="tableblock halign-left valign-top"><p class="tableblock">0</p></td>
</tr>
<tr>
<td class="tableblock halign-left valign-top"><p class="tableblock"><code>VK_SHADING_RATE_PALETTE_ENTRY_16_INVOCATIONS_PER_PIXEL_NV</code></p></td>
<td class="tableblock halign-left valign-top"><p class="tableblock">1</p></td>
<td class="tableblock halign-left valign-top"><p class="tableblock">1</p></td>
<td class="tableblock halign-left valign-top"><p class="tableblock">16</p></td>
</tr>
<tr>
<td class="tableblock halign-left valign-top"><p class="tableblock"><code>VK_SHADING_RATE_PALETTE_ENTRY_8_INVOCATIONS_PER_PIXEL_NV</code></p></td>
<td class="tableblock halign-left valign-top"><p class="tableblock">1</p></td>
<td class="tableblock halign-left valign-top"><p class="tableblock">1</p></td>
<td class="tableblock halign-left valign-top"><p class="tableblock">8</p></td>
</tr>
<tr>
<td class="tableblock halign-left valign-top"><p class="tableblock"><code>VK_SHADING_RATE_PALETTE_ENTRY_4_INVOCATIONS_PER_PIXEL_NV</code></p></td>
<td class="tableblock halign-left valign-top"><p class="tableblock">1</p></td>
<td class="tableblock halign-left valign-top"><p class="tableblock">1</p></td>
<td class="tableblock halign-left valign-top"><p class="tableblock">4</p></td>
</tr>
<tr>
<td class="tableblock halign-left valign-top"><p class="tableblock"><code>VK_SHADING_RATE_PALETTE_ENTRY_2_INVOCATIONS_PER_PIXEL_NV</code></p></td>
<td class="tableblock halign-left valign-top"><p class="tableblock">1</p></td>
<td class="tableblock halign-left valign-top"><p class="tableblock">1</p></td>
<td class="tableblock halign-left valign-top"><p class="tableblock">2</p></td>
</tr>
<tr>
<td class="tableblock halign-left valign-top"><p class="tableblock"><code>VK_SHADING_RATE_PALETTE_ENTRY_1_INVOCATION_PER_PIXEL_NV</code></p></td>
<td class="tableblock halign-left valign-top"><p class="tableblock">1</p></td>
<td class="tableblock halign-left valign-top"><p class="tableblock">1</p></td>
<td class="tableblock halign-left valign-top"><p class="tableblock">1</p></td>
</tr>
<tr>
<td class="tableblock halign-left valign-top"><p class="tableblock"><code>VK_SHADING_RATE_PALETTE_ENTRY_1_INVOCATION_PER_2X1_PIXELS_NV</code></p></td>
<td class="tableblock halign-left valign-top"><p class="tableblock">2</p></td>
<td class="tableblock halign-left valign-top"><p class="tableblock">1</p></td>
<td class="tableblock halign-left valign-top"><p class="tableblock">1</p></td>
</tr>
<tr>
<td class="tableblock halign-left valign-top"><p class="tableblock"><code>VK_SHADING_RATE_PALETTE_ENTRY_1_INVOCATION_PER_1X2_PIXELS_NV</code></p></td>
<td class="tableblock halign-left valign-top"><p class="tableblock">1</p></td>
<td class="tableblock halign-left valign-top"><p class="tableblock">2</p></td>
<td class="tableblock halign-left valign-top"><p class="tableblock">1</p></td>
</tr>
<tr>
<td class="tableblock halign-left valign-top"><p class="tableblock"><code>VK_SHADING_RATE_PALETTE_ENTRY_1_INVOCATION_PER_2X2_PIXELS_NV</code></p></td>
<td class="tableblock halign-left valign-top"><p class="tableblock">2</p></td>
<td class="tableblock halign-left valign-top"><p class="tableblock">2</p></td>
<td class="tableblock halign-left valign-top"><p class="tableblock">1</p></td>
</tr>
<tr>
<td class="tableblock halign-left valign-top"><p class="tableblock"><code>VK_SHADING_RATE_PALETTE_ENTRY_1_INVOCATION_PER_4X2_PIXELS_NV</code></p></td>
<td class="tableblock halign-left valign-top"><p class="tableblock">4</p></td>
<td class="tableblock halign-left valign-top"><p class="tableblock">2</p></td>
<td class="tableblock halign-left valign-top"><p class="tableblock">1</p></td>
</tr>
<tr>
<td class="tableblock halign-left valign-top"><p class="tableblock"><code>VK_SHADING_RATE_PALETTE_ENTRY_1_INVOCATION_PER_2X4_PIXELS_NV</code></p></td>
<td class="tableblock halign-left valign-top"><p class="tableblock">2</p></td>
<td class="tableblock halign-left valign-top"><p class="tableblock">4</p></td>
<td class="tableblock halign-left valign-top"><p class="tableblock">1</p></td>
</tr>
<tr>
<td class="tableblock halign-left valign-top"><p class="tableblock"><code>VK_SHADING_RATE_PALETTE_ENTRY_1_INVOCATION_PER_4X4_PIXELS_NV</code></p></td>
<td class="tableblock halign-left valign-top"><p class="tableblock">4</p></td>
<td class="tableblock halign-left valign-top"><p class="tableblock">4</p></td>
<td class="tableblock halign-left valign-top"><p class="tableblock">1</p></td>
</tr>
</tbody>
</table>
</div>
<div class="sect3">
<h4 id="_see_also_918">See Also</h4>
<div class="paragraph">
<p><a href="#VkCoarseSampleOrderCustomNV">VkCoarseSampleOrderCustomNV</a>, <a href="#VkShadingRatePaletteNV">VkShadingRatePaletteNV</a></p>
</div>
</div>
<div class="sect3">
<h4 id="_document_notes_918">Document Notes</h4>
<div class="paragraph">
<p>For more information, see the Vulkan Specification at URL</p>
</div>
<div class="paragraph">
<p><a href="https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VkShadingRatePaletteEntryNV" class="bare">https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VkShadingRatePaletteEntryNV</a></p>
</div>
<div class="paragraph">
<p>This page is extracted from the Vulkan Specification.
Fixes and changes should be made to the Specification, not directly.</p>
</div>
<div style="page-break-after: always;"></div>
</div>
</div>
<div class="sect2">
<h3 id="_vksharingmode3">VkSharingMode(3)</h3>
<div class="sect3">
<h4 id="_name_919">Name</h4>
<div class="paragraph">
<p>VkSharingMode - Buffer and image sharing modes</p>
</div>
</div>
<div class="sect3">
<h4 id="_c_specification_919">C Specification</h4>
<div class="paragraph">
<p>Buffer and image objects are created with a <em>sharing mode</em> controlling how
they <strong class="purple">can</strong> be accessed from queues.
The supported sharing modes are:</p>
</div>
<div id="VkSharingMode" class="listingblock">
<div class="content">
<pre class="highlight"><code class="language-c++" data-lang="c++">typedef enum VkSharingMode {
    VK_SHARING_MODE_EXCLUSIVE = 0,
    VK_SHARING_MODE_CONCURRENT = 1,
    VK_SHARING_MODE_MAX_ENUM = 0x7FFFFFFF
} VkSharingMode;</code></pre>
</div>
</div>
</div>
<div class="sect3">
<h4 id="_description_919">Description</h4>
<div class="ulist">
<ul>
<li>
<p><code>VK_SHARING_MODE_EXCLUSIVE</code> specifies that access to any range or
image subresource of the object will be exclusive to a single queue
family at a time.</p>
</li>
<li>
<p><code>VK_SHARING_MODE_CONCURRENT</code> specifies that concurrent access to any
range or image subresource of the object from multiple queue families is
supported.</p>
</li>
</ul>
</div>
<div class="admonitionblock note">
<table>
<tr>
<td class="icon">
<i class="fa icon-note" title="Note"></i>
</td>
<td class="content">
<div class="title">Note</div>
<div class="paragraph">
<p><code>VK_SHARING_MODE_CONCURRENT</code> <strong class="purple">may</strong> result in lower performance access to
the buffer or image than <code>VK_SHARING_MODE_EXCLUSIVE</code>.</p>
</div>
</td>
</tr>
</table>
</div>
<div class="paragraph">
<p>Ranges of buffers and image subresources of image objects created using
<code>VK_SHARING_MODE_EXCLUSIVE</code> <strong class="purple">must</strong> only be accessed by queues in the
queue family that has <em>ownership</em> of the resource.
Upon creation, such resources are not owned by any queue family; ownership
is implicitly acquired upon first use within a queue.
Once a resource using <code>VK_SHARING_MODE_EXCLUSIVE</code> is owned by some queue
family, the application <strong class="purple">must</strong> perform a
<a href="vkspec.html#synchronization-queue-transfers">queue family ownership transfer</a> to make
the memory contents of a range or image subresource accessible to a
different queue family.</p>
</div>
<div class="admonitionblock note">
<table>
<tr>
<td class="icon">
<i class="fa icon-note" title="Note"></i>
</td>
<td class="content">
<div class="title">Note</div>
<div class="paragraph">
<p>Images still require a <a href="vkspec.html#resources-image-layouts">layout transition</a> from
<code>VK_IMAGE_LAYOUT_UNDEFINED</code> or <code>VK_IMAGE_LAYOUT_PREINITIALIZED</code>
before being used on the first queue.</p>
</div>
</td>
</tr>
</table>
</div>
<div class="paragraph">
<p>A queue family <strong class="purple">can</strong> take ownership of an image subresource or buffer range
of a resource created with <code>VK_SHARING_MODE_EXCLUSIVE</code>, without an
ownership transfer, in the same way as for a resource that was just created;
however, taking ownership in this way has the effect that the contents of
the image subresource or buffer range are undefined.</p>
</div>
<div class="paragraph">
<p>Ranges of buffers and image subresources of image objects created using
<code>VK_SHARING_MODE_CONCURRENT</code> <strong class="purple">must</strong> only be accessed by queues from the
queue families specified through the <code>queueFamilyIndexCount</code> and
<code>pQueueFamilyIndices</code> members of the corresponding create info
structures.</p>
</div>
</div>
<div class="sect3">
<h4 id="_see_also_919">See Also</h4>
<div class="paragraph">
<p><a href="#VkBufferCreateInfo">VkBufferCreateInfo</a>, <a href="#VkImageCreateInfo">VkImageCreateInfo</a>, <a href="#VkPhysicalDeviceImageDrmFormatModifierInfoEXT">VkPhysicalDeviceImageDrmFormatModifierInfoEXT</a>, <a href="#VkSwapchainCreateInfoKHR">VkSwapchainCreateInfoKHR</a></p>
</div>
</div>
<div class="sect3">
<h4 id="_document_notes_919">Document Notes</h4>
<div class="paragraph">
<p>For more information, see the Vulkan Specification at URL</p>
</div>
<div class="paragraph">
<p><a href="https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VkSharingMode" class="bare">https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VkSharingMode</a></p>
</div>
<div class="paragraph">
<p>This page is extracted from the Vulkan Specification.
Fixes and changes should be made to the Specification, not directly.</p>
</div>
<div style="page-break-after: always;"></div>
</div>
</div>
<div class="sect2">
<h3 id="_vksparseimageformatflagbits3">VkSparseImageFormatFlagBits(3)</h3>
<div class="sect3">
<h4 id="_name_920">Name</h4>
<div class="paragraph">
<p>VkSparseImageFormatFlagBits - Bitmask specifying additional information about a sparse image resource</p>
</div>
</div>
<div class="sect3">
<h4 id="_c_specification_920">C Specification</h4>
<div class="paragraph">
<p>Bits which <strong class="purple">may</strong> be set in <a href="#VkSparseImageFormatProperties">VkSparseImageFormatProperties</a>::<code>flags</code>,
specifying additional information about the sparse resource, are:</p>
</div>
<div id="VkSparseImageFormatFlagBits" class="listingblock">
<div class="content">
<pre class="highlight"><code class="language-c++" data-lang="c++">typedef enum VkSparseImageFormatFlagBits {
    VK_SPARSE_IMAGE_FORMAT_SINGLE_MIPTAIL_BIT = 0x00000001,
    VK_SPARSE_IMAGE_FORMAT_ALIGNED_MIP_SIZE_BIT = 0x00000002,
    VK_SPARSE_IMAGE_FORMAT_NONSTANDARD_BLOCK_SIZE_BIT = 0x00000004,
    VK_SPARSE_IMAGE_FORMAT_FLAG_BITS_MAX_ENUM = 0x7FFFFFFF
} VkSparseImageFormatFlagBits;</code></pre>
</div>
</div>
</div>
<div class="sect3">
<h4 id="_description_920">Description</h4>
<div class="ulist">
<ul>
<li>
<p><code>VK_SPARSE_IMAGE_FORMAT_SINGLE_MIPTAIL_BIT</code> specifies that the image
uses a single mip tail region for all array layers.</p>
</li>
<li>
<p><code>VK_SPARSE_IMAGE_FORMAT_ALIGNED_MIP_SIZE_BIT</code> specifies that the
first mip level whose dimensions are not integer multiples of the
corresponding dimensions of the sparse image block begins the mip tail
region.</p>
</li>
<li>
<p><code>VK_SPARSE_IMAGE_FORMAT_NONSTANDARD_BLOCK_SIZE_BIT</code> specifies that
the image uses non-standard sparse image block dimensions, and the
<code>imageGranularity</code> values do not match the standard sparse image
block dimensions for the given format.</p>
</li>
</ul>
</div>
</div>
<div class="sect3">
<h4 id="_see_also_920">See Also</h4>
<div class="paragraph">
<p><a href="#VkSparseImageFormatFlags">VkSparseImageFormatFlags</a></p>
</div>
</div>
<div class="sect3">
<h4 id="_document_notes_920">Document Notes</h4>
<div class="paragraph">
<p>For more information, see the Vulkan Specification at URL</p>
</div>
<div class="paragraph">
<p><a href="https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VkSparseImageFormatFlagBits" class="bare">https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VkSparseImageFormatFlagBits</a></p>
</div>
<div class="paragraph">
<p>This page is extracted from the Vulkan Specification.
Fixes and changes should be made to the Specification, not directly.</p>
</div>
<div style="page-break-after: always;"></div>
</div>
</div>
<div class="sect2">
<h3 id="_vksparsememorybindflagbits3">VkSparseMemoryBindFlagBits(3)</h3>
<div class="sect3">
<h4 id="_name_921">Name</h4>
<div class="paragraph">
<p>VkSparseMemoryBindFlagBits - Bitmask specifying usage of a sparse memory binding operation</p>
</div>
</div>
<div class="sect3">
<h4 id="_c_specification_921">C Specification</h4>
<div class="paragraph">
<p>Bits which <strong class="purple">can</strong> be set in <a href="#VkSparseMemoryBind">VkSparseMemoryBind</a>::<code>flags</code>, specifying
usage of a sparse memory binding operation, are:</p>
</div>
<div id="VkSparseMemoryBindFlagBits" class="listingblock">
<div class="content">
<pre class="highlight"><code class="language-c++" data-lang="c++">typedef enum VkSparseMemoryBindFlagBits {
    VK_SPARSE_MEMORY_BIND_METADATA_BIT = 0x00000001,
    VK_SPARSE_MEMORY_BIND_FLAG_BITS_MAX_ENUM = 0x7FFFFFFF
} VkSparseMemoryBindFlagBits;</code></pre>
</div>
</div>
</div>
<div class="sect3">
<h4 id="_description_921">Description</h4>
<div class="ulist">
<ul>
<li>
<p><code>VK_SPARSE_MEMORY_BIND_METADATA_BIT</code> specifies that the memory being
bound is only for the metadata aspect.</p>
</li>
</ul>
</div>
</div>
<div class="sect3">
<h4 id="_see_also_921">See Also</h4>
<div class="paragraph">
<p><a href="#VkSparseMemoryBindFlags">VkSparseMemoryBindFlags</a></p>
</div>
</div>
<div class="sect3">
<h4 id="_document_notes_921">Document Notes</h4>
<div class="paragraph">
<p>For more information, see the Vulkan Specification at URL</p>
</div>
<div class="paragraph">
<p><a href="https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VkSparseMemoryBindFlagBits" class="bare">https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VkSparseMemoryBindFlagBits</a></p>
</div>
<div class="paragraph">
<p>This page is extracted from the Vulkan Specification.
Fixes and changes should be made to the Specification, not directly.</p>
</div>
<div style="page-break-after: always;"></div>
</div>
</div>
<div class="sect2">
<h3 id="_vkstencilfaceflagbits3">VkStencilFaceFlagBits(3)</h3>
<div class="sect3">
<h4 id="_name_922">Name</h4>
<div class="paragraph">
<p>VkStencilFaceFlagBits - Bitmask specifying sets of stencil state for which to update the compare mask</p>
</div>
</div>
<div class="sect3">
<h4 id="_c_specification_922">C Specification</h4>
<div class="paragraph">
<p>Bits which <strong class="purple">can</strong> be set in the
<a href="#vkCmdSetStencilCompareMask">vkCmdSetStencilCompareMask</a>::<code>faceMask</code> parameter, and similar
parameters of other commands specifying which stencil state to update
stencil masks for, are:</p>
</div>
<div id="VkStencilFaceFlagBits" class="listingblock">
<div class="content">
<pre class="highlight"><code class="language-c++" data-lang="c++">typedef enum VkStencilFaceFlagBits {
    VK_STENCIL_FACE_FRONT_BIT = 0x00000001,
    VK_STENCIL_FACE_BACK_BIT = 0x00000002,
    VK_STENCIL_FRONT_AND_BACK = 0x00000003,
    VK_STENCIL_FACE_FLAG_BITS_MAX_ENUM = 0x7FFFFFFF
} VkStencilFaceFlagBits;</code></pre>
</div>
</div>
</div>
<div class="sect3">
<h4 id="_description_922">Description</h4>
<div class="ulist">
<ul>
<li>
<p><code>VK_STENCIL_FACE_FRONT_BIT</code> specifies that only the front set of
stencil state is updated.</p>
</li>
<li>
<p><code>VK_STENCIL_FACE_BACK_BIT</code> specifies that only the back set of
stencil state is updated.</p>
</li>
<li>
<p><code>VK_STENCIL_FRONT_AND_BACK</code> is the combination of
<code>VK_STENCIL_FACE_FRONT_BIT</code> and <code>VK_STENCIL_FACE_BACK_BIT</code>, and
specifies that both sets of stencil state are updated.</p>
</li>
</ul>
</div>
</div>
<div class="sect3">
<h4 id="_see_also_922">See Also</h4>
<div class="paragraph">
<p><a href="#VkStencilFaceFlags">VkStencilFaceFlags</a></p>
</div>
</div>
<div class="sect3">
<h4 id="_document_notes_922">Document Notes</h4>
<div class="paragraph">
<p>For more information, see the Vulkan Specification at URL</p>
</div>
<div class="paragraph">
<p><a href="https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VkStencilFaceFlagBits" class="bare">https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VkStencilFaceFlagBits</a></p>
</div>
<div class="paragraph">
<p>This page is extracted from the Vulkan Specification.
Fixes and changes should be made to the Specification, not directly.</p>
</div>
<div style="page-break-after: always;"></div>
</div>
</div>
<div class="sect2">
<h3 id="_vkstencilop3">VkStencilOp(3)</h3>
<div class="sect3">
<h4 id="_name_923">Name</h4>
<div class="paragraph">
<p>VkStencilOp - Stencil comparison function</p>
</div>
</div>
<div class="sect3">
<h4 id="_c_specification_923">C Specification</h4>
<div class="paragraph">
<p>Possible values of the <code>failOp</code>, <code>passOp</code>, and <code>depthFailOp</code>
members of <a href="#VkStencilOpState">VkStencilOpState</a>, specifying what happens to the stored
stencil value if this or certain subsequent tests fail or pass, are:</p>
</div>
<div id="VkStencilOp" class="listingblock">
<div class="content">
<pre class="highlight"><code class="language-c++" data-lang="c++">typedef enum VkStencilOp {
    VK_STENCIL_OP_KEEP = 0,
    VK_STENCIL_OP_ZERO = 1,
    VK_STENCIL_OP_REPLACE = 2,
    VK_STENCIL_OP_INCREMENT_AND_CLAMP = 3,
    VK_STENCIL_OP_DECREMENT_AND_CLAMP = 4,
    VK_STENCIL_OP_INVERT = 5,
    VK_STENCIL_OP_INCREMENT_AND_WRAP = 6,
    VK_STENCIL_OP_DECREMENT_AND_WRAP = 7,
    VK_STENCIL_OP_MAX_ENUM = 0x7FFFFFFF
} VkStencilOp;</code></pre>
</div>
</div>
</div>
<div class="sect3">
<h4 id="_description_923">Description</h4>
<div class="ulist">
<ul>
<li>
<p><code>VK_STENCIL_OP_KEEP</code> keeps the current value.</p>
</li>
<li>
<p><code>VK_STENCIL_OP_ZERO</code> sets the value to 0.</p>
</li>
<li>
<p><code>VK_STENCIL_OP_REPLACE</code> sets the value to <code>reference</code>.</p>
</li>
<li>
<p><code>VK_STENCIL_OP_INCREMENT_AND_CLAMP</code> increments the current value and
clamps to the maximum representable unsigned value.</p>
</li>
<li>
<p><code>VK_STENCIL_OP_DECREMENT_AND_CLAMP</code> decrements the current value and
clamps to 0.</p>
</li>
<li>
<p><code>VK_STENCIL_OP_INVERT</code> bitwise-inverts the current value.</p>
</li>
<li>
<p><code>VK_STENCIL_OP_INCREMENT_AND_WRAP</code> increments the current value and
wraps to 0 when the maximum value would have been exceeded.</p>
</li>
<li>
<p><code>VK_STENCIL_OP_DECREMENT_AND_WRAP</code> decrements the current value and
wraps to the maximum possible value when the value would go below 0.</p>
</li>
</ul>
</div>
<div class="paragraph">
<p>For purposes of increment and decrement, the stencil bits are considered as
an unsigned integer.</p>
</div>
<div class="paragraph">
<p>If the stencil test fails, the sample&#8217;s coverage bit is cleared in the
fragment.
If there is no stencil framebuffer attachment, stencil modification <strong class="purple">cannot</strong>
occur, and it is as if the stencil tests always pass.</p>
</div>
<div class="paragraph">
<p>If the stencil test passes, the <code>writeMask</code> member of the
<a href="#VkStencilOpState">VkStencilOpState</a> structures controls how the updated stencil value is
written to the stencil framebuffer attachment.</p>
</div>
<div class="paragraph">
<p>The least significant <span class="eq">s</span> bits of <code>writeMask</code>, where <span class="eq">s</span> is the
number of bits in the stencil framebuffer attachment, specify an integer
mask.
Where a <span class="eq">1</span> appears in this mask, the corresponding bit in the stencil
value in the depth/stencil attachment is written; where a <span class="eq">0</span> appears,
the bit is not written.
The <code>writeMask</code> value uses either the front-facing or back-facing state
based on the facingness of the fragment.
Fragments generated by front-facing primitives use the front mask and
fragments generated by back-facing primitives use the back mask.</p>
</div>
</div>
<div class="sect3">
<h4 id="_see_also_923">See Also</h4>
<div class="paragraph">
<p><a href="#VkStencilOpState">VkStencilOpState</a></p>
</div>
</div>
<div class="sect3">
<h4 id="_document_notes_923">Document Notes</h4>
<div class="paragraph">
<p>For more information, see the Vulkan Specification at URL</p>
</div>
<div class="paragraph">
<p><a href="https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VkStencilOp" class="bare">https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VkStencilOp</a></p>
</div>
<div class="paragraph">
<p>This page is extracted from the Vulkan Specification.
Fixes and changes should be made to the Specification, not directly.</p>
</div>
<div style="page-break-after: always;"></div>
</div>
</div>
<div class="sect2">
<h3 id="_vkstructuretype3">VkStructureType(3)</h3>
<div class="sect3">
<h4 id="_name_924">Name</h4>
<div class="paragraph">
<p>VkStructureType - Vulkan structure types (<code>stype</code>)</p>
</div>
</div>
<div class="sect3">
<h4 id="_c_specification_924">C Specification</h4>
<div class="paragraph">
<p>Structure types supported by the Vulkan API include:</p>
</div>
<div id="VkStructureType" class="listingblock">
<div class="content">
<pre class="highlight"><code class="language-c++" data-lang="c++">typedef enum VkStructureType {
    VK_STRUCTURE_TYPE_APPLICATION_INFO = 0,
    VK_STRUCTURE_TYPE_INSTANCE_CREATE_INFO = 1,
    VK_STRUCTURE_TYPE_DEVICE_QUEUE_CREATE_INFO = 2,
    VK_STRUCTURE_TYPE_DEVICE_CREATE_INFO = 3,
    VK_STRUCTURE_TYPE_SUBMIT_INFO = 4,
    VK_STRUCTURE_TYPE_MEMORY_ALLOCATE_INFO = 5,
    VK_STRUCTURE_TYPE_MAPPED_MEMORY_RANGE = 6,
    VK_STRUCTURE_TYPE_BIND_SPARSE_INFO = 7,
    VK_STRUCTURE_TYPE_FENCE_CREATE_INFO = 8,
    VK_STRUCTURE_TYPE_SEMAPHORE_CREATE_INFO = 9,
    VK_STRUCTURE_TYPE_EVENT_CREATE_INFO = 10,
    VK_STRUCTURE_TYPE_QUERY_POOL_CREATE_INFO = 11,
    VK_STRUCTURE_TYPE_BUFFER_CREATE_INFO = 12,
    VK_STRUCTURE_TYPE_BUFFER_VIEW_CREATE_INFO = 13,
    VK_STRUCTURE_TYPE_IMAGE_CREATE_INFO = 14,
    VK_STRUCTURE_TYPE_IMAGE_VIEW_CREATE_INFO = 15,
    VK_STRUCTURE_TYPE_SHADER_MODULE_CREATE_INFO = 16,
    VK_STRUCTURE_TYPE_PIPELINE_CACHE_CREATE_INFO = 17,
    VK_STRUCTURE_TYPE_PIPELINE_SHADER_STAGE_CREATE_INFO = 18,
    VK_STRUCTURE_TYPE_PIPELINE_VERTEX_INPUT_STATE_CREATE_INFO = 19,
    VK_STRUCTURE_TYPE_PIPELINE_INPUT_ASSEMBLY_STATE_CREATE_INFO = 20,
    VK_STRUCTURE_TYPE_PIPELINE_TESSELLATION_STATE_CREATE_INFO = 21,
    VK_STRUCTURE_TYPE_PIPELINE_VIEWPORT_STATE_CREATE_INFO = 22,
    VK_STRUCTURE_TYPE_PIPELINE_RASTERIZATION_STATE_CREATE_INFO = 23,
    VK_STRUCTURE_TYPE_PIPELINE_MULTISAMPLE_STATE_CREATE_INFO = 24,
    VK_STRUCTURE_TYPE_PIPELINE_DEPTH_STENCIL_STATE_CREATE_INFO = 25,
    VK_STRUCTURE_TYPE_PIPELINE_COLOR_BLEND_STATE_CREATE_INFO = 26,
    VK_STRUCTURE_TYPE_PIPELINE_DYNAMIC_STATE_CREATE_INFO = 27,
    VK_STRUCTURE_TYPE_GRAPHICS_PIPELINE_CREATE_INFO = 28,
    VK_STRUCTURE_TYPE_COMPUTE_PIPELINE_CREATE_INFO = 29,
    VK_STRUCTURE_TYPE_PIPELINE_LAYOUT_CREATE_INFO = 30,
    VK_STRUCTURE_TYPE_SAMPLER_CREATE_INFO = 31,
    VK_STRUCTURE_TYPE_DESCRIPTOR_SET_LAYOUT_CREATE_INFO = 32,
    VK_STRUCTURE_TYPE_DESCRIPTOR_POOL_CREATE_INFO = 33,
    VK_STRUCTURE_TYPE_DESCRIPTOR_SET_ALLOCATE_INFO = 34,
    VK_STRUCTURE_TYPE_WRITE_DESCRIPTOR_SET = 35,
    VK_STRUCTURE_TYPE_COPY_DESCRIPTOR_SET = 36,
    VK_STRUCTURE_TYPE_FRAMEBUFFER_CREATE_INFO = 37,
    VK_STRUCTURE_TYPE_RENDER_PASS_CREATE_INFO = 38,
    VK_STRUCTURE_TYPE_COMMAND_POOL_CREATE_INFO = 39,
    VK_STRUCTURE_TYPE_COMMAND_BUFFER_ALLOCATE_INFO = 40,
    VK_STRUCTURE_TYPE_COMMAND_BUFFER_INHERITANCE_INFO = 41,
    VK_STRUCTURE_TYPE_COMMAND_BUFFER_BEGIN_INFO = 42,
    VK_STRUCTURE_TYPE_RENDER_PASS_BEGIN_INFO = 43,
    VK_STRUCTURE_TYPE_BUFFER_MEMORY_BARRIER = 44,
    VK_STRUCTURE_TYPE_IMAGE_MEMORY_BARRIER = 45,
    VK_STRUCTURE_TYPE_MEMORY_BARRIER = 46,
    VK_STRUCTURE_TYPE_LOADER_INSTANCE_CREATE_INFO = 47,
    VK_STRUCTURE_TYPE_LOADER_DEVICE_CREATE_INFO = 48,
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SUBGROUP_PROPERTIES = 1000094000,
    VK_STRUCTURE_TYPE_BIND_BUFFER_MEMORY_INFO = 1000157000,
    VK_STRUCTURE_TYPE_BIND_IMAGE_MEMORY_INFO = 1000157001,
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_16BIT_STORAGE_FEATURES = 1000083000,
    VK_STRUCTURE_TYPE_MEMORY_DEDICATED_REQUIREMENTS = 1000127000,
    VK_STRUCTURE_TYPE_MEMORY_DEDICATED_ALLOCATE_INFO = 1000127001,
    VK_STRUCTURE_TYPE_MEMORY_ALLOCATE_FLAGS_INFO = 1000060000,
    VK_STRUCTURE_TYPE_DEVICE_GROUP_RENDER_PASS_BEGIN_INFO = 1000060003,
    VK_STRUCTURE_TYPE_DEVICE_GROUP_COMMAND_BUFFER_BEGIN_INFO = 1000060004,
    VK_STRUCTURE_TYPE_DEVICE_GROUP_SUBMIT_INFO = 1000060005,
    VK_STRUCTURE_TYPE_DEVICE_GROUP_BIND_SPARSE_INFO = 1000060006,
    VK_STRUCTURE_TYPE_BIND_BUFFER_MEMORY_DEVICE_GROUP_INFO = 1000060013,
    VK_STRUCTURE_TYPE_BIND_IMAGE_MEMORY_DEVICE_GROUP_INFO = 1000060014,
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_GROUP_PROPERTIES = 1000070000,
    VK_STRUCTURE_TYPE_DEVICE_GROUP_DEVICE_CREATE_INFO = 1000070001,
    VK_STRUCTURE_TYPE_BUFFER_MEMORY_REQUIREMENTS_INFO_2 = 1000146000,
    VK_STRUCTURE_TYPE_IMAGE_MEMORY_REQUIREMENTS_INFO_2 = 1000146001,
    VK_STRUCTURE_TYPE_IMAGE_SPARSE_MEMORY_REQUIREMENTS_INFO_2 = 1000146002,
    VK_STRUCTURE_TYPE_MEMORY_REQUIREMENTS_2 = 1000146003,
    VK_STRUCTURE_TYPE_SPARSE_IMAGE_MEMORY_REQUIREMENTS_2 = 1000146004,
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_FEATURES_2 = 1000059000,
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_PROPERTIES_2 = 1000059001,
    VK_STRUCTURE_TYPE_FORMAT_PROPERTIES_2 = 1000059002,
    VK_STRUCTURE_TYPE_IMAGE_FORMAT_PROPERTIES_2 = 1000059003,
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_IMAGE_FORMAT_INFO_2 = 1000059004,
    VK_STRUCTURE_TYPE_QUEUE_FAMILY_PROPERTIES_2 = 1000059005,
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_MEMORY_PROPERTIES_2 = 1000059006,
    VK_STRUCTURE_TYPE_SPARSE_IMAGE_FORMAT_PROPERTIES_2 = 1000059007,
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SPARSE_IMAGE_FORMAT_INFO_2 = 1000059008,
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_POINT_CLIPPING_PROPERTIES = 1000117000,
    VK_STRUCTURE_TYPE_RENDER_PASS_INPUT_ATTACHMENT_ASPECT_CREATE_INFO = 1000117001,
    VK_STRUCTURE_TYPE_IMAGE_VIEW_USAGE_CREATE_INFO = 1000117002,
    VK_STRUCTURE_TYPE_PIPELINE_TESSELLATION_DOMAIN_ORIGIN_STATE_CREATE_INFO = 1000117003,
    VK_STRUCTURE_TYPE_RENDER_PASS_MULTIVIEW_CREATE_INFO = 1000053000,
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_MULTIVIEW_FEATURES = 1000053001,
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_MULTIVIEW_PROPERTIES = 1000053002,
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_VARIABLE_POINTERS_FEATURES = 1000120000,
    VK_STRUCTURE_TYPE_PROTECTED_SUBMIT_INFO = 1000145000,
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_PROTECTED_MEMORY_FEATURES = 1000145001,
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_PROTECTED_MEMORY_PROPERTIES = 1000145002,
    VK_STRUCTURE_TYPE_DEVICE_QUEUE_INFO_2 = 1000145003,
    VK_STRUCTURE_TYPE_SAMPLER_YCBCR_CONVERSION_CREATE_INFO = 1000156000,
    VK_STRUCTURE_TYPE_SAMPLER_YCBCR_CONVERSION_INFO = 1000156001,
    VK_STRUCTURE_TYPE_BIND_IMAGE_PLANE_MEMORY_INFO = 1000156002,
    VK_STRUCTURE_TYPE_IMAGE_PLANE_MEMORY_REQUIREMENTS_INFO = 1000156003,
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SAMPLER_YCBCR_CONVERSION_FEATURES = 1000156004,
    VK_STRUCTURE_TYPE_SAMPLER_YCBCR_CONVERSION_IMAGE_FORMAT_PROPERTIES = 1000156005,
    VK_STRUCTURE_TYPE_DESCRIPTOR_UPDATE_TEMPLATE_CREATE_INFO = 1000085000,
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_EXTERNAL_IMAGE_FORMAT_INFO = 1000071000,
    VK_STRUCTURE_TYPE_EXTERNAL_IMAGE_FORMAT_PROPERTIES = 1000071001,
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_EXTERNAL_BUFFER_INFO = 1000071002,
    VK_STRUCTURE_TYPE_EXTERNAL_BUFFER_PROPERTIES = 1000071003,
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_ID_PROPERTIES = 1000071004,
    VK_STRUCTURE_TYPE_EXTERNAL_MEMORY_BUFFER_CREATE_INFO = 1000072000,
    VK_STRUCTURE_TYPE_EXTERNAL_MEMORY_IMAGE_CREATE_INFO = 1000072001,
    VK_STRUCTURE_TYPE_EXPORT_MEMORY_ALLOCATE_INFO = 1000072002,
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_EXTERNAL_FENCE_INFO = 1000112000,
    VK_STRUCTURE_TYPE_EXTERNAL_FENCE_PROPERTIES = 1000112001,
    VK_STRUCTURE_TYPE_EXPORT_FENCE_CREATE_INFO = 1000113000,
    VK_STRUCTURE_TYPE_EXPORT_SEMAPHORE_CREATE_INFO = 1000077000,
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_EXTERNAL_SEMAPHORE_INFO = 1000076000,
    VK_STRUCTURE_TYPE_EXTERNAL_SEMAPHORE_PROPERTIES = 1000076001,
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_MAINTENANCE_3_PROPERTIES = 1000168000,
    VK_STRUCTURE_TYPE_DESCRIPTOR_SET_LAYOUT_SUPPORT = 1000168001,
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_DRAW_PARAMETERS_FEATURES = 1000063000,
    VK_STRUCTURE_TYPE_SWAPCHAIN_CREATE_INFO_KHR = 1000001000,
    VK_STRUCTURE_TYPE_PRESENT_INFO_KHR = 1000001001,
    VK_STRUCTURE_TYPE_DEVICE_GROUP_PRESENT_CAPABILITIES_KHR = 1000060007,
    VK_STRUCTURE_TYPE_IMAGE_SWAPCHAIN_CREATE_INFO_KHR = 1000060008,
    VK_STRUCTURE_TYPE_BIND_IMAGE_MEMORY_SWAPCHAIN_INFO_KHR = 1000060009,
    VK_STRUCTURE_TYPE_ACQUIRE_NEXT_IMAGE_INFO_KHR = 1000060010,
    VK_STRUCTURE_TYPE_DEVICE_GROUP_PRESENT_INFO_KHR = 1000060011,
    VK_STRUCTURE_TYPE_DEVICE_GROUP_SWAPCHAIN_CREATE_INFO_KHR = 1000060012,
    VK_STRUCTURE_TYPE_DISPLAY_MODE_CREATE_INFO_KHR = 1000002000,
    VK_STRUCTURE_TYPE_DISPLAY_SURFACE_CREATE_INFO_KHR = 1000002001,
    VK_STRUCTURE_TYPE_DISPLAY_PRESENT_INFO_KHR = 1000003000,
    VK_STRUCTURE_TYPE_XLIB_SURFACE_CREATE_INFO_KHR = 1000004000,
    VK_STRUCTURE_TYPE_XCB_SURFACE_CREATE_INFO_KHR = 1000005000,
    VK_STRUCTURE_TYPE_WAYLAND_SURFACE_CREATE_INFO_KHR = 1000006000,
    VK_STRUCTURE_TYPE_ANDROID_SURFACE_CREATE_INFO_KHR = 1000008000,
    VK_STRUCTURE_TYPE_WIN32_SURFACE_CREATE_INFO_KHR = 1000009000,
    VK_STRUCTURE_TYPE_DEBUG_REPORT_CALLBACK_CREATE_INFO_EXT = 1000011000,
    VK_STRUCTURE_TYPE_PIPELINE_RASTERIZATION_STATE_RASTERIZATION_ORDER_AMD = 1000018000,
    VK_STRUCTURE_TYPE_DEBUG_MARKER_OBJECT_NAME_INFO_EXT = 1000022000,
    VK_STRUCTURE_TYPE_DEBUG_MARKER_OBJECT_TAG_INFO_EXT = 1000022001,
    VK_STRUCTURE_TYPE_DEBUG_MARKER_MARKER_INFO_EXT = 1000022002,
    VK_STRUCTURE_TYPE_DEDICATED_ALLOCATION_IMAGE_CREATE_INFO_NV = 1000026000,
    VK_STRUCTURE_TYPE_DEDICATED_ALLOCATION_BUFFER_CREATE_INFO_NV = 1000026001,
    VK_STRUCTURE_TYPE_DEDICATED_ALLOCATION_MEMORY_ALLOCATE_INFO_NV = 1000026002,
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_TRANSFORM_FEEDBACK_FEATURES_EXT = 1000028000,
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_TRANSFORM_FEEDBACK_PROPERTIES_EXT = 1000028001,
    VK_STRUCTURE_TYPE_PIPELINE_RASTERIZATION_STATE_STREAM_CREATE_INFO_EXT = 1000028002,
    VK_STRUCTURE_TYPE_IMAGE_VIEW_HANDLE_INFO_NVX = 1000030000,
    VK_STRUCTURE_TYPE_TEXTURE_LOD_GATHER_FORMAT_PROPERTIES_AMD = 1000041000,
    VK_STRUCTURE_TYPE_STREAM_DESCRIPTOR_SURFACE_CREATE_INFO_GGP = 1000049000,
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_CORNER_SAMPLED_IMAGE_FEATURES_NV = 1000050000,
    VK_STRUCTURE_TYPE_EXTERNAL_MEMORY_IMAGE_CREATE_INFO_NV = 1000056000,
    VK_STRUCTURE_TYPE_EXPORT_MEMORY_ALLOCATE_INFO_NV = 1000056001,
    VK_STRUCTURE_TYPE_IMPORT_MEMORY_WIN32_HANDLE_INFO_NV = 1000057000,
    VK_STRUCTURE_TYPE_EXPORT_MEMORY_WIN32_HANDLE_INFO_NV = 1000057001,
    VK_STRUCTURE_TYPE_WIN32_KEYED_MUTEX_ACQUIRE_RELEASE_INFO_NV = 1000058000,
    VK_STRUCTURE_TYPE_VALIDATION_FLAGS_EXT = 1000061000,
    VK_STRUCTURE_TYPE_VI_SURFACE_CREATE_INFO_NN = 1000062000,
    VK_STRUCTURE_TYPE_IMAGE_VIEW_ASTC_DECODE_MODE_EXT = 1000067000,
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_ASTC_DECODE_FEATURES_EXT = 1000067001,
    VK_STRUCTURE_TYPE_IMPORT_MEMORY_WIN32_HANDLE_INFO_KHR = 1000073000,
    VK_STRUCTURE_TYPE_EXPORT_MEMORY_WIN32_HANDLE_INFO_KHR = 1000073001,
    VK_STRUCTURE_TYPE_MEMORY_WIN32_HANDLE_PROPERTIES_KHR = 1000073002,
    VK_STRUCTURE_TYPE_MEMORY_GET_WIN32_HANDLE_INFO_KHR = 1000073003,
    VK_STRUCTURE_TYPE_IMPORT_MEMORY_FD_INFO_KHR = 1000074000,
    VK_STRUCTURE_TYPE_MEMORY_FD_PROPERTIES_KHR = 1000074001,
    VK_STRUCTURE_TYPE_MEMORY_GET_FD_INFO_KHR = 1000074002,
    VK_STRUCTURE_TYPE_WIN32_KEYED_MUTEX_ACQUIRE_RELEASE_INFO_KHR = 1000075000,
    VK_STRUCTURE_TYPE_IMPORT_SEMAPHORE_WIN32_HANDLE_INFO_KHR = 1000078000,
    VK_STRUCTURE_TYPE_EXPORT_SEMAPHORE_WIN32_HANDLE_INFO_KHR = 1000078001,
    VK_STRUCTURE_TYPE_D3D12_FENCE_SUBMIT_INFO_KHR = 1000078002,
    VK_STRUCTURE_TYPE_SEMAPHORE_GET_WIN32_HANDLE_INFO_KHR = 1000078003,
    VK_STRUCTURE_TYPE_IMPORT_SEMAPHORE_FD_INFO_KHR = 1000079000,
    VK_STRUCTURE_TYPE_SEMAPHORE_GET_FD_INFO_KHR = 1000079001,
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_PUSH_DESCRIPTOR_PROPERTIES_KHR = 1000080000,
    VK_STRUCTURE_TYPE_COMMAND_BUFFER_INHERITANCE_CONDITIONAL_RENDERING_INFO_EXT = 1000081000,
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_CONDITIONAL_RENDERING_FEATURES_EXT = 1000081001,
    VK_STRUCTURE_TYPE_CONDITIONAL_RENDERING_BEGIN_INFO_EXT = 1000081002,
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_FLOAT16_INT8_FEATURES_KHR = 1000082000,
    VK_STRUCTURE_TYPE_PRESENT_REGIONS_KHR = 1000084000,
    VK_STRUCTURE_TYPE_OBJECT_TABLE_CREATE_INFO_NVX = 1000086000,
    VK_STRUCTURE_TYPE_INDIRECT_COMMANDS_LAYOUT_CREATE_INFO_NVX = 1000086001,
    VK_STRUCTURE_TYPE_CMD_PROCESS_COMMANDS_INFO_NVX = 1000086002,
    VK_STRUCTURE_TYPE_CMD_RESERVE_SPACE_FOR_COMMANDS_INFO_NVX = 1000086003,
    VK_STRUCTURE_TYPE_DEVICE_GENERATED_COMMANDS_LIMITS_NVX = 1000086004,
    VK_STRUCTURE_TYPE_DEVICE_GENERATED_COMMANDS_FEATURES_NVX = 1000086005,
    VK_STRUCTURE_TYPE_PIPELINE_VIEWPORT_W_SCALING_STATE_CREATE_INFO_NV = 1000087000,
    VK_STRUCTURE_TYPE_SURFACE_CAPABILITIES_2_EXT = 1000090000,
    VK_STRUCTURE_TYPE_DISPLAY_POWER_INFO_EXT = 1000091000,
    VK_STRUCTURE_TYPE_DEVICE_EVENT_INFO_EXT = 1000091001,
    VK_STRUCTURE_TYPE_DISPLAY_EVENT_INFO_EXT = 1000091002,
    VK_STRUCTURE_TYPE_SWAPCHAIN_COUNTER_CREATE_INFO_EXT = 1000091003,
    VK_STRUCTURE_TYPE_PRESENT_TIMES_INFO_GOOGLE = 1000092000,
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_MULTIVIEW_PER_VIEW_ATTRIBUTES_PROPERTIES_NVX = 1000097000,
    VK_STRUCTURE_TYPE_PIPELINE_VIEWPORT_SWIZZLE_STATE_CREATE_INFO_NV = 1000098000,
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_DISCARD_RECTANGLE_PROPERTIES_EXT = 1000099000,
    VK_STRUCTURE_TYPE_PIPELINE_DISCARD_RECTANGLE_STATE_CREATE_INFO_EXT = 1000099001,
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_CONSERVATIVE_RASTERIZATION_PROPERTIES_EXT = 1000101000,
    VK_STRUCTURE_TYPE_PIPELINE_RASTERIZATION_CONSERVATIVE_STATE_CREATE_INFO_EXT = 1000101001,
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_DEPTH_CLIP_ENABLE_FEATURES_EXT = 1000102000,
    VK_STRUCTURE_TYPE_PIPELINE_RASTERIZATION_DEPTH_CLIP_STATE_CREATE_INFO_EXT = 1000102001,
    VK_STRUCTURE_TYPE_HDR_METADATA_EXT = 1000105000,
    VK_STRUCTURE_TYPE_ATTACHMENT_DESCRIPTION_2_KHR = 1000109000,
    VK_STRUCTURE_TYPE_ATTACHMENT_REFERENCE_2_KHR = 1000109001,
    VK_STRUCTURE_TYPE_SUBPASS_DESCRIPTION_2_KHR = 1000109002,
    VK_STRUCTURE_TYPE_SUBPASS_DEPENDENCY_2_KHR = 1000109003,
    VK_STRUCTURE_TYPE_RENDER_PASS_CREATE_INFO_2_KHR = 1000109004,
    VK_STRUCTURE_TYPE_SUBPASS_BEGIN_INFO_KHR = 1000109005,
    VK_STRUCTURE_TYPE_SUBPASS_END_INFO_KHR = 1000109006,
    VK_STRUCTURE_TYPE_SHARED_PRESENT_SURFACE_CAPABILITIES_KHR = 1000111000,
    VK_STRUCTURE_TYPE_IMPORT_FENCE_WIN32_HANDLE_INFO_KHR = 1000114000,
    VK_STRUCTURE_TYPE_EXPORT_FENCE_WIN32_HANDLE_INFO_KHR = 1000114001,
    VK_STRUCTURE_TYPE_FENCE_GET_WIN32_HANDLE_INFO_KHR = 1000114002,
    VK_STRUCTURE_TYPE_IMPORT_FENCE_FD_INFO_KHR = 1000115000,
    VK_STRUCTURE_TYPE_FENCE_GET_FD_INFO_KHR = 1000115001,
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SURFACE_INFO_2_KHR = 1000119000,
    VK_STRUCTURE_TYPE_SURFACE_CAPABILITIES_2_KHR = 1000119001,
    VK_STRUCTURE_TYPE_SURFACE_FORMAT_2_KHR = 1000119002,
    VK_STRUCTURE_TYPE_DISPLAY_PROPERTIES_2_KHR = 1000121000,
    VK_STRUCTURE_TYPE_DISPLAY_PLANE_PROPERTIES_2_KHR = 1000121001,
    VK_STRUCTURE_TYPE_DISPLAY_MODE_PROPERTIES_2_KHR = 1000121002,
    VK_STRUCTURE_TYPE_DISPLAY_PLANE_INFO_2_KHR = 1000121003,
    VK_STRUCTURE_TYPE_DISPLAY_PLANE_CAPABILITIES_2_KHR = 1000121004,
    VK_STRUCTURE_TYPE_IOS_SURFACE_CREATE_INFO_MVK = 1000122000,
    VK_STRUCTURE_TYPE_MACOS_SURFACE_CREATE_INFO_MVK = 1000123000,
    VK_STRUCTURE_TYPE_DEBUG_UTILS_OBJECT_NAME_INFO_EXT = 1000128000,
    VK_STRUCTURE_TYPE_DEBUG_UTILS_OBJECT_TAG_INFO_EXT = 1000128001,
    VK_STRUCTURE_TYPE_DEBUG_UTILS_LABEL_EXT = 1000128002,
    VK_STRUCTURE_TYPE_DEBUG_UTILS_MESSENGER_CALLBACK_DATA_EXT = 1000128003,
    VK_STRUCTURE_TYPE_DEBUG_UTILS_MESSENGER_CREATE_INFO_EXT = 1000128004,
    VK_STRUCTURE_TYPE_ANDROID_HARDWARE_BUFFER_USAGE_ANDROID = 1000129000,
    VK_STRUCTURE_TYPE_ANDROID_HARDWARE_BUFFER_PROPERTIES_ANDROID = 1000129001,
    VK_STRUCTURE_TYPE_ANDROID_HARDWARE_BUFFER_FORMAT_PROPERTIES_ANDROID = 1000129002,
    VK_STRUCTURE_TYPE_IMPORT_ANDROID_HARDWARE_BUFFER_INFO_ANDROID = 1000129003,
    VK_STRUCTURE_TYPE_MEMORY_GET_ANDROID_HARDWARE_BUFFER_INFO_ANDROID = 1000129004,
    VK_STRUCTURE_TYPE_EXTERNAL_FORMAT_ANDROID = 1000129005,
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SAMPLER_FILTER_MINMAX_PROPERTIES_EXT = 1000130000,
    VK_STRUCTURE_TYPE_SAMPLER_REDUCTION_MODE_CREATE_INFO_EXT = 1000130001,
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_INLINE_UNIFORM_BLOCK_FEATURES_EXT = 1000138000,
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_INLINE_UNIFORM_BLOCK_PROPERTIES_EXT = 1000138001,
    VK_STRUCTURE_TYPE_WRITE_DESCRIPTOR_SET_INLINE_UNIFORM_BLOCK_EXT = 1000138002,
    VK_STRUCTURE_TYPE_DESCRIPTOR_POOL_INLINE_UNIFORM_BLOCK_CREATE_INFO_EXT = 1000138003,
    VK_STRUCTURE_TYPE_SAMPLE_LOCATIONS_INFO_EXT = 1000143000,
    VK_STRUCTURE_TYPE_RENDER_PASS_SAMPLE_LOCATIONS_BEGIN_INFO_EXT = 1000143001,
    VK_STRUCTURE_TYPE_PIPELINE_SAMPLE_LOCATIONS_STATE_CREATE_INFO_EXT = 1000143002,
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SAMPLE_LOCATIONS_PROPERTIES_EXT = 1000143003,
    VK_STRUCTURE_TYPE_MULTISAMPLE_PROPERTIES_EXT = 1000143004,
    VK_STRUCTURE_TYPE_IMAGE_FORMAT_LIST_CREATE_INFO_KHR = 1000147000,
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_BLEND_OPERATION_ADVANCED_FEATURES_EXT = 1000148000,
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_BLEND_OPERATION_ADVANCED_PROPERTIES_EXT = 1000148001,
    VK_STRUCTURE_TYPE_PIPELINE_COLOR_BLEND_ADVANCED_STATE_CREATE_INFO_EXT = 1000148002,
    VK_STRUCTURE_TYPE_PIPELINE_COVERAGE_TO_COLOR_STATE_CREATE_INFO_NV = 1000149000,
    VK_STRUCTURE_TYPE_PIPELINE_COVERAGE_MODULATION_STATE_CREATE_INFO_NV = 1000152000,
    VK_STRUCTURE_TYPE_DRM_FORMAT_MODIFIER_PROPERTIES_LIST_EXT = 1000158000,
    VK_STRUCTURE_TYPE_DRM_FORMAT_MODIFIER_PROPERTIES_EXT = 1000158001,
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_IMAGE_DRM_FORMAT_MODIFIER_INFO_EXT = 1000158002,
    VK_STRUCTURE_TYPE_IMAGE_DRM_FORMAT_MODIFIER_LIST_CREATE_INFO_EXT = 1000158003,
    VK_STRUCTURE_TYPE_IMAGE_DRM_FORMAT_MODIFIER_EXPLICIT_CREATE_INFO_EXT = 1000158004,
    VK_STRUCTURE_TYPE_IMAGE_DRM_FORMAT_MODIFIER_PROPERTIES_EXT = 1000158005,
    VK_STRUCTURE_TYPE_VALIDATION_CACHE_CREATE_INFO_EXT = 1000160000,
    VK_STRUCTURE_TYPE_SHADER_MODULE_VALIDATION_CACHE_CREATE_INFO_EXT = 1000160001,
    VK_STRUCTURE_TYPE_DESCRIPTOR_SET_LAYOUT_BINDING_FLAGS_CREATE_INFO_EXT = 1000161000,
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_DESCRIPTOR_INDEXING_FEATURES_EXT = 1000161001,
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_DESCRIPTOR_INDEXING_PROPERTIES_EXT = 1000161002,
    VK_STRUCTURE_TYPE_DESCRIPTOR_SET_VARIABLE_DESCRIPTOR_COUNT_ALLOCATE_INFO_EXT = 1000161003,
    VK_STRUCTURE_TYPE_DESCRIPTOR_SET_VARIABLE_DESCRIPTOR_COUNT_LAYOUT_SUPPORT_EXT = 1000161004,
    VK_STRUCTURE_TYPE_PIPELINE_VIEWPORT_SHADING_RATE_IMAGE_STATE_CREATE_INFO_NV = 1000164000,
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADING_RATE_IMAGE_FEATURES_NV = 1000164001,
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADING_RATE_IMAGE_PROPERTIES_NV = 1000164002,
    VK_STRUCTURE_TYPE_PIPELINE_VIEWPORT_COARSE_SAMPLE_ORDER_STATE_CREATE_INFO_NV = 1000164005,
    VK_STRUCTURE_TYPE_RAY_TRACING_PIPELINE_CREATE_INFO_NV = 1000165000,
    VK_STRUCTURE_TYPE_ACCELERATION_STRUCTURE_CREATE_INFO_NV = 1000165001,
    VK_STRUCTURE_TYPE_GEOMETRY_NV = 1000165003,
    VK_STRUCTURE_TYPE_GEOMETRY_TRIANGLES_NV = 1000165004,
    VK_STRUCTURE_TYPE_GEOMETRY_AABB_NV = 1000165005,
    VK_STRUCTURE_TYPE_BIND_ACCELERATION_STRUCTURE_MEMORY_INFO_NV = 1000165006,
    VK_STRUCTURE_TYPE_WRITE_DESCRIPTOR_SET_ACCELERATION_STRUCTURE_NV = 1000165007,
    VK_STRUCTURE_TYPE_ACCELERATION_STRUCTURE_MEMORY_REQUIREMENTS_INFO_NV = 1000165008,
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_RAY_TRACING_PROPERTIES_NV = 1000165009,
    VK_STRUCTURE_TYPE_RAY_TRACING_SHADER_GROUP_CREATE_INFO_NV = 1000165011,
    VK_STRUCTURE_TYPE_ACCELERATION_STRUCTURE_INFO_NV = 1000165012,
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_REPRESENTATIVE_FRAGMENT_TEST_FEATURES_NV = 1000166000,
    VK_STRUCTURE_TYPE_PIPELINE_REPRESENTATIVE_FRAGMENT_TEST_STATE_CREATE_INFO_NV = 1000166001,
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_IMAGE_VIEW_IMAGE_FORMAT_INFO_EXT = 1000170000,
    VK_STRUCTURE_TYPE_FILTER_CUBIC_IMAGE_VIEW_IMAGE_FORMAT_PROPERTIES_EXT = 1000170001,
    VK_STRUCTURE_TYPE_DEVICE_QUEUE_GLOBAL_PRIORITY_CREATE_INFO_EXT = 1000174000,
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_8BIT_STORAGE_FEATURES_KHR = 1000177000,
    VK_STRUCTURE_TYPE_IMPORT_MEMORY_HOST_POINTER_INFO_EXT = 1000178000,
    VK_STRUCTURE_TYPE_MEMORY_HOST_POINTER_PROPERTIES_EXT = 1000178001,
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_EXTERNAL_MEMORY_HOST_PROPERTIES_EXT = 1000178002,
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_ATOMIC_INT64_FEATURES_KHR = 1000180000,
    VK_STRUCTURE_TYPE_CALIBRATED_TIMESTAMP_INFO_EXT = 1000184000,
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_CORE_PROPERTIES_AMD = 1000185000,
    VK_STRUCTURE_TYPE_DEVICE_MEMORY_OVERALLOCATION_CREATE_INFO_AMD = 1000189000,
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_VERTEX_ATTRIBUTE_DIVISOR_PROPERTIES_EXT = 1000190000,
    VK_STRUCTURE_TYPE_PIPELINE_VERTEX_INPUT_DIVISOR_STATE_CREATE_INFO_EXT = 1000190001,
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_VERTEX_ATTRIBUTE_DIVISOR_FEATURES_EXT = 1000190002,
    VK_STRUCTURE_TYPE_PRESENT_FRAME_TOKEN_GGP = 1000191000,
    VK_STRUCTURE_TYPE_PIPELINE_CREATION_FEEDBACK_CREATE_INFO_EXT = 1000192000,
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_DRIVER_PROPERTIES_KHR = 1000196000,
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_FLOAT_CONTROLS_PROPERTIES_KHR = 1000197000,
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_DEPTH_STENCIL_RESOLVE_PROPERTIES_KHR = 1000199000,
    VK_STRUCTURE_TYPE_SUBPASS_DESCRIPTION_DEPTH_STENCIL_RESOLVE_KHR = 1000199001,
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_COMPUTE_SHADER_DERIVATIVES_FEATURES_NV = 1000201000,
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_MESH_SHADER_FEATURES_NV = 1000202000,
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_MESH_SHADER_PROPERTIES_NV = 1000202001,
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_FRAGMENT_SHADER_BARYCENTRIC_FEATURES_NV = 1000203000,
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_IMAGE_FOOTPRINT_FEATURES_NV = 1000204000,
    VK_STRUCTURE_TYPE_PIPELINE_VIEWPORT_EXCLUSIVE_SCISSOR_STATE_CREATE_INFO_NV = 1000205000,
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_EXCLUSIVE_SCISSOR_FEATURES_NV = 1000205002,
    VK_STRUCTURE_TYPE_CHECKPOINT_DATA_NV = 1000206000,
    VK_STRUCTURE_TYPE_QUEUE_FAMILY_CHECKPOINT_PROPERTIES_NV = 1000206001,
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_VULKAN_MEMORY_MODEL_FEATURES_KHR = 1000211000,
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_PCI_BUS_INFO_PROPERTIES_EXT = 1000212000,
    VK_STRUCTURE_TYPE_DISPLAY_NATIVE_HDR_SURFACE_CAPABILITIES_AMD = 1000213000,
    VK_STRUCTURE_TYPE_SWAPCHAIN_DISPLAY_NATIVE_HDR_CREATE_INFO_AMD = 1000213001,
    VK_STRUCTURE_TYPE_IMAGEPIPE_SURFACE_CREATE_INFO_FUCHSIA = 1000214000,
    VK_STRUCTURE_TYPE_METAL_SURFACE_CREATE_INFO_EXT = 1000217000,
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_FRAGMENT_DENSITY_MAP_FEATURES_EXT = 1000218000,
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_FRAGMENT_DENSITY_MAP_PROPERTIES_EXT = 1000218001,
    VK_STRUCTURE_TYPE_RENDER_PASS_FRAGMENT_DENSITY_MAP_CREATE_INFO_EXT = 1000218002,
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SCALAR_BLOCK_LAYOUT_FEATURES_EXT = 1000221000,
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_MEMORY_BUDGET_PROPERTIES_EXT = 1000237000,
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_MEMORY_PRIORITY_FEATURES_EXT = 1000238000,
    VK_STRUCTURE_TYPE_MEMORY_PRIORITY_ALLOCATE_INFO_EXT = 1000238001,
    VK_STRUCTURE_TYPE_SURFACE_PROTECTED_CAPABILITIES_KHR = 1000239000,
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_DEDICATED_ALLOCATION_IMAGE_ALIASING_FEATURES_NV = 1000240000,
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_BUFFER_DEVICE_ADDRESS_FEATURES_EXT = 1000244000,
    VK_STRUCTURE_TYPE_BUFFER_DEVICE_ADDRESS_INFO_EXT = 1000244001,
    VK_STRUCTURE_TYPE_BUFFER_DEVICE_ADDRESS_CREATE_INFO_EXT = 1000244002,
    VK_STRUCTURE_TYPE_IMAGE_STENCIL_USAGE_CREATE_INFO_EXT = 1000246000,
    VK_STRUCTURE_TYPE_VALIDATION_FEATURES_EXT = 1000247000,
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_COOPERATIVE_MATRIX_FEATURES_NV = 1000249000,
    VK_STRUCTURE_TYPE_COOPERATIVE_MATRIX_PROPERTIES_NV = 1000249001,
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_COOPERATIVE_MATRIX_PROPERTIES_NV = 1000249002,
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_YCBCR_IMAGE_ARRAYS_FEATURES_EXT = 1000252000,
    VK_STRUCTURE_TYPE_SURFACE_FULL_SCREEN_EXCLUSIVE_INFO_EXT = 1000255000,
    VK_STRUCTURE_TYPE_SURFACE_CAPABILITIES_FULL_SCREEN_EXCLUSIVE_EXT = 1000255002,
    VK_STRUCTURE_TYPE_SURFACE_FULL_SCREEN_EXCLUSIVE_WIN32_INFO_EXT = 1000255001,
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_HOST_QUERY_RESET_FEATURES_EXT = 1000261000,
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_VARIABLE_POINTER_FEATURES = VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_VARIABLE_POINTERS_FEATURES,
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_DRAW_PARAMETER_FEATURES = VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_DRAW_PARAMETERS_FEATURES,
    VK_STRUCTURE_TYPE_DEBUG_REPORT_CREATE_INFO_EXT = VK_STRUCTURE_TYPE_DEBUG_REPORT_CALLBACK_CREATE_INFO_EXT,
    VK_STRUCTURE_TYPE_RENDER_PASS_MULTIVIEW_CREATE_INFO_KHR = VK_STRUCTURE_TYPE_RENDER_PASS_MULTIVIEW_CREATE_INFO,
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_MULTIVIEW_FEATURES_KHR = VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_MULTIVIEW_FEATURES,
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_MULTIVIEW_PROPERTIES_KHR = VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_MULTIVIEW_PROPERTIES,
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_FEATURES_2_KHR = VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_FEATURES_2,
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_PROPERTIES_2_KHR = VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_PROPERTIES_2,
    VK_STRUCTURE_TYPE_FORMAT_PROPERTIES_2_KHR = VK_STRUCTURE_TYPE_FORMAT_PROPERTIES_2,
    VK_STRUCTURE_TYPE_IMAGE_FORMAT_PROPERTIES_2_KHR = VK_STRUCTURE_TYPE_IMAGE_FORMAT_PROPERTIES_2,
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_IMAGE_FORMAT_INFO_2_KHR = VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_IMAGE_FORMAT_INFO_2,
    VK_STRUCTURE_TYPE_QUEUE_FAMILY_PROPERTIES_2_KHR = VK_STRUCTURE_TYPE_QUEUE_FAMILY_PROPERTIES_2,
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_MEMORY_PROPERTIES_2_KHR = VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_MEMORY_PROPERTIES_2,
    VK_STRUCTURE_TYPE_SPARSE_IMAGE_FORMAT_PROPERTIES_2_KHR = VK_STRUCTURE_TYPE_SPARSE_IMAGE_FORMAT_PROPERTIES_2,
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SPARSE_IMAGE_FORMAT_INFO_2_KHR = VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SPARSE_IMAGE_FORMAT_INFO_2,
    VK_STRUCTURE_TYPE_MEMORY_ALLOCATE_FLAGS_INFO_KHR = VK_STRUCTURE_TYPE_MEMORY_ALLOCATE_FLAGS_INFO,
    VK_STRUCTURE_TYPE_DEVICE_GROUP_RENDER_PASS_BEGIN_INFO_KHR = VK_STRUCTURE_TYPE_DEVICE_GROUP_RENDER_PASS_BEGIN_INFO,
    VK_STRUCTURE_TYPE_DEVICE_GROUP_COMMAND_BUFFER_BEGIN_INFO_KHR = VK_STRUCTURE_TYPE_DEVICE_GROUP_COMMAND_BUFFER_BEGIN_INFO,
    VK_STRUCTURE_TYPE_DEVICE_GROUP_SUBMIT_INFO_KHR = VK_STRUCTURE_TYPE_DEVICE_GROUP_SUBMIT_INFO,
    VK_STRUCTURE_TYPE_DEVICE_GROUP_BIND_SPARSE_INFO_KHR = VK_STRUCTURE_TYPE_DEVICE_GROUP_BIND_SPARSE_INFO,
    VK_STRUCTURE_TYPE_BIND_BUFFER_MEMORY_DEVICE_GROUP_INFO_KHR = VK_STRUCTURE_TYPE_BIND_BUFFER_MEMORY_DEVICE_GROUP_INFO,
    VK_STRUCTURE_TYPE_BIND_IMAGE_MEMORY_DEVICE_GROUP_INFO_KHR = VK_STRUCTURE_TYPE_BIND_IMAGE_MEMORY_DEVICE_GROUP_INFO,
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_GROUP_PROPERTIES_KHR = VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_GROUP_PROPERTIES,
    VK_STRUCTURE_TYPE_DEVICE_GROUP_DEVICE_CREATE_INFO_KHR = VK_STRUCTURE_TYPE_DEVICE_GROUP_DEVICE_CREATE_INFO,
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_EXTERNAL_IMAGE_FORMAT_INFO_KHR = VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_EXTERNAL_IMAGE_FORMAT_INFO,
    VK_STRUCTURE_TYPE_EXTERNAL_IMAGE_FORMAT_PROPERTIES_KHR = VK_STRUCTURE_TYPE_EXTERNAL_IMAGE_FORMAT_PROPERTIES,
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_EXTERNAL_BUFFER_INFO_KHR = VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_EXTERNAL_BUFFER_INFO,
    VK_STRUCTURE_TYPE_EXTERNAL_BUFFER_PROPERTIES_KHR = VK_STRUCTURE_TYPE_EXTERNAL_BUFFER_PROPERTIES,
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_ID_PROPERTIES_KHR = VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_ID_PROPERTIES,
    VK_STRUCTURE_TYPE_EXTERNAL_MEMORY_BUFFER_CREATE_INFO_KHR = VK_STRUCTURE_TYPE_EXTERNAL_MEMORY_BUFFER_CREATE_INFO,
    VK_STRUCTURE_TYPE_EXTERNAL_MEMORY_IMAGE_CREATE_INFO_KHR = VK_STRUCTURE_TYPE_EXTERNAL_MEMORY_IMAGE_CREATE_INFO,
    VK_STRUCTURE_TYPE_EXPORT_MEMORY_ALLOCATE_INFO_KHR = VK_STRUCTURE_TYPE_EXPORT_MEMORY_ALLOCATE_INFO,
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_EXTERNAL_SEMAPHORE_INFO_KHR = VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_EXTERNAL_SEMAPHORE_INFO,
    VK_STRUCTURE_TYPE_EXTERNAL_SEMAPHORE_PROPERTIES_KHR = VK_STRUCTURE_TYPE_EXTERNAL_SEMAPHORE_PROPERTIES,
    VK_STRUCTURE_TYPE_EXPORT_SEMAPHORE_CREATE_INFO_KHR = VK_STRUCTURE_TYPE_EXPORT_SEMAPHORE_CREATE_INFO,
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_16BIT_STORAGE_FEATURES_KHR = VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_16BIT_STORAGE_FEATURES,
    VK_STRUCTURE_TYPE_DESCRIPTOR_UPDATE_TEMPLATE_CREATE_INFO_KHR = VK_STRUCTURE_TYPE_DESCRIPTOR_UPDATE_TEMPLATE_CREATE_INFO,
    VK_STRUCTURE_TYPE_SURFACE_CAPABILITIES2_EXT = VK_STRUCTURE_TYPE_SURFACE_CAPABILITIES_2_EXT,
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_EXTERNAL_FENCE_INFO_KHR = VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_EXTERNAL_FENCE_INFO,
    VK_STRUCTURE_TYPE_EXTERNAL_FENCE_PROPERTIES_KHR = VK_STRUCTURE_TYPE_EXTERNAL_FENCE_PROPERTIES,
    VK_STRUCTURE_TYPE_EXPORT_FENCE_CREATE_INFO_KHR = VK_STRUCTURE_TYPE_EXPORT_FENCE_CREATE_INFO,
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_POINT_CLIPPING_PROPERTIES_KHR = VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_POINT_CLIPPING_PROPERTIES,
    VK_STRUCTURE_TYPE_RENDER_PASS_INPUT_ATTACHMENT_ASPECT_CREATE_INFO_KHR = VK_STRUCTURE_TYPE_RENDER_PASS_INPUT_ATTACHMENT_ASPECT_CREATE_INFO,
    VK_STRUCTURE_TYPE_IMAGE_VIEW_USAGE_CREATE_INFO_KHR = VK_STRUCTURE_TYPE_IMAGE_VIEW_USAGE_CREATE_INFO,
    VK_STRUCTURE_TYPE_PIPELINE_TESSELLATION_DOMAIN_ORIGIN_STATE_CREATE_INFO_KHR = VK_STRUCTURE_TYPE_PIPELINE_TESSELLATION_DOMAIN_ORIGIN_STATE_CREATE_INFO,
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_VARIABLE_POINTER_FEATURES_KHR = VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_VARIABLE_POINTER_FEATURES,
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_VARIABLE_POINTERS_FEATURES_KHR = VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_VARIABLE_POINTER_FEATURES,
    VK_STRUCTURE_TYPE_MEMORY_DEDICATED_REQUIREMENTS_KHR = VK_STRUCTURE_TYPE_MEMORY_DEDICATED_REQUIREMENTS,
    VK_STRUCTURE_TYPE_MEMORY_DEDICATED_ALLOCATE_INFO_KHR = VK_STRUCTURE_TYPE_MEMORY_DEDICATED_ALLOCATE_INFO,
    VK_STRUCTURE_TYPE_BUFFER_MEMORY_REQUIREMENTS_INFO_2_KHR = VK_STRUCTURE_TYPE_BUFFER_MEMORY_REQUIREMENTS_INFO_2,
    VK_STRUCTURE_TYPE_IMAGE_MEMORY_REQUIREMENTS_INFO_2_KHR = VK_STRUCTURE_TYPE_IMAGE_MEMORY_REQUIREMENTS_INFO_2,
    VK_STRUCTURE_TYPE_IMAGE_SPARSE_MEMORY_REQUIREMENTS_INFO_2_KHR = VK_STRUCTURE_TYPE_IMAGE_SPARSE_MEMORY_REQUIREMENTS_INFO_2,
    VK_STRUCTURE_TYPE_MEMORY_REQUIREMENTS_2_KHR = VK_STRUCTURE_TYPE_MEMORY_REQUIREMENTS_2,
    VK_STRUCTURE_TYPE_SPARSE_IMAGE_MEMORY_REQUIREMENTS_2_KHR = VK_STRUCTURE_TYPE_SPARSE_IMAGE_MEMORY_REQUIREMENTS_2,
    VK_STRUCTURE_TYPE_SAMPLER_YCBCR_CONVERSION_CREATE_INFO_KHR = VK_STRUCTURE_TYPE_SAMPLER_YCBCR_CONVERSION_CREATE_INFO,
    VK_STRUCTURE_TYPE_SAMPLER_YCBCR_CONVERSION_INFO_KHR = VK_STRUCTURE_TYPE_SAMPLER_YCBCR_CONVERSION_INFO,
    VK_STRUCTURE_TYPE_BIND_IMAGE_PLANE_MEMORY_INFO_KHR = VK_STRUCTURE_TYPE_BIND_IMAGE_PLANE_MEMORY_INFO,
    VK_STRUCTURE_TYPE_IMAGE_PLANE_MEMORY_REQUIREMENTS_INFO_KHR = VK_STRUCTURE_TYPE_IMAGE_PLANE_MEMORY_REQUIREMENTS_INFO,
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SAMPLER_YCBCR_CONVERSION_FEATURES_KHR = VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SAMPLER_YCBCR_CONVERSION_FEATURES,
    VK_STRUCTURE_TYPE_SAMPLER_YCBCR_CONVERSION_IMAGE_FORMAT_PROPERTIES_KHR = VK_STRUCTURE_TYPE_SAMPLER_YCBCR_CONVERSION_IMAGE_FORMAT_PROPERTIES,
    VK_STRUCTURE_TYPE_BIND_BUFFER_MEMORY_INFO_KHR = VK_STRUCTURE_TYPE_BIND_BUFFER_MEMORY_INFO,
    VK_STRUCTURE_TYPE_BIND_IMAGE_MEMORY_INFO_KHR = VK_STRUCTURE_TYPE_BIND_IMAGE_MEMORY_INFO,
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_MAINTENANCE_3_PROPERTIES_KHR = VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_MAINTENANCE_3_PROPERTIES,
    VK_STRUCTURE_TYPE_DESCRIPTOR_SET_LAYOUT_SUPPORT_KHR = VK_STRUCTURE_TYPE_DESCRIPTOR_SET_LAYOUT_SUPPORT,
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_BUFFER_ADDRESS_FEATURES_EXT = VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_BUFFER_DEVICE_ADDRESS_FEATURES_EXT,
    VK_STRUCTURE_TYPE_MAX_ENUM = 0x7FFFFFFF
} VkStructureType;</code></pre>
</div>
</div>
</div>
<div class="sect3">
<h4 id="_description_924">Description</h4>
<div class="paragraph">
<p>Each value corresponds to a particular structure with a <code>sType</code> member
with a matching name.
As a general rule, the name of each <a href="#VkStructureType">VkStructureType</a> value is obtained
by taking the name of the structure, stripping the leading <code>Vk</code>,
prefixing each capital letter with <code>_</code>, converting the entire resulting
string to upper case, and prefixing it with <code>VK_STRUCTURE_TYPE_</code>.
For example, structures of type <code>VkImageCreateInfo</code> correspond to a
<a href="#VkStructureType">VkStructureType</a> of <code>VK_STRUCTURE_TYPE_IMAGE_CREATE_INFO</code>, and thus
its <code>sType</code> member <strong class="purple">must</strong> equal that when it is passed to the API.</p>
</div>
<div class="paragraph">
<p>The values <code>VK_STRUCTURE_TYPE_LOADER_INSTANCE_CREATE_INFO</code> and
<code>VK_STRUCTURE_TYPE_LOADER_DEVICE_CREATE_INFO</code> are reserved for internal
use by the loader, and do not have corresponding Vulkan structures in this
Specification.</p>
</div>
</div>
<div class="sect3">
<h4 id="_see_also_924">See Also</h4>
<div class="paragraph">
<p><a href="#VkAccelerationStructureCreateInfoNV">VkAccelerationStructureCreateInfoNV</a>, <a href="#VkAccelerationStructureInfoNV">VkAccelerationStructureInfoNV</a>, <a href="#VkAccelerationStructureMemoryRequirementsInfoNV">VkAccelerationStructureMemoryRequirementsInfoNV</a>, <a href="#VkAcquireNextImageInfoKHR">VkAcquireNextImageInfoKHR</a>, <a href="#VkAndroidHardwareBufferFormatPropertiesANDROID">VkAndroidHardwareBufferFormatPropertiesANDROID</a>, <a href="#VkAndroidHardwareBufferPropertiesANDROID">VkAndroidHardwareBufferPropertiesANDROID</a>, <a href="#VkAndroidHardwareBufferUsageANDROID">VkAndroidHardwareBufferUsageANDROID</a>, <a href="#VkAndroidSurfaceCreateInfoKHR">VkAndroidSurfaceCreateInfoKHR</a>, <a href="#VkApplicationInfo">VkApplicationInfo</a>, <a href="#VkAttachmentDescription2KHR">VkAttachmentDescription2KHR</a>, <a href="#VkAttachmentReference2KHR">VkAttachmentReference2KHR</a>, <a href="#VkBaseInStructure">VkBaseInStructure</a>, <a href="#VkBaseOutStructure">VkBaseOutStructure</a>, <a href="#VkBindAccelerationStructureMemoryInfoNV">VkBindAccelerationStructureMemoryInfoNV</a>, <a href="#VkBindBufferMemoryDeviceGroupInfo">VkBindBufferMemoryDeviceGroupInfo</a>, <a href="#VkBindBufferMemoryInfo">VkBindBufferMemoryInfo</a>, <a href="#VkBindImageMemoryDeviceGroupInfo">VkBindImageMemoryDeviceGroupInfo</a>, <a href="#VkBindImageMemoryInfo">VkBindImageMemoryInfo</a>, <a href="#VkBindImageMemorySwapchainInfoKHR">VkBindImageMemorySwapchainInfoKHR</a>, <a href="#VkBindImagePlaneMemoryInfo">VkBindImagePlaneMemoryInfo</a>, <a href="#VkBindSparseInfo">VkBindSparseInfo</a>, <a href="#VkBufferCreateInfo">VkBufferCreateInfo</a>, <a href="#VkBufferDeviceAddressCreateInfoEXT">VkBufferDeviceAddressCreateInfoEXT</a>, <a href="#VkBufferDeviceAddressInfoEXT">VkBufferDeviceAddressInfoEXT</a>, <a href="#VkBufferMemoryBarrier">VkBufferMemoryBarrier</a>, <a href="#VkBufferMemoryRequirementsInfo2">VkBufferMemoryRequirementsInfo2</a>, <a href="#VkBufferViewCreateInfo">VkBufferViewCreateInfo</a>, <a href="#VkCalibratedTimestampInfoEXT">VkCalibratedTimestampInfoEXT</a>, <a href="#VkCheckpointDataNV">VkCheckpointDataNV</a>, <a href="#VkCmdProcessCommandsInfoNVX">VkCmdProcessCommandsInfoNVX</a>, <a href="#VkCmdReserveSpaceForCommandsInfoNVX">VkCmdReserveSpaceForCommandsInfoNVX</a>, <a href="#VkCommandBufferAllocateInfo">VkCommandBufferAllocateInfo</a>, <a href="#VkCommandBufferBeginInfo">VkCommandBufferBeginInfo</a>, <a href="#VkCommandBufferInheritanceConditionalRenderingInfoEXT">VkCommandBufferInheritanceConditionalRenderingInfoEXT</a>, <a href="#VkCommandBufferInheritanceInfo">VkCommandBufferInheritanceInfo</a>, <a href="#VkCommandPoolCreateInfo">VkCommandPoolCreateInfo</a>, <a href="#VkComputePipelineCreateInfo">VkComputePipelineCreateInfo</a>, <a href="#VkConditionalRenderingBeginInfoEXT">VkConditionalRenderingBeginInfoEXT</a>, <a href="#VkCooperativeMatrixPropertiesNV">VkCooperativeMatrixPropertiesNV</a>, <a href="#VkCopyDescriptorSet">VkCopyDescriptorSet</a>, <a href="#VkD3D12FenceSubmitInfoKHR">VkD3D12FenceSubmitInfoKHR</a>, <a href="#VkDebugMarkerMarkerInfoEXT">VkDebugMarkerMarkerInfoEXT</a>, <a href="#VkDebugMarkerObjectNameInfoEXT">VkDebugMarkerObjectNameInfoEXT</a>, <a href="#VkDebugMarkerObjectTagInfoEXT">VkDebugMarkerObjectTagInfoEXT</a>, <a href="#VkDebugReportCallbackCreateInfoEXT">VkDebugReportCallbackCreateInfoEXT</a>, <a href="#VkDebugUtilsLabelEXT">VkDebugUtilsLabelEXT</a>, <a href="#VkDebugUtilsMessengerCallbackDataEXT">VkDebugUtilsMessengerCallbackDataEXT</a>, <a href="#VkDebugUtilsMessengerCreateInfoEXT">VkDebugUtilsMessengerCreateInfoEXT</a>, <a href="#VkDebugUtilsObjectNameInfoEXT">VkDebugUtilsObjectNameInfoEXT</a>, <a href="#VkDebugUtilsObjectTagInfoEXT">VkDebugUtilsObjectTagInfoEXT</a>, <a href="#VkDedicatedAllocationBufferCreateInfoNV">VkDedicatedAllocationBufferCreateInfoNV</a>, <a href="#VkDedicatedAllocationImageCreateInfoNV">VkDedicatedAllocationImageCreateInfoNV</a>, <a href="#VkDedicatedAllocationMemoryAllocateInfoNV">VkDedicatedAllocationMemoryAllocateInfoNV</a>, <a href="#VkDescriptorPoolCreateInfo">VkDescriptorPoolCreateInfo</a>, <a href="#VkDescriptorPoolInlineUniformBlockCreateInfoEXT">VkDescriptorPoolInlineUniformBlockCreateInfoEXT</a>, <a href="#VkDescriptorSetAllocateInfo">VkDescriptorSetAllocateInfo</a>, <a href="#VkDescriptorSetLayoutBindingFlagsCreateInfoEXT">VkDescriptorSetLayoutBindingFlagsCreateInfoEXT</a>, <a href="#VkDescriptorSetLayoutCreateInfo">VkDescriptorSetLayoutCreateInfo</a>, <a href="#VkDescriptorSetLayoutSupport">VkDescriptorSetLayoutSupport</a>, <a href="#VkDescriptorSetVariableDescriptorCountAllocateInfoEXT">VkDescriptorSetVariableDescriptorCountAllocateInfoEXT</a>, <a href="#VkDescriptorSetVariableDescriptorCountLayoutSupportEXT">VkDescriptorSetVariableDescriptorCountLayoutSupportEXT</a>, <a href="#VkDescriptorUpdateTemplateCreateInfo">VkDescriptorUpdateTemplateCreateInfo</a>, <a href="#VkDeviceCreateInfo">VkDeviceCreateInfo</a>, <a href="#VkDeviceEventInfoEXT">VkDeviceEventInfoEXT</a>, <a href="#VkDeviceGeneratedCommandsFeaturesNVX">VkDeviceGeneratedCommandsFeaturesNVX</a>, <a href="#VkDeviceGeneratedCommandsLimitsNVX">VkDeviceGeneratedCommandsLimitsNVX</a>, <a href="#VkDeviceGroupBindSparseInfo">VkDeviceGroupBindSparseInfo</a>, <a href="#VkDeviceGroupCommandBufferBeginInfo">VkDeviceGroupCommandBufferBeginInfo</a>, <a href="#VkDeviceGroupDeviceCreateInfo">VkDeviceGroupDeviceCreateInfo</a>, <a href="#VkDeviceGroupPresentCapabilitiesKHR">VkDeviceGroupPresentCapabilitiesKHR</a>, <a href="#VkDeviceGroupPresentInfoKHR">VkDeviceGroupPresentInfoKHR</a>, <a href="#VkDeviceGroupRenderPassBeginInfo">VkDeviceGroupRenderPassBeginInfo</a>, <a href="#VkDeviceGroupSubmitInfo">VkDeviceGroupSubmitInfo</a>, <a href="#VkDeviceGroupSwapchainCreateInfoKHR">VkDeviceGroupSwapchainCreateInfoKHR</a>, <a href="#VkDeviceMemoryOverallocationCreateInfoAMD">VkDeviceMemoryOverallocationCreateInfoAMD</a>, <a href="#VkDeviceQueueCreateInfo">VkDeviceQueueCreateInfo</a>, <a href="#VkDeviceQueueGlobalPriorityCreateInfoEXT">VkDeviceQueueGlobalPriorityCreateInfoEXT</a>, <a href="#VkDeviceQueueInfo2">VkDeviceQueueInfo2</a>, <a href="#VkDisplayEventInfoEXT">VkDisplayEventInfoEXT</a>, <a href="#VkDisplayModeCreateInfoKHR">VkDisplayModeCreateInfoKHR</a>, <a href="#VkDisplayModeProperties2KHR">VkDisplayModeProperties2KHR</a>, <a href="#VkDisplayNativeHdrSurfaceCapabilitiesAMD">VkDisplayNativeHdrSurfaceCapabilitiesAMD</a>, <a href="#VkDisplayPlaneCapabilities2KHR">VkDisplayPlaneCapabilities2KHR</a>, <a href="#VkDisplayPlaneInfo2KHR">VkDisplayPlaneInfo2KHR</a>, <a href="#VkDisplayPlaneProperties2KHR">VkDisplayPlaneProperties2KHR</a>, <a href="#VkDisplayPowerInfoEXT">VkDisplayPowerInfoEXT</a>, <a href="#VkDisplayPresentInfoKHR">VkDisplayPresentInfoKHR</a>, <a href="#VkDisplayProperties2KHR">VkDisplayProperties2KHR</a>, <a href="#VkDisplaySurfaceCreateInfoKHR">VkDisplaySurfaceCreateInfoKHR</a>, <a href="#VkDrmFormatModifierPropertiesListEXT">VkDrmFormatModifierPropertiesListEXT</a>, <a href="#VkEventCreateInfo">VkEventCreateInfo</a>, <a href="#VkExportFenceCreateInfo">VkExportFenceCreateInfo</a>, <a href="#VkExportFenceWin32HandleInfoKHR">VkExportFenceWin32HandleInfoKHR</a>, <a href="#VkExportMemoryAllocateInfo">VkExportMemoryAllocateInfo</a>, <a href="#VkExportMemoryAllocateInfoNV">VkExportMemoryAllocateInfoNV</a>, <a href="#VkExportMemoryWin32HandleInfoKHR">VkExportMemoryWin32HandleInfoKHR</a>, <a href="#VkExportMemoryWin32HandleInfoNV">VkExportMemoryWin32HandleInfoNV</a>, <a href="#VkExportSemaphoreCreateInfo">VkExportSemaphoreCreateInfo</a>, <a href="#VkExportSemaphoreWin32HandleInfoKHR">VkExportSemaphoreWin32HandleInfoKHR</a>, <a href="#VkExternalBufferProperties">VkExternalBufferProperties</a>, <a href="#VkExternalFenceProperties">VkExternalFenceProperties</a>, <a href="#VkExternalFormatANDROID">VkExternalFormatANDROID</a>, <a href="#VkExternalImageFormatProperties">VkExternalImageFormatProperties</a>, <a href="#VkExternalMemoryBufferCreateInfo">VkExternalMemoryBufferCreateInfo</a>, <a href="#VkExternalMemoryImageCreateInfo">VkExternalMemoryImageCreateInfo</a>, <a href="#VkExternalMemoryImageCreateInfoNV">VkExternalMemoryImageCreateInfoNV</a>, <a href="#VkExternalSemaphoreProperties">VkExternalSemaphoreProperties</a>, <a href="#VkFenceCreateInfo">VkFenceCreateInfo</a>, <a href="#VkFenceGetFdInfoKHR">VkFenceGetFdInfoKHR</a>, <a href="#VkFenceGetWin32HandleInfoKHR">VkFenceGetWin32HandleInfoKHR</a>, <a href="#VkFilterCubicImageViewImageFormatPropertiesEXT">VkFilterCubicImageViewImageFormatPropertiesEXT</a>, <a href="#VkFormatProperties2">VkFormatProperties2</a>, <a href="#VkFramebufferCreateInfo">VkFramebufferCreateInfo</a>, <a href="#VkGeometryAABBNV">VkGeometryAABBNV</a>, <a href="#VkGeometryNV">VkGeometryNV</a>, <a href="#VkGeometryTrianglesNV">VkGeometryTrianglesNV</a>, <a href="#VkGraphicsPipelineCreateInfo">VkGraphicsPipelineCreateInfo</a>, <a href="#VkHdrMetadataEXT">VkHdrMetadataEXT</a>, <a href="#VkIOSSurfaceCreateInfoMVK">VkIOSSurfaceCreateInfoMVK</a>, <a href="#VkImageCreateInfo">VkImageCreateInfo</a>, <a href="#VkImageDrmFormatModifierExplicitCreateInfoEXT">VkImageDrmFormatModifierExplicitCreateInfoEXT</a>, <a href="#VkImageDrmFormatModifierListCreateInfoEXT">VkImageDrmFormatModifierListCreateInfoEXT</a>, <a href="#VkImageDrmFormatModifierPropertiesEXT">VkImageDrmFormatModifierPropertiesEXT</a>, <a href="#VkImageFormatListCreateInfoKHR">VkImageFormatListCreateInfoKHR</a>, <a href="#VkImageFormatProperties2">VkImageFormatProperties2</a>, <a href="#VkImageMemoryBarrier">VkImageMemoryBarrier</a>, <a href="#VkImageMemoryRequirementsInfo2">VkImageMemoryRequirementsInfo2</a>, <a href="#VkImagePipeSurfaceCreateInfoFUCHSIA">VkImagePipeSurfaceCreateInfoFUCHSIA</a>, <a href="#VkImagePlaneMemoryRequirementsInfo">VkImagePlaneMemoryRequirementsInfo</a>, <a href="#VkImageSparseMemoryRequirementsInfo2">VkImageSparseMemoryRequirementsInfo2</a>, <a href="#VkImageStencilUsageCreateInfoEXT">VkImageStencilUsageCreateInfoEXT</a>, <a href="#VkImageSwapchainCreateInfoKHR">VkImageSwapchainCreateInfoKHR</a>, <a href="#VkImageViewASTCDecodeModeEXT">VkImageViewASTCDecodeModeEXT</a>, <a href="#VkImageViewCreateInfo">VkImageViewCreateInfo</a>, <a href="#VkImageViewHandleInfoNVX">VkImageViewHandleInfoNVX</a>, <a href="#VkImageViewUsageCreateInfo">VkImageViewUsageCreateInfo</a>, <a href="#VkImportAndroidHardwareBufferInfoANDROID">VkImportAndroidHardwareBufferInfoANDROID</a>, <a href="#VkImportFenceFdInfoKHR">VkImportFenceFdInfoKHR</a>, <a href="#VkImportFenceWin32HandleInfoKHR">VkImportFenceWin32HandleInfoKHR</a>, <a href="#VkImportMemoryFdInfoKHR">VkImportMemoryFdInfoKHR</a>, <a href="#VkImportMemoryHostPointerInfoEXT">VkImportMemoryHostPointerInfoEXT</a>, <a href="#VkImportMemoryWin32HandleInfoKHR">VkImportMemoryWin32HandleInfoKHR</a>, <a href="#VkImportMemoryWin32HandleInfoNV">VkImportMemoryWin32HandleInfoNV</a>, <a href="#VkImportSemaphoreFdInfoKHR">VkImportSemaphoreFdInfoKHR</a>, <a href="#VkImportSemaphoreWin32HandleInfoKHR">VkImportSemaphoreWin32HandleInfoKHR</a>, <a href="#VkIndirectCommandsLayoutCreateInfoNVX">VkIndirectCommandsLayoutCreateInfoNVX</a>, <a href="#VkInstanceCreateInfo">VkInstanceCreateInfo</a>, <a href="#VkMacOSSurfaceCreateInfoMVK">VkMacOSSurfaceCreateInfoMVK</a>, <a href="#VkMappedMemoryRange">VkMappedMemoryRange</a>, <a href="#VkMemoryAllocateFlagsInfo">VkMemoryAllocateFlagsInfo</a>, <a href="#VkMemoryAllocateInfo">VkMemoryAllocateInfo</a>, <a href="#VkMemoryBarrier">VkMemoryBarrier</a>, <a href="#VkMemoryDedicatedAllocateInfo">VkMemoryDedicatedAllocateInfo</a>, <a href="#VkMemoryDedicatedRequirements">VkMemoryDedicatedRequirements</a>, <a href="#VkMemoryFdPropertiesKHR">VkMemoryFdPropertiesKHR</a>, <a href="#VkMemoryGetAndroidHardwareBufferInfoANDROID">VkMemoryGetAndroidHardwareBufferInfoANDROID</a>, <a href="#VkMemoryGetFdInfoKHR">VkMemoryGetFdInfoKHR</a>, <a href="#VkMemoryGetWin32HandleInfoKHR">VkMemoryGetWin32HandleInfoKHR</a>, <a href="#VkMemoryHostPointerPropertiesEXT">VkMemoryHostPointerPropertiesEXT</a>, <a href="#VkMemoryPriorityAllocateInfoEXT">VkMemoryPriorityAllocateInfoEXT</a>, <a href="#VkMemoryRequirements2">VkMemoryRequirements2</a>, <a href="#VkMemoryWin32HandlePropertiesKHR">VkMemoryWin32HandlePropertiesKHR</a>, <a href="#VkMetalSurfaceCreateInfoEXT">VkMetalSurfaceCreateInfoEXT</a>, <a href="#VkMultisamplePropertiesEXT">VkMultisamplePropertiesEXT</a>, <a href="#VkObjectTableCreateInfoNVX">VkObjectTableCreateInfoNVX</a>, <a href="#VkPhysicalDevice16BitStorageFeatures">VkPhysicalDevice16BitStorageFeatures</a>, <a href="#VkPhysicalDevice8BitStorageFeaturesKHR">VkPhysicalDevice8BitStorageFeaturesKHR</a>, <a href="#VkPhysicalDeviceASTCDecodeFeaturesEXT">VkPhysicalDeviceASTCDecodeFeaturesEXT</a>, <a href="#VkPhysicalDeviceBlendOperationAdvancedFeaturesEXT">VkPhysicalDeviceBlendOperationAdvancedFeaturesEXT</a>, <a href="#VkPhysicalDeviceBlendOperationAdvancedPropertiesEXT">VkPhysicalDeviceBlendOperationAdvancedPropertiesEXT</a>, <a href="#VkPhysicalDeviceBufferDeviceAddressFeaturesEXT">VkPhysicalDeviceBufferDeviceAddressFeaturesEXT</a>, <a href="#VkPhysicalDeviceComputeShaderDerivativesFeaturesNV">VkPhysicalDeviceComputeShaderDerivativesFeaturesNV</a>, <a href="#VkPhysicalDeviceConditionalRenderingFeaturesEXT">VkPhysicalDeviceConditionalRenderingFeaturesEXT</a>, <a href="#VkPhysicalDeviceConservativeRasterizationPropertiesEXT">VkPhysicalDeviceConservativeRasterizationPropertiesEXT</a>, <a href="#VkPhysicalDeviceCooperativeMatrixFeaturesNV">VkPhysicalDeviceCooperativeMatrixFeaturesNV</a>, <a href="#VkPhysicalDeviceCooperativeMatrixPropertiesNV">VkPhysicalDeviceCooperativeMatrixPropertiesNV</a>, <a href="#VkPhysicalDeviceCornerSampledImageFeaturesNV">VkPhysicalDeviceCornerSampledImageFeaturesNV</a>, <a href="#VkPhysicalDeviceDedicatedAllocationImageAliasingFeaturesNV">VkPhysicalDeviceDedicatedAllocationImageAliasingFeaturesNV</a>, <a href="#VkPhysicalDeviceDepthClipEnableFeaturesEXT">VkPhysicalDeviceDepthClipEnableFeaturesEXT</a>, <a href="#VkPhysicalDeviceDepthStencilResolvePropertiesKHR">VkPhysicalDeviceDepthStencilResolvePropertiesKHR</a>, <a href="#VkPhysicalDeviceDescriptorIndexingFeaturesEXT">VkPhysicalDeviceDescriptorIndexingFeaturesEXT</a>, <a href="#VkPhysicalDeviceDescriptorIndexingPropertiesEXT">VkPhysicalDeviceDescriptorIndexingPropertiesEXT</a>, <a href="#VkPhysicalDeviceDiscardRectanglePropertiesEXT">VkPhysicalDeviceDiscardRectanglePropertiesEXT</a>, <a href="#VkPhysicalDeviceDriverPropertiesKHR">VkPhysicalDeviceDriverPropertiesKHR</a>, <a href="#VkPhysicalDeviceExclusiveScissorFeaturesNV">VkPhysicalDeviceExclusiveScissorFeaturesNV</a>, <a href="#VkPhysicalDeviceExternalBufferInfo">VkPhysicalDeviceExternalBufferInfo</a>, <a href="#VkPhysicalDeviceExternalFenceInfo">VkPhysicalDeviceExternalFenceInfo</a>, <a href="#VkPhysicalDeviceExternalImageFormatInfo">VkPhysicalDeviceExternalImageFormatInfo</a>, <a href="#VkPhysicalDeviceExternalMemoryHostPropertiesEXT">VkPhysicalDeviceExternalMemoryHostPropertiesEXT</a>, <a href="#VkPhysicalDeviceExternalSemaphoreInfo">VkPhysicalDeviceExternalSemaphoreInfo</a>, <a href="#VkPhysicalDeviceFeatures2">VkPhysicalDeviceFeatures2</a>, <a href="#VkPhysicalDeviceFloat16Int8FeaturesKHR">VkPhysicalDeviceFloat16Int8FeaturesKHR</a>, <a href="#VkPhysicalDeviceFloatControlsPropertiesKHR">VkPhysicalDeviceFloatControlsPropertiesKHR</a>, <a href="#VkPhysicalDeviceFragmentDensityMapFeaturesEXT">VkPhysicalDeviceFragmentDensityMapFeaturesEXT</a>, <a href="#VkPhysicalDeviceFragmentDensityMapPropertiesEXT">VkPhysicalDeviceFragmentDensityMapPropertiesEXT</a>, <a href="#VkPhysicalDeviceFragmentShaderBarycentricFeaturesNV">VkPhysicalDeviceFragmentShaderBarycentricFeaturesNV</a>, <a href="#VkPhysicalDeviceGroupProperties">VkPhysicalDeviceGroupProperties</a>, <a href="#VkPhysicalDeviceHostQueryResetFeaturesEXT">VkPhysicalDeviceHostQueryResetFeaturesEXT</a>, <a href="#VkPhysicalDeviceIDProperties">VkPhysicalDeviceIDProperties</a>, <a href="#VkPhysicalDeviceImageDrmFormatModifierInfoEXT">VkPhysicalDeviceImageDrmFormatModifierInfoEXT</a>, <a href="#VkPhysicalDeviceImageFormatInfo2">VkPhysicalDeviceImageFormatInfo2</a>, <a href="#VkPhysicalDeviceImageViewImageFormatInfoEXT">VkPhysicalDeviceImageViewImageFormatInfoEXT</a>, <a href="#VkPhysicalDeviceInlineUniformBlockFeaturesEXT">VkPhysicalDeviceInlineUniformBlockFeaturesEXT</a>, <a href="#VkPhysicalDeviceInlineUniformBlockPropertiesEXT">VkPhysicalDeviceInlineUniformBlockPropertiesEXT</a>, <a href="#VkPhysicalDeviceMaintenance3Properties">VkPhysicalDeviceMaintenance3Properties</a>, <a href="#VkPhysicalDeviceMemoryBudgetPropertiesEXT">VkPhysicalDeviceMemoryBudgetPropertiesEXT</a>, <a href="#VkPhysicalDeviceMemoryPriorityFeaturesEXT">VkPhysicalDeviceMemoryPriorityFeaturesEXT</a>, <a href="#VkPhysicalDeviceMemoryProperties2">VkPhysicalDeviceMemoryProperties2</a>, <a href="#VkPhysicalDeviceMeshShaderFeaturesNV">VkPhysicalDeviceMeshShaderFeaturesNV</a>, <a href="#VkPhysicalDeviceMeshShaderPropertiesNV">VkPhysicalDeviceMeshShaderPropertiesNV</a>, <a href="#VkPhysicalDeviceMultiviewFeatures">VkPhysicalDeviceMultiviewFeatures</a>, <a href="#VkPhysicalDeviceMultiviewPerViewAttributesPropertiesNVX">VkPhysicalDeviceMultiviewPerViewAttributesPropertiesNVX</a>, <a href="#VkPhysicalDeviceMultiviewProperties">VkPhysicalDeviceMultiviewProperties</a>, <a href="#VkPhysicalDevicePCIBusInfoPropertiesEXT">VkPhysicalDevicePCIBusInfoPropertiesEXT</a>, <a href="#VkPhysicalDevicePointClippingProperties">VkPhysicalDevicePointClippingProperties</a>, <a href="#VkPhysicalDeviceProperties2">VkPhysicalDeviceProperties2</a>, <a href="#VkPhysicalDeviceProtectedMemoryFeatures">VkPhysicalDeviceProtectedMemoryFeatures</a>, <a href="#VkPhysicalDeviceProtectedMemoryProperties">VkPhysicalDeviceProtectedMemoryProperties</a>, <a href="#VkPhysicalDevicePushDescriptorPropertiesKHR">VkPhysicalDevicePushDescriptorPropertiesKHR</a>, <a href="#VkPhysicalDeviceRayTracingPropertiesNV">VkPhysicalDeviceRayTracingPropertiesNV</a>, <a href="#VkPhysicalDeviceRepresentativeFragmentTestFeaturesNV">VkPhysicalDeviceRepresentativeFragmentTestFeaturesNV</a>, <a href="#VkPhysicalDeviceSampleLocationsPropertiesEXT">VkPhysicalDeviceSampleLocationsPropertiesEXT</a>, <a href="#VkPhysicalDeviceSamplerFilterMinmaxPropertiesEXT">VkPhysicalDeviceSamplerFilterMinmaxPropertiesEXT</a>, <a href="#VkPhysicalDeviceSamplerYcbcrConversionFeatures">VkPhysicalDeviceSamplerYcbcrConversionFeatures</a>, <a href="#VkPhysicalDeviceScalarBlockLayoutFeaturesEXT">VkPhysicalDeviceScalarBlockLayoutFeaturesEXT</a>, <a href="#VkPhysicalDeviceShaderAtomicInt64FeaturesKHR">VkPhysicalDeviceShaderAtomicInt64FeaturesKHR</a>, <a href="#VkPhysicalDeviceShaderCorePropertiesAMD">VkPhysicalDeviceShaderCorePropertiesAMD</a>, <a href="#VkPhysicalDeviceShaderDrawParametersFeatures">VkPhysicalDeviceShaderDrawParametersFeatures</a>, <a href="#VkPhysicalDeviceShaderImageFootprintFeaturesNV">VkPhysicalDeviceShaderImageFootprintFeaturesNV</a>, <a href="#VkPhysicalDeviceShadingRateImageFeaturesNV">VkPhysicalDeviceShadingRateImageFeaturesNV</a>, <a href="#VkPhysicalDeviceShadingRateImagePropertiesNV">VkPhysicalDeviceShadingRateImagePropertiesNV</a>, <a href="#VkPhysicalDeviceSparseImageFormatInfo2">VkPhysicalDeviceSparseImageFormatInfo2</a>, <a href="#VkPhysicalDeviceSubgroupProperties">VkPhysicalDeviceSubgroupProperties</a>, <a href="#VkPhysicalDeviceSurfaceInfo2KHR">VkPhysicalDeviceSurfaceInfo2KHR</a>, <a href="#VkPhysicalDeviceTransformFeedbackFeaturesEXT">VkPhysicalDeviceTransformFeedbackFeaturesEXT</a>, <a href="#VkPhysicalDeviceTransformFeedbackPropertiesEXT">VkPhysicalDeviceTransformFeedbackPropertiesEXT</a>, <a href="#VkPhysicalDeviceVariablePointersFeatures">VkPhysicalDeviceVariablePointersFeatures</a>, <a href="#VkPhysicalDeviceVertexAttributeDivisorFeaturesEXT">VkPhysicalDeviceVertexAttributeDivisorFeaturesEXT</a>, <a href="#VkPhysicalDeviceVertexAttributeDivisorPropertiesEXT">VkPhysicalDeviceVertexAttributeDivisorPropertiesEXT</a>, <a href="#VkPhysicalDeviceVulkanMemoryModelFeaturesKHR">VkPhysicalDeviceVulkanMemoryModelFeaturesKHR</a>, <a href="#VkPhysicalDeviceYcbcrImageArraysFeaturesEXT">VkPhysicalDeviceYcbcrImageArraysFeaturesEXT</a>, <a href="#VkPipelineCacheCreateInfo">VkPipelineCacheCreateInfo</a>, <a href="#VkPipelineColorBlendAdvancedStateCreateInfoEXT">VkPipelineColorBlendAdvancedStateCreateInfoEXT</a>, <a href="#VkPipelineColorBlendStateCreateInfo">VkPipelineColorBlendStateCreateInfo</a>, <a href="#VkPipelineCoverageModulationStateCreateInfoNV">VkPipelineCoverageModulationStateCreateInfoNV</a>, <a href="#VkPipelineCoverageToColorStateCreateInfoNV">VkPipelineCoverageToColorStateCreateInfoNV</a>, <a href="#VkPipelineCreationFeedbackCreateInfoEXT">VkPipelineCreationFeedbackCreateInfoEXT</a>, <a href="#VkPipelineDepthStencilStateCreateInfo">VkPipelineDepthStencilStateCreateInfo</a>, <a href="#VkPipelineDiscardRectangleStateCreateInfoEXT">VkPipelineDiscardRectangleStateCreateInfoEXT</a>, <a href="#VkPipelineDynamicStateCreateInfo">VkPipelineDynamicStateCreateInfo</a>, <a href="#VkPipelineInputAssemblyStateCreateInfo">VkPipelineInputAssemblyStateCreateInfo</a>, <a href="#VkPipelineLayoutCreateInfo">VkPipelineLayoutCreateInfo</a>, <a href="#VkPipelineMultisampleStateCreateInfo">VkPipelineMultisampleStateCreateInfo</a>, <a href="#VkPipelineRasterizationConservativeStateCreateInfoEXT">VkPipelineRasterizationConservativeStateCreateInfoEXT</a>, <a href="#VkPipelineRasterizationDepthClipStateCreateInfoEXT">VkPipelineRasterizationDepthClipStateCreateInfoEXT</a>, <a href="#VkPipelineRasterizationStateCreateInfo">VkPipelineRasterizationStateCreateInfo</a>, <a href="#VkPipelineRasterizationStateRasterizationOrderAMD">VkPipelineRasterizationStateRasterizationOrderAMD</a>, <a href="#VkPipelineRasterizationStateStreamCreateInfoEXT">VkPipelineRasterizationStateStreamCreateInfoEXT</a>, <a href="#VkPipelineRepresentativeFragmentTestStateCreateInfoNV">VkPipelineRepresentativeFragmentTestStateCreateInfoNV</a>, <a href="#VkPipelineSampleLocationsStateCreateInfoEXT">VkPipelineSampleLocationsStateCreateInfoEXT</a>, <a href="#VkPipelineShaderStageCreateInfo">VkPipelineShaderStageCreateInfo</a>, <a href="#VkPipelineTessellationDomainOriginStateCreateInfo">VkPipelineTessellationDomainOriginStateCreateInfo</a>, <a href="#VkPipelineTessellationStateCreateInfo">VkPipelineTessellationStateCreateInfo</a>, <a href="#VkPipelineVertexInputDivisorStateCreateInfoEXT">VkPipelineVertexInputDivisorStateCreateInfoEXT</a>, <a href="#VkPipelineVertexInputStateCreateInfo">VkPipelineVertexInputStateCreateInfo</a>, <a href="#VkPipelineViewportCoarseSampleOrderStateCreateInfoNV">VkPipelineViewportCoarseSampleOrderStateCreateInfoNV</a>, <a href="#VkPipelineViewportExclusiveScissorStateCreateInfoNV">VkPipelineViewportExclusiveScissorStateCreateInfoNV</a>, <a href="#VkPipelineViewportShadingRateImageStateCreateInfoNV">VkPipelineViewportShadingRateImageStateCreateInfoNV</a>, <a href="#VkPipelineViewportStateCreateInfo">VkPipelineViewportStateCreateInfo</a>, <a href="#VkPipelineViewportSwizzleStateCreateInfoNV">VkPipelineViewportSwizzleStateCreateInfoNV</a>, <a href="#VkPipelineViewportWScalingStateCreateInfoNV">VkPipelineViewportWScalingStateCreateInfoNV</a>, <a href="#VkPresentFrameTokenGGP">VkPresentFrameTokenGGP</a>, <a href="#VkPresentInfoKHR">VkPresentInfoKHR</a>, <a href="#VkPresentRegionsKHR">VkPresentRegionsKHR</a>, <a href="#VkPresentTimesInfoGOOGLE">VkPresentTimesInfoGOOGLE</a>, <a href="#VkProtectedSubmitInfo">VkProtectedSubmitInfo</a>, <a href="#VkQueryPoolCreateInfo">VkQueryPoolCreateInfo</a>, <a href="#VkQueueFamilyCheckpointPropertiesNV">VkQueueFamilyCheckpointPropertiesNV</a>, <a href="#VkQueueFamilyProperties2">VkQueueFamilyProperties2</a>, <a href="#VkRayTracingPipelineCreateInfoNV">VkRayTracingPipelineCreateInfoNV</a>, <a href="#VkRayTracingShaderGroupCreateInfoNV">VkRayTracingShaderGroupCreateInfoNV</a>, <a href="#VkRenderPassBeginInfo">VkRenderPassBeginInfo</a>, <a href="#VkRenderPassCreateInfo">VkRenderPassCreateInfo</a>, <a href="#VkRenderPassCreateInfo2KHR">VkRenderPassCreateInfo2KHR</a>, <a href="#VkRenderPassFragmentDensityMapCreateInfoEXT">VkRenderPassFragmentDensityMapCreateInfoEXT</a>, <a href="#VkRenderPassInputAttachmentAspectCreateInfo">VkRenderPassInputAttachmentAspectCreateInfo</a>, <a href="#VkRenderPassMultiviewCreateInfo">VkRenderPassMultiviewCreateInfo</a>, <a href="#VkRenderPassSampleLocationsBeginInfoEXT">VkRenderPassSampleLocationsBeginInfoEXT</a>, <a href="#VkSampleLocationsInfoEXT">VkSampleLocationsInfoEXT</a>, <a href="#VkSamplerCreateInfo">VkSamplerCreateInfo</a>, <a href="#VkSamplerReductionModeCreateInfoEXT">VkSamplerReductionModeCreateInfoEXT</a>, <a href="#VkSamplerYcbcrConversionCreateInfo">VkSamplerYcbcrConversionCreateInfo</a>, <a href="#VkSamplerYcbcrConversionImageFormatProperties">VkSamplerYcbcrConversionImageFormatProperties</a>, <a href="#VkSamplerYcbcrConversionInfo">VkSamplerYcbcrConversionInfo</a>, <a href="#VkSemaphoreCreateInfo">VkSemaphoreCreateInfo</a>, <a href="#VkSemaphoreGetFdInfoKHR">VkSemaphoreGetFdInfoKHR</a>, <a href="#VkSemaphoreGetWin32HandleInfoKHR">VkSemaphoreGetWin32HandleInfoKHR</a>, <a href="#VkShaderModuleCreateInfo">VkShaderModuleCreateInfo</a>, <a href="#VkShaderModuleValidationCacheCreateInfoEXT">VkShaderModuleValidationCacheCreateInfoEXT</a>, <a href="#VkSharedPresentSurfaceCapabilitiesKHR">VkSharedPresentSurfaceCapabilitiesKHR</a>, <a href="#VkSparseImageFormatProperties2">VkSparseImageFormatProperties2</a>, <a href="#VkSparseImageMemoryRequirements2">VkSparseImageMemoryRequirements2</a>, <a href="#VkStreamDescriptorSurfaceCreateInfoGGP">VkStreamDescriptorSurfaceCreateInfoGGP</a>, <a href="#VkSubmitInfo">VkSubmitInfo</a>, <a href="#VkSubpassBeginInfoKHR">VkSubpassBeginInfoKHR</a>, <a href="#VkSubpassDependency2KHR">VkSubpassDependency2KHR</a>, <a href="#VkSubpassDescription2KHR">VkSubpassDescription2KHR</a>, <a href="#VkSubpassDescriptionDepthStencilResolveKHR">VkSubpassDescriptionDepthStencilResolveKHR</a>, <a href="#VkSubpassEndInfoKHR">VkSubpassEndInfoKHR</a>, <a href="#VkSurfaceCapabilities2EXT">VkSurfaceCapabilities2EXT</a>, <a href="#VkSurfaceCapabilities2KHR">VkSurfaceCapabilities2KHR</a>, <a href="#VkSurfaceCapabilitiesFullScreenExclusiveEXT">VkSurfaceCapabilitiesFullScreenExclusiveEXT</a>, <a href="#VkSurfaceFormat2KHR">VkSurfaceFormat2KHR</a>, <a href="#VkSurfaceFullScreenExclusiveInfoEXT">VkSurfaceFullScreenExclusiveInfoEXT</a>, <a href="#VkSurfaceFullScreenExclusiveWin32InfoEXT">VkSurfaceFullScreenExclusiveWin32InfoEXT</a>, <a href="#VkSurfaceProtectedCapabilitiesKHR">VkSurfaceProtectedCapabilitiesKHR</a>, <a href="#VkSwapchainCounterCreateInfoEXT">VkSwapchainCounterCreateInfoEXT</a>, <a href="#VkSwapchainCreateInfoKHR">VkSwapchainCreateInfoKHR</a>, <a href="#VkSwapchainDisplayNativeHdrCreateInfoAMD">VkSwapchainDisplayNativeHdrCreateInfoAMD</a>, <a href="#VkTextureLODGatherFormatPropertiesAMD">VkTextureLODGatherFormatPropertiesAMD</a>, <a href="#VkValidationCacheCreateInfoEXT">VkValidationCacheCreateInfoEXT</a>, <a href="#VkValidationFeaturesEXT">VkValidationFeaturesEXT</a>, <a href="#VkValidationFlagsEXT">VkValidationFlagsEXT</a>, <a href="#VkViSurfaceCreateInfoNN">VkViSurfaceCreateInfoNN</a>, <a href="#VkWaylandSurfaceCreateInfoKHR">VkWaylandSurfaceCreateInfoKHR</a>, <a href="#VkWin32KeyedMutexAcquireReleaseInfoKHR">VkWin32KeyedMutexAcquireReleaseInfoKHR</a>, <a href="#VkWin32KeyedMutexAcquireReleaseInfoNV">VkWin32KeyedMutexAcquireReleaseInfoNV</a>, <a href="#VkWin32SurfaceCreateInfoKHR">VkWin32SurfaceCreateInfoKHR</a>, <a href="#VkWriteDescriptorSet">VkWriteDescriptorSet</a>, <a href="#VkWriteDescriptorSetAccelerationStructureNV">VkWriteDescriptorSetAccelerationStructureNV</a>, <a href="#VkWriteDescriptorSetInlineUniformBlockEXT">VkWriteDescriptorSetInlineUniformBlockEXT</a>, <a href="#VkXcbSurfaceCreateInfoKHR">VkXcbSurfaceCreateInfoKHR</a>, <a href="#VkXlibSurfaceCreateInfoKHR">VkXlibSurfaceCreateInfoKHR</a></p>
</div>
</div>
<div class="sect3">
<h4 id="_document_notes_924">Document Notes</h4>
<div class="paragraph">
<p>For more information, see the Vulkan Specification at URL</p>
</div>
<div class="paragraph">
<p><a href="https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VkStructureType" class="bare">https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VkStructureType</a></p>
</div>
<div class="paragraph">
<p>This page is extracted from the Vulkan Specification.
Fixes and changes should be made to the Specification, not directly.</p>
</div>
<div style="page-break-after: always;"></div>
</div>
</div>
<div class="sect2">
<h3 id="_vksubgroupfeatureflagbits3">VkSubgroupFeatureFlagBits(3)</h3>
<div class="sect3">
<h4 id="_name_925">Name</h4>
<div class="paragraph">
<p>VkSubgroupFeatureFlagBits - Enum describing what subgroup operations are supported</p>
</div>
</div>
<div class="sect3">
<h4 id="_c_specification_925">C Specification</h4>
<div class="paragraph">
<p>Bits which <strong class="purple">can</strong> be set in
<a href="#VkPhysicalDeviceSubgroupProperties">VkPhysicalDeviceSubgroupProperties</a>::<code>supportedOperations</code> to
specify supported subgroup operations are:</p>
</div>
<div id="VkSubgroupFeatureFlagBits" class="listingblock">
<div class="content">
<pre class="highlight"><code class="language-c++" data-lang="c++">typedef enum VkSubgroupFeatureFlagBits {
    VK_SUBGROUP_FEATURE_BASIC_BIT = 0x00000001,
    VK_SUBGROUP_FEATURE_VOTE_BIT = 0x00000002,
    VK_SUBGROUP_FEATURE_ARITHMETIC_BIT = 0x00000004,
    VK_SUBGROUP_FEATURE_BALLOT_BIT = 0x00000008,
    VK_SUBGROUP_FEATURE_SHUFFLE_BIT = 0x00000010,
    VK_SUBGROUP_FEATURE_SHUFFLE_RELATIVE_BIT = 0x00000020,
    VK_SUBGROUP_FEATURE_CLUSTERED_BIT = 0x00000040,
    VK_SUBGROUP_FEATURE_QUAD_BIT = 0x00000080,
    VK_SUBGROUP_FEATURE_PARTITIONED_BIT_NV = 0x00000100,
    VK_SUBGROUP_FEATURE_FLAG_BITS_MAX_ENUM = 0x7FFFFFFF
} VkSubgroupFeatureFlagBits;</code></pre>
</div>
</div>
</div>
<div class="sect3">
<h4 id="_description_925">Description</h4>
<div class="ulist">
<ul>
<li>
<p><a id="features-subgroup-basic"></a> <code>VK_SUBGROUP_FEATURE_BASIC_BIT</code>
specifies the device will accept SPIR-V shader modules that contain the
<code>GroupNonUniform</code> capability.</p>
</li>
<li>
<p><a id="features-subgroup-vote"></a> <code>VK_SUBGROUP_FEATURE_VOTE_BIT</code> specifies
the device will accept SPIR-V shader modules that contain the
<code>GroupNonUniformVote</code> capability.</p>
</li>
<li>
<p><a id="features-subgroup-arithmetic"></a>
<code>VK_SUBGROUP_FEATURE_ARITHMETIC_BIT</code> specifies the device will
accept SPIR-V shader modules that contain the
<code>GroupNonUniformArithmetic</code> capability.</p>
</li>
<li>
<p><a id="features-subgroup-ballot"></a> <code>VK_SUBGROUP_FEATURE_BALLOT_BIT</code>
specifies the device will accept SPIR-V shader modules that contain the
<code>GroupNonUniformBallot</code> capability.</p>
</li>
<li>
<p><a id="features-subgroup-shuffle"></a> <code>VK_SUBGROUP_FEATURE_SHUFFLE_BIT</code>
specifies the device will accept SPIR-V shader modules that contain the
<code>GroupNonUniformShuffle</code> capability.</p>
</li>
<li>
<p><a id="features-subgroup-shuffle-relative"></a>
<code>VK_SUBGROUP_FEATURE_SHUFFLE_RELATIVE_BIT</code> specifies the device will
accept SPIR-V shader modules that contain the
<code>GroupNonUniformShuffleRelative</code> capability.</p>
</li>
<li>
<p><a id="features-subgroup-clustered"></a> <code>VK_SUBGROUP_FEATURE_CLUSTERED_BIT</code>
specifies the device will accept SPIR-V shader modules that contain the
<code>GroupNonUniformClustered</code> capability.</p>
</li>
<li>
<p><a id="features-subgroup-quad"></a> <code>VK_SUBGROUP_FEATURE_QUAD_BIT</code> specifies
the device will accept SPIR-V shader modules that contain the
<code>GroupNonUniformQuad</code> capability.</p>
</li>
<li>
<p><a id="features-subgroup-partitioned"></a>
<code>VK_SUBGROUP_FEATURE_PARTITIONED_BIT_NV</code> specifies the device will
accept SPIR-V shader modules that contain the
<code>GroupNonUniformPartitionedNV</code> capability.</p>
</li>
</ul>
</div>
</div>
<div class="sect3">
<h4 id="_see_also_925">See Also</h4>
<div class="paragraph">
<p><a href="#VkSubgroupFeatureFlags">VkSubgroupFeatureFlags</a></p>
</div>
</div>
<div class="sect3">
<h4 id="_document_notes_925">Document Notes</h4>
<div class="paragraph">
<p>For more information, see the Vulkan Specification at URL</p>
</div>
<div class="paragraph">
<p><a href="https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VkSubgroupFeatureFlagBits" class="bare">https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VkSubgroupFeatureFlagBits</a></p>
</div>
<div class="paragraph">
<p>This page is extracted from the Vulkan Specification.
Fixes and changes should be made to the Specification, not directly.</p>
</div>
<div style="page-break-after: always;"></div>
</div>
</div>
<div class="sect2">
<h3 id="_vksubpasscontents3">VkSubpassContents(3)</h3>
<div class="sect3">
<h4 id="_name_926">Name</h4>
<div class="paragraph">
<p>VkSubpassContents - Specify how commands in the first subpass of a render pass are provided</p>
</div>
</div>
<div class="sect3">
<h4 id="_c_specification_926">C Specification</h4>
<div class="paragraph">
<p>Possible values of <a href="#vkCmdBeginRenderPass">vkCmdBeginRenderPass</a>::<code>contents</code>, specifying
how the commands in the first subpass will be provided, are:</p>
</div>
<div id="VkSubpassContents" class="listingblock">
<div class="content">
<pre class="highlight"><code class="language-c++" data-lang="c++">typedef enum VkSubpassContents {
    VK_SUBPASS_CONTENTS_INLINE = 0,
    VK_SUBPASS_CONTENTS_SECONDARY_COMMAND_BUFFERS = 1,
    VK_SUBPASS_CONTENTS_MAX_ENUM = 0x7FFFFFFF
} VkSubpassContents;</code></pre>
</div>
</div>
</div>
<div class="sect3">
<h4 id="_description_926">Description</h4>
<div class="ulist">
<ul>
<li>
<p><code>VK_SUBPASS_CONTENTS_INLINE</code> specifies that the contents of the
subpass will be recorded inline in the primary command buffer, and
secondary command buffers <strong class="purple">must</strong> not be executed within the subpass.</p>
</li>
<li>
<p><code>VK_SUBPASS_CONTENTS_SECONDARY_COMMAND_BUFFERS</code> specifies that the
contents are recorded in secondary command buffers that will be called
from the primary command buffer, and <a href="#vkCmdExecuteCommands">vkCmdExecuteCommands</a> is the
only valid command on the command buffer until <a href="#vkCmdNextSubpass">vkCmdNextSubpass</a> or
<a href="#vkCmdEndRenderPass">vkCmdEndRenderPass</a>.</p>
</li>
</ul>
</div>
</div>
<div class="sect3">
<h4 id="_see_also_926">See Also</h4>
<div class="paragraph">
<p><a href="#VkSubpassBeginInfoKHR">VkSubpassBeginInfoKHR</a>, <a href="#vkCmdBeginRenderPass">vkCmdBeginRenderPass</a>, <a href="#vkCmdNextSubpass">vkCmdNextSubpass</a></p>
</div>
</div>
<div class="sect3">
<h4 id="_document_notes_926">Document Notes</h4>
<div class="paragraph">
<p>For more information, see the Vulkan Specification at URL</p>
</div>
<div class="paragraph">
<p><a href="https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VkSubpassContents" class="bare">https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VkSubpassContents</a></p>
</div>
<div class="paragraph">
<p>This page is extracted from the Vulkan Specification.
Fixes and changes should be made to the Specification, not directly.</p>
</div>
<div style="page-break-after: always;"></div>
</div>
</div>
<div class="sect2">
<h3 id="_vksubpassdescriptionflagbits3">VkSubpassDescriptionFlagBits(3)</h3>
<div class="sect3">
<h4 id="_name_927">Name</h4>
<div class="paragraph">
<p>VkSubpassDescriptionFlagBits - Bitmask specifying usage of a subpass</p>
</div>
</div>
<div class="sect3">
<h4 id="_c_specification_927">C Specification</h4>
<div class="paragraph">
<p>Bits which <strong class="purple">can</strong> be set in <a href="#VkSubpassDescription">VkSubpassDescription</a>::<code>flags</code>,
specifying usage of the subpass, are:</p>
</div>
<div id="VkSubpassDescriptionFlagBits" class="listingblock">
<div class="content">
<pre class="highlight"><code class="language-c++" data-lang="c++">typedef enum VkSubpassDescriptionFlagBits {
    VK_SUBPASS_DESCRIPTION_PER_VIEW_ATTRIBUTES_BIT_NVX = 0x00000001,
    VK_SUBPASS_DESCRIPTION_PER_VIEW_POSITION_X_ONLY_BIT_NVX = 0x00000002,
    VK_SUBPASS_DESCRIPTION_FLAG_BITS_MAX_ENUM = 0x7FFFFFFF
} VkSubpassDescriptionFlagBits;</code></pre>
</div>
</div>
</div>
<div class="sect3">
<h4 id="_description_927">Description</h4>
<div class="ulist">
<ul>
<li>
<p><code>VK_SUBPASS_DESCRIPTION_PER_VIEW_ATTRIBUTES_BIT_NVX</code> specifies that
shaders compiled for this subpass write the attributes for all views in
a single invocation of each vertex processing stage.
All pipelines compiled against a subpass that includes this bit <strong class="purple">must</strong>
write per-view attributes to the <code>*PerViewNV[]</code> shader outputs, in
addition to the non-per-view (e.g. <code>Position</code>) outputs.</p>
</li>
<li>
<p><code>VK_SUBPASS_DESCRIPTION_PER_VIEW_POSITION_X_ONLY_BIT_NVX</code> specifies
that shaders compiled for this subpass use per-view positions which only
differ in value in the x component.
Per-view viewport mask <strong class="purple">can</strong> also be used.</p>
</li>
</ul>
</div>
</div>
<div class="sect3">
<h4 id="_see_also_927">See Also</h4>
<div class="paragraph">
<p><a href="#VkSubpassDescriptionFlags">VkSubpassDescriptionFlags</a></p>
</div>
</div>
<div class="sect3">
<h4 id="_document_notes_927">Document Notes</h4>
<div class="paragraph">
<p>For more information, see the Vulkan Specification at URL</p>
</div>
<div class="paragraph">
<p><a href="https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VkSubpassDescriptionFlagBits" class="bare">https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VkSubpassDescriptionFlagBits</a></p>
</div>
<div class="paragraph">
<p>This page is extracted from the Vulkan Specification.
Fixes and changes should be made to the Specification, not directly.</p>
</div>
<div style="page-break-after: always;"></div>
</div>
</div>
<div class="sect2">
<h3 id="_vksurfacecounterflagbitsext3">VkSurfaceCounterFlagBitsEXT(3)</h3>
<div class="sect3">
<h4 id="_name_928">Name</h4>
<div class="paragraph">
<p>VkSurfaceCounterFlagBitsEXT - Surface-relative counter types</p>
</div>
</div>
<div class="sect3">
<h4 id="_c_specification_928">C Specification</h4>
<div class="paragraph">
<p>Bits which <strong class="purple">can</strong> be set in
<a href="#VkSurfaceCapabilities2EXT">VkSurfaceCapabilities2EXT</a>::<code>supportedSurfaceCounters</code>, indicating
supported surface counter types, are:</p>
</div>
<div id="VkSurfaceCounterFlagBitsEXT" class="listingblock">
<div class="content">
<pre class="highlight"><code class="language-c++" data-lang="c++">typedef enum VkSurfaceCounterFlagBitsEXT {
    VK_SURFACE_COUNTER_VBLANK_EXT = 0x00000001,
    VK_SURFACE_COUNTER_FLAG_BITS_MAX_ENUM_EXT = 0x7FFFFFFF
} VkSurfaceCounterFlagBitsEXT;</code></pre>
</div>
</div>
</div>
<div class="sect3">
<h4 id="_description_928">Description</h4>
<div class="ulist">
<ul>
<li>
<p><code>VK_SURFACE_COUNTER_VBLANK_EXT</code> specifies a counter incrementing
once every time a vertical blanking period occurs on the display
associated with the surface.</p>
</li>
</ul>
</div>
</div>
<div class="sect3">
<h4 id="_see_also_928">See Also</h4>
<div class="paragraph">
<p><a href="#VkSurfaceCounterFlagsEXT">VkSurfaceCounterFlagsEXT</a>, <a href="#vkGetSwapchainCounterEXT">vkGetSwapchainCounterEXT</a></p>
</div>
</div>
<div class="sect3">
<h4 id="_document_notes_928">Document Notes</h4>
<div class="paragraph">
<p>For more information, see the Vulkan Specification at URL</p>
</div>
<div class="paragraph">
<p><a href="https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VkSurfaceCounterFlagBitsEXT" class="bare">https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VkSurfaceCounterFlagBitsEXT</a></p>
</div>
<div class="paragraph">
<p>This page is extracted from the Vulkan Specification.
Fixes and changes should be made to the Specification, not directly.</p>
</div>
<div style="page-break-after: always;"></div>
</div>
</div>
<div class="sect2">
<h3 id="_vksurfacetransformflagbitskhr3">VkSurfaceTransformFlagBitsKHR(3)</h3>
<div class="sect3">
<h4 id="_name_929">Name</h4>
<div class="paragraph">
<p>VkSurfaceTransformFlagBitsKHR - presentation transforms supported on a device</p>
</div>
</div>
<div class="sect3">
<h4 id="_c_specification_929">C Specification</h4>
<div class="paragraph">
<p>Bits which <strong class="purple">may</strong> be set in
<a href="#VkSurfaceCapabilitiesKHR">VkSurfaceCapabilitiesKHR</a>::<code>supportedTransforms</code> indicating the
presentation transforms supported for the surface on the specified device,
and possible values of
<a href="#VkSurfaceCapabilitiesKHR">VkSurfaceCapabilitiesKHR</a>::<code>currentTransform</code> is indicating the
surface&#8217;s current transform relative to the presentation engine&#8217;s natural
orientation, are:</p>
</div>
<div id="VkSurfaceTransformFlagBitsKHR" class="listingblock">
<div class="content">
<pre class="highlight"><code class="language-c++" data-lang="c++">typedef enum VkSurfaceTransformFlagBitsKHR {
    VK_SURFACE_TRANSFORM_IDENTITY_BIT_KHR = 0x00000001,
    VK_SURFACE_TRANSFORM_ROTATE_90_BIT_KHR = 0x00000002,
    VK_SURFACE_TRANSFORM_ROTATE_180_BIT_KHR = 0x00000004,
    VK_SURFACE_TRANSFORM_ROTATE_270_BIT_KHR = 0x00000008,
    VK_SURFACE_TRANSFORM_HORIZONTAL_MIRROR_BIT_KHR = 0x00000010,
    VK_SURFACE_TRANSFORM_HORIZONTAL_MIRROR_ROTATE_90_BIT_KHR = 0x00000020,
    VK_SURFACE_TRANSFORM_HORIZONTAL_MIRROR_ROTATE_180_BIT_KHR = 0x00000040,
    VK_SURFACE_TRANSFORM_HORIZONTAL_MIRROR_ROTATE_270_BIT_KHR = 0x00000080,
    VK_SURFACE_TRANSFORM_INHERIT_BIT_KHR = 0x00000100,
    VK_SURFACE_TRANSFORM_FLAG_BITS_MAX_ENUM_KHR = 0x7FFFFFFF
} VkSurfaceTransformFlagBitsKHR;</code></pre>
</div>
</div>
</div>
<div class="sect3">
<h4 id="_description_929">Description</h4>
<div class="ulist">
<ul>
<li>
<p><code>VK_SURFACE_TRANSFORM_IDENTITY_BIT_KHR</code> specifies that image content
is presented without being transformed.</p>
</li>
<li>
<p><code>VK_SURFACE_TRANSFORM_ROTATE_90_BIT_KHR</code> specifies that image
content is rotated 90 degrees clockwise.</p>
</li>
<li>
<p><code>VK_SURFACE_TRANSFORM_ROTATE_180_BIT_KHR</code> specifies that image
content is rotated 180 degrees clockwise.</p>
</li>
<li>
<p><code>VK_SURFACE_TRANSFORM_ROTATE_270_BIT_KHR</code> specifies that image
content is rotated 270 degrees clockwise.</p>
</li>
<li>
<p><code>VK_SURFACE_TRANSFORM_HORIZONTAL_MIRROR_BIT_KHR</code> specifies that
image content is mirrored horizontally.</p>
</li>
<li>
<p><code>VK_SURFACE_TRANSFORM_HORIZONTAL_MIRROR_ROTATE_90_BIT_KHR</code> specifies
that image content is mirrored horizontally, then rotated 90 degrees
clockwise.</p>
</li>
<li>
<p><code>VK_SURFACE_TRANSFORM_HORIZONTAL_MIRROR_ROTATE_180_BIT_KHR</code>
specifies that image content is mirrored horizontally, then rotated 180
degrees clockwise.</p>
</li>
<li>
<p><code>VK_SURFACE_TRANSFORM_HORIZONTAL_MIRROR_ROTATE_270_BIT_KHR</code>
specifies that image content is mirrored horizontally, then rotated 270
degrees clockwise.</p>
</li>
<li>
<p><code>VK_SURFACE_TRANSFORM_INHERIT_BIT_KHR</code> specifies that the
presentation transform is not specified, and is instead determined by
platform-specific considerations and mechanisms outside Vulkan.</p>
</li>
</ul>
</div>
</div>
<div class="sect3">
<h4 id="_see_also_929">See Also</h4>
<div class="paragraph">
<p><a href="#VkDisplaySurfaceCreateInfoKHR">VkDisplaySurfaceCreateInfoKHR</a>, <a href="#VkSurfaceCapabilities2EXT">VkSurfaceCapabilities2EXT</a>, <a href="#VkSurfaceCapabilitiesKHR">VkSurfaceCapabilitiesKHR</a>, <a href="#VkSurfaceTransformFlagsKHR">VkSurfaceTransformFlagsKHR</a>, <a href="#VkSwapchainCreateInfoKHR">VkSwapchainCreateInfoKHR</a></p>
</div>
</div>
<div class="sect3">
<h4 id="_document_notes_929">Document Notes</h4>
<div class="paragraph">
<p>For more information, see the Vulkan Specification at URL</p>
</div>
<div class="paragraph">
<p><a href="https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VkSurfaceTransformFlagBitsKHR" class="bare">https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VkSurfaceTransformFlagBitsKHR</a></p>
</div>
<div class="paragraph">
<p>This page is extracted from the Vulkan Specification.
Fixes and changes should be made to the Specification, not directly.</p>
</div>
<div style="page-break-after: always;"></div>
</div>
</div>
<div class="sect2">
<h3 id="_vkswapchaincreateflagbitskhr3">VkSwapchainCreateFlagBitsKHR(3)</h3>
<div class="sect3">
<h4 id="_name_930">Name</h4>
<div class="paragraph">
<p>VkSwapchainCreateFlagBitsKHR - Bitmask controlling swapchain creation</p>
</div>
</div>
<div class="sect3">
<h4 id="_c_specification_930">C Specification</h4>
<div class="paragraph">
<p>Bits which <strong class="purple">can</strong> be set in <a href="#VkSwapchainCreateInfoKHR">VkSwapchainCreateInfoKHR</a>::<code>flags</code>,
specifying parameters of swapchain creation, are:</p>
</div>
<div id="VkSwapchainCreateFlagBitsKHR" class="listingblock">
<div class="content">
<pre class="highlight"><code class="language-c++" data-lang="c++">typedef enum VkSwapchainCreateFlagBitsKHR {
    VK_SWAPCHAIN_CREATE_SPLIT_INSTANCE_BIND_REGIONS_BIT_KHR = 0x00000001,
    VK_SWAPCHAIN_CREATE_PROTECTED_BIT_KHR = 0x00000002,
    VK_SWAPCHAIN_CREATE_MUTABLE_FORMAT_BIT_KHR = 0x00000004,
    VK_SWAPCHAIN_CREATE_FLAG_BITS_MAX_ENUM_KHR = 0x7FFFFFFF
} VkSwapchainCreateFlagBitsKHR;</code></pre>
</div>
</div>
</div>
<div class="sect3">
<h4 id="_description_930">Description</h4>
<div class="ulist">
<ul>
<li>
<p><code>VK_SWAPCHAIN_CREATE_SPLIT_INSTANCE_BIND_REGIONS_BIT_KHR</code> specifies
that images created from the swapchain (i.e. with the <code>swapchain</code>
member of <a href="#VkImageSwapchainCreateInfoKHR">VkImageSwapchainCreateInfoKHR</a> set to this swapchain&#8217;s
handle) <strong class="purple">must</strong> use <code>VK_IMAGE_CREATE_SPLIT_INSTANCE_BIND_REGIONS_BIT</code>.</p>
</li>
<li>
<p><code>VK_SWAPCHAIN_CREATE_PROTECTED_BIT_KHR</code> specifies that images
created from the swapchain are protected images.</p>
</li>
<li>
<p><code>VK_SWAPCHAIN_CREATE_MUTABLE_FORMAT_BIT_KHR</code> specifies that the
images of the swapchain <strong class="purple">can</strong> be used to create a <code>VkImageView</code> with
a different format than what the swapchain was created with.
The list of allowed image view formats are specified by chaining an
instance of the <a href="#VkImageFormatListCreateInfoKHR">VkImageFormatListCreateInfoKHR</a> structure to the
<code>pNext</code> chain of <code>VkSwapchainCreateInfoKHR</code>.
In addition, this flag also specifies that the swapchain <strong class="purple">can</strong> be created
with usage flags that are not supported for the format the swapchain is
created with but are supported for at least one of the allowed image
view formats.</p>
</li>
</ul>
</div>
</div>
<div class="sect3">
<h4 id="_see_also_930">See Also</h4>
<div class="paragraph">
<p><a href="#VkSwapchainCreateFlagsKHR">VkSwapchainCreateFlagsKHR</a></p>
</div>
</div>
<div class="sect3">
<h4 id="_document_notes_930">Document Notes</h4>
<div class="paragraph">
<p>For more information, see the Vulkan Specification at URL</p>
</div>
<div class="paragraph">
<p><a href="https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VkSwapchainCreateFlagBitsKHR" class="bare">https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VkSwapchainCreateFlagBitsKHR</a></p>
</div>
<div class="paragraph">
<p>This page is extracted from the Vulkan Specification.
Fixes and changes should be made to the Specification, not directly.</p>
</div>
<div style="page-break-after: always;"></div>
</div>
</div>
<div class="sect2">
<h3 id="_vksystemallocationscope3">VkSystemAllocationScope(3)</h3>
<div class="sect3">
<h4 id="_name_931">Name</h4>
<div class="paragraph">
<p>VkSystemAllocationScope - Allocation scope</p>
</div>
</div>
<div class="sect3">
<h4 id="_c_specification_931">C Specification</h4>
<div id="memory-host-allocation-scope" class="paragraph">
<p>Each allocation has an <em>allocation scope</em> which defines its lifetime and
which object it is associated with.
Possible values passed to the <code>allocationScope</code> parameter of the
callback functions specified by <a href="#VkAllocationCallbacks">VkAllocationCallbacks</a>, indicating the
allocation scope, are:</p>
</div>
<div id="VkSystemAllocationScope" class="listingblock">
<div class="content">
<pre class="highlight"><code class="language-c++" data-lang="c++">typedef enum VkSystemAllocationScope {
    VK_SYSTEM_ALLOCATION_SCOPE_COMMAND = 0,
    VK_SYSTEM_ALLOCATION_SCOPE_OBJECT = 1,
    VK_SYSTEM_ALLOCATION_SCOPE_CACHE = 2,
    VK_SYSTEM_ALLOCATION_SCOPE_DEVICE = 3,
    VK_SYSTEM_ALLOCATION_SCOPE_INSTANCE = 4,
    VK_SYSTEM_ALLOCATION_SCOPE_MAX_ENUM = 0x7FFFFFFF
} VkSystemAllocationScope;</code></pre>
</div>
</div>
</div>
<div class="sect3">
<h4 id="_description_931">Description</h4>
<div class="ulist">
<ul>
<li>
<p><code>VK_SYSTEM_ALLOCATION_SCOPE_COMMAND</code> specifies that the allocation
is scoped to the duration of the Vulkan command.</p>
</li>
<li>
<p><code>VK_SYSTEM_ALLOCATION_SCOPE_OBJECT</code> specifies that the allocation is
scoped to the lifetime of the Vulkan object that is being created or
used.</p>
</li>
<li>
<p><code>VK_SYSTEM_ALLOCATION_SCOPE_CACHE</code> specifies that the allocation is
scoped to the lifetime of a <code>VkPipelineCache</code>
or <code>VkValidationCacheEXT</code>
object.</p>
</li>
<li>
<p><code>VK_SYSTEM_ALLOCATION_SCOPE_DEVICE</code> specifies that the allocation is
scoped to the lifetime of the Vulkan device.</p>
</li>
<li>
<p><code>VK_SYSTEM_ALLOCATION_SCOPE_INSTANCE</code> specifies that the allocation
is scoped to the lifetime of the Vulkan instance.</p>
</li>
</ul>
</div>
<div class="paragraph">
<p>Most Vulkan commands operate on a single object, or there is a sole object
that is being created or manipulated.
When an allocation uses an allocation scope of
<code>VK_SYSTEM_ALLOCATION_SCOPE_OBJECT</code> or
<code>VK_SYSTEM_ALLOCATION_SCOPE_CACHE</code>, the allocation is scoped to the
object being created or manipulated.</p>
</div>
<div class="paragraph">
<p>When an implementation requires host memory, it will make callbacks to the
application using the most specific allocator and allocation scope
available:</p>
</div>
<div class="ulist">
<ul>
<li>
<p>If an allocation is scoped to the duration of a command, the allocator
will use the <code>VK_SYSTEM_ALLOCATION_SCOPE_COMMAND</code> allocation scope.
The most specific allocator available is used: if the object being
created or manipulated has an allocator, that object&#8217;s allocator will be
used, else if the parent <code>VkDevice</code> has an allocator it will be
used, else if the parent <code>VkInstance</code> has an allocator it will be
used.
Else,</p>
</li>
<li>
<p>If an allocation is associated with an object of type
<code>VkValidationCacheEXT</code> or
<code>VkPipelineCache</code>, the allocator will use the
<code>VK_SYSTEM_ALLOCATION_SCOPE_CACHE</code> allocation scope.
The most specific allocator available is used (cache, else device, else
instance).
Else,</p>
</li>
<li>
<p>If an allocation is scoped to the lifetime of an object, that object is
being created or manipulated by the command, and that object&#8217;s type is
not <code>VkDevice</code> or <code>VkInstance</code>, the allocator will use an
allocation scope of <code>VK_SYSTEM_ALLOCATION_SCOPE_OBJECT</code>.
The most specific allocator available is used (object, else device, else
instance).
Else,</p>
</li>
<li>
<p>If an allocation is scoped to the lifetime of a device, the allocator
will use an allocation scope of <code>VK_SYSTEM_ALLOCATION_SCOPE_DEVICE</code>.
The most specific allocator available is used (device, else instance).
Else,</p>
</li>
<li>
<p>If the allocation is scoped to the lifetime of an instance and the
instance has an allocator, its allocator will be used with an allocation
scope of <code>VK_SYSTEM_ALLOCATION_SCOPE_INSTANCE</code>.</p>
</li>
<li>
<p>Otherwise an implementation will allocate memory through an alternative
mechanism that is unspecified.</p>
</li>
</ul>
</div>
</div>
<div class="sect3">
<h4 id="_see_also_931">See Also</h4>
<div class="paragraph">
<p><a href="#VkAllocationCallbacks">VkAllocationCallbacks</a></p>
</div>
</div>
<div class="sect3">
<h4 id="_document_notes_931">Document Notes</h4>
<div class="paragraph">
<p>For more information, see the Vulkan Specification at URL</p>
</div>
<div class="paragraph">
<p><a href="https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VkSystemAllocationScope" class="bare">https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VkSystemAllocationScope</a></p>
</div>
<div class="paragraph">
<p>This page is extracted from the Vulkan Specification.
Fixes and changes should be made to the Specification, not directly.</p>
</div>
<div style="page-break-after: always;"></div>
</div>
</div>
<div class="sect2">
<h3 id="_vktessellationdomainorigin3">VkTessellationDomainOrigin(3)</h3>
<div class="sect3">
<h4 id="_name_932">Name</h4>
<div class="paragraph">
<p>VkTessellationDomainOrigin - Enum describing tessellation domain origin</p>
</div>
</div>
<div class="sect3">
<h4 id="_c_specification_932">C Specification</h4>
<div class="paragraph">
<p>The possible tessellation domain origins are specified by the
<a href="#VkTessellationDomainOrigin">VkTessellationDomainOrigin</a> enumeration:</p>
</div>
<div id="VkTessellationDomainOrigin" class="listingblock">
<div class="content">
<pre class="highlight"><code class="language-c++" data-lang="c++">typedef enum VkTessellationDomainOrigin {
    VK_TESSELLATION_DOMAIN_ORIGIN_UPPER_LEFT = 0,
    VK_TESSELLATION_DOMAIN_ORIGIN_LOWER_LEFT = 1,
    VK_TESSELLATION_DOMAIN_ORIGIN_UPPER_LEFT_KHR = VK_TESSELLATION_DOMAIN_ORIGIN_UPPER_LEFT,
    VK_TESSELLATION_DOMAIN_ORIGIN_LOWER_LEFT_KHR = VK_TESSELLATION_DOMAIN_ORIGIN_LOWER_LEFT,
    VK_TESSELLATION_DOMAIN_ORIGIN_MAX_ENUM = 0x7FFFFFFF
} VkTessellationDomainOrigin;</code></pre>
</div>
</div>
<div class="paragraph">
<p>or the equivalent</p>
</div>
<div id="VkTessellationDomainOriginKHR" class="listingblock">
<div class="content">
<pre class="highlight"><code class="language-c++" data-lang="c++">typedef VkTessellationDomainOrigin VkTessellationDomainOriginKHR;</code></pre>
</div>
</div>
</div>
<div class="sect3">
<h4 id="_description_932">Description</h4>
<div class="ulist">
<ul>
<li>
<p><code>VK_TESSELLATION_DOMAIN_ORIGIN_UPPER_LEFT</code> specifies that the origin
of the domain space is in the upper left corner, as shown in figure
<a href="vkspec.html#img-tessellation-topology-ul" class="bare">html/vkspec.html#img-tessellation-topology-ul</a>.</p>
</li>
<li>
<p><code>VK_TESSELLATION_DOMAIN_ORIGIN_LOWER_LEFT</code> specifies that the origin
of the domain space is in the lower left corner, as shown in figure
<a href="vkspec.html#img-tessellation-topology-ll" class="bare">html/vkspec.html#img-tessellation-topology-ll</a>.</p>
</li>
</ul>
</div>
<div class="paragraph">
<p>This enum affects how the <code>VertexOrderCw</code> and <code>VertexOrderCcw</code>
tessellation execution modes are interpreted, since the winding is defined
relative to the orientation of the domain.</p>
</div>
</div>
<div class="sect3">
<h4 id="_see_also_932">See Also</h4>
<div class="paragraph">
<p><a href="#VkPipelineTessellationDomainOriginStateCreateInfo">VkPipelineTessellationDomainOriginStateCreateInfo</a></p>
</div>
</div>
<div class="sect3">
<h4 id="_document_notes_932">Document Notes</h4>
<div class="paragraph">
<p>For more information, see the Vulkan Specification at URL</p>
</div>
<div class="paragraph">
<p><a href="https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VkTessellationDomainOrigin" class="bare">https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VkTessellationDomainOrigin</a></p>
</div>
<div class="paragraph">
<p>This page is extracted from the Vulkan Specification.
Fixes and changes should be made to the Specification, not directly.</p>
</div>
<div style="page-break-after: always;"></div>
</div>
</div>
<div class="sect2">
<h3 id="_vktimedomainext3">VkTimeDomainEXT(3)</h3>
<div class="sect3">
<h4 id="_name_933">Name</h4>
<div class="paragraph">
<p>VkTimeDomainEXT - Supported time domains</p>
</div>
</div>
<div class="sect3">
<h4 id="_c_specification_933">C Specification</h4>
<div class="paragraph">
<p>The set of supported time domains consists of:</p>
</div>
<div id="VkTimeDomainEXT" class="listingblock">
<div class="content">
<pre class="highlight"><code class="language-c++" data-lang="c++">typedef enum VkTimeDomainEXT {
    VK_TIME_DOMAIN_DEVICE_EXT = 0,
    VK_TIME_DOMAIN_CLOCK_MONOTONIC_EXT = 1,
    VK_TIME_DOMAIN_CLOCK_MONOTONIC_RAW_EXT = 2,
    VK_TIME_DOMAIN_QUERY_PERFORMANCE_COUNTER_EXT = 3,
    VK_TIME_DOMAIN_MAX_ENUM_EXT = 0x7FFFFFFF
} VkTimeDomainEXT;</code></pre>
</div>
</div>
</div>
<div class="sect3">
<h4 id="_description_933">Description</h4>
<div class="ulist">
<ul>
<li>
<p><code>VK_TIME_DOMAIN_DEVICE_EXT</code> specifies the device time domain.
Timestamp values in this time domain are comparable with device
timestamp values captured using <a href="#vkCmdWriteTimestamp">vkCmdWriteTimestamp</a> and are
defined to be incrementing according to the
<a href="vkspec.html#limits-timestampPeriod">timestampPeriod</a> of the device.</p>
</li>
<li>
<p><code>VK_TIME_DOMAIN_CLOCK_MONOTONIC_EXT</code> specifies the CLOCK_MONOTONIC
time domain available on POSIX platforms.</p>
</li>
<li>
<p><code>VK_TIME_DOMAIN_CLOCK_MONOTONIC_RAW_EXT</code> specifies the
CLOCK_MONOTONIC_RAW time domain available on POSIX platforms.</p>
</li>
<li>
<p><code>VK_TIME_DOMAIN_QUERY_PERFORMANCE_COUNTER_EXT</code> specifies the
performance counter (QPC) time domain available on Windows.</p>
</li>
</ul>
</div>
</div>
<div class="sect3">
<h4 id="_see_also_933">See Also</h4>
<div class="paragraph">
<p><a href="#VkCalibratedTimestampInfoEXT">VkCalibratedTimestampInfoEXT</a>, <a href="#vkGetPhysicalDeviceCalibrateableTimeDomainsEXT">vkGetPhysicalDeviceCalibrateableTimeDomainsEXT</a></p>
</div>
</div>
<div class="sect3">
<h4 id="_document_notes_933">Document Notes</h4>
<div class="paragraph">
<p>For more information, see the Vulkan Specification at URL</p>
</div>
<div class="paragraph">
<p><a href="https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VkTimeDomainEXT" class="bare">https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VkTimeDomainEXT</a></p>
</div>
<div class="paragraph">
<p>This page is extracted from the Vulkan Specification.
Fixes and changes should be made to the Specification, not directly.</p>
</div>
<div style="page-break-after: always;"></div>
</div>
</div>
<div class="sect2">
<h3 id="_vkvalidationcacheheaderversionext3">VkValidationCacheHeaderVersionEXT(3)</h3>
<div class="sect3">
<h4 id="_name_934">Name</h4>
<div class="paragraph">
<p>VkValidationCacheHeaderVersionEXT - Encode validation cache version</p>
</div>
</div>
<div class="sect3">
<h4 id="_c_specification_934">C Specification</h4>
<div class="paragraph">
<p>Possible values of the second group of four bytes in the header returned by
<a href="#vkGetValidationCacheDataEXT">vkGetValidationCacheDataEXT</a>, encoding the validation cache version,
are:</p>
</div>
<div id="VkValidationCacheHeaderVersionEXT" class="listingblock">
<div class="content">
<pre class="highlight"><code class="language-c++" data-lang="c++">typedef enum VkValidationCacheHeaderVersionEXT {
    VK_VALIDATION_CACHE_HEADER_VERSION_ONE_EXT = 1,
    VK_VALIDATION_CACHE_HEADER_VERSION_MAX_ENUM_EXT = 0x7FFFFFFF
} VkValidationCacheHeaderVersionEXT;</code></pre>
</div>
</div>
</div>
<div class="sect3">
<h4 id="_description_934">Description</h4>
<div class="ulist">
<ul>
<li>
<p><code>VK_VALIDATION_CACHE_HEADER_VERSION_ONE_EXT</code> specifies version one
of the validation cache.</p>
</li>
</ul>
</div>
</div>
<div class="sect3">
<h4 id="_see_also_934">See Also</h4>
<div class="paragraph">
<p><a href="#vkCreateValidationCacheEXT">vkCreateValidationCacheEXT</a>, <a href="#vkGetValidationCacheDataEXT">vkGetValidationCacheDataEXT</a></p>
</div>
</div>
<div class="sect3">
<h4 id="_document_notes_934">Document Notes</h4>
<div class="paragraph">
<p>For more information, see the Vulkan Specification at URL</p>
</div>
<div class="paragraph">
<p><a href="https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VkValidationCacheHeaderVersionEXT" class="bare">https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VkValidationCacheHeaderVersionEXT</a></p>
</div>
<div class="paragraph">
<p>This page is extracted from the Vulkan Specification.
Fixes and changes should be made to the Specification, not directly.</p>
</div>
<div style="page-break-after: always;"></div>
</div>
</div>
<div class="sect2">
<h3 id="_vkvalidationcheckext3">VkValidationCheckEXT(3)</h3>
<div class="sect3">
<h4 id="_name_935">Name</h4>
<div class="paragraph">
<p>VkValidationCheckEXT - Specify validation checks to disable</p>
</div>
</div>
<div class="sect3">
<h4 id="_c_specification_935">C Specification</h4>
<div class="paragraph">
<p>Possible values of elements of the
<a href="#VkValidationFlagsEXT">VkValidationFlagsEXT</a>::<code>pDisabledValidationChecks</code> array,
specifying validation checks to be disabled, are:</p>
</div>
<div id="VkValidationCheckEXT" class="listingblock">
<div class="content">
<pre class="highlight"><code class="language-c++" data-lang="c++">typedef enum VkValidationCheckEXT {
    VK_VALIDATION_CHECK_ALL_EXT = 0,
    VK_VALIDATION_CHECK_SHADERS_EXT = 1,
    VK_VALIDATION_CHECK_MAX_ENUM_EXT = 0x7FFFFFFF
} VkValidationCheckEXT;</code></pre>
</div>
</div>
</div>
<div class="sect3">
<h4 id="_description_935">Description</h4>
<div class="ulist">
<ul>
<li>
<p><code>VK_VALIDATION_CHECK_ALL_EXT</code> specifies that all validation checks
are disabled.</p>
</li>
<li>
<p><code>VK_VALIDATION_CHECK_SHADERS_EXT</code> specifies that shader validation
is disabled.</p>
</li>
</ul>
</div>
</div>
<div class="sect3">
<h4 id="_see_also_935">See Also</h4>
<div class="paragraph">
<p><a href="#VkValidationFlagsEXT">VkValidationFlagsEXT</a></p>
</div>
</div>
<div class="sect3">
<h4 id="_document_notes_935">Document Notes</h4>
<div class="paragraph">
<p>For more information, see the Vulkan Specification at URL</p>
</div>
<div class="paragraph">
<p><a href="https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VkValidationCheckEXT" class="bare">https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VkValidationCheckEXT</a></p>
</div>
<div class="paragraph">
<p>This page is extracted from the Vulkan Specification.
Fixes and changes should be made to the Specification, not directly.</p>
</div>
<div style="page-break-after: always;"></div>
</div>
</div>
<div class="sect2">
<h3 id="_vkvalidationfeaturedisableext3">VkValidationFeatureDisableEXT(3)</h3>
<div class="sect3">
<h4 id="_name_936">Name</h4>
<div class="paragraph">
<p>VkValidationFeatureDisableEXT - Specify validation features to disable</p>
</div>
</div>
<div class="sect3">
<h4 id="_c_specification_936">C Specification</h4>
<div class="paragraph">
<p>Possible values of elements of the
<a href="#VkValidationFeaturesEXT">VkValidationFeaturesEXT</a>::<code>pDisabledValidationFeatures</code> array,
specifying validation features to be disabled, are:</p>
</div>
<div id="VkValidationFeatureDisableEXT" class="listingblock">
<div class="content">
<pre class="highlight"><code class="language-c++" data-lang="c++">typedef enum VkValidationFeatureDisableEXT {
    VK_VALIDATION_FEATURE_DISABLE_ALL_EXT = 0,
    VK_VALIDATION_FEATURE_DISABLE_SHADERS_EXT = 1,
    VK_VALIDATION_FEATURE_DISABLE_THREAD_SAFETY_EXT = 2,
    VK_VALIDATION_FEATURE_DISABLE_API_PARAMETERS_EXT = 3,
    VK_VALIDATION_FEATURE_DISABLE_OBJECT_LIFETIMES_EXT = 4,
    VK_VALIDATION_FEATURE_DISABLE_CORE_CHECKS_EXT = 5,
    VK_VALIDATION_FEATURE_DISABLE_UNIQUE_HANDLES_EXT = 6,
    VK_VALIDATION_FEATURE_DISABLE_MAX_ENUM_EXT = 0x7FFFFFFF
} VkValidationFeatureDisableEXT;</code></pre>
</div>
</div>
</div>
<div class="sect3">
<h4 id="_description_936">Description</h4>
<div class="ulist">
<ul>
<li>
<p><code>VK_VALIDATION_FEATURE_DISABLE_ALL_EXT</code> specifies that all
validation checks are disabled.</p>
</li>
<li>
<p><code>VK_VALIDATION_FEATURE_DISABLE_SHADERS_EXT</code> specifies that shader
validation is disabled.
This feature is enabled by default.</p>
</li>
<li>
<p><code>VK_VALIDATION_FEATURE_DISABLE_THREAD_SAFETY_EXT</code> specifies that
thread safety validation is disabled.
This feature is enabled by default.</p>
</li>
<li>
<p><code>VK_VALIDATION_FEATURE_DISABLE_API_PARAMETERS_EXT</code> specifies that
stateless parameter validation is disabled.
This feature is enabled by default.</p>
</li>
<li>
<p><code>VK_VALIDATION_FEATURE_DISABLE_OBJECT_LIFETIMES_EXT</code> specifies that
object lifetime validation is disabled.
This feature is enabled by default.</p>
</li>
<li>
<p><code>VK_VALIDATION_FEATURE_DISABLE_CORE_CHECKS_EXT</code> specifies that core
validation checks are disabled.
This feature is enabled by default.
If this feature is disabled, the shader validation and GPU-assisted
validation features are also disabled.</p>
</li>
<li>
<p><code>VK_VALIDATION_FEATURE_DISABLE_UNIQUE_HANDLES_EXT</code> specifies that
protection against duplicate non-dispatchable object handles is
disabled.
This feature is enabled by default.</p>
</li>
</ul>
</div>
</div>
<div class="sect3">
<h4 id="_see_also_936">See Also</h4>
<div class="paragraph">
<p><a href="#VkValidationFeaturesEXT">VkValidationFeaturesEXT</a></p>
</div>
</div>
<div class="sect3">
<h4 id="_document_notes_936">Document Notes</h4>
<div class="paragraph">
<p>For more information, see the Vulkan Specification at URL</p>
</div>
<div class="paragraph">
<p><a href="https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VkValidationFeatureDisableEXT" class="bare">https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VkValidationFeatureDisableEXT</a></p>
</div>
<div class="paragraph">
<p>This page is extracted from the Vulkan Specification.
Fixes and changes should be made to the Specification, not directly.</p>
</div>
<div style="page-break-after: always;"></div>
</div>
</div>
<div class="sect2">
<h3 id="_vkvalidationfeatureenableext3">VkValidationFeatureEnableEXT(3)</h3>
<div class="sect3">
<h4 id="_name_937">Name</h4>
<div class="paragraph">
<p>VkValidationFeatureEnableEXT - Specify validation features to enable</p>
</div>
</div>
<div class="sect3">
<h4 id="_c_specification_937">C Specification</h4>
<div class="paragraph">
<p>Possible values of elements of the
<a href="#VkValidationFeaturesEXT">VkValidationFeaturesEXT</a>::<code>pEnabledValidationFeatures</code> array,
specifying validation features to be enabled, are:</p>
</div>
<div id="VkValidationFeatureEnableEXT" class="listingblock">
<div class="content">
<pre class="highlight"><code class="language-c++" data-lang="c++">typedef enum VkValidationFeatureEnableEXT {
    VK_VALIDATION_FEATURE_ENABLE_GPU_ASSISTED_EXT = 0,
    VK_VALIDATION_FEATURE_ENABLE_GPU_ASSISTED_RESERVE_BINDING_SLOT_EXT = 1,
    VK_VALIDATION_FEATURE_ENABLE_MAX_ENUM_EXT = 0x7FFFFFFF
} VkValidationFeatureEnableEXT;</code></pre>
</div>
</div>
</div>
<div class="sect3">
<h4 id="_description_937">Description</h4>
<div class="ulist">
<ul>
<li>
<p><code>VK_VALIDATION_FEATURE_ENABLE_GPU_ASSISTED_EXT</code> specifies that
GPU-assisted validation is enabled.
Activating this feature instruments shader programs to generate
additional diagnostic data.
This feature is disabled by default.</p>
</li>
<li>
<p><code>VK_VALIDATION_FEATURE_ENABLE_GPU_ASSISTED_RESERVE_BINDING_SLOT_EXT</code>
specifies that the validation layers reserve a descriptor set binding
slot for their own use.
The layer reports a value for
<a href="#VkPhysicalDeviceLimits">VkPhysicalDeviceLimits</a>::<code>maxBoundDescriptorSets</code> that is one
less than the value reported by the device.
If the device supports the binding of only one descriptor set, the
validation layer does not perform GPU-assisted validation.
This feature is disabled by default.
The GPU-assisted validation feature must be enabled in order to use this
feature.</p>
</li>
</ul>
</div>
</div>
<div class="sect3">
<h4 id="_see_also_937">See Also</h4>
<div class="paragraph">
<p><a href="#VkValidationFeaturesEXT">VkValidationFeaturesEXT</a></p>
</div>
</div>
<div class="sect3">
<h4 id="_document_notes_937">Document Notes</h4>
<div class="paragraph">
<p>For more information, see the Vulkan Specification at URL</p>
</div>
<div class="paragraph">
<p><a href="https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VkValidationFeatureEnableEXT" class="bare">https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VkValidationFeatureEnableEXT</a></p>
</div>
<div class="paragraph">
<p>This page is extracted from the Vulkan Specification.
Fixes and changes should be made to the Specification, not directly.</p>
</div>
<div style="page-break-after: always;"></div>
</div>
</div>
<div class="sect2">
<h3 id="_vkvendorid3">VkVendorId(3)</h3>
<div class="sect3">
<h4 id="_name_938">Name</h4>
<div class="paragraph">
<p>VkVendorId - Khronos vendor IDs</p>
</div>
</div>
<div class="sect3">
<h4 id="_c_specification_938">C Specification</h4>
<div class="paragraph">
<p>Khronos vendor IDs which <strong class="purple">may</strong> be returned in
<a href="#VkPhysicalDeviceProperties">VkPhysicalDeviceProperties</a>::<code>vendorID</code> are:</p>
</div>
<div id="VkVendorId" class="listingblock">
<div class="content">
<pre class="highlight"><code class="language-c++" data-lang="c++">typedef enum VkVendorId {
    VK_VENDOR_ID_VIV = 0x10001,
    VK_VENDOR_ID_VSI = 0x10002,
    VK_VENDOR_ID_KAZAN = 0x10003,
    VK_VENDOR_ID_MAX_ENUM = 0x7FFFFFFF
} VkVendorId;</code></pre>
</div>
</div>
</div>
<div class="sect3">
<h4 id="_description_938">Description</h4>
<div class="admonitionblock note">
<table>
<tr>
<td class="icon">
<i class="fa icon-note" title="Note"></i>
</td>
<td class="content">
<div class="title">Note</div>
<div class="paragraph">
<p>Khronos vendor IDs may be allocated by vendors at any time.
Only the latest canonical versions of this Specification, of the
corresponding <code>vk.xml</code> API Registry, and of the corresponding
<code>vulkan_core.h</code> header file <strong class="purple">must</strong> contain all reserved Khronos vendor IDs.</p>
</div>
<div class="paragraph">
<p>Only Khronos vendor IDs are given symbolic names at present.
PCI vendor IDs returned by the implementation can be looked up in the
PCI-SIG database.</p>
</div>
</td>
</tr>
</table>
</div>
</div>
<div class="sect3">
<h4 id="_see_also_938">See Also</h4>
<div class="paragraph">
<p>No cross-references are available</p>
</div>
</div>
<div class="sect3">
<h4 id="_document_notes_938">Document Notes</h4>
<div class="paragraph">
<p>For more information, see the Vulkan Specification at URL</p>
</div>
<div class="paragraph">
<p><a href="https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VkVendorId" class="bare">https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VkVendorId</a></p>
</div>
<div class="paragraph">
<p>This page is extracted from the Vulkan Specification.
Fixes and changes should be made to the Specification, not directly.</p>
</div>
<div style="page-break-after: always;"></div>
</div>
</div>
<div class="sect2">
<h3 id="_vkvertexinputrate3">VkVertexInputRate(3)</h3>
<div class="sect3">
<h4 id="_name_939">Name</h4>
<div class="paragraph">
<p>VkVertexInputRate - Specify rate at which vertex attributes are pulled from buffers</p>
</div>
</div>
<div class="sect3">
<h4 id="_c_specification_939">C Specification</h4>
<div class="paragraph">
<p>Possible values of <a href="#VkVertexInputBindingDescription">VkVertexInputBindingDescription</a>::<code>inputRate</code>,
specifying the rate at which vertex attributes are pulled from buffers, are:</p>
</div>
<div id="VkVertexInputRate" class="listingblock">
<div class="content">
<pre class="highlight"><code class="language-c++" data-lang="c++">typedef enum VkVertexInputRate {
    VK_VERTEX_INPUT_RATE_VERTEX = 0,
    VK_VERTEX_INPUT_RATE_INSTANCE = 1,
    VK_VERTEX_INPUT_RATE_MAX_ENUM = 0x7FFFFFFF
} VkVertexInputRate;</code></pre>
</div>
</div>
</div>
<div class="sect3">
<h4 id="_description_939">Description</h4>
<div class="ulist">
<ul>
<li>
<p><code>VK_VERTEX_INPUT_RATE_VERTEX</code> specifies that vertex attribute
addressing is a function of the vertex index.</p>
</li>
<li>
<p><code>VK_VERTEX_INPUT_RATE_INSTANCE</code> specifies that vertex attribute
addressing is a function of the instance index.</p>
</li>
</ul>
</div>
</div>
<div class="sect3">
<h4 id="_see_also_939">See Also</h4>
<div class="paragraph">
<p><a href="#VkVertexInputBindingDescription">VkVertexInputBindingDescription</a></p>
</div>
</div>
<div class="sect3">
<h4 id="_document_notes_939">Document Notes</h4>
<div class="paragraph">
<p>For more information, see the Vulkan Specification at URL</p>
</div>
<div class="paragraph">
<p><a href="https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VkVertexInputRate" class="bare">https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VkVertexInputRate</a></p>
</div>
<div class="paragraph">
<p>This page is extracted from the Vulkan Specification.
Fixes and changes should be made to the Specification, not directly.</p>
</div>
<div style="page-break-after: always;"></div>
</div>
</div>
<div class="sect2">
<h3 id="_vkviewportcoordinateswizzlenv3">VkViewportCoordinateSwizzleNV(3)</h3>
<div class="sect3">
<h4 id="_name_940">Name</h4>
<div class="paragraph">
<p>VkViewportCoordinateSwizzleNV - Specify how a viewport coordinate is swizzled</p>
</div>
</div>
<div class="sect3">
<h4 id="_c_specification_940">C Specification</h4>
<div class="paragraph">
<p>Possible values of the <a href="#VkViewportSwizzleNV">VkViewportSwizzleNV</a>::<code>x</code>, <code>y</code>, <code>z</code>,
and <code>w</code> members, specifying swizzling of the corresponding components of
primitives, are:</p>
</div>
<div id="VkViewportCoordinateSwizzleNV" class="listingblock">
<div class="content">
<pre class="highlight"><code class="language-c++" data-lang="c++">typedef enum VkViewportCoordinateSwizzleNV {
    VK_VIEWPORT_COORDINATE_SWIZZLE_POSITIVE_X_NV = 0,
    VK_VIEWPORT_COORDINATE_SWIZZLE_NEGATIVE_X_NV = 1,
    VK_VIEWPORT_COORDINATE_SWIZZLE_POSITIVE_Y_NV = 2,
    VK_VIEWPORT_COORDINATE_SWIZZLE_NEGATIVE_Y_NV = 3,
    VK_VIEWPORT_COORDINATE_SWIZZLE_POSITIVE_Z_NV = 4,
    VK_VIEWPORT_COORDINATE_SWIZZLE_NEGATIVE_Z_NV = 5,
    VK_VIEWPORT_COORDINATE_SWIZZLE_POSITIVE_W_NV = 6,
    VK_VIEWPORT_COORDINATE_SWIZZLE_NEGATIVE_W_NV = 7,
    VK_VIEWPORT_COORDINATE_SWIZZLE_MAX_ENUM_NV = 0x7FFFFFFF
} VkViewportCoordinateSwizzleNV;</code></pre>
</div>
</div>
</div>
<div class="sect3">
<h4 id="_description_940">Description</h4>
<div class="paragraph">
<p>These values are described in detail in <a href="vkspec.html#vertexpostproc-viewport-swizzle">Viewport Swizzle</a>.</p>
</div>
</div>
<div class="sect3">
<h4 id="_see_also_940">See Also</h4>
<div class="paragraph">
<p><a href="#VkViewportSwizzleNV">VkViewportSwizzleNV</a></p>
</div>
</div>
<div class="sect3">
<h4 id="_document_notes_940">Document Notes</h4>
<div class="paragraph">
<p>For more information, see the Vulkan Specification at URL</p>
</div>
<div class="paragraph">
<p><a href="https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VkViewportCoordinateSwizzleNV" class="bare">https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VkViewportCoordinateSwizzleNV</a></p>
</div>
<div class="paragraph">
<p>This page is extracted from the Vulkan Specification.
Fixes and changes should be made to the Specification, not directly.</p>
</div>
<div style="page-break-after: always;"></div>
</div>
</div>
</div>
</div>
</root>