/* Please note that this file is generated by the VulkanSharp's generator. Do not edit directly.

   Licensed under the MIT license.

   Copyright 2016 Xamarin Inc

   This notice may not be removed from any source distribution.
   See LICENSE file for licensing details.
*/

using System;
using System.Runtime.InteropServices;

namespace Vulkan {
    internal static class vkAPI {
        const string VulkanLibrary = "vulkan-1";

        [DllImport(VulkanLibrary, CallingConvention = CallingConvention.Winapi)]
        internal static unsafe extern VkResult vkCreateInstance(VkInstanceCreateInfo* pCreateInfo, VkAllocationCallbacks* pAllocator, IntPtr* pInstance);

        [DllImport(VulkanLibrary, CallingConvention = CallingConvention.Winapi)]
        internal static unsafe extern void vkDestroyInstance(IntPtr instance, VkAllocationCallbacks* pAllocator);

        [DllImport(VulkanLibrary, CallingConvention = CallingConvention.Winapi)]
        internal static unsafe extern VkResult vkEnumeratePhysicalDevices(IntPtr instance, UInt32* pPhysicalDeviceCount, IntPtr* pPhysicalDevices);

        [DllImport(VulkanLibrary, CallingConvention = CallingConvention.Winapi)]
        internal static unsafe extern IntPtr vkGetDeviceProcAddr(IntPtr device, string pName);

        [DllImport(VulkanLibrary, CallingConvention = CallingConvention.Winapi)]
        internal static unsafe extern IntPtr vkGetInstanceProcAddr(IntPtr instance, string pName);

        [DllImport(VulkanLibrary, CallingConvention = CallingConvention.Winapi)]
        internal static unsafe extern void vkGetPhysicalDeviceProperties(IntPtr physicalDevice, VkPhysicalDeviceProperties* pProperties);

        [DllImport(VulkanLibrary, CallingConvention = CallingConvention.Winapi)]
        internal static unsafe extern void vkGetPhysicalDeviceQueueFamilyProperties(IntPtr physicalDevice, UInt32* pQueueFamilyPropertyCount, VkQueueFamilyProperties* pQueueFamilyProperties);

        [DllImport(VulkanLibrary, CallingConvention = CallingConvention.Winapi)]
        internal static unsafe extern void vkGetPhysicalDeviceMemoryProperties(IntPtr physicalDevice, VkPhysicalDeviceMemoryProperties* pMemoryProperties);

        [DllImport(VulkanLibrary, CallingConvention = CallingConvention.Winapi)]
        internal static unsafe extern void vkGetPhysicalDeviceFeatures(IntPtr physicalDevice, VkPhysicalDeviceFeatures* pFeatures);

        [DllImport(VulkanLibrary, CallingConvention = CallingConvention.Winapi)]
        internal static unsafe extern void vkGetPhysicalDeviceFormatProperties(IntPtr physicalDevice, VkFormat format, VkFormatProperties* pFormatProperties);

        [DllImport(VulkanLibrary, CallingConvention = CallingConvention.Winapi)]
        internal static unsafe extern VkResult vkGetPhysicalDeviceImageFormatProperties(IntPtr physicalDevice, VkFormat format, VkImageType type, VkImageTiling tiling, VkImageUsageFlags usage, VkImageCreateFlags flags, VkImageFormatProperties* pImageFormatProperties);

        [DllImport(VulkanLibrary, CallingConvention = CallingConvention.Winapi)]
        internal static unsafe extern VkResult vkCreateDevice(IntPtr physicalDevice, VkDeviceCreateInfo* pCreateInfo, VkAllocationCallbacks* pAllocator, IntPtr* pDevice);

        [DllImport(VulkanLibrary, CallingConvention = CallingConvention.Winapi)]
        internal static unsafe extern void vkDestroyDevice(IntPtr device, VkAllocationCallbacks* pAllocator);

        [DllImport(VulkanLibrary, CallingConvention = CallingConvention.Winapi)]
        internal static unsafe extern VkResult vkEnumerateInstanceLayerProperties(UInt32* pPropertyCount, VkLayerProperties* pProperties);

        [DllImport(VulkanLibrary, CallingConvention = CallingConvention.Winapi)]
        internal static unsafe extern VkResult vkEnumerateInstanceExtensionProperties(string pLayerName, UInt32* pPropertyCount, VkExtensionProperties* pProperties);

        [DllImport(VulkanLibrary, CallingConvention = CallingConvention.Winapi)]
        internal static unsafe extern VkResult vkEnumerateDeviceLayerProperties(IntPtr physicalDevice, UInt32* pPropertyCount, VkLayerProperties* pProperties);

        [DllImport(VulkanLibrary, CallingConvention = CallingConvention.Winapi)]
        internal static unsafe extern VkResult vkEnumerateDeviceExtensionProperties(IntPtr physicalDevice, string pLayerName, UInt32* pPropertyCount, VkExtensionProperties* pProperties);

        [DllImport(VulkanLibrary, CallingConvention = CallingConvention.Winapi)]
        internal static unsafe extern void vkGetDeviceQueue(IntPtr device, UInt32 queueFamilyIndex, UInt32 queueIndex, IntPtr* pQueue);

        [DllImport(VulkanLibrary, CallingConvention = CallingConvention.Winapi)]
        internal static unsafe extern VkResult vkQueueSubmit(IntPtr queue, UInt32 submitCount, VkSubmitInfo* pSubmits, UInt64 fence);

        [DllImport(VulkanLibrary, CallingConvention = CallingConvention.Winapi)]
        internal static unsafe extern VkResult vkQueueWaitIdle(IntPtr queue);

        [DllImport(VulkanLibrary, CallingConvention = CallingConvention.Winapi)]
        internal static unsafe extern VkResult vkDeviceWaitIdle(IntPtr device);

        [DllImport(VulkanLibrary, CallingConvention = CallingConvention.Winapi)]
        internal static unsafe extern VkResult vkAllocateMemory(IntPtr device, VkMemoryAllocateInfo* pAllocateInfo, VkAllocationCallbacks* pAllocator, UInt64* pMemory);

        [DllImport(VulkanLibrary, CallingConvention = CallingConvention.Winapi)]
        internal static unsafe extern void vkFreeMemory(IntPtr device, UInt64 memory, VkAllocationCallbacks* pAllocator);

        [DllImport(VulkanLibrary, CallingConvention = CallingConvention.Winapi)]
        internal static unsafe extern VkResult vkMapMemory(IntPtr device, UInt64 memory, VkDeviceSize offset, VkDeviceSize size, UInt32 flags, IntPtr* ppData);

        [DllImport(VulkanLibrary, CallingConvention = CallingConvention.Winapi)]
        internal static unsafe extern void vkUnmapMemory(IntPtr device, UInt64 memory);

        [DllImport(VulkanLibrary, CallingConvention = CallingConvention.Winapi)]
        internal static unsafe extern VkResult vkFlushMappedMemoryRanges(IntPtr device, UInt32 memoryRangeCount, VkMappedMemoryRange* pMemoryRanges);

        [DllImport(VulkanLibrary, CallingConvention = CallingConvention.Winapi)]
        internal static unsafe extern VkResult vkInvalidateMappedMemoryRanges(IntPtr device, UInt32 memoryRangeCount, VkMappedMemoryRange* pMemoryRanges);

        [DllImport(VulkanLibrary, CallingConvention = CallingConvention.Winapi)]
        internal static unsafe extern void vkGetDeviceMemoryCommitment(IntPtr device, UInt64 memory, VkDeviceSize* pCommittedMemoryInBytes);

        [DllImport(VulkanLibrary, CallingConvention = CallingConvention.Winapi)]
        internal static unsafe extern void vkGetBufferMemoryRequirements(IntPtr device, UInt64 buffer, VkMemoryRequirements* pMemoryRequirements);

        [DllImport(VulkanLibrary, CallingConvention = CallingConvention.Winapi)]
        internal static unsafe extern VkResult vkBindBufferMemory(IntPtr device, UInt64 buffer, UInt64 memory, VkDeviceSize memoryOffset);

        [DllImport(VulkanLibrary, CallingConvention = CallingConvention.Winapi)]
        internal static unsafe extern void vkGetImageMemoryRequirements(IntPtr device, UInt64 image, VkMemoryRequirements* pMemoryRequirements);

        [DllImport(VulkanLibrary, CallingConvention = CallingConvention.Winapi)]
        internal static unsafe extern VkResult vkBindImageMemory(IntPtr device, UInt64 image, UInt64 memory, VkDeviceSize memoryOffset);

        [DllImport(VulkanLibrary, CallingConvention = CallingConvention.Winapi)]
        internal static unsafe extern void vkGetImageSparseMemoryRequirements(IntPtr device, UInt64 image, UInt32* pSparseMemoryRequirementCount, VkSparseImageMemoryRequirements* pSparseMemoryRequirements);

        [DllImport(VulkanLibrary, CallingConvention = CallingConvention.Winapi)]
        internal static unsafe extern void vkGetPhysicalDeviceSparseImageFormatProperties(IntPtr physicalDevice, VkFormat format, VkImageType type, VkSampleCountFlags samples, VkImageUsageFlags usage, VkImageTiling tiling, UInt32* pPropertyCount, VkSparseImageFormatProperties* pProperties);

        [DllImport(VulkanLibrary, CallingConvention = CallingConvention.Winapi)]
        internal static unsafe extern VkResult vkQueueBindSparse(IntPtr queue, UInt32 bindInfoCount, VkBindSparseInfo* pBindInfo, UInt64 fence);

        [DllImport(VulkanLibrary, CallingConvention = CallingConvention.Winapi)]
        internal static unsafe extern VkResult vkCreateFence(IntPtr device, VkFenceCreateInfo* pCreateInfo, VkAllocationCallbacks* pAllocator, UInt64* pFence);

        [DllImport(VulkanLibrary, CallingConvention = CallingConvention.Winapi)]
        internal static unsafe extern void vkDestroyFence(IntPtr device, UInt64 fence, VkAllocationCallbacks* pAllocator);

        [DllImport(VulkanLibrary, CallingConvention = CallingConvention.Winapi)]
        internal static unsafe extern VkResult vkResetFences(IntPtr device, UInt32 fenceCount, UInt64* pFences);

        [DllImport(VulkanLibrary, CallingConvention = CallingConvention.Winapi)]
        internal static unsafe extern VkResult vkGetFenceStatus(IntPtr device, UInt64 fence);

        [DllImport(VulkanLibrary, CallingConvention = CallingConvention.Winapi)]
        internal static unsafe extern VkResult vkWaitForFences(IntPtr device, UInt32 fenceCount, UInt64* pFences, VkBool32 waitAll, UInt64 timeout);

        [DllImport(VulkanLibrary, CallingConvention = CallingConvention.Winapi)]
        internal static unsafe extern VkResult vkCreateSemaphore(IntPtr device, VkSemaphoreCreateInfo* pCreateInfo, VkAllocationCallbacks* pAllocator, UInt64* pSemaphore);

        [DllImport(VulkanLibrary, CallingConvention = CallingConvention.Winapi)]
        internal static unsafe extern void vkDestroySemaphore(IntPtr device, UInt64 semaphore, VkAllocationCallbacks* pAllocator);

        [DllImport(VulkanLibrary, CallingConvention = CallingConvention.Winapi)]
        internal static unsafe extern VkResult vkCreateEvent(IntPtr device, VkEventCreateInfo* pCreateInfo, VkAllocationCallbacks* pAllocator, UInt64* pEvent);

        [DllImport(VulkanLibrary, CallingConvention = CallingConvention.Winapi)]
        internal static unsafe extern void vkDestroyEvent(IntPtr device, UInt64 @event, VkAllocationCallbacks* pAllocator);

        [DllImport(VulkanLibrary, CallingConvention = CallingConvention.Winapi)]
        internal static unsafe extern VkResult vkGetEventStatus(IntPtr device, UInt64 @event);

        [DllImport(VulkanLibrary, CallingConvention = CallingConvention.Winapi)]
        internal static unsafe extern VkResult vkSetEvent(IntPtr device, UInt64 @event);

        [DllImport(VulkanLibrary, CallingConvention = CallingConvention.Winapi)]
        internal static unsafe extern VkResult vkResetEvent(IntPtr device, UInt64 @event);

        [DllImport(VulkanLibrary, CallingConvention = CallingConvention.Winapi)]
        internal static unsafe extern VkResult vkCreateQueryPool(IntPtr device, VkQueryPoolCreateInfo* pCreateInfo, VkAllocationCallbacks* pAllocator, UInt64* pQueryPool);

        [DllImport(VulkanLibrary, CallingConvention = CallingConvention.Winapi)]
        internal static unsafe extern void vkDestroyQueryPool(IntPtr device, UInt64 queryPool, VkAllocationCallbacks* pAllocator);

        [DllImport(VulkanLibrary, CallingConvention = CallingConvention.Winapi)]
        internal static unsafe extern VkResult vkGetQueryPoolResults(IntPtr device, UInt64 queryPool, UInt32 firstQuery, UInt32 queryCount, UIntPtr dataSize, IntPtr pData, VkDeviceSize stride, VkQueryResultFlags flags);

        [DllImport(VulkanLibrary, CallingConvention = CallingConvention.Winapi)]
        internal static unsafe extern VkResult vkCreateBuffer(IntPtr device, VkBufferCreateInfo* pCreateInfo, VkAllocationCallbacks* pAllocator, UInt64* pBuffer);

        [DllImport(VulkanLibrary, CallingConvention = CallingConvention.Winapi)]
        internal static unsafe extern void vkDestroyBuffer(IntPtr device, UInt64 buffer, VkAllocationCallbacks* pAllocator);

        [DllImport(VulkanLibrary, CallingConvention = CallingConvention.Winapi)]
        internal static unsafe extern VkResult vkCreateBufferView(IntPtr device, VkBufferViewCreateInfo* pCreateInfo, VkAllocationCallbacks* pAllocator, UInt64* pView);

        [DllImport(VulkanLibrary, CallingConvention = CallingConvention.Winapi)]
        internal static unsafe extern void vkDestroyBufferView(IntPtr device, UInt64 bufferView, VkAllocationCallbacks* pAllocator);

        [DllImport(VulkanLibrary, CallingConvention = CallingConvention.Winapi)]
        internal static unsafe extern VkResult vkCreateImage(IntPtr device, VkImageCreateInfo* pCreateInfo, VkAllocationCallbacks* pAllocator, UInt64* pImage);

        [DllImport(VulkanLibrary, CallingConvention = CallingConvention.Winapi)]
        internal static unsafe extern void vkDestroyImage(IntPtr device, UInt64 image, VkAllocationCallbacks* pAllocator);

        [DllImport(VulkanLibrary, CallingConvention = CallingConvention.Winapi)]
        internal static unsafe extern void vkGetImageSubresourceLayout(IntPtr device, UInt64 image, VkImageSubresource* pSubresource, VkSubresourceLayout* pLayout);

        [DllImport(VulkanLibrary, CallingConvention = CallingConvention.Winapi)]
        internal static unsafe extern VkResult vkCreateImageView(IntPtr device, VkImageViewCreateInfo* pCreateInfo, VkAllocationCallbacks* pAllocator, UInt64* pView);

        [DllImport(VulkanLibrary, CallingConvention = CallingConvention.Winapi)]
        internal static unsafe extern void vkDestroyImageView(IntPtr device, UInt64 imageView, VkAllocationCallbacks* pAllocator);

        [DllImport(VulkanLibrary, CallingConvention = CallingConvention.Winapi)]
        internal static unsafe extern VkResult vkCreateShaderModule(IntPtr device, VkShaderModuleCreateInfo* pCreateInfo, VkAllocationCallbacks* pAllocator, UInt64* pShaderModule);

        [DllImport(VulkanLibrary, CallingConvention = CallingConvention.Winapi)]
        internal static unsafe extern void vkDestroyShaderModule(IntPtr device, UInt64 shaderModule, VkAllocationCallbacks* pAllocator);

        [DllImport(VulkanLibrary, CallingConvention = CallingConvention.Winapi)]
        internal static unsafe extern VkResult vkCreatePipelineCache(IntPtr device, VkPipelineCacheCreateInfo* pCreateInfo, VkAllocationCallbacks* pAllocator, UInt64* pPipelineCache);

        [DllImport(VulkanLibrary, CallingConvention = CallingConvention.Winapi)]
        internal static unsafe extern void vkDestroyPipelineCache(IntPtr device, UInt64 pipelineCache, VkAllocationCallbacks* pAllocator);

        [DllImport(VulkanLibrary, CallingConvention = CallingConvention.Winapi)]
        internal static unsafe extern VkResult vkGetPipelineCacheData(IntPtr device, UInt64 pipelineCache, UInt32* pDataSize, byte* pData);

        [DllImport(VulkanLibrary, CallingConvention = CallingConvention.Winapi)]
        internal static unsafe extern VkResult vkMergePipelineCaches(IntPtr device, UInt64 dstCache, UInt32 srcCacheCount, UInt64* pSrcCaches);

        [DllImport(VulkanLibrary, CallingConvention = CallingConvention.Winapi)]
        internal static unsafe extern VkResult vkCreateGraphicsPipelines(IntPtr device, UInt64 pipelineCache, UInt32 createInfoCount, VkGraphicsPipelineCreateInfo* pCreateInfos, VkAllocationCallbacks* pAllocator, UInt64* pPipelines);

        [DllImport(VulkanLibrary, CallingConvention = CallingConvention.Winapi)]
        internal static unsafe extern VkResult vkCreateComputePipelines(IntPtr device, UInt64 pipelineCache, UInt32 createInfoCount, VkComputePipelineCreateInfo* pCreateInfos, VkAllocationCallbacks* pAllocator, UInt64* pPipelines);

        [DllImport(VulkanLibrary, CallingConvention = CallingConvention.Winapi)]
        internal static unsafe extern void vkDestroyPipeline(IntPtr device, UInt64 pipeline, VkAllocationCallbacks* pAllocator);

        [DllImport(VulkanLibrary, CallingConvention = CallingConvention.Winapi)]
        internal static unsafe extern VkResult vkCreatePipelineLayout(IntPtr device, VkPipelineLayoutCreateInfo* pCreateInfo, VkAllocationCallbacks* pAllocator, UInt64* pPipelineLayout);

        [DllImport(VulkanLibrary, CallingConvention = CallingConvention.Winapi)]
        internal static unsafe extern void vkDestroyPipelineLayout(IntPtr device, UInt64 pipelineLayout, VkAllocationCallbacks* pAllocator);

        [DllImport(VulkanLibrary, CallingConvention = CallingConvention.Winapi)]
        internal static unsafe extern VkResult vkCreateSampler(IntPtr device, VkSamplerCreateInfo* pCreateInfo, VkAllocationCallbacks* pAllocator, UInt64* pSampler);

        [DllImport(VulkanLibrary, CallingConvention = CallingConvention.Winapi)]
        internal static unsafe extern void vkDestroySampler(IntPtr device, UInt64 sampler, VkAllocationCallbacks* pAllocator);

        [DllImport(VulkanLibrary, CallingConvention = CallingConvention.Winapi)]
        internal static unsafe extern VkResult vkCreateDescriptorSetLayout(IntPtr device, VkDescriptorSetLayoutCreateInfo* pCreateInfo, VkAllocationCallbacks* pAllocator, UInt64* pSetLayout);

        [DllImport(VulkanLibrary, CallingConvention = CallingConvention.Winapi)]
        internal static unsafe extern void vkDestroyDescriptorSetLayout(IntPtr device, UInt64 descriptorSetLayout, VkAllocationCallbacks* pAllocator);

        [DllImport(VulkanLibrary, CallingConvention = CallingConvention.Winapi)]
        internal static unsafe extern VkResult vkCreateDescriptorPool(IntPtr device, VkDescriptorPoolCreateInfo* pCreateInfo, VkAllocationCallbacks* pAllocator, UInt64* pDescriptorPool);

        [DllImport(VulkanLibrary, CallingConvention = CallingConvention.Winapi)]
        internal static unsafe extern void vkDestroyDescriptorPool(IntPtr device, UInt64 descriptorPool, VkAllocationCallbacks* pAllocator);

        [DllImport(VulkanLibrary, CallingConvention = CallingConvention.Winapi)]
        internal static unsafe extern VkResult vkResetDescriptorPool(IntPtr device, UInt64 descriptorPool, UInt32 flags);

        [DllImport(VulkanLibrary, CallingConvention = CallingConvention.Winapi)]
        internal static unsafe extern VkResult vkAllocateDescriptorSets(IntPtr device, VkDescriptorSetAllocateInfo* pAllocateInfo, UInt64* pDescriptorSets);

        [DllImport(VulkanLibrary, CallingConvention = CallingConvention.Winapi)]
        internal static unsafe extern VkResult vkFreeDescriptorSets(IntPtr device, UInt64 descriptorPool, UInt32 descriptorSetCount, UInt64* pDescriptorSets);

        [DllImport(VulkanLibrary, CallingConvention = CallingConvention.Winapi)]
        internal static unsafe extern void vkUpdateDescriptorSets(IntPtr device, UInt32 descriptorWriteCount, VkWriteDescriptorSet* pDescriptorWrites, UInt32 descriptorCopyCount, VkCopyDescriptorSet* pDescriptorCopies);

        [DllImport(VulkanLibrary, CallingConvention = CallingConvention.Winapi)]
        internal static unsafe extern VkResult vkCreateFramebuffer(IntPtr device, VkFramebufferCreateInfo* pCreateInfo, VkAllocationCallbacks* pAllocator, UInt64* pFramebuffer);

        [DllImport(VulkanLibrary, CallingConvention = CallingConvention.Winapi)]
        internal static unsafe extern void vkDestroyFramebuffer(IntPtr device, UInt64 framebuffer, VkAllocationCallbacks* pAllocator);

        [DllImport(VulkanLibrary, CallingConvention = CallingConvention.Winapi)]
        internal static unsafe extern VkResult vkCreateRenderPass(IntPtr device, VkRenderPassCreateInfo* pCreateInfo, VkAllocationCallbacks* pAllocator, UInt64* pRenderPass);

        [DllImport(VulkanLibrary, CallingConvention = CallingConvention.Winapi)]
        internal static unsafe extern void vkDestroyRenderPass(IntPtr device, UInt64 renderPass, VkAllocationCallbacks* pAllocator);

        [DllImport(VulkanLibrary, CallingConvention = CallingConvention.Winapi)]
        internal static unsafe extern void vkGetRenderAreaGranularity(IntPtr device, UInt64 renderPass, VkExtent2D* pGranularity);

        [DllImport(VulkanLibrary, CallingConvention = CallingConvention.Winapi)]
        internal static unsafe extern VkResult vkCreateCommandPool(IntPtr device, VkCommandPoolCreateInfo* pCreateInfo, VkAllocationCallbacks* pAllocator, UInt64* pCommandPool);

        [DllImport(VulkanLibrary, CallingConvention = CallingConvention.Winapi)]
        internal static unsafe extern void vkDestroyCommandPool(IntPtr device, UInt64 commandPool, VkAllocationCallbacks* pAllocator);

        [DllImport(VulkanLibrary, CallingConvention = CallingConvention.Winapi)]
        internal static unsafe extern VkResult vkResetCommandPool(IntPtr device, UInt64 commandPool, VkCommandPoolResetFlags flags);

        [DllImport(VulkanLibrary, CallingConvention = CallingConvention.Winapi)]
        internal static unsafe extern VkResult vkAllocateCommandBuffers(IntPtr device, VkCommandBufferAllocateInfo* pAllocateInfo, IntPtr* pCommandBuffers);

        [DllImport(VulkanLibrary, CallingConvention = CallingConvention.Winapi)]
        internal static unsafe extern void vkFreeCommandBuffers(IntPtr device, UInt64 commandPool, UInt32 commandBufferCount, IntPtr* pCommandBuffers);

        [DllImport(VulkanLibrary, CallingConvention = CallingConvention.Winapi)]
        internal static unsafe extern VkResult vkBeginCommandBuffer(IntPtr commandBuffer, VkCommandBufferBeginInfo* pBeginInfo);

        [DllImport(VulkanLibrary, CallingConvention = CallingConvention.Winapi)]
        internal static unsafe extern VkResult vkEndCommandBuffer(IntPtr commandBuffer);

        [DllImport(VulkanLibrary, CallingConvention = CallingConvention.Winapi)]
        internal static unsafe extern VkResult vkResetCommandBuffer(IntPtr commandBuffer, VkCommandBufferResetFlags flags);

        [DllImport(VulkanLibrary, CallingConvention = CallingConvention.Winapi)]
        internal static unsafe extern void vkCmdBindPipeline(IntPtr commandBuffer, VkPipelineBindPoint pipelineBindPoint, UInt64 pipeline);

        [DllImport(VulkanLibrary, CallingConvention = CallingConvention.Winapi)]
        internal static unsafe extern void vkCmdSetViewport(IntPtr commandBuffer, UInt32 firstViewport, UInt32 viewportCount, VkViewport* pViewports);

        [DllImport(VulkanLibrary, CallingConvention = CallingConvention.Winapi)]
        internal static unsafe extern void vkCmdSetScissor(IntPtr commandBuffer, UInt32 firstScissor, UInt32 scissorCount, VkRect2D* pScissors);

        [DllImport(VulkanLibrary, CallingConvention = CallingConvention.Winapi)]
        internal static unsafe extern void vkCmdSetLineWidth(IntPtr commandBuffer, float lineWidth);

        [DllImport(VulkanLibrary, CallingConvention = CallingConvention.Winapi)]
        internal static unsafe extern void vkCmdSetDepthBias(IntPtr commandBuffer, float depthBiasConstantFactor, float depthBiasClamp, float depthBiasSlopeFactor);

        [DllImport(VulkanLibrary, CallingConvention = CallingConvention.Winapi)]
        internal static unsafe extern void vkCmdSetBlendConstants(IntPtr commandBuffer, float* blendConstants);

        [DllImport(VulkanLibrary, CallingConvention = CallingConvention.Winapi)]
        internal static unsafe extern void vkCmdSetDepthBounds(IntPtr commandBuffer, float minDepthBounds, float maxDepthBounds);

        [DllImport(VulkanLibrary, CallingConvention = CallingConvention.Winapi)]
        internal static unsafe extern void vkCmdSetStencilCompareMask(IntPtr commandBuffer, VkStencilFaceFlags faceMask, UInt32 compareMask);

        [DllImport(VulkanLibrary, CallingConvention = CallingConvention.Winapi)]
        internal static unsafe extern void vkCmdSetStencilWriteMask(IntPtr commandBuffer, VkStencilFaceFlags faceMask, UInt32 writeMask);

        [DllImport(VulkanLibrary, CallingConvention = CallingConvention.Winapi)]
        internal static unsafe extern void vkCmdSetStencilReference(IntPtr commandBuffer, VkStencilFaceFlags faceMask, UInt32 reference);

        [DllImport(VulkanLibrary, CallingConvention = CallingConvention.Winapi)]
        internal static unsafe extern void vkCmdBindDescriptorSets(IntPtr commandBuffer, VkPipelineBindPoint pipelineBindPoint, UInt64 layout, UInt32 firstSet, UInt32 descriptorSetCount, UInt64* pDescriptorSets, UInt32 dynamicOffsetCount, UInt32* pDynamicOffsets);

        [DllImport(VulkanLibrary, CallingConvention = CallingConvention.Winapi)]
        internal static unsafe extern void vkCmdBindIndexBuffer(IntPtr commandBuffer, UInt64 buffer, VkDeviceSize offset, VkIndexType indexType);

        [DllImport(VulkanLibrary, CallingConvention = CallingConvention.Winapi)]
        internal static unsafe extern void vkCmdBindVertexBuffers(IntPtr commandBuffer, UInt32 firstBinding, UInt32 bindingCount, UInt64* pBuffers, VkDeviceSize* pOffsets);

        [DllImport(VulkanLibrary, CallingConvention = CallingConvention.Winapi)]
        internal static unsafe extern void vkCmdDraw(IntPtr commandBuffer, UInt32 vertexCount, UInt32 instanceCount, UInt32 firstVertex, UInt32 firstInstance);

        [DllImport(VulkanLibrary, CallingConvention = CallingConvention.Winapi)]
        internal static unsafe extern void vkCmdDrawIndexed(IntPtr commandBuffer, UInt32 indexCount, UInt32 instanceCount, UInt32 firstIndex, Int32 vertexOffset, UInt32 firstInstance);

        [DllImport(VulkanLibrary, CallingConvention = CallingConvention.Winapi)]
        internal static unsafe extern void vkCmdDrawIndirect(IntPtr commandBuffer, UInt64 buffer, VkDeviceSize offset, UInt32 drawCount, UInt32 stride);

        [DllImport(VulkanLibrary, CallingConvention = CallingConvention.Winapi)]
        internal static unsafe extern void vkCmdDrawIndexedIndirect(IntPtr commandBuffer, UInt64 buffer, VkDeviceSize offset, UInt32 drawCount, UInt32 stride);

        [DllImport(VulkanLibrary, CallingConvention = CallingConvention.Winapi)]
        internal static unsafe extern void vkCmdDispatch(IntPtr commandBuffer, UInt32 groupCountX, UInt32 groupCountY, UInt32 groupCountZ);

        [DllImport(VulkanLibrary, CallingConvention = CallingConvention.Winapi)]
        internal static unsafe extern void vkCmdDispatchIndirect(IntPtr commandBuffer, UInt64 buffer, VkDeviceSize offset);

        [DllImport(VulkanLibrary, CallingConvention = CallingConvention.Winapi)]
        internal static unsafe extern void vkCmdCopyBuffer(IntPtr commandBuffer, UInt64 srcBuffer, UInt64 dstBuffer, UInt32 regionCount, VkBufferCopy* pRegions);

        [DllImport(VulkanLibrary, CallingConvention = CallingConvention.Winapi)]
        internal static unsafe extern void vkCmdCopyImage(IntPtr commandBuffer, UInt64 srcImage, VkImageLayout srcImageLayout, UInt64 dstImage, VkImageLayout dstImageLayout, UInt32 regionCount, VkImageCopy* pRegions);

        [DllImport(VulkanLibrary, CallingConvention = CallingConvention.Winapi)]
        internal static unsafe extern void vkCmdBlitImage(IntPtr commandBuffer, UInt64 srcImage, VkImageLayout srcImageLayout, UInt64 dstImage, VkImageLayout dstImageLayout, UInt32 regionCount, VkImageBlit* pRegions, VkFilter filter);

        [DllImport(VulkanLibrary, CallingConvention = CallingConvention.Winapi)]
        internal static unsafe extern void vkCmdCopyBufferToImage(IntPtr commandBuffer, UInt64 srcBuffer, UInt64 dstImage, VkImageLayout dstImageLayout, UInt32 regionCount, VkBufferImageCopy* pRegions);

        [DllImport(VulkanLibrary, CallingConvention = CallingConvention.Winapi)]
        internal static unsafe extern void vkCmdCopyImageToBuffer(IntPtr commandBuffer, UInt64 srcImage, VkImageLayout srcImageLayout, UInt64 dstBuffer, UInt32 regionCount, VkBufferImageCopy* pRegions);

        [DllImport(VulkanLibrary, CallingConvention = CallingConvention.Winapi)]
        internal static unsafe extern void vkCmdUpdateBuffer(IntPtr commandBuffer, UInt64 dstBuffer, VkDeviceSize dstOffset, VkDeviceSize dataSize, UInt32* pData);

        [DllImport(VulkanLibrary, CallingConvention = CallingConvention.Winapi)]
        internal static unsafe extern void vkCmdFillBuffer(IntPtr commandBuffer, UInt64 dstBuffer, VkDeviceSize dstOffset, VkDeviceSize size, UInt32 data);

        [DllImport(VulkanLibrary, CallingConvention = CallingConvention.Winapi)]
        internal static unsafe extern void vkCmdClearColorImage(IntPtr commandBuffer, UInt64 image, VkImageLayout imageLayout, VkClearColorValue* pColor, UInt32 rangeCount, VkImageSubresourceRange* pRanges);

        [DllImport(VulkanLibrary, CallingConvention = CallingConvention.Winapi)]
        internal static unsafe extern void vkCmdClearDepthStencilImage(IntPtr commandBuffer, UInt64 image, VkImageLayout imageLayout, VkClearDepthStencilValue* pDepthStencil, UInt32 rangeCount, VkImageSubresourceRange* pRanges);

        [DllImport(VulkanLibrary, CallingConvention = CallingConvention.Winapi)]
        internal static unsafe extern void vkCmdClearAttachments(IntPtr commandBuffer, UInt32 attachmentCount, VkClearAttachment* pAttachments, UInt32 rectCount, VkClearRect* pRects);

        [DllImport(VulkanLibrary, CallingConvention = CallingConvention.Winapi)]
        internal static unsafe extern void vkCmdResolveImage(IntPtr commandBuffer, UInt64 srcImage, VkImageLayout srcImageLayout, UInt64 dstImage, VkImageLayout dstImageLayout, UInt32 regionCount, VkImageResolve* pRegions);

        [DllImport(VulkanLibrary, CallingConvention = CallingConvention.Winapi)]
        internal static unsafe extern VkResult vkCmdSetEvent(IntPtr commandBuffer, UInt64 @event, VkPipelineStageFlags stageMask);

        [DllImport(VulkanLibrary, CallingConvention = CallingConvention.Winapi)]
        internal static unsafe extern VkResult vkCmdResetEvent(IntPtr commandBuffer, UInt64 @event, VkPipelineStageFlags stageMask);

        [DllImport(VulkanLibrary, CallingConvention = CallingConvention.Winapi)]
        internal static unsafe extern void vkCmdWaitEvents(IntPtr commandBuffer, UInt32 eventCount, UInt64* pEvents, VkPipelineStageFlags srcStageMask, VkPipelineStageFlags dstStageMask, UInt32 memoryBarrierCount, VkMemoryBarrier* pMemoryBarriers, UInt32 bufferMemoryBarrierCount, VkBufferMemoryBarrier* pBufferMemoryBarriers, UInt32 imageMemoryBarrierCount, VkImageMemoryBarrier* pImageMemoryBarriers);

        [DllImport(VulkanLibrary, CallingConvention = CallingConvention.Winapi)]
        internal static unsafe extern void vkCmdPipelineBarrier(IntPtr commandBuffer, VkPipelineStageFlags srcStageMask, VkPipelineStageFlags dstStageMask, VkDependencyFlags dependencyFlags, UInt32 memoryBarrierCount, VkMemoryBarrier* pMemoryBarriers, UInt32 bufferMemoryBarrierCount, VkBufferMemoryBarrier* pBufferMemoryBarriers, UInt32 imageMemoryBarrierCount, VkImageMemoryBarrier* pImageMemoryBarriers);

        [DllImport(VulkanLibrary, CallingConvention = CallingConvention.Winapi)]
        internal static unsafe extern void vkCmdBeginQuery(IntPtr commandBuffer, UInt64 queryPool, UInt32 query, VkQueryControlFlags flags);

        [DllImport(VulkanLibrary, CallingConvention = CallingConvention.Winapi)]
        internal static unsafe extern void vkCmdEndQuery(IntPtr commandBuffer, UInt64 queryPool, UInt32 query);

        [DllImport(VulkanLibrary, CallingConvention = CallingConvention.Winapi)]
        internal static unsafe extern void vkCmdResetQueryPool(IntPtr commandBuffer, UInt64 queryPool, UInt32 firstQuery, UInt32 queryCount);

        [DllImport(VulkanLibrary, CallingConvention = CallingConvention.Winapi)]
        internal static unsafe extern void vkCmdWriteTimestamp(IntPtr commandBuffer, VkPipelineStageFlags pipelineStage, UInt64 queryPool, UInt32 query);

        [DllImport(VulkanLibrary, CallingConvention = CallingConvention.Winapi)]
        internal static unsafe extern void vkCmdCopyQueryPoolResults(IntPtr commandBuffer, UInt64 queryPool, UInt32 firstQuery, UInt32 queryCount, UInt64 dstBuffer, VkDeviceSize dstOffset, VkDeviceSize stride, VkQueryResultFlags flags);

        [DllImport(VulkanLibrary, CallingConvention = CallingConvention.Winapi)]
        internal static unsafe extern void vkCmdPushConstants(IntPtr commandBuffer, UInt64 layout, VkShaderStageFlags stageFlags, UInt32 offset, UInt32 size, IntPtr pValues);

        [DllImport(VulkanLibrary, CallingConvention = CallingConvention.Winapi)]
        internal static unsafe extern void vkCmdBeginRenderPass(IntPtr commandBuffer, VkRenderPassBeginInfo* pRenderPassBegin, VkSubpassContents contents);

        [DllImport(VulkanLibrary, CallingConvention = CallingConvention.Winapi)]
        internal static unsafe extern void vkCmdNextSubpass(IntPtr commandBuffer, VkSubpassContents contents);

        [DllImport(VulkanLibrary, CallingConvention = CallingConvention.Winapi)]
        internal static unsafe extern void vkCmdEndRenderPass(IntPtr commandBuffer);

        [DllImport(VulkanLibrary, CallingConvention = CallingConvention.Winapi)]
        internal static unsafe extern void vkCmdExecuteCommands(IntPtr commandBuffer, UInt32 commandBufferCount, IntPtr* pCommandBuffers);

        [DllImport(VulkanLibrary, CallingConvention = CallingConvention.Winapi)]
        internal static unsafe extern VkResult vkGetPhysicalDeviceDisplayPropertiesKHR(IntPtr physicalDevice, UInt32* pPropertyCount, VkDisplayPropertiesKhr* pProperties);

        [DllImport(VulkanLibrary, CallingConvention = CallingConvention.Winapi)]
        internal static unsafe extern VkResult vkGetPhysicalDeviceDisplayPlanePropertiesKHR(IntPtr physicalDevice, UInt32* pPropertyCount, VkDisplayPlanePropertiesKhr* pProperties);

        [DllImport(VulkanLibrary, CallingConvention = CallingConvention.Winapi)]
        internal static unsafe extern VkResult vkGetDisplayPlaneSupportedDisplaysKHR(IntPtr physicalDevice, UInt32 planeIndex, UInt32* pDisplayCount, UInt64* pDisplays);

        [DllImport(VulkanLibrary, CallingConvention = CallingConvention.Winapi)]
        internal static unsafe extern VkResult vkGetDisplayModePropertiesKHR(IntPtr physicalDevice, UInt64 display, UInt32* pPropertyCount, VkDisplayModePropertiesKhr* pProperties);

        [DllImport(VulkanLibrary, CallingConvention = CallingConvention.Winapi)]
        internal static unsafe extern VkResult vkCreateDisplayModeKHR(IntPtr physicalDevice, UInt64 display, VkDisplayModeCreateInfoKhr* pCreateInfo, VkAllocationCallbacks* pAllocator, UInt64* pMode);

        [DllImport(VulkanLibrary, CallingConvention = CallingConvention.Winapi)]
        internal static unsafe extern VkResult vkGetDisplayPlaneCapabilitiesKHR(IntPtr physicalDevice, UInt64 mode, UInt32 planeIndex, VkDisplayPlaneCapabilitiesKhr* pCapabilities);

        [DllImport(VulkanLibrary, CallingConvention = CallingConvention.Winapi)]
        internal static unsafe extern VkResult vkCreateDisplayPlaneSurfaceKHR(IntPtr instance, VkDisplaySurfaceCreateInfoKhr* pCreateInfo, VkAllocationCallbacks* pAllocator, UInt64* pSurface);

        [DllImport(VulkanLibrary, CallingConvention = CallingConvention.Winapi)]
        internal static unsafe extern VkResult vkCreateSharedSwapchainsKHR(IntPtr device, UInt32 swapchainCount, VkSwapchainCreateInfoKhr* pCreateInfos, VkAllocationCallbacks* pAllocator, UInt64* pSwapchains);

        [DllImport(VulkanLibrary, CallingConvention = CallingConvention.Winapi)]
        internal static unsafe extern void vkDestroySurfaceKHR(IntPtr instance, UInt64 surface, VkAllocationCallbacks* pAllocator);

        [DllImport(VulkanLibrary, CallingConvention = CallingConvention.Winapi)]
        internal static unsafe extern VkResult vkGetPhysicalDeviceSurfaceSupportKHR(IntPtr physicalDevice, UInt32 queueFamilyIndex, UInt64 surface, VkBool32* pSupported);

        [DllImport(VulkanLibrary, CallingConvention = CallingConvention.Winapi)]
        internal static unsafe extern VkResult vkGetPhysicalDeviceSurfaceCapabilitiesKHR(IntPtr physicalDevice, UInt64 surface, VkSurfaceCapabilitiesKhr* pSurfaceCapabilities);

        [DllImport(VulkanLibrary, CallingConvention = CallingConvention.Winapi)]
        internal static unsafe extern VkResult vkGetPhysicalDeviceSurfaceFormatsKHR(IntPtr physicalDevice, UInt64 surface, UInt32* pSurfaceFormatCount, VkSurfaceFormatKhr* pSurfaceFormats);

        [DllImport(VulkanLibrary, CallingConvention = CallingConvention.Winapi)]
        internal static unsafe extern VkResult vkGetPhysicalDeviceSurfacePresentModesKHR(IntPtr physicalDevice, UInt64 surface, UInt32* pPresentModeCount, VkPresentModeKhr* pPresentModes);

        [DllImport(VulkanLibrary, CallingConvention = CallingConvention.Winapi)]
        internal static unsafe extern VkResult vkCreateSwapchainKHR(IntPtr device, VkSwapchainCreateInfoKhr* pCreateInfo, VkAllocationCallbacks* pAllocator, UInt64* pSwapchain);

        [DllImport(VulkanLibrary, CallingConvention = CallingConvention.Winapi)]
        internal static unsafe extern void vkDestroySwapchainKHR(IntPtr device, UInt64 swapchain, VkAllocationCallbacks* pAllocator);

        [DllImport(VulkanLibrary, CallingConvention = CallingConvention.Winapi)]
        internal static unsafe extern VkResult vkGetSwapchainImagesKHR(IntPtr device, UInt64 swapchain, UInt32* pSwapchainImageCount, UInt64* pSwapchainImages);

        [DllImport(VulkanLibrary, CallingConvention = CallingConvention.Winapi)]
        internal static unsafe extern VkResult vkAcquireNextImageKHR(IntPtr device, UInt64 swapchain, UInt64 timeout, UInt64 semaphore, UInt64 fence, UInt32* pImageIndex);

        [DllImport(VulkanLibrary, CallingConvention = CallingConvention.Winapi)]
        internal static unsafe extern VkResult vkQueuePresentKHR(IntPtr queue, VkPresentInfoKhr* pPresentInfo);

        [DllImport(VulkanLibrary, CallingConvention = CallingConvention.Winapi)]
        internal static unsafe extern VkResult vkCreateViSurfaceNN(IntPtr instance, VkViSurfaceCreateInfoNn* pCreateInfo, VkAllocationCallbacks* pAllocator, UInt64* pSurface);

        internal unsafe delegate VkResult vkCreateDebugReportCallbackEXT(IntPtr instance, VkDebugReportCallbackCreateInfoExt* pCreateInfo, VkAllocationCallbacks* pAllocator, UInt64* pCallback);

        internal unsafe delegate void vkDestroyDebugReportCallbackEXT(IntPtr instance, UInt64 callback, VkAllocationCallbacks* pAllocator);

        internal unsafe delegate void vkDebugReportMessageEXT(IntPtr instance, VkDebugReportFlagsExt flags, VkDebugReportObjectTypeExt objectType, UInt64 @object, UIntPtr location, Int32 messageCode, string pLayerPrefix, string pMessage);

        [DllImport(VulkanLibrary, CallingConvention = CallingConvention.Winapi)]
        internal static unsafe extern VkResult vkDebugMarkerSetObjectNameEXT(IntPtr device, VkDebugMarkerObjectNameInfoExt* pNameInfo);

        [DllImport(VulkanLibrary, CallingConvention = CallingConvention.Winapi)]
        internal static unsafe extern VkResult vkDebugMarkerSetObjectTagEXT(IntPtr device, VkDebugMarkerObjectTagInfoExt* pTagInfo);

        [DllImport(VulkanLibrary, CallingConvention = CallingConvention.Winapi)]
        internal static unsafe extern void vkCmdDebugMarkerBeginEXT(IntPtr commandBuffer, VkDebugMarkerMarkerInfoExt* pMarkerInfo);

        [DllImport(VulkanLibrary, CallingConvention = CallingConvention.Winapi)]
        internal static unsafe extern void vkCmdDebugMarkerEndEXT(IntPtr commandBuffer);

        [DllImport(VulkanLibrary, CallingConvention = CallingConvention.Winapi)]
        internal static unsafe extern void vkCmdDebugMarkerInsertEXT(IntPtr commandBuffer, VkDebugMarkerMarkerInfoExt* pMarkerInfo);

        [DllImport(VulkanLibrary, CallingConvention = CallingConvention.Winapi)]
        internal static unsafe extern VkResult vkGetPhysicalDeviceExternalImageFormatPropertiesNV(IntPtr physicalDevice, VkFormat format, VkImageType type, VkImageTiling tiling, VkImageUsageFlags usage, VkImageCreateFlags flags, VkExternalMemoryHandleTypeFlagsNv externalHandleType, VkExternalImageFormatPropertiesNv* pExternalImageFormatProperties);

        [DllImport(VulkanLibrary, CallingConvention = CallingConvention.Winapi)]
        internal static unsafe extern void vkCmdDrawIndirectCountAMD(IntPtr commandBuffer, UInt64 buffer, VkDeviceSize offset, UInt64 countBuffer, VkDeviceSize countBufferOffset, UInt32 maxDrawCount, UInt32 stride);

        [DllImport(VulkanLibrary, CallingConvention = CallingConvention.Winapi)]
        internal static unsafe extern void vkCmdDrawIndexedIndirectCountAMD(IntPtr commandBuffer, UInt64 buffer, VkDeviceSize offset, UInt64 countBuffer, VkDeviceSize countBufferOffset, UInt32 maxDrawCount, UInt32 stride);

        [DllImport(VulkanLibrary, CallingConvention = CallingConvention.Winapi)]
        internal static unsafe extern void vkCmdProcessCommandsNVX(IntPtr commandBuffer, VkCmdProcessCommandsInfoNvx* pProcessCommandsInfo);

        [DllImport(VulkanLibrary, CallingConvention = CallingConvention.Winapi)]
        internal static unsafe extern void vkCmdReserveSpaceForCommandsNVX(IntPtr commandBuffer, VkCmdReserveSpaceForCommandsInfoNvx* pReserveSpaceInfo);

        [DllImport(VulkanLibrary, CallingConvention = CallingConvention.Winapi)]
        internal static unsafe extern VkResult vkCreateIndirectCommandsLayoutNVX(IntPtr device, VkIndirectCommandsLayoutCreateInfoNvx* pCreateInfo, VkAllocationCallbacks* pAllocator, UInt64* pIndirectCommandsLayout);

        [DllImport(VulkanLibrary, CallingConvention = CallingConvention.Winapi)]
        internal static unsafe extern void vkDestroyIndirectCommandsLayoutNVX(IntPtr device, UInt64 indirectCommandsLayout, VkAllocationCallbacks* pAllocator);

        [DllImport(VulkanLibrary, CallingConvention = CallingConvention.Winapi)]
        internal static unsafe extern VkResult vkCreateObjectTableNVX(IntPtr device, VkObjectTableCreateInfoNvx* pCreateInfo, VkAllocationCallbacks* pAllocator, UInt64* pObjectTable);

        [DllImport(VulkanLibrary, CallingConvention = CallingConvention.Winapi)]
        internal static unsafe extern void vkDestroyObjectTableNVX(IntPtr device, UInt64 objectTable, VkAllocationCallbacks* pAllocator);

        [DllImport(VulkanLibrary, CallingConvention = CallingConvention.Winapi)]
        internal static unsafe extern VkResult vkRegisterObjectsNVX(IntPtr device, UInt64 objectTable, UInt32 objectCount, VkObjectTableEntryNvx* ppObjectTableEntries, UInt32* pObjectIndices);

        [DllImport(VulkanLibrary, CallingConvention = CallingConvention.Winapi)]
        internal static unsafe extern VkResult vkUnregisterObjectsNVX(IntPtr device, UInt64 objectTable, UInt32 objectCount, VkObjectEntryTypeNvx* pObjectEntryTypes, UInt32* pObjectIndices);

        [DllImport(VulkanLibrary, CallingConvention = CallingConvention.Winapi)]
        internal static unsafe extern void vkGetPhysicalDeviceGeneratedCommandsPropertiesNVX(IntPtr physicalDevice, VkDeviceGeneratedCommandsFeaturesNvx* pFeatures, VkDeviceGeneratedCommandsLimitsNvx* pLimits);

        [DllImport(VulkanLibrary, CallingConvention = CallingConvention.Winapi)]
        internal static unsafe extern void vkGetPhysicalDeviceFeatures2KHR(IntPtr physicalDevice, VkPhysicalDeviceFeatures2Khr* pFeatures);

        [DllImport(VulkanLibrary, CallingConvention = CallingConvention.Winapi)]
        internal static unsafe extern void vkGetPhysicalDeviceProperties2KHR(IntPtr physicalDevice, VkPhysicalDeviceProperties2Khr* pProperties);

        [DllImport(VulkanLibrary, CallingConvention = CallingConvention.Winapi)]
        internal static unsafe extern void vkGetPhysicalDeviceFormatProperties2KHR(IntPtr physicalDevice, VkFormat format, VkFormatProperties2Khr* pFormatProperties);

        [DllImport(VulkanLibrary, CallingConvention = CallingConvention.Winapi)]
        internal static unsafe extern VkResult vkGetPhysicalDeviceImageFormatProperties2KHR(IntPtr physicalDevice, VkPhysicalDeviceImageFormatInfo2Khr* pImageFormatInfo, VkImageFormatProperties2Khr* pImageFormatProperties);

        [DllImport(VulkanLibrary, CallingConvention = CallingConvention.Winapi)]
        internal static unsafe extern void vkGetPhysicalDeviceQueueFamilyProperties2KHR(IntPtr physicalDevice, UInt32* pQueueFamilyPropertyCount, VkQueueFamilyProperties2Khr* pQueueFamilyProperties);

        [DllImport(VulkanLibrary, CallingConvention = CallingConvention.Winapi)]
        internal static unsafe extern void vkGetPhysicalDeviceMemoryProperties2KHR(IntPtr physicalDevice, VkPhysicalDeviceMemoryProperties2Khr* pMemoryProperties);

        [DllImport(VulkanLibrary, CallingConvention = CallingConvention.Winapi)]
        internal static unsafe extern void vkGetPhysicalDeviceSparseImageFormatProperties2KHR(IntPtr physicalDevice, VkPhysicalDeviceSparseImageFormatInfo2Khr* pFormatInfo, UInt32* pPropertyCount, VkSparseImageFormatProperties2Khr* pProperties);

        [DllImport(VulkanLibrary, CallingConvention = CallingConvention.Winapi)]
        internal static unsafe extern void vkCmdPushDescriptorSetKHR(IntPtr commandBuffer, VkPipelineBindPoint pipelineBindPoint, UInt64 layout, UInt32 set, UInt32 descriptorWriteCount, VkWriteDescriptorSet* pDescriptorWrites);

        [DllImport(VulkanLibrary, CallingConvention = CallingConvention.Winapi)]
        internal static unsafe extern void vkTrimCommandPoolKHR(IntPtr device, UInt64 commandPool, UInt32 flags);

        [DllImport(VulkanLibrary, CallingConvention = CallingConvention.Winapi)]
        internal static unsafe extern void vkGetPhysicalDeviceExternalBufferPropertiesKHR(IntPtr physicalDevice, VkPhysicalDeviceExternalBufferInfoKhr* pExternalBufferInfo, VkExternalBufferPropertiesKhr* pExternalBufferProperties);

        [DllImport(VulkanLibrary, CallingConvention = CallingConvention.Winapi)]
        internal static unsafe extern VkResult vkGetMemoryWin32HandleKHR(IntPtr device, VkMemoryGetWin32HandleInfoKhr* pGetWin32HandleInfo, IntPtr* pHandle);

        [DllImport(VulkanLibrary, CallingConvention = CallingConvention.Winapi)]
        internal static unsafe extern VkResult vkGetMemoryWin32HandlePropertiesKHR(IntPtr device, VkExternalMemoryHandleTypeFlagsKhr handleType, IntPtr handle, VkMemoryWin32HandlePropertiesKhr* pMemoryWin32HandleProperties);

        [DllImport(VulkanLibrary, CallingConvention = CallingConvention.Winapi)]
        internal static unsafe extern VkResult vkGetMemoryFdKHR(IntPtr device, VkMemoryGetFdInfoKhr* pGetFdInfo, int* pFd);

        [DllImport(VulkanLibrary, CallingConvention = CallingConvention.Winapi)]
        internal static unsafe extern VkResult vkGetMemoryFdPropertiesKHR(IntPtr device, VkExternalMemoryHandleTypeFlagsKhr handleType, int fd, VkMemoryFdPropertiesKhr* pMemoryFdProperties);

        [DllImport(VulkanLibrary, CallingConvention = CallingConvention.Winapi)]
        internal static unsafe extern void vkGetPhysicalDeviceExternalSemaphorePropertiesKHR(IntPtr physicalDevice, VkPhysicalDeviceExternalSemaphoreInfoKhr* pExternalSemaphoreInfo, VkExternalSemaphorePropertiesKhr* pExternalSemaphoreProperties);

        [DllImport(VulkanLibrary, CallingConvention = CallingConvention.Winapi)]
        internal static unsafe extern VkResult vkGetSemaphoreWin32HandleKHR(IntPtr device, VkSemaphoreGetWin32HandleInfoKhr* pGetWin32HandleInfo, IntPtr* pHandle);

        [DllImport(VulkanLibrary, CallingConvention = CallingConvention.Winapi)]
        internal static unsafe extern VkResult vkGetSemaphoreFdKHR(IntPtr device, VkSemaphoreGetFdInfoKhr* pGetFdInfo, int* pFd);

        [DllImport(VulkanLibrary, CallingConvention = CallingConvention.Winapi)]
        internal static unsafe extern VkResult vkImportSemaphoreFdKHR(IntPtr device, VkImportSemaphoreFdInfoKhr* pImportSemaphoreFdInfo);

        [DllImport(VulkanLibrary, CallingConvention = CallingConvention.Winapi)]
        internal static unsafe extern void vkGetPhysicalDeviceExternalFencePropertiesKHR(IntPtr physicalDevice, VkPhysicalDeviceExternalFenceInfoKhr* pExternalFenceInfo, VkExternalFencePropertiesKhr* pExternalFenceProperties);

        [DllImport(VulkanLibrary, CallingConvention = CallingConvention.Winapi)]
        internal static unsafe extern VkResult vkGetFenceWin32HandleKHR(IntPtr device, VkFenceGetWin32HandleInfoKhr* pGetWin32HandleInfo, IntPtr* pHandle);

        [DllImport(VulkanLibrary, CallingConvention = CallingConvention.Winapi)]
        internal static unsafe extern VkResult vkGetFenceFdKHR(IntPtr device, VkFenceGetFdInfoKhr* pGetFdInfo, int* pFd);

        [DllImport(VulkanLibrary, CallingConvention = CallingConvention.Winapi)]
        internal static unsafe extern VkResult vkImportFenceFdKHR(IntPtr device, VkImportFenceFdInfoKhr* pImportFenceFdInfo);

        [DllImport(VulkanLibrary, CallingConvention = CallingConvention.Winapi)]
        internal static unsafe extern VkResult vkReleaseDisplayEXT(IntPtr physicalDevice, UInt64 display);

        [DllImport(VulkanLibrary, CallingConvention = CallingConvention.Winapi)]
        internal static unsafe extern VkResult vkAcquireXlibDisplayEXT(IntPtr physicalDevice, IntPtr* dpy, UInt64 display);

        [DllImport(VulkanLibrary, CallingConvention = CallingConvention.Winapi)]
        internal static unsafe extern VkResult vkGetRandROutputDisplayEXT(IntPtr physicalDevice, IntPtr* dpy, UInt32 rrOutput, UInt64* pDisplay);

        [DllImport(VulkanLibrary, CallingConvention = CallingConvention.Winapi)]
        internal static unsafe extern VkResult vkDisplayPowerControlEXT(IntPtr device, UInt64 display, VkDisplayPowerInfoExt* pDisplayPowerInfo);

        [DllImport(VulkanLibrary, CallingConvention = CallingConvention.Winapi)]
        internal static unsafe extern VkResult vkRegisterDeviceEventEXT(IntPtr device, VkDeviceEventInfoExt* pDeviceEventInfo, VkAllocationCallbacks* pAllocator, UInt64* pFence);

        [DllImport(VulkanLibrary, CallingConvention = CallingConvention.Winapi)]
        internal static unsafe extern VkResult vkRegisterDisplayEventEXT(IntPtr device, UInt64 display, VkDisplayEventInfoExt* pDisplayEventInfo, VkAllocationCallbacks* pAllocator, UInt64* pFence);

        [DllImport(VulkanLibrary, CallingConvention = CallingConvention.Winapi)]
        internal static unsafe extern VkResult vkGetSwapchainCounterEXT(IntPtr device, UInt64 swapchain, VkSurfaceCounterFlagsExt counter, UInt64* pCounterValue);

        [DllImport(VulkanLibrary, CallingConvention = CallingConvention.Winapi)]
        internal static unsafe extern VkResult vkGetPhysicalDeviceSurfaceCapabilities2EXT(IntPtr physicalDevice, UInt64 surface, VkSurfaceCapabilities2Ext* pSurfaceCapabilities);

        [DllImport(VulkanLibrary, CallingConvention = CallingConvention.Winapi)]
        internal static unsafe extern void vkGetDeviceGroupPeerMemoryFeaturesKHX(IntPtr device, UInt32 heapIndex, UInt32 localDeviceIndex, UInt32 remoteDeviceIndex, VkPeerMemoryFeatureFlagsKhx* pPeerMemoryFeatures);

        [DllImport(VulkanLibrary, CallingConvention = CallingConvention.Winapi)]
        internal static unsafe extern VkResult vkBindBufferMemory2KHR(IntPtr device, UInt32 bindInfoCount, VkBindBufferMemoryInfoKhr* pBindInfos);

        [DllImport(VulkanLibrary, CallingConvention = CallingConvention.Winapi)]
        internal static unsafe extern VkResult vkBindImageMemory2KHR(IntPtr device, UInt32 bindInfoCount, VkBindImageMemoryInfoKhr* pBindInfos);

        [DllImport(VulkanLibrary, CallingConvention = CallingConvention.Winapi)]
        internal static unsafe extern void vkCmdSetDeviceMaskKHX(IntPtr commandBuffer, UInt32 deviceMask);

        [DllImport(VulkanLibrary, CallingConvention = CallingConvention.Winapi)]
        internal static unsafe extern VkResult vkGetDeviceGroupPresentCapabilitiesKHX(IntPtr device, VkDeviceGroupPresentCapabilitiesKhx* pDeviceGroupPresentCapabilities);

        [DllImport(VulkanLibrary, CallingConvention = CallingConvention.Winapi)]
        internal static unsafe extern VkResult vkGetDeviceGroupSurfacePresentModesKHX(IntPtr device, UInt64 surface, VkDeviceGroupPresentModeFlagsKhx* pModes);

        [DllImport(VulkanLibrary, CallingConvention = CallingConvention.Winapi)]
        internal static unsafe extern VkResult vkAcquireNextImage2KHX(IntPtr device, VkAcquireNextImageInfoKhx* pAcquireInfo, UInt32* pImageIndex);

        [DllImport(VulkanLibrary, CallingConvention = CallingConvention.Winapi)]
        internal static unsafe extern void vkCmdDispatchBaseKHX(IntPtr commandBuffer, UInt32 baseGroupX, UInt32 baseGroupY, UInt32 baseGroupZ, UInt32 groupCountX, UInt32 groupCountY, UInt32 groupCountZ);

        [DllImport(VulkanLibrary, CallingConvention = CallingConvention.Winapi)]
        internal static unsafe extern VkResult vkGetPhysicalDevicePresentRectanglesKHX(IntPtr physicalDevice, UInt64 surface, UInt32* pRectCount, VkRect2D* pRects);

        [DllImport(VulkanLibrary, CallingConvention = CallingConvention.Winapi)]
        internal static unsafe extern VkResult vkCreateDescriptorUpdateTemplateKHR(IntPtr device, VkDescriptorUpdateTemplateCreateInfoKhr* pCreateInfo, VkAllocationCallbacks* pAllocator, UInt64* pDescriptorUpdateTemplate);

        [DllImport(VulkanLibrary, CallingConvention = CallingConvention.Winapi)]
        internal static unsafe extern void vkDestroyDescriptorUpdateTemplateKHR(IntPtr device, UInt64 descriptorUpdateTemplate, VkAllocationCallbacks* pAllocator);

        [DllImport(VulkanLibrary, CallingConvention = CallingConvention.Winapi)]
        internal static unsafe extern void vkUpdateDescriptorSetWithTemplateKHR(IntPtr device, UInt64 descriptorSet, UInt64 descriptorUpdateTemplate, IntPtr pData);

        [DllImport(VulkanLibrary, CallingConvention = CallingConvention.Winapi)]
        internal static unsafe extern void vkCmdPushDescriptorSetWithTemplateKHR(IntPtr commandBuffer, UInt64 descriptorUpdateTemplate, UInt64 layout, UInt32 set, IntPtr pData);

        [DllImport(VulkanLibrary, CallingConvention = CallingConvention.Winapi)]
        internal static unsafe extern void vkSetHdrMetadataEXT(IntPtr device, UInt32 swapchainCount, UInt64* pSwapchains, VkHdrMetadataExt* pMetadata);

        [DllImport(VulkanLibrary, CallingConvention = CallingConvention.Winapi)]
        internal static unsafe extern VkResult vkGetSwapchainStatusKHR(IntPtr device, UInt64 swapchain);

        [DllImport(VulkanLibrary, CallingConvention = CallingConvention.Winapi)]
        internal static unsafe extern VkResult vkGetRefreshCycleDurationGOOGLE(IntPtr device, UInt64 swapchain, VkRefreshCycleDurationGoogle* pDisplayTimingProperties);

        [DllImport(VulkanLibrary, CallingConvention = CallingConvention.Winapi)]
        internal static unsafe extern VkResult vkGetPastPresentationTimingGOOGLE(IntPtr device, UInt64 swapchain, UInt32* pPresentationTimingCount, VkPastPresentationTimingGoogle* pPresentationTimings);

        [DllImport(VulkanLibrary, CallingConvention = CallingConvention.Winapi)]
        internal static unsafe extern VkResult vkCreateMacOSSurfaceMVK(IntPtr instance, VkMacOSSurfaceCreateInfoMvk* pCreateInfo, VkAllocationCallbacks* pAllocator, UInt64* pSurface);

        [DllImport(VulkanLibrary, CallingConvention = CallingConvention.Winapi)]
        internal static unsafe extern void vkCmdSetViewportWScalingNV(IntPtr commandBuffer, UInt32 firstViewport, UInt32 viewportCount, VkViewportWScalingNv* pViewportWScalings);

        [DllImport(VulkanLibrary, CallingConvention = CallingConvention.Winapi)]
        internal static unsafe extern void vkCmdSetDiscardRectangleEXT(IntPtr commandBuffer, UInt32 firstDiscardRectangle, UInt32 discardRectangleCount, VkRect2D* pDiscardRectangles);

        [DllImport(VulkanLibrary, CallingConvention = CallingConvention.Winapi)]
        internal static unsafe extern void vkCmdSetSampleLocationsEXT(IntPtr commandBuffer, VkSampleLocationsInfoExt* pSampleLocationsInfo);

        [DllImport(VulkanLibrary, CallingConvention = CallingConvention.Winapi)]
        internal static unsafe extern void vkGetPhysicalDeviceMultisamplePropertiesEXT(IntPtr physicalDevice, VkSampleCountFlags samples, VkMultisamplePropertiesExt* pMultisampleProperties);

        [DllImport(VulkanLibrary, CallingConvention = CallingConvention.Winapi)]
        internal static unsafe extern VkResult vkGetPhysicalDeviceSurfaceCapabilities2KHR(IntPtr physicalDevice, VkPhysicalDeviceSurfaceInfo2Khr* pSurfaceInfo, VkSurfaceCapabilities2Khr* pSurfaceCapabilities);

        [DllImport(VulkanLibrary, CallingConvention = CallingConvention.Winapi)]
        internal static unsafe extern VkResult vkGetPhysicalDeviceSurfaceFormats2KHR(IntPtr physicalDevice, VkPhysicalDeviceSurfaceInfo2Khr* pSurfaceInfo, UInt32* pSurfaceFormatCount, VkSurfaceFormat2Khr* pSurfaceFormats);

        [DllImport(VulkanLibrary, CallingConvention = CallingConvention.Winapi)]
        internal static unsafe extern void vkGetBufferMemoryRequirements2KHR(IntPtr device, VkBufferMemoryRequirementsInfo2Khr* pInfo, VkMemoryRequirements2Khr* pMemoryRequirements);

        [DllImport(VulkanLibrary, CallingConvention = CallingConvention.Winapi)]
        internal static unsafe extern void vkGetImageMemoryRequirements2KHR(IntPtr device, VkImageMemoryRequirementsInfo2Khr* pInfo, VkMemoryRequirements2Khr* pMemoryRequirements);

        [DllImport(VulkanLibrary, CallingConvention = CallingConvention.Winapi)]
        internal static unsafe extern void vkGetImageSparseMemoryRequirements2KHR(IntPtr device, VkImageSparseMemoryRequirementsInfo2Khr* pInfo, UInt32* pSparseMemoryRequirementCount, VkSparseImageMemoryRequirements2Khr* pSparseMemoryRequirements);

        [DllImport(VulkanLibrary, CallingConvention = CallingConvention.Winapi)]
        internal static unsafe extern VkResult vkCreateSamplerYcbcrConversionKHR(IntPtr device, VkSamplerYcbcrConversionCreateInfoKhr* pCreateInfo, VkAllocationCallbacks* pAllocator, UInt64* pYcbcrConversion);

        [DllImport(VulkanLibrary, CallingConvention = CallingConvention.Winapi)]
        internal static unsafe extern void vkDestroySamplerYcbcrConversionKHR(IntPtr device, UInt64 ycbcrConversion, VkAllocationCallbacks* pAllocator);

        [DllImport(VulkanLibrary, CallingConvention = CallingConvention.Winapi)]
        internal static unsafe extern VkResult vkCreateValidationCacheEXT(IntPtr device, VkValidationCacheCreateInfoExt* pCreateInfo, VkAllocationCallbacks* pAllocator, UInt64* pValidationCache);

        [DllImport(VulkanLibrary, CallingConvention = CallingConvention.Winapi)]
        internal static unsafe extern void vkDestroyValidationCacheEXT(IntPtr device, UInt64 validationCache, VkAllocationCallbacks* pAllocator);

        [DllImport(VulkanLibrary, CallingConvention = CallingConvention.Winapi)]
        internal static unsafe extern VkResult vkGetValidationCacheDataEXT(IntPtr device, UInt64 validationCache, UIntPtr* pDataSize, IntPtr pData);

        [DllImport(VulkanLibrary, CallingConvention = CallingConvention.Winapi)]
        internal static unsafe extern VkResult vkMergeValidationCachesEXT(IntPtr device, UInt64 dstCache, UInt32 srcCacheCount, UInt64* pSrcCaches);

        [DllImport(VulkanLibrary, CallingConvention = CallingConvention.Winapi)]
        internal static unsafe extern VkResult vkGetSwapchainGrallocUsageANDROID(IntPtr device, VkFormat format, VkImageUsageFlags imageUsage, int* grallocUsage);

        [DllImport(VulkanLibrary, CallingConvention = CallingConvention.Winapi)]
        internal static unsafe extern VkResult vkAcquireImageANDROID(IntPtr device, UInt64 image, int nativeFenceFd, UInt64 semaphore, UInt64 fence);

        [DllImport(VulkanLibrary, CallingConvention = CallingConvention.Winapi)]
        internal static unsafe extern VkResult vkQueueSignalReleaseImageANDROID(IntPtr queue, UInt32 waitSemaphoreCount, UInt64* pWaitSemaphores, UInt64 image, int* pNativeFenceFd);

        [DllImport(VulkanLibrary, CallingConvention = CallingConvention.Winapi)]
        internal static unsafe extern VkResult vkGetShaderInfoAMD(IntPtr device, UInt64 pipeline, VkShaderStageFlags shaderStage, VkShaderInfoTypeAmd infoType, UIntPtr* pInfoSize, IntPtr pInfo);

        [DllImport(VulkanLibrary, CallingConvention = CallingConvention.Winapi)]
        internal static unsafe extern VkResult vkGetMemoryHostPointerPropertiesEXT(IntPtr device, VkExternalMemoryHandleTypeFlagsKhr handleType, IntPtr pHostPointer, VkMemoryHostPointerPropertiesExt* pMemoryHostPointerProperties);

        [DllImport(VulkanLibrary, CallingConvention = CallingConvention.Winapi)]
        internal static unsafe extern void vkCmdWriteBufferMarkerAMD(IntPtr commandBuffer, VkPipelineStageFlags pipelineStage, UInt64 dstBuffer, VkDeviceSize dstOffset, UInt32 marker);
    }
}
