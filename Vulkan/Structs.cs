/* Please note that this file is generated by the VulkanSharp's generator. Do not edit directly.

   Licensed under the MIT license.

   Copyright 2016 Xamarin Inc

   This notice may not be removed from any source distribution.
   See LICENSE file for licensing details.
*/

using System;
using System.Runtime.InteropServices;

namespace Vulkan {
    unsafe public partial struct VkOffset2D {
        public Int32 X;
        public Int32 Y;
        public override string ToString() => $"{X}, {Y}";
    }

    unsafe public partial struct VkOffset3D {
        public Int32 X;
        public Int32 Y;
        public Int32 Z;
        public override string ToString() => $"{X}, {Y}, {Z}";
    }

    unsafe public partial struct VkExtent2D {
        public UInt32 Width;
        public UInt32 Height;
        public override string ToString() => $"{Width}, {Height}";
    }

    unsafe public partial struct VkExtent3D {
        public UInt32 Width;
        public UInt32 Height;
        public UInt32 Depth;

        public override string ToString() => $"{Width}, {Height}, {Depth}";
    }

    unsafe public partial struct VkViewport {
        public float X;
        public float Y;
        public float Width;
        public float Height;
        public float MinDepth;
        public float MaxDepth;
        public override string ToString() => $"{X}, {Y}, {Width}, {Height}, {MinDepth}, {MaxDepth}";
    }

    unsafe public partial struct VkRect2D {
        public VkOffset2D Offset;
        public VkExtent2D Extent;
        public override string ToString() => $"{Offset}, {Extent}";
    }

    unsafe public partial struct VkClearRect {
        public VkRect2D Rect;
        public UInt32 BaseArrayLayer;
        public UInt32 LayerCount;
    }

    unsafe public partial struct VkComponentMapping {
        public VkComponentSwizzle R;
        public VkComponentSwizzle G;
        public VkComponentSwizzle B;
        public VkComponentSwizzle A;
        public override string ToString() => $"{R}, {G}, {B}, {A}";
    }

    unsafe public partial struct VkQueueFamilyProperties {
        public VkQueueFlags QueueFlags;
        public UInt32 QueueCount;
        public UInt32 TimestampValidBits;
        public VkExtent3D MinImageTransferGranularity;

        public override string ToString() {
            return $"{QueueFlags}, {QueueCount}, {TimestampValidBits}, {MinImageTransferGranularity}";
        }
    }

    unsafe public partial struct VkMemoryRequirements {
        public VkDeviceSize Size;
        public VkDeviceSize Alignment;
        public UInt32 MemoryTypeBits;
    }

    unsafe public partial struct VkSparseImageFormatProperties {
        public VkImageAspectFlags AspectMask;
        public VkExtent3D ImageGranularity;
        public VkSparseImageFormatFlags Flags;
    }

    unsafe public partial struct VkSparseImageMemoryRequirements {
        public VkSparseImageFormatProperties FormatProperties;
        public UInt32 ImageMipTailFirstLod;
        public VkDeviceSize ImageMipTailSize;
        public VkDeviceSize ImageMipTailOffset;
        public VkDeviceSize ImageMipTailStride;
    }

    unsafe public partial struct VkMemoryType {
        public VkMemoryPropertyFlags PropertyFlags;
        public UInt32 HeapIndex;

        public override string ToString() {
            return $"{PropertyFlags}, {HeapIndex}";
        }
    }

    unsafe public partial struct VkMemoryHeap {
        public VkDeviceSize Size;
        public VkMemoryHeapFlags Flags;

        public override string ToString() {
            return $"{Size}, {Flags}";
        }
    }


    unsafe public partial struct VkFormatProperties {
        public VkFormatFeatureFlags LinearTilingFeatures;
        public VkFormatFeatureFlags OptimalTilingFeatures;
        public VkFormatFeatureFlags BufferFeatures;
    }

    unsafe public partial struct VkImageFormatProperties {
        public VkExtent3D MaxExtent;
        public UInt32 MaxMipLevels;
        public UInt32 MaxArrayLayers;
        public VkSampleCountFlags SampleCounts;
        public VkDeviceSize MaxResourceSize;
    }







    unsafe public partial struct VkImageSubresource {
        public VkImageAspectFlags AspectMask;
        public UInt32 MipLevel;
        public UInt32 ArrayLayer;
    }

    unsafe public partial struct VkImageSubresourceLayers {
        public VkImageAspectFlags AspectMask;
        public UInt32 MipLevel;
        public UInt32 BaseArrayLayer;
        public UInt32 LayerCount;
    }

    unsafe public partial struct VkImageSubresourceRange {
        public VkImageAspectFlags AspectMask;
        public UInt32 BaseMipLevel;
        public UInt32 LevelCount;
        public UInt32 BaseArrayLayer;
        public UInt32 LayerCount;
    }





    unsafe public partial struct VkSubresourceLayout {
        public VkDeviceSize Offset;
        public VkDeviceSize Size;
        public VkDeviceSize RowPitch;
        public VkDeviceSize ArrayPitch;
        public VkDeviceSize DepthPitch;
    }


    unsafe public partial struct VkBufferCopy {
        public VkDeviceSize SrcOffset;
        public VkDeviceSize DstOffset;
        public VkDeviceSize Size;
    }







    unsafe public partial struct VkImageCopy {
        public VkImageSubresourceLayers SrcSubresource;
        public VkOffset3D SrcOffset;
        public VkImageSubresourceLayers DstSubresource;
        public VkOffset3D DstOffset;
        public VkExtent3D Extent;
    }


    unsafe public partial struct VkBufferImageCopy {
        public VkDeviceSize BufferOffset;
        public UInt32 BufferRowLength;
        public UInt32 BufferImageHeight;
        public VkImageSubresourceLayers ImageSubresource;
        public VkOffset3D ImageOffset;
        public VkExtent3D ImageExtent;
    }

    unsafe public partial struct VkImageResolve {
        public VkImageSubresourceLayers SrcSubresource;
        public VkOffset3D SrcOffset;
        public VkImageSubresourceLayers DstSubresource;
        public VkOffset3D DstOffset;
        public VkExtent3D Extent;
    }




    unsafe public partial struct VkDescriptorPoolSize {
        public VkDescriptorType Type;
        public UInt32 DescriptorCount;
    }



    unsafe public partial struct VkSpecializationMapEntry {
        public UInt32 ConstantId;
        public UInt32 Offset;
        public UIntPtr Size;
    }




    unsafe public partial struct VkVertexInputBindingDescription {
        public UInt32 Binding;
        public UInt32 Stride;
        public VkVertexInputRate InputRate;
    }

    unsafe public partial struct VkVertexInputAttributeDescription {
        public UInt32 Location;
        public UInt32 Binding;
        public VkFormat Format;
        public UInt32 Offset;
    }







    unsafe public partial struct VkPipelineColorBlendAttachmentState {
        public VkBool32 BlendEnable;
        public VkBlendFactor SrcColorBlendFactor;
        public VkBlendFactor DstColorBlendFactor;
        public VkBlendOp ColorBlendOp;
        public VkBlendFactor SrcAlphaBlendFactor;
        public VkBlendFactor DstAlphaBlendFactor;
        public VkBlendOp AlphaBlendOp;
        public VkColorComponentFlags ColorWriteMask;
    }



    unsafe public partial struct VkStencilOpState {
        public VkStencilOp FailOp;
        public VkStencilOp PassOp;
        public VkStencilOp DepthFailOp;
        public VkCompareOp CompareOp;
        public UInt32 CompareMask;
        public UInt32 WriteMask;
        public UInt32 Reference;
    }




    unsafe public partial struct VkPushConstantRange {
        public VkShaderStageFlags StageFlags;
        public UInt32 Offset;
        public UInt32 Size;
    }








    unsafe public partial struct VkClearDepthStencilValue {
        public float Depth;
        public UInt32 Stencil;
    }


    unsafe public partial struct VkAttachmentDescription {
        public VkAttachmentDescriptionFlags Flags;
        public VkFormat Format;
        public VkSampleCountFlags Samples;
        public VkAttachmentLoadOp LoadOp;
        public VkAttachmentStoreOp StoreOp;
        public VkAttachmentLoadOp StencilLoadOp;
        public VkAttachmentStoreOp StencilStoreOp;
        public VkImageLayout InitialLayout;
        public VkImageLayout FinalLayout;
    }

    unsafe public partial struct VkAttachmentReference {
        public UInt32 Attachment;
        public VkImageLayout Layout;
    }


    unsafe public partial struct VkSubpassDependency {
        public UInt32 SrcSubpass;
        public UInt32 DstSubpass;
        public VkPipelineStageFlags SrcStageMask;
        public VkPipelineStageFlags DstStageMask;
        public VkAccessFlags SrcAccessMask;
        public VkAccessFlags DstAccessMask;
        public VkDependencyFlags DependencyFlags;
    }




    unsafe public partial struct VkPhysicalDeviceFeatures {
        public VkBool32 RobustBufferAccess;
        public VkBool32 FullDrawIndexUint32;
        public VkBool32 ImageCubeArray;
        public VkBool32 IndependentBlend;
        public VkBool32 GeometryShader;
        public VkBool32 TessellationShader;
        public VkBool32 SampleRateShading;
        public VkBool32 DualSrcBlend;
        public VkBool32 LogicOp;
        public VkBool32 MultiDrawIndirect;
        public VkBool32 DrawIndirectFirstInstance;
        public VkBool32 DepthClamp;
        public VkBool32 DepthBiasClamp;
        public VkBool32 FillModeNonSolid;
        public VkBool32 DepthBounds;
        public VkBool32 WideLines;
        public VkBool32 LargePoints;
        public VkBool32 AlphaToOne;
        public VkBool32 MultiViewport;
        public VkBool32 SamplerAnisotropy;
        public VkBool32 TextureCompressionEtc2;
        public VkBool32 TextureCompressionAstcLdr;
        public VkBool32 TextureCompressionBc;
        public VkBool32 OcclusionQueryPrecise;
        public VkBool32 PipelineStatisticsQuery;
        public VkBool32 VertexPipelineStoresAndAtomics;
        public VkBool32 FragmentStoresAndAtomics;
        public VkBool32 ShaderTessellationAndGeometryPointSize;
        public VkBool32 ShaderImageGatherExtended;
        public VkBool32 ShaderStorageImageExtendedFormats;
        public VkBool32 ShaderStorageImageMultisample;
        public VkBool32 ShaderStorageImageReadWithoutFormat;
        public VkBool32 ShaderStorageImageWriteWithoutFormat;
        public VkBool32 ShaderUniformBufferArrayDynamicIndexing;
        public VkBool32 ShaderSampledImageArrayDynamicIndexing;
        public VkBool32 ShaderStorageBufferArrayDynamicIndexing;
        public VkBool32 ShaderStorageImageArrayDynamicIndexing;
        public VkBool32 ShaderClipDistance;
        public VkBool32 ShaderCullDistance;
        public VkBool32 ShaderFloat64;
        public VkBool32 ShaderInt64;
        public VkBool32 ShaderInt16;
        public VkBool32 ShaderResourceResidency;
        public VkBool32 ShaderResourceMinLod;
        public VkBool32 SparseBinding;
        public VkBool32 SparseResidencyBuffer;
        public VkBool32 SparseResidencyImage2D;
        public VkBool32 SparseResidencyImage3D;
        public VkBool32 SparseResidency2Samples;
        public VkBool32 SparseResidency4Samples;
        public VkBool32 SparseResidency8Samples;
        public VkBool32 SparseResidency16Samples;
        public VkBool32 SparseResidencyAliased;
        public VkBool32 VariableMultisampleRate;
        public VkBool32 InheritedQueries;
    }

    unsafe public partial struct VkPhysicalDeviceSparseProperties {
        public VkBool32 ResidencyStandard2DBlockShape;
        public VkBool32 ResidencyStandard2DMultisampleBlockShape;
        public VkBool32 ResidencyStandard3DBlockShape;
        public VkBool32 ResidencyAlignedMipSize;
        public VkBool32 ResidencyNonResidentStrict;
    }





    unsafe public partial struct VkDrawIndirectCommand {
        public UInt32 VertexCount;
        public UInt32 InstanceCount;
        public UInt32 FirstVertex;
        public UInt32 FirstInstance;
    }

    unsafe public partial struct VkDrawIndexedIndirectCommand {
        public UInt32 IndexCount;
        public UInt32 InstanceCount;
        public UInt32 FirstIndex;
        public Int32 VertexOffset;
        public UInt32 FirstInstance;
    }

    unsafe public partial struct VkDispatchIndirectCommand {
        public UInt32 X;
        public UInt32 Y;
        public UInt32 Z;
    }




    unsafe public partial struct VkDisplayModeParametersKhr {
        public VkExtent2D VisibleRegion;
        public UInt32 RefreshRate;
    }



    unsafe public partial struct VkDisplayPlaneCapabilitiesKhr {
        public VkDisplayPlaneAlphaFlagsKhr SupportedAlpha;
        public VkOffset2D MinSrcPosition;
        public VkOffset2D MaxSrcPosition;
        public VkExtent2D MinSrcExtent;
        public VkExtent2D MaxSrcExtent;
        public VkOffset2D MinDstPosition;
        public VkOffset2D MaxDstPosition;
        public VkExtent2D MinDstExtent;
        public VkExtent2D MaxDstExtent;
    }



    unsafe public partial struct VkSurfaceCapabilitiesKhr {
        public UInt32 MinImageCount;
        public UInt32 MaxImageCount;
        public VkExtent2D CurrentExtent;
        public VkExtent2D MinImageExtent;
        public VkExtent2D MaxImageExtent;
        public UInt32 MaxImageArrayLayers;
        public VkSurfaceTransformFlagsKhr SupportedTransforms;
        public VkSurfaceTransformFlagsKhr CurrentTransform;
        public VkCompositeAlphaFlagsKhr SupportedCompositeAlpha;
        public VkImageUsageFlags SupportedUsageFlags;
    }








    unsafe public partial struct VkSurfaceFormatKhr {
        public VkFormat Format;
        public VkColorSpaceKhr ColorSpace;
    }












    unsafe public partial struct VkExternalImageFormatPropertiesNv {
        public VkImageFormatProperties ImageFormatProperties;
        public VkExternalMemoryFeatureFlagsNv ExternalMemoryFeatures;
        public VkExternalMemoryHandleTypeFlagsNv ExportFromImportedHandleTypes;
        public VkExternalMemoryHandleTypeFlagsNv CompatibleHandleTypes;
    }









    unsafe public partial struct VkIndirectCommandsLayoutTokenNvx {
        public VkIndirectCommandsTokenTypeNvx TokenType;
        public UInt32 BindingUnit;
        public UInt32 DynamicCount;
        public UInt32 Divisor;
    }





    unsafe public partial struct VkObjectTableEntryNvx {
        public VkObjectEntryTypeNvx Type;
        public VkObjectEntryUsageFlagsNvx Flags;
    }


















    unsafe public partial struct VkRectLayerKhr {
        public VkOffset2D Offset;
        public VkExtent2D Extent;
        public UInt32 Layer;
    }


    unsafe public partial struct VkExternalMemoryPropertiesKhr {
        public VkExternalMemoryFeatureFlagsKhr ExternalMemoryFeatures;
        public VkExternalMemoryHandleTypeFlagsKhr ExportFromImportedHandleTypes;
        public VkExternalMemoryHandleTypeFlagsKhr CompatibleHandleTypes;
    }



























































    unsafe public partial struct VkDescriptorUpdateTemplateEntryKhr {
        public UInt32 DstBinding;
        public UInt32 DstArrayElement;
        public UInt32 DescriptorCount;
        public VkDescriptorType DescriptorType;
        public UIntPtr Offset;
        public UIntPtr Stride;
    }


    unsafe public partial struct VkXYColorExt {
        public float X;
        public float Y;
    }


    unsafe public partial struct VkRefreshCycleDurationGoogle {
        public UInt64 RefreshDuration;
    }

    unsafe public partial struct VkPastPresentationTimingGoogle {
        public UInt32 PresentId;
        public UInt64 DesiredPresentTime;
        public UInt64 ActualPresentTime;
        public UInt64 EarliestPresentTime;
        public UInt64 PresentMargin;
    }


    unsafe public partial struct VkPresentTimeGoogle {
        public UInt32 PresentId;
        public UInt64 DesiredPresentTime;
    }



    unsafe public partial struct VkViewportWScalingNv {
        public float Xcoeff;
        public float Ycoeff;
    }


    unsafe public partial struct VkViewportSwizzleNv {
        public VkViewportCoordinateSwizzleNv X;
        public VkViewportCoordinateSwizzleNv Y;
        public VkViewportCoordinateSwizzleNv Z;
        public VkViewportCoordinateSwizzleNv W;
    }





    unsafe public partial struct VkInputAttachmentAspectReferenceKhr {
        public UInt32 Subpass;
        public UInt32 InputAttachmentIndex;
        public VkImageAspectFlags AspectMask;
    }


























    unsafe public partial struct VkSampleLocationExt {
        public float X;
        public float Y;
    }

















    unsafe public partial struct VkShaderResourceUsageAmd {
        public UInt32 NumUsedVgprs;
        public UInt32 NumUsedSgprs;
        public UInt32 LdsSizePerLocalWorkGroup;
        public UIntPtr LdsUsageSizeInBytes;
        public UIntPtr ScratchMemUsageInBytes;
    }






    [StructLayout(LayoutKind.Explicit)]
    unsafe public partial struct VkClearColorValue {
        [FieldOffset(0)] public unsafe fixed float Float32[4];
        [FieldOffset(0)] public unsafe fixed Int32 Int32[4];
        [FieldOffset(0)] public unsafe fixed UInt32 Uint32[4];

        public VkClearColorValue(float r, float g, float b, float a) : this() {
            fixed (float* pointer = Float32) {
                pointer[0] = r;
                pointer[1] = g;
                pointer[2] = b;
                pointer[3] = a;
            }
        }

        public VkClearColorValue(Int32 r, Int32 g, Int32 b, Int32 a) : this() {
            fixed (Int32* pointer = Int32) {
                pointer[0] = r;
                pointer[1] = g;
                pointer[2] = b;
                pointer[3] = a;
            }
        }

        public VkClearColorValue(UInt32 r, UInt32 g, UInt32 b, UInt32 a) : this() {
            fixed (UInt32* pointer = Uint32) {
                pointer[0] = r;
                pointer[1] = g;
                pointer[2] = b;
                pointer[3] = a;
            }
        }
    }

    [StructLayout(LayoutKind.Explicit)]
    public partial struct VkClearValue {
        [FieldOffset(0)] public VkClearColorValue Color;
        [FieldOffset(0)] public VkClearDepthStencilValue DepthStencil;
    }

    public struct VkBool32 {
        UInt32 value;

        public VkBool32(bool bValue) {
            value = bValue ? 1u : 0;
        }

        public static implicit operator VkBool32(bool bValue) {
            return new VkBool32(bValue);
        }

        public static implicit operator bool(VkBool32 bValue) {
            return bValue.value == 0 ? false : true;
        }
    }

    public struct VkDeviceSize {
        UInt64 value;

        public static implicit operator VkDeviceSize(UInt64 iValue) {
            return new VkDeviceSize { value = iValue };
        }

        public static implicit operator VkDeviceSize(uint iValue) {
            return new VkDeviceSize { value = iValue };
        }

        public static implicit operator VkDeviceSize(int iValue) {
            return new VkDeviceSize { value = (ulong)iValue };
        }

        public static implicit operator UInt64(VkDeviceSize size) {
            return size.value;
        }

        public override string ToString() {
            return $"{value}";
        }
    }

}
